
NUCLEO_SinePWM_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ef4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800618c  0800618c  0000718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061c0  080061c0  00008154  2**0
                  CONTENTS
  4 .ARM          00000008  080061c0  080061c0  000071c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061c8  080061c8  00008154  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061c8  080061c8  000071c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000154  24000000  080061d0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  24000158  08006324  00008158  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240002c8  08006324  000082c8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008154  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162c6  00000000  00000000  00008182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fd  00000000  00000000  0001e448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001118  00000000  00000000  00020b48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d5b  00000000  00000000  00021c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a9a4  00000000  00000000  000229bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016130  00000000  00000000  0005d35f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001871aa  00000000  00000000  0007348f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fa639  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  001fa67c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001fef18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000158 	.word	0x24000158
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006174 	.word	0x08006174

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400015c 	.word	0x2400015c
 80002d4:	08006174 	.word	0x08006174

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b4c      	ldr	r3, [pc, #304]	@ (8000834 <main+0x140>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fbbd 	bl	8000e9c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 feb5 	bl	8001490 <HAL_Init>
  /* Clean Data Cache to update the content of the SRAM to be used by the DMA */
    //SCB_CleanDCache_by_Addr((uint32_t *) DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize );
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f88f 	bl	8000848 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b42      	ldr	r3, [pc, #264]	@ (8000834 <main+0x140>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a40      	ldr	r2, [pc, #256]	@ (8000834 <main+0x140>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b3e      	ldr	r3, [pc, #248]	@ (8000834 <main+0x140>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 fa9d 	bl	8001c88 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fab3 	bl	8001cbc <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b35      	ldr	r3, [pc, #212]	@ (8000834 <main+0x140>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fb8f 	bl	8000e9c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa15 	bl	8000bac <MX_GPIO_Init>
  MX_TIM1_Init();
 8000782:	f000 f8dd 	bl	8000940 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000786:	f000 f99f 	bl	8000ac8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT( &htim1 );
 800078a:	482b      	ldr	r0, [pc, #172]	@ (8000838 <main+0x144>)
 800078c:	f002 fe00 	bl	8003390 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT( &htim4 );
 8000790:	482a      	ldr	r0, [pc, #168]	@ (800083c <main+0x148>)
 8000792:	f002 fdfd 	bl	8003390 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000796:	2100      	movs	r1, #0
 8000798:	4827      	ldr	r0, [pc, #156]	@ (8000838 <main+0x144>)
 800079a:	f002 fed3 	bl	8003544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 800079e:	2100      	movs	r1, #0
 80007a0:	4825      	ldr	r0, [pc, #148]	@ (8000838 <main+0x144>)
 80007a2:	f004 fac7 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 80007a6:	2104      	movs	r1, #4
 80007a8:	4823      	ldr	r0, [pc, #140]	@ (8000838 <main+0x144>)
 80007aa:	f002 fecb 	bl	8003544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 80007ae:	2104      	movs	r1, #4
 80007b0:	4821      	ldr	r0, [pc, #132]	@ (8000838 <main+0x144>)
 80007b2:	f004 fabf 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 80007b6:	2108      	movs	r1, #8
 80007b8:	481f      	ldr	r0, [pc, #124]	@ (8000838 <main+0x144>)
 80007ba:	f002 fec3 	bl	8003544 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 80007be:	2108      	movs	r1, #8
 80007c0:	481d      	ldr	r0, [pc, #116]	@ (8000838 <main+0x144>)
 80007c2:	f004 fab7 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 80007c6:	2100      	movs	r1, #0
 80007c8:	481c      	ldr	r0, [pc, #112]	@ (800083c <main+0x148>)
 80007ca:	f003 f82b 	bl	8003824 <HAL_TIM_IC_Start_IT>
  counter_ = __HAL_TIM_GET_COUNTER(&htim4);
 80007ce:	4b1b      	ldr	r3, [pc, #108]	@ (800083c <main+0x148>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80007d4:	2200      	movs	r2, #0
 80007d6:	461c      	mov	r4, r3
 80007d8:	4615      	mov	r5, r2
 80007da:	4b19      	ldr	r3, [pc, #100]	@ (8000840 <main+0x14c>)
 80007dc:	e9c3 4500 	strd	r4, r5, [r3]
  //HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_3, DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
  //HAL_TIMEx_PWMN_Start_DMA(&htim1, TIM_CHANNEL_3, DiscontinuousSineCCRValue_Buffer, CCRValue_BufferSize);
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 fc8d 	bl	8001100 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007e6:	2001      	movs	r0, #1
 80007e8:	f000 fc8a 	bl	8001100 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007ec:	2002      	movs	r0, #2
 80007ee:	f000 fc87 	bl	8001100 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007f2:	2101      	movs	r1, #1
 80007f4:	2000      	movs	r0, #0
 80007f6:	f000 fcf9 	bl	80011ec <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007fa:	4b12      	ldr	r3, [pc, #72]	@ (8000844 <main+0x150>)
 80007fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000800:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <main+0x150>)
 8000804:	2200      	movs	r2, #0
 8000806:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000808:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <main+0x150>)
 800080a:	2200      	movs	r2, #0
 800080c:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <main+0x150>)
 8000810:	2200      	movs	r2, #0
 8000812:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000814:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <main+0x150>)
 8000816:	2200      	movs	r2, #0
 8000818:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800081a:	490a      	ldr	r1, [pc, #40]	@ (8000844 <main+0x150>)
 800081c:	2000      	movs	r0, #0
 800081e:	f000 fd75 	bl	800130c <BSP_COM_Init>
 8000822:	4603      	mov	r3, r0
 8000824:	2b00      	cmp	r3, #0
 8000826:	d002      	beq.n	800082e <main+0x13a>
  {
    Error_Handler();
 8000828:	f000 fb38 	bl	8000e9c <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	e7fd      	b.n	800082e <main+0x13a>
 8000832:	bf00      	nop
 8000834:	58024400 	.word	0x58024400
 8000838:	24000184 	.word	0x24000184
 800083c:	240001d0 	.word	0x240001d0
 8000840:	24000220 	.word	0x24000220
 8000844:	24000174 	.word	0x24000174

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f005 fc60 	bl	800611c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f005 fc5a 	bl	800611c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000868:	2002      	movs	r0, #2
 800086a:	f001 fa3b 	bl	8001ce4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <SystemClock_Config+0xf0>)
 8000874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000876:	4a30      	ldr	r2, [pc, #192]	@ (8000938 <SystemClock_Config+0xf0>)
 8000878:	f023 0301 	bic.w	r3, r3, #1
 800087c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800087e:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <SystemClock_Config+0xf0>)
 8000880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000882:	f003 0301 	and.w	r3, r3, #1
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <SystemClock_Config+0xf4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a2b      	ldr	r2, [pc, #172]	@ (800093c <SystemClock_Config+0xf4>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b29      	ldr	r3, [pc, #164]	@ (800093c <SystemClock_Config+0xf4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80008a0:	bf00      	nop
 80008a2:	4b26      	ldr	r3, [pc, #152]	@ (800093c <SystemClock_Config+0xf4>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008ae:	d1f8      	bne.n	80008a2 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b0:	2302      	movs	r3, #2
 80008b2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008b4:	2301      	movs	r3, #1
 80008b6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b8:	2340      	movs	r3, #64	@ 0x40
 80008ba:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008bc:	2302      	movs	r3, #2
 80008be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c0:	2300      	movs	r3, #0
 80008c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008c4:	2304      	movs	r3, #4
 80008c6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008c8:	2332      	movs	r3, #50	@ 0x32
 80008ca:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008d0:	2305      	movs	r3, #5
 80008d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d8:	230c      	movs	r3, #12
 80008da:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008dc:	2300      	movs	r3, #0
 80008de:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008e0:	2300      	movs	r3, #0
 80008e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 fa55 	bl	8001d98 <HAL_RCC_OscConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008f4:	f000 fad2 	bl	8000e9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f8:	233f      	movs	r3, #63	@ 0x3f
 80008fa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008fc:	2303      	movs	r3, #3
 80008fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000904:	2308      	movs	r3, #8
 8000906:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000908:	2340      	movs	r3, #64	@ 0x40
 800090a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000914:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000916:	2340      	movs	r3, #64	@ 0x40
 8000918:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2102      	movs	r1, #2
 800091e:	4618      	mov	r0, r3
 8000920:	f001 fe94 	bl	800264c <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800092a:	f000 fab7 	bl	8000e9c <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3770      	adds	r7, #112	@ 0x70
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	58000400 	.word	0x58000400
 800093c:	58024800 	.word	0x58024800

08000940 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b09a      	sub	sp, #104	@ 0x68
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000960:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000964:	2200      	movs	r2, #0
 8000966:	601a      	str	r2, [r3, #0]
 8000968:	605a      	str	r2, [r3, #4]
 800096a:	609a      	str	r2, [r3, #8]
 800096c:	60da      	str	r2, [r3, #12]
 800096e:	611a      	str	r2, [r3, #16]
 8000970:	615a      	str	r2, [r3, #20]
 8000972:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000974:	1d3b      	adds	r3, r7, #4
 8000976:	222c      	movs	r2, #44	@ 0x2c
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fbce 	bl	800611c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000980:	4b4f      	ldr	r3, [pc, #316]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000982:	4a50      	ldr	r2, [pc, #320]	@ (8000ac4 <MX_TIM1_Init+0x184>)
 8000984:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000986:	4b4e      	ldr	r3, [pc, #312]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000988:	2200      	movs	r2, #0
 800098a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800098c:	4b4c      	ldr	r3, [pc, #304]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 800098e:	2220      	movs	r2, #32
 8000990:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000 - 1;
 8000992:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000994:	f247 522f 	movw	r2, #29999	@ 0x752f
 8000998:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800099a:	4b49      	ldr	r3, [pc, #292]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009a0:	4b47      	ldr	r3, [pc, #284]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80009a6:	4b46      	ldr	r3, [pc, #280]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ac:	4844      	ldr	r0, [pc, #272]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009ae:	f002 fc97 	bl	80032e0 <HAL_TIM_Base_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009b8:	f000 fa70 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009c2:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009c6:	4619      	mov	r1, r3
 80009c8:	483d      	ldr	r0, [pc, #244]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009ca:	f003 fb33 	bl	8004034 <HAL_TIM_ConfigClockSource>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009d4:	f000 fa62 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009d8:	4839      	ldr	r0, [pc, #228]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009da:	f002 fd51 	bl	8003480 <HAL_TIM_PWM_Init>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009e4:	f000 fa5a 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e8:	2300      	movs	r3, #0
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009ec:	2300      	movs	r3, #0
 80009ee:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009f4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009f8:	4619      	mov	r1, r3
 80009fa:	4831      	ldr	r0, [pc, #196]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 80009fc:	f004 fa5c 	bl	8004eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000a06:	f000 fa49 	bl	8000e9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a0a:	2360      	movs	r3, #96	@ 0x60
 8000a0c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a12:	2300      	movs	r3, #0
 8000a14:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a16:	2300      	movs	r3, #0
 8000a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a22:	2300      	movs	r3, #0
 8000a24:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	4824      	ldr	r0, [pc, #144]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000a30:	f003 f9ec 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a3a:	f000 fa2f 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a3e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a42:	2204      	movs	r2, #4
 8000a44:	4619      	mov	r1, r3
 8000a46:	481e      	ldr	r0, [pc, #120]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000a48:	f003 f9e0 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d001      	beq.n	8000a56 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a52:	f000 fa23 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a56:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a5a:	2208      	movs	r2, #8
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4818      	ldr	r0, [pc, #96]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000a60:	f003 f9d4 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a6a:	f000 fa17 	bl	8000e9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a82:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a86:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a90:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a94:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4807      	ldr	r0, [pc, #28]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000aa4:	f004 fa96 	bl	8004fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000aae:	f000 f9f5 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ab2:	4803      	ldr	r0, [pc, #12]	@ (8000ac0 <MX_TIM1_Init+0x180>)
 8000ab4:	f000 fa7c 	bl	8000fb0 <HAL_TIM_MspPostInit>

}
 8000ab8:	bf00      	nop
 8000aba:	3768      	adds	r7, #104	@ 0x68
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	24000184 	.word	0x24000184
 8000ac4:	40010000 	.word	0x40010000

08000ac8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b08c      	sub	sp, #48	@ 0x30
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
 8000ad6:	605a      	str	r2, [r3, #4]
 8000ad8:	609a      	str	r2, [r3, #8]
 8000ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ae8:	1d3b      	adds	r3, r7, #4
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000af4:	4b2b      	ldr	r3, [pc, #172]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000af6:	4a2c      	ldr	r2, [pc, #176]	@ (8000ba8 <MX_TIM4_Init+0xe0>)
 8000af8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8000afa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000afc:	22c7      	movs	r2, #199	@ 0xc7
 8000afe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b00:	4b28      	ldr	r3, [pc, #160]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 800-1;
 8000b06:	4b27      	ldr	r3, [pc, #156]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b08:	f240 321f 	movw	r2, #799	@ 0x31f
 8000b0c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b14:	4b23      	ldr	r3, [pc, #140]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b1a:	4822      	ldr	r0, [pc, #136]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b1c:	f002 fbe0 	bl	80032e0 <HAL_TIM_Base_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8000b26:	f000 f9b9 	bl	8000e9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b2a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b2e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4619      	mov	r1, r3
 8000b36:	481b      	ldr	r0, [pc, #108]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b38:	f003 fa7c 	bl	8004034 <HAL_TIM_ConfigClockSource>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000b42:	f000 f9ab 	bl	8000e9c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b46:	4817      	ldr	r0, [pc, #92]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b48:	f002 fe0a 	bl	8003760 <HAL_TIM_IC_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8000b52:	f000 f9a3 	bl	8000e9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b56:	2300      	movs	r3, #0
 8000b58:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	480f      	ldr	r0, [pc, #60]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b66:	f004 f9a7 	bl	8004eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 8000b70:	f000 f994 	bl	8000e9c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2200      	movs	r2, #0
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	@ (8000ba4 <MX_TIM4_Init+0xdc>)
 8000b8c:	f003 f8a1 	bl	8003cd2 <HAL_TIM_IC_ConfigChannel>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 8000b96:	f000 f981 	bl	8000e9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	@ 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	240001d0 	.word	0x240001d0
 8000ba8:	40000800 	.word	0x40000800

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	@ 0x30
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b58      	ldr	r3, [pc, #352]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc8:	4a56      	ldr	r2, [pc, #344]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bd2:	4b54      	ldr	r3, [pc, #336]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be0:	4b50      	ldr	r3, [pc, #320]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be6:	4a4f      	ldr	r2, [pc, #316]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000be8:	f043 0301 	orr.w	r3, r3, #1
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf0:	4b4c      	ldr	r3, [pc, #304]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bfe:	4b49      	ldr	r3, [pc, #292]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c04:	4a47      	ldr	r2, [pc, #284]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c06:	f043 0310 	orr.w	r3, r3, #16
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c0e:	4b45      	ldr	r3, [pc, #276]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1c:	4b41      	ldr	r3, [pc, #260]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c22:	4a40      	ldr	r2, [pc, #256]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c24:	f043 0302 	orr.w	r3, r3, #2
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c2c:	4b3d      	ldr	r3, [pc, #244]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c40:	4a38      	ldr	r2, [pc, #224]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c42:	f043 0308 	orr.w	r3, r3, #8
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c4a:	4b36      	ldr	r3, [pc, #216]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c50:	f003 0308 	and.w	r3, r3, #8
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c58:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5e:	4a31      	ldr	r2, [pc, #196]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c68:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <MX_GPIO_Init+0x178>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c76:	2332      	movs	r3, #50	@ 0x32
 8000c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c82:	2300      	movs	r3, #0
 8000c84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c86:	230b      	movs	r3, #11
 8000c88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4825      	ldr	r0, [pc, #148]	@ (8000d28 <MX_GPIO_Init+0x17c>)
 8000c92:	f000 fe2f 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c96:	2386      	movs	r3, #134	@ 0x86
 8000c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ca6:	230b      	movs	r3, #11
 8000ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	481e      	ldr	r0, [pc, #120]	@ (8000d2c <MX_GPIO_Init+0x180>)
 8000cb2:	f000 fe1f 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cc8:	230b      	movs	r3, #11
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4817      	ldr	r0, [pc, #92]	@ (8000d30 <MX_GPIO_Init+0x184>)
 8000cd4:	f000 fe0e 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000cd8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cdc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cde:	2302      	movs	r3, #2
 8000ce0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cea:	230a      	movs	r3, #10
 8000cec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480d      	ldr	r0, [pc, #52]	@ (8000d2c <MX_GPIO_Init+0x180>)
 8000cf6:	f000 fdfd 	bl	80018f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cfa:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	4619      	mov	r1, r3
 8000d16:	4807      	ldr	r0, [pc, #28]	@ (8000d34 <MX_GPIO_Init+0x188>)
 8000d18:	f000 fdec 	bl	80018f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3730      	adds	r7, #48	@ 0x30
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	58024400 	.word	0x58024400
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	58020000 	.word	0x58020000
 8000d30:	58020400 	.word	0x58020400
 8000d34:	58021800 	.word	0x58021800

08000d38 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	//_duty = CCRValue_7500[_index];
	if (step < 6)
 8000d40:	490c      	ldr	r1, [pc, #48]	@ (8000d74 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d42:	7809      	ldrb	r1, [r1, #0]
 8000d44:	b2c9      	uxtb	r1, r1
 8000d46:	2905      	cmp	r1, #5
 8000d48:	d901      	bls.n	8000d4e <HAL_TIM_IC_CaptureCallback+0x16>
	{
		//SetCommutationStep(step,_duty);
		//step++;
	}
	else if (step == 6) {
 8000d4a:	490a      	ldr	r1, [pc, #40]	@ (8000d74 <HAL_TIM_IC_CaptureCallback+0x3c>)
 8000d4c:	7809      	ldrb	r1, [r1, #0]
			//step = 0;
	}
	//++_index;
	counter_ = __HAL_TIM_GET_COUNTER(htim);
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	6809      	ldr	r1, [r1, #0]
 8000d52:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8000d54:	2000      	movs	r0, #0
 8000d56:	460a      	mov	r2, r1
 8000d58:	4603      	mov	r3, r0
 8000d5a:	4907      	ldr	r1, [pc, #28]	@ (8000d78 <HAL_TIM_IC_CaptureCallback+0x40>)
 8000d5c:	e9c1 2300 	strd	r2, r3, [r1]
	//if(_index == CCRValue_BufferSize) _index = 0;
	__HAL_TIM_SET_COUNTER(htim , 0);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2200      	movs	r2, #0
 8000d66:	625a      	str	r2, [r3, #36]	@ 0x24
	//counter_ = __HAL_TIM_GET_COUNTER(htim);
}
 8000d68:	bf00      	nop
 8000d6a:	370c      	adds	r7, #12
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	2400021e 	.word	0x2400021e
 8000d78:	24000220 	.word	0x24000220

08000d7c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	//_duty = CCRValue_937_5_72[_index];
	//SetCommutationStep(step,_duty);
	threeSine(_index);
 8000d84:	4b15      	ldr	r3, [pc, #84]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f000 f830 	bl	8000df0 <threeSine>
	++_index;
 8000d90:	4b12      	ldr	r3, [pc, #72]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	3301      	adds	r3, #1
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b10      	ldr	r3, [pc, #64]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000d9c:	801a      	strh	r2, [r3, #0]
	if(_index == CCRValue_NSize)
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	2b48      	cmp	r3, #72	@ 0x48
 8000da6:	d102      	bne.n	8000dae <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		_index = 0;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	@ (8000ddc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	801a      	strh	r2, [r3, #0]
		}
		else if (step == 5) {
				step = 0;
		}*/
	}
	__HAL_TIM_SET_AUTORELOAD( &htim4, arr4_);
 8000dae:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000db4:	6812      	ldr	r2, [r2, #0]
 8000db6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000db8:	4b0a      	ldr	r3, [pc, #40]	@ (8000de4 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a08      	ldr	r2, [pc, #32]	@ (8000de0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000dbe:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD( &htim1, arr1_);
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dc6:	6812      	ldr	r2, [r2, #0]
 8000dc8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000dca:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a06      	ldr	r2, [pc, #24]	@ (8000de8 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000dd0:	60d3      	str	r3, [r2, #12]
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	2400021c 	.word	0x2400021c
 8000de0:	240001d0 	.word	0x240001d0
 8000de4:	24000008 	.word	0x24000008
 8000de8:	24000184 	.word	0x24000184
 8000dec:	2400000c 	.word	0x2400000c

08000df0 <threeSine>:
            break;
    }
}

void threeSine(uint16_t degree)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, CCRValue_937_5_72[degree] );
 8000dfa:	88fa      	ldrh	r2, [r7, #6]
 8000dfc:	4b24      	ldr	r3, [pc, #144]	@ (8000e90 <threeSine+0xa0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4924      	ldr	r1, [pc, #144]	@ (8000e94 <threeSine+0xa4>)
 8000e02:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e06:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4821      	ldr	r0, [pc, #132]	@ (8000e90 <threeSine+0xa0>)
 8000e0c:	f002 fb9a 	bl	8003544 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8000e10:	2100      	movs	r1, #0
 8000e12:	481f      	ldr	r0, [pc, #124]	@ (8000e90 <threeSine+0xa0>)
 8000e14:	f003 ff8e 	bl	8004d34 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, CCRValue_937_5_72[(degree + 24) % CCRValue_NSize] );
 8000e18:	88fb      	ldrh	r3, [r7, #6]
 8000e1a:	f103 0118 	add.w	r1, r3, #24
 8000e1e:	4b1e      	ldr	r3, [pc, #120]	@ (8000e98 <threeSine+0xa8>)
 8000e20:	fb83 2301 	smull	r2, r3, r3, r1
 8000e24:	111a      	asrs	r2, r3, #4
 8000e26:	17cb      	asrs	r3, r1, #31
 8000e28:	1ad2      	subs	r2, r2, r3
 8000e2a:	4613      	mov	r3, r2
 8000e2c:	00db      	lsls	r3, r3, #3
 8000e2e:	4413      	add	r3, r2
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	1aca      	subs	r2, r1, r3
 8000e34:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <threeSine+0xa0>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4916      	ldr	r1, [pc, #88]	@ (8000e94 <threeSine+0xa4>)
 8000e3a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e3e:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000e40:	2104      	movs	r1, #4
 8000e42:	4813      	ldr	r0, [pc, #76]	@ (8000e90 <threeSine+0xa0>)
 8000e44:	f002 fb7e 	bl	8003544 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8000e48:	2104      	movs	r1, #4
 8000e4a:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <threeSine+0xa0>)
 8000e4c:	f003 ff72 	bl	8004d34 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, CCRValue_937_5_72[(degree + 48) % CCRValue_NSize] );
 8000e50:	88fb      	ldrh	r3, [r7, #6]
 8000e52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8000e56:	4b10      	ldr	r3, [pc, #64]	@ (8000e98 <threeSine+0xa8>)
 8000e58:	fb83 2301 	smull	r2, r3, r3, r1
 8000e5c:	111a      	asrs	r2, r3, #4
 8000e5e:	17cb      	asrs	r3, r1, #31
 8000e60:	1ad2      	subs	r2, r2, r3
 8000e62:	4613      	mov	r3, r2
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	4413      	add	r3, r2
 8000e68:	00db      	lsls	r3, r3, #3
 8000e6a:	1aca      	subs	r2, r1, r3
 8000e6c:	4b08      	ldr	r3, [pc, #32]	@ (8000e90 <threeSine+0xa0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4908      	ldr	r1, [pc, #32]	@ (8000e94 <threeSine+0xa4>)
 8000e72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000e76:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8000e78:	2108      	movs	r1, #8
 8000e7a:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <threeSine+0xa0>)
 8000e7c:	f002 fb62 	bl	8003544 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8000e80:	2108      	movs	r1, #8
 8000e82:	4803      	ldr	r0, [pc, #12]	@ (8000e90 <threeSine+0xa0>)
 8000e84:	f003 ff56 	bl	8004d34 <HAL_TIMEx_PWMN_Start>
}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	24000184 	.word	0x24000184
 8000e94:	24000010 	.word	0x24000010
 8000e98:	38e38e39 	.word	0x38e38e39

08000e9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea0:	b672      	cpsid	i
}
 8000ea2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea4:	bf00      	nop
 8000ea6:	e7fd      	b.n	8000ea4 <Error_Handler+0x8>

08000ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eae:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed8 <HAL_MspInit+0x30>)
 8000eb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb4:	4a08      	ldr	r2, [pc, #32]	@ (8000ed8 <HAL_MspInit+0x30>)
 8000eb6:	f043 0302 	orr.w	r3, r3, #2
 8000eba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_MspInit+0x30>)
 8000ec0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec4:	f003 0302 	and.w	r3, r3, #2
 8000ec8:	607b      	str	r3, [r7, #4]
 8000eca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	370c      	adds	r7, #12
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	58024400 	.word	0x58024400

08000edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b08a      	sub	sp, #40	@ 0x28
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 0314 	add.w	r3, r7, #20
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a29      	ldr	r2, [pc, #164]	@ (8000fa0 <HAL_TIM_Base_MspInit+0xc4>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d10f      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000efe:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f04:	4a27      	ldr	r2, [pc, #156]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f0e:	4b25      	ldr	r3, [pc, #148]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	613b      	str	r3, [r7, #16]
 8000f1a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f1c:	e03b      	b.n	8000f96 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a21      	ldr	r2, [pc, #132]	@ (8000fa8 <HAL_TIM_Base_MspInit+0xcc>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d136      	bne.n	8000f96 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f28:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f2e:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f30:	f043 0304 	orr.w	r3, r3, #4
 8000f34:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f38:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f3e:	f003 0304 	and.w	r3, r3, #4
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b17      	ldr	r3, [pc, #92]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f4c:	4a15      	ldr	r2, [pc, #84]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f4e:	f043 0308 	orr.w	r3, r3, #8
 8000f52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f56:	4b13      	ldr	r3, [pc, #76]	@ (8000fa4 <HAL_TIM_Base_MspInit+0xc8>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000f76:	2302      	movs	r3, #2
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480a      	ldr	r0, [pc, #40]	@ (8000fac <HAL_TIM_Base_MspInit+0xd0>)
 8000f82:	f000 fcb7 	bl	80018f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	201e      	movs	r0, #30
 8000f8c:	f000 fbf9 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000f90:	201e      	movs	r0, #30
 8000f92:	f000 fc10 	bl	80017b6 <HAL_NVIC_EnableIRQ>
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40010000 	.word	0x40010000
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	40000800 	.word	0x40000800
 8000fac:	58020c00 	.word	0x58020c00

08000fb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a13      	ldr	r2, [pc, #76]	@ (800101c <HAL_TIM_MspPostInit+0x6c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d11f      	bne.n	8001012 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fd2:	4b13      	ldr	r3, [pc, #76]	@ (8001020 <HAL_TIM_MspPostInit+0x70>)
 8000fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd8:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_TIM_MspPostInit+0x70>)
 8000fda:	f043 0310 	orr.w	r3, r3, #16
 8000fde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <HAL_TIM_MspPostInit+0x70>)
 8000fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe8:	f003 0310 	and.w	r3, r3, #16
 8000fec:	60bb      	str	r3, [r7, #8]
 8000fee:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000ff0:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8000ff4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001002:	2301      	movs	r3, #1
 8001004:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001006:	f107 030c 	add.w	r3, r7, #12
 800100a:	4619      	mov	r1, r3
 800100c:	4805      	ldr	r0, [pc, #20]	@ (8001024 <HAL_TIM_MspPostInit+0x74>)
 800100e:	f000 fc71 	bl	80018f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001012:	bf00      	nop
 8001014:	3720      	adds	r7, #32
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	40010000 	.word	0x40010000
 8001020:	58024400 	.word	0x58024400
 8001024:	58021000 	.word	0x58021000

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800102c:	bf00      	nop
 800102e:	e7fd      	b.n	800102c <NMI_Handler+0x4>

08001030 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001034:	bf00      	nop
 8001036:	e7fd      	b.n	8001034 <HardFault_Handler+0x4>

08001038 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800103c:	bf00      	nop
 800103e:	e7fd      	b.n	800103c <MemManage_Handler+0x4>

08001040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <UsageFault_Handler+0x4>

08001050 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107e:	f000 fa79 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
	...

08001088 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <TIM4_IRQHandler+0x10>)
 800108e:	f002 fd19 	bl	8003ac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	240001d0 	.word	0x240001d0

0800109c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80010a0:	2000      	movs	r0, #0
 80010a2:	f000 f915 	bl	80012d0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010b0:	f7ff fa8a 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010b4:	480c      	ldr	r0, [pc, #48]	@ (80010e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b6:	490d      	ldr	r1, [pc, #52]	@ (80010ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b8:	4a0d      	ldr	r2, [pc, #52]	@ (80010f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010bc:	e002      	b.n	80010c4 <LoopCopyDataInit>

080010be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010c2:	3304      	adds	r3, #4

080010c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c8:	d3f9      	bcc.n	80010be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010ca:	4a0a      	ldr	r2, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010cc:	4c0a      	ldr	r4, [pc, #40]	@ (80010f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010d0:	e001      	b.n	80010d6 <LoopFillZerobss>

080010d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d4:	3204      	adds	r2, #4

080010d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d8:	d3fb      	bcc.n	80010d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010da:	f005 f827 	bl	800612c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010de:	f7ff fb09 	bl	80006f4 <main>
  bx  lr
 80010e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80010e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80010ec:	24000154 	.word	0x24000154
  ldr r2, =_sidata
 80010f0:	080061d0 	.word	0x080061d0
  ldr r2, =_sbss
 80010f4:	24000158 	.word	0x24000158
  ldr r4, =_ebss
 80010f8:	240002c8 	.word	0x240002c8

080010fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010fc:	e7fe      	b.n	80010fc <ADC3_IRQHandler>
	...

08001100 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b08c      	sub	sp, #48	@ 0x30
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800110a:	2300      	movs	r3, #0
 800110c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d009      	beq.n	8001128 <BSP_LED_Init+0x28>
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d006      	beq.n	8001128 <BSP_LED_Init+0x28>
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d003      	beq.n	8001128 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001120:	f06f 0301 	mvn.w	r3, #1
 8001124:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001126:	e055      	b.n	80011d4 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d10f      	bne.n	800114e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800112e:	4b2c      	ldr	r3, [pc, #176]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001130:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001134:	4a2a      	ldr	r2, [pc, #168]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001136:	f043 0302 	orr.w	r3, r3, #2
 800113a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800113e:	4b28      	ldr	r3, [pc, #160]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001140:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	617b      	str	r3, [r7, #20]
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	e021      	b.n	8001192 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10f      	bne.n	8001174 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001154:	4b22      	ldr	r3, [pc, #136]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800115a:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <BSP_LED_Init+0xe0>)
 800115c:	f043 0310 	orr.w	r3, r3, #16
 8001160:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001166:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	613b      	str	r3, [r7, #16]
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	e00e      	b.n	8001192 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001174:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001176:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800117a:	4a19      	ldr	r2, [pc, #100]	@ (80011e0 <BSP_LED_Init+0xe0>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <BSP_LED_Init+0xe0>)
 8001186:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001192:	79fb      	ldrb	r3, [r7, #7]
 8001194:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <BSP_LED_Init+0xe4>)
 8001196:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800119a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800119c:	2301      	movs	r3, #1
 800119e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a4:	2303      	movs	r3, #3
 80011a6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	4a0f      	ldr	r2, [pc, #60]	@ (80011e8 <BSP_LED_Init+0xe8>)
 80011ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011b0:	f107 0218 	add.w	r2, r7, #24
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f000 fb9c 	bl	80018f4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <BSP_LED_Init+0xe8>)
 80011c0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <BSP_LED_Init+0xe4>)
 80011c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011cc:	2200      	movs	r2, #0
 80011ce:	4619      	mov	r1, r3
 80011d0:	f000 fd40 	bl	8001c54 <HAL_GPIO_WritePin>
  }

  return ret;
 80011d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3730      	adds	r7, #48	@ 0x30
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	58024400 	.word	0x58024400
 80011e4:	0800619c 	.word	0x0800619c
 80011e8:	24000134 	.word	0x24000134

080011ec <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	460a      	mov	r2, r1
 80011f6:	71fb      	strb	r3, [r7, #7]
 80011f8:	4613      	mov	r3, r2
 80011fa:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80011fc:	4b2e      	ldr	r3, [pc, #184]	@ (80012b8 <BSP_PB_Init+0xcc>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	4a2d      	ldr	r2, [pc, #180]	@ (80012b8 <BSP_PB_Init+0xcc>)
 8001204:	f043 0304 	orr.w	r3, r3, #4
 8001208:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800120c:	4b2a      	ldr	r3, [pc, #168]	@ (80012b8 <BSP_PB_Init+0xcc>)
 800120e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800121a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800121e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001220:	2302      	movs	r3, #2
 8001222:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001224:	2302      	movs	r3, #2
 8001226:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	4a21      	ldr	r2, [pc, #132]	@ (80012bc <BSP_PB_Init+0xd0>)
 8001236:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800123a:	f107 020c 	add.w	r2, r7, #12
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 fb57 	bl	80018f4 <HAL_GPIO_Init>
 8001246:	e031      	b.n	80012ac <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001248:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800124c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <BSP_PB_Init+0xd0>)
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	f107 020c 	add.w	r2, r7, #12
 800125a:	4611      	mov	r1, r2
 800125c:	4618      	mov	r0, r3
 800125e:	f000 fb49 	bl	80018f4 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	4a16      	ldr	r2, [pc, #88]	@ (80012c0 <BSP_PB_Init+0xd4>)
 8001268:	441a      	add	r2, r3
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	4915      	ldr	r1, [pc, #84]	@ (80012c4 <BSP_PB_Init+0xd8>)
 800126e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001272:	4619      	mov	r1, r3
 8001274:	4610      	mov	r0, r2
 8001276:	f000 faec 	bl	8001852 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	00db      	lsls	r3, r3, #3
 800127e:	4a10      	ldr	r2, [pc, #64]	@ (80012c0 <BSP_PB_Init+0xd4>)
 8001280:	1898      	adds	r0, r3, r2
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4a10      	ldr	r2, [pc, #64]	@ (80012c8 <BSP_PB_Init+0xdc>)
 8001286:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800128a:	461a      	mov	r2, r3
 800128c:	2100      	movs	r1, #0
 800128e:	f000 fac1 	bl	8001814 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001292:	2028      	movs	r0, #40	@ 0x28
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <BSP_PB_Init+0xe0>)
 8001298:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800129c:	2200      	movs	r2, #0
 800129e:	4619      	mov	r1, r3
 80012a0:	f000 fa6f 	bl	8001782 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80012a4:	2328      	movs	r3, #40	@ 0x28
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fa85 	bl	80017b6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3720      	adds	r7, #32
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	58024400 	.word	0x58024400
 80012bc:	24000140 	.word	0x24000140
 80012c0:	24000228 	.word	0x24000228
 80012c4:	080061a4 	.word	0x080061a4
 80012c8:	24000144 	.word	0x24000144
 80012cc:	24000148 	.word	0x24000148

080012d0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <BSP_PB_IRQHandler+0x20>)
 80012e0:	4413      	add	r3, r2
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 faca 	bl	800187c <HAL_EXTI_IRQHandler>
}
 80012e8:	bf00      	nop
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	24000228 	.word	0x24000228

080012f4 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800131c:	79fb      	ldrb	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001322:	f06f 0301 	mvn.w	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	e018      	b.n	800135c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2294      	movs	r2, #148	@ 0x94
 800132e:	fb02 f303 	mul.w	r3, r2, r3
 8001332:	4a0d      	ldr	r2, [pc, #52]	@ (8001368 <BSP_COM_Init+0x5c>)
 8001334:	4413      	add	r3, r2
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f852 	bl	80013e0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2294      	movs	r2, #148	@ 0x94
 8001340:	fb02 f303 	mul.w	r3, r2, r3
 8001344:	4a08      	ldr	r2, [pc, #32]	@ (8001368 <BSP_COM_Init+0x5c>)
 8001346:	4413      	add	r3, r2
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f000 f80e 	bl	800136c <MX_USART3_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d002      	beq.n	800135c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001356:	f06f 0303 	mvn.w	r3, #3
 800135a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800135c:	68fb      	ldr	r3, [r7, #12]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	24000230 	.word	0x24000230

0800136c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
 8001374:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <MX_USART3_Init+0x60>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	220c      	movs	r2, #12
 800138a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	895b      	ldrh	r3, [r3, #10]
 8001390:	461a      	mov	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685a      	ldr	r2, [r3, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	891b      	ldrh	r3, [r3, #8]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	899b      	ldrh	r3, [r3, #12]
 80013ac:	461a      	mov	r2, r3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013b8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f003 fecb 	bl	8005156 <HAL_UART_Init>
 80013c0:	4603      	mov	r3, r0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	24000130 	.word	0x24000130

080013d0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80013d4:	2000      	movs	r0, #0
 80013d6:	f7ff ff8d 	bl	80012f4 <BSP_PB_Callback>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
	...

080013e0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <COM1_MspInit+0xa8>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	4a26      	ldr	r2, [pc, #152]	@ (8001488 <COM1_MspInit+0xa8>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <COM1_MspInit+0xa8>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <COM1_MspInit+0xa8>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140c:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <COM1_MspInit+0xa8>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <COM1_MspInit+0xa8>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <COM1_MspInit+0xa8>)
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <COM1_MspInit+0xa8>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <COM1_MspInit+0xa8>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001446:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001454:	2307      	movs	r3, #7
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	@ (800148c <COM1_MspInit+0xac>)
 8001460:	f000 fa48 	bl	80018f4 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001468:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800146e:	2307      	movs	r3, #7
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <COM1_MspInit+0xac>)
 800147a:	f000 fa3b 	bl	80018f4 <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58024400 	.word	0x58024400
 800148c:	58020c00 	.word	0x58020c00

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	2003      	movs	r0, #3
 8001498:	f000 f968 	bl	800176c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800149c:	f001 fa8c 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_Init+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	4913      	ldr	r1, [pc, #76]	@ (80014fc <HAL_Init+0x6c>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_Init+0x68>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_Init+0x6c>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_Init+0x70>)
 80014d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x74>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f814 	bl	8001508 <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e002      	b.n	80014f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fcdd 	bl	8000ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58024400 	.word	0x58024400
 80014fc:	0800618c 	.word	0x0800618c
 8001500:	24000004 	.word	0x24000004
 8001504:	24000000 	.word	0x24000000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001510:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e021      	b.n	8001560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <HAL_InitTick+0x64>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f94d 	bl	80017d2 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f917 	bl	8001782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <HAL_InitTick+0x68>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24000150 	.word	0x24000150
 800156c:	24000000 	.word	0x24000000
 8001570:	2400014c 	.word	0x2400014c

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	24000150 	.word	0x24000150
 8001598:	240002c4 	.word	0x240002c4

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	240002c4 	.word	0x240002c4

080015b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetREVID+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0c1b      	lsrs	r3, r3, #16
}
 80015be:	4618      	mov	r0, r3
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr
 80015c8:	5c001000 	.word	0x5c001000

080015cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015e2:	68ba      	ldr	r2, [r7, #8]
 80015e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015e8:	4013      	ands	r3, r2
 80015ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015f4:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <__NVIC_SetPriorityGrouping+0x44>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015fa:	4a04      	ldr	r2, [pc, #16]	@ (800160c <__NVIC_SetPriorityGrouping+0x40>)
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	60d3      	str	r3, [r2, #12]
}
 8001600:	bf00      	nop
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	e000ed00 	.word	0xe000ed00
 8001610:	05fa0000 	.word	0x05fa0000

08001614 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001618:	4b04      	ldr	r3, [pc, #16]	@ (800162c <__NVIC_GetPriorityGrouping+0x18>)
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	0a1b      	lsrs	r3, r3, #8
 800161e:	f003 0307 	and.w	r3, r3, #7
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db0b      	blt.n	800165a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	88fb      	ldrh	r3, [r7, #6]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	4907      	ldr	r1, [pc, #28]	@ (8001668 <__NVIC_EnableIRQ+0x38>)
 800164a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800165a:	bf00      	nop
 800165c:	370c      	adds	r7, #12
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	e000e100 	.word	0xe000e100

0800166c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	4603      	mov	r3, r0
 8001674:	6039      	str	r1, [r7, #0]
 8001676:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001678:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800167c:	2b00      	cmp	r3, #0
 800167e:	db0a      	blt.n	8001696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	490c      	ldr	r1, [pc, #48]	@ (80016b8 <__NVIC_SetPriority+0x4c>)
 8001686:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800168a:	0112      	lsls	r2, r2, #4
 800168c:	b2d2      	uxtb	r2, r2
 800168e:	440b      	add	r3, r1
 8001690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001694:	e00a      	b.n	80016ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	b2da      	uxtb	r2, r3
 800169a:	4908      	ldr	r1, [pc, #32]	@ (80016bc <__NVIC_SetPriority+0x50>)
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	f003 030f 	and.w	r3, r3, #15
 80016a2:	3b04      	subs	r3, #4
 80016a4:	0112      	lsls	r2, r2, #4
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	440b      	add	r3, r1
 80016aa:	761a      	strb	r2, [r3, #24]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	e000e100 	.word	0xe000e100
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b089      	sub	sp, #36	@ 0x24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f1c3 0307 	rsb	r3, r3, #7
 80016da:	2b04      	cmp	r3, #4
 80016dc:	bf28      	it	cs
 80016de:	2304      	movcs	r3, #4
 80016e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016e2:	69fb      	ldr	r3, [r7, #28]
 80016e4:	3304      	adds	r3, #4
 80016e6:	2b06      	cmp	r3, #6
 80016e8:	d902      	bls.n	80016f0 <NVIC_EncodePriority+0x30>
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	3b03      	subs	r3, #3
 80016ee:	e000      	b.n	80016f2 <NVIC_EncodePriority+0x32>
 80016f0:	2300      	movs	r3, #0
 80016f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f4:	f04f 32ff 	mov.w	r2, #4294967295
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	43da      	mvns	r2, r3
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	401a      	ands	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001708:	f04f 31ff 	mov.w	r1, #4294967295
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	fa01 f303 	lsl.w	r3, r1, r3
 8001712:	43d9      	mvns	r1, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001718:	4313      	orrs	r3, r2
         );
}
 800171a:	4618      	mov	r0, r3
 800171c:	3724      	adds	r7, #36	@ 0x24
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	3b01      	subs	r3, #1
 8001734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001738:	d301      	bcc.n	800173e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800173a:	2301      	movs	r3, #1
 800173c:	e00f      	b.n	800175e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800173e:	4a0a      	ldr	r2, [pc, #40]	@ (8001768 <SysTick_Config+0x40>)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	3b01      	subs	r3, #1
 8001744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001746:	210f      	movs	r1, #15
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f7ff ff8e 	bl	800166c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <SysTick_Config+0x40>)
 8001752:	2200      	movs	r2, #0
 8001754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001756:	4b04      	ldr	r3, [pc, #16]	@ (8001768 <SysTick_Config+0x40>)
 8001758:	2207      	movs	r2, #7
 800175a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800175c:	2300      	movs	r3, #0
}
 800175e:	4618      	mov	r0, r3
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	e000e010 	.word	0xe000e010

0800176c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f7ff ff29 	bl	80015cc <__NVIC_SetPriorityGrouping>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b086      	sub	sp, #24
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	60b9      	str	r1, [r7, #8]
 800178c:	607a      	str	r2, [r7, #4]
 800178e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001790:	f7ff ff40 	bl	8001614 <__NVIC_GetPriorityGrouping>
 8001794:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	68b9      	ldr	r1, [r7, #8]
 800179a:	6978      	ldr	r0, [r7, #20]
 800179c:	f7ff ff90 	bl	80016c0 <NVIC_EncodePriority>
 80017a0:	4602      	mov	r2, r0
 80017a2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff ff5f 	bl	800166c <__NVIC_SetPriority>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4603      	mov	r3, r0
 80017be:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff33 	bl	8001630 <__NVIC_EnableIRQ>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f7ff ffa4 	bl	8001728 <SysTick_Config>
 80017e0:	4603      	mov	r3, r0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
	...

080017ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80017f0:	4b07      	ldr	r3, [pc, #28]	@ (8001810 <HAL_GetCurrentCPUID+0x24>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	2b07      	cmp	r3, #7
 80017fc:	d101      	bne.n	8001802 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80017fe:	2303      	movs	r3, #3
 8001800:	e000      	b.n	8001804 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001802:	2301      	movs	r3, #1
  }
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	e000ed00 	.word	0xe000ed00

08001814 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001814:	b480      	push	{r7}
 8001816:	b087      	sub	sp, #28
 8001818:	af00      	add	r7, sp, #0
 800181a:	60f8      	str	r0, [r7, #12]
 800181c:	460b      	mov	r3, r1
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001822:	2300      	movs	r3, #0
 8001824:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d101      	bne.n	8001830 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e00a      	b.n	8001846 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	605a      	str	r2, [r3, #4]
      break;
 800183c:	e002      	b.n	8001844 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	75fb      	strb	r3, [r7, #23]
      break;
 8001842:	bf00      	nop
  }

  return status;
 8001844:	7dfb      	ldrb	r3, [r7, #23]
}
 8001846:	4618      	mov	r0, r3
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr

08001852 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]
 800185a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d101      	bne.n	8001866 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e003      	b.n	800186e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800186c:	2300      	movs	r3, #0
  }
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
	...

0800187c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	0c1b      	lsrs	r3, r3, #16
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	2201      	movs	r2, #1
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80018a0:	f7ff ffa4 	bl	80017ec <HAL_GetCurrentCPUID>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d105      	bne.n	80018b6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	011a      	lsls	r2, r3, #4
 80018ae:	4b0f      	ldr	r3, [pc, #60]	@ (80018ec <HAL_EXTI_IRQHandler+0x70>)
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e004      	b.n	80018c0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	011a      	lsls	r2, r3, #4
 80018ba:	4b0d      	ldr	r3, [pc, #52]	@ (80018f0 <HAL_EXTI_IRQHandler+0x74>)
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4013      	ands	r3, r2
 80018c8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d009      	beq.n	80018e4 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d002      	beq.n	80018e4 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4798      	blx	r3
    }
  }
}
 80018e4:	bf00      	nop
 80018e6:	3718      	adds	r7, #24
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	58000088 	.word	0x58000088
 80018f0:	580000c8 	.word	0x580000c8

080018f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	@ 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001902:	4b89      	ldr	r3, [pc, #548]	@ (8001b28 <HAL_GPIO_Init+0x234>)
 8001904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001906:	e194      	b.n	8001c32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	2101      	movs	r1, #1
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	fa01 f303 	lsl.w	r3, r1, r3
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	2b00      	cmp	r3, #0
 800191c:	f000 8186 	beq.w	8001c2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b01      	cmp	r3, #1
 800192a:	d005      	beq.n	8001938 <HAL_GPIO_Init+0x44>
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f003 0303 	and.w	r3, r3, #3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d130      	bne.n	800199a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	2203      	movs	r2, #3
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	68da      	ldr	r2, [r3, #12]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	005b      	lsls	r3, r3, #1
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	4313      	orrs	r3, r2
 8001960:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800196e:	2201      	movs	r2, #1
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	4013      	ands	r3, r2
 800197c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 0201 	and.w	r2, r3, #1
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0303 	and.w	r3, r3, #3
 80019a2:	2b03      	cmp	r3, #3
 80019a4:	d017      	beq.n	80019d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	2203      	movs	r2, #3
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	689a      	ldr	r2, [r3, #8]
 80019c2:	69fb      	ldr	r3, [r7, #28]
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d123      	bne.n	8001a2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	08da      	lsrs	r2, r3, #3
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3208      	adds	r2, #8
 80019ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	691a      	ldr	r2, [r3, #16]
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	08da      	lsrs	r2, r3, #3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	3208      	adds	r2, #8
 8001a24:	69b9      	ldr	r1, [r7, #24]
 8001a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	2203      	movs	r2, #3
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f003 0203 	and.w	r2, r3, #3
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 80e0 	beq.w	8001c2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8001b2c <HAL_GPIO_Init+0x238>)
 8001a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a72:	4a2e      	ldr	r2, [pc, #184]	@ (8001b2c <HAL_GPIO_Init+0x238>)
 8001a74:	f043 0302 	orr.w	r3, r3, #2
 8001a78:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a7c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b2c <HAL_GPIO_Init+0x238>)
 8001a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8a:	4a29      	ldr	r2, [pc, #164]	@ (8001b30 <HAL_GPIO_Init+0x23c>)
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	3302      	adds	r3, #2
 8001a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	f003 0303 	and.w	r3, r3, #3
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	4a20      	ldr	r2, [pc, #128]	@ (8001b34 <HAL_GPIO_Init+0x240>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d052      	beq.n	8001b5c <HAL_GPIO_Init+0x268>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a1f      	ldr	r2, [pc, #124]	@ (8001b38 <HAL_GPIO_Init+0x244>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d031      	beq.n	8001b22 <HAL_GPIO_Init+0x22e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_GPIO_Init+0x248>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d02b      	beq.n	8001b1e <HAL_GPIO_Init+0x22a>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_GPIO_Init+0x24c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d025      	beq.n	8001b1a <HAL_GPIO_Init+0x226>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8001b44 <HAL_GPIO_Init+0x250>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d01f      	beq.n	8001b16 <HAL_GPIO_Init+0x222>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8001b48 <HAL_GPIO_Init+0x254>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d019      	beq.n	8001b12 <HAL_GPIO_Init+0x21e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a1a      	ldr	r2, [pc, #104]	@ (8001b4c <HAL_GPIO_Init+0x258>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_GPIO_Init+0x21a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x25c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d00d      	beq.n	8001b0a <HAL_GPIO_Init+0x216>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a18      	ldr	r2, [pc, #96]	@ (8001b54 <HAL_GPIO_Init+0x260>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d007      	beq.n	8001b06 <HAL_GPIO_Init+0x212>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a17      	ldr	r2, [pc, #92]	@ (8001b58 <HAL_GPIO_Init+0x264>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d101      	bne.n	8001b02 <HAL_GPIO_Init+0x20e>
 8001afe:	2309      	movs	r3, #9
 8001b00:	e02d      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b02:	230a      	movs	r3, #10
 8001b04:	e02b      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b06:	2308      	movs	r3, #8
 8001b08:	e029      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	e027      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b0e:	2306      	movs	r3, #6
 8001b10:	e025      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b12:	2305      	movs	r3, #5
 8001b14:	e023      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b16:	2304      	movs	r3, #4
 8001b18:	e021      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e01f      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e01d      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b22:	2301      	movs	r3, #1
 8001b24:	e01b      	b.n	8001b5e <HAL_GPIO_Init+0x26a>
 8001b26:	bf00      	nop
 8001b28:	58000080 	.word	0x58000080
 8001b2c:	58024400 	.word	0x58024400
 8001b30:	58000400 	.word	0x58000400
 8001b34:	58020000 	.word	0x58020000
 8001b38:	58020400 	.word	0x58020400
 8001b3c:	58020800 	.word	0x58020800
 8001b40:	58020c00 	.word	0x58020c00
 8001b44:	58021000 	.word	0x58021000
 8001b48:	58021400 	.word	0x58021400
 8001b4c:	58021800 	.word	0x58021800
 8001b50:	58021c00 	.word	0x58021c00
 8001b54:	58022000 	.word	0x58022000
 8001b58:	58022400 	.word	0x58022400
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	69fa      	ldr	r2, [r7, #28]
 8001b60:	f002 0203 	and.w	r2, r2, #3
 8001b64:	0092      	lsls	r2, r2, #2
 8001b66:	4093      	lsls	r3, r2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b6e:	4938      	ldr	r1, [pc, #224]	@ (8001c50 <HAL_GPIO_Init+0x35c>)
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	089b      	lsrs	r3, r3, #2
 8001b74:	3302      	adds	r3, #2
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b9a:	69ba      	ldr	r2, [r7, #24]
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001ba2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001baa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	43db      	mvns	r3, r3
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d003      	beq.n	8001bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001bd0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	4013      	ands	r3, r2
 8001be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	f47f ae63 	bne.w	8001908 <HAL_GPIO_Init+0x14>
  }
}
 8001c42:	bf00      	nop
 8001c44:	bf00      	nop
 8001c46:	3724      	adds	r7, #36	@ 0x24
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr
 8001c50:	58000400 	.word	0x58000400

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr
	...

08001c88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001c90:	4a08      	ldr	r2, [pc, #32]	@ (8001cb4 <HAL_HSEM_FastTake+0x2c>)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3320      	adds	r3, #32
 8001c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9a:	4a07      	ldr	r2, [pc, #28]	@ (8001cb8 <HAL_HSEM_FastTake+0x30>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	e000      	b.n	8001ca6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ca4:	2301      	movs	r3, #1
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	58026400 	.word	0x58026400
 8001cb8:	80000300 	.word	0x80000300

08001cbc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001cc6:	4906      	ldr	r1, [pc, #24]	@ (8001ce0 <HAL_HSEM_Release+0x24>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	58026400 	.word	0x58026400

08001ce4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001cec:	4b29      	ldr	r3, [pc, #164]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	2b06      	cmp	r3, #6
 8001cf6:	d00a      	beq.n	8001d0e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d001      	beq.n	8001d0a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e040      	b.n	8001d8c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e03e      	b.n	8001d8c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d0e:	4b21      	ldr	r3, [pc, #132]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d16:	491f      	ldr	r1, [pc, #124]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d1e:	f7ff fc3d 	bl	800159c <HAL_GetTick>
 8001d22:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d24:	e009      	b.n	8001d3a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d26:	f7ff fc39 	bl	800159c <HAL_GetTick>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d34:	d901      	bls.n	8001d3a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e028      	b.n	8001d8c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d46:	d1ee      	bne.n	8001d26 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b1e      	cmp	r3, #30
 8001d4c:	d008      	beq.n	8001d60 <HAL_PWREx_ConfigSupply+0x7c>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b2e      	cmp	r3, #46	@ 0x2e
 8001d52:	d005      	beq.n	8001d60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2b1d      	cmp	r3, #29
 8001d58:	d002      	beq.n	8001d60 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001d5e:	d114      	bne.n	8001d8a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001d60:	f7ff fc1c 	bl	800159c <HAL_GetTick>
 8001d64:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d66:	e009      	b.n	8001d7c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d68:	f7ff fc18 	bl	800159c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d76:	d901      	bls.n	8001d7c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e007      	b.n	8001d8c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d7c:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d88:	d1ee      	bne.n	8001d68 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	58024800 	.word	0x58024800

08001d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	@ 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d102      	bne.n	8001dac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	f000 bc48 	b.w	800263c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0301 	and.w	r3, r3, #1
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f000 8088 	beq.w	8001eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dba:	4b99      	ldr	r3, [pc, #612]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dc4:	4b96      	ldr	r3, [pc, #600]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001dca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dcc:	2b10      	cmp	r3, #16
 8001dce:	d007      	beq.n	8001de0 <HAL_RCC_OscConfig+0x48>
 8001dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dd2:	2b18      	cmp	r3, #24
 8001dd4:	d111      	bne.n	8001dfa <HAL_RCC_OscConfig+0x62>
 8001dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d10c      	bne.n	8001dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de0:	4b8f      	ldr	r3, [pc, #572]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d06d      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x130>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d169      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	f000 bc21 	b.w	800263c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e02:	d106      	bne.n	8001e12 <HAL_RCC_OscConfig+0x7a>
 8001e04:	4b86      	ldr	r3, [pc, #536]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a85      	ldr	r2, [pc, #532]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	6013      	str	r3, [r2, #0]
 8001e10:	e02e      	b.n	8001e70 <HAL_RCC_OscConfig+0xd8>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d10c      	bne.n	8001e34 <HAL_RCC_OscConfig+0x9c>
 8001e1a:	4b81      	ldr	r3, [pc, #516]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a80      	ldr	r2, [pc, #512]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e24:	6013      	str	r3, [r2, #0]
 8001e26:	4b7e      	ldr	r3, [pc, #504]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a7d      	ldr	r2, [pc, #500]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e30:	6013      	str	r3, [r2, #0]
 8001e32:	e01d      	b.n	8001e70 <HAL_RCC_OscConfig+0xd8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e3c:	d10c      	bne.n	8001e58 <HAL_RCC_OscConfig+0xc0>
 8001e3e:	4b78      	ldr	r3, [pc, #480]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a77      	ldr	r2, [pc, #476]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e48:	6013      	str	r3, [r2, #0]
 8001e4a:	4b75      	ldr	r3, [pc, #468]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a74      	ldr	r2, [pc, #464]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e54:	6013      	str	r3, [r2, #0]
 8001e56:	e00b      	b.n	8001e70 <HAL_RCC_OscConfig+0xd8>
 8001e58:	4b71      	ldr	r3, [pc, #452]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a70      	ldr	r2, [pc, #448]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4b6e      	ldr	r3, [pc, #440]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a6d      	ldr	r2, [pc, #436]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d013      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7ff fb90 	bl	800159c <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e80:	f7ff fb8c 	bl	800159c <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b64      	cmp	r3, #100	@ 0x64
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e3d4      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e92:	4b63      	ldr	r3, [pc, #396]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d0f0      	beq.n	8001e80 <HAL_RCC_OscConfig+0xe8>
 8001e9e:	e014      	b.n	8001eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea0:	f7ff fb7c 	bl	800159c <HAL_GetTick>
 8001ea4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea8:	f7ff fb78 	bl	800159c <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b64      	cmp	r3, #100	@ 0x64
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e3c0      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001eba:	4b59      	ldr	r3, [pc, #356]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1f0      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x110>
 8001ec6:	e000      	b.n	8001eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 80ca 	beq.w	800206c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ed8:	4b51      	ldr	r3, [pc, #324]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ee0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ee2:	4b4f      	ldr	r3, [pc, #316]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ee6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d007      	beq.n	8001efe <HAL_RCC_OscConfig+0x166>
 8001eee:	6a3b      	ldr	r3, [r7, #32]
 8001ef0:	2b18      	cmp	r3, #24
 8001ef2:	d156      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x20a>
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d151      	bne.n	8001fa2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001efe:	4b48      	ldr	r3, [pc, #288]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d005      	beq.n	8001f16 <HAL_RCC_OscConfig+0x17e>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68db      	ldr	r3, [r3, #12]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e392      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f16:	4b42      	ldr	r3, [pc, #264]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f023 0219 	bic.w	r2, r3, #25
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	493f      	ldr	r1, [pc, #252]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f24:	4313      	orrs	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7ff fb38 	bl	800159c <HAL_GetTick>
 8001f2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f30:	f7ff fb34 	bl	800159c <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e37c      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f42:	4b37      	ldr	r3, [pc, #220]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0304 	and.w	r3, r3, #4
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f4e:	f7ff fb31 	bl	80015b4 <HAL_GetREVID>
 8001f52:	4603      	mov	r3, r0
 8001f54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d817      	bhi.n	8001f8c <HAL_RCC_OscConfig+0x1f4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	2b40      	cmp	r3, #64	@ 0x40
 8001f62:	d108      	bne.n	8001f76 <HAL_RCC_OscConfig+0x1de>
 8001f64:	4b2e      	ldr	r3, [pc, #184]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f72:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f74:	e07a      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f76:	4b2a      	ldr	r3, [pc, #168]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	691b      	ldr	r3, [r3, #16]
 8001f82:	031b      	lsls	r3, r3, #12
 8001f84:	4926      	ldr	r1, [pc, #152]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f8a:	e06f      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	061b      	lsls	r3, r3, #24
 8001f9a:	4921      	ldr	r1, [pc, #132]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fa0:	e064      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d047      	beq.n	800203a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001faa:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 0219 	bic.w	r2, r3, #25
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	491a      	ldr	r1, [pc, #104]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fbc:	f7ff faee 	bl	800159c <HAL_GetTick>
 8001fc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fc2:	e008      	b.n	8001fd6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc4:	f7ff faea 	bl	800159c <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e332      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fd6:	4b12      	ldr	r3, [pc, #72]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d0f0      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fe2:	f7ff fae7 	bl	80015b4 <HAL_GetREVID>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d819      	bhi.n	8002024 <HAL_RCC_OscConfig+0x28c>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	2b40      	cmp	r3, #64	@ 0x40
 8001ff6:	d108      	bne.n	800200a <HAL_RCC_OscConfig+0x272>
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002000:	4a07      	ldr	r2, [pc, #28]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 8002002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002006:	6053      	str	r3, [r2, #4]
 8002008:	e030      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
 800200a:	4b05      	ldr	r3, [pc, #20]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	031b      	lsls	r3, r3, #12
 8002018:	4901      	ldr	r1, [pc, #4]	@ (8002020 <HAL_RCC_OscConfig+0x288>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
 800201e:	e025      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
 8002020:	58024400 	.word	0x58024400
 8002024:	4b9a      	ldr	r3, [pc, #616]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	691b      	ldr	r3, [r3, #16]
 8002030:	061b      	lsls	r3, r3, #24
 8002032:	4997      	ldr	r1, [pc, #604]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002034:	4313      	orrs	r3, r2
 8002036:	604b      	str	r3, [r1, #4]
 8002038:	e018      	b.n	800206c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203a:	4b95      	ldr	r3, [pc, #596]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a94      	ldr	r2, [pc, #592]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	f023 0301 	bic.w	r3, r3, #1
 8002044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002046:	f7ff faa9 	bl	800159c <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204e:	f7ff faa5 	bl	800159c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e2ed      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002060:	4b8b      	ldr	r3, [pc, #556]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	f000 80a9 	beq.w	80021cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4b85      	ldr	r3, [pc, #532]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002082:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002084:	4b82      	ldr	r3, [pc, #520]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002088:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	2b08      	cmp	r3, #8
 800208e:	d007      	beq.n	80020a0 <HAL_RCC_OscConfig+0x308>
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b18      	cmp	r3, #24
 8002094:	d13a      	bne.n	800210c <HAL_RCC_OscConfig+0x374>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	2b01      	cmp	r3, #1
 800209e:	d135      	bne.n	800210c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d005      	beq.n	80020b8 <HAL_RCC_OscConfig+0x320>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	2b80      	cmp	r3, #128	@ 0x80
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e2c1      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020b8:	f7ff fa7c 	bl	80015b4 <HAL_GetREVID>
 80020bc:	4603      	mov	r3, r0
 80020be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d817      	bhi.n	80020f6 <HAL_RCC_OscConfig+0x35e>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2b20      	cmp	r3, #32
 80020cc:	d108      	bne.n	80020e0 <HAL_RCC_OscConfig+0x348>
 80020ce:	4b70      	ldr	r3, [pc, #448]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020de:	e075      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	069b      	lsls	r3, r3, #26
 80020ee:	4968      	ldr	r1, [pc, #416]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020f0:	4313      	orrs	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80020f4:	e06a      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020f6:	4b66      	ldr	r3, [pc, #408]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6a1b      	ldr	r3, [r3, #32]
 8002102:	061b      	lsls	r3, r3, #24
 8002104:	4962      	ldr	r1, [pc, #392]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800210a:	e05f      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d042      	beq.n	800219a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002114:	4b5e      	ldr	r3, [pc, #376]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a5d      	ldr	r2, [pc, #372]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800211a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800211e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7ff fa3c 	bl	800159c <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002128:	f7ff fa38 	bl	800159c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e280      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800213a:	4b55      	ldr	r3, [pc, #340]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002146:	f7ff fa35 	bl	80015b4 <HAL_GetREVID>
 800214a:	4603      	mov	r3, r0
 800214c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002150:	4293      	cmp	r3, r2
 8002152:	d817      	bhi.n	8002184 <HAL_RCC_OscConfig+0x3ec>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	2b20      	cmp	r3, #32
 800215a:	d108      	bne.n	800216e <HAL_RCC_OscConfig+0x3d6>
 800215c:	4b4c      	ldr	r3, [pc, #304]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002164:	4a4a      	ldr	r2, [pc, #296]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002166:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800216a:	6053      	str	r3, [r2, #4]
 800216c:	e02e      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
 800216e:	4b48      	ldr	r3, [pc, #288]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a1b      	ldr	r3, [r3, #32]
 800217a:	069b      	lsls	r3, r3, #26
 800217c:	4944      	ldr	r1, [pc, #272]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800217e:	4313      	orrs	r3, r2
 8002180:	604b      	str	r3, [r1, #4]
 8002182:	e023      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
 8002184:	4b42      	ldr	r3, [pc, #264]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	061b      	lsls	r3, r3, #24
 8002192:	493f      	ldr	r1, [pc, #252]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002194:	4313      	orrs	r3, r2
 8002196:	60cb      	str	r3, [r1, #12]
 8002198:	e018      	b.n	80021cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800219a:	4b3d      	ldr	r3, [pc, #244]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a3c      	ldr	r2, [pc, #240]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80021a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a6:	f7ff f9f9 	bl	800159c <HAL_GetTick>
 80021aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80021ae:	f7ff f9f5 	bl	800159c <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e23d      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80021c0:	4b33      	ldr	r3, [pc, #204]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d1f0      	bne.n	80021ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d036      	beq.n	8002246 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d019      	beq.n	8002214 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80021e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ec:	f7ff f9d6 	bl	800159c <HAL_GetTick>
 80021f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80021f2:	e008      	b.n	8002206 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f4:	f7ff f9d2 	bl	800159c <HAL_GetTick>
 80021f8:	4602      	mov	r2, r0
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	1ad3      	subs	r3, r2, r3
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e21a      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002206:	4b22      	ldr	r3, [pc, #136]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002208:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d0f0      	beq.n	80021f4 <HAL_RCC_OscConfig+0x45c>
 8002212:	e018      	b.n	8002246 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002214:	4b1e      	ldr	r3, [pc, #120]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002216:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002218:	4a1d      	ldr	r2, [pc, #116]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800221a:	f023 0301 	bic.w	r3, r3, #1
 800221e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002220:	f7ff f9bc 	bl	800159c <HAL_GetTick>
 8002224:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002226:	e008      	b.n	800223a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002228:	f7ff f9b8 	bl	800159c <HAL_GetTick>
 800222c:	4602      	mov	r2, r0
 800222e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b02      	cmp	r3, #2
 8002234:	d901      	bls.n	800223a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002236:	2303      	movs	r3, #3
 8002238:	e200      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800223a:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800223c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1f0      	bne.n	8002228 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f003 0320 	and.w	r3, r3, #32
 800224e:	2b00      	cmp	r3, #0
 8002250:	d039      	beq.n	80022c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01c      	beq.n	8002294 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800225a:	4b0d      	ldr	r3, [pc, #52]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0c      	ldr	r2, [pc, #48]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002260:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002264:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002266:	f7ff f999 	bl	800159c <HAL_GetTick>
 800226a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800226e:	f7ff f995 	bl	800159c <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e1dd      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002280:	4b03      	ldr	r3, [pc, #12]	@ (8002290 <HAL_RCC_OscConfig+0x4f8>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0f0      	beq.n	800226e <HAL_RCC_OscConfig+0x4d6>
 800228c:	e01b      	b.n	80022c6 <HAL_RCC_OscConfig+0x52e>
 800228e:	bf00      	nop
 8002290:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002294:	4b9b      	ldr	r3, [pc, #620]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a9a      	ldr	r2, [pc, #616]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800229a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800229e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022a0:	f7ff f97c 	bl	800159c <HAL_GetTick>
 80022a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022a8:	f7ff f978 	bl	800159c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e1c0      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80022ba:	4b92      	ldr	r3, [pc, #584]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 8081 	beq.w	80023d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002508 <HAL_RCC_OscConfig+0x770>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a8b      	ldr	r2, [pc, #556]	@ (8002508 <HAL_RCC_OscConfig+0x770>)
 80022da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022e0:	f7ff f95c 	bl	800159c <HAL_GetTick>
 80022e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022e8:	f7ff f958 	bl	800159c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b64      	cmp	r3, #100	@ 0x64
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e1a0      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80022fa:	4b83      	ldr	r3, [pc, #524]	@ (8002508 <HAL_RCC_OscConfig+0x770>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d106      	bne.n	800231c <HAL_RCC_OscConfig+0x584>
 800230e:	4b7d      	ldr	r3, [pc, #500]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002312:	4a7c      	ldr	r2, [pc, #496]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002314:	f043 0301 	orr.w	r3, r3, #1
 8002318:	6713      	str	r3, [r2, #112]	@ 0x70
 800231a:	e02d      	b.n	8002378 <HAL_RCC_OscConfig+0x5e0>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10c      	bne.n	800233e <HAL_RCC_OscConfig+0x5a6>
 8002324:	4b77      	ldr	r3, [pc, #476]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002326:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002328:	4a76      	ldr	r2, [pc, #472]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800232a:	f023 0301 	bic.w	r3, r3, #1
 800232e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002330:	4b74      	ldr	r3, [pc, #464]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002332:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002334:	4a73      	ldr	r2, [pc, #460]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002336:	f023 0304 	bic.w	r3, r3, #4
 800233a:	6713      	str	r3, [r2, #112]	@ 0x70
 800233c:	e01c      	b.n	8002378 <HAL_RCC_OscConfig+0x5e0>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	2b05      	cmp	r3, #5
 8002344:	d10c      	bne.n	8002360 <HAL_RCC_OscConfig+0x5c8>
 8002346:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800234a:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800234c:	f043 0304 	orr.w	r3, r3, #4
 8002350:	6713      	str	r3, [r2, #112]	@ 0x70
 8002352:	4b6c      	ldr	r3, [pc, #432]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002356:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	@ 0x70
 800235e:	e00b      	b.n	8002378 <HAL_RCC_OscConfig+0x5e0>
 8002360:	4b68      	ldr	r3, [pc, #416]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002364:	4a67      	ldr	r2, [pc, #412]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002366:	f023 0301 	bic.w	r3, r3, #1
 800236a:	6713      	str	r3, [r2, #112]	@ 0x70
 800236c:	4b65      	ldr	r3, [pc, #404]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800236e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002370:	4a64      	ldr	r2, [pc, #400]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002372:	f023 0304 	bic.w	r3, r3, #4
 8002376:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d015      	beq.n	80023ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002380:	f7ff f90c 	bl	800159c <HAL_GetTick>
 8002384:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002386:	e00a      	b.n	800239e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002388:	f7ff f908 	bl	800159c <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002396:	4293      	cmp	r3, r2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e14e      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800239e:	4b59      	ldr	r3, [pc, #356]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80023a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d0ee      	beq.n	8002388 <HAL_RCC_OscConfig+0x5f0>
 80023aa:	e014      	b.n	80023d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ac:	f7ff f8f6 	bl	800159c <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b4:	f7ff f8f2 	bl	800159c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e138      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80023ca:	4b4e      	ldr	r3, [pc, #312]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1ee      	bne.n	80023b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f000 812d 	beq.w	800263a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80023e0:	4b48      	ldr	r3, [pc, #288]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80023e8:	2b18      	cmp	r3, #24
 80023ea:	f000 80bd 	beq.w	8002568 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	f040 809e 	bne.w	8002534 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b42      	ldr	r3, [pc, #264]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a41      	ldr	r2, [pc, #260]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80023fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff f8ca 	bl	800159c <HAL_GetTick>
 8002408:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff f8c6 	bl	800159c <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e10e      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800241e:	4b39      	ldr	r3, [pc, #228]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800242a:	4b36      	ldr	r3, [pc, #216]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800242c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <HAL_RCC_OscConfig+0x774>)
 8002430:	4013      	ands	r3, r2
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800243a:	0112      	lsls	r2, r2, #4
 800243c:	430a      	orrs	r2, r1
 800243e:	4931      	ldr	r1, [pc, #196]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002440:	4313      	orrs	r3, r2
 8002442:	628b      	str	r3, [r1, #40]	@ 0x28
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002448:	3b01      	subs	r3, #1
 800244a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002452:	3b01      	subs	r3, #1
 8002454:	025b      	lsls	r3, r3, #9
 8002456:	b29b      	uxth	r3, r3
 8002458:	431a      	orrs	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800245e:	3b01      	subs	r3, #1
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800246c:	3b01      	subs	r3, #1
 800246e:	061b      	lsls	r3, r3, #24
 8002470:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002474:	4923      	ldr	r1, [pc, #140]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800247a:	4b22      	ldr	r3, [pc, #136]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800247c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800247e:	4a21      	ldr	r2, [pc, #132]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002480:	f023 0301 	bic.w	r3, r3, #1
 8002484:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002486:	4b1f      	ldr	r3, [pc, #124]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800248a:	4b21      	ldr	r3, [pc, #132]	@ (8002510 <HAL_RCC_OscConfig+0x778>)
 800248c:	4013      	ands	r3, r2
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002492:	00d2      	lsls	r2, r2, #3
 8002494:	491b      	ldr	r1, [pc, #108]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 8002496:	4313      	orrs	r3, r2
 8002498:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800249a:	4b1a      	ldr	r3, [pc, #104]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 800249c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800249e:	f023 020c 	bic.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	4917      	ldr	r1, [pc, #92]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024a8:	4313      	orrs	r3, r2
 80024aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80024ac:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	f023 0202 	bic.w	r2, r3, #2
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b8:	4912      	ldr	r1, [pc, #72]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024ce:	4a0d      	ldr	r2, [pc, #52]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024da:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e6:	4a07      	ldr	r2, [pc, #28]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024e8:	f043 0301 	orr.w	r3, r3, #1
 80024ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <HAL_RCC_OscConfig+0x76c>)
 80024f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fa:	f7ff f84f 	bl	800159c <HAL_GetTick>
 80024fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002500:	e011      	b.n	8002526 <HAL_RCC_OscConfig+0x78e>
 8002502:	bf00      	nop
 8002504:	58024400 	.word	0x58024400
 8002508:	58024800 	.word	0x58024800
 800250c:	fffffc0c 	.word	0xfffffc0c
 8002510:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff f842 	bl	800159c <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e08a      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002526:	4b47      	ldr	r3, [pc, #284]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f0      	beq.n	8002514 <HAL_RCC_OscConfig+0x77c>
 8002532:	e082      	b.n	800263a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002534:	4b43      	ldr	r3, [pc, #268]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a42      	ldr	r2, [pc, #264]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 800253a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800253e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002540:	f7ff f82c 	bl	800159c <HAL_GetTick>
 8002544:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002546:	e008      	b.n	800255a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002548:	f7ff f828 	bl	800159c <HAL_GetTick>
 800254c:	4602      	mov	r2, r0
 800254e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	2b02      	cmp	r3, #2
 8002554:	d901      	bls.n	800255a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e070      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800255a:	4b3a      	ldr	r3, [pc, #232]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d1f0      	bne.n	8002548 <HAL_RCC_OscConfig+0x7b0>
 8002566:	e068      	b.n	800263a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002568:	4b36      	ldr	r3, [pc, #216]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800256e:	4b35      	ldr	r3, [pc, #212]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	2b01      	cmp	r3, #1
 800257a:	d031      	beq.n	80025e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	f003 0203 	and.w	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002586:	429a      	cmp	r2, r3
 8002588:	d12a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	091b      	lsrs	r3, r3, #4
 800258e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d122      	bne.n	80025e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d11a      	bne.n	80025e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	0a5b      	lsrs	r3, r3, #9
 80025ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d111      	bne.n	80025e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	0c1b      	lsrs	r3, r3, #16
 80025c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d108      	bne.n	80025e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	0e1b      	lsrs	r3, r3, #24
 80025d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80025dc:	429a      	cmp	r2, r3
 80025de:	d001      	beq.n	80025e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e02b      	b.n	800263c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80025e4:	4b17      	ldr	r3, [pc, #92]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 80025e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025f4:	693a      	ldr	r2, [r7, #16]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d01f      	beq.n	800263a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80025fa:	4b12      	ldr	r3, [pc, #72]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 80025fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025fe:	4a11      	ldr	r2, [pc, #68]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002600:	f023 0301 	bic.w	r3, r3, #1
 8002604:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002606:	f7fe ffc9 	bl	800159c <HAL_GetTick>
 800260a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800260c:	bf00      	nop
 800260e:	f7fe ffc5 	bl	800159c <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	4293      	cmp	r3, r2
 8002618:	d0f9      	beq.n	800260e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800261a:	4b0a      	ldr	r3, [pc, #40]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 800261c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800261e:	4b0a      	ldr	r3, [pc, #40]	@ (8002648 <HAL_RCC_OscConfig+0x8b0>)
 8002620:	4013      	ands	r3, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002626:	00d2      	lsls	r2, r2, #3
 8002628:	4906      	ldr	r1, [pc, #24]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 800262a:	4313      	orrs	r3, r2
 800262c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800262e:	4b05      	ldr	r3, [pc, #20]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <HAL_RCC_OscConfig+0x8ac>)
 8002634:	f043 0301 	orr.w	r3, r3, #1
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3730      	adds	r7, #48	@ 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	58024400 	.word	0x58024400
 8002648:	ffff0007 	.word	0xffff0007

0800264c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d101      	bne.n	8002660 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e19c      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002660:	4b8a      	ldr	r3, [pc, #552]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d910      	bls.n	8002690 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800266e:	4b87      	ldr	r3, [pc, #540]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 020f 	bic.w	r2, r3, #15
 8002676:	4985      	ldr	r1, [pc, #532]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	4313      	orrs	r3, r2
 800267c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800267e:	4b83      	ldr	r3, [pc, #524]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 030f 	and.w	r3, r3, #15
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	d001      	beq.n	8002690 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e184      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b00      	cmp	r3, #0
 800269a:	d010      	beq.n	80026be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691a      	ldr	r2, [r3, #16]
 80026a0:	4b7b      	ldr	r3, [pc, #492]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	699b      	ldr	r3, [r3, #24]
 80026a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d908      	bls.n	80026be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80026ac:	4b78      	ldr	r3, [pc, #480]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	4975      	ldr	r1, [pc, #468]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0308 	and.w	r3, r3, #8
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d010      	beq.n	80026ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695a      	ldr	r2, [r3, #20]
 80026ce:	4b70      	ldr	r3, [pc, #448]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026d0:	69db      	ldr	r3, [r3, #28]
 80026d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d908      	bls.n	80026ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026da:	4b6d      	ldr	r3, [pc, #436]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026dc:	69db      	ldr	r3, [r3, #28]
 80026de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	496a      	ldr	r1, [pc, #424]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0310 	and.w	r3, r3, #16
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d010      	beq.n	800271a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	4b64      	ldr	r3, [pc, #400]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	69db      	ldr	r3, [r3, #28]
 8002700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002704:	429a      	cmp	r2, r3
 8002706:	d908      	bls.n	800271a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002708:	4b61      	ldr	r3, [pc, #388]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	495e      	ldr	r1, [pc, #376]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d010      	beq.n	8002748 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	69da      	ldr	r2, [r3, #28]
 800272a:	4b59      	ldr	r3, [pc, #356]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800272c:	6a1b      	ldr	r3, [r3, #32]
 800272e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002732:	429a      	cmp	r2, r3
 8002734:	d908      	bls.n	8002748 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002736:	4b56      	ldr	r3, [pc, #344]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002738:	6a1b      	ldr	r3, [r3, #32]
 800273a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	4953      	ldr	r1, [pc, #332]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002744:	4313      	orrs	r3, r2
 8002746:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d010      	beq.n	8002776 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68da      	ldr	r2, [r3, #12]
 8002758:	4b4d      	ldr	r3, [pc, #308]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	f003 030f 	and.w	r3, r3, #15
 8002760:	429a      	cmp	r2, r3
 8002762:	d908      	bls.n	8002776 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002764:	4b4a      	ldr	r3, [pc, #296]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f023 020f 	bic.w	r2, r3, #15
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	4947      	ldr	r1, [pc, #284]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002772:	4313      	orrs	r3, r2
 8002774:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	2b00      	cmp	r3, #0
 8002780:	d055      	beq.n	800282e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002782:	4b43      	ldr	r3, [pc, #268]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	4940      	ldr	r1, [pc, #256]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002790:	4313      	orrs	r3, r2
 8002792:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d107      	bne.n	80027ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279c:	4b3c      	ldr	r3, [pc, #240]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d121      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	e0f6      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d107      	bne.n	80027c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027b4:	4b36      	ldr	r3, [pc, #216]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d115      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e0ea      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d107      	bne.n	80027dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027cc:	4b30      	ldr	r3, [pc, #192]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d109      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0de      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027dc:	4b2c      	ldr	r3, [pc, #176]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d101      	bne.n	80027ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e0d6      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027ec:	4b28      	ldr	r3, [pc, #160]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	f023 0207 	bic.w	r2, r3, #7
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	4925      	ldr	r1, [pc, #148]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027fe:	f7fe fecd 	bl	800159c <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002804:	e00a      	b.n	800281c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002806:	f7fe fec9 	bl	800159c <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e0be      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281c:	4b1c      	ldr	r3, [pc, #112]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800281e:	691b      	ldr	r3, [r3, #16]
 8002820:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	00db      	lsls	r3, r3, #3
 800282a:	429a      	cmp	r2, r3
 800282c:	d1eb      	bne.n	8002806 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	d010      	beq.n	800285c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	4b14      	ldr	r3, [pc, #80]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 030f 	and.w	r3, r3, #15
 8002846:	429a      	cmp	r2, r3
 8002848:	d208      	bcs.n	800285c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284a:	4b11      	ldr	r3, [pc, #68]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	490e      	ldr	r1, [pc, #56]	@ (8002890 <HAL_RCC_ClockConfig+0x244>)
 8002858:	4313      	orrs	r3, r2
 800285a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800285c:	4b0b      	ldr	r3, [pc, #44]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 030f 	and.w	r3, r3, #15
 8002864:	683a      	ldr	r2, [r7, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d214      	bcs.n	8002894 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286a:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f023 020f 	bic.w	r2, r3, #15
 8002872:	4906      	ldr	r1, [pc, #24]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	4313      	orrs	r3, r2
 8002878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <HAL_RCC_ClockConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	683a      	ldr	r2, [r7, #0]
 8002884:	429a      	cmp	r2, r3
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e086      	b.n	800299a <HAL_RCC_ClockConfig+0x34e>
 800288c:	52002000 	.word	0x52002000
 8002890:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d010      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	691a      	ldr	r2, [r3, #16]
 80028a4:	4b3f      	ldr	r3, [pc, #252]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d208      	bcs.n	80028c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80028b0:	4b3c      	ldr	r3, [pc, #240]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	4939      	ldr	r1, [pc, #228]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0308 	and.w	r3, r3, #8
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d010      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	4b34      	ldr	r3, [pc, #208]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028da:	429a      	cmp	r2, r3
 80028dc:	d208      	bcs.n	80028f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028de:	4b31      	ldr	r3, [pc, #196]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	492e      	ldr	r1, [pc, #184]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0310 	and.w	r3, r3, #16
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d010      	beq.n	800291e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	4b28      	ldr	r3, [pc, #160]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002908:	429a      	cmp	r2, r3
 800290a:	d208      	bcs.n	800291e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800290e:	69db      	ldr	r3, [r3, #28]
 8002910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	4922      	ldr	r1, [pc, #136]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800291a:	4313      	orrs	r3, r2
 800291c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d010      	beq.n	800294c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	69da      	ldr	r2, [r3, #28]
 800292e:	4b1d      	ldr	r3, [pc, #116]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002936:	429a      	cmp	r2, r3
 8002938:	d208      	bcs.n	800294c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800293a:	4b1a      	ldr	r3, [pc, #104]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	4917      	ldr	r1, [pc, #92]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002948:	4313      	orrs	r3, r2
 800294a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800294c:	f000 f834 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002950:	4602      	mov	r2, r0
 8002952:	4b14      	ldr	r3, [pc, #80]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 8002954:	699b      	ldr	r3, [r3, #24]
 8002956:	0a1b      	lsrs	r3, r3, #8
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	4912      	ldr	r1, [pc, #72]	@ (80029a8 <HAL_RCC_ClockConfig+0x35c>)
 800295e:	5ccb      	ldrb	r3, [r1, r3]
 8002960:	f003 031f 	and.w	r3, r3, #31
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800296a:	4b0e      	ldr	r3, [pc, #56]	@ (80029a4 <HAL_RCC_ClockConfig+0x358>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <HAL_RCC_ClockConfig+0x35c>)
 8002974:	5cd3      	ldrb	r3, [r2, r3]
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	fa22 f303 	lsr.w	r3, r2, r3
 8002980:	4a0a      	ldr	r2, [pc, #40]	@ (80029ac <HAL_RCC_ClockConfig+0x360>)
 8002982:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002984:	4a0a      	ldr	r2, [pc, #40]	@ (80029b0 <HAL_RCC_ClockConfig+0x364>)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800298a:	4b0a      	ldr	r3, [pc, #40]	@ (80029b4 <HAL_RCC_ClockConfig+0x368>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7fe fdba 	bl	8001508 <HAL_InitTick>
 8002994:	4603      	mov	r3, r0
 8002996:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3718      	adds	r7, #24
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	58024400 	.word	0x58024400
 80029a8:	0800618c 	.word	0x0800618c
 80029ac:	24000004 	.word	0x24000004
 80029b0:	24000000 	.word	0x24000000
 80029b4:	2400014c 	.word	0x2400014c

080029b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	@ 0x24
 80029bc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029be:	4bb3      	ldr	r3, [pc, #716]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c0:	691b      	ldr	r3, [r3, #16]
 80029c2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029c6:	2b18      	cmp	r3, #24
 80029c8:	f200 8155 	bhi.w	8002c76 <HAL_RCC_GetSysClockFreq+0x2be>
 80029cc:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80029ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d2:	bf00      	nop
 80029d4:	08002a39 	.word	0x08002a39
 80029d8:	08002c77 	.word	0x08002c77
 80029dc:	08002c77 	.word	0x08002c77
 80029e0:	08002c77 	.word	0x08002c77
 80029e4:	08002c77 	.word	0x08002c77
 80029e8:	08002c77 	.word	0x08002c77
 80029ec:	08002c77 	.word	0x08002c77
 80029f0:	08002c77 	.word	0x08002c77
 80029f4:	08002a5f 	.word	0x08002a5f
 80029f8:	08002c77 	.word	0x08002c77
 80029fc:	08002c77 	.word	0x08002c77
 8002a00:	08002c77 	.word	0x08002c77
 8002a04:	08002c77 	.word	0x08002c77
 8002a08:	08002c77 	.word	0x08002c77
 8002a0c:	08002c77 	.word	0x08002c77
 8002a10:	08002c77 	.word	0x08002c77
 8002a14:	08002a65 	.word	0x08002a65
 8002a18:	08002c77 	.word	0x08002c77
 8002a1c:	08002c77 	.word	0x08002c77
 8002a20:	08002c77 	.word	0x08002c77
 8002a24:	08002c77 	.word	0x08002c77
 8002a28:	08002c77 	.word	0x08002c77
 8002a2c:	08002c77 	.word	0x08002c77
 8002a30:	08002c77 	.word	0x08002c77
 8002a34:	08002a6b 	.word	0x08002a6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a38:	4b94      	ldr	r3, [pc, #592]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0320 	and.w	r3, r3, #32
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d009      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a44:	4b91      	ldr	r3, [pc, #580]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	4a90      	ldr	r2, [pc, #576]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a50:	fa22 f303 	lsr.w	r3, r2, r3
 8002a54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002a56:	e111      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002a58:	4b8d      	ldr	r3, [pc, #564]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a5a:	61bb      	str	r3, [r7, #24]
      break;
 8002a5c:	e10e      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002a5e:	4b8d      	ldr	r3, [pc, #564]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a60:	61bb      	str	r3, [r7, #24]
      break;
 8002a62:	e10b      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002a64:	4b8c      	ldr	r3, [pc, #560]	@ (8002c98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002a66:	61bb      	str	r3, [r7, #24]
      break;
 8002a68:	e108      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002a6a:	4b88      	ldr	r3, [pc, #544]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a74:	4b85      	ldr	r3, [pc, #532]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a80:	4b82      	ldr	r3, [pc, #520]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a8a:	4b80      	ldr	r3, [pc, #512]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8e:	08db      	lsrs	r3, r3, #3
 8002a90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	fb02 f303 	mul.w	r3, r2, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aa2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f000 80e1 	beq.w	8002c70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	f000 8083 	beq.w	8002bbc <HAL_RCC_GetSysClockFreq+0x204>
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	f200 80a1 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x248>
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d003      	beq.n	8002acc <HAL_RCC_GetSysClockFreq+0x114>
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d056      	beq.n	8002b78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002aca:	e099      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002acc:	4b6f      	ldr	r3, [pc, #444]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0320 	and.w	r3, r3, #32
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d02d      	beq.n	8002b34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ad8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	08db      	lsrs	r3, r3, #3
 8002ade:	f003 0303 	and.w	r3, r3, #3
 8002ae2:	4a6b      	ldr	r2, [pc, #428]	@ (8002c90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ae8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	ee07 3a90 	vmov	s15, r3
 8002af0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b02:	4b62      	ldr	r3, [pc, #392]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b12:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b32:	e087      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002ca0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b46:	4b51      	ldr	r3, [pc, #324]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4e:	ee07 3a90 	vmov	s15, r3
 8002b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b56:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b76:	e065      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	ee07 3a90 	vmov	s15, r3
 8002b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b92:	ee07 3a90 	vmov	s15, r3
 8002b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bba:	e043      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	ee07 3a90 	vmov	s15, r3
 8002bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002ca8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bce:	4b2f      	ldr	r3, [pc, #188]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bd6:	ee07 3a90 	vmov	s15, r3
 8002bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bde:	ed97 6a02 	vldr	s12, [r7, #8]
 8002be2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bfe:	e021      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002ca4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c12:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c22:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c48:	0a5b      	lsrs	r3, r3, #9
 8002c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c4e:	3301      	adds	r3, #1
 8002c50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	ee07 3a90 	vmov	s15, r3
 8002c58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c68:	ee17 3a90 	vmov	r3, s15
 8002c6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	61bb      	str	r3, [r7, #24]
      break;
 8002c74:	e002      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c76:	4b07      	ldr	r3, [pc, #28]	@ (8002c94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c78:	61bb      	str	r3, [r7, #24]
      break;
 8002c7a:	bf00      	nop
  }

  return sysclockfreq;
 8002c7c:	69bb      	ldr	r3, [r7, #24]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3724      	adds	r7, #36	@ 0x24
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	03d09000 	.word	0x03d09000
 8002c94:	003d0900 	.word	0x003d0900
 8002c98:	017d7840 	.word	0x017d7840
 8002c9c:	46000000 	.word	0x46000000
 8002ca0:	4c742400 	.word	0x4c742400
 8002ca4:	4a742400 	.word	0x4a742400
 8002ca8:	4bbebc20 	.word	0x4bbebc20

08002cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002cb2:	f7ff fe81 	bl	80029b8 <HAL_RCC_GetSysClockFreq>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	4b10      	ldr	r3, [pc, #64]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8002cba:	699b      	ldr	r3, [r3, #24]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 030f 	and.w	r3, r3, #15
 8002cc2:	490f      	ldr	r1, [pc, #60]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cc4:	5ccb      	ldrb	r3, [r1, r3]
 8002cc6:	f003 031f 	and.w	r3, r3, #31
 8002cca:	fa22 f303 	lsr.w	r3, r2, r3
 8002cce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002cfc <HAL_RCC_GetHCLKFreq+0x50>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 030f 	and.w	r3, r3, #15
 8002cd8:	4a09      	ldr	r2, [pc, #36]	@ (8002d00 <HAL_RCC_GetHCLKFreq+0x54>)
 8002cda:	5cd3      	ldrb	r3, [r2, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	4a07      	ldr	r2, [pc, #28]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ce8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cea:	4a07      	ldr	r2, [pc, #28]	@ (8002d08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002cf0:	4b04      	ldr	r3, [pc, #16]	@ (8002d04 <HAL_RCC_GetHCLKFreq+0x58>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	58024400 	.word	0x58024400
 8002d00:	0800618c 	.word	0x0800618c
 8002d04:	24000004 	.word	0x24000004
 8002d08:	24000000 	.word	0x24000000

08002d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d10:	f7ff ffcc 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002d14:	4602      	mov	r2, r0
 8002d16:	4b06      	ldr	r3, [pc, #24]	@ (8002d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	091b      	lsrs	r3, r3, #4
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	4904      	ldr	r1, [pc, #16]	@ (8002d34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d22:	5ccb      	ldrb	r3, [r1, r3]
 8002d24:	f003 031f 	and.w	r3, r3, #31
 8002d28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	58024400 	.word	0x58024400
 8002d34:	0800618c 	.word	0x0800618c

08002d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002d3c:	f7ff ffb6 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002d40:	4602      	mov	r2, r0
 8002d42:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	0a1b      	lsrs	r3, r3, #8
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	4904      	ldr	r1, [pc, #16]	@ (8002d60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d4e:	5ccb      	ldrb	r3, [r1, r3]
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	58024400 	.word	0x58024400
 8002d60:	0800618c 	.word	0x0800618c

08002d64 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002d68:	f7ff ffa0 	bl	8002cac <HAL_RCC_GetHCLKFreq>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	4b06      	ldr	r3, [pc, #24]	@ (8002d88 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	091b      	lsrs	r3, r3, #4
 8002d74:	f003 0307 	and.w	r3, r3, #7
 8002d78:	4904      	ldr	r1, [pc, #16]	@ (8002d8c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002d7a:	5ccb      	ldrb	r3, [r1, r3]
 8002d7c:	f003 031f 	and.w	r3, r3, #31
 8002d80:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	58024400 	.word	0x58024400
 8002d8c:	0800618c 	.word	0x0800618c

08002d90 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	@ 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d98:	4ba1      	ldr	r3, [pc, #644]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002da2:	4b9f      	ldr	r3, [pc, #636]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da6:	0b1b      	lsrs	r3, r3, #12
 8002da8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dac:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002dae:	4b9c      	ldr	r3, [pc, #624]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0301 	and.w	r3, r3, #1
 8002db8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002dba:	4b99      	ldr	r3, [pc, #612]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dbe:	08db      	lsrs	r3, r3, #3
 8002dc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	fb02 f303 	mul.w	r3, r2, r3
 8002dca:	ee07 3a90 	vmov	s15, r3
 8002dce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dd2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	f000 8111 	beq.w	8003000 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	2b02      	cmp	r3, #2
 8002de2:	f000 8083 	beq.w	8002eec <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	f200 80a1 	bhi.w	8002f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002df4:	69bb      	ldr	r3, [r7, #24]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d056      	beq.n	8002ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002dfa:	e099      	b.n	8002f30 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dfc:	4b88      	ldr	r3, [pc, #544]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0320 	and.w	r3, r3, #32
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02d      	beq.n	8002e64 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e08:	4b85      	ldr	r3, [pc, #532]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	08db      	lsrs	r3, r3, #3
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	4a84      	ldr	r2, [pc, #528]	@ (8003024 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002e14:	fa22 f303 	lsr.w	r3, r2, r3
 8002e18:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	ee07 3a90 	vmov	s15, r3
 8002e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b7b      	ldr	r3, [pc, #492]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e46:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002e62:	e087      	b.n	8002f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800302c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b6a      	ldr	r3, [pc, #424]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e8a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ea6:	e065      	b.n	8002f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b59      	ldr	r3, [pc, #356]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ebc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ece:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002eea:	e043      	b.n	8002f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003034 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b48      	ldr	r3, [pc, #288]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f12:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f2e:	e021      	b.n	8002f74 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003030 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b37      	ldr	r3, [pc, #220]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f56:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003028 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f72:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002f74:	4b2a      	ldr	r3, [pc, #168]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f78:	0a5b      	lsrs	r3, r3, #9
 8002f7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f7e:	ee07 3a90 	vmov	s15, r3
 8002f82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f9a:	ee17 2a90 	vmov	r2, s15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002fa2:	4b1f      	ldr	r3, [pc, #124]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fac:	ee07 3a90 	vmov	s15, r3
 8002fb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fb4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002fbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc8:	ee17 2a90 	vmov	r2, s15
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002fd0:	4b13      	ldr	r3, [pc, #76]	@ (8003020 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fd4:	0e1b      	lsrs	r3, r3, #24
 8002fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fe2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fe6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002fea:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ff2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ff6:	ee17 2a90 	vmov	r2, s15
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002ffe:	e008      	b.n	8003012 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	609a      	str	r2, [r3, #8]
}
 8003012:	bf00      	nop
 8003014:	3724      	adds	r7, #36	@ 0x24
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	58024400 	.word	0x58024400
 8003024:	03d09000 	.word	0x03d09000
 8003028:	46000000 	.word	0x46000000
 800302c:	4c742400 	.word	0x4c742400
 8003030:	4a742400 	.word	0x4a742400
 8003034:	4bbebc20 	.word	0x4bbebc20

08003038 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003038:	b480      	push	{r7}
 800303a:	b089      	sub	sp, #36	@ 0x24
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003040:	4ba1      	ldr	r3, [pc, #644]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800304a:	4b9f      	ldr	r3, [pc, #636]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800304c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800304e:	0d1b      	lsrs	r3, r3, #20
 8003050:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003054:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003056:	4b9c      	ldr	r3, [pc, #624]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	0a1b      	lsrs	r3, r3, #8
 800305c:	f003 0301 	and.w	r3, r3, #1
 8003060:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003062:	4b99      	ldr	r3, [pc, #612]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003066:	08db      	lsrs	r3, r3, #3
 8003068:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	fb02 f303 	mul.w	r3, r2, r3
 8003072:	ee07 3a90 	vmov	s15, r3
 8003076:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800307a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8111 	beq.w	80032a8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	2b02      	cmp	r3, #2
 800308a:	f000 8083 	beq.w	8003194 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	2b02      	cmp	r3, #2
 8003092:	f200 80a1 	bhi.w	80031d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d056      	beq.n	8003150 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80030a2:	e099      	b.n	80031d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030a4:	4b88      	ldr	r3, [pc, #544]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d02d      	beq.n	800310c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030b0:	4b85      	ldr	r3, [pc, #532]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	08db      	lsrs	r3, r3, #3
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	4a84      	ldr	r2, [pc, #528]	@ (80032cc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80030bc:	fa22 f303 	lsr.w	r3, r2, r3
 80030c0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	ee07 3a90 	vmov	s15, r3
 80030c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	ee07 3a90 	vmov	s15, r3
 80030d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b7b      	ldr	r3, [pc, #492]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80030ee:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800310a:	e087      	b.n	800321c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80032d4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b6a      	ldr	r3, [pc, #424]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003132:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800314e:	e065      	b.n	800321c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	ee07 3a90 	vmov	s15, r3
 8003156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800315a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80032d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800315e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003162:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003172:	ed97 6a03 	vldr	s12, [r7, #12]
 8003176:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800317a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800317e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003182:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800318a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800318e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003192:	e043      	b.n	800321c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800319e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80032dc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80031a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031a6:	4b48      	ldr	r3, [pc, #288]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ae:	ee07 3a90 	vmov	s15, r3
 80031b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80031ba:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80031be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031d6:	e021      	b.n	800321c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031e2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80032d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80031e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ea:	4b37      	ldr	r3, [pc, #220]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031f2:	ee07 3a90 	vmov	s15, r3
 80031f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80031fe:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80032d0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800320a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800320e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800321a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800321c:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800321e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003220:	0a5b      	lsrs	r3, r3, #9
 8003222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003226:	ee07 3a90 	vmov	s15, r3
 800322a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800322e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003232:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003236:	edd7 6a07 	vldr	s13, [r7, #28]
 800323a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800323e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003242:	ee17 2a90 	vmov	r2, s15
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800324a:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800324c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003254:	ee07 3a90 	vmov	s15, r3
 8003258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800325c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003260:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003264:	edd7 6a07 	vldr	s13, [r7, #28]
 8003268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800326c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003270:	ee17 2a90 	vmov	r2, s15
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003278:	4b13      	ldr	r3, [pc, #76]	@ (80032c8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800327a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327c:	0e1b      	lsrs	r3, r3, #24
 800327e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800328e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003292:	edd7 6a07 	vldr	s13, [r7, #28]
 8003296:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800329a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800329e:	ee17 2a90 	vmov	r2, s15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80032a6:	e008      	b.n	80032ba <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	609a      	str	r2, [r3, #8]
}
 80032ba:	bf00      	nop
 80032bc:	3724      	adds	r7, #36	@ 0x24
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	58024400 	.word	0x58024400
 80032cc:	03d09000 	.word	0x03d09000
 80032d0:	46000000 	.word	0x46000000
 80032d4:	4c742400 	.word	0x4c742400
 80032d8:	4a742400 	.word	0x4a742400
 80032dc:	4bbebc20 	.word	0x4bbebc20

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e049      	b.n	8003386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7fd fde8 	bl	8000edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 ff9e 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
	...

08003390 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d001      	beq.n	80033a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e054      	b.n	8003452 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2202      	movs	r2, #2
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f042 0201 	orr.w	r2, r2, #1
 80033be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a26      	ldr	r2, [pc, #152]	@ (8003460 <HAL_TIM_Base_Start_IT+0xd0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d022      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80033d2:	d01d      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_TIM_Base_Start_IT+0xd4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d018      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a21      	ldr	r2, [pc, #132]	@ (8003468 <HAL_TIM_Base_Start_IT+0xd8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a1f      	ldr	r2, [pc, #124]	@ (800346c <HAL_TIM_Base_Start_IT+0xdc>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d00e      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003470 <HAL_TIM_Base_Start_IT+0xe0>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a1c      	ldr	r2, [pc, #112]	@ (8003474 <HAL_TIM_Base_Start_IT+0xe4>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIM_Base_Start_IT+0x80>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a1b      	ldr	r2, [pc, #108]	@ (8003478 <HAL_TIM_Base_Start_IT+0xe8>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d115      	bne.n	800343c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_TIM_Base_Start_IT+0xec>)
 8003418:	4013      	ands	r3, r2
 800341a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b06      	cmp	r3, #6
 8003420:	d015      	beq.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003428:	d011      	beq.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f042 0201 	orr.w	r2, r2, #1
 8003438:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343a:	e008      	b.n	800344e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	e000      	b.n	8003450 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	40010000 	.word	0x40010000
 8003464:	40000400 	.word	0x40000400
 8003468:	40000800 	.word	0x40000800
 800346c:	40000c00 	.word	0x40000c00
 8003470:	40010400 	.word	0x40010400
 8003474:	40001800 	.word	0x40001800
 8003478:	40014000 	.word	0x40014000
 800347c:	00010007 	.word	0x00010007

08003480 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b082      	sub	sp, #8
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e049      	b.n	8003526 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d106      	bne.n	80034ac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f841 	bl	800352e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3304      	adds	r3, #4
 80034bc:	4619      	mov	r1, r3
 80034be:	4610      	mov	r0, r2
 80034c0:	f000 fece 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d109      	bne.n	8003568 <HAL_TIM_PWM_Start+0x24>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800355a:	b2db      	uxtb	r3, r3
 800355c:	2b01      	cmp	r3, #1
 800355e:	bf14      	ite	ne
 8003560:	2301      	movne	r3, #1
 8003562:	2300      	moveq	r3, #0
 8003564:	b2db      	uxtb	r3, r3
 8003566:	e03c      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b04      	cmp	r3, #4
 800356c:	d109      	bne.n	8003582 <HAL_TIM_PWM_Start+0x3e>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	bf14      	ite	ne
 800357a:	2301      	movne	r3, #1
 800357c:	2300      	moveq	r3, #0
 800357e:	b2db      	uxtb	r3, r3
 8003580:	e02f      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d109      	bne.n	800359c <HAL_TIM_PWM_Start+0x58>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800358e:	b2db      	uxtb	r3, r3
 8003590:	2b01      	cmp	r3, #1
 8003592:	bf14      	ite	ne
 8003594:	2301      	movne	r3, #1
 8003596:	2300      	moveq	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e022      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	2b0c      	cmp	r3, #12
 80035a0:	d109      	bne.n	80035b6 <HAL_TIM_PWM_Start+0x72>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e015      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d109      	bne.n	80035d0 <HAL_TIM_PWM_Start+0x8c>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035c2:	b2db      	uxtb	r3, r3
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	bf14      	ite	ne
 80035c8:	2301      	movne	r3, #1
 80035ca:	2300      	moveq	r3, #0
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	e008      	b.n	80035e2 <HAL_TIM_PWM_Start+0x9e>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	2b01      	cmp	r3, #1
 80035da:	bf14      	ite	ne
 80035dc:	2301      	movne	r3, #1
 80035de:	2300      	moveq	r3, #0
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	e0a1      	b.n	800372e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d104      	bne.n	80035fa <HAL_TIM_PWM_Start+0xb6>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2202      	movs	r2, #2
 80035f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f8:	e023      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	2b04      	cmp	r3, #4
 80035fe:	d104      	bne.n	800360a <HAL_TIM_PWM_Start+0xc6>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003608:	e01b      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	2b08      	cmp	r3, #8
 800360e:	d104      	bne.n	800361a <HAL_TIM_PWM_Start+0xd6>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003618:	e013      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	2b0c      	cmp	r3, #12
 800361e:	d104      	bne.n	800362a <HAL_TIM_PWM_Start+0xe6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2202      	movs	r2, #2
 8003624:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003628:	e00b      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b10      	cmp	r3, #16
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0xf6>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003638:	e003      	b.n	8003642 <HAL_TIM_PWM_Start+0xfe>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2202      	movs	r2, #2
 800363e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	2201      	movs	r2, #1
 8003648:	6839      	ldr	r1, [r7, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f001 fb4c 	bl	8004ce8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a38      	ldr	r2, [pc, #224]	@ (8003738 <HAL_TIM_PWM_Start+0x1f4>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d013      	beq.n	8003682 <HAL_TIM_PWM_Start+0x13e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a37      	ldr	r2, [pc, #220]	@ (800373c <HAL_TIM_PWM_Start+0x1f8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d00e      	beq.n	8003682 <HAL_TIM_PWM_Start+0x13e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a35      	ldr	r2, [pc, #212]	@ (8003740 <HAL_TIM_PWM_Start+0x1fc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_TIM_PWM_Start+0x13e>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a34      	ldr	r2, [pc, #208]	@ (8003744 <HAL_TIM_PWM_Start+0x200>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d004      	beq.n	8003682 <HAL_TIM_PWM_Start+0x13e>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a32      	ldr	r2, [pc, #200]	@ (8003748 <HAL_TIM_PWM_Start+0x204>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_TIM_PWM_Start+0x142>
 8003682:	2301      	movs	r3, #1
 8003684:	e000      	b.n	8003688 <HAL_TIM_PWM_Start+0x144>
 8003686:	2300      	movs	r3, #0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d007      	beq.n	800369c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800369a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a25      	ldr	r2, [pc, #148]	@ (8003738 <HAL_TIM_PWM_Start+0x1f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d022      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036ae:	d01d      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a25      	ldr	r2, [pc, #148]	@ (800374c <HAL_TIM_PWM_Start+0x208>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d018      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a24      	ldr	r2, [pc, #144]	@ (8003750 <HAL_TIM_PWM_Start+0x20c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a22      	ldr	r2, [pc, #136]	@ (8003754 <HAL_TIM_PWM_Start+0x210>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1a      	ldr	r2, [pc, #104]	@ (800373c <HAL_TIM_PWM_Start+0x1f8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a1e      	ldr	r2, [pc, #120]	@ (8003758 <HAL_TIM_PWM_Start+0x214>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIM_PWM_Start+0x1a8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a16      	ldr	r2, [pc, #88]	@ (8003740 <HAL_TIM_PWM_Start+0x1fc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d115      	bne.n	8003718 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	689a      	ldr	r2, [r3, #8]
 80036f2:	4b1a      	ldr	r3, [pc, #104]	@ (800375c <HAL_TIM_PWM_Start+0x218>)
 80036f4:	4013      	ands	r3, r2
 80036f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2b06      	cmp	r3, #6
 80036fc:	d015      	beq.n	800372a <HAL_TIM_PWM_Start+0x1e6>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003704:	d011      	beq.n	800372a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0201 	orr.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003716:	e008      	b.n	800372a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]
 8003728:	e000      	b.n	800372c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800372a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3710      	adds	r7, #16
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40010000 	.word	0x40010000
 800373c:	40010400 	.word	0x40010400
 8003740:	40014000 	.word	0x40014000
 8003744:	40014400 	.word	0x40014400
 8003748:	40014800 	.word	0x40014800
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40001800 	.word	0x40001800
 800375c:	00010007 	.word	0x00010007

08003760 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e049      	b.n	8003806 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d106      	bne.n	800378c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f841 	bl	800380e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	4619      	mov	r1, r3
 800379e:	4610      	mov	r0, r2
 80037a0:	f000 fd5e 	bl	8004260 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003804:	2300      	movs	r3, #0
}
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}

0800380e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800380e:	b480      	push	{r7}
 8003810:	b083      	sub	sp, #12
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_IC_Start_IT+0x1e>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800383e:	b2db      	uxtb	r3, r3
 8003840:	e023      	b.n	800388a <HAL_TIM_IC_Start_IT+0x66>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_IC_Start_IT+0x2e>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800384e:	b2db      	uxtb	r3, r3
 8003850:	e01b      	b.n	800388a <HAL_TIM_IC_Start_IT+0x66>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_IC_Start_IT+0x3e>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800385e:	b2db      	uxtb	r3, r3
 8003860:	e013      	b.n	800388a <HAL_TIM_IC_Start_IT+0x66>
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2b0c      	cmp	r3, #12
 8003866:	d104      	bne.n	8003872 <HAL_TIM_IC_Start_IT+0x4e>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800386e:	b2db      	uxtb	r3, r3
 8003870:	e00b      	b.n	800388a <HAL_TIM_IC_Start_IT+0x66>
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	2b10      	cmp	r3, #16
 8003876:	d104      	bne.n	8003882 <HAL_TIM_IC_Start_IT+0x5e>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800387e:	b2db      	uxtb	r3, r3
 8003880:	e003      	b.n	800388a <HAL_TIM_IC_Start_IT+0x66>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003888:	b2db      	uxtb	r3, r3
 800388a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d104      	bne.n	800389c <HAL_TIM_IC_Start_IT+0x78>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003898:	b2db      	uxtb	r3, r3
 800389a:	e013      	b.n	80038c4 <HAL_TIM_IC_Start_IT+0xa0>
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d104      	bne.n	80038ac <HAL_TIM_IC_Start_IT+0x88>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	e00b      	b.n	80038c4 <HAL_TIM_IC_Start_IT+0xa0>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b08      	cmp	r3, #8
 80038b0:	d104      	bne.n	80038bc <HAL_TIM_IC_Start_IT+0x98>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e003      	b.n	80038c4 <HAL_TIM_IC_Start_IT+0xa0>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80038c6:	7bbb      	ldrb	r3, [r7, #14]
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d102      	bne.n	80038d2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80038cc:	7b7b      	ldrb	r3, [r7, #13]
 80038ce:	2b01      	cmp	r3, #1
 80038d0:	d001      	beq.n	80038d6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e0e2      	b.n	8003a9c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d104      	bne.n	80038e6 <HAL_TIM_IC_Start_IT+0xc2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2202      	movs	r2, #2
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80038e4:	e023      	b.n	800392e <HAL_TIM_IC_Start_IT+0x10a>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b04      	cmp	r3, #4
 80038ea:	d104      	bne.n	80038f6 <HAL_TIM_IC_Start_IT+0xd2>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2202      	movs	r2, #2
 80038f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80038f4:	e01b      	b.n	800392e <HAL_TIM_IC_Start_IT+0x10a>
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	2b08      	cmp	r3, #8
 80038fa:	d104      	bne.n	8003906 <HAL_TIM_IC_Start_IT+0xe2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2202      	movs	r2, #2
 8003900:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003904:	e013      	b.n	800392e <HAL_TIM_IC_Start_IT+0x10a>
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	d104      	bne.n	8003916 <HAL_TIM_IC_Start_IT+0xf2>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2202      	movs	r2, #2
 8003910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003914:	e00b      	b.n	800392e <HAL_TIM_IC_Start_IT+0x10a>
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b10      	cmp	r3, #16
 800391a:	d104      	bne.n	8003926 <HAL_TIM_IC_Start_IT+0x102>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2202      	movs	r2, #2
 8003920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003924:	e003      	b.n	800392e <HAL_TIM_IC_Start_IT+0x10a>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <HAL_TIM_IC_Start_IT+0x11a>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2202      	movs	r2, #2
 8003938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800393c:	e013      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x142>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b04      	cmp	r3, #4
 8003942:	d104      	bne.n	800394e <HAL_TIM_IC_Start_IT+0x12a>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2202      	movs	r2, #2
 8003948:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800394c:	e00b      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x142>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	2b08      	cmp	r3, #8
 8003952:	d104      	bne.n	800395e <HAL_TIM_IC_Start_IT+0x13a>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2202      	movs	r2, #2
 8003958:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800395c:	e003      	b.n	8003966 <HAL_TIM_IC_Start_IT+0x142>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2202      	movs	r2, #2
 8003962:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b0c      	cmp	r3, #12
 800396a:	d841      	bhi.n	80039f0 <HAL_TIM_IC_Start_IT+0x1cc>
 800396c:	a201      	add	r2, pc, #4	@ (adr r2, 8003974 <HAL_TIM_IC_Start_IT+0x150>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	080039a9 	.word	0x080039a9
 8003978:	080039f1 	.word	0x080039f1
 800397c:	080039f1 	.word	0x080039f1
 8003980:	080039f1 	.word	0x080039f1
 8003984:	080039bb 	.word	0x080039bb
 8003988:	080039f1 	.word	0x080039f1
 800398c:	080039f1 	.word	0x080039f1
 8003990:	080039f1 	.word	0x080039f1
 8003994:	080039cd 	.word	0x080039cd
 8003998:	080039f1 	.word	0x080039f1
 800399c:	080039f1 	.word	0x080039f1
 80039a0:	080039f1 	.word	0x080039f1
 80039a4:	080039df 	.word	0x080039df
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0202 	orr.w	r2, r2, #2
 80039b6:	60da      	str	r2, [r3, #12]
      break;
 80039b8:	e01d      	b.n	80039f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68da      	ldr	r2, [r3, #12]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f042 0204 	orr.w	r2, r2, #4
 80039c8:	60da      	str	r2, [r3, #12]
      break;
 80039ca:	e014      	b.n	80039f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68da      	ldr	r2, [r3, #12]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0208 	orr.w	r2, r2, #8
 80039da:	60da      	str	r2, [r3, #12]
      break;
 80039dc:	e00b      	b.n	80039f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68da      	ldr	r2, [r3, #12]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f042 0210 	orr.w	r2, r2, #16
 80039ec:	60da      	str	r2, [r3, #12]
      break;
 80039ee:	e002      	b.n	80039f6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	73fb      	strb	r3, [r7, #15]
      break;
 80039f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d14e      	bne.n	8003a9a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2201      	movs	r2, #1
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 f96f 	bl	8004ce8 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <HAL_TIM_IC_Start_IT+0x280>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d022      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a1c:	d01d      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a21      	ldr	r2, [pc, #132]	@ (8003aa8 <HAL_TIM_IC_Start_IT+0x284>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d018      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <HAL_TIM_IC_Start_IT+0x288>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d013      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a1e      	ldr	r2, [pc, #120]	@ (8003ab0 <HAL_TIM_IC_Start_IT+0x28c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d00e      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a1c      	ldr	r2, [pc, #112]	@ (8003ab4 <HAL_TIM_IC_Start_IT+0x290>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d009      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003ab8 <HAL_TIM_IC_Start_IT+0x294>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d004      	beq.n	8003a5a <HAL_TIM_IC_Start_IT+0x236>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	@ (8003abc <HAL_TIM_IC_Start_IT+0x298>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d115      	bne.n	8003a86 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	4b17      	ldr	r3, [pc, #92]	@ (8003ac0 <HAL_TIM_IC_Start_IT+0x29c>)
 8003a62:	4013      	ands	r3, r2
 8003a64:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b06      	cmp	r3, #6
 8003a6a:	d015      	beq.n	8003a98 <HAL_TIM_IC_Start_IT+0x274>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a72:	d011      	beq.n	8003a98 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f042 0201 	orr.w	r2, r2, #1
 8003a82:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a84:	e008      	b.n	8003a98 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f042 0201 	orr.w	r2, r2, #1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	e000      	b.n	8003a9a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a98:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8003a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	3710      	adds	r7, #16
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40010000 	.word	0x40010000
 8003aa8:	40000400 	.word	0x40000400
 8003aac:	40000800 	.word	0x40000800
 8003ab0:	40000c00 	.word	0x40000c00
 8003ab4:	40010400 	.word	0x40010400
 8003ab8:	40001800 	.word	0x40001800
 8003abc:	40014000 	.word	0x40014000
 8003ac0:	00010007 	.word	0x00010007

08003ac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	68db      	ldr	r3, [r3, #12]
 8003ad2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d020      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d01b      	beq.n	8003b28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f06f 0202 	mvn.w	r2, #2
 8003af8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2201      	movs	r2, #1
 8003afe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	f003 0303 	and.w	r3, r3, #3
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f7fd f912 	bl	8000d38 <HAL_TIM_IC_CaptureCallback>
 8003b14:	e005      	b.n	8003b22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 fb84 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fb8b 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	f003 0304 	and.w	r3, r3, #4
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d020      	beq.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d01b      	beq.n	8003b74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f06f 0204 	mvn.w	r2, #4
 8003b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2202      	movs	r2, #2
 8003b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7fd f8ec 	bl	8000d38 <HAL_TIM_IC_CaptureCallback>
 8003b60:	e005      	b.n	8003b6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fb5e 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fb65 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2200      	movs	r2, #0
 8003b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f003 0308 	and.w	r3, r3, #8
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d020      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f003 0308 	and.w	r3, r3, #8
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d01b      	beq.n	8003bc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f06f 0208 	mvn.w	r2, #8
 8003b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2204      	movs	r2, #4
 8003b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	f003 0303 	and.w	r3, r3, #3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f7fd f8c6 	bl	8000d38 <HAL_TIM_IC_CaptureCallback>
 8003bac:	e005      	b.n	8003bba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 fb38 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fb3f 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	f003 0310 	and.w	r3, r3, #16
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d020      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f003 0310 	and.w	r3, r3, #16
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f06f 0210 	mvn.w	r2, #16
 8003bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2208      	movs	r2, #8
 8003be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	69db      	ldr	r3, [r3, #28]
 8003bea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d003      	beq.n	8003bfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fd f8a0 	bl	8000d38 <HAL_TIM_IC_CaptureCallback>
 8003bf8:	e005      	b.n	8003c06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fb12 	bl	8004224 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 fb19 	bl	8004238 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00c      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d007      	beq.n	8003c30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0201 	mvn.w	r2, #1
 8003c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fd f8a6 	bl	8000d7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d104      	bne.n	8003c44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00c      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d007      	beq.n	8003c5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003c56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f001 fa43 	bl	80050e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00c      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d007      	beq.n	8003c82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f001 fa3b 	bl	80050f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d007      	beq.n	8003ca6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fad3 	bl	800424c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f003 0320 	and.w	r3, r3, #32
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00c      	beq.n	8003cca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f003 0320 	and.w	r3, r3, #32
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d007      	beq.n	8003cca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0220 	mvn.w	r2, #32
 8003cc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f001 fa03 	bl	80050d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cca:	bf00      	nop
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b086      	sub	sp, #24
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	60f8      	str	r0, [r7, #12]
 8003cda:	60b9      	str	r1, [r7, #8]
 8003cdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e088      	b.n	8003e02 <HAL_TIM_IC_ConfigChannel+0x130>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d11b      	bne.n	8003d36 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d0e:	f000 fe23 	bl	8004958 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	699a      	ldr	r2, [r3, #24]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 020c 	bic.w	r2, r2, #12
 8003d20:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	6999      	ldr	r1, [r3, #24]
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	430a      	orrs	r2, r1
 8003d32:	619a      	str	r2, [r3, #24]
 8003d34:	e060      	b.n	8003df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d11c      	bne.n	8003d76 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003d4c:	f000 fea7 	bl	8004a9e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003d5e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6999      	ldr	r1, [r3, #24]
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	021a      	lsls	r2, r3, #8
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	430a      	orrs	r2, r1
 8003d72:	619a      	str	r2, [r3, #24]
 8003d74:	e040      	b.n	8003df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b08      	cmp	r3, #8
 8003d7a:	d11b      	bne.n	8003db4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003d8c:	f000 fef4 	bl	8004b78 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 020c 	bic.w	r2, r2, #12
 8003d9e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69d9      	ldr	r1, [r3, #28]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	689a      	ldr	r2, [r3, #8]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	61da      	str	r2, [r3, #28]
 8003db2:	e021      	b.n	8003df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d11c      	bne.n	8003df4 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003dca:	f000 ff11 	bl	8004bf0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69da      	ldr	r2, [r3, #28]
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003ddc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69d9      	ldr	r1, [r3, #28]
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	021a      	lsls	r2, r3, #8
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	61da      	str	r2, [r3, #28]
 8003df2:	e001      	b.n	8003df8 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e00:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3718      	adds	r7, #24
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e0ff      	b.n	800402a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b14      	cmp	r3, #20
 8003e36:	f200 80f0 	bhi.w	800401a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e95 	.word	0x08003e95
 8003e44:	0800401b 	.word	0x0800401b
 8003e48:	0800401b 	.word	0x0800401b
 8003e4c:	0800401b 	.word	0x0800401b
 8003e50:	08003ed5 	.word	0x08003ed5
 8003e54:	0800401b 	.word	0x0800401b
 8003e58:	0800401b 	.word	0x0800401b
 8003e5c:	0800401b 	.word	0x0800401b
 8003e60:	08003f17 	.word	0x08003f17
 8003e64:	0800401b 	.word	0x0800401b
 8003e68:	0800401b 	.word	0x0800401b
 8003e6c:	0800401b 	.word	0x0800401b
 8003e70:	08003f57 	.word	0x08003f57
 8003e74:	0800401b 	.word	0x0800401b
 8003e78:	0800401b 	.word	0x0800401b
 8003e7c:	0800401b 	.word	0x0800401b
 8003e80:	08003f99 	.word	0x08003f99
 8003e84:	0800401b 	.word	0x0800401b
 8003e88:	0800401b 	.word	0x0800401b
 8003e8c:	0800401b 	.word	0x0800401b
 8003e90:	08003fd9 	.word	0x08003fd9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fa86 	bl	80043ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f042 0208 	orr.w	r2, r2, #8
 8003eae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0204 	bic.w	r2, r2, #4
 8003ebe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6999      	ldr	r1, [r3, #24]
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	619a      	str	r2, [r3, #24]
      break;
 8003ed2:	e0a5      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 faf6 	bl	80044cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	699a      	ldr	r2, [r3, #24]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003eee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	699a      	ldr	r2, [r3, #24]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003efe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	6999      	ldr	r1, [r3, #24]
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	691b      	ldr	r3, [r3, #16]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	430a      	orrs	r2, r1
 8003f12:	619a      	str	r2, [r3, #24]
      break;
 8003f14:	e084      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68b9      	ldr	r1, [r7, #8]
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fb5f 	bl	80045e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69da      	ldr	r2, [r3, #28]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f042 0208 	orr.w	r2, r2, #8
 8003f30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	69da      	ldr	r2, [r3, #28]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 0204 	bic.w	r2, r2, #4
 8003f40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	691a      	ldr	r2, [r3, #16]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	61da      	str	r2, [r3, #28]
      break;
 8003f54:	e064      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68b9      	ldr	r1, [r7, #8]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 fbc7 	bl	80046f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	021a      	lsls	r2, r3, #8
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	61da      	str	r2, [r3, #28]
      break;
 8003f96:	e043      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fc10 	bl	80047c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 0204 	bic.w	r2, r2, #4
 8003fc2:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	430a      	orrs	r2, r1
 8003fd4:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003fd6:	e023      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68b9      	ldr	r1, [r7, #8]
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f000 fc54 	bl	800488c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004002:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	021a      	lsls	r2, r3, #8
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8004018:	e002      	b.n	8004020 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
      break;
 800401e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004028:	7dfb      	ldrb	r3, [r7, #23]
}
 800402a:	4618      	mov	r0, r3
 800402c:	3718      	adds	r7, #24
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop

08004034 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_TIM_ConfigClockSource+0x1c>
 800404c:	2302      	movs	r3, #2
 800404e:	e0dc      	b.n	800420a <HAL_TIM_ConfigClockSource+0x1d6>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2202      	movs	r2, #2
 800405c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	4b6a      	ldr	r3, [pc, #424]	@ (8004214 <HAL_TIM_ConfigClockSource+0x1e0>)
 800406c:	4013      	ands	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004076:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a64      	ldr	r2, [pc, #400]	@ (8004218 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	f000 80a9 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 800408c:	4a62      	ldr	r2, [pc, #392]	@ (8004218 <HAL_TIM_ConfigClockSource+0x1e4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	f200 80ae 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004094:	4a61      	ldr	r2, [pc, #388]	@ (800421c <HAL_TIM_ConfigClockSource+0x1e8>)
 8004096:	4293      	cmp	r3, r2
 8004098:	f000 80a1 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 800409c:	4a5f      	ldr	r2, [pc, #380]	@ (800421c <HAL_TIM_ConfigClockSource+0x1e8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	f200 80a6 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040a4:	4a5e      	ldr	r2, [pc, #376]	@ (8004220 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	f000 8099 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 80040ac:	4a5c      	ldr	r2, [pc, #368]	@ (8004220 <HAL_TIM_ConfigClockSource+0x1ec>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	f200 809e 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040b4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80040b8:	f000 8091 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 80040bc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80040c0:	f200 8096 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040c4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040c8:	f000 8089 	beq.w	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 80040cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040d0:	f200 808e 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d8:	d03e      	beq.n	8004158 <HAL_TIM_ConfigClockSource+0x124>
 80040da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040de:	f200 8087 	bhi.w	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e6:	f000 8086 	beq.w	80041f6 <HAL_TIM_ConfigClockSource+0x1c2>
 80040ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040ee:	d87f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040f0:	2b70      	cmp	r3, #112	@ 0x70
 80040f2:	d01a      	beq.n	800412a <HAL_TIM_ConfigClockSource+0xf6>
 80040f4:	2b70      	cmp	r3, #112	@ 0x70
 80040f6:	d87b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 80040f8:	2b60      	cmp	r3, #96	@ 0x60
 80040fa:	d050      	beq.n	800419e <HAL_TIM_ConfigClockSource+0x16a>
 80040fc:	2b60      	cmp	r3, #96	@ 0x60
 80040fe:	d877      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004100:	2b50      	cmp	r3, #80	@ 0x50
 8004102:	d03c      	beq.n	800417e <HAL_TIM_ConfigClockSource+0x14a>
 8004104:	2b50      	cmp	r3, #80	@ 0x50
 8004106:	d873      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004108:	2b40      	cmp	r3, #64	@ 0x40
 800410a:	d058      	beq.n	80041be <HAL_TIM_ConfigClockSource+0x18a>
 800410c:	2b40      	cmp	r3, #64	@ 0x40
 800410e:	d86f      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004110:	2b30      	cmp	r3, #48	@ 0x30
 8004112:	d064      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 8004114:	2b30      	cmp	r3, #48	@ 0x30
 8004116:	d86b      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004118:	2b20      	cmp	r3, #32
 800411a:	d060      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 800411c:	2b20      	cmp	r3, #32
 800411e:	d867      	bhi.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d05c      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 8004124:	2b10      	cmp	r3, #16
 8004126:	d05a      	beq.n	80041de <HAL_TIM_ConfigClockSource+0x1aa>
 8004128:	e062      	b.n	80041f0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800413a:	f000 fdb5 	bl	8004ca8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800414c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	609a      	str	r2, [r3, #8]
      break;
 8004156:	e04f      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004168:	f000 fd9e 	bl	8004ca8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689a      	ldr	r2, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800417a:	609a      	str	r2, [r3, #8]
      break;
 800417c:	e03c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800418a:	461a      	mov	r2, r3
 800418c:	f000 fc58 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2150      	movs	r1, #80	@ 0x50
 8004196:	4618      	mov	r0, r3
 8004198:	f000 fd68 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 800419c:	e02c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80041aa:	461a      	mov	r2, r3
 80041ac:	f000 fcb4 	bl	8004b18 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	2160      	movs	r1, #96	@ 0x60
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fd58 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 80041bc:	e01c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ca:	461a      	mov	r2, r3
 80041cc:	f000 fc38 	bl	8004a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2140      	movs	r1, #64	@ 0x40
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fd48 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 80041dc:	e00c      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4619      	mov	r1, r3
 80041e8:	4610      	mov	r0, r2
 80041ea:	f000 fd3f 	bl	8004c6c <TIM_ITRx_SetConfig>
      break;
 80041ee:	e003      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	73fb      	strb	r3, [r7, #15]
      break;
 80041f4:	e000      	b.n	80041f8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80041f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004208:	7bfb      	ldrb	r3, [r7, #15]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	ffceff88 	.word	0xffceff88
 8004218:	00100040 	.word	0x00100040
 800421c:	00100030 	.word	0x00100030
 8004220:	00100020 	.word	0x00100020

08004224 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800422c:	bf00      	nop
 800422e:	370c      	adds	r7, #12
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004240:	bf00      	nop
 8004242:	370c      	adds	r7, #12
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004254:	bf00      	nop
 8004256:	370c      	adds	r7, #12
 8004258:	46bd      	mov	sp, r7
 800425a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425e:	4770      	bx	lr

08004260 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004260:	b480      	push	{r7}
 8004262:	b085      	sub	sp, #20
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a46      	ldr	r2, [pc, #280]	@ (800438c <TIM_Base_SetConfig+0x12c>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d013      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427e:	d00f      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4a43      	ldr	r2, [pc, #268]	@ (8004390 <TIM_Base_SetConfig+0x130>)
 8004284:	4293      	cmp	r3, r2
 8004286:	d00b      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a42      	ldr	r2, [pc, #264]	@ (8004394 <TIM_Base_SetConfig+0x134>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d007      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a41      	ldr	r2, [pc, #260]	@ (8004398 <TIM_Base_SetConfig+0x138>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a40      	ldr	r2, [pc, #256]	@ (800439c <TIM_Base_SetConfig+0x13c>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d108      	bne.n	80042b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a35      	ldr	r2, [pc, #212]	@ (800438c <TIM_Base_SetConfig+0x12c>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d01f      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c0:	d01b      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a32      	ldr	r2, [pc, #200]	@ (8004390 <TIM_Base_SetConfig+0x130>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d017      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a31      	ldr	r2, [pc, #196]	@ (8004394 <TIM_Base_SetConfig+0x134>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a30      	ldr	r2, [pc, #192]	@ (8004398 <TIM_Base_SetConfig+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d00f      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a2f      	ldr	r2, [pc, #188]	@ (800439c <TIM_Base_SetConfig+0x13c>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d00b      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2e      	ldr	r2, [pc, #184]	@ (80043a0 <TIM_Base_SetConfig+0x140>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d007      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2d      	ldr	r2, [pc, #180]	@ (80043a4 <TIM_Base_SetConfig+0x144>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_Base_SetConfig+0x9a>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2c      	ldr	r2, [pc, #176]	@ (80043a8 <TIM_Base_SetConfig+0x148>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d108      	bne.n	800430c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	4313      	orrs	r3, r2
 800430a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	689a      	ldr	r2, [r3, #8]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a16      	ldr	r2, [pc, #88]	@ (800438c <TIM_Base_SetConfig+0x12c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d00f      	beq.n	8004358 <TIM_Base_SetConfig+0xf8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a18      	ldr	r2, [pc, #96]	@ (800439c <TIM_Base_SetConfig+0x13c>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00b      	beq.n	8004358 <TIM_Base_SetConfig+0xf8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <TIM_Base_SetConfig+0x140>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <TIM_Base_SetConfig+0xf8>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a16      	ldr	r2, [pc, #88]	@ (80043a4 <TIM_Base_SetConfig+0x144>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_Base_SetConfig+0xf8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a15      	ldr	r2, [pc, #84]	@ (80043a8 <TIM_Base_SetConfig+0x148>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d103      	bne.n	8004360 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	691a      	ldr	r2, [r3, #16]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	2b01      	cmp	r3, #1
 8004370:	d105      	bne.n	800437e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	f023 0201 	bic.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	611a      	str	r2, [r3, #16]
  }
}
 800437e:	bf00      	nop
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40014400 	.word	0x40014400
 80043a8:	40014800 	.word	0x40014800

080043ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
 80043ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a1b      	ldr	r3, [r3, #32]
 80043c0:	f023 0201 	bic.w	r2, r3, #1
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4b37      	ldr	r3, [pc, #220]	@ (80044b4 <TIM_OC1_SetConfig+0x108>)
 80043d8:	4013      	ands	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	f023 0302 	bic.w	r3, r3, #2
 80043f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	4313      	orrs	r3, r2
 80043fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a2d      	ldr	r2, [pc, #180]	@ (80044b8 <TIM_OC1_SetConfig+0x10c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d00f      	beq.n	8004428 <TIM_OC1_SetConfig+0x7c>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a2c      	ldr	r2, [pc, #176]	@ (80044bc <TIM_OC1_SetConfig+0x110>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00b      	beq.n	8004428 <TIM_OC1_SetConfig+0x7c>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a2b      	ldr	r2, [pc, #172]	@ (80044c0 <TIM_OC1_SetConfig+0x114>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d007      	beq.n	8004428 <TIM_OC1_SetConfig+0x7c>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a2a      	ldr	r2, [pc, #168]	@ (80044c4 <TIM_OC1_SetConfig+0x118>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d003      	beq.n	8004428 <TIM_OC1_SetConfig+0x7c>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a29      	ldr	r2, [pc, #164]	@ (80044c8 <TIM_OC1_SetConfig+0x11c>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d10c      	bne.n	8004442 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	f023 0308 	bic.w	r3, r3, #8
 800442e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	697a      	ldr	r2, [r7, #20]
 8004436:	4313      	orrs	r3, r2
 8004438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f023 0304 	bic.w	r3, r3, #4
 8004440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a1c      	ldr	r2, [pc, #112]	@ (80044b8 <TIM_OC1_SetConfig+0x10c>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d00f      	beq.n	800446a <TIM_OC1_SetConfig+0xbe>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4a1b      	ldr	r2, [pc, #108]	@ (80044bc <TIM_OC1_SetConfig+0x110>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d00b      	beq.n	800446a <TIM_OC1_SetConfig+0xbe>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	4a1a      	ldr	r2, [pc, #104]	@ (80044c0 <TIM_OC1_SetConfig+0x114>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d007      	beq.n	800446a <TIM_OC1_SetConfig+0xbe>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a19      	ldr	r2, [pc, #100]	@ (80044c4 <TIM_OC1_SetConfig+0x118>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d003      	beq.n	800446a <TIM_OC1_SetConfig+0xbe>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4a18      	ldr	r2, [pc, #96]	@ (80044c8 <TIM_OC1_SetConfig+0x11c>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d111      	bne.n	800448e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004470:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	4313      	orrs	r3, r2
 8004482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	4313      	orrs	r3, r2
 800448c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	621a      	str	r2, [r3, #32]
}
 80044a8:	bf00      	nop
 80044aa:	371c      	adds	r7, #28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr
 80044b4:	fffeff8f 	.word	0xfffeff8f
 80044b8:	40010000 	.word	0x40010000
 80044bc:	40010400 	.word	0x40010400
 80044c0:	40014000 	.word	0x40014000
 80044c4:	40014400 	.word	0x40014400
 80044c8:	40014800 	.word	0x40014800

080044cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b087      	sub	sp, #28
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	f023 0210 	bic.w	r2, r3, #16
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4b34      	ldr	r3, [pc, #208]	@ (80045c8 <TIM_OC2_SetConfig+0xfc>)
 80044f8:	4013      	ands	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	021b      	lsls	r3, r3, #8
 800450a:	68fa      	ldr	r2, [r7, #12]
 800450c:	4313      	orrs	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f023 0320 	bic.w	r3, r3, #32
 8004516:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	011b      	lsls	r3, r3, #4
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a29      	ldr	r2, [pc, #164]	@ (80045cc <TIM_OC2_SetConfig+0x100>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0x68>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a28      	ldr	r2, [pc, #160]	@ (80045d0 <TIM_OC2_SetConfig+0x104>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10d      	bne.n	8004550 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	011b      	lsls	r3, r3, #4
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800454e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a1e      	ldr	r2, [pc, #120]	@ (80045cc <TIM_OC2_SetConfig+0x100>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d00f      	beq.n	8004578 <TIM_OC2_SetConfig+0xac>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a1d      	ldr	r2, [pc, #116]	@ (80045d0 <TIM_OC2_SetConfig+0x104>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d00b      	beq.n	8004578 <TIM_OC2_SetConfig+0xac>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <TIM_OC2_SetConfig+0x108>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d007      	beq.n	8004578 <TIM_OC2_SetConfig+0xac>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a1b      	ldr	r2, [pc, #108]	@ (80045d8 <TIM_OC2_SetConfig+0x10c>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d003      	beq.n	8004578 <TIM_OC2_SetConfig+0xac>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a1a      	ldr	r2, [pc, #104]	@ (80045dc <TIM_OC2_SetConfig+0x110>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d113      	bne.n	80045a0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800457e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004586:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	4313      	orrs	r3, r2
 8004592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	699b      	ldr	r3, [r3, #24]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	693a      	ldr	r2, [r7, #16]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	621a      	str	r2, [r3, #32]
}
 80045ba:	bf00      	nop
 80045bc:	371c      	adds	r7, #28
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	feff8fff 	.word	0xfeff8fff
 80045cc:	40010000 	.word	0x40010000
 80045d0:	40010400 	.word	0x40010400
 80045d4:	40014000 	.word	0x40014000
 80045d8:	40014400 	.word	0x40014400
 80045dc:	40014800 	.word	0x40014800

080045e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a1b      	ldr	r3, [r3, #32]
 80045f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	69db      	ldr	r3, [r3, #28]
 8004606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004608:	68fa      	ldr	r2, [r7, #12]
 800460a:	4b33      	ldr	r3, [pc, #204]	@ (80046d8 <TIM_OC3_SetConfig+0xf8>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	f023 0303 	bic.w	r3, r3, #3
 8004616:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004628:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	4313      	orrs	r3, r2
 8004634:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a28      	ldr	r2, [pc, #160]	@ (80046dc <TIM_OC3_SetConfig+0xfc>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d003      	beq.n	8004646 <TIM_OC3_SetConfig+0x66>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a27      	ldr	r2, [pc, #156]	@ (80046e0 <TIM_OC3_SetConfig+0x100>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d10d      	bne.n	8004662 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800464c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	021b      	lsls	r3, r3, #8
 8004654:	697a      	ldr	r2, [r7, #20]
 8004656:	4313      	orrs	r3, r2
 8004658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a1d      	ldr	r2, [pc, #116]	@ (80046dc <TIM_OC3_SetConfig+0xfc>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d00f      	beq.n	800468a <TIM_OC3_SetConfig+0xaa>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a1c      	ldr	r2, [pc, #112]	@ (80046e0 <TIM_OC3_SetConfig+0x100>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d00b      	beq.n	800468a <TIM_OC3_SetConfig+0xaa>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a1b      	ldr	r2, [pc, #108]	@ (80046e4 <TIM_OC3_SetConfig+0x104>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d007      	beq.n	800468a <TIM_OC3_SetConfig+0xaa>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a1a      	ldr	r2, [pc, #104]	@ (80046e8 <TIM_OC3_SetConfig+0x108>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d003      	beq.n	800468a <TIM_OC3_SetConfig+0xaa>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a19      	ldr	r2, [pc, #100]	@ (80046ec <TIM_OC3_SetConfig+0x10c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d113      	bne.n	80046b2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	011b      	lsls	r3, r3, #4
 80046a0:	693a      	ldr	r2, [r7, #16]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	011b      	lsls	r3, r3, #4
 80046ac:	693a      	ldr	r2, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68fa      	ldr	r2, [r7, #12]
 80046bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685a      	ldr	r2, [r3, #4]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	fffeff8f 	.word	0xfffeff8f
 80046dc:	40010000 	.word	0x40010000
 80046e0:	40010400 	.word	0x40010400
 80046e4:	40014000 	.word	0x40014000
 80046e8:	40014400 	.word	0x40014400
 80046ec:	40014800 	.word	0x40014800

080046f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b087      	sub	sp, #28
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	4b24      	ldr	r3, [pc, #144]	@ (80047ac <TIM_OC4_SetConfig+0xbc>)
 800471c:	4013      	ands	r3, r2
 800471e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004726:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	4313      	orrs	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800473a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	031b      	lsls	r3, r3, #12
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	4a19      	ldr	r2, [pc, #100]	@ (80047b0 <TIM_OC4_SetConfig+0xc0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d00f      	beq.n	8004770 <TIM_OC4_SetConfig+0x80>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <TIM_OC4_SetConfig+0xc4>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d00b      	beq.n	8004770 <TIM_OC4_SetConfig+0x80>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a17      	ldr	r2, [pc, #92]	@ (80047b8 <TIM_OC4_SetConfig+0xc8>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d007      	beq.n	8004770 <TIM_OC4_SetConfig+0x80>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	4a16      	ldr	r2, [pc, #88]	@ (80047bc <TIM_OC4_SetConfig+0xcc>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d003      	beq.n	8004770 <TIM_OC4_SetConfig+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a15      	ldr	r2, [pc, #84]	@ (80047c0 <TIM_OC4_SetConfig+0xd0>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d109      	bne.n	8004784 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004776:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	695b      	ldr	r3, [r3, #20]
 800477c:	019b      	lsls	r3, r3, #6
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	693a      	ldr	r2, [r7, #16]
 800479c:	621a      	str	r2, [r3, #32]
}
 800479e:	bf00      	nop
 80047a0:	371c      	adds	r7, #28
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	feff8fff 	.word	0xfeff8fff
 80047b0:	40010000 	.word	0x40010000
 80047b4:	40010400 	.word	0x40010400
 80047b8:	40014000 	.word	0x40014000
 80047bc:	40014400 	.word	0x40014400
 80047c0:	40014800 	.word	0x40014800

080047c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a1b      	ldr	r3, [r3, #32]
 80047d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80047ec:	68fa      	ldr	r2, [r7, #12]
 80047ee:	4b21      	ldr	r3, [pc, #132]	@ (8004874 <TIM_OC5_SetConfig+0xb0>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8004804:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	041b      	lsls	r3, r3, #16
 800480c:	693a      	ldr	r2, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a18      	ldr	r2, [pc, #96]	@ (8004878 <TIM_OC5_SetConfig+0xb4>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00f      	beq.n	800483a <TIM_OC5_SetConfig+0x76>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a17      	ldr	r2, [pc, #92]	@ (800487c <TIM_OC5_SetConfig+0xb8>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00b      	beq.n	800483a <TIM_OC5_SetConfig+0x76>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a16      	ldr	r2, [pc, #88]	@ (8004880 <TIM_OC5_SetConfig+0xbc>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d007      	beq.n	800483a <TIM_OC5_SetConfig+0x76>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a15      	ldr	r2, [pc, #84]	@ (8004884 <TIM_OC5_SetConfig+0xc0>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d003      	beq.n	800483a <TIM_OC5_SetConfig+0x76>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a14      	ldr	r2, [pc, #80]	@ (8004888 <TIM_OC5_SetConfig+0xc4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d109      	bne.n	800484e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004840:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	021b      	lsls	r3, r3, #8
 8004848:	697a      	ldr	r2, [r7, #20]
 800484a:	4313      	orrs	r3, r2
 800484c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685a      	ldr	r2, [r3, #4]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	621a      	str	r2, [r3, #32]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	fffeff8f 	.word	0xfffeff8f
 8004878:	40010000 	.word	0x40010000
 800487c:	40010400 	.word	0x40010400
 8004880:	40014000 	.word	0x40014000
 8004884:	40014400 	.word	0x40014400
 8004888:	40014800 	.word	0x40014800

0800488c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80048b4:	68fa      	ldr	r2, [r7, #12]
 80048b6:	4b22      	ldr	r3, [pc, #136]	@ (8004940 <TIM_OC6_SetConfig+0xb4>)
 80048b8:	4013      	ands	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	021b      	lsls	r3, r3, #8
 80048c2:	68fa      	ldr	r2, [r7, #12]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80048ce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	689b      	ldr	r3, [r3, #8]
 80048d4:	051b      	lsls	r3, r3, #20
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	4313      	orrs	r3, r2
 80048da:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a19      	ldr	r2, [pc, #100]	@ (8004944 <TIM_OC6_SetConfig+0xb8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00f      	beq.n	8004904 <TIM_OC6_SetConfig+0x78>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <TIM_OC6_SetConfig+0xbc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d00b      	beq.n	8004904 <TIM_OC6_SetConfig+0x78>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a17      	ldr	r2, [pc, #92]	@ (800494c <TIM_OC6_SetConfig+0xc0>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d007      	beq.n	8004904 <TIM_OC6_SetConfig+0x78>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a16      	ldr	r2, [pc, #88]	@ (8004950 <TIM_OC6_SetConfig+0xc4>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d003      	beq.n	8004904 <TIM_OC6_SetConfig+0x78>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a15      	ldr	r2, [pc, #84]	@ (8004954 <TIM_OC6_SetConfig+0xc8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d109      	bne.n	8004918 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	029b      	lsls	r3, r3, #10
 8004912:	697a      	ldr	r2, [r7, #20]
 8004914:	4313      	orrs	r3, r2
 8004916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	685a      	ldr	r2, [r3, #4]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	693a      	ldr	r2, [r7, #16]
 8004930:	621a      	str	r2, [r3, #32]
}
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	feff8fff 	.word	0xfeff8fff
 8004944:	40010000 	.word	0x40010000
 8004948:	40010400 	.word	0x40010400
 800494c:	40014000 	.word	0x40014000
 8004950:	40014400 	.word	0x40014400
 8004954:	40014800 	.word	0x40014800

08004958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	60f8      	str	r0, [r7, #12]
 8004960:	60b9      	str	r1, [r7, #8]
 8004962:	607a      	str	r2, [r7, #4]
 8004964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6a1b      	ldr	r3, [r3, #32]
 8004970:	f023 0201 	bic.w	r2, r3, #1
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	699b      	ldr	r3, [r3, #24]
 800497c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	4a28      	ldr	r2, [pc, #160]	@ (8004a24 <TIM_TI1_SetConfig+0xcc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01b      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498c:	d017      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a25      	ldr	r2, [pc, #148]	@ (8004a28 <TIM_TI1_SetConfig+0xd0>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d013      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	4a24      	ldr	r2, [pc, #144]	@ (8004a2c <TIM_TI1_SetConfig+0xd4>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	4a23      	ldr	r2, [pc, #140]	@ (8004a30 <TIM_TI1_SetConfig+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	4a22      	ldr	r2, [pc, #136]	@ (8004a34 <TIM_TI1_SetConfig+0xdc>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4a21      	ldr	r2, [pc, #132]	@ (8004a38 <TIM_TI1_SetConfig+0xe0>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_TI1_SetConfig+0x66>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4a20      	ldr	r2, [pc, #128]	@ (8004a3c <TIM_TI1_SetConfig+0xe4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <TIM_TI1_SetConfig+0x6a>
 80049be:	2301      	movs	r3, #1
 80049c0:	e000      	b.n	80049c4 <TIM_TI1_SetConfig+0x6c>
 80049c2:	2300      	movs	r3, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d008      	beq.n	80049da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
 80049d8:	e003      	b.n	80049e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	f043 0301 	orr.w	r3, r3, #1
 80049e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80049e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	697a      	ldr	r2, [r7, #20]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	f023 030a 	bic.w	r3, r3, #10
 80049fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f003 030a 	and.w	r3, r3, #10
 8004a04:	693a      	ldr	r2, [r7, #16]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	697a      	ldr	r2, [r7, #20]
 8004a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
 8004a22:	bf00      	nop
 8004a24:	40010000 	.word	0x40010000
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40010400 	.word	0x40010400
 8004a38:	40001800 	.word	0x40001800
 8004a3c:	40014000 	.word	0x40014000

08004a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60f8      	str	r0, [r7, #12]
 8004a48:	60b9      	str	r1, [r7, #8]
 8004a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6a1b      	ldr	r3, [r3, #32]
 8004a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6a1b      	ldr	r3, [r3, #32]
 8004a56:	f023 0201 	bic.w	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	011b      	lsls	r3, r3, #4
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 030a 	bic.w	r3, r3, #10
 8004a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	693a      	ldr	r2, [r7, #16]
 8004a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	621a      	str	r2, [r3, #32]
}
 8004a92:	bf00      	nop
 8004a94:	371c      	adds	r7, #28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b087      	sub	sp, #28
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	60f8      	str	r0, [r7, #12]
 8004aa6:	60b9      	str	r1, [r7, #8]
 8004aa8:	607a      	str	r2, [r7, #4]
 8004aaa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f023 0210 	bic.w	r2, r3, #16
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	031b      	lsls	r3, r3, #12
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	693a      	ldr	r2, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004af0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	011b      	lsls	r3, r3, #4
 8004af6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	4313      	orrs	r3, r2
 8004afe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	621a      	str	r2, [r3, #32]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	031b      	lsls	r3, r3, #12
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b54:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	621a      	str	r2, [r3, #32]
}
 8004b6c:	bf00      	nop
 8004b6e:	371c      	adds	r7, #28
 8004b70:	46bd      	mov	sp, r7
 8004b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b76:	4770      	bx	lr

08004b78 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6a1b      	ldr	r3, [r3, #32]
 8004b90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	69db      	ldr	r3, [r3, #28]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004b9e:	693b      	ldr	r3, [r7, #16]
 8004ba0:	f023 0303 	bic.w	r3, r3, #3
 8004ba4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bb4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	693a      	ldr	r2, [r7, #16]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004c2e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	031b      	lsls	r3, r3, #12
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004c42:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	031b      	lsls	r3, r3, #12
 8004c48:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004c4c:	697a      	ldr	r2, [r7, #20]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	621a      	str	r2, [r3, #32]
}
 8004c5e:	bf00      	nop
 8004c60:	371c      	adds	r7, #28
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr
	...

08004c6c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c7c:	68fa      	ldr	r2, [r7, #12]
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <TIM_ITRx_SetConfig+0x38>)
 8004c80:	4013      	ands	r3, r2
 8004c82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	f043 0307 	orr.w	r3, r3, #7
 8004c8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	ffcfff8f 	.word	0xffcfff8f

08004ca8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004cc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	021a      	lsls	r2, r3, #8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	697a      	ldr	r2, [r7, #20]
 8004cda:	609a      	str	r2, [r3, #8]
}
 8004cdc:	bf00      	nop
 8004cde:	371c      	adds	r7, #28
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b087      	sub	sp, #28
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f003 031f 	and.w	r3, r3, #31
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6a1a      	ldr	r2, [r3, #32]
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	43db      	mvns	r3, r3
 8004d0a:	401a      	ands	r2, r3
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a1a      	ldr	r2, [r3, #32]
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	f003 031f 	and.w	r3, r3, #31
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004d20:	431a      	orrs	r2, r3
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	621a      	str	r2, [r3, #32]
}
 8004d26:	bf00      	nop
 8004d28:	371c      	adds	r7, #28
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d30:	4770      	bx	lr
	...

08004d34 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d109      	bne.n	8004d58 <HAL_TIMEx_PWMN_Start+0x24>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	bf14      	ite	ne
 8004d50:	2301      	movne	r3, #1
 8004d52:	2300      	moveq	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	e022      	b.n	8004d9e <HAL_TIMEx_PWMN_Start+0x6a>
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d109      	bne.n	8004d72 <HAL_TIMEx_PWMN_Start+0x3e>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	bf14      	ite	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	2300      	moveq	r3, #0
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	e015      	b.n	8004d9e <HAL_TIMEx_PWMN_Start+0x6a>
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	2b08      	cmp	r3, #8
 8004d76:	d109      	bne.n	8004d8c <HAL_TIMEx_PWMN_Start+0x58>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	e008      	b.n	8004d9e <HAL_TIMEx_PWMN_Start+0x6a>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	bf14      	ite	ne
 8004d98:	2301      	movne	r3, #1
 8004d9a:	2300      	moveq	r3, #0
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	e073      	b.n	8004e8e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d104      	bne.n	8004db6 <HAL_TIMEx_PWMN_Start+0x82>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2202      	movs	r2, #2
 8004db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004db4:	e013      	b.n	8004dde <HAL_TIMEx_PWMN_Start+0xaa>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b04      	cmp	r3, #4
 8004dba:	d104      	bne.n	8004dc6 <HAL_TIMEx_PWMN_Start+0x92>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2202      	movs	r2, #2
 8004dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004dc4:	e00b      	b.n	8004dde <HAL_TIMEx_PWMN_Start+0xaa>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d104      	bne.n	8004dd6 <HAL_TIMEx_PWMN_Start+0xa2>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004dd4:	e003      	b.n	8004dde <HAL_TIMEx_PWMN_Start+0xaa>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2204      	movs	r2, #4
 8004de4:	6839      	ldr	r1, [r7, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f000 f990 	bl	800510c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dfa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a25      	ldr	r2, [pc, #148]	@ (8004e98 <HAL_TIMEx_PWMN_Start+0x164>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d022      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e0e:	d01d      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a21      	ldr	r2, [pc, #132]	@ (8004e9c <HAL_TIMEx_PWMN_Start+0x168>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d018      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a20      	ldr	r2, [pc, #128]	@ (8004ea0 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d013      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1e      	ldr	r2, [pc, #120]	@ (8004ea4 <HAL_TIMEx_PWMN_Start+0x170>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d00e      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea8 <HAL_TIMEx_PWMN_Start+0x174>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d009      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8004eac <HAL_TIMEx_PWMN_Start+0x178>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d004      	beq.n	8004e4c <HAL_TIMEx_PWMN_Start+0x118>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d115      	bne.n	8004e78 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	4b18      	ldr	r3, [pc, #96]	@ (8004eb4 <HAL_TIMEx_PWMN_Start+0x180>)
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b06      	cmp	r3, #6
 8004e5c:	d015      	beq.n	8004e8a <HAL_TIMEx_PWMN_Start+0x156>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e64:	d011      	beq.n	8004e8a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f042 0201 	orr.w	r2, r2, #1
 8004e74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e76:	e008      	b.n	8004e8a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f042 0201 	orr.w	r2, r2, #1
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	e000      	b.n	8004e8c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e8a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40001800 	.word	0x40001800
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	00010007 	.word	0x00010007

08004eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e06d      	b.n	8004fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2202      	movs	r2, #2
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a30      	ldr	r2, [pc, #192]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2f      	ldr	r2, [pc, #188]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d108      	bne.n	8004f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	68fa      	ldr	r2, [r7, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a20      	ldr	r2, [pc, #128]	@ (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d022      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f42:	d01d      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a1d      	ldr	r2, [pc, #116]	@ (8004fc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d018      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	@ (8004fc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1a      	ldr	r2, [pc, #104]	@ (8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00e      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d009      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a16      	ldr	r2, [pc, #88]	@ (8004fcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d004      	beq.n	8004f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a15      	ldr	r2, [pc, #84]	@ (8004fd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d10c      	bne.n	8004f9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	689b      	ldr	r3, [r3, #8]
 8004f8c:	68ba      	ldr	r2, [r7, #8]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68ba      	ldr	r2, [r7, #8]
 8004f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2201      	movs	r2, #1
 8004f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr
 8004fb8:	40010000 	.word	0x40010000
 8004fbc:	40010400 	.word	0x40010400
 8004fc0:	40000400 	.word	0x40000400
 8004fc4:	40000800 	.word	0x40000800
 8004fc8:	40000c00 	.word	0x40000c00
 8004fcc:	40001800 	.word	0x40001800
 8004fd0:	40014000 	.word	0x40014000

08004fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d101      	bne.n	8004ff0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004fec:	2302      	movs	r3, #2
 8004fee:	e065      	b.n	80050bc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	4313      	orrs	r3, r2
 8005020:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4313      	orrs	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a16      	ldr	r2, [pc, #88]	@ (80050c8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d004      	beq.n	800507e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a14      	ldr	r2, [pc, #80]	@ (80050cc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d115      	bne.n	80050aa <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005088:	051b      	lsls	r3, r3, #20
 800508a:	4313      	orrs	r3, r2
 800508c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	4313      	orrs	r3, r2
 800509a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40010400 	.word	0x40010400

080050d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr

080050e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b083      	sub	sp, #12
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800510c:	b480      	push	{r7}
 800510e:	b087      	sub	sp, #28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 030f 	and.w	r3, r3, #15
 800511e:	2204      	movs	r2, #4
 8005120:	fa02 f303 	lsl.w	r3, r2, r3
 8005124:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6a1a      	ldr	r2, [r3, #32]
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	43db      	mvns	r3, r3
 800512e:	401a      	ands	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6a1a      	ldr	r2, [r3, #32]
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	6879      	ldr	r1, [r7, #4]
 8005140:	fa01 f303 	lsl.w	r3, r1, r3
 8005144:	431a      	orrs	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
}
 800514a:	bf00      	nop
 800514c:	371c      	adds	r7, #28
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b082      	sub	sp, #8
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d101      	bne.n	8005168 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e042      	b.n	80051ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f83b 	bl	80051f6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	@ 0x24
 8005184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 fd9b 	bl	8005cdc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f830 	bl	800520c <UART_SetConfig>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	d101      	bne.n	80051b6 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e01b      	b.n	80051ee <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689a      	ldr	r2, [r3, #8]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fe1a 	bl	8005e20 <UART_CheckIdleState>
 80051ec:	4603      	mov	r3, r0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3708      	adds	r7, #8
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b083      	sub	sp, #12
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
	...

0800520c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b092      	sub	sp, #72	@ 0x48
 8005212:	af00      	add	r7, sp, #0
 8005214:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	431a      	orrs	r2, r3
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	695b      	ldr	r3, [r3, #20]
 800522a:	431a      	orrs	r2, r3
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	69db      	ldr	r3, [r3, #28]
 8005230:	4313      	orrs	r3, r2
 8005232:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	4bbe      	ldr	r3, [pc, #760]	@ (8005534 <UART_SetConfig+0x328>)
 800523c:	4013      	ands	r3, r2
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	6812      	ldr	r2, [r2, #0]
 8005242:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005244:	430b      	orrs	r3, r1
 8005246:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	430a      	orrs	r2, r1
 800525c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4ab3      	ldr	r2, [pc, #716]	@ (8005538 <UART_SetConfig+0x32c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d004      	beq.n	8005278 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	6a1b      	ldr	r3, [r3, #32]
 8005272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005274:	4313      	orrs	r3, r2
 8005276:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	689a      	ldr	r2, [r3, #8]
 800527e:	4baf      	ldr	r3, [pc, #700]	@ (800553c <UART_SetConfig+0x330>)
 8005280:	4013      	ands	r3, r2
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	6812      	ldr	r2, [r2, #0]
 8005286:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005288:	430b      	orrs	r3, r1
 800528a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800528c:	697b      	ldr	r3, [r7, #20]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	f023 010f 	bic.w	r1, r3, #15
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4aa6      	ldr	r2, [pc, #664]	@ (8005540 <UART_SetConfig+0x334>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d177      	bne.n	800539c <UART_SetConfig+0x190>
 80052ac:	4ba5      	ldr	r3, [pc, #660]	@ (8005544 <UART_SetConfig+0x338>)
 80052ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80052b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052b4:	2b28      	cmp	r3, #40	@ 0x28
 80052b6:	d86d      	bhi.n	8005394 <UART_SetConfig+0x188>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <UART_SetConfig+0xb4>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	08005365 	.word	0x08005365
 80052c4:	08005395 	.word	0x08005395
 80052c8:	08005395 	.word	0x08005395
 80052cc:	08005395 	.word	0x08005395
 80052d0:	08005395 	.word	0x08005395
 80052d4:	08005395 	.word	0x08005395
 80052d8:	08005395 	.word	0x08005395
 80052dc:	08005395 	.word	0x08005395
 80052e0:	0800536d 	.word	0x0800536d
 80052e4:	08005395 	.word	0x08005395
 80052e8:	08005395 	.word	0x08005395
 80052ec:	08005395 	.word	0x08005395
 80052f0:	08005395 	.word	0x08005395
 80052f4:	08005395 	.word	0x08005395
 80052f8:	08005395 	.word	0x08005395
 80052fc:	08005395 	.word	0x08005395
 8005300:	08005375 	.word	0x08005375
 8005304:	08005395 	.word	0x08005395
 8005308:	08005395 	.word	0x08005395
 800530c:	08005395 	.word	0x08005395
 8005310:	08005395 	.word	0x08005395
 8005314:	08005395 	.word	0x08005395
 8005318:	08005395 	.word	0x08005395
 800531c:	08005395 	.word	0x08005395
 8005320:	0800537d 	.word	0x0800537d
 8005324:	08005395 	.word	0x08005395
 8005328:	08005395 	.word	0x08005395
 800532c:	08005395 	.word	0x08005395
 8005330:	08005395 	.word	0x08005395
 8005334:	08005395 	.word	0x08005395
 8005338:	08005395 	.word	0x08005395
 800533c:	08005395 	.word	0x08005395
 8005340:	08005385 	.word	0x08005385
 8005344:	08005395 	.word	0x08005395
 8005348:	08005395 	.word	0x08005395
 800534c:	08005395 	.word	0x08005395
 8005350:	08005395 	.word	0x08005395
 8005354:	08005395 	.word	0x08005395
 8005358:	08005395 	.word	0x08005395
 800535c:	08005395 	.word	0x08005395
 8005360:	0800538d 	.word	0x0800538d
 8005364:	2301      	movs	r3, #1
 8005366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800536a:	e222      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800536c:	2304      	movs	r3, #4
 800536e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005372:	e21e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005374:	2308      	movs	r3, #8
 8005376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800537a:	e21a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800537c:	2310      	movs	r3, #16
 800537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005382:	e216      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005384:	2320      	movs	r3, #32
 8005386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800538a:	e212      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800538c:	2340      	movs	r3, #64	@ 0x40
 800538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005392:	e20e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005394:	2380      	movs	r3, #128	@ 0x80
 8005396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800539a:	e20a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4a69      	ldr	r2, [pc, #420]	@ (8005548 <UART_SetConfig+0x33c>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d130      	bne.n	8005408 <UART_SetConfig+0x1fc>
 80053a6:	4b67      	ldr	r3, [pc, #412]	@ (8005544 <UART_SetConfig+0x338>)
 80053a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053aa:	f003 0307 	and.w	r3, r3, #7
 80053ae:	2b05      	cmp	r3, #5
 80053b0:	d826      	bhi.n	8005400 <UART_SetConfig+0x1f4>
 80053b2:	a201      	add	r2, pc, #4	@ (adr r2, 80053b8 <UART_SetConfig+0x1ac>)
 80053b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b8:	080053d1 	.word	0x080053d1
 80053bc:	080053d9 	.word	0x080053d9
 80053c0:	080053e1 	.word	0x080053e1
 80053c4:	080053e9 	.word	0x080053e9
 80053c8:	080053f1 	.word	0x080053f1
 80053cc:	080053f9 	.word	0x080053f9
 80053d0:	2300      	movs	r3, #0
 80053d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053d6:	e1ec      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053de:	e1e8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053e6:	e1e4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053ee:	e1e0      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053f0:	2320      	movs	r3, #32
 80053f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053f6:	e1dc      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80053f8:	2340      	movs	r3, #64	@ 0x40
 80053fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80053fe:	e1d8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005400:	2380      	movs	r3, #128	@ 0x80
 8005402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005406:	e1d4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a4f      	ldr	r2, [pc, #316]	@ (800554c <UART_SetConfig+0x340>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d130      	bne.n	8005474 <UART_SetConfig+0x268>
 8005412:	4b4c      	ldr	r3, [pc, #304]	@ (8005544 <UART_SetConfig+0x338>)
 8005414:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005416:	f003 0307 	and.w	r3, r3, #7
 800541a:	2b05      	cmp	r3, #5
 800541c:	d826      	bhi.n	800546c <UART_SetConfig+0x260>
 800541e:	a201      	add	r2, pc, #4	@ (adr r2, 8005424 <UART_SetConfig+0x218>)
 8005420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005424:	0800543d 	.word	0x0800543d
 8005428:	08005445 	.word	0x08005445
 800542c:	0800544d 	.word	0x0800544d
 8005430:	08005455 	.word	0x08005455
 8005434:	0800545d 	.word	0x0800545d
 8005438:	08005465 	.word	0x08005465
 800543c:	2300      	movs	r3, #0
 800543e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005442:	e1b6      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005444:	2304      	movs	r3, #4
 8005446:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800544a:	e1b2      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800544c:	2308      	movs	r3, #8
 800544e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005452:	e1ae      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005454:	2310      	movs	r3, #16
 8005456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800545a:	e1aa      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800545c:	2320      	movs	r3, #32
 800545e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005462:	e1a6      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005464:	2340      	movs	r3, #64	@ 0x40
 8005466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800546a:	e1a2      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800546c:	2380      	movs	r3, #128	@ 0x80
 800546e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005472:	e19e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a35      	ldr	r2, [pc, #212]	@ (8005550 <UART_SetConfig+0x344>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d130      	bne.n	80054e0 <UART_SetConfig+0x2d4>
 800547e:	4b31      	ldr	r3, [pc, #196]	@ (8005544 <UART_SetConfig+0x338>)
 8005480:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005482:	f003 0307 	and.w	r3, r3, #7
 8005486:	2b05      	cmp	r3, #5
 8005488:	d826      	bhi.n	80054d8 <UART_SetConfig+0x2cc>
 800548a:	a201      	add	r2, pc, #4	@ (adr r2, 8005490 <UART_SetConfig+0x284>)
 800548c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005490:	080054a9 	.word	0x080054a9
 8005494:	080054b1 	.word	0x080054b1
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c1 	.word	0x080054c1
 80054a0:	080054c9 	.word	0x080054c9
 80054a4:	080054d1 	.word	0x080054d1
 80054a8:	2300      	movs	r3, #0
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e180      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054b0:	2304      	movs	r3, #4
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e17c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054b8:	2308      	movs	r3, #8
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e178      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054c0:	2310      	movs	r3, #16
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e174      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054c8:	2320      	movs	r3, #32
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e170      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054d0:	2340      	movs	r3, #64	@ 0x40
 80054d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054d6:	e16c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054d8:	2380      	movs	r3, #128	@ 0x80
 80054da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054de:	e168      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	4a1b      	ldr	r2, [pc, #108]	@ (8005554 <UART_SetConfig+0x348>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d142      	bne.n	8005570 <UART_SetConfig+0x364>
 80054ea:	4b16      	ldr	r3, [pc, #88]	@ (8005544 <UART_SetConfig+0x338>)
 80054ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054ee:	f003 0307 	and.w	r3, r3, #7
 80054f2:	2b05      	cmp	r3, #5
 80054f4:	d838      	bhi.n	8005568 <UART_SetConfig+0x35c>
 80054f6:	a201      	add	r2, pc, #4	@ (adr r2, 80054fc <UART_SetConfig+0x2f0>)
 80054f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fc:	08005515 	.word	0x08005515
 8005500:	0800551d 	.word	0x0800551d
 8005504:	08005525 	.word	0x08005525
 8005508:	0800552d 	.word	0x0800552d
 800550c:	08005559 	.word	0x08005559
 8005510:	08005561 	.word	0x08005561
 8005514:	2300      	movs	r3, #0
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e14a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e146      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e142      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e13e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005534:	cfff69f3 	.word	0xcfff69f3
 8005538:	58000c00 	.word	0x58000c00
 800553c:	11fff4ff 	.word	0x11fff4ff
 8005540:	40011000 	.word	0x40011000
 8005544:	58024400 	.word	0x58024400
 8005548:	40004400 	.word	0x40004400
 800554c:	40004800 	.word	0x40004800
 8005550:	40004c00 	.word	0x40004c00
 8005554:	40005000 	.word	0x40005000
 8005558:	2320      	movs	r3, #32
 800555a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800555e:	e128      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005560:	2340      	movs	r3, #64	@ 0x40
 8005562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005566:	e124      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005568:	2380      	movs	r3, #128	@ 0x80
 800556a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800556e:	e120      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4acb      	ldr	r2, [pc, #812]	@ (80058a4 <UART_SetConfig+0x698>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d176      	bne.n	8005668 <UART_SetConfig+0x45c>
 800557a:	4bcb      	ldr	r3, [pc, #812]	@ (80058a8 <UART_SetConfig+0x69c>)
 800557c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800557e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005582:	2b28      	cmp	r3, #40	@ 0x28
 8005584:	d86c      	bhi.n	8005660 <UART_SetConfig+0x454>
 8005586:	a201      	add	r2, pc, #4	@ (adr r2, 800558c <UART_SetConfig+0x380>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	08005631 	.word	0x08005631
 8005590:	08005661 	.word	0x08005661
 8005594:	08005661 	.word	0x08005661
 8005598:	08005661 	.word	0x08005661
 800559c:	08005661 	.word	0x08005661
 80055a0:	08005661 	.word	0x08005661
 80055a4:	08005661 	.word	0x08005661
 80055a8:	08005661 	.word	0x08005661
 80055ac:	08005639 	.word	0x08005639
 80055b0:	08005661 	.word	0x08005661
 80055b4:	08005661 	.word	0x08005661
 80055b8:	08005661 	.word	0x08005661
 80055bc:	08005661 	.word	0x08005661
 80055c0:	08005661 	.word	0x08005661
 80055c4:	08005661 	.word	0x08005661
 80055c8:	08005661 	.word	0x08005661
 80055cc:	08005641 	.word	0x08005641
 80055d0:	08005661 	.word	0x08005661
 80055d4:	08005661 	.word	0x08005661
 80055d8:	08005661 	.word	0x08005661
 80055dc:	08005661 	.word	0x08005661
 80055e0:	08005661 	.word	0x08005661
 80055e4:	08005661 	.word	0x08005661
 80055e8:	08005661 	.word	0x08005661
 80055ec:	08005649 	.word	0x08005649
 80055f0:	08005661 	.word	0x08005661
 80055f4:	08005661 	.word	0x08005661
 80055f8:	08005661 	.word	0x08005661
 80055fc:	08005661 	.word	0x08005661
 8005600:	08005661 	.word	0x08005661
 8005604:	08005661 	.word	0x08005661
 8005608:	08005661 	.word	0x08005661
 800560c:	08005651 	.word	0x08005651
 8005610:	08005661 	.word	0x08005661
 8005614:	08005661 	.word	0x08005661
 8005618:	08005661 	.word	0x08005661
 800561c:	08005661 	.word	0x08005661
 8005620:	08005661 	.word	0x08005661
 8005624:	08005661 	.word	0x08005661
 8005628:	08005661 	.word	0x08005661
 800562c:	08005659 	.word	0x08005659
 8005630:	2301      	movs	r3, #1
 8005632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005636:	e0bc      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005638:	2304      	movs	r3, #4
 800563a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800563e:	e0b8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005640:	2308      	movs	r3, #8
 8005642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005646:	e0b4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005648:	2310      	movs	r3, #16
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e0b0      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005650:	2320      	movs	r3, #32
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e0ac      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005658:	2340      	movs	r3, #64	@ 0x40
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e0a8      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005660:	2380      	movs	r3, #128	@ 0x80
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e0a4      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a8f      	ldr	r2, [pc, #572]	@ (80058ac <UART_SetConfig+0x6a0>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d130      	bne.n	80056d4 <UART_SetConfig+0x4c8>
 8005672:	4b8d      	ldr	r3, [pc, #564]	@ (80058a8 <UART_SetConfig+0x69c>)
 8005674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	2b05      	cmp	r3, #5
 800567c:	d826      	bhi.n	80056cc <UART_SetConfig+0x4c0>
 800567e:	a201      	add	r2, pc, #4	@ (adr r2, 8005684 <UART_SetConfig+0x478>)
 8005680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005684:	0800569d 	.word	0x0800569d
 8005688:	080056a5 	.word	0x080056a5
 800568c:	080056ad 	.word	0x080056ad
 8005690:	080056b5 	.word	0x080056b5
 8005694:	080056bd 	.word	0x080056bd
 8005698:	080056c5 	.word	0x080056c5
 800569c:	2300      	movs	r3, #0
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e086      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056a4:	2304      	movs	r3, #4
 80056a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056aa:	e082      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056ac:	2308      	movs	r3, #8
 80056ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b2:	e07e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056b4:	2310      	movs	r3, #16
 80056b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ba:	e07a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056bc:	2320      	movs	r3, #32
 80056be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c2:	e076      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056c4:	2340      	movs	r3, #64	@ 0x40
 80056c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ca:	e072      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056cc:	2380      	movs	r3, #128	@ 0x80
 80056ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d2:	e06e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a75      	ldr	r2, [pc, #468]	@ (80058b0 <UART_SetConfig+0x6a4>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d130      	bne.n	8005740 <UART_SetConfig+0x534>
 80056de:	4b72      	ldr	r3, [pc, #456]	@ (80058a8 <UART_SetConfig+0x69c>)
 80056e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b05      	cmp	r3, #5
 80056e8:	d826      	bhi.n	8005738 <UART_SetConfig+0x52c>
 80056ea:	a201      	add	r2, pc, #4	@ (adr r2, 80056f0 <UART_SetConfig+0x4e4>)
 80056ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f0:	08005709 	.word	0x08005709
 80056f4:	08005711 	.word	0x08005711
 80056f8:	08005719 	.word	0x08005719
 80056fc:	08005721 	.word	0x08005721
 8005700:	08005729 	.word	0x08005729
 8005704:	08005731 	.word	0x08005731
 8005708:	2300      	movs	r3, #0
 800570a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800570e:	e050      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005710:	2304      	movs	r3, #4
 8005712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005716:	e04c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005718:	2308      	movs	r3, #8
 800571a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800571e:	e048      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005720:	2310      	movs	r3, #16
 8005722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005726:	e044      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005728:	2320      	movs	r3, #32
 800572a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572e:	e040      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005730:	2340      	movs	r3, #64	@ 0x40
 8005732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005736:	e03c      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005738:	2380      	movs	r3, #128	@ 0x80
 800573a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573e:	e038      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a5b      	ldr	r2, [pc, #364]	@ (80058b4 <UART_SetConfig+0x6a8>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d130      	bne.n	80057ac <UART_SetConfig+0x5a0>
 800574a:	4b57      	ldr	r3, [pc, #348]	@ (80058a8 <UART_SetConfig+0x69c>)
 800574c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	2b05      	cmp	r3, #5
 8005754:	d826      	bhi.n	80057a4 <UART_SetConfig+0x598>
 8005756:	a201      	add	r2, pc, #4	@ (adr r2, 800575c <UART_SetConfig+0x550>)
 8005758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800575c:	08005775 	.word	0x08005775
 8005760:	0800577d 	.word	0x0800577d
 8005764:	08005785 	.word	0x08005785
 8005768:	0800578d 	.word	0x0800578d
 800576c:	08005795 	.word	0x08005795
 8005770:	0800579d 	.word	0x0800579d
 8005774:	2302      	movs	r3, #2
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e01a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800577c:	2304      	movs	r3, #4
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e016      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005784:	2308      	movs	r3, #8
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e012      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800578c:	2310      	movs	r3, #16
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e00e      	b.n	80057b2 <UART_SetConfig+0x5a6>
 8005794:	2320      	movs	r3, #32
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e00a      	b.n	80057b2 <UART_SetConfig+0x5a6>
 800579c:	2340      	movs	r3, #64	@ 0x40
 800579e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a2:	e006      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80057a4:	2380      	movs	r3, #128	@ 0x80
 80057a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057aa:	e002      	b.n	80057b2 <UART_SetConfig+0x5a6>
 80057ac:	2380      	movs	r3, #128	@ 0x80
 80057ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a3f      	ldr	r2, [pc, #252]	@ (80058b4 <UART_SetConfig+0x6a8>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	f040 80f8 	bne.w	80059ae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80057be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80057c2:	2b20      	cmp	r3, #32
 80057c4:	dc46      	bgt.n	8005854 <UART_SetConfig+0x648>
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	f2c0 8082 	blt.w	80058d0 <UART_SetConfig+0x6c4>
 80057cc:	3b02      	subs	r3, #2
 80057ce:	2b1e      	cmp	r3, #30
 80057d0:	d87e      	bhi.n	80058d0 <UART_SetConfig+0x6c4>
 80057d2:	a201      	add	r2, pc, #4	@ (adr r2, 80057d8 <UART_SetConfig+0x5cc>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	0800585b 	.word	0x0800585b
 80057dc:	080058d1 	.word	0x080058d1
 80057e0:	08005863 	.word	0x08005863
 80057e4:	080058d1 	.word	0x080058d1
 80057e8:	080058d1 	.word	0x080058d1
 80057ec:	080058d1 	.word	0x080058d1
 80057f0:	08005873 	.word	0x08005873
 80057f4:	080058d1 	.word	0x080058d1
 80057f8:	080058d1 	.word	0x080058d1
 80057fc:	080058d1 	.word	0x080058d1
 8005800:	080058d1 	.word	0x080058d1
 8005804:	080058d1 	.word	0x080058d1
 8005808:	080058d1 	.word	0x080058d1
 800580c:	080058d1 	.word	0x080058d1
 8005810:	08005883 	.word	0x08005883
 8005814:	080058d1 	.word	0x080058d1
 8005818:	080058d1 	.word	0x080058d1
 800581c:	080058d1 	.word	0x080058d1
 8005820:	080058d1 	.word	0x080058d1
 8005824:	080058d1 	.word	0x080058d1
 8005828:	080058d1 	.word	0x080058d1
 800582c:	080058d1 	.word	0x080058d1
 8005830:	080058d1 	.word	0x080058d1
 8005834:	080058d1 	.word	0x080058d1
 8005838:	080058d1 	.word	0x080058d1
 800583c:	080058d1 	.word	0x080058d1
 8005840:	080058d1 	.word	0x080058d1
 8005844:	080058d1 	.word	0x080058d1
 8005848:	080058d1 	.word	0x080058d1
 800584c:	080058d1 	.word	0x080058d1
 8005850:	080058c3 	.word	0x080058c3
 8005854:	2b40      	cmp	r3, #64	@ 0x40
 8005856:	d037      	beq.n	80058c8 <UART_SetConfig+0x6bc>
 8005858:	e03a      	b.n	80058d0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800585a:	f7fd fa83 	bl	8002d64 <HAL_RCCEx_GetD3PCLK1Freq>
 800585e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005860:	e03c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005862:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005866:	4618      	mov	r0, r3
 8005868:	f7fd fa92 	bl	8002d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800586c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005870:	e034      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005872:	f107 0318 	add.w	r3, r7, #24
 8005876:	4618      	mov	r0, r3
 8005878:	f7fd fbde 	bl	8003038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005880:	e02c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005882:	4b09      	ldr	r3, [pc, #36]	@ (80058a8 <UART_SetConfig+0x69c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d016      	beq.n	80058bc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800588e:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <UART_SetConfig+0x69c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	08db      	lsrs	r3, r3, #3
 8005894:	f003 0303 	and.w	r3, r3, #3
 8005898:	4a07      	ldr	r2, [pc, #28]	@ (80058b8 <UART_SetConfig+0x6ac>)
 800589a:	fa22 f303 	lsr.w	r3, r2, r3
 800589e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80058a0:	e01c      	b.n	80058dc <UART_SetConfig+0x6d0>
 80058a2:	bf00      	nop
 80058a4:	40011400 	.word	0x40011400
 80058a8:	58024400 	.word	0x58024400
 80058ac:	40007800 	.word	0x40007800
 80058b0:	40007c00 	.word	0x40007c00
 80058b4:	58000c00 	.word	0x58000c00
 80058b8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80058bc:	4b9d      	ldr	r3, [pc, #628]	@ (8005b34 <UART_SetConfig+0x928>)
 80058be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c0:	e00c      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80058c2:	4b9d      	ldr	r3, [pc, #628]	@ (8005b38 <UART_SetConfig+0x92c>)
 80058c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058c6:	e009      	b.n	80058dc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80058ce:	e005      	b.n	80058dc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80058da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80058dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f000 81de 	beq.w	8005ca0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e8:	4a94      	ldr	r2, [pc, #592]	@ (8005b3c <UART_SetConfig+0x930>)
 80058ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058ee:	461a      	mov	r2, r3
 80058f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80058f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80058f6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	4613      	mov	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	4413      	add	r3, r2
 8005902:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005904:	429a      	cmp	r2, r3
 8005906:	d305      	bcc.n	8005914 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800590e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005910:	429a      	cmp	r2, r3
 8005912:	d903      	bls.n	800591c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005914:	2301      	movs	r3, #1
 8005916:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800591a:	e1c1      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800591c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800591e:	2200      	movs	r2, #0
 8005920:	60bb      	str	r3, [r7, #8]
 8005922:	60fa      	str	r2, [r7, #12]
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005928:	4a84      	ldr	r2, [pc, #528]	@ (8005b3c <UART_SetConfig+0x930>)
 800592a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592e:	b29b      	uxth	r3, r3
 8005930:	2200      	movs	r2, #0
 8005932:	603b      	str	r3, [r7, #0]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	e9d7 2300 	ldrd	r2, r3, [r7]
 800593a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800593e:	f7fa fccb 	bl	80002d8 <__aeabi_uldivmod>
 8005942:	4602      	mov	r2, r0
 8005944:	460b      	mov	r3, r1
 8005946:	4610      	mov	r0, r2
 8005948:	4619      	mov	r1, r3
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	f04f 0300 	mov.w	r3, #0
 8005952:	020b      	lsls	r3, r1, #8
 8005954:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005958:	0202      	lsls	r2, r0, #8
 800595a:	6979      	ldr	r1, [r7, #20]
 800595c:	6849      	ldr	r1, [r1, #4]
 800595e:	0849      	lsrs	r1, r1, #1
 8005960:	2000      	movs	r0, #0
 8005962:	460c      	mov	r4, r1
 8005964:	4605      	mov	r5, r0
 8005966:	eb12 0804 	adds.w	r8, r2, r4
 800596a:	eb43 0905 	adc.w	r9, r3, r5
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	469a      	mov	sl, r3
 8005976:	4693      	mov	fp, r2
 8005978:	4652      	mov	r2, sl
 800597a:	465b      	mov	r3, fp
 800597c:	4640      	mov	r0, r8
 800597e:	4649      	mov	r1, r9
 8005980:	f7fa fcaa 	bl	80002d8 <__aeabi_uldivmod>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4613      	mov	r3, r2
 800598a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005992:	d308      	bcc.n	80059a6 <UART_SetConfig+0x79a>
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800599a:	d204      	bcs.n	80059a6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800599c:	697b      	ldr	r3, [r7, #20]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80059a2:	60da      	str	r2, [r3, #12]
 80059a4:	e17c      	b.n	8005ca0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80059ac:	e178      	b.n	8005ca0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80059b6:	f040 80c5 	bne.w	8005b44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80059ba:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80059be:	2b20      	cmp	r3, #32
 80059c0:	dc48      	bgt.n	8005a54 <UART_SetConfig+0x848>
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db7b      	blt.n	8005abe <UART_SetConfig+0x8b2>
 80059c6:	2b20      	cmp	r3, #32
 80059c8:	d879      	bhi.n	8005abe <UART_SetConfig+0x8b2>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x7c4>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	08005a5b 	.word	0x08005a5b
 80059d4:	08005a63 	.word	0x08005a63
 80059d8:	08005abf 	.word	0x08005abf
 80059dc:	08005abf 	.word	0x08005abf
 80059e0:	08005a6b 	.word	0x08005a6b
 80059e4:	08005abf 	.word	0x08005abf
 80059e8:	08005abf 	.word	0x08005abf
 80059ec:	08005abf 	.word	0x08005abf
 80059f0:	08005a7b 	.word	0x08005a7b
 80059f4:	08005abf 	.word	0x08005abf
 80059f8:	08005abf 	.word	0x08005abf
 80059fc:	08005abf 	.word	0x08005abf
 8005a00:	08005abf 	.word	0x08005abf
 8005a04:	08005abf 	.word	0x08005abf
 8005a08:	08005abf 	.word	0x08005abf
 8005a0c:	08005abf 	.word	0x08005abf
 8005a10:	08005a8b 	.word	0x08005a8b
 8005a14:	08005abf 	.word	0x08005abf
 8005a18:	08005abf 	.word	0x08005abf
 8005a1c:	08005abf 	.word	0x08005abf
 8005a20:	08005abf 	.word	0x08005abf
 8005a24:	08005abf 	.word	0x08005abf
 8005a28:	08005abf 	.word	0x08005abf
 8005a2c:	08005abf 	.word	0x08005abf
 8005a30:	08005abf 	.word	0x08005abf
 8005a34:	08005abf 	.word	0x08005abf
 8005a38:	08005abf 	.word	0x08005abf
 8005a3c:	08005abf 	.word	0x08005abf
 8005a40:	08005abf 	.word	0x08005abf
 8005a44:	08005abf 	.word	0x08005abf
 8005a48:	08005abf 	.word	0x08005abf
 8005a4c:	08005abf 	.word	0x08005abf
 8005a50:	08005ab1 	.word	0x08005ab1
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d02e      	beq.n	8005ab6 <UART_SetConfig+0x8aa>
 8005a58:	e031      	b.n	8005abe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005a5a:	f7fd f957 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8005a5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a60:	e033      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005a62:	f7fd f969 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8005a66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005a68:	e02f      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fd f98e 	bl	8002d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005a74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a78:	e027      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a7a:	f107 0318 	add.w	r3, r7, #24
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fd fada 	bl	8003038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a88:	e01f      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005b40 <UART_SetConfig+0x934>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 0320 	and.w	r3, r3, #32
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d009      	beq.n	8005aaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005a96:	4b2a      	ldr	r3, [pc, #168]	@ (8005b40 <UART_SetConfig+0x934>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	08db      	lsrs	r3, r3, #3
 8005a9c:	f003 0303 	and.w	r3, r3, #3
 8005aa0:	4a24      	ldr	r2, [pc, #144]	@ (8005b34 <UART_SetConfig+0x928>)
 8005aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8005aa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005aa8:	e00f      	b.n	8005aca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005aaa:	4b22      	ldr	r3, [pc, #136]	@ (8005b34 <UART_SetConfig+0x928>)
 8005aac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005aae:	e00c      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005ab0:	4b21      	ldr	r3, [pc, #132]	@ (8005b38 <UART_SetConfig+0x92c>)
 8005ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ab4:	e009      	b.n	8005aca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ab6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005abc:	e005      	b.n	8005aca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ac8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005aca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80e7 	beq.w	8005ca0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ad6:	4a19      	ldr	r2, [pc, #100]	@ (8005b3c <UART_SetConfig+0x930>)
 8005ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005adc:	461a      	mov	r2, r3
 8005ade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ae4:	005a      	lsls	r2, r3, #1
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	085b      	lsrs	r3, r3, #1
 8005aec:	441a      	add	r2, r3
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	685b      	ldr	r3, [r3, #4]
 8005af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005af6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	2b0f      	cmp	r3, #15
 8005afc:	d916      	bls.n	8005b2c <UART_SetConfig+0x920>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b04:	d212      	bcs.n	8005b2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005b06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	f023 030f 	bic.w	r3, r3, #15
 8005b0e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b12:	085b      	lsrs	r3, r3, #1
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e0b9      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b32:	e0b5      	b.n	8005ca0 <UART_SetConfig+0xa94>
 8005b34:	03d09000 	.word	0x03d09000
 8005b38:	003d0900 	.word	0x003d0900
 8005b3c:	080061a8 	.word	0x080061a8
 8005b40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005b44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	dc49      	bgt.n	8005be0 <UART_SetConfig+0x9d4>
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	db7c      	blt.n	8005c4a <UART_SetConfig+0xa3e>
 8005b50:	2b20      	cmp	r3, #32
 8005b52:	d87a      	bhi.n	8005c4a <UART_SetConfig+0xa3e>
 8005b54:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <UART_SetConfig+0x950>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005be7 	.word	0x08005be7
 8005b60:	08005bef 	.word	0x08005bef
 8005b64:	08005c4b 	.word	0x08005c4b
 8005b68:	08005c4b 	.word	0x08005c4b
 8005b6c:	08005bf7 	.word	0x08005bf7
 8005b70:	08005c4b 	.word	0x08005c4b
 8005b74:	08005c4b 	.word	0x08005c4b
 8005b78:	08005c4b 	.word	0x08005c4b
 8005b7c:	08005c07 	.word	0x08005c07
 8005b80:	08005c4b 	.word	0x08005c4b
 8005b84:	08005c4b 	.word	0x08005c4b
 8005b88:	08005c4b 	.word	0x08005c4b
 8005b8c:	08005c4b 	.word	0x08005c4b
 8005b90:	08005c4b 	.word	0x08005c4b
 8005b94:	08005c4b 	.word	0x08005c4b
 8005b98:	08005c4b 	.word	0x08005c4b
 8005b9c:	08005c17 	.word	0x08005c17
 8005ba0:	08005c4b 	.word	0x08005c4b
 8005ba4:	08005c4b 	.word	0x08005c4b
 8005ba8:	08005c4b 	.word	0x08005c4b
 8005bac:	08005c4b 	.word	0x08005c4b
 8005bb0:	08005c4b 	.word	0x08005c4b
 8005bb4:	08005c4b 	.word	0x08005c4b
 8005bb8:	08005c4b 	.word	0x08005c4b
 8005bbc:	08005c4b 	.word	0x08005c4b
 8005bc0:	08005c4b 	.word	0x08005c4b
 8005bc4:	08005c4b 	.word	0x08005c4b
 8005bc8:	08005c4b 	.word	0x08005c4b
 8005bcc:	08005c4b 	.word	0x08005c4b
 8005bd0:	08005c4b 	.word	0x08005c4b
 8005bd4:	08005c4b 	.word	0x08005c4b
 8005bd8:	08005c4b 	.word	0x08005c4b
 8005bdc:	08005c3d 	.word	0x08005c3d
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d02e      	beq.n	8005c42 <UART_SetConfig+0xa36>
 8005be4:	e031      	b.n	8005c4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be6:	f7fd f891 	bl	8002d0c <HAL_RCC_GetPCLK1Freq>
 8005bea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bec:	e033      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bee:	f7fd f8a3 	bl	8002d38 <HAL_RCC_GetPCLK2Freq>
 8005bf2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005bf4:	e02f      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bf6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f7fd f8c8 	bl	8002d90 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c04:	e027      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005c06:	f107 0318 	add.w	r3, r7, #24
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	f7fd fa14 	bl	8003038 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c14:	e01f      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005c16:	4b2d      	ldr	r3, [pc, #180]	@ (8005ccc <UART_SetConfig+0xac0>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d009      	beq.n	8005c36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005c22:	4b2a      	ldr	r3, [pc, #168]	@ (8005ccc <UART_SetConfig+0xac0>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	08db      	lsrs	r3, r3, #3
 8005c28:	f003 0303 	and.w	r3, r3, #3
 8005c2c:	4a28      	ldr	r2, [pc, #160]	@ (8005cd0 <UART_SetConfig+0xac4>)
 8005c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8005c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005c34:	e00f      	b.n	8005c56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005c36:	4b26      	ldr	r3, [pc, #152]	@ (8005cd0 <UART_SetConfig+0xac4>)
 8005c38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c3a:	e00c      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005c3c:	4b25      	ldr	r3, [pc, #148]	@ (8005cd4 <UART_SetConfig+0xac8>)
 8005c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c40:	e009      	b.n	8005c56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c42:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005c48:	e005      	b.n	8005c56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005c54:	bf00      	nop
    }

    if (pclk != 0U)
 8005c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d021      	beq.n	8005ca0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c60:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd8 <UART_SetConfig+0xacc>)
 8005c62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c66:	461a      	mov	r2, r3
 8005c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	441a      	add	r2, r3
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c7e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	2b0f      	cmp	r3, #15
 8005c84:	d909      	bls.n	8005c9a <UART_SetConfig+0xa8e>
 8005c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c8c:	d205      	bcs.n	8005c9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	60da      	str	r2, [r3, #12]
 8005c98:	e002      	b.n	8005ca0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005cbc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3748      	adds	r7, #72	@ 0x48
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cca:	bf00      	nop
 8005ccc:	58024400 	.word	0x58024400
 8005cd0:	03d09000 	.word	0x03d09000
 8005cd4:	003d0900 	.word	0x003d0900
 8005cd8:	080061a8 	.word	0x080061a8

08005cdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	f003 0302 	and.w	r3, r3, #2
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d4e:	f003 0304 	and.w	r3, r3, #4
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685b      	ldr	r3, [r3, #4]
 8005d5c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f003 0310 	and.w	r3, r3, #16
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	430a      	orrs	r2, r1
 8005dae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d01a      	beq.n	8005df2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	430a      	orrs	r2, r1
 8005dd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005dda:	d10a      	bne.n	8005df2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00a      	beq.n	8005e14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	685b      	ldr	r3, [r3, #4]
 8005e04:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	430a      	orrs	r2, r1
 8005e12:	605a      	str	r2, [r3, #4]
  }
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b098      	sub	sp, #96	@ 0x60
 8005e24:	af02      	add	r7, sp, #8
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e30:	f7fb fbb4 	bl	800159c <HAL_GetTick>
 8005e34:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	2b08      	cmp	r3, #8
 8005e42:	d12f      	bne.n	8005ea4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e44:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f88e 	bl	8005f74 <UART_WaitOnFlagUntilTimeout>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d022      	beq.n	8005ea4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e6e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e72:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005e7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e7e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005e82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005e8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2220      	movs	r2, #32
 8005e94:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e063      	b.n	8005f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b04      	cmp	r3, #4
 8005eb0:	d149      	bne.n	8005f46 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005eb2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 f857 	bl	8005f74 <UART_WaitOnFlagUntilTimeout>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d03c      	beq.n	8005f46 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	e853 3f00 	ldrex	r3, [r3]
 8005ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ee0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005eea:	633b      	str	r3, [r7, #48]	@ 0x30
 8005eec:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005eee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ef0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ef2:	e841 2300 	strex	r3, r2, [r1]
 8005ef6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1e6      	bne.n	8005ecc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	3308      	adds	r3, #8
 8005f04:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	3308      	adds	r3, #8
 8005f1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f1e:	61fa      	str	r2, [r7, #28]
 8005f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f22:	69b9      	ldr	r1, [r7, #24]
 8005f24:	69fa      	ldr	r2, [r7, #28]
 8005f26:	e841 2300 	strex	r3, r2, [r1]
 8005f2a:	617b      	str	r3, [r7, #20]
   return(result);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d1e5      	bne.n	8005efe <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2220      	movs	r2, #32
 8005f36:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f42:	2303      	movs	r3, #3
 8005f44:	e012      	b.n	8005f6c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2220      	movs	r2, #32
 8005f52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005f6a:	2300      	movs	r3, #0
}
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	3758      	adds	r7, #88	@ 0x58
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	603b      	str	r3, [r7, #0]
 8005f80:	4613      	mov	r3, r2
 8005f82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f84:	e04f      	b.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8c:	d04b      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f8e:	f7fb fb05 	bl	800159c <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	69ba      	ldr	r2, [r7, #24]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d302      	bcc.n	8005fa4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e04e      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0304 	and.w	r3, r3, #4
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d037      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b80      	cmp	r3, #128	@ 0x80
 8005fba:	d034      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b40      	cmp	r3, #64	@ 0x40
 8005fc0:	d031      	beq.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	69db      	ldr	r3, [r3, #28]
 8005fc8:	f003 0308 	and.w	r3, r3, #8
 8005fcc:	2b08      	cmp	r3, #8
 8005fce:	d110      	bne.n	8005ff2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2208      	movs	r2, #8
 8005fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005fd8:	68f8      	ldr	r0, [r7, #12]
 8005fda:	f000 f839 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2208      	movs	r2, #8
 8005fe2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	e029      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	69db      	ldr	r3, [r3, #28]
 8005ff8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006000:	d111      	bne.n	8006026 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800600a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 f81f 	bl	8006050 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2220      	movs	r2, #32
 8006016:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	e00f      	b.n	8006046 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69da      	ldr	r2, [r3, #28]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4013      	ands	r3, r2
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	79fb      	ldrb	r3, [r7, #7]
 8006040:	429a      	cmp	r2, r3
 8006042:	d0a0      	beq.n	8005f86 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006044:	2300      	movs	r3, #0
}
 8006046:	4618      	mov	r0, r3
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}
	...

08006050 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b095      	sub	sp, #84	@ 0x54
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006068:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800606c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	461a      	mov	r2, r3
 8006074:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006076:	643b      	str	r3, [r7, #64]	@ 0x40
 8006078:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800607a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800607c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800607e:	e841 2300 	strex	r3, r2, [r1]
 8006082:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	2b00      	cmp	r3, #0
 8006088:	d1e6      	bne.n	8006058 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	3308      	adds	r3, #8
 8006090:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006092:	6a3b      	ldr	r3, [r7, #32]
 8006094:	e853 3f00 	ldrex	r3, [r3]
 8006098:	61fb      	str	r3, [r7, #28]
   return(result);
 800609a:	69fa      	ldr	r2, [r7, #28]
 800609c:	4b1e      	ldr	r3, [pc, #120]	@ (8006118 <UART_EndRxTransfer+0xc8>)
 800609e:	4013      	ands	r3, r2
 80060a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	3308      	adds	r3, #8
 80060a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80060aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80060b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d1e5      	bne.n	800608a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	d118      	bne.n	80060f8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	e853 3f00 	ldrex	r3, [r3]
 80060d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0310 	bic.w	r3, r3, #16
 80060da:	647b      	str	r3, [r7, #68]	@ 0x44
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	461a      	mov	r2, r3
 80060e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060e4:	61bb      	str	r3, [r7, #24]
 80060e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e8:	6979      	ldr	r1, [r7, #20]
 80060ea:	69ba      	ldr	r2, [r7, #24]
 80060ec:	e841 2300 	strex	r3, r2, [r1]
 80060f0:	613b      	str	r3, [r7, #16]
   return(result);
 80060f2:	693b      	ldr	r3, [r7, #16]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1e6      	bne.n	80060c6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2220      	movs	r2, #32
 80060fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2200      	movs	r2, #0
 800610a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800610c:	bf00      	nop
 800610e:	3754      	adds	r7, #84	@ 0x54
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr
 8006118:	effffffe 	.word	0xeffffffe

0800611c <memset>:
 800611c:	4402      	add	r2, r0
 800611e:	4603      	mov	r3, r0
 8006120:	4293      	cmp	r3, r2
 8006122:	d100      	bne.n	8006126 <memset+0xa>
 8006124:	4770      	bx	lr
 8006126:	f803 1b01 	strb.w	r1, [r3], #1
 800612a:	e7f9      	b.n	8006120 <memset+0x4>

0800612c <__libc_init_array>:
 800612c:	b570      	push	{r4, r5, r6, lr}
 800612e:	4d0d      	ldr	r5, [pc, #52]	@ (8006164 <__libc_init_array+0x38>)
 8006130:	4c0d      	ldr	r4, [pc, #52]	@ (8006168 <__libc_init_array+0x3c>)
 8006132:	1b64      	subs	r4, r4, r5
 8006134:	10a4      	asrs	r4, r4, #2
 8006136:	2600      	movs	r6, #0
 8006138:	42a6      	cmp	r6, r4
 800613a:	d109      	bne.n	8006150 <__libc_init_array+0x24>
 800613c:	4d0b      	ldr	r5, [pc, #44]	@ (800616c <__libc_init_array+0x40>)
 800613e:	4c0c      	ldr	r4, [pc, #48]	@ (8006170 <__libc_init_array+0x44>)
 8006140:	f000 f818 	bl	8006174 <_init>
 8006144:	1b64      	subs	r4, r4, r5
 8006146:	10a4      	asrs	r4, r4, #2
 8006148:	2600      	movs	r6, #0
 800614a:	42a6      	cmp	r6, r4
 800614c:	d105      	bne.n	800615a <__libc_init_array+0x2e>
 800614e:	bd70      	pop	{r4, r5, r6, pc}
 8006150:	f855 3b04 	ldr.w	r3, [r5], #4
 8006154:	4798      	blx	r3
 8006156:	3601      	adds	r6, #1
 8006158:	e7ee      	b.n	8006138 <__libc_init_array+0xc>
 800615a:	f855 3b04 	ldr.w	r3, [r5], #4
 800615e:	4798      	blx	r3
 8006160:	3601      	adds	r6, #1
 8006162:	e7f2      	b.n	800614a <__libc_init_array+0x1e>
 8006164:	080061c8 	.word	0x080061c8
 8006168:	080061c8 	.word	0x080061c8
 800616c:	080061c8 	.word	0x080061c8
 8006170:	080061cc 	.word	0x080061cc

08006174 <_init>:
 8006174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006176:	bf00      	nop
 8006178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800617a:	bc08      	pop	{r3}
 800617c:	469e      	mov	lr, r3
 800617e:	4770      	bx	lr

08006180 <_fini>:
 8006180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006182:	bf00      	nop
 8006184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006186:	bc08      	pop	{r3}
 8006188:	469e      	mov	lr, r3
 800618a:	4770      	bx	lr
