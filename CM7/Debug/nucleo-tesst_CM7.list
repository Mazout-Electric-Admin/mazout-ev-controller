
nucleo-tesst_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003928  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003bc0  08003bc0  00004bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bf4  08003bf4  0000502c  2**0
                  CONTENTS
  4 .ARM          00000008  08003bf4  08003bf4  00004bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bfc  08003bfc  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bfc  08003bfc  00004bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c00  08003c00  00004c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003c04  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003c30  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003c30  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbca  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7b  00000000  00000000  00014c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b58  00000000  00000000  00016ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008ac  00000000  00000000  000176f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039590  00000000  00000000  00017fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fc3c  00000000  00000000  00051534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017ad4e  00000000  00000000  00061170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dbebe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e1c  00000000  00000000  001dbf04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  001ded20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003ba8 	.word	0x08003ba8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003ba8 	.word	0x08003ba8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b33      	ldr	r3, [pc, #204]	@ (80007d0 <main+0xdc>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 f8c5 	bl	80008ac <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 fb0b 	bl	8000d3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f857 	bl	80007d8 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <main+0xdc>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a27      	ldr	r2, [pc, #156]	@ (80007d0 <main+0xdc>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b25      	ldr	r3, [pc, #148]	@ (80007d0 <main+0xdc>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f000 fef3 	bl	8001534 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f000 ff09 	bl	8001568 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b1c      	ldr	r3, [pc, #112]	@ (80007d0 <main+0xdc>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 f897 	bl	80008ac <Error_Handler>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f914 	bl	80009ac <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000784:	2001      	movs	r0, #1
 8000786:	f000 f911 	bl	80009ac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800078a:	2002      	movs	r0, #2
 800078c:	f000 f90e 	bl	80009ac <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000790:	2101      	movs	r1, #1
 8000792:	2000      	movs	r0, #0
 8000794:	f000 f980 	bl	8000a98 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000798:	4b0e      	ldr	r3, [pc, #56]	@ (80007d4 <main+0xe0>)
 800079a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800079e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007a0:	4b0c      	ldr	r3, [pc, #48]	@ (80007d4 <main+0xe0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007a6:	4b0b      	ldr	r3, [pc, #44]	@ (80007d4 <main+0xe0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80007ac:	4b09      	ldr	r3, [pc, #36]	@ (80007d4 <main+0xe0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80007b2:	4b08      	ldr	r3, [pc, #32]	@ (80007d4 <main+0xe0>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80007b8:	4906      	ldr	r1, [pc, #24]	@ (80007d4 <main+0xe0>)
 80007ba:	2000      	movs	r0, #0
 80007bc:	f000 f9fc 	bl	8000bb8 <BSP_COM_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d002      	beq.n	80007cc <main+0xd8>
  {
    Error_Handler();
 80007c6:	f000 f871 	bl	80008ac <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	e7fd      	b.n	80007cc <main+0xd8>
 80007d0:	58024400 	.word	0x58024400
 80007d4:	24000048 	.word	0x24000048

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b09c      	sub	sp, #112	@ 0x70
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e2:	224c      	movs	r2, #76	@ 0x4c
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 f9b2 	bl	8003b50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2220      	movs	r2, #32
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f003 f9ac 	bl	8003b50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007f8:	2004      	movs	r0, #4
 80007fa:	f000 fec9 	bl	8001590 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007fe:	2300      	movs	r3, #0
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	4b28      	ldr	r3, [pc, #160]	@ (80008a4 <SystemClock_Config+0xcc>)
 8000804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000806:	4a27      	ldr	r2, [pc, #156]	@ (80008a4 <SystemClock_Config+0xcc>)
 8000808:	f023 0301 	bic.w	r3, r3, #1
 800080c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800080e:	4b25      	ldr	r3, [pc, #148]	@ (80008a4 <SystemClock_Config+0xcc>)
 8000810:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <SystemClock_Config+0xd0>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000820:	4a21      	ldr	r2, [pc, #132]	@ (80008a8 <SystemClock_Config+0xd0>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1f      	ldr	r3, [pc, #124]	@ (80008a8 <SystemClock_Config+0xd0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000830:	603b      	str	r3, [r7, #0]
 8000832:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000834:	bf00      	nop
 8000836:	4b1c      	ldr	r3, [pc, #112]	@ (80008a8 <SystemClock_Config+0xd0>)
 8000838:	699b      	ldr	r3, [r3, #24]
 800083a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800083e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000842:	d1f8      	bne.n	8000836 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000844:	2302      	movs	r3, #2
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000848:	2301      	movs	r3, #1
 800084a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800084c:	2340      	movs	r3, #64	@ 0x40
 800084e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000850:	2300      	movs	r3, #0
 8000852:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000858:	4618      	mov	r0, r3
 800085a:	f000 fef3 	bl	8001644 <HAL_RCC_OscConfig>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000864:	f000 f822 	bl	80008ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000868:	233f      	movs	r3, #63	@ 0x3f
 800086a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800086c:	2300      	movs	r3, #0
 800086e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000870:	2300      	movs	r3, #0
 8000872:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000888:	1d3b      	adds	r3, r7, #4
 800088a:	2101      	movs	r1, #1
 800088c:	4618      	mov	r0, r3
 800088e:	f001 fb33 	bl	8001ef8 <HAL_RCC_ClockConfig>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000898:	f000 f808 	bl	80008ac <Error_Handler>
  }
}
 800089c:	bf00      	nop
 800089e:	3770      	adds	r7, #112	@ 0x70
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	58000400 	.word	0x58000400
 80008a8:	58024800 	.word	0x58024800

080008ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b0:	b672      	cpsid	i
}
 80008b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <Error_Handler+0x8>

080008b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <HAL_MspInit+0x30>)
 80008c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008c4:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <HAL_MspInit+0x30>)
 80008c6:	f043 0302 	orr.w	r3, r3, #2
 80008ca:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <HAL_MspInit+0x30>)
 80008d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80008d4:	f003 0302 	and.w	r3, r3, #2
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e6:	4770      	bx	lr
 80008e8:	58024400 	.word	0x58024400

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr

0800093e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000942:	f000 fa6d 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}

0800094a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800094e:	2000      	movs	r0, #0
 8000950:	f000 f914 	bl	8000b7c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}

08000958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000958:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000990 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800095c:	f7ff fe34 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000960:	480c      	ldr	r0, [pc, #48]	@ (8000994 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000962:	490d      	ldr	r1, [pc, #52]	@ (8000998 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000964:	4a0d      	ldr	r2, [pc, #52]	@ (800099c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000968:	e002      	b.n	8000970 <LoopCopyDataInit>

0800096a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800096c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800096e:	3304      	adds	r3, #4

08000970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000974:	d3f9      	bcc.n	800096a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000978:	4c0a      	ldr	r4, [pc, #40]	@ (80009a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800097a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800097c:	e001      	b.n	8000982 <LoopFillZerobss>

0800097e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800097e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000980:	3204      	adds	r2, #4

08000982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000984:	d3fb      	bcc.n	800097e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000986:	f003 f8eb 	bl	8003b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800098a:	f7ff feb3 	bl	80006f4 <main>
  bx  lr
 800098e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000990:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000994:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000998:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 800099c:	08003c04 	.word	0x08003c04
  ldr r2, =_sbss
 80009a0:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 80009a4:	240000f8 	.word	0x240000f8

080009a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009a8:	e7fe      	b.n	80009a8 <ADC3_IRQHandler>
	...

080009ac <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08c      	sub	sp, #48	@ 0x30
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80009ba:	79fb      	ldrb	r3, [r7, #7]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d009      	beq.n	80009d4 <BSP_LED_Init+0x28>
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d006      	beq.n	80009d4 <BSP_LED_Init+0x28>
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b02      	cmp	r3, #2
 80009ca:	d003      	beq.n	80009d4 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80009cc:	f06f 0301 	mvn.w	r3, #1
 80009d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009d2:	e055      	b.n	8000a80 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10f      	bne.n	80009fa <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80009da:	4b2c      	ldr	r3, [pc, #176]	@ (8000a8c <BSP_LED_Init+0xe0>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009e0:	4a2a      	ldr	r2, [pc, #168]	@ (8000a8c <BSP_LED_Init+0xe0>)
 80009e2:	f043 0302 	orr.w	r3, r3, #2
 80009e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009ea:	4b28      	ldr	r3, [pc, #160]	@ (8000a8c <BSP_LED_Init+0xe0>)
 80009ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009f0:	f003 0302 	and.w	r3, r3, #2
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	e021      	b.n	8000a3e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d10f      	bne.n	8000a20 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000a00:	4b22      	ldr	r3, [pc, #136]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a06:	4a21      	ldr	r2, [pc, #132]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a08:	f043 0310 	orr.w	r3, r3, #16
 8000a0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a10:	4b1e      	ldr	r3, [pc, #120]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a16:	f003 0310 	and.w	r3, r3, #16
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	e00e      	b.n	8000a3e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000a20:	4b1a      	ldr	r3, [pc, #104]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a26:	4a19      	ldr	r2, [pc, #100]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <BSP_LED_Init+0xe0>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	4a13      	ldr	r2, [pc, #76]	@ (8000a90 <BSP_LED_Init+0xe4>)
 8000a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a46:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a50:	2303      	movs	r3, #3
 8000a52:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	4a0f      	ldr	r2, [pc, #60]	@ (8000a94 <BSP_LED_Init+0xe8>)
 8000a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a5c:	f107 0218 	add.w	r2, r7, #24
 8000a60:	4611      	mov	r1, r2
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 fb9c 	bl	80011a0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a94 <BSP_LED_Init+0xe8>)
 8000a6c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000a70:	79fb      	ldrb	r3, [r7, #7]
 8000a72:	4a07      	ldr	r2, [pc, #28]	@ (8000a90 <BSP_LED_Init+0xe4>)
 8000a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000a78:	2200      	movs	r2, #0
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	f000 fd40 	bl	8001500 <HAL_GPIO_WritePin>
  }

  return ret;
 8000a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3730      	adds	r7, #48	@ 0x30
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	58024400 	.word	0x58024400
 8000a90:	08003bd0 	.word	0x08003bd0
 8000a94:	2400000c 	.word	0x2400000c

08000a98 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b088      	sub	sp, #32
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	460a      	mov	r2, r1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <BSP_PB_Init+0xcc>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aae:	4a2d      	ldr	r2, [pc, #180]	@ (8000b64 <BSP_PB_Init+0xcc>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab8:	4b2a      	ldr	r3, [pc, #168]	@ (8000b64 <BSP_PB_Init+0xcc>)
 8000aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abe:	f003 0304 	and.w	r3, r3, #4
 8000ac2:	60bb      	str	r3, [r7, #8]
 8000ac4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000ac6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000aca:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000acc:	2302      	movs	r3, #2
 8000ace:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000ad4:	79bb      	ldrb	r3, [r7, #6]
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d10c      	bne.n	8000af4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000ada:	2300      	movs	r3, #0
 8000adc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a21      	ldr	r2, [pc, #132]	@ (8000b68 <BSP_PB_Init+0xd0>)
 8000ae2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ae6:	f107 020c 	add.w	r2, r7, #12
 8000aea:	4611      	mov	r1, r2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 fb57 	bl	80011a0 <HAL_GPIO_Init>
 8000af2:	e031      	b.n	8000b58 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000af8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	4a1a      	ldr	r2, [pc, #104]	@ (8000b68 <BSP_PB_Init+0xd0>)
 8000afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b02:	f107 020c 	add.w	r2, r7, #12
 8000b06:	4611      	mov	r1, r2
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f000 fb49 	bl	80011a0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000b0e:	79fb      	ldrb	r3, [r7, #7]
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	4a16      	ldr	r2, [pc, #88]	@ (8000b6c <BSP_PB_Init+0xd4>)
 8000b14:	441a      	add	r2, r3
 8000b16:	79fb      	ldrb	r3, [r7, #7]
 8000b18:	4915      	ldr	r1, [pc, #84]	@ (8000b70 <BSP_PB_Init+0xd8>)
 8000b1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000b1e:	4619      	mov	r1, r3
 8000b20:	4610      	mov	r0, r2
 8000b22:	f000 faec 	bl	80010fe <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4a10      	ldr	r2, [pc, #64]	@ (8000b6c <BSP_PB_Init+0xd4>)
 8000b2c:	1898      	adds	r0, r3, r2
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a10      	ldr	r2, [pc, #64]	@ (8000b74 <BSP_PB_Init+0xdc>)
 8000b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b36:	461a      	mov	r2, r3
 8000b38:	2100      	movs	r1, #0
 8000b3a:	f000 fac1 	bl	80010c0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000b3e:	2028      	movs	r0, #40	@ 0x28
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a0d      	ldr	r2, [pc, #52]	@ (8000b78 <BSP_PB_Init+0xe0>)
 8000b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b48:	2200      	movs	r2, #0
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	f000 fa6f 	bl	800102e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000b50:	2328      	movs	r3, #40	@ 0x28
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 fa85 	bl	8001062 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3720      	adds	r7, #32
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	58024400 	.word	0x58024400
 8000b68:	24000018 	.word	0x24000018
 8000b6c:	24000058 	.word	0x24000058
 8000b70:	08003bd8 	.word	0x08003bd8
 8000b74:	2400001c 	.word	0x2400001c
 8000b78:	24000020 	.word	0x24000020

08000b7c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	4603      	mov	r3, r0
 8000b84:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	00db      	lsls	r3, r3, #3
 8000b8a:	4a04      	ldr	r2, [pc, #16]	@ (8000b9c <BSP_PB_IRQHandler+0x20>)
 8000b8c:	4413      	add	r3, r2
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 faca 	bl	8001128 <HAL_EXTI_IRQHandler>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	24000058 	.word	0x24000058

08000ba0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000baa:	bf00      	nop
 8000bac:	370c      	adds	r7, #12
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	6039      	str	r1, [r7, #0]
 8000bc2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000bce:	f06f 0301 	mvn.w	r3, #1
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e018      	b.n	8000c08 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000bd6:	79fb      	ldrb	r3, [r7, #7]
 8000bd8:	2294      	movs	r2, #148	@ 0x94
 8000bda:	fb02 f303 	mul.w	r3, r2, r3
 8000bde:	4a0d      	ldr	r2, [pc, #52]	@ (8000c14 <BSP_COM_Init+0x5c>)
 8000be0:	4413      	add	r3, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 f852 	bl	8000c8c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	2294      	movs	r2, #148	@ 0x94
 8000bec:	fb02 f303 	mul.w	r3, r2, r3
 8000bf0:	4a08      	ldr	r2, [pc, #32]	@ (8000c14 <BSP_COM_Init+0x5c>)
 8000bf2:	4413      	add	r3, r2
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f80e 	bl	8000c18 <MX_USART3_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000c02:	f06f 0303 	mvn.w	r3, #3
 8000c06:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000c08:	68fb      	ldr	r3, [r7, #12]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	24000060 	.word	0x24000060

08000c18 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000c22:	4b15      	ldr	r3, [pc, #84]	@ (8000c78 <MX_USART3_Init+0x60>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	220c      	movs	r2, #12
 8000c36:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	895b      	ldrh	r3, [r3, #10]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	891b      	ldrh	r3, [r3, #8]
 8000c4e:	461a      	mov	r2, r3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	899b      	ldrh	r3, [r3, #12]
 8000c58:	461a      	mov	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000c64:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f001 ff90 	bl	8002b8c <HAL_UART_Init>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	24000008 	.word	0x24000008

08000c7c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000c80:	2000      	movs	r0, #0
 8000c82:	f7ff ff8d 	bl	8000ba0 <BSP_PB_Callback>
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
	...

08000c8c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08a      	sub	sp, #40	@ 0x28
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000c94:	4b27      	ldr	r3, [pc, #156]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c9a:	4a26      	ldr	r2, [pc, #152]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	613b      	str	r3, [r7, #16]
 8000cb0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb8:	4a1e      	ldr	r2, [pc, #120]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000cba:	f043 0308 	orr.w	r3, r3, #8
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc8:	f003 0308 	and.w	r3, r3, #8
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000cd0:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000cd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cdc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ce0:	4b14      	ldr	r3, [pc, #80]	@ (8000d34 <COM1_MspInit+0xa8>)
 8000ce2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cea:	60bb      	str	r3, [r7, #8]
 8000cec:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000cee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000d00:	2307      	movs	r3, #7
 8000d02:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	480b      	ldr	r0, [pc, #44]	@ (8000d38 <COM1_MspInit+0xac>)
 8000d0c:	f000 fa48 	bl	80011a0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000d10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d14:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d16:	2302      	movs	r3, #2
 8000d18:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000d1a:	2307      	movs	r3, #7
 8000d1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4804      	ldr	r0, [pc, #16]	@ (8000d38 <COM1_MspInit+0xac>)
 8000d26:	f000 fa3b 	bl	80011a0 <HAL_GPIO_Init>
}
 8000d2a:	bf00      	nop
 8000d2c:	3728      	adds	r7, #40	@ 0x28
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	58024400 	.word	0x58024400
 8000d38:	58020c00 	.word	0x58020c00

08000d3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d42:	2003      	movs	r0, #3
 8000d44:	f000 f968 	bl	8001018 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d48:	f001 fa8c 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	4b15      	ldr	r3, [pc, #84]	@ (8000da4 <HAL_Init+0x68>)
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	0a1b      	lsrs	r3, r3, #8
 8000d54:	f003 030f 	and.w	r3, r3, #15
 8000d58:	4913      	ldr	r1, [pc, #76]	@ (8000da8 <HAL_Init+0x6c>)
 8000d5a:	5ccb      	ldrb	r3, [r1, r3]
 8000d5c:	f003 031f 	and.w	r3, r3, #31
 8000d60:	fa22 f303 	lsr.w	r3, r2, r3
 8000d64:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d66:	4b0f      	ldr	r3, [pc, #60]	@ (8000da4 <HAL_Init+0x68>)
 8000d68:	699b      	ldr	r3, [r3, #24]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000da8 <HAL_Init+0x6c>)
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	f003 031f 	and.w	r3, r3, #31
 8000d76:	687a      	ldr	r2, [r7, #4]
 8000d78:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7c:	4a0b      	ldr	r2, [pc, #44]	@ (8000dac <HAL_Init+0x70>)
 8000d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d80:	4a0b      	ldr	r2, [pc, #44]	@ (8000db0 <HAL_Init+0x74>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d86:	2000      	movs	r0, #0
 8000d88:	f000 f814 	bl	8000db4 <HAL_InitTick>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d92:	2301      	movs	r3, #1
 8000d94:	e002      	b.n	8000d9c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d96:	f7ff fd8f 	bl	80008b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}
 8000da4:	58024400 	.word	0x58024400
 8000da8:	08003bc0 	.word	0x08003bc0
 8000dac:	24000004 	.word	0x24000004
 8000db0:	24000000 	.word	0x24000000

08000db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dbc:	4b15      	ldr	r3, [pc, #84]	@ (8000e14 <HAL_InitTick+0x60>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d101      	bne.n	8000dc8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	e021      	b.n	8000e0c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000dc8:	4b13      	ldr	r3, [pc, #76]	@ (8000e18 <HAL_InitTick+0x64>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b11      	ldr	r3, [pc, #68]	@ (8000e14 <HAL_InitTick+0x60>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f94d 	bl	800107e <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f917 	bl	800102e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x68>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	24000028 	.word	0x24000028
 8000e18:	24000000 	.word	0x24000000
 8000e1c:	24000024 	.word	0x24000024

08000e20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	@ (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	24000028 	.word	0x24000028
 8000e44:	240000f4 	.word	0x240000f4

08000e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e4c:	4b03      	ldr	r3, [pc, #12]	@ (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	240000f4 	.word	0x240000f4

08000e60 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <HAL_GetREVID+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	0c1b      	lsrs	r3, r3, #16
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	5c001000 	.word	0x5c001000

08000e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8e:	68ba      	ldr	r2, [r7, #8]
 8000e90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e94:	4013      	ands	r3, r2
 8000e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000ea0:	4b06      	ldr	r3, [pc, #24]	@ (8000ebc <__NVIC_SetPriorityGrouping+0x44>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea6:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	60d3      	str	r3, [r2, #12]
}
 8000eac:	bf00      	nop
 8000eae:	3714      	adds	r7, #20
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000ed00 	.word	0xe000ed00
 8000ebc:	05fa0000 	.word	0x05fa0000

08000ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec4:	4b04      	ldr	r3, [pc, #16]	@ (8000ed8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ec6:	68db      	ldr	r3, [r3, #12]
 8000ec8:	0a1b      	lsrs	r3, r3, #8
 8000eca:	f003 0307 	and.w	r3, r3, #7
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr
 8000ed8:	e000ed00 	.word	0xe000ed00

08000edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	db0b      	blt.n	8000f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eee:	88fb      	ldrh	r3, [r7, #6]
 8000ef0:	f003 021f 	and.w	r2, r3, #31
 8000ef4:	4907      	ldr	r1, [pc, #28]	@ (8000f14 <__NVIC_EnableIRQ+0x38>)
 8000ef6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000efa:	095b      	lsrs	r3, r3, #5
 8000efc:	2001      	movs	r0, #1
 8000efe:	fa00 f202 	lsl.w	r2, r0, r2
 8000f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	e000e100 	.word	0xe000e100

08000f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	4603      	mov	r3, r0
 8000f20:	6039      	str	r1, [r7, #0]
 8000f22:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	db0a      	blt.n	8000f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	b2da      	uxtb	r2, r3
 8000f30:	490c      	ldr	r1, [pc, #48]	@ (8000f64 <__NVIC_SetPriority+0x4c>)
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	0112      	lsls	r2, r2, #4
 8000f38:	b2d2      	uxtb	r2, r2
 8000f3a:	440b      	add	r3, r1
 8000f3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f40:	e00a      	b.n	8000f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	b2da      	uxtb	r2, r3
 8000f46:	4908      	ldr	r1, [pc, #32]	@ (8000f68 <__NVIC_SetPriority+0x50>)
 8000f48:	88fb      	ldrh	r3, [r7, #6]
 8000f4a:	f003 030f 	and.w	r3, r3, #15
 8000f4e:	3b04      	subs	r3, #4
 8000f50:	0112      	lsls	r2, r2, #4
 8000f52:	b2d2      	uxtb	r2, r2
 8000f54:	440b      	add	r3, r1
 8000f56:	761a      	strb	r2, [r3, #24]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	e000e100 	.word	0xe000e100
 8000f68:	e000ed00 	.word	0xe000ed00

08000f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b089      	sub	sp, #36	@ 0x24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	60f8      	str	r0, [r7, #12]
 8000f74:	60b9      	str	r1, [r7, #8]
 8000f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	f1c3 0307 	rsb	r3, r3, #7
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	bf28      	it	cs
 8000f8a:	2304      	movcs	r3, #4
 8000f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3304      	adds	r3, #4
 8000f92:	2b06      	cmp	r3, #6
 8000f94:	d902      	bls.n	8000f9c <NVIC_EncodePriority+0x30>
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	3b03      	subs	r3, #3
 8000f9a:	e000      	b.n	8000f9e <NVIC_EncodePriority+0x32>
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa4:	69bb      	ldr	r3, [r7, #24]
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43da      	mvns	r2, r3
 8000fac:	68bb      	ldr	r3, [r7, #8]
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fb4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa01 f303 	lsl.w	r3, r1, r3
 8000fbe:	43d9      	mvns	r1, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	4313      	orrs	r3, r2
         );
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3724      	adds	r7, #36	@ 0x24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
	...

08000fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fe4:	d301      	bcc.n	8000fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e00f      	b.n	800100a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fea:	4a0a      	ldr	r2, [pc, #40]	@ (8001014 <SysTick_Config+0x40>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3b01      	subs	r3, #1
 8000ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ff2:	210f      	movs	r1, #15
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	f7ff ff8e 	bl	8000f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ffc:	4b05      	ldr	r3, [pc, #20]	@ (8001014 <SysTick_Config+0x40>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001002:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <SysTick_Config+0x40>)
 8001004:	2207      	movs	r2, #7
 8001006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001008:	2300      	movs	r3, #0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010

08001018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001020:	6878      	ldr	r0, [r7, #4]
 8001022:	f7ff ff29 	bl	8000e78 <__NVIC_SetPriorityGrouping>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b086      	sub	sp, #24
 8001032:	af00      	add	r7, sp, #0
 8001034:	4603      	mov	r3, r0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800103c:	f7ff ff40 	bl	8000ec0 <__NVIC_GetPriorityGrouping>
 8001040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001042:	687a      	ldr	r2, [r7, #4]
 8001044:	68b9      	ldr	r1, [r7, #8]
 8001046:	6978      	ldr	r0, [r7, #20]
 8001048:	f7ff ff90 	bl	8000f6c <NVIC_EncodePriority>
 800104c:	4602      	mov	r2, r0
 800104e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001052:	4611      	mov	r1, r2
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff5f 	bl	8000f18 <__NVIC_SetPriority>
}
 800105a:	bf00      	nop
 800105c:	3718      	adds	r7, #24
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	4603      	mov	r3, r0
 800106a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800106c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001070:	4618      	mov	r0, r3
 8001072:	f7ff ff33 	bl	8000edc <__NVIC_EnableIRQ>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff ffa4 	bl	8000fd4 <SysTick_Config>
 800108c:	4603      	mov	r3, r0
}
 800108e:	4618      	mov	r0, r3
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <HAL_GetCurrentCPUID+0x24>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	091b      	lsrs	r3, r3, #4
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	2b07      	cmp	r3, #7
 80010a8:	d101      	bne.n	80010ae <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e000      	b.n	80010b0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80010ae:	2301      	movs	r3, #1
  }
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	460b      	mov	r3, r1
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00a      	b.n	80010f2 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80010dc:	7afb      	ldrb	r3, [r7, #11]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d103      	bne.n	80010ea <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	605a      	str	r2, [r3, #4]
      break;
 80010e8:	e002      	b.n	80010f0 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	75fb      	strb	r3, [r7, #23]
      break;
 80010ee:	bf00      	nop
  }

  return status;
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	371c      	adds	r7, #28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80010fe:	b480      	push	{r7}
 8001100:	b083      	sub	sp, #12
 8001102:	af00      	add	r7, sp, #0
 8001104:	6078      	str	r0, [r7, #4]
 8001106:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d101      	bne.n	8001112 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e003      	b.n	800111a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	683a      	ldr	r2, [r7, #0]
 8001116:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001118:	2300      	movs	r3, #0
  }
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	0c1b      	lsrs	r3, r3, #16
 8001136:	f003 0303 	and.w	r3, r3, #3
 800113a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 031f 	and.w	r3, r3, #31
 8001144:	2201      	movs	r2, #1
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800114c:	f7ff ffa4 	bl	8001098 <HAL_GetCurrentCPUID>
 8001150:	4603      	mov	r3, r0
 8001152:	2b03      	cmp	r3, #3
 8001154:	d105      	bne.n	8001162 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	011a      	lsls	r2, r3, #4
 800115a:	4b0f      	ldr	r3, [pc, #60]	@ (8001198 <HAL_EXTI_IRQHandler+0x70>)
 800115c:	4413      	add	r3, r2
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e004      	b.n	800116c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	011a      	lsls	r2, r3, #4
 8001166:	4b0d      	ldr	r3, [pc, #52]	@ (800119c <HAL_EXTI_IRQHandler+0x74>)
 8001168:	4413      	add	r3, r2
 800116a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	68fa      	ldr	r2, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d009      	beq.n	8001190 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	68fa      	ldr	r2, [r7, #12]
 8001180:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4798      	blx	r3
    }
  }
}
 8001190:	bf00      	nop
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	58000088 	.word	0x58000088
 800119c:	580000c8 	.word	0x580000c8

080011a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b089      	sub	sp, #36	@ 0x24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80011ae:	4b89      	ldr	r3, [pc, #548]	@ (80013d4 <HAL_GPIO_Init+0x234>)
 80011b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80011b2:	e194      	b.n	80014de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	2101      	movs	r1, #1
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 8186 	beq.w	80014d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d005      	beq.n	80011e4 <HAL_GPIO_Init+0x44>
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d130      	bne.n	8001246 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	2203      	movs	r2, #3
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43db      	mvns	r3, r3
 80011f6:	69ba      	ldr	r2, [r7, #24]
 80011f8:	4013      	ands	r3, r2
 80011fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	fa02 f303 	lsl.w	r3, r2, r3
 8001208:	69ba      	ldr	r2, [r7, #24]
 800120a:	4313      	orrs	r3, r2
 800120c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	69ba      	ldr	r2, [r7, #24]
 8001212:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800121a:	2201      	movs	r2, #1
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	fa02 f303 	lsl.w	r3, r2, r3
 8001222:	43db      	mvns	r3, r3
 8001224:	69ba      	ldr	r2, [r7, #24]
 8001226:	4013      	ands	r3, r2
 8001228:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	f003 0201 	and.w	r2, r3, #1
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f003 0303 	and.w	r3, r3, #3
 800124e:	2b03      	cmp	r3, #3
 8001250:	d017      	beq.n	8001282 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	005b      	lsls	r3, r3, #1
 800125c:	2203      	movs	r2, #3
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	689a      	ldr	r2, [r3, #8]
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	69ba      	ldr	r2, [r7, #24]
 8001280:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d123      	bne.n	80012d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800128e:	69fb      	ldr	r3, [r7, #28]
 8001290:	08da      	lsrs	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3208      	adds	r2, #8
 8001296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	220f      	movs	r2, #15
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	691a      	ldr	r2, [r3, #16]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	009b      	lsls	r3, r3, #2
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	08da      	lsrs	r2, r3, #3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3208      	adds	r2, #8
 80012d0:	69b9      	ldr	r1, [r7, #24]
 80012d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	005b      	lsls	r3, r3, #1
 80012e0:	2203      	movs	r2, #3
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43db      	mvns	r3, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4013      	ands	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	f003 0203 	and.w	r2, r3, #3
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	005b      	lsls	r3, r3, #1
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4313      	orrs	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 80e0 	beq.w	80014d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001318:	4b2f      	ldr	r3, [pc, #188]	@ (80013d8 <HAL_GPIO_Init+0x238>)
 800131a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800131e:	4a2e      	ldr	r2, [pc, #184]	@ (80013d8 <HAL_GPIO_Init+0x238>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001328:	4b2b      	ldr	r3, [pc, #172]	@ (80013d8 <HAL_GPIO_Init+0x238>)
 800132a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	60fb      	str	r3, [r7, #12]
 8001334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001336:	4a29      	ldr	r2, [pc, #164]	@ (80013dc <HAL_GPIO_Init+0x23c>)
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a20      	ldr	r2, [pc, #128]	@ (80013e0 <HAL_GPIO_Init+0x240>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d052      	beq.n	8001408 <HAL_GPIO_Init+0x268>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a1f      	ldr	r2, [pc, #124]	@ (80013e4 <HAL_GPIO_Init+0x244>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d031      	beq.n	80013ce <HAL_GPIO_Init+0x22e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a1e      	ldr	r2, [pc, #120]	@ (80013e8 <HAL_GPIO_Init+0x248>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d02b      	beq.n	80013ca <HAL_GPIO_Init+0x22a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a1d      	ldr	r2, [pc, #116]	@ (80013ec <HAL_GPIO_Init+0x24c>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d025      	beq.n	80013c6 <HAL_GPIO_Init+0x226>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a1c      	ldr	r2, [pc, #112]	@ (80013f0 <HAL_GPIO_Init+0x250>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d01f      	beq.n	80013c2 <HAL_GPIO_Init+0x222>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a1b      	ldr	r2, [pc, #108]	@ (80013f4 <HAL_GPIO_Init+0x254>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d019      	beq.n	80013be <HAL_GPIO_Init+0x21e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a1a      	ldr	r2, [pc, #104]	@ (80013f8 <HAL_GPIO_Init+0x258>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d013      	beq.n	80013ba <HAL_GPIO_Init+0x21a>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a19      	ldr	r2, [pc, #100]	@ (80013fc <HAL_GPIO_Init+0x25c>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d00d      	beq.n	80013b6 <HAL_GPIO_Init+0x216>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a18      	ldr	r2, [pc, #96]	@ (8001400 <HAL_GPIO_Init+0x260>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d007      	beq.n	80013b2 <HAL_GPIO_Init+0x212>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a17      	ldr	r2, [pc, #92]	@ (8001404 <HAL_GPIO_Init+0x264>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d101      	bne.n	80013ae <HAL_GPIO_Init+0x20e>
 80013aa:	2309      	movs	r3, #9
 80013ac:	e02d      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013ae:	230a      	movs	r3, #10
 80013b0:	e02b      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013b2:	2308      	movs	r3, #8
 80013b4:	e029      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e027      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013ba:	2306      	movs	r3, #6
 80013bc:	e025      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013be:	2305      	movs	r3, #5
 80013c0:	e023      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013c2:	2304      	movs	r3, #4
 80013c4:	e021      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013c6:	2303      	movs	r3, #3
 80013c8:	e01f      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013ca:	2302      	movs	r3, #2
 80013cc:	e01d      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013ce:	2301      	movs	r3, #1
 80013d0:	e01b      	b.n	800140a <HAL_GPIO_Init+0x26a>
 80013d2:	bf00      	nop
 80013d4:	58000080 	.word	0x58000080
 80013d8:	58024400 	.word	0x58024400
 80013dc:	58000400 	.word	0x58000400
 80013e0:	58020000 	.word	0x58020000
 80013e4:	58020400 	.word	0x58020400
 80013e8:	58020800 	.word	0x58020800
 80013ec:	58020c00 	.word	0x58020c00
 80013f0:	58021000 	.word	0x58021000
 80013f4:	58021400 	.word	0x58021400
 80013f8:	58021800 	.word	0x58021800
 80013fc:	58021c00 	.word	0x58021c00
 8001400:	58022000 	.word	0x58022000
 8001404:	58022400 	.word	0x58022400
 8001408:	2300      	movs	r3, #0
 800140a:	69fa      	ldr	r2, [r7, #28]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	4313      	orrs	r3, r2
 8001418:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800141a:	4938      	ldr	r1, [pc, #224]	@ (80014fc <HAL_GPIO_Init+0x35c>)
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001430:	693b      	ldr	r3, [r7, #16]
 8001432:	43db      	mvns	r3, r3
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	4013      	ands	r3, r2
 8001438:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001446:	69ba      	ldr	r2, [r7, #24]
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800144e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001456:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d003      	beq.n	800147c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001474:	69ba      	ldr	r2, [r7, #24]
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800147c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	43db      	mvns	r3, r3
 800148e:	69ba      	ldr	r2, [r7, #24]
 8001490:	4013      	ands	r3, r2
 8001492:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d003      	beq.n	80014a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	4313      	orrs	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80014d2:	697b      	ldr	r3, [r7, #20]
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	3301      	adds	r3, #1
 80014dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	fa22 f303 	lsr.w	r3, r2, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f47f ae63 	bne.w	80011b4 <HAL_GPIO_Init+0x14>
  }
}
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
 80014f2:	3724      	adds	r7, #36	@ 0x24
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	58000400 	.word	0x58000400

08001500 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	807b      	strh	r3, [r7, #2]
 800150c:	4613      	mov	r3, r2
 800150e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001510:	787b      	ldrb	r3, [r7, #1]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d003      	beq.n	800151e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001516:	887a      	ldrh	r2, [r7, #2]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800151c:	e003      	b.n	8001526 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800151e:	887b      	ldrh	r3, [r7, #2]
 8001520:	041a      	lsls	r2, r3, #16
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	619a      	str	r2, [r3, #24]
}
 8001526:	bf00      	nop
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800153c:	4a08      	ldr	r2, [pc, #32]	@ (8001560 <HAL_HSEM_FastTake+0x2c>)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	3320      	adds	r3, #32
 8001542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001546:	4a07      	ldr	r2, [pc, #28]	@ (8001564 <HAL_HSEM_FastTake+0x30>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	e000      	b.n	8001552 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	58026400 	.word	0x58026400
 8001564:	80000300 	.word	0x80000300

08001568 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001572:	4906      	ldr	r1, [pc, #24]	@ (800158c <HAL_HSEM_Release+0x24>)
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	58026400 	.word	0x58026400

08001590 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001598:	4b29      	ldr	r3, [pc, #164]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	2b06      	cmp	r3, #6
 80015a2:	d00a      	beq.n	80015ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80015a4:	4b26      	ldr	r3, [pc, #152]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d001      	beq.n	80015b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e040      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	e03e      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80015ba:	4b21      	ldr	r3, [pc, #132]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015bc:	68db      	ldr	r3, [r3, #12]
 80015be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80015c2:	491f      	ldr	r1, [pc, #124]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80015ca:	f7ff fc3d 	bl	8000e48 <HAL_GetTick>
 80015ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015d0:	e009      	b.n	80015e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80015d2:	f7ff fc39 	bl	8000e48 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015e0:	d901      	bls.n	80015e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e028      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80015e6:	4b16      	ldr	r3, [pc, #88]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80015ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015f2:	d1ee      	bne.n	80015d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b1e      	cmp	r3, #30
 80015f8:	d008      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80015fe:	d005      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b1d      	cmp	r3, #29
 8001604:	d002      	beq.n	800160c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b2d      	cmp	r3, #45	@ 0x2d
 800160a:	d114      	bne.n	8001636 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800160c:	f7ff fc1c 	bl	8000e48 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001612:	e009      	b.n	8001628 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001614:	f7ff fc18 	bl	8000e48 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001622:	d901      	bls.n	8001628 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e007      	b.n	8001638 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001628:	4b05      	ldr	r3, [pc, #20]	@ (8001640 <HAL_PWREx_ConfigSupply+0xb0>)
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001630:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001634:	d1ee      	bne.n	8001614 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	58024800 	.word	0x58024800

08001644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b08c      	sub	sp, #48	@ 0x30
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d102      	bne.n	8001658 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	f000 bc48 	b.w	8001ee8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0301 	and.w	r3, r3, #1
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 8088 	beq.w	8001776 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	4b99      	ldr	r3, [pc, #612]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800166e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001670:	4b96      	ldr	r3, [pc, #600]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001674:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001678:	2b10      	cmp	r3, #16
 800167a:	d007      	beq.n	800168c <HAL_RCC_OscConfig+0x48>
 800167c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800167e:	2b18      	cmp	r3, #24
 8001680:	d111      	bne.n	80016a6 <HAL_RCC_OscConfig+0x62>
 8001682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001684:	f003 0303 	and.w	r3, r3, #3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d10c      	bne.n	80016a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800168c:	4b8f      	ldr	r3, [pc, #572]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d06d      	beq.n	8001774 <HAL_RCC_OscConfig+0x130>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d169      	bne.n	8001774 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	f000 bc21 	b.w	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ae:	d106      	bne.n	80016be <HAL_RCC_OscConfig+0x7a>
 80016b0:	4b86      	ldr	r3, [pc, #536]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a85      	ldr	r2, [pc, #532]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e02e      	b.n	800171c <HAL_RCC_OscConfig+0xd8>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x9c>
 80016c6:	4b81      	ldr	r3, [pc, #516]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a80      	ldr	r2, [pc, #512]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b7e      	ldr	r3, [pc, #504]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a7d      	ldr	r2, [pc, #500]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	e01d      	b.n	800171c <HAL_RCC_OscConfig+0xd8>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016e8:	d10c      	bne.n	8001704 <HAL_RCC_OscConfig+0xc0>
 80016ea:	4b78      	ldr	r3, [pc, #480]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a77      	ldr	r2, [pc, #476]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b75      	ldr	r3, [pc, #468]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a74      	ldr	r2, [pc, #464]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80016fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001700:	6013      	str	r3, [r2, #0]
 8001702:	e00b      	b.n	800171c <HAL_RCC_OscConfig+0xd8>
 8001704:	4b71      	ldr	r3, [pc, #452]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a70      	ldr	r2, [pc, #448]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 800170a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800170e:	6013      	str	r3, [r2, #0]
 8001710:	4b6e      	ldr	r3, [pc, #440]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a6d      	ldr	r2, [pc, #436]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d013      	beq.n	800174c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001724:	f7ff fb90 	bl	8000e48 <HAL_GetTick>
 8001728:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800172c:	f7ff fb8c 	bl	8000e48 <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b64      	cmp	r3, #100	@ 0x64
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e3d4      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173e:	4b63      	ldr	r3, [pc, #396]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0xe8>
 800174a:	e014      	b.n	8001776 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fb7c 	bl	8000e48 <HAL_GetTick>
 8001750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fb78 	bl	8000e48 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	@ 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e3c0      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001766:	4b59      	ldr	r3, [pc, #356]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f0      	bne.n	8001754 <HAL_RCC_OscConfig+0x110>
 8001772:	e000      	b.n	8001776 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	f000 80ca 	beq.w	8001918 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001784:	4b51      	ldr	r3, [pc, #324]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800178c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800178e:	4b4f      	ldr	r3, [pc, #316]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001790:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001792:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d007      	beq.n	80017aa <HAL_RCC_OscConfig+0x166>
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2b18      	cmp	r3, #24
 800179e:	d156      	bne.n	800184e <HAL_RCC_OscConfig+0x20a>
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d151      	bne.n	800184e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017aa:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d005      	beq.n	80017c2 <HAL_RCC_OscConfig+0x17e>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	68db      	ldr	r3, [r3, #12]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d101      	bne.n	80017c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e392      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80017c2:	4b42      	ldr	r3, [pc, #264]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f023 0219 	bic.w	r2, r3, #25
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	493f      	ldr	r1, [pc, #252]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80017d0:	4313      	orrs	r3, r2
 80017d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff fb38 	bl	8000e48 <HAL_GetTick>
 80017d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff fb34 	bl	8000e48 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e37c      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017ee:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d0f0      	beq.n	80017dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017fa:	f7ff fb31 	bl	8000e60 <HAL_GetREVID>
 80017fe:	4603      	mov	r3, r0
 8001800:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001804:	4293      	cmp	r3, r2
 8001806:	d817      	bhi.n	8001838 <HAL_RCC_OscConfig+0x1f4>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	2b40      	cmp	r3, #64	@ 0x40
 800180e:	d108      	bne.n	8001822 <HAL_RCC_OscConfig+0x1de>
 8001810:	4b2e      	ldr	r3, [pc, #184]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001818:	4a2c      	ldr	r2, [pc, #176]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 800181a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800181e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001820:	e07a      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001822:	4b2a      	ldr	r3, [pc, #168]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	031b      	lsls	r3, r3, #12
 8001830:	4926      	ldr	r1, [pc, #152]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001836:	e06f      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001838:	4b24      	ldr	r3, [pc, #144]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	691b      	ldr	r3, [r3, #16]
 8001844:	061b      	lsls	r3, r3, #24
 8001846:	4921      	ldr	r1, [pc, #132]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001848:	4313      	orrs	r3, r2
 800184a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800184c:	e064      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d047      	beq.n	80018e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001856:	4b1d      	ldr	r3, [pc, #116]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f023 0219 	bic.w	r2, r3, #25
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	491a      	ldr	r1, [pc, #104]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001864:	4313      	orrs	r3, r2
 8001866:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff faee 	bl	8000e48 <HAL_GetTick>
 800186c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001870:	f7ff faea 	bl	8000e48 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e332      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001882:	4b12      	ldr	r3, [pc, #72]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f0      	beq.n	8001870 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188e:	f7ff fae7 	bl	8000e60 <HAL_GetREVID>
 8001892:	4603      	mov	r3, r0
 8001894:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001898:	4293      	cmp	r3, r2
 800189a:	d819      	bhi.n	80018d0 <HAL_RCC_OscConfig+0x28c>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b40      	cmp	r3, #64	@ 0x40
 80018a2:	d108      	bne.n	80018b6 <HAL_RCC_OscConfig+0x272>
 80018a4:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80018ac:	4a07      	ldr	r2, [pc, #28]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80018ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b2:	6053      	str	r3, [r2, #4]
 80018b4:	e030      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
 80018b6:	4b05      	ldr	r3, [pc, #20]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	031b      	lsls	r3, r3, #12
 80018c4:	4901      	ldr	r1, [pc, #4]	@ (80018cc <HAL_RCC_OscConfig+0x288>)
 80018c6:	4313      	orrs	r3, r2
 80018c8:	604b      	str	r3, [r1, #4]
 80018ca:	e025      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
 80018cc:	58024400 	.word	0x58024400
 80018d0:	4b9a      	ldr	r3, [pc, #616]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	061b      	lsls	r3, r3, #24
 80018de:	4997      	ldr	r1, [pc, #604]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	604b      	str	r3, [r1, #4]
 80018e4:	e018      	b.n	8001918 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e6:	4b95      	ldr	r3, [pc, #596]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	4a94      	ldr	r2, [pc, #592]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80018ec:	f023 0301 	bic.w	r3, r3, #1
 80018f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f2:	f7ff faa9 	bl	8000e48 <HAL_GetTick>
 80018f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fa:	f7ff faa5 	bl	8000e48 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e2ed      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800190c:	4b8b      	ldr	r3, [pc, #556]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0304 	and.w	r3, r3, #4
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1f0      	bne.n	80018fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80a9 	beq.w	8001a78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001926:	4b85      	ldr	r3, [pc, #532]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800192e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001930:	4b82      	ldr	r3, [pc, #520]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001934:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001936:	69bb      	ldr	r3, [r7, #24]
 8001938:	2b08      	cmp	r3, #8
 800193a:	d007      	beq.n	800194c <HAL_RCC_OscConfig+0x308>
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b18      	cmp	r3, #24
 8001940:	d13a      	bne.n	80019b8 <HAL_RCC_OscConfig+0x374>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	f003 0303 	and.w	r3, r3, #3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d135      	bne.n	80019b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800194c:	4b7b      	ldr	r3, [pc, #492]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d005      	beq.n	8001964 <HAL_RCC_OscConfig+0x320>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69db      	ldr	r3, [r3, #28]
 800195c:	2b80      	cmp	r3, #128	@ 0x80
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e2c1      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001964:	f7ff fa7c 	bl	8000e60 <HAL_GetREVID>
 8001968:	4603      	mov	r3, r0
 800196a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800196e:	4293      	cmp	r3, r2
 8001970:	d817      	bhi.n	80019a2 <HAL_RCC_OscConfig+0x35e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	2b20      	cmp	r3, #32
 8001978:	d108      	bne.n	800198c <HAL_RCC_OscConfig+0x348>
 800197a:	4b70      	ldr	r3, [pc, #448]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001982:	4a6e      	ldr	r2, [pc, #440]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001984:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001988:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800198a:	e075      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800198c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	069b      	lsls	r3, r3, #26
 800199a:	4968      	ldr	r1, [pc, #416]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019a0:	e06a      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019a2:	4b66      	ldr	r3, [pc, #408]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019a4:	68db      	ldr	r3, [r3, #12]
 80019a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	061b      	lsls	r3, r3, #24
 80019b0:	4962      	ldr	r1, [pc, #392]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80019b6:	e05f      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	69db      	ldr	r3, [r3, #28]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d042      	beq.n	8001a46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80019c0:	4b5e      	ldr	r3, [pc, #376]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a5d      	ldr	r2, [pc, #372]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019cc:	f7ff fa3c 	bl	8000e48 <HAL_GetTick>
 80019d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80019d4:	f7ff fa38 	bl	8000e48 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e280      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019e6:	4b55      	ldr	r3, [pc, #340]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019f2:	f7ff fa35 	bl	8000e60 <HAL_GetREVID>
 80019f6:	4603      	mov	r3, r0
 80019f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d817      	bhi.n	8001a30 <HAL_RCC_OscConfig+0x3ec>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	2b20      	cmp	r3, #32
 8001a06:	d108      	bne.n	8001a1a <HAL_RCC_OscConfig+0x3d6>
 8001a08:	4b4c      	ldr	r3, [pc, #304]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001a10:	4a4a      	ldr	r2, [pc, #296]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001a16:	6053      	str	r3, [r2, #4]
 8001a18:	e02e      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
 8001a1a:	4b48      	ldr	r3, [pc, #288]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	069b      	lsls	r3, r3, #26
 8001a28:	4944      	ldr	r1, [pc, #272]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	604b      	str	r3, [r1, #4]
 8001a2e:	e023      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
 8001a30:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a1b      	ldr	r3, [r3, #32]
 8001a3c:	061b      	lsls	r3, r3, #24
 8001a3e:	493f      	ldr	r1, [pc, #252]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60cb      	str	r3, [r1, #12]
 8001a44:	e018      	b.n	8001a78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a46:	4b3d      	ldr	r3, [pc, #244]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a3c      	ldr	r2, [pc, #240]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a52:	f7ff f9f9 	bl	8000e48 <HAL_GetTick>
 8001a56:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a58:	e008      	b.n	8001a6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a5a:	f7ff f9f5 	bl	8000e48 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e23d      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a6c:	4b33      	ldr	r3, [pc, #204]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f0      	bne.n	8001a5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0308 	and.w	r3, r3, #8
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d036      	beq.n	8001af2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d019      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a8c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a90:	4a2a      	ldr	r2, [pc, #168]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a98:	f7ff f9d6 	bl	8000e48 <HAL_GetTick>
 8001a9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa0:	f7ff f9d2 	bl	8000e48 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e21a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ab2:	4b22      	ldr	r3, [pc, #136]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x45c>
 8001abe:	e018      	b.n	8001af2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ac0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001ac2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f9bc 	bl	8000e48 <HAL_GetTick>
 8001ad0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad4:	f7ff f9b8 	bl	8000e48 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e200      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001ae8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aea:	f003 0302 	and.w	r3, r3, #2
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0320 	and.w	r3, r3, #32
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d039      	beq.n	8001b72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	699b      	ldr	r3, [r3, #24]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d01c      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b06:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001b0c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b12:	f7ff f999 	bl	8000e48 <HAL_GetTick>
 8001b16:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1a:	f7ff f995 	bl	8000e48 <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e1dd      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001b2c:	4b03      	ldr	r3, [pc, #12]	@ (8001b3c <HAL_RCC_OscConfig+0x4f8>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x4d6>
 8001b38:	e01b      	b.n	8001b72 <HAL_RCC_OscConfig+0x52e>
 8001b3a:	bf00      	nop
 8001b3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b40:	4b9b      	ldr	r3, [pc, #620]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a9a      	ldr	r2, [pc, #616]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001b46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f97c 	bl	8000e48 <HAL_GetTick>
 8001b50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b54:	f7ff f978 	bl	8000e48 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1c0      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b66:	4b92      	ldr	r3, [pc, #584]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0304 	and.w	r3, r3, #4
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	f000 8081 	beq.w	8001c82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b80:	4b8c      	ldr	r3, [pc, #560]	@ (8001db4 <HAL_RCC_OscConfig+0x770>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a8b      	ldr	r2, [pc, #556]	@ (8001db4 <HAL_RCC_OscConfig+0x770>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b8c:	f7ff f95c 	bl	8000e48 <HAL_GetTick>
 8001b90:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b94:	f7ff f958 	bl	8000e48 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	@ 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e1a0      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ba6:	4b83      	ldr	r3, [pc, #524]	@ (8001db4 <HAL_RCC_OscConfig+0x770>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d0f0      	beq.n	8001b94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x584>
 8001bba:	4b7d      	ldr	r3, [pc, #500]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a7c      	ldr	r2, [pc, #496]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	e02d      	b.n	8001c24 <HAL_RCC_OscConfig+0x5e0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d10c      	bne.n	8001bea <HAL_RCC_OscConfig+0x5a6>
 8001bd0:	4b77      	ldr	r3, [pc, #476]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd4:	4a76      	ldr	r2, [pc, #472]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bdc:	4b74      	ldr	r3, [pc, #464]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be0:	4a73      	ldr	r2, [pc, #460]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x5e0>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x5c8>
 8001bf2:	4b6f      	ldr	r3, [pc, #444]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	4a6e      	ldr	r2, [pc, #440]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfe:	4b6c      	ldr	r3, [pc, #432]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	4a6b      	ldr	r2, [pc, #428]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0x5e0>
 8001c0c:	4b68      	ldr	r3, [pc, #416]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c10:	4a67      	ldr	r2, [pc, #412]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c18:	4b65      	ldr	r3, [pc, #404]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1c:	4a64      	ldr	r2, [pc, #400]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c1e:	f023 0304 	bic.w	r3, r3, #4
 8001c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d015      	beq.n	8001c58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7ff f90c 	bl	8000e48 <HAL_GetTick>
 8001c30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7ff f908 	bl	8000e48 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e14e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c4a:	4b59      	ldr	r3, [pc, #356]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ee      	beq.n	8001c34 <HAL_RCC_OscConfig+0x5f0>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c58:	f7ff f8f6 	bl	8000e48 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff f8f2 	bl	8000e48 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e138      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c76:	4b4e      	ldr	r3, [pc, #312]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ee      	bne.n	8001c60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 812d 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c8c:	4b48      	ldr	r3, [pc, #288]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001c8e:	691b      	ldr	r3, [r3, #16]
 8001c90:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c94:	2b18      	cmp	r3, #24
 8001c96:	f000 80bd 	beq.w	8001e14 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	f040 809e 	bne.w	8001de0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ca4:	4b42      	ldr	r3, [pc, #264]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a41      	ldr	r2, [pc, #260]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb0:	f7ff f8ca 	bl	8000e48 <HAL_GetTick>
 8001cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff f8c6 	bl	8000e48 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e10e      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cca:	4b39      	ldr	r3, [pc, #228]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cd6:	4b36      	ldr	r3, [pc, #216]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001cd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001cda:	4b37      	ldr	r3, [pc, #220]	@ (8001db8 <HAL_RCC_OscConfig+0x774>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001ce6:	0112      	lsls	r2, r2, #4
 8001ce8:	430a      	orrs	r2, r1
 8001cea:	4931      	ldr	r1, [pc, #196]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	628b      	str	r3, [r1, #40]	@ 0x28
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf4:	3b01      	subs	r3, #1
 8001cf6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	041b      	lsls	r3, r3, #16
 8001d0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	061b      	lsls	r3, r3, #24
 8001d1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001d20:	4923      	ldr	r1, [pc, #140]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001d26:	4b22      	ldr	r3, [pc, #136]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d2a:	4a21      	ldr	r2, [pc, #132]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d2c:	f023 0301 	bic.w	r3, r3, #1
 8001d30:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d32:	4b1f      	ldr	r3, [pc, #124]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d36:	4b21      	ldr	r3, [pc, #132]	@ (8001dbc <HAL_RCC_OscConfig+0x778>)
 8001d38:	4013      	ands	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d3e:	00d2      	lsls	r2, r2, #3
 8001d40:	491b      	ldr	r1, [pc, #108]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4a:	f023 020c 	bic.w	r2, r3, #12
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	4917      	ldr	r1, [pc, #92]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d58:	4b15      	ldr	r3, [pc, #84]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5c:	f023 0202 	bic.w	r2, r3, #2
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d64:	4912      	ldr	r1, [pc, #72]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d6a:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	4a10      	ldr	r2, [pc, #64]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d74:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d76:	4b0e      	ldr	r3, [pc, #56]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d82:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d86:	4a0a      	ldr	r2, [pc, #40]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d8e:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d92:	4a07      	ldr	r2, [pc, #28]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a04      	ldr	r2, [pc, #16]	@ (8001db0 <HAL_RCC_OscConfig+0x76c>)
 8001da0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7ff f84f 	bl	8000e48 <HAL_GetTick>
 8001daa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dac:	e011      	b.n	8001dd2 <HAL_RCC_OscConfig+0x78e>
 8001dae:	bf00      	nop
 8001db0:	58024400 	.word	0x58024400
 8001db4:	58024800 	.word	0x58024800
 8001db8:	fffffc0c 	.word	0xfffffc0c
 8001dbc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f842 	bl	8000e48 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e08a      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dd2:	4b47      	ldr	r3, [pc, #284]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x77c>
 8001dde:	e082      	b.n	8001ee6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001de0:	4b43      	ldr	r3, [pc, #268]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a42      	ldr	r2, [pc, #264]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001de6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff f82c 	bl	8000e48 <HAL_GetTick>
 8001df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff f828 	bl	8000e48 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e070      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e06:	4b3a      	ldr	r3, [pc, #232]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x7b0>
 8001e12:	e068      	b.n	8001ee6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001e14:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d031      	beq.n	8001e8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f003 0203 	and.w	r2, r3, #3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d12a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	429a      	cmp	r2, r3
 8001e44:	d122      	bne.n	8001e8c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e50:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d11a      	bne.n	8001e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	0a5b      	lsrs	r3, r3, #9
 8001e5a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e62:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d111      	bne.n	8001e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	0c1b      	lsrs	r3, r3, #16
 8001e6c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e74:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d108      	bne.n	8001e8c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	0e1b      	lsrs	r3, r3, #24
 8001e7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e86:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e02b      	b.n	8001ee8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e9a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d01f      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001ea6:	4b12      	ldr	r3, [pc, #72]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eaa:	4a11      	ldr	r2, [pc, #68]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eb2:	f7fe ffc9 	bl	8000e48 <HAL_GetTick>
 8001eb6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001eb8:	bf00      	nop
 8001eba:	f7fe ffc5 	bl	8000e48 <HAL_GetTick>
 8001ebe:	4602      	mov	r2, r0
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d0f9      	beq.n	8001eba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001ec8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_RCC_OscConfig+0x8b0>)
 8001ecc:	4013      	ands	r3, r2
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ed2:	00d2      	lsls	r2, r2, #3
 8001ed4:	4906      	ldr	r1, [pc, #24]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001eda:	4b05      	ldr	r3, [pc, #20]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ede:	4a04      	ldr	r2, [pc, #16]	@ (8001ef0 <HAL_RCC_OscConfig+0x8ac>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3730      	adds	r7, #48	@ 0x30
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	58024400 	.word	0x58024400
 8001ef4:	ffff0007 	.word	0xffff0007

08001ef8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e19c      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f0c:	4b8a      	ldr	r3, [pc, #552]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 030f 	and.w	r3, r3, #15
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d910      	bls.n	8001f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1a:	4b87      	ldr	r3, [pc, #540]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f023 020f 	bic.w	r2, r3, #15
 8001f22:	4985      	ldr	r1, [pc, #532]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2a:	4b83      	ldr	r3, [pc, #524]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 030f 	and.w	r3, r3, #15
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d001      	beq.n	8001f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e184      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	4b7b      	ldr	r3, [pc, #492]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f4e:	699b      	ldr	r3, [r3, #24]
 8001f50:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d908      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f58:	4b78      	ldr	r3, [pc, #480]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	4975      	ldr	r1, [pc, #468]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d010      	beq.n	8001f98 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	695a      	ldr	r2, [r3, #20]
 8001f7a:	4b70      	ldr	r3, [pc, #448]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f7c:	69db      	ldr	r3, [r3, #28]
 8001f7e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d908      	bls.n	8001f98 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f86:	4b6d      	ldr	r3, [pc, #436]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f88:	69db      	ldr	r3, [r3, #28]
 8001f8a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	496a      	ldr	r1, [pc, #424]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001f94:	4313      	orrs	r3, r2
 8001f96:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0310 	and.w	r3, r3, #16
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	699a      	ldr	r2, [r3, #24]
 8001fa8:	4b64      	ldr	r3, [pc, #400]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001faa:	69db      	ldr	r3, [r3, #28]
 8001fac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d908      	bls.n	8001fc6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001fb4:	4b61      	ldr	r3, [pc, #388]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	495e      	ldr	r1, [pc, #376]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d010      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	4b59      	ldr	r3, [pc, #356]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d908      	bls.n	8001ff4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001fe2:	4b56      	ldr	r3, [pc, #344]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4953      	ldr	r1, [pc, #332]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d010      	beq.n	8002022 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b4d      	ldr	r3, [pc, #308]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002006:	699b      	ldr	r3, [r3, #24]
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	429a      	cmp	r2, r3
 800200e:	d908      	bls.n	8002022 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002010:	4b4a      	ldr	r3, [pc, #296]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f023 020f 	bic.w	r2, r3, #15
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	4947      	ldr	r1, [pc, #284]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800201e:	4313      	orrs	r3, r2
 8002020:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b00      	cmp	r3, #0
 800202c:	d055      	beq.n	80020da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800202e:	4b43      	ldr	r3, [pc, #268]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	4940      	ldr	r1, [pc, #256]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800203c:	4313      	orrs	r3, r2
 800203e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d107      	bne.n	8002058 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002048:	4b3c      	ldr	r3, [pc, #240]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d121      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e0f6      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d107      	bne.n	8002070 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002060:	4b36      	ldr	r3, [pc, #216]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d115      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0ea      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d107      	bne.n	8002088 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002078:	4b30      	ldr	r3, [pc, #192]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002080:	2b00      	cmp	r3, #0
 8002082:	d109      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e0de      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002088:	4b2c      	ldr	r3, [pc, #176]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0304 	and.w	r3, r3, #4
 8002090:	2b00      	cmp	r3, #0
 8002092:	d101      	bne.n	8002098 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0d6      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002098:	4b28      	ldr	r3, [pc, #160]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f023 0207 	bic.w	r2, r3, #7
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	4925      	ldr	r1, [pc, #148]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020aa:	f7fe fecd 	bl	8000e48 <HAL_GetTick>
 80020ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b0:	e00a      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b2:	f7fe fec9 	bl	8000e48 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e0be      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c8:	4b1c      	ldr	r3, [pc, #112]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020ca:	691b      	ldr	r3, [r3, #16]
 80020cc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d1eb      	bne.n	80020b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0302 	and.w	r3, r3, #2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68da      	ldr	r2, [r3, #12]
 80020ea:	4b14      	ldr	r3, [pc, #80]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d208      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	f023 020f 	bic.w	r2, r3, #15
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	490e      	ldr	r1, [pc, #56]	@ (800213c <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002108:	4b0b      	ldr	r3, [pc, #44]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 030f 	and.w	r3, r3, #15
 8002110:	683a      	ldr	r2, [r7, #0]
 8002112:	429a      	cmp	r2, r3
 8002114:	d214      	bcs.n	8002140 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002116:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 020f 	bic.w	r2, r3, #15
 800211e:	4906      	ldr	r1, [pc, #24]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	4313      	orrs	r3, r2
 8002124:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002126:	4b04      	ldr	r3, [pc, #16]	@ (8002138 <HAL_RCC_ClockConfig+0x240>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	683a      	ldr	r2, [r7, #0]
 8002130:	429a      	cmp	r2, r3
 8002132:	d005      	beq.n	8002140 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e086      	b.n	8002246 <HAL_RCC_ClockConfig+0x34e>
 8002138:	52002000 	.word	0x52002000
 800213c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f003 0304 	and.w	r3, r3, #4
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691a      	ldr	r2, [r3, #16]
 8002150:	4b3f      	ldr	r3, [pc, #252]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002158:	429a      	cmp	r2, r3
 800215a:	d208      	bcs.n	800216e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800215c:	4b3c      	ldr	r3, [pc, #240]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 800215e:	699b      	ldr	r3, [r3, #24]
 8002160:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	4939      	ldr	r1, [pc, #228]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 800216a:	4313      	orrs	r3, r2
 800216c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d010      	beq.n	800219c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	695a      	ldr	r2, [r3, #20]
 800217e:	4b34      	ldr	r3, [pc, #208]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002186:	429a      	cmp	r2, r3
 8002188:	d208      	bcs.n	800219c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800218a:	4b31      	ldr	r3, [pc, #196]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	695b      	ldr	r3, [r3, #20]
 8002196:	492e      	ldr	r1, [pc, #184]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 8002198:	4313      	orrs	r3, r2
 800219a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d010      	beq.n	80021ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	4b28      	ldr	r3, [pc, #160]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021ae:	69db      	ldr	r3, [r3, #28]
 80021b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d208      	bcs.n	80021ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80021b8:	4b25      	ldr	r3, [pc, #148]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021ba:	69db      	ldr	r3, [r3, #28]
 80021bc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4922      	ldr	r1, [pc, #136]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0320 	and.w	r3, r3, #32
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d010      	beq.n	80021f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69da      	ldr	r2, [r3, #28]
 80021da:	4b1d      	ldr	r3, [pc, #116]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d208      	bcs.n	80021f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021e6:	4b1a      	ldr	r3, [pc, #104]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	4917      	ldr	r1, [pc, #92]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 80021f4:	4313      	orrs	r3, r2
 80021f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f8:	f000 f834 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b14      	ldr	r3, [pc, #80]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4912      	ldr	r1, [pc, #72]	@ (8002254 <HAL_RCC_ClockConfig+0x35c>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_RCC_ClockConfig+0x358>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0d      	ldr	r2, [pc, #52]	@ (8002254 <HAL_RCC_ClockConfig+0x35c>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	4a0a      	ldr	r2, [pc, #40]	@ (8002258 <HAL_RCC_ClockConfig+0x360>)
 800222e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002230:	4a0a      	ldr	r2, [pc, #40]	@ (800225c <HAL_RCC_ClockConfig+0x364>)
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002236:	4b0a      	ldr	r3, [pc, #40]	@ (8002260 <HAL_RCC_ClockConfig+0x368>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe fdba 	bl	8000db4 <HAL_InitTick>
 8002240:	4603      	mov	r3, r0
 8002242:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002244:	7bfb      	ldrb	r3, [r7, #15]
}
 8002246:	4618      	mov	r0, r3
 8002248:	3718      	adds	r7, #24
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	58024400 	.word	0x58024400
 8002254:	08003bc0 	.word	0x08003bc0
 8002258:	24000004 	.word	0x24000004
 800225c:	24000000 	.word	0x24000000
 8002260:	24000024 	.word	0x24000024

08002264 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002264:	b480      	push	{r7}
 8002266:	b089      	sub	sp, #36	@ 0x24
 8002268:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800226a:	4bb3      	ldr	r3, [pc, #716]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002272:	2b18      	cmp	r3, #24
 8002274:	f200 8155 	bhi.w	8002522 <HAL_RCC_GetSysClockFreq+0x2be>
 8002278:	a201      	add	r2, pc, #4	@ (adr r2, 8002280 <HAL_RCC_GetSysClockFreq+0x1c>)
 800227a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800227e:	bf00      	nop
 8002280:	080022e5 	.word	0x080022e5
 8002284:	08002523 	.word	0x08002523
 8002288:	08002523 	.word	0x08002523
 800228c:	08002523 	.word	0x08002523
 8002290:	08002523 	.word	0x08002523
 8002294:	08002523 	.word	0x08002523
 8002298:	08002523 	.word	0x08002523
 800229c:	08002523 	.word	0x08002523
 80022a0:	0800230b 	.word	0x0800230b
 80022a4:	08002523 	.word	0x08002523
 80022a8:	08002523 	.word	0x08002523
 80022ac:	08002523 	.word	0x08002523
 80022b0:	08002523 	.word	0x08002523
 80022b4:	08002523 	.word	0x08002523
 80022b8:	08002523 	.word	0x08002523
 80022bc:	08002523 	.word	0x08002523
 80022c0:	08002311 	.word	0x08002311
 80022c4:	08002523 	.word	0x08002523
 80022c8:	08002523 	.word	0x08002523
 80022cc:	08002523 	.word	0x08002523
 80022d0:	08002523 	.word	0x08002523
 80022d4:	08002523 	.word	0x08002523
 80022d8:	08002523 	.word	0x08002523
 80022dc:	08002523 	.word	0x08002523
 80022e0:	08002317 	.word	0x08002317
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022e4:	4b94      	ldr	r3, [pc, #592]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0320 	and.w	r3, r3, #32
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d009      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022f0:	4b91      	ldr	r3, [pc, #580]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	08db      	lsrs	r3, r3, #3
 80022f6:	f003 0303 	and.w	r3, r3, #3
 80022fa:	4a90      	ldr	r2, [pc, #576]	@ (800253c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002300:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002302:	e111      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002304:	4b8d      	ldr	r3, [pc, #564]	@ (800253c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002306:	61bb      	str	r3, [r7, #24]
      break;
 8002308:	e10e      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800230a:	4b8d      	ldr	r3, [pc, #564]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800230c:	61bb      	str	r3, [r7, #24]
      break;
 800230e:	e10b      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002310:	4b8c      	ldr	r3, [pc, #560]	@ (8002544 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002312:	61bb      	str	r3, [r7, #24]
      break;
 8002314:	e108      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002316:	4b88      	ldr	r3, [pc, #544]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002320:	4b85      	ldr	r3, [pc, #532]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002322:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800232a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800232c:	4b82      	ldr	r3, [pc, #520]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800232e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002336:	4b80      	ldr	r3, [pc, #512]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800233a:	08db      	lsrs	r3, r3, #3
 800233c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	fb02 f303 	mul.w	r3, r2, r3
 8002346:	ee07 3a90 	vmov	s15, r3
 800234a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800234e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80e1 	beq.w	800251c <HAL_RCC_GetSysClockFreq+0x2b8>
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b02      	cmp	r3, #2
 800235e:	f000 8083 	beq.w	8002468 <HAL_RCC_GetSysClockFreq+0x204>
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2b02      	cmp	r3, #2
 8002366:	f200 80a1 	bhi.w	80024ac <HAL_RCC_GetSysClockFreq+0x248>
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_RCC_GetSysClockFreq+0x114>
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d056      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002376:	e099      	b.n	80024ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002378:	4b6f      	ldr	r3, [pc, #444]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d02d      	beq.n	80023e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002384:	4b6c      	ldr	r3, [pc, #432]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	08db      	lsrs	r3, r3, #3
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	4a6b      	ldr	r2, [pc, #428]	@ (800253c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
 8002394:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	ee07 3a90 	vmov	s15, r3
 800239c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	ee07 3a90 	vmov	s15, r3
 80023a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ae:	4b62      	ldr	r3, [pc, #392]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b6:	ee07 3a90 	vmov	s15, r3
 80023ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023be:	ed97 6a02 	vldr	s12, [r7, #8]
 80023c2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023de:	e087      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023ea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800254c <HAL_RCC_GetSysClockFreq+0x2e8>
 80023ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023f2:	4b51      	ldr	r3, [pc, #324]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002402:	ed97 6a02 	vldr	s12, [r7, #8]
 8002406:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800240a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800240e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800241a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800241e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002422:	e065      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	ee07 3a90 	vmov	s15, r3
 800242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800242e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002550 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002436:	4b40      	ldr	r3, [pc, #256]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800243e:	ee07 3a90 	vmov	s15, r3
 8002442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002446:	ed97 6a02 	vldr	s12, [r7, #8]
 800244a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2e4>
 800244e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800245a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800245e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002466:	e043      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002472:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002554 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800247a:	4b2f      	ldr	r3, [pc, #188]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800247e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002482:	ee07 3a90 	vmov	s15, r3
 8002486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800248a:	ed97 6a02 	vldr	s12, [r7, #8]
 800248e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800249a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800249e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024aa:	e021      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	ee07 3a90 	vmov	s15, r3
 80024b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024b6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002550 <HAL_RCC_GetSysClockFreq+0x2ec>
 80024ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024be:	4b1e      	ldr	r3, [pc, #120]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024c6:	ee07 3a90 	vmov	s15, r3
 80024ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002548 <HAL_RCC_GetSysClockFreq+0x2e4>
 80024d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024f0:	4b11      	ldr	r3, [pc, #68]	@ (8002538 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f4:	0a5b      	lsrs	r3, r3, #9
 80024f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024fa:	3301      	adds	r3, #1
 80024fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	ee07 3a90 	vmov	s15, r3
 8002504:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002508:	edd7 6a07 	vldr	s13, [r7, #28]
 800250c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002514:	ee17 3a90 	vmov	r3, s15
 8002518:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800251a:	e005      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800251c:	2300      	movs	r3, #0
 800251e:	61bb      	str	r3, [r7, #24]
      break;
 8002520:	e002      	b.n	8002528 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002522:	4b07      	ldr	r3, [pc, #28]	@ (8002540 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002524:	61bb      	str	r3, [r7, #24]
      break;
 8002526:	bf00      	nop
  }

  return sysclockfreq;
 8002528:	69bb      	ldr	r3, [r7, #24]
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	@ 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
 800253c:	03d09000 	.word	0x03d09000
 8002540:	003d0900 	.word	0x003d0900
 8002544:	017d7840 	.word	0x017d7840
 8002548:	46000000 	.word	0x46000000
 800254c:	4c742400 	.word	0x4c742400
 8002550:	4a742400 	.word	0x4a742400
 8002554:	4bbebc20 	.word	0x4bbebc20

08002558 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800255e:	f7ff fe81 	bl	8002264 <HAL_RCC_GetSysClockFreq>
 8002562:	4602      	mov	r2, r0
 8002564:	4b10      	ldr	r3, [pc, #64]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	490f      	ldr	r1, [pc, #60]	@ (80025ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002570:	5ccb      	ldrb	r3, [r1, r3]
 8002572:	f003 031f 	and.w	r3, r3, #31
 8002576:	fa22 f303 	lsr.w	r3, r2, r3
 800257a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800257c:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	4a09      	ldr	r2, [pc, #36]	@ (80025ac <HAL_RCC_GetHCLKFreq+0x54>)
 8002586:	5cd3      	ldrb	r3, [r2, r3]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	fa22 f303 	lsr.w	r3, r2, r3
 8002592:	4a07      	ldr	r2, [pc, #28]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002594:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002596:	4a07      	ldr	r2, [pc, #28]	@ (80025b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	58024400 	.word	0x58024400
 80025ac:	08003bc0 	.word	0x08003bc0
 80025b0:	24000004 	.word	0x24000004
 80025b4:	24000000 	.word	0x24000000

080025b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80025bc:	f7ff ffcc 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	091b      	lsrs	r3, r3, #4
 80025c8:	f003 0307 	and.w	r3, r3, #7
 80025cc:	4904      	ldr	r1, [pc, #16]	@ (80025e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025ce:	5ccb      	ldrb	r3, [r1, r3]
 80025d0:	f003 031f 	and.w	r3, r3, #31
 80025d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	58024400 	.word	0x58024400
 80025e0:	08003bc0 	.word	0x08003bc0

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025e8:	f7ff ffb6 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 80025ec:	4602      	mov	r2, r0
 80025ee:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4904      	ldr	r1, [pc, #16]	@ (800260c <HAL_RCC_GetPCLK2Freq+0x28>)
 80025fa:	5ccb      	ldrb	r3, [r1, r3]
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	58024400 	.word	0x58024400
 800260c:	08003bc0 	.word	0x08003bc0

08002610 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002614:	f7ff ffa0 	bl	8002558 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	091b      	lsrs	r3, r3, #4
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4904      	ldr	r1, [pc, #16]	@ (8002638 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	58024400 	.word	0x58024400
 8002638:	08003bc0 	.word	0x08003bc0

0800263c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	@ 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002644:	4ba1      	ldr	r3, [pc, #644]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002646:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002648:	f003 0303 	and.w	r3, r3, #3
 800264c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800264e:	4b9f      	ldr	r3, [pc, #636]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002650:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002652:	0b1b      	lsrs	r3, r3, #12
 8002654:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002658:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800265a:	4b9c      	ldr	r3, [pc, #624]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800265c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265e:	091b      	lsrs	r3, r3, #4
 8002660:	f003 0301 	and.w	r3, r3, #1
 8002664:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002666:	4b99      	ldr	r3, [pc, #612]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002668:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800266a:	08db      	lsrs	r3, r3, #3
 800266c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002670:	693a      	ldr	r2, [r7, #16]
 8002672:	fb02 f303 	mul.w	r3, r2, r3
 8002676:	ee07 3a90 	vmov	s15, r3
 800267a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800267e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 8111 	beq.w	80028ac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	2b02      	cmp	r3, #2
 800268e:	f000 8083 	beq.w	8002798 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b02      	cmp	r3, #2
 8002696:	f200 80a1 	bhi.w	80027dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d056      	beq.n	8002754 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80026a6:	e099      	b.n	80027dc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a8:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d02d      	beq.n	8002710 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026b4:	4b85      	ldr	r3, [pc, #532]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	08db      	lsrs	r3, r3, #3
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	4a84      	ldr	r2, [pc, #528]	@ (80028d0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
 80026c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	ee07 3a90 	vmov	s15, r3
 80026cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	ee07 3a90 	vmov	s15, r3
 80026d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026de:	4b7b      	ldr	r3, [pc, #492]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80026e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e6:	ee07 3a90 	vmov	s15, r3
 80026ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80026f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80026f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002702:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002706:	ee67 7a27 	vmul.f32	s15, s14, s15
 800270a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800270e:	e087      	b.n	8002820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800271a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80028d8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800271e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002722:	4b6a      	ldr	r3, [pc, #424]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002726:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272a:	ee07 3a90 	vmov	s15, r3
 800272e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002732:	ed97 6a03 	vldr	s12, [r7, #12]
 8002736:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800273a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002742:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002746:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800274a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002752:	e065      	b.n	8002820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	ee07 3a90 	vmov	s15, r3
 800275a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80028dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002762:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002766:	4b59      	ldr	r3, [pc, #356]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002776:	ed97 6a03 	vldr	s12, [r7, #12]
 800277a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800277e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002782:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002786:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800278a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002792:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002796:	e043      	b.n	8002820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	ee07 3a90 	vmov	s15, r3
 800279e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027a2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80028e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80027a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027aa:	4b48      	ldr	r3, [pc, #288]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027b2:	ee07 3a90 	vmov	s15, r3
 80027b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80027be:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80027c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80027da:	e021      	b.n	8002820 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	ee07 3a90 	vmov	s15, r3
 80027e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027e6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80028dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80027ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027ee:	4b37      	ldr	r3, [pc, #220]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80027f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027f6:	ee07 3a90 	vmov	s15, r3
 80027fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002802:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80028d4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800280a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800280e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800281e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002820:	4b2a      	ldr	r3, [pc, #168]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002822:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002824:	0a5b      	lsrs	r3, r3, #9
 8002826:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800282a:	ee07 3a90 	vmov	s15, r3
 800282e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002832:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800283a:	edd7 6a07 	vldr	s13, [r7, #28]
 800283e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002846:	ee17 2a90 	vmov	r2, s15
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002852:	0c1b      	lsrs	r3, r3, #16
 8002854:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002858:	ee07 3a90 	vmov	s15, r3
 800285c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002860:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002864:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002868:	edd7 6a07 	vldr	s13, [r7, #28]
 800286c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002874:	ee17 2a90 	vmov	r2, s15
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800287c:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800287e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002880:	0e1b      	lsrs	r3, r3, #24
 8002882:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002886:	ee07 3a90 	vmov	s15, r3
 800288a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800288e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002892:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002896:	edd7 6a07 	vldr	s13, [r7, #28]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028a2:	ee17 2a90 	vmov	r2, s15
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80028aa:	e008      	b.n	80028be <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	609a      	str	r2, [r3, #8]
}
 80028be:	bf00      	nop
 80028c0:	3724      	adds	r7, #36	@ 0x24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	58024400 	.word	0x58024400
 80028d0:	03d09000 	.word	0x03d09000
 80028d4:	46000000 	.word	0x46000000
 80028d8:	4c742400 	.word	0x4c742400
 80028dc:	4a742400 	.word	0x4a742400
 80028e0:	4bbebc20 	.word	0x4bbebc20

080028e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	@ 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028ec:	4ba1      	ldr	r3, [pc, #644]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	f003 0303 	and.w	r3, r3, #3
 80028f4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80028f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80028f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028fa:	0d1b      	lsrs	r3, r3, #20
 80028fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002900:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002902:	4b9c      	ldr	r3, [pc, #624]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002906:	0a1b      	lsrs	r3, r3, #8
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800290e:	4b99      	ldr	r3, [pc, #612]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002912:	08db      	lsrs	r3, r3, #3
 8002914:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	fb02 f303 	mul.w	r3, r2, r3
 800291e:	ee07 3a90 	vmov	s15, r3
 8002922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002926:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	2b00      	cmp	r3, #0
 800292e:	f000 8111 	beq.w	8002b54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b02      	cmp	r3, #2
 8002936:	f000 8083 	beq.w	8002a40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	2b02      	cmp	r3, #2
 800293e:	f200 80a1 	bhi.w	8002a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002948:	69bb      	ldr	r3, [r7, #24]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d056      	beq.n	80029fc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800294e:	e099      	b.n	8002a84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002950:	4b88      	ldr	r3, [pc, #544]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0320 	and.w	r3, r3, #32
 8002958:	2b00      	cmp	r3, #0
 800295a:	d02d      	beq.n	80029b8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800295c:	4b85      	ldr	r3, [pc, #532]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	08db      	lsrs	r3, r3, #3
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	4a84      	ldr	r2, [pc, #528]	@ (8002b78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002968:	fa22 f303 	lsr.w	r3, r2, r3
 800296c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002986:	4b7b      	ldr	r3, [pc, #492]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298e:	ee07 3a90 	vmov	s15, r3
 8002992:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002996:	ed97 6a03 	vldr	s12, [r7, #12]
 800299a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800299e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80029b6:	e087      	b.n	8002ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	ee07 3a90 	vmov	s15, r3
 80029be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029c2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002b80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80029c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80029cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029d2:	ee07 3a90 	vmov	s15, r3
 80029d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029da:	ed97 6a03 	vldr	s12, [r7, #12]
 80029de:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80029e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029fa:	e065      	b.n	8002ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	ee07 3a90 	vmov	s15, r3
 8002a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002a0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0e:	4b59      	ldr	r3, [pc, #356]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a16:	ee07 3a90 	vmov	s15, r3
 8002a1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a3e:	e043      	b.n	8002ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	ee07 3a90 	vmov	s15, r3
 8002a46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002a4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a52:	4b48      	ldr	r3, [pc, #288]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a5a:	ee07 3a90 	vmov	s15, r3
 8002a5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a62:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002a6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a82:	e021      	b.n	8002ac8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	ee07 3a90 	vmov	s15, r3
 8002a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a96:	4b37      	ldr	r3, [pc, #220]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9e:	ee07 3a90 	vmov	s15, r3
 8002aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002b7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ac6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002ac8:	4b2a      	ldr	r3, [pc, #168]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002acc:	0a5b      	lsrs	r3, r3, #9
 8002ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ada:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ade:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ae2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aee:	ee17 2a90 	vmov	r2, s15
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002af6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	0c1b      	lsrs	r3, r3, #16
 8002afc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b00:	ee07 3a90 	vmov	s15, r3
 8002b04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b10:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b1c:	ee17 2a90 	vmov	r2, s15
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002b24:	4b13      	ldr	r3, [pc, #76]	@ (8002b74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	0e1b      	lsrs	r3, r3, #24
 8002b2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b2e:	ee07 3a90 	vmov	s15, r3
 8002b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4a:	ee17 2a90 	vmov	r2, s15
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002b52:	e008      	b.n	8002b66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	609a      	str	r2, [r3, #8]
}
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	58024400 	.word	0x58024400
 8002b78:	03d09000 	.word	0x03d09000
 8002b7c:	46000000 	.word	0x46000000
 8002b80:	4c742400 	.word	0x4c742400
 8002b84:	4a742400 	.word	0x4a742400
 8002b88:	4bbebc20 	.word	0x4bbebc20

08002b8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d101      	bne.n	8002b9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e042      	b.n	8002c24 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d106      	bne.n	8002bb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f83b 	bl	8002c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2224      	movs	r2, #36	@ 0x24
 8002bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f022 0201 	bic.w	r2, r2, #1
 8002bcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d002      	beq.n	8002bdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fd9a 	bl	8003710 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f000 f82f 	bl	8002c40 <UART_SetConfig>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e01b      	b.n	8002c24 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	685a      	ldr	r2, [r3, #4]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 0201 	orr.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fe19 	bl	8003854 <UART_CheckIdleState>
 8002c22:	4603      	mov	r3, r0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c44:	b092      	sub	sp, #72	@ 0x48
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	69db      	ldr	r3, [r3, #28]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4bbe      	ldr	r3, [pc, #760]	@ (8002f68 <UART_SetConfig+0x328>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	6812      	ldr	r2, [r2, #0]
 8002c76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002c78:	430b      	orrs	r3, r1
 8002c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	699b      	ldr	r3, [r3, #24]
 8002c96:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4ab3      	ldr	r2, [pc, #716]	@ (8002f6c <UART_SetConfig+0x32c>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d004      	beq.n	8002cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	6a1b      	ldr	r3, [r3, #32]
 8002ca6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	689a      	ldr	r2, [r3, #8]
 8002cb2:	4baf      	ldr	r3, [pc, #700]	@ (8002f70 <UART_SetConfig+0x330>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	f023 010f 	bic.w	r1, r3, #15
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4aa6      	ldr	r2, [pc, #664]	@ (8002f74 <UART_SetConfig+0x334>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d177      	bne.n	8002dd0 <UART_SetConfig+0x190>
 8002ce0:	4ba5      	ldr	r3, [pc, #660]	@ (8002f78 <UART_SetConfig+0x338>)
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce8:	2b28      	cmp	r3, #40	@ 0x28
 8002cea:	d86d      	bhi.n	8002dc8 <UART_SetConfig+0x188>
 8002cec:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf4 <UART_SetConfig+0xb4>)
 8002cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf2:	bf00      	nop
 8002cf4:	08002d99 	.word	0x08002d99
 8002cf8:	08002dc9 	.word	0x08002dc9
 8002cfc:	08002dc9 	.word	0x08002dc9
 8002d00:	08002dc9 	.word	0x08002dc9
 8002d04:	08002dc9 	.word	0x08002dc9
 8002d08:	08002dc9 	.word	0x08002dc9
 8002d0c:	08002dc9 	.word	0x08002dc9
 8002d10:	08002dc9 	.word	0x08002dc9
 8002d14:	08002da1 	.word	0x08002da1
 8002d18:	08002dc9 	.word	0x08002dc9
 8002d1c:	08002dc9 	.word	0x08002dc9
 8002d20:	08002dc9 	.word	0x08002dc9
 8002d24:	08002dc9 	.word	0x08002dc9
 8002d28:	08002dc9 	.word	0x08002dc9
 8002d2c:	08002dc9 	.word	0x08002dc9
 8002d30:	08002dc9 	.word	0x08002dc9
 8002d34:	08002da9 	.word	0x08002da9
 8002d38:	08002dc9 	.word	0x08002dc9
 8002d3c:	08002dc9 	.word	0x08002dc9
 8002d40:	08002dc9 	.word	0x08002dc9
 8002d44:	08002dc9 	.word	0x08002dc9
 8002d48:	08002dc9 	.word	0x08002dc9
 8002d4c:	08002dc9 	.word	0x08002dc9
 8002d50:	08002dc9 	.word	0x08002dc9
 8002d54:	08002db1 	.word	0x08002db1
 8002d58:	08002dc9 	.word	0x08002dc9
 8002d5c:	08002dc9 	.word	0x08002dc9
 8002d60:	08002dc9 	.word	0x08002dc9
 8002d64:	08002dc9 	.word	0x08002dc9
 8002d68:	08002dc9 	.word	0x08002dc9
 8002d6c:	08002dc9 	.word	0x08002dc9
 8002d70:	08002dc9 	.word	0x08002dc9
 8002d74:	08002db9 	.word	0x08002db9
 8002d78:	08002dc9 	.word	0x08002dc9
 8002d7c:	08002dc9 	.word	0x08002dc9
 8002d80:	08002dc9 	.word	0x08002dc9
 8002d84:	08002dc9 	.word	0x08002dc9
 8002d88:	08002dc9 	.word	0x08002dc9
 8002d8c:	08002dc9 	.word	0x08002dc9
 8002d90:	08002dc9 	.word	0x08002dc9
 8002d94:	08002dc1 	.word	0x08002dc1
 8002d98:	2301      	movs	r3, #1
 8002d9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002d9e:	e222      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002da0:	2304      	movs	r3, #4
 8002da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002da6:	e21e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002da8:	2308      	movs	r3, #8
 8002daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dae:	e21a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002db0:	2310      	movs	r3, #16
 8002db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002db6:	e216      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002db8:	2320      	movs	r3, #32
 8002dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dbe:	e212      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002dc0:	2340      	movs	r3, #64	@ 0x40
 8002dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dc6:	e20e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002dc8:	2380      	movs	r3, #128	@ 0x80
 8002dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002dce:	e20a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a69      	ldr	r2, [pc, #420]	@ (8002f7c <UART_SetConfig+0x33c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d130      	bne.n	8002e3c <UART_SetConfig+0x1fc>
 8002dda:	4b67      	ldr	r3, [pc, #412]	@ (8002f78 <UART_SetConfig+0x338>)
 8002ddc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	2b05      	cmp	r3, #5
 8002de4:	d826      	bhi.n	8002e34 <UART_SetConfig+0x1f4>
 8002de6:	a201      	add	r2, pc, #4	@ (adr r2, 8002dec <UART_SetConfig+0x1ac>)
 8002de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dec:	08002e05 	.word	0x08002e05
 8002df0:	08002e0d 	.word	0x08002e0d
 8002df4:	08002e15 	.word	0x08002e15
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e25 	.word	0x08002e25
 8002e00:	08002e2d 	.word	0x08002e2d
 8002e04:	2300      	movs	r3, #0
 8002e06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e0a:	e1ec      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e0c:	2304      	movs	r3, #4
 8002e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e12:	e1e8      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e14:	2308      	movs	r3, #8
 8002e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e1a:	e1e4      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e22:	e1e0      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e24:	2320      	movs	r3, #32
 8002e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e2a:	e1dc      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e2c:	2340      	movs	r3, #64	@ 0x40
 8002e2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e32:	e1d8      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e34:	2380      	movs	r3, #128	@ 0x80
 8002e36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e3a:	e1d4      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a4f      	ldr	r2, [pc, #316]	@ (8002f80 <UART_SetConfig+0x340>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d130      	bne.n	8002ea8 <UART_SetConfig+0x268>
 8002e46:	4b4c      	ldr	r3, [pc, #304]	@ (8002f78 <UART_SetConfig+0x338>)
 8002e48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	2b05      	cmp	r3, #5
 8002e50:	d826      	bhi.n	8002ea0 <UART_SetConfig+0x260>
 8002e52:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <UART_SetConfig+0x218>)
 8002e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e58:	08002e71 	.word	0x08002e71
 8002e5c:	08002e79 	.word	0x08002e79
 8002e60:	08002e81 	.word	0x08002e81
 8002e64:	08002e89 	.word	0x08002e89
 8002e68:	08002e91 	.word	0x08002e91
 8002e6c:	08002e99 	.word	0x08002e99
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e76:	e1b6      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e7e:	e1b2      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e80:	2308      	movs	r3, #8
 8002e82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e86:	e1ae      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e8e:	e1aa      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e90:	2320      	movs	r3, #32
 8002e92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e96:	e1a6      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002e98:	2340      	movs	r3, #64	@ 0x40
 8002e9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002e9e:	e1a2      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002ea0:	2380      	movs	r3, #128	@ 0x80
 8002ea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ea6:	e19e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a35      	ldr	r2, [pc, #212]	@ (8002f84 <UART_SetConfig+0x344>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d130      	bne.n	8002f14 <UART_SetConfig+0x2d4>
 8002eb2:	4b31      	ldr	r3, [pc, #196]	@ (8002f78 <UART_SetConfig+0x338>)
 8002eb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb6:	f003 0307 	and.w	r3, r3, #7
 8002eba:	2b05      	cmp	r3, #5
 8002ebc:	d826      	bhi.n	8002f0c <UART_SetConfig+0x2cc>
 8002ebe:	a201      	add	r2, pc, #4	@ (adr r2, 8002ec4 <UART_SetConfig+0x284>)
 8002ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec4:	08002edd 	.word	0x08002edd
 8002ec8:	08002ee5 	.word	0x08002ee5
 8002ecc:	08002eed 	.word	0x08002eed
 8002ed0:	08002ef5 	.word	0x08002ef5
 8002ed4:	08002efd 	.word	0x08002efd
 8002ed8:	08002f05 	.word	0x08002f05
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ee2:	e180      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002ee4:	2304      	movs	r3, #4
 8002ee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002eea:	e17c      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002eec:	2308      	movs	r3, #8
 8002eee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002ef2:	e178      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002ef4:	2310      	movs	r3, #16
 8002ef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002efa:	e174      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002efc:	2320      	movs	r3, #32
 8002efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f02:	e170      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f04:	2340      	movs	r3, #64	@ 0x40
 8002f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f0a:	e16c      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f0c:	2380      	movs	r3, #128	@ 0x80
 8002f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f12:	e168      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1b      	ldr	r2, [pc, #108]	@ (8002f88 <UART_SetConfig+0x348>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d142      	bne.n	8002fa4 <UART_SetConfig+0x364>
 8002f1e:	4b16      	ldr	r3, [pc, #88]	@ (8002f78 <UART_SetConfig+0x338>)
 8002f20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f22:	f003 0307 	and.w	r3, r3, #7
 8002f26:	2b05      	cmp	r3, #5
 8002f28:	d838      	bhi.n	8002f9c <UART_SetConfig+0x35c>
 8002f2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002f30 <UART_SetConfig+0x2f0>)
 8002f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f30:	08002f49 	.word	0x08002f49
 8002f34:	08002f51 	.word	0x08002f51
 8002f38:	08002f59 	.word	0x08002f59
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f8d 	.word	0x08002f8d
 8002f44:	08002f95 	.word	0x08002f95
 8002f48:	2300      	movs	r3, #0
 8002f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f4e:	e14a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f50:	2304      	movs	r3, #4
 8002f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f56:	e146      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f58:	2308      	movs	r3, #8
 8002f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f5e:	e142      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f60:	2310      	movs	r3, #16
 8002f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f66:	e13e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f68:	cfff69f3 	.word	0xcfff69f3
 8002f6c:	58000c00 	.word	0x58000c00
 8002f70:	11fff4ff 	.word	0x11fff4ff
 8002f74:	40011000 	.word	0x40011000
 8002f78:	58024400 	.word	0x58024400
 8002f7c:	40004400 	.word	0x40004400
 8002f80:	40004800 	.word	0x40004800
 8002f84:	40004c00 	.word	0x40004c00
 8002f88:	40005000 	.word	0x40005000
 8002f8c:	2320      	movs	r3, #32
 8002f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f92:	e128      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f94:	2340      	movs	r3, #64	@ 0x40
 8002f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002f9a:	e124      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002f9c:	2380      	movs	r3, #128	@ 0x80
 8002f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8002fa2:	e120      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4acb      	ldr	r2, [pc, #812]	@ (80032d8 <UART_SetConfig+0x698>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d176      	bne.n	800309c <UART_SetConfig+0x45c>
 8002fae:	4bcb      	ldr	r3, [pc, #812]	@ (80032dc <UART_SetConfig+0x69c>)
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fb2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002fb6:	2b28      	cmp	r3, #40	@ 0x28
 8002fb8:	d86c      	bhi.n	8003094 <UART_SetConfig+0x454>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <UART_SetConfig+0x380>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08003065 	.word	0x08003065
 8002fc4:	08003095 	.word	0x08003095
 8002fc8:	08003095 	.word	0x08003095
 8002fcc:	08003095 	.word	0x08003095
 8002fd0:	08003095 	.word	0x08003095
 8002fd4:	08003095 	.word	0x08003095
 8002fd8:	08003095 	.word	0x08003095
 8002fdc:	08003095 	.word	0x08003095
 8002fe0:	0800306d 	.word	0x0800306d
 8002fe4:	08003095 	.word	0x08003095
 8002fe8:	08003095 	.word	0x08003095
 8002fec:	08003095 	.word	0x08003095
 8002ff0:	08003095 	.word	0x08003095
 8002ff4:	08003095 	.word	0x08003095
 8002ff8:	08003095 	.word	0x08003095
 8002ffc:	08003095 	.word	0x08003095
 8003000:	08003075 	.word	0x08003075
 8003004:	08003095 	.word	0x08003095
 8003008:	08003095 	.word	0x08003095
 800300c:	08003095 	.word	0x08003095
 8003010:	08003095 	.word	0x08003095
 8003014:	08003095 	.word	0x08003095
 8003018:	08003095 	.word	0x08003095
 800301c:	08003095 	.word	0x08003095
 8003020:	0800307d 	.word	0x0800307d
 8003024:	08003095 	.word	0x08003095
 8003028:	08003095 	.word	0x08003095
 800302c:	08003095 	.word	0x08003095
 8003030:	08003095 	.word	0x08003095
 8003034:	08003095 	.word	0x08003095
 8003038:	08003095 	.word	0x08003095
 800303c:	08003095 	.word	0x08003095
 8003040:	08003085 	.word	0x08003085
 8003044:	08003095 	.word	0x08003095
 8003048:	08003095 	.word	0x08003095
 800304c:	08003095 	.word	0x08003095
 8003050:	08003095 	.word	0x08003095
 8003054:	08003095 	.word	0x08003095
 8003058:	08003095 	.word	0x08003095
 800305c:	08003095 	.word	0x08003095
 8003060:	0800308d 	.word	0x0800308d
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306a:	e0bc      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800306c:	2304      	movs	r3, #4
 800306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003072:	e0b8      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003074:	2308      	movs	r3, #8
 8003076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800307a:	e0b4      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800307c:	2310      	movs	r3, #16
 800307e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003082:	e0b0      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003084:	2320      	movs	r3, #32
 8003086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800308a:	e0ac      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800308c:	2340      	movs	r3, #64	@ 0x40
 800308e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003092:	e0a8      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003094:	2380      	movs	r3, #128	@ 0x80
 8003096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800309a:	e0a4      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a8f      	ldr	r2, [pc, #572]	@ (80032e0 <UART_SetConfig+0x6a0>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d130      	bne.n	8003108 <UART_SetConfig+0x4c8>
 80030a6:	4b8d      	ldr	r3, [pc, #564]	@ (80032dc <UART_SetConfig+0x69c>)
 80030a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030aa:	f003 0307 	and.w	r3, r3, #7
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	d826      	bhi.n	8003100 <UART_SetConfig+0x4c0>
 80030b2:	a201      	add	r2, pc, #4	@ (adr r2, 80030b8 <UART_SetConfig+0x478>)
 80030b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030b8:	080030d1 	.word	0x080030d1
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	080030e1 	.word	0x080030e1
 80030c4:	080030e9 	.word	0x080030e9
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	080030f9 	.word	0x080030f9
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030d6:	e086      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80030d8:	2304      	movs	r3, #4
 80030da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030de:	e082      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80030e0:	2308      	movs	r3, #8
 80030e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030e6:	e07e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80030e8:	2310      	movs	r3, #16
 80030ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ee:	e07a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80030f0:	2320      	movs	r3, #32
 80030f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030f6:	e076      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80030f8:	2340      	movs	r3, #64	@ 0x40
 80030fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030fe:	e072      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003100:	2380      	movs	r3, #128	@ 0x80
 8003102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003106:	e06e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a75      	ldr	r2, [pc, #468]	@ (80032e4 <UART_SetConfig+0x6a4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d130      	bne.n	8003174 <UART_SetConfig+0x534>
 8003112:	4b72      	ldr	r3, [pc, #456]	@ (80032dc <UART_SetConfig+0x69c>)
 8003114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003116:	f003 0307 	and.w	r3, r3, #7
 800311a:	2b05      	cmp	r3, #5
 800311c:	d826      	bhi.n	800316c <UART_SetConfig+0x52c>
 800311e:	a201      	add	r2, pc, #4	@ (adr r2, 8003124 <UART_SetConfig+0x4e4>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	0800313d 	.word	0x0800313d
 8003128:	08003145 	.word	0x08003145
 800312c:	0800314d 	.word	0x0800314d
 8003130:	08003155 	.word	0x08003155
 8003134:	0800315d 	.word	0x0800315d
 8003138:	08003165 	.word	0x08003165
 800313c:	2300      	movs	r3, #0
 800313e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003142:	e050      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003144:	2304      	movs	r3, #4
 8003146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800314a:	e04c      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800314c:	2308      	movs	r3, #8
 800314e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003152:	e048      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003154:	2310      	movs	r3, #16
 8003156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800315a:	e044      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800315c:	2320      	movs	r3, #32
 800315e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003162:	e040      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003164:	2340      	movs	r3, #64	@ 0x40
 8003166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800316a:	e03c      	b.n	80031e6 <UART_SetConfig+0x5a6>
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003172:	e038      	b.n	80031e6 <UART_SetConfig+0x5a6>
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a5b      	ldr	r2, [pc, #364]	@ (80032e8 <UART_SetConfig+0x6a8>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d130      	bne.n	80031e0 <UART_SetConfig+0x5a0>
 800317e:	4b57      	ldr	r3, [pc, #348]	@ (80032dc <UART_SetConfig+0x69c>)
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	2b05      	cmp	r3, #5
 8003188:	d826      	bhi.n	80031d8 <UART_SetConfig+0x598>
 800318a:	a201      	add	r2, pc, #4	@ (adr r2, 8003190 <UART_SetConfig+0x550>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031a9 	.word	0x080031a9
 8003194:	080031b1 	.word	0x080031b1
 8003198:	080031b9 	.word	0x080031b9
 800319c:	080031c1 	.word	0x080031c1
 80031a0:	080031c9 	.word	0x080031c9
 80031a4:	080031d1 	.word	0x080031d1
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ae:	e01a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031b6:	e016      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031be:	e012      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031c6:	e00e      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031c8:	2320      	movs	r3, #32
 80031ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ce:	e00a      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031d0:	2340      	movs	r3, #64	@ 0x40
 80031d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031d6:	e006      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031d8:	2380      	movs	r3, #128	@ 0x80
 80031da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031de:	e002      	b.n	80031e6 <UART_SetConfig+0x5a6>
 80031e0:	2380      	movs	r3, #128	@ 0x80
 80031e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a3f      	ldr	r2, [pc, #252]	@ (80032e8 <UART_SetConfig+0x6a8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	f040 80f8 	bne.w	80033e2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	dc46      	bgt.n	8003288 <UART_SetConfig+0x648>
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	f2c0 8082 	blt.w	8003304 <UART_SetConfig+0x6c4>
 8003200:	3b02      	subs	r3, #2
 8003202:	2b1e      	cmp	r3, #30
 8003204:	d87e      	bhi.n	8003304 <UART_SetConfig+0x6c4>
 8003206:	a201      	add	r2, pc, #4	@ (adr r2, 800320c <UART_SetConfig+0x5cc>)
 8003208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320c:	0800328f 	.word	0x0800328f
 8003210:	08003305 	.word	0x08003305
 8003214:	08003297 	.word	0x08003297
 8003218:	08003305 	.word	0x08003305
 800321c:	08003305 	.word	0x08003305
 8003220:	08003305 	.word	0x08003305
 8003224:	080032a7 	.word	0x080032a7
 8003228:	08003305 	.word	0x08003305
 800322c:	08003305 	.word	0x08003305
 8003230:	08003305 	.word	0x08003305
 8003234:	08003305 	.word	0x08003305
 8003238:	08003305 	.word	0x08003305
 800323c:	08003305 	.word	0x08003305
 8003240:	08003305 	.word	0x08003305
 8003244:	080032b7 	.word	0x080032b7
 8003248:	08003305 	.word	0x08003305
 800324c:	08003305 	.word	0x08003305
 8003250:	08003305 	.word	0x08003305
 8003254:	08003305 	.word	0x08003305
 8003258:	08003305 	.word	0x08003305
 800325c:	08003305 	.word	0x08003305
 8003260:	08003305 	.word	0x08003305
 8003264:	08003305 	.word	0x08003305
 8003268:	08003305 	.word	0x08003305
 800326c:	08003305 	.word	0x08003305
 8003270:	08003305 	.word	0x08003305
 8003274:	08003305 	.word	0x08003305
 8003278:	08003305 	.word	0x08003305
 800327c:	08003305 	.word	0x08003305
 8003280:	08003305 	.word	0x08003305
 8003284:	080032f7 	.word	0x080032f7
 8003288:	2b40      	cmp	r3, #64	@ 0x40
 800328a:	d037      	beq.n	80032fc <UART_SetConfig+0x6bc>
 800328c:	e03a      	b.n	8003304 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800328e:	f7ff f9bf 	bl	8002610 <HAL_RCCEx_GetD3PCLK1Freq>
 8003292:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003294:	e03c      	b.n	8003310 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800329a:	4618      	mov	r0, r3
 800329c:	f7ff f9ce 	bl	800263c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80032a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032a4:	e034      	b.n	8003310 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80032a6:	f107 0318 	add.w	r3, r7, #24
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fb1a 	bl	80028e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032b4:	e02c      	b.n	8003310 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032b6:	4b09      	ldr	r3, [pc, #36]	@ (80032dc <UART_SetConfig+0x69c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d016      	beq.n	80032f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80032c2:	4b06      	ldr	r3, [pc, #24]	@ (80032dc <UART_SetConfig+0x69c>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	08db      	lsrs	r3, r3, #3
 80032c8:	f003 0303 	and.w	r3, r3, #3
 80032cc:	4a07      	ldr	r2, [pc, #28]	@ (80032ec <UART_SetConfig+0x6ac>)
 80032ce:	fa22 f303 	lsr.w	r3, r2, r3
 80032d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80032d4:	e01c      	b.n	8003310 <UART_SetConfig+0x6d0>
 80032d6:	bf00      	nop
 80032d8:	40011400 	.word	0x40011400
 80032dc:	58024400 	.word	0x58024400
 80032e0:	40007800 	.word	0x40007800
 80032e4:	40007c00 	.word	0x40007c00
 80032e8:	58000c00 	.word	0x58000c00
 80032ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80032f0:	4b9d      	ldr	r3, [pc, #628]	@ (8003568 <UART_SetConfig+0x928>)
 80032f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032f4:	e00c      	b.n	8003310 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80032f6:	4b9d      	ldr	r3, [pc, #628]	@ (800356c <UART_SetConfig+0x92c>)
 80032f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80032fa:	e009      	b.n	8003310 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003302:	e005      	b.n	8003310 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800330e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003310:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 81de 	beq.w	80036d4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331c:	4a94      	ldr	r2, [pc, #592]	@ (8003570 <UART_SetConfig+0x930>)
 800331e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003322:	461a      	mov	r2, r3
 8003324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003326:	fbb3 f3f2 	udiv	r3, r3, r2
 800332a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	685a      	ldr	r2, [r3, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003338:	429a      	cmp	r2, r3
 800333a:	d305      	bcc.n	8003348 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003342:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800334e:	e1c1      	b.n	80036d4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003350:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003352:	2200      	movs	r2, #0
 8003354:	60bb      	str	r3, [r7, #8]
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	4a84      	ldr	r2, [pc, #528]	@ (8003570 <UART_SetConfig+0x930>)
 800335e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003362:	b29b      	uxth	r3, r3
 8003364:	2200      	movs	r2, #0
 8003366:	603b      	str	r3, [r7, #0]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003372:	f7fc ffb1 	bl	80002d8 <__aeabi_uldivmod>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f04f 0200 	mov.w	r2, #0
 8003382:	f04f 0300 	mov.w	r3, #0
 8003386:	020b      	lsls	r3, r1, #8
 8003388:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800338c:	0202      	lsls	r2, r0, #8
 800338e:	6979      	ldr	r1, [r7, #20]
 8003390:	6849      	ldr	r1, [r1, #4]
 8003392:	0849      	lsrs	r1, r1, #1
 8003394:	2000      	movs	r0, #0
 8003396:	460c      	mov	r4, r1
 8003398:	4605      	mov	r5, r0
 800339a:	eb12 0804 	adds.w	r8, r2, r4
 800339e:	eb43 0905 	adc.w	r9, r3, r5
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	469a      	mov	sl, r3
 80033aa:	4693      	mov	fp, r2
 80033ac:	4652      	mov	r2, sl
 80033ae:	465b      	mov	r3, fp
 80033b0:	4640      	mov	r0, r8
 80033b2:	4649      	mov	r1, r9
 80033b4:	f7fc ff90 	bl	80002d8 <__aeabi_uldivmod>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	4613      	mov	r3, r2
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033c6:	d308      	bcc.n	80033da <UART_SetConfig+0x79a>
 80033c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d204      	bcs.n	80033da <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80033d6:	60da      	str	r2, [r3, #12]
 80033d8:	e17c      	b.n	80036d4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80033e0:	e178      	b.n	80036d4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033ea:	f040 80c5 	bne.w	8003578 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80033ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80033f2:	2b20      	cmp	r3, #32
 80033f4:	dc48      	bgt.n	8003488 <UART_SetConfig+0x848>
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	db7b      	blt.n	80034f2 <UART_SetConfig+0x8b2>
 80033fa:	2b20      	cmp	r3, #32
 80033fc:	d879      	bhi.n	80034f2 <UART_SetConfig+0x8b2>
 80033fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003404 <UART_SetConfig+0x7c4>)
 8003400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003404:	0800348f 	.word	0x0800348f
 8003408:	08003497 	.word	0x08003497
 800340c:	080034f3 	.word	0x080034f3
 8003410:	080034f3 	.word	0x080034f3
 8003414:	0800349f 	.word	0x0800349f
 8003418:	080034f3 	.word	0x080034f3
 800341c:	080034f3 	.word	0x080034f3
 8003420:	080034f3 	.word	0x080034f3
 8003424:	080034af 	.word	0x080034af
 8003428:	080034f3 	.word	0x080034f3
 800342c:	080034f3 	.word	0x080034f3
 8003430:	080034f3 	.word	0x080034f3
 8003434:	080034f3 	.word	0x080034f3
 8003438:	080034f3 	.word	0x080034f3
 800343c:	080034f3 	.word	0x080034f3
 8003440:	080034f3 	.word	0x080034f3
 8003444:	080034bf 	.word	0x080034bf
 8003448:	080034f3 	.word	0x080034f3
 800344c:	080034f3 	.word	0x080034f3
 8003450:	080034f3 	.word	0x080034f3
 8003454:	080034f3 	.word	0x080034f3
 8003458:	080034f3 	.word	0x080034f3
 800345c:	080034f3 	.word	0x080034f3
 8003460:	080034f3 	.word	0x080034f3
 8003464:	080034f3 	.word	0x080034f3
 8003468:	080034f3 	.word	0x080034f3
 800346c:	080034f3 	.word	0x080034f3
 8003470:	080034f3 	.word	0x080034f3
 8003474:	080034f3 	.word	0x080034f3
 8003478:	080034f3 	.word	0x080034f3
 800347c:	080034f3 	.word	0x080034f3
 8003480:	080034f3 	.word	0x080034f3
 8003484:	080034e5 	.word	0x080034e5
 8003488:	2b40      	cmp	r3, #64	@ 0x40
 800348a:	d02e      	beq.n	80034ea <UART_SetConfig+0x8aa>
 800348c:	e031      	b.n	80034f2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7ff f893 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 8003492:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003494:	e033      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003496:	f7ff f8a5 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 800349a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800349c:	e02f      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800349e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff f8ca 	bl	800263c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80034a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034ac:	e027      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80034ae:	f107 0318 	add.w	r3, r7, #24
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7ff fa16 	bl	80028e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034bc:	e01f      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80034be:	4b2d      	ldr	r3, [pc, #180]	@ (8003574 <UART_SetConfig+0x934>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80034ca:	4b2a      	ldr	r3, [pc, #168]	@ (8003574 <UART_SetConfig+0x934>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	08db      	lsrs	r3, r3, #3
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <UART_SetConfig+0x928>)
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80034dc:	e00f      	b.n	80034fe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80034de:	4b22      	ldr	r3, [pc, #136]	@ (8003568 <UART_SetConfig+0x928>)
 80034e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034e2:	e00c      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80034e4:	4b21      	ldr	r3, [pc, #132]	@ (800356c <UART_SetConfig+0x92c>)
 80034e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034e8:	e009      	b.n	80034fe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80034f0:	e005      	b.n	80034fe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80034f2:	2300      	movs	r3, #0
 80034f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80034fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003500:	2b00      	cmp	r3, #0
 8003502:	f000 80e7 	beq.w	80036d4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	4a19      	ldr	r2, [pc, #100]	@ (8003570 <UART_SetConfig+0x930>)
 800350c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003510:	461a      	mov	r2, r3
 8003512:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003514:	fbb3 f3f2 	udiv	r3, r3, r2
 8003518:	005a      	lsls	r2, r3, #1
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	085b      	lsrs	r3, r3, #1
 8003520:	441a      	add	r2, r3
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	fbb2 f3f3 	udiv	r3, r2, r3
 800352a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800352c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800352e:	2b0f      	cmp	r3, #15
 8003530:	d916      	bls.n	8003560 <UART_SetConfig+0x920>
 8003532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003538:	d212      	bcs.n	8003560 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800353a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800353c:	b29b      	uxth	r3, r3
 800353e:	f023 030f 	bic.w	r3, r3, #15
 8003542:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003544:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003546:	085b      	lsrs	r3, r3, #1
 8003548:	b29b      	uxth	r3, r3
 800354a:	f003 0307 	and.w	r3, r3, #7
 800354e:	b29a      	uxth	r2, r3
 8003550:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003552:	4313      	orrs	r3, r2
 8003554:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800355c:	60da      	str	r2, [r3, #12]
 800355e:	e0b9      	b.n	80036d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003566:	e0b5      	b.n	80036d4 <UART_SetConfig+0xa94>
 8003568:	03d09000 	.word	0x03d09000
 800356c:	003d0900 	.word	0x003d0900
 8003570:	08003bdc 	.word	0x08003bdc
 8003574:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003578:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800357c:	2b20      	cmp	r3, #32
 800357e:	dc49      	bgt.n	8003614 <UART_SetConfig+0x9d4>
 8003580:	2b00      	cmp	r3, #0
 8003582:	db7c      	blt.n	800367e <UART_SetConfig+0xa3e>
 8003584:	2b20      	cmp	r3, #32
 8003586:	d87a      	bhi.n	800367e <UART_SetConfig+0xa3e>
 8003588:	a201      	add	r2, pc, #4	@ (adr r2, 8003590 <UART_SetConfig+0x950>)
 800358a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358e:	bf00      	nop
 8003590:	0800361b 	.word	0x0800361b
 8003594:	08003623 	.word	0x08003623
 8003598:	0800367f 	.word	0x0800367f
 800359c:	0800367f 	.word	0x0800367f
 80035a0:	0800362b 	.word	0x0800362b
 80035a4:	0800367f 	.word	0x0800367f
 80035a8:	0800367f 	.word	0x0800367f
 80035ac:	0800367f 	.word	0x0800367f
 80035b0:	0800363b 	.word	0x0800363b
 80035b4:	0800367f 	.word	0x0800367f
 80035b8:	0800367f 	.word	0x0800367f
 80035bc:	0800367f 	.word	0x0800367f
 80035c0:	0800367f 	.word	0x0800367f
 80035c4:	0800367f 	.word	0x0800367f
 80035c8:	0800367f 	.word	0x0800367f
 80035cc:	0800367f 	.word	0x0800367f
 80035d0:	0800364b 	.word	0x0800364b
 80035d4:	0800367f 	.word	0x0800367f
 80035d8:	0800367f 	.word	0x0800367f
 80035dc:	0800367f 	.word	0x0800367f
 80035e0:	0800367f 	.word	0x0800367f
 80035e4:	0800367f 	.word	0x0800367f
 80035e8:	0800367f 	.word	0x0800367f
 80035ec:	0800367f 	.word	0x0800367f
 80035f0:	0800367f 	.word	0x0800367f
 80035f4:	0800367f 	.word	0x0800367f
 80035f8:	0800367f 	.word	0x0800367f
 80035fc:	0800367f 	.word	0x0800367f
 8003600:	0800367f 	.word	0x0800367f
 8003604:	0800367f 	.word	0x0800367f
 8003608:	0800367f 	.word	0x0800367f
 800360c:	0800367f 	.word	0x0800367f
 8003610:	08003671 	.word	0x08003671
 8003614:	2b40      	cmp	r3, #64	@ 0x40
 8003616:	d02e      	beq.n	8003676 <UART_SetConfig+0xa36>
 8003618:	e031      	b.n	800367e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800361a:	f7fe ffcd 	bl	80025b8 <HAL_RCC_GetPCLK1Freq>
 800361e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003620:	e033      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003622:	f7fe ffdf 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8003626:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003628:	e02f      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800362a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff f804 	bl	800263c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003638:	e027      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800363a:	f107 0318 	add.w	r3, r7, #24
 800363e:	4618      	mov	r0, r3
 8003640:	f7ff f950 	bl	80028e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003648:	e01f      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800364a:	4b2d      	ldr	r3, [pc, #180]	@ (8003700 <UART_SetConfig+0xac0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d009      	beq.n	800366a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003656:	4b2a      	ldr	r3, [pc, #168]	@ (8003700 <UART_SetConfig+0xac0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	08db      	lsrs	r3, r3, #3
 800365c:	f003 0303 	and.w	r3, r3, #3
 8003660:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <UART_SetConfig+0xac4>)
 8003662:	fa22 f303 	lsr.w	r3, r2, r3
 8003666:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003668:	e00f      	b.n	800368a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800366a:	4b26      	ldr	r3, [pc, #152]	@ (8003704 <UART_SetConfig+0xac4>)
 800366c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800366e:	e00c      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003670:	4b25      	ldr	r3, [pc, #148]	@ (8003708 <UART_SetConfig+0xac8>)
 8003672:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003674:	e009      	b.n	800368a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800367a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800367c:	e005      	b.n	800368a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003688:	bf00      	nop
    }

    if (pclk != 0U)
 800368a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368c:	2b00      	cmp	r3, #0
 800368e:	d021      	beq.n	80036d4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003694:	4a1d      	ldr	r2, [pc, #116]	@ (800370c <UART_SetConfig+0xacc>)
 8003696:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800369a:	461a      	mov	r2, r3
 800369c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369e:	fbb3 f2f2 	udiv	r2, r3, r2
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	441a      	add	r2, r3
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80036b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b6:	2b0f      	cmp	r3, #15
 80036b8:	d909      	bls.n	80036ce <UART_SetConfig+0xa8e>
 80036ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036c0:	d205      	bcs.n	80036ce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e002      	b.n	80036d4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	2201      	movs	r2, #1
 80036e0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	2200      	movs	r2, #0
 80036e8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	2200      	movs	r2, #0
 80036ee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80036f0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3748      	adds	r7, #72	@ 0x48
 80036f8:	46bd      	mov	sp, r7
 80036fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036fe:	bf00      	nop
 8003700:	58024400 	.word	0x58024400
 8003704:	03d09000 	.word	0x03d09000
 8003708:	003d0900 	.word	0x003d0900
 800370c:	08003bdc 	.word	0x08003bdc

08003710 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d00a      	beq.n	800373a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d00a      	beq.n	800377e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	f003 0304 	and.w	r3, r3, #4
 8003786:	2b00      	cmp	r3, #0
 8003788:	d00a      	beq.n	80037a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00a      	beq.n	80037c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00a      	beq.n	80037e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01a      	beq.n	8003826 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800380e:	d10a      	bne.n	8003826 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382e:	2b00      	cmp	r3, #0
 8003830:	d00a      	beq.n	8003848 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	430a      	orrs	r2, r1
 8003846:	605a      	str	r2, [r3, #4]
  }
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b098      	sub	sp, #96	@ 0x60
 8003858:	af02      	add	r7, sp, #8
 800385a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003864:	f7fd faf0 	bl	8000e48 <HAL_GetTick>
 8003868:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0308 	and.w	r3, r3, #8
 8003874:	2b08      	cmp	r3, #8
 8003876:	d12f      	bne.n	80038d8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003878:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003880:	2200      	movs	r2, #0
 8003882:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	f000 f88e 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d022      	beq.n	80038d8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800389a:	e853 3f00 	ldrex	r3, [r3]
 800389e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80038a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80038a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	461a      	mov	r2, r3
 80038ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80038b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80038b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80038b8:	e841 2300 	strex	r3, r2, [r1]
 80038bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80038be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1e6      	bne.n	8003892 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2220      	movs	r2, #32
 80038c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e063      	b.n	80039a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0304 	and.w	r3, r3, #4
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	d149      	bne.n	800397a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038ee:	2200      	movs	r2, #0
 80038f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 f857 	bl	80039a8 <UART_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d03c      	beq.n	800397a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003908:	e853 3f00 	ldrex	r3, [r3]
 800390c:	623b      	str	r3, [r7, #32]
   return(result);
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003914:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	461a      	mov	r2, r3
 800391c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800391e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003920:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003922:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003926:	e841 2300 	strex	r3, r2, [r1]
 800392a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800392c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1e6      	bne.n	8003900 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3308      	adds	r3, #8
 8003938:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	e853 3f00 	ldrex	r3, [r3]
 8003940:	60fb      	str	r3, [r7, #12]
   return(result);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	f023 0301 	bic.w	r3, r3, #1
 8003948:	64bb      	str	r3, [r7, #72]	@ 0x48
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003952:	61fa      	str	r2, [r7, #28]
 8003954:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003956:	69b9      	ldr	r1, [r7, #24]
 8003958:	69fa      	ldr	r2, [r7, #28]
 800395a:	e841 2300 	strex	r3, r2, [r1]
 800395e:	617b      	str	r3, [r7, #20]
   return(result);
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1e5      	bne.n	8003932 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2220      	movs	r2, #32
 800396a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e012      	b.n	80039a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2220      	movs	r2, #32
 800397e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3758      	adds	r7, #88	@ 0x58
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	603b      	str	r3, [r7, #0]
 80039b4:	4613      	mov	r3, r2
 80039b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b8:	e04f      	b.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c0:	d04b      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039c2:	f7fd fa41 	bl	8000e48 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	69ba      	ldr	r2, [r7, #24]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d302      	bcc.n	80039d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e04e      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d037      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2b80      	cmp	r3, #128	@ 0x80
 80039ee:	d034      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b40      	cmp	r3, #64	@ 0x40
 80039f4:	d031      	beq.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69db      	ldr	r3, [r3, #28]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b08      	cmp	r3, #8
 8003a02:	d110      	bne.n	8003a26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2208      	movs	r2, #8
 8003a0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f839 	bl	8003a84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2208      	movs	r2, #8
 8003a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e029      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69db      	ldr	r3, [r3, #28]
 8003a2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a34:	d111      	bne.n	8003a5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f81f 	bl	8003a84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e00f      	b.n	8003a7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	4013      	ands	r3, r2
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	bf0c      	ite	eq
 8003a6a:	2301      	moveq	r3, #1
 8003a6c:	2300      	movne	r3, #0
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d0a0      	beq.n	80039ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
	...

08003a84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b095      	sub	sp, #84	@ 0x54
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003aa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8003aac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003ab0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ab2:	e841 2300 	strex	r3, r2, [r1]
 8003ab6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d1e6      	bne.n	8003a8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac6:	6a3b      	ldr	r3, [r7, #32]
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8003b4c <UART_EndRxTransfer+0xc8>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	3308      	adds	r3, #8
 8003adc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ade:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ae4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ae6:	e841 2300 	strex	r3, r2, [r1]
 8003aea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1e5      	bne.n	8003abe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d118      	bne.n	8003b2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f023 0310 	bic.w	r3, r3, #16
 8003b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b18:	61bb      	str	r3, [r7, #24]
 8003b1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6979      	ldr	r1, [r7, #20]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	613b      	str	r3, [r7, #16]
   return(result);
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e6      	bne.n	8003afa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2220      	movs	r2, #32
 8003b30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2200      	movs	r2, #0
 8003b38:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003b40:	bf00      	nop
 8003b42:	3754      	adds	r7, #84	@ 0x54
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	effffffe 	.word	0xeffffffe

08003b50 <memset>:
 8003b50:	4402      	add	r2, r0
 8003b52:	4603      	mov	r3, r0
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d100      	bne.n	8003b5a <memset+0xa>
 8003b58:	4770      	bx	lr
 8003b5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003b5e:	e7f9      	b.n	8003b54 <memset+0x4>

08003b60 <__libc_init_array>:
 8003b60:	b570      	push	{r4, r5, r6, lr}
 8003b62:	4d0d      	ldr	r5, [pc, #52]	@ (8003b98 <__libc_init_array+0x38>)
 8003b64:	4c0d      	ldr	r4, [pc, #52]	@ (8003b9c <__libc_init_array+0x3c>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	2600      	movs	r6, #0
 8003b6c:	42a6      	cmp	r6, r4
 8003b6e:	d109      	bne.n	8003b84 <__libc_init_array+0x24>
 8003b70:	4d0b      	ldr	r5, [pc, #44]	@ (8003ba0 <__libc_init_array+0x40>)
 8003b72:	4c0c      	ldr	r4, [pc, #48]	@ (8003ba4 <__libc_init_array+0x44>)
 8003b74:	f000 f818 	bl	8003ba8 <_init>
 8003b78:	1b64      	subs	r4, r4, r5
 8003b7a:	10a4      	asrs	r4, r4, #2
 8003b7c:	2600      	movs	r6, #0
 8003b7e:	42a6      	cmp	r6, r4
 8003b80:	d105      	bne.n	8003b8e <__libc_init_array+0x2e>
 8003b82:	bd70      	pop	{r4, r5, r6, pc}
 8003b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b88:	4798      	blx	r3
 8003b8a:	3601      	adds	r6, #1
 8003b8c:	e7ee      	b.n	8003b6c <__libc_init_array+0xc>
 8003b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b92:	4798      	blx	r3
 8003b94:	3601      	adds	r6, #1
 8003b96:	e7f2      	b.n	8003b7e <__libc_init_array+0x1e>
 8003b98:	08003bfc 	.word	0x08003bfc
 8003b9c:	08003bfc 	.word	0x08003bfc
 8003ba0:	08003bfc 	.word	0x08003bfc
 8003ba4:	08003c00 	.word	0x08003c00

08003ba8 <_init>:
 8003ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003baa:	bf00      	nop
 8003bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bae:	bc08      	pop	{r3}
 8003bb0:	469e      	mov	lr, r3
 8003bb2:	4770      	bx	lr

08003bb4 <_fini>:
 8003bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bb6:	bf00      	nop
 8003bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bba:	bc08      	pop	{r3}
 8003bbc:	469e      	mov	lr, r3
 8003bbe:	4770      	bx	lr
