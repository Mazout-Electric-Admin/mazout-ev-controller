
RTOS_Core_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010894  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08010b34  08010b34  00011b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e68  08010e68  000121b0  2**0
                  CONTENTS
  4 .ARM          00000008  08010e68  08010e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010e70  08010e70  000121b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010e70  08010e70  00011e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010e74  08010e74  00011e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001b0  24000000  08010e78  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000549c  240001b0  08011028  000121b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400564c  08011028  0001264c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e23  00000000  00000000  000121de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ee6  00000000  00000000  0003a001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  0003eee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000015c5  00000000  00000000  00040b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f81d  00000000  00000000  000420dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026f75  00000000  00000000  000818fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194c38  00000000  00000000  000a886f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0023d4a7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f0  00000000  00000000  0023d4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  002455dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001b0 	.word	0x240001b0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010b1c 	.word	0x08010b1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001b4 	.word	0x240001b4
 80002dc:	08010b1c 	.word	0x08010b1c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <HAL_TIM_PeriodElapsedCallback>:
};



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM6) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	d101      	bne.n	80007c2 <HAL_TIM_PeriodElapsedCallback+0x16>
	    HAL_IncTick();
 80007be:	f001 fd41 	bl	8002244 <HAL_IncTick>
	  }
	//_duty = CCRValue_937_5_72[_index];
	//SetCommutationStep(step,_duty);
	threeSine(_index);
 80007c2:	4b16      	ldr	r3, [pc, #88]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007c4:	881b      	ldrh	r3, [r3, #0]
 80007c6:	b29b      	uxth	r3, r3
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 f831 	bl	8000830 <threeSine>
	++_index;
 80007ce:	4b13      	ldr	r3, [pc, #76]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007d0:	881b      	ldrh	r3, [r3, #0]
 80007d2:	b29b      	uxth	r3, r3
 80007d4:	3301      	adds	r3, #1
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b10      	ldr	r3, [pc, #64]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007da:	801a      	strh	r2, [r3, #0]
	if(_index == CCRValue_NSize)
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	b29b      	uxth	r3, r3
 80007e2:	2b48      	cmp	r3, #72	@ 0x48
 80007e4:	d102      	bne.n	80007ec <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		_index = 0;
 80007e6:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x70>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	801a      	strh	r2, [r3, #0]
		}
		else if (step == 5) {
				step = 0;
		}*/
	}
	__HAL_TIM_SET_AUTORELOAD( &htim4, arr4_);
 80007ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007f2:	6812      	ldr	r2, [r2, #0]
 80007f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80007f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	4a09      	ldr	r2, [pc, #36]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80007fc:	60d3      	str	r3, [r2, #12]
	__HAL_TIM_SET_AUTORELOAD( &htim1, arr1_);
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a0a      	ldr	r2, [pc, #40]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000804:	6812      	ldr	r2, [r2, #0]
 8000806:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000808:	4b08      	ldr	r3, [pc, #32]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0x80>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a06      	ldr	r2, [pc, #24]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40001000 	.word	0x40001000
 800081c:	240001cc 	.word	0x240001cc
 8000820:	24000950 	.word	0x24000950
 8000824:	24000008 	.word	0x24000008
 8000828:	24000904 	.word	0x24000904
 800082c:	2400000c 	.word	0x2400000c

08000830 <threeSine>:
            break;
    }
}

void threeSine(uint16_t degree)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, CCRValue_937_5_72[degree] );
 800083a:	88fa      	ldrh	r2, [r7, #6]
 800083c:	4b24      	ldr	r3, [pc, #144]	@ (80008d0 <threeSine+0xa0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4924      	ldr	r1, [pc, #144]	@ (80008d4 <threeSine+0xa4>)
 8000842:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000846:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8000848:	2100      	movs	r1, #0
 800084a:	4821      	ldr	r0, [pc, #132]	@ (80008d0 <threeSine+0xa0>)
 800084c:	f007 fefe 	bl	800864c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8000850:	2100      	movs	r1, #0
 8000852:	481f      	ldr	r0, [pc, #124]	@ (80008d0 <threeSine+0xa0>)
 8000854:	f009 fa24 	bl	8009ca0 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, CCRValue_937_5_72[(degree + 24) % CCRValue_NSize] );
 8000858:	88fb      	ldrh	r3, [r7, #6]
 800085a:	f103 0118 	add.w	r1, r3, #24
 800085e:	4b1e      	ldr	r3, [pc, #120]	@ (80008d8 <threeSine+0xa8>)
 8000860:	fb83 2301 	smull	r2, r3, r3, r1
 8000864:	111a      	asrs	r2, r3, #4
 8000866:	17cb      	asrs	r3, r1, #31
 8000868:	1ad2      	subs	r2, r2, r3
 800086a:	4613      	mov	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	4413      	add	r3, r2
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	1aca      	subs	r2, r1, r3
 8000874:	4b16      	ldr	r3, [pc, #88]	@ (80008d0 <threeSine+0xa0>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4916      	ldr	r1, [pc, #88]	@ (80008d4 <threeSine+0xa4>)
 800087a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800087e:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8000880:	2104      	movs	r1, #4
 8000882:	4813      	ldr	r0, [pc, #76]	@ (80008d0 <threeSine+0xa0>)
 8000884:	f007 fee2 	bl	800864c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8000888:	2104      	movs	r1, #4
 800088a:	4811      	ldr	r0, [pc, #68]	@ (80008d0 <threeSine+0xa0>)
 800088c:	f009 fa08 	bl	8009ca0 <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, CCRValue_937_5_72[(degree + 48) % CCRValue_NSize] );
 8000890:	88fb      	ldrh	r3, [r7, #6]
 8000892:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8000896:	4b10      	ldr	r3, [pc, #64]	@ (80008d8 <threeSine+0xa8>)
 8000898:	fb83 2301 	smull	r2, r3, r3, r1
 800089c:	111a      	asrs	r2, r3, #4
 800089e:	17cb      	asrs	r3, r1, #31
 80008a0:	1ad2      	subs	r2, r2, r3
 80008a2:	4613      	mov	r3, r2
 80008a4:	00db      	lsls	r3, r3, #3
 80008a6:	4413      	add	r3, r2
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	1aca      	subs	r2, r1, r3
 80008ac:	4b08      	ldr	r3, [pc, #32]	@ (80008d0 <threeSine+0xa0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4908      	ldr	r1, [pc, #32]	@ (80008d4 <threeSine+0xa4>)
 80008b2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80008b6:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 80008b8:	2108      	movs	r1, #8
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <threeSine+0xa0>)
 80008bc:	f007 fec6 	bl	800864c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 80008c0:	2108      	movs	r1, #8
 80008c2:	4803      	ldr	r0, [pc, #12]	@ (80008d0 <threeSine+0xa0>)
 80008c4:	f009 f9ec 	bl	8009ca0 <HAL_TIMEx_PWMN_Start>
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000904 	.word	0x24000904
 80008d4:	24000010 	.word	0x24000010
 80008d8:	38e38e39 	.word	0x38e38e39

080008dc <gps>:

extern serverProperties serverAttributes;

extern UART_HandleTypeDef huart1;

void gps(void) {
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b08b      	sub	sp, #44	@ 0x2c
 80008e0:	af00      	add	r7, sp, #0
	char *gpsString;
	osMutexAcquire(uart_lockHandle, osWaitForever);
 80008e2:	4b38      	ldr	r3, [pc, #224]	@ (80009c4 <gps+0xe8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f04f 31ff 	mov.w	r1, #4294967295
 80008ea:	4618      	mov	r0, r3
 80008ec:	f00b fe4d 	bl	800c58a <osMutexAcquire>

	strcpy(txBufferG, CMD_GPS_DATA);
 80008f0:	4a35      	ldr	r2, [pc, #212]	@ (80009c8 <gps+0xec>)
 80008f2:	4b36      	ldr	r3, [pc, #216]	@ (80009cc <gps+0xf0>)
 80008f4:	4614      	mov	r4, r2
 80008f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80008f8:	c407      	stmia	r4!, {r0, r1, r2}
 80008fa:	8023      	strh	r3, [r4, #0]

	while (!strstr((char *)checkBufferG, GPS_ACK)) {
 80008fc:	e00c      	b.n	8000918 <gps+0x3c>

	HAL_UART_Transmit(&huart1, (uint8_t *)txBufferG, strlen(txBufferG), UART_TIMEOUT);
 80008fe:	4832      	ldr	r0, [pc, #200]	@ (80009c8 <gps+0xec>)
 8000900:	f7ff fcee 	bl	80002e0 <strlen>
 8000904:	4603      	mov	r3, r0
 8000906:	b29a      	uxth	r2, r3
 8000908:	2364      	movs	r3, #100	@ 0x64
 800090a:	492f      	ldr	r1, [pc, #188]	@ (80009c8 <gps+0xec>)
 800090c:	4830      	ldr	r0, [pc, #192]	@ (80009d0 <gps+0xf4>)
 800090e:	f009 fc28 	bl	800a162 <HAL_UART_Transmit>
	osDelay(10);  // Wait for the response
 8000912:	200a      	movs	r0, #10
 8000914:	f00b fd98 	bl	800c448 <osDelay>
	while (!strstr((char *)checkBufferG, GPS_ACK)) {
 8000918:	492e      	ldr	r1, [pc, #184]	@ (80009d4 <gps+0xf8>)
 800091a:	482f      	ldr	r0, [pc, #188]	@ (80009d8 <gps+0xfc>)
 800091c:	f00f f84a 	bl	800f9b4 <strstr>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d0eb      	beq.n	80008fe <gps+0x22>
	}

	gpsString = strstr((char *)checkBufferG, GPS_ACK);
 8000926:	492b      	ldr	r1, [pc, #172]	@ (80009d4 <gps+0xf8>)
 8000928:	482b      	ldr	r0, [pc, #172]	@ (80009d8 <gps+0xfc>)
 800092a:	f00f f843 	bl	800f9b4 <strstr>
 800092e:	6278      	str	r0, [r7, #36]	@ 0x24

	memset(txBufferG, NULL_ , sizeof(txBufferG));
 8000930:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000934:	2100      	movs	r1, #0
 8000936:	4824      	ldr	r0, [pc, #144]	@ (80009c8 <gps+0xec>)
 8000938:	f00e ffb7 	bl	800f8aa <memset>

	// Move pointer past "+CGPSINFO:"
	gpsString += 10;
 800093c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093e:	330a      	adds	r3, #10
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24

	// Example response: 3113.343286,N,12121.234064,E,...
	char latitude[16] = {0};
 8000942:	2300      	movs	r3, #0
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
	char longitude[16] = {0};
 8000952:	2300      	movs	r3, #0
 8000954:	603b      	str	r3, [r7, #0]
 8000956:	1d3b      	adds	r3, r7, #4
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]

	// Extract latitude and longitude strings
	char *token = strtok(gpsString, ".");
 8000960:	491e      	ldr	r1, [pc, #120]	@ (80009dc <gps+0x100>)
 8000962:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000964:	f00e ffca 	bl	800f8fc <strtok>
 8000968:	6238      	str	r0, [r7, #32]
	if (token != NULL) strncpy(latitude, token, sizeof(latitude) - 1);
 800096a:	6a3b      	ldr	r3, [r7, #32]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d006      	beq.n	800097e <gps+0xa2>
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	220f      	movs	r2, #15
 8000976:	6a39      	ldr	r1, [r7, #32]
 8000978:	4618      	mov	r0, r3
 800097a:	f00e ffab 	bl	800f8d4 <strncpy>
	token = strtok(NULL, ","); // Skip N/S indicator
 800097e:	4918      	ldr	r1, [pc, #96]	@ (80009e0 <gps+0x104>)
 8000980:	2000      	movs	r0, #0
 8000982:	f00e ffbb 	bl	800f8fc <strtok>
 8000986:	6238      	str	r0, [r7, #32]
	token = strtok(NULL, ",");
 8000988:	4915      	ldr	r1, [pc, #84]	@ (80009e0 <gps+0x104>)
 800098a:	2000      	movs	r0, #0
 800098c:	f00e ffb6 	bl	800f8fc <strtok>
 8000990:	6238      	str	r0, [r7, #32]
	if (token != NULL) strncpy(longitude, token, sizeof(longitude) - 1);
 8000992:	6a3b      	ldr	r3, [r7, #32]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d005      	beq.n	80009a4 <gps+0xc8>
 8000998:	463b      	mov	r3, r7
 800099a:	220f      	movs	r2, #15
 800099c:	6a39      	ldr	r1, [r7, #32]
 800099e:	4618      	mov	r0, r3
 80009a0:	f00e ff98 	bl	800f8d4 <strncpy>

	// Format and store in gpsData
	sprintf((char *)serverAttributes.gpsData, "%s,%s", latitude, longitude);
 80009a4:	463b      	mov	r3, r7
 80009a6:	f107 0210 	add.w	r2, r7, #16
 80009aa:	490e      	ldr	r1, [pc, #56]	@ (80009e4 <gps+0x108>)
 80009ac:	480e      	ldr	r0, [pc, #56]	@ (80009e8 <gps+0x10c>)
 80009ae:	f00e ff19 	bl	800f7e4 <siprintf>

	osMutexRelease(uart_lockHandle);
 80009b2:	4b04      	ldr	r3, [pc, #16]	@ (80009c4 <gps+0xe8>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f00b fe32 	bl	800c620 <osMutexRelease>
}
 80009bc:	bf00      	nop
 80009be:	372c      	adds	r7, #44	@ 0x2c
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	24000ab8 	.word	0x24000ab8
 80009c8:	240001d0 	.word	0x240001d0
 80009cc:	08010b34 	.word	0x08010b34
 80009d0:	2400099c 	.word	0x2400099c
 80009d4:	08010b44 	.word	0x08010b44
 80009d8:	240002d0 	.word	0x240002d0
 80009dc:	08010b50 	.word	0x08010b50
 80009e0:	08010b54 	.word	0x08010b54
 80009e4:	08010b58 	.word	0x08010b58
 80009e8:	240008da 	.word	0x240008da

080009ec <NetworkInit>:
char rxBufferN[RX_BUFFER_SIZE];        // Buffer for receiving AT responses
char checkBufferN[RX_BUFFER_SIZE];

uint8_t propertyIndex = 0;

void NetworkInit() {
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	af00      	add	r7, sp, #0

	strcpy(txBufferN, CMD_ECHO_OFF);
 80009f0:	4b84      	ldr	r3, [pc, #528]	@ (8000c04 <NetworkInit+0x218>)
 80009f2:	4a85      	ldr	r2, [pc, #532]	@ (8000c08 <NetworkInit+0x21c>)
 80009f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009f8:	6018      	str	r0, [r3, #0]
 80009fa:	3304      	adds	r3, #4
 80009fc:	8019      	strh	r1, [r3, #0]
 80009fe:	3302      	adds	r3, #2
 8000a00:	0c0a      	lsrs	r2, r1, #16
 8000a02:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000a04:	487f      	ldr	r0, [pc, #508]	@ (8000c04 <NetworkInit+0x218>)
 8000a06:	f7ff fc6b 	bl	80002e0 <strlen>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	b29a      	uxth	r2, r3
 8000a0e:	2364      	movs	r3, #100	@ 0x64
 8000a10:	497c      	ldr	r1, [pc, #496]	@ (8000c04 <NetworkInit+0x218>)
 8000a12:	487e      	ldr	r0, [pc, #504]	@ (8000c0c <NetworkInit+0x220>)
 8000a14:	f009 fba5 	bl	800a162 <HAL_UART_Transmit>
	memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000a18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	4879      	ldr	r0, [pc, #484]	@ (8000c04 <NetworkInit+0x218>)
 8000a20:	f00e ff43 	bl	800f8aa <memset>

	memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000a24:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4879      	ldr	r0, [pc, #484]	@ (8000c10 <NetworkInit+0x224>)
 8000a2c:	f00e ff3d 	bl	800f8aa <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000a30:	2364      	movs	r3, #100	@ 0x64
 8000a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a36:	4976      	ldr	r1, [pc, #472]	@ (8000c10 <NetworkInit+0x224>)
 8000a38:	4874      	ldr	r0, [pc, #464]	@ (8000c0c <NetworkInit+0x220>)
 8000a3a:	f009 fc20 	bl	800a27e <HAL_UART_Receive>
	//HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Check SIM is ready
    strcpy(txBufferN, CMD_CHECK_SIM);
 8000a3e:	4b71      	ldr	r3, [pc, #452]	@ (8000c04 <NetworkInit+0x218>)
 8000a40:	4a74      	ldr	r2, [pc, #464]	@ (8000c14 <NetworkInit+0x228>)
 8000a42:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a44:	c303      	stmia	r3!, {r0, r1}
 8000a46:	801a      	strh	r2, [r3, #0]
 8000a48:	3302      	adds	r3, #2
 8000a4a:	0c12      	lsrs	r2, r2, #16
 8000a4c:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000a4e:	486d      	ldr	r0, [pc, #436]	@ (8000c04 <NetworkInit+0x218>)
 8000a50:	f7ff fc46 	bl	80002e0 <strlen>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	2364      	movs	r3, #100	@ 0x64
 8000a5a:	496a      	ldr	r1, [pc, #424]	@ (8000c04 <NetworkInit+0x218>)
 8000a5c:	486b      	ldr	r0, [pc, #428]	@ (8000c0c <NetworkInit+0x220>)
 8000a5e:	f009 fb80 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000a62:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a66:	2100      	movs	r1, #0
 8000a68:	4866      	ldr	r0, [pc, #408]	@ (8000c04 <NetworkInit+0x218>)
 8000a6a:	f00e ff1e 	bl	800f8aa <memset>

    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000a6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a72:	2100      	movs	r1, #0
 8000a74:	4866      	ldr	r0, [pc, #408]	@ (8000c10 <NetworkInit+0x224>)
 8000a76:	f00e ff18 	bl	800f8aa <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000a7a:	2364      	movs	r3, #100	@ 0x64
 8000a7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000a80:	4963      	ldr	r1, [pc, #396]	@ (8000c10 <NetworkInit+0x224>)
 8000a82:	4862      	ldr	r0, [pc, #392]	@ (8000c0c <NetworkInit+0x220>)
 8000a84:	f009 fbfb 	bl	800a27e <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Check network registration
    strcpy(txBufferN, CMD_NETWORK_REG);
 8000a88:	4b5e      	ldr	r3, [pc, #376]	@ (8000c04 <NetworkInit+0x218>)
 8000a8a:	4a63      	ldr	r2, [pc, #396]	@ (8000c18 <NetworkInit+0x22c>)
 8000a8c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000a92:	485c      	ldr	r0, [pc, #368]	@ (8000c04 <NetworkInit+0x218>)
 8000a94:	f7ff fc24 	bl	80002e0 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	2364      	movs	r3, #100	@ 0x64
 8000a9e:	4959      	ldr	r1, [pc, #356]	@ (8000c04 <NetworkInit+0x218>)
 8000aa0:	485a      	ldr	r0, [pc, #360]	@ (8000c0c <NetworkInit+0x220>)
 8000aa2:	f009 fb5e 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000aa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4855      	ldr	r0, [pc, #340]	@ (8000c04 <NetworkInit+0x218>)
 8000aae:	f00e fefc 	bl	800f8aa <memset>

    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4855      	ldr	r0, [pc, #340]	@ (8000c10 <NetworkInit+0x224>)
 8000aba:	f00e fef6 	bl	800f8aa <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000abe:	2364      	movs	r3, #100	@ 0x64
 8000ac0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ac4:	4952      	ldr	r1, [pc, #328]	@ (8000c10 <NetworkInit+0x224>)
 8000ac6:	4851      	ldr	r0, [pc, #324]	@ (8000c0c <NetworkInit+0x220>)
 8000ac8:	f009 fbd9 	bl	800a27e <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // PDP Context
	strcpy(txBufferN, CMD_ACTIVATE_PDP);
 8000acc:	4a4d      	ldr	r2, [pc, #308]	@ (8000c04 <NetworkInit+0x218>)
 8000ace:	4b53      	ldr	r3, [pc, #332]	@ (8000c1c <NetworkInit+0x230>)
 8000ad0:	4614      	mov	r4, r2
 8000ad2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ad4:	c407      	stmia	r4!, {r0, r1, r2}
 8000ad6:	8023      	strh	r3, [r4, #0]
 8000ad8:	3402      	adds	r4, #2
 8000ada:	0c1b      	lsrs	r3, r3, #16
 8000adc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000ade:	4849      	ldr	r0, [pc, #292]	@ (8000c04 <NetworkInit+0x218>)
 8000ae0:	f7ff fbfe 	bl	80002e0 <strlen>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	2364      	movs	r3, #100	@ 0x64
 8000aea:	4946      	ldr	r1, [pc, #280]	@ (8000c04 <NetworkInit+0x218>)
 8000aec:	4847      	ldr	r0, [pc, #284]	@ (8000c0c <NetworkInit+0x220>)
 8000aee:	f009 fb38 	bl	800a162 <HAL_UART_Transmit>
	memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000af2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000af6:	2100      	movs	r1, #0
 8000af8:	4842      	ldr	r0, [pc, #264]	@ (8000c04 <NetworkInit+0x218>)
 8000afa:	f00e fed6 	bl	800f8aa <memset>

	memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000afe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b02:	2100      	movs	r1, #0
 8000b04:	4842      	ldr	r0, [pc, #264]	@ (8000c10 <NetworkInit+0x224>)
 8000b06:	f00e fed0 	bl	800f8aa <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000b0a:	2364      	movs	r3, #100	@ 0x64
 8000b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b10:	493f      	ldr	r1, [pc, #252]	@ (8000c10 <NetworkInit+0x224>)
 8000b12:	483e      	ldr	r0, [pc, #248]	@ (8000c0c <NetworkInit+0x220>)
 8000b14:	f009 fbb3 	bl	800a27e <HAL_UART_Receive>

    // Set APN
    strcpy(txBufferN, CMD_SET_APN);
 8000b18:	4a3a      	ldr	r2, [pc, #232]	@ (8000c04 <NetworkInit+0x218>)
 8000b1a:	4b41      	ldr	r3, [pc, #260]	@ (8000c20 <NetworkInit+0x234>)
 8000b1c:	4614      	mov	r4, r2
 8000b1e:	461d      	mov	r5, r3
 8000b20:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000b2c:	6020      	str	r0, [r4, #0]
 8000b2e:	3404      	adds	r4, #4
 8000b30:	7021      	strb	r1, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000b32:	4834      	ldr	r0, [pc, #208]	@ (8000c04 <NetworkInit+0x218>)
 8000b34:	f7ff fbd4 	bl	80002e0 <strlen>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	b29a      	uxth	r2, r3
 8000b3c:	2364      	movs	r3, #100	@ 0x64
 8000b3e:	4931      	ldr	r1, [pc, #196]	@ (8000c04 <NetworkInit+0x218>)
 8000b40:	4832      	ldr	r0, [pc, #200]	@ (8000c0c <NetworkInit+0x220>)
 8000b42:	f009 fb0e 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000b46:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	482d      	ldr	r0, [pc, #180]	@ (8000c04 <NetworkInit+0x218>)
 8000b4e:	f00e feac 	bl	800f8aa <memset>

    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000b52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b56:	2100      	movs	r1, #0
 8000b58:	482d      	ldr	r0, [pc, #180]	@ (8000c10 <NetworkInit+0x224>)
 8000b5a:	f00e fea6 	bl	800f8aa <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000b5e:	2364      	movs	r3, #100	@ 0x64
 8000b60:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b64:	492a      	ldr	r1, [pc, #168]	@ (8000c10 <NetworkInit+0x224>)
 8000b66:	4829      	ldr	r0, [pc, #164]	@ (8000c0c <NetworkInit+0x220>)
 8000b68:	f009 fb89 	bl	800a27e <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Set GPS Mode
	strcpy(txBufferN, CMD_GPS_MODE);
 8000b6c:	4b25      	ldr	r3, [pc, #148]	@ (8000c04 <NetworkInit+0x218>)
 8000b6e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c24 <NetworkInit+0x238>)
 8000b70:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b72:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000b76:	4823      	ldr	r0, [pc, #140]	@ (8000c04 <NetworkInit+0x218>)
 8000b78:	f7ff fbb2 	bl	80002e0 <strlen>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	2364      	movs	r3, #100	@ 0x64
 8000b82:	4920      	ldr	r1, [pc, #128]	@ (8000c04 <NetworkInit+0x218>)
 8000b84:	4821      	ldr	r0, [pc, #132]	@ (8000c0c <NetworkInit+0x220>)
 8000b86:	f009 faec 	bl	800a162 <HAL_UART_Transmit>
	memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b8e:	2100      	movs	r1, #0
 8000b90:	481c      	ldr	r0, [pc, #112]	@ (8000c04 <NetworkInit+0x218>)
 8000b92:	f00e fe8a 	bl	800f8aa <memset>

	memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000b96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <NetworkInit+0x224>)
 8000b9e:	f00e fe84 	bl	800f8aa <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000ba2:	2364      	movs	r3, #100	@ 0x64
 8000ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ba8:	4919      	ldr	r1, [pc, #100]	@ (8000c10 <NetworkInit+0x224>)
 8000baa:	4818      	ldr	r0, [pc, #96]	@ (8000c0c <NetworkInit+0x220>)
 8000bac:	f009 fb67 	bl	800a27e <HAL_UART_Receive>
	//HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);


    // Start TCP/IP service
    strcpy(txBufferN, CMD_NETOPEN);
 8000bb0:	4a14      	ldr	r2, [pc, #80]	@ (8000c04 <NetworkInit+0x218>)
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000c28 <NetworkInit+0x23c>)
 8000bb4:	4614      	mov	r4, r2
 8000bb6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000bb8:	c407      	stmia	r4!, {r0, r1, r2}
 8000bba:	7023      	strb	r3, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000bbc:	4811      	ldr	r0, [pc, #68]	@ (8000c04 <NetworkInit+0x218>)
 8000bbe:	f7ff fb8f 	bl	80002e0 <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	2364      	movs	r3, #100	@ 0x64
 8000bc8:	490e      	ldr	r1, [pc, #56]	@ (8000c04 <NetworkInit+0x218>)
 8000bca:	4810      	ldr	r0, [pc, #64]	@ (8000c0c <NetworkInit+0x220>)
 8000bcc:	f009 fac9 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000bd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	480b      	ldr	r0, [pc, #44]	@ (8000c04 <NetworkInit+0x218>)
 8000bd8:	f00e fe67 	bl	800f8aa <memset>

    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000bdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000be0:	2100      	movs	r1, #0
 8000be2:	480b      	ldr	r0, [pc, #44]	@ (8000c10 <NetworkInit+0x224>)
 8000be4:	f00e fe61 	bl	800f8aa <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000be8:	2364      	movs	r3, #100	@ 0x64
 8000bea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bee:	4908      	ldr	r1, [pc, #32]	@ (8000c10 <NetworkInit+0x224>)
 8000bf0:	4806      	ldr	r0, [pc, #24]	@ (8000c0c <NetworkInit+0x220>)
 8000bf2:	f009 fb44 	bl	800a27e <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Check response
    if (strstr(rxBufferN, RESPONSE_NETOPEN_OK) == NULL) {
 8000bf6:	490d      	ldr	r1, [pc, #52]	@ (8000c2c <NetworkInit+0x240>)
 8000bf8:	4805      	ldr	r0, [pc, #20]	@ (8000c10 <NetworkInit+0x224>)
 8000bfa:	f00e fedb 	bl	800f9b4 <strstr>
        //Error_Handler();
    }
}
 8000bfe:	bf00      	nop
 8000c00:	bdb0      	pop	{r4, r5, r7, pc}
 8000c02:	bf00      	nop
 8000c04:	240003d0 	.word	0x240003d0
 8000c08:	08010b60 	.word	0x08010b60
 8000c0c:	2400099c 	.word	0x2400099c
 8000c10:	240004d0 	.word	0x240004d0
 8000c14:	08010b68 	.word	0x08010b68
 8000c18:	08010b74 	.word	0x08010b74
 8000c1c:	08010b80 	.word	0x08010b80
 8000c20:	08010b90 	.word	0x08010b90
 8000c24:	08010bb8 	.word	0x08010bb8
 8000c28:	08010bc4 	.word	0x08010bc4
 8000c2c:	08010bd4 	.word	0x08010bd4

08000c30 <OpenSocket>:

void OpenSocket() {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af02      	add	r7, sp, #8
    sprintf(txBufferN, CMD_OPEN_SOCKET_FORMAT, SOCKET_INDEX, SERVER_IP, SERVER_PORT);
 8000c36:	f640 33ea 	movw	r3, #3050	@ 0xbea
 8000c3a:	9300      	str	r3, [sp, #0]
 8000c3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <OpenSocket+0x78>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	491a      	ldr	r1, [pc, #104]	@ (8000cac <OpenSocket+0x7c>)
 8000c42:	481b      	ldr	r0, [pc, #108]	@ (8000cb0 <OpenSocket+0x80>)
 8000c44:	f00e fdce 	bl	800f7e4 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000c48:	4819      	ldr	r0, [pc, #100]	@ (8000cb0 <OpenSocket+0x80>)
 8000c4a:	f7ff fb49 	bl	80002e0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	2364      	movs	r3, #100	@ 0x64
 8000c54:	4916      	ldr	r1, [pc, #88]	@ (8000cb0 <OpenSocket+0x80>)
 8000c56:	4817      	ldr	r0, [pc, #92]	@ (8000cb4 <OpenSocket+0x84>)
 8000c58:	f009 fa83 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000c5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c60:	2100      	movs	r1, #0
 8000c62:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <OpenSocket+0x80>)
 8000c64:	f00e fe21 	bl	800f8aa <memset>

    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000c68:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	4812      	ldr	r0, [pc, #72]	@ (8000cb8 <OpenSocket+0x88>)
 8000c70:	f00e fe1b 	bl	800f8aa <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBufferN, sizeof(rxBufferN), UART_TIMEOUT);
 8000c74:	2364      	movs	r3, #100	@ 0x64
 8000c76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c7a:	490f      	ldr	r1, [pc, #60]	@ (8000cb8 <OpenSocket+0x88>)
 8000c7c:	480d      	ldr	r0, [pc, #52]	@ (8000cb4 <OpenSocket+0x84>)
 8000c7e:	f009 fafe 	bl	800a27e <HAL_UART_Receive>
    memset(rxBufferN, NULL_ , sizeof(rxBufferN));
 8000c82:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c86:	2100      	movs	r1, #0
 8000c88:	480b      	ldr	r0, [pc, #44]	@ (8000cb8 <OpenSocket+0x88>)
 8000c8a:	f00e fe0e 	bl	800f8aa <memset>


    // Check response
    if (strstr(rxBufferN, RESPONSE_SOCKET_OPEN_OK) == NULL) {
 8000c8e:	490b      	ldr	r1, [pc, #44]	@ (8000cbc <OpenSocket+0x8c>)
 8000c90:	4809      	ldr	r0, [pc, #36]	@ (8000cb8 <OpenSocket+0x88>)
 8000c92:	f00e fe8f 	bl	800f9b4 <strstr>
        //Error_Handler();
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)rxBufferN, RX_BUFFER_SIZE);   /////////Need to change as this will go on
 8000c96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000c9a:	4907      	ldr	r1, [pc, #28]	@ (8000cb8 <OpenSocket+0x88>)
 8000c9c:	4805      	ldr	r0, [pc, #20]	@ (8000cb4 <OpenSocket+0x84>)
 8000c9e:	f00b fa10 	bl	800c0c2 <HAL_UARTEx_ReceiveToIdle_DMA>
    																		// to all the other files also

}
 8000ca2:	bf00      	nop
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08010be0 	.word	0x08010be0
 8000cac:	08010bf0 	.word	0x08010bf0
 8000cb0:	240003d0 	.word	0x240003d0
 8000cb4:	2400099c 	.word	0x2400099c
 8000cb8:	240004d0 	.word	0x240004d0
 8000cbc:	08010c10 	.word	0x08010c10

08000cc0 <SocketSendData>:


void SocketSendData(void) {
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	@ 0x28
 8000cc4:	af00      	add	r7, sp, #0
	uint8_t data[40];

	encodeServerData(propertyIndex, data);
 8000cc6:	4b28      	ldr	r3, [pc, #160]	@ (8000d68 <SocketSendData+0xa8>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	463a      	mov	r2, r7
 8000ccc:	4611      	mov	r1, r2
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f8fa 	bl	8000ec8 <encodeServerData>

	osMutexAcquire(uart_lockHandle, osWaitForever);
 8000cd4:	4b25      	ldr	r3, [pc, #148]	@ (8000d6c <SocketSendData+0xac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f00b fc54 	bl	800c58a <osMutexAcquire>

	sprintf(txBufferN, CMD_SEND_DATA_FORMAT, SOCKET_INDEX, sizeof(data));
 8000ce2:	2328      	movs	r3, #40	@ 0x28
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	4922      	ldr	r1, [pc, #136]	@ (8000d70 <SocketSendData+0xb0>)
 8000ce8:	4822      	ldr	r0, [pc, #136]	@ (8000d74 <SocketSendData+0xb4>)
 8000cea:	f00e fd7b 	bl	800f7e4 <siprintf>

    // Wait for `>` prompt
    while (!strstr((char *)checkBufferN, SERVER_ACK)) {
 8000cee:	e00c      	b.n	8000d0a <SocketSendData+0x4a>

    	HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000cf0:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <SocketSendData+0xb4>)
 8000cf2:	f7ff faf5 	bl	80002e0 <strlen>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	b29a      	uxth	r2, r3
 8000cfa:	2364      	movs	r3, #100	@ 0x64
 8000cfc:	491d      	ldr	r1, [pc, #116]	@ (8000d74 <SocketSendData+0xb4>)
 8000cfe:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <SocketSendData+0xb8>)
 8000d00:	f009 fa2f 	bl	800a162 <HAL_UART_Transmit>
    	osDelay(10);  // Wait for the response
 8000d04:	200a      	movs	r0, #10
 8000d06:	f00b fb9f 	bl	800c448 <osDelay>
    while (!strstr((char *)checkBufferN, SERVER_ACK)) {
 8000d0a:	213e      	movs	r1, #62	@ 0x3e
 8000d0c:	481b      	ldr	r0, [pc, #108]	@ (8000d7c <SocketSendData+0xbc>)
 8000d0e:	f00e fdd4 	bl	800f8ba <strchr>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d0eb      	beq.n	8000cf0 <SocketSendData+0x30>
    }
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000d18:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	4815      	ldr	r0, [pc, #84]	@ (8000d74 <SocketSendData+0xb4>)
 8000d20:	f00e fdc3 	bl	800f8aa <memset>

    // Send data
    HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), UART_TIMEOUT);
 8000d24:	4639      	mov	r1, r7
 8000d26:	2364      	movs	r3, #100	@ 0x64
 8000d28:	2228      	movs	r2, #40	@ 0x28
 8000d2a:	4813      	ldr	r0, [pc, #76]	@ (8000d78 <SocketSendData+0xb8>)
 8000d2c:	f009 fa19 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000d30:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000d34:	2100      	movs	r1, #0
 8000d36:	480f      	ldr	r0, [pc, #60]	@ (8000d74 <SocketSendData+0xb4>)
 8000d38:	f00e fdb7 	bl	800f8aa <memset>

    osMutexRelease(uart_lockHandle);
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d6c <SocketSendData+0xac>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4618      	mov	r0, r3
 8000d42:	f00b fc6d 	bl	800c620 <osMutexRelease>

    if(++propertyIndex > 8)	propertyIndex  = 0;
 8000d46:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <SocketSendData+0xa8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	@ (8000d68 <SocketSendData+0xa8>)
 8000d50:	701a      	strb	r2, [r3, #0]
 8000d52:	4b05      	ldr	r3, [pc, #20]	@ (8000d68 <SocketSendData+0xa8>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b08      	cmp	r3, #8
 8000d58:	d902      	bls.n	8000d60 <SocketSendData+0xa0>
 8000d5a:	4b03      	ldr	r3, [pc, #12]	@ (8000d68 <SocketSendData+0xa8>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	701a      	strb	r2, [r3, #0]
}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	240006d0 	.word	0x240006d0
 8000d6c:	24000ab8 	.word	0x24000ab8
 8000d70:	08010c20 	.word	0x08010c20
 8000d74:	240003d0 	.word	0x240003d0
 8000d78:	2400099c 	.word	0x2400099c
 8000d7c:	240005d0 	.word	0x240005d0

08000d80 <SocketReceiveData>:

void SocketReceiveData(void) {
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0
	int length = sizeof(rxBufferN);
 8000d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d8a:	607b      	str	r3, [r7, #4]

	osMutexAcquire(uart_lockHandle, osWaitForever);
 8000d8c:	4b12      	ldr	r3, [pc, #72]	@ (8000dd8 <SocketReceiveData+0x58>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f04f 31ff 	mov.w	r1, #4294967295
 8000d94:	4618      	mov	r0, r3
 8000d96:	f00b fbf8 	bl	800c58a <osMutexAcquire>

    sprintf(txBufferN, CMD_RECEIVE_DATA_FORMAT, SOCKET_INDEX, length);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	490f      	ldr	r1, [pc, #60]	@ (8000ddc <SocketReceiveData+0x5c>)
 8000da0:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <SocketReceiveData+0x60>)
 8000da2:	f00e fd1f 	bl	800f7e4 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *)txBufferN, strlen(txBufferN), UART_TIMEOUT);
 8000da6:	480e      	ldr	r0, [pc, #56]	@ (8000de0 <SocketReceiveData+0x60>)
 8000da8:	f7ff fa9a 	bl	80002e0 <strlen>
 8000dac:	4603      	mov	r3, r0
 8000dae:	b29a      	uxth	r2, r3
 8000db0:	2364      	movs	r3, #100	@ 0x64
 8000db2:	490b      	ldr	r1, [pc, #44]	@ (8000de0 <SocketReceiveData+0x60>)
 8000db4:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <SocketReceiveData+0x64>)
 8000db6:	f009 f9d4 	bl	800a162 <HAL_UART_Transmit>
    memset(txBufferN, NULL_ , sizeof(txBufferN));
 8000dba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4807      	ldr	r0, [pc, #28]	@ (8000de0 <SocketReceiveData+0x60>)
 8000dc2:	f00e fd72 	bl	800f8aa <memset>

    osMutexRelease(uart_lockHandle);
 8000dc6:	4b04      	ldr	r3, [pc, #16]	@ (8000dd8 <SocketReceiveData+0x58>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f00b fc28 	bl	800c620 <osMutexRelease>

}
 8000dd0:	bf00      	nop
 8000dd2:	3708      	adds	r7, #8
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	bd80      	pop	{r7, pc}
 8000dd8:	24000ab8 	.word	0x24000ab8
 8000ddc:	08010c34 	.word	0x08010c34
 8000de0:	240003d0 	.word	0x240003d0
 8000de4:	2400099c 	.word	0x2400099c

08000de8 <HAL_UARTEx_RxEventCallback>:

serverProperties serverAttributes;

extern UART_HandleTypeDef huart1;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	460b      	mov	r3, r1
 8000df2:	807b      	strh	r3, [r7, #2]
    //if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
      //  __HAL_UART_CLEAR_IDLEFLAG(&huart1);  // Clear the idle flag

	// Process received data
	writeIndexS = Size;//(RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));// % RX_BUFFER_SIZE;
 8000df4:	4a06      	ldr	r2, [pc, #24]	@ (8000e10 <HAL_UARTEx_RxEventCallback+0x28>)
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	8013      	strh	r3, [r2, #0]
	HandleReceivedData(writeIndexS);
 8000dfa:	4b05      	ldr	r3, [pc, #20]	@ (8000e10 <HAL_UARTEx_RxEventCallback+0x28>)
 8000dfc:	881b      	ldrh	r3, [r3, #0]
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f000 f807 	bl	8000e14 <HandleReceivedData>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	240008d4 	.word	0x240008d4

08000e14 <HandleReceivedData>:

void HandleReceivedData(uint8_t writeIndexS) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	71fb      	strb	r3, [r7, #7]

	uint16_t newDataCount = (writeIndexS >= readIndexS)
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	b29a      	uxth	r2, r3
 8000e22:	4b26      	ldr	r3, [pc, #152]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d306      	bcc.n	8000e38 <HandleReceivedData+0x24>
	                            ? (writeIndexS - readIndexS)
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	b29a      	uxth	r2, r3
 8000e2e:	4b23      	ldr	r3, [pc, #140]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e30:	881b      	ldrh	r3, [r3, #0]
	uint16_t newDataCount = (writeIndexS >= readIndexS)
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	e008      	b.n	8000e4a <HandleReceivedData+0x36>
	                            : (RX_BUFFER_SIZE - readIndexS + writeIndexS);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	b29b      	uxth	r3, r3
	uint16_t newDataCount = (writeIndexS >= readIndexS)
 8000e44:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8000e48:	b29b      	uxth	r3, r3
 8000e4a:	81bb      	strh	r3, [r7, #12]
	memset(checkBufferS, '\0', RX_BUFFER_SIZE);
 8000e4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e50:	2100      	movs	r1, #0
 8000e52:	481b      	ldr	r0, [pc, #108]	@ (8000ec0 <HandleReceivedData+0xac>)
 8000e54:	f00e fd29 	bl	800f8aa <memset>
	for (uint16_t i = 0; i < newDataCount; i++) {
 8000e58:	2300      	movs	r3, #0
 8000e5a:	81fb      	strh	r3, [r7, #14]
 8000e5c:	e017      	b.n	8000e8e <HandleReceivedData+0x7a>
		// Copy new data to the process buffer
		uint8_t newByte = rxBufferS[readIndexS];
 8000e5e:	4b17      	ldr	r3, [pc, #92]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	461a      	mov	r2, r3
 8000e64:	4b17      	ldr	r3, [pc, #92]	@ (8000ec4 <HandleReceivedData+0xb0>)
 8000e66:	5c9b      	ldrb	r3, [r3, r2]
 8000e68:	72fb      	strb	r3, [r7, #11]
		checkBufferS[i] = newByte;
 8000e6a:	89fb      	ldrh	r3, [r7, #14]
 8000e6c:	4914      	ldr	r1, [pc, #80]	@ (8000ec0 <HandleReceivedData+0xac>)
 8000e6e:	7afa      	ldrb	r2, [r7, #11]
 8000e70:	54ca      	strb	r2, [r1, r3]

		// Increment read index circularly
		readIndexS = (readIndexS + 1) % RX_BUFFER_SIZE;
 8000e72:	4b12      	ldr	r3, [pc, #72]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	425a      	negs	r2, r3
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	b2d2      	uxtb	r2, r2
 8000e7e:	bf58      	it	pl
 8000e80:	4253      	negpl	r3, r2
 8000e82:	b29a      	uxth	r2, r3
 8000e84:	4b0d      	ldr	r3, [pc, #52]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e86:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < newDataCount; i++) {
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	81fb      	strh	r3, [r7, #14]
 8000e8e:	89fa      	ldrh	r2, [r7, #14]
 8000e90:	89bb      	ldrh	r3, [r7, #12]
 8000e92:	429a      	cmp	r2, r3
 8000e94:	d3e3      	bcc.n	8000e5e <HandleReceivedData+0x4a>
	}
	// Check if we have a complete packet
	if (readIndexS >= PACKET_MIN_LENGTH) { // Assume minimum length is 2 bytes (Type + Length)
 8000e96:	4b09      	ldr	r3, [pc, #36]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b05      	cmp	r3, #5
 8000e9c:	d90a      	bls.n	8000eb4 <HandleReceivedData+0xa0>
		if (checkBufferS[0] == 0xAA) {
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <HandleReceivedData+0xac>)
 8000ea0:	781b      	ldrb	r3, [r3, #0]
 8000ea2:	2baa      	cmp	r3, #170	@ 0xaa
 8000ea4:	d106      	bne.n	8000eb4 <HandleReceivedData+0xa0>
			decodeServerData((uint8_t *)checkBufferS, readIndexS);
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <HandleReceivedData+0xa8>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	4619      	mov	r1, r3
 8000eae:	4804      	ldr	r0, [pc, #16]	@ (8000ec0 <HandleReceivedData+0xac>)
 8000eb0:	f000 f8b2 	bl	8001018 <decodeServerData>
		}
	}
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	240008d6 	.word	0x240008d6
 8000ec0:	240007d4 	.word	0x240007d4
 8000ec4:	240006d4 	.word	0x240006d4

08000ec8 <encodeServerData>:


uint8_t encodeServerData(ServerPropertyType type, uint8_t *packet) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	6039      	str	r1, [r7, #0]
 8000ed2:	71fb      	strb	r3, [r7, #7]
    uint8_t payloadLength = 0;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	75fb      	strb	r3, [r7, #23]
    uint8_t *payload;

    switch (type) {
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	2b07      	cmp	r3, #7
 8000ede:	d83b      	bhi.n	8000f58 <encodeServerData+0x90>
 8000ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <encodeServerData+0x20>)
 8000ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee6:	bf00      	nop
 8000ee8:	08000f09 	.word	0x08000f09
 8000eec:	08000f13 	.word	0x08000f13
 8000ef0:	08000f1d 	.word	0x08000f1d
 8000ef4:	08000f27 	.word	0x08000f27
 8000ef8:	08000f31 	.word	0x08000f31
 8000efc:	08000f3b 	.word	0x08000f3b
 8000f00:	08000f45 	.word	0x08000f45
 8000f04:	08000f4f 	.word	0x08000f4f
        case IMMOBILIZE_STATUS:
            payload = serverAttributes.immobilizeStatus;
 8000f08:	4b3b      	ldr	r3, [pc, #236]	@ (8000ff8 <encodeServerData+0x130>)
 8000f0a:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.immobilizeStatus);
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	75fb      	strb	r3, [r7, #23]
            break;
 8000f10:	e024      	b.n	8000f5c <encodeServerData+0x94>
        case RPM_PRESET:
            payload = serverAttributes.rpmPreset;
 8000f12:	4b3a      	ldr	r3, [pc, #232]	@ (8000ffc <encodeServerData+0x134>)
 8000f14:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.rpmPreset);
 8000f16:	2301      	movs	r3, #1
 8000f18:	75fb      	strb	r3, [r7, #23]
            break;
 8000f1a:	e01f      	b.n	8000f5c <encodeServerData+0x94>
        case GPS:
            payload = serverAttributes.gpsData;
 8000f1c:	4b38      	ldr	r3, [pc, #224]	@ (8001000 <encodeServerData+0x138>)
 8000f1e:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.gpsData);
 8000f20:	2320      	movs	r3, #32
 8000f22:	75fb      	strb	r3, [r7, #23]
            break;
 8000f24:	e01a      	b.n	8000f5c <encodeServerData+0x94>
        case CURRENT:
            payload = serverAttributes.currentData;
 8000f26:	4b37      	ldr	r3, [pc, #220]	@ (8001004 <encodeServerData+0x13c>)
 8000f28:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.currentData);
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	75fb      	strb	r3, [r7, #23]
            break;
 8000f2e:	e015      	b.n	8000f5c <encodeServerData+0x94>
        case VOLTAGE:
            payload = serverAttributes.voltageData;
 8000f30:	4b35      	ldr	r3, [pc, #212]	@ (8001008 <encodeServerData+0x140>)
 8000f32:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.voltageData);
 8000f34:	2302      	movs	r3, #2
 8000f36:	75fb      	strb	r3, [r7, #23]
            break;
 8000f38:	e010      	b.n	8000f5c <encodeServerData+0x94>
        case RPM:
            payload = serverAttributes.rpm;
 8000f3a:	4b34      	ldr	r3, [pc, #208]	@ (800100c <encodeServerData+0x144>)
 8000f3c:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.rpm);
 8000f3e:	2301      	movs	r3, #1
 8000f40:	75fb      	strb	r3, [r7, #23]
            break;
 8000f42:	e00b      	b.n	8000f5c <encodeServerData+0x94>
        case TEMPERATURE:
            payload = serverAttributes.temperature;
 8000f44:	4b32      	ldr	r3, [pc, #200]	@ (8001010 <encodeServerData+0x148>)
 8000f46:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.temperature);
 8000f48:	2301      	movs	r3, #1
 8000f4a:	75fb      	strb	r3, [r7, #23]
            break;
 8000f4c:	e006      	b.n	8000f5c <encodeServerData+0x94>
        case NETWORK_STRENGTH:
            payload = serverAttributes.networkStrength;
 8000f4e:	4b31      	ldr	r3, [pc, #196]	@ (8001014 <encodeServerData+0x14c>)
 8000f50:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.networkStrength);
 8000f52:	2301      	movs	r3, #1
 8000f54:	75fb      	strb	r3, [r7, #23]
            break;
 8000f56:	e001      	b.n	8000f5c <encodeServerData+0x94>
        default:
            return 0; // Unknown type
 8000f58:	2300      	movs	r3, #0
 8000f5a:	e049      	b.n	8000ff0 <encodeServerData+0x128>
    }

    // Create the packet
    uint8_t index = 0;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	737b      	strb	r3, [r7, #13]
    packet[index++] = 0xAA;  // Header byte 1
 8000f60:	7b7b      	ldrb	r3, [r7, #13]
 8000f62:	1c5a      	adds	r2, r3, #1
 8000f64:	737a      	strb	r2, [r7, #13]
 8000f66:	461a      	mov	r2, r3
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	22aa      	movs	r2, #170	@ 0xaa
 8000f6e:	701a      	strb	r2, [r3, #0]
    packet[index++] = 0xBB;  // Header byte 2
 8000f70:	7b7b      	ldrb	r3, [r7, #13]
 8000f72:	1c5a      	adds	r2, r3, #1
 8000f74:	737a      	strb	r2, [r7, #13]
 8000f76:	461a      	mov	r2, r3
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	22bb      	movs	r2, #187	@ 0xbb
 8000f7e:	701a      	strb	r2, [r3, #0]
    packet[index++] = type;  // Property type
 8000f80:	7b7b      	ldrb	r3, [r7, #13]
 8000f82:	1c5a      	adds	r2, r3, #1
 8000f84:	737a      	strb	r2, [r7, #13]
 8000f86:	461a      	mov	r2, r3
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	79fa      	ldrb	r2, [r7, #7]
 8000f8e:	701a      	strb	r2, [r3, #0]
    packet[index++] = payloadLength; // Payload length
 8000f90:	7b7b      	ldrb	r3, [r7, #13]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	737a      	strb	r2, [r7, #13]
 8000f96:	461a      	mov	r2, r3
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	7dfa      	ldrb	r2, [r7, #23]
 8000f9e:	701a      	strb	r2, [r3, #0]

    // Copy payload
    memcpy(&packet[index], payload, payloadLength);
 8000fa0:	7b7b      	ldrb	r3, [r7, #13]
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	7dfa      	ldrb	r2, [r7, #23]
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00e fde1 	bl	800fb72 <memcpy>
    index += payloadLength;
 8000fb0:	7b7a      	ldrb	r2, [r7, #13]
 8000fb2:	7dfb      	ldrb	r3, [r7, #23]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	737b      	strb	r3, [r7, #13]

    // Add checksum
    uint8_t checksum = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	73bb      	strb	r3, [r7, #14]
 8000fc0:	e009      	b.n	8000fd6 <encodeServerData+0x10e>
        checksum ^= packet[i];
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	683a      	ldr	r2, [r7, #0]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	781a      	ldrb	r2, [r3, #0]
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4053      	eors	r3, r2
 8000fce:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 8000fd0:	7bbb      	ldrb	r3, [r7, #14]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	73bb      	strb	r3, [r7, #14]
 8000fd6:	7bba      	ldrb	r2, [r7, #14]
 8000fd8:	7b7b      	ldrb	r3, [r7, #13]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d3f1      	bcc.n	8000fc2 <encodeServerData+0xfa>
    }
    packet[index++] = checksum;
 8000fde:	7b7b      	ldrb	r3, [r7, #13]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	737a      	strb	r2, [r7, #13]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	4413      	add	r3, r2
 8000fea:	7bfa      	ldrb	r2, [r7, #15]
 8000fec:	701a      	strb	r2, [r3, #0]

    return index; // Total packet length
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3718      	adds	r7, #24
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	240008d8 	.word	0x240008d8
 8000ffc:	240008d9 	.word	0x240008d9
 8001000:	240008da 	.word	0x240008da
 8001004:	240008fa 	.word	0x240008fa
 8001008:	240008fc 	.word	0x240008fc
 800100c:	240008fe 	.word	0x240008fe
 8001010:	240008ff 	.word	0x240008ff
 8001014:	24000900 	.word	0x24000900

08001018 <decodeServerData>:

void decodeServerData(uint8_t *packet, uint8_t length) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
    if (length < 5) return; // Invalid packet length
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	2b04      	cmp	r3, #4
 8001028:	d960      	bls.n	80010ec <decodeServerData+0xd4>

    // Validate header
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	2baa      	cmp	r3, #170	@ 0xaa
 8001030:	d15e      	bne.n	80010f0 <decodeServerData+0xd8>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3301      	adds	r3, #1
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	2bbb      	cmp	r3, #187	@ 0xbb
 800103a:	d159      	bne.n	80010f0 <decodeServerData+0xd8>

    // Extract type and payload length
    ServerPropertyType type = packet[2];
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	789b      	ldrb	r3, [r3, #2]
 8001040:	73fb      	strb	r3, [r7, #15]
    uint8_t payloadLength = packet[3];
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	78db      	ldrb	r3, [r3, #3]
 8001046:	73bb      	strb	r3, [r7, #14]
   //     checksum ^= packet[i];
   // }
   // if (checksum != packet[4 + payloadLength]) return;

    // Extract payload
    uint8_t *payload = &packet[4];
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3304      	adds	r3, #4
 800104c:	60bb      	str	r3, [r7, #8]

    // Update serverAttributes
    switch (type) {
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	3b01      	subs	r3, #1
 8001052:	2b07      	cmp	r3, #7
 8001054:	d84e      	bhi.n	80010f4 <decodeServerData+0xdc>
 8001056:	a201      	add	r2, pc, #4	@ (adr r2, 800105c <decodeServerData+0x44>)
 8001058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800105c:	0800107d 	.word	0x0800107d
 8001060:	0800108b 	.word	0x0800108b
 8001064:	08001099 	.word	0x08001099
 8001068:	080010a7 	.word	0x080010a7
 800106c:	080010b5 	.word	0x080010b5
 8001070:	080010c3 	.word	0x080010c3
 8001074:	080010d1 	.word	0x080010d1
 8001078:	080010df 	.word	0x080010df
        case IMMOBILIZE_STATUS:
            memcpy(serverAttributes.immobilizeStatus, payload, payloadLength);
 800107c:	7bbb      	ldrb	r3, [r7, #14]
 800107e:	461a      	mov	r2, r3
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	481e      	ldr	r0, [pc, #120]	@ (80010fc <decodeServerData+0xe4>)
 8001084:	f00e fd75 	bl	800fb72 <memcpy>
            break;
 8001088:	e035      	b.n	80010f6 <decodeServerData+0xde>
        case RPM_PRESET:
            memcpy(serverAttributes.rpmPreset, payload, payloadLength);
 800108a:	7bbb      	ldrb	r3, [r7, #14]
 800108c:	461a      	mov	r2, r3
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	481b      	ldr	r0, [pc, #108]	@ (8001100 <decodeServerData+0xe8>)
 8001092:	f00e fd6e 	bl	800fb72 <memcpy>
            break;
 8001096:	e02e      	b.n	80010f6 <decodeServerData+0xde>
        case GPS:
            memcpy(serverAttributes.gpsData, payload, payloadLength);
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	461a      	mov	r2, r3
 800109c:	68b9      	ldr	r1, [r7, #8]
 800109e:	4819      	ldr	r0, [pc, #100]	@ (8001104 <decodeServerData+0xec>)
 80010a0:	f00e fd67 	bl	800fb72 <memcpy>
            break;
 80010a4:	e027      	b.n	80010f6 <decodeServerData+0xde>
        case CURRENT:
            memcpy(serverAttributes.currentData, payload, payloadLength);
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	461a      	mov	r2, r3
 80010aa:	68b9      	ldr	r1, [r7, #8]
 80010ac:	4816      	ldr	r0, [pc, #88]	@ (8001108 <decodeServerData+0xf0>)
 80010ae:	f00e fd60 	bl	800fb72 <memcpy>
            break;
 80010b2:	e020      	b.n	80010f6 <decodeServerData+0xde>
        case VOLTAGE:
            memcpy(serverAttributes.voltageData, payload, payloadLength);
 80010b4:	7bbb      	ldrb	r3, [r7, #14]
 80010b6:	461a      	mov	r2, r3
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	4814      	ldr	r0, [pc, #80]	@ (800110c <decodeServerData+0xf4>)
 80010bc:	f00e fd59 	bl	800fb72 <memcpy>
            break;
 80010c0:	e019      	b.n	80010f6 <decodeServerData+0xde>
        case RPM:
            memcpy(serverAttributes.rpm, payload, payloadLength);
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	461a      	mov	r2, r3
 80010c6:	68b9      	ldr	r1, [r7, #8]
 80010c8:	4811      	ldr	r0, [pc, #68]	@ (8001110 <decodeServerData+0xf8>)
 80010ca:	f00e fd52 	bl	800fb72 <memcpy>
            break;
 80010ce:	e012      	b.n	80010f6 <decodeServerData+0xde>
        case TEMPERATURE:
            memcpy(serverAttributes.temperature, payload, payloadLength);
 80010d0:	7bbb      	ldrb	r3, [r7, #14]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	480f      	ldr	r0, [pc, #60]	@ (8001114 <decodeServerData+0xfc>)
 80010d8:	f00e fd4b 	bl	800fb72 <memcpy>
            break;
 80010dc:	e00b      	b.n	80010f6 <decodeServerData+0xde>
        case NETWORK_STRENGTH:
            memcpy(serverAttributes.networkStrength, payload, payloadLength);
 80010de:	7bbb      	ldrb	r3, [r7, #14]
 80010e0:	461a      	mov	r2, r3
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <decodeServerData+0x100>)
 80010e6:	f00e fd44 	bl	800fb72 <memcpy>
            break;
 80010ea:	e004      	b.n	80010f6 <decodeServerData+0xde>
    if (length < 5) return; // Invalid packet length
 80010ec:	bf00      	nop
 80010ee:	e002      	b.n	80010f6 <decodeServerData+0xde>
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 80010f0:	bf00      	nop
 80010f2:	e000      	b.n	80010f6 <decodeServerData+0xde>
        default:
            // Unknown type
            break;
 80010f4:	bf00      	nop
    }
}
 80010f6:	3710      	adds	r7, #16
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	240008d8 	.word	0x240008d8
 8001100:	240008d9 	.word	0x240008d9
 8001104:	240008da 	.word	0x240008da
 8001108:	240008fa 	.word	0x240008fa
 800110c:	240008fc 	.word	0x240008fc
 8001110:	240008fe 	.word	0x240008fe
 8001114:	240008ff 	.word	0x240008ff
 8001118:	24000900 	.word	0x24000900

0800111c <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketSendData();
 8001124:	f7ff fdcc 	bl	8000cc0 <SocketSendData>
	  osDelay(20);
 8001128:	2014      	movs	r0, #20
 800112a:	f00b f98d 	bl	800c448 <osDelay>
	  SocketSendData();
 800112e:	bf00      	nop
 8001130:	e7f8      	b.n	8001124 <StartSendTask+0x8>

08001132 <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketReceiveData();
 800113a:	f7ff fe21 	bl	8000d80 <SocketReceiveData>
	  osDelay(20);
 800113e:	2014      	movs	r0, #20
 8001140:	f00b f982 	bl	800c448 <osDelay>
	  SocketReceiveData();
 8001144:	bf00      	nop
 8001146:	e7f8      	b.n	800113a <StartReceiveTask+0x8>

08001148 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
  /* Infinite loop */
  for(;;)
  {
	gps();
 8001150:	f7ff fbc4 	bl	80008dc <gps>
    osDelay(20);
 8001154:	2014      	movs	r0, #20
 8001156:	f00b f977 	bl	800c448 <osDelay>
	gps();
 800115a:	bf00      	nop
 800115c:	e7f8      	b.n	8001150 <StartGpsTask+0x8>
	...

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8001166:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800116a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800116c:	bf00      	nop
 800116e:	4b56      	ldr	r3, [pc, #344]	@ (80012c8 <main+0x168>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d004      	beq.n	8001184 <main+0x24>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	1e5a      	subs	r2, r3, #1
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dcf4      	bgt.n	800116e <main+0xe>
  if ( timeout < 0 )
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2b00      	cmp	r3, #0
 8001188:	da01      	bge.n	800118e <main+0x2e>
  {
  Error_Handler();
 800118a:	f000 fbfd 	bl	8001988 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f001 f81d 	bl	80021cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001192:	f000 f8bb 	bl	800130c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8001196:	4b4c      	ldr	r3, [pc, #304]	@ (80012c8 <main+0x168>)
 8001198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800119c:	4a4a      	ldr	r2, [pc, #296]	@ (80012c8 <main+0x168>)
 800119e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80011a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a6:	4b48      	ldr	r3, [pc, #288]	@ (80012c8 <main+0x168>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80011b4:	2000      	movs	r0, #0
 80011b6:	f004 f9db 	bl	8005570 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f004 f9f1 	bl	80055a4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80011c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80011c6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80011c8:	bf00      	nop
 80011ca:	4b3f      	ldr	r3, [pc, #252]	@ (80012c8 <main+0x168>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d104      	bne.n	80011e0 <main+0x80>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	1e5a      	subs	r2, r3, #1
 80011da:	607a      	str	r2, [r7, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	dcf4      	bgt.n	80011ca <main+0x6a>
if ( timeout < 0 )
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	da01      	bge.n	80011ea <main+0x8a>
{
Error_Handler();
 80011e6:	f000 fbcf 	bl	8001988 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ea:	f000 faeb 	bl	80017c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ee:	f000 fac9 	bl	8001784 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80011f2:	f000 fa7b 	bl	80016ec <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80011f6:	f000 f939 	bl	800146c <MX_TIM1_Init>
  MX_TIM4_Init();
 80011fa:	f000 fa05 	bl	8001608 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  // Initialize SIM7600
  NetworkInit();
 80011fe:	f7ff fbf5 	bl	80009ec <NetworkInit>

  // Open a socket
  OpenSocket();
 8001202:	f7ff fd15 	bl	8000c30 <OpenSocket>

  serverAttributes.immobilizeStatus[0] = 0x01;
 8001206:	4b31      	ldr	r3, [pc, #196]	@ (80012cc <main+0x16c>)
 8001208:	2201      	movs	r2, #1
 800120a:	701a      	strb	r2, [r3, #0]
  serverAttributes.rpmPreset[0] = 0x64;
 800120c:	4b2f      	ldr	r3, [pc, #188]	@ (80012cc <main+0x16c>)
 800120e:	2264      	movs	r2, #100	@ 0x64
 8001210:	705a      	strb	r2, [r3, #1]
  memset(serverAttributes.gpsData, 0x00, sizeof(serverAttributes.gpsData));
 8001212:	2220      	movs	r2, #32
 8001214:	2100      	movs	r1, #0
 8001216:	482e      	ldr	r0, [pc, #184]	@ (80012d0 <main+0x170>)
 8001218:	f00e fb47 	bl	800f8aa <memset>
  serverAttributes.currentData[0] = 0x12;
 800121c:	4b2b      	ldr	r3, [pc, #172]	@ (80012cc <main+0x16c>)
 800121e:	2212      	movs	r2, #18
 8001220:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  serverAttributes.currentData[1] = 0x34;
 8001224:	4b29      	ldr	r3, [pc, #164]	@ (80012cc <main+0x16c>)
 8001226:	2234      	movs	r2, #52	@ 0x34
 8001228:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  serverAttributes.voltageData[0] = 0x56;
 800122c:	4b27      	ldr	r3, [pc, #156]	@ (80012cc <main+0x16c>)
 800122e:	2256      	movs	r2, #86	@ 0x56
 8001230:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  serverAttributes.voltageData[1] = 0x78;
 8001234:	4b25      	ldr	r3, [pc, #148]	@ (80012cc <main+0x16c>)
 8001236:	2278      	movs	r2, #120	@ 0x78
 8001238:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  serverAttributes.rpm[0] = 0x32;
 800123c:	4b23      	ldr	r3, [pc, #140]	@ (80012cc <main+0x16c>)
 800123e:	2232      	movs	r2, #50	@ 0x32
 8001240:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  serverAttributes.temperature[0] = 0x20;
 8001244:	4b21      	ldr	r3, [pc, #132]	@ (80012cc <main+0x16c>)
 8001246:	2220      	movs	r2, #32
 8001248:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  serverAttributes.networkStrength[0] = 0x05;
 800124c:	4b1f      	ldr	r3, [pc, #124]	@ (80012cc <main+0x16c>)
 800124e:	2205      	movs	r2, #5
 8001250:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001254:	f00b f81c 	bl	800c290 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_lock */
  uart_lockHandle = osMutexNew(&uart_lock_attributes);
 8001258:	481e      	ldr	r0, [pc, #120]	@ (80012d4 <main+0x174>)
 800125a:	f00b f910 	bl	800c47e <osMutexNew>
 800125e:	4603      	mov	r3, r0
 8001260:	4a1d      	ldr	r2, [pc, #116]	@ (80012d8 <main+0x178>)
 8001262:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001264:	4a1d      	ldr	r2, [pc, #116]	@ (80012dc <main+0x17c>)
 8001266:	2100      	movs	r1, #0
 8001268:	481d      	ldr	r0, [pc, #116]	@ (80012e0 <main+0x180>)
 800126a:	f00b f85b 	bl	800c324 <osThreadNew>
 800126e:	4603      	mov	r3, r0
 8001270:	4a1c      	ldr	r2, [pc, #112]	@ (80012e4 <main+0x184>)
 8001272:	6013      	str	r3, [r2, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 8001274:	4a1c      	ldr	r2, [pc, #112]	@ (80012e8 <main+0x188>)
 8001276:	2100      	movs	r1, #0
 8001278:	481c      	ldr	r0, [pc, #112]	@ (80012ec <main+0x18c>)
 800127a:	f00b f853 	bl	800c324 <osThreadNew>
 800127e:	4603      	mov	r3, r0
 8001280:	4a1b      	ldr	r2, [pc, #108]	@ (80012f0 <main+0x190>)
 8001282:	6013      	str	r3, [r2, #0]

  /* creation of receiveTask */
  receiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &receiveTask_attributes);
 8001284:	4a1b      	ldr	r2, [pc, #108]	@ (80012f4 <main+0x194>)
 8001286:	2100      	movs	r1, #0
 8001288:	481b      	ldr	r0, [pc, #108]	@ (80012f8 <main+0x198>)
 800128a:	f00b f84b 	bl	800c324 <osThreadNew>
 800128e:	4603      	mov	r3, r0
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <main+0x19c>)
 8001292:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(StartGpsTask, NULL, &gpsTask_attributes);
 8001294:	4a1a      	ldr	r2, [pc, #104]	@ (8001300 <main+0x1a0>)
 8001296:	2100      	movs	r1, #0
 8001298:	481a      	ldr	r0, [pc, #104]	@ (8001304 <main+0x1a4>)
 800129a:	f00b f843 	bl	800c324 <osThreadNew>
 800129e:	4603      	mov	r3, r0
 80012a0:	4a19      	ldr	r2, [pc, #100]	@ (8001308 <main+0x1a8>)
 80012a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80012a4:	2000      	movs	r0, #0
 80012a6:	f000 fe85 	bl	8001fb4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80012aa:	2001      	movs	r0, #1
 80012ac:	f000 fe82 	bl	8001fb4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80012b0:	2002      	movs	r0, #2
 80012b2:	f000 fe7f 	bl	8001fb4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80012b6:	2101      	movs	r1, #1
 80012b8:	2000      	movs	r0, #0
 80012ba:	f000 fef1 	bl	80020a0 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 80012be:	f00b f80b 	bl	800c2d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012c2:	bf00      	nop
 80012c4:	e7fd      	b.n	80012c2 <main+0x162>
 80012c6:	bf00      	nop
 80012c8:	58024400 	.word	0x58024400
 80012cc:	240008d8 	.word	0x240008d8
 80012d0:	240008da 	.word	0x240008da
 80012d4:	08010d3c 	.word	0x08010d3c
 80012d8:	24000ab8 	.word	0x24000ab8
 80012dc:	08010cac 	.word	0x08010cac
 80012e0:	08001979 	.word	0x08001979
 80012e4:	24000aa8 	.word	0x24000aa8
 80012e8:	08010cd0 	.word	0x08010cd0
 80012ec:	0800111d 	.word	0x0800111d
 80012f0:	24000aac 	.word	0x24000aac
 80012f4:	08010cf4 	.word	0x08010cf4
 80012f8:	08001133 	.word	0x08001133
 80012fc:	24000ab0 	.word	0x24000ab0
 8001300:	08010d18 	.word	0x08010d18
 8001304:	08001149 	.word	0x08001149
 8001308:	24000ab4 	.word	0x24000ab4

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b09e      	sub	sp, #120	@ 0x78
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001316:	224c      	movs	r2, #76	@ 0x4c
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f00e fac5 	bl	800f8aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 030c 	add.w	r3, r7, #12
 8001324:	2220      	movs	r2, #32
 8001326:	2100      	movs	r1, #0
 8001328:	4618      	mov	r0, r3
 800132a:	f00e fabe 	bl	800f8aa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800132e:	2002      	movs	r0, #2
 8001330:	f004 f94c 	bl	80055cc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
 8001338:	4b49      	ldr	r3, [pc, #292]	@ (8001460 <SystemClock_Config+0x154>)
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	4a48      	ldr	r2, [pc, #288]	@ (8001460 <SystemClock_Config+0x154>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001344:	4b46      	ldr	r3, [pc, #280]	@ (8001460 <SystemClock_Config+0x154>)
 8001346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	60bb      	str	r3, [r7, #8]
 800134e:	4b45      	ldr	r3, [pc, #276]	@ (8001464 <SystemClock_Config+0x158>)
 8001350:	699b      	ldr	r3, [r3, #24]
 8001352:	4a44      	ldr	r2, [pc, #272]	@ (8001464 <SystemClock_Config+0x158>)
 8001354:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001358:	6193      	str	r3, [r2, #24]
 800135a:	4b42      	ldr	r3, [pc, #264]	@ (8001464 <SystemClock_Config+0x158>)
 800135c:	699b      	ldr	r3, [r3, #24]
 800135e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001362:	60bb      	str	r3, [r7, #8]
 8001364:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001366:	bf00      	nop
 8001368:	4b3e      	ldr	r3, [pc, #248]	@ (8001464 <SystemClock_Config+0x158>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001370:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001374:	d1f8      	bne.n	8001368 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001376:	4b3c      	ldr	r3, [pc, #240]	@ (8001468 <SystemClock_Config+0x15c>)
 8001378:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800137c:	4a3a      	ldr	r2, [pc, #232]	@ (8001468 <SystemClock_Config+0x15c>)
 800137e:	f043 0302 	orr.w	r3, r3, #2
 8001382:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001386:	4b38      	ldr	r3, [pc, #224]	@ (8001468 <SystemClock_Config+0x15c>)
 8001388:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	607b      	str	r3, [r7, #4]
 8001392:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001394:	2300      	movs	r3, #0
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	4b32      	ldr	r3, [pc, #200]	@ (8001464 <SystemClock_Config+0x158>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	4a31      	ldr	r2, [pc, #196]	@ (8001464 <SystemClock_Config+0x158>)
 800139e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013a2:	6193      	str	r3, [r2, #24]
 80013a4:	4b2f      	ldr	r3, [pc, #188]	@ (8001464 <SystemClock_Config+0x158>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013ac:	603b      	str	r3, [r7, #0]
 80013ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001460 <SystemClock_Config+0x154>)
 80013b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013b2:	4a2b      	ldr	r2, [pc, #172]	@ (8001460 <SystemClock_Config+0x154>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013ba:	4b29      	ldr	r3, [pc, #164]	@ (8001460 <SystemClock_Config+0x154>)
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	603b      	str	r3, [r7, #0]
 80013c4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80013c6:	bf00      	nop
 80013c8:	4b26      	ldr	r3, [pc, #152]	@ (8001464 <SystemClock_Config+0x158>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80013d4:	d1f8      	bne.n	80013c8 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013d6:	2302      	movs	r3, #2
 80013d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80013da:	2301      	movs	r3, #1
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013de:	2340      	movs	r3, #64	@ 0x40
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e2:	2302      	movs	r3, #2
 80013e4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013e6:	2300      	movs	r3, #0
 80013e8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013ea:	2304      	movs	r3, #4
 80013ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 80013ee:	233c      	movs	r3, #60	@ 0x3c
 80013f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 80013f2:	2302      	movs	r3, #2
 80013f4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80013f6:	2305      	movs	r3, #5
 80013f8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013fa:	2302      	movs	r3, #2
 80013fc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80013fe:	230c      	movs	r3, #12
 8001400:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001402:	2300      	movs	r3, #0
 8001404:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800140a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800140e:	4618      	mov	r0, r3
 8001410:	f004 f936 	bl	8005680 <HAL_RCC_OscConfig>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <SystemClock_Config+0x112>
  {
    Error_Handler();
 800141a:	f000 fab5 	bl	8001988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800141e:	233f      	movs	r3, #63	@ 0x3f
 8001420:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001422:	2303      	movs	r3, #3
 8001424:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001426:	2300      	movs	r3, #0
 8001428:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800142a:	2308      	movs	r3, #8
 800142c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800142e:	2340      	movs	r3, #64	@ 0x40
 8001430:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001432:	2340      	movs	r3, #64	@ 0x40
 8001434:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001436:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800143c:	2340      	movs	r3, #64	@ 0x40
 800143e:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001440:	f107 030c 	add.w	r3, r7, #12
 8001444:	2104      	movs	r1, #4
 8001446:	4618      	mov	r0, r3
 8001448:	f004 fd74 	bl	8005f34 <HAL_RCC_ClockConfig>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001452:	f000 fa99 	bl	8001988 <Error_Handler>
  }
}
 8001456:	bf00      	nop
 8001458:	3778      	adds	r7, #120	@ 0x78
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	58000400 	.word	0x58000400
 8001464:	58024800 	.word	0x58024800
 8001468:	58024400 	.word	0x58024400

0800146c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b09a      	sub	sp, #104	@ 0x68
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001472:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001480:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001484:	2200      	movs	r2, #0
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	605a      	str	r2, [r3, #4]
 800148a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	222c      	movs	r2, #44	@ 0x2c
 80014a4:	2100      	movs	r1, #0
 80014a6:	4618      	mov	r0, r3
 80014a8:	f00e f9ff 	bl	800f8aa <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014ac:	4b54      	ldr	r3, [pc, #336]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014ae:	4a55      	ldr	r2, [pc, #340]	@ (8001604 <MX_TIM1_Init+0x198>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80014b2:	4b53      	ldr	r3, [pc, #332]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014b8:	4b51      	ldr	r3, [pc, #324]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014ba:	2220      	movs	r2, #32
 80014bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000-1;
 80014be:	4b50      	ldr	r3, [pc, #320]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014c0:	f247 522f 	movw	r2, #29999	@ 0x752f
 80014c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b4e      	ldr	r3, [pc, #312]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014cc:	4b4c      	ldr	r3, [pc, #304]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014d2:	4b4b      	ldr	r3, [pc, #300]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014d8:	4849      	ldr	r0, [pc, #292]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014da:	f006 ff25 	bl	8008328 <HAL_TIM_Base_Init>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80014e4:	f000 fa50 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014ec:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80014ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80014f2:	4619      	mov	r1, r3
 80014f4:	4842      	ldr	r0, [pc, #264]	@ (8001600 <MX_TIM1_Init+0x194>)
 80014f6:	f007 fd49 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001500:	f000 fa42 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001504:	483e      	ldr	r0, [pc, #248]	@ (8001600 <MX_TIM1_Init+0x194>)
 8001506:	f007 f840 	bl	800858a <HAL_TIM_PWM_Init>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001510:	f000 fa3a 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001514:	483a      	ldr	r0, [pc, #232]	@ (8001600 <MX_TIM1_Init+0x194>)
 8001516:	f006 ffd7 	bl	80084c8 <HAL_TIM_OC_Init>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8001520:	f000 fa32 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001524:	2300      	movs	r3, #0
 8001526:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001530:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001534:	4619      	mov	r1, r3
 8001536:	4832      	ldr	r0, [pc, #200]	@ (8001600 <MX_TIM1_Init+0x194>)
 8001538:	f008 fc74 	bl	8009e24 <HAL_TIMEx_MasterConfigSynchronization>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM1_Init+0xda>
  {
    Error_Handler();
 8001542:	f000 fa21 	bl	8001988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001546:	2360      	movs	r3, #96	@ 0x60
 8001548:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800154e:	2300      	movs	r3, #0
 8001550:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001552:	2308      	movs	r3, #8
 8001554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800155a:	2300      	movs	r3, #0
 800155c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800155e:	2300      	movs	r3, #0
 8001560:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001562:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001566:	2200      	movs	r2, #0
 8001568:	4619      	mov	r1, r3
 800156a:	4825      	ldr	r0, [pc, #148]	@ (8001600 <MX_TIM1_Init+0x194>)
 800156c:	f007 fbfa 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001576:	f000 fa07 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800157a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800157e:	2204      	movs	r2, #4
 8001580:	4619      	mov	r1, r3
 8001582:	481f      	ldr	r0, [pc, #124]	@ (8001600 <MX_TIM1_Init+0x194>)
 8001584:	f007 fbee 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800158e:	f000 f9fb 	bl	8001988 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001592:	2300      	movs	r3, #0
 8001594:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001596:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800159a:	2208      	movs	r2, #8
 800159c:	4619      	mov	r1, r3
 800159e:	4818      	ldr	r0, [pc, #96]	@ (8001600 <MX_TIM1_Init+0x194>)
 80015a0:	f007 faca 	bl	8008b38 <HAL_TIM_OC_ConfigChannel>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80015aa:	f000 f9ed 	bl	8001988 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015c8:	2300      	movs	r3, #0
 80015ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015d0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4619      	mov	r1, r3
 80015e2:	4807      	ldr	r0, [pc, #28]	@ (8001600 <MX_TIM1_Init+0x194>)
 80015e4:	f008 fcac 	bl	8009f40 <HAL_TIMEx_ConfigBreakDeadTime>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80015ee:	f000 f9cb 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015f2:	4803      	ldr	r0, [pc, #12]	@ (8001600 <MX_TIM1_Init+0x194>)
 80015f4:	f000 fa56 	bl	8001aa4 <HAL_TIM_MspPostInit>

}
 80015f8:	bf00      	nop
 80015fa:	3768      	adds	r7, #104	@ 0x68
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	24000904 	.word	0x24000904
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08c      	sub	sp, #48	@ 0x30
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0320 	add.w	r3, r7, #32
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001634:	4b2b      	ldr	r3, [pc, #172]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001636:	4a2c      	ldr	r2, [pc, #176]	@ (80016e8 <MX_TIM4_Init+0xe0>)
 8001638:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 800163a:	4b2a      	ldr	r3, [pc, #168]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 800163c:	22c7      	movs	r2, #199	@ 0xc7
 800163e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b28      	ldr	r3, [pc, #160]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8001646:	4b27      	ldr	r3, [pc, #156]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001648:	f242 720f 	movw	r2, #9999	@ 0x270f
 800164c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b25      	ldr	r3, [pc, #148]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b23      	ldr	r3, [pc, #140]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800165a:	4822      	ldr	r0, [pc, #136]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 800165c:	f006 fe64 	bl	8008328 <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001666:	f000 f98f 	bl	8001988 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800166e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0320 	add.w	r3, r7, #32
 8001674:	4619      	mov	r1, r3
 8001676:	481b      	ldr	r0, [pc, #108]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001678:	f007 fc88 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001682:	f000 f981 	bl	8001988 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001686:	4817      	ldr	r0, [pc, #92]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 8001688:	f007 f8ee 	bl	8008868 <HAL_TIM_IC_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8001692:	f000 f979 	bl	8001988 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001696:	2300      	movs	r3, #0
 8001698:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800169a:	2300      	movs	r3, #0
 800169c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800169e:	f107 0314 	add.w	r3, r7, #20
 80016a2:	4619      	mov	r1, r3
 80016a4:	480f      	ldr	r0, [pc, #60]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 80016a6:	f008 fbbd 	bl	8009e24 <HAL_TIMEx_MasterConfigSynchronization>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM4_Init+0xac>
  {
    Error_Handler();
 80016b0:	f000 f96a 	bl	8001988 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80016b8:	2301      	movs	r3, #1
 80016ba:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80016c0:	2300      	movs	r3, #0
 80016c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80016c4:	1d3b      	adds	r3, r7, #4
 80016c6:	2200      	movs	r2, #0
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	@ (80016e4 <MX_TIM4_Init+0xdc>)
 80016cc:	f007 faae 	bl	8008c2c <HAL_TIM_IC_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0xd2>
  {
    Error_Handler();
 80016d6:	f000 f957 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80016da:	bf00      	nop
 80016dc:	3730      	adds	r7, #48	@ 0x30
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	24000950 	.word	0x24000950
 80016e8:	40000800 	.word	0x40000800

080016ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016f0:	4b22      	ldr	r3, [pc, #136]	@ (800177c <MX_USART1_UART_Init+0x90>)
 80016f2:	4a23      	ldr	r2, [pc, #140]	@ (8001780 <MX_USART1_UART_Init+0x94>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016f6:	4b21      	ldr	r3, [pc, #132]	@ (800177c <MX_USART1_UART_Init+0x90>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b1f      	ldr	r3, [pc, #124]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b1d      	ldr	r3, [pc, #116]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800170a:	4b1c      	ldr	r3, [pc, #112]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b1a      	ldr	r3, [pc, #104]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b19      	ldr	r3, [pc, #100]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b17      	ldr	r3, [pc, #92]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b16      	ldr	r3, [pc, #88]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001728:	4b14      	ldr	r3, [pc, #80]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172e:	4b13      	ldr	r3, [pc, #76]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001730:	2200      	movs	r2, #0
 8001732:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001734:	4811      	ldr	r0, [pc, #68]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001736:	f008 fcc4 	bl	800a0c2 <HAL_UART_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001740:	f000 f922 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001744:	2100      	movs	r1, #0
 8001746:	480d      	ldr	r0, [pc, #52]	@ (800177c <MX_USART1_UART_Init+0x90>)
 8001748:	f00a fc3f 	bl	800bfca <HAL_UARTEx_SetTxFifoThreshold>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001752:	f000 f919 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001756:	2100      	movs	r1, #0
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800175a:	f00a fc74 	bl	800c046 <HAL_UARTEx_SetRxFifoThreshold>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001764:	f000 f910 	bl	8001988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001768:	4804      	ldr	r0, [pc, #16]	@ (800177c <MX_USART1_UART_Init+0x90>)
 800176a:	f00a fbf5 	bl	800bf58 <HAL_UARTEx_DisableFifoMode>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001774:	f000 f908 	bl	8001988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}
 800177c:	2400099c 	.word	0x2400099c
 8001780:	40011000 	.word	0x40011000

08001784 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800178a:	4b0d      	ldr	r3, [pc, #52]	@ (80017c0 <MX_DMA_Init+0x3c>)
 800178c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001790:	4a0b      	ldr	r2, [pc, #44]	@ (80017c0 <MX_DMA_Init+0x3c>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <MX_DMA_Init+0x3c>)
 800179c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	607b      	str	r3, [r7, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80017a8:	2200      	movs	r2, #0
 80017aa:	2105      	movs	r1, #5
 80017ac:	200b      	movs	r0, #11
 80017ae:	f000 fe2d 	bl	800240c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80017b2:	200b      	movs	r0, #11
 80017b4:	f000 fe44 	bl	8002440 <HAL_NVIC_EnableIRQ>

}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	58024400 	.word	0x58024400

080017c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b08c      	sub	sp, #48	@ 0x30
 80017c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ca:	f107 031c 	add.w	r3, r7, #28
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
 80017d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017da:	4b61      	ldr	r3, [pc, #388]	@ (8001960 <MX_GPIO_Init+0x19c>)
 80017dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001960 <MX_GPIO_Init+0x19c>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001960 <MX_GPIO_Init+0x19c>)
 80017ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f8:	4b59      	ldr	r3, [pc, #356]	@ (8001960 <MX_GPIO_Init+0x19c>)
 80017fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017fe:	4a58      	ldr	r2, [pc, #352]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001808:	4b55      	ldr	r3, [pc, #340]	@ (8001960 <MX_GPIO_Init+0x19c>)
 800180a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	617b      	str	r3, [r7, #20]
 8001814:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001816:	4b52      	ldr	r3, [pc, #328]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001818:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800181c:	4a50      	ldr	r2, [pc, #320]	@ (8001960 <MX_GPIO_Init+0x19c>)
 800181e:	f043 0310 	orr.w	r3, r3, #16
 8001822:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001826:	4b4e      	ldr	r3, [pc, #312]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001828:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	4b4a      	ldr	r3, [pc, #296]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001836:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800183a:	4a49      	ldr	r2, [pc, #292]	@ (8001960 <MX_GPIO_Init+0x19c>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001844:	4b46      	ldr	r3, [pc, #280]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001846:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001852:	4b43      	ldr	r3, [pc, #268]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001858:	4a41      	ldr	r2, [pc, #260]	@ (8001960 <MX_GPIO_Init+0x19c>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001862:	4b3f      	ldr	r3, [pc, #252]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001868:	f003 0308 	and.w	r3, r3, #8
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001870:	4b3b      	ldr	r3, [pc, #236]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001876:	4a3a      	ldr	r2, [pc, #232]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001878:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800187c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001880:	4b37      	ldr	r3, [pc, #220]	@ (8001960 <MX_GPIO_Init+0x19c>)
 8001882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800188e:	2332      	movs	r3, #50	@ 0x32
 8001890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001892:	2302      	movs	r3, #2
 8001894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189a:	2300      	movs	r3, #0
 800189c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800189e:	230b      	movs	r3, #11
 80018a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	482e      	ldr	r0, [pc, #184]	@ (8001964 <MX_GPIO_Init+0x1a0>)
 80018aa:	f003 fc97 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80018ae:	2386      	movs	r3, #134	@ 0x86
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b2:	2302      	movs	r3, #2
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ba:	2300      	movs	r3, #0
 80018bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018be:	230b      	movs	r3, #11
 80018c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	4619      	mov	r1, r3
 80018c8:	4827      	ldr	r0, [pc, #156]	@ (8001968 <MX_GPIO_Init+0x1a4>)
 80018ca:	f003 fc87 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018e0:	230b      	movs	r3, #11
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e4:	f107 031c 	add.w	r3, r7, #28
 80018e8:	4619      	mov	r1, r3
 80018ea:	4820      	ldr	r0, [pc, #128]	@ (800196c <MX_GPIO_Init+0x1a8>)
 80018ec:	f003 fc76 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80018f0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f6:	2302      	movs	r3, #2
 80018f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	2300      	movs	r3, #0
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fe:	2300      	movs	r3, #0
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001902:	2307      	movs	r3, #7
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001906:	f107 031c 	add.w	r3, r7, #28
 800190a:	4619      	mov	r1, r3
 800190c:	4818      	ldr	r0, [pc, #96]	@ (8001970 <MX_GPIO_Init+0x1ac>)
 800190e:	f003 fc65 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001912:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8001916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001920:	2300      	movs	r3, #0
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001924:	230a      	movs	r3, #10
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 031c 	add.w	r3, r7, #28
 800192c:	4619      	mov	r1, r3
 800192e:	480e      	ldr	r0, [pc, #56]	@ (8001968 <MX_GPIO_Init+0x1a4>)
 8001930:	f003 fc54 	bl	80051dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001934:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193a:	2302      	movs	r3, #2
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193e:	2300      	movs	r3, #0
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001942:	2300      	movs	r3, #0
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001946:	230b      	movs	r3, #11
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800194a:	f107 031c 	add.w	r3, r7, #28
 800194e:	4619      	mov	r1, r3
 8001950:	4808      	ldr	r0, [pc, #32]	@ (8001974 <MX_GPIO_Init+0x1b0>)
 8001952:	f003 fc43 	bl	80051dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001956:	bf00      	nop
 8001958:	3730      	adds	r7, #48	@ 0x30
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	58024400 	.word	0x58024400
 8001964:	58020800 	.word	0x58020800
 8001968:	58020000 	.word	0x58020000
 800196c:	58020400 	.word	0x58020400
 8001970:	58020c00 	.word	0x58020c00
 8001974:	58021800 	.word	0x58021800

08001978 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001980:	2001      	movs	r0, #1
 8001982:	f00a fd61 	bl	800c448 <osDelay>
 8001986:	e7fb      	b.n	8001980 <StartDefaultTask+0x8>

08001988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800198c:	b672      	cpsid	i
}
 800198e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001990:	bf00      	nop
 8001992:	e7fd      	b.n	8001990 <Error_Handler+0x8>

08001994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <HAL_MspInit+0x38>)
 800199c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019a0:	4a0a      	ldr	r2, [pc, #40]	@ (80019cc <HAL_MspInit+0x38>)
 80019a2:	f043 0302 	orr.w	r3, r3, #2
 80019a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019aa:	4b08      	ldr	r3, [pc, #32]	@ (80019cc <HAL_MspInit+0x38>)
 80019ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019b8:	2200      	movs	r2, #0
 80019ba:	210f      	movs	r1, #15
 80019bc:	f06f 0001 	mvn.w	r0, #1
 80019c0:	f000 fd24 	bl	800240c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019c4:	bf00      	nop
 80019c6:	3708      	adds	r7, #8
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	58024400 	.word	0x58024400

080019d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b08a      	sub	sp, #40	@ 0x28
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d8:	f107 0314 	add.w	r3, r7, #20
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a29      	ldr	r2, [pc, #164]	@ (8001a94 <HAL_TIM_Base_MspInit+0xc4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d10f      	bne.n	8001a12 <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019f2:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 80019f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80019f8:	4a27      	ldr	r2, [pc, #156]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a02:	4b25      	ldr	r3, [pc, #148]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001a10:	e03b      	b.n	8001a8a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a21      	ldr	r2, [pc, #132]	@ (8001a9c <HAL_TIM_Base_MspInit+0xcc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d136      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a22:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a24:	f043 0304 	orr.w	r3, r3, #4
 8001a28:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a32:	f003 0304 	and.w	r3, r3, #4
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3a:	4b17      	ldr	r3, [pc, #92]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a40:	4a15      	ldr	r2, [pc, #84]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a42:	f043 0308 	orr.w	r3, r3, #8
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a4a:	4b13      	ldr	r3, [pc, #76]	@ (8001a98 <HAL_TIM_Base_MspInit+0xc8>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a50:	f003 0308 	and.w	r3, r3, #8
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	480a      	ldr	r0, [pc, #40]	@ (8001aa0 <HAL_TIM_Base_MspInit+0xd0>)
 8001a76:	f003 fbb1 	bl	80051dc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2105      	movs	r1, #5
 8001a7e:	201e      	movs	r0, #30
 8001a80:	f000 fcc4 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a84:	201e      	movs	r0, #30
 8001a86:	f000 fcdb 	bl	8002440 <HAL_NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3728      	adds	r7, #40	@ 0x28
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000
 8001a98:	58024400 	.word	0x58024400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	58020c00 	.word	0x58020c00

08001aa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aac:	f107 030c 	add.w	r3, r7, #12
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	601a      	str	r2, [r3, #0]
 8001ab4:	605a      	str	r2, [r3, #4]
 8001ab6:	609a      	str	r2, [r3, #8]
 8001ab8:	60da      	str	r2, [r3, #12]
 8001aba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a13      	ldr	r2, [pc, #76]	@ (8001b10 <HAL_TIM_MspPostInit+0x6c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d11f      	bne.n	8001b06 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac6:	4b13      	ldr	r3, [pc, #76]	@ (8001b14 <HAL_TIM_MspPostInit+0x70>)
 8001ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001acc:	4a11      	ldr	r2, [pc, #68]	@ (8001b14 <HAL_TIM_MspPostInit+0x70>)
 8001ace:	f043 0310 	orr.w	r3, r3, #16
 8001ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <HAL_TIM_MspPostInit+0x70>)
 8001ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001adc:	f003 0310 	and.w	r3, r3, #16
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	68bb      	ldr	r3, [r7, #8]
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE12     ------> TIM1_CH3N
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001ae4:	f44f 537c 	mov.w	r3, #16128	@ 0x3f00
 8001ae8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aea:	2302      	movs	r3, #2
 8001aec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af6:	2301      	movs	r3, #1
 8001af8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001afa:	f107 030c 	add.w	r3, r7, #12
 8001afe:	4619      	mov	r1, r3
 8001b00:	4805      	ldr	r0, [pc, #20]	@ (8001b18 <HAL_TIM_MspPostInit+0x74>)
 8001b02:	f003 fb6b 	bl	80051dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b06:	bf00      	nop
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	40010000 	.word	0x40010000
 8001b14:	58024400 	.word	0x58024400
 8001b18:	58021000 	.word	0x58021000

08001b1c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b34:	f107 0310 	add.w	r3, r7, #16
 8001b38:	22c0      	movs	r2, #192	@ 0xc0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f00d feb4 	bl	800f8aa <memset>
  if(huart->Instance==USART1)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a42      	ldr	r2, [pc, #264]	@ (8001c50 <HAL_UART_MspInit+0x134>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d17c      	bne.n	8001c46 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b4c:	f04f 0201 	mov.w	r2, #1
 8001b50:	f04f 0300 	mov.w	r3, #0
 8001b54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b5e:	f107 0310 	add.w	r3, r7, #16
 8001b62:	4618      	mov	r0, r3
 8001b64:	f004 fdb4 	bl	80066d0 <HAL_RCCEx_PeriphCLKConfig>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b6e:	f7ff ff0b 	bl	8001988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b72:	4b38      	ldr	r3, [pc, #224]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b78:	4a36      	ldr	r2, [pc, #216]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001b7a:	f043 0310 	orr.w	r3, r3, #16
 8001b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b82:	4b34      	ldr	r3, [pc, #208]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001b84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b90:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b96:	4a2f      	ldr	r2, [pc, #188]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001b98:	f043 0302 	orr.w	r3, r3, #2
 8001b9c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c54 <HAL_UART_MspInit+0x138>)
 8001ba2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bae:	23c0      	movs	r3, #192	@ 0xc0
 8001bb0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bcc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4821      	ldr	r0, [pc, #132]	@ (8001c58 <HAL_UART_MspInit+0x13c>)
 8001bd4:	f003 fb02 	bl	80051dc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001bd8:	4b20      	ldr	r3, [pc, #128]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001bda:	4a21      	ldr	r2, [pc, #132]	@ (8001c60 <HAL_UART_MspInit+0x144>)
 8001bdc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001bde:	4b1f      	ldr	r3, [pc, #124]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001be0:	2229      	movs	r2, #41	@ 0x29
 8001be2:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bea:	4b1c      	ldr	r3, [pc, #112]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bf0:	4b1a      	ldr	r3, [pc, #104]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001bf2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf8:	4b18      	ldr	r3, [pc, #96]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfe:	4b17      	ldr	r3, [pc, #92]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c04:	4b15      	ldr	r3, [pc, #84]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c18:	4810      	ldr	r0, [pc, #64]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c1a:	f000 fc33 	bl	8002484 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c24:	f7ff feb0 	bl	8001988 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c30:	4a0a      	ldr	r2, [pc, #40]	@ (8001c5c <HAL_UART_MspInit+0x140>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2105      	movs	r1, #5
 8001c3a:	2025      	movs	r0, #37	@ 0x25
 8001c3c:	f000 fbe6 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c40:	2025      	movs	r0, #37	@ 0x25
 8001c42:	f000 fbfd 	bl	8002440 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c46:	bf00      	nop
 8001c48:	37e8      	adds	r7, #232	@ 0xe8
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	40011000 	.word	0x40011000
 8001c54:	58024400 	.word	0x58024400
 8001c58:	58020400 	.word	0x58020400
 8001c5c:	24000a30 	.word	0x24000a30
 8001c60:	40020010 	.word	0x40020010

08001c64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b090      	sub	sp, #64	@ 0x40
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b0f      	cmp	r3, #15
 8001c70:	d827      	bhi.n	8001cc2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c72:	2200      	movs	r2, #0
 8001c74:	6879      	ldr	r1, [r7, #4]
 8001c76:	2036      	movs	r0, #54	@ 0x36
 8001c78:	f000 fbc8 	bl	800240c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c7c:	2036      	movs	r0, #54	@ 0x36
 8001c7e:	f000 fbdf 	bl	8002440 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001c82:	4a29      	ldr	r2, [pc, #164]	@ (8001d28 <HAL_InitTick+0xc4>)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001c88:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_InitTick+0xc8>)
 8001c8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c8e:	4a27      	ldr	r2, [pc, #156]	@ (8001d2c <HAL_InitTick+0xc8>)
 8001c90:	f043 0310 	orr.w	r3, r3, #16
 8001c94:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c98:	4b24      	ldr	r3, [pc, #144]	@ (8001d2c <HAL_InitTick+0xc8>)
 8001c9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ca6:	f107 0210 	add.w	r2, r7, #16
 8001caa:	f107 0314 	add.w	r3, r7, #20
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f004 fccb 	bl	800664c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d106      	bne.n	8001cce <HAL_InitTick+0x6a>
 8001cc0:	e001      	b.n	8001cc6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e02b      	b.n	8001d1e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001cc6:	f004 fc95 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 8001cca:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001ccc:	e004      	b.n	8001cd8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cce:	f004 fc91 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <HAL_InitTick+0xcc>)
 8001cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ce0:	0c9b      	lsrs	r3, r3, #18
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001ce6:	4b13      	ldr	r3, [pc, #76]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001ce8:	4a13      	ldr	r2, [pc, #76]	@ (8001d38 <HAL_InitTick+0xd4>)
 8001cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001cee:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d06:	480b      	ldr	r0, [pc, #44]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001d08:	f006 fb0e 	bl	8008328 <HAL_TIM_Base_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d104      	bne.n	8001d1c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d12:	4808      	ldr	r0, [pc, #32]	@ (8001d34 <HAL_InitTick+0xd0>)
 8001d14:	f006 fb60 	bl	80083d8 <HAL_TIM_Base_Start_IT>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	e000      	b.n	8001d1e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3740      	adds	r7, #64	@ 0x40
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	24000148 	.word	0x24000148
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	431bde83 	.word	0x431bde83
 8001d34:	24000abc 	.word	0x24000abc
 8001d38:	40001000 	.word	0x40001000

08001d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d40:	bf00      	nop
 8001d42:	e7fd      	b.n	8001d40 <NMI_Handler+0x4>

08001d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d48:	bf00      	nop
 8001d4a:	e7fd      	b.n	8001d48 <HardFault_Handler+0x4>

08001d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <MemManage_Handler+0x4>

08001d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d58:	bf00      	nop
 8001d5a:	e7fd      	b.n	8001d58 <BusFault_Handler+0x4>

08001d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <UsageFault_Handler+0x4>

08001d64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d68:	bf00      	nop
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
	...

08001d74 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d78:	4802      	ldr	r0, [pc, #8]	@ (8001d84 <DMA1_Stream0_IRQHandler+0x10>)
 8001d7a:	f001 fead 	bl	8003ad8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	24000a30 	.word	0x24000a30

08001d88 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d8c:	4802      	ldr	r0, [pc, #8]	@ (8001d98 <TIM4_IRQHandler+0x10>)
 8001d8e:	f006 fdcc 	bl	800892a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	24000950 	.word	0x24000950

08001d9c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001da0:	4802      	ldr	r0, [pc, #8]	@ (8001dac <USART1_IRQHandler+0x10>)
 8001da2:	f008 fb35 	bl	800a410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2400099c 	.word	0x2400099c

08001db0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001db4:	2000      	movs	r0, #0
 8001db6:	f000 f9e5 	bl	8002184 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
	...

08001dc0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001dc4:	4802      	ldr	r0, [pc, #8]	@ (8001dd0 <TIM6_DAC_IRQHandler+0x10>)
 8001dc6:	f006 fdb0 	bl	800892a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	24000abc 	.word	0x24000abc

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dee:	f00d fe93 	bl	800fb18 <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e16:	bf00      	nop
 8001e18:	e7fd      	b.n	8001e16 <_exit+0x12>

08001e1a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e26:	2300      	movs	r3, #0
 8001e28:	617b      	str	r3, [r7, #20]
 8001e2a:	e00a      	b.n	8001e42 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2c:	f3af 8000 	nop.w
 8001e30:	4601      	mov	r1, r0
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	1c5a      	adds	r2, r3, #1
 8001e36:	60ba      	str	r2, [r7, #8]
 8001e38:	b2ca      	uxtb	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	dbf0      	blt.n	8001e2c <_read+0x12>
  }

  return len;
 8001e4a:	687b      	ldr	r3, [r7, #4]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	e009      	b.n	8001e7a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60ba      	str	r2, [r7, #8]
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	3301      	adds	r3, #1
 8001e78:	617b      	str	r3, [r7, #20]
 8001e7a:	697a      	ldr	r2, [r7, #20]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dbf1      	blt.n	8001e66 <_write+0x12>
  }
  return len;
 8001e82:	687b      	ldr	r3, [r7, #4]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3718      	adds	r7, #24
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <_close>:

int _close(int file)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb4:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_isatty>:

int _isatty(int file)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ecc:	2301      	movs	r3, #1
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	60b9      	str	r1, [r7, #8]
 8001ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	@ (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	@ (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	@ (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	@ (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	@ (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f00d fdf8 	bl	800fb18 <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	@ (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	24080000 	.word	0x24080000
 8001f54:	00000400 	.word	0x00000400
 8001f58:	24000b08 	.word	0x24000b08
 8001f5c:	24005650 	.word	0x24005650

08001f60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001f98 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f64:	f7fe fb8c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f68:	480c      	ldr	r0, [pc, #48]	@ (8001f9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f6a:	490d      	ldr	r1, [pc, #52]	@ (8001fa0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fa4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f70:	e002      	b.n	8001f78 <LoopCopyDataInit>

08001f72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f76:	3304      	adds	r3, #4

08001f78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f7c:	d3f9      	bcc.n	8001f72 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f80:	4c0a      	ldr	r4, [pc, #40]	@ (8001fac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f84:	e001      	b.n	8001f8a <LoopFillZerobss>

08001f86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f88:	3204      	adds	r2, #4

08001f8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f8c:	d3fb      	bcc.n	8001f86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f8e:	f00d fdc9 	bl	800fb24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f92:	f7ff f8e5 	bl	8001160 <main>
  bx  lr
 8001f96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f98:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f9c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fa0:	240001b0 	.word	0x240001b0
  ldr r2, =_sidata
 8001fa4:	08010e78 	.word	0x08010e78
  ldr r2, =_sbss
 8001fa8:	240001b0 	.word	0x240001b0
  ldr r4, =_ebss
 8001fac:	2400564c 	.word	0x2400564c

08001fb0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb0:	e7fe      	b.n	8001fb0 <ADC3_IRQHandler>
	...

08001fb4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08c      	sub	sp, #48	@ 0x30
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <BSP_LED_Init+0x28>
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d006      	beq.n	8001fdc <BSP_LED_Init+0x28>
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d003      	beq.n	8001fdc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001fd4:	f06f 0301 	mvn.w	r3, #1
 8001fd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fda:	e055      	b.n	8002088 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <BSP_LED_Init+0xe0>)
 8001fe4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8002094 <BSP_LED_Init+0xe0>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ff2:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <BSP_LED_Init+0xe0>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	617b      	str	r3, [r7, #20]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	e021      	b.n	8002046 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002002:	79fb      	ldrb	r3, [r7, #7]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d10f      	bne.n	8002028 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002008:	4b22      	ldr	r3, [pc, #136]	@ (8002094 <BSP_LED_Init+0xe0>)
 800200a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200e:	4a21      	ldr	r2, [pc, #132]	@ (8002094 <BSP_LED_Init+0xe0>)
 8002010:	f043 0310 	orr.w	r3, r3, #16
 8002014:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002018:	4b1e      	ldr	r3, [pc, #120]	@ (8002094 <BSP_LED_Init+0xe0>)
 800201a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201e:	f003 0310 	and.w	r3, r3, #16
 8002022:	613b      	str	r3, [r7, #16]
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	e00e      	b.n	8002046 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002028:	4b1a      	ldr	r3, [pc, #104]	@ (8002094 <BSP_LED_Init+0xe0>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202e:	4a19      	ldr	r2, [pc, #100]	@ (8002094 <BSP_LED_Init+0xe0>)
 8002030:	f043 0302 	orr.w	r3, r3, #2
 8002034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002038:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <BSP_LED_Init+0xe0>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	4a13      	ldr	r2, [pc, #76]	@ (8002098 <BSP_LED_Init+0xe4>)
 800204a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800204e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002050:	2301      	movs	r3, #1
 8002052:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002054:	2300      	movs	r3, #0
 8002056:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002058:	2303      	movs	r3, #3
 800205a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800205c:	79fb      	ldrb	r3, [r7, #7]
 800205e:	4a0f      	ldr	r2, [pc, #60]	@ (800209c <BSP_LED_Init+0xe8>)
 8002060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002064:	f107 0218 	add.w	r2, r7, #24
 8002068:	4611      	mov	r1, r2
 800206a:	4618      	mov	r0, r3
 800206c:	f003 f8b6 	bl	80051dc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <BSP_LED_Init+0xe8>)
 8002074:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	4a07      	ldr	r2, [pc, #28]	@ (8002098 <BSP_LED_Init+0xe4>)
 800207c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002080:	2200      	movs	r2, #0
 8002082:	4619      	mov	r1, r3
 8002084:	f003 fa5a 	bl	800553c <HAL_GPIO_WritePin>
  }

  return ret;
 8002088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800208a:	4618      	mov	r0, r3
 800208c:	3730      	adds	r7, #48	@ 0x30
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	58024400 	.word	0x58024400
 8002098:	08010d4c 	.word	0x08010d4c
 800209c:	24000130 	.word	0x24000130

080020a0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b088      	sub	sp, #32
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	460a      	mov	r2, r1
 80020aa:	71fb      	strb	r3, [r7, #7]
 80020ac:	4613      	mov	r3, r2
 80020ae:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80020b0:	4b2e      	ldr	r3, [pc, #184]	@ (800216c <BSP_PB_Init+0xcc>)
 80020b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020b6:	4a2d      	ldr	r2, [pc, #180]	@ (800216c <BSP_PB_Init+0xcc>)
 80020b8:	f043 0304 	orr.w	r3, r3, #4
 80020bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020c0:	4b2a      	ldr	r3, [pc, #168]	@ (800216c <BSP_PB_Init+0xcc>)
 80020c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020c6:	f003 0304 	and.w	r3, r3, #4
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80020ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020d2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80020d4:	2302      	movs	r3, #2
 80020d6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020d8:	2302      	movs	r3, #2
 80020da:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80020dc:	79bb      	ldrb	r3, [r7, #6]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10c      	bne.n	80020fc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	4a21      	ldr	r2, [pc, #132]	@ (8002170 <BSP_PB_Init+0xd0>)
 80020ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020ee:	f107 020c 	add.w	r2, r7, #12
 80020f2:	4611      	mov	r1, r2
 80020f4:	4618      	mov	r0, r3
 80020f6:	f003 f871 	bl	80051dc <HAL_GPIO_Init>
 80020fa:	e031      	b.n	8002160 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80020fc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002100:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	4a1a      	ldr	r2, [pc, #104]	@ (8002170 <BSP_PB_Init+0xd0>)
 8002106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210a:	f107 020c 	add.w	r2, r7, #12
 800210e:	4611      	mov	r1, r2
 8002110:	4618      	mov	r0, r3
 8002112:	f003 f863 	bl	80051dc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	4a16      	ldr	r2, [pc, #88]	@ (8002174 <BSP_PB_Init+0xd4>)
 800211c:	441a      	add	r2, r3
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	4915      	ldr	r1, [pc, #84]	@ (8002178 <BSP_PB_Init+0xd8>)
 8002122:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002126:	4619      	mov	r1, r3
 8002128:	4610      	mov	r0, r2
 800212a:	f003 f806 	bl	800513a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800212e:	79fb      	ldrb	r3, [r7, #7]
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4a10      	ldr	r2, [pc, #64]	@ (8002174 <BSP_PB_Init+0xd4>)
 8002134:	1898      	adds	r0, r3, r2
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	4a10      	ldr	r2, [pc, #64]	@ (800217c <BSP_PB_Init+0xdc>)
 800213a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213e:	461a      	mov	r2, r3
 8002140:	2100      	movs	r1, #0
 8002142:	f002 ffdb 	bl	80050fc <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002146:	2028      	movs	r0, #40	@ 0x28
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	4a0d      	ldr	r2, [pc, #52]	@ (8002180 <BSP_PB_Init+0xe0>)
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	2200      	movs	r2, #0
 8002152:	4619      	mov	r1, r3
 8002154:	f000 f95a 	bl	800240c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002158:	2328      	movs	r3, #40	@ 0x28
 800215a:	4618      	mov	r0, r3
 800215c:	f000 f970 	bl	8002440 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3720      	adds	r7, #32
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	58024400 	.word	0x58024400
 8002170:	2400013c 	.word	0x2400013c
 8002174:	24000b0c 	.word	0x24000b0c
 8002178:	08010d54 	.word	0x08010d54
 800217c:	24000140 	.word	0x24000140
 8002180:	24000144 	.word	0x24000144

08002184 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
 800218a:	4603      	mov	r3, r0
 800218c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	4a04      	ldr	r2, [pc, #16]	@ (80021a4 <BSP_PB_IRQHandler+0x20>)
 8002194:	4413      	add	r3, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f002 ffe4 	bl	8005164 <HAL_EXTI_IRQHandler>
}
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	24000b0c 	.word	0x24000b0c

080021a8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80021b2:	bf00      	nop
 80021b4:	370c      	adds	r7, #12
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80021be:	b580      	push	{r7, lr}
 80021c0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff fff0 	bl	80021a8 <BSP_PB_Callback>
}
 80021c8:	bf00      	nop
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b082      	sub	sp, #8
 80021d0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d2:	2003      	movs	r0, #3
 80021d4:	f000 f90f 	bl	80023f6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021d8:	f004 f862 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 80021dc:	4602      	mov	r2, r0
 80021de:	4b15      	ldr	r3, [pc, #84]	@ (8002234 <HAL_Init+0x68>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	0a1b      	lsrs	r3, r3, #8
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4913      	ldr	r1, [pc, #76]	@ (8002238 <HAL_Init+0x6c>)
 80021ea:	5ccb      	ldrb	r3, [r1, r3]
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021f6:	4b0f      	ldr	r3, [pc, #60]	@ (8002234 <HAL_Init+0x68>)
 80021f8:	699b      	ldr	r3, [r3, #24]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	4a0e      	ldr	r2, [pc, #56]	@ (8002238 <HAL_Init+0x6c>)
 8002200:	5cd3      	ldrb	r3, [r2, r3]
 8002202:	f003 031f 	and.w	r3, r3, #31
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
 800220c:	4a0b      	ldr	r2, [pc, #44]	@ (800223c <HAL_Init+0x70>)
 800220e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <HAL_Init+0x74>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002216:	200f      	movs	r0, #15
 8002218:	f7ff fd24 	bl	8001c64 <HAL_InitTick>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e002      	b.n	800222c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002226:	f7ff fbb5 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	58024400 	.word	0x58024400
 8002238:	08010c9c 	.word	0x08010c9c
 800223c:	24000004 	.word	0x24000004
 8002240:	24000000 	.word	0x24000000

08002244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002244:	b480      	push	{r7}
 8002246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002248:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_IncTick+0x20>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b06      	ldr	r3, [pc, #24]	@ (8002268 <HAL_IncTick+0x24>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4413      	add	r3, r2
 8002254:	4a04      	ldr	r2, [pc, #16]	@ (8002268 <HAL_IncTick+0x24>)
 8002256:	6013      	str	r3, [r2, #0]
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	2400014c 	.word	0x2400014c
 8002268:	24000b14 	.word	0x24000b14

0800226c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return uwTick;
 8002270:	4b03      	ldr	r3, [pc, #12]	@ (8002280 <HAL_GetTick+0x14>)
 8002272:	681b      	ldr	r3, [r3, #0]
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	24000b14 	.word	0x24000b14

08002284 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002288:	4b03      	ldr	r3, [pc, #12]	@ (8002298 <HAL_GetREVID+0x14>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0c1b      	lsrs	r3, r3, #16
}
 800228e:	4618      	mov	r0, r3
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	5c001000 	.word	0x5c001000

0800229c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b480      	push	{r7}
 800229e:	b085      	sub	sp, #20
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f003 0307 	and.w	r3, r3, #7
 80022aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022ac:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022b2:	68ba      	ldr	r2, [r7, #8]
 80022b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022b8:	4013      	ands	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022c4:	4b06      	ldr	r3, [pc, #24]	@ (80022e0 <__NVIC_SetPriorityGrouping+0x44>)
 80022c6:	4313      	orrs	r3, r2
 80022c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ca:	4a04      	ldr	r2, [pc, #16]	@ (80022dc <__NVIC_SetPriorityGrouping+0x40>)
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60d3      	str	r3, [r2, #12]
}
 80022d0:	bf00      	nop
 80022d2:	3714      	adds	r7, #20
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000ed00 	.word	0xe000ed00
 80022e0:	05fa0000 	.word	0x05fa0000

080022e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022e8:	4b04      	ldr	r3, [pc, #16]	@ (80022fc <__NVIC_GetPriorityGrouping+0x18>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	0a1b      	lsrs	r3, r3, #8
 80022ee:	f003 0307 	and.w	r3, r3, #7
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	4603      	mov	r3, r0
 8002308:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800230a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230e:	2b00      	cmp	r3, #0
 8002310:	db0b      	blt.n	800232a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002312:	88fb      	ldrh	r3, [r7, #6]
 8002314:	f003 021f 	and.w	r2, r3, #31
 8002318:	4907      	ldr	r1, [pc, #28]	@ (8002338 <__NVIC_EnableIRQ+0x38>)
 800231a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2001      	movs	r0, #1
 8002322:	fa00 f202 	lsl.w	r2, r0, r2
 8002326:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800232a:	bf00      	nop
 800232c:	370c      	adds	r7, #12
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	e000e100 	.word	0xe000e100

0800233c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	6039      	str	r1, [r7, #0]
 8002346:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234c:	2b00      	cmp	r3, #0
 800234e:	db0a      	blt.n	8002366 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	b2da      	uxtb	r2, r3
 8002354:	490c      	ldr	r1, [pc, #48]	@ (8002388 <__NVIC_SetPriority+0x4c>)
 8002356:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800235a:	0112      	lsls	r2, r2, #4
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	440b      	add	r3, r1
 8002360:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002364:	e00a      	b.n	800237c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	b2da      	uxtb	r2, r3
 800236a:	4908      	ldr	r1, [pc, #32]	@ (800238c <__NVIC_SetPriority+0x50>)
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	f003 030f 	and.w	r3, r3, #15
 8002372:	3b04      	subs	r3, #4
 8002374:	0112      	lsls	r2, r2, #4
 8002376:	b2d2      	uxtb	r2, r2
 8002378:	440b      	add	r3, r1
 800237a:	761a      	strb	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr
 8002388:	e000e100 	.word	0xe000e100
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	@ 0x24
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f1c3 0307 	rsb	r3, r3, #7
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	bf28      	it	cs
 80023ae:	2304      	movcs	r3, #4
 80023b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	3304      	adds	r3, #4
 80023b6:	2b06      	cmp	r3, #6
 80023b8:	d902      	bls.n	80023c0 <NVIC_EncodePriority+0x30>
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	3b03      	subs	r3, #3
 80023be:	e000      	b.n	80023c2 <NVIC_EncodePriority+0x32>
 80023c0:	2300      	movs	r3, #0
 80023c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c4:	f04f 32ff 	mov.w	r2, #4294967295
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	fa02 f303 	lsl.w	r3, r2, r3
 80023ce:	43da      	mvns	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	401a      	ands	r2, r3
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023d8:	f04f 31ff 	mov.w	r1, #4294967295
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	43d9      	mvns	r1, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e8:	4313      	orrs	r3, r2
         );
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3724      	adds	r7, #36	@ 0x24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff ff4c 	bl	800229c <__NVIC_SetPriorityGrouping>
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}

0800240c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
 8002418:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800241a:	f7ff ff63 	bl	80022e4 <__NVIC_GetPriorityGrouping>
 800241e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68b9      	ldr	r1, [r7, #8]
 8002424:	6978      	ldr	r0, [r7, #20]
 8002426:	f7ff ffb3 	bl	8002390 <NVIC_EncodePriority>
 800242a:	4602      	mov	r2, r0
 800242c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002430:	4611      	mov	r1, r2
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff ff82 	bl	800233c <__NVIC_SetPriority>
}
 8002438:	bf00      	nop
 800243a:	3718      	adds	r7, #24
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b082      	sub	sp, #8
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800244a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff ff56 	bl	8002300 <__NVIC_EnableIRQ>
}
 8002454:	bf00      	nop
 8002456:	3708      	adds	r7, #8
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800245c:	b480      	push	{r7}
 800245e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002460:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_GetCurrentCPUID+0x24>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	091b      	lsrs	r3, r3, #4
 8002466:	f003 030f 	and.w	r3, r3, #15
 800246a:	2b07      	cmp	r3, #7
 800246c:	d101      	bne.n	8002472 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800246e:	2303      	movs	r3, #3
 8002470:	e000      	b.n	8002474 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002472:	2301      	movs	r3, #1
  }
}
 8002474:	4618      	mov	r0, r3
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00

08002484 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b086      	sub	sp, #24
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800248c:	f7ff feee 	bl	800226c <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e316      	b.n	8002aca <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a66      	ldr	r2, [pc, #408]	@ (800263c <HAL_DMA_Init+0x1b8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d04a      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a65      	ldr	r2, [pc, #404]	@ (8002640 <HAL_DMA_Init+0x1bc>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d045      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a63      	ldr	r2, [pc, #396]	@ (8002644 <HAL_DMA_Init+0x1c0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d040      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a62      	ldr	r2, [pc, #392]	@ (8002648 <HAL_DMA_Init+0x1c4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d03b      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a60      	ldr	r2, [pc, #384]	@ (800264c <HAL_DMA_Init+0x1c8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d036      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a5f      	ldr	r2, [pc, #380]	@ (8002650 <HAL_DMA_Init+0x1cc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d031      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002654 <HAL_DMA_Init+0x1d0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d02c      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5c      	ldr	r2, [pc, #368]	@ (8002658 <HAL_DMA_Init+0x1d4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d027      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5a      	ldr	r2, [pc, #360]	@ (800265c <HAL_DMA_Init+0x1d8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d022      	beq.n	800253c <HAL_DMA_Init+0xb8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a59      	ldr	r2, [pc, #356]	@ (8002660 <HAL_DMA_Init+0x1dc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d01d      	beq.n	800253c <HAL_DMA_Init+0xb8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a57      	ldr	r2, [pc, #348]	@ (8002664 <HAL_DMA_Init+0x1e0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d018      	beq.n	800253c <HAL_DMA_Init+0xb8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a56      	ldr	r2, [pc, #344]	@ (8002668 <HAL_DMA_Init+0x1e4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d013      	beq.n	800253c <HAL_DMA_Init+0xb8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a54      	ldr	r2, [pc, #336]	@ (800266c <HAL_DMA_Init+0x1e8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d00e      	beq.n	800253c <HAL_DMA_Init+0xb8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a53      	ldr	r2, [pc, #332]	@ (8002670 <HAL_DMA_Init+0x1ec>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d009      	beq.n	800253c <HAL_DMA_Init+0xb8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a51      	ldr	r2, [pc, #324]	@ (8002674 <HAL_DMA_Init+0x1f0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d004      	beq.n	800253c <HAL_DMA_Init+0xb8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a50      	ldr	r2, [pc, #320]	@ (8002678 <HAL_DMA_Init+0x1f4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d101      	bne.n	8002540 <HAL_DMA_Init+0xbc>
 800253c:	2301      	movs	r3, #1
 800253e:	e000      	b.n	8002542 <HAL_DMA_Init+0xbe>
 8002540:	2300      	movs	r3, #0
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 813b 	beq.w	80027be <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2202      	movs	r2, #2
 800254c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a37      	ldr	r2, [pc, #220]	@ (800263c <HAL_DMA_Init+0x1b8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d04a      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a36      	ldr	r2, [pc, #216]	@ (8002640 <HAL_DMA_Init+0x1bc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d045      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a34      	ldr	r2, [pc, #208]	@ (8002644 <HAL_DMA_Init+0x1c0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d040      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a33      	ldr	r2, [pc, #204]	@ (8002648 <HAL_DMA_Init+0x1c4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d03b      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a31      	ldr	r2, [pc, #196]	@ (800264c <HAL_DMA_Init+0x1c8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d036      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a30      	ldr	r2, [pc, #192]	@ (8002650 <HAL_DMA_Init+0x1cc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d031      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_DMA_Init+0x1d0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d02c      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002658 <HAL_DMA_Init+0x1d4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d027      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <HAL_DMA_Init+0x1d8>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d022      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a2a      	ldr	r2, [pc, #168]	@ (8002660 <HAL_DMA_Init+0x1dc>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d01d      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <HAL_DMA_Init+0x1e0>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d018      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a27      	ldr	r2, [pc, #156]	@ (8002668 <HAL_DMA_Init+0x1e4>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d013      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a25      	ldr	r2, [pc, #148]	@ (800266c <HAL_DMA_Init+0x1e8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d00e      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a24      	ldr	r2, [pc, #144]	@ (8002670 <HAL_DMA_Init+0x1ec>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d009      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <HAL_DMA_Init+0x1f0>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d004      	beq.n	80025f8 <HAL_DMA_Init+0x174>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a21      	ldr	r2, [pc, #132]	@ (8002678 <HAL_DMA_Init+0x1f4>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d108      	bne.n	800260a <HAL_DMA_Init+0x186>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0201 	bic.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e007      	b.n	800261a <HAL_DMA_Init+0x196>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0201 	bic.w	r2, r2, #1
 8002618:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800261a:	e02f      	b.n	800267c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800261c:	f7ff fe26 	bl	800226c <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b05      	cmp	r3, #5
 8002628:	d928      	bls.n	800267c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2220      	movs	r2, #32
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2203      	movs	r2, #3
 8002634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e246      	b.n	8002aca <HAL_DMA_Init+0x646>
 800263c:	40020010 	.word	0x40020010
 8002640:	40020028 	.word	0x40020028
 8002644:	40020040 	.word	0x40020040
 8002648:	40020058 	.word	0x40020058
 800264c:	40020070 	.word	0x40020070
 8002650:	40020088 	.word	0x40020088
 8002654:	400200a0 	.word	0x400200a0
 8002658:	400200b8 	.word	0x400200b8
 800265c:	40020410 	.word	0x40020410
 8002660:	40020428 	.word	0x40020428
 8002664:	40020440 	.word	0x40020440
 8002668:	40020458 	.word	0x40020458
 800266c:	40020470 	.word	0x40020470
 8002670:	40020488 	.word	0x40020488
 8002674:	400204a0 	.word	0x400204a0
 8002678:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1c8      	bne.n	800261c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4b83      	ldr	r3, [pc, #524]	@ (80028a4 <HAL_DMA_Init+0x420>)
 8002696:	4013      	ands	r3, r2
 8002698:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026cc:	2b04      	cmp	r3, #4
 80026ce:	d107      	bne.n	80026e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	4313      	orrs	r3, r2
 80026da:	697a      	ldr	r2, [r7, #20]
 80026dc:	4313      	orrs	r3, r2
 80026de:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80026e0:	4b71      	ldr	r3, [pc, #452]	@ (80028a8 <HAL_DMA_Init+0x424>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b71      	ldr	r3, [pc, #452]	@ (80028ac <HAL_DMA_Init+0x428>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026ec:	d328      	bcc.n	8002740 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	2b28      	cmp	r3, #40	@ 0x28
 80026f4:	d903      	bls.n	80026fe <HAL_DMA_Init+0x27a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80026fc:	d917      	bls.n	800272e <HAL_DMA_Init+0x2aa>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b3e      	cmp	r3, #62	@ 0x3e
 8002704:	d903      	bls.n	800270e <HAL_DMA_Init+0x28a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	2b42      	cmp	r3, #66	@ 0x42
 800270c:	d90f      	bls.n	800272e <HAL_DMA_Init+0x2aa>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b46      	cmp	r3, #70	@ 0x46
 8002714:	d903      	bls.n	800271e <HAL_DMA_Init+0x29a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b48      	cmp	r3, #72	@ 0x48
 800271c:	d907      	bls.n	800272e <HAL_DMA_Init+0x2aa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b4e      	cmp	r3, #78	@ 0x4e
 8002724:	d905      	bls.n	8002732 <HAL_DMA_Init+0x2ae>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b52      	cmp	r3, #82	@ 0x52
 800272c:	d801      	bhi.n	8002732 <HAL_DMA_Init+0x2ae>
 800272e:	2301      	movs	r3, #1
 8002730:	e000      	b.n	8002734 <HAL_DMA_Init+0x2b0>
 8002732:	2300      	movs	r3, #0
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800273e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	695b      	ldr	r3, [r3, #20]
 800274e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	f023 0307 	bic.w	r3, r3, #7
 8002756:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275c:	697a      	ldr	r2, [r7, #20]
 800275e:	4313      	orrs	r3, r2
 8002760:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002766:	2b04      	cmp	r3, #4
 8002768:	d117      	bne.n	800279a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4313      	orrs	r3, r2
 8002772:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f002 fb33 	bl	8004de8 <DMA_CheckFifoParam>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d008      	beq.n	800279a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2240      	movs	r2, #64	@ 0x40
 800278c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e197      	b.n	8002aca <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f002 fa6e 	bl	8004c84 <DMA_CalcBaseAndBitshift>
 80027a8:	4603      	mov	r3, r0
 80027aa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b0:	f003 031f 	and.w	r3, r3, #31
 80027b4:	223f      	movs	r2, #63	@ 0x3f
 80027b6:	409a      	lsls	r2, r3
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	609a      	str	r2, [r3, #8]
 80027bc:	e0cd      	b.n	800295a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a3b      	ldr	r2, [pc, #236]	@ (80028b0 <HAL_DMA_Init+0x42c>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d022      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a39      	ldr	r2, [pc, #228]	@ (80028b4 <HAL_DMA_Init+0x430>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d01d      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a38      	ldr	r2, [pc, #224]	@ (80028b8 <HAL_DMA_Init+0x434>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d018      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a36      	ldr	r2, [pc, #216]	@ (80028bc <HAL_DMA_Init+0x438>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d013      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a35      	ldr	r2, [pc, #212]	@ (80028c0 <HAL_DMA_Init+0x43c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00e      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a33      	ldr	r2, [pc, #204]	@ (80028c4 <HAL_DMA_Init+0x440>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_DMA_Init+0x38a>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a32      	ldr	r2, [pc, #200]	@ (80028c8 <HAL_DMA_Init+0x444>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d004      	beq.n	800280e <HAL_DMA_Init+0x38a>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a30      	ldr	r2, [pc, #192]	@ (80028cc <HAL_DMA_Init+0x448>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d101      	bne.n	8002812 <HAL_DMA_Init+0x38e>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <HAL_DMA_Init+0x390>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 8097 	beq.w	8002948 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a24      	ldr	r2, [pc, #144]	@ (80028b0 <HAL_DMA_Init+0x42c>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d021      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a22      	ldr	r2, [pc, #136]	@ (80028b4 <HAL_DMA_Init+0x430>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01c      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a21      	ldr	r2, [pc, #132]	@ (80028b8 <HAL_DMA_Init+0x434>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d017      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a1f      	ldr	r2, [pc, #124]	@ (80028bc <HAL_DMA_Init+0x438>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d012      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a1e      	ldr	r2, [pc, #120]	@ (80028c0 <HAL_DMA_Init+0x43c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d00d      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a1c      	ldr	r2, [pc, #112]	@ (80028c4 <HAL_DMA_Init+0x440>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d008      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a1b      	ldr	r2, [pc, #108]	@ (80028c8 <HAL_DMA_Init+0x444>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <HAL_DMA_Init+0x3e4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a19      	ldr	r2, [pc, #100]	@ (80028cc <HAL_DMA_Init+0x448>)
 8002866:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2202      	movs	r2, #2
 800286c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8002880:	697a      	ldr	r2, [r7, #20]
 8002882:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <HAL_DMA_Init+0x44c>)
 8002884:	4013      	ands	r3, r2
 8002886:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b40      	cmp	r3, #64	@ 0x40
 800288e:	d021      	beq.n	80028d4 <HAL_DMA_Init+0x450>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	2b80      	cmp	r3, #128	@ 0x80
 8002896:	d102      	bne.n	800289e <HAL_DMA_Init+0x41a>
 8002898:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800289c:	e01b      	b.n	80028d6 <HAL_DMA_Init+0x452>
 800289e:	2300      	movs	r3, #0
 80028a0:	e019      	b.n	80028d6 <HAL_DMA_Init+0x452>
 80028a2:	bf00      	nop
 80028a4:	fe10803f 	.word	0xfe10803f
 80028a8:	5c001000 	.word	0x5c001000
 80028ac:	ffff0000 	.word	0xffff0000
 80028b0:	58025408 	.word	0x58025408
 80028b4:	5802541c 	.word	0x5802541c
 80028b8:	58025430 	.word	0x58025430
 80028bc:	58025444 	.word	0x58025444
 80028c0:	58025458 	.word	0x58025458
 80028c4:	5802546c 	.word	0x5802546c
 80028c8:	58025480 	.word	0x58025480
 80028cc:	58025494 	.word	0x58025494
 80028d0:	fffe000f 	.word	0xfffe000f
 80028d4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80028f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80028fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002904:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	4313      	orrs	r3, r2
 800290a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	697a      	ldr	r2, [r7, #20]
 8002912:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	461a      	mov	r2, r3
 800291a:	4b6e      	ldr	r3, [pc, #440]	@ (8002ad4 <HAL_DMA_Init+0x650>)
 800291c:	4413      	add	r3, r2
 800291e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad8 <HAL_DMA_Init+0x654>)
 8002920:	fba2 2303 	umull	r2, r3, r2, r3
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	009a      	lsls	r2, r3, #2
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f002 f9a9 	bl	8004c84 <DMA_CalcBaseAndBitshift>
 8002932:	4603      	mov	r3, r0
 8002934:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2201      	movs	r2, #1
 8002940:	409a      	lsls	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]
 8002946:	e008      	b.n	800295a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2240      	movs	r2, #64	@ 0x40
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2203      	movs	r2, #3
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e0b7      	b.n	8002aca <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a5f      	ldr	r2, [pc, #380]	@ (8002adc <HAL_DMA_Init+0x658>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d072      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a5d      	ldr	r2, [pc, #372]	@ (8002ae0 <HAL_DMA_Init+0x65c>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d06d      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5c      	ldr	r2, [pc, #368]	@ (8002ae4 <HAL_DMA_Init+0x660>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d068      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ae8 <HAL_DMA_Init+0x664>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d063      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a59      	ldr	r2, [pc, #356]	@ (8002aec <HAL_DMA_Init+0x668>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d05e      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a57      	ldr	r2, [pc, #348]	@ (8002af0 <HAL_DMA_Init+0x66c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d059      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a56      	ldr	r2, [pc, #344]	@ (8002af4 <HAL_DMA_Init+0x670>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d054      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a54      	ldr	r2, [pc, #336]	@ (8002af8 <HAL_DMA_Init+0x674>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d04f      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a53      	ldr	r2, [pc, #332]	@ (8002afc <HAL_DMA_Init+0x678>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d04a      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a51      	ldr	r2, [pc, #324]	@ (8002b00 <HAL_DMA_Init+0x67c>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d045      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a50      	ldr	r2, [pc, #320]	@ (8002b04 <HAL_DMA_Init+0x680>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d040      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002b08 <HAL_DMA_Init+0x684>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d03b      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b0c <HAL_DMA_Init+0x688>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d036      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4b      	ldr	r2, [pc, #300]	@ (8002b10 <HAL_DMA_Init+0x68c>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d031      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002b14 <HAL_DMA_Init+0x690>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d02c      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a48      	ldr	r2, [pc, #288]	@ (8002b18 <HAL_DMA_Init+0x694>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d027      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a47      	ldr	r2, [pc, #284]	@ (8002b1c <HAL_DMA_Init+0x698>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d022      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a45      	ldr	r2, [pc, #276]	@ (8002b20 <HAL_DMA_Init+0x69c>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01d      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a44      	ldr	r2, [pc, #272]	@ (8002b24 <HAL_DMA_Init+0x6a0>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d018      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a42      	ldr	r2, [pc, #264]	@ (8002b28 <HAL_DMA_Init+0x6a4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d013      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a41      	ldr	r2, [pc, #260]	@ (8002b2c <HAL_DMA_Init+0x6a8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a3f      	ldr	r2, [pc, #252]	@ (8002b30 <HAL_DMA_Init+0x6ac>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d009      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b34 <HAL_DMA_Init+0x6b0>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_DMA_Init+0x5c6>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a3c      	ldr	r2, [pc, #240]	@ (8002b38 <HAL_DMA_Init+0x6b4>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_DMA_Init+0x5ca>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_DMA_Init+0x5cc>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d032      	beq.n	8002aba <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f002 fa43 	bl	8004ee0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b80      	cmp	r3, #128	@ 0x80
 8002a60:	d102      	bne.n	8002a68 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a7c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d010      	beq.n	8002aa8 <HAL_DMA_Init+0x624>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b08      	cmp	r3, #8
 8002a8c:	d80c      	bhi.n	8002aa8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f002 fac0 	bl	8005014 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa0:	687a      	ldr	r2, [r7, #4]
 8002aa2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	e008      	b.n	8002aba <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3718      	adds	r7, #24
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	a7fdabf8 	.word	0xa7fdabf8
 8002ad8:	cccccccd 	.word	0xcccccccd
 8002adc:	40020010 	.word	0x40020010
 8002ae0:	40020028 	.word	0x40020028
 8002ae4:	40020040 	.word	0x40020040
 8002ae8:	40020058 	.word	0x40020058
 8002aec:	40020070 	.word	0x40020070
 8002af0:	40020088 	.word	0x40020088
 8002af4:	400200a0 	.word	0x400200a0
 8002af8:	400200b8 	.word	0x400200b8
 8002afc:	40020410 	.word	0x40020410
 8002b00:	40020428 	.word	0x40020428
 8002b04:	40020440 	.word	0x40020440
 8002b08:	40020458 	.word	0x40020458
 8002b0c:	40020470 	.word	0x40020470
 8002b10:	40020488 	.word	0x40020488
 8002b14:	400204a0 	.word	0x400204a0
 8002b18:	400204b8 	.word	0x400204b8
 8002b1c:	58025408 	.word	0x58025408
 8002b20:	5802541c 	.word	0x5802541c
 8002b24:	58025430 	.word	0x58025430
 8002b28:	58025444 	.word	0x58025444
 8002b2c:	58025458 	.word	0x58025458
 8002b30:	5802546c 	.word	0x5802546c
 8002b34:	58025480 	.word	0x58025480
 8002b38:	58025494 	.word	0x58025494

08002b3c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b086      	sub	sp, #24
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
 8002b48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d101      	bne.n	8002b58 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e226      	b.n	8002fa6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d101      	bne.n	8002b66 <HAL_DMA_Start_IT+0x2a>
 8002b62:	2302      	movs	r3, #2
 8002b64:	e21f      	b.n	8002fa6 <HAL_DMA_Start_IT+0x46a>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2201      	movs	r2, #1
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	2b01      	cmp	r3, #1
 8002b78:	f040 820a 	bne.w	8002f90 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a68      	ldr	r2, [pc, #416]	@ (8002d30 <HAL_DMA_Start_IT+0x1f4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d04a      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a66      	ldr	r2, [pc, #408]	@ (8002d34 <HAL_DMA_Start_IT+0x1f8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d045      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a65      	ldr	r2, [pc, #404]	@ (8002d38 <HAL_DMA_Start_IT+0x1fc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d040      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a63      	ldr	r2, [pc, #396]	@ (8002d3c <HAL_DMA_Start_IT+0x200>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d03b      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a62      	ldr	r2, [pc, #392]	@ (8002d40 <HAL_DMA_Start_IT+0x204>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d036      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	@ (8002d44 <HAL_DMA_Start_IT+0x208>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5f      	ldr	r2, [pc, #380]	@ (8002d48 <HAL_DMA_Start_IT+0x20c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d02c      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d4c <HAL_DMA_Start_IT+0x210>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d027      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	@ (8002d50 <HAL_DMA_Start_IT+0x214>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d54 <HAL_DMA_Start_IT+0x218>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a59      	ldr	r2, [pc, #356]	@ (8002d58 <HAL_DMA_Start_IT+0x21c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	@ (8002d5c <HAL_DMA_Start_IT+0x220>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a56      	ldr	r2, [pc, #344]	@ (8002d60 <HAL_DMA_Start_IT+0x224>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a54      	ldr	r2, [pc, #336]	@ (8002d64 <HAL_DMA_Start_IT+0x228>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a53      	ldr	r2, [pc, #332]	@ (8002d68 <HAL_DMA_Start_IT+0x22c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_DMA_Start_IT+0xee>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a51      	ldr	r2, [pc, #324]	@ (8002d6c <HAL_DMA_Start_IT+0x230>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d108      	bne.n	8002c3c <HAL_DMA_Start_IT+0x100>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0201 	bic.w	r2, r2, #1
 8002c38:	601a      	str	r2, [r3, #0]
 8002c3a:	e007      	b.n	8002c4c <HAL_DMA_Start_IT+0x110>
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f022 0201 	bic.w	r2, r2, #1
 8002c4a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f001 fe6a 	bl	800492c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a34      	ldr	r2, [pc, #208]	@ (8002d30 <HAL_DMA_Start_IT+0x1f4>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d04a      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a33      	ldr	r2, [pc, #204]	@ (8002d34 <HAL_DMA_Start_IT+0x1f8>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d045      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a31      	ldr	r2, [pc, #196]	@ (8002d38 <HAL_DMA_Start_IT+0x1fc>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d040      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a30      	ldr	r2, [pc, #192]	@ (8002d3c <HAL_DMA_Start_IT+0x200>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d03b      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a2e      	ldr	r2, [pc, #184]	@ (8002d40 <HAL_DMA_Start_IT+0x204>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d036      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a2d      	ldr	r2, [pc, #180]	@ (8002d44 <HAL_DMA_Start_IT+0x208>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d031      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2b      	ldr	r2, [pc, #172]	@ (8002d48 <HAL_DMA_Start_IT+0x20c>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d02c      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d4c <HAL_DMA_Start_IT+0x210>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d027      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_DMA_Start_IT+0x214>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d022      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a27      	ldr	r2, [pc, #156]	@ (8002d54 <HAL_DMA_Start_IT+0x218>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d01d      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a25      	ldr	r2, [pc, #148]	@ (8002d58 <HAL_DMA_Start_IT+0x21c>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d018      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a24      	ldr	r2, [pc, #144]	@ (8002d5c <HAL_DMA_Start_IT+0x220>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d013      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a22      	ldr	r2, [pc, #136]	@ (8002d60 <HAL_DMA_Start_IT+0x224>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00e      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a21      	ldr	r2, [pc, #132]	@ (8002d64 <HAL_DMA_Start_IT+0x228>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d009      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8002d68 <HAL_DMA_Start_IT+0x22c>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d004      	beq.n	8002cf8 <HAL_DMA_Start_IT+0x1bc>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8002d6c <HAL_DMA_Start_IT+0x230>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Start_IT+0x1c0>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <HAL_DMA_Start_IT+0x1c2>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f023 021e 	bic.w	r2, r3, #30
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f042 0216 	orr.w	r2, r2, #22
 8002d14:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d03e      	beq.n	8002d9c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f042 0208 	orr.w	r2, r2, #8
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	e035      	b.n	8002d9c <HAL_DMA_Start_IT+0x260>
 8002d30:	40020010 	.word	0x40020010
 8002d34:	40020028 	.word	0x40020028
 8002d38:	40020040 	.word	0x40020040
 8002d3c:	40020058 	.word	0x40020058
 8002d40:	40020070 	.word	0x40020070
 8002d44:	40020088 	.word	0x40020088
 8002d48:	400200a0 	.word	0x400200a0
 8002d4c:	400200b8 	.word	0x400200b8
 8002d50:	40020410 	.word	0x40020410
 8002d54:	40020428 	.word	0x40020428
 8002d58:	40020440 	.word	0x40020440
 8002d5c:	40020458 	.word	0x40020458
 8002d60:	40020470 	.word	0x40020470
 8002d64:	40020488 	.word	0x40020488
 8002d68:	400204a0 	.word	0x400204a0
 8002d6c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f023 020e 	bic.w	r2, r3, #14
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 020a 	orr.w	r2, r2, #10
 8002d82:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d007      	beq.n	8002d9c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f042 0204 	orr.w	r2, r2, #4
 8002d9a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a83      	ldr	r2, [pc, #524]	@ (8002fb0 <HAL_DMA_Start_IT+0x474>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d072      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a82      	ldr	r2, [pc, #520]	@ (8002fb4 <HAL_DMA_Start_IT+0x478>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d06d      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a80      	ldr	r2, [pc, #512]	@ (8002fb8 <HAL_DMA_Start_IT+0x47c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d068      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a7f      	ldr	r2, [pc, #508]	@ (8002fbc <HAL_DMA_Start_IT+0x480>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d063      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fc0 <HAL_DMA_Start_IT+0x484>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d05e      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fc4 <HAL_DMA_Start_IT+0x488>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d059      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a7a      	ldr	r2, [pc, #488]	@ (8002fc8 <HAL_DMA_Start_IT+0x48c>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d054      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a79      	ldr	r2, [pc, #484]	@ (8002fcc <HAL_DMA_Start_IT+0x490>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d04f      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a77      	ldr	r2, [pc, #476]	@ (8002fd0 <HAL_DMA_Start_IT+0x494>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d04a      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a76      	ldr	r2, [pc, #472]	@ (8002fd4 <HAL_DMA_Start_IT+0x498>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d045      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a74      	ldr	r2, [pc, #464]	@ (8002fd8 <HAL_DMA_Start_IT+0x49c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d040      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a73      	ldr	r2, [pc, #460]	@ (8002fdc <HAL_DMA_Start_IT+0x4a0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d03b      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a71      	ldr	r2, [pc, #452]	@ (8002fe0 <HAL_DMA_Start_IT+0x4a4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d036      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a70      	ldr	r2, [pc, #448]	@ (8002fe4 <HAL_DMA_Start_IT+0x4a8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d031      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002fe8 <HAL_DMA_Start_IT+0x4ac>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d02c      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a6d      	ldr	r2, [pc, #436]	@ (8002fec <HAL_DMA_Start_IT+0x4b0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d027      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a6b      	ldr	r2, [pc, #428]	@ (8002ff0 <HAL_DMA_Start_IT+0x4b4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d022      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff4 <HAL_DMA_Start_IT+0x4b8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d01d      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a68      	ldr	r2, [pc, #416]	@ (8002ff8 <HAL_DMA_Start_IT+0x4bc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d018      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a67      	ldr	r2, [pc, #412]	@ (8002ffc <HAL_DMA_Start_IT+0x4c0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d013      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a65      	ldr	r2, [pc, #404]	@ (8003000 <HAL_DMA_Start_IT+0x4c4>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00e      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a64      	ldr	r2, [pc, #400]	@ (8003004 <HAL_DMA_Start_IT+0x4c8>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a62      	ldr	r2, [pc, #392]	@ (8003008 <HAL_DMA_Start_IT+0x4cc>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_DMA_Start_IT+0x350>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a61      	ldr	r2, [pc, #388]	@ (800300c <HAL_DMA_Start_IT+0x4d0>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d101      	bne.n	8002e90 <HAL_DMA_Start_IT+0x354>
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e000      	b.n	8002e92 <HAL_DMA_Start_IT+0x356>
 8002e90:	2300      	movs	r3, #0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d01a      	beq.n	8002ecc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d007      	beq.n	8002eb4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eb2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d007      	beq.n	8002ecc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ec6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eca:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a37      	ldr	r2, [pc, #220]	@ (8002fb0 <HAL_DMA_Start_IT+0x474>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d04a      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a36      	ldr	r2, [pc, #216]	@ (8002fb4 <HAL_DMA_Start_IT+0x478>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d045      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a34      	ldr	r2, [pc, #208]	@ (8002fb8 <HAL_DMA_Start_IT+0x47c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d040      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a33      	ldr	r2, [pc, #204]	@ (8002fbc <HAL_DMA_Start_IT+0x480>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d03b      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a31      	ldr	r2, [pc, #196]	@ (8002fc0 <HAL_DMA_Start_IT+0x484>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d036      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a30      	ldr	r2, [pc, #192]	@ (8002fc4 <HAL_DMA_Start_IT+0x488>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d031      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc8 <HAL_DMA_Start_IT+0x48c>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d02c      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2d      	ldr	r2, [pc, #180]	@ (8002fcc <HAL_DMA_Start_IT+0x490>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d027      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <HAL_DMA_Start_IT+0x494>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d022      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002fd4 <HAL_DMA_Start_IT+0x498>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d01d      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a28      	ldr	r2, [pc, #160]	@ (8002fd8 <HAL_DMA_Start_IT+0x49c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d018      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a27      	ldr	r2, [pc, #156]	@ (8002fdc <HAL_DMA_Start_IT+0x4a0>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d013      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a25      	ldr	r2, [pc, #148]	@ (8002fe0 <HAL_DMA_Start_IT+0x4a4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00e      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a24      	ldr	r2, [pc, #144]	@ (8002fe4 <HAL_DMA_Start_IT+0x4a8>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d009      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_DMA_Start_IT+0x4ac>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d004      	beq.n	8002f6c <HAL_DMA_Start_IT+0x430>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a21      	ldr	r2, [pc, #132]	@ (8002fec <HAL_DMA_Start_IT+0x4b0>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d108      	bne.n	8002f7e <HAL_DMA_Start_IT+0x442>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0201 	orr.w	r2, r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e012      	b.n	8002fa4 <HAL_DMA_Start_IT+0x468>
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
 8002f8e:	e009      	b.n	8002fa4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40020010 	.word	0x40020010
 8002fb4:	40020028 	.word	0x40020028
 8002fb8:	40020040 	.word	0x40020040
 8002fbc:	40020058 	.word	0x40020058
 8002fc0:	40020070 	.word	0x40020070
 8002fc4:	40020088 	.word	0x40020088
 8002fc8:	400200a0 	.word	0x400200a0
 8002fcc:	400200b8 	.word	0x400200b8
 8002fd0:	40020410 	.word	0x40020410
 8002fd4:	40020428 	.word	0x40020428
 8002fd8:	40020440 	.word	0x40020440
 8002fdc:	40020458 	.word	0x40020458
 8002fe0:	40020470 	.word	0x40020470
 8002fe4:	40020488 	.word	0x40020488
 8002fe8:	400204a0 	.word	0x400204a0
 8002fec:	400204b8 	.word	0x400204b8
 8002ff0:	58025408 	.word	0x58025408
 8002ff4:	5802541c 	.word	0x5802541c
 8002ff8:	58025430 	.word	0x58025430
 8002ffc:	58025444 	.word	0x58025444
 8003000:	58025458 	.word	0x58025458
 8003004:	5802546c 	.word	0x5802546c
 8003008:	58025480 	.word	0x58025480
 800300c:	58025494 	.word	0x58025494

08003010 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003018:	f7ff f928 	bl	800226c <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d101      	bne.n	8003028 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e2dc      	b.n	80035e2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d008      	beq.n	8003046 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2280      	movs	r2, #128	@ 0x80
 8003038:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e2cd      	b.n	80035e2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a76      	ldr	r2, [pc, #472]	@ (8003224 <HAL_DMA_Abort+0x214>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d04a      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a74      	ldr	r2, [pc, #464]	@ (8003228 <HAL_DMA_Abort+0x218>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d045      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a73      	ldr	r2, [pc, #460]	@ (800322c <HAL_DMA_Abort+0x21c>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d040      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a71      	ldr	r2, [pc, #452]	@ (8003230 <HAL_DMA_Abort+0x220>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d03b      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a70      	ldr	r2, [pc, #448]	@ (8003234 <HAL_DMA_Abort+0x224>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d036      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a6e      	ldr	r2, [pc, #440]	@ (8003238 <HAL_DMA_Abort+0x228>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d031      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a6d      	ldr	r2, [pc, #436]	@ (800323c <HAL_DMA_Abort+0x22c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d02c      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a6b      	ldr	r2, [pc, #428]	@ (8003240 <HAL_DMA_Abort+0x230>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d027      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a6a      	ldr	r2, [pc, #424]	@ (8003244 <HAL_DMA_Abort+0x234>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d022      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a68      	ldr	r2, [pc, #416]	@ (8003248 <HAL_DMA_Abort+0x238>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01d      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a67      	ldr	r2, [pc, #412]	@ (800324c <HAL_DMA_Abort+0x23c>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d018      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a65      	ldr	r2, [pc, #404]	@ (8003250 <HAL_DMA_Abort+0x240>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d013      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a64      	ldr	r2, [pc, #400]	@ (8003254 <HAL_DMA_Abort+0x244>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d00e      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a62      	ldr	r2, [pc, #392]	@ (8003258 <HAL_DMA_Abort+0x248>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d009      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a61      	ldr	r2, [pc, #388]	@ (800325c <HAL_DMA_Abort+0x24c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d004      	beq.n	80030e6 <HAL_DMA_Abort+0xd6>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5f      	ldr	r2, [pc, #380]	@ (8003260 <HAL_DMA_Abort+0x250>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_DMA_Abort+0xda>
 80030e6:	2301      	movs	r3, #1
 80030e8:	e000      	b.n	80030ec <HAL_DMA_Abort+0xdc>
 80030ea:	2300      	movs	r3, #0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d013      	beq.n	8003118 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 021e 	bic.w	r2, r2, #30
 80030fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	695a      	ldr	r2, [r3, #20]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800310e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	617b      	str	r3, [r7, #20]
 8003116:	e00a      	b.n	800312e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f022 020e 	bic.w	r2, r2, #14
 8003126:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a3c      	ldr	r2, [pc, #240]	@ (8003224 <HAL_DMA_Abort+0x214>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d072      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a3a      	ldr	r2, [pc, #232]	@ (8003228 <HAL_DMA_Abort+0x218>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d06d      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a39      	ldr	r2, [pc, #228]	@ (800322c <HAL_DMA_Abort+0x21c>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d068      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a37      	ldr	r2, [pc, #220]	@ (8003230 <HAL_DMA_Abort+0x220>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d063      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a36      	ldr	r2, [pc, #216]	@ (8003234 <HAL_DMA_Abort+0x224>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d05e      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a34      	ldr	r2, [pc, #208]	@ (8003238 <HAL_DMA_Abort+0x228>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d059      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a33      	ldr	r2, [pc, #204]	@ (800323c <HAL_DMA_Abort+0x22c>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d054      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a31      	ldr	r2, [pc, #196]	@ (8003240 <HAL_DMA_Abort+0x230>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d04f      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a30      	ldr	r2, [pc, #192]	@ (8003244 <HAL_DMA_Abort+0x234>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d04a      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a2e      	ldr	r2, [pc, #184]	@ (8003248 <HAL_DMA_Abort+0x238>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d045      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a2d      	ldr	r2, [pc, #180]	@ (800324c <HAL_DMA_Abort+0x23c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d040      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003250 <HAL_DMA_Abort+0x240>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d03b      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003254 <HAL_DMA_Abort+0x244>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d036      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a28      	ldr	r2, [pc, #160]	@ (8003258 <HAL_DMA_Abort+0x248>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d031      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a27      	ldr	r2, [pc, #156]	@ (800325c <HAL_DMA_Abort+0x24c>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d02c      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a25      	ldr	r2, [pc, #148]	@ (8003260 <HAL_DMA_Abort+0x250>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d027      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a24      	ldr	r2, [pc, #144]	@ (8003264 <HAL_DMA_Abort+0x254>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a22      	ldr	r2, [pc, #136]	@ (8003268 <HAL_DMA_Abort+0x258>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d01d      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a21      	ldr	r2, [pc, #132]	@ (800326c <HAL_DMA_Abort+0x25c>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d018      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003270 <HAL_DMA_Abort+0x260>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d013      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003274 <HAL_DMA_Abort+0x264>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d00e      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a1c      	ldr	r2, [pc, #112]	@ (8003278 <HAL_DMA_Abort+0x268>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d009      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a1b      	ldr	r2, [pc, #108]	@ (800327c <HAL_DMA_Abort+0x26c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d004      	beq.n	800321e <HAL_DMA_Abort+0x20e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a19      	ldr	r2, [pc, #100]	@ (8003280 <HAL_DMA_Abort+0x270>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d132      	bne.n	8003284 <HAL_DMA_Abort+0x274>
 800321e:	2301      	movs	r3, #1
 8003220:	e031      	b.n	8003286 <HAL_DMA_Abort+0x276>
 8003222:	bf00      	nop
 8003224:	40020010 	.word	0x40020010
 8003228:	40020028 	.word	0x40020028
 800322c:	40020040 	.word	0x40020040
 8003230:	40020058 	.word	0x40020058
 8003234:	40020070 	.word	0x40020070
 8003238:	40020088 	.word	0x40020088
 800323c:	400200a0 	.word	0x400200a0
 8003240:	400200b8 	.word	0x400200b8
 8003244:	40020410 	.word	0x40020410
 8003248:	40020428 	.word	0x40020428
 800324c:	40020440 	.word	0x40020440
 8003250:	40020458 	.word	0x40020458
 8003254:	40020470 	.word	0x40020470
 8003258:	40020488 	.word	0x40020488
 800325c:	400204a0 	.word	0x400204a0
 8003260:	400204b8 	.word	0x400204b8
 8003264:	58025408 	.word	0x58025408
 8003268:	5802541c 	.word	0x5802541c
 800326c:	58025430 	.word	0x58025430
 8003270:	58025444 	.word	0x58025444
 8003274:	58025458 	.word	0x58025458
 8003278:	5802546c 	.word	0x5802546c
 800327c:	58025480 	.word	0x58025480
 8003280:	58025494 	.word	0x58025494
 8003284:	2300      	movs	r3, #0
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003294:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003298:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6d      	ldr	r2, [pc, #436]	@ (8003454 <HAL_DMA_Abort+0x444>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d04a      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a6b      	ldr	r2, [pc, #428]	@ (8003458 <HAL_DMA_Abort+0x448>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d045      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6a      	ldr	r2, [pc, #424]	@ (800345c <HAL_DMA_Abort+0x44c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d040      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a68      	ldr	r2, [pc, #416]	@ (8003460 <HAL_DMA_Abort+0x450>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d03b      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a67      	ldr	r2, [pc, #412]	@ (8003464 <HAL_DMA_Abort+0x454>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d036      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a65      	ldr	r2, [pc, #404]	@ (8003468 <HAL_DMA_Abort+0x458>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d031      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a64      	ldr	r2, [pc, #400]	@ (800346c <HAL_DMA_Abort+0x45c>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d02c      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a62      	ldr	r2, [pc, #392]	@ (8003470 <HAL_DMA_Abort+0x460>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d027      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a61      	ldr	r2, [pc, #388]	@ (8003474 <HAL_DMA_Abort+0x464>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d022      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5f      	ldr	r2, [pc, #380]	@ (8003478 <HAL_DMA_Abort+0x468>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d01d      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a5e      	ldr	r2, [pc, #376]	@ (800347c <HAL_DMA_Abort+0x46c>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d018      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a5c      	ldr	r2, [pc, #368]	@ (8003480 <HAL_DMA_Abort+0x470>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d013      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a5b      	ldr	r2, [pc, #364]	@ (8003484 <HAL_DMA_Abort+0x474>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00e      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a59      	ldr	r2, [pc, #356]	@ (8003488 <HAL_DMA_Abort+0x478>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d009      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a58      	ldr	r2, [pc, #352]	@ (800348c <HAL_DMA_Abort+0x47c>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d004      	beq.n	800333a <HAL_DMA_Abort+0x32a>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a56      	ldr	r2, [pc, #344]	@ (8003490 <HAL_DMA_Abort+0x480>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d108      	bne.n	800334c <HAL_DMA_Abort+0x33c>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]
 800334a:	e007      	b.n	800335c <HAL_DMA_Abort+0x34c>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800335c:	e013      	b.n	8003386 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800335e:	f7fe ff85 	bl	800226c <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	2b05      	cmp	r3, #5
 800336a:	d90c      	bls.n	8003386 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2220      	movs	r2, #32
 8003370:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2203      	movs	r2, #3
 8003376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e12d      	b.n	80035e2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e5      	bne.n	800335e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2f      	ldr	r2, [pc, #188]	@ (8003454 <HAL_DMA_Abort+0x444>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d04a      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	@ (8003458 <HAL_DMA_Abort+0x448>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d045      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a2c      	ldr	r2, [pc, #176]	@ (800345c <HAL_DMA_Abort+0x44c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d040      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a2a      	ldr	r2, [pc, #168]	@ (8003460 <HAL_DMA_Abort+0x450>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d03b      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a29      	ldr	r2, [pc, #164]	@ (8003464 <HAL_DMA_Abort+0x454>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d036      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a27      	ldr	r2, [pc, #156]	@ (8003468 <HAL_DMA_Abort+0x458>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d031      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a26      	ldr	r2, [pc, #152]	@ (800346c <HAL_DMA_Abort+0x45c>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d02c      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a24      	ldr	r2, [pc, #144]	@ (8003470 <HAL_DMA_Abort+0x460>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d027      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a23      	ldr	r2, [pc, #140]	@ (8003474 <HAL_DMA_Abort+0x464>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d022      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a21      	ldr	r2, [pc, #132]	@ (8003478 <HAL_DMA_Abort+0x468>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d01d      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a20      	ldr	r2, [pc, #128]	@ (800347c <HAL_DMA_Abort+0x46c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d018      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1e      	ldr	r2, [pc, #120]	@ (8003480 <HAL_DMA_Abort+0x470>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d013      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1d      	ldr	r2, [pc, #116]	@ (8003484 <HAL_DMA_Abort+0x474>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1b      	ldr	r2, [pc, #108]	@ (8003488 <HAL_DMA_Abort+0x478>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d009      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a1a      	ldr	r2, [pc, #104]	@ (800348c <HAL_DMA_Abort+0x47c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d004      	beq.n	8003432 <HAL_DMA_Abort+0x422>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_DMA_Abort+0x480>)
 800342e:	4293      	cmp	r3, r2
 8003430:	d101      	bne.n	8003436 <HAL_DMA_Abort+0x426>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <HAL_DMA_Abort+0x428>
 8003436:	2300      	movs	r3, #0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d02b      	beq.n	8003494 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003440:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	223f      	movs	r2, #63	@ 0x3f
 800344c:	409a      	lsls	r2, r3
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	e02a      	b.n	80034aa <HAL_DMA_Abort+0x49a>
 8003454:	40020010 	.word	0x40020010
 8003458:	40020028 	.word	0x40020028
 800345c:	40020040 	.word	0x40020040
 8003460:	40020058 	.word	0x40020058
 8003464:	40020070 	.word	0x40020070
 8003468:	40020088 	.word	0x40020088
 800346c:	400200a0 	.word	0x400200a0
 8003470:	400200b8 	.word	0x400200b8
 8003474:	40020410 	.word	0x40020410
 8003478:	40020428 	.word	0x40020428
 800347c:	40020440 	.word	0x40020440
 8003480:	40020458 	.word	0x40020458
 8003484:	40020470 	.word	0x40020470
 8003488:	40020488 	.word	0x40020488
 800348c:	400204a0 	.word	0x400204a0
 8003490:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003498:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2201      	movs	r2, #1
 80034a4:	409a      	lsls	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4a4f      	ldr	r2, [pc, #316]	@ (80035ec <HAL_DMA_Abort+0x5dc>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d072      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a4d      	ldr	r2, [pc, #308]	@ (80035f0 <HAL_DMA_Abort+0x5e0>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d06d      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a4c      	ldr	r2, [pc, #304]	@ (80035f4 <HAL_DMA_Abort+0x5e4>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d068      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	@ (80035f8 <HAL_DMA_Abort+0x5e8>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d063      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a49      	ldr	r2, [pc, #292]	@ (80035fc <HAL_DMA_Abort+0x5ec>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d05e      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a47      	ldr	r2, [pc, #284]	@ (8003600 <HAL_DMA_Abort+0x5f0>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d059      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a46      	ldr	r2, [pc, #280]	@ (8003604 <HAL_DMA_Abort+0x5f4>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d054      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a44      	ldr	r2, [pc, #272]	@ (8003608 <HAL_DMA_Abort+0x5f8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d04f      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a43      	ldr	r2, [pc, #268]	@ (800360c <HAL_DMA_Abort+0x5fc>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d04a      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a41      	ldr	r2, [pc, #260]	@ (8003610 <HAL_DMA_Abort+0x600>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d045      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a40      	ldr	r2, [pc, #256]	@ (8003614 <HAL_DMA_Abort+0x604>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d040      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a3e      	ldr	r2, [pc, #248]	@ (8003618 <HAL_DMA_Abort+0x608>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d03b      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a3d      	ldr	r2, [pc, #244]	@ (800361c <HAL_DMA_Abort+0x60c>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d036      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a3b      	ldr	r2, [pc, #236]	@ (8003620 <HAL_DMA_Abort+0x610>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d031      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3a      	ldr	r2, [pc, #232]	@ (8003624 <HAL_DMA_Abort+0x614>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d02c      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a38      	ldr	r2, [pc, #224]	@ (8003628 <HAL_DMA_Abort+0x618>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d027      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a37      	ldr	r2, [pc, #220]	@ (800362c <HAL_DMA_Abort+0x61c>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d022      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a35      	ldr	r2, [pc, #212]	@ (8003630 <HAL_DMA_Abort+0x620>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d01d      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a34      	ldr	r2, [pc, #208]	@ (8003634 <HAL_DMA_Abort+0x624>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d018      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a32      	ldr	r2, [pc, #200]	@ (8003638 <HAL_DMA_Abort+0x628>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d013      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a31      	ldr	r2, [pc, #196]	@ (800363c <HAL_DMA_Abort+0x62c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00e      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a2f      	ldr	r2, [pc, #188]	@ (8003640 <HAL_DMA_Abort+0x630>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d009      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2e      	ldr	r2, [pc, #184]	@ (8003644 <HAL_DMA_Abort+0x634>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_DMA_Abort+0x58a>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2c      	ldr	r2, [pc, #176]	@ (8003648 <HAL_DMA_Abort+0x638>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d101      	bne.n	800359e <HAL_DMA_Abort+0x58e>
 800359a:	2301      	movs	r3, #1
 800359c:	e000      	b.n	80035a0 <HAL_DMA_Abort+0x590>
 800359e:	2300      	movs	r3, #0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d015      	beq.n	80035d0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035ac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035c4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035ce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3718      	adds	r7, #24
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	40020010 	.word	0x40020010
 80035f0:	40020028 	.word	0x40020028
 80035f4:	40020040 	.word	0x40020040
 80035f8:	40020058 	.word	0x40020058
 80035fc:	40020070 	.word	0x40020070
 8003600:	40020088 	.word	0x40020088
 8003604:	400200a0 	.word	0x400200a0
 8003608:	400200b8 	.word	0x400200b8
 800360c:	40020410 	.word	0x40020410
 8003610:	40020428 	.word	0x40020428
 8003614:	40020440 	.word	0x40020440
 8003618:	40020458 	.word	0x40020458
 800361c:	40020470 	.word	0x40020470
 8003620:	40020488 	.word	0x40020488
 8003624:	400204a0 	.word	0x400204a0
 8003628:	400204b8 	.word	0x400204b8
 800362c:	58025408 	.word	0x58025408
 8003630:	5802541c 	.word	0x5802541c
 8003634:	58025430 	.word	0x58025430
 8003638:	58025444 	.word	0x58025444
 800363c:	58025458 	.word	0x58025458
 8003640:	5802546c 	.word	0x5802546c
 8003644:	58025480 	.word	0x58025480
 8003648:	58025494 	.word	0x58025494

0800364c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d101      	bne.n	800365e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e237      	b.n	8003ace <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b02      	cmp	r3, #2
 8003668:	d004      	beq.n	8003674 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2280      	movs	r2, #128	@ 0x80
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e22c      	b.n	8003ace <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a5c      	ldr	r2, [pc, #368]	@ (80037ec <HAL_DMA_Abort_IT+0x1a0>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d04a      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a5b      	ldr	r2, [pc, #364]	@ (80037f0 <HAL_DMA_Abort_IT+0x1a4>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d045      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a59      	ldr	r2, [pc, #356]	@ (80037f4 <HAL_DMA_Abort_IT+0x1a8>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d040      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a58      	ldr	r2, [pc, #352]	@ (80037f8 <HAL_DMA_Abort_IT+0x1ac>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d03b      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a56      	ldr	r2, [pc, #344]	@ (80037fc <HAL_DMA_Abort_IT+0x1b0>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d036      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a55      	ldr	r2, [pc, #340]	@ (8003800 <HAL_DMA_Abort_IT+0x1b4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d031      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a53      	ldr	r2, [pc, #332]	@ (8003804 <HAL_DMA_Abort_IT+0x1b8>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d02c      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a52      	ldr	r2, [pc, #328]	@ (8003808 <HAL_DMA_Abort_IT+0x1bc>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d027      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a50      	ldr	r2, [pc, #320]	@ (800380c <HAL_DMA_Abort_IT+0x1c0>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d022      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a4f      	ldr	r2, [pc, #316]	@ (8003810 <HAL_DMA_Abort_IT+0x1c4>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d01d      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003814 <HAL_DMA_Abort_IT+0x1c8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d018      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a4c      	ldr	r2, [pc, #304]	@ (8003818 <HAL_DMA_Abort_IT+0x1cc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d013      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a4a      	ldr	r2, [pc, #296]	@ (800381c <HAL_DMA_Abort_IT+0x1d0>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d00e      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a49      	ldr	r2, [pc, #292]	@ (8003820 <HAL_DMA_Abort_IT+0x1d4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d009      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a47      	ldr	r2, [pc, #284]	@ (8003824 <HAL_DMA_Abort_IT+0x1d8>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d004      	beq.n	8003714 <HAL_DMA_Abort_IT+0xc8>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a46      	ldr	r2, [pc, #280]	@ (8003828 <HAL_DMA_Abort_IT+0x1dc>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_DMA_Abort_IT+0xcc>
 8003714:	2301      	movs	r3, #1
 8003716:	e000      	b.n	800371a <HAL_DMA_Abort_IT+0xce>
 8003718:	2300      	movs	r3, #0
 800371a:	2b00      	cmp	r3, #0
 800371c:	f000 8086 	beq.w	800382c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2204      	movs	r2, #4
 8003724:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a2f      	ldr	r2, [pc, #188]	@ (80037ec <HAL_DMA_Abort_IT+0x1a0>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d04a      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a2e      	ldr	r2, [pc, #184]	@ (80037f0 <HAL_DMA_Abort_IT+0x1a4>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d045      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a2c      	ldr	r2, [pc, #176]	@ (80037f4 <HAL_DMA_Abort_IT+0x1a8>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d040      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a2b      	ldr	r2, [pc, #172]	@ (80037f8 <HAL_DMA_Abort_IT+0x1ac>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d03b      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a29      	ldr	r2, [pc, #164]	@ (80037fc <HAL_DMA_Abort_IT+0x1b0>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d036      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a28      	ldr	r2, [pc, #160]	@ (8003800 <HAL_DMA_Abort_IT+0x1b4>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d031      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a26      	ldr	r2, [pc, #152]	@ (8003804 <HAL_DMA_Abort_IT+0x1b8>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d02c      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a25      	ldr	r2, [pc, #148]	@ (8003808 <HAL_DMA_Abort_IT+0x1bc>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d027      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a23      	ldr	r2, [pc, #140]	@ (800380c <HAL_DMA_Abort_IT+0x1c0>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d022      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a22      	ldr	r2, [pc, #136]	@ (8003810 <HAL_DMA_Abort_IT+0x1c4>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d01d      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a20      	ldr	r2, [pc, #128]	@ (8003814 <HAL_DMA_Abort_IT+0x1c8>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d018      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4a1f      	ldr	r2, [pc, #124]	@ (8003818 <HAL_DMA_Abort_IT+0x1cc>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d013      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	@ (800381c <HAL_DMA_Abort_IT+0x1d0>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00e      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003820 <HAL_DMA_Abort_IT+0x1d4>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d009      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a1a      	ldr	r2, [pc, #104]	@ (8003824 <HAL_DMA_Abort_IT+0x1d8>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d004      	beq.n	80037c8 <HAL_DMA_Abort_IT+0x17c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a19      	ldr	r2, [pc, #100]	@ (8003828 <HAL_DMA_Abort_IT+0x1dc>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d108      	bne.n	80037da <HAL_DMA_Abort_IT+0x18e>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0201 	bic.w	r2, r2, #1
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e178      	b.n	8003acc <HAL_DMA_Abort_IT+0x480>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f022 0201 	bic.w	r2, r2, #1
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e16f      	b.n	8003acc <HAL_DMA_Abort_IT+0x480>
 80037ec:	40020010 	.word	0x40020010
 80037f0:	40020028 	.word	0x40020028
 80037f4:	40020040 	.word	0x40020040
 80037f8:	40020058 	.word	0x40020058
 80037fc:	40020070 	.word	0x40020070
 8003800:	40020088 	.word	0x40020088
 8003804:	400200a0 	.word	0x400200a0
 8003808:	400200b8 	.word	0x400200b8
 800380c:	40020410 	.word	0x40020410
 8003810:	40020428 	.word	0x40020428
 8003814:	40020440 	.word	0x40020440
 8003818:	40020458 	.word	0x40020458
 800381c:	40020470 	.word	0x40020470
 8003820:	40020488 	.word	0x40020488
 8003824:	400204a0 	.word	0x400204a0
 8003828:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020e 	bic.w	r2, r2, #14
 800383a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6c      	ldr	r2, [pc, #432]	@ (80039f4 <HAL_DMA_Abort_IT+0x3a8>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d04a      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6b      	ldr	r2, [pc, #428]	@ (80039f8 <HAL_DMA_Abort_IT+0x3ac>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d045      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a69      	ldr	r2, [pc, #420]	@ (80039fc <HAL_DMA_Abort_IT+0x3b0>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d040      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a68      	ldr	r2, [pc, #416]	@ (8003a00 <HAL_DMA_Abort_IT+0x3b4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d03b      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a66      	ldr	r2, [pc, #408]	@ (8003a04 <HAL_DMA_Abort_IT+0x3b8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d036      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a65      	ldr	r2, [pc, #404]	@ (8003a08 <HAL_DMA_Abort_IT+0x3bc>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d031      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a63      	ldr	r2, [pc, #396]	@ (8003a0c <HAL_DMA_Abort_IT+0x3c0>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d02c      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a62      	ldr	r2, [pc, #392]	@ (8003a10 <HAL_DMA_Abort_IT+0x3c4>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d027      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a60      	ldr	r2, [pc, #384]	@ (8003a14 <HAL_DMA_Abort_IT+0x3c8>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d022      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a5f      	ldr	r2, [pc, #380]	@ (8003a18 <HAL_DMA_Abort_IT+0x3cc>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d01d      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a1c <HAL_DMA_Abort_IT+0x3d0>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d018      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a5c      	ldr	r2, [pc, #368]	@ (8003a20 <HAL_DMA_Abort_IT+0x3d4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d013      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a24 <HAL_DMA_Abort_IT+0x3d8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00e      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a59      	ldr	r2, [pc, #356]	@ (8003a28 <HAL_DMA_Abort_IT+0x3dc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d009      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a57      	ldr	r2, [pc, #348]	@ (8003a2c <HAL_DMA_Abort_IT+0x3e0>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <HAL_DMA_Abort_IT+0x290>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a56      	ldr	r2, [pc, #344]	@ (8003a30 <HAL_DMA_Abort_IT+0x3e4>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d108      	bne.n	80038ee <HAL_DMA_Abort_IT+0x2a2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	e007      	b.n	80038fe <HAL_DMA_Abort_IT+0x2b2>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a3c      	ldr	r2, [pc, #240]	@ (80039f4 <HAL_DMA_Abort_IT+0x3a8>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d072      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a3a      	ldr	r2, [pc, #232]	@ (80039f8 <HAL_DMA_Abort_IT+0x3ac>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d06d      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a39      	ldr	r2, [pc, #228]	@ (80039fc <HAL_DMA_Abort_IT+0x3b0>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d068      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a37      	ldr	r2, [pc, #220]	@ (8003a00 <HAL_DMA_Abort_IT+0x3b4>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d063      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a36      	ldr	r2, [pc, #216]	@ (8003a04 <HAL_DMA_Abort_IT+0x3b8>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d05e      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a34      	ldr	r2, [pc, #208]	@ (8003a08 <HAL_DMA_Abort_IT+0x3bc>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d059      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a33      	ldr	r2, [pc, #204]	@ (8003a0c <HAL_DMA_Abort_IT+0x3c0>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d054      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a31      	ldr	r2, [pc, #196]	@ (8003a10 <HAL_DMA_Abort_IT+0x3c4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d04f      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a30      	ldr	r2, [pc, #192]	@ (8003a14 <HAL_DMA_Abort_IT+0x3c8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d04a      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a18 <HAL_DMA_Abort_IT+0x3cc>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d045      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a2d      	ldr	r2, [pc, #180]	@ (8003a1c <HAL_DMA_Abort_IT+0x3d0>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d040      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a2b      	ldr	r2, [pc, #172]	@ (8003a20 <HAL_DMA_Abort_IT+0x3d4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d03b      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <HAL_DMA_Abort_IT+0x3d8>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d036      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a28      	ldr	r2, [pc, #160]	@ (8003a28 <HAL_DMA_Abort_IT+0x3dc>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d031      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a27      	ldr	r2, [pc, #156]	@ (8003a2c <HAL_DMA_Abort_IT+0x3e0>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d02c      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a25      	ldr	r2, [pc, #148]	@ (8003a30 <HAL_DMA_Abort_IT+0x3e4>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d027      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a24      	ldr	r2, [pc, #144]	@ (8003a34 <HAL_DMA_Abort_IT+0x3e8>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d022      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a22      	ldr	r2, [pc, #136]	@ (8003a38 <HAL_DMA_Abort_IT+0x3ec>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01d      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a21      	ldr	r2, [pc, #132]	@ (8003a3c <HAL_DMA_Abort_IT+0x3f0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d018      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a40 <HAL_DMA_Abort_IT+0x3f4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d013      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a1e      	ldr	r2, [pc, #120]	@ (8003a44 <HAL_DMA_Abort_IT+0x3f8>)
 80039cc:	4293      	cmp	r3, r2
 80039ce:	d00e      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_DMA_Abort_IT+0x3fc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d009      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a1b      	ldr	r2, [pc, #108]	@ (8003a4c <HAL_DMA_Abort_IT+0x400>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d004      	beq.n	80039ee <HAL_DMA_Abort_IT+0x3a2>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a19      	ldr	r2, [pc, #100]	@ (8003a50 <HAL_DMA_Abort_IT+0x404>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d132      	bne.n	8003a54 <HAL_DMA_Abort_IT+0x408>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e031      	b.n	8003a56 <HAL_DMA_Abort_IT+0x40a>
 80039f2:	bf00      	nop
 80039f4:	40020010 	.word	0x40020010
 80039f8:	40020028 	.word	0x40020028
 80039fc:	40020040 	.word	0x40020040
 8003a00:	40020058 	.word	0x40020058
 8003a04:	40020070 	.word	0x40020070
 8003a08:	40020088 	.word	0x40020088
 8003a0c:	400200a0 	.word	0x400200a0
 8003a10:	400200b8 	.word	0x400200b8
 8003a14:	40020410 	.word	0x40020410
 8003a18:	40020428 	.word	0x40020428
 8003a1c:	40020440 	.word	0x40020440
 8003a20:	40020458 	.word	0x40020458
 8003a24:	40020470 	.word	0x40020470
 8003a28:	40020488 	.word	0x40020488
 8003a2c:	400204a0 	.word	0x400204a0
 8003a30:	400204b8 	.word	0x400204b8
 8003a34:	58025408 	.word	0x58025408
 8003a38:	5802541c 	.word	0x5802541c
 8003a3c:	58025430 	.word	0x58025430
 8003a40:	58025444 	.word	0x58025444
 8003a44:	58025458 	.word	0x58025458
 8003a48:	5802546c 	.word	0x5802546c
 8003a4c:	58025480 	.word	0x58025480
 8003a50:	58025494 	.word	0x58025494
 8003a54:	2300      	movs	r3, #0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d028      	beq.n	8003aac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a68:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a6e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	f003 031f 	and.w	r3, r3, #31
 8003a78:	2201      	movs	r2, #1
 8003a7a:	409a      	lsls	r2, r3
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003a88:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003aa0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003aaa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08a      	sub	sp, #40	@ 0x28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003ae4:	4b67      	ldr	r3, [pc, #412]	@ (8003c84 <HAL_DMA_IRQHandler+0x1ac>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a67      	ldr	r2, [pc, #412]	@ (8003c88 <HAL_DMA_IRQHandler+0x1b0>)
 8003aea:	fba2 2303 	umull	r2, r3, r2, r3
 8003aee:	0a9b      	lsrs	r3, r3, #10
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003af6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003afc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003afe:	6a3b      	ldr	r3, [r7, #32]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c8c <HAL_DMA_IRQHandler+0x1b4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d04a      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a5d      	ldr	r2, [pc, #372]	@ (8003c90 <HAL_DMA_IRQHandler+0x1b8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d045      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a5c      	ldr	r2, [pc, #368]	@ (8003c94 <HAL_DMA_IRQHandler+0x1bc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d040      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a5a      	ldr	r2, [pc, #360]	@ (8003c98 <HAL_DMA_IRQHandler+0x1c0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d03b      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a59      	ldr	r2, [pc, #356]	@ (8003c9c <HAL_DMA_IRQHandler+0x1c4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d036      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a57      	ldr	r2, [pc, #348]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1c8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d031      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a56      	ldr	r2, [pc, #344]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1cc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d02c      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a54      	ldr	r2, [pc, #336]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1d0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d027      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a53      	ldr	r2, [pc, #332]	@ (8003cac <HAL_DMA_IRQHandler+0x1d4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d022      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a51      	ldr	r2, [pc, #324]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a50      	ldr	r2, [pc, #320]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d018      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a4d      	ldr	r2, [pc, #308]	@ (8003cbc <HAL_DMA_IRQHandler+0x1e4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d00e      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a4b      	ldr	r2, [pc, #300]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1e8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d009      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a4a      	ldr	r2, [pc, #296]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1ec>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d004      	beq.n	8003baa <HAL_DMA_IRQHandler+0xd2>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a48      	ldr	r2, [pc, #288]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d101      	bne.n	8003bae <HAL_DMA_IRQHandler+0xd6>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_DMA_IRQHandler+0xd8>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	f000 842b 	beq.w	800440c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bba:	f003 031f 	and.w	r3, r3, #31
 8003bbe:	2208      	movs	r2, #8
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f000 80a2 	beq.w	8003d10 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a2e      	ldr	r2, [pc, #184]	@ (8003c8c <HAL_DMA_IRQHandler+0x1b4>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d04a      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	@ (8003c90 <HAL_DMA_IRQHandler+0x1b8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d045      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a2b      	ldr	r2, [pc, #172]	@ (8003c94 <HAL_DMA_IRQHandler+0x1bc>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d040      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a2a      	ldr	r2, [pc, #168]	@ (8003c98 <HAL_DMA_IRQHandler+0x1c0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d03b      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a28      	ldr	r2, [pc, #160]	@ (8003c9c <HAL_DMA_IRQHandler+0x1c4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d036      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a27      	ldr	r2, [pc, #156]	@ (8003ca0 <HAL_DMA_IRQHandler+0x1c8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d031      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a25      	ldr	r2, [pc, #148]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1cc>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d02c      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a24      	ldr	r2, [pc, #144]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1d0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d027      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a22      	ldr	r2, [pc, #136]	@ (8003cac <HAL_DMA_IRQHandler+0x1d4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d022      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a21      	ldr	r2, [pc, #132]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d01d      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a1f      	ldr	r2, [pc, #124]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d018      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d013      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a1c      	ldr	r2, [pc, #112]	@ (8003cbc <HAL_DMA_IRQHandler+0x1e4>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00e      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1b      	ldr	r2, [pc, #108]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d009      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a19      	ldr	r2, [pc, #100]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_DMA_IRQHandler+0x194>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d12f      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x1f4>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0304 	and.w	r3, r3, #4
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	bf14      	ite	ne
 8003c7a:	2301      	movne	r3, #1
 8003c7c:	2300      	moveq	r3, #0
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	e02e      	b.n	8003ce0 <HAL_DMA_IRQHandler+0x208>
 8003c82:	bf00      	nop
 8003c84:	24000000 	.word	0x24000000
 8003c88:	1b4e81b5 	.word	0x1b4e81b5
 8003c8c:	40020010 	.word	0x40020010
 8003c90:	40020028 	.word	0x40020028
 8003c94:	40020040 	.word	0x40020040
 8003c98:	40020058 	.word	0x40020058
 8003c9c:	40020070 	.word	0x40020070
 8003ca0:	40020088 	.word	0x40020088
 8003ca4:	400200a0 	.word	0x400200a0
 8003ca8:	400200b8 	.word	0x400200b8
 8003cac:	40020410 	.word	0x40020410
 8003cb0:	40020428 	.word	0x40020428
 8003cb4:	40020440 	.word	0x40020440
 8003cb8:	40020458 	.word	0x40020458
 8003cbc:	40020470 	.word	0x40020470
 8003cc0:	40020488 	.word	0x40020488
 8003cc4:	400204a0 	.word	0x400204a0
 8003cc8:	400204b8 	.word	0x400204b8
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f003 0308 	and.w	r3, r3, #8
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	bf14      	ite	ne
 8003cda:	2301      	movne	r3, #1
 8003cdc:	2300      	moveq	r3, #0
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d015      	beq.n	8003d10 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f022 0204 	bic.w	r2, r2, #4
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cf8:	f003 031f 	and.w	r3, r3, #31
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	409a      	lsls	r2, r3
 8003d00:	6a3b      	ldr	r3, [r7, #32]
 8003d02:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d08:	f043 0201 	orr.w	r2, r3, #1
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d1e:	f003 0301 	and.w	r3, r3, #1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d06e      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a69      	ldr	r2, [pc, #420]	@ (8003ed0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d04a      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a67      	ldr	r2, [pc, #412]	@ (8003ed4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d045      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a66      	ldr	r2, [pc, #408]	@ (8003ed8 <HAL_DMA_IRQHandler+0x400>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d040      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a64      	ldr	r2, [pc, #400]	@ (8003edc <HAL_DMA_IRQHandler+0x404>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d03b      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a63      	ldr	r2, [pc, #396]	@ (8003ee0 <HAL_DMA_IRQHandler+0x408>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d036      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a61      	ldr	r2, [pc, #388]	@ (8003ee4 <HAL_DMA_IRQHandler+0x40c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d031      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a60      	ldr	r2, [pc, #384]	@ (8003ee8 <HAL_DMA_IRQHandler+0x410>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d02c      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a5e      	ldr	r2, [pc, #376]	@ (8003eec <HAL_DMA_IRQHandler+0x414>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d027      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ef0 <HAL_DMA_IRQHandler+0x418>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d022      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5b      	ldr	r2, [pc, #364]	@ (8003ef4 <HAL_DMA_IRQHandler+0x41c>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d01d      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5a      	ldr	r2, [pc, #360]	@ (8003ef8 <HAL_DMA_IRQHandler+0x420>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d018      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a58      	ldr	r2, [pc, #352]	@ (8003efc <HAL_DMA_IRQHandler+0x424>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d013      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a57      	ldr	r2, [pc, #348]	@ (8003f00 <HAL_DMA_IRQHandler+0x428>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d00e      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a55      	ldr	r2, [pc, #340]	@ (8003f04 <HAL_DMA_IRQHandler+0x42c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d009      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a54      	ldr	r2, [pc, #336]	@ (8003f08 <HAL_DMA_IRQHandler+0x430>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d004      	beq.n	8003dc6 <HAL_DMA_IRQHandler+0x2ee>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	@ (8003f0c <HAL_DMA_IRQHandler+0x434>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d10a      	bne.n	8003ddc <HAL_DMA_IRQHandler+0x304>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	bf14      	ite	ne
 8003dd4:	2301      	movne	r3, #1
 8003dd6:	2300      	moveq	r3, #0
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	e003      	b.n	8003de4 <HAL_DMA_IRQHandler+0x30c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2300      	movs	r3, #0
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d00d      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	2201      	movs	r2, #1
 8003df2:	409a      	lsls	r2, r3
 8003df4:	6a3b      	ldr	r3, [r7, #32]
 8003df6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfc:	f043 0202 	orr.w	r2, r3, #2
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e08:	f003 031f 	and.w	r3, r3, #31
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	409a      	lsls	r2, r3
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4013      	ands	r3, r2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	f000 808f 	beq.w	8003f38 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ed0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d04a      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a2a      	ldr	r2, [pc, #168]	@ (8003ed4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d045      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a29      	ldr	r2, [pc, #164]	@ (8003ed8 <HAL_DMA_IRQHandler+0x400>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d040      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a27      	ldr	r2, [pc, #156]	@ (8003edc <HAL_DMA_IRQHandler+0x404>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d03b      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a26      	ldr	r2, [pc, #152]	@ (8003ee0 <HAL_DMA_IRQHandler+0x408>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d036      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a24      	ldr	r2, [pc, #144]	@ (8003ee4 <HAL_DMA_IRQHandler+0x40c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d031      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a23      	ldr	r2, [pc, #140]	@ (8003ee8 <HAL_DMA_IRQHandler+0x410>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d02c      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a21      	ldr	r2, [pc, #132]	@ (8003eec <HAL_DMA_IRQHandler+0x414>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d027      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a20      	ldr	r2, [pc, #128]	@ (8003ef0 <HAL_DMA_IRQHandler+0x418>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1e      	ldr	r2, [pc, #120]	@ (8003ef4 <HAL_DMA_IRQHandler+0x41c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01d      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef8 <HAL_DMA_IRQHandler+0x420>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d018      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1b      	ldr	r2, [pc, #108]	@ (8003efc <HAL_DMA_IRQHandler+0x424>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d013      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1a      	ldr	r2, [pc, #104]	@ (8003f00 <HAL_DMA_IRQHandler+0x428>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00e      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	@ (8003f04 <HAL_DMA_IRQHandler+0x42c>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d009      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a17      	ldr	r2, [pc, #92]	@ (8003f08 <HAL_DMA_IRQHandler+0x430>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d004      	beq.n	8003eba <HAL_DMA_IRQHandler+0x3e2>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	@ (8003f0c <HAL_DMA_IRQHandler+0x434>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d12a      	bne.n	8003f10 <HAL_DMA_IRQHandler+0x438>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	bf14      	ite	ne
 8003ec8:	2301      	movne	r3, #1
 8003eca:	2300      	moveq	r3, #0
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	e023      	b.n	8003f18 <HAL_DMA_IRQHandler+0x440>
 8003ed0:	40020010 	.word	0x40020010
 8003ed4:	40020028 	.word	0x40020028
 8003ed8:	40020040 	.word	0x40020040
 8003edc:	40020058 	.word	0x40020058
 8003ee0:	40020070 	.word	0x40020070
 8003ee4:	40020088 	.word	0x40020088
 8003ee8:	400200a0 	.word	0x400200a0
 8003eec:	400200b8 	.word	0x400200b8
 8003ef0:	40020410 	.word	0x40020410
 8003ef4:	40020428 	.word	0x40020428
 8003ef8:	40020440 	.word	0x40020440
 8003efc:	40020458 	.word	0x40020458
 8003f00:	40020470 	.word	0x40020470
 8003f04:	40020488 	.word	0x40020488
 8003f08:	400204a0 	.word	0x400204a0
 8003f0c:	400204b8 	.word	0x400204b8
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2300      	movs	r3, #0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00d      	beq.n	8003f38 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	2204      	movs	r2, #4
 8003f26:	409a      	lsls	r2, r3
 8003f28:	6a3b      	ldr	r3, [r7, #32]
 8003f2a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f30:	f043 0204 	orr.w	r2, r3, #4
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f3c:	f003 031f 	and.w	r3, r3, #31
 8003f40:	2210      	movs	r2, #16
 8003f42:	409a      	lsls	r2, r3
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	4013      	ands	r3, r2
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	f000 80a6 	beq.w	800409a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a85      	ldr	r2, [pc, #532]	@ (8004168 <HAL_DMA_IRQHandler+0x690>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d04a      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a83      	ldr	r2, [pc, #524]	@ (800416c <HAL_DMA_IRQHandler+0x694>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d045      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a82      	ldr	r2, [pc, #520]	@ (8004170 <HAL_DMA_IRQHandler+0x698>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d040      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a80      	ldr	r2, [pc, #512]	@ (8004174 <HAL_DMA_IRQHandler+0x69c>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d03b      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a7f      	ldr	r2, [pc, #508]	@ (8004178 <HAL_DMA_IRQHandler+0x6a0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d036      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a7d      	ldr	r2, [pc, #500]	@ (800417c <HAL_DMA_IRQHandler+0x6a4>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d031      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7c      	ldr	r2, [pc, #496]	@ (8004180 <HAL_DMA_IRQHandler+0x6a8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d02c      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a7a      	ldr	r2, [pc, #488]	@ (8004184 <HAL_DMA_IRQHandler+0x6ac>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d027      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a79      	ldr	r2, [pc, #484]	@ (8004188 <HAL_DMA_IRQHandler+0x6b0>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d022      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a77      	ldr	r2, [pc, #476]	@ (800418c <HAL_DMA_IRQHandler+0x6b4>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d01d      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <HAL_DMA_IRQHandler+0x6b8>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d018      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a74      	ldr	r2, [pc, #464]	@ (8004194 <HAL_DMA_IRQHandler+0x6bc>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d013      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a73      	ldr	r2, [pc, #460]	@ (8004198 <HAL_DMA_IRQHandler+0x6c0>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d00e      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a71      	ldr	r2, [pc, #452]	@ (800419c <HAL_DMA_IRQHandler+0x6c4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d009      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a70      	ldr	r2, [pc, #448]	@ (80041a0 <HAL_DMA_IRQHandler+0x6c8>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d004      	beq.n	8003fee <HAL_DMA_IRQHandler+0x516>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a6e      	ldr	r2, [pc, #440]	@ (80041a4 <HAL_DMA_IRQHandler+0x6cc>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d10a      	bne.n	8004004 <HAL_DMA_IRQHandler+0x52c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	bf14      	ite	ne
 8003ffc:	2301      	movne	r3, #1
 8003ffe:	2300      	moveq	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	e009      	b.n	8004018 <HAL_DMA_IRQHandler+0x540>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d03e      	beq.n	800409a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	f003 031f 	and.w	r3, r3, #31
 8004024:	2210      	movs	r2, #16
 8004026:	409a      	lsls	r2, r3
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d018      	beq.n	800406c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d108      	bne.n	800405a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404c:	2b00      	cmp	r3, #0
 800404e:	d024      	beq.n	800409a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	4798      	blx	r3
 8004058:	e01f      	b.n	800409a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	4798      	blx	r3
 800406a:	e016      	b.n	800409a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004076:	2b00      	cmp	r3, #0
 8004078:	d107      	bne.n	800408a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0208 	bic.w	r2, r2, #8
 8004088:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2220      	movs	r2, #32
 80040a4:	409a      	lsls	r2, r3
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f000 8110 	beq.w	80042d0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a2c      	ldr	r2, [pc, #176]	@ (8004168 <HAL_DMA_IRQHandler+0x690>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d04a      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a2b      	ldr	r2, [pc, #172]	@ (800416c <HAL_DMA_IRQHandler+0x694>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d045      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a29      	ldr	r2, [pc, #164]	@ (8004170 <HAL_DMA_IRQHandler+0x698>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d040      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a28      	ldr	r2, [pc, #160]	@ (8004174 <HAL_DMA_IRQHandler+0x69c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d03b      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a26      	ldr	r2, [pc, #152]	@ (8004178 <HAL_DMA_IRQHandler+0x6a0>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d036      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a25      	ldr	r2, [pc, #148]	@ (800417c <HAL_DMA_IRQHandler+0x6a4>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d031      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a23      	ldr	r2, [pc, #140]	@ (8004180 <HAL_DMA_IRQHandler+0x6a8>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d02c      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a22      	ldr	r2, [pc, #136]	@ (8004184 <HAL_DMA_IRQHandler+0x6ac>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d027      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a20      	ldr	r2, [pc, #128]	@ (8004188 <HAL_DMA_IRQHandler+0x6b0>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d022      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a1f      	ldr	r2, [pc, #124]	@ (800418c <HAL_DMA_IRQHandler+0x6b4>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d01d      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a1d      	ldr	r2, [pc, #116]	@ (8004190 <HAL_DMA_IRQHandler+0x6b8>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d018      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a1c      	ldr	r2, [pc, #112]	@ (8004194 <HAL_DMA_IRQHandler+0x6bc>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d013      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a1a      	ldr	r2, [pc, #104]	@ (8004198 <HAL_DMA_IRQHandler+0x6c0>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d00e      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a19      	ldr	r2, [pc, #100]	@ (800419c <HAL_DMA_IRQHandler+0x6c4>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <HAL_DMA_IRQHandler+0x6c8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d004      	beq.n	8004150 <HAL_DMA_IRQHandler+0x678>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a16      	ldr	r2, [pc, #88]	@ (80041a4 <HAL_DMA_IRQHandler+0x6cc>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d12b      	bne.n	80041a8 <HAL_DMA_IRQHandler+0x6d0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	bf14      	ite	ne
 800415e:	2301      	movne	r3, #1
 8004160:	2300      	moveq	r3, #0
 8004162:	b2db      	uxtb	r3, r3
 8004164:	e02a      	b.n	80041bc <HAL_DMA_IRQHandler+0x6e4>
 8004166:	bf00      	nop
 8004168:	40020010 	.word	0x40020010
 800416c:	40020028 	.word	0x40020028
 8004170:	40020040 	.word	0x40020040
 8004174:	40020058 	.word	0x40020058
 8004178:	40020070 	.word	0x40020070
 800417c:	40020088 	.word	0x40020088
 8004180:	400200a0 	.word	0x400200a0
 8004184:	400200b8 	.word	0x400200b8
 8004188:	40020410 	.word	0x40020410
 800418c:	40020428 	.word	0x40020428
 8004190:	40020440 	.word	0x40020440
 8004194:	40020458 	.word	0x40020458
 8004198:	40020470 	.word	0x40020470
 800419c:	40020488 	.word	0x40020488
 80041a0:	400204a0 	.word	0x400204a0
 80041a4:	400204b8 	.word	0x400204b8
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0302 	and.w	r3, r3, #2
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	bf14      	ite	ne
 80041b6:	2301      	movne	r3, #1
 80041b8:	2300      	moveq	r3, #0
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	f000 8087 	beq.w	80042d0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041c6:	f003 031f 	and.w	r3, r3, #31
 80041ca:	2220      	movs	r2, #32
 80041cc:	409a      	lsls	r2, r3
 80041ce:	6a3b      	ldr	r3, [r7, #32]
 80041d0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b04      	cmp	r3, #4
 80041dc:	d139      	bne.n	8004252 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 0216 	bic.w	r2, r2, #22
 80041ec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	695a      	ldr	r2, [r3, #20]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041fc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_DMA_IRQHandler+0x736>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800420a:	2b00      	cmp	r3, #0
 800420c:	d007      	beq.n	800421e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0208 	bic.w	r2, r2, #8
 800421c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004222:	f003 031f 	and.w	r3, r3, #31
 8004226:	223f      	movs	r2, #63	@ 0x3f
 8004228:	409a      	lsls	r2, r3
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 834a 	beq.w	80048dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	4798      	blx	r3
          }
          return;
 8004250:	e344      	b.n	80048dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800425c:	2b00      	cmp	r3, #0
 800425e:	d018      	beq.n	8004292 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d108      	bne.n	8004280 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004272:	2b00      	cmp	r3, #0
 8004274:	d02c      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
 800427e:	e027      	b.n	80042d0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004284:	2b00      	cmp	r3, #0
 8004286:	d023      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	4798      	blx	r3
 8004290:	e01e      	b.n	80042d0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10f      	bne.n	80042c0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f022 0210 	bic.w	r2, r2, #16
 80042ae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2201      	movs	r2, #1
 80042b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d003      	beq.n	80042d0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	f000 8306 	beq.w	80048e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f000 8088 	beq.w	80043f8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2204      	movs	r2, #4
 80042ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a7a      	ldr	r2, [pc, #488]	@ (80044e0 <HAL_DMA_IRQHandler+0xa08>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d04a      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a79      	ldr	r2, [pc, #484]	@ (80044e4 <HAL_DMA_IRQHandler+0xa0c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d045      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a77      	ldr	r2, [pc, #476]	@ (80044e8 <HAL_DMA_IRQHandler+0xa10>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d040      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a76      	ldr	r2, [pc, #472]	@ (80044ec <HAL_DMA_IRQHandler+0xa14>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d03b      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a74      	ldr	r2, [pc, #464]	@ (80044f0 <HAL_DMA_IRQHandler+0xa18>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d036      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	@ (80044f4 <HAL_DMA_IRQHandler+0xa1c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d031      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a71      	ldr	r2, [pc, #452]	@ (80044f8 <HAL_DMA_IRQHandler+0xa20>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d02c      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a70      	ldr	r2, [pc, #448]	@ (80044fc <HAL_DMA_IRQHandler+0xa24>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d027      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a6e      	ldr	r2, [pc, #440]	@ (8004500 <HAL_DMA_IRQHandler+0xa28>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a6d      	ldr	r2, [pc, #436]	@ (8004504 <HAL_DMA_IRQHandler+0xa2c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d01d      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a6b      	ldr	r2, [pc, #428]	@ (8004508 <HAL_DMA_IRQHandler+0xa30>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a6a      	ldr	r2, [pc, #424]	@ (800450c <HAL_DMA_IRQHandler+0xa34>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a68      	ldr	r2, [pc, #416]	@ (8004510 <HAL_DMA_IRQHandler+0xa38>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a67      	ldr	r2, [pc, #412]	@ (8004514 <HAL_DMA_IRQHandler+0xa3c>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a65      	ldr	r2, [pc, #404]	@ (8004518 <HAL_DMA_IRQHandler+0xa40>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_DMA_IRQHandler+0x8b8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a64      	ldr	r2, [pc, #400]	@ (800451c <HAL_DMA_IRQHandler+0xa44>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d108      	bne.n	80043a2 <HAL_DMA_IRQHandler+0x8ca>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f022 0201 	bic.w	r2, r2, #1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	e007      	b.n	80043b2 <HAL_DMA_IRQHandler+0x8da>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f022 0201 	bic.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3301      	adds	r3, #1
 80043b6:	60fb      	str	r3, [r7, #12]
 80043b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d307      	bcc.n	80043ce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1f2      	bne.n	80043b2 <HAL_DMA_IRQHandler+0x8da>
 80043cc:	e000      	b.n	80043d0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2203      	movs	r2, #3
 80043e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80043e6:	e003      	b.n	80043f0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	f000 8272 	beq.w	80048e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	4798      	blx	r3
 800440a:	e26c      	b.n	80048e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a43      	ldr	r2, [pc, #268]	@ (8004520 <HAL_DMA_IRQHandler+0xa48>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d022      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a42      	ldr	r2, [pc, #264]	@ (8004524 <HAL_DMA_IRQHandler+0xa4c>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d01d      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a40      	ldr	r2, [pc, #256]	@ (8004528 <HAL_DMA_IRQHandler+0xa50>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d018      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a3f      	ldr	r2, [pc, #252]	@ (800452c <HAL_DMA_IRQHandler+0xa54>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a3d      	ldr	r2, [pc, #244]	@ (8004530 <HAL_DMA_IRQHandler+0xa58>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d00e      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a3c      	ldr	r2, [pc, #240]	@ (8004534 <HAL_DMA_IRQHandler+0xa5c>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d009      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4a3a      	ldr	r2, [pc, #232]	@ (8004538 <HAL_DMA_IRQHandler+0xa60>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d004      	beq.n	800445c <HAL_DMA_IRQHandler+0x984>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a39      	ldr	r2, [pc, #228]	@ (800453c <HAL_DMA_IRQHandler+0xa64>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d101      	bne.n	8004460 <HAL_DMA_IRQHandler+0x988>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_DMA_IRQHandler+0x98a>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 823f 	beq.w	80048e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2204      	movs	r2, #4
 800447a:	409a      	lsls	r2, r3
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	f000 80cd 	beq.w	8004620 <HAL_DMA_IRQHandler+0xb48>
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	f003 0304 	and.w	r3, r3, #4
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 80c7 	beq.w	8004620 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004496:	f003 031f 	and.w	r3, r3, #31
 800449a:	2204      	movs	r2, #4
 800449c:	409a      	lsls	r2, r3
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d049      	beq.n	8004540 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d109      	bne.n	80044ca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	f000 8210 	beq.w	80048e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c8:	e20a      	b.n	80048e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	f000 8206 	beq.w	80048e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044dc:	e200      	b.n	80048e0 <HAL_DMA_IRQHandler+0xe08>
 80044de:	bf00      	nop
 80044e0:	40020010 	.word	0x40020010
 80044e4:	40020028 	.word	0x40020028
 80044e8:	40020040 	.word	0x40020040
 80044ec:	40020058 	.word	0x40020058
 80044f0:	40020070 	.word	0x40020070
 80044f4:	40020088 	.word	0x40020088
 80044f8:	400200a0 	.word	0x400200a0
 80044fc:	400200b8 	.word	0x400200b8
 8004500:	40020410 	.word	0x40020410
 8004504:	40020428 	.word	0x40020428
 8004508:	40020440 	.word	0x40020440
 800450c:	40020458 	.word	0x40020458
 8004510:	40020470 	.word	0x40020470
 8004514:	40020488 	.word	0x40020488
 8004518:	400204a0 	.word	0x400204a0
 800451c:	400204b8 	.word	0x400204b8
 8004520:	58025408 	.word	0x58025408
 8004524:	5802541c 	.word	0x5802541c
 8004528:	58025430 	.word	0x58025430
 800452c:	58025444 	.word	0x58025444
 8004530:	58025458 	.word	0x58025458
 8004534:	5802546c 	.word	0x5802546c
 8004538:	58025480 	.word	0x58025480
 800453c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f003 0320 	and.w	r3, r3, #32
 8004546:	2b00      	cmp	r3, #0
 8004548:	d160      	bne.n	800460c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a7f      	ldr	r2, [pc, #508]	@ (800474c <HAL_DMA_IRQHandler+0xc74>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d04a      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a7d      	ldr	r2, [pc, #500]	@ (8004750 <HAL_DMA_IRQHandler+0xc78>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d045      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a7c      	ldr	r2, [pc, #496]	@ (8004754 <HAL_DMA_IRQHandler+0xc7c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d040      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a7a      	ldr	r2, [pc, #488]	@ (8004758 <HAL_DMA_IRQHandler+0xc80>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d03b      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a79      	ldr	r2, [pc, #484]	@ (800475c <HAL_DMA_IRQHandler+0xc84>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d036      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a77      	ldr	r2, [pc, #476]	@ (8004760 <HAL_DMA_IRQHandler+0xc88>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d031      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a76      	ldr	r2, [pc, #472]	@ (8004764 <HAL_DMA_IRQHandler+0xc8c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d02c      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a74      	ldr	r2, [pc, #464]	@ (8004768 <HAL_DMA_IRQHandler+0xc90>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d027      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a73      	ldr	r2, [pc, #460]	@ (800476c <HAL_DMA_IRQHandler+0xc94>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d022      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a71      	ldr	r2, [pc, #452]	@ (8004770 <HAL_DMA_IRQHandler+0xc98>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d01d      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a70      	ldr	r2, [pc, #448]	@ (8004774 <HAL_DMA_IRQHandler+0xc9c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d018      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004778 <HAL_DMA_IRQHandler+0xca0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d013      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a6d      	ldr	r2, [pc, #436]	@ (800477c <HAL_DMA_IRQHandler+0xca4>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d00e      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a6b      	ldr	r2, [pc, #428]	@ (8004780 <HAL_DMA_IRQHandler+0xca8>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d009      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6a      	ldr	r2, [pc, #424]	@ (8004784 <HAL_DMA_IRQHandler+0xcac>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d004      	beq.n	80045ea <HAL_DMA_IRQHandler+0xb12>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a68      	ldr	r2, [pc, #416]	@ (8004788 <HAL_DMA_IRQHandler+0xcb0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d108      	bne.n	80045fc <HAL_DMA_IRQHandler+0xb24>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f022 0208 	bic.w	r2, r2, #8
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e007      	b.n	800460c <HAL_DMA_IRQHandler+0xb34>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	f000 8165 	beq.w	80048e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800461e:	e15f      	b.n	80048e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004624:	f003 031f 	and.w	r3, r3, #31
 8004628:	2202      	movs	r2, #2
 800462a:	409a      	lsls	r2, r3
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	4013      	ands	r3, r2
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 80c5 	beq.w	80047c0 <HAL_DMA_IRQHandler+0xce8>
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	f000 80bf 	beq.w	80047c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	2202      	movs	r2, #2
 800464c:	409a      	lsls	r2, r3
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d018      	beq.n	800468e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d109      	bne.n	800467a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	2b00      	cmp	r3, #0
 800466c:	f000 813a 	beq.w	80048e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004678:	e134      	b.n	80048e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800467e:	2b00      	cmp	r3, #0
 8004680:	f000 8130 	beq.w	80048e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800468c:	e12a      	b.n	80048e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0320 	and.w	r3, r3, #32
 8004694:	2b00      	cmp	r3, #0
 8004696:	f040 8089 	bne.w	80047ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a2b      	ldr	r2, [pc, #172]	@ (800474c <HAL_DMA_IRQHandler+0xc74>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d04a      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a29      	ldr	r2, [pc, #164]	@ (8004750 <HAL_DMA_IRQHandler+0xc78>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d045      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a28      	ldr	r2, [pc, #160]	@ (8004754 <HAL_DMA_IRQHandler+0xc7c>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d040      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a26      	ldr	r2, [pc, #152]	@ (8004758 <HAL_DMA_IRQHandler+0xc80>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d03b      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a25      	ldr	r2, [pc, #148]	@ (800475c <HAL_DMA_IRQHandler+0xc84>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d036      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a23      	ldr	r2, [pc, #140]	@ (8004760 <HAL_DMA_IRQHandler+0xc88>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d031      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a22      	ldr	r2, [pc, #136]	@ (8004764 <HAL_DMA_IRQHandler+0xc8c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d02c      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a20      	ldr	r2, [pc, #128]	@ (8004768 <HAL_DMA_IRQHandler+0xc90>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d027      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a1f      	ldr	r2, [pc, #124]	@ (800476c <HAL_DMA_IRQHandler+0xc94>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d022      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004770 <HAL_DMA_IRQHandler+0xc98>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d01d      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1c      	ldr	r2, [pc, #112]	@ (8004774 <HAL_DMA_IRQHandler+0xc9c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d018      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1a      	ldr	r2, [pc, #104]	@ (8004778 <HAL_DMA_IRQHandler+0xca0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d013      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a19      	ldr	r2, [pc, #100]	@ (800477c <HAL_DMA_IRQHandler+0xca4>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a17      	ldr	r2, [pc, #92]	@ (8004780 <HAL_DMA_IRQHandler+0xca8>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d009      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a16      	ldr	r2, [pc, #88]	@ (8004784 <HAL_DMA_IRQHandler+0xcac>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_DMA_IRQHandler+0xc62>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a14      	ldr	r2, [pc, #80]	@ (8004788 <HAL_DMA_IRQHandler+0xcb0>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d128      	bne.n	800478c <HAL_DMA_IRQHandler+0xcb4>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f022 0214 	bic.w	r2, r2, #20
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	e027      	b.n	800479c <HAL_DMA_IRQHandler+0xcc4>
 800474c:	40020010 	.word	0x40020010
 8004750:	40020028 	.word	0x40020028
 8004754:	40020040 	.word	0x40020040
 8004758:	40020058 	.word	0x40020058
 800475c:	40020070 	.word	0x40020070
 8004760:	40020088 	.word	0x40020088
 8004764:	400200a0 	.word	0x400200a0
 8004768:	400200b8 	.word	0x400200b8
 800476c:	40020410 	.word	0x40020410
 8004770:	40020428 	.word	0x40020428
 8004774:	40020440 	.word	0x40020440
 8004778:	40020458 	.word	0x40020458
 800477c:	40020470 	.word	0x40020470
 8004780:	40020488 	.word	0x40020488
 8004784:	400204a0 	.word	0x400204a0
 8004788:	400204b8 	.word	0x400204b8
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 020a 	bic.w	r2, r2, #10
 800479a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8097 	beq.w	80048e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047be:	e091      	b.n	80048e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2208      	movs	r2, #8
 80047ca:	409a      	lsls	r2, r3
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	4013      	ands	r3, r2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8088 	beq.w	80048e6 <HAL_DMA_IRQHandler+0xe0e>
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	f003 0308 	and.w	r3, r3, #8
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 8082 	beq.w	80048e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a41      	ldr	r2, [pc, #260]	@ (80048ec <HAL_DMA_IRQHandler+0xe14>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d04a      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a3f      	ldr	r2, [pc, #252]	@ (80048f0 <HAL_DMA_IRQHandler+0xe18>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d045      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a3e      	ldr	r2, [pc, #248]	@ (80048f4 <HAL_DMA_IRQHandler+0xe1c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d040      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a3c      	ldr	r2, [pc, #240]	@ (80048f8 <HAL_DMA_IRQHandler+0xe20>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d03b      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a3b      	ldr	r2, [pc, #236]	@ (80048fc <HAL_DMA_IRQHandler+0xe24>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d036      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a39      	ldr	r2, [pc, #228]	@ (8004900 <HAL_DMA_IRQHandler+0xe28>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d031      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a38      	ldr	r2, [pc, #224]	@ (8004904 <HAL_DMA_IRQHandler+0xe2c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d02c      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a36      	ldr	r2, [pc, #216]	@ (8004908 <HAL_DMA_IRQHandler+0xe30>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d027      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a35      	ldr	r2, [pc, #212]	@ (800490c <HAL_DMA_IRQHandler+0xe34>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d022      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a33      	ldr	r2, [pc, #204]	@ (8004910 <HAL_DMA_IRQHandler+0xe38>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d01d      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a32      	ldr	r2, [pc, #200]	@ (8004914 <HAL_DMA_IRQHandler+0xe3c>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d018      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <HAL_DMA_IRQHandler+0xe40>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d013      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a2f      	ldr	r2, [pc, #188]	@ (800491c <HAL_DMA_IRQHandler+0xe44>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a2d      	ldr	r2, [pc, #180]	@ (8004920 <HAL_DMA_IRQHandler+0xe48>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d009      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a2c      	ldr	r2, [pc, #176]	@ (8004924 <HAL_DMA_IRQHandler+0xe4c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_DMA_IRQHandler+0xdaa>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a2a      	ldr	r2, [pc, #168]	@ (8004928 <HAL_DMA_IRQHandler+0xe50>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d108      	bne.n	8004894 <HAL_DMA_IRQHandler+0xdbc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 021c 	bic.w	r2, r2, #28
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	e007      	b.n	80048a4 <HAL_DMA_IRQHandler+0xdcc>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 020e 	bic.w	r2, r2, #14
 80048a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a8:	f003 031f 	and.w	r3, r3, #31
 80048ac:	2201      	movs	r2, #1
 80048ae:	409a      	lsls	r2, r3
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d009      	beq.n	80048e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	4798      	blx	r3
 80048da:	e004      	b.n	80048e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048dc:	bf00      	nop
 80048de:	e002      	b.n	80048e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e0:	bf00      	nop
 80048e2:	e000      	b.n	80048e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80048e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80048e6:	3728      	adds	r7, #40	@ 0x28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40020010 	.word	0x40020010
 80048f0:	40020028 	.word	0x40020028
 80048f4:	40020040 	.word	0x40020040
 80048f8:	40020058 	.word	0x40020058
 80048fc:	40020070 	.word	0x40020070
 8004900:	40020088 	.word	0x40020088
 8004904:	400200a0 	.word	0x400200a0
 8004908:	400200b8 	.word	0x400200b8
 800490c:	40020410 	.word	0x40020410
 8004910:	40020428 	.word	0x40020428
 8004914:	40020440 	.word	0x40020440
 8004918:	40020458 	.word	0x40020458
 800491c:	40020470 	.word	0x40020470
 8004920:	40020488 	.word	0x40020488
 8004924:	400204a0 	.word	0x400204a0
 8004928:	400204b8 	.word	0x400204b8

0800492c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800492c:	b480      	push	{r7}
 800492e:	b087      	sub	sp, #28
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800493e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004944:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b48 <DMA_SetConfig+0x21c>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d072      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a7d      	ldr	r2, [pc, #500]	@ (8004b4c <DMA_SetConfig+0x220>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d06d      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b50 <DMA_SetConfig+0x224>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d068      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a7a      	ldr	r2, [pc, #488]	@ (8004b54 <DMA_SetConfig+0x228>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d063      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a79      	ldr	r2, [pc, #484]	@ (8004b58 <DMA_SetConfig+0x22c>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d05e      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a77      	ldr	r2, [pc, #476]	@ (8004b5c <DMA_SetConfig+0x230>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d059      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a76      	ldr	r2, [pc, #472]	@ (8004b60 <DMA_SetConfig+0x234>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d054      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a74      	ldr	r2, [pc, #464]	@ (8004b64 <DMA_SetConfig+0x238>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d04f      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a73      	ldr	r2, [pc, #460]	@ (8004b68 <DMA_SetConfig+0x23c>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d04a      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a71      	ldr	r2, [pc, #452]	@ (8004b6c <DMA_SetConfig+0x240>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d045      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a70      	ldr	r2, [pc, #448]	@ (8004b70 <DMA_SetConfig+0x244>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d040      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b74 <DMA_SetConfig+0x248>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d03b      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b78 <DMA_SetConfig+0x24c>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d036      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a6b      	ldr	r2, [pc, #428]	@ (8004b7c <DMA_SetConfig+0x250>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d031      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6a      	ldr	r2, [pc, #424]	@ (8004b80 <DMA_SetConfig+0x254>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d02c      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a68      	ldr	r2, [pc, #416]	@ (8004b84 <DMA_SetConfig+0x258>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d027      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a67      	ldr	r2, [pc, #412]	@ (8004b88 <DMA_SetConfig+0x25c>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d022      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a65      	ldr	r2, [pc, #404]	@ (8004b8c <DMA_SetConfig+0x260>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01d      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a64      	ldr	r2, [pc, #400]	@ (8004b90 <DMA_SetConfig+0x264>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d018      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a62      	ldr	r2, [pc, #392]	@ (8004b94 <DMA_SetConfig+0x268>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a61      	ldr	r2, [pc, #388]	@ (8004b98 <DMA_SetConfig+0x26c>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d00e      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a5f      	ldr	r2, [pc, #380]	@ (8004b9c <DMA_SetConfig+0x270>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d009      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a5e      	ldr	r2, [pc, #376]	@ (8004ba0 <DMA_SetConfig+0x274>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d004      	beq.n	8004a36 <DMA_SetConfig+0x10a>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a5c      	ldr	r2, [pc, #368]	@ (8004ba4 <DMA_SetConfig+0x278>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <DMA_SetConfig+0x10e>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <DMA_SetConfig+0x110>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00d      	beq.n	8004a5c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a48:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d004      	beq.n	8004a5c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	68fa      	ldr	r2, [r7, #12]
 8004a58:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a5a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a39      	ldr	r2, [pc, #228]	@ (8004b48 <DMA_SetConfig+0x21c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d04a      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a38      	ldr	r2, [pc, #224]	@ (8004b4c <DMA_SetConfig+0x220>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d045      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a36      	ldr	r2, [pc, #216]	@ (8004b50 <DMA_SetConfig+0x224>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d040      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a35      	ldr	r2, [pc, #212]	@ (8004b54 <DMA_SetConfig+0x228>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d03b      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a33      	ldr	r2, [pc, #204]	@ (8004b58 <DMA_SetConfig+0x22c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d036      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a32      	ldr	r2, [pc, #200]	@ (8004b5c <DMA_SetConfig+0x230>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d031      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a30      	ldr	r2, [pc, #192]	@ (8004b60 <DMA_SetConfig+0x234>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d02c      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b64 <DMA_SetConfig+0x238>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d027      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b68 <DMA_SetConfig+0x23c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d022      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2c      	ldr	r2, [pc, #176]	@ (8004b6c <DMA_SetConfig+0x240>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d01d      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b70 <DMA_SetConfig+0x244>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d018      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a29      	ldr	r2, [pc, #164]	@ (8004b74 <DMA_SetConfig+0x248>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d013      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <DMA_SetConfig+0x24c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d00e      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a26      	ldr	r2, [pc, #152]	@ (8004b7c <DMA_SetConfig+0x250>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d009      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a24      	ldr	r2, [pc, #144]	@ (8004b80 <DMA_SetConfig+0x254>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d004      	beq.n	8004afc <DMA_SetConfig+0x1d0>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a23      	ldr	r2, [pc, #140]	@ (8004b84 <DMA_SetConfig+0x258>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <DMA_SetConfig+0x1d4>
 8004afc:	2301      	movs	r3, #1
 8004afe:	e000      	b.n	8004b02 <DMA_SetConfig+0x1d6>
 8004b00:	2300      	movs	r3, #0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d059      	beq.n	8004bba <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b0a:	f003 031f 	and.w	r3, r3, #31
 8004b0e:	223f      	movs	r2, #63	@ 0x3f
 8004b10:	409a      	lsls	r2, r3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b24:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b40      	cmp	r3, #64	@ 0x40
 8004b34:	d138      	bne.n	8004ba8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b46:	e086      	b.n	8004c56 <DMA_SetConfig+0x32a>
 8004b48:	40020010 	.word	0x40020010
 8004b4c:	40020028 	.word	0x40020028
 8004b50:	40020040 	.word	0x40020040
 8004b54:	40020058 	.word	0x40020058
 8004b58:	40020070 	.word	0x40020070
 8004b5c:	40020088 	.word	0x40020088
 8004b60:	400200a0 	.word	0x400200a0
 8004b64:	400200b8 	.word	0x400200b8
 8004b68:	40020410 	.word	0x40020410
 8004b6c:	40020428 	.word	0x40020428
 8004b70:	40020440 	.word	0x40020440
 8004b74:	40020458 	.word	0x40020458
 8004b78:	40020470 	.word	0x40020470
 8004b7c:	40020488 	.word	0x40020488
 8004b80:	400204a0 	.word	0x400204a0
 8004b84:	400204b8 	.word	0x400204b8
 8004b88:	58025408 	.word	0x58025408
 8004b8c:	5802541c 	.word	0x5802541c
 8004b90:	58025430 	.word	0x58025430
 8004b94:	58025444 	.word	0x58025444
 8004b98:	58025458 	.word	0x58025458
 8004b9c:	5802546c 	.word	0x5802546c
 8004ba0:	58025480 	.word	0x58025480
 8004ba4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	60da      	str	r2, [r3, #12]
}
 8004bb8:	e04d      	b.n	8004c56 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a29      	ldr	r2, [pc, #164]	@ (8004c64 <DMA_SetConfig+0x338>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d022      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a27      	ldr	r2, [pc, #156]	@ (8004c68 <DMA_SetConfig+0x33c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d01d      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a26      	ldr	r2, [pc, #152]	@ (8004c6c <DMA_SetConfig+0x340>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d018      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a24      	ldr	r2, [pc, #144]	@ (8004c70 <DMA_SetConfig+0x344>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d013      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a23      	ldr	r2, [pc, #140]	@ (8004c74 <DMA_SetConfig+0x348>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d00e      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a21      	ldr	r2, [pc, #132]	@ (8004c78 <DMA_SetConfig+0x34c>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d009      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a20      	ldr	r2, [pc, #128]	@ (8004c7c <DMA_SetConfig+0x350>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d004      	beq.n	8004c0a <DMA_SetConfig+0x2de>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a1e      	ldr	r2, [pc, #120]	@ (8004c80 <DMA_SetConfig+0x354>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d101      	bne.n	8004c0e <DMA_SetConfig+0x2e2>
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	e000      	b.n	8004c10 <DMA_SetConfig+0x2e4>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d020      	beq.n	8004c56 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	2201      	movs	r2, #1
 8004c1e:	409a      	lsls	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	683a      	ldr	r2, [r7, #0]
 8004c2a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b40      	cmp	r3, #64	@ 0x40
 8004c32:	d108      	bne.n	8004c46 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68ba      	ldr	r2, [r7, #8]
 8004c42:	60da      	str	r2, [r3, #12]
}
 8004c44:	e007      	b.n	8004c56 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68ba      	ldr	r2, [r7, #8]
 8004c4c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	60da      	str	r2, [r3, #12]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	58025408 	.word	0x58025408
 8004c68:	5802541c 	.word	0x5802541c
 8004c6c:	58025430 	.word	0x58025430
 8004c70:	58025444 	.word	0x58025444
 8004c74:	58025458 	.word	0x58025458
 8004c78:	5802546c 	.word	0x5802546c
 8004c7c:	58025480 	.word	0x58025480
 8004c80:	58025494 	.word	0x58025494

08004c84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a42      	ldr	r2, [pc, #264]	@ (8004d9c <DMA_CalcBaseAndBitshift+0x118>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d04a      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a41      	ldr	r2, [pc, #260]	@ (8004da0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d045      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a3f      	ldr	r2, [pc, #252]	@ (8004da4 <DMA_CalcBaseAndBitshift+0x120>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d040      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a3e      	ldr	r2, [pc, #248]	@ (8004da8 <DMA_CalcBaseAndBitshift+0x124>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d03b      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dac <DMA_CalcBaseAndBitshift+0x128>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d036      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	@ (8004db0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d031      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a39      	ldr	r2, [pc, #228]	@ (8004db4 <DMA_CalcBaseAndBitshift+0x130>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d02c      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a38      	ldr	r2, [pc, #224]	@ (8004db8 <DMA_CalcBaseAndBitshift+0x134>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d027      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a36      	ldr	r2, [pc, #216]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x138>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d022      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a35      	ldr	r2, [pc, #212]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d01d      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a33      	ldr	r2, [pc, #204]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x140>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d018      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a32      	ldr	r2, [pc, #200]	@ (8004dc8 <DMA_CalcBaseAndBitshift+0x144>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a30      	ldr	r2, [pc, #192]	@ (8004dcc <DMA_CalcBaseAndBitshift+0x148>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00e      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d009      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a2d      	ldr	r2, [pc, #180]	@ (8004dd4 <DMA_CalcBaseAndBitshift+0x150>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d004      	beq.n	8004d2c <DMA_CalcBaseAndBitshift+0xa8>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a2c      	ldr	r2, [pc, #176]	@ (8004dd8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d101      	bne.n	8004d30 <DMA_CalcBaseAndBitshift+0xac>
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e000      	b.n	8004d32 <DMA_CalcBaseAndBitshift+0xae>
 8004d30:	2300      	movs	r3, #0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d024      	beq.n	8004d80 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	3b10      	subs	r3, #16
 8004d3e:	4a27      	ldr	r2, [pc, #156]	@ (8004ddc <DMA_CalcBaseAndBitshift+0x158>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	091b      	lsrs	r3, r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 0307 	and.w	r3, r3, #7
 8004d4e:	4a24      	ldr	r2, [pc, #144]	@ (8004de0 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d50:	5cd3      	ldrb	r3, [r2, r3]
 8004d52:	461a      	mov	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d908      	bls.n	8004d70 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	461a      	mov	r2, r3
 8004d64:	4b1f      	ldr	r3, [pc, #124]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	1d1a      	adds	r2, r3, #4
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d6e:	e00d      	b.n	8004d8c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b1b      	ldr	r3, [pc, #108]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x160>)
 8004d78:	4013      	ands	r3, r2
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d7e:	e005      	b.n	8004d8c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr
 8004d9c:	40020010 	.word	0x40020010
 8004da0:	40020028 	.word	0x40020028
 8004da4:	40020040 	.word	0x40020040
 8004da8:	40020058 	.word	0x40020058
 8004dac:	40020070 	.word	0x40020070
 8004db0:	40020088 	.word	0x40020088
 8004db4:	400200a0 	.word	0x400200a0
 8004db8:	400200b8 	.word	0x400200b8
 8004dbc:	40020410 	.word	0x40020410
 8004dc0:	40020428 	.word	0x40020428
 8004dc4:	40020440 	.word	0x40020440
 8004dc8:	40020458 	.word	0x40020458
 8004dcc:	40020470 	.word	0x40020470
 8004dd0:	40020488 	.word	0x40020488
 8004dd4:	400204a0 	.word	0x400204a0
 8004dd8:	400204b8 	.word	0x400204b8
 8004ddc:	aaaaaaab 	.word	0xaaaaaaab
 8004de0:	08010d58 	.word	0x08010d58
 8004de4:	fffffc00 	.word	0xfffffc00

08004de8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004df0:	2300      	movs	r3, #0
 8004df2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d120      	bne.n	8004e3e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d858      	bhi.n	8004eb6 <DMA_CheckFifoParam+0xce>
 8004e04:	a201      	add	r2, pc, #4	@ (adr r2, 8004e0c <DMA_CheckFifoParam+0x24>)
 8004e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e0a:	bf00      	nop
 8004e0c:	08004e1d 	.word	0x08004e1d
 8004e10:	08004e2f 	.word	0x08004e2f
 8004e14:	08004e1d 	.word	0x08004e1d
 8004e18:	08004eb7 	.word	0x08004eb7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d048      	beq.n	8004eba <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e2c:	e045      	b.n	8004eba <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e36:	d142      	bne.n	8004ebe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e3c:	e03f      	b.n	8004ebe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e46:	d123      	bne.n	8004e90 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4c:	2b03      	cmp	r3, #3
 8004e4e:	d838      	bhi.n	8004ec2 <DMA_CheckFifoParam+0xda>
 8004e50:	a201      	add	r2, pc, #4	@ (adr r2, 8004e58 <DMA_CheckFifoParam+0x70>)
 8004e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e56:	bf00      	nop
 8004e58:	08004e69 	.word	0x08004e69
 8004e5c:	08004e6f 	.word	0x08004e6f
 8004e60:	08004e69 	.word	0x08004e69
 8004e64:	08004e81 	.word	0x08004e81
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e6c:	e030      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d025      	beq.n	8004ec6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e7e:	e022      	b.n	8004ec6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e88:	d11f      	bne.n	8004eca <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e8e:	e01c      	b.n	8004eca <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d902      	bls.n	8004e9e <DMA_CheckFifoParam+0xb6>
 8004e98:	2b03      	cmp	r3, #3
 8004e9a:	d003      	beq.n	8004ea4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004e9c:	e018      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea2:	e015      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	73fb      	strb	r3, [r7, #15]
    break;
 8004eb4:	e00b      	b.n	8004ece <DMA_CheckFifoParam+0xe6>
        break;
 8004eb6:	bf00      	nop
 8004eb8:	e00a      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eba:	bf00      	nop
 8004ebc:	e008      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ebe:	bf00      	nop
 8004ec0:	e006      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ec2:	bf00      	nop
 8004ec4:	e004      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ec6:	bf00      	nop
 8004ec8:	e002      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eca:	bf00      	nop
 8004ecc:	e000      	b.n	8004ed0 <DMA_CheckFifoParam+0xe8>
    break;
 8004ece:	bf00      	nop
    }
  }

  return status;
 8004ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3714      	adds	r7, #20
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop

08004ee0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a38      	ldr	r2, [pc, #224]	@ (8004fd4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d022      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a36      	ldr	r2, [pc, #216]	@ (8004fd8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d01d      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a35      	ldr	r2, [pc, #212]	@ (8004fdc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d018      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a33      	ldr	r2, [pc, #204]	@ (8004fe0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d013      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a32      	ldr	r2, [pc, #200]	@ (8004fe4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d00e      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a30      	ldr	r2, [pc, #192]	@ (8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d009      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	@ (8004fec <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d004      	beq.n	8004f3e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a2d      	ldr	r2, [pc, #180]	@ (8004ff0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d101      	bne.n	8004f42 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d01a      	beq.n	8004f7e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	3b08      	subs	r3, #8
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f52:	fba2 2303 	umull	r2, r3, r2, r3
 8004f56:	091b      	lsrs	r3, r3, #4
 8004f58:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4b26      	ldr	r3, [pc, #152]	@ (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	461a      	mov	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a24      	ldr	r2, [pc, #144]	@ (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f6c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	f003 031f 	and.w	r3, r3, #31
 8004f74:	2201      	movs	r2, #1
 8004f76:	409a      	lsls	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f7c:	e024      	b.n	8004fc8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	3b10      	subs	r3, #16
 8004f86:	4a1e      	ldr	r2, [pc, #120]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004f88:	fba2 2303 	umull	r2, r3, r2, r3
 8004f8c:	091b      	lsrs	r3, r3, #4
 8004f8e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	4a1c      	ldr	r2, [pc, #112]	@ (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d806      	bhi.n	8004fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d902      	bls.n	8004fa6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4b18      	ldr	r3, [pc, #96]	@ (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004faa:	4413      	add	r3, r2
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	461a      	mov	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a16      	ldr	r2, [pc, #88]	@ (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fb8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f003 031f 	and.w	r3, r3, #31
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fc8:	bf00      	nop
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	58025408 	.word	0x58025408
 8004fd8:	5802541c 	.word	0x5802541c
 8004fdc:	58025430 	.word	0x58025430
 8004fe0:	58025444 	.word	0x58025444
 8004fe4:	58025458 	.word	0x58025458
 8004fe8:	5802546c 	.word	0x5802546c
 8004fec:	58025480 	.word	0x58025480
 8004ff0:	58025494 	.word	0x58025494
 8004ff4:	cccccccd 	.word	0xcccccccd
 8004ff8:	16009600 	.word	0x16009600
 8004ffc:	58025880 	.word	0x58025880
 8005000:	aaaaaaab 	.word	0xaaaaaaab
 8005004:	400204b8 	.word	0x400204b8
 8005008:	4002040f 	.word	0x4002040f
 800500c:	10008200 	.word	0x10008200
 8005010:	40020880 	.word	0x40020880

08005014 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b085      	sub	sp, #20
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	b2db      	uxtb	r3, r3
 8005022:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d04a      	beq.n	80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b08      	cmp	r3, #8
 800502e:	d847      	bhi.n	80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a25      	ldr	r2, [pc, #148]	@ (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d022      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a24      	ldr	r2, [pc, #144]	@ (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d01d      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	@ (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d018      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	@ (80050d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1f      	ldr	r2, [pc, #124]	@ (80050dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00e      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1e      	ldr	r2, [pc, #120]	@ (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d009      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a1c      	ldr	r2, [pc, #112]	@ (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d004      	beq.n	8005080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a1b      	ldr	r2, [pc, #108]	@ (80050e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d101      	bne.n	8005084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005080:	2301      	movs	r3, #1
 8005082:	e000      	b.n	8005086 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005084:	2300      	movs	r3, #0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800508e:	4413      	add	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	461a      	mov	r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800509c:	671a      	str	r2, [r3, #112]	@ 0x70
 800509e:	e009      	b.n	80050b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4b14      	ldr	r3, [pc, #80]	@ (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	461a      	mov	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a11      	ldr	r2, [pc, #68]	@ (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050b2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	58025408 	.word	0x58025408
 80050d0:	5802541c 	.word	0x5802541c
 80050d4:	58025430 	.word	0x58025430
 80050d8:	58025444 	.word	0x58025444
 80050dc:	58025458 	.word	0x58025458
 80050e0:	5802546c 	.word	0x5802546c
 80050e4:	58025480 	.word	0x58025480
 80050e8:	58025494 	.word	0x58025494
 80050ec:	1600963f 	.word	0x1600963f
 80050f0:	58025940 	.word	0x58025940
 80050f4:	1000823f 	.word	0x1000823f
 80050f8:	40020940 	.word	0x40020940

080050fc <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	460b      	mov	r3, r1
 8005106:	607a      	str	r2, [r7, #4]
 8005108:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e00a      	b.n	800512e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005118:	7afb      	ldrb	r3, [r7, #11]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	605a      	str	r2, [r3, #4]
      break;
 8005124:	e002      	b.n	800512c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	75fb      	strb	r3, [r7, #23]
      break;
 800512a:	bf00      	nop
  }

  return status;
 800512c:	7dfb      	ldrb	r3, [r7, #23]
}
 800512e:	4618      	mov	r0, r3
 8005130:	371c      	adds	r7, #28
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e003      	b.n	8005156 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005154:	2300      	movs	r3, #0
  }
}
 8005156:	4618      	mov	r0, r3
 8005158:	370c      	adds	r7, #12
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
	...

08005164 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	0c1b      	lsrs	r3, r3, #16
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f003 031f 	and.w	r3, r3, #31
 8005180:	2201      	movs	r2, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8005188:	f7fd f968 	bl	800245c <HAL_GetCurrentCPUID>
 800518c:	4603      	mov	r3, r0
 800518e:	2b03      	cmp	r3, #3
 8005190:	d105      	bne.n	800519e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	011a      	lsls	r2, r3, #4
 8005196:	4b0f      	ldr	r3, [pc, #60]	@ (80051d4 <HAL_EXTI_IRQHandler+0x70>)
 8005198:	4413      	add	r3, r2
 800519a:	617b      	str	r3, [r7, #20]
 800519c:	e004      	b.n	80051a8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	011a      	lsls	r2, r3, #4
 80051a2:	4b0d      	ldr	r3, [pc, #52]	@ (80051d8 <HAL_EXTI_IRQHandler+0x74>)
 80051a4:	4413      	add	r3, r2
 80051a6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68fa      	ldr	r2, [r7, #12]
 80051ae:	4013      	ands	r3, r2
 80051b0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	68fa      	ldr	r2, [r7, #12]
 80051bc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d002      	beq.n	80051cc <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	4798      	blx	r3
    }
  }
}
 80051cc:	bf00      	nop
 80051ce:	3718      	adds	r7, #24
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}
 80051d4:	58000088 	.word	0x58000088
 80051d8:	580000c8 	.word	0x580000c8

080051dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051dc:	b480      	push	{r7}
 80051de:	b089      	sub	sp, #36	@ 0x24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80051e6:	2300      	movs	r3, #0
 80051e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80051ea:	4b89      	ldr	r3, [pc, #548]	@ (8005410 <HAL_GPIO_Init+0x234>)
 80051ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80051ee:	e194      	b.n	800551a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	2101      	movs	r1, #1
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	fa01 f303 	lsl.w	r3, r1, r3
 80051fc:	4013      	ands	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f000 8186 	beq.w	8005514 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	f003 0303 	and.w	r3, r3, #3
 8005210:	2b01      	cmp	r3, #1
 8005212:	d005      	beq.n	8005220 <HAL_GPIO_Init+0x44>
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	f003 0303 	and.w	r3, r3, #3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d130      	bne.n	8005282 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	2203      	movs	r2, #3
 800522c:	fa02 f303 	lsl.w	r3, r2, r3
 8005230:	43db      	mvns	r3, r3
 8005232:	69ba      	ldr	r2, [r7, #24]
 8005234:	4013      	ands	r3, r2
 8005236:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	68da      	ldr	r2, [r3, #12]
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	fa02 f303 	lsl.w	r3, r2, r3
 8005244:	69ba      	ldr	r2, [r7, #24]
 8005246:	4313      	orrs	r3, r2
 8005248:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005256:	2201      	movs	r2, #1
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4013      	ands	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	091b      	lsrs	r3, r3, #4
 800526c:	f003 0201 	and.w	r2, r3, #1
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	69ba      	ldr	r2, [r7, #24]
 8005278:	4313      	orrs	r3, r2
 800527a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b03      	cmp	r3, #3
 800528c:	d017      	beq.n	80052be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	68db      	ldr	r3, [r3, #12]
 8005292:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	005b      	lsls	r3, r3, #1
 8005298:	2203      	movs	r2, #3
 800529a:	fa02 f303 	lsl.w	r3, r2, r3
 800529e:	43db      	mvns	r3, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	4013      	ands	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	fa02 f303 	lsl.w	r3, r2, r3
 80052b2:	69ba      	ldr	r2, [r7, #24]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d123      	bne.n	8005312 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	08da      	lsrs	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	3208      	adds	r2, #8
 80052d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	f003 0307 	and.w	r3, r3, #7
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	220f      	movs	r2, #15
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	69ba      	ldr	r2, [r7, #24]
 80052ea:	4013      	ands	r3, r2
 80052ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	69ba      	ldr	r2, [r7, #24]
 8005300:	4313      	orrs	r3, r2
 8005302:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	08da      	lsrs	r2, r3, #3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	3208      	adds	r2, #8
 800530c:	69b9      	ldr	r1, [r7, #24]
 800530e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	2203      	movs	r2, #3
 800531e:	fa02 f303 	lsl.w	r3, r2, r3
 8005322:	43db      	mvns	r3, r3
 8005324:	69ba      	ldr	r2, [r7, #24]
 8005326:	4013      	ands	r3, r2
 8005328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f003 0203 	and.w	r2, r3, #3
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	4313      	orrs	r3, r2
 800533e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800534e:	2b00      	cmp	r3, #0
 8005350:	f000 80e0 	beq.w	8005514 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005354:	4b2f      	ldr	r3, [pc, #188]	@ (8005414 <HAL_GPIO_Init+0x238>)
 8005356:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800535a:	4a2e      	ldr	r2, [pc, #184]	@ (8005414 <HAL_GPIO_Init+0x238>)
 800535c:	f043 0302 	orr.w	r3, r3, #2
 8005360:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005364:	4b2b      	ldr	r3, [pc, #172]	@ (8005414 <HAL_GPIO_Init+0x238>)
 8005366:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005372:	4a29      	ldr	r2, [pc, #164]	@ (8005418 <HAL_GPIO_Init+0x23c>)
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	089b      	lsrs	r3, r3, #2
 8005378:	3302      	adds	r3, #2
 800537a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800537e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	f003 0303 	and.w	r3, r3, #3
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	220f      	movs	r2, #15
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43db      	mvns	r3, r3
 8005390:	69ba      	ldr	r2, [r7, #24]
 8005392:	4013      	ands	r3, r2
 8005394:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a20      	ldr	r2, [pc, #128]	@ (800541c <HAL_GPIO_Init+0x240>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d052      	beq.n	8005444 <HAL_GPIO_Init+0x268>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a1f      	ldr	r2, [pc, #124]	@ (8005420 <HAL_GPIO_Init+0x244>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d031      	beq.n	800540a <HAL_GPIO_Init+0x22e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005424 <HAL_GPIO_Init+0x248>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d02b      	beq.n	8005406 <HAL_GPIO_Init+0x22a>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1d      	ldr	r2, [pc, #116]	@ (8005428 <HAL_GPIO_Init+0x24c>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d025      	beq.n	8005402 <HAL_GPIO_Init+0x226>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1c      	ldr	r2, [pc, #112]	@ (800542c <HAL_GPIO_Init+0x250>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d01f      	beq.n	80053fe <HAL_GPIO_Init+0x222>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005430 <HAL_GPIO_Init+0x254>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d019      	beq.n	80053fa <HAL_GPIO_Init+0x21e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1a      	ldr	r2, [pc, #104]	@ (8005434 <HAL_GPIO_Init+0x258>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d013      	beq.n	80053f6 <HAL_GPIO_Init+0x21a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a19      	ldr	r2, [pc, #100]	@ (8005438 <HAL_GPIO_Init+0x25c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d00d      	beq.n	80053f2 <HAL_GPIO_Init+0x216>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a18      	ldr	r2, [pc, #96]	@ (800543c <HAL_GPIO_Init+0x260>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d007      	beq.n	80053ee <HAL_GPIO_Init+0x212>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a17      	ldr	r2, [pc, #92]	@ (8005440 <HAL_GPIO_Init+0x264>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d101      	bne.n	80053ea <HAL_GPIO_Init+0x20e>
 80053e6:	2309      	movs	r3, #9
 80053e8:	e02d      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053ea:	230a      	movs	r3, #10
 80053ec:	e02b      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053ee:	2308      	movs	r3, #8
 80053f0:	e029      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053f2:	2307      	movs	r3, #7
 80053f4:	e027      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053f6:	2306      	movs	r3, #6
 80053f8:	e025      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053fa:	2305      	movs	r3, #5
 80053fc:	e023      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 80053fe:	2304      	movs	r3, #4
 8005400:	e021      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 8005402:	2303      	movs	r3, #3
 8005404:	e01f      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 8005406:	2302      	movs	r3, #2
 8005408:	e01d      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 800540a:	2301      	movs	r3, #1
 800540c:	e01b      	b.n	8005446 <HAL_GPIO_Init+0x26a>
 800540e:	bf00      	nop
 8005410:	58000080 	.word	0x58000080
 8005414:	58024400 	.word	0x58024400
 8005418:	58000400 	.word	0x58000400
 800541c:	58020000 	.word	0x58020000
 8005420:	58020400 	.word	0x58020400
 8005424:	58020800 	.word	0x58020800
 8005428:	58020c00 	.word	0x58020c00
 800542c:	58021000 	.word	0x58021000
 8005430:	58021400 	.word	0x58021400
 8005434:	58021800 	.word	0x58021800
 8005438:	58021c00 	.word	0x58021c00
 800543c:	58022000 	.word	0x58022000
 8005440:	58022400 	.word	0x58022400
 8005444:	2300      	movs	r3, #0
 8005446:	69fa      	ldr	r2, [r7, #28]
 8005448:	f002 0203 	and.w	r2, r2, #3
 800544c:	0092      	lsls	r2, r2, #2
 800544e:	4093      	lsls	r3, r2
 8005450:	69ba      	ldr	r2, [r7, #24]
 8005452:	4313      	orrs	r3, r2
 8005454:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005456:	4938      	ldr	r1, [pc, #224]	@ (8005538 <HAL_GPIO_Init+0x35c>)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	089b      	lsrs	r3, r3, #2
 800545c:	3302      	adds	r3, #2
 800545e:	69ba      	ldr	r2, [r7, #24]
 8005460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005464:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	43db      	mvns	r3, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4013      	ands	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005482:	69ba      	ldr	r2, [r7, #24]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800548a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005492:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	43db      	mvns	r3, r3
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4013      	ands	r3, r2
 80054a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d003      	beq.n	80054b8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054b0:	69ba      	ldr	r2, [r7, #24]
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054b8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	43db      	mvns	r3, r3
 80054ca:	69ba      	ldr	r2, [r7, #24]
 80054cc:	4013      	ands	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d003      	beq.n	80054e4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80054dc:	69ba      	ldr	r2, [r7, #24]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	4313      	orrs	r3, r2
 80054e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	43db      	mvns	r3, r3
 80054f4:	69ba      	ldr	r2, [r7, #24]
 80054f6:	4013      	ands	r3, r2
 80054f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	4313      	orrs	r3, r2
 800550c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	3301      	adds	r3, #1
 8005518:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	69fb      	ldr	r3, [r7, #28]
 8005520:	fa22 f303 	lsr.w	r3, r2, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	f47f ae63 	bne.w	80051f0 <HAL_GPIO_Init+0x14>
  }
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	3724      	adds	r7, #36	@ 0x24
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr
 8005538:	58000400 	.word	0x58000400

0800553c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	460b      	mov	r3, r1
 8005546:	807b      	strh	r3, [r7, #2]
 8005548:	4613      	mov	r3, r2
 800554a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800554c:	787b      	ldrb	r3, [r7, #1]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d003      	beq.n	800555a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005552:	887a      	ldrh	r2, [r7, #2]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005558:	e003      	b.n	8005562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800555a:	887b      	ldrh	r3, [r7, #2]
 800555c:	041a      	lsls	r2, r3, #16
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	619a      	str	r2, [r3, #24]
}
 8005562:	bf00      	nop
 8005564:	370c      	adds	r7, #12
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
	...

08005570 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005578:	4a08      	ldr	r2, [pc, #32]	@ (800559c <HAL_HSEM_FastTake+0x2c>)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3320      	adds	r3, #32
 800557e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005582:	4a07      	ldr	r2, [pc, #28]	@ (80055a0 <HAL_HSEM_FastTake+0x30>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005588:	2300      	movs	r3, #0
 800558a:	e000      	b.n	800558e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
}
 800558e:	4618      	mov	r0, r3
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr
 800559a:	bf00      	nop
 800559c:	58026400 	.word	0x58026400
 80055a0:	80000300 	.word	0x80000300

080055a4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80055ae:	4906      	ldr	r1, [pc, #24]	@ (80055c8 <HAL_HSEM_Release+0x24>)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	58026400 	.word	0x58026400

080055cc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b084      	sub	sp, #16
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80055d4:	4b29      	ldr	r3, [pc, #164]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b06      	cmp	r3, #6
 80055de:	d00a      	beq.n	80055f6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80055e0:	4b26      	ldr	r3, [pc, #152]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d001      	beq.n	80055f2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e040      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80055f2:	2300      	movs	r3, #0
 80055f4:	e03e      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80055f6:	4b21      	ldr	r3, [pc, #132]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80055fe:	491f      	ldr	r1, [pc, #124]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4313      	orrs	r3, r2
 8005604:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005606:	f7fc fe31 	bl	800226c <HAL_GetTick>
 800560a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800560c:	e009      	b.n	8005622 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800560e:	f7fc fe2d 	bl	800226c <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800561c:	d901      	bls.n	8005622 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	e028      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005622:	4b16      	ldr	r3, [pc, #88]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800562a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800562e:	d1ee      	bne.n	800560e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b1e      	cmp	r3, #30
 8005634:	d008      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2b2e      	cmp	r3, #46	@ 0x2e
 800563a:	d005      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b1d      	cmp	r3, #29
 8005640:	d002      	beq.n	8005648 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b2d      	cmp	r3, #45	@ 0x2d
 8005646:	d114      	bne.n	8005672 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005648:	f7fc fe10 	bl	800226c <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800564e:	e009      	b.n	8005664 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005650:	f7fc fe0c 	bl	800226c <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800565e:	d901      	bls.n	8005664 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	e007      	b.n	8005674 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005664:	4b05      	ldr	r3, [pc, #20]	@ (800567c <HAL_PWREx_ConfigSupply+0xb0>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800566c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005670:	d1ee      	bne.n	8005650 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3710      	adds	r7, #16
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	58024800 	.word	0x58024800

08005680 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	@ 0x30
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d102      	bne.n	8005694 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	f000 bc48 	b.w	8005f24 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0301 	and.w	r3, r3, #1
 800569c:	2b00      	cmp	r3, #0
 800569e:	f000 8088 	beq.w	80057b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056a2:	4b99      	ldr	r3, [pc, #612]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056ac:	4b96      	ldr	r3, [pc, #600]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b4:	2b10      	cmp	r3, #16
 80056b6:	d007      	beq.n	80056c8 <HAL_RCC_OscConfig+0x48>
 80056b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ba:	2b18      	cmp	r3, #24
 80056bc:	d111      	bne.n	80056e2 <HAL_RCC_OscConfig+0x62>
 80056be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c0:	f003 0303 	and.w	r3, r3, #3
 80056c4:	2b02      	cmp	r3, #2
 80056c6:	d10c      	bne.n	80056e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d06d      	beq.n	80057b0 <HAL_RCC_OscConfig+0x130>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d169      	bne.n	80057b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f000 bc21 	b.w	8005f24 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056ea:	d106      	bne.n	80056fa <HAL_RCC_OscConfig+0x7a>
 80056ec:	4b86      	ldr	r3, [pc, #536]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a85      	ldr	r2, [pc, #532]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80056f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80056f6:	6013      	str	r3, [r2, #0]
 80056f8:	e02e      	b.n	8005758 <HAL_RCC_OscConfig+0xd8>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10c      	bne.n	800571c <HAL_RCC_OscConfig+0x9c>
 8005702:	4b81      	ldr	r3, [pc, #516]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a80      	ldr	r2, [pc, #512]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005708:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800570c:	6013      	str	r3, [r2, #0]
 800570e:	4b7e      	ldr	r3, [pc, #504]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a7d      	ldr	r2, [pc, #500]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005714:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	e01d      	b.n	8005758 <HAL_RCC_OscConfig+0xd8>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005724:	d10c      	bne.n	8005740 <HAL_RCC_OscConfig+0xc0>
 8005726:	4b78      	ldr	r3, [pc, #480]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a77      	ldr	r2, [pc, #476]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800572c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	4b75      	ldr	r3, [pc, #468]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	4a74      	ldr	r2, [pc, #464]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005738:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800573c:	6013      	str	r3, [r2, #0]
 800573e:	e00b      	b.n	8005758 <HAL_RCC_OscConfig+0xd8>
 8005740:	4b71      	ldr	r3, [pc, #452]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4a70      	ldr	r2, [pc, #448]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005746:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800574a:	6013      	str	r3, [r2, #0]
 800574c:	4b6e      	ldr	r3, [pc, #440]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a6d      	ldr	r2, [pc, #436]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005752:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005756:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d013      	beq.n	8005788 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005760:	f7fc fd84 	bl	800226c <HAL_GetTick>
 8005764:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005768:	f7fc fd80 	bl	800226c <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b64      	cmp	r3, #100	@ 0x64
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e3d4      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800577a:	4b63      	ldr	r3, [pc, #396]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d0f0      	beq.n	8005768 <HAL_RCC_OscConfig+0xe8>
 8005786:	e014      	b.n	80057b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005788:	f7fc fd70 	bl	800226c <HAL_GetTick>
 800578c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800578e:	e008      	b.n	80057a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005790:	f7fc fd6c 	bl	800226c <HAL_GetTick>
 8005794:	4602      	mov	r2, r0
 8005796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005798:	1ad3      	subs	r3, r2, r3
 800579a:	2b64      	cmp	r3, #100	@ 0x64
 800579c:	d901      	bls.n	80057a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800579e:	2303      	movs	r3, #3
 80057a0:	e3c0      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057a2:	4b59      	ldr	r3, [pc, #356]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d1f0      	bne.n	8005790 <HAL_RCC_OscConfig+0x110>
 80057ae:	e000      	b.n	80057b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0302 	and.w	r3, r3, #2
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80ca 	beq.w	8005954 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057c0:	4b51      	ldr	r3, [pc, #324]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057ca:	4b4f      	ldr	r3, [pc, #316]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80057cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ce:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d007      	beq.n	80057e6 <HAL_RCC_OscConfig+0x166>
 80057d6:	6a3b      	ldr	r3, [r7, #32]
 80057d8:	2b18      	cmp	r3, #24
 80057da:	d156      	bne.n	800588a <HAL_RCC_OscConfig+0x20a>
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0303 	and.w	r3, r3, #3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d151      	bne.n	800588a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e6:	4b48      	ldr	r3, [pc, #288]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 0304 	and.w	r3, r3, #4
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d005      	beq.n	80057fe <HAL_RCC_OscConfig+0x17e>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e392      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057fe:	4b42      	ldr	r3, [pc, #264]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f023 0219 	bic.w	r2, r3, #25
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	493f      	ldr	r1, [pc, #252]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800580c:	4313      	orrs	r3, r2
 800580e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005810:	f7fc fd2c 	bl	800226c <HAL_GetTick>
 8005814:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005816:	e008      	b.n	800582a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005818:	f7fc fd28 	bl	800226c <HAL_GetTick>
 800581c:	4602      	mov	r2, r0
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	1ad3      	subs	r3, r2, r3
 8005822:	2b02      	cmp	r3, #2
 8005824:	d901      	bls.n	800582a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e37c      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800582a:	4b37      	ldr	r3, [pc, #220]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0304 	and.w	r3, r3, #4
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f0      	beq.n	8005818 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	f7fc fd25 	bl	8002284 <HAL_GetREVID>
 800583a:	4603      	mov	r3, r0
 800583c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005840:	4293      	cmp	r3, r2
 8005842:	d817      	bhi.n	8005874 <HAL_RCC_OscConfig+0x1f4>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	2b40      	cmp	r3, #64	@ 0x40
 800584a:	d108      	bne.n	800585e <HAL_RCC_OscConfig+0x1de>
 800584c:	4b2e      	ldr	r3, [pc, #184]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005854:	4a2c      	ldr	r2, [pc, #176]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005856:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800585a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800585c:	e07a      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585e:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	031b      	lsls	r3, r3, #12
 800586c:	4926      	ldr	r1, [pc, #152]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 800586e:	4313      	orrs	r3, r2
 8005870:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005872:	e06f      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005874:	4b24      	ldr	r3, [pc, #144]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	061b      	lsls	r3, r3, #24
 8005882:	4921      	ldr	r1, [pc, #132]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005884:	4313      	orrs	r3, r2
 8005886:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005888:	e064      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d047      	beq.n	8005922 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005892:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f023 0219 	bic.w	r2, r3, #25
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	491a      	ldr	r1, [pc, #104]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80058a0:	4313      	orrs	r3, r2
 80058a2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058a4:	f7fc fce2 	bl	800226c <HAL_GetTick>
 80058a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058aa:	e008      	b.n	80058be <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058ac:	f7fc fcde 	bl	800226c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e332      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058be:	4b12      	ldr	r3, [pc, #72]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ca:	f7fc fcdb 	bl	8002284 <HAL_GetREVID>
 80058ce:	4603      	mov	r3, r0
 80058d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d819      	bhi.n	800590c <HAL_RCC_OscConfig+0x28c>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	2b40      	cmp	r3, #64	@ 0x40
 80058de:	d108      	bne.n	80058f2 <HAL_RCC_OscConfig+0x272>
 80058e0:	4b09      	ldr	r3, [pc, #36]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80058e8:	4a07      	ldr	r2, [pc, #28]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80058ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058ee:	6053      	str	r3, [r2, #4]
 80058f0:	e030      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
 80058f2:	4b05      	ldr	r3, [pc, #20]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	031b      	lsls	r3, r3, #12
 8005900:	4901      	ldr	r1, [pc, #4]	@ (8005908 <HAL_RCC_OscConfig+0x288>)
 8005902:	4313      	orrs	r3, r2
 8005904:	604b      	str	r3, [r1, #4]
 8005906:	e025      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
 8005908:	58024400 	.word	0x58024400
 800590c:	4b9a      	ldr	r3, [pc, #616]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	691b      	ldr	r3, [r3, #16]
 8005918:	061b      	lsls	r3, r3, #24
 800591a:	4997      	ldr	r1, [pc, #604]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 800591c:	4313      	orrs	r3, r2
 800591e:	604b      	str	r3, [r1, #4]
 8005920:	e018      	b.n	8005954 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005922:	4b95      	ldr	r3, [pc, #596]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a94      	ldr	r2, [pc, #592]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005928:	f023 0301 	bic.w	r3, r3, #1
 800592c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800592e:	f7fc fc9d 	bl	800226c <HAL_GetTick>
 8005932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005936:	f7fc fc99 	bl	800226c <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e2ed      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005948:	4b8b      	ldr	r3, [pc, #556]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0304 	and.w	r3, r3, #4
 8005950:	2b00      	cmp	r3, #0
 8005952:	d1f0      	bne.n	8005936 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0310 	and.w	r3, r3, #16
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80a9 	beq.w	8005ab4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005962:	4b85      	ldr	r3, [pc, #532]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005964:	691b      	ldr	r3, [r3, #16]
 8005966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800596a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800596c:	4b82      	ldr	r3, [pc, #520]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005970:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	2b08      	cmp	r3, #8
 8005976:	d007      	beq.n	8005988 <HAL_RCC_OscConfig+0x308>
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	2b18      	cmp	r3, #24
 800597c:	d13a      	bne.n	80059f4 <HAL_RCC_OscConfig+0x374>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f003 0303 	and.w	r3, r3, #3
 8005984:	2b01      	cmp	r3, #1
 8005986:	d135      	bne.n	80059f4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005988:	4b7b      	ldr	r3, [pc, #492]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_OscConfig+0x320>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	2b80      	cmp	r3, #128	@ 0x80
 800599a:	d001      	beq.n	80059a0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e2c1      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059a0:	f7fc fc70 	bl	8002284 <HAL_GetREVID>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d817      	bhi.n	80059de <HAL_RCC_OscConfig+0x35e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d108      	bne.n	80059c8 <HAL_RCC_OscConfig+0x348>
 80059b6:	4b70      	ldr	r3, [pc, #448]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059be:	4a6e      	ldr	r2, [pc, #440]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059c4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059c6:	e075      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a1b      	ldr	r3, [r3, #32]
 80059d4:	069b      	lsls	r3, r3, #26
 80059d6:	4968      	ldr	r1, [pc, #416]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059d8:	4313      	orrs	r3, r2
 80059da:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059dc:	e06a      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059de:	4b66      	ldr	r3, [pc, #408]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	061b      	lsls	r3, r3, #24
 80059ec:	4962      	ldr	r1, [pc, #392]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059f2:	e05f      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d042      	beq.n	8005a82 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80059fc:	4b5e      	ldr	r3, [pc, #376]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a5d      	ldr	r2, [pc, #372]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a08:	f7fc fc30 	bl	800226c <HAL_GetTick>
 8005a0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a0e:	e008      	b.n	8005a22 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a10:	f7fc fc2c 	bl	800226c <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	2b02      	cmp	r3, #2
 8005a1c:	d901      	bls.n	8005a22 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e280      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a22:	4b55      	ldr	r3, [pc, #340]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d0f0      	beq.n	8005a10 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a2e:	f7fc fc29 	bl	8002284 <HAL_GetREVID>
 8005a32:	4603      	mov	r3, r0
 8005a34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d817      	bhi.n	8005a6c <HAL_RCC_OscConfig+0x3ec>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d108      	bne.n	8005a56 <HAL_RCC_OscConfig+0x3d6>
 8005a44:	4b4c      	ldr	r3, [pc, #304]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a4c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a52:	6053      	str	r3, [r2, #4]
 8005a54:	e02e      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
 8005a56:	4b48      	ldr	r3, [pc, #288]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a1b      	ldr	r3, [r3, #32]
 8005a62:	069b      	lsls	r3, r3, #26
 8005a64:	4944      	ldr	r1, [pc, #272]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	604b      	str	r3, [r1, #4]
 8005a6a:	e023      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
 8005a6c:	4b42      	ldr	r3, [pc, #264]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	061b      	lsls	r3, r3, #24
 8005a7a:	493f      	ldr	r1, [pc, #252]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	60cb      	str	r3, [r1, #12]
 8005a80:	e018      	b.n	8005ab4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005a82:	4b3d      	ldr	r3, [pc, #244]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3c      	ldr	r2, [pc, #240]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005a88:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8e:	f7fc fbed 	bl	800226c <HAL_GetTick>
 8005a92:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005a94:	e008      	b.n	8005aa8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a96:	f7fc fbe9 	bl	800226c <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	2b02      	cmp	r3, #2
 8005aa2:	d901      	bls.n	8005aa8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005aa4:	2303      	movs	r3, #3
 8005aa6:	e23d      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005aa8:	4b33      	ldr	r3, [pc, #204]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1f0      	bne.n	8005a96 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 0308 	and.w	r3, r3, #8
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d036      	beq.n	8005b2e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d019      	beq.n	8005afc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ac8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005aca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005acc:	4a2a      	ldr	r2, [pc, #168]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005ace:	f043 0301 	orr.w	r3, r3, #1
 8005ad2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad4:	f7fc fbca 	bl	800226c <HAL_GetTick>
 8005ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005adc:	f7fc fbc6 	bl	800226c <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b02      	cmp	r3, #2
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e21a      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005aee:	4b22      	ldr	r3, [pc, #136]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005af0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0x45c>
 8005afa:	e018      	b.n	8005b2e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005afc:	4b1e      	ldr	r3, [pc, #120]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005afe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b00:	4a1d      	ldr	r2, [pc, #116]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005b02:	f023 0301 	bic.w	r3, r3, #1
 8005b06:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b08:	f7fc fbb0 	bl	800226c <HAL_GetTick>
 8005b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b0e:	e008      	b.n	8005b22 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b10:	f7fc fbac 	bl	800226c <HAL_GetTick>
 8005b14:	4602      	mov	r2, r0
 8005b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b18:	1ad3      	subs	r3, r2, r3
 8005b1a:	2b02      	cmp	r3, #2
 8005b1c:	d901      	bls.n	8005b22 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e200      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b22:	4b15      	ldr	r3, [pc, #84]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005b24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b26:	f003 0302 	and.w	r3, r3, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1f0      	bne.n	8005b10 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f003 0320 	and.w	r3, r3, #32
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d039      	beq.n	8005bae <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d01c      	beq.n	8005b7c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a0c      	ldr	r2, [pc, #48]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005b48:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b4c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b4e:	f7fc fb8d 	bl	800226c <HAL_GetTick>
 8005b52:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b54:	e008      	b.n	8005b68 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b56:	f7fc fb89 	bl	800226c <HAL_GetTick>
 8005b5a:	4602      	mov	r2, r0
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d901      	bls.n	8005b68 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e1dd      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b68:	4b03      	ldr	r3, [pc, #12]	@ (8005b78 <HAL_RCC_OscConfig+0x4f8>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d0f0      	beq.n	8005b56 <HAL_RCC_OscConfig+0x4d6>
 8005b74:	e01b      	b.n	8005bae <HAL_RCC_OscConfig+0x52e>
 8005b76:	bf00      	nop
 8005b78:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b7c:	4b9b      	ldr	r3, [pc, #620]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4a9a      	ldr	r2, [pc, #616]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005b82:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b86:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b88:	f7fc fb70 	bl	800226c <HAL_GetTick>
 8005b8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005b8e:	e008      	b.n	8005ba2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b90:	f7fc fb6c 	bl	800226c <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d901      	bls.n	8005ba2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e1c0      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ba2:	4b92      	ldr	r3, [pc, #584]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1f0      	bne.n	8005b90 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0304 	and.w	r3, r3, #4
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f000 8081 	beq.w	8005cbe <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bbc:	4b8c      	ldr	r3, [pc, #560]	@ (8005df0 <HAL_RCC_OscConfig+0x770>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a8b      	ldr	r2, [pc, #556]	@ (8005df0 <HAL_RCC_OscConfig+0x770>)
 8005bc2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005bc8:	f7fc fb50 	bl	800226c <HAL_GetTick>
 8005bcc:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bce:	e008      	b.n	8005be2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bd0:	f7fc fb4c 	bl	800226c <HAL_GetTick>
 8005bd4:	4602      	mov	r2, r0
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	2b64      	cmp	r3, #100	@ 0x64
 8005bdc:	d901      	bls.n	8005be2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005bde:	2303      	movs	r3, #3
 8005be0:	e1a0      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005be2:	4b83      	ldr	r3, [pc, #524]	@ (8005df0 <HAL_RCC_OscConfig+0x770>)
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d0f0      	beq.n	8005bd0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d106      	bne.n	8005c04 <HAL_RCC_OscConfig+0x584>
 8005bf6:	4b7d      	ldr	r3, [pc, #500]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005bfc:	f043 0301 	orr.w	r3, r3, #1
 8005c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c02:	e02d      	b.n	8005c60 <HAL_RCC_OscConfig+0x5e0>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10c      	bne.n	8005c26 <HAL_RCC_OscConfig+0x5a6>
 8005c0c:	4b77      	ldr	r3, [pc, #476]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c10:	4a76      	ldr	r2, [pc, #472]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c12:	f023 0301 	bic.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c18:	4b74      	ldr	r3, [pc, #464]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1c:	4a73      	ldr	r2, [pc, #460]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c1e:	f023 0304 	bic.w	r3, r3, #4
 8005c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c24:	e01c      	b.n	8005c60 <HAL_RCC_OscConfig+0x5e0>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2b05      	cmp	r3, #5
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCC_OscConfig+0x5c8>
 8005c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	4a6e      	ldr	r2, [pc, #440]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c3a:	4b6c      	ldr	r3, [pc, #432]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3e:	4a6b      	ldr	r2, [pc, #428]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c40:	f043 0301 	orr.w	r3, r3, #1
 8005c44:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c46:	e00b      	b.n	8005c60 <HAL_RCC_OscConfig+0x5e0>
 8005c48:	4b68      	ldr	r3, [pc, #416]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4c:	4a67      	ldr	r2, [pc, #412]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c54:	4b65      	ldr	r3, [pc, #404]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c58:	4a64      	ldr	r2, [pc, #400]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c5a:	f023 0304 	bic.w	r3, r3, #4
 8005c5e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d015      	beq.n	8005c94 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c68:	f7fc fb00 	bl	800226c <HAL_GetTick>
 8005c6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c6e:	e00a      	b.n	8005c86 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fc fafc 	bl	800226c <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e14e      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c86:	4b59      	ldr	r3, [pc, #356]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d0ee      	beq.n	8005c70 <HAL_RCC_OscConfig+0x5f0>
 8005c92:	e014      	b.n	8005cbe <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c94:	f7fc faea 	bl	800226c <HAL_GetTick>
 8005c98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005c9a:	e00a      	b.n	8005cb2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c9c:	f7fc fae6 	bl	800226c <HAL_GetTick>
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	1ad3      	subs	r3, r2, r3
 8005ca6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e138      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cb2:	4b4e      	ldr	r3, [pc, #312]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb6:	f003 0302 	and.w	r3, r3, #2
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1ee      	bne.n	8005c9c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f000 812d 	beq.w	8005f22 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005cc8:	4b48      	ldr	r3, [pc, #288]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005cca:	691b      	ldr	r3, [r3, #16]
 8005ccc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cd0:	2b18      	cmp	r3, #24
 8005cd2:	f000 80bd 	beq.w	8005e50 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cda:	2b02      	cmp	r3, #2
 8005cdc:	f040 809e 	bne.w	8005e1c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce0:	4b42      	ldr	r3, [pc, #264]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a41      	ldr	r2, [pc, #260]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cec:	f7fc fabe 	bl	800226c <HAL_GetTick>
 8005cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005cf2:	e008      	b.n	8005d06 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fc faba 	bl	800226c <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	2b02      	cmp	r3, #2
 8005d00:	d901      	bls.n	8005d06 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005d02:	2303      	movs	r3, #3
 8005d04:	e10e      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d06:	4b39      	ldr	r3, [pc, #228]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1f0      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d12:	4b36      	ldr	r3, [pc, #216]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d14:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d16:	4b37      	ldr	r3, [pc, #220]	@ (8005df4 <HAL_RCC_OscConfig+0x774>)
 8005d18:	4013      	ands	r3, r2
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d22:	0112      	lsls	r2, r2, #4
 8005d24:	430a      	orrs	r2, r1
 8005d26:	4931      	ldr	r1, [pc, #196]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d30:	3b01      	subs	r3, #1
 8005d32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	025b      	lsls	r3, r3, #9
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	431a      	orrs	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d46:	3b01      	subs	r3, #1
 8005d48:	041b      	lsls	r3, r3, #16
 8005d4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d54:	3b01      	subs	r3, #1
 8005d56:	061b      	lsls	r3, r3, #24
 8005d58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d5c:	4923      	ldr	r1, [pc, #140]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d62:	4b22      	ldr	r3, [pc, #136]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d66:	4a21      	ldr	r2, [pc, #132]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d68:	f023 0301 	bic.w	r3, r3, #1
 8005d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d6e:	4b1f      	ldr	r3, [pc, #124]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d70:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d72:	4b21      	ldr	r3, [pc, #132]	@ (8005df8 <HAL_RCC_OscConfig+0x778>)
 8005d74:	4013      	ands	r3, r2
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d7a:	00d2      	lsls	r2, r2, #3
 8005d7c:	491b      	ldr	r1, [pc, #108]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005d82:	4b1a      	ldr	r3, [pc, #104]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	f023 020c 	bic.w	r2, r3, #12
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d8e:	4917      	ldr	r1, [pc, #92]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005d94:	4b15      	ldr	r3, [pc, #84]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d98:	f023 0202 	bic.w	r2, r3, #2
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da0:	4912      	ldr	r1, [pc, #72]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005da6:	4b11      	ldr	r3, [pc, #68]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005daa:	4a10      	ldr	r2, [pc, #64]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005db2:	4b0e      	ldr	r3, [pc, #56]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db6:	4a0d      	ldr	r2, [pc, #52]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005db8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005dbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005dc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005dca:	4b08      	ldr	r3, [pc, #32]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	4a07      	ldr	r2, [pc, #28]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005dd6:	4b05      	ldr	r3, [pc, #20]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a04      	ldr	r2, [pc, #16]	@ (8005dec <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005de0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de2:	f7fc fa43 	bl	800226c <HAL_GetTick>
 8005de6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005de8:	e011      	b.n	8005e0e <HAL_RCC_OscConfig+0x78e>
 8005dea:	bf00      	nop
 8005dec:	58024400 	.word	0x58024400
 8005df0:	58024800 	.word	0x58024800
 8005df4:	fffffc0c 	.word	0xfffffc0c
 8005df8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005dfc:	f7fc fa36 	bl	800226c <HAL_GetTick>
 8005e00:	4602      	mov	r2, r0
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	1ad3      	subs	r3, r2, r3
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e08a      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e0e:	4b47      	ldr	r3, [pc, #284]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0f0      	beq.n	8005dfc <HAL_RCC_OscConfig+0x77c>
 8005e1a:	e082      	b.n	8005f22 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e1c:	4b43      	ldr	r3, [pc, #268]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a42      	ldr	r2, [pc, #264]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e28:	f7fc fa20 	bl	800226c <HAL_GetTick>
 8005e2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e2e:	e008      	b.n	8005e42 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e30:	f7fc fa1c 	bl	800226c <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	2b02      	cmp	r3, #2
 8005e3c:	d901      	bls.n	8005e42 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005e3e:	2303      	movs	r3, #3
 8005e40:	e070      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e42:	4b3a      	ldr	r3, [pc, #232]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f0      	bne.n	8005e30 <HAL_RCC_OscConfig+0x7b0>
 8005e4e:	e068      	b.n	8005f22 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e50:	4b36      	ldr	r3, [pc, #216]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e56:	4b35      	ldr	r3, [pc, #212]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e5a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d031      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	f003 0203 	and.w	r2, r3, #3
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d12a      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	091b      	lsrs	r3, r3, #4
 8005e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d122      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d11a      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	0a5b      	lsrs	r3, r3, #9
 8005e96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005e9e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d111      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	0c1b      	lsrs	r3, r3, #16
 8005ea8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eb2:	429a      	cmp	r2, r3
 8005eb4:	d108      	bne.n	8005ec8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	0e1b      	lsrs	r3, r3, #24
 8005eba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ec2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d001      	beq.n	8005ecc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	e02b      	b.n	8005f24 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005ecc:	4b17      	ldr	r3, [pc, #92]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005ece:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d01f      	beq.n	8005f22 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005ee2:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee6:	4a11      	ldr	r2, [pc, #68]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005ee8:	f023 0301 	bic.w	r3, r3, #1
 8005eec:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005eee:	f7fc f9bd 	bl	800226c <HAL_GetTick>
 8005ef2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005ef4:	bf00      	nop
 8005ef6:	f7fc f9b9 	bl	800226c <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d0f9      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f02:	4b0a      	ldr	r3, [pc, #40]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f06:	4b0a      	ldr	r3, [pc, #40]	@ (8005f30 <HAL_RCC_OscConfig+0x8b0>)
 8005f08:	4013      	ands	r3, r2
 8005f0a:	687a      	ldr	r2, [r7, #4]
 8005f0c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f0e:	00d2      	lsls	r2, r2, #3
 8005f10:	4906      	ldr	r1, [pc, #24]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005f16:	4b05      	ldr	r3, [pc, #20]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005f18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f1a:	4a04      	ldr	r2, [pc, #16]	@ (8005f2c <HAL_RCC_OscConfig+0x8ac>)
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
 8005f20:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005f22:	2300      	movs	r3, #0
}
 8005f24:	4618      	mov	r0, r3
 8005f26:	3730      	adds	r7, #48	@ 0x30
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	58024400 	.word	0x58024400
 8005f30:	ffff0007 	.word	0xffff0007

08005f34 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b086      	sub	sp, #24
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e19c      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f48:	4b8a      	ldr	r3, [pc, #552]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 030f 	and.w	r3, r3, #15
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	429a      	cmp	r2, r3
 8005f54:	d910      	bls.n	8005f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f56:	4b87      	ldr	r3, [pc, #540]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f023 020f 	bic.w	r2, r3, #15
 8005f5e:	4985      	ldr	r1, [pc, #532]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f66:	4b83      	ldr	r3, [pc, #524]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 030f 	and.w	r3, r3, #15
 8005f6e:	683a      	ldr	r2, [r7, #0]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f74:	2301      	movs	r3, #1
 8005f76:	e184      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d010      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	691a      	ldr	r2, [r3, #16]
 8005f88:	4b7b      	ldr	r3, [pc, #492]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005f8a:	699b      	ldr	r3, [r3, #24]
 8005f8c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d908      	bls.n	8005fa6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005f94:	4b78      	ldr	r3, [pc, #480]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	4975      	ldr	r1, [pc, #468]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0308 	and.w	r3, r3, #8
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d010      	beq.n	8005fd4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	695a      	ldr	r2, [r3, #20]
 8005fb6:	4b70      	ldr	r3, [pc, #448]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fbe:	429a      	cmp	r2, r3
 8005fc0:	d908      	bls.n	8005fd4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005fc4:	69db      	ldr	r3, [r3, #28]
 8005fc6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	496a      	ldr	r1, [pc, #424]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0310 	and.w	r3, r3, #16
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d010      	beq.n	8006002 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	699a      	ldr	r2, [r3, #24]
 8005fe4:	4b64      	ldr	r3, [pc, #400]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	69db      	ldr	r3, [r3, #28]
 8005fe8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d908      	bls.n	8006002 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ff0:	4b61      	ldr	r3, [pc, #388]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005ff2:	69db      	ldr	r3, [r3, #28]
 8005ff4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	495e      	ldr	r1, [pc, #376]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d010      	beq.n	8006030 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	4b59      	ldr	r3, [pc, #356]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800601a:	429a      	cmp	r2, r3
 800601c:	d908      	bls.n	8006030 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800601e:	4b56      	ldr	r3, [pc, #344]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	4953      	ldr	r1, [pc, #332]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 800602c:	4313      	orrs	r3, r2
 800602e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b00      	cmp	r3, #0
 800603a:	d010      	beq.n	800605e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	4b4d      	ldr	r3, [pc, #308]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006042:	699b      	ldr	r3, [r3, #24]
 8006044:	f003 030f 	and.w	r3, r3, #15
 8006048:	429a      	cmp	r2, r3
 800604a:	d908      	bls.n	800605e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800604c:	4b4a      	ldr	r3, [pc, #296]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 800604e:	699b      	ldr	r3, [r3, #24]
 8006050:	f023 020f 	bic.w	r2, r3, #15
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	4947      	ldr	r1, [pc, #284]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 800605a:	4313      	orrs	r3, r2
 800605c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	d055      	beq.n	8006116 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800606a:	4b43      	ldr	r3, [pc, #268]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	4940      	ldr	r1, [pc, #256]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006078:	4313      	orrs	r3, r2
 800607a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b02      	cmp	r3, #2
 8006082:	d107      	bne.n	8006094 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006084:	4b3c      	ldr	r3, [pc, #240]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d121      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006090:	2301      	movs	r3, #1
 8006092:	e0f6      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	2b03      	cmp	r3, #3
 800609a:	d107      	bne.n	80060ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800609c:	4b36      	ldr	r3, [pc, #216]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d115      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0ea      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d107      	bne.n	80060c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060b4:	4b30      	ldr	r3, [pc, #192]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d109      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e0de      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c4:	4b2c      	ldr	r3, [pc, #176]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f003 0304 	and.w	r3, r3, #4
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d101      	bne.n	80060d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	e0d6      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060d4:	4b28      	ldr	r3, [pc, #160]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	f023 0207 	bic.w	r2, r3, #7
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	4925      	ldr	r1, [pc, #148]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80060e6:	f7fc f8c1 	bl	800226c <HAL_GetTick>
 80060ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80060ec:	e00a      	b.n	8006104 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80060ee:	f7fc f8bd 	bl	800226c <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d901      	bls.n	8006104 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e0be      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006104:	4b1c      	ldr	r3, [pc, #112]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	429a      	cmp	r2, r3
 8006114:	d1eb      	bne.n	80060ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d010      	beq.n	8006144 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	68da      	ldr	r2, [r3, #12]
 8006126:	4b14      	ldr	r3, [pc, #80]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	f003 030f 	and.w	r3, r3, #15
 800612e:	429a      	cmp	r2, r3
 8006130:	d208      	bcs.n	8006144 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006132:	4b11      	ldr	r3, [pc, #68]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f023 020f 	bic.w	r2, r3, #15
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	490e      	ldr	r1, [pc, #56]	@ (8006178 <HAL_RCC_ClockConfig+0x244>)
 8006140:	4313      	orrs	r3, r2
 8006142:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006144:	4b0b      	ldr	r3, [pc, #44]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 030f 	and.w	r3, r3, #15
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d214      	bcs.n	800617c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006152:	4b08      	ldr	r3, [pc, #32]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f023 020f 	bic.w	r2, r3, #15
 800615a:	4906      	ldr	r1, [pc, #24]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	4313      	orrs	r3, r2
 8006160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006162:	4b04      	ldr	r3, [pc, #16]	@ (8006174 <HAL_RCC_ClockConfig+0x240>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 030f 	and.w	r3, r3, #15
 800616a:	683a      	ldr	r2, [r7, #0]
 800616c:	429a      	cmp	r2, r3
 800616e:	d005      	beq.n	800617c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e086      	b.n	8006282 <HAL_RCC_ClockConfig+0x34e>
 8006174:	52002000 	.word	0x52002000
 8006178:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d010      	beq.n	80061aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691a      	ldr	r2, [r3, #16]
 800618c:	4b3f      	ldr	r3, [pc, #252]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006194:	429a      	cmp	r2, r3
 8006196:	d208      	bcs.n	80061aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006198:	4b3c      	ldr	r3, [pc, #240]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	4939      	ldr	r1, [pc, #228]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061a6:	4313      	orrs	r3, r2
 80061a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0308 	and.w	r3, r3, #8
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d010      	beq.n	80061d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	695a      	ldr	r2, [r3, #20]
 80061ba:	4b34      	ldr	r3, [pc, #208]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061bc:	69db      	ldr	r3, [r3, #28]
 80061be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061c2:	429a      	cmp	r2, r3
 80061c4:	d208      	bcs.n	80061d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061c6:	4b31      	ldr	r3, [pc, #196]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061c8:	69db      	ldr	r3, [r3, #28]
 80061ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	695b      	ldr	r3, [r3, #20]
 80061d2:	492e      	ldr	r1, [pc, #184]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f003 0310 	and.w	r3, r3, #16
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d010      	beq.n	8006206 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	4b28      	ldr	r3, [pc, #160]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061ea:	69db      	ldr	r3, [r3, #28]
 80061ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d208      	bcs.n	8006206 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80061f4:	4b25      	ldr	r3, [pc, #148]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 80061f6:	69db      	ldr	r3, [r3, #28]
 80061f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	4922      	ldr	r1, [pc, #136]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 8006202:	4313      	orrs	r3, r2
 8006204:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0320 	and.w	r3, r3, #32
 800620e:	2b00      	cmp	r3, #0
 8006210:	d010      	beq.n	8006234 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	69da      	ldr	r2, [r3, #28]
 8006216:	4b1d      	ldr	r3, [pc, #116]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800621e:	429a      	cmp	r2, r3
 8006220:	d208      	bcs.n	8006234 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006222:	4b1a      	ldr	r3, [pc, #104]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	4917      	ldr	r1, [pc, #92]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 8006230:	4313      	orrs	r3, r2
 8006232:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006234:	f000 f834 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 8006238:	4602      	mov	r2, r0
 800623a:	4b14      	ldr	r3, [pc, #80]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	0a1b      	lsrs	r3, r3, #8
 8006240:	f003 030f 	and.w	r3, r3, #15
 8006244:	4912      	ldr	r1, [pc, #72]	@ (8006290 <HAL_RCC_ClockConfig+0x35c>)
 8006246:	5ccb      	ldrb	r3, [r1, r3]
 8006248:	f003 031f 	and.w	r3, r3, #31
 800624c:	fa22 f303 	lsr.w	r3, r2, r3
 8006250:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006252:	4b0e      	ldr	r3, [pc, #56]	@ (800628c <HAL_RCC_ClockConfig+0x358>)
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	4a0d      	ldr	r2, [pc, #52]	@ (8006290 <HAL_RCC_ClockConfig+0x35c>)
 800625c:	5cd3      	ldrb	r3, [r2, r3]
 800625e:	f003 031f 	and.w	r3, r3, #31
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	fa22 f303 	lsr.w	r3, r2, r3
 8006268:	4a0a      	ldr	r2, [pc, #40]	@ (8006294 <HAL_RCC_ClockConfig+0x360>)
 800626a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800626c:	4a0a      	ldr	r2, [pc, #40]	@ (8006298 <HAL_RCC_ClockConfig+0x364>)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006272:	4b0a      	ldr	r3, [pc, #40]	@ (800629c <HAL_RCC_ClockConfig+0x368>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4618      	mov	r0, r3
 8006278:	f7fb fcf4 	bl	8001c64 <HAL_InitTick>
 800627c:	4603      	mov	r3, r0
 800627e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006280:	7bfb      	ldrb	r3, [r7, #15]
}
 8006282:	4618      	mov	r0, r3
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	58024400 	.word	0x58024400
 8006290:	08010c9c 	.word	0x08010c9c
 8006294:	24000004 	.word	0x24000004
 8006298:	24000000 	.word	0x24000000
 800629c:	24000148 	.word	0x24000148

080062a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b089      	sub	sp, #36	@ 0x24
 80062a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062a6:	4bb3      	ldr	r3, [pc, #716]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ae:	2b18      	cmp	r3, #24
 80062b0:	f200 8155 	bhi.w	800655e <HAL_RCC_GetSysClockFreq+0x2be>
 80062b4:	a201      	add	r2, pc, #4	@ (adr r2, 80062bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80062b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ba:	bf00      	nop
 80062bc:	08006321 	.word	0x08006321
 80062c0:	0800655f 	.word	0x0800655f
 80062c4:	0800655f 	.word	0x0800655f
 80062c8:	0800655f 	.word	0x0800655f
 80062cc:	0800655f 	.word	0x0800655f
 80062d0:	0800655f 	.word	0x0800655f
 80062d4:	0800655f 	.word	0x0800655f
 80062d8:	0800655f 	.word	0x0800655f
 80062dc:	08006347 	.word	0x08006347
 80062e0:	0800655f 	.word	0x0800655f
 80062e4:	0800655f 	.word	0x0800655f
 80062e8:	0800655f 	.word	0x0800655f
 80062ec:	0800655f 	.word	0x0800655f
 80062f0:	0800655f 	.word	0x0800655f
 80062f4:	0800655f 	.word	0x0800655f
 80062f8:	0800655f 	.word	0x0800655f
 80062fc:	0800634d 	.word	0x0800634d
 8006300:	0800655f 	.word	0x0800655f
 8006304:	0800655f 	.word	0x0800655f
 8006308:	0800655f 	.word	0x0800655f
 800630c:	0800655f 	.word	0x0800655f
 8006310:	0800655f 	.word	0x0800655f
 8006314:	0800655f 	.word	0x0800655f
 8006318:	0800655f 	.word	0x0800655f
 800631c:	08006353 	.word	0x08006353
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006320:	4b94      	ldr	r3, [pc, #592]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0320 	and.w	r3, r3, #32
 8006328:	2b00      	cmp	r3, #0
 800632a:	d009      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800632c:	4b91      	ldr	r3, [pc, #580]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	08db      	lsrs	r3, r3, #3
 8006332:	f003 0303 	and.w	r3, r3, #3
 8006336:	4a90      	ldr	r2, [pc, #576]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006338:	fa22 f303 	lsr.w	r3, r2, r3
 800633c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800633e:	e111      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006340:	4b8d      	ldr	r3, [pc, #564]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006342:	61bb      	str	r3, [r7, #24]
      break;
 8006344:	e10e      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006346:	4b8d      	ldr	r3, [pc, #564]	@ (800657c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006348:	61bb      	str	r3, [r7, #24]
      break;
 800634a:	e10b      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800634c:	4b8c      	ldr	r3, [pc, #560]	@ (8006580 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800634e:	61bb      	str	r3, [r7, #24]
      break;
 8006350:	e108      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006352:	4b88      	ldr	r3, [pc, #544]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800635c:	4b85      	ldr	r3, [pc, #532]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800635e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006360:	091b      	lsrs	r3, r3, #4
 8006362:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006366:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006368:	4b82      	ldr	r3, [pc, #520]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006372:	4b80      	ldr	r3, [pc, #512]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006376:	08db      	lsrs	r3, r3, #3
 8006378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	fb02 f303 	mul.w	r3, r2, r3
 8006382:	ee07 3a90 	vmov	s15, r3
 8006386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800638e:	693b      	ldr	r3, [r7, #16]
 8006390:	2b00      	cmp	r3, #0
 8006392:	f000 80e1 	beq.w	8006558 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2b02      	cmp	r3, #2
 800639a:	f000 8083 	beq.w	80064a4 <HAL_RCC_GetSysClockFreq+0x204>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	f200 80a1 	bhi.w	80064e8 <HAL_RCC_GetSysClockFreq+0x248>
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d003      	beq.n	80063b4 <HAL_RCC_GetSysClockFreq+0x114>
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d056      	beq.n	8006460 <HAL_RCC_GetSysClockFreq+0x1c0>
 80063b2:	e099      	b.n	80064e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063b4:	4b6f      	ldr	r3, [pc, #444]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0320 	and.w	r3, r3, #32
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d02d      	beq.n	800641c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063c0:	4b6c      	ldr	r3, [pc, #432]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	08db      	lsrs	r3, r3, #3
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	4a6b      	ldr	r2, [pc, #428]	@ (8006578 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
 80063d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	ee07 3a90 	vmov	s15, r3
 80063d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063dc:	693b      	ldr	r3, [r7, #16]
 80063de:	ee07 3a90 	vmov	s15, r3
 80063e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063ea:	4b62      	ldr	r3, [pc, #392]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80063fe:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006402:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800640e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006416:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800641a:	e087      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	ee07 3a90 	vmov	s15, r3
 8006422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006426:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006588 <HAL_RCC_GetSysClockFreq+0x2e8>
 800642a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800642e:	4b51      	ldr	r3, [pc, #324]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006436:	ee07 3a90 	vmov	s15, r3
 800643a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800643e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006442:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006446:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800644a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800644e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006452:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006456:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800645e:	e065      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800646a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800658c <HAL_RCC_GetSysClockFreq+0x2ec>
 800646e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006472:	4b40      	ldr	r3, [pc, #256]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800647a:	ee07 3a90 	vmov	s15, r3
 800647e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006482:	ed97 6a02 	vldr	s12, [r7, #8]
 8006486:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006584 <HAL_RCC_GetSysClockFreq+0x2e4>
 800648a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800648e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006492:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006496:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800649a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800649e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064a2:	e043      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ae:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006590 <HAL_RCC_GetSysClockFreq+0x2f0>
 80064b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064b6:	4b2f      	ldr	r3, [pc, #188]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064be:	ee07 3a90 	vmov	s15, r3
 80064c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ca:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006584 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064e6:	e021      	b.n	800652c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064f2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800658c <HAL_RCC_GetSysClockFreq+0x2ec>
 80064f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064fa:	4b1e      	ldr	r3, [pc, #120]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800650a:	ed97 6a02 	vldr	s12, [r7, #8]
 800650e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006584 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006512:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006516:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800651a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800651e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006526:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800652a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800652c:	4b11      	ldr	r3, [pc, #68]	@ (8006574 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800652e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006530:	0a5b      	lsrs	r3, r3, #9
 8006532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006536:	3301      	adds	r3, #1
 8006538:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	ee07 3a90 	vmov	s15, r3
 8006540:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006544:	edd7 6a07 	vldr	s13, [r7, #28]
 8006548:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800654c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006550:	ee17 3a90 	vmov	r3, s15
 8006554:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006556:	e005      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	61bb      	str	r3, [r7, #24]
      break;
 800655c:	e002      	b.n	8006564 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800655e:	4b07      	ldr	r3, [pc, #28]	@ (800657c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006560:	61bb      	str	r3, [r7, #24]
      break;
 8006562:	bf00      	nop
  }

  return sysclockfreq;
 8006564:	69bb      	ldr	r3, [r7, #24]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3724      	adds	r7, #36	@ 0x24
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	58024400 	.word	0x58024400
 8006578:	03d09000 	.word	0x03d09000
 800657c:	003d0900 	.word	0x003d0900
 8006580:	017d7840 	.word	0x017d7840
 8006584:	46000000 	.word	0x46000000
 8006588:	4c742400 	.word	0x4c742400
 800658c:	4a742400 	.word	0x4a742400
 8006590:	4bbebc20 	.word	0x4bbebc20

08006594 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b082      	sub	sp, #8
 8006598:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800659a:	f7ff fe81 	bl	80062a0 <HAL_RCC_GetSysClockFreq>
 800659e:	4602      	mov	r2, r0
 80065a0:	4b10      	ldr	r3, [pc, #64]	@ (80065e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	0a1b      	lsrs	r3, r3, #8
 80065a6:	f003 030f 	and.w	r3, r3, #15
 80065aa:	490f      	ldr	r1, [pc, #60]	@ (80065e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80065ac:	5ccb      	ldrb	r3, [r1, r3]
 80065ae:	f003 031f 	and.w	r3, r3, #31
 80065b2:	fa22 f303 	lsr.w	r3, r2, r3
 80065b6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065b8:	4b0a      	ldr	r3, [pc, #40]	@ (80065e4 <HAL_RCC_GetHCLKFreq+0x50>)
 80065ba:	699b      	ldr	r3, [r3, #24]
 80065bc:	f003 030f 	and.w	r3, r3, #15
 80065c0:	4a09      	ldr	r2, [pc, #36]	@ (80065e8 <HAL_RCC_GetHCLKFreq+0x54>)
 80065c2:	5cd3      	ldrb	r3, [r2, r3]
 80065c4:	f003 031f 	and.w	r3, r3, #31
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	fa22 f303 	lsr.w	r3, r2, r3
 80065ce:	4a07      	ldr	r2, [pc, #28]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x58>)
 80065d0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065d2:	4a07      	ldr	r2, [pc, #28]	@ (80065f0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80065d8:	4b04      	ldr	r3, [pc, #16]	@ (80065ec <HAL_RCC_GetHCLKFreq+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3708      	adds	r7, #8
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	58024400 	.word	0x58024400
 80065e8:	08010c9c 	.word	0x08010c9c
 80065ec:	24000004 	.word	0x24000004
 80065f0:	24000000 	.word	0x24000000

080065f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80065f8:	f7ff ffcc 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 80065fc:	4602      	mov	r2, r0
 80065fe:	4b06      	ldr	r3, [pc, #24]	@ (8006618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	f003 0307 	and.w	r3, r3, #7
 8006608:	4904      	ldr	r1, [pc, #16]	@ (800661c <HAL_RCC_GetPCLK1Freq+0x28>)
 800660a:	5ccb      	ldrb	r3, [r1, r3]
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006614:	4618      	mov	r0, r3
 8006616:	bd80      	pop	{r7, pc}
 8006618:	58024400 	.word	0x58024400
 800661c:	08010c9c 	.word	0x08010c9c

08006620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006624:	f7ff ffb6 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 8006628:	4602      	mov	r2, r0
 800662a:	4b06      	ldr	r3, [pc, #24]	@ (8006644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800662c:	69db      	ldr	r3, [r3, #28]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	f003 0307 	and.w	r3, r3, #7
 8006634:	4904      	ldr	r1, [pc, #16]	@ (8006648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006636:	5ccb      	ldrb	r3, [r1, r3]
 8006638:	f003 031f 	and.w	r3, r3, #31
 800663c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006640:	4618      	mov	r0, r3
 8006642:	bd80      	pop	{r7, pc}
 8006644:	58024400 	.word	0x58024400
 8006648:	08010c9c 	.word	0x08010c9c

0800664c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	223f      	movs	r2, #63	@ 0x3f
 800665a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800665c:	4b1a      	ldr	r3, [pc, #104]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	f003 0207 	and.w	r2, r3, #7
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006668:	4b17      	ldr	r3, [pc, #92]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 800666a:	699b      	ldr	r3, [r3, #24]
 800666c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006674:	4b14      	ldr	r3, [pc, #80]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	f003 020f 	and.w	r2, r3, #15
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8006680:	4b11      	ldr	r3, [pc, #68]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800668c:	4b0e      	ldr	r3, [pc, #56]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 800668e:	69db      	ldr	r3, [r3, #28]
 8006690:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8006698:	4b0b      	ldr	r3, [pc, #44]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80066a4:	4b08      	ldr	r3, [pc, #32]	@ (80066c8 <HAL_RCC_GetClockConfig+0x7c>)
 80066a6:	6a1b      	ldr	r3, [r3, #32]
 80066a8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066b0:	4b06      	ldr	r3, [pc, #24]	@ (80066cc <HAL_RCC_GetClockConfig+0x80>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 020f 	and.w	r2, r3, #15
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	bf00      	nop
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	58024400 	.word	0x58024400
 80066cc:	52002000 	.word	0x52002000

080066d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066d4:	b0ca      	sub	sp, #296	@ 0x128
 80066d6:	af00      	add	r7, sp, #0
 80066d8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066dc:	2300      	movs	r3, #0
 80066de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066e2:	2300      	movs	r3, #0
 80066e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80066f4:	2500      	movs	r5, #0
 80066f6:	ea54 0305 	orrs.w	r3, r4, r5
 80066fa:	d049      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80066fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006700:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006702:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006706:	d02f      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006708:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800670c:	d828      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800670e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006712:	d01a      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006718:	d822      	bhi.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006722:	d007      	beq.n	8006734 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006724:	e01c      	b.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006726:	4bb8      	ldr	r3, [pc, #736]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672a:	4ab7      	ldr	r2, [pc, #732]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800672c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006732:	e01a      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006738:	3308      	adds	r3, #8
 800673a:	2102      	movs	r1, #2
 800673c:	4618      	mov	r0, r3
 800673e:	f001 fc8f 	bl	8008060 <RCCEx_PLL2_Config>
 8006742:	4603      	mov	r3, r0
 8006744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006748:	e00f      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800674a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800674e:	3328      	adds	r3, #40	@ 0x28
 8006750:	2102      	movs	r1, #2
 8006752:	4618      	mov	r0, r3
 8006754:	f001 fd36 	bl	80081c4 <RCCEx_PLL3_Config>
 8006758:	4603      	mov	r3, r0
 800675a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800675e:	e004      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006766:	e000      	b.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800676a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10a      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006772:	4ba5      	ldr	r3, [pc, #660]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006776:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800677a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800677e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006780:	4aa1      	ldr	r2, [pc, #644]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006782:	430b      	orrs	r3, r1
 8006784:	6513      	str	r3, [r2, #80]	@ 0x50
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800679c:	f04f 0900 	mov.w	r9, #0
 80067a0:	ea58 0309 	orrs.w	r3, r8, r9
 80067a4:	d047      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067ac:	2b04      	cmp	r3, #4
 80067ae:	d82a      	bhi.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067b0:	a201      	add	r2, pc, #4	@ (adr r2, 80067b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	080067cd 	.word	0x080067cd
 80067bc:	080067db 	.word	0x080067db
 80067c0:	080067f1 	.word	0x080067f1
 80067c4:	0800680f 	.word	0x0800680f
 80067c8:	0800680f 	.word	0x0800680f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067cc:	4b8e      	ldr	r3, [pc, #568]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d0:	4a8d      	ldr	r2, [pc, #564]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067d8:	e01a      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067de:	3308      	adds	r3, #8
 80067e0:	2100      	movs	r1, #0
 80067e2:	4618      	mov	r0, r3
 80067e4:	f001 fc3c 	bl	8008060 <RCCEx_PLL2_Config>
 80067e8:	4603      	mov	r3, r0
 80067ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067ee:	e00f      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067f4:	3328      	adds	r3, #40	@ 0x28
 80067f6:	2100      	movs	r1, #0
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 fce3 	bl	80081c4 <RCCEx_PLL3_Config>
 80067fe:	4603      	mov	r3, r0
 8006800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006804:	e004      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006806:	2301      	movs	r3, #1
 8006808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800680c:	e000      	b.n	8006810 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800680e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10a      	bne.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006818:	4b7b      	ldr	r3, [pc, #492]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800681a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800681c:	f023 0107 	bic.w	r1, r3, #7
 8006820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006824:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006826:	4a78      	ldr	r2, [pc, #480]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006828:	430b      	orrs	r3, r1
 800682a:	6513      	str	r3, [r2, #80]	@ 0x50
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800682e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800683a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800683e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006842:	f04f 0b00 	mov.w	fp, #0
 8006846:	ea5a 030b 	orrs.w	r3, sl, fp
 800684a:	d04c      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800684c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006850:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006852:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006856:	d030      	beq.n	80068ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006858:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800685c:	d829      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800685e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006860:	d02d      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006862:	2bc0      	cmp	r3, #192	@ 0xc0
 8006864:	d825      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006866:	2b80      	cmp	r3, #128	@ 0x80
 8006868:	d018      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800686a:	2b80      	cmp	r3, #128	@ 0x80
 800686c:	d821      	bhi.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800686e:	2b00      	cmp	r3, #0
 8006870:	d002      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006872:	2b40      	cmp	r3, #64	@ 0x40
 8006874:	d007      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006876:	e01c      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006878:	4b63      	ldr	r3, [pc, #396]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800687a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800687c:	4a62      	ldr	r2, [pc, #392]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800687e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006882:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006884:	e01c      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006886:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800688a:	3308      	adds	r3, #8
 800688c:	2100      	movs	r1, #0
 800688e:	4618      	mov	r0, r3
 8006890:	f001 fbe6 	bl	8008060 <RCCEx_PLL2_Config>
 8006894:	4603      	mov	r3, r0
 8006896:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800689a:	e011      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800689c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068a0:	3328      	adds	r3, #40	@ 0x28
 80068a2:	2100      	movs	r1, #0
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 fc8d 	bl	80081c4 <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068b0:	e006      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068b8:	e002      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068ba:	bf00      	nop
 80068bc:	e000      	b.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068c8:	4b4f      	ldr	r3, [pc, #316]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068cc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80068d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068d6:	4a4c      	ldr	r2, [pc, #304]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068d8:	430b      	orrs	r3, r1
 80068da:	6513      	str	r3, [r2, #80]	@ 0x50
 80068dc:	e003      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80068e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ee:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80068f2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80068f6:	2300      	movs	r3, #0
 80068f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80068fc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006900:	460b      	mov	r3, r1
 8006902:	4313      	orrs	r3, r2
 8006904:	d053      	beq.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800690e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006912:	d035      	beq.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006914:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006918:	d82e      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800691a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800691e:	d031      	beq.n	8006984 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006920:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006924:	d828      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006926:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800692a:	d01a      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800692c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006930:	d822      	bhi.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006932:	2b00      	cmp	r3, #0
 8006934:	d003      	beq.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006936:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800693a:	d007      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800693c:	e01c      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800693e:	4b32      	ldr	r3, [pc, #200]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006942:	4a31      	ldr	r2, [pc, #196]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006948:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800694a:	e01c      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800694c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006950:	3308      	adds	r3, #8
 8006952:	2100      	movs	r1, #0
 8006954:	4618      	mov	r0, r3
 8006956:	f001 fb83 	bl	8008060 <RCCEx_PLL2_Config>
 800695a:	4603      	mov	r3, r0
 800695c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006960:	e011      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006966:	3328      	adds	r3, #40	@ 0x28
 8006968:	2100      	movs	r1, #0
 800696a:	4618      	mov	r0, r3
 800696c:	f001 fc2a 	bl	80081c4 <RCCEx_PLL3_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006976:	e006      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006978:	2301      	movs	r3, #1
 800697a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800697e:	e002      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006980:	bf00      	nop
 8006982:	e000      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800698e:	4b1e      	ldr	r3, [pc, #120]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006992:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006996:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800699a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800699e:	4a1a      	ldr	r2, [pc, #104]	@ (8006a08 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069a0:	430b      	orrs	r3, r1
 80069a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069a4:	e003      	b.n	80069ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80069ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069be:	2300      	movs	r3, #0
 80069c0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80069c4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80069c8:	460b      	mov	r3, r1
 80069ca:	4313      	orrs	r3, r2
 80069cc:	d056      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069da:	d038      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80069dc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069e0:	d831      	bhi.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069e2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069e6:	d034      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80069e8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80069ec:	d82b      	bhi.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f2:	d01d      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80069f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80069f8:	d825      	bhi.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d006      	beq.n	8006a0c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80069fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a02:	d00a      	beq.n	8006a1a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a04:	e01f      	b.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a06:	bf00      	nop
 8006a08:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a0c:	4ba2      	ldr	r3, [pc, #648]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a10:	4aa1      	ldr	r2, [pc, #644]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a18:	e01c      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a1e:	3308      	adds	r3, #8
 8006a20:	2100      	movs	r1, #0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 fb1c 	bl	8008060 <RCCEx_PLL2_Config>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a2e:	e011      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a34:	3328      	adds	r3, #40	@ 0x28
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 fbc3 	bl	80081c4 <RCCEx_PLL3_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a44:	e006      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a46:	2301      	movs	r3, #1
 8006a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a4c:	e002      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a4e:	bf00      	nop
 8006a50:	e000      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d10b      	bne.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a5c:	4b8e      	ldr	r3, [pc, #568]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a60:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a6c:	4a8a      	ldr	r2, [pc, #552]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a6e:	430b      	orrs	r3, r1
 8006a70:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006a92:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006a96:	460b      	mov	r3, r1
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	d03a      	beq.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa2:	2b30      	cmp	r3, #48	@ 0x30
 8006aa4:	d01f      	beq.n	8006ae6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006aa6:	2b30      	cmp	r3, #48	@ 0x30
 8006aa8:	d819      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006aaa:	2b20      	cmp	r3, #32
 8006aac:	d00c      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006aae:	2b20      	cmp	r3, #32
 8006ab0:	d815      	bhi.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d019      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ab6:	2b10      	cmp	r3, #16
 8006ab8:	d111      	bne.n	8006ade <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aba:	4b77      	ldr	r3, [pc, #476]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006abe:	4a76      	ldr	r2, [pc, #472]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ac0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ac6:	e011      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006acc:	3308      	adds	r3, #8
 8006ace:	2102      	movs	r1, #2
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f001 fac5 	bl	8008060 <RCCEx_PLL2_Config>
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006adc:	e006      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ae4:	e002      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006ae6:	bf00      	nop
 8006ae8:	e000      	b.n	8006aec <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006aec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006af4:	4b68      	ldr	r3, [pc, #416]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006af6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006af8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006afc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	4a65      	ldr	r2, [pc, #404]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b04:	430b      	orrs	r3, r1
 8006b06:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b08:	e003      	b.n	8006b12 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b0e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b22:	2300      	movs	r3, #0
 8006b24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b2c:	460b      	mov	r3, r1
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	d051      	beq.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b38:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b3c:	d035      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b42:	d82e      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b44:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b48:	d031      	beq.n	8006bae <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b4a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b4e:	d828      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b54:	d01a      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b56:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b5a:	d822      	bhi.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b64:	d007      	beq.n	8006b76 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006b66:	e01c      	b.n	8006ba2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b68:	4b4b      	ldr	r3, [pc, #300]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b6c:	4a4a      	ldr	r2, [pc, #296]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b74:	e01c      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 fa6e 	bl	8008060 <RCCEx_PLL2_Config>
 8006b84:	4603      	mov	r3, r0
 8006b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b8a:	e011      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	3328      	adds	r3, #40	@ 0x28
 8006b92:	2100      	movs	r1, #0
 8006b94:	4618      	mov	r0, r3
 8006b96:	f001 fb15 	bl	80081c4 <RCCEx_PLL3_Config>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006ba0:	e006      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ba8:	e002      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d10a      	bne.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bb8:	4b37      	ldr	r3, [pc, #220]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bbc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bc6:	4a34      	ldr	r2, [pc, #208]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bc8:	430b      	orrs	r3, r1
 8006bca:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bcc:	e003      	b.n	8006bd6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bde:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006be2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006be6:	2300      	movs	r3, #0
 8006be8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006bec:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	d056      	beq.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006bfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c00:	d033      	beq.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c02:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c06:	d82c      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c08:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c0c:	d02f      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c0e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c12:	d826      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c14:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c18:	d02b      	beq.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c1a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c1e:	d820      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c20:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c24:	d012      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c26:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c2a:	d81a      	bhi.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d022      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c34:	d115      	bne.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c3a:	3308      	adds	r3, #8
 8006c3c:	2101      	movs	r1, #1
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f001 fa0e 	bl	8008060 <RCCEx_PLL2_Config>
 8006c44:	4603      	mov	r3, r0
 8006c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c4a:	e015      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c50:	3328      	adds	r3, #40	@ 0x28
 8006c52:	2101      	movs	r1, #1
 8006c54:	4618      	mov	r0, r3
 8006c56:	f001 fab5 	bl	80081c4 <RCCEx_PLL3_Config>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c60:	e00a      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c68:	e006      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c6a:	bf00      	nop
 8006c6c:	e004      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c6e:	bf00      	nop
 8006c70:	e002      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c72:	bf00      	nop
 8006c74:	e000      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c76:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10d      	bne.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006c80:	4b05      	ldr	r3, [pc, #20]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c84:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c8e:	4a02      	ldr	r2, [pc, #8]	@ (8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006c90:	430b      	orrs	r3, r1
 8006c92:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c94:	e006      	b.n	8006ca4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006c96:	bf00      	nop
 8006c98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ca0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cac:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cba:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006cbe:	460b      	mov	r3, r1
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	d055      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cd0:	d033      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006cd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cd6:	d82c      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cdc:	d02f      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ce2:	d826      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006ce4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006ce8:	d02b      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006cea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006cee:	d820      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cf0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cf4:	d012      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006cf6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006cfa:	d81a      	bhi.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d022      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d04:	d115      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d0a:	3308      	adds	r3, #8
 8006d0c:	2101      	movs	r1, #1
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f001 f9a6 	bl	8008060 <RCCEx_PLL2_Config>
 8006d14:	4603      	mov	r3, r0
 8006d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d1a:	e015      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d20:	3328      	adds	r3, #40	@ 0x28
 8006d22:	2101      	movs	r1, #1
 8006d24:	4618      	mov	r0, r3
 8006d26:	f001 fa4d 	bl	80081c4 <RCCEx_PLL3_Config>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d30:	e00a      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d3a:	bf00      	nop
 8006d3c:	e004      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d3e:	bf00      	nop
 8006d40:	e002      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d42:	bf00      	nop
 8006d44:	e000      	b.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10b      	bne.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d50:	4ba3      	ldr	r3, [pc, #652]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d54:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d60:	4a9f      	ldr	r2, [pc, #636]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d62:	430b      	orrs	r3, r1
 8006d64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d66:	e003      	b.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d78:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d80:	2300      	movs	r3, #0
 8006d82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006d86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d8a:	460b      	mov	r3, r1
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	d037      	beq.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d9a:	d00e      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006d9c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006da0:	d816      	bhi.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d018      	beq.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006da6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006daa:	d111      	bne.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dac:	4b8c      	ldr	r3, [pc, #560]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006db0:	4a8b      	ldr	r2, [pc, #556]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006db2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006db6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006db8:	e00f      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dbe:	3308      	adds	r3, #8
 8006dc0:	2101      	movs	r1, #1
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f001 f94c 	bl	8008060 <RCCEx_PLL2_Config>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006dce:	e004      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006dd6:	e000      	b.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10a      	bne.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006de2:	4b7f      	ldr	r3, [pc, #508]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006de4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006de6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006df0:	4a7b      	ldr	r2, [pc, #492]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006df2:	430b      	orrs	r3, r1
 8006df4:	6513      	str	r3, [r2, #80]	@ 0x50
 8006df6:	e003      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e10:	2300      	movs	r3, #0
 8006e12:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e16:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	d039      	beq.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e26:	2b03      	cmp	r3, #3
 8006e28:	d81c      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e2a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e30 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e30:	08006e6d 	.word	0x08006e6d
 8006e34:	08006e41 	.word	0x08006e41
 8006e38:	08006e4f 	.word	0x08006e4f
 8006e3c:	08006e6d 	.word	0x08006e6d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e40:	4b67      	ldr	r3, [pc, #412]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	4a66      	ldr	r2, [pc, #408]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e4c:	e00f      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e52:	3308      	adds	r3, #8
 8006e54:	2102      	movs	r1, #2
 8006e56:	4618      	mov	r0, r3
 8006e58:	f001 f902 	bl	8008060 <RCCEx_PLL2_Config>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e62:	e004      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e6a:	e000      	b.n	8006e6e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d10a      	bne.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e76:	4b5a      	ldr	r3, [pc, #360]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e7a:	f023 0103 	bic.w	r1, r3, #3
 8006e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e84:	4a56      	ldr	r2, [pc, #344]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e86:	430b      	orrs	r3, r1
 8006e88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006e8a:	e003      	b.n	8006e94 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e90:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e9c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ea0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006eaa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006eae:	460b      	mov	r3, r1
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	f000 809f 	beq.w	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a4a      	ldr	r2, [pc, #296]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ebc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ec0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ec2:	f7fb f9d3 	bl	800226c <HAL_GetTick>
 8006ec6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eca:	e00b      	b.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ecc:	f7fb f9ce 	bl	800226c <HAL_GetTick>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ed6:	1ad3      	subs	r3, r2, r3
 8006ed8:	2b64      	cmp	r3, #100	@ 0x64
 8006eda:	d903      	bls.n	8006ee4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ee2:	e005      	b.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006ee4:	4b3f      	ldr	r3, [pc, #252]	@ (8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d0ed      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d179      	bne.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ef8:	4b39      	ldr	r3, [pc, #228]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f00:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f04:	4053      	eors	r3, r2
 8006f06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d015      	beq.n	8006f3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f0e:	4b34      	ldr	r3, [pc, #208]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f16:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f1a:	4b31      	ldr	r3, [pc, #196]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1e:	4a30      	ldr	r2, [pc, #192]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f24:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f26:	4b2e      	ldr	r3, [pc, #184]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f2a:	4a2d      	ldr	r2, [pc, #180]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f30:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f32:	4a2b      	ldr	r2, [pc, #172]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f34:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f38:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f46:	d118      	bne.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f48:	f7fb f990 	bl	800226c <HAL_GetTick>
 8006f4c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f50:	e00d      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f52:	f7fb f98b 	bl	800226c <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f5c:	1ad2      	subs	r2, r2, r3
 8006f5e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f62:	429a      	cmp	r2, r3
 8006f64:	d903      	bls.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006f6c:	e005      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f6e:	4b1c      	ldr	r3, [pc, #112]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f72:	f003 0302 	and.w	r3, r3, #2
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d0eb      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d129      	bne.n	8006fd6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f86:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f92:	d10e      	bne.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006f94:	4b12      	ldr	r3, [pc, #72]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fa4:	091a      	lsrs	r2, r3, #4
 8006fa6:	4b10      	ldr	r3, [pc, #64]	@ (8006fe8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	4a0d      	ldr	r2, [pc, #52]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fac:	430b      	orrs	r3, r1
 8006fae:	6113      	str	r3, [r2, #16]
 8006fb0:	e005      	b.n	8006fbe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006fbc:	6113      	str	r3, [r2, #16]
 8006fbe:	4b08      	ldr	r3, [pc, #32]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fc0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fce:	4a04      	ldr	r2, [pc, #16]	@ (8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd0:	430b      	orrs	r3, r1
 8006fd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006fd4:	e00e      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fda:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006fde:	e009      	b.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8006fe0:	58024400 	.word	0x58024400
 8006fe4:	58024800 	.word	0x58024800
 8006fe8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ff0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffc:	f002 0301 	and.w	r3, r2, #1
 8007000:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007004:	2300      	movs	r3, #0
 8007006:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800700a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800700e:	460b      	mov	r3, r1
 8007010:	4313      	orrs	r3, r2
 8007012:	f000 8089 	beq.w	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800701c:	2b28      	cmp	r3, #40	@ 0x28
 800701e:	d86b      	bhi.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007020:	a201      	add	r2, pc, #4	@ (adr r2, 8007028 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007026:	bf00      	nop
 8007028:	08007101 	.word	0x08007101
 800702c:	080070f9 	.word	0x080070f9
 8007030:	080070f9 	.word	0x080070f9
 8007034:	080070f9 	.word	0x080070f9
 8007038:	080070f9 	.word	0x080070f9
 800703c:	080070f9 	.word	0x080070f9
 8007040:	080070f9 	.word	0x080070f9
 8007044:	080070f9 	.word	0x080070f9
 8007048:	080070cd 	.word	0x080070cd
 800704c:	080070f9 	.word	0x080070f9
 8007050:	080070f9 	.word	0x080070f9
 8007054:	080070f9 	.word	0x080070f9
 8007058:	080070f9 	.word	0x080070f9
 800705c:	080070f9 	.word	0x080070f9
 8007060:	080070f9 	.word	0x080070f9
 8007064:	080070f9 	.word	0x080070f9
 8007068:	080070e3 	.word	0x080070e3
 800706c:	080070f9 	.word	0x080070f9
 8007070:	080070f9 	.word	0x080070f9
 8007074:	080070f9 	.word	0x080070f9
 8007078:	080070f9 	.word	0x080070f9
 800707c:	080070f9 	.word	0x080070f9
 8007080:	080070f9 	.word	0x080070f9
 8007084:	080070f9 	.word	0x080070f9
 8007088:	08007101 	.word	0x08007101
 800708c:	080070f9 	.word	0x080070f9
 8007090:	080070f9 	.word	0x080070f9
 8007094:	080070f9 	.word	0x080070f9
 8007098:	080070f9 	.word	0x080070f9
 800709c:	080070f9 	.word	0x080070f9
 80070a0:	080070f9 	.word	0x080070f9
 80070a4:	080070f9 	.word	0x080070f9
 80070a8:	08007101 	.word	0x08007101
 80070ac:	080070f9 	.word	0x080070f9
 80070b0:	080070f9 	.word	0x080070f9
 80070b4:	080070f9 	.word	0x080070f9
 80070b8:	080070f9 	.word	0x080070f9
 80070bc:	080070f9 	.word	0x080070f9
 80070c0:	080070f9 	.word	0x080070f9
 80070c4:	080070f9 	.word	0x080070f9
 80070c8:	08007101 	.word	0x08007101
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070d0:	3308      	adds	r3, #8
 80070d2:	2101      	movs	r1, #1
 80070d4:	4618      	mov	r0, r3
 80070d6:	f000 ffc3 	bl	8008060 <RCCEx_PLL2_Config>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070e0:	e00f      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e6:	3328      	adds	r3, #40	@ 0x28
 80070e8:	2101      	movs	r1, #1
 80070ea:	4618      	mov	r0, r3
 80070ec:	f001 f86a 	bl	80081c4 <RCCEx_PLL3_Config>
 80070f0:	4603      	mov	r3, r0
 80070f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80070f6:	e004      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80070f8:	2301      	movs	r3, #1
 80070fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070fe:	e000      	b.n	8007102 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007100:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007102:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10a      	bne.n	8007120 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800710a:	4bbf      	ldr	r3, [pc, #764]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800710c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800710e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007116:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007118:	4abb      	ldr	r2, [pc, #748]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800711a:	430b      	orrs	r3, r1
 800711c:	6553      	str	r3, [r2, #84]	@ 0x54
 800711e:	e003      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007120:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007124:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	f002 0302 	and.w	r3, r2, #2
 8007134:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007138:	2300      	movs	r3, #0
 800713a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800713e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007142:	460b      	mov	r3, r1
 8007144:	4313      	orrs	r3, r2
 8007146:	d041      	beq.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800714e:	2b05      	cmp	r3, #5
 8007150:	d824      	bhi.n	800719c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007152:	a201      	add	r2, pc, #4	@ (adr r2, 8007158 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	080071a5 	.word	0x080071a5
 800715c:	08007171 	.word	0x08007171
 8007160:	08007187 	.word	0x08007187
 8007164:	080071a5 	.word	0x080071a5
 8007168:	080071a5 	.word	0x080071a5
 800716c:	080071a5 	.word	0x080071a5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007174:	3308      	adds	r3, #8
 8007176:	2101      	movs	r1, #1
 8007178:	4618      	mov	r0, r3
 800717a:	f000 ff71 	bl	8008060 <RCCEx_PLL2_Config>
 800717e:	4603      	mov	r3, r0
 8007180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007184:	e00f      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007186:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800718a:	3328      	adds	r3, #40	@ 0x28
 800718c:	2101      	movs	r1, #1
 800718e:	4618      	mov	r0, r3
 8007190:	f001 f818 	bl	80081c4 <RCCEx_PLL3_Config>
 8007194:	4603      	mov	r3, r0
 8007196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800719a:	e004      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071a2:	e000      	b.n	80071a6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d10a      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071ae:	4b96      	ldr	r3, [pc, #600]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071b2:	f023 0107 	bic.w	r1, r3, #7
 80071b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071bc:	4a92      	ldr	r2, [pc, #584]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071be:	430b      	orrs	r3, r1
 80071c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071c2:	e003      	b.n	80071cc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f002 0304 	and.w	r3, r2, #4
 80071d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071dc:	2300      	movs	r3, #0
 80071de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80071e2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80071e6:	460b      	mov	r3, r1
 80071e8:	4313      	orrs	r3, r2
 80071ea:	d044      	beq.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80071f4:	2b05      	cmp	r3, #5
 80071f6:	d825      	bhi.n	8007244 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80071f8:	a201      	add	r2, pc, #4	@ (adr r2, 8007200 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80071fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071fe:	bf00      	nop
 8007200:	0800724d 	.word	0x0800724d
 8007204:	08007219 	.word	0x08007219
 8007208:	0800722f 	.word	0x0800722f
 800720c:	0800724d 	.word	0x0800724d
 8007210:	0800724d 	.word	0x0800724d
 8007214:	0800724d 	.word	0x0800724d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800721c:	3308      	adds	r3, #8
 800721e:	2101      	movs	r1, #1
 8007220:	4618      	mov	r0, r3
 8007222:	f000 ff1d 	bl	8008060 <RCCEx_PLL2_Config>
 8007226:	4603      	mov	r3, r0
 8007228:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800722c:	e00f      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800722e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007232:	3328      	adds	r3, #40	@ 0x28
 8007234:	2101      	movs	r1, #1
 8007236:	4618      	mov	r0, r3
 8007238:	f000 ffc4 	bl	80081c4 <RCCEx_PLL3_Config>
 800723c:	4603      	mov	r3, r0
 800723e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007242:	e004      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007244:	2301      	movs	r3, #1
 8007246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800724a:	e000      	b.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800724c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800724e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10b      	bne.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007256:	4b6c      	ldr	r3, [pc, #432]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007258:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800725a:	f023 0107 	bic.w	r1, r3, #7
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007266:	4a68      	ldr	r2, [pc, #416]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007268:	430b      	orrs	r3, r1
 800726a:	6593      	str	r3, [r2, #88]	@ 0x58
 800726c:	e003      	b.n	8007276 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007272:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800727a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800727e:	f002 0320 	and.w	r3, r2, #32
 8007282:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007286:	2300      	movs	r3, #0
 8007288:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800728c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007290:	460b      	mov	r3, r1
 8007292:	4313      	orrs	r3, r2
 8007294:	d055      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800729e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a2:	d033      	beq.n	800730c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072a8:	d82c      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ae:	d02f      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80072b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b4:	d826      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072b6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072ba:	d02b      	beq.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80072bc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072c0:	d820      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072c2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072c6:	d012      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072cc:	d81a      	bhi.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d022      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80072d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072d6:	d115      	bne.n	8007304 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072dc:	3308      	adds	r3, #8
 80072de:	2100      	movs	r1, #0
 80072e0:	4618      	mov	r0, r3
 80072e2:	f000 febd 	bl	8008060 <RCCEx_PLL2_Config>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80072ec:	e015      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80072ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f2:	3328      	adds	r3, #40	@ 0x28
 80072f4:	2102      	movs	r1, #2
 80072f6:	4618      	mov	r0, r3
 80072f8:	f000 ff64 	bl	80081c4 <RCCEx_PLL3_Config>
 80072fc:	4603      	mov	r3, r0
 80072fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007302:	e00a      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007304:	2301      	movs	r3, #1
 8007306:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800730a:	e006      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800730c:	bf00      	nop
 800730e:	e004      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007310:	bf00      	nop
 8007312:	e002      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007314:	bf00      	nop
 8007316:	e000      	b.n	800731a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007318:	bf00      	nop
    }

    if (ret == HAL_OK)
 800731a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800731e:	2b00      	cmp	r3, #0
 8007320:	d10b      	bne.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007322:	4b39      	ldr	r3, [pc, #228]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007326:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800732a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800732e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007332:	4a35      	ldr	r2, [pc, #212]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007334:	430b      	orrs	r3, r1
 8007336:	6553      	str	r3, [r2, #84]	@ 0x54
 8007338:	e003      	b.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800734e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007352:	2300      	movs	r3, #0
 8007354:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007358:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800735c:	460b      	mov	r3, r1
 800735e:	4313      	orrs	r3, r2
 8007360:	d058      	beq.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800736a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800736e:	d033      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007370:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007374:	d82c      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007376:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800737a:	d02f      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800737c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007380:	d826      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007382:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007386:	d02b      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800738c:	d820      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800738e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007392:	d012      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007398:	d81a      	bhi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800739a:	2b00      	cmp	r3, #0
 800739c:	d022      	beq.n	80073e4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800739e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073a2:	d115      	bne.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a8:	3308      	adds	r3, #8
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f000 fe57 	bl	8008060 <RCCEx_PLL2_Config>
 80073b2:	4603      	mov	r3, r0
 80073b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073b8:	e015      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073be:	3328      	adds	r3, #40	@ 0x28
 80073c0:	2102      	movs	r1, #2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f000 fefe 	bl	80081c4 <RCCEx_PLL3_Config>
 80073c8:	4603      	mov	r3, r0
 80073ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073ce:	e00a      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073d6:	e006      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073d8:	bf00      	nop
 80073da:	e004      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073dc:	bf00      	nop
 80073de:	e002      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073e0:	bf00      	nop
 80073e2:	e000      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10e      	bne.n	800740c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073ee:	4b06      	ldr	r3, [pc, #24]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80073f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80073f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80073fe:	4a02      	ldr	r2, [pc, #8]	@ (8007408 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007400:	430b      	orrs	r3, r1
 8007402:	6593      	str	r3, [r2, #88]	@ 0x58
 8007404:	e006      	b.n	8007414 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007406:	bf00      	nop
 8007408:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007410:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800741c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007420:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007424:	2300      	movs	r3, #0
 8007426:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800742a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800742e:	460b      	mov	r3, r1
 8007430:	4313      	orrs	r3, r2
 8007432:	d055      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800743c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007440:	d033      	beq.n	80074aa <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007442:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007446:	d82c      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007448:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800744c:	d02f      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800744e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007452:	d826      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007454:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007458:	d02b      	beq.n	80074b2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800745a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800745e:	d820      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007460:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007464:	d012      	beq.n	800748c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007466:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800746a:	d81a      	bhi.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800746c:	2b00      	cmp	r3, #0
 800746e:	d022      	beq.n	80074b6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007470:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007474:	d115      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007476:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800747a:	3308      	adds	r3, #8
 800747c:	2100      	movs	r1, #0
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fdee 	bl	8008060 <RCCEx_PLL2_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800748a:	e015      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800748c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007490:	3328      	adds	r3, #40	@ 0x28
 8007492:	2102      	movs	r1, #2
 8007494:	4618      	mov	r0, r3
 8007496:	f000 fe95 	bl	80081c4 <RCCEx_PLL3_Config>
 800749a:	4603      	mov	r3, r0
 800749c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074a0:	e00a      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074a8:	e006      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074aa:	bf00      	nop
 80074ac:	e004      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074ae:	bf00      	nop
 80074b0:	e002      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074b2:	bf00      	nop
 80074b4:	e000      	b.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d10b      	bne.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074c0:	4ba1      	ldr	r3, [pc, #644]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074c4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80074c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074d0:	4a9d      	ldr	r2, [pc, #628]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074d2:	430b      	orrs	r3, r1
 80074d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074d6:	e003      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80074e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e8:	f002 0308 	and.w	r3, r2, #8
 80074ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80074f0:	2300      	movs	r3, #0
 80074f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074f6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80074fa:	460b      	mov	r3, r1
 80074fc:	4313      	orrs	r3, r2
 80074fe:	d01e      	beq.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007508:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800750c:	d10c      	bne.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800750e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007512:	3328      	adds	r3, #40	@ 0x28
 8007514:	2102      	movs	r1, #2
 8007516:	4618      	mov	r0, r3
 8007518:	f000 fe54 	bl	80081c4 <RCCEx_PLL3_Config>
 800751c:	4603      	mov	r3, r0
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007528:	4b87      	ldr	r3, [pc, #540]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800752a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800752c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007530:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007534:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007538:	4a83      	ldr	r2, [pc, #524]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800753a:	430b      	orrs	r3, r1
 800753c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800753e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007546:	f002 0310 	and.w	r3, r2, #16
 800754a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800754e:	2300      	movs	r3, #0
 8007550:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007554:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007558:	460b      	mov	r3, r1
 800755a:	4313      	orrs	r3, r2
 800755c:	d01e      	beq.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800756a:	d10c      	bne.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800756c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007570:	3328      	adds	r3, #40	@ 0x28
 8007572:	2102      	movs	r1, #2
 8007574:	4618      	mov	r0, r3
 8007576:	f000 fe25 	bl	80081c4 <RCCEx_PLL3_Config>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007586:	4b70      	ldr	r3, [pc, #448]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800758a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800758e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007592:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007596:	4a6c      	ldr	r2, [pc, #432]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007598:	430b      	orrs	r3, r1
 800759a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800759c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80075a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075ac:	2300      	movs	r3, #0
 80075ae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075b2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075b6:	460b      	mov	r3, r1
 80075b8:	4313      	orrs	r3, r2
 80075ba:	d03e      	beq.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075c8:	d022      	beq.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80075ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ce:	d81b      	bhi.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80075d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075d8:	d00b      	beq.n	80075f2 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80075da:	e015      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	3308      	adds	r3, #8
 80075e2:	2100      	movs	r1, #0
 80075e4:	4618      	mov	r0, r3
 80075e6:	f000 fd3b 	bl	8008060 <RCCEx_PLL2_Config>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80075f0:	e00f      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80075f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f6:	3328      	adds	r3, #40	@ 0x28
 80075f8:	2102      	movs	r1, #2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f000 fde2 	bl	80081c4 <RCCEx_PLL3_Config>
 8007600:	4603      	mov	r3, r0
 8007602:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007606:	e004      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800760e:	e000      	b.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007610:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007612:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007616:	2b00      	cmp	r3, #0
 8007618:	d10b      	bne.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800761a:	4b4b      	ldr	r3, [pc, #300]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800761c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800761e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800762a:	4a47      	ldr	r2, [pc, #284]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800762c:	430b      	orrs	r3, r1
 800762e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007630:	e003      	b.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007636:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800763a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007646:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007648:	2300      	movs	r3, #0
 800764a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800764c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007650:	460b      	mov	r3, r1
 8007652:	4313      	orrs	r3, r2
 8007654:	d03b      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800765e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007662:	d01f      	beq.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007664:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007668:	d818      	bhi.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800766a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800766e:	d003      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007670:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007674:	d007      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007676:	e011      	b.n	800769c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007678:	4b33      	ldr	r3, [pc, #204]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800767a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767c:	4a32      	ldr	r2, [pc, #200]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800767e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007684:	e00f      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800768a:	3328      	adds	r3, #40	@ 0x28
 800768c:	2101      	movs	r1, #1
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fd98 	bl	80081c4 <RCCEx_PLL3_Config>
 8007694:	4603      	mov	r3, r0
 8007696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800769a:	e004      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076a2:	e000      	b.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d10b      	bne.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ae:	4b26      	ldr	r3, [pc, #152]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076be:	4a22      	ldr	r2, [pc, #136]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076c0:	430b      	orrs	r3, r1
 80076c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80076c4:	e003      	b.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80076da:	673b      	str	r3, [r7, #112]	@ 0x70
 80076dc:	2300      	movs	r3, #0
 80076de:	677b      	str	r3, [r7, #116]	@ 0x74
 80076e0:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80076e4:	460b      	mov	r3, r1
 80076e6:	4313      	orrs	r3, r2
 80076e8:	d034      	beq.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80076ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d003      	beq.n	80076fc <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80076f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076f8:	d007      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80076fa:	e011      	b.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076fc:	4b12      	ldr	r3, [pc, #72]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007700:	4a11      	ldr	r2, [pc, #68]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007708:	e00e      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770e:	3308      	adds	r3, #8
 8007710:	2102      	movs	r1, #2
 8007712:	4618      	mov	r0, r3
 8007714:	f000 fca4 	bl	8008060 <RCCEx_PLL2_Config>
 8007718:	4603      	mov	r3, r0
 800771a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800771e:	e003      	b.n	8007728 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007728:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800772c:	2b00      	cmp	r3, #0
 800772e:	d10d      	bne.n	800774c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007734:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007738:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800773e:	4a02      	ldr	r2, [pc, #8]	@ (8007748 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007740:	430b      	orrs	r3, r1
 8007742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007744:	e006      	b.n	8007754 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007746:	bf00      	nop
 8007748:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800774c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007750:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800775c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007760:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007762:	2300      	movs	r3, #0
 8007764:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007766:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800776a:	460b      	mov	r3, r1
 800776c:	4313      	orrs	r3, r2
 800776e:	d00c      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007774:	3328      	adds	r3, #40	@ 0x28
 8007776:	2102      	movs	r1, #2
 8007778:	4618      	mov	r0, r3
 800777a:	f000 fd23 	bl	80081c4 <RCCEx_PLL3_Config>
 800777e:	4603      	mov	r3, r0
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800778a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007792:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007796:	663b      	str	r3, [r7, #96]	@ 0x60
 8007798:	2300      	movs	r3, #0
 800779a:	667b      	str	r3, [r7, #100]	@ 0x64
 800779c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077a0:	460b      	mov	r3, r1
 80077a2:	4313      	orrs	r3, r2
 80077a4:	d038      	beq.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b2:	d018      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80077b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077b8:	d811      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077be:	d014      	beq.n	80077ea <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077c4:	d80b      	bhi.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d011      	beq.n	80077ee <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80077ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ce:	d106      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077d0:	4bc3      	ldr	r3, [pc, #780]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077d4:	4ac2      	ldr	r2, [pc, #776]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80077dc:	e008      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077e4:	e004      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077e6:	bf00      	nop
 80077e8:	e002      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077ea:	bf00      	nop
 80077ec:	e000      	b.n	80077f0 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80077ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10b      	bne.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80077f8:	4bb9      	ldr	r3, [pc, #740]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077fc:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007804:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007808:	4ab5      	ldr	r2, [pc, #724]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800780a:	430b      	orrs	r3, r1
 800780c:	6553      	str	r3, [r2, #84]	@ 0x54
 800780e:	e003      	b.n	8007818 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800781c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007820:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007824:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007826:	2300      	movs	r3, #0
 8007828:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800782a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800782e:	460b      	mov	r3, r1
 8007830:	4313      	orrs	r3, r2
 8007832:	d009      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007834:	4baa      	ldr	r3, [pc, #680]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007836:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007838:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800783c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007842:	4aa7      	ldr	r2, [pc, #668]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007844:	430b      	orrs	r3, r1
 8007846:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007854:	653b      	str	r3, [r7, #80]	@ 0x50
 8007856:	2300      	movs	r3, #0
 8007858:	657b      	str	r3, [r7, #84]	@ 0x54
 800785a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800785e:	460b      	mov	r3, r1
 8007860:	4313      	orrs	r3, r2
 8007862:	d00a      	beq.n	800787a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007864:	4b9e      	ldr	r3, [pc, #632]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007866:	691b      	ldr	r3, [r3, #16]
 8007868:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800786c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007870:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007874:	4a9a      	ldr	r2, [pc, #616]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007876:	430b      	orrs	r3, r1
 8007878:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800787a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007882:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007886:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007888:	2300      	movs	r3, #0
 800788a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800788c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007890:	460b      	mov	r3, r1
 8007892:	4313      	orrs	r3, r2
 8007894:	d009      	beq.n	80078aa <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007896:	4b92      	ldr	r3, [pc, #584]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800789a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800789e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a4:	4a8e      	ldr	r2, [pc, #568]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078a6:	430b      	orrs	r3, r1
 80078a8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078b2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80078b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078b8:	2300      	movs	r3, #0
 80078ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80078bc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80078c0:	460b      	mov	r3, r1
 80078c2:	4313      	orrs	r3, r2
 80078c4:	d00e      	beq.n	80078e4 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078c6:	4b86      	ldr	r3, [pc, #536]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	4a85      	ldr	r2, [pc, #532]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078d0:	6113      	str	r3, [r2, #16]
 80078d2:	4b83      	ldr	r3, [pc, #524]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078d4:	6919      	ldr	r1, [r3, #16]
 80078d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078de:	4a80      	ldr	r2, [pc, #512]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e0:	430b      	orrs	r3, r1
 80078e2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80078e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078ec:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80078f0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078f2:	2300      	movs	r3, #0
 80078f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078f6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80078fa:	460b      	mov	r3, r1
 80078fc:	4313      	orrs	r3, r2
 80078fe:	d009      	beq.n	8007914 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007900:	4b77      	ldr	r3, [pc, #476]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007904:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800790c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800790e:	4a74      	ldr	r2, [pc, #464]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007910:	430b      	orrs	r3, r1
 8007912:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007920:	633b      	str	r3, [r7, #48]	@ 0x30
 8007922:	2300      	movs	r3, #0
 8007924:	637b      	str	r3, [r7, #52]	@ 0x34
 8007926:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800792a:	460b      	mov	r3, r1
 800792c:	4313      	orrs	r3, r2
 800792e:	d00a      	beq.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007930:	4b6b      	ldr	r3, [pc, #428]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007934:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007940:	4a67      	ldr	r2, [pc, #412]	@ (8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007942:	430b      	orrs	r3, r1
 8007944:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794e:	2100      	movs	r1, #0
 8007950:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007958:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d011      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007966:	3308      	adds	r3, #8
 8007968:	2100      	movs	r1, #0
 800796a:	4618      	mov	r0, r3
 800796c:	f000 fb78 	bl	8008060 <RCCEx_PLL2_Config>
 8007970:	4603      	mov	r3, r0
 8007972:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007982:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800798a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798e:	2100      	movs	r1, #0
 8007990:	6239      	str	r1, [r7, #32]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	627b      	str	r3, [r7, #36]	@ 0x24
 8007998:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800799c:	460b      	mov	r3, r1
 800799e:	4313      	orrs	r3, r2
 80079a0:	d011      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a6:	3308      	adds	r3, #8
 80079a8:	2101      	movs	r1, #1
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fb58 	bl	8008060 <RCCEx_PLL2_Config>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d003      	beq.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	2100      	movs	r1, #0
 80079d0:	61b9      	str	r1, [r7, #24]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	61fb      	str	r3, [r7, #28]
 80079d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079dc:	460b      	mov	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	d011      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	3308      	adds	r3, #8
 80079e8:	2102      	movs	r1, #2
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fb38 	bl	8008060 <RCCEx_PLL2_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d003      	beq.n	8007a06 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a0e:	2100      	movs	r1, #0
 8007a10:	6139      	str	r1, [r7, #16]
 8007a12:	f003 0308 	and.w	r3, r3, #8
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4313      	orrs	r3, r2
 8007a20:	d011      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a26:	3328      	adds	r3, #40	@ 0x28
 8007a28:	2100      	movs	r1, #0
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	f000 fbca 	bl	80081c4 <RCCEx_PLL3_Config>
 8007a30:	4603      	mov	r3, r0
 8007a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007a36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d003      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a4e:	2100      	movs	r1, #0
 8007a50:	60b9      	str	r1, [r7, #8]
 8007a52:	f003 0310 	and.w	r3, r3, #16
 8007a56:	60fb      	str	r3, [r7, #12]
 8007a58:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	d011      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a66:	3328      	adds	r3, #40	@ 0x28
 8007a68:	2101      	movs	r1, #1
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fbaa 	bl	80081c4 <RCCEx_PLL3_Config>
 8007a70:	4603      	mov	r3, r0
 8007a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a82:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007a86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a8e:	2100      	movs	r1, #0
 8007a90:	6039      	str	r1, [r7, #0]
 8007a92:	f003 0320 	and.w	r3, r3, #32
 8007a96:	607b      	str	r3, [r7, #4]
 8007a98:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	d011      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aa6:	3328      	adds	r3, #40	@ 0x28
 8007aa8:	2102      	movs	r1, #2
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f000 fb8a 	bl	80081c4 <RCCEx_PLL3_Config>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d003      	beq.n	8007ac6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ac2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007ac6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d101      	bne.n	8007ad2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	e000      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007ada:	46bd      	mov	sp, r7
 8007adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ae0:	58024400 	.word	0x58024400

08007ae4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007ae8:	f7fe fd54 	bl	8006594 <HAL_RCC_GetHCLKFreq>
 8007aec:	4602      	mov	r2, r0
 8007aee:	4b06      	ldr	r3, [pc, #24]	@ (8007b08 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007af0:	6a1b      	ldr	r3, [r3, #32]
 8007af2:	091b      	lsrs	r3, r3, #4
 8007af4:	f003 0307 	and.w	r3, r3, #7
 8007af8:	4904      	ldr	r1, [pc, #16]	@ (8007b0c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007afa:	5ccb      	ldrb	r3, [r1, r3]
 8007afc:	f003 031f 	and.w	r3, r3, #31
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	58024400 	.word	0x58024400
 8007b0c:	08010c9c 	.word	0x08010c9c

08007b10 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	@ 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b18:	4ba1      	ldr	r3, [pc, #644]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b1c:	f003 0303 	and.w	r3, r3, #3
 8007b20:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b22:	4b9f      	ldr	r3, [pc, #636]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b26:	0b1b      	lsrs	r3, r3, #12
 8007b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b2c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b32:	091b      	lsrs	r3, r3, #4
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b3a:	4b99      	ldr	r3, [pc, #612]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b3e:	08db      	lsrs	r3, r3, #3
 8007b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	fb02 f303 	mul.w	r3, r2, r3
 8007b4a:	ee07 3a90 	vmov	s15, r3
 8007b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8111 	beq.w	8007d80 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	2b02      	cmp	r3, #2
 8007b62:	f000 8083 	beq.w	8007c6c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	f200 80a1 	bhi.w	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b74:	69bb      	ldr	r3, [r7, #24]
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d056      	beq.n	8007c28 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b7a:	e099      	b.n	8007cb0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b7c:	4b88      	ldr	r3, [pc, #544]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d02d      	beq.n	8007be4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007b88:	4b85      	ldr	r3, [pc, #532]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	08db      	lsrs	r3, r3, #3
 8007b8e:	f003 0303 	and.w	r3, r3, #3
 8007b92:	4a84      	ldr	r2, [pc, #528]	@ (8007da4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007b94:	fa22 f303 	lsr.w	r3, r2, r3
 8007b98:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	ee07 3a90 	vmov	s15, r3
 8007ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bba:	ee07 3a90 	vmov	s15, r3
 8007bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007be2:	e087      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	ee07 3a90 	vmov	s15, r3
 8007bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007dac <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bfe:	ee07 3a90 	vmov	s15, r3
 8007c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c26:	e065      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	ee07 3a90 	vmov	s15, r3
 8007c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c3a:	4b59      	ldr	r3, [pc, #356]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c42:	ee07 3a90 	vmov	s15, r3
 8007c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c6a:	e043      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	ee07 3a90 	vmov	s15, r3
 8007c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007db4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c7e:	4b48      	ldr	r3, [pc, #288]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c86:	ee07 3a90 	vmov	s15, r3
 8007c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cae:	e021      	b.n	8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	ee07 3a90 	vmov	s15, r3
 8007cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007db0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cc2:	4b37      	ldr	r3, [pc, #220]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cca:	ee07 3a90 	vmov	s15, r3
 8007cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007da8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cf2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cf8:	0a5b      	lsrs	r3, r3, #9
 8007cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cfe:	ee07 3a90 	vmov	s15, r3
 8007d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d1a:	ee17 2a90 	vmov	r2, s15
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d22:	4b1f      	ldr	r3, [pc, #124]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d26:	0c1b      	lsrs	r3, r3, #16
 8007d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d2c:	ee07 3a90 	vmov	s15, r3
 8007d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d48:	ee17 2a90 	vmov	r2, s15
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d50:	4b13      	ldr	r3, [pc, #76]	@ (8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d54:	0e1b      	lsrs	r3, r3, #24
 8007d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d5a:	ee07 3a90 	vmov	s15, r3
 8007d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d76:	ee17 2a90 	vmov	r2, s15
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d7e:	e008      	b.n	8007d92 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	2200      	movs	r2, #0
 8007d8a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	609a      	str	r2, [r3, #8]
}
 8007d92:	bf00      	nop
 8007d94:	3724      	adds	r7, #36	@ 0x24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
 8007d9e:	bf00      	nop
 8007da0:	58024400 	.word	0x58024400
 8007da4:	03d09000 	.word	0x03d09000
 8007da8:	46000000 	.word	0x46000000
 8007dac:	4c742400 	.word	0x4c742400
 8007db0:	4a742400 	.word	0x4a742400
 8007db4:	4bbebc20 	.word	0x4bbebc20

08007db8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b089      	sub	sp, #36	@ 0x24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007dc0:	4ba1      	ldr	r3, [pc, #644]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc4:	f003 0303 	and.w	r3, r3, #3
 8007dc8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dca:	4b9f      	ldr	r3, [pc, #636]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dce:	0d1b      	lsrs	r3, r3, #20
 8007dd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007dd4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007dd6:	4b9c      	ldr	r3, [pc, #624]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dda:	0a1b      	lsrs	r3, r3, #8
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007de2:	4b99      	ldr	r3, [pc, #612]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007de6:	08db      	lsrs	r3, r3, #3
 8007de8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007dec:	693a      	ldr	r2, [r7, #16]
 8007dee:	fb02 f303 	mul.w	r3, r2, r3
 8007df2:	ee07 3a90 	vmov	s15, r3
 8007df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007dfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007dfe:	697b      	ldr	r3, [r7, #20]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 8111 	beq.w	8008028 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e06:	69bb      	ldr	r3, [r7, #24]
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	f000 8083 	beq.w	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b02      	cmp	r3, #2
 8007e12:	f200 80a1 	bhi.w	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e16:	69bb      	ldr	r3, [r7, #24]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e1c:	69bb      	ldr	r3, [r7, #24]
 8007e1e:	2b01      	cmp	r3, #1
 8007e20:	d056      	beq.n	8007ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e22:	e099      	b.n	8007f58 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e24:	4b88      	ldr	r3, [pc, #544]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f003 0320 	and.w	r3, r3, #32
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d02d      	beq.n	8007e8c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e30:	4b85      	ldr	r3, [pc, #532]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	08db      	lsrs	r3, r3, #3
 8007e36:	f003 0303 	and.w	r3, r3, #3
 8007e3a:	4a84      	ldr	r2, [pc, #528]	@ (800804c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e40:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	ee07 3a90 	vmov	s15, r3
 8007e48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	ee07 3a90 	vmov	s15, r3
 8007e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e62:	ee07 3a90 	vmov	s15, r3
 8007e66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e6e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007e8a:	e087      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	ee07 3a90 	vmov	s15, r3
 8007e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e96:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008054 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007e9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ea6:	ee07 3a90 	vmov	s15, r3
 8007eaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007eb2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007eb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ebe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ec2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ec6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ece:	e065      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	ee07 3a90 	vmov	s15, r3
 8007ed6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eda:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007ede:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ee2:	4b59      	ldr	r3, [pc, #356]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ee6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007eea:	ee07 3a90 	vmov	s15, r3
 8007eee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ef2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ef6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007efa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007efe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f12:	e043      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	ee07 3a90 	vmov	s15, r3
 8007f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f1e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800805c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f26:	4b48      	ldr	r3, [pc, #288]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f2e:	ee07 3a90 	vmov	s15, r3
 8007f32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f3a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f56:	e021      	b.n	8007f9c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	ee07 3a90 	vmov	s15, r3
 8007f5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f62:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008058 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f6a:	4b37      	ldr	r3, [pc, #220]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f7e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008050 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f9a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fa0:	0a5b      	lsrs	r3, r3, #9
 8007fa2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fa6:	ee07 3a90 	vmov	s15, r3
 8007faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fc2:	ee17 2a90 	vmov	r2, s15
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007fca:	4b1f      	ldr	r3, [pc, #124]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fd4:	ee07 3a90 	vmov	s15, r3
 8007fd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fdc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fe0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fe4:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fe8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ff0:	ee17 2a90 	vmov	r2, s15
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8007ff8:	4b13      	ldr	r3, [pc, #76]	@ (8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ffc:	0e1b      	lsrs	r3, r3, #24
 8007ffe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008002:	ee07 3a90 	vmov	s15, r3
 8008006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800800a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008012:	edd7 6a07 	vldr	s13, [r7, #28]
 8008016:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800801a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800801e:	ee17 2a90 	vmov	r2, s15
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008026:	e008      	b.n	800803a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2200      	movs	r2, #0
 8008032:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	609a      	str	r2, [r3, #8]
}
 800803a:	bf00      	nop
 800803c:	3724      	adds	r7, #36	@ 0x24
 800803e:	46bd      	mov	sp, r7
 8008040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop
 8008048:	58024400 	.word	0x58024400
 800804c:	03d09000 	.word	0x03d09000
 8008050:	46000000 	.word	0x46000000
 8008054:	4c742400 	.word	0x4c742400
 8008058:	4a742400 	.word	0x4a742400
 800805c:	4bbebc20 	.word	0x4bbebc20

08008060 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800806a:	2300      	movs	r3, #0
 800806c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800806e:	4b53      	ldr	r3, [pc, #332]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008072:	f003 0303 	and.w	r3, r3, #3
 8008076:	2b03      	cmp	r3, #3
 8008078:	d101      	bne.n	800807e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e099      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800807e:	4b4f      	ldr	r3, [pc, #316]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a4e      	ldr	r2, [pc, #312]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008084:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008088:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800808a:	f7fa f8ef 	bl	800226c <HAL_GetTick>
 800808e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008090:	e008      	b.n	80080a4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008092:	f7fa f8eb 	bl	800226c <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e086      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080a4:	4b45      	ldr	r3, [pc, #276]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080b0:	4b42      	ldr	r3, [pc, #264]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080b4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	031b      	lsls	r3, r3, #12
 80080be:	493f      	ldr	r1, [pc, #252]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	3b01      	subs	r3, #1
 80080ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	3b01      	subs	r3, #1
 80080d4:	025b      	lsls	r3, r3, #9
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	431a      	orrs	r2, r3
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	3b01      	subs	r3, #1
 80080e0:	041b      	lsls	r3, r3, #16
 80080e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	691b      	ldr	r3, [r3, #16]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	061b      	lsls	r3, r3, #24
 80080f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80080f4:	4931      	ldr	r1, [pc, #196]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080f6:	4313      	orrs	r3, r2
 80080f8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80080fa:	4b30      	ldr	r3, [pc, #192]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80080fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080fe:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	695b      	ldr	r3, [r3, #20]
 8008106:	492d      	ldr	r1, [pc, #180]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008108:	4313      	orrs	r3, r2
 800810a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800810c:	4b2b      	ldr	r3, [pc, #172]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 800810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008110:	f023 0220 	bic.w	r2, r3, #32
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	699b      	ldr	r3, [r3, #24]
 8008118:	4928      	ldr	r1, [pc, #160]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800811e:	4b27      	ldr	r3, [pc, #156]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008122:	4a26      	ldr	r2, [pc, #152]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008124:	f023 0310 	bic.w	r3, r3, #16
 8008128:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800812a:	4b24      	ldr	r3, [pc, #144]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 800812c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800812e:	4b24      	ldr	r3, [pc, #144]	@ (80081c0 <RCCEx_PLL2_Config+0x160>)
 8008130:	4013      	ands	r3, r2
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	69d2      	ldr	r2, [r2, #28]
 8008136:	00d2      	lsls	r2, r2, #3
 8008138:	4920      	ldr	r1, [pc, #128]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800813e:	4b1f      	ldr	r3, [pc, #124]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a1e      	ldr	r2, [pc, #120]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008144:	f043 0310 	orr.w	r3, r3, #16
 8008148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d106      	bne.n	800815e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008150:	4b1a      	ldr	r3, [pc, #104]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008154:	4a19      	ldr	r2, [pc, #100]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008156:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800815a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800815c:	e00f      	b.n	800817e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	2b01      	cmp	r3, #1
 8008162:	d106      	bne.n	8008172 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008164:	4b15      	ldr	r3, [pc, #84]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008168:	4a14      	ldr	r2, [pc, #80]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 800816a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800816e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008170:	e005      	b.n	800817e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008172:	4b12      	ldr	r3, [pc, #72]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008176:	4a11      	ldr	r2, [pc, #68]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008178:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800817c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800817e:	4b0f      	ldr	r3, [pc, #60]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a0e      	ldr	r2, [pc, #56]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 8008184:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800818a:	f7fa f86f 	bl	800226c <HAL_GetTick>
 800818e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008190:	e008      	b.n	80081a4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008192:	f7fa f86b 	bl	800226c <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e006      	b.n	80081b2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081a4:	4b05      	ldr	r3, [pc, #20]	@ (80081bc <RCCEx_PLL2_Config+0x15c>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	58024400 	.word	0x58024400
 80081c0:	ffff0007 	.word	0xffff0007

080081c4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
 80081cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ce:	2300      	movs	r3, #0
 80081d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081d2:	4b53      	ldr	r3, [pc, #332]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081d6:	f003 0303 	and.w	r3, r3, #3
 80081da:	2b03      	cmp	r3, #3
 80081dc:	d101      	bne.n	80081e2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081de:	2301      	movs	r3, #1
 80081e0:	e099      	b.n	8008316 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80081e2:	4b4f      	ldr	r3, [pc, #316]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4a4e      	ldr	r2, [pc, #312]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80081e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ee:	f7fa f83d 	bl	800226c <HAL_GetTick>
 80081f2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80081f4:	e008      	b.n	8008208 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80081f6:	f7fa f839 	bl	800226c <HAL_GetTick>
 80081fa:	4602      	mov	r2, r0
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	1ad3      	subs	r3, r2, r3
 8008200:	2b02      	cmp	r3, #2
 8008202:	d901      	bls.n	8008208 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e086      	b.n	8008316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008208:	4b45      	ldr	r3, [pc, #276]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d1f0      	bne.n	80081f6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008214:	4b42      	ldr	r3, [pc, #264]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008218:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	051b      	lsls	r3, r3, #20
 8008222:	493f      	ldr	r1, [pc, #252]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008224:	4313      	orrs	r3, r2
 8008226:	628b      	str	r3, [r1, #40]	@ 0x28
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	685b      	ldr	r3, [r3, #4]
 800822c:	3b01      	subs	r3, #1
 800822e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	3b01      	subs	r3, #1
 8008238:	025b      	lsls	r3, r3, #9
 800823a:	b29b      	uxth	r3, r3
 800823c:	431a      	orrs	r2, r3
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	3b01      	subs	r3, #1
 8008244:	041b      	lsls	r3, r3, #16
 8008246:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800824a:	431a      	orrs	r2, r3
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	691b      	ldr	r3, [r3, #16]
 8008250:	3b01      	subs	r3, #1
 8008252:	061b      	lsls	r3, r3, #24
 8008254:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008258:	4931      	ldr	r1, [pc, #196]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800825a:	4313      	orrs	r3, r2
 800825c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800825e:	4b30      	ldr	r3, [pc, #192]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008262:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	492d      	ldr	r1, [pc, #180]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800826c:	4313      	orrs	r3, r2
 800826e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008270:	4b2b      	ldr	r3, [pc, #172]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008274:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	4928      	ldr	r1, [pc, #160]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800827e:	4313      	orrs	r3, r2
 8008280:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008282:	4b27      	ldr	r3, [pc, #156]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008286:	4a26      	ldr	r2, [pc, #152]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008288:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800828c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800828e:	4b24      	ldr	r3, [pc, #144]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 8008290:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008292:	4b24      	ldr	r3, [pc, #144]	@ (8008324 <RCCEx_PLL3_Config+0x160>)
 8008294:	4013      	ands	r3, r2
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	69d2      	ldr	r2, [r2, #28]
 800829a:	00d2      	lsls	r2, r2, #3
 800829c:	4920      	ldr	r1, [pc, #128]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082a2:	4b1f      	ldr	r3, [pc, #124]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	4a1e      	ldr	r2, [pc, #120]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d106      	bne.n	80082c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082b4:	4b1a      	ldr	r3, [pc, #104]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b8:	4a19      	ldr	r2, [pc, #100]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082c0:	e00f      	b.n	80082e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d106      	bne.n	80082d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082c8:	4b15      	ldr	r3, [pc, #84]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082cc:	4a14      	ldr	r2, [pc, #80]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082d4:	e005      	b.n	80082e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082d6:	4b12      	ldr	r3, [pc, #72]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082da:	4a11      	ldr	r2, [pc, #68]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082dc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80082e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80082e2:	4b0f      	ldr	r3, [pc, #60]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a0e      	ldr	r2, [pc, #56]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082ee:	f7f9 ffbd 	bl	800226c <HAL_GetTick>
 80082f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80082f4:	e008      	b.n	8008308 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80082f6:	f7f9 ffb9 	bl	800226c <HAL_GetTick>
 80082fa:	4602      	mov	r2, r0
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	1ad3      	subs	r3, r2, r3
 8008300:	2b02      	cmp	r3, #2
 8008302:	d901      	bls.n	8008308 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008304:	2303      	movs	r3, #3
 8008306:	e006      	b.n	8008316 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008308:	4b05      	ldr	r3, [pc, #20]	@ (8008320 <RCCEx_PLL3_Config+0x15c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d0f0      	beq.n	80082f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008314:	7bfb      	ldrb	r3, [r7, #15]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3710      	adds	r7, #16
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}
 800831e:	bf00      	nop
 8008320:	58024400 	.word	0x58024400
 8008324:	ffff0007 	.word	0xffff0007

08008328 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d101      	bne.n	800833a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	e049      	b.n	80083ce <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f7f9 fb3e 	bl	80019d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681a      	ldr	r2, [r3, #0]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3304      	adds	r3, #4
 8008364:	4619      	mov	r1, r3
 8008366:	4610      	mov	r0, r2
 8008368:	f000 ff30 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2201      	movs	r2, #1
 8008370:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2201      	movs	r2, #1
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2201      	movs	r2, #1
 8008380:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2201      	movs	r2, #1
 8008388:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3708      	adds	r7, #8
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
	...

080083d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80083d8:	b480      	push	{r7}
 80083da:	b085      	sub	sp, #20
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d001      	beq.n	80083f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e054      	b.n	800849a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2202      	movs	r2, #2
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f042 0201 	orr.w	r2, r2, #1
 8008406:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a26      	ldr	r2, [pc, #152]	@ (80084a8 <HAL_TIM_Base_Start_IT+0xd0>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d022      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800841a:	d01d      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a22      	ldr	r2, [pc, #136]	@ (80084ac <HAL_TIM_Base_Start_IT+0xd4>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d018      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a21      	ldr	r2, [pc, #132]	@ (80084b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d013      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a1f      	ldr	r2, [pc, #124]	@ (80084b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d00e      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a1e      	ldr	r2, [pc, #120]	@ (80084b8 <HAL_TIM_Base_Start_IT+0xe0>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d009      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a1c      	ldr	r2, [pc, #112]	@ (80084bc <HAL_TIM_Base_Start_IT+0xe4>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d004      	beq.n	8008458 <HAL_TIM_Base_Start_IT+0x80>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a1b      	ldr	r2, [pc, #108]	@ (80084c0 <HAL_TIM_Base_Start_IT+0xe8>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d115      	bne.n	8008484 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	689a      	ldr	r2, [r3, #8]
 800845e:	4b19      	ldr	r3, [pc, #100]	@ (80084c4 <HAL_TIM_Base_Start_IT+0xec>)
 8008460:	4013      	ands	r3, r2
 8008462:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b06      	cmp	r3, #6
 8008468:	d015      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0xbe>
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008470:	d011      	beq.n	8008496 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f042 0201 	orr.w	r2, r2, #1
 8008480:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008482:	e008      	b.n	8008496 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f042 0201 	orr.w	r2, r2, #1
 8008492:	601a      	str	r2, [r3, #0]
 8008494:	e000      	b.n	8008498 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008496:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	40010000 	.word	0x40010000
 80084ac:	40000400 	.word	0x40000400
 80084b0:	40000800 	.word	0x40000800
 80084b4:	40000c00 	.word	0x40000c00
 80084b8:	40010400 	.word	0x40010400
 80084bc:	40001800 	.word	0x40001800
 80084c0:	40014000 	.word	0x40014000
 80084c4:	00010007 	.word	0x00010007

080084c8 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d101      	bne.n	80084da <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	e049      	b.n	800856e <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d106      	bne.n	80084f4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 f841 	bl	8008576 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2202      	movs	r2, #2
 80084f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	3304      	adds	r3, #4
 8008504:	4619      	mov	r1, r3
 8008506:	4610      	mov	r0, r2
 8008508:	f000 fe60 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3708      	adds	r7, #8
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}

08008576 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008576:	b480      	push	{r7}
 8008578:	b083      	sub	sp, #12
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e049      	b.n	8008630 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 f841 	bl	8008638 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f000 fdff 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800862e:	2300      	movs	r3, #0
}
 8008630:	4618      	mov	r0, r3
 8008632:	3708      	adds	r7, #8
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}

08008638 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008638:	b480      	push	{r7}
 800863a:	b083      	sub	sp, #12
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008640:	bf00      	nop
 8008642:	370c      	adds	r7, #12
 8008644:	46bd      	mov	sp, r7
 8008646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864a:	4770      	bx	lr

0800864c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
 8008654:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d109      	bne.n	8008670 <HAL_TIM_PWM_Start+0x24>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008662:	b2db      	uxtb	r3, r3
 8008664:	2b01      	cmp	r3, #1
 8008666:	bf14      	ite	ne
 8008668:	2301      	movne	r3, #1
 800866a:	2300      	moveq	r3, #0
 800866c:	b2db      	uxtb	r3, r3
 800866e:	e03c      	b.n	80086ea <HAL_TIM_PWM_Start+0x9e>
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	2b04      	cmp	r3, #4
 8008674:	d109      	bne.n	800868a <HAL_TIM_PWM_Start+0x3e>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b01      	cmp	r3, #1
 8008680:	bf14      	ite	ne
 8008682:	2301      	movne	r3, #1
 8008684:	2300      	moveq	r3, #0
 8008686:	b2db      	uxtb	r3, r3
 8008688:	e02f      	b.n	80086ea <HAL_TIM_PWM_Start+0x9e>
 800868a:	683b      	ldr	r3, [r7, #0]
 800868c:	2b08      	cmp	r3, #8
 800868e:	d109      	bne.n	80086a4 <HAL_TIM_PWM_Start+0x58>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008696:	b2db      	uxtb	r3, r3
 8008698:	2b01      	cmp	r3, #1
 800869a:	bf14      	ite	ne
 800869c:	2301      	movne	r3, #1
 800869e:	2300      	moveq	r3, #0
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	e022      	b.n	80086ea <HAL_TIM_PWM_Start+0x9e>
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	2b0c      	cmp	r3, #12
 80086a8:	d109      	bne.n	80086be <HAL_TIM_PWM_Start+0x72>
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80086b0:	b2db      	uxtb	r3, r3
 80086b2:	2b01      	cmp	r3, #1
 80086b4:	bf14      	ite	ne
 80086b6:	2301      	movne	r3, #1
 80086b8:	2300      	moveq	r3, #0
 80086ba:	b2db      	uxtb	r3, r3
 80086bc:	e015      	b.n	80086ea <HAL_TIM_PWM_Start+0x9e>
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	2b10      	cmp	r3, #16
 80086c2:	d109      	bne.n	80086d8 <HAL_TIM_PWM_Start+0x8c>
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	bf14      	ite	ne
 80086d0:	2301      	movne	r3, #1
 80086d2:	2300      	moveq	r3, #0
 80086d4:	b2db      	uxtb	r3, r3
 80086d6:	e008      	b.n	80086ea <HAL_TIM_PWM_Start+0x9e>
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086de:	b2db      	uxtb	r3, r3
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	bf14      	ite	ne
 80086e4:	2301      	movne	r3, #1
 80086e6:	2300      	moveq	r3, #0
 80086e8:	b2db      	uxtb	r3, r3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d001      	beq.n	80086f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	e0a1      	b.n	8008836 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d104      	bne.n	8008702 <HAL_TIM_PWM_Start+0xb6>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2202      	movs	r2, #2
 80086fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008700:	e023      	b.n	800874a <HAL_TIM_PWM_Start+0xfe>
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	2b04      	cmp	r3, #4
 8008706:	d104      	bne.n	8008712 <HAL_TIM_PWM_Start+0xc6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2202      	movs	r2, #2
 800870c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008710:	e01b      	b.n	800874a <HAL_TIM_PWM_Start+0xfe>
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b08      	cmp	r3, #8
 8008716:	d104      	bne.n	8008722 <HAL_TIM_PWM_Start+0xd6>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2202      	movs	r2, #2
 800871c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008720:	e013      	b.n	800874a <HAL_TIM_PWM_Start+0xfe>
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d104      	bne.n	8008732 <HAL_TIM_PWM_Start+0xe6>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008730:	e00b      	b.n	800874a <HAL_TIM_PWM_Start+0xfe>
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	2b10      	cmp	r3, #16
 8008736:	d104      	bne.n	8008742 <HAL_TIM_PWM_Start+0xf6>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2202      	movs	r2, #2
 800873c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008740:	e003      	b.n	800874a <HAL_TIM_PWM_Start+0xfe>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2202      	movs	r2, #2
 8008746:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2201      	movs	r2, #1
 8008750:	6839      	ldr	r1, [r7, #0]
 8008752:	4618      	mov	r0, r3
 8008754:	f001 fa7e 	bl	8009c54 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4a38      	ldr	r2, [pc, #224]	@ (8008840 <HAL_TIM_PWM_Start+0x1f4>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d013      	beq.n	800878a <HAL_TIM_PWM_Start+0x13e>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a37      	ldr	r2, [pc, #220]	@ (8008844 <HAL_TIM_PWM_Start+0x1f8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d00e      	beq.n	800878a <HAL_TIM_PWM_Start+0x13e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a35      	ldr	r2, [pc, #212]	@ (8008848 <HAL_TIM_PWM_Start+0x1fc>)
 8008772:	4293      	cmp	r3, r2
 8008774:	d009      	beq.n	800878a <HAL_TIM_PWM_Start+0x13e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a34      	ldr	r2, [pc, #208]	@ (800884c <HAL_TIM_PWM_Start+0x200>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d004      	beq.n	800878a <HAL_TIM_PWM_Start+0x13e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a32      	ldr	r2, [pc, #200]	@ (8008850 <HAL_TIM_PWM_Start+0x204>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_TIM_PWM_Start+0x142>
 800878a:	2301      	movs	r3, #1
 800878c:	e000      	b.n	8008790 <HAL_TIM_PWM_Start+0x144>
 800878e:	2300      	movs	r3, #0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d007      	beq.n	80087a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80087a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a25      	ldr	r2, [pc, #148]	@ (8008840 <HAL_TIM_PWM_Start+0x1f4>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d022      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b6:	d01d      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a25      	ldr	r2, [pc, #148]	@ (8008854 <HAL_TIM_PWM_Start+0x208>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d018      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a24      	ldr	r2, [pc, #144]	@ (8008858 <HAL_TIM_PWM_Start+0x20c>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d013      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a22      	ldr	r2, [pc, #136]	@ (800885c <HAL_TIM_PWM_Start+0x210>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00e      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a1a      	ldr	r2, [pc, #104]	@ (8008844 <HAL_TIM_PWM_Start+0x1f8>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d009      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1e      	ldr	r2, [pc, #120]	@ (8008860 <HAL_TIM_PWM_Start+0x214>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d004      	beq.n	80087f4 <HAL_TIM_PWM_Start+0x1a8>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a16      	ldr	r2, [pc, #88]	@ (8008848 <HAL_TIM_PWM_Start+0x1fc>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d115      	bne.n	8008820 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	689a      	ldr	r2, [r3, #8]
 80087fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008864 <HAL_TIM_PWM_Start+0x218>)
 80087fc:	4013      	ands	r3, r2
 80087fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	2b06      	cmp	r3, #6
 8008804:	d015      	beq.n	8008832 <HAL_TIM_PWM_Start+0x1e6>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800880c:	d011      	beq.n	8008832 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f042 0201 	orr.w	r2, r2, #1
 800881c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800881e:	e008      	b.n	8008832 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f042 0201 	orr.w	r2, r2, #1
 800882e:	601a      	str	r2, [r3, #0]
 8008830:	e000      	b.n	8008834 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008832:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40010000 	.word	0x40010000
 8008844:	40010400 	.word	0x40010400
 8008848:	40014000 	.word	0x40014000
 800884c:	40014400 	.word	0x40014400
 8008850:	40014800 	.word	0x40014800
 8008854:	40000400 	.word	0x40000400
 8008858:	40000800 	.word	0x40000800
 800885c:	40000c00 	.word	0x40000c00
 8008860:	40001800 	.word	0x40001800
 8008864:	00010007 	.word	0x00010007

08008868 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008868:	b580      	push	{r7, lr}
 800886a:	b082      	sub	sp, #8
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d101      	bne.n	800887a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e049      	b.n	800890e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008880:	b2db      	uxtb	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d106      	bne.n	8008894 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2200      	movs	r2, #0
 800888a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 f841 	bl	8008916 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681a      	ldr	r2, [r3, #0]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	3304      	adds	r3, #4
 80088a4:	4619      	mov	r1, r3
 80088a6:	4610      	mov	r0, r2
 80088a8:	f000 fc90 	bl	80091cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2201      	movs	r2, #1
 80088c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2201      	movs	r2, #1
 80088d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2201      	movs	r2, #1
 80088d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800891e:	bf00      	nop
 8008920:	370c      	adds	r7, #12
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800892a:	b580      	push	{r7, lr}
 800892c:	b084      	sub	sp, #16
 800892e:	af00      	add	r7, sp, #0
 8008930:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	68db      	ldr	r3, [r3, #12]
 8008938:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f003 0302 	and.w	r3, r3, #2
 8008948:	2b00      	cmp	r3, #0
 800894a:	d020      	beq.n	800898e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f003 0302 	and.w	r3, r3, #2
 8008952:	2b00      	cmp	r3, #0
 8008954:	d01b      	beq.n	800898e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f06f 0202 	mvn.w	r2, #2
 800895e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f003 0303 	and.w	r3, r3, #3
 8008970:	2b00      	cmp	r3, #0
 8008972:	d003      	beq.n	800897c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fc0b 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 800897a:	e005      	b.n	8008988 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fbfd 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 fc0e 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d020      	beq.n	80089da <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f003 0304 	and.w	r3, r3, #4
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d01b      	beq.n	80089da <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f06f 0204 	mvn.w	r2, #4
 80089aa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d003      	beq.n	80089c8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 fbe5 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 80089c6:	e005      	b.n	80089d4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f000 fbd7 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	f000 fbe8 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	2200      	movs	r2, #0
 80089d8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f003 0308 	and.w	r3, r3, #8
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d020      	beq.n	8008a26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 0308 	and.w	r3, r3, #8
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d01b      	beq.n	8008a26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f06f 0208 	mvn.w	r2, #8
 80089f6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2204      	movs	r2, #4
 80089fc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69db      	ldr	r3, [r3, #28]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fbbf 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 8008a12:	e005      	b.n	8008a20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f000 fbb1 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1a:	6878      	ldr	r0, [r7, #4]
 8008a1c:	f000 fbc2 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f003 0310 	and.w	r3, r3, #16
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d020      	beq.n	8008a72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d01b      	beq.n	8008a72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f06f 0210 	mvn.w	r2, #16
 8008a42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2208      	movs	r2, #8
 8008a48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	69db      	ldr	r3, [r3, #28]
 8008a50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d003      	beq.n	8008a60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f000 fb99 	bl	8009190 <HAL_TIM_IC_CaptureCallback>
 8008a5e:	e005      	b.n	8008a6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fb8b 	bl	800917c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f000 fb9c 	bl	80091a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f003 0301 	and.w	r3, r3, #1
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00c      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f06f 0201 	mvn.w	r2, #1
 8008a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f7f7 fe8b 	bl	80007ac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d104      	bne.n	8008aaa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00c      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d007      	beq.n	8008ac4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	f001 fac6 	bl	800a050 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00c      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d007      	beq.n	8008ae8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008ae0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f001 fabe 	bl	800a064 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00c      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d007      	beq.n	8008b0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb56 	bl	80091b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00c      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	f003 0320 	and.w	r3, r3, #32
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d007      	beq.n	8008b30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f06f 0220 	mvn.w	r2, #32
 8008b28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f001 fa86 	bl	800a03c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b30:	bf00      	nop
 8008b32:	3710      	adds	r7, #16
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}

08008b38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b44:	2300      	movs	r3, #0
 8008b46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d101      	bne.n	8008b56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8008b52:	2302      	movs	r3, #2
 8008b54:	e066      	b.n	8008c24 <HAL_TIM_OC_ConfigChannel+0xec>
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2201      	movs	r2, #1
 8008b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2b14      	cmp	r3, #20
 8008b62:	d857      	bhi.n	8008c14 <HAL_TIM_OC_ConfigChannel+0xdc>
 8008b64:	a201      	add	r2, pc, #4	@ (adr r2, 8008b6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8008b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b6a:	bf00      	nop
 8008b6c:	08008bc1 	.word	0x08008bc1
 8008b70:	08008c15 	.word	0x08008c15
 8008b74:	08008c15 	.word	0x08008c15
 8008b78:	08008c15 	.word	0x08008c15
 8008b7c:	08008bcf 	.word	0x08008bcf
 8008b80:	08008c15 	.word	0x08008c15
 8008b84:	08008c15 	.word	0x08008c15
 8008b88:	08008c15 	.word	0x08008c15
 8008b8c:	08008bdd 	.word	0x08008bdd
 8008b90:	08008c15 	.word	0x08008c15
 8008b94:	08008c15 	.word	0x08008c15
 8008b98:	08008c15 	.word	0x08008c15
 8008b9c:	08008beb 	.word	0x08008beb
 8008ba0:	08008c15 	.word	0x08008c15
 8008ba4:	08008c15 	.word	0x08008c15
 8008ba8:	08008c15 	.word	0x08008c15
 8008bac:	08008bf9 	.word	0x08008bf9
 8008bb0:	08008c15 	.word	0x08008c15
 8008bb4:	08008c15 	.word	0x08008c15
 8008bb8:	08008c15 	.word	0x08008c15
 8008bbc:	08008c07 	.word	0x08008c07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	68b9      	ldr	r1, [r7, #8]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f000 fba6 	bl	8009318 <TIM_OC1_SetConfig>
      break;
 8008bcc:	e025      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68b9      	ldr	r1, [r7, #8]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fc2f 	bl	8009438 <TIM_OC2_SetConfig>
      break;
 8008bda:	e01e      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68b9      	ldr	r1, [r7, #8]
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fcb2 	bl	800954c <TIM_OC3_SetConfig>
      break;
 8008be8:	e017      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	68b9      	ldr	r1, [r7, #8]
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f000 fd33 	bl	800965c <TIM_OC4_SetConfig>
      break;
 8008bf6:	e010      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68b9      	ldr	r1, [r7, #8]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f000 fd96 	bl	8009730 <TIM_OC5_SetConfig>
      break;
 8008c04:	e009      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	68b9      	ldr	r1, [r7, #8]
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fdf3 	bl	80097f8 <TIM_OC6_SetConfig>
      break;
 8008c12:	e002      	b.n	8008c1a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	75fb      	strb	r3, [r7, #23]
      break;
 8008c18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c24:	4618      	mov	r0, r3
 8008c26:	3718      	adds	r7, #24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b086      	sub	sp, #24
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d101      	bne.n	8008c4a <HAL_TIM_IC_ConfigChannel+0x1e>
 8008c46:	2302      	movs	r3, #2
 8008c48:	e088      	b.n	8008d5c <HAL_TIM_IC_ConfigChannel+0x130>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d11b      	bne.n	8008c90 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008c68:	f000 fe2c 	bl	80098c4 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	699a      	ldr	r2, [r3, #24]
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f022 020c 	bic.w	r2, r2, #12
 8008c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	6999      	ldr	r1, [r3, #24]
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	689a      	ldr	r2, [r3, #8]
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	619a      	str	r2, [r3, #24]
 8008c8e:	e060      	b.n	8008d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	d11c      	bne.n	8008cd0 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008ca6:	f000 feb0 	bl	8009a0a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	699a      	ldr	r2, [r3, #24]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008cb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	6999      	ldr	r1, [r3, #24]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	021a      	lsls	r2, r3, #8
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	430a      	orrs	r2, r1
 8008ccc:	619a      	str	r2, [r3, #24]
 8008cce:	e040      	b.n	8008d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b08      	cmp	r3, #8
 8008cd4:	d11b      	bne.n	8008d0e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008ce6:	f000 fefd 	bl	8009ae4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	69da      	ldr	r2, [r3, #28]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	f022 020c 	bic.w	r2, r2, #12
 8008cf8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	69d9      	ldr	r1, [r3, #28]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	430a      	orrs	r2, r1
 8008d0a:	61da      	str	r2, [r3, #28]
 8008d0c:	e021      	b.n	8008d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b0c      	cmp	r3, #12
 8008d12:	d11c      	bne.n	8008d4e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008d18:	68bb      	ldr	r3, [r7, #8]
 8008d1a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008d24:	f000 ff1a 	bl	8009b5c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008d36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69d9      	ldr	r1, [r3, #28]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	021a      	lsls	r2, r3, #8
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	61da      	str	r2, [r3, #28]
 8008d4c:	e001      	b.n	8008d52 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2200      	movs	r2, #0
 8008d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008d5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d70:	2300      	movs	r3, #0
 8008d72:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d7a:	2b01      	cmp	r3, #1
 8008d7c:	d101      	bne.n	8008d82 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d7e:	2302      	movs	r3, #2
 8008d80:	e0ff      	b.n	8008f82 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	2201      	movs	r2, #1
 8008d86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2b14      	cmp	r3, #20
 8008d8e:	f200 80f0 	bhi.w	8008f72 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008d92:	a201      	add	r2, pc, #4	@ (adr r2, 8008d98 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d98:	08008ded 	.word	0x08008ded
 8008d9c:	08008f73 	.word	0x08008f73
 8008da0:	08008f73 	.word	0x08008f73
 8008da4:	08008f73 	.word	0x08008f73
 8008da8:	08008e2d 	.word	0x08008e2d
 8008dac:	08008f73 	.word	0x08008f73
 8008db0:	08008f73 	.word	0x08008f73
 8008db4:	08008f73 	.word	0x08008f73
 8008db8:	08008e6f 	.word	0x08008e6f
 8008dbc:	08008f73 	.word	0x08008f73
 8008dc0:	08008f73 	.word	0x08008f73
 8008dc4:	08008f73 	.word	0x08008f73
 8008dc8:	08008eaf 	.word	0x08008eaf
 8008dcc:	08008f73 	.word	0x08008f73
 8008dd0:	08008f73 	.word	0x08008f73
 8008dd4:	08008f73 	.word	0x08008f73
 8008dd8:	08008ef1 	.word	0x08008ef1
 8008ddc:	08008f73 	.word	0x08008f73
 8008de0:	08008f73 	.word	0x08008f73
 8008de4:	08008f73 	.word	0x08008f73
 8008de8:	08008f31 	.word	0x08008f31
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fa90 	bl	8009318 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	699a      	ldr	r2, [r3, #24]
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0208 	orr.w	r2, r2, #8
 8008e06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	699a      	ldr	r2, [r3, #24]
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f022 0204 	bic.w	r2, r2, #4
 8008e16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6999      	ldr	r1, [r3, #24]
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691a      	ldr	r2, [r3, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	430a      	orrs	r2, r1
 8008e28:	619a      	str	r2, [r3, #24]
      break;
 8008e2a:	e0a5      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68b9      	ldr	r1, [r7, #8]
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fb00 	bl	8009438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	699a      	ldr	r2, [r3, #24]
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	699a      	ldr	r2, [r3, #24]
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	6999      	ldr	r1, [r3, #24]
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	691b      	ldr	r3, [r3, #16]
 8008e62:	021a      	lsls	r2, r3, #8
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	430a      	orrs	r2, r1
 8008e6a:	619a      	str	r2, [r3, #24]
      break;
 8008e6c:	e084      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	68b9      	ldr	r1, [r7, #8]
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fb69 	bl	800954c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	69da      	ldr	r2, [r3, #28]
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0208 	orr.w	r2, r2, #8
 8008e88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	69da      	ldr	r2, [r3, #28]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 0204 	bic.w	r2, r2, #4
 8008e98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69d9      	ldr	r1, [r3, #28]
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	691a      	ldr	r2, [r3, #16]
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	430a      	orrs	r2, r1
 8008eaa:	61da      	str	r2, [r3, #28]
      break;
 8008eac:	e064      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f000 fbd1 	bl	800965c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69da      	ldr	r2, [r3, #28]
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ec8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69da      	ldr	r2, [r3, #28]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ed8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69d9      	ldr	r1, [r3, #28]
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	691b      	ldr	r3, [r3, #16]
 8008ee4:	021a      	lsls	r2, r3, #8
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	430a      	orrs	r2, r1
 8008eec:	61da      	str	r2, [r3, #28]
      break;
 8008eee:	e043      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	68b9      	ldr	r1, [r7, #8]
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f000 fc1a 	bl	8009730 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f042 0208 	orr.w	r2, r2, #8
 8008f0a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f022 0204 	bic.w	r2, r2, #4
 8008f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	691a      	ldr	r2, [r3, #16]
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	430a      	orrs	r2, r1
 8008f2c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f2e:	e023      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fc5e 	bl	80097f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	691b      	ldr	r3, [r3, #16]
 8008f66:	021a      	lsls	r2, r3, #8
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	430a      	orrs	r2, r1
 8008f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008f70:	e002      	b.n	8008f78 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
      break;
 8008f76:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3718      	adds	r7, #24
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop

08008f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e0dc      	b.n	8009162 <HAL_TIM_ConfigClockSource+0x1d6>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc0:	68ba      	ldr	r2, [r7, #8]
 8008fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800916c <HAL_TIM_ConfigClockSource+0x1e0>)
 8008fc4:	4013      	ands	r3, r2
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a64      	ldr	r2, [pc, #400]	@ (8009170 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	f000 80a9 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8008fe4:	4a62      	ldr	r2, [pc, #392]	@ (8009170 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	f200 80ae 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8008fec:	4a61      	ldr	r2, [pc, #388]	@ (8009174 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	f000 80a1 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8008ff4:	4a5f      	ldr	r2, [pc, #380]	@ (8009174 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	f200 80a6 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ffc:	4a5e      	ldr	r2, [pc, #376]	@ (8009178 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	f000 8099 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8009004:	4a5c      	ldr	r2, [pc, #368]	@ (8009178 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009006:	4293      	cmp	r3, r2
 8009008:	f200 809e 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 800900c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009010:	f000 8091 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8009014:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009018:	f200 8096 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 800901c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009020:	f000 8089 	beq.w	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8009024:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009028:	f200 808e 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 800902c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009030:	d03e      	beq.n	80090b0 <HAL_TIM_ConfigClockSource+0x124>
 8009032:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009036:	f200 8087 	bhi.w	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 800903a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800903e:	f000 8086 	beq.w	800914e <HAL_TIM_ConfigClockSource+0x1c2>
 8009042:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009046:	d87f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009048:	2b70      	cmp	r3, #112	@ 0x70
 800904a:	d01a      	beq.n	8009082 <HAL_TIM_ConfigClockSource+0xf6>
 800904c:	2b70      	cmp	r3, #112	@ 0x70
 800904e:	d87b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009050:	2b60      	cmp	r3, #96	@ 0x60
 8009052:	d050      	beq.n	80090f6 <HAL_TIM_ConfigClockSource+0x16a>
 8009054:	2b60      	cmp	r3, #96	@ 0x60
 8009056:	d877      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009058:	2b50      	cmp	r3, #80	@ 0x50
 800905a:	d03c      	beq.n	80090d6 <HAL_TIM_ConfigClockSource+0x14a>
 800905c:	2b50      	cmp	r3, #80	@ 0x50
 800905e:	d873      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009060:	2b40      	cmp	r3, #64	@ 0x40
 8009062:	d058      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0x18a>
 8009064:	2b40      	cmp	r3, #64	@ 0x40
 8009066:	d86f      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009068:	2b30      	cmp	r3, #48	@ 0x30
 800906a:	d064      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 800906c:	2b30      	cmp	r3, #48	@ 0x30
 800906e:	d86b      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009070:	2b20      	cmp	r3, #32
 8009072:	d060      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8009074:	2b20      	cmp	r3, #32
 8009076:	d867      	bhi.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
 8009078:	2b00      	cmp	r3, #0
 800907a:	d05c      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 800907c:	2b10      	cmp	r3, #16
 800907e:	d05a      	beq.n	8009136 <HAL_TIM_ConfigClockSource+0x1aa>
 8009080:	e062      	b.n	8009148 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009092:	f000 fdbf 	bl	8009c14 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80090a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	609a      	str	r2, [r3, #8]
      break;
 80090ae:	e04f      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80090c0:	f000 fda8 	bl	8009c14 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80090d2:	609a      	str	r2, [r3, #8]
      break;
 80090d4:	e03c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090e2:	461a      	mov	r2, r3
 80090e4:	f000 fc62 	bl	80099ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	2150      	movs	r1, #80	@ 0x50
 80090ee:	4618      	mov	r0, r3
 80090f0:	f000 fd72 	bl	8009bd8 <TIM_ITRx_SetConfig>
      break;
 80090f4:	e02c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090fa:	683b      	ldr	r3, [r7, #0]
 80090fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009102:	461a      	mov	r2, r3
 8009104:	f000 fcbe 	bl	8009a84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2160      	movs	r1, #96	@ 0x60
 800910e:	4618      	mov	r0, r3
 8009110:	f000 fd62 	bl	8009bd8 <TIM_ITRx_SetConfig>
      break;
 8009114:	e01c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009122:	461a      	mov	r2, r3
 8009124:	f000 fc42 	bl	80099ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	2140      	movs	r1, #64	@ 0x40
 800912e:	4618      	mov	r0, r3
 8009130:	f000 fd52 	bl	8009bd8 <TIM_ITRx_SetConfig>
      break;
 8009134:	e00c      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4619      	mov	r1, r3
 8009140:	4610      	mov	r0, r2
 8009142:	f000 fd49 	bl	8009bd8 <TIM_ITRx_SetConfig>
      break;
 8009146:	e003      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	73fb      	strb	r3, [r7, #15]
      break;
 800914c:	e000      	b.n	8009150 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800914e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009160:	7bfb      	ldrb	r3, [r7, #15]
}
 8009162:	4618      	mov	r0, r3
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	ffceff88 	.word	0xffceff88
 8009170:	00100040 	.word	0x00100040
 8009174:	00100030 	.word	0x00100030
 8009178:	00100020 	.word	0x00100020

0800917c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800917c:	b480      	push	{r7}
 800917e:	b083      	sub	sp, #12
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009184:	bf00      	nop
 8009186:	370c      	adds	r7, #12
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009190:	b480      	push	{r7}
 8009192:	b083      	sub	sp, #12
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009198:	bf00      	nop
 800919a:	370c      	adds	r7, #12
 800919c:	46bd      	mov	sp, r7
 800919e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a2:	4770      	bx	lr

080091a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091ac:	bf00      	nop
 80091ae:	370c      	adds	r7, #12
 80091b0:	46bd      	mov	sp, r7
 80091b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b6:	4770      	bx	lr

080091b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b083      	sub	sp, #12
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091c0:	bf00      	nop
 80091c2:	370c      	adds	r7, #12
 80091c4:	46bd      	mov	sp, r7
 80091c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ca:	4770      	bx	lr

080091cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b085      	sub	sp, #20
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a46      	ldr	r2, [pc, #280]	@ (80092f8 <TIM_Base_SetConfig+0x12c>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d013      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091ea:	d00f      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a43      	ldr	r2, [pc, #268]	@ (80092fc <TIM_Base_SetConfig+0x130>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00b      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a42      	ldr	r2, [pc, #264]	@ (8009300 <TIM_Base_SetConfig+0x134>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a41      	ldr	r2, [pc, #260]	@ (8009304 <TIM_Base_SetConfig+0x138>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d003      	beq.n	800920c <TIM_Base_SetConfig+0x40>
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	4a40      	ldr	r2, [pc, #256]	@ (8009308 <TIM_Base_SetConfig+0x13c>)
 8009208:	4293      	cmp	r3, r2
 800920a:	d108      	bne.n	800921e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009212:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	4313      	orrs	r3, r2
 800921c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a35      	ldr	r2, [pc, #212]	@ (80092f8 <TIM_Base_SetConfig+0x12c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d01f      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800922c:	d01b      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	4a32      	ldr	r2, [pc, #200]	@ (80092fc <TIM_Base_SetConfig+0x130>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d017      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	4a31      	ldr	r2, [pc, #196]	@ (8009300 <TIM_Base_SetConfig+0x134>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d013      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	4a30      	ldr	r2, [pc, #192]	@ (8009304 <TIM_Base_SetConfig+0x138>)
 8009242:	4293      	cmp	r3, r2
 8009244:	d00f      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	4a2f      	ldr	r2, [pc, #188]	@ (8009308 <TIM_Base_SetConfig+0x13c>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d00b      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	4a2e      	ldr	r2, [pc, #184]	@ (800930c <TIM_Base_SetConfig+0x140>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d007      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	4a2d      	ldr	r2, [pc, #180]	@ (8009310 <TIM_Base_SetConfig+0x144>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d003      	beq.n	8009266 <TIM_Base_SetConfig+0x9a>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	4a2c      	ldr	r2, [pc, #176]	@ (8009314 <TIM_Base_SetConfig+0x148>)
 8009262:	4293      	cmp	r3, r2
 8009264:	d108      	bne.n	8009278 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800926c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	4313      	orrs	r3, r2
 8009276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	695b      	ldr	r3, [r3, #20]
 8009282:	4313      	orrs	r3, r2
 8009284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	689a      	ldr	r2, [r3, #8]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	681a      	ldr	r2, [r3, #0]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a16      	ldr	r2, [pc, #88]	@ (80092f8 <TIM_Base_SetConfig+0x12c>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d00f      	beq.n	80092c4 <TIM_Base_SetConfig+0xf8>
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a18      	ldr	r2, [pc, #96]	@ (8009308 <TIM_Base_SetConfig+0x13c>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d00b      	beq.n	80092c4 <TIM_Base_SetConfig+0xf8>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a17      	ldr	r2, [pc, #92]	@ (800930c <TIM_Base_SetConfig+0x140>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d007      	beq.n	80092c4 <TIM_Base_SetConfig+0xf8>
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	4a16      	ldr	r2, [pc, #88]	@ (8009310 <TIM_Base_SetConfig+0x144>)
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d003      	beq.n	80092c4 <TIM_Base_SetConfig+0xf8>
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	4a15      	ldr	r2, [pc, #84]	@ (8009314 <TIM_Base_SetConfig+0x148>)
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d103      	bne.n	80092cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	691a      	ldr	r2, [r3, #16]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2201      	movs	r2, #1
 80092d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	f003 0301 	and.w	r3, r3, #1
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d105      	bne.n	80092ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	f023 0201 	bic.w	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	611a      	str	r2, [r3, #16]
  }
}
 80092ea:	bf00      	nop
 80092ec:	3714      	adds	r7, #20
 80092ee:	46bd      	mov	sp, r7
 80092f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f4:	4770      	bx	lr
 80092f6:	bf00      	nop
 80092f8:	40010000 	.word	0x40010000
 80092fc:	40000400 	.word	0x40000400
 8009300:	40000800 	.word	0x40000800
 8009304:	40000c00 	.word	0x40000c00
 8009308:	40010400 	.word	0x40010400
 800930c:	40014000 	.word	0x40014000
 8009310:	40014400 	.word	0x40014400
 8009314:	40014800 	.word	0x40014800

08009318 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a1b      	ldr	r3, [r3, #32]
 800932c:	f023 0201 	bic.w	r2, r3, #1
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	699b      	ldr	r3, [r3, #24]
 800933e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4b37      	ldr	r3, [pc, #220]	@ (8009420 <TIM_OC1_SetConfig+0x108>)
 8009344:	4013      	ands	r3, r2
 8009346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	f023 0303 	bic.w	r3, r3, #3
 800934e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4313      	orrs	r3, r2
 8009358:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	f023 0302 	bic.w	r3, r3, #2
 8009360:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	689b      	ldr	r3, [r3, #8]
 8009366:	697a      	ldr	r2, [r7, #20]
 8009368:	4313      	orrs	r3, r2
 800936a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	4a2d      	ldr	r2, [pc, #180]	@ (8009424 <TIM_OC1_SetConfig+0x10c>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d00f      	beq.n	8009394 <TIM_OC1_SetConfig+0x7c>
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	4a2c      	ldr	r2, [pc, #176]	@ (8009428 <TIM_OC1_SetConfig+0x110>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d00b      	beq.n	8009394 <TIM_OC1_SetConfig+0x7c>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	4a2b      	ldr	r2, [pc, #172]	@ (800942c <TIM_OC1_SetConfig+0x114>)
 8009380:	4293      	cmp	r3, r2
 8009382:	d007      	beq.n	8009394 <TIM_OC1_SetConfig+0x7c>
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	4a2a      	ldr	r2, [pc, #168]	@ (8009430 <TIM_OC1_SetConfig+0x118>)
 8009388:	4293      	cmp	r3, r2
 800938a:	d003      	beq.n	8009394 <TIM_OC1_SetConfig+0x7c>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	4a29      	ldr	r2, [pc, #164]	@ (8009434 <TIM_OC1_SetConfig+0x11c>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d10c      	bne.n	80093ae <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	f023 0308 	bic.w	r3, r3, #8
 800939a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f023 0304 	bic.w	r3, r3, #4
 80093ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a1c      	ldr	r2, [pc, #112]	@ (8009424 <TIM_OC1_SetConfig+0x10c>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d00f      	beq.n	80093d6 <TIM_OC1_SetConfig+0xbe>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009428 <TIM_OC1_SetConfig+0x110>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d00b      	beq.n	80093d6 <TIM_OC1_SetConfig+0xbe>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <TIM_OC1_SetConfig+0x114>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d007      	beq.n	80093d6 <TIM_OC1_SetConfig+0xbe>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	4a19      	ldr	r2, [pc, #100]	@ (8009430 <TIM_OC1_SetConfig+0x118>)
 80093ca:	4293      	cmp	r3, r2
 80093cc:	d003      	beq.n	80093d6 <TIM_OC1_SetConfig+0xbe>
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	4a18      	ldr	r2, [pc, #96]	@ (8009434 <TIM_OC1_SetConfig+0x11c>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d111      	bne.n	80093fa <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	695b      	ldr	r3, [r3, #20]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	4313      	orrs	r3, r2
 80093ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	693a      	ldr	r2, [r7, #16]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	693a      	ldr	r2, [r7, #16]
 80093fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	685a      	ldr	r2, [r3, #4]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	697a      	ldr	r2, [r7, #20]
 8009412:	621a      	str	r2, [r3, #32]
}
 8009414:	bf00      	nop
 8009416:	371c      	adds	r7, #28
 8009418:	46bd      	mov	sp, r7
 800941a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941e:	4770      	bx	lr
 8009420:	fffeff8f 	.word	0xfffeff8f
 8009424:	40010000 	.word	0x40010000
 8009428:	40010400 	.word	0x40010400
 800942c:	40014000 	.word	0x40014000
 8009430:	40014400 	.word	0x40014400
 8009434:	40014800 	.word	0x40014800

08009438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009438:	b480      	push	{r7}
 800943a:	b087      	sub	sp, #28
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
 8009440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6a1b      	ldr	r3, [r3, #32]
 8009446:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	f023 0210 	bic.w	r2, r3, #16
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	699b      	ldr	r3, [r3, #24]
 800945e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009460:	68fa      	ldr	r2, [r7, #12]
 8009462:	4b34      	ldr	r3, [pc, #208]	@ (8009534 <TIM_OC2_SetConfig+0xfc>)
 8009464:	4013      	ands	r3, r2
 8009466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800946e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	021b      	lsls	r3, r3, #8
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	f023 0320 	bic.w	r3, r3, #32
 8009482:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	4313      	orrs	r3, r2
 800948e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a29      	ldr	r2, [pc, #164]	@ (8009538 <TIM_OC2_SetConfig+0x100>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d003      	beq.n	80094a0 <TIM_OC2_SetConfig+0x68>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a28      	ldr	r2, [pc, #160]	@ (800953c <TIM_OC2_SetConfig+0x104>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d10d      	bne.n	80094bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80094a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	011b      	lsls	r3, r3, #4
 80094ae:	697a      	ldr	r2, [r7, #20]
 80094b0:	4313      	orrs	r3, r2
 80094b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80094ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	4a1e      	ldr	r2, [pc, #120]	@ (8009538 <TIM_OC2_SetConfig+0x100>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d00f      	beq.n	80094e4 <TIM_OC2_SetConfig+0xac>
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	4a1d      	ldr	r2, [pc, #116]	@ (800953c <TIM_OC2_SetConfig+0x104>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d00b      	beq.n	80094e4 <TIM_OC2_SetConfig+0xac>
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a1c      	ldr	r2, [pc, #112]	@ (8009540 <TIM_OC2_SetConfig+0x108>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d007      	beq.n	80094e4 <TIM_OC2_SetConfig+0xac>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a1b      	ldr	r2, [pc, #108]	@ (8009544 <TIM_OC2_SetConfig+0x10c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d003      	beq.n	80094e4 <TIM_OC2_SetConfig+0xac>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	4a1a      	ldr	r2, [pc, #104]	@ (8009548 <TIM_OC2_SetConfig+0x110>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d113      	bne.n	800950c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80094ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80094f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	693a      	ldr	r2, [r7, #16]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	4313      	orrs	r3, r2
 800950a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	693a      	ldr	r2, [r7, #16]
 8009510:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	685a      	ldr	r2, [r3, #4]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	697a      	ldr	r2, [r7, #20]
 8009524:	621a      	str	r2, [r3, #32]
}
 8009526:	bf00      	nop
 8009528:	371c      	adds	r7, #28
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	feff8fff 	.word	0xfeff8fff
 8009538:	40010000 	.word	0x40010000
 800953c:	40010400 	.word	0x40010400
 8009540:	40014000 	.word	0x40014000
 8009544:	40014400 	.word	0x40014400
 8009548:	40014800 	.word	0x40014800

0800954c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800954c:	b480      	push	{r7}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a1b      	ldr	r3, [r3, #32]
 800955a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6a1b      	ldr	r3, [r3, #32]
 8009560:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	4b33      	ldr	r3, [pc, #204]	@ (8009644 <TIM_OC3_SetConfig+0xf8>)
 8009578:	4013      	ands	r3, r2
 800957a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	f023 0303 	bic.w	r3, r3, #3
 8009582:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68fa      	ldr	r2, [r7, #12]
 800958a:	4313      	orrs	r3, r2
 800958c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009594:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009596:	683b      	ldr	r3, [r7, #0]
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	021b      	lsls	r3, r3, #8
 800959c:	697a      	ldr	r2, [r7, #20]
 800959e:	4313      	orrs	r3, r2
 80095a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	4a28      	ldr	r2, [pc, #160]	@ (8009648 <TIM_OC3_SetConfig+0xfc>)
 80095a6:	4293      	cmp	r3, r2
 80095a8:	d003      	beq.n	80095b2 <TIM_OC3_SetConfig+0x66>
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a27      	ldr	r2, [pc, #156]	@ (800964c <TIM_OC3_SetConfig+0x100>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d10d      	bne.n	80095ce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80095b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	68db      	ldr	r3, [r3, #12]
 80095be:	021b      	lsls	r3, r3, #8
 80095c0:	697a      	ldr	r2, [r7, #20]
 80095c2:	4313      	orrs	r3, r2
 80095c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80095cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	4a1d      	ldr	r2, [pc, #116]	@ (8009648 <TIM_OC3_SetConfig+0xfc>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00f      	beq.n	80095f6 <TIM_OC3_SetConfig+0xaa>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	4a1c      	ldr	r2, [pc, #112]	@ (800964c <TIM_OC3_SetConfig+0x100>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d00b      	beq.n	80095f6 <TIM_OC3_SetConfig+0xaa>
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a1b      	ldr	r2, [pc, #108]	@ (8009650 <TIM_OC3_SetConfig+0x104>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d007      	beq.n	80095f6 <TIM_OC3_SetConfig+0xaa>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	4a1a      	ldr	r2, [pc, #104]	@ (8009654 <TIM_OC3_SetConfig+0x108>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d003      	beq.n	80095f6 <TIM_OC3_SetConfig+0xaa>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	4a19      	ldr	r2, [pc, #100]	@ (8009658 <TIM_OC3_SetConfig+0x10c>)
 80095f2:	4293      	cmp	r3, r2
 80095f4:	d113      	bne.n	800961e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009604:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	011b      	lsls	r3, r3, #4
 800960c:	693a      	ldr	r2, [r7, #16]
 800960e:	4313      	orrs	r3, r2
 8009610:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009612:	683b      	ldr	r3, [r7, #0]
 8009614:	699b      	ldr	r3, [r3, #24]
 8009616:	011b      	lsls	r3, r3, #4
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	4313      	orrs	r3, r2
 800961c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	693a      	ldr	r2, [r7, #16]
 8009622:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	68fa      	ldr	r2, [r7, #12]
 8009628:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	685a      	ldr	r2, [r3, #4]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	697a      	ldr	r2, [r7, #20]
 8009636:	621a      	str	r2, [r3, #32]
}
 8009638:	bf00      	nop
 800963a:	371c      	adds	r7, #28
 800963c:	46bd      	mov	sp, r7
 800963e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009642:	4770      	bx	lr
 8009644:	fffeff8f 	.word	0xfffeff8f
 8009648:	40010000 	.word	0x40010000
 800964c:	40010400 	.word	0x40010400
 8009650:	40014000 	.word	0x40014000
 8009654:	40014400 	.word	0x40014400
 8009658:	40014800 	.word	0x40014800

0800965c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800965c:	b480      	push	{r7}
 800965e:	b087      	sub	sp, #28
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	6a1b      	ldr	r3, [r3, #32]
 800966a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6a1b      	ldr	r3, [r3, #32]
 8009670:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	685b      	ldr	r3, [r3, #4]
 800967c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	69db      	ldr	r3, [r3, #28]
 8009682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4b24      	ldr	r3, [pc, #144]	@ (8009718 <TIM_OC4_SetConfig+0xbc>)
 8009688:	4013      	ands	r3, r2
 800968a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009692:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	021b      	lsls	r3, r3, #8
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80096a0:	693b      	ldr	r3, [r7, #16]
 80096a2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80096a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096a8:	683b      	ldr	r3, [r7, #0]
 80096aa:	689b      	ldr	r3, [r3, #8]
 80096ac:	031b      	lsls	r3, r3, #12
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a19      	ldr	r2, [pc, #100]	@ (800971c <TIM_OC4_SetConfig+0xc0>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d00f      	beq.n	80096dc <TIM_OC4_SetConfig+0x80>
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	4a18      	ldr	r2, [pc, #96]	@ (8009720 <TIM_OC4_SetConfig+0xc4>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d00b      	beq.n	80096dc <TIM_OC4_SetConfig+0x80>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	4a17      	ldr	r2, [pc, #92]	@ (8009724 <TIM_OC4_SetConfig+0xc8>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d007      	beq.n	80096dc <TIM_OC4_SetConfig+0x80>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	4a16      	ldr	r2, [pc, #88]	@ (8009728 <TIM_OC4_SetConfig+0xcc>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d003      	beq.n	80096dc <TIM_OC4_SetConfig+0x80>
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	4a15      	ldr	r2, [pc, #84]	@ (800972c <TIM_OC4_SetConfig+0xd0>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d109      	bne.n	80096f0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	695b      	ldr	r3, [r3, #20]
 80096e8:	019b      	lsls	r3, r3, #6
 80096ea:	697a      	ldr	r2, [r7, #20]
 80096ec:	4313      	orrs	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	685a      	ldr	r2, [r3, #4]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	693a      	ldr	r2, [r7, #16]
 8009708:	621a      	str	r2, [r3, #32]
}
 800970a:	bf00      	nop
 800970c:	371c      	adds	r7, #28
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	feff8fff 	.word	0xfeff8fff
 800971c:	40010000 	.word	0x40010000
 8009720:	40010400 	.word	0x40010400
 8009724:	40014000 	.word	0x40014000
 8009728:	40014400 	.word	0x40014400
 800972c:	40014800 	.word	0x40014800

08009730 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009730:	b480      	push	{r7}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
 8009738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6a1b      	ldr	r3, [r3, #32]
 800973e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	6a1b      	ldr	r3, [r3, #32]
 8009744:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4b21      	ldr	r3, [pc, #132]	@ (80097e0 <TIM_OC5_SetConfig+0xb0>)
 800975c:	4013      	ands	r3, r2
 800975e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	68fa      	ldr	r2, [r7, #12]
 8009766:	4313      	orrs	r3, r2
 8009768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	041b      	lsls	r3, r3, #16
 8009778:	693a      	ldr	r2, [r7, #16]
 800977a:	4313      	orrs	r3, r2
 800977c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4a18      	ldr	r2, [pc, #96]	@ (80097e4 <TIM_OC5_SetConfig+0xb4>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d00f      	beq.n	80097a6 <TIM_OC5_SetConfig+0x76>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	4a17      	ldr	r2, [pc, #92]	@ (80097e8 <TIM_OC5_SetConfig+0xb8>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d00b      	beq.n	80097a6 <TIM_OC5_SetConfig+0x76>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	4a16      	ldr	r2, [pc, #88]	@ (80097ec <TIM_OC5_SetConfig+0xbc>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d007      	beq.n	80097a6 <TIM_OC5_SetConfig+0x76>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a15      	ldr	r2, [pc, #84]	@ (80097f0 <TIM_OC5_SetConfig+0xc0>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_OC5_SetConfig+0x76>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a14      	ldr	r2, [pc, #80]	@ (80097f4 <TIM_OC5_SetConfig+0xc4>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d109      	bne.n	80097ba <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80097ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	695b      	ldr	r3, [r3, #20]
 80097b2:	021b      	lsls	r3, r3, #8
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	697a      	ldr	r2, [r7, #20]
 80097be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	685a      	ldr	r2, [r3, #4]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	693a      	ldr	r2, [r7, #16]
 80097d2:	621a      	str	r2, [r3, #32]
}
 80097d4:	bf00      	nop
 80097d6:	371c      	adds	r7, #28
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr
 80097e0:	fffeff8f 	.word	0xfffeff8f
 80097e4:	40010000 	.word	0x40010000
 80097e8:	40010400 	.word	0x40010400
 80097ec:	40014000 	.word	0x40014000
 80097f0:	40014400 	.word	0x40014400
 80097f4:	40014800 	.word	0x40014800

080097f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b087      	sub	sp, #28
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a1b      	ldr	r3, [r3, #32]
 8009806:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6a1b      	ldr	r3, [r3, #32]
 800980c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800981e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009820:	68fa      	ldr	r2, [r7, #12]
 8009822:	4b22      	ldr	r3, [pc, #136]	@ (80098ac <TIM_OC6_SetConfig+0xb4>)
 8009824:	4013      	ands	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	4313      	orrs	r3, r2
 8009832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800983a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	689b      	ldr	r3, [r3, #8]
 8009840:	051b      	lsls	r3, r3, #20
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	4313      	orrs	r3, r2
 8009846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a19      	ldr	r2, [pc, #100]	@ (80098b0 <TIM_OC6_SetConfig+0xb8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00f      	beq.n	8009870 <TIM_OC6_SetConfig+0x78>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a18      	ldr	r2, [pc, #96]	@ (80098b4 <TIM_OC6_SetConfig+0xbc>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00b      	beq.n	8009870 <TIM_OC6_SetConfig+0x78>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a17      	ldr	r2, [pc, #92]	@ (80098b8 <TIM_OC6_SetConfig+0xc0>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <TIM_OC6_SetConfig+0x78>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a16      	ldr	r2, [pc, #88]	@ (80098bc <TIM_OC6_SetConfig+0xc4>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_OC6_SetConfig+0x78>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a15      	ldr	r2, [pc, #84]	@ (80098c0 <TIM_OC6_SetConfig+0xc8>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d109      	bne.n	8009884 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009876:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	695b      	ldr	r3, [r3, #20]
 800987c:	029b      	lsls	r3, r3, #10
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4313      	orrs	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	697a      	ldr	r2, [r7, #20]
 8009888:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	68fa      	ldr	r2, [r7, #12]
 800988e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685a      	ldr	r2, [r3, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	621a      	str	r2, [r3, #32]
}
 800989e:	bf00      	nop
 80098a0:	371c      	adds	r7, #28
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
 80098aa:	bf00      	nop
 80098ac:	feff8fff 	.word	0xfeff8fff
 80098b0:	40010000 	.word	0x40010000
 80098b4:	40010400 	.word	0x40010400
 80098b8:	40014000 	.word	0x40014000
 80098bc:	40014400 	.word	0x40014400
 80098c0:	40014800 	.word	0x40014800

080098c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b087      	sub	sp, #28
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	60f8      	str	r0, [r7, #12]
 80098cc:	60b9      	str	r1, [r7, #8]
 80098ce:	607a      	str	r2, [r7, #4]
 80098d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	6a1b      	ldr	r3, [r3, #32]
 80098d6:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	6a1b      	ldr	r3, [r3, #32]
 80098dc:	f023 0201 	bic.w	r2, r3, #1
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	699b      	ldr	r3, [r3, #24]
 80098e8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	4a28      	ldr	r2, [pc, #160]	@ (8009990 <TIM_TI1_SetConfig+0xcc>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d01b      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098f8:	d017      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	4a25      	ldr	r2, [pc, #148]	@ (8009994 <TIM_TI1_SetConfig+0xd0>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d013      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	4a24      	ldr	r2, [pc, #144]	@ (8009998 <TIM_TI1_SetConfig+0xd4>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00f      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	4a23      	ldr	r2, [pc, #140]	@ (800999c <TIM_TI1_SetConfig+0xd8>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d00b      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	4a22      	ldr	r2, [pc, #136]	@ (80099a0 <TIM_TI1_SetConfig+0xdc>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d007      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	4a21      	ldr	r2, [pc, #132]	@ (80099a4 <TIM_TI1_SetConfig+0xe0>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d003      	beq.n	800992a <TIM_TI1_SetConfig+0x66>
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	4a20      	ldr	r2, [pc, #128]	@ (80099a8 <TIM_TI1_SetConfig+0xe4>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d101      	bne.n	800992e <TIM_TI1_SetConfig+0x6a>
 800992a:	2301      	movs	r3, #1
 800992c:	e000      	b.n	8009930 <TIM_TI1_SetConfig+0x6c>
 800992e:	2300      	movs	r3, #0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d008      	beq.n	8009946 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009934:	697b      	ldr	r3, [r7, #20]
 8009936:	f023 0303 	bic.w	r3, r3, #3
 800993a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	4313      	orrs	r3, r2
 8009942:	617b      	str	r3, [r7, #20]
 8009944:	e003      	b.n	800994e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	f043 0301 	orr.w	r3, r3, #1
 800994c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009954:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	011b      	lsls	r3, r3, #4
 800995a:	b2db      	uxtb	r3, r3
 800995c:	697a      	ldr	r2, [r7, #20]
 800995e:	4313      	orrs	r3, r2
 8009960:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f023 030a 	bic.w	r3, r3, #10
 8009968:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	f003 030a 	and.w	r3, r3, #10
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	4313      	orrs	r3, r2
 8009974:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	697a      	ldr	r2, [r7, #20]
 800997a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	693a      	ldr	r2, [r7, #16]
 8009980:	621a      	str	r2, [r3, #32]
}
 8009982:	bf00      	nop
 8009984:	371c      	adds	r7, #28
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr
 800998e:	bf00      	nop
 8009990:	40010000 	.word	0x40010000
 8009994:	40000400 	.word	0x40000400
 8009998:	40000800 	.word	0x40000800
 800999c:	40000c00 	.word	0x40000c00
 80099a0:	40010400 	.word	0x40010400
 80099a4:	40001800 	.word	0x40001800
 80099a8:	40014000 	.word	0x40014000

080099ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b087      	sub	sp, #28
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	6a1b      	ldr	r3, [r3, #32]
 80099bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	6a1b      	ldr	r3, [r3, #32]
 80099c2:	f023 0201 	bic.w	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	699b      	ldr	r3, [r3, #24]
 80099ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80099d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	011b      	lsls	r3, r3, #4
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80099e2:	697b      	ldr	r3, [r7, #20]
 80099e4:	f023 030a 	bic.w	r3, r3, #10
 80099e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	68bb      	ldr	r3, [r7, #8]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	697a      	ldr	r2, [r7, #20]
 80099fc:	621a      	str	r2, [r3, #32]
}
 80099fe:	bf00      	nop
 8009a00:	371c      	adds	r7, #28
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr

08009a0a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009a0a:	b480      	push	{r7}
 8009a0c:	b087      	sub	sp, #28
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	607a      	str	r2, [r7, #4]
 8009a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6a1b      	ldr	r3, [r3, #32]
 8009a1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	f023 0210 	bic.w	r2, r3, #16
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	021b      	lsls	r3, r3, #8
 8009a3c:	693a      	ldr	r2, [r7, #16]
 8009a3e:	4313      	orrs	r3, r2
 8009a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009a42:	693b      	ldr	r3, [r7, #16]
 8009a44:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009a48:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	031b      	lsls	r3, r3, #12
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	693a      	ldr	r2, [r7, #16]
 8009a52:	4313      	orrs	r3, r2
 8009a54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009a5c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	011b      	lsls	r3, r3, #4
 8009a62:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8009a66:	697a      	ldr	r2, [r7, #20]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	693a      	ldr	r2, [r7, #16]
 8009a70:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	621a      	str	r2, [r3, #32]
}
 8009a78:	bf00      	nop
 8009a7a:	371c      	adds	r7, #28
 8009a7c:	46bd      	mov	sp, r7
 8009a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a82:	4770      	bx	lr

08009a84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	60b9      	str	r1, [r7, #8]
 8009a8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6a1b      	ldr	r3, [r3, #32]
 8009a94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	f023 0210 	bic.w	r2, r3, #16
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009aae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	031b      	lsls	r3, r3, #12
 8009ab4:	693a      	ldr	r2, [r7, #16]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009ac0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	697a      	ldr	r2, [r7, #20]
 8009ac8:	4313      	orrs	r3, r2
 8009aca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	693a      	ldr	r2, [r7, #16]
 8009ad0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	621a      	str	r2, [r3, #32]
}
 8009ad8:	bf00      	nop
 8009ada:	371c      	adds	r7, #28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b087      	sub	sp, #28
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
 8009af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	6a1b      	ldr	r3, [r3, #32]
 8009af6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	6a1b      	ldr	r3, [r3, #32]
 8009afc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	69db      	ldr	r3, [r3, #28]
 8009b08:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	f023 0303 	bic.w	r3, r3, #3
 8009b10:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009b12:	693a      	ldr	r2, [r7, #16]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009b20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	011b      	lsls	r3, r3, #4
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	693a      	ldr	r2, [r7, #16]
 8009b2a:	4313      	orrs	r3, r2
 8009b2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8009b34:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	021b      	lsls	r3, r3, #8
 8009b3a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8009b3e:	697a      	ldr	r2, [r7, #20]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	693a      	ldr	r2, [r7, #16]
 8009b48:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	621a      	str	r2, [r3, #32]
}
 8009b50:	bf00      	nop
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b087      	sub	sp, #28
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	69db      	ldr	r3, [r3, #28]
 8009b80:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009b88:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	4313      	orrs	r3, r2
 8009b92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009b9a:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	031b      	lsls	r3, r3, #12
 8009ba0:	b29b      	uxth	r3, r3
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009bae:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	031b      	lsls	r3, r3, #12
 8009bb4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8009bb8:	697a      	ldr	r2, [r7, #20]
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	697a      	ldr	r2, [r7, #20]
 8009bc8:	621a      	str	r2, [r3, #32]
}
 8009bca:	bf00      	nop
 8009bcc:	371c      	adds	r7, #28
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd4:	4770      	bx	lr
	...

08009bd8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009bd8:	b480      	push	{r7}
 8009bda:	b085      	sub	sp, #20
 8009bdc:	af00      	add	r7, sp, #0
 8009bde:	6078      	str	r0, [r7, #4]
 8009be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	689b      	ldr	r3, [r3, #8]
 8009be6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	4b09      	ldr	r3, [pc, #36]	@ (8009c10 <TIM_ITRx_SetConfig+0x38>)
 8009bec:	4013      	ands	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009bf0:	683a      	ldr	r2, [r7, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	f043 0307 	orr.w	r3, r3, #7
 8009bfa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	68fa      	ldr	r2, [r7, #12]
 8009c00:	609a      	str	r2, [r3, #8]
}
 8009c02:	bf00      	nop
 8009c04:	3714      	adds	r7, #20
 8009c06:	46bd      	mov	sp, r7
 8009c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0c:	4770      	bx	lr
 8009c0e:	bf00      	nop
 8009c10:	ffcfff8f 	.word	0xffcfff8f

08009c14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	60f8      	str	r0, [r7, #12]
 8009c1c:	60b9      	str	r1, [r7, #8]
 8009c1e:	607a      	str	r2, [r7, #4]
 8009c20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	689b      	ldr	r3, [r3, #8]
 8009c26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009c2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	021a      	lsls	r2, r3, #8
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	431a      	orrs	r2, r3
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	697a      	ldr	r2, [r7, #20]
 8009c46:	609a      	str	r2, [r3, #8]
}
 8009c48:	bf00      	nop
 8009c4a:	371c      	adds	r7, #28
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009c54:	b480      	push	{r7}
 8009c56:	b087      	sub	sp, #28
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	60f8      	str	r0, [r7, #12]
 8009c5c:	60b9      	str	r1, [r7, #8]
 8009c5e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f003 031f 	and.w	r3, r3, #31
 8009c66:	2201      	movs	r2, #1
 8009c68:	fa02 f303 	lsl.w	r3, r2, r3
 8009c6c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	6a1a      	ldr	r2, [r3, #32]
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	43db      	mvns	r3, r3
 8009c76:	401a      	ands	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	6a1a      	ldr	r2, [r3, #32]
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	f003 031f 	and.w	r3, r3, #31
 8009c86:	6879      	ldr	r1, [r7, #4]
 8009c88:	fa01 f303 	lsl.w	r3, r1, r3
 8009c8c:	431a      	orrs	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	621a      	str	r2, [r3, #32]
}
 8009c92:	bf00      	nop
 8009c94:	371c      	adds	r7, #28
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
	...

08009ca0 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
 8009ca8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d109      	bne.n	8009cc4 <HAL_TIMEx_PWMN_Start+0x24>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	bf14      	ite	ne
 8009cbc:	2301      	movne	r3, #1
 8009cbe:	2300      	moveq	r3, #0
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	e022      	b.n	8009d0a <HAL_TIMEx_PWMN_Start+0x6a>
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	2b04      	cmp	r3, #4
 8009cc8:	d109      	bne.n	8009cde <HAL_TIMEx_PWMN_Start+0x3e>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009cd0:	b2db      	uxtb	r3, r3
 8009cd2:	2b01      	cmp	r3, #1
 8009cd4:	bf14      	ite	ne
 8009cd6:	2301      	movne	r3, #1
 8009cd8:	2300      	moveq	r3, #0
 8009cda:	b2db      	uxtb	r3, r3
 8009cdc:	e015      	b.n	8009d0a <HAL_TIMEx_PWMN_Start+0x6a>
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	2b08      	cmp	r3, #8
 8009ce2:	d109      	bne.n	8009cf8 <HAL_TIMEx_PWMN_Start+0x58>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	bf14      	ite	ne
 8009cf0:	2301      	movne	r3, #1
 8009cf2:	2300      	moveq	r3, #0
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	e008      	b.n	8009d0a <HAL_TIMEx_PWMN_Start+0x6a>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e073      	b.n	8009dfa <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <HAL_TIMEx_PWMN_Start+0x82>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d20:	e013      	b.n	8009d4a <HAL_TIMEx_PWMN_Start+0xaa>
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	2b04      	cmp	r3, #4
 8009d26:	d104      	bne.n	8009d32 <HAL_TIMEx_PWMN_Start+0x92>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d30:	e00b      	b.n	8009d4a <HAL_TIMEx_PWMN_Start+0xaa>
 8009d32:	683b      	ldr	r3, [r7, #0]
 8009d34:	2b08      	cmp	r3, #8
 8009d36:	d104      	bne.n	8009d42 <HAL_TIMEx_PWMN_Start+0xa2>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2202      	movs	r2, #2
 8009d3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8009d40:	e003      	b.n	8009d4a <HAL_TIMEx_PWMN_Start+0xaa>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	2204      	movs	r2, #4
 8009d50:	6839      	ldr	r1, [r7, #0]
 8009d52:	4618      	mov	r0, r3
 8009d54:	f000 f990 	bl	800a078 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009d66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	4a25      	ldr	r2, [pc, #148]	@ (8009e04 <HAL_TIMEx_PWMN_Start+0x164>)
 8009d6e:	4293      	cmp	r3, r2
 8009d70:	d022      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d7a:	d01d      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	4a21      	ldr	r2, [pc, #132]	@ (8009e08 <HAL_TIMEx_PWMN_Start+0x168>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d018      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a20      	ldr	r2, [pc, #128]	@ (8009e0c <HAL_TIMEx_PWMN_Start+0x16c>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d013      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4a1e      	ldr	r2, [pc, #120]	@ (8009e10 <HAL_TIMEx_PWMN_Start+0x170>)
 8009d96:	4293      	cmp	r3, r2
 8009d98:	d00e      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	4a1d      	ldr	r2, [pc, #116]	@ (8009e14 <HAL_TIMEx_PWMN_Start+0x174>)
 8009da0:	4293      	cmp	r3, r2
 8009da2:	d009      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a1b      	ldr	r2, [pc, #108]	@ (8009e18 <HAL_TIMEx_PWMN_Start+0x178>)
 8009daa:	4293      	cmp	r3, r2
 8009dac:	d004      	beq.n	8009db8 <HAL_TIMEx_PWMN_Start+0x118>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a1a      	ldr	r2, [pc, #104]	@ (8009e1c <HAL_TIMEx_PWMN_Start+0x17c>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d115      	bne.n	8009de4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	4b18      	ldr	r3, [pc, #96]	@ (8009e20 <HAL_TIMEx_PWMN_Start+0x180>)
 8009dc0:	4013      	ands	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	2b06      	cmp	r3, #6
 8009dc8:	d015      	beq.n	8009df6 <HAL_TIMEx_PWMN_Start+0x156>
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009dd0:	d011      	beq.n	8009df6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f042 0201 	orr.w	r2, r2, #1
 8009de0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009de2:	e008      	b.n	8009df6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0201 	orr.w	r2, r2, #1
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e000      	b.n	8009df8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009df6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009df8:	2300      	movs	r3, #0
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	3710      	adds	r7, #16
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	bd80      	pop	{r7, pc}
 8009e02:	bf00      	nop
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40000400 	.word	0x40000400
 8009e0c:	40000800 	.word	0x40000800
 8009e10:	40000c00 	.word	0x40000c00
 8009e14:	40010400 	.word	0x40010400
 8009e18:	40001800 	.word	0x40001800
 8009e1c:	40014000 	.word	0x40014000
 8009e20:	00010007 	.word	0x00010007

08009e24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009e24:	b480      	push	{r7}
 8009e26:	b085      	sub	sp, #20
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009e34:	2b01      	cmp	r3, #1
 8009e36:	d101      	bne.n	8009e3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009e38:	2302      	movs	r3, #2
 8009e3a:	e06d      	b.n	8009f18 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2201      	movs	r2, #1
 8009e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	685b      	ldr	r3, [r3, #4]
 8009e52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	689b      	ldr	r3, [r3, #8]
 8009e5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a30      	ldr	r2, [pc, #192]	@ (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d004      	beq.n	8009e70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a2f      	ldr	r2, [pc, #188]	@ (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d108      	bne.n	8009e82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	685b      	ldr	r3, [r3, #4]
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	68fa      	ldr	r2, [r7, #12]
 8009e9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a20      	ldr	r2, [pc, #128]	@ (8009f24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d022      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009eae:	d01d      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8009f2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d018      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a1c      	ldr	r2, [pc, #112]	@ (8009f30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d013      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a1a      	ldr	r2, [pc, #104]	@ (8009f34 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00e      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a15      	ldr	r2, [pc, #84]	@ (8009f28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d009      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a16      	ldr	r2, [pc, #88]	@ (8009f38 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d004      	beq.n	8009eec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a15      	ldr	r2, [pc, #84]	@ (8009f3c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d10c      	bne.n	8009f06 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	4313      	orrs	r3, r2
 8009efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009f16:	2300      	movs	r3, #0
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	40010000 	.word	0x40010000
 8009f28:	40010400 	.word	0x40010400
 8009f2c:	40000400 	.word	0x40000400
 8009f30:	40000800 	.word	0x40000800
 8009f34:	40000c00 	.word	0x40000c00
 8009f38:	40001800 	.word	0x40001800
 8009f3c:	40014000 	.word	0x40014000

08009f40 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f54:	2b01      	cmp	r3, #1
 8009f56:	d101      	bne.n	8009f5c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009f58:	2302      	movs	r3, #2
 8009f5a:	e065      	b.n	800a028 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	68db      	ldr	r3, [r3, #12]
 8009f6e:	4313      	orrs	r3, r2
 8009f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	4313      	orrs	r3, r2
 8009f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	685b      	ldr	r3, [r3, #4]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	4313      	orrs	r3, r2
 8009f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	4313      	orrs	r3, r2
 8009fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	695b      	ldr	r3, [r3, #20]
 8009fb4:	4313      	orrs	r3, r2
 8009fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	699b      	ldr	r3, [r3, #24]
 8009fd0:	041b      	lsls	r3, r3, #16
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a16      	ldr	r2, [pc, #88]	@ (800a034 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d004      	beq.n	8009fea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a14      	ldr	r2, [pc, #80]	@ (800a038 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d115      	bne.n	800a016 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff4:	051b      	lsls	r3, r3, #20
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	69db      	ldr	r3, [r3, #28]
 800a004:	4313      	orrs	r3, r2
 800a006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	6a1b      	ldr	r3, [r3, #32]
 800a012:	4313      	orrs	r3, r2
 800a014:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2200      	movs	r2, #0
 800a022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	40010000 	.word	0x40010000
 800a038:	40010400 	.word	0x40010400

0800a03c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a044:	bf00      	nop
 800a046:	370c      	adds	r7, #12
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a050:	b480      	push	{r7}
 800a052:	b083      	sub	sp, #12
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a058:	bf00      	nop
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr

0800a064 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	60f8      	str	r0, [r7, #12]
 800a080:	60b9      	str	r1, [r7, #8]
 800a082:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f003 030f 	and.w	r3, r3, #15
 800a08a:	2204      	movs	r2, #4
 800a08c:	fa02 f303 	lsl.w	r3, r2, r3
 800a090:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	6a1a      	ldr	r2, [r3, #32]
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	43db      	mvns	r3, r3
 800a09a:	401a      	ands	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	6a1a      	ldr	r2, [r3, #32]
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	f003 030f 	and.w	r3, r3, #15
 800a0aa:	6879      	ldr	r1, [r7, #4]
 800a0ac:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	621a      	str	r2, [r3, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	371c      	adds	r7, #28
 800a0ba:	46bd      	mov	sp, r7
 800a0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c0:	4770      	bx	lr

0800a0c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b082      	sub	sp, #8
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d101      	bne.n	800a0d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0d0:	2301      	movs	r3, #1
 800a0d2:	e042      	b.n	800a15a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d106      	bne.n	800a0ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7f7 fd18 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2224      	movs	r2, #36	@ 0x24
 800a0f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f022 0201 	bic.w	r2, r2, #1
 800a102:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f001 fac9 	bl	800b6a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fd5e 	bl	800abd4 <UART_SetConfig>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d101      	bne.n	800a122 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a11e:	2301      	movs	r3, #1
 800a120:	e01b      	b.n	800a15a <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a130:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	689a      	ldr	r2, [r3, #8]
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a140:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	681a      	ldr	r2, [r3, #0]
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	f042 0201 	orr.w	r2, r2, #1
 800a150:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a152:	6878      	ldr	r0, [r7, #4]
 800a154:	f001 fb48 	bl	800b7e8 <UART_CheckIdleState>
 800a158:	4603      	mov	r3, r0
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	3708      	adds	r7, #8
 800a15e:	46bd      	mov	sp, r7
 800a160:	bd80      	pop	{r7, pc}

0800a162 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b08a      	sub	sp, #40	@ 0x28
 800a166:	af02      	add	r7, sp, #8
 800a168:	60f8      	str	r0, [r7, #12]
 800a16a:	60b9      	str	r1, [r7, #8]
 800a16c:	603b      	str	r3, [r7, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a178:	2b20      	cmp	r3, #32
 800a17a:	d17b      	bne.n	800a274 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d002      	beq.n	800a188 <HAL_UART_Transmit+0x26>
 800a182:	88fb      	ldrh	r3, [r7, #6]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d101      	bne.n	800a18c <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e074      	b.n	800a276 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	2200      	movs	r2, #0
 800a190:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2221      	movs	r2, #33	@ 0x21
 800a198:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a19c:	f7f8 f866 	bl	800226c <HAL_GetTick>
 800a1a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	88fa      	ldrh	r2, [r7, #6]
 800a1a6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	88fa      	ldrh	r2, [r7, #6]
 800a1ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1ba:	d108      	bne.n	800a1ce <HAL_UART_Transmit+0x6c>
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	691b      	ldr	r3, [r3, #16]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d104      	bne.n	800a1ce <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	61bb      	str	r3, [r7, #24]
 800a1cc:	e003      	b.n	800a1d6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a1d6:	e030      	b.n	800a23a <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	9300      	str	r3, [sp, #0]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2180      	movs	r1, #128	@ 0x80
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f001 fbaa 	bl	800b93c <UART_WaitOnFlagUntilTimeout>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d005      	beq.n	800a1fa <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2220      	movs	r2, #32
 800a1f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e03d      	b.n	800a276 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d10b      	bne.n	800a218 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	881b      	ldrh	r3, [r3, #0]
 800a204:	461a      	mov	r2, r3
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a20e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	3302      	adds	r3, #2
 800a214:	61bb      	str	r3, [r7, #24]
 800a216:	e007      	b.n	800a228 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a218:	69fb      	ldr	r3, [r7, #28]
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a222:	69fb      	ldr	r3, [r7, #28]
 800a224:	3301      	adds	r3, #1
 800a226:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a22e:	b29b      	uxth	r3, r3
 800a230:	3b01      	subs	r3, #1
 800a232:	b29a      	uxth	r2, r3
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a240:	b29b      	uxth	r3, r3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d1c8      	bne.n	800a1d8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	9300      	str	r3, [sp, #0]
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	2200      	movs	r2, #0
 800a24e:	2140      	movs	r1, #64	@ 0x40
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f001 fb73 	bl	800b93c <UART_WaitOnFlagUntilTimeout>
 800a256:	4603      	mov	r3, r0
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2220      	movs	r2, #32
 800a260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e006      	b.n	800a276 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2220      	movs	r2, #32
 800a26c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	e000      	b.n	800a276 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a274:	2302      	movs	r3, #2
  }
}
 800a276:	4618      	mov	r0, r3
 800a278:	3720      	adds	r7, #32
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}

0800a27e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a27e:	b580      	push	{r7, lr}
 800a280:	b08a      	sub	sp, #40	@ 0x28
 800a282:	af02      	add	r7, sp, #8
 800a284:	60f8      	str	r0, [r7, #12]
 800a286:	60b9      	str	r1, [r7, #8]
 800a288:	603b      	str	r3, [r7, #0]
 800a28a:	4613      	mov	r3, r2
 800a28c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a294:	2b20      	cmp	r3, #32
 800a296:	f040 80b5 	bne.w	800a404 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <HAL_UART_Receive+0x28>
 800a2a0:	88fb      	ldrh	r3, [r7, #6]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e0ad      	b.n	800a406 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2200      	movs	r2, #0
 800a2ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2222      	movs	r2, #34	@ 0x22
 800a2b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a2c0:	f7f7 ffd4 	bl	800226c <HAL_GetTick>
 800a2c4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	88fa      	ldrh	r2, [r7, #6]
 800a2ca:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	88fa      	ldrh	r2, [r7, #6]
 800a2d2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	689b      	ldr	r3, [r3, #8]
 800a2da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a2de:	d10e      	bne.n	800a2fe <HAL_UART_Receive+0x80>
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	691b      	ldr	r3, [r3, #16]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d105      	bne.n	800a2f4 <HAL_UART_Receive+0x76>
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800a2ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2f2:	e02d      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	22ff      	movs	r2, #255	@ 0xff
 800a2f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a2fc:	e028      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	689b      	ldr	r3, [r3, #8]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d10d      	bne.n	800a322 <HAL_UART_Receive+0xa4>
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	691b      	ldr	r3, [r3, #16]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d104      	bne.n	800a318 <HAL_UART_Receive+0x9a>
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	22ff      	movs	r2, #255	@ 0xff
 800a312:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a316:	e01b      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	227f      	movs	r2, #127	@ 0x7f
 800a31c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a320:	e016      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	689b      	ldr	r3, [r3, #8]
 800a326:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a32a:	d10d      	bne.n	800a348 <HAL_UART_Receive+0xca>
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	2b00      	cmp	r3, #0
 800a332:	d104      	bne.n	800a33e <HAL_UART_Receive+0xc0>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	227f      	movs	r2, #127	@ 0x7f
 800a338:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a33c:	e008      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	223f      	movs	r2, #63	@ 0x3f
 800a342:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800a346:	e003      	b.n	800a350 <HAL_UART_Receive+0xd2>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800a356:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a360:	d108      	bne.n	800a374 <HAL_UART_Receive+0xf6>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	691b      	ldr	r3, [r3, #16]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d104      	bne.n	800a374 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800a36a:	2300      	movs	r3, #0
 800a36c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	61bb      	str	r3, [r7, #24]
 800a372:	e003      	b.n	800a37c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a378:	2300      	movs	r3, #0
 800a37a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800a37c:	e036      	b.n	800a3ec <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	9300      	str	r3, [sp, #0]
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2200      	movs	r2, #0
 800a386:	2120      	movs	r1, #32
 800a388:	68f8      	ldr	r0, [r7, #12]
 800a38a:	f001 fad7 	bl	800b93c <UART_WaitOnFlagUntilTimeout>
 800a38e:	4603      	mov	r3, r0
 800a390:	2b00      	cmp	r3, #0
 800a392:	d005      	beq.n	800a3a0 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2220      	movs	r2, #32
 800a398:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e032      	b.n	800a406 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800a3a0:	69fb      	ldr	r3, [r7, #28]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10c      	bne.n	800a3c0 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	8a7b      	ldrh	r3, [r7, #18]
 800a3b0:	4013      	ands	r3, r2
 800a3b2:	b29a      	uxth	r2, r3
 800a3b4:	69bb      	ldr	r3, [r7, #24]
 800a3b6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	3302      	adds	r3, #2
 800a3bc:	61bb      	str	r3, [r7, #24]
 800a3be:	e00c      	b.n	800a3da <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3c6:	b2da      	uxtb	r2, r3
 800a3c8:	8a7b      	ldrh	r3, [r7, #18]
 800a3ca:	b2db      	uxtb	r3, r3
 800a3cc:	4013      	ands	r3, r2
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	69fb      	ldr	r3, [r7, #28]
 800a3d2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	3301      	adds	r3, #1
 800a3d8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	3b01      	subs	r3, #1
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1c2      	bne.n	800a37e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	2220      	movs	r2, #32
 800a3fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e000      	b.n	800a406 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800a404:	2302      	movs	r3, #2
  }
}
 800a406:	4618      	mov	r0, r3
 800a408:	3720      	adds	r7, #32
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
	...

0800a410 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b0ba      	sub	sp, #232	@ 0xe8
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	69db      	ldr	r3, [r3, #28]
 800a41e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689b      	ldr	r3, [r3, #8]
 800a432:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a436:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800a43a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800a43e:	4013      	ands	r3, r2
 800a440:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800a444:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d11b      	bne.n	800a484 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a450:	f003 0320 	and.w	r3, r3, #32
 800a454:	2b00      	cmp	r3, #0
 800a456:	d015      	beq.n	800a484 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a45c:	f003 0320 	and.w	r3, r3, #32
 800a460:	2b00      	cmp	r3, #0
 800a462:	d105      	bne.n	800a470 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a464:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a468:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	d009      	beq.n	800a484 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a474:	2b00      	cmp	r3, #0
 800a476:	f000 8377 	beq.w	800ab68 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	4798      	blx	r3
      }
      return;
 800a482:	e371      	b.n	800ab68 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a484:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800a488:	2b00      	cmp	r3, #0
 800a48a:	f000 8123 	beq.w	800a6d4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a48e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a492:	4b8d      	ldr	r3, [pc, #564]	@ (800a6c8 <HAL_UART_IRQHandler+0x2b8>)
 800a494:	4013      	ands	r3, r2
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a49a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800a49e:	4b8b      	ldr	r3, [pc, #556]	@ (800a6cc <HAL_UART_IRQHandler+0x2bc>)
 800a4a0:	4013      	ands	r3, r2
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	f000 8116 	beq.w	800a6d4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a4a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4ac:	f003 0301 	and.w	r3, r3, #1
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d011      	beq.n	800a4d8 <HAL_UART_IRQHandler+0xc8>
 800a4b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a4b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d00b      	beq.n	800a4d8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4ce:	f043 0201 	orr.w	r2, r3, #1
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a4dc:	f003 0302 	and.w	r3, r3, #2
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d011      	beq.n	800a508 <HAL_UART_IRQHandler+0xf8>
 800a4e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a4e8:	f003 0301 	and.w	r3, r3, #1
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d00b      	beq.n	800a508 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	2202      	movs	r2, #2
 800a4f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a4fe:	f043 0204 	orr.w	r2, r3, #4
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a50c:	f003 0304 	and.w	r3, r3, #4
 800a510:	2b00      	cmp	r3, #0
 800a512:	d011      	beq.n	800a538 <HAL_UART_IRQHandler+0x128>
 800a514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00b      	beq.n	800a538 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	2204      	movs	r2, #4
 800a526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a52e:	f043 0202 	orr.w	r2, r3, #2
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b00      	cmp	r3, #0
 800a542:	d017      	beq.n	800a574 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a548:	f003 0320 	and.w	r3, r3, #32
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d105      	bne.n	800a55c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a550:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800a554:	4b5c      	ldr	r3, [pc, #368]	@ (800a6c8 <HAL_UART_IRQHandler+0x2b8>)
 800a556:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00b      	beq.n	800a574 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	2208      	movs	r2, #8
 800a562:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a56a:	f043 0208 	orr.w	r2, r3, #8
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d012      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x196>
 800a580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a584:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d00c      	beq.n	800a5a6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a594:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a59c:	f043 0220 	orr.w	r2, r3, #32
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 82dd 	beq.w	800ab6c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a5b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a5b6:	f003 0320 	and.w	r3, r3, #32
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d013      	beq.n	800a5e6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a5be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a5c2:	f003 0320 	and.w	r3, r3, #32
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d105      	bne.n	800a5d6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a5ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800a5ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d007      	beq.n	800a5e6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d003      	beq.n	800a5e6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a5ec:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	689b      	ldr	r3, [r3, #8]
 800a5f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a5fa:	2b40      	cmp	r3, #64	@ 0x40
 800a5fc:	d005      	beq.n	800a60a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a5fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800a602:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a606:	2b00      	cmp	r3, #0
 800a608:	d054      	beq.n	800a6b4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	f001 faec 	bl	800bbe8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	689b      	ldr	r3, [r3, #8]
 800a616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a61a:	2b40      	cmp	r3, #64	@ 0x40
 800a61c:	d146      	bne.n	800a6ac <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	3308      	adds	r3, #8
 800a624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800a62c:	e853 3f00 	ldrex	r3, [r3]
 800a630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800a634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800a638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a63c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	3308      	adds	r3, #8
 800a646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800a64a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800a64e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800a656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800a65a:	e841 2300 	strex	r3, r2, [r1]
 800a65e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800a662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800a666:	2b00      	cmp	r3, #0
 800a668:	d1d9      	bne.n	800a61e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a670:	2b00      	cmp	r3, #0
 800a672:	d017      	beq.n	800a6a4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a67a:	4a15      	ldr	r2, [pc, #84]	@ (800a6d0 <HAL_UART_IRQHandler+0x2c0>)
 800a67c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a684:	4618      	mov	r0, r3
 800a686:	f7f8 ffe1 	bl	800364c <HAL_DMA_Abort_IT>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d019      	beq.n	800a6c4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800a69e:	4610      	mov	r0, r2
 800a6a0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6a2:	e00f      	b.n	800a6c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fa8b 	bl	800abc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6aa:	e00b      	b.n	800a6c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f000 fa87 	bl	800abc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6b2:	e007      	b.n	800a6c4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f000 fa83 	bl	800abc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800a6c2:	e253      	b.n	800ab6c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a6c4:	bf00      	nop
    return;
 800a6c6:	e251      	b.n	800ab6c <HAL_UART_IRQHandler+0x75c>
 800a6c8:	10000001 	.word	0x10000001
 800a6cc:	04000120 	.word	0x04000120
 800a6d0:	0800be9b 	.word	0x0800be9b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	f040 81e7 	bne.w	800aaac <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a6de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800a6e2:	f003 0310 	and.w	r3, r3, #16
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	f000 81e0 	beq.w	800aaac <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a6ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800a6f0:	f003 0310 	and.w	r3, r3, #16
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f000 81d9 	beq.w	800aaac <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	2210      	movs	r2, #16
 800a700:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	689b      	ldr	r3, [r3, #8]
 800a708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a70c:	2b40      	cmp	r3, #64	@ 0x40
 800a70e:	f040 8151 	bne.w	800a9b4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	4a96      	ldr	r2, [pc, #600]	@ (800a974 <HAL_UART_IRQHandler+0x564>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d068      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	4a93      	ldr	r2, [pc, #588]	@ (800a978 <HAL_UART_IRQHandler+0x568>)
 800a72a:	4293      	cmp	r3, r2
 800a72c:	d061      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a91      	ldr	r2, [pc, #580]	@ (800a97c <HAL_UART_IRQHandler+0x56c>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d05a      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a8e      	ldr	r2, [pc, #568]	@ (800a980 <HAL_UART_IRQHandler+0x570>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d053      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a8c      	ldr	r2, [pc, #560]	@ (800a984 <HAL_UART_IRQHandler+0x574>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d04c      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	4a89      	ldr	r2, [pc, #548]	@ (800a988 <HAL_UART_IRQHandler+0x578>)
 800a762:	4293      	cmp	r3, r2
 800a764:	d045      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	4a87      	ldr	r2, [pc, #540]	@ (800a98c <HAL_UART_IRQHandler+0x57c>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d03e      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	4a84      	ldr	r2, [pc, #528]	@ (800a990 <HAL_UART_IRQHandler+0x580>)
 800a77e:	4293      	cmp	r3, r2
 800a780:	d037      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a82      	ldr	r2, [pc, #520]	@ (800a994 <HAL_UART_IRQHandler+0x584>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d030      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a7f      	ldr	r2, [pc, #508]	@ (800a998 <HAL_UART_IRQHandler+0x588>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d029      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a7d      	ldr	r2, [pc, #500]	@ (800a99c <HAL_UART_IRQHandler+0x58c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d022      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	4a7a      	ldr	r2, [pc, #488]	@ (800a9a0 <HAL_UART_IRQHandler+0x590>)
 800a7b6:	4293      	cmp	r3, r2
 800a7b8:	d01b      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a78      	ldr	r2, [pc, #480]	@ (800a9a4 <HAL_UART_IRQHandler+0x594>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d014      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	4a75      	ldr	r2, [pc, #468]	@ (800a9a8 <HAL_UART_IRQHandler+0x598>)
 800a7d2:	4293      	cmp	r3, r2
 800a7d4:	d00d      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	4a73      	ldr	r2, [pc, #460]	@ (800a9ac <HAL_UART_IRQHandler+0x59c>)
 800a7e0:	4293      	cmp	r3, r2
 800a7e2:	d006      	beq.n	800a7f2 <HAL_UART_IRQHandler+0x3e2>
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	4a70      	ldr	r2, [pc, #448]	@ (800a9b0 <HAL_UART_IRQHandler+0x5a0>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d106      	bne.n	800a800 <HAL_UART_IRQHandler+0x3f0>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	e005      	b.n	800a80c <HAL_UART_IRQHandler+0x3fc>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a810:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800a814:	2b00      	cmp	r3, #0
 800a816:	f000 81ab 	beq.w	800ab70 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800a820:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a824:	429a      	cmp	r2, r3
 800a826:	f080 81a3 	bcs.w	800ab70 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800a830:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a83a:	69db      	ldr	r3, [r3, #28]
 800a83c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a840:	f000 8087 	beq.w	800a952 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a84c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800a850:	e853 3f00 	ldrex	r3, [r3]
 800a854:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800a858:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a85c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	461a      	mov	r2, r3
 800a86a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800a86e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800a872:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a876:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800a87a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800a886:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d1da      	bne.n	800a844 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	3308      	adds	r3, #8
 800a894:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a896:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a898:	e853 3f00 	ldrex	r3, [r3]
 800a89c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800a89e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a8a0:	f023 0301 	bic.w	r3, r3, #1
 800a8a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	3308      	adds	r3, #8
 800a8ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800a8b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a8b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800a8ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800a8be:	e841 2300 	strex	r3, r2, [r1]
 800a8c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800a8c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d1e1      	bne.n	800a88e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	3308      	adds	r3, #8
 800a8d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a8d4:	e853 3f00 	ldrex	r3, [r3]
 800a8d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800a8da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a8e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	3308      	adds	r3, #8
 800a8ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800a8ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a8f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800a8f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a8f6:	e841 2300 	strex	r3, r2, [r1]
 800a8fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800a8fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d1e3      	bne.n	800a8ca <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	2220      	movs	r2, #32
 800a906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	2200      	movs	r2, #0
 800a90e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a918:	e853 3f00 	ldrex	r3, [r3]
 800a91c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800a91e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a920:	f023 0310 	bic.w	r3, r3, #16
 800a924:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	461a      	mov	r2, r3
 800a92e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800a932:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a934:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a936:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800a938:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a93a:	e841 2300 	strex	r3, r2, [r1]
 800a93e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800a940:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a942:	2b00      	cmp	r3, #0
 800a944:	d1e4      	bne.n	800a910 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7f8 fb5f 	bl	8003010 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2202      	movs	r2, #2
 800a956:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a964:	b29b      	uxth	r3, r3
 800a966:	1ad3      	subs	r3, r2, r3
 800a968:	b29b      	uxth	r3, r3
 800a96a:	4619      	mov	r1, r3
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f7f6 fa3b 	bl	8000de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a972:	e0fd      	b.n	800ab70 <HAL_UART_IRQHandler+0x760>
 800a974:	40020010 	.word	0x40020010
 800a978:	40020028 	.word	0x40020028
 800a97c:	40020040 	.word	0x40020040
 800a980:	40020058 	.word	0x40020058
 800a984:	40020070 	.word	0x40020070
 800a988:	40020088 	.word	0x40020088
 800a98c:	400200a0 	.word	0x400200a0
 800a990:	400200b8 	.word	0x400200b8
 800a994:	40020410 	.word	0x40020410
 800a998:	40020428 	.word	0x40020428
 800a99c:	40020440 	.word	0x40020440
 800a9a0:	40020458 	.word	0x40020458
 800a9a4:	40020470 	.word	0x40020470
 800a9a8:	40020488 	.word	0x40020488
 800a9ac:	400204a0 	.word	0x400204a0
 800a9b0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	1ad3      	subs	r3, r2, r3
 800a9c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800a9ce:	b29b      	uxth	r3, r3
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	f000 80cf 	beq.w	800ab74 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800a9d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	f000 80ca 	beq.w	800ab74 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e8:	e853 3f00 	ldrex	r3, [r3]
 800a9ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a9ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9f0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a9f4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	461a      	mov	r2, r3
 800a9fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800aa02:	647b      	str	r3, [r7, #68]	@ 0x44
 800aa04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800aa08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800aa0a:	e841 2300 	strex	r3, r2, [r1]
 800aa0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800aa10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1e4      	bne.n	800a9e0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa20:	e853 3f00 	ldrex	r3, [r3]
 800aa24:	623b      	str	r3, [r7, #32]
   return(result);
 800aa26:	6a3a      	ldr	r2, [r7, #32]
 800aa28:	4b55      	ldr	r3, [pc, #340]	@ (800ab80 <HAL_UART_IRQHandler+0x770>)
 800aa2a:	4013      	ands	r3, r2
 800aa2c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	3308      	adds	r3, #8
 800aa36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800aa3a:	633a      	str	r2, [r7, #48]	@ 0x30
 800aa3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa3e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800aa40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa42:	e841 2300 	strex	r3, r2, [r1]
 800aa46:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d1e3      	bne.n	800aa16 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2220      	movs	r2, #32
 800aa52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2200      	movs	r2, #0
 800aa5a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2200      	movs	r2, #0
 800aa60:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	e853 3f00 	ldrex	r3, [r3]
 800aa6e:	60fb      	str	r3, [r7, #12]
   return(result);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	f023 0310 	bic.w	r3, r3, #16
 800aa76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800aa84:	61fb      	str	r3, [r7, #28]
 800aa86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa88:	69b9      	ldr	r1, [r7, #24]
 800aa8a:	69fa      	ldr	r2, [r7, #28]
 800aa8c:	e841 2300 	strex	r3, r2, [r1]
 800aa90:	617b      	str	r3, [r7, #20]
   return(result);
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d1e4      	bne.n	800aa62 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2202      	movs	r2, #2
 800aa9c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aa9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800aaa2:	4619      	mov	r1, r3
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f7f6 f99f 	bl	8000de8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800aaaa:	e063      	b.n	800ab74 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800aaac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d00e      	beq.n	800aad6 <HAL_UART_IRQHandler+0x6c6>
 800aab8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aabc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d008      	beq.n	800aad6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800aacc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	f001 fa24 	bl	800bf1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800aad4:	e051      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800aad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800aada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d014      	beq.n	800ab0c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800aae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800aae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d105      	bne.n	800aafa <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800aaee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800aaf2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d008      	beq.n	800ab0c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d03a      	beq.n	800ab78 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	4798      	blx	r3
    }
    return;
 800ab0a:	e035      	b.n	800ab78 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d009      	beq.n	800ab2c <HAL_UART_IRQHandler+0x71c>
 800ab18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d003      	beq.n	800ab2c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f9ce 	bl	800bec6 <UART_EndTransmit_IT>
    return;
 800ab2a:	e026      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ab2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab30:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d009      	beq.n	800ab4c <HAL_UART_IRQHandler+0x73c>
 800ab38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab3c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d003      	beq.n	800ab4c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f001 f9fd 	bl	800bf44 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab4a:	e016      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ab4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ab50:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d010      	beq.n	800ab7a <HAL_UART_IRQHandler+0x76a>
 800ab58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	da0c      	bge.n	800ab7a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f001 f9e5 	bl	800bf30 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ab66:	e008      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab68:	bf00      	nop
 800ab6a:	e006      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
    return;
 800ab6c:	bf00      	nop
 800ab6e:	e004      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab70:	bf00      	nop
 800ab72:	e002      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
      return;
 800ab74:	bf00      	nop
 800ab76:	e000      	b.n	800ab7a <HAL_UART_IRQHandler+0x76a>
    return;
 800ab78:	bf00      	nop
  }
}
 800ab7a:	37e8      	adds	r7, #232	@ 0xe8
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}
 800ab80:	effffffe 	.word	0xeffffffe

0800ab84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab84:	b480      	push	{r7}
 800ab86:	b083      	sub	sp, #12
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab8c:	bf00      	nop
 800ab8e:	370c      	adds	r7, #12
 800ab90:	46bd      	mov	sp, r7
 800ab92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab96:	4770      	bx	lr

0800ab98 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b083      	sub	sp, #12
 800ab9c:	af00      	add	r7, sp, #0
 800ab9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800aba0:	bf00      	nop
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800abac:	b480      	push	{r7}
 800abae:	b083      	sub	sp, #12
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800abb4:	bf00      	nop
 800abb6:	370c      	adds	r7, #12
 800abb8:	46bd      	mov	sp, r7
 800abba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbe:	4770      	bx	lr

0800abc0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abc0:	b480      	push	{r7}
 800abc2:	b083      	sub	sp, #12
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800abd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800abd8:	b092      	sub	sp, #72	@ 0x48
 800abda:	af00      	add	r7, sp, #0
 800abdc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	689a      	ldr	r2, [r3, #8]
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	691b      	ldr	r3, [r3, #16]
 800abec:	431a      	orrs	r2, r3
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	695b      	ldr	r3, [r3, #20]
 800abf2:	431a      	orrs	r2, r3
 800abf4:	697b      	ldr	r3, [r7, #20]
 800abf6:	69db      	ldr	r3, [r3, #28]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	4bbe      	ldr	r3, [pc, #760]	@ (800aefc <UART_SetConfig+0x328>)
 800ac04:	4013      	ands	r3, r2
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	6812      	ldr	r2, [r2, #0]
 800ac0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac0c:	430b      	orrs	r3, r1
 800ac0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ac10:	697b      	ldr	r3, [r7, #20]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	685b      	ldr	r3, [r3, #4]
 800ac16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	68da      	ldr	r2, [r3, #12]
 800ac1e:	697b      	ldr	r3, [r7, #20]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	430a      	orrs	r2, r1
 800ac24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ac26:	697b      	ldr	r3, [r7, #20]
 800ac28:	699b      	ldr	r3, [r3, #24]
 800ac2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ac2c:	697b      	ldr	r3, [r7, #20]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	4ab3      	ldr	r2, [pc, #716]	@ (800af00 <UART_SetConfig+0x32c>)
 800ac32:	4293      	cmp	r3, r2
 800ac34:	d004      	beq.n	800ac40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	6a1b      	ldr	r3, [r3, #32]
 800ac3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	689a      	ldr	r2, [r3, #8]
 800ac46:	4baf      	ldr	r3, [pc, #700]	@ (800af04 <UART_SetConfig+0x330>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	697a      	ldr	r2, [r7, #20]
 800ac4c:	6812      	ldr	r2, [r2, #0]
 800ac4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ac50:	430b      	orrs	r3, r1
 800ac52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac5a:	f023 010f 	bic.w	r1, r3, #15
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	430a      	orrs	r2, r1
 800ac68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4aa6      	ldr	r2, [pc, #664]	@ (800af08 <UART_SetConfig+0x334>)
 800ac70:	4293      	cmp	r3, r2
 800ac72:	d177      	bne.n	800ad64 <UART_SetConfig+0x190>
 800ac74:	4ba5      	ldr	r3, [pc, #660]	@ (800af0c <UART_SetConfig+0x338>)
 800ac76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ac78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ac7c:	2b28      	cmp	r3, #40	@ 0x28
 800ac7e:	d86d      	bhi.n	800ad5c <UART_SetConfig+0x188>
 800ac80:	a201      	add	r2, pc, #4	@ (adr r2, 800ac88 <UART_SetConfig+0xb4>)
 800ac82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac86:	bf00      	nop
 800ac88:	0800ad2d 	.word	0x0800ad2d
 800ac8c:	0800ad5d 	.word	0x0800ad5d
 800ac90:	0800ad5d 	.word	0x0800ad5d
 800ac94:	0800ad5d 	.word	0x0800ad5d
 800ac98:	0800ad5d 	.word	0x0800ad5d
 800ac9c:	0800ad5d 	.word	0x0800ad5d
 800aca0:	0800ad5d 	.word	0x0800ad5d
 800aca4:	0800ad5d 	.word	0x0800ad5d
 800aca8:	0800ad35 	.word	0x0800ad35
 800acac:	0800ad5d 	.word	0x0800ad5d
 800acb0:	0800ad5d 	.word	0x0800ad5d
 800acb4:	0800ad5d 	.word	0x0800ad5d
 800acb8:	0800ad5d 	.word	0x0800ad5d
 800acbc:	0800ad5d 	.word	0x0800ad5d
 800acc0:	0800ad5d 	.word	0x0800ad5d
 800acc4:	0800ad5d 	.word	0x0800ad5d
 800acc8:	0800ad3d 	.word	0x0800ad3d
 800accc:	0800ad5d 	.word	0x0800ad5d
 800acd0:	0800ad5d 	.word	0x0800ad5d
 800acd4:	0800ad5d 	.word	0x0800ad5d
 800acd8:	0800ad5d 	.word	0x0800ad5d
 800acdc:	0800ad5d 	.word	0x0800ad5d
 800ace0:	0800ad5d 	.word	0x0800ad5d
 800ace4:	0800ad5d 	.word	0x0800ad5d
 800ace8:	0800ad45 	.word	0x0800ad45
 800acec:	0800ad5d 	.word	0x0800ad5d
 800acf0:	0800ad5d 	.word	0x0800ad5d
 800acf4:	0800ad5d 	.word	0x0800ad5d
 800acf8:	0800ad5d 	.word	0x0800ad5d
 800acfc:	0800ad5d 	.word	0x0800ad5d
 800ad00:	0800ad5d 	.word	0x0800ad5d
 800ad04:	0800ad5d 	.word	0x0800ad5d
 800ad08:	0800ad4d 	.word	0x0800ad4d
 800ad0c:	0800ad5d 	.word	0x0800ad5d
 800ad10:	0800ad5d 	.word	0x0800ad5d
 800ad14:	0800ad5d 	.word	0x0800ad5d
 800ad18:	0800ad5d 	.word	0x0800ad5d
 800ad1c:	0800ad5d 	.word	0x0800ad5d
 800ad20:	0800ad5d 	.word	0x0800ad5d
 800ad24:	0800ad5d 	.word	0x0800ad5d
 800ad28:	0800ad55 	.word	0x0800ad55
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad32:	e222      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad34:	2304      	movs	r3, #4
 800ad36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad3a:	e21e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad3c:	2308      	movs	r3, #8
 800ad3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad42:	e21a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad44:	2310      	movs	r3, #16
 800ad46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad4a:	e216      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad4c:	2320      	movs	r3, #32
 800ad4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad52:	e212      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad54:	2340      	movs	r3, #64	@ 0x40
 800ad56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad5a:	e20e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad5c:	2380      	movs	r3, #128	@ 0x80
 800ad5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad62:	e20a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a69      	ldr	r2, [pc, #420]	@ (800af10 <UART_SetConfig+0x33c>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d130      	bne.n	800add0 <UART_SetConfig+0x1fc>
 800ad6e:	4b67      	ldr	r3, [pc, #412]	@ (800af0c <UART_SetConfig+0x338>)
 800ad70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ad72:	f003 0307 	and.w	r3, r3, #7
 800ad76:	2b05      	cmp	r3, #5
 800ad78:	d826      	bhi.n	800adc8 <UART_SetConfig+0x1f4>
 800ad7a:	a201      	add	r2, pc, #4	@ (adr r2, 800ad80 <UART_SetConfig+0x1ac>)
 800ad7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad80:	0800ad99 	.word	0x0800ad99
 800ad84:	0800ada1 	.word	0x0800ada1
 800ad88:	0800ada9 	.word	0x0800ada9
 800ad8c:	0800adb1 	.word	0x0800adb1
 800ad90:	0800adb9 	.word	0x0800adb9
 800ad94:	0800adc1 	.word	0x0800adc1
 800ad98:	2300      	movs	r3, #0
 800ad9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ad9e:	e1ec      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ada0:	2304      	movs	r3, #4
 800ada2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ada6:	e1e8      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ada8:	2308      	movs	r3, #8
 800adaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adae:	e1e4      	b.n	800b17a <UART_SetConfig+0x5a6>
 800adb0:	2310      	movs	r3, #16
 800adb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adb6:	e1e0      	b.n	800b17a <UART_SetConfig+0x5a6>
 800adb8:	2320      	movs	r3, #32
 800adba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adbe:	e1dc      	b.n	800b17a <UART_SetConfig+0x5a6>
 800adc0:	2340      	movs	r3, #64	@ 0x40
 800adc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adc6:	e1d8      	b.n	800b17a <UART_SetConfig+0x5a6>
 800adc8:	2380      	movs	r3, #128	@ 0x80
 800adca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800adce:	e1d4      	b.n	800b17a <UART_SetConfig+0x5a6>
 800add0:	697b      	ldr	r3, [r7, #20]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a4f      	ldr	r2, [pc, #316]	@ (800af14 <UART_SetConfig+0x340>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d130      	bne.n	800ae3c <UART_SetConfig+0x268>
 800adda:	4b4c      	ldr	r3, [pc, #304]	@ (800af0c <UART_SetConfig+0x338>)
 800addc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800adde:	f003 0307 	and.w	r3, r3, #7
 800ade2:	2b05      	cmp	r3, #5
 800ade4:	d826      	bhi.n	800ae34 <UART_SetConfig+0x260>
 800ade6:	a201      	add	r2, pc, #4	@ (adr r2, 800adec <UART_SetConfig+0x218>)
 800ade8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adec:	0800ae05 	.word	0x0800ae05
 800adf0:	0800ae0d 	.word	0x0800ae0d
 800adf4:	0800ae15 	.word	0x0800ae15
 800adf8:	0800ae1d 	.word	0x0800ae1d
 800adfc:	0800ae25 	.word	0x0800ae25
 800ae00:	0800ae2d 	.word	0x0800ae2d
 800ae04:	2300      	movs	r3, #0
 800ae06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae0a:	e1b6      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae0c:	2304      	movs	r3, #4
 800ae0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae12:	e1b2      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae14:	2308      	movs	r3, #8
 800ae16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae1a:	e1ae      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae1c:	2310      	movs	r3, #16
 800ae1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae22:	e1aa      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae24:	2320      	movs	r3, #32
 800ae26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae2a:	e1a6      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae2c:	2340      	movs	r3, #64	@ 0x40
 800ae2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae32:	e1a2      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae34:	2380      	movs	r3, #128	@ 0x80
 800ae36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae3a:	e19e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae3c:	697b      	ldr	r3, [r7, #20]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	4a35      	ldr	r2, [pc, #212]	@ (800af18 <UART_SetConfig+0x344>)
 800ae42:	4293      	cmp	r3, r2
 800ae44:	d130      	bne.n	800aea8 <UART_SetConfig+0x2d4>
 800ae46:	4b31      	ldr	r3, [pc, #196]	@ (800af0c <UART_SetConfig+0x338>)
 800ae48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae4a:	f003 0307 	and.w	r3, r3, #7
 800ae4e:	2b05      	cmp	r3, #5
 800ae50:	d826      	bhi.n	800aea0 <UART_SetConfig+0x2cc>
 800ae52:	a201      	add	r2, pc, #4	@ (adr r2, 800ae58 <UART_SetConfig+0x284>)
 800ae54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae58:	0800ae71 	.word	0x0800ae71
 800ae5c:	0800ae79 	.word	0x0800ae79
 800ae60:	0800ae81 	.word	0x0800ae81
 800ae64:	0800ae89 	.word	0x0800ae89
 800ae68:	0800ae91 	.word	0x0800ae91
 800ae6c:	0800ae99 	.word	0x0800ae99
 800ae70:	2300      	movs	r3, #0
 800ae72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae76:	e180      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae78:	2304      	movs	r3, #4
 800ae7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae7e:	e17c      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae80:	2308      	movs	r3, #8
 800ae82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae86:	e178      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae88:	2310      	movs	r3, #16
 800ae8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae8e:	e174      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae90:	2320      	movs	r3, #32
 800ae92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae96:	e170      	b.n	800b17a <UART_SetConfig+0x5a6>
 800ae98:	2340      	movs	r3, #64	@ 0x40
 800ae9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ae9e:	e16c      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aea0:	2380      	movs	r3, #128	@ 0x80
 800aea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aea6:	e168      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4a1b      	ldr	r2, [pc, #108]	@ (800af1c <UART_SetConfig+0x348>)
 800aeae:	4293      	cmp	r3, r2
 800aeb0:	d142      	bne.n	800af38 <UART_SetConfig+0x364>
 800aeb2:	4b16      	ldr	r3, [pc, #88]	@ (800af0c <UART_SetConfig+0x338>)
 800aeb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aeb6:	f003 0307 	and.w	r3, r3, #7
 800aeba:	2b05      	cmp	r3, #5
 800aebc:	d838      	bhi.n	800af30 <UART_SetConfig+0x35c>
 800aebe:	a201      	add	r2, pc, #4	@ (adr r2, 800aec4 <UART_SetConfig+0x2f0>)
 800aec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aec4:	0800aedd 	.word	0x0800aedd
 800aec8:	0800aee5 	.word	0x0800aee5
 800aecc:	0800aeed 	.word	0x0800aeed
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800af21 	.word	0x0800af21
 800aed8:	0800af29 	.word	0x0800af29
 800aedc:	2300      	movs	r3, #0
 800aede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aee2:	e14a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aee4:	2304      	movs	r3, #4
 800aee6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aeea:	e146      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aeec:	2308      	movs	r3, #8
 800aeee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aef2:	e142      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aef4:	2310      	movs	r3, #16
 800aef6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800aefa:	e13e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800aefc:	cfff69f3 	.word	0xcfff69f3
 800af00:	58000c00 	.word	0x58000c00
 800af04:	11fff4ff 	.word	0x11fff4ff
 800af08:	40011000 	.word	0x40011000
 800af0c:	58024400 	.word	0x58024400
 800af10:	40004400 	.word	0x40004400
 800af14:	40004800 	.word	0x40004800
 800af18:	40004c00 	.word	0x40004c00
 800af1c:	40005000 	.word	0x40005000
 800af20:	2320      	movs	r3, #32
 800af22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af26:	e128      	b.n	800b17a <UART_SetConfig+0x5a6>
 800af28:	2340      	movs	r3, #64	@ 0x40
 800af2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af2e:	e124      	b.n	800b17a <UART_SetConfig+0x5a6>
 800af30:	2380      	movs	r3, #128	@ 0x80
 800af32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800af36:	e120      	b.n	800b17a <UART_SetConfig+0x5a6>
 800af38:	697b      	ldr	r3, [r7, #20]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4acb      	ldr	r2, [pc, #812]	@ (800b26c <UART_SetConfig+0x698>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d176      	bne.n	800b030 <UART_SetConfig+0x45c>
 800af42:	4bcb      	ldr	r3, [pc, #812]	@ (800b270 <UART_SetConfig+0x69c>)
 800af44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800af4a:	2b28      	cmp	r3, #40	@ 0x28
 800af4c:	d86c      	bhi.n	800b028 <UART_SetConfig+0x454>
 800af4e:	a201      	add	r2, pc, #4	@ (adr r2, 800af54 <UART_SetConfig+0x380>)
 800af50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af54:	0800aff9 	.word	0x0800aff9
 800af58:	0800b029 	.word	0x0800b029
 800af5c:	0800b029 	.word	0x0800b029
 800af60:	0800b029 	.word	0x0800b029
 800af64:	0800b029 	.word	0x0800b029
 800af68:	0800b029 	.word	0x0800b029
 800af6c:	0800b029 	.word	0x0800b029
 800af70:	0800b029 	.word	0x0800b029
 800af74:	0800b001 	.word	0x0800b001
 800af78:	0800b029 	.word	0x0800b029
 800af7c:	0800b029 	.word	0x0800b029
 800af80:	0800b029 	.word	0x0800b029
 800af84:	0800b029 	.word	0x0800b029
 800af88:	0800b029 	.word	0x0800b029
 800af8c:	0800b029 	.word	0x0800b029
 800af90:	0800b029 	.word	0x0800b029
 800af94:	0800b009 	.word	0x0800b009
 800af98:	0800b029 	.word	0x0800b029
 800af9c:	0800b029 	.word	0x0800b029
 800afa0:	0800b029 	.word	0x0800b029
 800afa4:	0800b029 	.word	0x0800b029
 800afa8:	0800b029 	.word	0x0800b029
 800afac:	0800b029 	.word	0x0800b029
 800afb0:	0800b029 	.word	0x0800b029
 800afb4:	0800b011 	.word	0x0800b011
 800afb8:	0800b029 	.word	0x0800b029
 800afbc:	0800b029 	.word	0x0800b029
 800afc0:	0800b029 	.word	0x0800b029
 800afc4:	0800b029 	.word	0x0800b029
 800afc8:	0800b029 	.word	0x0800b029
 800afcc:	0800b029 	.word	0x0800b029
 800afd0:	0800b029 	.word	0x0800b029
 800afd4:	0800b019 	.word	0x0800b019
 800afd8:	0800b029 	.word	0x0800b029
 800afdc:	0800b029 	.word	0x0800b029
 800afe0:	0800b029 	.word	0x0800b029
 800afe4:	0800b029 	.word	0x0800b029
 800afe8:	0800b029 	.word	0x0800b029
 800afec:	0800b029 	.word	0x0800b029
 800aff0:	0800b029 	.word	0x0800b029
 800aff4:	0800b021 	.word	0x0800b021
 800aff8:	2301      	movs	r3, #1
 800affa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800affe:	e0bc      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b000:	2304      	movs	r3, #4
 800b002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b006:	e0b8      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b008:	2308      	movs	r3, #8
 800b00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b00e:	e0b4      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b010:	2310      	movs	r3, #16
 800b012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b016:	e0b0      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b018:	2320      	movs	r3, #32
 800b01a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b01e:	e0ac      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b020:	2340      	movs	r3, #64	@ 0x40
 800b022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b026:	e0a8      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b028:	2380      	movs	r3, #128	@ 0x80
 800b02a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b02e:	e0a4      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	4a8f      	ldr	r2, [pc, #572]	@ (800b274 <UART_SetConfig+0x6a0>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d130      	bne.n	800b09c <UART_SetConfig+0x4c8>
 800b03a:	4b8d      	ldr	r3, [pc, #564]	@ (800b270 <UART_SetConfig+0x69c>)
 800b03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b03e:	f003 0307 	and.w	r3, r3, #7
 800b042:	2b05      	cmp	r3, #5
 800b044:	d826      	bhi.n	800b094 <UART_SetConfig+0x4c0>
 800b046:	a201      	add	r2, pc, #4	@ (adr r2, 800b04c <UART_SetConfig+0x478>)
 800b048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04c:	0800b065 	.word	0x0800b065
 800b050:	0800b06d 	.word	0x0800b06d
 800b054:	0800b075 	.word	0x0800b075
 800b058:	0800b07d 	.word	0x0800b07d
 800b05c:	0800b085 	.word	0x0800b085
 800b060:	0800b08d 	.word	0x0800b08d
 800b064:	2300      	movs	r3, #0
 800b066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b06a:	e086      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b06c:	2304      	movs	r3, #4
 800b06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b072:	e082      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b074:	2308      	movs	r3, #8
 800b076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b07a:	e07e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b07c:	2310      	movs	r3, #16
 800b07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b082:	e07a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b084:	2320      	movs	r3, #32
 800b086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b08a:	e076      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b08c:	2340      	movs	r3, #64	@ 0x40
 800b08e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b092:	e072      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b094:	2380      	movs	r3, #128	@ 0x80
 800b096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b09a:	e06e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b09c:	697b      	ldr	r3, [r7, #20]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a75      	ldr	r2, [pc, #468]	@ (800b278 <UART_SetConfig+0x6a4>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d130      	bne.n	800b108 <UART_SetConfig+0x534>
 800b0a6:	4b72      	ldr	r3, [pc, #456]	@ (800b270 <UART_SetConfig+0x69c>)
 800b0a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0aa:	f003 0307 	and.w	r3, r3, #7
 800b0ae:	2b05      	cmp	r3, #5
 800b0b0:	d826      	bhi.n	800b100 <UART_SetConfig+0x52c>
 800b0b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b0b8 <UART_SetConfig+0x4e4>)
 800b0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0b8:	0800b0d1 	.word	0x0800b0d1
 800b0bc:	0800b0d9 	.word	0x0800b0d9
 800b0c0:	0800b0e1 	.word	0x0800b0e1
 800b0c4:	0800b0e9 	.word	0x0800b0e9
 800b0c8:	0800b0f1 	.word	0x0800b0f1
 800b0cc:	0800b0f9 	.word	0x0800b0f9
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0d6:	e050      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b0d8:	2304      	movs	r3, #4
 800b0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0de:	e04c      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0e6:	e048      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b0e8:	2310      	movs	r3, #16
 800b0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0ee:	e044      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b0f0:	2320      	movs	r3, #32
 800b0f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0f6:	e040      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b0f8:	2340      	movs	r3, #64	@ 0x40
 800b0fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b0fe:	e03c      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b100:	2380      	movs	r3, #128	@ 0x80
 800b102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b106:	e038      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a5b      	ldr	r2, [pc, #364]	@ (800b27c <UART_SetConfig+0x6a8>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d130      	bne.n	800b174 <UART_SetConfig+0x5a0>
 800b112:	4b57      	ldr	r3, [pc, #348]	@ (800b270 <UART_SetConfig+0x69c>)
 800b114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b116:	f003 0307 	and.w	r3, r3, #7
 800b11a:	2b05      	cmp	r3, #5
 800b11c:	d826      	bhi.n	800b16c <UART_SetConfig+0x598>
 800b11e:	a201      	add	r2, pc, #4	@ (adr r2, 800b124 <UART_SetConfig+0x550>)
 800b120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b124:	0800b13d 	.word	0x0800b13d
 800b128:	0800b145 	.word	0x0800b145
 800b12c:	0800b14d 	.word	0x0800b14d
 800b130:	0800b155 	.word	0x0800b155
 800b134:	0800b15d 	.word	0x0800b15d
 800b138:	0800b165 	.word	0x0800b165
 800b13c:	2302      	movs	r3, #2
 800b13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b142:	e01a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b144:	2304      	movs	r3, #4
 800b146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b14a:	e016      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b14c:	2308      	movs	r3, #8
 800b14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b152:	e012      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b154:	2310      	movs	r3, #16
 800b156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b15a:	e00e      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b15c:	2320      	movs	r3, #32
 800b15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b162:	e00a      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b164:	2340      	movs	r3, #64	@ 0x40
 800b166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b16a:	e006      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b16c:	2380      	movs	r3, #128	@ 0x80
 800b16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800b172:	e002      	b.n	800b17a <UART_SetConfig+0x5a6>
 800b174:	2380      	movs	r3, #128	@ 0x80
 800b176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b17a:	697b      	ldr	r3, [r7, #20]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a3f      	ldr	r2, [pc, #252]	@ (800b27c <UART_SetConfig+0x6a8>)
 800b180:	4293      	cmp	r3, r2
 800b182:	f040 80f8 	bne.w	800b376 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b186:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b18a:	2b20      	cmp	r3, #32
 800b18c:	dc46      	bgt.n	800b21c <UART_SetConfig+0x648>
 800b18e:	2b02      	cmp	r3, #2
 800b190:	f2c0 8082 	blt.w	800b298 <UART_SetConfig+0x6c4>
 800b194:	3b02      	subs	r3, #2
 800b196:	2b1e      	cmp	r3, #30
 800b198:	d87e      	bhi.n	800b298 <UART_SetConfig+0x6c4>
 800b19a:	a201      	add	r2, pc, #4	@ (adr r2, 800b1a0 <UART_SetConfig+0x5cc>)
 800b19c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1a0:	0800b223 	.word	0x0800b223
 800b1a4:	0800b299 	.word	0x0800b299
 800b1a8:	0800b22b 	.word	0x0800b22b
 800b1ac:	0800b299 	.word	0x0800b299
 800b1b0:	0800b299 	.word	0x0800b299
 800b1b4:	0800b299 	.word	0x0800b299
 800b1b8:	0800b23b 	.word	0x0800b23b
 800b1bc:	0800b299 	.word	0x0800b299
 800b1c0:	0800b299 	.word	0x0800b299
 800b1c4:	0800b299 	.word	0x0800b299
 800b1c8:	0800b299 	.word	0x0800b299
 800b1cc:	0800b299 	.word	0x0800b299
 800b1d0:	0800b299 	.word	0x0800b299
 800b1d4:	0800b299 	.word	0x0800b299
 800b1d8:	0800b24b 	.word	0x0800b24b
 800b1dc:	0800b299 	.word	0x0800b299
 800b1e0:	0800b299 	.word	0x0800b299
 800b1e4:	0800b299 	.word	0x0800b299
 800b1e8:	0800b299 	.word	0x0800b299
 800b1ec:	0800b299 	.word	0x0800b299
 800b1f0:	0800b299 	.word	0x0800b299
 800b1f4:	0800b299 	.word	0x0800b299
 800b1f8:	0800b299 	.word	0x0800b299
 800b1fc:	0800b299 	.word	0x0800b299
 800b200:	0800b299 	.word	0x0800b299
 800b204:	0800b299 	.word	0x0800b299
 800b208:	0800b299 	.word	0x0800b299
 800b20c:	0800b299 	.word	0x0800b299
 800b210:	0800b299 	.word	0x0800b299
 800b214:	0800b299 	.word	0x0800b299
 800b218:	0800b28b 	.word	0x0800b28b
 800b21c:	2b40      	cmp	r3, #64	@ 0x40
 800b21e:	d037      	beq.n	800b290 <UART_SetConfig+0x6bc>
 800b220:	e03a      	b.n	800b298 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800b222:	f7fc fc5f 	bl	8007ae4 <HAL_RCCEx_GetD3PCLK1Freq>
 800b226:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b228:	e03c      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b22a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b22e:	4618      	mov	r0, r3
 800b230:	f7fc fc6e 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b236:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b238:	e034      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b23a:	f107 0318 	add.w	r3, r7, #24
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fc fdba 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b248:	e02c      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b24a:	4b09      	ldr	r3, [pc, #36]	@ (800b270 <UART_SetConfig+0x69c>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 0320 	and.w	r3, r3, #32
 800b252:	2b00      	cmp	r3, #0
 800b254:	d016      	beq.n	800b284 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b256:	4b06      	ldr	r3, [pc, #24]	@ (800b270 <UART_SetConfig+0x69c>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	08db      	lsrs	r3, r3, #3
 800b25c:	f003 0303 	and.w	r3, r3, #3
 800b260:	4a07      	ldr	r2, [pc, #28]	@ (800b280 <UART_SetConfig+0x6ac>)
 800b262:	fa22 f303 	lsr.w	r3, r2, r3
 800b266:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b268:	e01c      	b.n	800b2a4 <UART_SetConfig+0x6d0>
 800b26a:	bf00      	nop
 800b26c:	40011400 	.word	0x40011400
 800b270:	58024400 	.word	0x58024400
 800b274:	40007800 	.word	0x40007800
 800b278:	40007c00 	.word	0x40007c00
 800b27c:	58000c00 	.word	0x58000c00
 800b280:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800b284:	4b9d      	ldr	r3, [pc, #628]	@ (800b4fc <UART_SetConfig+0x928>)
 800b286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b288:	e00c      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b28a:	4b9d      	ldr	r3, [pc, #628]	@ (800b500 <UART_SetConfig+0x92c>)
 800b28c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b28e:	e009      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b290:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b296:	e005      	b.n	800b2a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800b298:	2300      	movs	r3, #0
 800b29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b2a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b2a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f000 81de 	beq.w	800b668 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2b0:	4a94      	ldr	r2, [pc, #592]	@ (800b504 <UART_SetConfig+0x930>)
 800b2b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2b6:	461a      	mov	r2, r3
 800b2b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	4613      	mov	r3, r2
 800b2c6:	005b      	lsls	r3, r3, #1
 800b2c8:	4413      	add	r3, r2
 800b2ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2cc:	429a      	cmp	r2, r3
 800b2ce:	d305      	bcc.n	800b2dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	685b      	ldr	r3, [r3, #4]
 800b2d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b2d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b2d8:	429a      	cmp	r2, r3
 800b2da:	d903      	bls.n	800b2e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b2e2:	e1c1      	b.n	800b668 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b2e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	60bb      	str	r3, [r7, #8]
 800b2ea:	60fa      	str	r2, [r7, #12]
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f0:	4a84      	ldr	r2, [pc, #528]	@ (800b504 <UART_SetConfig+0x930>)
 800b2f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	603b      	str	r3, [r7, #0]
 800b2fc:	607a      	str	r2, [r7, #4]
 800b2fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b302:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800b306:	f7f5 f843 	bl	8000390 <__aeabi_uldivmod>
 800b30a:	4602      	mov	r2, r0
 800b30c:	460b      	mov	r3, r1
 800b30e:	4610      	mov	r0, r2
 800b310:	4619      	mov	r1, r3
 800b312:	f04f 0200 	mov.w	r2, #0
 800b316:	f04f 0300 	mov.w	r3, #0
 800b31a:	020b      	lsls	r3, r1, #8
 800b31c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800b320:	0202      	lsls	r2, r0, #8
 800b322:	6979      	ldr	r1, [r7, #20]
 800b324:	6849      	ldr	r1, [r1, #4]
 800b326:	0849      	lsrs	r1, r1, #1
 800b328:	2000      	movs	r0, #0
 800b32a:	460c      	mov	r4, r1
 800b32c:	4605      	mov	r5, r0
 800b32e:	eb12 0804 	adds.w	r8, r2, r4
 800b332:	eb43 0905 	adc.w	r9, r3, r5
 800b336:	697b      	ldr	r3, [r7, #20]
 800b338:	685b      	ldr	r3, [r3, #4]
 800b33a:	2200      	movs	r2, #0
 800b33c:	469a      	mov	sl, r3
 800b33e:	4693      	mov	fp, r2
 800b340:	4652      	mov	r2, sl
 800b342:	465b      	mov	r3, fp
 800b344:	4640      	mov	r0, r8
 800b346:	4649      	mov	r1, r9
 800b348:	f7f5 f822 	bl	8000390 <__aeabi_uldivmod>
 800b34c:	4602      	mov	r2, r0
 800b34e:	460b      	mov	r3, r1
 800b350:	4613      	mov	r3, r2
 800b352:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b354:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b356:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b35a:	d308      	bcc.n	800b36e <UART_SetConfig+0x79a>
 800b35c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b362:	d204      	bcs.n	800b36e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b36a:	60da      	str	r2, [r3, #12]
 800b36c:	e17c      	b.n	800b668 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800b36e:	2301      	movs	r3, #1
 800b370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b374:	e178      	b.n	800b668 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b376:	697b      	ldr	r3, [r7, #20]
 800b378:	69db      	ldr	r3, [r3, #28]
 800b37a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b37e:	f040 80c5 	bne.w	800b50c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800b382:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b386:	2b20      	cmp	r3, #32
 800b388:	dc48      	bgt.n	800b41c <UART_SetConfig+0x848>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	db7b      	blt.n	800b486 <UART_SetConfig+0x8b2>
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d879      	bhi.n	800b486 <UART_SetConfig+0x8b2>
 800b392:	a201      	add	r2, pc, #4	@ (adr r2, 800b398 <UART_SetConfig+0x7c4>)
 800b394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b398:	0800b423 	.word	0x0800b423
 800b39c:	0800b42b 	.word	0x0800b42b
 800b3a0:	0800b487 	.word	0x0800b487
 800b3a4:	0800b487 	.word	0x0800b487
 800b3a8:	0800b433 	.word	0x0800b433
 800b3ac:	0800b487 	.word	0x0800b487
 800b3b0:	0800b487 	.word	0x0800b487
 800b3b4:	0800b487 	.word	0x0800b487
 800b3b8:	0800b443 	.word	0x0800b443
 800b3bc:	0800b487 	.word	0x0800b487
 800b3c0:	0800b487 	.word	0x0800b487
 800b3c4:	0800b487 	.word	0x0800b487
 800b3c8:	0800b487 	.word	0x0800b487
 800b3cc:	0800b487 	.word	0x0800b487
 800b3d0:	0800b487 	.word	0x0800b487
 800b3d4:	0800b487 	.word	0x0800b487
 800b3d8:	0800b453 	.word	0x0800b453
 800b3dc:	0800b487 	.word	0x0800b487
 800b3e0:	0800b487 	.word	0x0800b487
 800b3e4:	0800b487 	.word	0x0800b487
 800b3e8:	0800b487 	.word	0x0800b487
 800b3ec:	0800b487 	.word	0x0800b487
 800b3f0:	0800b487 	.word	0x0800b487
 800b3f4:	0800b487 	.word	0x0800b487
 800b3f8:	0800b487 	.word	0x0800b487
 800b3fc:	0800b487 	.word	0x0800b487
 800b400:	0800b487 	.word	0x0800b487
 800b404:	0800b487 	.word	0x0800b487
 800b408:	0800b487 	.word	0x0800b487
 800b40c:	0800b487 	.word	0x0800b487
 800b410:	0800b487 	.word	0x0800b487
 800b414:	0800b487 	.word	0x0800b487
 800b418:	0800b479 	.word	0x0800b479
 800b41c:	2b40      	cmp	r3, #64	@ 0x40
 800b41e:	d02e      	beq.n	800b47e <UART_SetConfig+0x8aa>
 800b420:	e031      	b.n	800b486 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b422:	f7fb f8e7 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 800b426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b428:	e033      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b42a:	f7fb f8f9 	bl	8006620 <HAL_RCC_GetPCLK2Freq>
 800b42e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b430:	e02f      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b432:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b436:	4618      	mov	r0, r3
 800b438:	f7fc fb6a 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b43c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b440:	e027      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b442:	f107 0318 	add.w	r3, r7, #24
 800b446:	4618      	mov	r0, r3
 800b448:	f7fc fcb6 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b450:	e01f      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b452:	4b2d      	ldr	r3, [pc, #180]	@ (800b508 <UART_SetConfig+0x934>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f003 0320 	and.w	r3, r3, #32
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d009      	beq.n	800b472 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b45e:	4b2a      	ldr	r3, [pc, #168]	@ (800b508 <UART_SetConfig+0x934>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	08db      	lsrs	r3, r3, #3
 800b464:	f003 0303 	and.w	r3, r3, #3
 800b468:	4a24      	ldr	r2, [pc, #144]	@ (800b4fc <UART_SetConfig+0x928>)
 800b46a:	fa22 f303 	lsr.w	r3, r2, r3
 800b46e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b470:	e00f      	b.n	800b492 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800b472:	4b22      	ldr	r3, [pc, #136]	@ (800b4fc <UART_SetConfig+0x928>)
 800b474:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b476:	e00c      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b478:	4b21      	ldr	r3, [pc, #132]	@ (800b500 <UART_SetConfig+0x92c>)
 800b47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b47c:	e009      	b.n	800b492 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b47e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b484:	e005      	b.n	800b492 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800b486:	2300      	movs	r3, #0
 800b488:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b48a:	2301      	movs	r3, #1
 800b48c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b490:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b494:	2b00      	cmp	r3, #0
 800b496:	f000 80e7 	beq.w	800b668 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b49e:	4a19      	ldr	r2, [pc, #100]	@ (800b504 <UART_SetConfig+0x930>)
 800b4a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b4a4:	461a      	mov	r2, r3
 800b4a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b4a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800b4ac:	005a      	lsls	r2, r3, #1
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	085b      	lsrs	r3, r3, #1
 800b4b4:	441a      	add	r2, r3
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	685b      	ldr	r3, [r3, #4]
 800b4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	2b0f      	cmp	r3, #15
 800b4c4:	d916      	bls.n	800b4f4 <UART_SetConfig+0x920>
 800b4c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b4cc:	d212      	bcs.n	800b4f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d0:	b29b      	uxth	r3, r3
 800b4d2:	f023 030f 	bic.w	r3, r3, #15
 800b4d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4da:	085b      	lsrs	r3, r3, #1
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	f003 0307 	and.w	r3, r3, #7
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800b4f0:	60da      	str	r2, [r3, #12]
 800b4f2:	e0b9      	b.n	800b668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b4f4:	2301      	movs	r3, #1
 800b4f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800b4fa:	e0b5      	b.n	800b668 <UART_SetConfig+0xa94>
 800b4fc:	03d09000 	.word	0x03d09000
 800b500:	003d0900 	.word	0x003d0900
 800b504:	08010d60 	.word	0x08010d60
 800b508:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800b50c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b510:	2b20      	cmp	r3, #32
 800b512:	dc49      	bgt.n	800b5a8 <UART_SetConfig+0x9d4>
 800b514:	2b00      	cmp	r3, #0
 800b516:	db7c      	blt.n	800b612 <UART_SetConfig+0xa3e>
 800b518:	2b20      	cmp	r3, #32
 800b51a:	d87a      	bhi.n	800b612 <UART_SetConfig+0xa3e>
 800b51c:	a201      	add	r2, pc, #4	@ (adr r2, 800b524 <UART_SetConfig+0x950>)
 800b51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b522:	bf00      	nop
 800b524:	0800b5af 	.word	0x0800b5af
 800b528:	0800b5b7 	.word	0x0800b5b7
 800b52c:	0800b613 	.word	0x0800b613
 800b530:	0800b613 	.word	0x0800b613
 800b534:	0800b5bf 	.word	0x0800b5bf
 800b538:	0800b613 	.word	0x0800b613
 800b53c:	0800b613 	.word	0x0800b613
 800b540:	0800b613 	.word	0x0800b613
 800b544:	0800b5cf 	.word	0x0800b5cf
 800b548:	0800b613 	.word	0x0800b613
 800b54c:	0800b613 	.word	0x0800b613
 800b550:	0800b613 	.word	0x0800b613
 800b554:	0800b613 	.word	0x0800b613
 800b558:	0800b613 	.word	0x0800b613
 800b55c:	0800b613 	.word	0x0800b613
 800b560:	0800b613 	.word	0x0800b613
 800b564:	0800b5df 	.word	0x0800b5df
 800b568:	0800b613 	.word	0x0800b613
 800b56c:	0800b613 	.word	0x0800b613
 800b570:	0800b613 	.word	0x0800b613
 800b574:	0800b613 	.word	0x0800b613
 800b578:	0800b613 	.word	0x0800b613
 800b57c:	0800b613 	.word	0x0800b613
 800b580:	0800b613 	.word	0x0800b613
 800b584:	0800b613 	.word	0x0800b613
 800b588:	0800b613 	.word	0x0800b613
 800b58c:	0800b613 	.word	0x0800b613
 800b590:	0800b613 	.word	0x0800b613
 800b594:	0800b613 	.word	0x0800b613
 800b598:	0800b613 	.word	0x0800b613
 800b59c:	0800b613 	.word	0x0800b613
 800b5a0:	0800b613 	.word	0x0800b613
 800b5a4:	0800b605 	.word	0x0800b605
 800b5a8:	2b40      	cmp	r3, #64	@ 0x40
 800b5aa:	d02e      	beq.n	800b60a <UART_SetConfig+0xa36>
 800b5ac:	e031      	b.n	800b612 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5ae:	f7fb f821 	bl	80065f4 <HAL_RCC_GetPCLK1Freq>
 800b5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5b4:	e033      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b5b6:	f7fb f833 	bl	8006620 <HAL_RCC_GetPCLK2Freq>
 800b5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800b5bc:	e02f      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800b5c2:	4618      	mov	r0, r3
 800b5c4:	f7fc faa4 	bl	8007b10 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800b5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5cc:	e027      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5ce:	f107 0318 	add.w	r3, r7, #24
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7fc fbf0 	bl	8007db8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b5dc:	e01f      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b5de:	4b2d      	ldr	r3, [pc, #180]	@ (800b694 <UART_SetConfig+0xac0>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f003 0320 	and.w	r3, r3, #32
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d009      	beq.n	800b5fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800b5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800b694 <UART_SetConfig+0xac0>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	08db      	lsrs	r3, r3, #3
 800b5f0:	f003 0303 	and.w	r3, r3, #3
 800b5f4:	4a28      	ldr	r2, [pc, #160]	@ (800b698 <UART_SetConfig+0xac4>)
 800b5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800b5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b5fc:	e00f      	b.n	800b61e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800b5fe:	4b26      	ldr	r3, [pc, #152]	@ (800b698 <UART_SetConfig+0xac4>)
 800b600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b602:	e00c      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800b604:	4b25      	ldr	r3, [pc, #148]	@ (800b69c <UART_SetConfig+0xac8>)
 800b606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b608:	e009      	b.n	800b61e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800b60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800b610:	e005      	b.n	800b61e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800b612:	2300      	movs	r3, #0
 800b614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800b616:	2301      	movs	r3, #1
 800b618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800b61c:	bf00      	nop
    }

    if (pclk != 0U)
 800b61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b620:	2b00      	cmp	r3, #0
 800b622:	d021      	beq.n	800b668 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800b624:	697b      	ldr	r3, [r7, #20]
 800b626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b628:	4a1d      	ldr	r2, [pc, #116]	@ (800b6a0 <UART_SetConfig+0xacc>)
 800b62a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b62e:	461a      	mov	r2, r3
 800b630:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b632:	fbb3 f2f2 	udiv	r2, r3, r2
 800b636:	697b      	ldr	r3, [r7, #20]
 800b638:	685b      	ldr	r3, [r3, #4]
 800b63a:	085b      	lsrs	r3, r3, #1
 800b63c:	441a      	add	r2, r3
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	fbb2 f3f3 	udiv	r3, r2, r3
 800b646:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b64a:	2b0f      	cmp	r3, #15
 800b64c:	d909      	bls.n	800b662 <UART_SetConfig+0xa8e>
 800b64e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b654:	d205      	bcs.n	800b662 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b658:	b29a      	uxth	r2, r3
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	60da      	str	r2, [r3, #12]
 800b660:	e002      	b.n	800b668 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800b668:	697b      	ldr	r3, [r7, #20]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	2201      	movs	r2, #1
 800b674:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2200      	movs	r2, #0
 800b67c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	2200      	movs	r2, #0
 800b682:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800b684:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3748      	adds	r7, #72	@ 0x48
 800b68c:	46bd      	mov	sp, r7
 800b68e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b692:	bf00      	nop
 800b694:	58024400 	.word	0x58024400
 800b698:	03d09000 	.word	0x03d09000
 800b69c:	003d0900 	.word	0x003d0900
 800b6a0:	08010d60 	.word	0x08010d60

0800b6a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b083      	sub	sp, #12
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6b0:	f003 0308 	and.w	r3, r3, #8
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00a      	beq.n	800b6ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	430a      	orrs	r2, r1
 800b6cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6d2:	f003 0301 	and.w	r3, r3, #1
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d00a      	beq.n	800b6f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	430a      	orrs	r2, r1
 800b6ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b6f4:	f003 0302 	and.w	r3, r3, #2
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d00a      	beq.n	800b712 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	430a      	orrs	r2, r1
 800b710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b716:	f003 0304 	and.w	r3, r3, #4
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d00a      	beq.n	800b734 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	430a      	orrs	r2, r1
 800b732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b738:	f003 0310 	and.w	r3, r3, #16
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d00a      	beq.n	800b756 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	430a      	orrs	r2, r1
 800b754:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b75a:	f003 0320 	and.w	r3, r3, #32
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d00a      	beq.n	800b778 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	430a      	orrs	r2, r1
 800b776:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b77c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01a      	beq.n	800b7ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	430a      	orrs	r2, r1
 800b798:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b79e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b7a2:	d10a      	bne.n	800b7ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	685b      	ldr	r3, [r3, #4]
 800b7aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	430a      	orrs	r2, r1
 800b7b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00a      	beq.n	800b7dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	685b      	ldr	r3, [r3, #4]
 800b7cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	430a      	orrs	r2, r1
 800b7da:	605a      	str	r2, [r3, #4]
  }
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr

0800b7e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b098      	sub	sp, #96	@ 0x60
 800b7ec:	af02      	add	r7, sp, #8
 800b7ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b7f8:	f7f6 fd38 	bl	800226c <HAL_GetTick>
 800b7fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	f003 0308 	and.w	r3, r3, #8
 800b808:	2b08      	cmp	r3, #8
 800b80a:	d12f      	bne.n	800b86c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b80c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b810:	9300      	str	r3, [sp, #0]
 800b812:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b814:	2200      	movs	r2, #0
 800b816:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f000 f88e 	bl	800b93c <UART_WaitOnFlagUntilTimeout>
 800b820:	4603      	mov	r3, r0
 800b822:	2b00      	cmp	r3, #0
 800b824:	d022      	beq.n	800b86c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b836:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b83a:	653b      	str	r3, [r7, #80]	@ 0x50
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	461a      	mov	r2, r3
 800b842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b844:	647b      	str	r3, [r7, #68]	@ 0x44
 800b846:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b848:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b84a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b84c:	e841 2300 	strex	r3, r2, [r1]
 800b850:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b854:	2b00      	cmp	r3, #0
 800b856:	d1e6      	bne.n	800b826 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2220      	movs	r2, #32
 800b85c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b868:	2303      	movs	r3, #3
 800b86a:	e063      	b.n	800b934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	f003 0304 	and.w	r3, r3, #4
 800b876:	2b04      	cmp	r3, #4
 800b878:	d149      	bne.n	800b90e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b87a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b882:	2200      	movs	r2, #0
 800b884:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b888:	6878      	ldr	r0, [r7, #4]
 800b88a:	f000 f857 	bl	800b93c <UART_WaitOnFlagUntilTimeout>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d03c      	beq.n	800b90e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b89c:	e853 3f00 	ldrex	r3, [r3]
 800b8a0:	623b      	str	r3, [r7, #32]
   return(result);
 800b8a2:	6a3b      	ldr	r3, [r7, #32]
 800b8a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b8a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8b2:	633b      	str	r3, [r7, #48]	@ 0x30
 800b8b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b8b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b8ba:	e841 2300 	strex	r3, r2, [r1]
 800b8be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d1e6      	bne.n	800b894 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	3308      	adds	r3, #8
 800b8cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ce:	693b      	ldr	r3, [r7, #16]
 800b8d0:	e853 3f00 	ldrex	r3, [r3]
 800b8d4:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f023 0301 	bic.w	r3, r3, #1
 800b8dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	3308      	adds	r3, #8
 800b8e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b8e6:	61fa      	str	r2, [r7, #28]
 800b8e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ea:	69b9      	ldr	r1, [r7, #24]
 800b8ec:	69fa      	ldr	r2, [r7, #28]
 800b8ee:	e841 2300 	strex	r3, r2, [r1]
 800b8f2:	617b      	str	r3, [r7, #20]
   return(result);
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1e5      	bne.n	800b8c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2220      	movs	r2, #32
 800b8fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2200      	movs	r2, #0
 800b906:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b90a:	2303      	movs	r3, #3
 800b90c:	e012      	b.n	800b934 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2220      	movs	r2, #32
 800b91a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2200      	movs	r2, #0
 800b928:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	2200      	movs	r2, #0
 800b92e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b932:	2300      	movs	r3, #0
}
 800b934:	4618      	mov	r0, r3
 800b936:	3758      	adds	r7, #88	@ 0x58
 800b938:	46bd      	mov	sp, r7
 800b93a:	bd80      	pop	{r7, pc}

0800b93c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b084      	sub	sp, #16
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	603b      	str	r3, [r7, #0]
 800b948:	4613      	mov	r3, r2
 800b94a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b94c:	e04f      	b.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b954:	d04b      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b956:	f7f6 fc89 	bl	800226c <HAL_GetTick>
 800b95a:	4602      	mov	r2, r0
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	1ad3      	subs	r3, r2, r3
 800b960:	69ba      	ldr	r2, [r7, #24]
 800b962:	429a      	cmp	r2, r3
 800b964:	d302      	bcc.n	800b96c <UART_WaitOnFlagUntilTimeout+0x30>
 800b966:	69bb      	ldr	r3, [r7, #24]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d101      	bne.n	800b970 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e04e      	b.n	800ba0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0304 	and.w	r3, r3, #4
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d037      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b80      	cmp	r3, #128	@ 0x80
 800b982:	d034      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	2b40      	cmp	r3, #64	@ 0x40
 800b988:	d031      	beq.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	69db      	ldr	r3, [r3, #28]
 800b990:	f003 0308 	and.w	r3, r3, #8
 800b994:	2b08      	cmp	r3, #8
 800b996:	d110      	bne.n	800b9ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2208      	movs	r2, #8
 800b99e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9a0:	68f8      	ldr	r0, [r7, #12]
 800b9a2:	f000 f921 	bl	800bbe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2208      	movs	r2, #8
 800b9aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e029      	b.n	800ba0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	69db      	ldr	r3, [r3, #28]
 800b9c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b9c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b9c8:	d111      	bne.n	800b9ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b9d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f000 f907 	bl	800bbe8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	2220      	movs	r2, #32
 800b9de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b9ea:	2303      	movs	r3, #3
 800b9ec:	e00f      	b.n	800ba0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b9ee:	68fb      	ldr	r3, [r7, #12]
 800b9f0:	681b      	ldr	r3, [r3, #0]
 800b9f2:	69da      	ldr	r2, [r3, #28]
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	4013      	ands	r3, r2
 800b9f8:	68ba      	ldr	r2, [r7, #8]
 800b9fa:	429a      	cmp	r2, r3
 800b9fc:	bf0c      	ite	eq
 800b9fe:	2301      	moveq	r3, #1
 800ba00:	2300      	movne	r3, #0
 800ba02:	b2db      	uxtb	r3, r3
 800ba04:	461a      	mov	r2, r3
 800ba06:	79fb      	ldrb	r3, [r7, #7]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d0a0      	beq.n	800b94e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3710      	adds	r7, #16
 800ba12:	46bd      	mov	sp, r7
 800ba14:	bd80      	pop	{r7, pc}
	...

0800ba18 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b096      	sub	sp, #88	@ 0x58
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	60f8      	str	r0, [r7, #12]
 800ba20:	60b9      	str	r1, [r7, #8]
 800ba22:	4613      	mov	r3, r2
 800ba24:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	68ba      	ldr	r2, [r7, #8]
 800ba2a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	2200      	movs	r2, #0
 800ba38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2222      	movs	r2, #34	@ 0x22
 800ba40:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d02d      	beq.n	800baaa <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba54:	4a40      	ldr	r2, [pc, #256]	@ (800bb58 <UART_Start_Receive_DMA+0x140>)
 800ba56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba5e:	4a3f      	ldr	r2, [pc, #252]	@ (800bb5c <UART_Start_Receive_DMA+0x144>)
 800ba60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba68:	4a3d      	ldr	r2, [pc, #244]	@ (800bb60 <UART_Start_Receive_DMA+0x148>)
 800ba6a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ba72:	2200      	movs	r2, #0
 800ba74:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	3324      	adds	r3, #36	@ 0x24
 800ba82:	4619      	mov	r1, r3
 800ba84:	68fb      	ldr	r3, [r7, #12]
 800ba86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ba88:	461a      	mov	r2, r3
 800ba8a:	88fb      	ldrh	r3, [r7, #6]
 800ba8c:	f7f7 f856 	bl	8002b3c <HAL_DMA_Start_IT>
 800ba90:	4603      	mov	r3, r0
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d009      	beq.n	800baaa <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2210      	movs	r2, #16
 800ba9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2220      	movs	r2, #32
 800baa2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800baa6:	2301      	movs	r3, #1
 800baa8:	e051      	b.n	800bb4e <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d018      	beq.n	800bae4 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800baba:	e853 3f00 	ldrex	r3, [r3]
 800babe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bac6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	461a      	mov	r2, r3
 800bace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bad2:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bad4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bad6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bad8:	e841 2300 	strex	r3, r2, [r1]
 800badc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800bade:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d1e6      	bne.n	800bab2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	3308      	adds	r3, #8
 800baea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800baee:	e853 3f00 	ldrex	r3, [r3]
 800baf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800baf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf6:	f043 0301 	orr.w	r3, r3, #1
 800bafa:	653b      	str	r3, [r7, #80]	@ 0x50
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	3308      	adds	r3, #8
 800bb02:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800bb04:	637a      	str	r2, [r7, #52]	@ 0x34
 800bb06:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb08:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800bb0a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb0c:	e841 2300 	strex	r3, r2, [r1]
 800bb10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800bb12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d1e5      	bne.n	800bae4 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	e853 3f00 	ldrex	r3, [r3]
 800bb26:	613b      	str	r3, [r7, #16]
   return(result);
 800bb28:	693b      	ldr	r3, [r7, #16]
 800bb2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	3308      	adds	r3, #8
 800bb36:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800bb38:	623a      	str	r2, [r7, #32]
 800bb3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb3c:	69f9      	ldr	r1, [r7, #28]
 800bb3e:	6a3a      	ldr	r2, [r7, #32]
 800bb40:	e841 2300 	strex	r3, r2, [r1]
 800bb44:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb46:	69bb      	ldr	r3, [r7, #24]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d1e5      	bne.n	800bb18 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800bb4c:	2300      	movs	r3, #0
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3758      	adds	r7, #88	@ 0x58
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	0800bcb5 	.word	0x0800bcb5
 800bb5c:	0800bddd 	.word	0x0800bddd
 800bb60:	0800be1b 	.word	0x0800be1b

0800bb64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bb64:	b480      	push	{r7}
 800bb66:	b08f      	sub	sp, #60	@ 0x3c
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	6a3b      	ldr	r3, [r7, #32]
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	61fb      	str	r3, [r7, #28]
   return(result);
 800bb7a:	69fb      	ldr	r3, [r7, #28]
 800bb7c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800bb80:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	461a      	mov	r2, r3
 800bb88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bb8c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bb90:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bb98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e6      	bne.n	800bb6c <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3308      	adds	r3, #8
 800bba4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	e853 3f00 	ldrex	r3, [r3]
 800bbac:	60bb      	str	r3, [r7, #8]
   return(result);
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800bbb4:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3308      	adds	r3, #8
 800bbbc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bbbe:	61ba      	str	r2, [r7, #24]
 800bbc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc2:	6979      	ldr	r1, [r7, #20]
 800bbc4:	69ba      	ldr	r2, [r7, #24]
 800bbc6:	e841 2300 	strex	r3, r2, [r1]
 800bbca:	613b      	str	r3, [r7, #16]
   return(result);
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d1e5      	bne.n	800bb9e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	2220      	movs	r2, #32
 800bbd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800bbda:	bf00      	nop
 800bbdc:	373c      	adds	r7, #60	@ 0x3c
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe4:	4770      	bx	lr
	...

0800bbe8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b095      	sub	sp, #84	@ 0x54
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bbf8:	e853 3f00 	ldrex	r3, [r3]
 800bbfc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800bbfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc00:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800bc04:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bc0e:	643b      	str	r3, [r7, #64]	@ 0x40
 800bc10:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc12:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800bc14:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800bc16:	e841 2300 	strex	r3, r2, [r1]
 800bc1a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800bc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d1e6      	bne.n	800bbf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3308      	adds	r3, #8
 800bc28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc2a:	6a3b      	ldr	r3, [r7, #32]
 800bc2c:	e853 3f00 	ldrex	r3, [r3]
 800bc30:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc32:	69fa      	ldr	r2, [r7, #28]
 800bc34:	4b1e      	ldr	r3, [pc, #120]	@ (800bcb0 <UART_EndRxTransfer+0xc8>)
 800bc36:	4013      	ands	r3, r2
 800bc38:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	3308      	adds	r3, #8
 800bc40:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800bc42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800bc44:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800bc48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc4a:	e841 2300 	strex	r3, r2, [r1]
 800bc4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800bc50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d1e5      	bne.n	800bc22 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d118      	bne.n	800bc90 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	e853 3f00 	ldrex	r3, [r3]
 800bc6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	f023 0310 	bic.w	r3, r3, #16
 800bc72:	647b      	str	r3, [r7, #68]	@ 0x44
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	461a      	mov	r2, r3
 800bc7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bc7c:	61bb      	str	r3, [r7, #24]
 800bc7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc80:	6979      	ldr	r1, [r7, #20]
 800bc82:	69ba      	ldr	r2, [r7, #24]
 800bc84:	e841 2300 	strex	r3, r2, [r1]
 800bc88:	613b      	str	r3, [r7, #16]
   return(result);
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d1e6      	bne.n	800bc5e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2220      	movs	r2, #32
 800bc94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	2200      	movs	r2, #0
 800bca2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800bca4:	bf00      	nop
 800bca6:	3754      	adds	r7, #84	@ 0x54
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcae:	4770      	bx	lr
 800bcb0:	effffffe 	.word	0xeffffffe

0800bcb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b09c      	sub	sp, #112	@ 0x70
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcc0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bcca:	d071      	beq.n	800bdb0 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800bccc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcce:	2200      	movs	r2, #0
 800bcd0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bcd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bcdc:	e853 3f00 	ldrex	r3, [r3]
 800bce0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800bce2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bce4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bce8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bcea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	461a      	mov	r2, r3
 800bcf0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800bcf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bcf4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcf6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800bcf8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bcfa:	e841 2300 	strex	r3, r2, [r1]
 800bcfe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800bd00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d1e6      	bne.n	800bcd4 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	3308      	adds	r3, #8
 800bd0c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd10:	e853 3f00 	ldrex	r3, [r3]
 800bd14:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800bd16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd18:	f023 0301 	bic.w	r3, r3, #1
 800bd1c:	667b      	str	r3, [r7, #100]	@ 0x64
 800bd1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	3308      	adds	r3, #8
 800bd24:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800bd26:	647a      	str	r2, [r7, #68]	@ 0x44
 800bd28:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800bd2c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bd2e:	e841 2300 	strex	r3, r2, [r1]
 800bd32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800bd34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d1e5      	bne.n	800bd06 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	3308      	adds	r3, #8
 800bd40:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd44:	e853 3f00 	ldrex	r3, [r3]
 800bd48:	623b      	str	r3, [r7, #32]
   return(result);
 800bd4a:	6a3b      	ldr	r3, [r7, #32]
 800bd4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bd50:	663b      	str	r3, [r7, #96]	@ 0x60
 800bd52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3308      	adds	r3, #8
 800bd58:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800bd5a:	633a      	str	r2, [r7, #48]	@ 0x30
 800bd5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800bd60:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800bd68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e5      	bne.n	800bd3a <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bd6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd70:	2220      	movs	r2, #32
 800bd72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bd7a:	2b01      	cmp	r3, #1
 800bd7c:	d118      	bne.n	800bdb0 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	e853 3f00 	ldrex	r3, [r3]
 800bd8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	f023 0310 	bic.w	r3, r3, #16
 800bd92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bd94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	461a      	mov	r2, r3
 800bd9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bd9c:	61fb      	str	r3, [r7, #28]
 800bd9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	69fa      	ldr	r2, [r7, #28]
 800bda4:	e841 2300 	strex	r3, r2, [r1]
 800bda8:	617b      	str	r3, [r7, #20]
   return(result);
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d1e6      	bne.n	800bd7e <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bdb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdba:	2b01      	cmp	r3, #1
 800bdbc:	d107      	bne.n	800bdce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bdbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800bdc0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bdc8:	f7f5 f80e 	bl	8000de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bdcc:	e002      	b.n	800bdd4 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800bdce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800bdd0:	f7fe fee2 	bl	800ab98 <HAL_UART_RxCpltCallback>
}
 800bdd4:	bf00      	nop
 800bdd6:	3770      	adds	r7, #112	@ 0x70
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	bd80      	pop	{r7, pc}

0800bddc <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b084      	sub	sp, #16
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bde8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	2201      	movs	r2, #1
 800bdee:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bdf4:	2b01      	cmp	r3, #1
 800bdf6:	d109      	bne.n	800be0c <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800bdfe:	085b      	lsrs	r3, r3, #1
 800be00:	b29b      	uxth	r3, r3
 800be02:	4619      	mov	r1, r3
 800be04:	68f8      	ldr	r0, [r7, #12]
 800be06:	f7f4 ffef 	bl	8000de8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800be0a:	e002      	b.n	800be12 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800be0c:	68f8      	ldr	r0, [r7, #12]
 800be0e:	f7fe fecd 	bl	800abac <HAL_UART_RxHalfCpltCallback>
}
 800be12:	bf00      	nop
 800be14:	3710      	adds	r7, #16
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}

0800be1a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800be1a:	b580      	push	{r7, lr}
 800be1c:	b086      	sub	sp, #24
 800be1e:	af00      	add	r7, sp, #0
 800be20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be26:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800be2e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800be36:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	689b      	ldr	r3, [r3, #8]
 800be3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be42:	2b80      	cmp	r3, #128	@ 0x80
 800be44:	d109      	bne.n	800be5a <UART_DMAError+0x40>
 800be46:	693b      	ldr	r3, [r7, #16]
 800be48:	2b21      	cmp	r3, #33	@ 0x21
 800be4a:	d106      	bne.n	800be5a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	2200      	movs	r2, #0
 800be50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800be54:	6978      	ldr	r0, [r7, #20]
 800be56:	f7ff fe85 	bl	800bb64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be64:	2b40      	cmp	r3, #64	@ 0x40
 800be66:	d109      	bne.n	800be7c <UART_DMAError+0x62>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b22      	cmp	r3, #34	@ 0x22
 800be6c:	d106      	bne.n	800be7c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	2200      	movs	r2, #0
 800be72:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800be76:	6978      	ldr	r0, [r7, #20]
 800be78:	f7ff feb6 	bl	800bbe8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800be82:	f043 0210 	orr.w	r2, r3, #16
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800be8c:	6978      	ldr	r0, [r7, #20]
 800be8e:	f7fe fe97 	bl	800abc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be92:	bf00      	nop
 800be94:	3718      	adds	r7, #24
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}

0800be9a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be9a:	b580      	push	{r7, lr}
 800be9c:	b084      	sub	sp, #16
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bea6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	2200      	movs	r2, #0
 800beac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	2200      	movs	r2, #0
 800beb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f7fe fe81 	bl	800abc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bebe:	bf00      	nop
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}

0800bec6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bec6:	b580      	push	{r7, lr}
 800bec8:	b088      	sub	sp, #32
 800beca:	af00      	add	r7, sp, #0
 800becc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed4:	68fb      	ldr	r3, [r7, #12]
 800bed6:	e853 3f00 	ldrex	r3, [r3]
 800beda:	60bb      	str	r3, [r7, #8]
   return(result);
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800bee2:	61fb      	str	r3, [r7, #28]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	69fb      	ldr	r3, [r7, #28]
 800beec:	61bb      	str	r3, [r7, #24]
 800beee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6979      	ldr	r1, [r7, #20]
 800bef2:	69ba      	ldr	r2, [r7, #24]
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	613b      	str	r3, [r7, #16]
   return(result);
 800befa:	693b      	ldr	r3, [r7, #16]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e6      	bne.n	800bece <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2220      	movs	r2, #32
 800bf04:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f7fe fe38 	bl	800ab84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf14:	bf00      	nop
 800bf16:	3720      	adds	r7, #32
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b083      	sub	sp, #12
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800bf24:	bf00      	nop
 800bf26:	370c      	adds	r7, #12
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2e:	4770      	bx	lr

0800bf30 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800bf30:	b480      	push	{r7}
 800bf32:	b083      	sub	sp, #12
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800bf38:	bf00      	nop
 800bf3a:	370c      	adds	r7, #12
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf42:	4770      	bx	lr

0800bf44 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b083      	sub	sp, #12
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800bf4c:	bf00      	nop
 800bf4e:	370c      	adds	r7, #12
 800bf50:	46bd      	mov	sp, r7
 800bf52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf56:	4770      	bx	lr

0800bf58 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800bf58:	b480      	push	{r7}
 800bf5a:	b085      	sub	sp, #20
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d101      	bne.n	800bf6e <HAL_UARTEx_DisableFifoMode+0x16>
 800bf6a:	2302      	movs	r3, #2
 800bf6c:	e027      	b.n	800bfbe <HAL_UARTEx_DisableFifoMode+0x66>
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2201      	movs	r2, #1
 800bf72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2224      	movs	r2, #36	@ 0x24
 800bf7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	681a      	ldr	r2, [r3, #0]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 0201 	bic.w	r2, r2, #1
 800bf94:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800bf9c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2200      	movs	r2, #0
 800bfb8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	3714      	adds	r7, #20
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr

0800bfca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800bfca:	b580      	push	{r7, lr}
 800bfcc:	b084      	sub	sp, #16
 800bfce:	af00      	add	r7, sp, #0
 800bfd0:	6078      	str	r0, [r7, #4]
 800bfd2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800bfda:	2b01      	cmp	r3, #1
 800bfdc:	d101      	bne.n	800bfe2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800bfde:	2302      	movs	r3, #2
 800bfe0:	e02d      	b.n	800c03e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	2224      	movs	r2, #36	@ 0x24
 800bfee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f022 0201 	bic.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689b      	ldr	r3, [r3, #8]
 800c010:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	683a      	ldr	r2, [r7, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 f8a4 	bl	800c16c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	68fa      	ldr	r2, [r7, #12]
 800c02a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2200      	movs	r2, #0
 800c038:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c03c:	2300      	movs	r3, #0
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800c056:	2b01      	cmp	r3, #1
 800c058:	d101      	bne.n	800c05e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c05a:	2302      	movs	r3, #2
 800c05c:	e02d      	b.n	800c0ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2201      	movs	r2, #1
 800c062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2224      	movs	r2, #36	@ 0x24
 800c06a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681a      	ldr	r2, [r3, #0]
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f022 0201 	bic.w	r2, r2, #1
 800c084:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	683a      	ldr	r2, [r7, #0]
 800c096:	430a      	orrs	r2, r1
 800c098:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c09a:	6878      	ldr	r0, [r7, #4]
 800c09c:	f000 f866 	bl	800c16c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	68fa      	ldr	r2, [r7, #12]
 800c0a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2220      	movs	r2, #32
 800c0ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c0b8:	2300      	movs	r3, #0
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3710      	adds	r7, #16
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b08c      	sub	sp, #48	@ 0x30
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	60f8      	str	r0, [r7, #12]
 800c0ca:	60b9      	str	r1, [r7, #8]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	d142      	bne.n	800c160 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d002      	beq.n	800c0e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800c0e0:	88fb      	ldrh	r3, [r7, #6]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e03b      	b.n	800c162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2201      	movs	r2, #1
 800c0ee:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800c0f6:	88fb      	ldrh	r3, [r7, #6]
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	68b9      	ldr	r1, [r7, #8]
 800c0fc:	68f8      	ldr	r0, [r7, #12]
 800c0fe:	f7ff fc8b 	bl	800ba18 <UART_Start_Receive_DMA>
 800c102:	4603      	mov	r3, r0
 800c104:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800c108:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d124      	bne.n	800c15a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c114:	2b01      	cmp	r3, #1
 800c116:	d11d      	bne.n	800c154 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	2210      	movs	r2, #16
 800c11e:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	e853 3f00 	ldrex	r3, [r3]
 800c12c:	617b      	str	r3, [r7, #20]
   return(result);
 800c12e:	697b      	ldr	r3, [r7, #20]
 800c130:	f043 0310 	orr.w	r3, r3, #16
 800c134:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c13e:	627b      	str	r3, [r7, #36]	@ 0x24
 800c140:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c142:	6a39      	ldr	r1, [r7, #32]
 800c144:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c146:	e841 2300 	strex	r3, r2, [r1]
 800c14a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d1e6      	bne.n	800c120 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800c152:	e002      	b.n	800c15a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800c15a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800c15e:	e000      	b.n	800c162 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800c160:	2302      	movs	r3, #2
  }
}
 800c162:	4618      	mov	r0, r3
 800c164:	3730      	adds	r7, #48	@ 0x30
 800c166:	46bd      	mov	sp, r7
 800c168:	bd80      	pop	{r7, pc}
	...

0800c16c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b085      	sub	sp, #20
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d108      	bne.n	800c18e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2201      	movs	r2, #1
 800c180:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	2201      	movs	r2, #1
 800c188:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c18c:	e031      	b.n	800c1f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c18e:	2310      	movs	r3, #16
 800c190:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c192:	2310      	movs	r3, #16
 800c194:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	0e5b      	lsrs	r3, r3, #25
 800c19e:	b2db      	uxtb	r3, r3
 800c1a0:	f003 0307 	and.w	r3, r3, #7
 800c1a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	0f5b      	lsrs	r3, r3, #29
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	f003 0307 	and.w	r3, r3, #7
 800c1b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1b6:	7bbb      	ldrb	r3, [r7, #14]
 800c1b8:	7b3a      	ldrb	r2, [r7, #12]
 800c1ba:	4911      	ldr	r1, [pc, #68]	@ (800c200 <UARTEx_SetNbDataToProcess+0x94>)
 800c1bc:	5c8a      	ldrb	r2, [r1, r2]
 800c1be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1c2:	7b3a      	ldrb	r2, [r7, #12]
 800c1c4:	490f      	ldr	r1, [pc, #60]	@ (800c204 <UARTEx_SetNbDataToProcess+0x98>)
 800c1c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1c8:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1d4:	7bfb      	ldrb	r3, [r7, #15]
 800c1d6:	7b7a      	ldrb	r2, [r7, #13]
 800c1d8:	4909      	ldr	r1, [pc, #36]	@ (800c200 <UARTEx_SetNbDataToProcess+0x94>)
 800c1da:	5c8a      	ldrb	r2, [r1, r2]
 800c1dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1e0:	7b7a      	ldrb	r2, [r7, #13]
 800c1e2:	4908      	ldr	r1, [pc, #32]	@ (800c204 <UARTEx_SetNbDataToProcess+0x98>)
 800c1e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1e6:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1ea:	b29a      	uxth	r2, r3
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800c1f2:	bf00      	nop
 800c1f4:	3714      	adds	r7, #20
 800c1f6:	46bd      	mov	sp, r7
 800c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop
 800c200:	08010d78 	.word	0x08010d78
 800c204:	08010d80 	.word	0x08010d80

0800c208 <__NVIC_SetPriority>:
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	4603      	mov	r3, r0
 800c210:	6039      	str	r1, [r7, #0]
 800c212:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800c214:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	db0a      	blt.n	800c232 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c21c:	683b      	ldr	r3, [r7, #0]
 800c21e:	b2da      	uxtb	r2, r3
 800c220:	490c      	ldr	r1, [pc, #48]	@ (800c254 <__NVIC_SetPriority+0x4c>)
 800c222:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c226:	0112      	lsls	r2, r2, #4
 800c228:	b2d2      	uxtb	r2, r2
 800c22a:	440b      	add	r3, r1
 800c22c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c230:	e00a      	b.n	800c248 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	b2da      	uxtb	r2, r3
 800c236:	4908      	ldr	r1, [pc, #32]	@ (800c258 <__NVIC_SetPriority+0x50>)
 800c238:	88fb      	ldrh	r3, [r7, #6]
 800c23a:	f003 030f 	and.w	r3, r3, #15
 800c23e:	3b04      	subs	r3, #4
 800c240:	0112      	lsls	r2, r2, #4
 800c242:	b2d2      	uxtb	r2, r2
 800c244:	440b      	add	r3, r1
 800c246:	761a      	strb	r2, [r3, #24]
}
 800c248:	bf00      	nop
 800c24a:	370c      	adds	r7, #12
 800c24c:	46bd      	mov	sp, r7
 800c24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c252:	4770      	bx	lr
 800c254:	e000e100 	.word	0xe000e100
 800c258:	e000ed00 	.word	0xe000ed00

0800c25c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c25c:	b580      	push	{r7, lr}
 800c25e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c260:	4b05      	ldr	r3, [pc, #20]	@ (800c278 <SysTick_Handler+0x1c>)
 800c262:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c264:	f002 fcc0 	bl	800ebe8 <xTaskGetSchedulerState>
 800c268:	4603      	mov	r3, r0
 800c26a:	2b01      	cmp	r3, #1
 800c26c:	d001      	beq.n	800c272 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c26e:	f000 feab 	bl	800cfc8 <xPortSysTickHandler>
  }
}
 800c272:	bf00      	nop
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	e000e010 	.word	0xe000e010

0800c27c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c27c:	b580      	push	{r7, lr}
 800c27e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c280:	2100      	movs	r1, #0
 800c282:	f06f 0004 	mvn.w	r0, #4
 800c286:	f7ff ffbf 	bl	800c208 <__NVIC_SetPriority>
#endif
}
 800c28a:	bf00      	nop
 800c28c:	bd80      	pop	{r7, pc}
	...

0800c290 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c290:	b480      	push	{r7}
 800c292:	b083      	sub	sp, #12
 800c294:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c296:	f3ef 8305 	mrs	r3, IPSR
 800c29a:	603b      	str	r3, [r7, #0]
  return(result);
 800c29c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d003      	beq.n	800c2aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c2a2:	f06f 0305 	mvn.w	r3, #5
 800c2a6:	607b      	str	r3, [r7, #4]
 800c2a8:	e00c      	b.n	800c2c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c2aa:	4b0a      	ldr	r3, [pc, #40]	@ (800c2d4 <osKernelInitialize+0x44>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c2b2:	4b08      	ldr	r3, [pc, #32]	@ (800c2d4 <osKernelInitialize+0x44>)
 800c2b4:	2201      	movs	r2, #1
 800c2b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	607b      	str	r3, [r7, #4]
 800c2bc:	e002      	b.n	800c2c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c2be:	f04f 33ff 	mov.w	r3, #4294967295
 800c2c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c2c4:	687b      	ldr	r3, [r7, #4]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	370c      	adds	r7, #12
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	24000b18 	.word	0x24000b18

0800c2d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b082      	sub	sp, #8
 800c2dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c2de:	f3ef 8305 	mrs	r3, IPSR
 800c2e2:	603b      	str	r3, [r7, #0]
  return(result);
 800c2e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d003      	beq.n	800c2f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800c2ea:	f06f 0305 	mvn.w	r3, #5
 800c2ee:	607b      	str	r3, [r7, #4]
 800c2f0:	e010      	b.n	800c314 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c2f2:	4b0b      	ldr	r3, [pc, #44]	@ (800c320 <osKernelStart+0x48>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d109      	bne.n	800c30e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c2fa:	f7ff ffbf 	bl	800c27c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c2fe:	4b08      	ldr	r3, [pc, #32]	@ (800c320 <osKernelStart+0x48>)
 800c300:	2202      	movs	r2, #2
 800c302:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c304:	f001 fffc 	bl	800e300 <vTaskStartScheduler>
      stat = osOK;
 800c308:	2300      	movs	r3, #0
 800c30a:	607b      	str	r3, [r7, #4]
 800c30c:	e002      	b.n	800c314 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295
 800c312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c314:	687b      	ldr	r3, [r7, #4]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3708      	adds	r7, #8
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
 800c31e:	bf00      	nop
 800c320:	24000b18 	.word	0x24000b18

0800c324 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c324:	b580      	push	{r7, lr}
 800c326:	b08e      	sub	sp, #56	@ 0x38
 800c328:	af04      	add	r7, sp, #16
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c330:	2300      	movs	r3, #0
 800c332:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c334:	f3ef 8305 	mrs	r3, IPSR
 800c338:	617b      	str	r3, [r7, #20]
  return(result);
 800c33a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d17e      	bne.n	800c43e <osThreadNew+0x11a>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d07b      	beq.n	800c43e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800c346:	2380      	movs	r3, #128	@ 0x80
 800c348:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c34a:	2318      	movs	r3, #24
 800c34c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c34e:	2300      	movs	r3, #0
 800c350:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c352:	f04f 33ff 	mov.w	r3, #4294967295
 800c356:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d045      	beq.n	800c3ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d002      	beq.n	800c36c <osThreadNew+0x48>
        name = attr->name;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	699b      	ldr	r3, [r3, #24]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d002      	beq.n	800c37a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c37a:	69fb      	ldr	r3, [r7, #28]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d008      	beq.n	800c392 <osThreadNew+0x6e>
 800c380:	69fb      	ldr	r3, [r7, #28]
 800c382:	2b38      	cmp	r3, #56	@ 0x38
 800c384:	d805      	bhi.n	800c392 <osThreadNew+0x6e>
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d001      	beq.n	800c396 <osThreadNew+0x72>
        return (NULL);
 800c392:	2300      	movs	r3, #0
 800c394:	e054      	b.n	800c440 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	695b      	ldr	r3, [r3, #20]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d003      	beq.n	800c3a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	695b      	ldr	r3, [r3, #20]
 800c3a2:	089b      	lsrs	r3, r3, #2
 800c3a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d00e      	beq.n	800c3cc <osThreadNew+0xa8>
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68db      	ldr	r3, [r3, #12]
 800c3b2:	2ba7      	cmp	r3, #167	@ 0xa7
 800c3b4:	d90a      	bls.n	800c3cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d006      	beq.n	800c3cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	695b      	ldr	r3, [r3, #20]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d002      	beq.n	800c3cc <osThreadNew+0xa8>
        mem = 1;
 800c3c6:	2301      	movs	r3, #1
 800c3c8:	61bb      	str	r3, [r7, #24]
 800c3ca:	e010      	b.n	800c3ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	689b      	ldr	r3, [r3, #8]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d10c      	bne.n	800c3ee <osThreadNew+0xca>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	68db      	ldr	r3, [r3, #12]
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d108      	bne.n	800c3ee <osThreadNew+0xca>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d104      	bne.n	800c3ee <osThreadNew+0xca>
          mem = 0;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	61bb      	str	r3, [r7, #24]
 800c3e8:	e001      	b.n	800c3ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	2b01      	cmp	r3, #1
 800c3f2:	d110      	bne.n	800c416 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c3fc:	9202      	str	r2, [sp, #8]
 800c3fe:	9301      	str	r3, [sp, #4]
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	68bb      	ldr	r3, [r7, #8]
 800c406:	6a3a      	ldr	r2, [r7, #32]
 800c408:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c40a:	68f8      	ldr	r0, [r7, #12]
 800c40c:	f001 fd84 	bl	800df18 <xTaskCreateStatic>
 800c410:	4603      	mov	r3, r0
 800c412:	613b      	str	r3, [r7, #16]
 800c414:	e013      	b.n	800c43e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800c416:	69bb      	ldr	r3, [r7, #24]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d110      	bne.n	800c43e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c41c:	6a3b      	ldr	r3, [r7, #32]
 800c41e:	b29a      	uxth	r2, r3
 800c420:	f107 0310 	add.w	r3, r7, #16
 800c424:	9301      	str	r3, [sp, #4]
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c42e:	68f8      	ldr	r0, [r7, #12]
 800c430:	f001 fdd2 	bl	800dfd8 <xTaskCreate>
 800c434:	4603      	mov	r3, r0
 800c436:	2b01      	cmp	r3, #1
 800c438:	d001      	beq.n	800c43e <osThreadNew+0x11a>
            hTask = NULL;
 800c43a:	2300      	movs	r3, #0
 800c43c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c43e:	693b      	ldr	r3, [r7, #16]
}
 800c440:	4618      	mov	r0, r3
 800c442:	3728      	adds	r7, #40	@ 0x28
 800c444:	46bd      	mov	sp, r7
 800c446:	bd80      	pop	{r7, pc}

0800c448 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c448:	b580      	push	{r7, lr}
 800c44a:	b084      	sub	sp, #16
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c450:	f3ef 8305 	mrs	r3, IPSR
 800c454:	60bb      	str	r3, [r7, #8]
  return(result);
 800c456:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <osDelay+0x1c>
    stat = osErrorISR;
 800c45c:	f06f 0305 	mvn.w	r3, #5
 800c460:	60fb      	str	r3, [r7, #12]
 800c462:	e007      	b.n	800c474 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c464:	2300      	movs	r3, #0
 800c466:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d002      	beq.n	800c474 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f001 ff10 	bl	800e294 <vTaskDelay>
    }
  }

  return (stat);
 800c474:	68fb      	ldr	r3, [r7, #12]
}
 800c476:	4618      	mov	r0, r3
 800c478:	3710      	adds	r7, #16
 800c47a:	46bd      	mov	sp, r7
 800c47c:	bd80      	pop	{r7, pc}

0800c47e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c47e:	b580      	push	{r7, lr}
 800c480:	b088      	sub	sp, #32
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c486:	2300      	movs	r3, #0
 800c488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c48a:	f3ef 8305 	mrs	r3, IPSR
 800c48e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c490:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c492:	2b00      	cmp	r3, #0
 800c494:	d174      	bne.n	800c580 <osMutexNew+0x102>
    if (attr != NULL) {
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d003      	beq.n	800c4a4 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	61bb      	str	r3, [r7, #24]
 800c4a2:	e001      	b.n	800c4a8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	f003 0301 	and.w	r3, r3, #1
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d002      	beq.n	800c4b8 <osMutexNew+0x3a>
      rmtx = 1U;
 800c4b2:	2301      	movs	r3, #1
 800c4b4:	617b      	str	r3, [r7, #20]
 800c4b6:	e001      	b.n	800c4bc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c4bc:	69bb      	ldr	r3, [r7, #24]
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d15c      	bne.n	800c580 <osMutexNew+0x102>
      mem = -1;
 800c4c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c4ca:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d015      	beq.n	800c4fe <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	689b      	ldr	r3, [r3, #8]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d006      	beq.n	800c4e8 <osMutexNew+0x6a>
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	68db      	ldr	r3, [r3, #12]
 800c4de:	2b4f      	cmp	r3, #79	@ 0x4f
 800c4e0:	d902      	bls.n	800c4e8 <osMutexNew+0x6a>
          mem = 1;
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	613b      	str	r3, [r7, #16]
 800c4e6:	e00c      	b.n	800c502 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	689b      	ldr	r3, [r3, #8]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d108      	bne.n	800c502 <osMutexNew+0x84>
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d104      	bne.n	800c502 <osMutexNew+0x84>
            mem = 0;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	613b      	str	r3, [r7, #16]
 800c4fc:	e001      	b.n	800c502 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c4fe:	2300      	movs	r3, #0
 800c500:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d112      	bne.n	800c52e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c508:	697b      	ldr	r3, [r7, #20]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d007      	beq.n	800c51e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	689b      	ldr	r3, [r3, #8]
 800c512:	4619      	mov	r1, r3
 800c514:	2004      	movs	r0, #4
 800c516:	f000 ff60 	bl	800d3da <xQueueCreateMutexStatic>
 800c51a:	61f8      	str	r0, [r7, #28]
 800c51c:	e016      	b.n	800c54c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	689b      	ldr	r3, [r3, #8]
 800c522:	4619      	mov	r1, r3
 800c524:	2001      	movs	r0, #1
 800c526:	f000 ff58 	bl	800d3da <xQueueCreateMutexStatic>
 800c52a:	61f8      	str	r0, [r7, #28]
 800c52c:	e00e      	b.n	800c54c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d10b      	bne.n	800c54c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d004      	beq.n	800c544 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c53a:	2004      	movs	r0, #4
 800c53c:	f000 ff35 	bl	800d3aa <xQueueCreateMutex>
 800c540:	61f8      	str	r0, [r7, #28]
 800c542:	e003      	b.n	800c54c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c544:	2001      	movs	r0, #1
 800c546:	f000 ff30 	bl	800d3aa <xQueueCreateMutex>
 800c54a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c54c:	69fb      	ldr	r3, [r7, #28]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d00c      	beq.n	800c56c <osMutexNew+0xee>
        if (attr != NULL) {
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d003      	beq.n	800c560 <osMutexNew+0xe2>
          name = attr->name;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	60fb      	str	r3, [r7, #12]
 800c55e:	e001      	b.n	800c564 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c560:	2300      	movs	r3, #0
 800c562:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c564:	68f9      	ldr	r1, [r7, #12]
 800c566:	69f8      	ldr	r0, [r7, #28]
 800c568:	f001 fc78 	bl	800de5c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c56c:	69fb      	ldr	r3, [r7, #28]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d006      	beq.n	800c580 <osMutexNew+0x102>
 800c572:	697b      	ldr	r3, [r7, #20]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d003      	beq.n	800c580 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c578:	69fb      	ldr	r3, [r7, #28]
 800c57a:	f043 0301 	orr.w	r3, r3, #1
 800c57e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c580:	69fb      	ldr	r3, [r7, #28]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3720      	adds	r7, #32
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}

0800c58a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c58a:	b580      	push	{r7, lr}
 800c58c:	b086      	sub	sp, #24
 800c58e:	af00      	add	r7, sp, #0
 800c590:	6078      	str	r0, [r7, #4]
 800c592:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f023 0301 	bic.w	r3, r3, #1
 800c59a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f003 0301 	and.w	r3, r3, #1
 800c5a2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5a8:	f3ef 8305 	mrs	r3, IPSR
 800c5ac:	60bb      	str	r3, [r7, #8]
  return(result);
 800c5ae:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d003      	beq.n	800c5bc <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c5b4:	f06f 0305 	mvn.w	r3, #5
 800c5b8:	617b      	str	r3, [r7, #20]
 800c5ba:	e02c      	b.n	800c616 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d103      	bne.n	800c5ca <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c5c2:	f06f 0303 	mvn.w	r3, #3
 800c5c6:	617b      	str	r3, [r7, #20]
 800c5c8:	e025      	b.n	800c616 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d011      	beq.n	800c5f4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c5d0:	6839      	ldr	r1, [r7, #0]
 800c5d2:	6938      	ldr	r0, [r7, #16]
 800c5d4:	f000 ff51 	bl	800d47a <xQueueTakeMutexRecursive>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d01b      	beq.n	800c616 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d003      	beq.n	800c5ec <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c5e4:	f06f 0301 	mvn.w	r3, #1
 800c5e8:	617b      	str	r3, [r7, #20]
 800c5ea:	e014      	b.n	800c616 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c5ec:	f06f 0302 	mvn.w	r3, #2
 800c5f0:	617b      	str	r3, [r7, #20]
 800c5f2:	e010      	b.n	800c616 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c5f4:	6839      	ldr	r1, [r7, #0]
 800c5f6:	6938      	ldr	r0, [r7, #16]
 800c5f8:	f001 f9f8 	bl	800d9ec <xQueueSemaphoreTake>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d009      	beq.n	800c616 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d003      	beq.n	800c610 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c608:	f06f 0301 	mvn.w	r3, #1
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	e002      	b.n	800c616 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c610:	f06f 0302 	mvn.w	r3, #2
 800c614:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c616:	697b      	ldr	r3, [r7, #20]
}
 800c618:	4618      	mov	r0, r3
 800c61a:	3718      	adds	r7, #24
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f023 0301 	bic.w	r3, r3, #1
 800c62e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f003 0301 	and.w	r3, r3, #1
 800c636:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c638:	2300      	movs	r3, #0
 800c63a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c63c:	f3ef 8305 	mrs	r3, IPSR
 800c640:	60bb      	str	r3, [r7, #8]
  return(result);
 800c642:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c644:	2b00      	cmp	r3, #0
 800c646:	d003      	beq.n	800c650 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c648:	f06f 0305 	mvn.w	r3, #5
 800c64c:	617b      	str	r3, [r7, #20]
 800c64e:	e01f      	b.n	800c690 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c656:	f06f 0303 	mvn.w	r3, #3
 800c65a:	617b      	str	r3, [r7, #20]
 800c65c:	e018      	b.n	800c690 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d009      	beq.n	800c678 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c664:	6938      	ldr	r0, [r7, #16]
 800c666:	f000 fed3 	bl	800d410 <xQueueGiveMutexRecursive>
 800c66a:	4603      	mov	r3, r0
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d00f      	beq.n	800c690 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c670:	f06f 0302 	mvn.w	r3, #2
 800c674:	617b      	str	r3, [r7, #20]
 800c676:	e00b      	b.n	800c690 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c678:	2300      	movs	r3, #0
 800c67a:	2200      	movs	r2, #0
 800c67c:	2100      	movs	r1, #0
 800c67e:	6938      	ldr	r0, [r7, #16]
 800c680:	f000 ff32 	bl	800d4e8 <xQueueGenericSend>
 800c684:	4603      	mov	r3, r0
 800c686:	2b01      	cmp	r3, #1
 800c688:	d002      	beq.n	800c690 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c68a:	f06f 0302 	mvn.w	r3, #2
 800c68e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c690:	697b      	ldr	r3, [r7, #20]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
	...

0800c69c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c69c:	b480      	push	{r7}
 800c69e:	b085      	sub	sp, #20
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	60f8      	str	r0, [r7, #12]
 800c6a4:	60b9      	str	r1, [r7, #8]
 800c6a6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6a8:	68fb      	ldr	r3, [r7, #12]
 800c6aa:	4a07      	ldr	r2, [pc, #28]	@ (800c6c8 <vApplicationGetIdleTaskMemory+0x2c>)
 800c6ac:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	4a06      	ldr	r2, [pc, #24]	@ (800c6cc <vApplicationGetIdleTaskMemory+0x30>)
 800c6b2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2280      	movs	r2, #128	@ 0x80
 800c6b8:	601a      	str	r2, [r3, #0]
}
 800c6ba:	bf00      	nop
 800c6bc:	3714      	adds	r7, #20
 800c6be:	46bd      	mov	sp, r7
 800c6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6c4:	4770      	bx	lr
 800c6c6:	bf00      	nop
 800c6c8:	24000b1c 	.word	0x24000b1c
 800c6cc:	24000bc4 	.word	0x24000bc4

0800c6d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c6d0:	b480      	push	{r7}
 800c6d2:	b085      	sub	sp, #20
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	60f8      	str	r0, [r7, #12]
 800c6d8:	60b9      	str	r1, [r7, #8]
 800c6da:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	4a07      	ldr	r2, [pc, #28]	@ (800c6fc <vApplicationGetTimerTaskMemory+0x2c>)
 800c6e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	4a06      	ldr	r2, [pc, #24]	@ (800c700 <vApplicationGetTimerTaskMemory+0x30>)
 800c6e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c6ee:	601a      	str	r2, [r3, #0]
}
 800c6f0:	bf00      	nop
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr
 800c6fc:	24000dc4 	.word	0x24000dc4
 800c700:	24000e6c 	.word	0x24000e6c

0800c704 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c704:	b580      	push	{r7, lr}
 800c706:	b08a      	sub	sp, #40	@ 0x28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c70c:	2300      	movs	r3, #0
 800c70e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c710:	f001 fe66 	bl	800e3e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c714:	4b5c      	ldr	r3, [pc, #368]	@ (800c888 <pvPortMalloc+0x184>)
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d101      	bne.n	800c720 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c71c:	f000 f924 	bl	800c968 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c720:	4b5a      	ldr	r3, [pc, #360]	@ (800c88c <pvPortMalloc+0x188>)
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4013      	ands	r3, r2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f040 8095 	bne.w	800c858 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d01e      	beq.n	800c772 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c734:	2208      	movs	r2, #8
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	4413      	add	r3, r2
 800c73a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f003 0307 	and.w	r3, r3, #7
 800c742:	2b00      	cmp	r3, #0
 800c744:	d015      	beq.n	800c772 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	f023 0307 	bic.w	r3, r3, #7
 800c74c:	3308      	adds	r3, #8
 800c74e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	f003 0307 	and.w	r3, r3, #7
 800c756:	2b00      	cmp	r3, #0
 800c758:	d00b      	beq.n	800c772 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c76c:	bf00      	nop
 800c76e:	bf00      	nop
 800c770:	e7fd      	b.n	800c76e <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d06f      	beq.n	800c858 <pvPortMalloc+0x154>
 800c778:	4b45      	ldr	r3, [pc, #276]	@ (800c890 <pvPortMalloc+0x18c>)
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	687a      	ldr	r2, [r7, #4]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d86a      	bhi.n	800c858 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c782:	4b44      	ldr	r3, [pc, #272]	@ (800c894 <pvPortMalloc+0x190>)
 800c784:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c786:	4b43      	ldr	r3, [pc, #268]	@ (800c894 <pvPortMalloc+0x190>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c78c:	e004      	b.n	800c798 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c78e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c790:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	429a      	cmp	r2, r3
 800c7a0:	d903      	bls.n	800c7aa <pvPortMalloc+0xa6>
 800c7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d1f1      	bne.n	800c78e <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c7aa:	4b37      	ldr	r3, [pc, #220]	@ (800c888 <pvPortMalloc+0x184>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d051      	beq.n	800c858 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c7b4:	6a3b      	ldr	r3, [r7, #32]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	2208      	movs	r2, #8
 800c7ba:	4413      	add	r3, r2
 800c7bc:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c0:	681a      	ldr	r2, [r3, #0]
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c7c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7c8:	685a      	ldr	r2, [r3, #4]
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	1ad2      	subs	r2, r2, r3
 800c7ce:	2308      	movs	r3, #8
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	429a      	cmp	r2, r3
 800c7d4:	d920      	bls.n	800c818 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c7d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	4413      	add	r3, r2
 800c7dc:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	f003 0307 	and.w	r3, r3, #7
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d00b      	beq.n	800c800 <pvPortMalloc+0xfc>
	__asm volatile
 800c7e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	613b      	str	r3, [r7, #16]
}
 800c7fa:	bf00      	nop
 800c7fc:	bf00      	nop
 800c7fe:	e7fd      	b.n	800c7fc <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c802:	685a      	ldr	r2, [r3, #4]
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	1ad2      	subs	r2, r2, r3
 800c808:	69bb      	ldr	r3, [r7, #24]
 800c80a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c80c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c812:	69b8      	ldr	r0, [r7, #24]
 800c814:	f000 f90a 	bl	800ca2c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c818:	4b1d      	ldr	r3, [pc, #116]	@ (800c890 <pvPortMalloc+0x18c>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	1ad3      	subs	r3, r2, r3
 800c822:	4a1b      	ldr	r2, [pc, #108]	@ (800c890 <pvPortMalloc+0x18c>)
 800c824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c826:	4b1a      	ldr	r3, [pc, #104]	@ (800c890 <pvPortMalloc+0x18c>)
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	4b1b      	ldr	r3, [pc, #108]	@ (800c898 <pvPortMalloc+0x194>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	429a      	cmp	r2, r3
 800c830:	d203      	bcs.n	800c83a <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c832:	4b17      	ldr	r3, [pc, #92]	@ (800c890 <pvPortMalloc+0x18c>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	4a18      	ldr	r2, [pc, #96]	@ (800c898 <pvPortMalloc+0x194>)
 800c838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c83c:	685a      	ldr	r2, [r3, #4]
 800c83e:	4b13      	ldr	r3, [pc, #76]	@ (800c88c <pvPortMalloc+0x188>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	431a      	orrs	r2, r3
 800c844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c84a:	2200      	movs	r2, #0
 800c84c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c84e:	4b13      	ldr	r3, [pc, #76]	@ (800c89c <pvPortMalloc+0x198>)
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	3301      	adds	r3, #1
 800c854:	4a11      	ldr	r2, [pc, #68]	@ (800c89c <pvPortMalloc+0x198>)
 800c856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c858:	f001 fdd0 	bl	800e3fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c85c:	69fb      	ldr	r3, [r7, #28]
 800c85e:	f003 0307 	and.w	r3, r3, #7
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00b      	beq.n	800c87e <pvPortMalloc+0x17a>
	__asm volatile
 800c866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c86a:	f383 8811 	msr	BASEPRI, r3
 800c86e:	f3bf 8f6f 	isb	sy
 800c872:	f3bf 8f4f 	dsb	sy
 800c876:	60fb      	str	r3, [r7, #12]
}
 800c878:	bf00      	nop
 800c87a:	bf00      	nop
 800c87c:	e7fd      	b.n	800c87a <pvPortMalloc+0x176>
	return pvReturn;
 800c87e:	69fb      	ldr	r3, [r7, #28]
}
 800c880:	4618      	mov	r0, r3
 800c882:	3728      	adds	r7, #40	@ 0x28
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	24004e74 	.word	0x24004e74
 800c88c:	24004e88 	.word	0x24004e88
 800c890:	24004e78 	.word	0x24004e78
 800c894:	24004e6c 	.word	0x24004e6c
 800c898:	24004e7c 	.word	0x24004e7c
 800c89c:	24004e80 	.word	0x24004e80

0800c8a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b086      	sub	sp, #24
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d04f      	beq.n	800c952 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c8b2:	2308      	movs	r3, #8
 800c8b4:	425b      	negs	r3, r3
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	4413      	add	r3, r2
 800c8ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c8bc:	697b      	ldr	r3, [r7, #20]
 800c8be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	685a      	ldr	r2, [r3, #4]
 800c8c4:	4b25      	ldr	r3, [pc, #148]	@ (800c95c <vPortFree+0xbc>)
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	4013      	ands	r3, r2
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d10b      	bne.n	800c8e6 <vPortFree+0x46>
	__asm volatile
 800c8ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d2:	f383 8811 	msr	BASEPRI, r3
 800c8d6:	f3bf 8f6f 	isb	sy
 800c8da:	f3bf 8f4f 	dsb	sy
 800c8de:	60fb      	str	r3, [r7, #12]
}
 800c8e0:	bf00      	nop
 800c8e2:	bf00      	nop
 800c8e4:	e7fd      	b.n	800c8e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <vPortFree+0x66>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60bb      	str	r3, [r7, #8]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c906:	693b      	ldr	r3, [r7, #16]
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	4b14      	ldr	r3, [pc, #80]	@ (800c95c <vPortFree+0xbc>)
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	4013      	ands	r3, r2
 800c910:	2b00      	cmp	r3, #0
 800c912:	d01e      	beq.n	800c952 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	2b00      	cmp	r3, #0
 800c91a:	d11a      	bne.n	800c952 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	685a      	ldr	r2, [r3, #4]
 800c920:	4b0e      	ldr	r3, [pc, #56]	@ (800c95c <vPortFree+0xbc>)
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	43db      	mvns	r3, r3
 800c926:	401a      	ands	r2, r3
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c92c:	f001 fd58 	bl	800e3e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	685a      	ldr	r2, [r3, #4]
 800c934:	4b0a      	ldr	r3, [pc, #40]	@ (800c960 <vPortFree+0xc0>)
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	4413      	add	r3, r2
 800c93a:	4a09      	ldr	r2, [pc, #36]	@ (800c960 <vPortFree+0xc0>)
 800c93c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c93e:	6938      	ldr	r0, [r7, #16]
 800c940:	f000 f874 	bl	800ca2c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c944:	4b07      	ldr	r3, [pc, #28]	@ (800c964 <vPortFree+0xc4>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	3301      	adds	r3, #1
 800c94a:	4a06      	ldr	r2, [pc, #24]	@ (800c964 <vPortFree+0xc4>)
 800c94c:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c94e:	f001 fd55 	bl	800e3fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c952:	bf00      	nop
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	24004e88 	.word	0x24004e88
 800c960:	24004e78 	.word	0x24004e78
 800c964:	24004e84 	.word	0x24004e84

0800c968 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c968:	b480      	push	{r7}
 800c96a:	b085      	sub	sp, #20
 800c96c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c96e:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800c972:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c974:	4b27      	ldr	r3, [pc, #156]	@ (800ca14 <prvHeapInit+0xac>)
 800c976:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	f003 0307 	and.w	r3, r3, #7
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d00c      	beq.n	800c99c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	3307      	adds	r3, #7
 800c986:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	f023 0307 	bic.w	r3, r3, #7
 800c98e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	1ad3      	subs	r3, r2, r3
 800c996:	4a1f      	ldr	r2, [pc, #124]	@ (800ca14 <prvHeapInit+0xac>)
 800c998:	4413      	add	r3, r2
 800c99a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c9a0:	4a1d      	ldr	r2, [pc, #116]	@ (800ca18 <prvHeapInit+0xb0>)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c9a6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca18 <prvHeapInit+0xb0>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c9b4:	2208      	movs	r2, #8
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	1a9b      	subs	r3, r3, r2
 800c9ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f023 0307 	bic.w	r3, r3, #7
 800c9c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	4a15      	ldr	r2, [pc, #84]	@ (800ca1c <prvHeapInit+0xb4>)
 800c9c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c9ca:	4b14      	ldr	r3, [pc, #80]	@ (800ca1c <prvHeapInit+0xb4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c9d2:	4b12      	ldr	r3, [pc, #72]	@ (800ca1c <prvHeapInit+0xb4>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	68fa      	ldr	r2, [r7, #12]
 800c9e2:	1ad2      	subs	r2, r2, r3
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c9e8:	4b0c      	ldr	r3, [pc, #48]	@ (800ca1c <prvHeapInit+0xb4>)
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	683b      	ldr	r3, [r7, #0]
 800c9ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	4a0a      	ldr	r2, [pc, #40]	@ (800ca20 <prvHeapInit+0xb8>)
 800c9f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c9f8:	683b      	ldr	r3, [r7, #0]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	4a09      	ldr	r2, [pc, #36]	@ (800ca24 <prvHeapInit+0xbc>)
 800c9fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca00:	4b09      	ldr	r3, [pc, #36]	@ (800ca28 <prvHeapInit+0xc0>)
 800ca02:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca06:	601a      	str	r2, [r3, #0]
}
 800ca08:	bf00      	nop
 800ca0a:	3714      	adds	r7, #20
 800ca0c:	46bd      	mov	sp, r7
 800ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca12:	4770      	bx	lr
 800ca14:	2400126c 	.word	0x2400126c
 800ca18:	24004e6c 	.word	0x24004e6c
 800ca1c:	24004e74 	.word	0x24004e74
 800ca20:	24004e7c 	.word	0x24004e7c
 800ca24:	24004e78 	.word	0x24004e78
 800ca28:	24004e88 	.word	0x24004e88

0800ca2c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ca2c:	b480      	push	{r7}
 800ca2e:	b085      	sub	sp, #20
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ca34:	4b28      	ldr	r3, [pc, #160]	@ (800cad8 <prvInsertBlockIntoFreeList+0xac>)
 800ca36:	60fb      	str	r3, [r7, #12]
 800ca38:	e002      	b.n	800ca40 <prvInsertBlockIntoFreeList+0x14>
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	60fb      	str	r3, [r7, #12]
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	687a      	ldr	r2, [r7, #4]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d8f7      	bhi.n	800ca3a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	685b      	ldr	r3, [r3, #4]
 800ca52:	68ba      	ldr	r2, [r7, #8]
 800ca54:	4413      	add	r3, r2
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	429a      	cmp	r2, r3
 800ca5a:	d108      	bne.n	800ca6e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	685a      	ldr	r2, [r3, #4]
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	441a      	add	r2, r3
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	68ba      	ldr	r2, [r7, #8]
 800ca78:	441a      	add	r2, r3
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	429a      	cmp	r2, r3
 800ca80:	d118      	bne.n	800cab4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681a      	ldr	r2, [r3, #0]
 800ca86:	4b15      	ldr	r3, [pc, #84]	@ (800cadc <prvInsertBlockIntoFreeList+0xb0>)
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d00d      	beq.n	800caaa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	685a      	ldr	r2, [r3, #4]
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	441a      	add	r2, r3
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	681a      	ldr	r2, [r3, #0]
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	601a      	str	r2, [r3, #0]
 800caa8:	e008      	b.n	800cabc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800caaa:	4b0c      	ldr	r3, [pc, #48]	@ (800cadc <prvInsertBlockIntoFreeList+0xb0>)
 800caac:	681a      	ldr	r2, [r3, #0]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	601a      	str	r2, [r3, #0]
 800cab2:	e003      	b.n	800cabc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681a      	ldr	r2, [r3, #0]
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cabc:	68fa      	ldr	r2, [r7, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d002      	beq.n	800caca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800caca:	bf00      	nop
 800cacc:	3714      	adds	r7, #20
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr
 800cad6:	bf00      	nop
 800cad8:	24004e6c 	.word	0x24004e6c
 800cadc:	24004e74 	.word	0x24004e74

0800cae0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cae0:	b480      	push	{r7}
 800cae2:	b083      	sub	sp, #12
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f103 0208 	add.w	r2, r3, #8
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f04f 32ff 	mov.w	r2, #4294967295
 800caf8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f103 0208 	add.w	r2, r3, #8
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f103 0208 	add.w	r2, r3, #8
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	2200      	movs	r2, #0
 800cb12:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb14:	bf00      	nop
 800cb16:	370c      	adds	r7, #12
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1e:	4770      	bx	lr

0800cb20 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb20:	b480      	push	{r7}
 800cb22:	b083      	sub	sp, #12
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2200      	movs	r2, #0
 800cb2c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb2e:	bf00      	nop
 800cb30:	370c      	adds	r7, #12
 800cb32:	46bd      	mov	sp, r7
 800cb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb38:	4770      	bx	lr

0800cb3a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb3a:	b480      	push	{r7}
 800cb3c:	b085      	sub	sp, #20
 800cb3e:	af00      	add	r7, sp, #0
 800cb40:	6078      	str	r0, [r7, #4]
 800cb42:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	68fa      	ldr	r2, [r7, #12]
 800cb4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	689a      	ldr	r2, [r3, #8]
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	689b      	ldr	r3, [r3, #8]
 800cb5c:	683a      	ldr	r2, [r7, #0]
 800cb5e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	683a      	ldr	r2, [r7, #0]
 800cb64:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	687a      	ldr	r2, [r7, #4]
 800cb6a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	1c5a      	adds	r2, r3, #1
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	601a      	str	r2, [r3, #0]
}
 800cb76:	bf00      	nop
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr

0800cb82 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb82:	b480      	push	{r7}
 800cb84:	b085      	sub	sp, #20
 800cb86:	af00      	add	r7, sp, #0
 800cb88:	6078      	str	r0, [r7, #4]
 800cb8a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cb92:	68bb      	ldr	r3, [r7, #8]
 800cb94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cb98:	d103      	bne.n	800cba2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	691b      	ldr	r3, [r3, #16]
 800cb9e:	60fb      	str	r3, [r7, #12]
 800cba0:	e00c      	b.n	800cbbc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	3308      	adds	r3, #8
 800cba6:	60fb      	str	r3, [r7, #12]
 800cba8:	e002      	b.n	800cbb0 <vListInsert+0x2e>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	60fb      	str	r3, [r7, #12]
 800cbb0:	68fb      	ldr	r3, [r7, #12]
 800cbb2:	685b      	ldr	r3, [r3, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	68ba      	ldr	r2, [r7, #8]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d2f6      	bcs.n	800cbaa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	683b      	ldr	r3, [r7, #0]
 800cbc2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	683a      	ldr	r2, [r7, #0]
 800cbca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	68fa      	ldr	r2, [r7, #12]
 800cbd0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	687a      	ldr	r2, [r7, #4]
 800cbdc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	1c5a      	adds	r2, r3, #1
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	601a      	str	r2, [r3, #0]
}
 800cbe8:	bf00      	nop
 800cbea:	3714      	adds	r7, #20
 800cbec:	46bd      	mov	sp, r7
 800cbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf2:	4770      	bx	lr

0800cbf4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b085      	sub	sp, #20
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	691b      	ldr	r3, [r3, #16]
 800cc00:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	687a      	ldr	r2, [r7, #4]
 800cc08:	6892      	ldr	r2, [r2, #8]
 800cc0a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	687a      	ldr	r2, [r7, #4]
 800cc12:	6852      	ldr	r2, [r2, #4]
 800cc14:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d103      	bne.n	800cc28 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	689a      	ldr	r2, [r3, #8]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	1e5a      	subs	r2, r3, #1
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3714      	adds	r7, #20
 800cc40:	46bd      	mov	sp, r7
 800cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc46:	4770      	bx	lr

0800cc48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	60f8      	str	r0, [r7, #12]
 800cc50:	60b9      	str	r1, [r7, #8]
 800cc52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	3b04      	subs	r3, #4
 800cc58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cc60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	3b04      	subs	r3, #4
 800cc66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	f023 0201 	bic.w	r2, r3, #1
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	3b04      	subs	r3, #4
 800cc76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cc78:	4a0c      	ldr	r2, [pc, #48]	@ (800ccac <pxPortInitialiseStack+0x64>)
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3b14      	subs	r3, #20
 800cc82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cc84:	687a      	ldr	r2, [r7, #4]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	3b04      	subs	r3, #4
 800cc8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	f06f 0202 	mvn.w	r2, #2
 800cc96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	3b20      	subs	r3, #32
 800cc9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr
 800ccac:	0800ccb1 	.word	0x0800ccb1

0800ccb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ccba:	4b13      	ldr	r3, [pc, #76]	@ (800cd08 <prvTaskExitError+0x58>)
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ccc2:	d00b      	beq.n	800ccdc <prvTaskExitError+0x2c>
	__asm volatile
 800ccc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccc8:	f383 8811 	msr	BASEPRI, r3
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	f3bf 8f4f 	dsb	sy
 800ccd4:	60fb      	str	r3, [r7, #12]
}
 800ccd6:	bf00      	nop
 800ccd8:	bf00      	nop
 800ccda:	e7fd      	b.n	800ccd8 <prvTaskExitError+0x28>
	__asm volatile
 800ccdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cce0:	f383 8811 	msr	BASEPRI, r3
 800cce4:	f3bf 8f6f 	isb	sy
 800cce8:	f3bf 8f4f 	dsb	sy
 800ccec:	60bb      	str	r3, [r7, #8]
}
 800ccee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ccf0:	bf00      	nop
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d0fc      	beq.n	800ccf2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ccf8:	bf00      	nop
 800ccfa:	bf00      	nop
 800ccfc:	3714      	adds	r7, #20
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd04:	4770      	bx	lr
 800cd06:	bf00      	nop
 800cd08:	24000150 	.word	0x24000150
 800cd0c:	00000000 	.word	0x00000000

0800cd10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cd10:	4b07      	ldr	r3, [pc, #28]	@ (800cd30 <pxCurrentTCBConst2>)
 800cd12:	6819      	ldr	r1, [r3, #0]
 800cd14:	6808      	ldr	r0, [r1, #0]
 800cd16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1a:	f380 8809 	msr	PSP, r0
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f04f 0000 	mov.w	r0, #0
 800cd26:	f380 8811 	msr	BASEPRI, r0
 800cd2a:	4770      	bx	lr
 800cd2c:	f3af 8000 	nop.w

0800cd30 <pxCurrentTCBConst2>:
 800cd30:	24004ed4 	.word	0x24004ed4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cd34:	bf00      	nop
 800cd36:	bf00      	nop

0800cd38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cd38:	4808      	ldr	r0, [pc, #32]	@ (800cd5c <prvPortStartFirstTask+0x24>)
 800cd3a:	6800      	ldr	r0, [r0, #0]
 800cd3c:	6800      	ldr	r0, [r0, #0]
 800cd3e:	f380 8808 	msr	MSP, r0
 800cd42:	f04f 0000 	mov.w	r0, #0
 800cd46:	f380 8814 	msr	CONTROL, r0
 800cd4a:	b662      	cpsie	i
 800cd4c:	b661      	cpsie	f
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	f3bf 8f6f 	isb	sy
 800cd56:	df00      	svc	0
 800cd58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cd5a:	bf00      	nop
 800cd5c:	e000ed08 	.word	0xe000ed08

0800cd60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cd60:	b580      	push	{r7, lr}
 800cd62:	b086      	sub	sp, #24
 800cd64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cd66:	4b47      	ldr	r3, [pc, #284]	@ (800ce84 <xPortStartScheduler+0x124>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	4a47      	ldr	r2, [pc, #284]	@ (800ce88 <xPortStartScheduler+0x128>)
 800cd6c:	4293      	cmp	r3, r2
 800cd6e:	d10b      	bne.n	800cd88 <xPortStartScheduler+0x28>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	613b      	str	r3, [r7, #16]
}
 800cd82:	bf00      	nop
 800cd84:	bf00      	nop
 800cd86:	e7fd      	b.n	800cd84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cd88:	4b3e      	ldr	r3, [pc, #248]	@ (800ce84 <xPortStartScheduler+0x124>)
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a3f      	ldr	r2, [pc, #252]	@ (800ce8c <xPortStartScheduler+0x12c>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d10b      	bne.n	800cdaa <xPortStartScheduler+0x4a>
	__asm volatile
 800cd92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	60fb      	str	r3, [r7, #12]
}
 800cda4:	bf00      	nop
 800cda6:	bf00      	nop
 800cda8:	e7fd      	b.n	800cda6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cdaa:	4b39      	ldr	r3, [pc, #228]	@ (800ce90 <xPortStartScheduler+0x130>)
 800cdac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cdae:	697b      	ldr	r3, [r7, #20]
 800cdb0:	781b      	ldrb	r3, [r3, #0]
 800cdb2:	b2db      	uxtb	r3, r3
 800cdb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cdb6:	697b      	ldr	r3, [r7, #20]
 800cdb8:	22ff      	movs	r2, #255	@ 0xff
 800cdba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	781b      	ldrb	r3, [r3, #0]
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cdc4:	78fb      	ldrb	r3, [r7, #3]
 800cdc6:	b2db      	uxtb	r3, r3
 800cdc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cdcc:	b2da      	uxtb	r2, r3
 800cdce:	4b31      	ldr	r3, [pc, #196]	@ (800ce94 <xPortStartScheduler+0x134>)
 800cdd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cdd2:	4b31      	ldr	r3, [pc, #196]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cdd4:	2207      	movs	r2, #7
 800cdd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdd8:	e009      	b.n	800cdee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cdda:	4b2f      	ldr	r3, [pc, #188]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	3b01      	subs	r3, #1
 800cde0:	4a2d      	ldr	r2, [pc, #180]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cde2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cde4:	78fb      	ldrb	r3, [r7, #3]
 800cde6:	b2db      	uxtb	r3, r3
 800cde8:	005b      	lsls	r3, r3, #1
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cdee:	78fb      	ldrb	r3, [r7, #3]
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cdf6:	2b80      	cmp	r3, #128	@ 0x80
 800cdf8:	d0ef      	beq.n	800cdda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cdfa:	4b27      	ldr	r3, [pc, #156]	@ (800ce98 <xPortStartScheduler+0x138>)
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f1c3 0307 	rsb	r3, r3, #7
 800ce02:	2b04      	cmp	r3, #4
 800ce04:	d00b      	beq.n	800ce1e <xPortStartScheduler+0xbe>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	60bb      	str	r3, [r7, #8]
}
 800ce18:	bf00      	nop
 800ce1a:	bf00      	nop
 800ce1c:	e7fd      	b.n	800ce1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ce1e:	4b1e      	ldr	r3, [pc, #120]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	021b      	lsls	r3, r3, #8
 800ce24:	4a1c      	ldr	r2, [pc, #112]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ce28:	4b1b      	ldr	r3, [pc, #108]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ce30:	4a19      	ldr	r2, [pc, #100]	@ (800ce98 <xPortStartScheduler+0x138>)
 800ce32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	b2da      	uxtb	r2, r3
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ce3c:	4b17      	ldr	r3, [pc, #92]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a16      	ldr	r2, [pc, #88]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800ce46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ce48:	4b14      	ldr	r3, [pc, #80]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	4a13      	ldr	r2, [pc, #76]	@ (800ce9c <xPortStartScheduler+0x13c>)
 800ce4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ce52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ce54:	f000 f8da 	bl	800d00c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ce58:	4b11      	ldr	r3, [pc, #68]	@ (800cea0 <xPortStartScheduler+0x140>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ce5e:	f000 f8f9 	bl	800d054 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ce62:	4b10      	ldr	r3, [pc, #64]	@ (800cea4 <xPortStartScheduler+0x144>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	4a0f      	ldr	r2, [pc, #60]	@ (800cea4 <xPortStartScheduler+0x144>)
 800ce68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800ce6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ce6e:	f7ff ff63 	bl	800cd38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ce72:	f001 fc2b 	bl	800e6cc <vTaskSwitchContext>
	prvTaskExitError();
 800ce76:	f7ff ff1b 	bl	800ccb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ce7a:	2300      	movs	r3, #0
}
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	3718      	adds	r7, #24
 800ce80:	46bd      	mov	sp, r7
 800ce82:	bd80      	pop	{r7, pc}
 800ce84:	e000ed00 	.word	0xe000ed00
 800ce88:	410fc271 	.word	0x410fc271
 800ce8c:	410fc270 	.word	0x410fc270
 800ce90:	e000e400 	.word	0xe000e400
 800ce94:	24004e8c 	.word	0x24004e8c
 800ce98:	24004e90 	.word	0x24004e90
 800ce9c:	e000ed20 	.word	0xe000ed20
 800cea0:	24000150 	.word	0x24000150
 800cea4:	e000ef34 	.word	0xe000ef34

0800cea8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cea8:	b480      	push	{r7}
 800ceaa:	b083      	sub	sp, #12
 800ceac:	af00      	add	r7, sp, #0
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	607b      	str	r3, [r7, #4]
}
 800cec0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cec2:	4b10      	ldr	r3, [pc, #64]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	3301      	adds	r3, #1
 800cec8:	4a0e      	ldr	r2, [pc, #56]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800ceca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cecc:	4b0d      	ldr	r3, [pc, #52]	@ (800cf04 <vPortEnterCritical+0x5c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	2b01      	cmp	r3, #1
 800ced2:	d110      	bne.n	800cef6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ced4:	4b0c      	ldr	r3, [pc, #48]	@ (800cf08 <vPortEnterCritical+0x60>)
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	b2db      	uxtb	r3, r3
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d00b      	beq.n	800cef6 <vPortEnterCritical+0x4e>
	__asm volatile
 800cede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cee2:	f383 8811 	msr	BASEPRI, r3
 800cee6:	f3bf 8f6f 	isb	sy
 800ceea:	f3bf 8f4f 	dsb	sy
 800ceee:	603b      	str	r3, [r7, #0]
}
 800cef0:	bf00      	nop
 800cef2:	bf00      	nop
 800cef4:	e7fd      	b.n	800cef2 <vPortEnterCritical+0x4a>
	}
}
 800cef6:	bf00      	nop
 800cef8:	370c      	adds	r7, #12
 800cefa:	46bd      	mov	sp, r7
 800cefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf00:	4770      	bx	lr
 800cf02:	bf00      	nop
 800cf04:	24000150 	.word	0x24000150
 800cf08:	e000ed04 	.word	0xe000ed04

0800cf0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cf12:	4b12      	ldr	r3, [pc, #72]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10b      	bne.n	800cf32 <vPortExitCritical+0x26>
	__asm volatile
 800cf1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	607b      	str	r3, [r7, #4]
}
 800cf2c:	bf00      	nop
 800cf2e:	bf00      	nop
 800cf30:	e7fd      	b.n	800cf2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cf32:	4b0a      	ldr	r3, [pc, #40]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	3b01      	subs	r3, #1
 800cf38:	4a08      	ldr	r2, [pc, #32]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cf3c:	4b07      	ldr	r3, [pc, #28]	@ (800cf5c <vPortExitCritical+0x50>)
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d105      	bne.n	800cf50 <vPortExitCritical+0x44>
 800cf44:	2300      	movs	r3, #0
 800cf46:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cf48:	683b      	ldr	r3, [r7, #0]
 800cf4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800cf4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cf50:	bf00      	nop
 800cf52:	370c      	adds	r7, #12
 800cf54:	46bd      	mov	sp, r7
 800cf56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf5a:	4770      	bx	lr
 800cf5c:	24000150 	.word	0x24000150

0800cf60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cf60:	f3ef 8009 	mrs	r0, PSP
 800cf64:	f3bf 8f6f 	isb	sy
 800cf68:	4b15      	ldr	r3, [pc, #84]	@ (800cfc0 <pxCurrentTCBConst>)
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	f01e 0f10 	tst.w	lr, #16
 800cf70:	bf08      	it	eq
 800cf72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cf76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf7a:	6010      	str	r0, [r2, #0]
 800cf7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cf80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800cf84:	f380 8811 	msr	BASEPRI, r0
 800cf88:	f3bf 8f4f 	dsb	sy
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f001 fb9c 	bl	800e6cc <vTaskSwitchContext>
 800cf94:	f04f 0000 	mov.w	r0, #0
 800cf98:	f380 8811 	msr	BASEPRI, r0
 800cf9c:	bc09      	pop	{r0, r3}
 800cf9e:	6819      	ldr	r1, [r3, #0]
 800cfa0:	6808      	ldr	r0, [r1, #0]
 800cfa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfa6:	f01e 0f10 	tst.w	lr, #16
 800cfaa:	bf08      	it	eq
 800cfac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cfb0:	f380 8809 	msr	PSP, r0
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	f3af 8000 	nop.w

0800cfc0 <pxCurrentTCBConst>:
 800cfc0:	24004ed4 	.word	0x24004ed4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cfc4:	bf00      	nop
 800cfc6:	bf00      	nop

0800cfc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b082      	sub	sp, #8
 800cfcc:	af00      	add	r7, sp, #0
	__asm volatile
 800cfce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfd2:	f383 8811 	msr	BASEPRI, r3
 800cfd6:	f3bf 8f6f 	isb	sy
 800cfda:	f3bf 8f4f 	dsb	sy
 800cfde:	607b      	str	r3, [r7, #4]
}
 800cfe0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cfe2:	f001 fab9 	bl	800e558 <xTaskIncrementTick>
 800cfe6:	4603      	mov	r3, r0
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d003      	beq.n	800cff4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cfec:	4b06      	ldr	r3, [pc, #24]	@ (800d008 <xPortSysTickHandler+0x40>)
 800cfee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	2300      	movs	r3, #0
 800cff6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cff8:	683b      	ldr	r3, [r7, #0]
 800cffa:	f383 8811 	msr	BASEPRI, r3
}
 800cffe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d000:	bf00      	nop
 800d002:	3708      	adds	r7, #8
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}
 800d008:	e000ed04 	.word	0xe000ed04

0800d00c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d00c:	b480      	push	{r7}
 800d00e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d010:	4b0b      	ldr	r3, [pc, #44]	@ (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d016:	4b0b      	ldr	r3, [pc, #44]	@ (800d044 <vPortSetupTimerInterrupt+0x38>)
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d01c:	4b0a      	ldr	r3, [pc, #40]	@ (800d048 <vPortSetupTimerInterrupt+0x3c>)
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4a0a      	ldr	r2, [pc, #40]	@ (800d04c <vPortSetupTimerInterrupt+0x40>)
 800d022:	fba2 2303 	umull	r2, r3, r2, r3
 800d026:	099b      	lsrs	r3, r3, #6
 800d028:	4a09      	ldr	r2, [pc, #36]	@ (800d050 <vPortSetupTimerInterrupt+0x44>)
 800d02a:	3b01      	subs	r3, #1
 800d02c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d02e:	4b04      	ldr	r3, [pc, #16]	@ (800d040 <vPortSetupTimerInterrupt+0x34>)
 800d030:	2207      	movs	r2, #7
 800d032:	601a      	str	r2, [r3, #0]
}
 800d034:	bf00      	nop
 800d036:	46bd      	mov	sp, r7
 800d038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03c:	4770      	bx	lr
 800d03e:	bf00      	nop
 800d040:	e000e010 	.word	0xe000e010
 800d044:	e000e018 	.word	0xe000e018
 800d048:	24000000 	.word	0x24000000
 800d04c:	10624dd3 	.word	0x10624dd3
 800d050:	e000e014 	.word	0xe000e014

0800d054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d054:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d064 <vPortEnableVFP+0x10>
 800d058:	6801      	ldr	r1, [r0, #0]
 800d05a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d05e:	6001      	str	r1, [r0, #0]
 800d060:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d062:	bf00      	nop
 800d064:	e000ed88 	.word	0xe000ed88

0800d068 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d068:	b480      	push	{r7}
 800d06a:	b085      	sub	sp, #20
 800d06c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d06e:	f3ef 8305 	mrs	r3, IPSR
 800d072:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d074:	68fb      	ldr	r3, [r7, #12]
 800d076:	2b0f      	cmp	r3, #15
 800d078:	d915      	bls.n	800d0a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d07a:	4a18      	ldr	r2, [pc, #96]	@ (800d0dc <vPortValidateInterruptPriority+0x74>)
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	4413      	add	r3, r2
 800d080:	781b      	ldrb	r3, [r3, #0]
 800d082:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d084:	4b16      	ldr	r3, [pc, #88]	@ (800d0e0 <vPortValidateInterruptPriority+0x78>)
 800d086:	781b      	ldrb	r3, [r3, #0]
 800d088:	7afa      	ldrb	r2, [r7, #11]
 800d08a:	429a      	cmp	r2, r3
 800d08c:	d20b      	bcs.n	800d0a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d08e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d092:	f383 8811 	msr	BASEPRI, r3
 800d096:	f3bf 8f6f 	isb	sy
 800d09a:	f3bf 8f4f 	dsb	sy
 800d09e:	607b      	str	r3, [r7, #4]
}
 800d0a0:	bf00      	nop
 800d0a2:	bf00      	nop
 800d0a4:	e7fd      	b.n	800d0a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d0a6:	4b0f      	ldr	r3, [pc, #60]	@ (800d0e4 <vPortValidateInterruptPriority+0x7c>)
 800d0a8:	681b      	ldr	r3, [r3, #0]
 800d0aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d0ae:	4b0e      	ldr	r3, [pc, #56]	@ (800d0e8 <vPortValidateInterruptPriority+0x80>)
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	429a      	cmp	r2, r3
 800d0b4:	d90b      	bls.n	800d0ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d0b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0ba:	f383 8811 	msr	BASEPRI, r3
 800d0be:	f3bf 8f6f 	isb	sy
 800d0c2:	f3bf 8f4f 	dsb	sy
 800d0c6:	603b      	str	r3, [r7, #0]
}
 800d0c8:	bf00      	nop
 800d0ca:	bf00      	nop
 800d0cc:	e7fd      	b.n	800d0ca <vPortValidateInterruptPriority+0x62>
	}
 800d0ce:	bf00      	nop
 800d0d0:	3714      	adds	r7, #20
 800d0d2:	46bd      	mov	sp, r7
 800d0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d8:	4770      	bx	lr
 800d0da:	bf00      	nop
 800d0dc:	e000e3f0 	.word	0xe000e3f0
 800d0e0:	24004e8c 	.word	0x24004e8c
 800d0e4:	e000ed0c 	.word	0xe000ed0c
 800d0e8:	24004e90 	.word	0x24004e90

0800d0ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d10b      	bne.n	800d118 <xQueueGenericReset+0x2c>
	__asm volatile
 800d100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d104:	f383 8811 	msr	BASEPRI, r3
 800d108:	f3bf 8f6f 	isb	sy
 800d10c:	f3bf 8f4f 	dsb	sy
 800d110:	60bb      	str	r3, [r7, #8]
}
 800d112:	bf00      	nop
 800d114:	bf00      	nop
 800d116:	e7fd      	b.n	800d114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d118:	f7ff fec6 	bl	800cea8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	681a      	ldr	r2, [r3, #0]
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d124:	68f9      	ldr	r1, [r7, #12]
 800d126:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d128:	fb01 f303 	mul.w	r3, r1, r3
 800d12c:	441a      	add	r2, r3
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	2200      	movs	r2, #0
 800d136:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681a      	ldr	r2, [r3, #0]
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	681a      	ldr	r2, [r3, #0]
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d148:	3b01      	subs	r3, #1
 800d14a:	68f9      	ldr	r1, [r7, #12]
 800d14c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d14e:	fb01 f303 	mul.w	r3, r1, r3
 800d152:	441a      	add	r2, r3
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	22ff      	movs	r2, #255	@ 0xff
 800d15c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	22ff      	movs	r2, #255	@ 0xff
 800d164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d114      	bne.n	800d198 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	691b      	ldr	r3, [r3, #16]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d01a      	beq.n	800d1ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	3310      	adds	r3, #16
 800d17a:	4618      	mov	r0, r3
 800d17c:	f001 fb5e 	bl	800e83c <xTaskRemoveFromEventList>
 800d180:	4603      	mov	r3, r0
 800d182:	2b00      	cmp	r3, #0
 800d184:	d012      	beq.n	800d1ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d186:	4b0d      	ldr	r3, [pc, #52]	@ (800d1bc <xQueueGenericReset+0xd0>)
 800d188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d18c:	601a      	str	r2, [r3, #0]
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	f3bf 8f6f 	isb	sy
 800d196:	e009      	b.n	800d1ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	3310      	adds	r3, #16
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7ff fc9f 	bl	800cae0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	3324      	adds	r3, #36	@ 0x24
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7ff fc9a 	bl	800cae0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d1ac:	f7ff feae 	bl	800cf0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d1b0:	2301      	movs	r3, #1
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	e000ed04 	.word	0xe000ed04

0800d1c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08e      	sub	sp, #56	@ 0x38
 800d1c4:	af02      	add	r7, sp, #8
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
 800d1cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d10b      	bne.n	800d1ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d1d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d8:	f383 8811 	msr	BASEPRI, r3
 800d1dc:	f3bf 8f6f 	isb	sy
 800d1e0:	f3bf 8f4f 	dsb	sy
 800d1e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d1e6:	bf00      	nop
 800d1e8:	bf00      	nop
 800d1ea:	e7fd      	b.n	800d1e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d10b      	bne.n	800d20a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d204:	bf00      	nop
 800d206:	bf00      	nop
 800d208:	e7fd      	b.n	800d206 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d002      	beq.n	800d216 <xQueueGenericCreateStatic+0x56>
 800d210:	68bb      	ldr	r3, [r7, #8]
 800d212:	2b00      	cmp	r3, #0
 800d214:	d001      	beq.n	800d21a <xQueueGenericCreateStatic+0x5a>
 800d216:	2301      	movs	r3, #1
 800d218:	e000      	b.n	800d21c <xQueueGenericCreateStatic+0x5c>
 800d21a:	2300      	movs	r3, #0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d10b      	bne.n	800d238 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	623b      	str	r3, [r7, #32]
}
 800d232:	bf00      	nop
 800d234:	bf00      	nop
 800d236:	e7fd      	b.n	800d234 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	2b00      	cmp	r3, #0
 800d23c:	d102      	bne.n	800d244 <xQueueGenericCreateStatic+0x84>
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d101      	bne.n	800d248 <xQueueGenericCreateStatic+0x88>
 800d244:	2301      	movs	r3, #1
 800d246:	e000      	b.n	800d24a <xQueueGenericCreateStatic+0x8a>
 800d248:	2300      	movs	r3, #0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10b      	bne.n	800d266 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	61fb      	str	r3, [r7, #28]
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	e7fd      	b.n	800d262 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d266:	2350      	movs	r3, #80	@ 0x50
 800d268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	2b50      	cmp	r3, #80	@ 0x50
 800d26e:	d00b      	beq.n	800d288 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d274:	f383 8811 	msr	BASEPRI, r3
 800d278:	f3bf 8f6f 	isb	sy
 800d27c:	f3bf 8f4f 	dsb	sy
 800d280:	61bb      	str	r3, [r7, #24]
}
 800d282:	bf00      	nop
 800d284:	bf00      	nop
 800d286:	e7fd      	b.n	800d284 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d288:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00d      	beq.n	800d2b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d296:	2201      	movs	r2, #1
 800d298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d29c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	68b9      	ldr	r1, [r7, #8]
 800d2aa:	68f8      	ldr	r0, [r7, #12]
 800d2ac:	f000 f840 	bl	800d330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3730      	adds	r7, #48	@ 0x30
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	bd80      	pop	{r7, pc}

0800d2ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d2ba:	b580      	push	{r7, lr}
 800d2bc:	b08a      	sub	sp, #40	@ 0x28
 800d2be:	af02      	add	r7, sp, #8
 800d2c0:	60f8      	str	r0, [r7, #12]
 800d2c2:	60b9      	str	r1, [r7, #8]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d10b      	bne.n	800d2e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d2ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d2:	f383 8811 	msr	BASEPRI, r3
 800d2d6:	f3bf 8f6f 	isb	sy
 800d2da:	f3bf 8f4f 	dsb	sy
 800d2de:	613b      	str	r3, [r7, #16]
}
 800d2e0:	bf00      	nop
 800d2e2:	bf00      	nop
 800d2e4:	e7fd      	b.n	800d2e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	68ba      	ldr	r2, [r7, #8]
 800d2ea:	fb02 f303 	mul.w	r3, r2, r3
 800d2ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	3350      	adds	r3, #80	@ 0x50
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7ff fa05 	bl	800c704 <pvPortMalloc>
 800d2fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d2fc:	69bb      	ldr	r3, [r7, #24]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d011      	beq.n	800d326 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d302:	69bb      	ldr	r3, [r7, #24]
 800d304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	3350      	adds	r3, #80	@ 0x50
 800d30a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d30c:	69bb      	ldr	r3, [r7, #24]
 800d30e:	2200      	movs	r2, #0
 800d310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d314:	79fa      	ldrb	r2, [r7, #7]
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	4613      	mov	r3, r2
 800d31c:	697a      	ldr	r2, [r7, #20]
 800d31e:	68b9      	ldr	r1, [r7, #8]
 800d320:	68f8      	ldr	r0, [r7, #12]
 800d322:	f000 f805 	bl	800d330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d326:	69bb      	ldr	r3, [r7, #24]
	}
 800d328:	4618      	mov	r0, r3
 800d32a:	3720      	adds	r7, #32
 800d32c:	46bd      	mov	sp, r7
 800d32e:	bd80      	pop	{r7, pc}

0800d330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	60f8      	str	r0, [r7, #12]
 800d338:	60b9      	str	r1, [r7, #8]
 800d33a:	607a      	str	r2, [r7, #4]
 800d33c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d33e:	68bb      	ldr	r3, [r7, #8]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d103      	bne.n	800d34c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d344:	69bb      	ldr	r3, [r7, #24]
 800d346:	69ba      	ldr	r2, [r7, #24]
 800d348:	601a      	str	r2, [r3, #0]
 800d34a:	e002      	b.n	800d352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d352:	69bb      	ldr	r3, [r7, #24]
 800d354:	68fa      	ldr	r2, [r7, #12]
 800d356:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	68ba      	ldr	r2, [r7, #8]
 800d35c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d35e:	2101      	movs	r1, #1
 800d360:	69b8      	ldr	r0, [r7, #24]
 800d362:	f7ff fec3 	bl	800d0ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d366:	69bb      	ldr	r3, [r7, #24]
 800d368:	78fa      	ldrb	r2, [r7, #3]
 800d36a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d36e:	bf00      	nop
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d376:	b580      	push	{r7, lr}
 800d378:	b082      	sub	sp, #8
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00e      	beq.n	800d3a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2200      	movs	r2, #0
 800d388:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2200      	movs	r2, #0
 800d38e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d396:	2300      	movs	r3, #0
 800d398:	2200      	movs	r2, #0
 800d39a:	2100      	movs	r1, #0
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f8a3 	bl	800d4e8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3a2:	bf00      	nop
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b086      	sub	sp, #24
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	617b      	str	r3, [r7, #20]
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d3bc:	79fb      	ldrb	r3, [r7, #7]
 800d3be:	461a      	mov	r2, r3
 800d3c0:	6939      	ldr	r1, [r7, #16]
 800d3c2:	6978      	ldr	r0, [r7, #20]
 800d3c4:	f7ff ff79 	bl	800d2ba <xQueueGenericCreate>
 800d3c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d3ca:	68f8      	ldr	r0, [r7, #12]
 800d3cc:	f7ff ffd3 	bl	800d376 <prvInitialiseMutex>

		return xNewQueue;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
	}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}

0800d3da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d3da:	b580      	push	{r7, lr}
 800d3dc:	b088      	sub	sp, #32
 800d3de:	af02      	add	r7, sp, #8
 800d3e0:	4603      	mov	r3, r0
 800d3e2:	6039      	str	r1, [r7, #0]
 800d3e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d3e6:	2301      	movs	r3, #1
 800d3e8:	617b      	str	r3, [r7, #20]
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d3ee:	79fb      	ldrb	r3, [r7, #7]
 800d3f0:	9300      	str	r3, [sp, #0]
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	6939      	ldr	r1, [r7, #16]
 800d3f8:	6978      	ldr	r0, [r7, #20]
 800d3fa:	f7ff fee1 	bl	800d1c0 <xQueueGenericCreateStatic>
 800d3fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d400:	68f8      	ldr	r0, [r7, #12]
 800d402:	f7ff ffb8 	bl	800d376 <prvInitialiseMutex>

		return xNewQueue;
 800d406:	68fb      	ldr	r3, [r7, #12]
	}
 800d408:	4618      	mov	r0, r3
 800d40a:	3718      	adds	r7, #24
 800d40c:	46bd      	mov	sp, r7
 800d40e:	bd80      	pop	{r7, pc}

0800d410 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d410:	b590      	push	{r4, r7, lr}
 800d412:	b087      	sub	sp, #28
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10b      	bne.n	800d43a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d426:	f383 8811 	msr	BASEPRI, r3
 800d42a:	f3bf 8f6f 	isb	sy
 800d42e:	f3bf 8f4f 	dsb	sy
 800d432:	60fb      	str	r3, [r7, #12]
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop
 800d438:	e7fd      	b.n	800d436 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d43a:	693b      	ldr	r3, [r7, #16]
 800d43c:	689c      	ldr	r4, [r3, #8]
 800d43e:	f001 fbc3 	bl	800ebc8 <xTaskGetCurrentTaskHandle>
 800d442:	4603      	mov	r3, r0
 800d444:	429c      	cmp	r4, r3
 800d446:	d111      	bne.n	800d46c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	1e5a      	subs	r2, r3, #1
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	68db      	ldr	r3, [r3, #12]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d105      	bne.n	800d466 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d45a:	2300      	movs	r3, #0
 800d45c:	2200      	movs	r2, #0
 800d45e:	2100      	movs	r1, #0
 800d460:	6938      	ldr	r0, [r7, #16]
 800d462:	f000 f841 	bl	800d4e8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d466:	2301      	movs	r3, #1
 800d468:	617b      	str	r3, [r7, #20]
 800d46a:	e001      	b.n	800d470 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d46c:	2300      	movs	r3, #0
 800d46e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d470:	697b      	ldr	r3, [r7, #20]
	}
 800d472:	4618      	mov	r0, r3
 800d474:	371c      	adds	r7, #28
 800d476:	46bd      	mov	sp, r7
 800d478:	bd90      	pop	{r4, r7, pc}

0800d47a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d47a:	b590      	push	{r4, r7, lr}
 800d47c:	b087      	sub	sp, #28
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d488:	693b      	ldr	r3, [r7, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10b      	bne.n	800d4a6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d492:	f383 8811 	msr	BASEPRI, r3
 800d496:	f3bf 8f6f 	isb	sy
 800d49a:	f3bf 8f4f 	dsb	sy
 800d49e:	60fb      	str	r3, [r7, #12]
}
 800d4a0:	bf00      	nop
 800d4a2:	bf00      	nop
 800d4a4:	e7fd      	b.n	800d4a2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	689c      	ldr	r4, [r3, #8]
 800d4aa:	f001 fb8d 	bl	800ebc8 <xTaskGetCurrentTaskHandle>
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	429c      	cmp	r4, r3
 800d4b2:	d107      	bne.n	800d4c4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4b4:	693b      	ldr	r3, [r7, #16]
 800d4b6:	68db      	ldr	r3, [r3, #12]
 800d4b8:	1c5a      	adds	r2, r3, #1
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d4be:	2301      	movs	r3, #1
 800d4c0:	617b      	str	r3, [r7, #20]
 800d4c2:	e00c      	b.n	800d4de <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d4c4:	6839      	ldr	r1, [r7, #0]
 800d4c6:	6938      	ldr	r0, [r7, #16]
 800d4c8:	f000 fa90 	bl	800d9ec <xQueueSemaphoreTake>
 800d4cc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d4ce:	697b      	ldr	r3, [r7, #20]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d004      	beq.n	800d4de <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	1c5a      	adds	r2, r3, #1
 800d4da:	693b      	ldr	r3, [r7, #16]
 800d4dc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d4de:	697b      	ldr	r3, [r7, #20]
	}
 800d4e0:	4618      	mov	r0, r3
 800d4e2:	371c      	adds	r7, #28
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	bd90      	pop	{r4, r7, pc}

0800d4e8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b08e      	sub	sp, #56	@ 0x38
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	60f8      	str	r0, [r7, #12]
 800d4f0:	60b9      	str	r1, [r7, #8]
 800d4f2:	607a      	str	r2, [r7, #4]
 800d4f4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d500:	2b00      	cmp	r3, #0
 800d502:	d10b      	bne.n	800d51c <xQueueGenericSend+0x34>
	__asm volatile
 800d504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d508:	f383 8811 	msr	BASEPRI, r3
 800d50c:	f3bf 8f6f 	isb	sy
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d516:	bf00      	nop
 800d518:	bf00      	nop
 800d51a:	e7fd      	b.n	800d518 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d103      	bne.n	800d52a <xQueueGenericSend+0x42>
 800d522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d526:	2b00      	cmp	r3, #0
 800d528:	d101      	bne.n	800d52e <xQueueGenericSend+0x46>
 800d52a:	2301      	movs	r3, #1
 800d52c:	e000      	b.n	800d530 <xQueueGenericSend+0x48>
 800d52e:	2300      	movs	r3, #0
 800d530:	2b00      	cmp	r3, #0
 800d532:	d10b      	bne.n	800d54c <xQueueGenericSend+0x64>
	__asm volatile
 800d534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d538:	f383 8811 	msr	BASEPRI, r3
 800d53c:	f3bf 8f6f 	isb	sy
 800d540:	f3bf 8f4f 	dsb	sy
 800d544:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d546:	bf00      	nop
 800d548:	bf00      	nop
 800d54a:	e7fd      	b.n	800d548 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d103      	bne.n	800d55a <xQueueGenericSend+0x72>
 800d552:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d556:	2b01      	cmp	r3, #1
 800d558:	d101      	bne.n	800d55e <xQueueGenericSend+0x76>
 800d55a:	2301      	movs	r3, #1
 800d55c:	e000      	b.n	800d560 <xQueueGenericSend+0x78>
 800d55e:	2300      	movs	r3, #0
 800d560:	2b00      	cmp	r3, #0
 800d562:	d10b      	bne.n	800d57c <xQueueGenericSend+0x94>
	__asm volatile
 800d564:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d568:	f383 8811 	msr	BASEPRI, r3
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	f3bf 8f4f 	dsb	sy
 800d574:	623b      	str	r3, [r7, #32]
}
 800d576:	bf00      	nop
 800d578:	bf00      	nop
 800d57a:	e7fd      	b.n	800d578 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d57c:	f001 fb34 	bl	800ebe8 <xTaskGetSchedulerState>
 800d580:	4603      	mov	r3, r0
 800d582:	2b00      	cmp	r3, #0
 800d584:	d102      	bne.n	800d58c <xQueueGenericSend+0xa4>
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d101      	bne.n	800d590 <xQueueGenericSend+0xa8>
 800d58c:	2301      	movs	r3, #1
 800d58e:	e000      	b.n	800d592 <xQueueGenericSend+0xaa>
 800d590:	2300      	movs	r3, #0
 800d592:	2b00      	cmp	r3, #0
 800d594:	d10b      	bne.n	800d5ae <xQueueGenericSend+0xc6>
	__asm volatile
 800d596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59a:	f383 8811 	msr	BASEPRI, r3
 800d59e:	f3bf 8f6f 	isb	sy
 800d5a2:	f3bf 8f4f 	dsb	sy
 800d5a6:	61fb      	str	r3, [r7, #28]
}
 800d5a8:	bf00      	nop
 800d5aa:	bf00      	nop
 800d5ac:	e7fd      	b.n	800d5aa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5ae:	f7ff fc7b 	bl	800cea8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d5b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d5ba:	429a      	cmp	r2, r3
 800d5bc:	d302      	bcc.n	800d5c4 <xQueueGenericSend+0xdc>
 800d5be:	683b      	ldr	r3, [r7, #0]
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	d129      	bne.n	800d618 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d5c4:	683a      	ldr	r2, [r7, #0]
 800d5c6:	68b9      	ldr	r1, [r7, #8]
 800d5c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5ca:	f000 fb37 	bl	800dc3c <prvCopyDataToQueue>
 800d5ce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d010      	beq.n	800d5fa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d5da:	3324      	adds	r3, #36	@ 0x24
 800d5dc:	4618      	mov	r0, r3
 800d5de:	f001 f92d 	bl	800e83c <xTaskRemoveFromEventList>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d013      	beq.n	800d610 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d5e8:	4b3f      	ldr	r3, [pc, #252]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d5ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	f3bf 8f4f 	dsb	sy
 800d5f4:	f3bf 8f6f 	isb	sy
 800d5f8:	e00a      	b.n	800d610 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d007      	beq.n	800d610 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d600:	4b39      	ldr	r3, [pc, #228]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d602:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d606:	601a      	str	r2, [r3, #0]
 800d608:	f3bf 8f4f 	dsb	sy
 800d60c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d610:	f7ff fc7c 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800d614:	2301      	movs	r3, #1
 800d616:	e063      	b.n	800d6e0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d103      	bne.n	800d626 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d61e:	f7ff fc75 	bl	800cf0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d622:	2300      	movs	r3, #0
 800d624:	e05c      	b.n	800d6e0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d626:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d106      	bne.n	800d63a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d62c:	f107 0314 	add.w	r3, r7, #20
 800d630:	4618      	mov	r0, r3
 800d632:	f001 f967 	bl	800e904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d636:	2301      	movs	r3, #1
 800d638:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d63a:	f7ff fc67 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d63e:	f000 fecf 	bl	800e3e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d642:	f7ff fc31 	bl	800cea8 <vPortEnterCritical>
 800d646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d64c:	b25b      	sxtb	r3, r3
 800d64e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d652:	d103      	bne.n	800d65c <xQueueGenericSend+0x174>
 800d654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d656:	2200      	movs	r2, #0
 800d658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d65c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d662:	b25b      	sxtb	r3, r3
 800d664:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d668:	d103      	bne.n	800d672 <xQueueGenericSend+0x18a>
 800d66a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d66c:	2200      	movs	r2, #0
 800d66e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d672:	f7ff fc4b 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d676:	1d3a      	adds	r2, r7, #4
 800d678:	f107 0314 	add.w	r3, r7, #20
 800d67c:	4611      	mov	r1, r2
 800d67e:	4618      	mov	r0, r3
 800d680:	f001 f956 	bl	800e930 <xTaskCheckForTimeOut>
 800d684:	4603      	mov	r3, r0
 800d686:	2b00      	cmp	r3, #0
 800d688:	d124      	bne.n	800d6d4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d68a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d68c:	f000 fbce 	bl	800de2c <prvIsQueueFull>
 800d690:	4603      	mov	r3, r0
 800d692:	2b00      	cmp	r3, #0
 800d694:	d018      	beq.n	800d6c8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d698:	3310      	adds	r3, #16
 800d69a:	687a      	ldr	r2, [r7, #4]
 800d69c:	4611      	mov	r1, r2
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f001 f87a 	bl	800e798 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d6a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6a6:	f000 fb59 	bl	800dd5c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d6aa:	f000 fea7 	bl	800e3fc <xTaskResumeAll>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	f47f af7c 	bne.w	800d5ae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d6b6:	4b0c      	ldr	r3, [pc, #48]	@ (800d6e8 <xQueueGenericSend+0x200>)
 800d6b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d6bc:	601a      	str	r2, [r3, #0]
 800d6be:	f3bf 8f4f 	dsb	sy
 800d6c2:	f3bf 8f6f 	isb	sy
 800d6c6:	e772      	b.n	800d5ae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d6c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6ca:	f000 fb47 	bl	800dd5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6ce:	f000 fe95 	bl	800e3fc <xTaskResumeAll>
 800d6d2:	e76c      	b.n	800d5ae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d6d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d6d6:	f000 fb41 	bl	800dd5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d6da:	f000 fe8f 	bl	800e3fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d6de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3738      	adds	r7, #56	@ 0x38
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	e000ed04 	.word	0xe000ed04

0800d6ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b090      	sub	sp, #64	@ 0x40
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60f8      	str	r0, [r7, #12]
 800d6f4:	60b9      	str	r1, [r7, #8]
 800d6f6:	607a      	str	r2, [r7, #4]
 800d6f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d6fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d700:	2b00      	cmp	r3, #0
 800d702:	d10b      	bne.n	800d71c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d708:	f383 8811 	msr	BASEPRI, r3
 800d70c:	f3bf 8f6f 	isb	sy
 800d710:	f3bf 8f4f 	dsb	sy
 800d714:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d716:	bf00      	nop
 800d718:	bf00      	nop
 800d71a:	e7fd      	b.n	800d718 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d103      	bne.n	800d72a <xQueueGenericSendFromISR+0x3e>
 800d722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d726:	2b00      	cmp	r3, #0
 800d728:	d101      	bne.n	800d72e <xQueueGenericSendFromISR+0x42>
 800d72a:	2301      	movs	r3, #1
 800d72c:	e000      	b.n	800d730 <xQueueGenericSendFromISR+0x44>
 800d72e:	2300      	movs	r3, #0
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10b      	bne.n	800d74c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d738:	f383 8811 	msr	BASEPRI, r3
 800d73c:	f3bf 8f6f 	isb	sy
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d746:	bf00      	nop
 800d748:	bf00      	nop
 800d74a:	e7fd      	b.n	800d748 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	2b02      	cmp	r3, #2
 800d750:	d103      	bne.n	800d75a <xQueueGenericSendFromISR+0x6e>
 800d752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d756:	2b01      	cmp	r3, #1
 800d758:	d101      	bne.n	800d75e <xQueueGenericSendFromISR+0x72>
 800d75a:	2301      	movs	r3, #1
 800d75c:	e000      	b.n	800d760 <xQueueGenericSendFromISR+0x74>
 800d75e:	2300      	movs	r3, #0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d10b      	bne.n	800d77c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
 800d774:	623b      	str	r3, [r7, #32]
}
 800d776:	bf00      	nop
 800d778:	bf00      	nop
 800d77a:	e7fd      	b.n	800d778 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d77c:	f7ff fc74 	bl	800d068 <vPortValidateInterruptPriority>
	__asm volatile
 800d780:	f3ef 8211 	mrs	r2, BASEPRI
 800d784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d788:	f383 8811 	msr	BASEPRI, r3
 800d78c:	f3bf 8f6f 	isb	sy
 800d790:	f3bf 8f4f 	dsb	sy
 800d794:	61fa      	str	r2, [r7, #28]
 800d796:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d798:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d79a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d79c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d79e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d302      	bcc.n	800d7ae <xQueueGenericSendFromISR+0xc2>
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d12f      	bne.n	800d80e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d7ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d7b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d7be:	683a      	ldr	r2, [r7, #0]
 800d7c0:	68b9      	ldr	r1, [r7, #8]
 800d7c2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d7c4:	f000 fa3a 	bl	800dc3c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d7c8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d7cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7d0:	d112      	bne.n	800d7f8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d7d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d016      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	3324      	adds	r3, #36	@ 0x24
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f001 f82c 	bl	800e83c <xTaskRemoveFromEventList>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d00e      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00b      	beq.n	800d808 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	e007      	b.n	800d808 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7f8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b2db      	uxtb	r3, r3
 800d800:	b25a      	sxtb	r2, r3
 800d802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d804:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d808:	2301      	movs	r3, #1
 800d80a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d80c:	e001      	b.n	800d812 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d812:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d814:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d816:	697b      	ldr	r3, [r7, #20]
 800d818:	f383 8811 	msr	BASEPRI, r3
}
 800d81c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d820:	4618      	mov	r0, r3
 800d822:	3740      	adds	r7, #64	@ 0x40
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	b08c      	sub	sp, #48	@ 0x30
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	60f8      	str	r0, [r7, #12]
 800d830:	60b9      	str	r1, [r7, #8]
 800d832:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d834:	2300      	movs	r3, #0
 800d836:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d83c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d10b      	bne.n	800d85a <xQueueReceive+0x32>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d846:	f383 8811 	msr	BASEPRI, r3
 800d84a:	f3bf 8f6f 	isb	sy
 800d84e:	f3bf 8f4f 	dsb	sy
 800d852:	623b      	str	r3, [r7, #32]
}
 800d854:	bf00      	nop
 800d856:	bf00      	nop
 800d858:	e7fd      	b.n	800d856 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d103      	bne.n	800d868 <xQueueReceive+0x40>
 800d860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d864:	2b00      	cmp	r3, #0
 800d866:	d101      	bne.n	800d86c <xQueueReceive+0x44>
 800d868:	2301      	movs	r3, #1
 800d86a:	e000      	b.n	800d86e <xQueueReceive+0x46>
 800d86c:	2300      	movs	r3, #0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10b      	bne.n	800d88a <xQueueReceive+0x62>
	__asm volatile
 800d872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d876:	f383 8811 	msr	BASEPRI, r3
 800d87a:	f3bf 8f6f 	isb	sy
 800d87e:	f3bf 8f4f 	dsb	sy
 800d882:	61fb      	str	r3, [r7, #28]
}
 800d884:	bf00      	nop
 800d886:	bf00      	nop
 800d888:	e7fd      	b.n	800d886 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d88a:	f001 f9ad 	bl	800ebe8 <xTaskGetSchedulerState>
 800d88e:	4603      	mov	r3, r0
 800d890:	2b00      	cmp	r3, #0
 800d892:	d102      	bne.n	800d89a <xQueueReceive+0x72>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d101      	bne.n	800d89e <xQueueReceive+0x76>
 800d89a:	2301      	movs	r3, #1
 800d89c:	e000      	b.n	800d8a0 <xQueueReceive+0x78>
 800d89e:	2300      	movs	r3, #0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10b      	bne.n	800d8bc <xQueueReceive+0x94>
	__asm volatile
 800d8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a8:	f383 8811 	msr	BASEPRI, r3
 800d8ac:	f3bf 8f6f 	isb	sy
 800d8b0:	f3bf 8f4f 	dsb	sy
 800d8b4:	61bb      	str	r3, [r7, #24]
}
 800d8b6:	bf00      	nop
 800d8b8:	bf00      	nop
 800d8ba:	e7fd      	b.n	800d8b8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d8bc:	f7ff faf4 	bl	800cea8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8c4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d01f      	beq.n	800d90c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d8d0:	f000 fa1e 	bl	800dd10 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8d6:	1e5a      	subs	r2, r3, #1
 800d8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8da:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8de:	691b      	ldr	r3, [r3, #16]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d00f      	beq.n	800d904 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d8e6:	3310      	adds	r3, #16
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f000 ffa7 	bl	800e83c <xTaskRemoveFromEventList>
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d007      	beq.n	800d904 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d8f4:	4b3c      	ldr	r3, [pc, #240]	@ (800d9e8 <xQueueReceive+0x1c0>)
 800d8f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8fa:	601a      	str	r2, [r3, #0]
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d904:	f7ff fb02 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800d908:	2301      	movs	r3, #1
 800d90a:	e069      	b.n	800d9e0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d103      	bne.n	800d91a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d912:	f7ff fafb 	bl	800cf0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d916:	2300      	movs	r3, #0
 800d918:	e062      	b.n	800d9e0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d91a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d106      	bne.n	800d92e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d920:	f107 0310 	add.w	r3, r7, #16
 800d924:	4618      	mov	r0, r3
 800d926:	f000 ffed 	bl	800e904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d92a:	2301      	movs	r3, #1
 800d92c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d92e:	f7ff faed 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d932:	f000 fd55 	bl	800e3e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d936:	f7ff fab7 	bl	800cea8 <vPortEnterCritical>
 800d93a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d93c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d940:	b25b      	sxtb	r3, r3
 800d942:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d946:	d103      	bne.n	800d950 <xQueueReceive+0x128>
 800d948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d94a:	2200      	movs	r2, #0
 800d94c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d952:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d956:	b25b      	sxtb	r3, r3
 800d958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d95c:	d103      	bne.n	800d966 <xQueueReceive+0x13e>
 800d95e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d966:	f7ff fad1 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d96a:	1d3a      	adds	r2, r7, #4
 800d96c:	f107 0310 	add.w	r3, r7, #16
 800d970:	4611      	mov	r1, r2
 800d972:	4618      	mov	r0, r3
 800d974:	f000 ffdc 	bl	800e930 <xTaskCheckForTimeOut>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d123      	bne.n	800d9c6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d97e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d980:	f000 fa3e 	bl	800de00 <prvIsQueueEmpty>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d017      	beq.n	800d9ba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d98c:	3324      	adds	r3, #36	@ 0x24
 800d98e:	687a      	ldr	r2, [r7, #4]
 800d990:	4611      	mov	r1, r2
 800d992:	4618      	mov	r0, r3
 800d994:	f000 ff00 	bl	800e798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d998:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d99a:	f000 f9df 	bl	800dd5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d99e:	f000 fd2d 	bl	800e3fc <xTaskResumeAll>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d189      	bne.n	800d8bc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800d9a8:	4b0f      	ldr	r3, [pc, #60]	@ (800d9e8 <xQueueReceive+0x1c0>)
 800d9aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d9ae:	601a      	str	r2, [r3, #0]
 800d9b0:	f3bf 8f4f 	dsb	sy
 800d9b4:	f3bf 8f6f 	isb	sy
 800d9b8:	e780      	b.n	800d8bc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d9ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9bc:	f000 f9ce 	bl	800dd5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d9c0:	f000 fd1c 	bl	800e3fc <xTaskResumeAll>
 800d9c4:	e77a      	b.n	800d8bc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d9c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9c8:	f000 f9c8 	bl	800dd5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d9cc:	f000 fd16 	bl	800e3fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d9d0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d9d2:	f000 fa15 	bl	800de00 <prvIsQueueEmpty>
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	f43f af6f 	beq.w	800d8bc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d9de:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	3730      	adds	r7, #48	@ 0x30
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	e000ed04 	.word	0xe000ed04

0800d9ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d9ec:	b580      	push	{r7, lr}
 800d9ee:	b08e      	sub	sp, #56	@ 0x38
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	6078      	str	r0, [r7, #4]
 800d9f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d9fe:	2300      	movs	r3, #0
 800da00:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10b      	bne.n	800da20 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800da08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da0c:	f383 8811 	msr	BASEPRI, r3
 800da10:	f3bf 8f6f 	isb	sy
 800da14:	f3bf 8f4f 	dsb	sy
 800da18:	623b      	str	r3, [r7, #32]
}
 800da1a:	bf00      	nop
 800da1c:	bf00      	nop
 800da1e:	e7fd      	b.n	800da1c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800da20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00b      	beq.n	800da40 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800da28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2c:	f383 8811 	msr	BASEPRI, r3
 800da30:	f3bf 8f6f 	isb	sy
 800da34:	f3bf 8f4f 	dsb	sy
 800da38:	61fb      	str	r3, [r7, #28]
}
 800da3a:	bf00      	nop
 800da3c:	bf00      	nop
 800da3e:	e7fd      	b.n	800da3c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da40:	f001 f8d2 	bl	800ebe8 <xTaskGetSchedulerState>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d102      	bne.n	800da50 <xQueueSemaphoreTake+0x64>
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d101      	bne.n	800da54 <xQueueSemaphoreTake+0x68>
 800da50:	2301      	movs	r3, #1
 800da52:	e000      	b.n	800da56 <xQueueSemaphoreTake+0x6a>
 800da54:	2300      	movs	r3, #0
 800da56:	2b00      	cmp	r3, #0
 800da58:	d10b      	bne.n	800da72 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800da5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da5e:	f383 8811 	msr	BASEPRI, r3
 800da62:	f3bf 8f6f 	isb	sy
 800da66:	f3bf 8f4f 	dsb	sy
 800da6a:	61bb      	str	r3, [r7, #24]
}
 800da6c:	bf00      	nop
 800da6e:	bf00      	nop
 800da70:	e7fd      	b.n	800da6e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800da72:	f7ff fa19 	bl	800cea8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800da76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da7a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800da7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d024      	beq.n	800dacc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800da82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da84:	1e5a      	subs	r2, r3, #1
 800da86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da88:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da8c:	681b      	ldr	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d104      	bne.n	800da9c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800da92:	f001 fa23 	bl	800eedc <pvTaskIncrementMutexHeldCount>
 800da96:	4602      	mov	r2, r0
 800da98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800da9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da9e:	691b      	ldr	r3, [r3, #16]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d00f      	beq.n	800dac4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800daa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa6:	3310      	adds	r3, #16
 800daa8:	4618      	mov	r0, r3
 800daaa:	f000 fec7 	bl	800e83c <xTaskRemoveFromEventList>
 800daae:	4603      	mov	r3, r0
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d007      	beq.n	800dac4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dab4:	4b54      	ldr	r3, [pc, #336]	@ (800dc08 <xQueueSemaphoreTake+0x21c>)
 800dab6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daba:	601a      	str	r2, [r3, #0]
 800dabc:	f3bf 8f4f 	dsb	sy
 800dac0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dac4:	f7ff fa22 	bl	800cf0c <vPortExitCritical>
				return pdPASS;
 800dac8:	2301      	movs	r3, #1
 800daca:	e098      	b.n	800dbfe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d112      	bne.n	800daf8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d00b      	beq.n	800daf0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dad8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dadc:	f383 8811 	msr	BASEPRI, r3
 800dae0:	f3bf 8f6f 	isb	sy
 800dae4:	f3bf 8f4f 	dsb	sy
 800dae8:	617b      	str	r3, [r7, #20]
}
 800daea:	bf00      	nop
 800daec:	bf00      	nop
 800daee:	e7fd      	b.n	800daec <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800daf0:	f7ff fa0c 	bl	800cf0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e082      	b.n	800dbfe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800daf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dafe:	f107 030c 	add.w	r3, r7, #12
 800db02:	4618      	mov	r0, r3
 800db04:	f000 fefe 	bl	800e904 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db08:	2301      	movs	r3, #1
 800db0a:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db0c:	f7ff f9fe 	bl	800cf0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db10:	f000 fc66 	bl	800e3e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db14:	f7ff f9c8 	bl	800cea8 <vPortEnterCritical>
 800db18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db1e:	b25b      	sxtb	r3, r3
 800db20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db24:	d103      	bne.n	800db2e <xQueueSemaphoreTake+0x142>
 800db26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db28:	2200      	movs	r2, #0
 800db2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800db2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800db34:	b25b      	sxtb	r3, r3
 800db36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db3a:	d103      	bne.n	800db44 <xQueueSemaphoreTake+0x158>
 800db3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db3e:	2200      	movs	r2, #0
 800db40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800db44:	f7ff f9e2 	bl	800cf0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800db48:	463a      	mov	r2, r7
 800db4a:	f107 030c 	add.w	r3, r7, #12
 800db4e:	4611      	mov	r1, r2
 800db50:	4618      	mov	r0, r3
 800db52:	f000 feed 	bl	800e930 <xTaskCheckForTimeOut>
 800db56:	4603      	mov	r3, r0
 800db58:	2b00      	cmp	r3, #0
 800db5a:	d132      	bne.n	800dbc2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800db5c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db5e:	f000 f94f 	bl	800de00 <prvIsQueueEmpty>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d026      	beq.n	800dbb6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d109      	bne.n	800db84 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800db70:	f7ff f99a 	bl	800cea8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800db74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db76:	689b      	ldr	r3, [r3, #8]
 800db78:	4618      	mov	r0, r3
 800db7a:	f001 f853 	bl	800ec24 <xTaskPriorityInherit>
 800db7e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800db80:	f7ff f9c4 	bl	800cf0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800db84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db86:	3324      	adds	r3, #36	@ 0x24
 800db88:	683a      	ldr	r2, [r7, #0]
 800db8a:	4611      	mov	r1, r2
 800db8c:	4618      	mov	r0, r3
 800db8e:	f000 fe03 	bl	800e798 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800db92:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800db94:	f000 f8e2 	bl	800dd5c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800db98:	f000 fc30 	bl	800e3fc <xTaskResumeAll>
 800db9c:	4603      	mov	r3, r0
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	f47f af67 	bne.w	800da72 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800dba4:	4b18      	ldr	r3, [pc, #96]	@ (800dc08 <xQueueSemaphoreTake+0x21c>)
 800dba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbaa:	601a      	str	r2, [r3, #0]
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	f3bf 8f6f 	isb	sy
 800dbb4:	e75d      	b.n	800da72 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dbb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbb8:	f000 f8d0 	bl	800dd5c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dbbc:	f000 fc1e 	bl	800e3fc <xTaskResumeAll>
 800dbc0:	e757      	b.n	800da72 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dbc2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbc4:	f000 f8ca 	bl	800dd5c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dbc8:	f000 fc18 	bl	800e3fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbcc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbce:	f000 f917 	bl	800de00 <prvIsQueueEmpty>
 800dbd2:	4603      	mov	r3, r0
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	f43f af4c 	beq.w	800da72 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dbda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d00d      	beq.n	800dbfc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800dbe0:	f7ff f962 	bl	800cea8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dbe4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dbe6:	f000 f811 	bl	800dc0c <prvGetDisinheritPriorityAfterTimeout>
 800dbea:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dbec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbee:	689b      	ldr	r3, [r3, #8]
 800dbf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800dbf2:	4618      	mov	r0, r3
 800dbf4:	f001 f8ee 	bl	800edd4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dbf8:	f7ff f988 	bl	800cf0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dbfc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3738      	adds	r7, #56	@ 0x38
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
 800dc06:	bf00      	nop
 800dc08:	e000ed04 	.word	0xe000ed04

0800dc0c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d006      	beq.n	800dc2a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dc26:	60fb      	str	r3, [r7, #12]
 800dc28:	e001      	b.n	800dc2e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dc2e:	68fb      	ldr	r3, [r7, #12]
	}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3714      	adds	r7, #20
 800dc34:	46bd      	mov	sp, r7
 800dc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3a:	4770      	bx	lr

0800dc3c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60f8      	str	r0, [r7, #12]
 800dc44:	60b9      	str	r1, [r7, #8]
 800dc46:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc50:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d10d      	bne.n	800dc76 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d14d      	bne.n	800dcfe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	689b      	ldr	r3, [r3, #8]
 800dc66:	4618      	mov	r0, r3
 800dc68:	f001 f844 	bl	800ecf4 <xTaskPriorityDisinherit>
 800dc6c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2200      	movs	r2, #0
 800dc72:	609a      	str	r2, [r3, #8]
 800dc74:	e043      	b.n	800dcfe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d119      	bne.n	800dcb0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	6858      	ldr	r0, [r3, #4]
 800dc80:	68fb      	ldr	r3, [r7, #12]
 800dc82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc84:	461a      	mov	r2, r3
 800dc86:	68b9      	ldr	r1, [r7, #8]
 800dc88:	f001 ff73 	bl	800fb72 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	685a      	ldr	r2, [r3, #4]
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc94:	441a      	add	r2, r3
 800dc96:	68fb      	ldr	r3, [r7, #12]
 800dc98:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	685a      	ldr	r2, [r3, #4]
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	d32b      	bcc.n	800dcfe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	681a      	ldr	r2, [r3, #0]
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	605a      	str	r2, [r3, #4]
 800dcae:	e026      	b.n	800dcfe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	68d8      	ldr	r0, [r3, #12]
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcb8:	461a      	mov	r2, r3
 800dcba:	68b9      	ldr	r1, [r7, #8]
 800dcbc:	f001 ff59 	bl	800fb72 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	68da      	ldr	r2, [r3, #12]
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dcc8:	425b      	negs	r3, r3
 800dcca:	441a      	add	r2, r3
 800dccc:	68fb      	ldr	r3, [r7, #12]
 800dcce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68da      	ldr	r2, [r3, #12]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	429a      	cmp	r2, r3
 800dcda:	d207      	bcs.n	800dcec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800dcdc:	68fb      	ldr	r3, [r7, #12]
 800dcde:	689a      	ldr	r2, [r3, #8]
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dce4:	425b      	negs	r3, r3
 800dce6:	441a      	add	r2, r3
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2b02      	cmp	r3, #2
 800dcf0:	d105      	bne.n	800dcfe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dcf2:	693b      	ldr	r3, [r7, #16]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d002      	beq.n	800dcfe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800dcf8:	693b      	ldr	r3, [r7, #16]
 800dcfa:	3b01      	subs	r3, #1
 800dcfc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	1c5a      	adds	r2, r3, #1
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800dd06:	697b      	ldr	r3, [r7, #20]
}
 800dd08:	4618      	mov	r0, r3
 800dd0a:	3718      	adds	r7, #24
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}

0800dd10 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800dd10:	b580      	push	{r7, lr}
 800dd12:	b082      	sub	sp, #8
 800dd14:	af00      	add	r7, sp, #0
 800dd16:	6078      	str	r0, [r7, #4]
 800dd18:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d018      	beq.n	800dd54 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	68da      	ldr	r2, [r3, #12]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd2a:	441a      	add	r2, r3
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	68da      	ldr	r2, [r3, #12]
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	689b      	ldr	r3, [r3, #8]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d303      	bcc.n	800dd44 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	68d9      	ldr	r1, [r3, #12]
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	6838      	ldr	r0, [r7, #0]
 800dd50:	f001 ff0f 	bl	800fb72 <memcpy>
	}
}
 800dd54:	bf00      	nop
 800dd56:	3708      	adds	r7, #8
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	bd80      	pop	{r7, pc}

0800dd5c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dd5c:	b580      	push	{r7, lr}
 800dd5e:	b084      	sub	sp, #16
 800dd60:	af00      	add	r7, sp, #0
 800dd62:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dd64:	f7ff f8a0 	bl	800cea8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd6e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd70:	e011      	b.n	800dd96 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d012      	beq.n	800dda0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	3324      	adds	r3, #36	@ 0x24
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f000 fd5c 	bl	800e83c <xTaskRemoveFromEventList>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d001      	beq.n	800dd8e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dd8a:	f000 fe35 	bl	800e9f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dd8e:	7bfb      	ldrb	r3, [r7, #15]
 800dd90:	3b01      	subs	r3, #1
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dd96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	dce9      	bgt.n	800dd72 <prvUnlockQueue+0x16>
 800dd9e:	e000      	b.n	800dda2 <prvUnlockQueue+0x46>
					break;
 800dda0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	22ff      	movs	r2, #255	@ 0xff
 800dda6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ddaa:	f7ff f8af 	bl	800cf0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ddae:	f7ff f87b 	bl	800cea8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ddb8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ddba:	e011      	b.n	800dde0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d012      	beq.n	800ddea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	3310      	adds	r3, #16
 800ddc8:	4618      	mov	r0, r3
 800ddca:	f000 fd37 	bl	800e83c <xTaskRemoveFromEventList>
 800ddce:	4603      	mov	r3, r0
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ddd4:	f000 fe10 	bl	800e9f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ddd8:	7bbb      	ldrb	r3, [r7, #14]
 800ddda:	3b01      	subs	r3, #1
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dde0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dde4:	2b00      	cmp	r3, #0
 800dde6:	dce9      	bgt.n	800ddbc <prvUnlockQueue+0x60>
 800dde8:	e000      	b.n	800ddec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ddea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	22ff      	movs	r2, #255	@ 0xff
 800ddf0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ddf4:	f7ff f88a 	bl	800cf0c <vPortExitCritical>
}
 800ddf8:	bf00      	nop
 800ddfa:	3710      	adds	r7, #16
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	bd80      	pop	{r7, pc}

0800de00 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b084      	sub	sp, #16
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de08:	f7ff f84e 	bl	800cea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800de10:	2b00      	cmp	r3, #0
 800de12:	d102      	bne.n	800de1a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800de14:	2301      	movs	r3, #1
 800de16:	60fb      	str	r3, [r7, #12]
 800de18:	e001      	b.n	800de1e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800de1a:	2300      	movs	r3, #0
 800de1c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de1e:	f7ff f875 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800de22:	68fb      	ldr	r3, [r7, #12]
}
 800de24:	4618      	mov	r0, r3
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800de34:	f7ff f838 	bl	800cea8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800de40:	429a      	cmp	r2, r3
 800de42:	d102      	bne.n	800de4a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800de44:	2301      	movs	r3, #1
 800de46:	60fb      	str	r3, [r7, #12]
 800de48:	e001      	b.n	800de4e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800de4e:	f7ff f85d 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800de52:	68fb      	ldr	r3, [r7, #12]
}
 800de54:	4618      	mov	r0, r3
 800de56:	3710      	adds	r7, #16
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}

0800de5c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800de5c:	b480      	push	{r7}
 800de5e:	b085      	sub	sp, #20
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
 800de64:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de66:	2300      	movs	r3, #0
 800de68:	60fb      	str	r3, [r7, #12]
 800de6a:	e014      	b.n	800de96 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800de6c:	4a0f      	ldr	r2, [pc, #60]	@ (800deac <vQueueAddToRegistry+0x50>)
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d10b      	bne.n	800de90 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800de78:	490c      	ldr	r1, [pc, #48]	@ (800deac <vQueueAddToRegistry+0x50>)
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	683a      	ldr	r2, [r7, #0]
 800de7e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800de82:	4a0a      	ldr	r2, [pc, #40]	@ (800deac <vQueueAddToRegistry+0x50>)
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	00db      	lsls	r3, r3, #3
 800de88:	4413      	add	r3, r2
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800de8e:	e006      	b.n	800de9e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	3301      	adds	r3, #1
 800de94:	60fb      	str	r3, [r7, #12]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2b07      	cmp	r3, #7
 800de9a:	d9e7      	bls.n	800de6c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800de9c:	bf00      	nop
 800de9e:	bf00      	nop
 800dea0:	3714      	adds	r7, #20
 800dea2:	46bd      	mov	sp, r7
 800dea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea8:	4770      	bx	lr
 800deaa:	bf00      	nop
 800deac:	24004e94 	.word	0x24004e94

0800deb0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800deb0:	b580      	push	{r7, lr}
 800deb2:	b086      	sub	sp, #24
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	60f8      	str	r0, [r7, #12]
 800deb8:	60b9      	str	r1, [r7, #8]
 800deba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dec0:	f7fe fff2 	bl	800cea8 <vPortEnterCritical>
 800dec4:	697b      	ldr	r3, [r7, #20]
 800dec6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800deca:	b25b      	sxtb	r3, r3
 800decc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ded0:	d103      	bne.n	800deda <vQueueWaitForMessageRestricted+0x2a>
 800ded2:	697b      	ldr	r3, [r7, #20]
 800ded4:	2200      	movs	r2, #0
 800ded6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800deda:	697b      	ldr	r3, [r7, #20]
 800dedc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dee0:	b25b      	sxtb	r3, r3
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dee6:	d103      	bne.n	800def0 <vQueueWaitForMessageRestricted+0x40>
 800dee8:	697b      	ldr	r3, [r7, #20]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800def0:	f7ff f80c 	bl	800cf0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800def4:	697b      	ldr	r3, [r7, #20]
 800def6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def8:	2b00      	cmp	r3, #0
 800defa:	d106      	bne.n	800df0a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800defc:	697b      	ldr	r3, [r7, #20]
 800defe:	3324      	adds	r3, #36	@ 0x24
 800df00:	687a      	ldr	r2, [r7, #4]
 800df02:	68b9      	ldr	r1, [r7, #8]
 800df04:	4618      	mov	r0, r3
 800df06:	f000 fc6d 	bl	800e7e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800df0a:	6978      	ldr	r0, [r7, #20]
 800df0c:	f7ff ff26 	bl	800dd5c <prvUnlockQueue>
	}
 800df10:	bf00      	nop
 800df12:	3718      	adds	r7, #24
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b08e      	sub	sp, #56	@ 0x38
 800df1c:	af04      	add	r7, sp, #16
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
 800df24:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800df26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10b      	bne.n	800df44 <xTaskCreateStatic+0x2c>
	__asm volatile
 800df2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df30:	f383 8811 	msr	BASEPRI, r3
 800df34:	f3bf 8f6f 	isb	sy
 800df38:	f3bf 8f4f 	dsb	sy
 800df3c:	623b      	str	r3, [r7, #32]
}
 800df3e:	bf00      	nop
 800df40:	bf00      	nop
 800df42:	e7fd      	b.n	800df40 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800df44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df46:	2b00      	cmp	r3, #0
 800df48:	d10b      	bne.n	800df62 <xTaskCreateStatic+0x4a>
	__asm volatile
 800df4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df4e:	f383 8811 	msr	BASEPRI, r3
 800df52:	f3bf 8f6f 	isb	sy
 800df56:	f3bf 8f4f 	dsb	sy
 800df5a:	61fb      	str	r3, [r7, #28]
}
 800df5c:	bf00      	nop
 800df5e:	bf00      	nop
 800df60:	e7fd      	b.n	800df5e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800df62:	23a8      	movs	r3, #168	@ 0xa8
 800df64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800df66:	693b      	ldr	r3, [r7, #16]
 800df68:	2ba8      	cmp	r3, #168	@ 0xa8
 800df6a:	d00b      	beq.n	800df84 <xTaskCreateStatic+0x6c>
	__asm volatile
 800df6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	61bb      	str	r3, [r7, #24]
}
 800df7e:	bf00      	nop
 800df80:	bf00      	nop
 800df82:	e7fd      	b.n	800df80 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800df84:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800df86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d01e      	beq.n	800dfca <xTaskCreateStatic+0xb2>
 800df8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d01b      	beq.n	800dfca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800df92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df94:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800df96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df98:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800df9a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800df9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df9e:	2202      	movs	r2, #2
 800dfa0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9303      	str	r3, [sp, #12]
 800dfa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dfaa:	9302      	str	r3, [sp, #8]
 800dfac:	f107 0314 	add.w	r3, r7, #20
 800dfb0:	9301      	str	r3, [sp, #4]
 800dfb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	68f8      	ldr	r0, [r7, #12]
 800dfbe:	f000 f851 	bl	800e064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dfc2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dfc4:	f000 f8f6 	bl	800e1b4 <prvAddNewTaskToReadyList>
 800dfc8:	e001      	b.n	800dfce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dfce:	697b      	ldr	r3, [r7, #20]
	}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3728      	adds	r7, #40	@ 0x28
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	bd80      	pop	{r7, pc}

0800dfd8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dfd8:	b580      	push	{r7, lr}
 800dfda:	b08c      	sub	sp, #48	@ 0x30
 800dfdc:	af04      	add	r7, sp, #16
 800dfde:	60f8      	str	r0, [r7, #12]
 800dfe0:	60b9      	str	r1, [r7, #8]
 800dfe2:	603b      	str	r3, [r7, #0]
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dfe8:	88fb      	ldrh	r3, [r7, #6]
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7fe fb89 	bl	800c704 <pvPortMalloc>
 800dff2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d00e      	beq.n	800e018 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dffa:	20a8      	movs	r0, #168	@ 0xa8
 800dffc:	f7fe fb82 	bl	800c704 <pvPortMalloc>
 800e000:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	2b00      	cmp	r3, #0
 800e006:	d003      	beq.n	800e010 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	697a      	ldr	r2, [r7, #20]
 800e00c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e00e:	e005      	b.n	800e01c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e010:	6978      	ldr	r0, [r7, #20]
 800e012:	f7fe fc45 	bl	800c8a0 <vPortFree>
 800e016:	e001      	b.n	800e01c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e018:	2300      	movs	r3, #0
 800e01a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e01c:	69fb      	ldr	r3, [r7, #28]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d017      	beq.n	800e052 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	2200      	movs	r2, #0
 800e026:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e02a:	88fa      	ldrh	r2, [r7, #6]
 800e02c:	2300      	movs	r3, #0
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	69fb      	ldr	r3, [r7, #28]
 800e032:	9302      	str	r3, [sp, #8]
 800e034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e036:	9301      	str	r3, [sp, #4]
 800e038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03a:	9300      	str	r3, [sp, #0]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	68b9      	ldr	r1, [r7, #8]
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f000 f80f 	bl	800e064 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e046:	69f8      	ldr	r0, [r7, #28]
 800e048:	f000 f8b4 	bl	800e1b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e04c:	2301      	movs	r3, #1
 800e04e:	61bb      	str	r3, [r7, #24]
 800e050:	e002      	b.n	800e058 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e052:	f04f 33ff 	mov.w	r3, #4294967295
 800e056:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e058:	69bb      	ldr	r3, [r7, #24]
	}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3720      	adds	r7, #32
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
	...

0800e064 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b088      	sub	sp, #32
 800e068:	af00      	add	r7, sp, #0
 800e06a:	60f8      	str	r0, [r7, #12]
 800e06c:	60b9      	str	r1, [r7, #8]
 800e06e:	607a      	str	r2, [r7, #4]
 800e070:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e074:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	009b      	lsls	r3, r3, #2
 800e07a:	461a      	mov	r2, r3
 800e07c:	21a5      	movs	r1, #165	@ 0xa5
 800e07e:	f001 fc14 	bl	800f8aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e084:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e086:	6879      	ldr	r1, [r7, #4]
 800e088:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800e08c:	440b      	add	r3, r1
 800e08e:	009b      	lsls	r3, r3, #2
 800e090:	4413      	add	r3, r2
 800e092:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e094:	69bb      	ldr	r3, [r7, #24]
 800e096:	f023 0307 	bic.w	r3, r3, #7
 800e09a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e09c:	69bb      	ldr	r3, [r7, #24]
 800e09e:	f003 0307 	and.w	r3, r3, #7
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d00b      	beq.n	800e0be <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
 800e0b6:	617b      	str	r3, [r7, #20]
}
 800e0b8:	bf00      	nop
 800e0ba:	bf00      	nop
 800e0bc:	e7fd      	b.n	800e0ba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e0be:	68bb      	ldr	r3, [r7, #8]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d01f      	beq.n	800e104 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	61fb      	str	r3, [r7, #28]
 800e0c8:	e012      	b.n	800e0f0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e0ca:	68ba      	ldr	r2, [r7, #8]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	7819      	ldrb	r1, [r3, #0]
 800e0d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	4413      	add	r3, r2
 800e0d8:	3334      	adds	r3, #52	@ 0x34
 800e0da:	460a      	mov	r2, r1
 800e0dc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	69fb      	ldr	r3, [r7, #28]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	781b      	ldrb	r3, [r3, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	d006      	beq.n	800e0f8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e0ea:	69fb      	ldr	r3, [r7, #28]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	61fb      	str	r3, [r7, #28]
 800e0f0:	69fb      	ldr	r3, [r7, #28]
 800e0f2:	2b0f      	cmp	r3, #15
 800e0f4:	d9e9      	bls.n	800e0ca <prvInitialiseNewTask+0x66>
 800e0f6:	e000      	b.n	800e0fa <prvInitialiseNewTask+0x96>
			{
				break;
 800e0f8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e0fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0fc:	2200      	movs	r2, #0
 800e0fe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e102:	e003      	b.n	800e10c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e106:	2200      	movs	r2, #0
 800e108:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e10c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e10e:	2b37      	cmp	r3, #55	@ 0x37
 800e110:	d901      	bls.n	800e116 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e112:	2337      	movs	r3, #55	@ 0x37
 800e114:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e11a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e11c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e11e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e120:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e124:	2200      	movs	r2, #0
 800e126:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e12a:	3304      	adds	r3, #4
 800e12c:	4618      	mov	r0, r3
 800e12e:	f7fe fcf7 	bl	800cb20 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e134:	3318      	adds	r3, #24
 800e136:	4618      	mov	r0, r3
 800e138:	f7fe fcf2 	bl	800cb20 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e13e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e140:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e144:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e148:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e14e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e150:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e154:	2200      	movs	r2, #0
 800e156:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e15c:	2200      	movs	r2, #0
 800e15e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e164:	3354      	adds	r3, #84	@ 0x54
 800e166:	224c      	movs	r2, #76	@ 0x4c
 800e168:	2100      	movs	r1, #0
 800e16a:	4618      	mov	r0, r3
 800e16c:	f001 fb9d 	bl	800f8aa <memset>
 800e170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e172:	4a0d      	ldr	r2, [pc, #52]	@ (800e1a8 <prvInitialiseNewTask+0x144>)
 800e174:	659a      	str	r2, [r3, #88]	@ 0x58
 800e176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e178:	4a0c      	ldr	r2, [pc, #48]	@ (800e1ac <prvInitialiseNewTask+0x148>)
 800e17a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e17c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e17e:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b0 <prvInitialiseNewTask+0x14c>)
 800e180:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e182:	683a      	ldr	r2, [r7, #0]
 800e184:	68f9      	ldr	r1, [r7, #12]
 800e186:	69b8      	ldr	r0, [r7, #24]
 800e188:	f7fe fd5e 	bl	800cc48 <pxPortInitialiseStack>
 800e18c:	4602      	mov	r2, r0
 800e18e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e190:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e194:	2b00      	cmp	r3, #0
 800e196:	d002      	beq.n	800e19e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e198:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e19c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e19e:	bf00      	nop
 800e1a0:	3720      	adds	r7, #32
 800e1a2:	46bd      	mov	sp, r7
 800e1a4:	bd80      	pop	{r7, pc}
 800e1a6:	bf00      	nop
 800e1a8:	24005500 	.word	0x24005500
 800e1ac:	24005568 	.word	0x24005568
 800e1b0:	240055d0 	.word	0x240055d0

0800e1b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b082      	sub	sp, #8
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1bc:	f7fe fe74 	bl	800cea8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1c0:	4b2d      	ldr	r3, [pc, #180]	@ (800e278 <prvAddNewTaskToReadyList+0xc4>)
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	3301      	adds	r3, #1
 800e1c6:	4a2c      	ldr	r2, [pc, #176]	@ (800e278 <prvAddNewTaskToReadyList+0xc4>)
 800e1c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1ca:	4b2c      	ldr	r3, [pc, #176]	@ (800e27c <prvAddNewTaskToReadyList+0xc8>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d109      	bne.n	800e1e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800e27c <prvAddNewTaskToReadyList+0xc8>)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e1d8:	4b27      	ldr	r3, [pc, #156]	@ (800e278 <prvAddNewTaskToReadyList+0xc4>)
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d110      	bne.n	800e202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e1e0:	f000 fc2e 	bl	800ea40 <prvInitialiseTaskLists>
 800e1e4:	e00d      	b.n	800e202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e1e6:	4b26      	ldr	r3, [pc, #152]	@ (800e280 <prvAddNewTaskToReadyList+0xcc>)
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d109      	bne.n	800e202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e1ee:	4b23      	ldr	r3, [pc, #140]	@ (800e27c <prvAddNewTaskToReadyList+0xc8>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d802      	bhi.n	800e202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e1fc:	4a1f      	ldr	r2, [pc, #124]	@ (800e27c <prvAddNewTaskToReadyList+0xc8>)
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e202:	4b20      	ldr	r3, [pc, #128]	@ (800e284 <prvAddNewTaskToReadyList+0xd0>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	3301      	adds	r3, #1
 800e208:	4a1e      	ldr	r2, [pc, #120]	@ (800e284 <prvAddNewTaskToReadyList+0xd0>)
 800e20a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e20c:	4b1d      	ldr	r3, [pc, #116]	@ (800e284 <prvAddNewTaskToReadyList+0xd0>)
 800e20e:	681a      	ldr	r2, [r3, #0]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e218:	4b1b      	ldr	r3, [pc, #108]	@ (800e288 <prvAddNewTaskToReadyList+0xd4>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d903      	bls.n	800e228 <prvAddNewTaskToReadyList+0x74>
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e224:	4a18      	ldr	r2, [pc, #96]	@ (800e288 <prvAddNewTaskToReadyList+0xd4>)
 800e226:	6013      	str	r3, [r2, #0]
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e22c:	4613      	mov	r3, r2
 800e22e:	009b      	lsls	r3, r3, #2
 800e230:	4413      	add	r3, r2
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	4a15      	ldr	r2, [pc, #84]	@ (800e28c <prvAddNewTaskToReadyList+0xd8>)
 800e236:	441a      	add	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	3304      	adds	r3, #4
 800e23c:	4619      	mov	r1, r3
 800e23e:	4610      	mov	r0, r2
 800e240:	f7fe fc7b 	bl	800cb3a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e244:	f7fe fe62 	bl	800cf0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e248:	4b0d      	ldr	r3, [pc, #52]	@ (800e280 <prvAddNewTaskToReadyList+0xcc>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d00e      	beq.n	800e26e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e250:	4b0a      	ldr	r3, [pc, #40]	@ (800e27c <prvAddNewTaskToReadyList+0xc8>)
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e25a:	429a      	cmp	r2, r3
 800e25c:	d207      	bcs.n	800e26e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e25e:	4b0c      	ldr	r3, [pc, #48]	@ (800e290 <prvAddNewTaskToReadyList+0xdc>)
 800e260:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e264:	601a      	str	r2, [r3, #0]
 800e266:	f3bf 8f4f 	dsb	sy
 800e26a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e26e:	bf00      	nop
 800e270:	3708      	adds	r7, #8
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}
 800e276:	bf00      	nop
 800e278:	240053a8 	.word	0x240053a8
 800e27c:	24004ed4 	.word	0x24004ed4
 800e280:	240053b4 	.word	0x240053b4
 800e284:	240053c4 	.word	0x240053c4
 800e288:	240053b0 	.word	0x240053b0
 800e28c:	24004ed8 	.word	0x24004ed8
 800e290:	e000ed04 	.word	0xe000ed04

0800e294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e294:	b580      	push	{r7, lr}
 800e296:	b084      	sub	sp, #16
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e29c:	2300      	movs	r3, #0
 800e29e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d018      	beq.n	800e2d8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2a6:	4b14      	ldr	r3, [pc, #80]	@ (800e2f8 <vTaskDelay+0x64>)
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d00b      	beq.n	800e2c6 <vTaskDelay+0x32>
	__asm volatile
 800e2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2b2:	f383 8811 	msr	BASEPRI, r3
 800e2b6:	f3bf 8f6f 	isb	sy
 800e2ba:	f3bf 8f4f 	dsb	sy
 800e2be:	60bb      	str	r3, [r7, #8]
}
 800e2c0:	bf00      	nop
 800e2c2:	bf00      	nop
 800e2c4:	e7fd      	b.n	800e2c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2c6:	f000 f88b 	bl	800e3e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2ca:	2100      	movs	r1, #0
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fe19 	bl	800ef04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2d2:	f000 f893 	bl	800e3fc <xTaskResumeAll>
 800e2d6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d107      	bne.n	800e2ee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e2de:	4b07      	ldr	r3, [pc, #28]	@ (800e2fc <vTaskDelay+0x68>)
 800e2e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e2e4:	601a      	str	r2, [r3, #0]
 800e2e6:	f3bf 8f4f 	dsb	sy
 800e2ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2ee:	bf00      	nop
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	240053d0 	.word	0x240053d0
 800e2fc:	e000ed04 	.word	0xe000ed04

0800e300 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	@ 0x28
 800e304:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e306:	2300      	movs	r3, #0
 800e308:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e30a:	2300      	movs	r3, #0
 800e30c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e30e:	463a      	mov	r2, r7
 800e310:	1d39      	adds	r1, r7, #4
 800e312:	f107 0308 	add.w	r3, r7, #8
 800e316:	4618      	mov	r0, r3
 800e318:	f7fe f9c0 	bl	800c69c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	68ba      	ldr	r2, [r7, #8]
 800e322:	9202      	str	r2, [sp, #8]
 800e324:	9301      	str	r3, [sp, #4]
 800e326:	2300      	movs	r3, #0
 800e328:	9300      	str	r3, [sp, #0]
 800e32a:	2300      	movs	r3, #0
 800e32c:	460a      	mov	r2, r1
 800e32e:	4924      	ldr	r1, [pc, #144]	@ (800e3c0 <vTaskStartScheduler+0xc0>)
 800e330:	4824      	ldr	r0, [pc, #144]	@ (800e3c4 <vTaskStartScheduler+0xc4>)
 800e332:	f7ff fdf1 	bl	800df18 <xTaskCreateStatic>
 800e336:	4603      	mov	r3, r0
 800e338:	4a23      	ldr	r2, [pc, #140]	@ (800e3c8 <vTaskStartScheduler+0xc8>)
 800e33a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e33c:	4b22      	ldr	r3, [pc, #136]	@ (800e3c8 <vTaskStartScheduler+0xc8>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	2b00      	cmp	r3, #0
 800e342:	d002      	beq.n	800e34a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e344:	2301      	movs	r3, #1
 800e346:	617b      	str	r3, [r7, #20]
 800e348:	e001      	b.n	800e34e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2b01      	cmp	r3, #1
 800e352:	d102      	bne.n	800e35a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e354:	f000 fe2a 	bl	800efac <xTimerCreateTimerTask>
 800e358:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2b01      	cmp	r3, #1
 800e35e:	d11b      	bne.n	800e398 <vTaskStartScheduler+0x98>
	__asm volatile
 800e360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e364:	f383 8811 	msr	BASEPRI, r3
 800e368:	f3bf 8f6f 	isb	sy
 800e36c:	f3bf 8f4f 	dsb	sy
 800e370:	613b      	str	r3, [r7, #16]
}
 800e372:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e374:	4b15      	ldr	r3, [pc, #84]	@ (800e3cc <vTaskStartScheduler+0xcc>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	3354      	adds	r3, #84	@ 0x54
 800e37a:	4a15      	ldr	r2, [pc, #84]	@ (800e3d0 <vTaskStartScheduler+0xd0>)
 800e37c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e37e:	4b15      	ldr	r3, [pc, #84]	@ (800e3d4 <vTaskStartScheduler+0xd4>)
 800e380:	f04f 32ff 	mov.w	r2, #4294967295
 800e384:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e386:	4b14      	ldr	r3, [pc, #80]	@ (800e3d8 <vTaskStartScheduler+0xd8>)
 800e388:	2201      	movs	r2, #1
 800e38a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e38c:	4b13      	ldr	r3, [pc, #76]	@ (800e3dc <vTaskStartScheduler+0xdc>)
 800e38e:	2200      	movs	r2, #0
 800e390:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e392:	f7fe fce5 	bl	800cd60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e396:	e00f      	b.n	800e3b8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e398:	697b      	ldr	r3, [r7, #20]
 800e39a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e39e:	d10b      	bne.n	800e3b8 <vTaskStartScheduler+0xb8>
	__asm volatile
 800e3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3a4:	f383 8811 	msr	BASEPRI, r3
 800e3a8:	f3bf 8f6f 	isb	sy
 800e3ac:	f3bf 8f4f 	dsb	sy
 800e3b0:	60fb      	str	r3, [r7, #12]
}
 800e3b2:	bf00      	nop
 800e3b4:	bf00      	nop
 800e3b6:	e7fd      	b.n	800e3b4 <vTaskStartScheduler+0xb4>
}
 800e3b8:	bf00      	nop
 800e3ba:	3718      	adds	r7, #24
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}
 800e3c0:	08010c84 	.word	0x08010c84
 800e3c4:	0800ea11 	.word	0x0800ea11
 800e3c8:	240053cc 	.word	0x240053cc
 800e3cc:	24004ed4 	.word	0x24004ed4
 800e3d0:	24000160 	.word	0x24000160
 800e3d4:	240053c8 	.word	0x240053c8
 800e3d8:	240053b4 	.word	0x240053b4
 800e3dc:	240053ac 	.word	0x240053ac

0800e3e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e3e4:	4b04      	ldr	r3, [pc, #16]	@ (800e3f8 <vTaskSuspendAll+0x18>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3301      	adds	r3, #1
 800e3ea:	4a03      	ldr	r2, [pc, #12]	@ (800e3f8 <vTaskSuspendAll+0x18>)
 800e3ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3ee:	bf00      	nop
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr
 800e3f8:	240053d0 	.word	0x240053d0

0800e3fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3fc:	b580      	push	{r7, lr}
 800e3fe:	b084      	sub	sp, #16
 800e400:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e402:	2300      	movs	r3, #0
 800e404:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e406:	2300      	movs	r3, #0
 800e408:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e40a:	4b42      	ldr	r3, [pc, #264]	@ (800e514 <xTaskResumeAll+0x118>)
 800e40c:	681b      	ldr	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d10b      	bne.n	800e42a <xTaskResumeAll+0x2e>
	__asm volatile
 800e412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	603b      	str	r3, [r7, #0]
}
 800e424:	bf00      	nop
 800e426:	bf00      	nop
 800e428:	e7fd      	b.n	800e426 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e42a:	f7fe fd3d 	bl	800cea8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e42e:	4b39      	ldr	r3, [pc, #228]	@ (800e514 <xTaskResumeAll+0x118>)
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	3b01      	subs	r3, #1
 800e434:	4a37      	ldr	r2, [pc, #220]	@ (800e514 <xTaskResumeAll+0x118>)
 800e436:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e438:	4b36      	ldr	r3, [pc, #216]	@ (800e514 <xTaskResumeAll+0x118>)
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d162      	bne.n	800e506 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e440:	4b35      	ldr	r3, [pc, #212]	@ (800e518 <xTaskResumeAll+0x11c>)
 800e442:	681b      	ldr	r3, [r3, #0]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d05e      	beq.n	800e506 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e448:	e02f      	b.n	800e4aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e44a:	4b34      	ldr	r3, [pc, #208]	@ (800e51c <xTaskResumeAll+0x120>)
 800e44c:	68db      	ldr	r3, [r3, #12]
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3318      	adds	r3, #24
 800e456:	4618      	mov	r0, r3
 800e458:	f7fe fbcc 	bl	800cbf4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	3304      	adds	r3, #4
 800e460:	4618      	mov	r0, r3
 800e462:	f7fe fbc7 	bl	800cbf4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e46a:	4b2d      	ldr	r3, [pc, #180]	@ (800e520 <xTaskResumeAll+0x124>)
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d903      	bls.n	800e47a <xTaskResumeAll+0x7e>
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e476:	4a2a      	ldr	r2, [pc, #168]	@ (800e520 <xTaskResumeAll+0x124>)
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4a27      	ldr	r2, [pc, #156]	@ (800e524 <xTaskResumeAll+0x128>)
 800e488:	441a      	add	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4619      	mov	r1, r3
 800e490:	4610      	mov	r0, r2
 800e492:	f7fe fb52 	bl	800cb3a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e49a:	4b23      	ldr	r3, [pc, #140]	@ (800e528 <xTaskResumeAll+0x12c>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d302      	bcc.n	800e4aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e4a4:	4b21      	ldr	r3, [pc, #132]	@ (800e52c <xTaskResumeAll+0x130>)
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e51c <xTaskResumeAll+0x120>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1cb      	bne.n	800e44a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4b8:	f000 fb66 	bl	800eb88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e530 <xTaskResumeAll+0x134>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d010      	beq.n	800e4ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4c8:	f000 f846 	bl	800e558 <xTaskIncrementTick>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e4d2:	4b16      	ldr	r3, [pc, #88]	@ (800e52c <xTaskResumeAll+0x130>)
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1f1      	bne.n	800e4c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e4e4:	4b12      	ldr	r3, [pc, #72]	@ (800e530 <xTaskResumeAll+0x134>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4ea:	4b10      	ldr	r3, [pc, #64]	@ (800e52c <xTaskResumeAll+0x130>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d009      	beq.n	800e506 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e534 <xTaskResumeAll+0x138>)
 800e4f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e506:	f7fe fd01 	bl	800cf0c <vPortExitCritical>

	return xAlreadyYielded;
 800e50a:	68bb      	ldr	r3, [r7, #8]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	240053d0 	.word	0x240053d0
 800e518:	240053a8 	.word	0x240053a8
 800e51c:	24005368 	.word	0x24005368
 800e520:	240053b0 	.word	0x240053b0
 800e524:	24004ed8 	.word	0x24004ed8
 800e528:	24004ed4 	.word	0x24004ed4
 800e52c:	240053bc 	.word	0x240053bc
 800e530:	240053b8 	.word	0x240053b8
 800e534:	e000ed04 	.word	0xe000ed04

0800e538 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e53e:	4b05      	ldr	r3, [pc, #20]	@ (800e554 <xTaskGetTickCount+0x1c>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e544:	687b      	ldr	r3, [r7, #4]
}
 800e546:	4618      	mov	r0, r3
 800e548:	370c      	adds	r7, #12
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	240053ac 	.word	0x240053ac

0800e558 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b086      	sub	sp, #24
 800e55c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e55e:	2300      	movs	r3, #0
 800e560:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e562:	4b4f      	ldr	r3, [pc, #316]	@ (800e6a0 <xTaskIncrementTick+0x148>)
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	f040 8090 	bne.w	800e68c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e56c:	4b4d      	ldr	r3, [pc, #308]	@ (800e6a4 <xTaskIncrementTick+0x14c>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3301      	adds	r3, #1
 800e572:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e574:	4a4b      	ldr	r2, [pc, #300]	@ (800e6a4 <xTaskIncrementTick+0x14c>)
 800e576:	693b      	ldr	r3, [r7, #16]
 800e578:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d121      	bne.n	800e5c4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e580:	4b49      	ldr	r3, [pc, #292]	@ (800e6a8 <xTaskIncrementTick+0x150>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d00b      	beq.n	800e5a2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e58a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e58e:	f383 8811 	msr	BASEPRI, r3
 800e592:	f3bf 8f6f 	isb	sy
 800e596:	f3bf 8f4f 	dsb	sy
 800e59a:	603b      	str	r3, [r7, #0]
}
 800e59c:	bf00      	nop
 800e59e:	bf00      	nop
 800e5a0:	e7fd      	b.n	800e59e <xTaskIncrementTick+0x46>
 800e5a2:	4b41      	ldr	r3, [pc, #260]	@ (800e6a8 <xTaskIncrementTick+0x150>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	60fb      	str	r3, [r7, #12]
 800e5a8:	4b40      	ldr	r3, [pc, #256]	@ (800e6ac <xTaskIncrementTick+0x154>)
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4a3e      	ldr	r2, [pc, #248]	@ (800e6a8 <xTaskIncrementTick+0x150>)
 800e5ae:	6013      	str	r3, [r2, #0]
 800e5b0:	4a3e      	ldr	r2, [pc, #248]	@ (800e6ac <xTaskIncrementTick+0x154>)
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	6013      	str	r3, [r2, #0]
 800e5b6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6b0 <xTaskIncrementTick+0x158>)
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	3301      	adds	r3, #1
 800e5bc:	4a3c      	ldr	r2, [pc, #240]	@ (800e6b0 <xTaskIncrementTick+0x158>)
 800e5be:	6013      	str	r3, [r2, #0]
 800e5c0:	f000 fae2 	bl	800eb88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5c4:	4b3b      	ldr	r3, [pc, #236]	@ (800e6b4 <xTaskIncrementTick+0x15c>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	693a      	ldr	r2, [r7, #16]
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d349      	bcc.n	800e662 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ce:	4b36      	ldr	r3, [pc, #216]	@ (800e6a8 <xTaskIncrementTick+0x150>)
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d104      	bne.n	800e5e2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5d8:	4b36      	ldr	r3, [pc, #216]	@ (800e6b4 <xTaskIncrementTick+0x15c>)
 800e5da:	f04f 32ff 	mov.w	r2, #4294967295
 800e5de:	601a      	str	r2, [r3, #0]
					break;
 800e5e0:	e03f      	b.n	800e662 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5e2:	4b31      	ldr	r3, [pc, #196]	@ (800e6a8 <xTaskIncrementTick+0x150>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	68db      	ldr	r3, [r3, #12]
 800e5ea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5ec:	68bb      	ldr	r3, [r7, #8]
 800e5ee:	685b      	ldr	r3, [r3, #4]
 800e5f0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5f2:	693a      	ldr	r2, [r7, #16]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	429a      	cmp	r2, r3
 800e5f8:	d203      	bcs.n	800e602 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5fa:	4a2e      	ldr	r2, [pc, #184]	@ (800e6b4 <xTaskIncrementTick+0x15c>)
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e600:	e02f      	b.n	800e662 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e602:	68bb      	ldr	r3, [r7, #8]
 800e604:	3304      	adds	r3, #4
 800e606:	4618      	mov	r0, r3
 800e608:	f7fe faf4 	bl	800cbf4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e610:	2b00      	cmp	r3, #0
 800e612:	d004      	beq.n	800e61e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	3318      	adds	r3, #24
 800e618:	4618      	mov	r0, r3
 800e61a:	f7fe faeb 	bl	800cbf4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e622:	4b25      	ldr	r3, [pc, #148]	@ (800e6b8 <xTaskIncrementTick+0x160>)
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	429a      	cmp	r2, r3
 800e628:	d903      	bls.n	800e632 <xTaskIncrementTick+0xda>
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62e:	4a22      	ldr	r2, [pc, #136]	@ (800e6b8 <xTaskIncrementTick+0x160>)
 800e630:	6013      	str	r3, [r2, #0]
 800e632:	68bb      	ldr	r3, [r7, #8]
 800e634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e636:	4613      	mov	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4413      	add	r3, r2
 800e63c:	009b      	lsls	r3, r3, #2
 800e63e:	4a1f      	ldr	r2, [pc, #124]	@ (800e6bc <xTaskIncrementTick+0x164>)
 800e640:	441a      	add	r2, r3
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	3304      	adds	r3, #4
 800e646:	4619      	mov	r1, r3
 800e648:	4610      	mov	r0, r2
 800e64a:	f7fe fa76 	bl	800cb3a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e64e:	68bb      	ldr	r3, [r7, #8]
 800e650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e652:	4b1b      	ldr	r3, [pc, #108]	@ (800e6c0 <xTaskIncrementTick+0x168>)
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e658:	429a      	cmp	r2, r3
 800e65a:	d3b8      	bcc.n	800e5ce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e65c:	2301      	movs	r3, #1
 800e65e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e660:	e7b5      	b.n	800e5ce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e662:	4b17      	ldr	r3, [pc, #92]	@ (800e6c0 <xTaskIncrementTick+0x168>)
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e668:	4914      	ldr	r1, [pc, #80]	@ (800e6bc <xTaskIncrementTick+0x164>)
 800e66a:	4613      	mov	r3, r2
 800e66c:	009b      	lsls	r3, r3, #2
 800e66e:	4413      	add	r3, r2
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	440b      	add	r3, r1
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	2b01      	cmp	r3, #1
 800e678:	d901      	bls.n	800e67e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800e67a:	2301      	movs	r3, #1
 800e67c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e67e:	4b11      	ldr	r3, [pc, #68]	@ (800e6c4 <xTaskIncrementTick+0x16c>)
 800e680:	681b      	ldr	r3, [r3, #0]
 800e682:	2b00      	cmp	r3, #0
 800e684:	d007      	beq.n	800e696 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800e686:	2301      	movs	r3, #1
 800e688:	617b      	str	r3, [r7, #20]
 800e68a:	e004      	b.n	800e696 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e68c:	4b0e      	ldr	r3, [pc, #56]	@ (800e6c8 <xTaskIncrementTick+0x170>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	3301      	adds	r3, #1
 800e692:	4a0d      	ldr	r2, [pc, #52]	@ (800e6c8 <xTaskIncrementTick+0x170>)
 800e694:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e696:	697b      	ldr	r3, [r7, #20]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	240053d0 	.word	0x240053d0
 800e6a4:	240053ac 	.word	0x240053ac
 800e6a8:	24005360 	.word	0x24005360
 800e6ac:	24005364 	.word	0x24005364
 800e6b0:	240053c0 	.word	0x240053c0
 800e6b4:	240053c8 	.word	0x240053c8
 800e6b8:	240053b0 	.word	0x240053b0
 800e6bc:	24004ed8 	.word	0x24004ed8
 800e6c0:	24004ed4 	.word	0x24004ed4
 800e6c4:	240053bc 	.word	0x240053bc
 800e6c8:	240053b8 	.word	0x240053b8

0800e6cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6cc:	b480      	push	{r7}
 800e6ce:	b085      	sub	sp, #20
 800e6d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6d2:	4b2b      	ldr	r3, [pc, #172]	@ (800e780 <vTaskSwitchContext+0xb4>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d003      	beq.n	800e6e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6da:	4b2a      	ldr	r3, [pc, #168]	@ (800e784 <vTaskSwitchContext+0xb8>)
 800e6dc:	2201      	movs	r2, #1
 800e6de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6e0:	e047      	b.n	800e772 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800e6e2:	4b28      	ldr	r3, [pc, #160]	@ (800e784 <vTaskSwitchContext+0xb8>)
 800e6e4:	2200      	movs	r2, #0
 800e6e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6e8:	4b27      	ldr	r3, [pc, #156]	@ (800e788 <vTaskSwitchContext+0xbc>)
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e011      	b.n	800e714 <vTaskSwitchContext+0x48>
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d10b      	bne.n	800e70e <vTaskSwitchContext+0x42>
	__asm volatile
 800e6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6fa:	f383 8811 	msr	BASEPRI, r3
 800e6fe:	f3bf 8f6f 	isb	sy
 800e702:	f3bf 8f4f 	dsb	sy
 800e706:	607b      	str	r3, [r7, #4]
}
 800e708:	bf00      	nop
 800e70a:	bf00      	nop
 800e70c:	e7fd      	b.n	800e70a <vTaskSwitchContext+0x3e>
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	3b01      	subs	r3, #1
 800e712:	60fb      	str	r3, [r7, #12]
 800e714:	491d      	ldr	r1, [pc, #116]	@ (800e78c <vTaskSwitchContext+0xc0>)
 800e716:	68fa      	ldr	r2, [r7, #12]
 800e718:	4613      	mov	r3, r2
 800e71a:	009b      	lsls	r3, r3, #2
 800e71c:	4413      	add	r3, r2
 800e71e:	009b      	lsls	r3, r3, #2
 800e720:	440b      	add	r3, r1
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2b00      	cmp	r3, #0
 800e726:	d0e3      	beq.n	800e6f0 <vTaskSwitchContext+0x24>
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	4a16      	ldr	r2, [pc, #88]	@ (800e78c <vTaskSwitchContext+0xc0>)
 800e734:	4413      	add	r3, r2
 800e736:	60bb      	str	r3, [r7, #8]
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	685b      	ldr	r3, [r3, #4]
 800e73c:	685a      	ldr	r2, [r3, #4]
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	605a      	str	r2, [r3, #4]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	685a      	ldr	r2, [r3, #4]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	3308      	adds	r3, #8
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d104      	bne.n	800e758 <vTaskSwitchContext+0x8c>
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	685a      	ldr	r2, [r3, #4]
 800e754:	68bb      	ldr	r3, [r7, #8]
 800e756:	605a      	str	r2, [r3, #4]
 800e758:	68bb      	ldr	r3, [r7, #8]
 800e75a:	685b      	ldr	r3, [r3, #4]
 800e75c:	68db      	ldr	r3, [r3, #12]
 800e75e:	4a0c      	ldr	r2, [pc, #48]	@ (800e790 <vTaskSwitchContext+0xc4>)
 800e760:	6013      	str	r3, [r2, #0]
 800e762:	4a09      	ldr	r2, [pc, #36]	@ (800e788 <vTaskSwitchContext+0xbc>)
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e768:	4b09      	ldr	r3, [pc, #36]	@ (800e790 <vTaskSwitchContext+0xc4>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	3354      	adds	r3, #84	@ 0x54
 800e76e:	4a09      	ldr	r2, [pc, #36]	@ (800e794 <vTaskSwitchContext+0xc8>)
 800e770:	6013      	str	r3, [r2, #0]
}
 800e772:	bf00      	nop
 800e774:	3714      	adds	r7, #20
 800e776:	46bd      	mov	sp, r7
 800e778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	240053d0 	.word	0x240053d0
 800e784:	240053bc 	.word	0x240053bc
 800e788:	240053b0 	.word	0x240053b0
 800e78c:	24004ed8 	.word	0x24004ed8
 800e790:	24004ed4 	.word	0x24004ed4
 800e794:	24000160 	.word	0x24000160

0800e798 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10b      	bne.n	800e7c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800e7a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7ac:	f383 8811 	msr	BASEPRI, r3
 800e7b0:	f3bf 8f6f 	isb	sy
 800e7b4:	f3bf 8f4f 	dsb	sy
 800e7b8:	60fb      	str	r3, [r7, #12]
}
 800e7ba:	bf00      	nop
 800e7bc:	bf00      	nop
 800e7be:	e7fd      	b.n	800e7bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7c0:	4b07      	ldr	r3, [pc, #28]	@ (800e7e0 <vTaskPlaceOnEventList+0x48>)
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	3318      	adds	r3, #24
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7fe f9da 	bl	800cb82 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7ce:	2101      	movs	r1, #1
 800e7d0:	6838      	ldr	r0, [r7, #0]
 800e7d2:	f000 fb97 	bl	800ef04 <prvAddCurrentTaskToDelayedList>
}
 800e7d6:	bf00      	nop
 800e7d8:	3710      	adds	r7, #16
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	24004ed4 	.word	0x24004ed4

0800e7e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e7e4:	b580      	push	{r7, lr}
 800e7e6:	b086      	sub	sp, #24
 800e7e8:	af00      	add	r7, sp, #0
 800e7ea:	60f8      	str	r0, [r7, #12]
 800e7ec:	60b9      	str	r1, [r7, #8]
 800e7ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10b      	bne.n	800e80e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800e7f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7fa:	f383 8811 	msr	BASEPRI, r3
 800e7fe:	f3bf 8f6f 	isb	sy
 800e802:	f3bf 8f4f 	dsb	sy
 800e806:	617b      	str	r3, [r7, #20]
}
 800e808:	bf00      	nop
 800e80a:	bf00      	nop
 800e80c:	e7fd      	b.n	800e80a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e80e:	4b0a      	ldr	r3, [pc, #40]	@ (800e838 <vTaskPlaceOnEventListRestricted+0x54>)
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	3318      	adds	r3, #24
 800e814:	4619      	mov	r1, r3
 800e816:	68f8      	ldr	r0, [r7, #12]
 800e818:	f7fe f98f 	bl	800cb3a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d002      	beq.n	800e828 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800e822:	f04f 33ff 	mov.w	r3, #4294967295
 800e826:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	68b8      	ldr	r0, [r7, #8]
 800e82c:	f000 fb6a 	bl	800ef04 <prvAddCurrentTaskToDelayedList>
	}
 800e830:	bf00      	nop
 800e832:	3718      	adds	r7, #24
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}
 800e838:	24004ed4 	.word	0x24004ed4

0800e83c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b086      	sub	sp, #24
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	68db      	ldr	r3, [r3, #12]
 800e848:	68db      	ldr	r3, [r3, #12]
 800e84a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e84c:	693b      	ldr	r3, [r7, #16]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d10b      	bne.n	800e86a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800e852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e856:	f383 8811 	msr	BASEPRI, r3
 800e85a:	f3bf 8f6f 	isb	sy
 800e85e:	f3bf 8f4f 	dsb	sy
 800e862:	60fb      	str	r3, [r7, #12]
}
 800e864:	bf00      	nop
 800e866:	bf00      	nop
 800e868:	e7fd      	b.n	800e866 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	3318      	adds	r3, #24
 800e86e:	4618      	mov	r0, r3
 800e870:	f7fe f9c0 	bl	800cbf4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e874:	4b1d      	ldr	r3, [pc, #116]	@ (800e8ec <xTaskRemoveFromEventList+0xb0>)
 800e876:	681b      	ldr	r3, [r3, #0]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d11d      	bne.n	800e8b8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	3304      	adds	r3, #4
 800e880:	4618      	mov	r0, r3
 800e882:	f7fe f9b7 	bl	800cbf4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e88a:	4b19      	ldr	r3, [pc, #100]	@ (800e8f0 <xTaskRemoveFromEventList+0xb4>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	429a      	cmp	r2, r3
 800e890:	d903      	bls.n	800e89a <xTaskRemoveFromEventList+0x5e>
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e896:	4a16      	ldr	r2, [pc, #88]	@ (800e8f0 <xTaskRemoveFromEventList+0xb4>)
 800e898:	6013      	str	r3, [r2, #0]
 800e89a:	693b      	ldr	r3, [r7, #16]
 800e89c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e89e:	4613      	mov	r3, r2
 800e8a0:	009b      	lsls	r3, r3, #2
 800e8a2:	4413      	add	r3, r2
 800e8a4:	009b      	lsls	r3, r3, #2
 800e8a6:	4a13      	ldr	r2, [pc, #76]	@ (800e8f4 <xTaskRemoveFromEventList+0xb8>)
 800e8a8:	441a      	add	r2, r3
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	3304      	adds	r3, #4
 800e8ae:	4619      	mov	r1, r3
 800e8b0:	4610      	mov	r0, r2
 800e8b2:	f7fe f942 	bl	800cb3a <vListInsertEnd>
 800e8b6:	e005      	b.n	800e8c4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	3318      	adds	r3, #24
 800e8bc:	4619      	mov	r1, r3
 800e8be:	480e      	ldr	r0, [pc, #56]	@ (800e8f8 <xTaskRemoveFromEventList+0xbc>)
 800e8c0:	f7fe f93b 	bl	800cb3a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8c4:	693b      	ldr	r3, [r7, #16]
 800e8c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e8fc <xTaskRemoveFromEventList+0xc0>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8ce:	429a      	cmp	r2, r3
 800e8d0:	d905      	bls.n	800e8de <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8d6:	4b0a      	ldr	r3, [pc, #40]	@ (800e900 <xTaskRemoveFromEventList+0xc4>)
 800e8d8:	2201      	movs	r2, #1
 800e8da:	601a      	str	r2, [r3, #0]
 800e8dc:	e001      	b.n	800e8e2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e8de:	2300      	movs	r3, #0
 800e8e0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e8e2:	697b      	ldr	r3, [r7, #20]
}
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	3718      	adds	r7, #24
 800e8e8:	46bd      	mov	sp, r7
 800e8ea:	bd80      	pop	{r7, pc}
 800e8ec:	240053d0 	.word	0x240053d0
 800e8f0:	240053b0 	.word	0x240053b0
 800e8f4:	24004ed8 	.word	0x24004ed8
 800e8f8:	24005368 	.word	0x24005368
 800e8fc:	24004ed4 	.word	0x24004ed4
 800e900:	240053bc 	.word	0x240053bc

0800e904 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e90c:	4b06      	ldr	r3, [pc, #24]	@ (800e928 <vTaskInternalSetTimeOutState+0x24>)
 800e90e:	681a      	ldr	r2, [r3, #0]
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e914:	4b05      	ldr	r3, [pc, #20]	@ (800e92c <vTaskInternalSetTimeOutState+0x28>)
 800e916:	681a      	ldr	r2, [r3, #0]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	605a      	str	r2, [r3, #4]
}
 800e91c:	bf00      	nop
 800e91e:	370c      	adds	r7, #12
 800e920:	46bd      	mov	sp, r7
 800e922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e926:	4770      	bx	lr
 800e928:	240053c0 	.word	0x240053c0
 800e92c:	240053ac 	.word	0x240053ac

0800e930 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b088      	sub	sp, #32
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10b      	bne.n	800e958 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	613b      	str	r3, [r7, #16]
}
 800e952:	bf00      	nop
 800e954:	bf00      	nop
 800e956:	e7fd      	b.n	800e954 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d10b      	bne.n	800e976 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800e95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e962:	f383 8811 	msr	BASEPRI, r3
 800e966:	f3bf 8f6f 	isb	sy
 800e96a:	f3bf 8f4f 	dsb	sy
 800e96e:	60fb      	str	r3, [r7, #12]
}
 800e970:	bf00      	nop
 800e972:	bf00      	nop
 800e974:	e7fd      	b.n	800e972 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800e976:	f7fe fa97 	bl	800cea8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e97a:	4b1d      	ldr	r3, [pc, #116]	@ (800e9f0 <xTaskCheckForTimeOut+0xc0>)
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	685b      	ldr	r3, [r3, #4]
 800e984:	69ba      	ldr	r2, [r7, #24]
 800e986:	1ad3      	subs	r3, r2, r3
 800e988:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e992:	d102      	bne.n	800e99a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]
 800e998:	e023      	b.n	800e9e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681a      	ldr	r2, [r3, #0]
 800e99e:	4b15      	ldr	r3, [pc, #84]	@ (800e9f4 <xTaskCheckForTimeOut+0xc4>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d007      	beq.n	800e9b6 <xTaskCheckForTimeOut+0x86>
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	685b      	ldr	r3, [r3, #4]
 800e9aa:	69ba      	ldr	r2, [r7, #24]
 800e9ac:	429a      	cmp	r2, r3
 800e9ae:	d302      	bcc.n	800e9b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e9b0:	2301      	movs	r3, #1
 800e9b2:	61fb      	str	r3, [r7, #28]
 800e9b4:	e015      	b.n	800e9e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e9b6:	683b      	ldr	r3, [r7, #0]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	697a      	ldr	r2, [r7, #20]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d20b      	bcs.n	800e9d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e9c0:	683b      	ldr	r3, [r7, #0]
 800e9c2:	681a      	ldr	r2, [r3, #0]
 800e9c4:	697b      	ldr	r3, [r7, #20]
 800e9c6:	1ad2      	subs	r2, r2, r3
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e9cc:	6878      	ldr	r0, [r7, #4]
 800e9ce:	f7ff ff99 	bl	800e904 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	61fb      	str	r3, [r7, #28]
 800e9d6:	e004      	b.n	800e9e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e9de:	2301      	movs	r3, #1
 800e9e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e9e2:	f7fe fa93 	bl	800cf0c <vPortExitCritical>

	return xReturn;
 800e9e6:	69fb      	ldr	r3, [r7, #28]
}
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	3720      	adds	r7, #32
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	bd80      	pop	{r7, pc}
 800e9f0:	240053ac 	.word	0x240053ac
 800e9f4:	240053c0 	.word	0x240053c0

0800e9f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e9f8:	b480      	push	{r7}
 800e9fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e9fc:	4b03      	ldr	r3, [pc, #12]	@ (800ea0c <vTaskMissedYield+0x14>)
 800e9fe:	2201      	movs	r2, #1
 800ea00:	601a      	str	r2, [r3, #0]
}
 800ea02:	bf00      	nop
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	240053bc 	.word	0x240053bc

0800ea10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b082      	sub	sp, #8
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ea18:	f000 f852 	bl	800eac0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ea1c:	4b06      	ldr	r3, [pc, #24]	@ (800ea38 <prvIdleTask+0x28>)
 800ea1e:	681b      	ldr	r3, [r3, #0]
 800ea20:	2b01      	cmp	r3, #1
 800ea22:	d9f9      	bls.n	800ea18 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ea24:	4b05      	ldr	r3, [pc, #20]	@ (800ea3c <prvIdleTask+0x2c>)
 800ea26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea2a:	601a      	str	r2, [r3, #0]
 800ea2c:	f3bf 8f4f 	dsb	sy
 800ea30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ea34:	e7f0      	b.n	800ea18 <prvIdleTask+0x8>
 800ea36:	bf00      	nop
 800ea38:	24004ed8 	.word	0x24004ed8
 800ea3c:	e000ed04 	.word	0xe000ed04

0800ea40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ea40:	b580      	push	{r7, lr}
 800ea42:	b082      	sub	sp, #8
 800ea44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea46:	2300      	movs	r3, #0
 800ea48:	607b      	str	r3, [r7, #4]
 800ea4a:	e00c      	b.n	800ea66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	4613      	mov	r3, r2
 800ea50:	009b      	lsls	r3, r3, #2
 800ea52:	4413      	add	r3, r2
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4a12      	ldr	r2, [pc, #72]	@ (800eaa0 <prvInitialiseTaskLists+0x60>)
 800ea58:	4413      	add	r3, r2
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	f7fe f840 	bl	800cae0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	3301      	adds	r3, #1
 800ea64:	607b      	str	r3, [r7, #4]
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	2b37      	cmp	r3, #55	@ 0x37
 800ea6a:	d9ef      	bls.n	800ea4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ea6c:	480d      	ldr	r0, [pc, #52]	@ (800eaa4 <prvInitialiseTaskLists+0x64>)
 800ea6e:	f7fe f837 	bl	800cae0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ea72:	480d      	ldr	r0, [pc, #52]	@ (800eaa8 <prvInitialiseTaskLists+0x68>)
 800ea74:	f7fe f834 	bl	800cae0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ea78:	480c      	ldr	r0, [pc, #48]	@ (800eaac <prvInitialiseTaskLists+0x6c>)
 800ea7a:	f7fe f831 	bl	800cae0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ea7e:	480c      	ldr	r0, [pc, #48]	@ (800eab0 <prvInitialiseTaskLists+0x70>)
 800ea80:	f7fe f82e 	bl	800cae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ea84:	480b      	ldr	r0, [pc, #44]	@ (800eab4 <prvInitialiseTaskLists+0x74>)
 800ea86:	f7fe f82b 	bl	800cae0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ea8a:	4b0b      	ldr	r3, [pc, #44]	@ (800eab8 <prvInitialiseTaskLists+0x78>)
 800ea8c:	4a05      	ldr	r2, [pc, #20]	@ (800eaa4 <prvInitialiseTaskLists+0x64>)
 800ea8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ea90:	4b0a      	ldr	r3, [pc, #40]	@ (800eabc <prvInitialiseTaskLists+0x7c>)
 800ea92:	4a05      	ldr	r2, [pc, #20]	@ (800eaa8 <prvInitialiseTaskLists+0x68>)
 800ea94:	601a      	str	r2, [r3, #0]
}
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}
 800ea9e:	bf00      	nop
 800eaa0:	24004ed8 	.word	0x24004ed8
 800eaa4:	24005338 	.word	0x24005338
 800eaa8:	2400534c 	.word	0x2400534c
 800eaac:	24005368 	.word	0x24005368
 800eab0:	2400537c 	.word	0x2400537c
 800eab4:	24005394 	.word	0x24005394
 800eab8:	24005360 	.word	0x24005360
 800eabc:	24005364 	.word	0x24005364

0800eac0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eac6:	e019      	b.n	800eafc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800eac8:	f7fe f9ee 	bl	800cea8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eacc:	4b10      	ldr	r3, [pc, #64]	@ (800eb10 <prvCheckTasksWaitingTermination+0x50>)
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	3304      	adds	r3, #4
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fe f88b 	bl	800cbf4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800eade:	4b0d      	ldr	r3, [pc, #52]	@ (800eb14 <prvCheckTasksWaitingTermination+0x54>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	3b01      	subs	r3, #1
 800eae4:	4a0b      	ldr	r2, [pc, #44]	@ (800eb14 <prvCheckTasksWaitingTermination+0x54>)
 800eae6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800eae8:	4b0b      	ldr	r3, [pc, #44]	@ (800eb18 <prvCheckTasksWaitingTermination+0x58>)
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	4a0a      	ldr	r2, [pc, #40]	@ (800eb18 <prvCheckTasksWaitingTermination+0x58>)
 800eaf0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800eaf2:	f7fe fa0b 	bl	800cf0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f000 f810 	bl	800eb1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eafc:	4b06      	ldr	r3, [pc, #24]	@ (800eb18 <prvCheckTasksWaitingTermination+0x58>)
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d1e1      	bne.n	800eac8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800eb04:	bf00      	nop
 800eb06:	bf00      	nop
 800eb08:	3708      	adds	r7, #8
 800eb0a:	46bd      	mov	sp, r7
 800eb0c:	bd80      	pop	{r7, pc}
 800eb0e:	bf00      	nop
 800eb10:	2400537c 	.word	0x2400537c
 800eb14:	240053a8 	.word	0x240053a8
 800eb18:	24005390 	.word	0x24005390

0800eb1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b084      	sub	sp, #16
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	3354      	adds	r3, #84	@ 0x54
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f000 ff69 	bl	800fa00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d108      	bne.n	800eb4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	f7fd feaf 	bl	800c8a0 <vPortFree>
				vPortFree( pxTCB );
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f7fd feac 	bl	800c8a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800eb48:	e019      	b.n	800eb7e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb50:	2b01      	cmp	r3, #1
 800eb52:	d103      	bne.n	800eb5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800eb54:	6878      	ldr	r0, [r7, #4]
 800eb56:	f7fd fea3 	bl	800c8a0 <vPortFree>
	}
 800eb5a:	e010      	b.n	800eb7e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800eb62:	2b02      	cmp	r3, #2
 800eb64:	d00b      	beq.n	800eb7e <prvDeleteTCB+0x62>
	__asm volatile
 800eb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb6a:	f383 8811 	msr	BASEPRI, r3
 800eb6e:	f3bf 8f6f 	isb	sy
 800eb72:	f3bf 8f4f 	dsb	sy
 800eb76:	60fb      	str	r3, [r7, #12]
}
 800eb78:	bf00      	nop
 800eb7a:	bf00      	nop
 800eb7c:	e7fd      	b.n	800eb7a <prvDeleteTCB+0x5e>
	}
 800eb7e:	bf00      	nop
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
	...

0800eb88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800eb8e:	4b0c      	ldr	r3, [pc, #48]	@ (800ebc0 <prvResetNextTaskUnblockTime+0x38>)
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	2b00      	cmp	r3, #0
 800eb96:	d104      	bne.n	800eba2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eb98:	4b0a      	ldr	r3, [pc, #40]	@ (800ebc4 <prvResetNextTaskUnblockTime+0x3c>)
 800eb9a:	f04f 32ff 	mov.w	r2, #4294967295
 800eb9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eba0:	e008      	b.n	800ebb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eba2:	4b07      	ldr	r3, [pc, #28]	@ (800ebc0 <prvResetNextTaskUnblockTime+0x38>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	68db      	ldr	r3, [r3, #12]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	4a04      	ldr	r2, [pc, #16]	@ (800ebc4 <prvResetNextTaskUnblockTime+0x3c>)
 800ebb2:	6013      	str	r3, [r2, #0]
}
 800ebb4:	bf00      	nop
 800ebb6:	370c      	adds	r7, #12
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebbe:	4770      	bx	lr
 800ebc0:	24005360 	.word	0x24005360
 800ebc4:	240053c8 	.word	0x240053c8

0800ebc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ebc8:	b480      	push	{r7}
 800ebca:	b083      	sub	sp, #12
 800ebcc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ebce:	4b05      	ldr	r3, [pc, #20]	@ (800ebe4 <xTaskGetCurrentTaskHandle+0x1c>)
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ebd4:	687b      	ldr	r3, [r7, #4]
	}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	24004ed4 	.word	0x24004ed4

0800ebe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ebe8:	b480      	push	{r7}
 800ebea:	b083      	sub	sp, #12
 800ebec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ebee:	4b0b      	ldr	r3, [pc, #44]	@ (800ec1c <xTaskGetSchedulerState+0x34>)
 800ebf0:	681b      	ldr	r3, [r3, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d102      	bne.n	800ebfc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ebf6:	2301      	movs	r3, #1
 800ebf8:	607b      	str	r3, [r7, #4]
 800ebfa:	e008      	b.n	800ec0e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ebfc:	4b08      	ldr	r3, [pc, #32]	@ (800ec20 <xTaskGetSchedulerState+0x38>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d102      	bne.n	800ec0a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ec04:	2302      	movs	r3, #2
 800ec06:	607b      	str	r3, [r7, #4]
 800ec08:	e001      	b.n	800ec0e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ec0e:	687b      	ldr	r3, [r7, #4]
	}
 800ec10:	4618      	mov	r0, r3
 800ec12:	370c      	adds	r7, #12
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr
 800ec1c:	240053b4 	.word	0x240053b4
 800ec20:	240053d0 	.word	0x240053d0

0800ec24 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b084      	sub	sp, #16
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ec30:	2300      	movs	r3, #0
 800ec32:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d051      	beq.n	800ecde <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ec3a:	68bb      	ldr	r3, [r7, #8]
 800ec3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec3e:	4b2a      	ldr	r3, [pc, #168]	@ (800ece8 <xTaskPriorityInherit+0xc4>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec44:	429a      	cmp	r2, r3
 800ec46:	d241      	bcs.n	800eccc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ec48:	68bb      	ldr	r3, [r7, #8]
 800ec4a:	699b      	ldr	r3, [r3, #24]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	db06      	blt.n	800ec5e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ec50:	4b25      	ldr	r3, [pc, #148]	@ (800ece8 <xTaskPriorityInherit+0xc4>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec56:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	6959      	ldr	r1, [r3, #20]
 800ec62:	68bb      	ldr	r3, [r7, #8]
 800ec64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec66:	4613      	mov	r3, r2
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	4413      	add	r3, r2
 800ec6c:	009b      	lsls	r3, r3, #2
 800ec6e:	4a1f      	ldr	r2, [pc, #124]	@ (800ecec <xTaskPriorityInherit+0xc8>)
 800ec70:	4413      	add	r3, r2
 800ec72:	4299      	cmp	r1, r3
 800ec74:	d122      	bne.n	800ecbc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	3304      	adds	r3, #4
 800ec7a:	4618      	mov	r0, r3
 800ec7c:	f7fd ffba 	bl	800cbf4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ec80:	4b19      	ldr	r3, [pc, #100]	@ (800ece8 <xTaskPriorityInherit+0xc4>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ec8e:	4b18      	ldr	r3, [pc, #96]	@ (800ecf0 <xTaskPriorityInherit+0xcc>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d903      	bls.n	800ec9e <xTaskPriorityInherit+0x7a>
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec9a:	4a15      	ldr	r2, [pc, #84]	@ (800ecf0 <xTaskPriorityInherit+0xcc>)
 800ec9c:	6013      	str	r3, [r2, #0]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eca2:	4613      	mov	r3, r2
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4413      	add	r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	4a10      	ldr	r2, [pc, #64]	@ (800ecec <xTaskPriorityInherit+0xc8>)
 800ecac:	441a      	add	r2, r3
 800ecae:	68bb      	ldr	r3, [r7, #8]
 800ecb0:	3304      	adds	r3, #4
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	4610      	mov	r0, r2
 800ecb6:	f7fd ff40 	bl	800cb3a <vListInsertEnd>
 800ecba:	e004      	b.n	800ecc6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ecbc:	4b0a      	ldr	r3, [pc, #40]	@ (800ece8 <xTaskPriorityInherit+0xc4>)
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc2:	68bb      	ldr	r3, [r7, #8]
 800ecc4:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ecc6:	2301      	movs	r3, #1
 800ecc8:	60fb      	str	r3, [r7, #12]
 800ecca:	e008      	b.n	800ecde <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800eccc:	68bb      	ldr	r3, [r7, #8]
 800ecce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ecd0:	4b05      	ldr	r3, [pc, #20]	@ (800ece8 <xTaskPriorityInherit+0xc4>)
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d201      	bcs.n	800ecde <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ecde:	68fb      	ldr	r3, [r7, #12]
	}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}
 800ece8:	24004ed4 	.word	0x24004ed4
 800ecec:	24004ed8 	.word	0x24004ed8
 800ecf0:	240053b0 	.word	0x240053b0

0800ecf4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b086      	sub	sp, #24
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ed00:	2300      	movs	r3, #0
 800ed02:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d058      	beq.n	800edbc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ed0a:	4b2f      	ldr	r3, [pc, #188]	@ (800edc8 <xTaskPriorityDisinherit+0xd4>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	693a      	ldr	r2, [r7, #16]
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d00b      	beq.n	800ed2c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ed14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed18:	f383 8811 	msr	BASEPRI, r3
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f3bf 8f4f 	dsb	sy
 800ed24:	60fb      	str	r3, [r7, #12]
}
 800ed26:	bf00      	nop
 800ed28:	bf00      	nop
 800ed2a:	e7fd      	b.n	800ed28 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ed2c:	693b      	ldr	r3, [r7, #16]
 800ed2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d10b      	bne.n	800ed4c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ed34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	60bb      	str	r3, [r7, #8]
}
 800ed46:	bf00      	nop
 800ed48:	bf00      	nop
 800ed4a:	e7fd      	b.n	800ed48 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ed4c:	693b      	ldr	r3, [r7, #16]
 800ed4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed50:	1e5a      	subs	r2, r3, #1
 800ed52:	693b      	ldr	r3, [r7, #16]
 800ed54:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed5a:	693b      	ldr	r3, [r7, #16]
 800ed5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d02c      	beq.n	800edbc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ed62:	693b      	ldr	r3, [r7, #16]
 800ed64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d128      	bne.n	800edbc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed6a:	693b      	ldr	r3, [r7, #16]
 800ed6c:	3304      	adds	r3, #4
 800ed6e:	4618      	mov	r0, r3
 800ed70:	f7fd ff40 	bl	800cbf4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ed74:	693b      	ldr	r3, [r7, #16]
 800ed76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ed78:	693b      	ldr	r3, [r7, #16]
 800ed7a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed7c:	693b      	ldr	r3, [r7, #16]
 800ed7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed80:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ed88:	693b      	ldr	r3, [r7, #16]
 800ed8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed8c:	4b0f      	ldr	r3, [pc, #60]	@ (800edcc <xTaskPriorityDisinherit+0xd8>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	429a      	cmp	r2, r3
 800ed92:	d903      	bls.n	800ed9c <xTaskPriorityDisinherit+0xa8>
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed98:	4a0c      	ldr	r2, [pc, #48]	@ (800edcc <xTaskPriorityDisinherit+0xd8>)
 800ed9a:	6013      	str	r3, [r2, #0]
 800ed9c:	693b      	ldr	r3, [r7, #16]
 800ed9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda0:	4613      	mov	r3, r2
 800eda2:	009b      	lsls	r3, r3, #2
 800eda4:	4413      	add	r3, r2
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	4a09      	ldr	r2, [pc, #36]	@ (800edd0 <xTaskPriorityDisinherit+0xdc>)
 800edaa:	441a      	add	r2, r3
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	3304      	adds	r3, #4
 800edb0:	4619      	mov	r1, r3
 800edb2:	4610      	mov	r0, r2
 800edb4:	f7fd fec1 	bl	800cb3a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800edb8:	2301      	movs	r3, #1
 800edba:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edbc:	697b      	ldr	r3, [r7, #20]
	}
 800edbe:	4618      	mov	r0, r3
 800edc0:	3718      	adds	r7, #24
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	24004ed4 	.word	0x24004ed4
 800edcc:	240053b0 	.word	0x240053b0
 800edd0:	24004ed8 	.word	0x24004ed8

0800edd4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b088      	sub	sp, #32
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
 800eddc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ede2:	2301      	movs	r3, #1
 800ede4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d06c      	beq.n	800eec6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800edec:	69bb      	ldr	r3, [r7, #24]
 800edee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d10b      	bne.n	800ee0c <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800edf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edf8:	f383 8811 	msr	BASEPRI, r3
 800edfc:	f3bf 8f6f 	isb	sy
 800ee00:	f3bf 8f4f 	dsb	sy
 800ee04:	60fb      	str	r3, [r7, #12]
}
 800ee06:	bf00      	nop
 800ee08:	bf00      	nop
 800ee0a:	e7fd      	b.n	800ee08 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ee0c:	69bb      	ldr	r3, [r7, #24]
 800ee0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d902      	bls.n	800ee1c <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	61fb      	str	r3, [r7, #28]
 800ee1a:	e002      	b.n	800ee22 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800ee1c:	69bb      	ldr	r3, [r7, #24]
 800ee1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ee20:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ee22:	69bb      	ldr	r3, [r7, #24]
 800ee24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee26:	69fa      	ldr	r2, [r7, #28]
 800ee28:	429a      	cmp	r2, r3
 800ee2a:	d04c      	beq.n	800eec6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee30:	697a      	ldr	r2, [r7, #20]
 800ee32:	429a      	cmp	r2, r3
 800ee34:	d147      	bne.n	800eec6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ee36:	4b26      	ldr	r3, [pc, #152]	@ (800eed0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	69ba      	ldr	r2, [r7, #24]
 800ee3c:	429a      	cmp	r2, r3
 800ee3e:	d10b      	bne.n	800ee58 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800ee40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ee44:	f383 8811 	msr	BASEPRI, r3
 800ee48:	f3bf 8f6f 	isb	sy
 800ee4c:	f3bf 8f4f 	dsb	sy
 800ee50:	60bb      	str	r3, [r7, #8]
}
 800ee52:	bf00      	nop
 800ee54:	bf00      	nop
 800ee56:	e7fd      	b.n	800ee54 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ee58:	69bb      	ldr	r3, [r7, #24]
 800ee5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee5c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ee5e:	69bb      	ldr	r3, [r7, #24]
 800ee60:	69fa      	ldr	r2, [r7, #28]
 800ee62:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ee64:	69bb      	ldr	r3, [r7, #24]
 800ee66:	699b      	ldr	r3, [r3, #24]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	db04      	blt.n	800ee76 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee6c:	69fb      	ldr	r3, [r7, #28]
 800ee6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ee72:	69bb      	ldr	r3, [r7, #24]
 800ee74:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ee76:	69bb      	ldr	r3, [r7, #24]
 800ee78:	6959      	ldr	r1, [r3, #20]
 800ee7a:	693a      	ldr	r2, [r7, #16]
 800ee7c:	4613      	mov	r3, r2
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4413      	add	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4a13      	ldr	r2, [pc, #76]	@ (800eed4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ee86:	4413      	add	r3, r2
 800ee88:	4299      	cmp	r1, r3
 800ee8a:	d11c      	bne.n	800eec6 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4618      	mov	r0, r3
 800ee92:	f7fd feaf 	bl	800cbf4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ee96:	69bb      	ldr	r3, [r7, #24]
 800ee98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ee9a:	4b0f      	ldr	r3, [pc, #60]	@ (800eed8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d903      	bls.n	800eeaa <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eea6:	4a0c      	ldr	r2, [pc, #48]	@ (800eed8 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800eea8:	6013      	str	r3, [r2, #0]
 800eeaa:	69bb      	ldr	r3, [r7, #24]
 800eeac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eeae:	4613      	mov	r3, r2
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	4413      	add	r3, r2
 800eeb4:	009b      	lsls	r3, r3, #2
 800eeb6:	4a07      	ldr	r2, [pc, #28]	@ (800eed4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800eeb8:	441a      	add	r2, r3
 800eeba:	69bb      	ldr	r3, [r7, #24]
 800eebc:	3304      	adds	r3, #4
 800eebe:	4619      	mov	r1, r3
 800eec0:	4610      	mov	r0, r2
 800eec2:	f7fd fe3a 	bl	800cb3a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800eec6:	bf00      	nop
 800eec8:	3720      	adds	r7, #32
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	24004ed4 	.word	0x24004ed4
 800eed4:	24004ed8 	.word	0x24004ed8
 800eed8:	240053b0 	.word	0x240053b0

0800eedc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800eedc:	b480      	push	{r7}
 800eede:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800eee0:	4b07      	ldr	r3, [pc, #28]	@ (800ef00 <pvTaskIncrementMutexHeldCount+0x24>)
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d004      	beq.n	800eef2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eee8:	4b05      	ldr	r3, [pc, #20]	@ (800ef00 <pvTaskIncrementMutexHeldCount+0x24>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eeee:	3201      	adds	r2, #1
 800eef0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800eef2:	4b03      	ldr	r3, [pc, #12]	@ (800ef00 <pvTaskIncrementMutexHeldCount+0x24>)
 800eef4:	681b      	ldr	r3, [r3, #0]
	}
 800eef6:	4618      	mov	r0, r3
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	24004ed4 	.word	0x24004ed4

0800ef04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b084      	sub	sp, #16
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
 800ef0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ef0e:	4b21      	ldr	r3, [pc, #132]	@ (800ef94 <prvAddCurrentTaskToDelayedList+0x90>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef14:	4b20      	ldr	r3, [pc, #128]	@ (800ef98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	3304      	adds	r3, #4
 800ef1a:	4618      	mov	r0, r3
 800ef1c:	f7fd fe6a 	bl	800cbf4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef26:	d10a      	bne.n	800ef3e <prvAddCurrentTaskToDelayedList+0x3a>
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d007      	beq.n	800ef3e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef2e:	4b1a      	ldr	r3, [pc, #104]	@ (800ef98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3304      	adds	r3, #4
 800ef34:	4619      	mov	r1, r3
 800ef36:	4819      	ldr	r0, [pc, #100]	@ (800ef9c <prvAddCurrentTaskToDelayedList+0x98>)
 800ef38:	f7fd fdff 	bl	800cb3a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ef3c:	e026      	b.n	800ef8c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ef3e:	68fa      	ldr	r2, [r7, #12]
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	4413      	add	r3, r2
 800ef44:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ef46:	4b14      	ldr	r3, [pc, #80]	@ (800ef98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	68ba      	ldr	r2, [r7, #8]
 800ef4c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ef4e:	68ba      	ldr	r2, [r7, #8]
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	429a      	cmp	r2, r3
 800ef54:	d209      	bcs.n	800ef6a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef56:	4b12      	ldr	r3, [pc, #72]	@ (800efa0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800ef58:	681a      	ldr	r2, [r3, #0]
 800ef5a:	4b0f      	ldr	r3, [pc, #60]	@ (800ef98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	3304      	adds	r3, #4
 800ef60:	4619      	mov	r1, r3
 800ef62:	4610      	mov	r0, r2
 800ef64:	f7fd fe0d 	bl	800cb82 <vListInsert>
}
 800ef68:	e010      	b.n	800ef8c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ef6a:	4b0e      	ldr	r3, [pc, #56]	@ (800efa4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	4b0a      	ldr	r3, [pc, #40]	@ (800ef98 <prvAddCurrentTaskToDelayedList+0x94>)
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	3304      	adds	r3, #4
 800ef74:	4619      	mov	r1, r3
 800ef76:	4610      	mov	r0, r2
 800ef78:	f7fd fe03 	bl	800cb82 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ef7c:	4b0a      	ldr	r3, [pc, #40]	@ (800efa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef7e:	681b      	ldr	r3, [r3, #0]
 800ef80:	68ba      	ldr	r2, [r7, #8]
 800ef82:	429a      	cmp	r2, r3
 800ef84:	d202      	bcs.n	800ef8c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ef86:	4a08      	ldr	r2, [pc, #32]	@ (800efa8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	6013      	str	r3, [r2, #0]
}
 800ef8c:	bf00      	nop
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	240053ac 	.word	0x240053ac
 800ef98:	24004ed4 	.word	0x24004ed4
 800ef9c:	24005394 	.word	0x24005394
 800efa0:	24005364 	.word	0x24005364
 800efa4:	24005360 	.word	0x24005360
 800efa8:	240053c8 	.word	0x240053c8

0800efac <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b08a      	sub	sp, #40	@ 0x28
 800efb0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800efb2:	2300      	movs	r3, #0
 800efb4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800efb6:	f000 fb13 	bl	800f5e0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800efba:	4b1d      	ldr	r3, [pc, #116]	@ (800f030 <xTimerCreateTimerTask+0x84>)
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d021      	beq.n	800f006 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800efc2:	2300      	movs	r3, #0
 800efc4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800efc6:	2300      	movs	r3, #0
 800efc8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800efca:	1d3a      	adds	r2, r7, #4
 800efcc:	f107 0108 	add.w	r1, r7, #8
 800efd0:	f107 030c 	add.w	r3, r7, #12
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7fd fb7b 	bl	800c6d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800efda:	6879      	ldr	r1, [r7, #4]
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	68fa      	ldr	r2, [r7, #12]
 800efe0:	9202      	str	r2, [sp, #8]
 800efe2:	9301      	str	r3, [sp, #4]
 800efe4:	2302      	movs	r3, #2
 800efe6:	9300      	str	r3, [sp, #0]
 800efe8:	2300      	movs	r3, #0
 800efea:	460a      	mov	r2, r1
 800efec:	4911      	ldr	r1, [pc, #68]	@ (800f034 <xTimerCreateTimerTask+0x88>)
 800efee:	4812      	ldr	r0, [pc, #72]	@ (800f038 <xTimerCreateTimerTask+0x8c>)
 800eff0:	f7fe ff92 	bl	800df18 <xTaskCreateStatic>
 800eff4:	4603      	mov	r3, r0
 800eff6:	4a11      	ldr	r2, [pc, #68]	@ (800f03c <xTimerCreateTimerTask+0x90>)
 800eff8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800effa:	4b10      	ldr	r3, [pc, #64]	@ (800f03c <xTimerCreateTimerTask+0x90>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d001      	beq.n	800f006 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f002:	2301      	movs	r3, #1
 800f004:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f006:	697b      	ldr	r3, [r7, #20]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d10b      	bne.n	800f024 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f00c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f010:	f383 8811 	msr	BASEPRI, r3
 800f014:	f3bf 8f6f 	isb	sy
 800f018:	f3bf 8f4f 	dsb	sy
 800f01c:	613b      	str	r3, [r7, #16]
}
 800f01e:	bf00      	nop
 800f020:	bf00      	nop
 800f022:	e7fd      	b.n	800f020 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f024:	697b      	ldr	r3, [r7, #20]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3718      	adds	r7, #24
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	24005404 	.word	0x24005404
 800f034:	08010c8c 	.word	0x08010c8c
 800f038:	0800f179 	.word	0x0800f179
 800f03c:	24005408 	.word	0x24005408

0800f040 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b08a      	sub	sp, #40	@ 0x28
 800f044:	af00      	add	r7, sp, #0
 800f046:	60f8      	str	r0, [r7, #12]
 800f048:	60b9      	str	r1, [r7, #8]
 800f04a:	607a      	str	r2, [r7, #4]
 800f04c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f04e:	2300      	movs	r3, #0
 800f050:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10b      	bne.n	800f070 <xTimerGenericCommand+0x30>
	__asm volatile
 800f058:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f05c:	f383 8811 	msr	BASEPRI, r3
 800f060:	f3bf 8f6f 	isb	sy
 800f064:	f3bf 8f4f 	dsb	sy
 800f068:	623b      	str	r3, [r7, #32]
}
 800f06a:	bf00      	nop
 800f06c:	bf00      	nop
 800f06e:	e7fd      	b.n	800f06c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f070:	4b19      	ldr	r3, [pc, #100]	@ (800f0d8 <xTimerGenericCommand+0x98>)
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	2b00      	cmp	r3, #0
 800f076:	d02a      	beq.n	800f0ce <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f078:	68bb      	ldr	r3, [r7, #8]
 800f07a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f084:	68bb      	ldr	r3, [r7, #8]
 800f086:	2b05      	cmp	r3, #5
 800f088:	dc18      	bgt.n	800f0bc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f08a:	f7ff fdad 	bl	800ebe8 <xTaskGetSchedulerState>
 800f08e:	4603      	mov	r3, r0
 800f090:	2b02      	cmp	r3, #2
 800f092:	d109      	bne.n	800f0a8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f094:	4b10      	ldr	r3, [pc, #64]	@ (800f0d8 <xTimerGenericCommand+0x98>)
 800f096:	6818      	ldr	r0, [r3, #0]
 800f098:	f107 0110 	add.w	r1, r7, #16
 800f09c:	2300      	movs	r3, #0
 800f09e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f0a0:	f7fe fa22 	bl	800d4e8 <xQueueGenericSend>
 800f0a4:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0a6:	e012      	b.n	800f0ce <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f0a8:	4b0b      	ldr	r3, [pc, #44]	@ (800f0d8 <xTimerGenericCommand+0x98>)
 800f0aa:	6818      	ldr	r0, [r3, #0]
 800f0ac:	f107 0110 	add.w	r1, r7, #16
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	2200      	movs	r2, #0
 800f0b4:	f7fe fa18 	bl	800d4e8 <xQueueGenericSend>
 800f0b8:	6278      	str	r0, [r7, #36]	@ 0x24
 800f0ba:	e008      	b.n	800f0ce <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f0bc:	4b06      	ldr	r3, [pc, #24]	@ (800f0d8 <xTimerGenericCommand+0x98>)
 800f0be:	6818      	ldr	r0, [r3, #0]
 800f0c0:	f107 0110 	add.w	r1, r7, #16
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	683a      	ldr	r2, [r7, #0]
 800f0c8:	f7fe fb10 	bl	800d6ec <xQueueGenericSendFromISR>
 800f0cc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	3728      	adds	r7, #40	@ 0x28
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	24005404 	.word	0x24005404

0800f0dc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af02      	add	r7, sp, #8
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f0e6:	4b23      	ldr	r3, [pc, #140]	@ (800f174 <prvProcessExpiredTimer+0x98>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	3304      	adds	r3, #4
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	f7fd fd7d 	bl	800cbf4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f0fa:	697b      	ldr	r3, [r7, #20]
 800f0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f100:	f003 0304 	and.w	r3, r3, #4
 800f104:	2b00      	cmp	r3, #0
 800f106:	d023      	beq.n	800f150 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f108:	697b      	ldr	r3, [r7, #20]
 800f10a:	699a      	ldr	r2, [r3, #24]
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	18d1      	adds	r1, r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	683a      	ldr	r2, [r7, #0]
 800f114:	6978      	ldr	r0, [r7, #20]
 800f116:	f000 f8d5 	bl	800f2c4 <prvInsertTimerInActiveList>
 800f11a:	4603      	mov	r3, r0
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d020      	beq.n	800f162 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f120:	2300      	movs	r3, #0
 800f122:	9300      	str	r3, [sp, #0]
 800f124:	2300      	movs	r3, #0
 800f126:	687a      	ldr	r2, [r7, #4]
 800f128:	2100      	movs	r1, #0
 800f12a:	6978      	ldr	r0, [r7, #20]
 800f12c:	f7ff ff88 	bl	800f040 <xTimerGenericCommand>
 800f130:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f132:	693b      	ldr	r3, [r7, #16]
 800f134:	2b00      	cmp	r3, #0
 800f136:	d114      	bne.n	800f162 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f13c:	f383 8811 	msr	BASEPRI, r3
 800f140:	f3bf 8f6f 	isb	sy
 800f144:	f3bf 8f4f 	dsb	sy
 800f148:	60fb      	str	r3, [r7, #12]
}
 800f14a:	bf00      	nop
 800f14c:	bf00      	nop
 800f14e:	e7fd      	b.n	800f14c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f156:	f023 0301 	bic.w	r3, r3, #1
 800f15a:	b2da      	uxtb	r2, r3
 800f15c:	697b      	ldr	r3, [r7, #20]
 800f15e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f162:	697b      	ldr	r3, [r7, #20]
 800f164:	6a1b      	ldr	r3, [r3, #32]
 800f166:	6978      	ldr	r0, [r7, #20]
 800f168:	4798      	blx	r3
}
 800f16a:	bf00      	nop
 800f16c:	3718      	adds	r7, #24
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}
 800f172:	bf00      	nop
 800f174:	240053fc 	.word	0x240053fc

0800f178 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b084      	sub	sp, #16
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f180:	f107 0308 	add.w	r3, r7, #8
 800f184:	4618      	mov	r0, r3
 800f186:	f000 f859 	bl	800f23c <prvGetNextExpireTime>
 800f18a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f18c:	68bb      	ldr	r3, [r7, #8]
 800f18e:	4619      	mov	r1, r3
 800f190:	68f8      	ldr	r0, [r7, #12]
 800f192:	f000 f805 	bl	800f1a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f196:	f000 f8d7 	bl	800f348 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f19a:	bf00      	nop
 800f19c:	e7f0      	b.n	800f180 <prvTimerTask+0x8>
	...

0800f1a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f1a0:	b580      	push	{r7, lr}
 800f1a2:	b084      	sub	sp, #16
 800f1a4:	af00      	add	r7, sp, #0
 800f1a6:	6078      	str	r0, [r7, #4]
 800f1a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f1aa:	f7ff f919 	bl	800e3e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f1ae:	f107 0308 	add.w	r3, r7, #8
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 f866 	bl	800f284 <prvSampleTimeNow>
 800f1b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d130      	bne.n	800f222 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f1c0:	683b      	ldr	r3, [r7, #0]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d10a      	bne.n	800f1dc <prvProcessTimerOrBlockTask+0x3c>
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d806      	bhi.n	800f1dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f1ce:	f7ff f915 	bl	800e3fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f1d2:	68f9      	ldr	r1, [r7, #12]
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff ff81 	bl	800f0dc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f1da:	e024      	b.n	800f226 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f1dc:	683b      	ldr	r3, [r7, #0]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d008      	beq.n	800f1f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f1e2:	4b13      	ldr	r3, [pc, #76]	@ (800f230 <prvProcessTimerOrBlockTask+0x90>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d101      	bne.n	800f1f0 <prvProcessTimerOrBlockTask+0x50>
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	e000      	b.n	800f1f2 <prvProcessTimerOrBlockTask+0x52>
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f1f4:	4b0f      	ldr	r3, [pc, #60]	@ (800f234 <prvProcessTimerOrBlockTask+0x94>)
 800f1f6:	6818      	ldr	r0, [r3, #0]
 800f1f8:	687a      	ldr	r2, [r7, #4]
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	683a      	ldr	r2, [r7, #0]
 800f200:	4619      	mov	r1, r3
 800f202:	f7fe fe55 	bl	800deb0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f206:	f7ff f8f9 	bl	800e3fc <xTaskResumeAll>
 800f20a:	4603      	mov	r3, r0
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d10a      	bne.n	800f226 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f210:	4b09      	ldr	r3, [pc, #36]	@ (800f238 <prvProcessTimerOrBlockTask+0x98>)
 800f212:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f216:	601a      	str	r2, [r3, #0]
 800f218:	f3bf 8f4f 	dsb	sy
 800f21c:	f3bf 8f6f 	isb	sy
}
 800f220:	e001      	b.n	800f226 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f222:	f7ff f8eb 	bl	800e3fc <xTaskResumeAll>
}
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}
 800f22e:	bf00      	nop
 800f230:	24005400 	.word	0x24005400
 800f234:	24005404 	.word	0x24005404
 800f238:	e000ed04 	.word	0xe000ed04

0800f23c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f244:	4b0e      	ldr	r3, [pc, #56]	@ (800f280 <prvGetNextExpireTime+0x44>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d101      	bne.n	800f252 <prvGetNextExpireTime+0x16>
 800f24e:	2201      	movs	r2, #1
 800f250:	e000      	b.n	800f254 <prvGetNextExpireTime+0x18>
 800f252:	2200      	movs	r2, #0
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d105      	bne.n	800f26c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f260:	4b07      	ldr	r3, [pc, #28]	@ (800f280 <prvGetNextExpireTime+0x44>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	68db      	ldr	r3, [r3, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	60fb      	str	r3, [r7, #12]
 800f26a:	e001      	b.n	800f270 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f26c:	2300      	movs	r3, #0
 800f26e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f270:	68fb      	ldr	r3, [r7, #12]
}
 800f272:	4618      	mov	r0, r3
 800f274:	3714      	adds	r7, #20
 800f276:	46bd      	mov	sp, r7
 800f278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27c:	4770      	bx	lr
 800f27e:	bf00      	nop
 800f280:	240053fc 	.word	0x240053fc

0800f284 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b084      	sub	sp, #16
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f28c:	f7ff f954 	bl	800e538 <xTaskGetTickCount>
 800f290:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f292:	4b0b      	ldr	r3, [pc, #44]	@ (800f2c0 <prvSampleTimeNow+0x3c>)
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d205      	bcs.n	800f2a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f29c:	f000 f93a 	bl	800f514 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	e002      	b.n	800f2ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f2ae:	4a04      	ldr	r2, [pc, #16]	@ (800f2c0 <prvSampleTimeNow+0x3c>)
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
}
 800f2b6:	4618      	mov	r0, r3
 800f2b8:	3710      	adds	r7, #16
 800f2ba:	46bd      	mov	sp, r7
 800f2bc:	bd80      	pop	{r7, pc}
 800f2be:	bf00      	nop
 800f2c0:	2400540c 	.word	0x2400540c

0800f2c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b086      	sub	sp, #24
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	60f8      	str	r0, [r7, #12]
 800f2cc:	60b9      	str	r1, [r7, #8]
 800f2ce:	607a      	str	r2, [r7, #4]
 800f2d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	68ba      	ldr	r2, [r7, #8]
 800f2da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	68fa      	ldr	r2, [r7, #12]
 800f2e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f2e2:	68ba      	ldr	r2, [r7, #8]
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d812      	bhi.n	800f310 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2ea:	687a      	ldr	r2, [r7, #4]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	1ad2      	subs	r2, r2, r3
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	699b      	ldr	r3, [r3, #24]
 800f2f4:	429a      	cmp	r2, r3
 800f2f6:	d302      	bcc.n	800f2fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f2f8:	2301      	movs	r3, #1
 800f2fa:	617b      	str	r3, [r7, #20]
 800f2fc:	e01b      	b.n	800f336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f2fe:	4b10      	ldr	r3, [pc, #64]	@ (800f340 <prvInsertTimerInActiveList+0x7c>)
 800f300:	681a      	ldr	r2, [r3, #0]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	3304      	adds	r3, #4
 800f306:	4619      	mov	r1, r3
 800f308:	4610      	mov	r0, r2
 800f30a:	f7fd fc3a 	bl	800cb82 <vListInsert>
 800f30e:	e012      	b.n	800f336 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f310:	687a      	ldr	r2, [r7, #4]
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	429a      	cmp	r2, r3
 800f316:	d206      	bcs.n	800f326 <prvInsertTimerInActiveList+0x62>
 800f318:	68ba      	ldr	r2, [r7, #8]
 800f31a:	683b      	ldr	r3, [r7, #0]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d302      	bcc.n	800f326 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f320:	2301      	movs	r3, #1
 800f322:	617b      	str	r3, [r7, #20]
 800f324:	e007      	b.n	800f336 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f326:	4b07      	ldr	r3, [pc, #28]	@ (800f344 <prvInsertTimerInActiveList+0x80>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	3304      	adds	r3, #4
 800f32e:	4619      	mov	r1, r3
 800f330:	4610      	mov	r0, r2
 800f332:	f7fd fc26 	bl	800cb82 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f336:	697b      	ldr	r3, [r7, #20]
}
 800f338:	4618      	mov	r0, r3
 800f33a:	3718      	adds	r7, #24
 800f33c:	46bd      	mov	sp, r7
 800f33e:	bd80      	pop	{r7, pc}
 800f340:	24005400 	.word	0x24005400
 800f344:	240053fc 	.word	0x240053fc

0800f348 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f348:	b580      	push	{r7, lr}
 800f34a:	b08e      	sub	sp, #56	@ 0x38
 800f34c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f34e:	e0ce      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2b00      	cmp	r3, #0
 800f354:	da19      	bge.n	800f38a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f356:	1d3b      	adds	r3, r7, #4
 800f358:	3304      	adds	r3, #4
 800f35a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d10b      	bne.n	800f37a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f366:	f383 8811 	msr	BASEPRI, r3
 800f36a:	f3bf 8f6f 	isb	sy
 800f36e:	f3bf 8f4f 	dsb	sy
 800f372:	61fb      	str	r3, [r7, #28]
}
 800f374:	bf00      	nop
 800f376:	bf00      	nop
 800f378:	e7fd      	b.n	800f376 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f380:	6850      	ldr	r0, [r2, #4]
 800f382:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f384:	6892      	ldr	r2, [r2, #8]
 800f386:	4611      	mov	r1, r2
 800f388:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	f2c0 80ae 	blt.w	800f4ee <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f396:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f398:	695b      	ldr	r3, [r3, #20]
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d004      	beq.n	800f3a8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f39e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3a0:	3304      	adds	r3, #4
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7fd fc26 	bl	800cbf4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f3a8:	463b      	mov	r3, r7
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7ff ff6a 	bl	800f284 <prvSampleTimeNow>
 800f3b0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b09      	cmp	r3, #9
 800f3b6:	f200 8097 	bhi.w	800f4e8 <prvProcessReceivedCommands+0x1a0>
 800f3ba:	a201      	add	r2, pc, #4	@ (adr r2, 800f3c0 <prvProcessReceivedCommands+0x78>)
 800f3bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3c0:	0800f3e9 	.word	0x0800f3e9
 800f3c4:	0800f3e9 	.word	0x0800f3e9
 800f3c8:	0800f3e9 	.word	0x0800f3e9
 800f3cc:	0800f45f 	.word	0x0800f45f
 800f3d0:	0800f473 	.word	0x0800f473
 800f3d4:	0800f4bf 	.word	0x0800f4bf
 800f3d8:	0800f3e9 	.word	0x0800f3e9
 800f3dc:	0800f3e9 	.word	0x0800f3e9
 800f3e0:	0800f45f 	.word	0x0800f45f
 800f3e4:	0800f473 	.word	0x0800f473
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f3e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f3ee:	f043 0301 	orr.w	r3, r3, #1
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f3fa:	68ba      	ldr	r2, [r7, #8]
 800f3fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f3fe:	699b      	ldr	r3, [r3, #24]
 800f400:	18d1      	adds	r1, r2, r3
 800f402:	68bb      	ldr	r3, [r7, #8]
 800f404:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f406:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f408:	f7ff ff5c 	bl	800f2c4 <prvInsertTimerInActiveList>
 800f40c:	4603      	mov	r3, r0
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d06c      	beq.n	800f4ec <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f414:	6a1b      	ldr	r3, [r3, #32]
 800f416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f418:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f41c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f420:	f003 0304 	and.w	r3, r3, #4
 800f424:	2b00      	cmp	r3, #0
 800f426:	d061      	beq.n	800f4ec <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f42c:	699b      	ldr	r3, [r3, #24]
 800f42e:	441a      	add	r2, r3
 800f430:	2300      	movs	r3, #0
 800f432:	9300      	str	r3, [sp, #0]
 800f434:	2300      	movs	r3, #0
 800f436:	2100      	movs	r1, #0
 800f438:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f43a:	f7ff fe01 	bl	800f040 <xTimerGenericCommand>
 800f43e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f440:	6a3b      	ldr	r3, [r7, #32]
 800f442:	2b00      	cmp	r3, #0
 800f444:	d152      	bne.n	800f4ec <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800f446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f44a:	f383 8811 	msr	BASEPRI, r3
 800f44e:	f3bf 8f6f 	isb	sy
 800f452:	f3bf 8f4f 	dsb	sy
 800f456:	61bb      	str	r3, [r7, #24]
}
 800f458:	bf00      	nop
 800f45a:	bf00      	nop
 800f45c:	e7fd      	b.n	800f45a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f45e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f460:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f464:	f023 0301 	bic.w	r3, r3, #1
 800f468:	b2da      	uxtb	r2, r3
 800f46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f46c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f470:	e03d      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f474:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f478:	f043 0301 	orr.w	r3, r3, #1
 800f47c:	b2da      	uxtb	r2, r3
 800f47e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f480:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f484:	68ba      	ldr	r2, [r7, #8]
 800f486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f488:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f48a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f48c:	699b      	ldr	r3, [r3, #24]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d10b      	bne.n	800f4aa <prvProcessReceivedCommands+0x162>
	__asm volatile
 800f492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f496:	f383 8811 	msr	BASEPRI, r3
 800f49a:	f3bf 8f6f 	isb	sy
 800f49e:	f3bf 8f4f 	dsb	sy
 800f4a2:	617b      	str	r3, [r7, #20]
}
 800f4a4:	bf00      	nop
 800f4a6:	bf00      	nop
 800f4a8:	e7fd      	b.n	800f4a6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4ac:	699a      	ldr	r2, [r3, #24]
 800f4ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b0:	18d1      	adds	r1, r2, r3
 800f4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f4b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4b8:	f7ff ff04 	bl	800f2c4 <prvInsertTimerInActiveList>
					break;
 800f4bc:	e017      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f4be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4c4:	f003 0302 	and.w	r3, r3, #2
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	d103      	bne.n	800f4d4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800f4cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800f4ce:	f7fd f9e7 	bl	800c8a0 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f4d2:	e00c      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f4d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4d6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f4da:	f023 0301 	bic.w	r3, r3, #1
 800f4de:	b2da      	uxtb	r2, r3
 800f4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f4e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800f4e6:	e002      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800f4e8:	bf00      	nop
 800f4ea:	e000      	b.n	800f4ee <prvProcessReceivedCommands+0x1a6>
					break;
 800f4ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f4ee:	4b08      	ldr	r3, [pc, #32]	@ (800f510 <prvProcessReceivedCommands+0x1c8>)
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	1d39      	adds	r1, r7, #4
 800f4f4:	2200      	movs	r2, #0
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f7fe f996 	bl	800d828 <xQueueReceive>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f47f af26 	bne.w	800f350 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800f504:	bf00      	nop
 800f506:	bf00      	nop
 800f508:	3730      	adds	r7, #48	@ 0x30
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}
 800f50e:	bf00      	nop
 800f510:	24005404 	.word	0x24005404

0800f514 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f514:	b580      	push	{r7, lr}
 800f516:	b088      	sub	sp, #32
 800f518:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f51a:	e049      	b.n	800f5b0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f51c:	4b2e      	ldr	r3, [pc, #184]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	68db      	ldr	r3, [r3, #12]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f526:	4b2c      	ldr	r3, [pc, #176]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68db      	ldr	r3, [r3, #12]
 800f52c:	68db      	ldr	r3, [r3, #12]
 800f52e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f530:	68fb      	ldr	r3, [r7, #12]
 800f532:	3304      	adds	r3, #4
 800f534:	4618      	mov	r0, r3
 800f536:	f7fd fb5d 	bl	800cbf4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f53a:	68fb      	ldr	r3, [r7, #12]
 800f53c:	6a1b      	ldr	r3, [r3, #32]
 800f53e:	68f8      	ldr	r0, [r7, #12]
 800f540:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f548:	f003 0304 	and.w	r3, r3, #4
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d02f      	beq.n	800f5b0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	699b      	ldr	r3, [r3, #24]
 800f554:	693a      	ldr	r2, [r7, #16]
 800f556:	4413      	add	r3, r2
 800f558:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f55a:	68ba      	ldr	r2, [r7, #8]
 800f55c:	693b      	ldr	r3, [r7, #16]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d90e      	bls.n	800f580 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	68ba      	ldr	r2, [r7, #8]
 800f566:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	68fa      	ldr	r2, [r7, #12]
 800f56c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f56e:	4b1a      	ldr	r3, [pc, #104]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f570:	681a      	ldr	r2, [r3, #0]
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	3304      	adds	r3, #4
 800f576:	4619      	mov	r1, r3
 800f578:	4610      	mov	r0, r2
 800f57a:	f7fd fb02 	bl	800cb82 <vListInsert>
 800f57e:	e017      	b.n	800f5b0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f580:	2300      	movs	r3, #0
 800f582:	9300      	str	r3, [sp, #0]
 800f584:	2300      	movs	r3, #0
 800f586:	693a      	ldr	r2, [r7, #16]
 800f588:	2100      	movs	r1, #0
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	f7ff fd58 	bl	800f040 <xTimerGenericCommand>
 800f590:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	2b00      	cmp	r3, #0
 800f596:	d10b      	bne.n	800f5b0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800f598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f59c:	f383 8811 	msr	BASEPRI, r3
 800f5a0:	f3bf 8f6f 	isb	sy
 800f5a4:	f3bf 8f4f 	dsb	sy
 800f5a8:	603b      	str	r3, [r7, #0]
}
 800f5aa:	bf00      	nop
 800f5ac:	bf00      	nop
 800f5ae:	e7fd      	b.n	800f5ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f5b0:	4b09      	ldr	r3, [pc, #36]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2b00      	cmp	r3, #0
 800f5b8:	d1b0      	bne.n	800f51c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f5ba:	4b07      	ldr	r3, [pc, #28]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f5c0:	4b06      	ldr	r3, [pc, #24]	@ (800f5dc <prvSwitchTimerLists+0xc8>)
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4a04      	ldr	r2, [pc, #16]	@ (800f5d8 <prvSwitchTimerLists+0xc4>)
 800f5c6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f5c8:	4a04      	ldr	r2, [pc, #16]	@ (800f5dc <prvSwitchTimerLists+0xc8>)
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	6013      	str	r3, [r2, #0]
}
 800f5ce:	bf00      	nop
 800f5d0:	3718      	adds	r7, #24
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	bd80      	pop	{r7, pc}
 800f5d6:	bf00      	nop
 800f5d8:	240053fc 	.word	0x240053fc
 800f5dc:	24005400 	.word	0x24005400

0800f5e0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f5e6:	f7fd fc5f 	bl	800cea8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f5ea:	4b15      	ldr	r3, [pc, #84]	@ (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d120      	bne.n	800f634 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f5f2:	4814      	ldr	r0, [pc, #80]	@ (800f644 <prvCheckForValidListAndQueue+0x64>)
 800f5f4:	f7fd fa74 	bl	800cae0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f5f8:	4813      	ldr	r0, [pc, #76]	@ (800f648 <prvCheckForValidListAndQueue+0x68>)
 800f5fa:	f7fd fa71 	bl	800cae0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f5fe:	4b13      	ldr	r3, [pc, #76]	@ (800f64c <prvCheckForValidListAndQueue+0x6c>)
 800f600:	4a10      	ldr	r2, [pc, #64]	@ (800f644 <prvCheckForValidListAndQueue+0x64>)
 800f602:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f604:	4b12      	ldr	r3, [pc, #72]	@ (800f650 <prvCheckForValidListAndQueue+0x70>)
 800f606:	4a10      	ldr	r2, [pc, #64]	@ (800f648 <prvCheckForValidListAndQueue+0x68>)
 800f608:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f60a:	2300      	movs	r3, #0
 800f60c:	9300      	str	r3, [sp, #0]
 800f60e:	4b11      	ldr	r3, [pc, #68]	@ (800f654 <prvCheckForValidListAndQueue+0x74>)
 800f610:	4a11      	ldr	r2, [pc, #68]	@ (800f658 <prvCheckForValidListAndQueue+0x78>)
 800f612:	2110      	movs	r1, #16
 800f614:	200a      	movs	r0, #10
 800f616:	f7fd fdd3 	bl	800d1c0 <xQueueGenericCreateStatic>
 800f61a:	4603      	mov	r3, r0
 800f61c:	4a08      	ldr	r2, [pc, #32]	@ (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f61e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f620:	4b07      	ldr	r3, [pc, #28]	@ (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f622:	681b      	ldr	r3, [r3, #0]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d005      	beq.n	800f634 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f628:	4b05      	ldr	r3, [pc, #20]	@ (800f640 <prvCheckForValidListAndQueue+0x60>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	490b      	ldr	r1, [pc, #44]	@ (800f65c <prvCheckForValidListAndQueue+0x7c>)
 800f62e:	4618      	mov	r0, r3
 800f630:	f7fe fc14 	bl	800de5c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f634:	f7fd fc6a 	bl	800cf0c <vPortExitCritical>
}
 800f638:	bf00      	nop
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bd80      	pop	{r7, pc}
 800f63e:	bf00      	nop
 800f640:	24005404 	.word	0x24005404
 800f644:	240053d4 	.word	0x240053d4
 800f648:	240053e8 	.word	0x240053e8
 800f64c:	240053fc 	.word	0x240053fc
 800f650:	24005400 	.word	0x24005400
 800f654:	240054b0 	.word	0x240054b0
 800f658:	24005410 	.word	0x24005410
 800f65c:	08010c94 	.word	0x08010c94

0800f660 <std>:
 800f660:	2300      	movs	r3, #0
 800f662:	b510      	push	{r4, lr}
 800f664:	4604      	mov	r4, r0
 800f666:	e9c0 3300 	strd	r3, r3, [r0]
 800f66a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f66e:	6083      	str	r3, [r0, #8]
 800f670:	8181      	strh	r1, [r0, #12]
 800f672:	6643      	str	r3, [r0, #100]	@ 0x64
 800f674:	81c2      	strh	r2, [r0, #14]
 800f676:	6183      	str	r3, [r0, #24]
 800f678:	4619      	mov	r1, r3
 800f67a:	2208      	movs	r2, #8
 800f67c:	305c      	adds	r0, #92	@ 0x5c
 800f67e:	f000 f914 	bl	800f8aa <memset>
 800f682:	4b0d      	ldr	r3, [pc, #52]	@ (800f6b8 <std+0x58>)
 800f684:	6263      	str	r3, [r4, #36]	@ 0x24
 800f686:	4b0d      	ldr	r3, [pc, #52]	@ (800f6bc <std+0x5c>)
 800f688:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f68a:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c0 <std+0x60>)
 800f68c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f68e:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c4 <std+0x64>)
 800f690:	6323      	str	r3, [r4, #48]	@ 0x30
 800f692:	4b0d      	ldr	r3, [pc, #52]	@ (800f6c8 <std+0x68>)
 800f694:	6224      	str	r4, [r4, #32]
 800f696:	429c      	cmp	r4, r3
 800f698:	d006      	beq.n	800f6a8 <std+0x48>
 800f69a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f69e:	4294      	cmp	r4, r2
 800f6a0:	d002      	beq.n	800f6a8 <std+0x48>
 800f6a2:	33d0      	adds	r3, #208	@ 0xd0
 800f6a4:	429c      	cmp	r4, r3
 800f6a6:	d105      	bne.n	800f6b4 <std+0x54>
 800f6a8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b0:	f000 ba5c 	b.w	800fb6c <__retarget_lock_init_recursive>
 800f6b4:	bd10      	pop	{r4, pc}
 800f6b6:	bf00      	nop
 800f6b8:	0800f825 	.word	0x0800f825
 800f6bc:	0800f847 	.word	0x0800f847
 800f6c0:	0800f87f 	.word	0x0800f87f
 800f6c4:	0800f8a3 	.word	0x0800f8a3
 800f6c8:	24005500 	.word	0x24005500

0800f6cc <stdio_exit_handler>:
 800f6cc:	4a02      	ldr	r2, [pc, #8]	@ (800f6d8 <stdio_exit_handler+0xc>)
 800f6ce:	4903      	ldr	r1, [pc, #12]	@ (800f6dc <stdio_exit_handler+0x10>)
 800f6d0:	4803      	ldr	r0, [pc, #12]	@ (800f6e0 <stdio_exit_handler+0x14>)
 800f6d2:	f000 b869 	b.w	800f7a8 <_fwalk_sglue>
 800f6d6:	bf00      	nop
 800f6d8:	24000154 	.word	0x24000154
 800f6dc:	080104a1 	.word	0x080104a1
 800f6e0:	24000164 	.word	0x24000164

0800f6e4 <cleanup_stdio>:
 800f6e4:	6841      	ldr	r1, [r0, #4]
 800f6e6:	4b0c      	ldr	r3, [pc, #48]	@ (800f718 <cleanup_stdio+0x34>)
 800f6e8:	4299      	cmp	r1, r3
 800f6ea:	b510      	push	{r4, lr}
 800f6ec:	4604      	mov	r4, r0
 800f6ee:	d001      	beq.n	800f6f4 <cleanup_stdio+0x10>
 800f6f0:	f000 fed6 	bl	80104a0 <_fflush_r>
 800f6f4:	68a1      	ldr	r1, [r4, #8]
 800f6f6:	4b09      	ldr	r3, [pc, #36]	@ (800f71c <cleanup_stdio+0x38>)
 800f6f8:	4299      	cmp	r1, r3
 800f6fa:	d002      	beq.n	800f702 <cleanup_stdio+0x1e>
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	f000 fecf 	bl	80104a0 <_fflush_r>
 800f702:	68e1      	ldr	r1, [r4, #12]
 800f704:	4b06      	ldr	r3, [pc, #24]	@ (800f720 <cleanup_stdio+0x3c>)
 800f706:	4299      	cmp	r1, r3
 800f708:	d004      	beq.n	800f714 <cleanup_stdio+0x30>
 800f70a:	4620      	mov	r0, r4
 800f70c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f710:	f000 bec6 	b.w	80104a0 <_fflush_r>
 800f714:	bd10      	pop	{r4, pc}
 800f716:	bf00      	nop
 800f718:	24005500 	.word	0x24005500
 800f71c:	24005568 	.word	0x24005568
 800f720:	240055d0 	.word	0x240055d0

0800f724 <global_stdio_init.part.0>:
 800f724:	b510      	push	{r4, lr}
 800f726:	4b0b      	ldr	r3, [pc, #44]	@ (800f754 <global_stdio_init.part.0+0x30>)
 800f728:	4c0b      	ldr	r4, [pc, #44]	@ (800f758 <global_stdio_init.part.0+0x34>)
 800f72a:	4a0c      	ldr	r2, [pc, #48]	@ (800f75c <global_stdio_init.part.0+0x38>)
 800f72c:	601a      	str	r2, [r3, #0]
 800f72e:	4620      	mov	r0, r4
 800f730:	2200      	movs	r2, #0
 800f732:	2104      	movs	r1, #4
 800f734:	f7ff ff94 	bl	800f660 <std>
 800f738:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f73c:	2201      	movs	r2, #1
 800f73e:	2109      	movs	r1, #9
 800f740:	f7ff ff8e 	bl	800f660 <std>
 800f744:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f748:	2202      	movs	r2, #2
 800f74a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f74e:	2112      	movs	r1, #18
 800f750:	f7ff bf86 	b.w	800f660 <std>
 800f754:	24005638 	.word	0x24005638
 800f758:	24005500 	.word	0x24005500
 800f75c:	0800f6cd 	.word	0x0800f6cd

0800f760 <__sfp_lock_acquire>:
 800f760:	4801      	ldr	r0, [pc, #4]	@ (800f768 <__sfp_lock_acquire+0x8>)
 800f762:	f000 ba04 	b.w	800fb6e <__retarget_lock_acquire_recursive>
 800f766:	bf00      	nop
 800f768:	24005641 	.word	0x24005641

0800f76c <__sfp_lock_release>:
 800f76c:	4801      	ldr	r0, [pc, #4]	@ (800f774 <__sfp_lock_release+0x8>)
 800f76e:	f000 b9ff 	b.w	800fb70 <__retarget_lock_release_recursive>
 800f772:	bf00      	nop
 800f774:	24005641 	.word	0x24005641

0800f778 <__sinit>:
 800f778:	b510      	push	{r4, lr}
 800f77a:	4604      	mov	r4, r0
 800f77c:	f7ff fff0 	bl	800f760 <__sfp_lock_acquire>
 800f780:	6a23      	ldr	r3, [r4, #32]
 800f782:	b11b      	cbz	r3, 800f78c <__sinit+0x14>
 800f784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f788:	f7ff bff0 	b.w	800f76c <__sfp_lock_release>
 800f78c:	4b04      	ldr	r3, [pc, #16]	@ (800f7a0 <__sinit+0x28>)
 800f78e:	6223      	str	r3, [r4, #32]
 800f790:	4b04      	ldr	r3, [pc, #16]	@ (800f7a4 <__sinit+0x2c>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d1f5      	bne.n	800f784 <__sinit+0xc>
 800f798:	f7ff ffc4 	bl	800f724 <global_stdio_init.part.0>
 800f79c:	e7f2      	b.n	800f784 <__sinit+0xc>
 800f79e:	bf00      	nop
 800f7a0:	0800f6e5 	.word	0x0800f6e5
 800f7a4:	24005638 	.word	0x24005638

0800f7a8 <_fwalk_sglue>:
 800f7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7ac:	4607      	mov	r7, r0
 800f7ae:	4688      	mov	r8, r1
 800f7b0:	4614      	mov	r4, r2
 800f7b2:	2600      	movs	r6, #0
 800f7b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f7b8:	f1b9 0901 	subs.w	r9, r9, #1
 800f7bc:	d505      	bpl.n	800f7ca <_fwalk_sglue+0x22>
 800f7be:	6824      	ldr	r4, [r4, #0]
 800f7c0:	2c00      	cmp	r4, #0
 800f7c2:	d1f7      	bne.n	800f7b4 <_fwalk_sglue+0xc>
 800f7c4:	4630      	mov	r0, r6
 800f7c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7ca:	89ab      	ldrh	r3, [r5, #12]
 800f7cc:	2b01      	cmp	r3, #1
 800f7ce:	d907      	bls.n	800f7e0 <_fwalk_sglue+0x38>
 800f7d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f7d4:	3301      	adds	r3, #1
 800f7d6:	d003      	beq.n	800f7e0 <_fwalk_sglue+0x38>
 800f7d8:	4629      	mov	r1, r5
 800f7da:	4638      	mov	r0, r7
 800f7dc:	47c0      	blx	r8
 800f7de:	4306      	orrs	r6, r0
 800f7e0:	3568      	adds	r5, #104	@ 0x68
 800f7e2:	e7e9      	b.n	800f7b8 <_fwalk_sglue+0x10>

0800f7e4 <siprintf>:
 800f7e4:	b40e      	push	{r1, r2, r3}
 800f7e6:	b500      	push	{lr}
 800f7e8:	b09c      	sub	sp, #112	@ 0x70
 800f7ea:	ab1d      	add	r3, sp, #116	@ 0x74
 800f7ec:	9002      	str	r0, [sp, #8]
 800f7ee:	9006      	str	r0, [sp, #24]
 800f7f0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800f7f4:	4809      	ldr	r0, [pc, #36]	@ (800f81c <siprintf+0x38>)
 800f7f6:	9107      	str	r1, [sp, #28]
 800f7f8:	9104      	str	r1, [sp, #16]
 800f7fa:	4909      	ldr	r1, [pc, #36]	@ (800f820 <siprintf+0x3c>)
 800f7fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800f800:	9105      	str	r1, [sp, #20]
 800f802:	6800      	ldr	r0, [r0, #0]
 800f804:	9301      	str	r3, [sp, #4]
 800f806:	a902      	add	r1, sp, #8
 800f808:	f000 fb3c 	bl	800fe84 <_svfiprintf_r>
 800f80c:	9b02      	ldr	r3, [sp, #8]
 800f80e:	2200      	movs	r2, #0
 800f810:	701a      	strb	r2, [r3, #0]
 800f812:	b01c      	add	sp, #112	@ 0x70
 800f814:	f85d eb04 	ldr.w	lr, [sp], #4
 800f818:	b003      	add	sp, #12
 800f81a:	4770      	bx	lr
 800f81c:	24000160 	.word	0x24000160
 800f820:	ffff0208 	.word	0xffff0208

0800f824 <__sread>:
 800f824:	b510      	push	{r4, lr}
 800f826:	460c      	mov	r4, r1
 800f828:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f82c:	f000 f950 	bl	800fad0 <_read_r>
 800f830:	2800      	cmp	r0, #0
 800f832:	bfab      	itete	ge
 800f834:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f836:	89a3      	ldrhlt	r3, [r4, #12]
 800f838:	181b      	addge	r3, r3, r0
 800f83a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f83e:	bfac      	ite	ge
 800f840:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f842:	81a3      	strhlt	r3, [r4, #12]
 800f844:	bd10      	pop	{r4, pc}

0800f846 <__swrite>:
 800f846:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f84a:	461f      	mov	r7, r3
 800f84c:	898b      	ldrh	r3, [r1, #12]
 800f84e:	05db      	lsls	r3, r3, #23
 800f850:	4605      	mov	r5, r0
 800f852:	460c      	mov	r4, r1
 800f854:	4616      	mov	r6, r2
 800f856:	d505      	bpl.n	800f864 <__swrite+0x1e>
 800f858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f85c:	2302      	movs	r3, #2
 800f85e:	2200      	movs	r2, #0
 800f860:	f000 f924 	bl	800faac <_lseek_r>
 800f864:	89a3      	ldrh	r3, [r4, #12]
 800f866:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f86a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f86e:	81a3      	strh	r3, [r4, #12]
 800f870:	4632      	mov	r2, r6
 800f872:	463b      	mov	r3, r7
 800f874:	4628      	mov	r0, r5
 800f876:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f87a:	f000 b93b 	b.w	800faf4 <_write_r>

0800f87e <__sseek>:
 800f87e:	b510      	push	{r4, lr}
 800f880:	460c      	mov	r4, r1
 800f882:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f886:	f000 f911 	bl	800faac <_lseek_r>
 800f88a:	1c43      	adds	r3, r0, #1
 800f88c:	89a3      	ldrh	r3, [r4, #12]
 800f88e:	bf15      	itete	ne
 800f890:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f892:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f896:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f89a:	81a3      	strheq	r3, [r4, #12]
 800f89c:	bf18      	it	ne
 800f89e:	81a3      	strhne	r3, [r4, #12]
 800f8a0:	bd10      	pop	{r4, pc}

0800f8a2 <__sclose>:
 800f8a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8a6:	f000 b89b 	b.w	800f9e0 <_close_r>

0800f8aa <memset>:
 800f8aa:	4402      	add	r2, r0
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	4293      	cmp	r3, r2
 800f8b0:	d100      	bne.n	800f8b4 <memset+0xa>
 800f8b2:	4770      	bx	lr
 800f8b4:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b8:	e7f9      	b.n	800f8ae <memset+0x4>

0800f8ba <strchr>:
 800f8ba:	b2c9      	uxtb	r1, r1
 800f8bc:	4603      	mov	r3, r0
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8c4:	b112      	cbz	r2, 800f8cc <strchr+0x12>
 800f8c6:	428a      	cmp	r2, r1
 800f8c8:	d1f9      	bne.n	800f8be <strchr+0x4>
 800f8ca:	4770      	bx	lr
 800f8cc:	2900      	cmp	r1, #0
 800f8ce:	bf18      	it	ne
 800f8d0:	2000      	movne	r0, #0
 800f8d2:	4770      	bx	lr

0800f8d4 <strncpy>:
 800f8d4:	b510      	push	{r4, lr}
 800f8d6:	3901      	subs	r1, #1
 800f8d8:	4603      	mov	r3, r0
 800f8da:	b132      	cbz	r2, 800f8ea <strncpy+0x16>
 800f8dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f8e0:	f803 4b01 	strb.w	r4, [r3], #1
 800f8e4:	3a01      	subs	r2, #1
 800f8e6:	2c00      	cmp	r4, #0
 800f8e8:	d1f7      	bne.n	800f8da <strncpy+0x6>
 800f8ea:	441a      	add	r2, r3
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d100      	bne.n	800f8f4 <strncpy+0x20>
 800f8f2:	bd10      	pop	{r4, pc}
 800f8f4:	f803 1b01 	strb.w	r1, [r3], #1
 800f8f8:	e7f9      	b.n	800f8ee <strncpy+0x1a>
	...

0800f8fc <strtok>:
 800f8fc:	4b16      	ldr	r3, [pc, #88]	@ (800f958 <strtok+0x5c>)
 800f8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f902:	681f      	ldr	r7, [r3, #0]
 800f904:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800f906:	4605      	mov	r5, r0
 800f908:	460e      	mov	r6, r1
 800f90a:	b9ec      	cbnz	r4, 800f948 <strtok+0x4c>
 800f90c:	2050      	movs	r0, #80	@ 0x50
 800f90e:	f000 f9a7 	bl	800fc60 <malloc>
 800f912:	4602      	mov	r2, r0
 800f914:	6478      	str	r0, [r7, #68]	@ 0x44
 800f916:	b920      	cbnz	r0, 800f922 <strtok+0x26>
 800f918:	4b10      	ldr	r3, [pc, #64]	@ (800f95c <strtok+0x60>)
 800f91a:	4811      	ldr	r0, [pc, #68]	@ (800f960 <strtok+0x64>)
 800f91c:	215b      	movs	r1, #91	@ 0x5b
 800f91e:	f000 f937 	bl	800fb90 <__assert_func>
 800f922:	e9c0 4400 	strd	r4, r4, [r0]
 800f926:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800f92a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800f92e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800f932:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800f936:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800f93a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800f93e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800f942:	6184      	str	r4, [r0, #24]
 800f944:	7704      	strb	r4, [r0, #28]
 800f946:	6244      	str	r4, [r0, #36]	@ 0x24
 800f948:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f94a:	4631      	mov	r1, r6
 800f94c:	4628      	mov	r0, r5
 800f94e:	2301      	movs	r3, #1
 800f950:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f954:	f000 b806 	b.w	800f964 <__strtok_r>
 800f958:	24000160 	.word	0x24000160
 800f95c:	08010d88 	.word	0x08010d88
 800f960:	08010d9f 	.word	0x08010d9f

0800f964 <__strtok_r>:
 800f964:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f966:	4604      	mov	r4, r0
 800f968:	b908      	cbnz	r0, 800f96e <__strtok_r+0xa>
 800f96a:	6814      	ldr	r4, [r2, #0]
 800f96c:	b144      	cbz	r4, 800f980 <__strtok_r+0x1c>
 800f96e:	4620      	mov	r0, r4
 800f970:	f814 5b01 	ldrb.w	r5, [r4], #1
 800f974:	460f      	mov	r7, r1
 800f976:	f817 6b01 	ldrb.w	r6, [r7], #1
 800f97a:	b91e      	cbnz	r6, 800f984 <__strtok_r+0x20>
 800f97c:	b965      	cbnz	r5, 800f998 <__strtok_r+0x34>
 800f97e:	6015      	str	r5, [r2, #0]
 800f980:	2000      	movs	r0, #0
 800f982:	e005      	b.n	800f990 <__strtok_r+0x2c>
 800f984:	42b5      	cmp	r5, r6
 800f986:	d1f6      	bne.n	800f976 <__strtok_r+0x12>
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d1f0      	bne.n	800f96e <__strtok_r+0xa>
 800f98c:	6014      	str	r4, [r2, #0]
 800f98e:	7003      	strb	r3, [r0, #0]
 800f990:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f992:	461c      	mov	r4, r3
 800f994:	e00c      	b.n	800f9b0 <__strtok_r+0x4c>
 800f996:	b915      	cbnz	r5, 800f99e <__strtok_r+0x3a>
 800f998:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f99c:	460e      	mov	r6, r1
 800f99e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800f9a2:	42ab      	cmp	r3, r5
 800f9a4:	d1f7      	bne.n	800f996 <__strtok_r+0x32>
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d0f3      	beq.n	800f992 <__strtok_r+0x2e>
 800f9aa:	2300      	movs	r3, #0
 800f9ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800f9b0:	6014      	str	r4, [r2, #0]
 800f9b2:	e7ed      	b.n	800f990 <__strtok_r+0x2c>

0800f9b4 <strstr>:
 800f9b4:	780a      	ldrb	r2, [r1, #0]
 800f9b6:	b570      	push	{r4, r5, r6, lr}
 800f9b8:	b96a      	cbnz	r2, 800f9d6 <strstr+0x22>
 800f9ba:	bd70      	pop	{r4, r5, r6, pc}
 800f9bc:	429a      	cmp	r2, r3
 800f9be:	d109      	bne.n	800f9d4 <strstr+0x20>
 800f9c0:	460c      	mov	r4, r1
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d0f6      	beq.n	800f9ba <strstr+0x6>
 800f9cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f9d0:	429e      	cmp	r6, r3
 800f9d2:	d0f7      	beq.n	800f9c4 <strstr+0x10>
 800f9d4:	3001      	adds	r0, #1
 800f9d6:	7803      	ldrb	r3, [r0, #0]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d1ef      	bne.n	800f9bc <strstr+0x8>
 800f9dc:	4618      	mov	r0, r3
 800f9de:	e7ec      	b.n	800f9ba <strstr+0x6>

0800f9e0 <_close_r>:
 800f9e0:	b538      	push	{r3, r4, r5, lr}
 800f9e2:	4d06      	ldr	r5, [pc, #24]	@ (800f9fc <_close_r+0x1c>)
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	4604      	mov	r4, r0
 800f9e8:	4608      	mov	r0, r1
 800f9ea:	602b      	str	r3, [r5, #0]
 800f9ec:	f7f2 fa4e 	bl	8001e8c <_close>
 800f9f0:	1c43      	adds	r3, r0, #1
 800f9f2:	d102      	bne.n	800f9fa <_close_r+0x1a>
 800f9f4:	682b      	ldr	r3, [r5, #0]
 800f9f6:	b103      	cbz	r3, 800f9fa <_close_r+0x1a>
 800f9f8:	6023      	str	r3, [r4, #0]
 800f9fa:	bd38      	pop	{r3, r4, r5, pc}
 800f9fc:	2400563c 	.word	0x2400563c

0800fa00 <_reclaim_reent>:
 800fa00:	4b29      	ldr	r3, [pc, #164]	@ (800faa8 <_reclaim_reent+0xa8>)
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	4283      	cmp	r3, r0
 800fa06:	b570      	push	{r4, r5, r6, lr}
 800fa08:	4604      	mov	r4, r0
 800fa0a:	d04b      	beq.n	800faa4 <_reclaim_reent+0xa4>
 800fa0c:	69c3      	ldr	r3, [r0, #28]
 800fa0e:	b1ab      	cbz	r3, 800fa3c <_reclaim_reent+0x3c>
 800fa10:	68db      	ldr	r3, [r3, #12]
 800fa12:	b16b      	cbz	r3, 800fa30 <_reclaim_reent+0x30>
 800fa14:	2500      	movs	r5, #0
 800fa16:	69e3      	ldr	r3, [r4, #28]
 800fa18:	68db      	ldr	r3, [r3, #12]
 800fa1a:	5959      	ldr	r1, [r3, r5]
 800fa1c:	2900      	cmp	r1, #0
 800fa1e:	d13b      	bne.n	800fa98 <_reclaim_reent+0x98>
 800fa20:	3504      	adds	r5, #4
 800fa22:	2d80      	cmp	r5, #128	@ 0x80
 800fa24:	d1f7      	bne.n	800fa16 <_reclaim_reent+0x16>
 800fa26:	69e3      	ldr	r3, [r4, #28]
 800fa28:	4620      	mov	r0, r4
 800fa2a:	68d9      	ldr	r1, [r3, #12]
 800fa2c:	f000 f8ce 	bl	800fbcc <_free_r>
 800fa30:	69e3      	ldr	r3, [r4, #28]
 800fa32:	6819      	ldr	r1, [r3, #0]
 800fa34:	b111      	cbz	r1, 800fa3c <_reclaim_reent+0x3c>
 800fa36:	4620      	mov	r0, r4
 800fa38:	f000 f8c8 	bl	800fbcc <_free_r>
 800fa3c:	6961      	ldr	r1, [r4, #20]
 800fa3e:	b111      	cbz	r1, 800fa46 <_reclaim_reent+0x46>
 800fa40:	4620      	mov	r0, r4
 800fa42:	f000 f8c3 	bl	800fbcc <_free_r>
 800fa46:	69e1      	ldr	r1, [r4, #28]
 800fa48:	b111      	cbz	r1, 800fa50 <_reclaim_reent+0x50>
 800fa4a:	4620      	mov	r0, r4
 800fa4c:	f000 f8be 	bl	800fbcc <_free_r>
 800fa50:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800fa52:	b111      	cbz	r1, 800fa5a <_reclaim_reent+0x5a>
 800fa54:	4620      	mov	r0, r4
 800fa56:	f000 f8b9 	bl	800fbcc <_free_r>
 800fa5a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fa5c:	b111      	cbz	r1, 800fa64 <_reclaim_reent+0x64>
 800fa5e:	4620      	mov	r0, r4
 800fa60:	f000 f8b4 	bl	800fbcc <_free_r>
 800fa64:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800fa66:	b111      	cbz	r1, 800fa6e <_reclaim_reent+0x6e>
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 f8af 	bl	800fbcc <_free_r>
 800fa6e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800fa70:	b111      	cbz	r1, 800fa78 <_reclaim_reent+0x78>
 800fa72:	4620      	mov	r0, r4
 800fa74:	f000 f8aa 	bl	800fbcc <_free_r>
 800fa78:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800fa7a:	b111      	cbz	r1, 800fa82 <_reclaim_reent+0x82>
 800fa7c:	4620      	mov	r0, r4
 800fa7e:	f000 f8a5 	bl	800fbcc <_free_r>
 800fa82:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800fa84:	b111      	cbz	r1, 800fa8c <_reclaim_reent+0x8c>
 800fa86:	4620      	mov	r0, r4
 800fa88:	f000 f8a0 	bl	800fbcc <_free_r>
 800fa8c:	6a23      	ldr	r3, [r4, #32]
 800fa8e:	b14b      	cbz	r3, 800faa4 <_reclaim_reent+0xa4>
 800fa90:	4620      	mov	r0, r4
 800fa92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa96:	4718      	bx	r3
 800fa98:	680e      	ldr	r6, [r1, #0]
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 f896 	bl	800fbcc <_free_r>
 800faa0:	4631      	mov	r1, r6
 800faa2:	e7bb      	b.n	800fa1c <_reclaim_reent+0x1c>
 800faa4:	bd70      	pop	{r4, r5, r6, pc}
 800faa6:	bf00      	nop
 800faa8:	24000160 	.word	0x24000160

0800faac <_lseek_r>:
 800faac:	b538      	push	{r3, r4, r5, lr}
 800faae:	4d07      	ldr	r5, [pc, #28]	@ (800facc <_lseek_r+0x20>)
 800fab0:	4604      	mov	r4, r0
 800fab2:	4608      	mov	r0, r1
 800fab4:	4611      	mov	r1, r2
 800fab6:	2200      	movs	r2, #0
 800fab8:	602a      	str	r2, [r5, #0]
 800faba:	461a      	mov	r2, r3
 800fabc:	f7f2 fa0d 	bl	8001eda <_lseek>
 800fac0:	1c43      	adds	r3, r0, #1
 800fac2:	d102      	bne.n	800faca <_lseek_r+0x1e>
 800fac4:	682b      	ldr	r3, [r5, #0]
 800fac6:	b103      	cbz	r3, 800faca <_lseek_r+0x1e>
 800fac8:	6023      	str	r3, [r4, #0]
 800faca:	bd38      	pop	{r3, r4, r5, pc}
 800facc:	2400563c 	.word	0x2400563c

0800fad0 <_read_r>:
 800fad0:	b538      	push	{r3, r4, r5, lr}
 800fad2:	4d07      	ldr	r5, [pc, #28]	@ (800faf0 <_read_r+0x20>)
 800fad4:	4604      	mov	r4, r0
 800fad6:	4608      	mov	r0, r1
 800fad8:	4611      	mov	r1, r2
 800fada:	2200      	movs	r2, #0
 800fadc:	602a      	str	r2, [r5, #0]
 800fade:	461a      	mov	r2, r3
 800fae0:	f7f2 f99b 	bl	8001e1a <_read>
 800fae4:	1c43      	adds	r3, r0, #1
 800fae6:	d102      	bne.n	800faee <_read_r+0x1e>
 800fae8:	682b      	ldr	r3, [r5, #0]
 800faea:	b103      	cbz	r3, 800faee <_read_r+0x1e>
 800faec:	6023      	str	r3, [r4, #0]
 800faee:	bd38      	pop	{r3, r4, r5, pc}
 800faf0:	2400563c 	.word	0x2400563c

0800faf4 <_write_r>:
 800faf4:	b538      	push	{r3, r4, r5, lr}
 800faf6:	4d07      	ldr	r5, [pc, #28]	@ (800fb14 <_write_r+0x20>)
 800faf8:	4604      	mov	r4, r0
 800fafa:	4608      	mov	r0, r1
 800fafc:	4611      	mov	r1, r2
 800fafe:	2200      	movs	r2, #0
 800fb00:	602a      	str	r2, [r5, #0]
 800fb02:	461a      	mov	r2, r3
 800fb04:	f7f2 f9a6 	bl	8001e54 <_write>
 800fb08:	1c43      	adds	r3, r0, #1
 800fb0a:	d102      	bne.n	800fb12 <_write_r+0x1e>
 800fb0c:	682b      	ldr	r3, [r5, #0]
 800fb0e:	b103      	cbz	r3, 800fb12 <_write_r+0x1e>
 800fb10:	6023      	str	r3, [r4, #0]
 800fb12:	bd38      	pop	{r3, r4, r5, pc}
 800fb14:	2400563c 	.word	0x2400563c

0800fb18 <__errno>:
 800fb18:	4b01      	ldr	r3, [pc, #4]	@ (800fb20 <__errno+0x8>)
 800fb1a:	6818      	ldr	r0, [r3, #0]
 800fb1c:	4770      	bx	lr
 800fb1e:	bf00      	nop
 800fb20:	24000160 	.word	0x24000160

0800fb24 <__libc_init_array>:
 800fb24:	b570      	push	{r4, r5, r6, lr}
 800fb26:	4d0d      	ldr	r5, [pc, #52]	@ (800fb5c <__libc_init_array+0x38>)
 800fb28:	4c0d      	ldr	r4, [pc, #52]	@ (800fb60 <__libc_init_array+0x3c>)
 800fb2a:	1b64      	subs	r4, r4, r5
 800fb2c:	10a4      	asrs	r4, r4, #2
 800fb2e:	2600      	movs	r6, #0
 800fb30:	42a6      	cmp	r6, r4
 800fb32:	d109      	bne.n	800fb48 <__libc_init_array+0x24>
 800fb34:	4d0b      	ldr	r5, [pc, #44]	@ (800fb64 <__libc_init_array+0x40>)
 800fb36:	4c0c      	ldr	r4, [pc, #48]	@ (800fb68 <__libc_init_array+0x44>)
 800fb38:	f000 fff0 	bl	8010b1c <_init>
 800fb3c:	1b64      	subs	r4, r4, r5
 800fb3e:	10a4      	asrs	r4, r4, #2
 800fb40:	2600      	movs	r6, #0
 800fb42:	42a6      	cmp	r6, r4
 800fb44:	d105      	bne.n	800fb52 <__libc_init_array+0x2e>
 800fb46:	bd70      	pop	{r4, r5, r6, pc}
 800fb48:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb4c:	4798      	blx	r3
 800fb4e:	3601      	adds	r6, #1
 800fb50:	e7ee      	b.n	800fb30 <__libc_init_array+0xc>
 800fb52:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb56:	4798      	blx	r3
 800fb58:	3601      	adds	r6, #1
 800fb5a:	e7f2      	b.n	800fb42 <__libc_init_array+0x1e>
 800fb5c:	08010e70 	.word	0x08010e70
 800fb60:	08010e70 	.word	0x08010e70
 800fb64:	08010e70 	.word	0x08010e70
 800fb68:	08010e74 	.word	0x08010e74

0800fb6c <__retarget_lock_init_recursive>:
 800fb6c:	4770      	bx	lr

0800fb6e <__retarget_lock_acquire_recursive>:
 800fb6e:	4770      	bx	lr

0800fb70 <__retarget_lock_release_recursive>:
 800fb70:	4770      	bx	lr

0800fb72 <memcpy>:
 800fb72:	440a      	add	r2, r1
 800fb74:	4291      	cmp	r1, r2
 800fb76:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb7a:	d100      	bne.n	800fb7e <memcpy+0xc>
 800fb7c:	4770      	bx	lr
 800fb7e:	b510      	push	{r4, lr}
 800fb80:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb84:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb88:	4291      	cmp	r1, r2
 800fb8a:	d1f9      	bne.n	800fb80 <memcpy+0xe>
 800fb8c:	bd10      	pop	{r4, pc}
	...

0800fb90 <__assert_func>:
 800fb90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fb92:	4614      	mov	r4, r2
 800fb94:	461a      	mov	r2, r3
 800fb96:	4b09      	ldr	r3, [pc, #36]	@ (800fbbc <__assert_func+0x2c>)
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	4605      	mov	r5, r0
 800fb9c:	68d8      	ldr	r0, [r3, #12]
 800fb9e:	b954      	cbnz	r4, 800fbb6 <__assert_func+0x26>
 800fba0:	4b07      	ldr	r3, [pc, #28]	@ (800fbc0 <__assert_func+0x30>)
 800fba2:	461c      	mov	r4, r3
 800fba4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fba8:	9100      	str	r1, [sp, #0]
 800fbaa:	462b      	mov	r3, r5
 800fbac:	4905      	ldr	r1, [pc, #20]	@ (800fbc4 <__assert_func+0x34>)
 800fbae:	f000 fc9f 	bl	80104f0 <fiprintf>
 800fbb2:	f000 fcd9 	bl	8010568 <abort>
 800fbb6:	4b04      	ldr	r3, [pc, #16]	@ (800fbc8 <__assert_func+0x38>)
 800fbb8:	e7f4      	b.n	800fba4 <__assert_func+0x14>
 800fbba:	bf00      	nop
 800fbbc:	24000160 	.word	0x24000160
 800fbc0:	08010e34 	.word	0x08010e34
 800fbc4:	08010e06 	.word	0x08010e06
 800fbc8:	08010df9 	.word	0x08010df9

0800fbcc <_free_r>:
 800fbcc:	b538      	push	{r3, r4, r5, lr}
 800fbce:	4605      	mov	r5, r0
 800fbd0:	2900      	cmp	r1, #0
 800fbd2:	d041      	beq.n	800fc58 <_free_r+0x8c>
 800fbd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fbd8:	1f0c      	subs	r4, r1, #4
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	bfb8      	it	lt
 800fbde:	18e4      	addlt	r4, r4, r3
 800fbe0:	f000 f8e8 	bl	800fdb4 <__malloc_lock>
 800fbe4:	4a1d      	ldr	r2, [pc, #116]	@ (800fc5c <_free_r+0x90>)
 800fbe6:	6813      	ldr	r3, [r2, #0]
 800fbe8:	b933      	cbnz	r3, 800fbf8 <_free_r+0x2c>
 800fbea:	6063      	str	r3, [r4, #4]
 800fbec:	6014      	str	r4, [r2, #0]
 800fbee:	4628      	mov	r0, r5
 800fbf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fbf4:	f000 b8e4 	b.w	800fdc0 <__malloc_unlock>
 800fbf8:	42a3      	cmp	r3, r4
 800fbfa:	d908      	bls.n	800fc0e <_free_r+0x42>
 800fbfc:	6820      	ldr	r0, [r4, #0]
 800fbfe:	1821      	adds	r1, r4, r0
 800fc00:	428b      	cmp	r3, r1
 800fc02:	bf01      	itttt	eq
 800fc04:	6819      	ldreq	r1, [r3, #0]
 800fc06:	685b      	ldreq	r3, [r3, #4]
 800fc08:	1809      	addeq	r1, r1, r0
 800fc0a:	6021      	streq	r1, [r4, #0]
 800fc0c:	e7ed      	b.n	800fbea <_free_r+0x1e>
 800fc0e:	461a      	mov	r2, r3
 800fc10:	685b      	ldr	r3, [r3, #4]
 800fc12:	b10b      	cbz	r3, 800fc18 <_free_r+0x4c>
 800fc14:	42a3      	cmp	r3, r4
 800fc16:	d9fa      	bls.n	800fc0e <_free_r+0x42>
 800fc18:	6811      	ldr	r1, [r2, #0]
 800fc1a:	1850      	adds	r0, r2, r1
 800fc1c:	42a0      	cmp	r0, r4
 800fc1e:	d10b      	bne.n	800fc38 <_free_r+0x6c>
 800fc20:	6820      	ldr	r0, [r4, #0]
 800fc22:	4401      	add	r1, r0
 800fc24:	1850      	adds	r0, r2, r1
 800fc26:	4283      	cmp	r3, r0
 800fc28:	6011      	str	r1, [r2, #0]
 800fc2a:	d1e0      	bne.n	800fbee <_free_r+0x22>
 800fc2c:	6818      	ldr	r0, [r3, #0]
 800fc2e:	685b      	ldr	r3, [r3, #4]
 800fc30:	6053      	str	r3, [r2, #4]
 800fc32:	4408      	add	r0, r1
 800fc34:	6010      	str	r0, [r2, #0]
 800fc36:	e7da      	b.n	800fbee <_free_r+0x22>
 800fc38:	d902      	bls.n	800fc40 <_free_r+0x74>
 800fc3a:	230c      	movs	r3, #12
 800fc3c:	602b      	str	r3, [r5, #0]
 800fc3e:	e7d6      	b.n	800fbee <_free_r+0x22>
 800fc40:	6820      	ldr	r0, [r4, #0]
 800fc42:	1821      	adds	r1, r4, r0
 800fc44:	428b      	cmp	r3, r1
 800fc46:	bf04      	itt	eq
 800fc48:	6819      	ldreq	r1, [r3, #0]
 800fc4a:	685b      	ldreq	r3, [r3, #4]
 800fc4c:	6063      	str	r3, [r4, #4]
 800fc4e:	bf04      	itt	eq
 800fc50:	1809      	addeq	r1, r1, r0
 800fc52:	6021      	streq	r1, [r4, #0]
 800fc54:	6054      	str	r4, [r2, #4]
 800fc56:	e7ca      	b.n	800fbee <_free_r+0x22>
 800fc58:	bd38      	pop	{r3, r4, r5, pc}
 800fc5a:	bf00      	nop
 800fc5c:	24005648 	.word	0x24005648

0800fc60 <malloc>:
 800fc60:	4b02      	ldr	r3, [pc, #8]	@ (800fc6c <malloc+0xc>)
 800fc62:	4601      	mov	r1, r0
 800fc64:	6818      	ldr	r0, [r3, #0]
 800fc66:	f000 b825 	b.w	800fcb4 <_malloc_r>
 800fc6a:	bf00      	nop
 800fc6c:	24000160 	.word	0x24000160

0800fc70 <sbrk_aligned>:
 800fc70:	b570      	push	{r4, r5, r6, lr}
 800fc72:	4e0f      	ldr	r6, [pc, #60]	@ (800fcb0 <sbrk_aligned+0x40>)
 800fc74:	460c      	mov	r4, r1
 800fc76:	6831      	ldr	r1, [r6, #0]
 800fc78:	4605      	mov	r5, r0
 800fc7a:	b911      	cbnz	r1, 800fc82 <sbrk_aligned+0x12>
 800fc7c:	f000 fc64 	bl	8010548 <_sbrk_r>
 800fc80:	6030      	str	r0, [r6, #0]
 800fc82:	4621      	mov	r1, r4
 800fc84:	4628      	mov	r0, r5
 800fc86:	f000 fc5f 	bl	8010548 <_sbrk_r>
 800fc8a:	1c43      	adds	r3, r0, #1
 800fc8c:	d103      	bne.n	800fc96 <sbrk_aligned+0x26>
 800fc8e:	f04f 34ff 	mov.w	r4, #4294967295
 800fc92:	4620      	mov	r0, r4
 800fc94:	bd70      	pop	{r4, r5, r6, pc}
 800fc96:	1cc4      	adds	r4, r0, #3
 800fc98:	f024 0403 	bic.w	r4, r4, #3
 800fc9c:	42a0      	cmp	r0, r4
 800fc9e:	d0f8      	beq.n	800fc92 <sbrk_aligned+0x22>
 800fca0:	1a21      	subs	r1, r4, r0
 800fca2:	4628      	mov	r0, r5
 800fca4:	f000 fc50 	bl	8010548 <_sbrk_r>
 800fca8:	3001      	adds	r0, #1
 800fcaa:	d1f2      	bne.n	800fc92 <sbrk_aligned+0x22>
 800fcac:	e7ef      	b.n	800fc8e <sbrk_aligned+0x1e>
 800fcae:	bf00      	nop
 800fcb0:	24005644 	.word	0x24005644

0800fcb4 <_malloc_r>:
 800fcb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcb8:	1ccd      	adds	r5, r1, #3
 800fcba:	f025 0503 	bic.w	r5, r5, #3
 800fcbe:	3508      	adds	r5, #8
 800fcc0:	2d0c      	cmp	r5, #12
 800fcc2:	bf38      	it	cc
 800fcc4:	250c      	movcc	r5, #12
 800fcc6:	2d00      	cmp	r5, #0
 800fcc8:	4606      	mov	r6, r0
 800fcca:	db01      	blt.n	800fcd0 <_malloc_r+0x1c>
 800fccc:	42a9      	cmp	r1, r5
 800fcce:	d904      	bls.n	800fcda <_malloc_r+0x26>
 800fcd0:	230c      	movs	r3, #12
 800fcd2:	6033      	str	r3, [r6, #0]
 800fcd4:	2000      	movs	r0, #0
 800fcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fcda:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fdb0 <_malloc_r+0xfc>
 800fcde:	f000 f869 	bl	800fdb4 <__malloc_lock>
 800fce2:	f8d8 3000 	ldr.w	r3, [r8]
 800fce6:	461c      	mov	r4, r3
 800fce8:	bb44      	cbnz	r4, 800fd3c <_malloc_r+0x88>
 800fcea:	4629      	mov	r1, r5
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7ff ffbf 	bl	800fc70 <sbrk_aligned>
 800fcf2:	1c43      	adds	r3, r0, #1
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	d158      	bne.n	800fdaa <_malloc_r+0xf6>
 800fcf8:	f8d8 4000 	ldr.w	r4, [r8]
 800fcfc:	4627      	mov	r7, r4
 800fcfe:	2f00      	cmp	r7, #0
 800fd00:	d143      	bne.n	800fd8a <_malloc_r+0xd6>
 800fd02:	2c00      	cmp	r4, #0
 800fd04:	d04b      	beq.n	800fd9e <_malloc_r+0xea>
 800fd06:	6823      	ldr	r3, [r4, #0]
 800fd08:	4639      	mov	r1, r7
 800fd0a:	4630      	mov	r0, r6
 800fd0c:	eb04 0903 	add.w	r9, r4, r3
 800fd10:	f000 fc1a 	bl	8010548 <_sbrk_r>
 800fd14:	4581      	cmp	r9, r0
 800fd16:	d142      	bne.n	800fd9e <_malloc_r+0xea>
 800fd18:	6821      	ldr	r1, [r4, #0]
 800fd1a:	1a6d      	subs	r5, r5, r1
 800fd1c:	4629      	mov	r1, r5
 800fd1e:	4630      	mov	r0, r6
 800fd20:	f7ff ffa6 	bl	800fc70 <sbrk_aligned>
 800fd24:	3001      	adds	r0, #1
 800fd26:	d03a      	beq.n	800fd9e <_malloc_r+0xea>
 800fd28:	6823      	ldr	r3, [r4, #0]
 800fd2a:	442b      	add	r3, r5
 800fd2c:	6023      	str	r3, [r4, #0]
 800fd2e:	f8d8 3000 	ldr.w	r3, [r8]
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	bb62      	cbnz	r2, 800fd90 <_malloc_r+0xdc>
 800fd36:	f8c8 7000 	str.w	r7, [r8]
 800fd3a:	e00f      	b.n	800fd5c <_malloc_r+0xa8>
 800fd3c:	6822      	ldr	r2, [r4, #0]
 800fd3e:	1b52      	subs	r2, r2, r5
 800fd40:	d420      	bmi.n	800fd84 <_malloc_r+0xd0>
 800fd42:	2a0b      	cmp	r2, #11
 800fd44:	d917      	bls.n	800fd76 <_malloc_r+0xc2>
 800fd46:	1961      	adds	r1, r4, r5
 800fd48:	42a3      	cmp	r3, r4
 800fd4a:	6025      	str	r5, [r4, #0]
 800fd4c:	bf18      	it	ne
 800fd4e:	6059      	strne	r1, [r3, #4]
 800fd50:	6863      	ldr	r3, [r4, #4]
 800fd52:	bf08      	it	eq
 800fd54:	f8c8 1000 	streq.w	r1, [r8]
 800fd58:	5162      	str	r2, [r4, r5]
 800fd5a:	604b      	str	r3, [r1, #4]
 800fd5c:	4630      	mov	r0, r6
 800fd5e:	f000 f82f 	bl	800fdc0 <__malloc_unlock>
 800fd62:	f104 000b 	add.w	r0, r4, #11
 800fd66:	1d23      	adds	r3, r4, #4
 800fd68:	f020 0007 	bic.w	r0, r0, #7
 800fd6c:	1ac2      	subs	r2, r0, r3
 800fd6e:	bf1c      	itt	ne
 800fd70:	1a1b      	subne	r3, r3, r0
 800fd72:	50a3      	strne	r3, [r4, r2]
 800fd74:	e7af      	b.n	800fcd6 <_malloc_r+0x22>
 800fd76:	6862      	ldr	r2, [r4, #4]
 800fd78:	42a3      	cmp	r3, r4
 800fd7a:	bf0c      	ite	eq
 800fd7c:	f8c8 2000 	streq.w	r2, [r8]
 800fd80:	605a      	strne	r2, [r3, #4]
 800fd82:	e7eb      	b.n	800fd5c <_malloc_r+0xa8>
 800fd84:	4623      	mov	r3, r4
 800fd86:	6864      	ldr	r4, [r4, #4]
 800fd88:	e7ae      	b.n	800fce8 <_malloc_r+0x34>
 800fd8a:	463c      	mov	r4, r7
 800fd8c:	687f      	ldr	r7, [r7, #4]
 800fd8e:	e7b6      	b.n	800fcfe <_malloc_r+0x4a>
 800fd90:	461a      	mov	r2, r3
 800fd92:	685b      	ldr	r3, [r3, #4]
 800fd94:	42a3      	cmp	r3, r4
 800fd96:	d1fb      	bne.n	800fd90 <_malloc_r+0xdc>
 800fd98:	2300      	movs	r3, #0
 800fd9a:	6053      	str	r3, [r2, #4]
 800fd9c:	e7de      	b.n	800fd5c <_malloc_r+0xa8>
 800fd9e:	230c      	movs	r3, #12
 800fda0:	6033      	str	r3, [r6, #0]
 800fda2:	4630      	mov	r0, r6
 800fda4:	f000 f80c 	bl	800fdc0 <__malloc_unlock>
 800fda8:	e794      	b.n	800fcd4 <_malloc_r+0x20>
 800fdaa:	6005      	str	r5, [r0, #0]
 800fdac:	e7d6      	b.n	800fd5c <_malloc_r+0xa8>
 800fdae:	bf00      	nop
 800fdb0:	24005648 	.word	0x24005648

0800fdb4 <__malloc_lock>:
 800fdb4:	4801      	ldr	r0, [pc, #4]	@ (800fdbc <__malloc_lock+0x8>)
 800fdb6:	f7ff beda 	b.w	800fb6e <__retarget_lock_acquire_recursive>
 800fdba:	bf00      	nop
 800fdbc:	24005640 	.word	0x24005640

0800fdc0 <__malloc_unlock>:
 800fdc0:	4801      	ldr	r0, [pc, #4]	@ (800fdc8 <__malloc_unlock+0x8>)
 800fdc2:	f7ff bed5 	b.w	800fb70 <__retarget_lock_release_recursive>
 800fdc6:	bf00      	nop
 800fdc8:	24005640 	.word	0x24005640

0800fdcc <__ssputs_r>:
 800fdcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fdd0:	688e      	ldr	r6, [r1, #8]
 800fdd2:	461f      	mov	r7, r3
 800fdd4:	42be      	cmp	r6, r7
 800fdd6:	680b      	ldr	r3, [r1, #0]
 800fdd8:	4682      	mov	sl, r0
 800fdda:	460c      	mov	r4, r1
 800fddc:	4690      	mov	r8, r2
 800fdde:	d82d      	bhi.n	800fe3c <__ssputs_r+0x70>
 800fde0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fde4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fde8:	d026      	beq.n	800fe38 <__ssputs_r+0x6c>
 800fdea:	6965      	ldr	r5, [r4, #20]
 800fdec:	6909      	ldr	r1, [r1, #16]
 800fdee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdf2:	eba3 0901 	sub.w	r9, r3, r1
 800fdf6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdfa:	1c7b      	adds	r3, r7, #1
 800fdfc:	444b      	add	r3, r9
 800fdfe:	106d      	asrs	r5, r5, #1
 800fe00:	429d      	cmp	r5, r3
 800fe02:	bf38      	it	cc
 800fe04:	461d      	movcc	r5, r3
 800fe06:	0553      	lsls	r3, r2, #21
 800fe08:	d527      	bpl.n	800fe5a <__ssputs_r+0x8e>
 800fe0a:	4629      	mov	r1, r5
 800fe0c:	f7ff ff52 	bl	800fcb4 <_malloc_r>
 800fe10:	4606      	mov	r6, r0
 800fe12:	b360      	cbz	r0, 800fe6e <__ssputs_r+0xa2>
 800fe14:	6921      	ldr	r1, [r4, #16]
 800fe16:	464a      	mov	r2, r9
 800fe18:	f7ff feab 	bl	800fb72 <memcpy>
 800fe1c:	89a3      	ldrh	r3, [r4, #12]
 800fe1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fe22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fe26:	81a3      	strh	r3, [r4, #12]
 800fe28:	6126      	str	r6, [r4, #16]
 800fe2a:	6165      	str	r5, [r4, #20]
 800fe2c:	444e      	add	r6, r9
 800fe2e:	eba5 0509 	sub.w	r5, r5, r9
 800fe32:	6026      	str	r6, [r4, #0]
 800fe34:	60a5      	str	r5, [r4, #8]
 800fe36:	463e      	mov	r6, r7
 800fe38:	42be      	cmp	r6, r7
 800fe3a:	d900      	bls.n	800fe3e <__ssputs_r+0x72>
 800fe3c:	463e      	mov	r6, r7
 800fe3e:	6820      	ldr	r0, [r4, #0]
 800fe40:	4632      	mov	r2, r6
 800fe42:	4641      	mov	r1, r8
 800fe44:	f000 fb66 	bl	8010514 <memmove>
 800fe48:	68a3      	ldr	r3, [r4, #8]
 800fe4a:	1b9b      	subs	r3, r3, r6
 800fe4c:	60a3      	str	r3, [r4, #8]
 800fe4e:	6823      	ldr	r3, [r4, #0]
 800fe50:	4433      	add	r3, r6
 800fe52:	6023      	str	r3, [r4, #0]
 800fe54:	2000      	movs	r0, #0
 800fe56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe5a:	462a      	mov	r2, r5
 800fe5c:	f000 fb8b 	bl	8010576 <_realloc_r>
 800fe60:	4606      	mov	r6, r0
 800fe62:	2800      	cmp	r0, #0
 800fe64:	d1e0      	bne.n	800fe28 <__ssputs_r+0x5c>
 800fe66:	6921      	ldr	r1, [r4, #16]
 800fe68:	4650      	mov	r0, sl
 800fe6a:	f7ff feaf 	bl	800fbcc <_free_r>
 800fe6e:	230c      	movs	r3, #12
 800fe70:	f8ca 3000 	str.w	r3, [sl]
 800fe74:	89a3      	ldrh	r3, [r4, #12]
 800fe76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe7a:	81a3      	strh	r3, [r4, #12]
 800fe7c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe80:	e7e9      	b.n	800fe56 <__ssputs_r+0x8a>
	...

0800fe84 <_svfiprintf_r>:
 800fe84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe88:	4698      	mov	r8, r3
 800fe8a:	898b      	ldrh	r3, [r1, #12]
 800fe8c:	061b      	lsls	r3, r3, #24
 800fe8e:	b09d      	sub	sp, #116	@ 0x74
 800fe90:	4607      	mov	r7, r0
 800fe92:	460d      	mov	r5, r1
 800fe94:	4614      	mov	r4, r2
 800fe96:	d510      	bpl.n	800feba <_svfiprintf_r+0x36>
 800fe98:	690b      	ldr	r3, [r1, #16]
 800fe9a:	b973      	cbnz	r3, 800feba <_svfiprintf_r+0x36>
 800fe9c:	2140      	movs	r1, #64	@ 0x40
 800fe9e:	f7ff ff09 	bl	800fcb4 <_malloc_r>
 800fea2:	6028      	str	r0, [r5, #0]
 800fea4:	6128      	str	r0, [r5, #16]
 800fea6:	b930      	cbnz	r0, 800feb6 <_svfiprintf_r+0x32>
 800fea8:	230c      	movs	r3, #12
 800feaa:	603b      	str	r3, [r7, #0]
 800feac:	f04f 30ff 	mov.w	r0, #4294967295
 800feb0:	b01d      	add	sp, #116	@ 0x74
 800feb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800feb6:	2340      	movs	r3, #64	@ 0x40
 800feb8:	616b      	str	r3, [r5, #20]
 800feba:	2300      	movs	r3, #0
 800febc:	9309      	str	r3, [sp, #36]	@ 0x24
 800febe:	2320      	movs	r3, #32
 800fec0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fec4:	f8cd 800c 	str.w	r8, [sp, #12]
 800fec8:	2330      	movs	r3, #48	@ 0x30
 800feca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010068 <_svfiprintf_r+0x1e4>
 800fece:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fed2:	f04f 0901 	mov.w	r9, #1
 800fed6:	4623      	mov	r3, r4
 800fed8:	469a      	mov	sl, r3
 800feda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fede:	b10a      	cbz	r2, 800fee4 <_svfiprintf_r+0x60>
 800fee0:	2a25      	cmp	r2, #37	@ 0x25
 800fee2:	d1f9      	bne.n	800fed8 <_svfiprintf_r+0x54>
 800fee4:	ebba 0b04 	subs.w	fp, sl, r4
 800fee8:	d00b      	beq.n	800ff02 <_svfiprintf_r+0x7e>
 800feea:	465b      	mov	r3, fp
 800feec:	4622      	mov	r2, r4
 800feee:	4629      	mov	r1, r5
 800fef0:	4638      	mov	r0, r7
 800fef2:	f7ff ff6b 	bl	800fdcc <__ssputs_r>
 800fef6:	3001      	adds	r0, #1
 800fef8:	f000 80a7 	beq.w	801004a <_svfiprintf_r+0x1c6>
 800fefc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fefe:	445a      	add	r2, fp
 800ff00:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff02:	f89a 3000 	ldrb.w	r3, [sl]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f000 809f 	beq.w	801004a <_svfiprintf_r+0x1c6>
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff16:	f10a 0a01 	add.w	sl, sl, #1
 800ff1a:	9304      	str	r3, [sp, #16]
 800ff1c:	9307      	str	r3, [sp, #28]
 800ff1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff22:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff24:	4654      	mov	r4, sl
 800ff26:	2205      	movs	r2, #5
 800ff28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff2c:	484e      	ldr	r0, [pc, #312]	@ (8010068 <_svfiprintf_r+0x1e4>)
 800ff2e:	f7f0 f9df 	bl	80002f0 <memchr>
 800ff32:	9a04      	ldr	r2, [sp, #16]
 800ff34:	b9d8      	cbnz	r0, 800ff6e <_svfiprintf_r+0xea>
 800ff36:	06d0      	lsls	r0, r2, #27
 800ff38:	bf44      	itt	mi
 800ff3a:	2320      	movmi	r3, #32
 800ff3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff40:	0711      	lsls	r1, r2, #28
 800ff42:	bf44      	itt	mi
 800ff44:	232b      	movmi	r3, #43	@ 0x2b
 800ff46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff4e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff50:	d015      	beq.n	800ff7e <_svfiprintf_r+0xfa>
 800ff52:	9a07      	ldr	r2, [sp, #28]
 800ff54:	4654      	mov	r4, sl
 800ff56:	2000      	movs	r0, #0
 800ff58:	f04f 0c0a 	mov.w	ip, #10
 800ff5c:	4621      	mov	r1, r4
 800ff5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff62:	3b30      	subs	r3, #48	@ 0x30
 800ff64:	2b09      	cmp	r3, #9
 800ff66:	d94b      	bls.n	8010000 <_svfiprintf_r+0x17c>
 800ff68:	b1b0      	cbz	r0, 800ff98 <_svfiprintf_r+0x114>
 800ff6a:	9207      	str	r2, [sp, #28]
 800ff6c:	e014      	b.n	800ff98 <_svfiprintf_r+0x114>
 800ff6e:	eba0 0308 	sub.w	r3, r0, r8
 800ff72:	fa09 f303 	lsl.w	r3, r9, r3
 800ff76:	4313      	orrs	r3, r2
 800ff78:	9304      	str	r3, [sp, #16]
 800ff7a:	46a2      	mov	sl, r4
 800ff7c:	e7d2      	b.n	800ff24 <_svfiprintf_r+0xa0>
 800ff7e:	9b03      	ldr	r3, [sp, #12]
 800ff80:	1d19      	adds	r1, r3, #4
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	9103      	str	r1, [sp, #12]
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	bfbb      	ittet	lt
 800ff8a:	425b      	neglt	r3, r3
 800ff8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff90:	9307      	strge	r3, [sp, #28]
 800ff92:	9307      	strlt	r3, [sp, #28]
 800ff94:	bfb8      	it	lt
 800ff96:	9204      	strlt	r2, [sp, #16]
 800ff98:	7823      	ldrb	r3, [r4, #0]
 800ff9a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff9c:	d10a      	bne.n	800ffb4 <_svfiprintf_r+0x130>
 800ff9e:	7863      	ldrb	r3, [r4, #1]
 800ffa0:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffa2:	d132      	bne.n	801000a <_svfiprintf_r+0x186>
 800ffa4:	9b03      	ldr	r3, [sp, #12]
 800ffa6:	1d1a      	adds	r2, r3, #4
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	9203      	str	r2, [sp, #12]
 800ffac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffb0:	3402      	adds	r4, #2
 800ffb2:	9305      	str	r3, [sp, #20]
 800ffb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010078 <_svfiprintf_r+0x1f4>
 800ffb8:	7821      	ldrb	r1, [r4, #0]
 800ffba:	2203      	movs	r2, #3
 800ffbc:	4650      	mov	r0, sl
 800ffbe:	f7f0 f997 	bl	80002f0 <memchr>
 800ffc2:	b138      	cbz	r0, 800ffd4 <_svfiprintf_r+0x150>
 800ffc4:	9b04      	ldr	r3, [sp, #16]
 800ffc6:	eba0 000a 	sub.w	r0, r0, sl
 800ffca:	2240      	movs	r2, #64	@ 0x40
 800ffcc:	4082      	lsls	r2, r0
 800ffce:	4313      	orrs	r3, r2
 800ffd0:	3401      	adds	r4, #1
 800ffd2:	9304      	str	r3, [sp, #16]
 800ffd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ffd8:	4824      	ldr	r0, [pc, #144]	@ (801006c <_svfiprintf_r+0x1e8>)
 800ffda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ffde:	2206      	movs	r2, #6
 800ffe0:	f7f0 f986 	bl	80002f0 <memchr>
 800ffe4:	2800      	cmp	r0, #0
 800ffe6:	d036      	beq.n	8010056 <_svfiprintf_r+0x1d2>
 800ffe8:	4b21      	ldr	r3, [pc, #132]	@ (8010070 <_svfiprintf_r+0x1ec>)
 800ffea:	bb1b      	cbnz	r3, 8010034 <_svfiprintf_r+0x1b0>
 800ffec:	9b03      	ldr	r3, [sp, #12]
 800ffee:	3307      	adds	r3, #7
 800fff0:	f023 0307 	bic.w	r3, r3, #7
 800fff4:	3308      	adds	r3, #8
 800fff6:	9303      	str	r3, [sp, #12]
 800fff8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fffa:	4433      	add	r3, r6
 800fffc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fffe:	e76a      	b.n	800fed6 <_svfiprintf_r+0x52>
 8010000:	fb0c 3202 	mla	r2, ip, r2, r3
 8010004:	460c      	mov	r4, r1
 8010006:	2001      	movs	r0, #1
 8010008:	e7a8      	b.n	800ff5c <_svfiprintf_r+0xd8>
 801000a:	2300      	movs	r3, #0
 801000c:	3401      	adds	r4, #1
 801000e:	9305      	str	r3, [sp, #20]
 8010010:	4619      	mov	r1, r3
 8010012:	f04f 0c0a 	mov.w	ip, #10
 8010016:	4620      	mov	r0, r4
 8010018:	f810 2b01 	ldrb.w	r2, [r0], #1
 801001c:	3a30      	subs	r2, #48	@ 0x30
 801001e:	2a09      	cmp	r2, #9
 8010020:	d903      	bls.n	801002a <_svfiprintf_r+0x1a6>
 8010022:	2b00      	cmp	r3, #0
 8010024:	d0c6      	beq.n	800ffb4 <_svfiprintf_r+0x130>
 8010026:	9105      	str	r1, [sp, #20]
 8010028:	e7c4      	b.n	800ffb4 <_svfiprintf_r+0x130>
 801002a:	fb0c 2101 	mla	r1, ip, r1, r2
 801002e:	4604      	mov	r4, r0
 8010030:	2301      	movs	r3, #1
 8010032:	e7f0      	b.n	8010016 <_svfiprintf_r+0x192>
 8010034:	ab03      	add	r3, sp, #12
 8010036:	9300      	str	r3, [sp, #0]
 8010038:	462a      	mov	r2, r5
 801003a:	4b0e      	ldr	r3, [pc, #56]	@ (8010074 <_svfiprintf_r+0x1f0>)
 801003c:	a904      	add	r1, sp, #16
 801003e:	4638      	mov	r0, r7
 8010040:	f3af 8000 	nop.w
 8010044:	1c42      	adds	r2, r0, #1
 8010046:	4606      	mov	r6, r0
 8010048:	d1d6      	bne.n	800fff8 <_svfiprintf_r+0x174>
 801004a:	89ab      	ldrh	r3, [r5, #12]
 801004c:	065b      	lsls	r3, r3, #25
 801004e:	f53f af2d 	bmi.w	800feac <_svfiprintf_r+0x28>
 8010052:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010054:	e72c      	b.n	800feb0 <_svfiprintf_r+0x2c>
 8010056:	ab03      	add	r3, sp, #12
 8010058:	9300      	str	r3, [sp, #0]
 801005a:	462a      	mov	r2, r5
 801005c:	4b05      	ldr	r3, [pc, #20]	@ (8010074 <_svfiprintf_r+0x1f0>)
 801005e:	a904      	add	r1, sp, #16
 8010060:	4638      	mov	r0, r7
 8010062:	f000 f879 	bl	8010158 <_printf_i>
 8010066:	e7ed      	b.n	8010044 <_svfiprintf_r+0x1c0>
 8010068:	08010e35 	.word	0x08010e35
 801006c:	08010e3f 	.word	0x08010e3f
 8010070:	00000000 	.word	0x00000000
 8010074:	0800fdcd 	.word	0x0800fdcd
 8010078:	08010e3b 	.word	0x08010e3b

0801007c <_printf_common>:
 801007c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010080:	4616      	mov	r6, r2
 8010082:	4698      	mov	r8, r3
 8010084:	688a      	ldr	r2, [r1, #8]
 8010086:	690b      	ldr	r3, [r1, #16]
 8010088:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801008c:	4293      	cmp	r3, r2
 801008e:	bfb8      	it	lt
 8010090:	4613      	movlt	r3, r2
 8010092:	6033      	str	r3, [r6, #0]
 8010094:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8010098:	4607      	mov	r7, r0
 801009a:	460c      	mov	r4, r1
 801009c:	b10a      	cbz	r2, 80100a2 <_printf_common+0x26>
 801009e:	3301      	adds	r3, #1
 80100a0:	6033      	str	r3, [r6, #0]
 80100a2:	6823      	ldr	r3, [r4, #0]
 80100a4:	0699      	lsls	r1, r3, #26
 80100a6:	bf42      	ittt	mi
 80100a8:	6833      	ldrmi	r3, [r6, #0]
 80100aa:	3302      	addmi	r3, #2
 80100ac:	6033      	strmi	r3, [r6, #0]
 80100ae:	6825      	ldr	r5, [r4, #0]
 80100b0:	f015 0506 	ands.w	r5, r5, #6
 80100b4:	d106      	bne.n	80100c4 <_printf_common+0x48>
 80100b6:	f104 0a19 	add.w	sl, r4, #25
 80100ba:	68e3      	ldr	r3, [r4, #12]
 80100bc:	6832      	ldr	r2, [r6, #0]
 80100be:	1a9b      	subs	r3, r3, r2
 80100c0:	42ab      	cmp	r3, r5
 80100c2:	dc26      	bgt.n	8010112 <_printf_common+0x96>
 80100c4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80100c8:	6822      	ldr	r2, [r4, #0]
 80100ca:	3b00      	subs	r3, #0
 80100cc:	bf18      	it	ne
 80100ce:	2301      	movne	r3, #1
 80100d0:	0692      	lsls	r2, r2, #26
 80100d2:	d42b      	bmi.n	801012c <_printf_common+0xb0>
 80100d4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80100d8:	4641      	mov	r1, r8
 80100da:	4638      	mov	r0, r7
 80100dc:	47c8      	blx	r9
 80100de:	3001      	adds	r0, #1
 80100e0:	d01e      	beq.n	8010120 <_printf_common+0xa4>
 80100e2:	6823      	ldr	r3, [r4, #0]
 80100e4:	6922      	ldr	r2, [r4, #16]
 80100e6:	f003 0306 	and.w	r3, r3, #6
 80100ea:	2b04      	cmp	r3, #4
 80100ec:	bf02      	ittt	eq
 80100ee:	68e5      	ldreq	r5, [r4, #12]
 80100f0:	6833      	ldreq	r3, [r6, #0]
 80100f2:	1aed      	subeq	r5, r5, r3
 80100f4:	68a3      	ldr	r3, [r4, #8]
 80100f6:	bf0c      	ite	eq
 80100f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80100fc:	2500      	movne	r5, #0
 80100fe:	4293      	cmp	r3, r2
 8010100:	bfc4      	itt	gt
 8010102:	1a9b      	subgt	r3, r3, r2
 8010104:	18ed      	addgt	r5, r5, r3
 8010106:	2600      	movs	r6, #0
 8010108:	341a      	adds	r4, #26
 801010a:	42b5      	cmp	r5, r6
 801010c:	d11a      	bne.n	8010144 <_printf_common+0xc8>
 801010e:	2000      	movs	r0, #0
 8010110:	e008      	b.n	8010124 <_printf_common+0xa8>
 8010112:	2301      	movs	r3, #1
 8010114:	4652      	mov	r2, sl
 8010116:	4641      	mov	r1, r8
 8010118:	4638      	mov	r0, r7
 801011a:	47c8      	blx	r9
 801011c:	3001      	adds	r0, #1
 801011e:	d103      	bne.n	8010128 <_printf_common+0xac>
 8010120:	f04f 30ff 	mov.w	r0, #4294967295
 8010124:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010128:	3501      	adds	r5, #1
 801012a:	e7c6      	b.n	80100ba <_printf_common+0x3e>
 801012c:	18e1      	adds	r1, r4, r3
 801012e:	1c5a      	adds	r2, r3, #1
 8010130:	2030      	movs	r0, #48	@ 0x30
 8010132:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8010136:	4422      	add	r2, r4
 8010138:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801013c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010140:	3302      	adds	r3, #2
 8010142:	e7c7      	b.n	80100d4 <_printf_common+0x58>
 8010144:	2301      	movs	r3, #1
 8010146:	4622      	mov	r2, r4
 8010148:	4641      	mov	r1, r8
 801014a:	4638      	mov	r0, r7
 801014c:	47c8      	blx	r9
 801014e:	3001      	adds	r0, #1
 8010150:	d0e6      	beq.n	8010120 <_printf_common+0xa4>
 8010152:	3601      	adds	r6, #1
 8010154:	e7d9      	b.n	801010a <_printf_common+0x8e>
	...

08010158 <_printf_i>:
 8010158:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801015c:	7e0f      	ldrb	r7, [r1, #24]
 801015e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8010160:	2f78      	cmp	r7, #120	@ 0x78
 8010162:	4691      	mov	r9, r2
 8010164:	4680      	mov	r8, r0
 8010166:	460c      	mov	r4, r1
 8010168:	469a      	mov	sl, r3
 801016a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801016e:	d807      	bhi.n	8010180 <_printf_i+0x28>
 8010170:	2f62      	cmp	r7, #98	@ 0x62
 8010172:	d80a      	bhi.n	801018a <_printf_i+0x32>
 8010174:	2f00      	cmp	r7, #0
 8010176:	f000 80d2 	beq.w	801031e <_printf_i+0x1c6>
 801017a:	2f58      	cmp	r7, #88	@ 0x58
 801017c:	f000 80b9 	beq.w	80102f2 <_printf_i+0x19a>
 8010180:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010184:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8010188:	e03a      	b.n	8010200 <_printf_i+0xa8>
 801018a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801018e:	2b15      	cmp	r3, #21
 8010190:	d8f6      	bhi.n	8010180 <_printf_i+0x28>
 8010192:	a101      	add	r1, pc, #4	@ (adr r1, 8010198 <_printf_i+0x40>)
 8010194:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010198:	080101f1 	.word	0x080101f1
 801019c:	08010205 	.word	0x08010205
 80101a0:	08010181 	.word	0x08010181
 80101a4:	08010181 	.word	0x08010181
 80101a8:	08010181 	.word	0x08010181
 80101ac:	08010181 	.word	0x08010181
 80101b0:	08010205 	.word	0x08010205
 80101b4:	08010181 	.word	0x08010181
 80101b8:	08010181 	.word	0x08010181
 80101bc:	08010181 	.word	0x08010181
 80101c0:	08010181 	.word	0x08010181
 80101c4:	08010305 	.word	0x08010305
 80101c8:	0801022f 	.word	0x0801022f
 80101cc:	080102bf 	.word	0x080102bf
 80101d0:	08010181 	.word	0x08010181
 80101d4:	08010181 	.word	0x08010181
 80101d8:	08010327 	.word	0x08010327
 80101dc:	08010181 	.word	0x08010181
 80101e0:	0801022f 	.word	0x0801022f
 80101e4:	08010181 	.word	0x08010181
 80101e8:	08010181 	.word	0x08010181
 80101ec:	080102c7 	.word	0x080102c7
 80101f0:	6833      	ldr	r3, [r6, #0]
 80101f2:	1d1a      	adds	r2, r3, #4
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	6032      	str	r2, [r6, #0]
 80101f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80101fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010200:	2301      	movs	r3, #1
 8010202:	e09d      	b.n	8010340 <_printf_i+0x1e8>
 8010204:	6833      	ldr	r3, [r6, #0]
 8010206:	6820      	ldr	r0, [r4, #0]
 8010208:	1d19      	adds	r1, r3, #4
 801020a:	6031      	str	r1, [r6, #0]
 801020c:	0606      	lsls	r6, r0, #24
 801020e:	d501      	bpl.n	8010214 <_printf_i+0xbc>
 8010210:	681d      	ldr	r5, [r3, #0]
 8010212:	e003      	b.n	801021c <_printf_i+0xc4>
 8010214:	0645      	lsls	r5, r0, #25
 8010216:	d5fb      	bpl.n	8010210 <_printf_i+0xb8>
 8010218:	f9b3 5000 	ldrsh.w	r5, [r3]
 801021c:	2d00      	cmp	r5, #0
 801021e:	da03      	bge.n	8010228 <_printf_i+0xd0>
 8010220:	232d      	movs	r3, #45	@ 0x2d
 8010222:	426d      	negs	r5, r5
 8010224:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010228:	4859      	ldr	r0, [pc, #356]	@ (8010390 <_printf_i+0x238>)
 801022a:	230a      	movs	r3, #10
 801022c:	e011      	b.n	8010252 <_printf_i+0xfa>
 801022e:	6821      	ldr	r1, [r4, #0]
 8010230:	6833      	ldr	r3, [r6, #0]
 8010232:	0608      	lsls	r0, r1, #24
 8010234:	f853 5b04 	ldr.w	r5, [r3], #4
 8010238:	d402      	bmi.n	8010240 <_printf_i+0xe8>
 801023a:	0649      	lsls	r1, r1, #25
 801023c:	bf48      	it	mi
 801023e:	b2ad      	uxthmi	r5, r5
 8010240:	2f6f      	cmp	r7, #111	@ 0x6f
 8010242:	4853      	ldr	r0, [pc, #332]	@ (8010390 <_printf_i+0x238>)
 8010244:	6033      	str	r3, [r6, #0]
 8010246:	bf14      	ite	ne
 8010248:	230a      	movne	r3, #10
 801024a:	2308      	moveq	r3, #8
 801024c:	2100      	movs	r1, #0
 801024e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010252:	6866      	ldr	r6, [r4, #4]
 8010254:	60a6      	str	r6, [r4, #8]
 8010256:	2e00      	cmp	r6, #0
 8010258:	bfa2      	ittt	ge
 801025a:	6821      	ldrge	r1, [r4, #0]
 801025c:	f021 0104 	bicge.w	r1, r1, #4
 8010260:	6021      	strge	r1, [r4, #0]
 8010262:	b90d      	cbnz	r5, 8010268 <_printf_i+0x110>
 8010264:	2e00      	cmp	r6, #0
 8010266:	d04b      	beq.n	8010300 <_printf_i+0x1a8>
 8010268:	4616      	mov	r6, r2
 801026a:	fbb5 f1f3 	udiv	r1, r5, r3
 801026e:	fb03 5711 	mls	r7, r3, r1, r5
 8010272:	5dc7      	ldrb	r7, [r0, r7]
 8010274:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8010278:	462f      	mov	r7, r5
 801027a:	42bb      	cmp	r3, r7
 801027c:	460d      	mov	r5, r1
 801027e:	d9f4      	bls.n	801026a <_printf_i+0x112>
 8010280:	2b08      	cmp	r3, #8
 8010282:	d10b      	bne.n	801029c <_printf_i+0x144>
 8010284:	6823      	ldr	r3, [r4, #0]
 8010286:	07df      	lsls	r7, r3, #31
 8010288:	d508      	bpl.n	801029c <_printf_i+0x144>
 801028a:	6923      	ldr	r3, [r4, #16]
 801028c:	6861      	ldr	r1, [r4, #4]
 801028e:	4299      	cmp	r1, r3
 8010290:	bfde      	ittt	le
 8010292:	2330      	movle	r3, #48	@ 0x30
 8010294:	f806 3c01 	strble.w	r3, [r6, #-1]
 8010298:	f106 36ff 	addle.w	r6, r6, #4294967295
 801029c:	1b92      	subs	r2, r2, r6
 801029e:	6122      	str	r2, [r4, #16]
 80102a0:	f8cd a000 	str.w	sl, [sp]
 80102a4:	464b      	mov	r3, r9
 80102a6:	aa03      	add	r2, sp, #12
 80102a8:	4621      	mov	r1, r4
 80102aa:	4640      	mov	r0, r8
 80102ac:	f7ff fee6 	bl	801007c <_printf_common>
 80102b0:	3001      	adds	r0, #1
 80102b2:	d14a      	bne.n	801034a <_printf_i+0x1f2>
 80102b4:	f04f 30ff 	mov.w	r0, #4294967295
 80102b8:	b004      	add	sp, #16
 80102ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80102be:	6823      	ldr	r3, [r4, #0]
 80102c0:	f043 0320 	orr.w	r3, r3, #32
 80102c4:	6023      	str	r3, [r4, #0]
 80102c6:	4833      	ldr	r0, [pc, #204]	@ (8010394 <_printf_i+0x23c>)
 80102c8:	2778      	movs	r7, #120	@ 0x78
 80102ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80102ce:	6823      	ldr	r3, [r4, #0]
 80102d0:	6831      	ldr	r1, [r6, #0]
 80102d2:	061f      	lsls	r7, r3, #24
 80102d4:	f851 5b04 	ldr.w	r5, [r1], #4
 80102d8:	d402      	bmi.n	80102e0 <_printf_i+0x188>
 80102da:	065f      	lsls	r7, r3, #25
 80102dc:	bf48      	it	mi
 80102de:	b2ad      	uxthmi	r5, r5
 80102e0:	6031      	str	r1, [r6, #0]
 80102e2:	07d9      	lsls	r1, r3, #31
 80102e4:	bf44      	itt	mi
 80102e6:	f043 0320 	orrmi.w	r3, r3, #32
 80102ea:	6023      	strmi	r3, [r4, #0]
 80102ec:	b11d      	cbz	r5, 80102f6 <_printf_i+0x19e>
 80102ee:	2310      	movs	r3, #16
 80102f0:	e7ac      	b.n	801024c <_printf_i+0xf4>
 80102f2:	4827      	ldr	r0, [pc, #156]	@ (8010390 <_printf_i+0x238>)
 80102f4:	e7e9      	b.n	80102ca <_printf_i+0x172>
 80102f6:	6823      	ldr	r3, [r4, #0]
 80102f8:	f023 0320 	bic.w	r3, r3, #32
 80102fc:	6023      	str	r3, [r4, #0]
 80102fe:	e7f6      	b.n	80102ee <_printf_i+0x196>
 8010300:	4616      	mov	r6, r2
 8010302:	e7bd      	b.n	8010280 <_printf_i+0x128>
 8010304:	6833      	ldr	r3, [r6, #0]
 8010306:	6825      	ldr	r5, [r4, #0]
 8010308:	6961      	ldr	r1, [r4, #20]
 801030a:	1d18      	adds	r0, r3, #4
 801030c:	6030      	str	r0, [r6, #0]
 801030e:	062e      	lsls	r6, r5, #24
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	d501      	bpl.n	8010318 <_printf_i+0x1c0>
 8010314:	6019      	str	r1, [r3, #0]
 8010316:	e002      	b.n	801031e <_printf_i+0x1c6>
 8010318:	0668      	lsls	r0, r5, #25
 801031a:	d5fb      	bpl.n	8010314 <_printf_i+0x1bc>
 801031c:	8019      	strh	r1, [r3, #0]
 801031e:	2300      	movs	r3, #0
 8010320:	6123      	str	r3, [r4, #16]
 8010322:	4616      	mov	r6, r2
 8010324:	e7bc      	b.n	80102a0 <_printf_i+0x148>
 8010326:	6833      	ldr	r3, [r6, #0]
 8010328:	1d1a      	adds	r2, r3, #4
 801032a:	6032      	str	r2, [r6, #0]
 801032c:	681e      	ldr	r6, [r3, #0]
 801032e:	6862      	ldr	r2, [r4, #4]
 8010330:	2100      	movs	r1, #0
 8010332:	4630      	mov	r0, r6
 8010334:	f7ef ffdc 	bl	80002f0 <memchr>
 8010338:	b108      	cbz	r0, 801033e <_printf_i+0x1e6>
 801033a:	1b80      	subs	r0, r0, r6
 801033c:	6060      	str	r0, [r4, #4]
 801033e:	6863      	ldr	r3, [r4, #4]
 8010340:	6123      	str	r3, [r4, #16]
 8010342:	2300      	movs	r3, #0
 8010344:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010348:	e7aa      	b.n	80102a0 <_printf_i+0x148>
 801034a:	6923      	ldr	r3, [r4, #16]
 801034c:	4632      	mov	r2, r6
 801034e:	4649      	mov	r1, r9
 8010350:	4640      	mov	r0, r8
 8010352:	47d0      	blx	sl
 8010354:	3001      	adds	r0, #1
 8010356:	d0ad      	beq.n	80102b4 <_printf_i+0x15c>
 8010358:	6823      	ldr	r3, [r4, #0]
 801035a:	079b      	lsls	r3, r3, #30
 801035c:	d413      	bmi.n	8010386 <_printf_i+0x22e>
 801035e:	68e0      	ldr	r0, [r4, #12]
 8010360:	9b03      	ldr	r3, [sp, #12]
 8010362:	4298      	cmp	r0, r3
 8010364:	bfb8      	it	lt
 8010366:	4618      	movlt	r0, r3
 8010368:	e7a6      	b.n	80102b8 <_printf_i+0x160>
 801036a:	2301      	movs	r3, #1
 801036c:	4632      	mov	r2, r6
 801036e:	4649      	mov	r1, r9
 8010370:	4640      	mov	r0, r8
 8010372:	47d0      	blx	sl
 8010374:	3001      	adds	r0, #1
 8010376:	d09d      	beq.n	80102b4 <_printf_i+0x15c>
 8010378:	3501      	adds	r5, #1
 801037a:	68e3      	ldr	r3, [r4, #12]
 801037c:	9903      	ldr	r1, [sp, #12]
 801037e:	1a5b      	subs	r3, r3, r1
 8010380:	42ab      	cmp	r3, r5
 8010382:	dcf2      	bgt.n	801036a <_printf_i+0x212>
 8010384:	e7eb      	b.n	801035e <_printf_i+0x206>
 8010386:	2500      	movs	r5, #0
 8010388:	f104 0619 	add.w	r6, r4, #25
 801038c:	e7f5      	b.n	801037a <_printf_i+0x222>
 801038e:	bf00      	nop
 8010390:	08010e46 	.word	0x08010e46
 8010394:	08010e57 	.word	0x08010e57

08010398 <__sflush_r>:
 8010398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801039c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103a0:	0716      	lsls	r6, r2, #28
 80103a2:	4605      	mov	r5, r0
 80103a4:	460c      	mov	r4, r1
 80103a6:	d454      	bmi.n	8010452 <__sflush_r+0xba>
 80103a8:	684b      	ldr	r3, [r1, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	dc02      	bgt.n	80103b4 <__sflush_r+0x1c>
 80103ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	dd48      	ble.n	8010446 <__sflush_r+0xae>
 80103b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80103b6:	2e00      	cmp	r6, #0
 80103b8:	d045      	beq.n	8010446 <__sflush_r+0xae>
 80103ba:	2300      	movs	r3, #0
 80103bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80103c0:	682f      	ldr	r7, [r5, #0]
 80103c2:	6a21      	ldr	r1, [r4, #32]
 80103c4:	602b      	str	r3, [r5, #0]
 80103c6:	d030      	beq.n	801042a <__sflush_r+0x92>
 80103c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80103ca:	89a3      	ldrh	r3, [r4, #12]
 80103cc:	0759      	lsls	r1, r3, #29
 80103ce:	d505      	bpl.n	80103dc <__sflush_r+0x44>
 80103d0:	6863      	ldr	r3, [r4, #4]
 80103d2:	1ad2      	subs	r2, r2, r3
 80103d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80103d6:	b10b      	cbz	r3, 80103dc <__sflush_r+0x44>
 80103d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80103da:	1ad2      	subs	r2, r2, r3
 80103dc:	2300      	movs	r3, #0
 80103de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80103e0:	6a21      	ldr	r1, [r4, #32]
 80103e2:	4628      	mov	r0, r5
 80103e4:	47b0      	blx	r6
 80103e6:	1c43      	adds	r3, r0, #1
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	d106      	bne.n	80103fa <__sflush_r+0x62>
 80103ec:	6829      	ldr	r1, [r5, #0]
 80103ee:	291d      	cmp	r1, #29
 80103f0:	d82b      	bhi.n	801044a <__sflush_r+0xb2>
 80103f2:	4a2a      	ldr	r2, [pc, #168]	@ (801049c <__sflush_r+0x104>)
 80103f4:	410a      	asrs	r2, r1
 80103f6:	07d6      	lsls	r6, r2, #31
 80103f8:	d427      	bmi.n	801044a <__sflush_r+0xb2>
 80103fa:	2200      	movs	r2, #0
 80103fc:	6062      	str	r2, [r4, #4]
 80103fe:	04d9      	lsls	r1, r3, #19
 8010400:	6922      	ldr	r2, [r4, #16]
 8010402:	6022      	str	r2, [r4, #0]
 8010404:	d504      	bpl.n	8010410 <__sflush_r+0x78>
 8010406:	1c42      	adds	r2, r0, #1
 8010408:	d101      	bne.n	801040e <__sflush_r+0x76>
 801040a:	682b      	ldr	r3, [r5, #0]
 801040c:	b903      	cbnz	r3, 8010410 <__sflush_r+0x78>
 801040e:	6560      	str	r0, [r4, #84]	@ 0x54
 8010410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010412:	602f      	str	r7, [r5, #0]
 8010414:	b1b9      	cbz	r1, 8010446 <__sflush_r+0xae>
 8010416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801041a:	4299      	cmp	r1, r3
 801041c:	d002      	beq.n	8010424 <__sflush_r+0x8c>
 801041e:	4628      	mov	r0, r5
 8010420:	f7ff fbd4 	bl	800fbcc <_free_r>
 8010424:	2300      	movs	r3, #0
 8010426:	6363      	str	r3, [r4, #52]	@ 0x34
 8010428:	e00d      	b.n	8010446 <__sflush_r+0xae>
 801042a:	2301      	movs	r3, #1
 801042c:	4628      	mov	r0, r5
 801042e:	47b0      	blx	r6
 8010430:	4602      	mov	r2, r0
 8010432:	1c50      	adds	r0, r2, #1
 8010434:	d1c9      	bne.n	80103ca <__sflush_r+0x32>
 8010436:	682b      	ldr	r3, [r5, #0]
 8010438:	2b00      	cmp	r3, #0
 801043a:	d0c6      	beq.n	80103ca <__sflush_r+0x32>
 801043c:	2b1d      	cmp	r3, #29
 801043e:	d001      	beq.n	8010444 <__sflush_r+0xac>
 8010440:	2b16      	cmp	r3, #22
 8010442:	d11e      	bne.n	8010482 <__sflush_r+0xea>
 8010444:	602f      	str	r7, [r5, #0]
 8010446:	2000      	movs	r0, #0
 8010448:	e022      	b.n	8010490 <__sflush_r+0xf8>
 801044a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801044e:	b21b      	sxth	r3, r3
 8010450:	e01b      	b.n	801048a <__sflush_r+0xf2>
 8010452:	690f      	ldr	r7, [r1, #16]
 8010454:	2f00      	cmp	r7, #0
 8010456:	d0f6      	beq.n	8010446 <__sflush_r+0xae>
 8010458:	0793      	lsls	r3, r2, #30
 801045a:	680e      	ldr	r6, [r1, #0]
 801045c:	bf08      	it	eq
 801045e:	694b      	ldreq	r3, [r1, #20]
 8010460:	600f      	str	r7, [r1, #0]
 8010462:	bf18      	it	ne
 8010464:	2300      	movne	r3, #0
 8010466:	eba6 0807 	sub.w	r8, r6, r7
 801046a:	608b      	str	r3, [r1, #8]
 801046c:	f1b8 0f00 	cmp.w	r8, #0
 8010470:	dde9      	ble.n	8010446 <__sflush_r+0xae>
 8010472:	6a21      	ldr	r1, [r4, #32]
 8010474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8010476:	4643      	mov	r3, r8
 8010478:	463a      	mov	r2, r7
 801047a:	4628      	mov	r0, r5
 801047c:	47b0      	blx	r6
 801047e:	2800      	cmp	r0, #0
 8010480:	dc08      	bgt.n	8010494 <__sflush_r+0xfc>
 8010482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801048a:	81a3      	strh	r3, [r4, #12]
 801048c:	f04f 30ff 	mov.w	r0, #4294967295
 8010490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010494:	4407      	add	r7, r0
 8010496:	eba8 0800 	sub.w	r8, r8, r0
 801049a:	e7e7      	b.n	801046c <__sflush_r+0xd4>
 801049c:	dfbffffe 	.word	0xdfbffffe

080104a0 <_fflush_r>:
 80104a0:	b538      	push	{r3, r4, r5, lr}
 80104a2:	690b      	ldr	r3, [r1, #16]
 80104a4:	4605      	mov	r5, r0
 80104a6:	460c      	mov	r4, r1
 80104a8:	b913      	cbnz	r3, 80104b0 <_fflush_r+0x10>
 80104aa:	2500      	movs	r5, #0
 80104ac:	4628      	mov	r0, r5
 80104ae:	bd38      	pop	{r3, r4, r5, pc}
 80104b0:	b118      	cbz	r0, 80104ba <_fflush_r+0x1a>
 80104b2:	6a03      	ldr	r3, [r0, #32]
 80104b4:	b90b      	cbnz	r3, 80104ba <_fflush_r+0x1a>
 80104b6:	f7ff f95f 	bl	800f778 <__sinit>
 80104ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d0f3      	beq.n	80104aa <_fflush_r+0xa>
 80104c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80104c4:	07d0      	lsls	r0, r2, #31
 80104c6:	d404      	bmi.n	80104d2 <_fflush_r+0x32>
 80104c8:	0599      	lsls	r1, r3, #22
 80104ca:	d402      	bmi.n	80104d2 <_fflush_r+0x32>
 80104cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104ce:	f7ff fb4e 	bl	800fb6e <__retarget_lock_acquire_recursive>
 80104d2:	4628      	mov	r0, r5
 80104d4:	4621      	mov	r1, r4
 80104d6:	f7ff ff5f 	bl	8010398 <__sflush_r>
 80104da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80104dc:	07da      	lsls	r2, r3, #31
 80104de:	4605      	mov	r5, r0
 80104e0:	d4e4      	bmi.n	80104ac <_fflush_r+0xc>
 80104e2:	89a3      	ldrh	r3, [r4, #12]
 80104e4:	059b      	lsls	r3, r3, #22
 80104e6:	d4e1      	bmi.n	80104ac <_fflush_r+0xc>
 80104e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80104ea:	f7ff fb41 	bl	800fb70 <__retarget_lock_release_recursive>
 80104ee:	e7dd      	b.n	80104ac <_fflush_r+0xc>

080104f0 <fiprintf>:
 80104f0:	b40e      	push	{r1, r2, r3}
 80104f2:	b503      	push	{r0, r1, lr}
 80104f4:	4601      	mov	r1, r0
 80104f6:	ab03      	add	r3, sp, #12
 80104f8:	4805      	ldr	r0, [pc, #20]	@ (8010510 <fiprintf+0x20>)
 80104fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80104fe:	6800      	ldr	r0, [r0, #0]
 8010500:	9301      	str	r3, [sp, #4]
 8010502:	f000 f88f 	bl	8010624 <_vfiprintf_r>
 8010506:	b002      	add	sp, #8
 8010508:	f85d eb04 	ldr.w	lr, [sp], #4
 801050c:	b003      	add	sp, #12
 801050e:	4770      	bx	lr
 8010510:	24000160 	.word	0x24000160

08010514 <memmove>:
 8010514:	4288      	cmp	r0, r1
 8010516:	b510      	push	{r4, lr}
 8010518:	eb01 0402 	add.w	r4, r1, r2
 801051c:	d902      	bls.n	8010524 <memmove+0x10>
 801051e:	4284      	cmp	r4, r0
 8010520:	4623      	mov	r3, r4
 8010522:	d807      	bhi.n	8010534 <memmove+0x20>
 8010524:	1e43      	subs	r3, r0, #1
 8010526:	42a1      	cmp	r1, r4
 8010528:	d008      	beq.n	801053c <memmove+0x28>
 801052a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801052e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010532:	e7f8      	b.n	8010526 <memmove+0x12>
 8010534:	4402      	add	r2, r0
 8010536:	4601      	mov	r1, r0
 8010538:	428a      	cmp	r2, r1
 801053a:	d100      	bne.n	801053e <memmove+0x2a>
 801053c:	bd10      	pop	{r4, pc}
 801053e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010542:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010546:	e7f7      	b.n	8010538 <memmove+0x24>

08010548 <_sbrk_r>:
 8010548:	b538      	push	{r3, r4, r5, lr}
 801054a:	4d06      	ldr	r5, [pc, #24]	@ (8010564 <_sbrk_r+0x1c>)
 801054c:	2300      	movs	r3, #0
 801054e:	4604      	mov	r4, r0
 8010550:	4608      	mov	r0, r1
 8010552:	602b      	str	r3, [r5, #0]
 8010554:	f7f1 fcce 	bl	8001ef4 <_sbrk>
 8010558:	1c43      	adds	r3, r0, #1
 801055a:	d102      	bne.n	8010562 <_sbrk_r+0x1a>
 801055c:	682b      	ldr	r3, [r5, #0]
 801055e:	b103      	cbz	r3, 8010562 <_sbrk_r+0x1a>
 8010560:	6023      	str	r3, [r4, #0]
 8010562:	bd38      	pop	{r3, r4, r5, pc}
 8010564:	2400563c 	.word	0x2400563c

08010568 <abort>:
 8010568:	b508      	push	{r3, lr}
 801056a:	2006      	movs	r0, #6
 801056c:	f000 fa2e 	bl	80109cc <raise>
 8010570:	2001      	movs	r0, #1
 8010572:	f7f1 fc47 	bl	8001e04 <_exit>

08010576 <_realloc_r>:
 8010576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801057a:	4680      	mov	r8, r0
 801057c:	4615      	mov	r5, r2
 801057e:	460c      	mov	r4, r1
 8010580:	b921      	cbnz	r1, 801058c <_realloc_r+0x16>
 8010582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010586:	4611      	mov	r1, r2
 8010588:	f7ff bb94 	b.w	800fcb4 <_malloc_r>
 801058c:	b92a      	cbnz	r2, 801059a <_realloc_r+0x24>
 801058e:	f7ff fb1d 	bl	800fbcc <_free_r>
 8010592:	2400      	movs	r4, #0
 8010594:	4620      	mov	r0, r4
 8010596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801059a:	f000 fa33 	bl	8010a04 <_malloc_usable_size_r>
 801059e:	4285      	cmp	r5, r0
 80105a0:	4606      	mov	r6, r0
 80105a2:	d802      	bhi.n	80105aa <_realloc_r+0x34>
 80105a4:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80105a8:	d8f4      	bhi.n	8010594 <_realloc_r+0x1e>
 80105aa:	4629      	mov	r1, r5
 80105ac:	4640      	mov	r0, r8
 80105ae:	f7ff fb81 	bl	800fcb4 <_malloc_r>
 80105b2:	4607      	mov	r7, r0
 80105b4:	2800      	cmp	r0, #0
 80105b6:	d0ec      	beq.n	8010592 <_realloc_r+0x1c>
 80105b8:	42b5      	cmp	r5, r6
 80105ba:	462a      	mov	r2, r5
 80105bc:	4621      	mov	r1, r4
 80105be:	bf28      	it	cs
 80105c0:	4632      	movcs	r2, r6
 80105c2:	f7ff fad6 	bl	800fb72 <memcpy>
 80105c6:	4621      	mov	r1, r4
 80105c8:	4640      	mov	r0, r8
 80105ca:	f7ff faff 	bl	800fbcc <_free_r>
 80105ce:	463c      	mov	r4, r7
 80105d0:	e7e0      	b.n	8010594 <_realloc_r+0x1e>

080105d2 <__sfputc_r>:
 80105d2:	6893      	ldr	r3, [r2, #8]
 80105d4:	3b01      	subs	r3, #1
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	b410      	push	{r4}
 80105da:	6093      	str	r3, [r2, #8]
 80105dc:	da08      	bge.n	80105f0 <__sfputc_r+0x1e>
 80105de:	6994      	ldr	r4, [r2, #24]
 80105e0:	42a3      	cmp	r3, r4
 80105e2:	db01      	blt.n	80105e8 <__sfputc_r+0x16>
 80105e4:	290a      	cmp	r1, #10
 80105e6:	d103      	bne.n	80105f0 <__sfputc_r+0x1e>
 80105e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105ec:	f000 b932 	b.w	8010854 <__swbuf_r>
 80105f0:	6813      	ldr	r3, [r2, #0]
 80105f2:	1c58      	adds	r0, r3, #1
 80105f4:	6010      	str	r0, [r2, #0]
 80105f6:	7019      	strb	r1, [r3, #0]
 80105f8:	4608      	mov	r0, r1
 80105fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <__sfputs_r>:
 8010600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010602:	4606      	mov	r6, r0
 8010604:	460f      	mov	r7, r1
 8010606:	4614      	mov	r4, r2
 8010608:	18d5      	adds	r5, r2, r3
 801060a:	42ac      	cmp	r4, r5
 801060c:	d101      	bne.n	8010612 <__sfputs_r+0x12>
 801060e:	2000      	movs	r0, #0
 8010610:	e007      	b.n	8010622 <__sfputs_r+0x22>
 8010612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010616:	463a      	mov	r2, r7
 8010618:	4630      	mov	r0, r6
 801061a:	f7ff ffda 	bl	80105d2 <__sfputc_r>
 801061e:	1c43      	adds	r3, r0, #1
 8010620:	d1f3      	bne.n	801060a <__sfputs_r+0xa>
 8010622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010624 <_vfiprintf_r>:
 8010624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010628:	460d      	mov	r5, r1
 801062a:	b09d      	sub	sp, #116	@ 0x74
 801062c:	4614      	mov	r4, r2
 801062e:	4698      	mov	r8, r3
 8010630:	4606      	mov	r6, r0
 8010632:	b118      	cbz	r0, 801063c <_vfiprintf_r+0x18>
 8010634:	6a03      	ldr	r3, [r0, #32]
 8010636:	b90b      	cbnz	r3, 801063c <_vfiprintf_r+0x18>
 8010638:	f7ff f89e 	bl	800f778 <__sinit>
 801063c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801063e:	07d9      	lsls	r1, r3, #31
 8010640:	d405      	bmi.n	801064e <_vfiprintf_r+0x2a>
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	059a      	lsls	r2, r3, #22
 8010646:	d402      	bmi.n	801064e <_vfiprintf_r+0x2a>
 8010648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801064a:	f7ff fa90 	bl	800fb6e <__retarget_lock_acquire_recursive>
 801064e:	89ab      	ldrh	r3, [r5, #12]
 8010650:	071b      	lsls	r3, r3, #28
 8010652:	d501      	bpl.n	8010658 <_vfiprintf_r+0x34>
 8010654:	692b      	ldr	r3, [r5, #16]
 8010656:	b99b      	cbnz	r3, 8010680 <_vfiprintf_r+0x5c>
 8010658:	4629      	mov	r1, r5
 801065a:	4630      	mov	r0, r6
 801065c:	f000 f938 	bl	80108d0 <__swsetup_r>
 8010660:	b170      	cbz	r0, 8010680 <_vfiprintf_r+0x5c>
 8010662:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010664:	07dc      	lsls	r4, r3, #31
 8010666:	d504      	bpl.n	8010672 <_vfiprintf_r+0x4e>
 8010668:	f04f 30ff 	mov.w	r0, #4294967295
 801066c:	b01d      	add	sp, #116	@ 0x74
 801066e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010672:	89ab      	ldrh	r3, [r5, #12]
 8010674:	0598      	lsls	r0, r3, #22
 8010676:	d4f7      	bmi.n	8010668 <_vfiprintf_r+0x44>
 8010678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801067a:	f7ff fa79 	bl	800fb70 <__retarget_lock_release_recursive>
 801067e:	e7f3      	b.n	8010668 <_vfiprintf_r+0x44>
 8010680:	2300      	movs	r3, #0
 8010682:	9309      	str	r3, [sp, #36]	@ 0x24
 8010684:	2320      	movs	r3, #32
 8010686:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801068a:	f8cd 800c 	str.w	r8, [sp, #12]
 801068e:	2330      	movs	r3, #48	@ 0x30
 8010690:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8010840 <_vfiprintf_r+0x21c>
 8010694:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010698:	f04f 0901 	mov.w	r9, #1
 801069c:	4623      	mov	r3, r4
 801069e:	469a      	mov	sl, r3
 80106a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80106a4:	b10a      	cbz	r2, 80106aa <_vfiprintf_r+0x86>
 80106a6:	2a25      	cmp	r2, #37	@ 0x25
 80106a8:	d1f9      	bne.n	801069e <_vfiprintf_r+0x7a>
 80106aa:	ebba 0b04 	subs.w	fp, sl, r4
 80106ae:	d00b      	beq.n	80106c8 <_vfiprintf_r+0xa4>
 80106b0:	465b      	mov	r3, fp
 80106b2:	4622      	mov	r2, r4
 80106b4:	4629      	mov	r1, r5
 80106b6:	4630      	mov	r0, r6
 80106b8:	f7ff ffa2 	bl	8010600 <__sfputs_r>
 80106bc:	3001      	adds	r0, #1
 80106be:	f000 80a7 	beq.w	8010810 <_vfiprintf_r+0x1ec>
 80106c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80106c4:	445a      	add	r2, fp
 80106c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80106c8:	f89a 3000 	ldrb.w	r3, [sl]
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	f000 809f 	beq.w	8010810 <_vfiprintf_r+0x1ec>
 80106d2:	2300      	movs	r3, #0
 80106d4:	f04f 32ff 	mov.w	r2, #4294967295
 80106d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106dc:	f10a 0a01 	add.w	sl, sl, #1
 80106e0:	9304      	str	r3, [sp, #16]
 80106e2:	9307      	str	r3, [sp, #28]
 80106e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80106e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80106ea:	4654      	mov	r4, sl
 80106ec:	2205      	movs	r2, #5
 80106ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106f2:	4853      	ldr	r0, [pc, #332]	@ (8010840 <_vfiprintf_r+0x21c>)
 80106f4:	f7ef fdfc 	bl	80002f0 <memchr>
 80106f8:	9a04      	ldr	r2, [sp, #16]
 80106fa:	b9d8      	cbnz	r0, 8010734 <_vfiprintf_r+0x110>
 80106fc:	06d1      	lsls	r1, r2, #27
 80106fe:	bf44      	itt	mi
 8010700:	2320      	movmi	r3, #32
 8010702:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010706:	0713      	lsls	r3, r2, #28
 8010708:	bf44      	itt	mi
 801070a:	232b      	movmi	r3, #43	@ 0x2b
 801070c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010710:	f89a 3000 	ldrb.w	r3, [sl]
 8010714:	2b2a      	cmp	r3, #42	@ 0x2a
 8010716:	d015      	beq.n	8010744 <_vfiprintf_r+0x120>
 8010718:	9a07      	ldr	r2, [sp, #28]
 801071a:	4654      	mov	r4, sl
 801071c:	2000      	movs	r0, #0
 801071e:	f04f 0c0a 	mov.w	ip, #10
 8010722:	4621      	mov	r1, r4
 8010724:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010728:	3b30      	subs	r3, #48	@ 0x30
 801072a:	2b09      	cmp	r3, #9
 801072c:	d94b      	bls.n	80107c6 <_vfiprintf_r+0x1a2>
 801072e:	b1b0      	cbz	r0, 801075e <_vfiprintf_r+0x13a>
 8010730:	9207      	str	r2, [sp, #28]
 8010732:	e014      	b.n	801075e <_vfiprintf_r+0x13a>
 8010734:	eba0 0308 	sub.w	r3, r0, r8
 8010738:	fa09 f303 	lsl.w	r3, r9, r3
 801073c:	4313      	orrs	r3, r2
 801073e:	9304      	str	r3, [sp, #16]
 8010740:	46a2      	mov	sl, r4
 8010742:	e7d2      	b.n	80106ea <_vfiprintf_r+0xc6>
 8010744:	9b03      	ldr	r3, [sp, #12]
 8010746:	1d19      	adds	r1, r3, #4
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	9103      	str	r1, [sp, #12]
 801074c:	2b00      	cmp	r3, #0
 801074e:	bfbb      	ittet	lt
 8010750:	425b      	neglt	r3, r3
 8010752:	f042 0202 	orrlt.w	r2, r2, #2
 8010756:	9307      	strge	r3, [sp, #28]
 8010758:	9307      	strlt	r3, [sp, #28]
 801075a:	bfb8      	it	lt
 801075c:	9204      	strlt	r2, [sp, #16]
 801075e:	7823      	ldrb	r3, [r4, #0]
 8010760:	2b2e      	cmp	r3, #46	@ 0x2e
 8010762:	d10a      	bne.n	801077a <_vfiprintf_r+0x156>
 8010764:	7863      	ldrb	r3, [r4, #1]
 8010766:	2b2a      	cmp	r3, #42	@ 0x2a
 8010768:	d132      	bne.n	80107d0 <_vfiprintf_r+0x1ac>
 801076a:	9b03      	ldr	r3, [sp, #12]
 801076c:	1d1a      	adds	r2, r3, #4
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	9203      	str	r2, [sp, #12]
 8010772:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010776:	3402      	adds	r4, #2
 8010778:	9305      	str	r3, [sp, #20]
 801077a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8010850 <_vfiprintf_r+0x22c>
 801077e:	7821      	ldrb	r1, [r4, #0]
 8010780:	2203      	movs	r2, #3
 8010782:	4650      	mov	r0, sl
 8010784:	f7ef fdb4 	bl	80002f0 <memchr>
 8010788:	b138      	cbz	r0, 801079a <_vfiprintf_r+0x176>
 801078a:	9b04      	ldr	r3, [sp, #16]
 801078c:	eba0 000a 	sub.w	r0, r0, sl
 8010790:	2240      	movs	r2, #64	@ 0x40
 8010792:	4082      	lsls	r2, r0
 8010794:	4313      	orrs	r3, r2
 8010796:	3401      	adds	r4, #1
 8010798:	9304      	str	r3, [sp, #16]
 801079a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801079e:	4829      	ldr	r0, [pc, #164]	@ (8010844 <_vfiprintf_r+0x220>)
 80107a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80107a4:	2206      	movs	r2, #6
 80107a6:	f7ef fda3 	bl	80002f0 <memchr>
 80107aa:	2800      	cmp	r0, #0
 80107ac:	d03f      	beq.n	801082e <_vfiprintf_r+0x20a>
 80107ae:	4b26      	ldr	r3, [pc, #152]	@ (8010848 <_vfiprintf_r+0x224>)
 80107b0:	bb1b      	cbnz	r3, 80107fa <_vfiprintf_r+0x1d6>
 80107b2:	9b03      	ldr	r3, [sp, #12]
 80107b4:	3307      	adds	r3, #7
 80107b6:	f023 0307 	bic.w	r3, r3, #7
 80107ba:	3308      	adds	r3, #8
 80107bc:	9303      	str	r3, [sp, #12]
 80107be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80107c0:	443b      	add	r3, r7
 80107c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80107c4:	e76a      	b.n	801069c <_vfiprintf_r+0x78>
 80107c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80107ca:	460c      	mov	r4, r1
 80107cc:	2001      	movs	r0, #1
 80107ce:	e7a8      	b.n	8010722 <_vfiprintf_r+0xfe>
 80107d0:	2300      	movs	r3, #0
 80107d2:	3401      	adds	r4, #1
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	4619      	mov	r1, r3
 80107d8:	f04f 0c0a 	mov.w	ip, #10
 80107dc:	4620      	mov	r0, r4
 80107de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107e2:	3a30      	subs	r2, #48	@ 0x30
 80107e4:	2a09      	cmp	r2, #9
 80107e6:	d903      	bls.n	80107f0 <_vfiprintf_r+0x1cc>
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d0c6      	beq.n	801077a <_vfiprintf_r+0x156>
 80107ec:	9105      	str	r1, [sp, #20]
 80107ee:	e7c4      	b.n	801077a <_vfiprintf_r+0x156>
 80107f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80107f4:	4604      	mov	r4, r0
 80107f6:	2301      	movs	r3, #1
 80107f8:	e7f0      	b.n	80107dc <_vfiprintf_r+0x1b8>
 80107fa:	ab03      	add	r3, sp, #12
 80107fc:	9300      	str	r3, [sp, #0]
 80107fe:	462a      	mov	r2, r5
 8010800:	4b12      	ldr	r3, [pc, #72]	@ (801084c <_vfiprintf_r+0x228>)
 8010802:	a904      	add	r1, sp, #16
 8010804:	4630      	mov	r0, r6
 8010806:	f3af 8000 	nop.w
 801080a:	4607      	mov	r7, r0
 801080c:	1c78      	adds	r0, r7, #1
 801080e:	d1d6      	bne.n	80107be <_vfiprintf_r+0x19a>
 8010810:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010812:	07d9      	lsls	r1, r3, #31
 8010814:	d405      	bmi.n	8010822 <_vfiprintf_r+0x1fe>
 8010816:	89ab      	ldrh	r3, [r5, #12]
 8010818:	059a      	lsls	r2, r3, #22
 801081a:	d402      	bmi.n	8010822 <_vfiprintf_r+0x1fe>
 801081c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801081e:	f7ff f9a7 	bl	800fb70 <__retarget_lock_release_recursive>
 8010822:	89ab      	ldrh	r3, [r5, #12]
 8010824:	065b      	lsls	r3, r3, #25
 8010826:	f53f af1f 	bmi.w	8010668 <_vfiprintf_r+0x44>
 801082a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801082c:	e71e      	b.n	801066c <_vfiprintf_r+0x48>
 801082e:	ab03      	add	r3, sp, #12
 8010830:	9300      	str	r3, [sp, #0]
 8010832:	462a      	mov	r2, r5
 8010834:	4b05      	ldr	r3, [pc, #20]	@ (801084c <_vfiprintf_r+0x228>)
 8010836:	a904      	add	r1, sp, #16
 8010838:	4630      	mov	r0, r6
 801083a:	f7ff fc8d 	bl	8010158 <_printf_i>
 801083e:	e7e4      	b.n	801080a <_vfiprintf_r+0x1e6>
 8010840:	08010e35 	.word	0x08010e35
 8010844:	08010e3f 	.word	0x08010e3f
 8010848:	00000000 	.word	0x00000000
 801084c:	08010601 	.word	0x08010601
 8010850:	08010e3b 	.word	0x08010e3b

08010854 <__swbuf_r>:
 8010854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010856:	460e      	mov	r6, r1
 8010858:	4614      	mov	r4, r2
 801085a:	4605      	mov	r5, r0
 801085c:	b118      	cbz	r0, 8010866 <__swbuf_r+0x12>
 801085e:	6a03      	ldr	r3, [r0, #32]
 8010860:	b90b      	cbnz	r3, 8010866 <__swbuf_r+0x12>
 8010862:	f7fe ff89 	bl	800f778 <__sinit>
 8010866:	69a3      	ldr	r3, [r4, #24]
 8010868:	60a3      	str	r3, [r4, #8]
 801086a:	89a3      	ldrh	r3, [r4, #12]
 801086c:	071a      	lsls	r2, r3, #28
 801086e:	d501      	bpl.n	8010874 <__swbuf_r+0x20>
 8010870:	6923      	ldr	r3, [r4, #16]
 8010872:	b943      	cbnz	r3, 8010886 <__swbuf_r+0x32>
 8010874:	4621      	mov	r1, r4
 8010876:	4628      	mov	r0, r5
 8010878:	f000 f82a 	bl	80108d0 <__swsetup_r>
 801087c:	b118      	cbz	r0, 8010886 <__swbuf_r+0x32>
 801087e:	f04f 37ff 	mov.w	r7, #4294967295
 8010882:	4638      	mov	r0, r7
 8010884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010886:	6823      	ldr	r3, [r4, #0]
 8010888:	6922      	ldr	r2, [r4, #16]
 801088a:	1a98      	subs	r0, r3, r2
 801088c:	6963      	ldr	r3, [r4, #20]
 801088e:	b2f6      	uxtb	r6, r6
 8010890:	4283      	cmp	r3, r0
 8010892:	4637      	mov	r7, r6
 8010894:	dc05      	bgt.n	80108a2 <__swbuf_r+0x4e>
 8010896:	4621      	mov	r1, r4
 8010898:	4628      	mov	r0, r5
 801089a:	f7ff fe01 	bl	80104a0 <_fflush_r>
 801089e:	2800      	cmp	r0, #0
 80108a0:	d1ed      	bne.n	801087e <__swbuf_r+0x2a>
 80108a2:	68a3      	ldr	r3, [r4, #8]
 80108a4:	3b01      	subs	r3, #1
 80108a6:	60a3      	str	r3, [r4, #8]
 80108a8:	6823      	ldr	r3, [r4, #0]
 80108aa:	1c5a      	adds	r2, r3, #1
 80108ac:	6022      	str	r2, [r4, #0]
 80108ae:	701e      	strb	r6, [r3, #0]
 80108b0:	6962      	ldr	r2, [r4, #20]
 80108b2:	1c43      	adds	r3, r0, #1
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d004      	beq.n	80108c2 <__swbuf_r+0x6e>
 80108b8:	89a3      	ldrh	r3, [r4, #12]
 80108ba:	07db      	lsls	r3, r3, #31
 80108bc:	d5e1      	bpl.n	8010882 <__swbuf_r+0x2e>
 80108be:	2e0a      	cmp	r6, #10
 80108c0:	d1df      	bne.n	8010882 <__swbuf_r+0x2e>
 80108c2:	4621      	mov	r1, r4
 80108c4:	4628      	mov	r0, r5
 80108c6:	f7ff fdeb 	bl	80104a0 <_fflush_r>
 80108ca:	2800      	cmp	r0, #0
 80108cc:	d0d9      	beq.n	8010882 <__swbuf_r+0x2e>
 80108ce:	e7d6      	b.n	801087e <__swbuf_r+0x2a>

080108d0 <__swsetup_r>:
 80108d0:	b538      	push	{r3, r4, r5, lr}
 80108d2:	4b29      	ldr	r3, [pc, #164]	@ (8010978 <__swsetup_r+0xa8>)
 80108d4:	4605      	mov	r5, r0
 80108d6:	6818      	ldr	r0, [r3, #0]
 80108d8:	460c      	mov	r4, r1
 80108da:	b118      	cbz	r0, 80108e4 <__swsetup_r+0x14>
 80108dc:	6a03      	ldr	r3, [r0, #32]
 80108de:	b90b      	cbnz	r3, 80108e4 <__swsetup_r+0x14>
 80108e0:	f7fe ff4a 	bl	800f778 <__sinit>
 80108e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80108e8:	0719      	lsls	r1, r3, #28
 80108ea:	d422      	bmi.n	8010932 <__swsetup_r+0x62>
 80108ec:	06da      	lsls	r2, r3, #27
 80108ee:	d407      	bmi.n	8010900 <__swsetup_r+0x30>
 80108f0:	2209      	movs	r2, #9
 80108f2:	602a      	str	r2, [r5, #0]
 80108f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80108f8:	81a3      	strh	r3, [r4, #12]
 80108fa:	f04f 30ff 	mov.w	r0, #4294967295
 80108fe:	e033      	b.n	8010968 <__swsetup_r+0x98>
 8010900:	0758      	lsls	r0, r3, #29
 8010902:	d512      	bpl.n	801092a <__swsetup_r+0x5a>
 8010904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010906:	b141      	cbz	r1, 801091a <__swsetup_r+0x4a>
 8010908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801090c:	4299      	cmp	r1, r3
 801090e:	d002      	beq.n	8010916 <__swsetup_r+0x46>
 8010910:	4628      	mov	r0, r5
 8010912:	f7ff f95b 	bl	800fbcc <_free_r>
 8010916:	2300      	movs	r3, #0
 8010918:	6363      	str	r3, [r4, #52]	@ 0x34
 801091a:	89a3      	ldrh	r3, [r4, #12]
 801091c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8010920:	81a3      	strh	r3, [r4, #12]
 8010922:	2300      	movs	r3, #0
 8010924:	6063      	str	r3, [r4, #4]
 8010926:	6923      	ldr	r3, [r4, #16]
 8010928:	6023      	str	r3, [r4, #0]
 801092a:	89a3      	ldrh	r3, [r4, #12]
 801092c:	f043 0308 	orr.w	r3, r3, #8
 8010930:	81a3      	strh	r3, [r4, #12]
 8010932:	6923      	ldr	r3, [r4, #16]
 8010934:	b94b      	cbnz	r3, 801094a <__swsetup_r+0x7a>
 8010936:	89a3      	ldrh	r3, [r4, #12]
 8010938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801093c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010940:	d003      	beq.n	801094a <__swsetup_r+0x7a>
 8010942:	4621      	mov	r1, r4
 8010944:	4628      	mov	r0, r5
 8010946:	f000 f88b 	bl	8010a60 <__smakebuf_r>
 801094a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801094e:	f013 0201 	ands.w	r2, r3, #1
 8010952:	d00a      	beq.n	801096a <__swsetup_r+0x9a>
 8010954:	2200      	movs	r2, #0
 8010956:	60a2      	str	r2, [r4, #8]
 8010958:	6962      	ldr	r2, [r4, #20]
 801095a:	4252      	negs	r2, r2
 801095c:	61a2      	str	r2, [r4, #24]
 801095e:	6922      	ldr	r2, [r4, #16]
 8010960:	b942      	cbnz	r2, 8010974 <__swsetup_r+0xa4>
 8010962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8010966:	d1c5      	bne.n	80108f4 <__swsetup_r+0x24>
 8010968:	bd38      	pop	{r3, r4, r5, pc}
 801096a:	0799      	lsls	r1, r3, #30
 801096c:	bf58      	it	pl
 801096e:	6962      	ldrpl	r2, [r4, #20]
 8010970:	60a2      	str	r2, [r4, #8]
 8010972:	e7f4      	b.n	801095e <__swsetup_r+0x8e>
 8010974:	2000      	movs	r0, #0
 8010976:	e7f7      	b.n	8010968 <__swsetup_r+0x98>
 8010978:	24000160 	.word	0x24000160

0801097c <_raise_r>:
 801097c:	291f      	cmp	r1, #31
 801097e:	b538      	push	{r3, r4, r5, lr}
 8010980:	4605      	mov	r5, r0
 8010982:	460c      	mov	r4, r1
 8010984:	d904      	bls.n	8010990 <_raise_r+0x14>
 8010986:	2316      	movs	r3, #22
 8010988:	6003      	str	r3, [r0, #0]
 801098a:	f04f 30ff 	mov.w	r0, #4294967295
 801098e:	bd38      	pop	{r3, r4, r5, pc}
 8010990:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010992:	b112      	cbz	r2, 801099a <_raise_r+0x1e>
 8010994:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010998:	b94b      	cbnz	r3, 80109ae <_raise_r+0x32>
 801099a:	4628      	mov	r0, r5
 801099c:	f000 f830 	bl	8010a00 <_getpid_r>
 80109a0:	4622      	mov	r2, r4
 80109a2:	4601      	mov	r1, r0
 80109a4:	4628      	mov	r0, r5
 80109a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80109aa:	f000 b817 	b.w	80109dc <_kill_r>
 80109ae:	2b01      	cmp	r3, #1
 80109b0:	d00a      	beq.n	80109c8 <_raise_r+0x4c>
 80109b2:	1c59      	adds	r1, r3, #1
 80109b4:	d103      	bne.n	80109be <_raise_r+0x42>
 80109b6:	2316      	movs	r3, #22
 80109b8:	6003      	str	r3, [r0, #0]
 80109ba:	2001      	movs	r0, #1
 80109bc:	e7e7      	b.n	801098e <_raise_r+0x12>
 80109be:	2100      	movs	r1, #0
 80109c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80109c4:	4620      	mov	r0, r4
 80109c6:	4798      	blx	r3
 80109c8:	2000      	movs	r0, #0
 80109ca:	e7e0      	b.n	801098e <_raise_r+0x12>

080109cc <raise>:
 80109cc:	4b02      	ldr	r3, [pc, #8]	@ (80109d8 <raise+0xc>)
 80109ce:	4601      	mov	r1, r0
 80109d0:	6818      	ldr	r0, [r3, #0]
 80109d2:	f7ff bfd3 	b.w	801097c <_raise_r>
 80109d6:	bf00      	nop
 80109d8:	24000160 	.word	0x24000160

080109dc <_kill_r>:
 80109dc:	b538      	push	{r3, r4, r5, lr}
 80109de:	4d07      	ldr	r5, [pc, #28]	@ (80109fc <_kill_r+0x20>)
 80109e0:	2300      	movs	r3, #0
 80109e2:	4604      	mov	r4, r0
 80109e4:	4608      	mov	r0, r1
 80109e6:	4611      	mov	r1, r2
 80109e8:	602b      	str	r3, [r5, #0]
 80109ea:	f7f1 f9fb 	bl	8001de4 <_kill>
 80109ee:	1c43      	adds	r3, r0, #1
 80109f0:	d102      	bne.n	80109f8 <_kill_r+0x1c>
 80109f2:	682b      	ldr	r3, [r5, #0]
 80109f4:	b103      	cbz	r3, 80109f8 <_kill_r+0x1c>
 80109f6:	6023      	str	r3, [r4, #0]
 80109f8:	bd38      	pop	{r3, r4, r5, pc}
 80109fa:	bf00      	nop
 80109fc:	2400563c 	.word	0x2400563c

08010a00 <_getpid_r>:
 8010a00:	f7f1 b9e8 	b.w	8001dd4 <_getpid>

08010a04 <_malloc_usable_size_r>:
 8010a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a08:	1f18      	subs	r0, r3, #4
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	bfbc      	itt	lt
 8010a0e:	580b      	ldrlt	r3, [r1, r0]
 8010a10:	18c0      	addlt	r0, r0, r3
 8010a12:	4770      	bx	lr

08010a14 <__swhatbuf_r>:
 8010a14:	b570      	push	{r4, r5, r6, lr}
 8010a16:	460c      	mov	r4, r1
 8010a18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010a1c:	2900      	cmp	r1, #0
 8010a1e:	b096      	sub	sp, #88	@ 0x58
 8010a20:	4615      	mov	r5, r2
 8010a22:	461e      	mov	r6, r3
 8010a24:	da0d      	bge.n	8010a42 <__swhatbuf_r+0x2e>
 8010a26:	89a3      	ldrh	r3, [r4, #12]
 8010a28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010a2c:	f04f 0100 	mov.w	r1, #0
 8010a30:	bf14      	ite	ne
 8010a32:	2340      	movne	r3, #64	@ 0x40
 8010a34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010a38:	2000      	movs	r0, #0
 8010a3a:	6031      	str	r1, [r6, #0]
 8010a3c:	602b      	str	r3, [r5, #0]
 8010a3e:	b016      	add	sp, #88	@ 0x58
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	466a      	mov	r2, sp
 8010a44:	f000 f848 	bl	8010ad8 <_fstat_r>
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	dbec      	blt.n	8010a26 <__swhatbuf_r+0x12>
 8010a4c:	9901      	ldr	r1, [sp, #4]
 8010a4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010a52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010a56:	4259      	negs	r1, r3
 8010a58:	4159      	adcs	r1, r3
 8010a5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010a5e:	e7eb      	b.n	8010a38 <__swhatbuf_r+0x24>

08010a60 <__smakebuf_r>:
 8010a60:	898b      	ldrh	r3, [r1, #12]
 8010a62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010a64:	079d      	lsls	r5, r3, #30
 8010a66:	4606      	mov	r6, r0
 8010a68:	460c      	mov	r4, r1
 8010a6a:	d507      	bpl.n	8010a7c <__smakebuf_r+0x1c>
 8010a6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010a70:	6023      	str	r3, [r4, #0]
 8010a72:	6123      	str	r3, [r4, #16]
 8010a74:	2301      	movs	r3, #1
 8010a76:	6163      	str	r3, [r4, #20]
 8010a78:	b003      	add	sp, #12
 8010a7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a7c:	ab01      	add	r3, sp, #4
 8010a7e:	466a      	mov	r2, sp
 8010a80:	f7ff ffc8 	bl	8010a14 <__swhatbuf_r>
 8010a84:	9f00      	ldr	r7, [sp, #0]
 8010a86:	4605      	mov	r5, r0
 8010a88:	4639      	mov	r1, r7
 8010a8a:	4630      	mov	r0, r6
 8010a8c:	f7ff f912 	bl	800fcb4 <_malloc_r>
 8010a90:	b948      	cbnz	r0, 8010aa6 <__smakebuf_r+0x46>
 8010a92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a96:	059a      	lsls	r2, r3, #22
 8010a98:	d4ee      	bmi.n	8010a78 <__smakebuf_r+0x18>
 8010a9a:	f023 0303 	bic.w	r3, r3, #3
 8010a9e:	f043 0302 	orr.w	r3, r3, #2
 8010aa2:	81a3      	strh	r3, [r4, #12]
 8010aa4:	e7e2      	b.n	8010a6c <__smakebuf_r+0xc>
 8010aa6:	89a3      	ldrh	r3, [r4, #12]
 8010aa8:	6020      	str	r0, [r4, #0]
 8010aaa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010aae:	81a3      	strh	r3, [r4, #12]
 8010ab0:	9b01      	ldr	r3, [sp, #4]
 8010ab2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8010ab6:	b15b      	cbz	r3, 8010ad0 <__smakebuf_r+0x70>
 8010ab8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010abc:	4630      	mov	r0, r6
 8010abe:	f000 f81d 	bl	8010afc <_isatty_r>
 8010ac2:	b128      	cbz	r0, 8010ad0 <__smakebuf_r+0x70>
 8010ac4:	89a3      	ldrh	r3, [r4, #12]
 8010ac6:	f023 0303 	bic.w	r3, r3, #3
 8010aca:	f043 0301 	orr.w	r3, r3, #1
 8010ace:	81a3      	strh	r3, [r4, #12]
 8010ad0:	89a3      	ldrh	r3, [r4, #12]
 8010ad2:	431d      	orrs	r5, r3
 8010ad4:	81a5      	strh	r5, [r4, #12]
 8010ad6:	e7cf      	b.n	8010a78 <__smakebuf_r+0x18>

08010ad8 <_fstat_r>:
 8010ad8:	b538      	push	{r3, r4, r5, lr}
 8010ada:	4d07      	ldr	r5, [pc, #28]	@ (8010af8 <_fstat_r+0x20>)
 8010adc:	2300      	movs	r3, #0
 8010ade:	4604      	mov	r4, r0
 8010ae0:	4608      	mov	r0, r1
 8010ae2:	4611      	mov	r1, r2
 8010ae4:	602b      	str	r3, [r5, #0]
 8010ae6:	f7f1 f9dd 	bl	8001ea4 <_fstat>
 8010aea:	1c43      	adds	r3, r0, #1
 8010aec:	d102      	bne.n	8010af4 <_fstat_r+0x1c>
 8010aee:	682b      	ldr	r3, [r5, #0]
 8010af0:	b103      	cbz	r3, 8010af4 <_fstat_r+0x1c>
 8010af2:	6023      	str	r3, [r4, #0]
 8010af4:	bd38      	pop	{r3, r4, r5, pc}
 8010af6:	bf00      	nop
 8010af8:	2400563c 	.word	0x2400563c

08010afc <_isatty_r>:
 8010afc:	b538      	push	{r3, r4, r5, lr}
 8010afe:	4d06      	ldr	r5, [pc, #24]	@ (8010b18 <_isatty_r+0x1c>)
 8010b00:	2300      	movs	r3, #0
 8010b02:	4604      	mov	r4, r0
 8010b04:	4608      	mov	r0, r1
 8010b06:	602b      	str	r3, [r5, #0]
 8010b08:	f7f1 f9dc 	bl	8001ec4 <_isatty>
 8010b0c:	1c43      	adds	r3, r0, #1
 8010b0e:	d102      	bne.n	8010b16 <_isatty_r+0x1a>
 8010b10:	682b      	ldr	r3, [r5, #0]
 8010b12:	b103      	cbz	r3, 8010b16 <_isatty_r+0x1a>
 8010b14:	6023      	str	r3, [r4, #0]
 8010b16:	bd38      	pop	{r3, r4, r5, pc}
 8010b18:	2400563c 	.word	0x2400563c

08010b1c <_init>:
 8010b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b1e:	bf00      	nop
 8010b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b22:	bc08      	pop	{r3}
 8010b24:	469e      	mov	lr, r3
 8010b26:	4770      	bx	lr

08010b28 <_fini>:
 8010b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2a:	bf00      	nop
 8010b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b2e:	bc08      	pop	{r3}
 8010b30:	469e      	mov	lr, r3
 8010b32:	4770      	bx	lr
