
trap_callback_Final_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006028  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  080062c0  080062c0  000072c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062f4  080062f4  00008034  2**0
                  CONTENTS
  4 .ARM          00000008  080062f4  080062f4  000072f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080062fc  080062fc  00008034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062fc  080062fc  000072fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000034  24000000  08006304  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  24000034  08006338  00008034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400019c  08006338  0000819c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161a4  00000000  00000000  00008062  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002700  00000000  00000000  0001e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  00020908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d50  00000000  00000000  00021a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a998  00000000  00000000  00022760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001623a  00000000  00000000  0005d0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018723d  00000000  00000000  00073332  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fa56f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000484c  00000000  00000000  001fa5b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001fee00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000034 	.word	0x24000034
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080062a8 	.word	0x080062a8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000038 	.word	0x24000038
 80002d4:	080062a8 	.word	0x080062a8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80006fa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80006fe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000700:	bf00      	nop
 8000702:	4b49      	ldr	r3, [pc, #292]	@ (8000828 <main+0x134>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <main+0x24>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	1e5a      	subs	r2, r3, #1
 8000712:	607a      	str	r2, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	dcf4      	bgt.n	8000702 <main+0xe>
  if ( timeout < 0 )
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	2b00      	cmp	r3, #0
 800071c:	da01      	bge.n	8000722 <main+0x2e>
  {
  Error_Handler();
 800071e:	f000 fc8b 	bl	8001038 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000722:	f000 ffa3 	bl	800166c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000726:	f000 f88b 	bl	8000840 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800072a:	4b3f      	ldr	r3, [pc, #252]	@ (8000828 <main+0x134>)
 800072c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000730:	4a3d      	ldr	r2, [pc, #244]	@ (8000828 <main+0x134>)
 8000732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000736:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800073a:	4b3b      	ldr	r3, [pc, #236]	@ (8000828 <main+0x134>)
 800073c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000740:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000748:	2000      	movs	r0, #0
 800074a:	f001 fb8b 	bl	8001e64 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800074e:	2100      	movs	r1, #0
 8000750:	2000      	movs	r0, #0
 8000752:	f001 fba1 	bl	8001e98 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000756:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800075a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800075c:	bf00      	nop
 800075e:	4b32      	ldr	r3, [pc, #200]	@ (8000828 <main+0x134>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000766:	2b00      	cmp	r3, #0
 8000768:	d104      	bne.n	8000774 <main+0x80>
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	1e5a      	subs	r2, r3, #1
 800076e:	607a      	str	r2, [r7, #4]
 8000770:	2b00      	cmp	r3, #0
 8000772:	dcf4      	bgt.n	800075e <main+0x6a>
if ( timeout < 0 )
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2b00      	cmp	r3, #0
 8000778:	da01      	bge.n	800077e <main+0x8a>
{
Error_Handler();
 800077a:	f000 fc5d 	bl	8001038 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800077e:	f000 fa0f 	bl	8000ba0 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000782:	f000 f8d9 	bl	8000938 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000786:	f000 f99b 	bl	8000ac0 <MX_TIM4_Init>
   * 4. Calls SetCommutationStep() to set the initial commutation step and PWM duty cycle.
   */

  // Start Timer 4 in interrupt mode. This timer triggers periodic interrupts
  // (via HAL_TIM_PeriodElapsedCallback) to update the motor commutation sequence.
  HAL_TIM_Base_Start_IT(&htim4);
 800078a:	4828      	ldr	r0, [pc, #160]	@ (800082c <main+0x138>)
 800078c:	f002 feee 	bl	800356c <HAL_TIM_Base_Start_IT>

  // Start PWM generation on Timer 1 for all three channels. These channels control the
  // main outputs for the BLDC motor phases.
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000790:	2100      	movs	r1, #0
 8000792:	4827      	ldr	r0, [pc, #156]	@ (8000830 <main+0x13c>)
 8000794:	f002 ffc4 	bl	8003720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000798:	2104      	movs	r1, #4
 800079a:	4825      	ldr	r0, [pc, #148]	@ (8000830 <main+0x13c>)
 800079c:	f002 ffc0 	bl	8003720 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007a0:	2108      	movs	r1, #8
 80007a2:	4823      	ldr	r0, [pc, #140]	@ (8000830 <main+0x13c>)
 80007a4:	f002 ffbc 	bl	8003720 <HAL_TIM_PWM_Start>

  // Start the complementary PWM outputs on Timer 1 for each channel. Complementary outputs
  // are essential for properly controlling both sides of the half-bridge in the motor driver.
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80007a8:	2100      	movs	r1, #0
 80007aa:	4821      	ldr	r0, [pc, #132]	@ (8000830 <main+0x13c>)
 80007ac:	f004 fafe 	bl	8004dac <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80007b0:	2104      	movs	r1, #4
 80007b2:	481f      	ldr	r0, [pc, #124]	@ (8000830 <main+0x13c>)
 80007b4:	f004 fafa 	bl	8004dac <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80007b8:	2108      	movs	r1, #8
 80007ba:	481d      	ldr	r0, [pc, #116]	@ (8000830 <main+0x13c>)
 80007bc:	f004 faf6 	bl	8004dac <HAL_TIMEx_PWMN_Start>

  // Initialize the motor control by setting the initial commutation step and PWM duty cycle.
  // This function configures the correct PWM signal routing based on the current commutation step.
  SetCommutationStep(step, _duty);
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <main+0x140>)
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	4a1c      	ldr	r2, [pc, #112]	@ (8000838 <main+0x144>)
 80007c8:	8812      	ldrh	r2, [r2, #0]
 80007ca:	b292      	uxth	r2, r2
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fb30 	bl	8000e34 <SetCommutationStep>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f000 fd81 	bl	80012dc <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80007da:	2001      	movs	r0, #1
 80007dc:	f000 fd7e 	bl	80012dc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80007e0:	2002      	movs	r0, #2
 80007e2:	f000 fd7b 	bl	80012dc <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80007e6:	2101      	movs	r1, #1
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 fded 	bl	80013c8 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	@ (800083c <main+0x148>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	@ (800083c <main+0x148>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	@ (800083c <main+0x148>)
 80007fe:	2200      	movs	r2, #0
 8000800:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <main+0x148>)
 8000804:	2200      	movs	r2, #0
 8000806:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000808:	4b0c      	ldr	r3, [pc, #48]	@ (800083c <main+0x148>)
 800080a:	2200      	movs	r2, #0
 800080c:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 800080e:	490b      	ldr	r1, [pc, #44]	@ (800083c <main+0x148>)
 8000810:	2000      	movs	r0, #0
 8000812:	f000 fe69 	bl	80014e8 <BSP_COM_Init>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <main+0x12e>
  {
    Error_Handler();
 800081c:	f000 fc0c 	bl	8001038 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	e7fd      	b.n	8000822 <main+0x12e>
 8000826:	bf00      	nop
 8000828:	58024400 	.word	0x58024400
 800082c:	240000ac 	.word	0x240000ac
 8000830:	24000060 	.word	0x24000060
 8000834:	240000f8 	.word	0x240000f8
 8000838:	24000008 	.word	0x24000008
 800083c:	24000050 	.word	0x24000050

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f005 fcfe 	bl	8006250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f005 fcf8 	bl	8006250 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000860:	2004      	movs	r0, #4
 8000862:	f001 fb2d 	bl	8001ec0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <SystemClock_Config+0xf0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	4a30      	ldr	r2, [pc, #192]	@ (8000930 <SystemClock_Config+0xf0>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <SystemClock_Config+0xf0>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <SystemClock_Config+0xf4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000888:	4a2a      	ldr	r2, [pc, #168]	@ (8000934 <SystemClock_Config+0xf4>)
 800088a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b28      	ldr	r3, [pc, #160]	@ (8000934 <SystemClock_Config+0xf4>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000898:	603b      	str	r3, [r7, #0]
 800089a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800089c:	bf00      	nop
 800089e:	4b25      	ldr	r3, [pc, #148]	@ (8000934 <SystemClock_Config+0xf4>)
 80008a0:	699b      	ldr	r3, [r3, #24]
 80008a2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008aa:	d1f8      	bne.n	800089e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008ac:	2301      	movs	r3, #1
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008b0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 80008c2:	2320      	movs	r3, #32
 80008c4:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008ca:	2305      	movs	r3, #5
 80008cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d2:	230c      	movs	r3, #12
 80008d4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d6:	2300      	movs	r3, #0
 80008d8:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fb46 	bl	8001f74 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008ee:	f000 fba3 	bl	8001038 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	233f      	movs	r3, #63	@ 0x3f
 80008f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2303      	movs	r3, #3
 80008f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008fe:	2300      	movs	r3, #0
 8000900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000902:	2340      	movs	r3, #64	@ 0x40
 8000904:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000906:	2340      	movs	r3, #64	@ 0x40
 8000908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV4;
 800090a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800090e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000910:	2340      	movs	r3, #64	@ 0x40
 8000912:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	2104      	movs	r1, #4
 8000918:	4618      	mov	r0, r3
 800091a:	f001 ff85 	bl	8002828 <HAL_RCC_ClockConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000924:	f000 fb88 	bl	8001038 <Error_Handler>
  }
}
 8000928:	bf00      	nop
 800092a:	3770      	adds	r7, #112	@ 0x70
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	58000400 	.word	0x58000400
 8000934:	58024800 	.word	0x58024800

08000938 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09a      	sub	sp, #104	@ 0x68
 800093c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800093e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000942:	2200      	movs	r2, #0
 8000944:	601a      	str	r2, [r3, #0]
 8000946:	605a      	str	r2, [r3, #4]
 8000948:	609a      	str	r2, [r3, #8]
 800094a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000958:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
 8000966:	611a      	str	r2, [r3, #16]
 8000968:	615a      	str	r2, [r3, #20]
 800096a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	222c      	movs	r2, #44	@ 0x2c
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f005 fc6c 	bl	8006250 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000978:	4b4f      	ldr	r3, [pc, #316]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 800097a:	4a50      	ldr	r2, [pc, #320]	@ (8000abc <MX_TIM1_Init+0x184>)
 800097c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800097e:	4b4e      	ldr	r3, [pc, #312]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000984:	4b4c      	ldr	r3, [pc, #304]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000986:	2220      	movs	r2, #32
 8000988:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 800098a:	4b4b      	ldr	r3, [pc, #300]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 800098c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000990:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000992:	4b49      	ldr	r3, [pc, #292]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000998:	4b47      	ldr	r3, [pc, #284]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800099e:	4b46      	ldr	r3, [pc, #280]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 80009a0:	2280      	movs	r2, #128	@ 0x80
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009a4:	4844      	ldr	r0, [pc, #272]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 80009a6:	f002 fd89 	bl	80034bc <HAL_TIM_Base_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 fb42 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b8:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ba:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009be:	4619      	mov	r1, r3
 80009c0:	483d      	ldr	r0, [pc, #244]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 80009c2:	f003 fb69 	bl	8004098 <HAL_TIM_ConfigClockSource>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80009cc:	f000 fb34 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009d0:	4839      	ldr	r0, [pc, #228]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 80009d2:	f002 fe43 	bl	800365c <HAL_TIM_PWM_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80009dc:	f000 fb2c 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009e4:	2300      	movs	r3, #0
 80009e6:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80009f0:	4619      	mov	r1, r3
 80009f2:	4831      	ldr	r0, [pc, #196]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 80009f4:	f004 fafa 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80009fe:	f000 fb1b 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a02:	2360      	movs	r3, #96	@ 0x60
 8000a04:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000a06:	2300      	movs	r3, #0
 8000a08:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8000a0e:	2308      	movs	r3, #8
 8000a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a12:	2300      	movs	r3, #0
 8000a14:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a16:	2300      	movs	r3, #0
 8000a18:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a22:	2200      	movs	r2, #0
 8000a24:	4619      	mov	r1, r3
 8000a26:	4824      	ldr	r0, [pc, #144]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000a28:	f003 fa22 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000a32:	f000 fb01 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a36:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a3a:	2204      	movs	r2, #4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	481e      	ldr	r0, [pc, #120]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000a40:	f003 fa16 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000a4a:	f000 faf5 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a4e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a52:	2208      	movs	r2, #8
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000a58:	f003 fa0a 	bl	8003e70 <HAL_TIM_PWM_ConfigChannel>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8000a62:	f000 fae9 	bl	8001038 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a80:	2300      	movs	r3, #0
 8000a82:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a84:	2300      	movs	r3, #0
 8000a86:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a92:	2300      	movs	r3, #0
 8000a94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4807      	ldr	r0, [pc, #28]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000a9c:	f004 fb34 	bl	8005108 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8000aa6:	f000 fac7 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aaa:	4803      	ldr	r0, [pc, #12]	@ (8000ab8 <MX_TIM1_Init+0x180>)
 8000aac:	f000 fb4e 	bl	800114c <HAL_TIM_MspPostInit>

}
 8000ab0:	bf00      	nop
 8000ab2:	3768      	adds	r7, #104	@ 0x68
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	24000060 	.word	0x24000060
 8000abc:	40010000 	.word	0x40010000

08000ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b08c      	sub	sp, #48	@ 0x30
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ae0:	1d3b      	adds	r3, r7, #4
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	601a      	str	r2, [r3, #0]
 8000ae6:	605a      	str	r2, [r3, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
 8000aea:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000aec:	4b2a      	ldr	r3, [pc, #168]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000aee:	4a2b      	ldr	r2, [pc, #172]	@ (8000b9c <MX_TIM4_Init+0xdc>)
 8000af0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000af2:	4b29      	ldr	r3, [pc, #164]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af8:	4b27      	ldr	r3, [pc, #156]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100;
 8000afe:	4b26      	ldr	r3, [pc, #152]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b00:	2264      	movs	r2, #100	@ 0x64
 8000b02:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b04:	4b24      	ldr	r3, [pc, #144]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b0a:	4b23      	ldr	r3, [pc, #140]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b0c:	2280      	movs	r2, #128	@ 0x80
 8000b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000b10:	4821      	ldr	r0, [pc, #132]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b12:	f002 fcd3 	bl	80034bc <HAL_TIM_Base_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 fa8c 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b24:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000b26:	f107 0320 	add.w	r3, r7, #32
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	481a      	ldr	r0, [pc, #104]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b2e:	f003 fab3 	bl	8004098 <HAL_TIM_ConfigClockSource>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000b38:	f000 fa7e 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8000b3c:	4816      	ldr	r0, [pc, #88]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b3e:	f002 ff93 	bl	8003a68 <HAL_TIM_IC_Init>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fa76 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	4619      	mov	r1, r3
 8000b5a:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b5c:	f004 fa46 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 8000b66:	f000 fa67 	bl	8001038 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_TIM4_Init+0xd8>)
 8000b82:	f003 f8d9 	bl	8003d38 <HAL_TIM_IC_ConfigChannel>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000b8c:	f000 fa54 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	3730      	adds	r7, #48	@ 0x30
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	240000ac 	.word	0x240000ac
 8000b9c:	40000800 	.word	0x40000800

08000ba0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba6:	f107 031c 	add.w	r3, r7, #28
 8000baa:	2200      	movs	r2, #0
 8000bac:	601a      	str	r2, [r3, #0]
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	609a      	str	r2, [r3, #8]
 8000bb2:	60da      	str	r2, [r3, #12]
 8000bb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb6:	4b58      	ldr	r3, [pc, #352]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bbc:	4a56      	ldr	r2, [pc, #344]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bbe:	f043 0304 	orr.w	r3, r3, #4
 8000bc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc6:	4b54      	ldr	r3, [pc, #336]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bcc:	f003 0304 	and.w	r3, r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
 8000bd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd4:	4b50      	ldr	r3, [pc, #320]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a4f      	ldr	r2, [pc, #316]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b4c      	ldr	r3, [pc, #304]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b49      	ldr	r3, [pc, #292]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf8:	4a47      	ldr	r2, [pc, #284]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000bfa:	f043 0302 	orr.w	r3, r3, #2
 8000bfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c02:	4b45      	ldr	r3, [pc, #276]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c10:	4b41      	ldr	r3, [pc, #260]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c16:	4a40      	ldr	r2, [pc, #256]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c18:	f043 0310 	orr.w	r3, r3, #16
 8000c1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c20:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c26:	f003 0310 	and.w	r3, r3, #16
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c34:	4a38      	ldr	r2, [pc, #224]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c36:	f043 0308 	orr.w	r3, r3, #8
 8000c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c3e:	4b36      	ldr	r3, [pc, #216]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c44:	f003 0308 	and.w	r3, r3, #8
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4c:	4b32      	ldr	r3, [pc, #200]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c52:	4a31      	ldr	r2, [pc, #196]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c5c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d18 <MX_GPIO_Init+0x178>)
 8000c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c66:	607b      	str	r3, [r7, #4]
 8000c68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c6a:	2332      	movs	r3, #50	@ 0x32
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c7a:	230b      	movs	r3, #11
 8000c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4825      	ldr	r0, [pc, #148]	@ (8000d1c <MX_GPIO_Init+0x17c>)
 8000c86:	f000 ff23 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c8a:	2386      	movs	r3, #134	@ 0x86
 8000c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c9a:	230b      	movs	r3, #11
 8000c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c9e:	f107 031c 	add.w	r3, r7, #28
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	481e      	ldr	r0, [pc, #120]	@ (8000d20 <MX_GPIO_Init+0x180>)
 8000ca6:	f000 ff13 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000caa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cbc:	230b      	movs	r3, #11
 8000cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4619      	mov	r1, r3
 8000cc6:	4817      	ldr	r0, [pc, #92]	@ (8000d24 <MX_GPIO_Init+0x184>)
 8000cc8:	f000 ff02 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ccc:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000cde:	230a      	movs	r3, #10
 8000ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce2:	f107 031c 	add.w	r3, r7, #28
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480d      	ldr	r0, [pc, #52]	@ (8000d20 <MX_GPIO_Init+0x180>)
 8000cea:	f000 fef1 	bl	8001ad0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000cee:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d00:	230b      	movs	r3, #11
 8000d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d04:	f107 031c 	add.w	r3, r7, #28
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	@ (8000d28 <MX_GPIO_Init+0x188>)
 8000d0c:	f000 fee0 	bl	8001ad0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d10:	bf00      	nop
 8000d12:	3730      	adds	r7, #48	@ 0x30
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020800 	.word	0x58020800
 8000d20:	58020000 	.word	0x58020000
 8000d24:	58020400 	.word	0x58020400
 8000d28:	58021800 	.word	0x58021800

08000d2c <HAL_TIM_PeriodElapsedCallback>:
   * and then updates the timer registers (auto-reload and repetition counter) for the next cycle.
   *
   * @param htim Pointer to the timer handle structure.
   */
  void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
  {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
      // Verify that the interrupt is from Timer 4
      if (htim->Instance == TIM4)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d167      	bne.n	8000e0e <HAL_TIM_PeriodElapsedCallback+0xe2>
      {
          // Adjust PWM duty and repetition counter based on the selected RPM preset
          switch (rpm_preset_t)  // RPM Preset selection
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b03      	cmp	r3, #3
 8000d46:	d02e      	beq.n	8000da6 <HAL_TIM_PeriodElapsedCallback+0x7a>
 8000d48:	2b03      	cmp	r3, #3
 8000d4a:	dc37      	bgt.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x90>
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d010      	beq.n	8000d72 <HAL_TIM_PeriodElapsedCallback+0x46>
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d022      	beq.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x6e>
 8000d54:	e032      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x90>
          {
              case 1:
                  // For Preset 1: Decrement 'repeat' until it reaches 4, increasing _duty by 10 on each decrement.
                  while (repeat > 4)
                  {
                      repeat--;
 8000d56:	4b32      	ldr	r3, [pc, #200]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	3b01      	subs	r3, #1
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	4b2f      	ldr	r3, [pc, #188]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d62:	701a      	strb	r2, [r3, #0]
                      _duty += 10;
 8000d64:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	b29b      	uxth	r3, r3
 8000d6a:	330a      	adds	r3, #10
 8000d6c:	b29a      	uxth	r2, r3
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d70:	801a      	strh	r2, [r3, #0]
                  while (repeat > 4)
 8000d72:	4b2b      	ldr	r3, [pc, #172]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b04      	cmp	r3, #4
 8000d7a:	d8ec      	bhi.n	8000d56 <HAL_TIM_PeriodElapsedCallback+0x2a>
                  }
                  break;
 8000d7c:	e01e      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x90>

              case 2:
                  // For Preset 2: Decrement 'repeat' until it reaches 2, increasing _duty by 10 on each decrement.
                  while (repeat > 2)
                  {
                      repeat--;
 8000d7e:	4b28      	ldr	r3, [pc, #160]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	3b01      	subs	r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	4b25      	ldr	r3, [pc, #148]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d8a:	701a      	strb	r2, [r3, #0]
                      _duty += 10;
 8000d8c:	4b25      	ldr	r3, [pc, #148]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d8e:	881b      	ldrh	r3, [r3, #0]
 8000d90:	b29b      	uxth	r3, r3
 8000d92:	330a      	adds	r3, #10
 8000d94:	b29a      	uxth	r2, r3
 8000d96:	4b23      	ldr	r3, [pc, #140]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000d98:	801a      	strh	r2, [r3, #0]
                  while (repeat > 2)
 8000d9a:	4b21      	ldr	r3, [pc, #132]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d8ec      	bhi.n	8000d7e <HAL_TIM_PeriodElapsedCallback+0x52>
                  }
                  break;
 8000da4:	e00a      	b.n	8000dbc <HAL_TIM_PeriodElapsedCallback+0x90>

              case 3:
                  // For Preset 3: Immediately reset 'repeat' to 0 and increase _duty by 10.
                  repeat = 0;
 8000da6:	4b1e      	ldr	r3, [pc, #120]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	701a      	strb	r2, [r3, #0]
                  _duty += 10;
 8000dac:	4b1d      	ldr	r3, [pc, #116]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	330a      	adds	r3, #10
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000db8:	801a      	strh	r2, [r3, #0]
                  break;
 8000dba:	bf00      	nop
          }

          // Update PWM outputs based on the current commutation step.
          // This function handles the switching of active/inactive PWM channels.
          SetCommutationStep(step, _duty);
 8000dbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	b2db      	uxtb	r3, r3
 8000dc2:	4a18      	ldr	r2, [pc, #96]	@ (8000e24 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000dc4:	8812      	ldrh	r2, [r2, #0]
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	4611      	mov	r1, r2
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f832 	bl	8000e34 <SetCommutationStep>

          // Cycle through the 6-step commutation sequence for the BLDC motor.
          if (++step >= 6)
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4a13      	ldr	r2, [pc, #76]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ddc:	4619      	mov	r1, r3
 8000dde:	7011      	strb	r1, [r2, #0]
 8000de0:	2b05      	cmp	r3, #5
 8000de2:	d902      	bls.n	8000dea <HAL_TIM_PeriodElapsedCallback+0xbe>
          {
              step = 0;  // Reset step count after completing one full cycle.
 8000de4:	4b10      	ldr	r3, [pc, #64]	@ (8000e28 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	701a      	strb	r2, [r3, #0]
          }

          // Update the timer's auto-reload value and repetition counter for the next PWM cycle.
          __HAL_TIM_SET_AUTORELOAD(&htim1, period);
 8000dea:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b0f      	ldr	r3, [pc, #60]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000df6:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000df8:	881b      	ldrh	r3, [r3, #0]
 8000dfa:	b29b      	uxth	r3, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e00:	60da      	str	r2, [r3, #12]
          htim1.Instance->RCR = repeat;
 8000e02:	4b07      	ldr	r3, [pc, #28]	@ (8000e20 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	631a      	str	r2, [r3, #48]	@ 0x30
      }
  }
 8000e0e:	bf00      	nop
 8000e10:	3708      	adds	r7, #8
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	40000800 	.word	0x40000800
 8000e1c:	240000f9 	.word	0x240000f9
 8000e20:	2400000a 	.word	0x2400000a
 8000e24:	24000008 	.word	0x24000008
 8000e28:	240000f8 	.word	0x240000f8
 8000e2c:	2400000c 	.word	0x2400000c
 8000e30:	24000060 	.word	0x24000060

08000e34 <SetCommutationStep>:
   *
   * @param step The current commutation step (0 to 5).
   * @param duty The PWM duty cycle to be applied.
   */
  void SetCommutationStep(uint8_t step, uint16_t duty)
  {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	71fb      	strb	r3, [r7, #7]
 8000e40:	4613      	mov	r3, r2
 8000e42:	80bb      	strh	r3, [r7, #4]
      switch (step)
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	2b05      	cmp	r3, #5
 8000e48:	f200 80d6 	bhi.w	8000ff8 <SetCommutationStep+0x1c4>
 8000e4c:	a201      	add	r2, pc, #4	@ (adr r2, 8000e54 <SetCommutationStep+0x20>)
 8000e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e52:	bf00      	nop
 8000e54:	08000e6d 	.word	0x08000e6d
 8000e58:	08000eaf 	.word	0x08000eaf
 8000e5c:	08000f33 	.word	0x08000f33
 8000e60:	08000ef1 	.word	0x08000ef1
 8000e64:	08000f75 	.word	0x08000f75
 8000e68:	08000fb7 	.word	0x08000fb7
          case 0:
              // Commutation Step 0:
              // - Phase A (TIM_CHANNEL_1): PWM active with given duty.
              // - Phase B (TIM_CHANNEL_2): Set low (compare = 0) but PWM clock is running.
              // - Phase C (TIM_CHANNEL_3): PWM outputs stopped.
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8000e6c:	4b71      	ldr	r3, [pc, #452]	@ (8001034 <SetCommutationStep+0x200>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	88ba      	ldrh	r2, [r7, #4]
 8000e72:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e74:	2100      	movs	r1, #0
 8000e76:	486f      	ldr	r0, [pc, #444]	@ (8001034 <SetCommutationStep+0x200>)
 8000e78:	f002 fc52 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	486d      	ldr	r0, [pc, #436]	@ (8001034 <SetCommutationStep+0x200>)
 8000e80:	f003 ff94 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000e84:	4b6b      	ldr	r3, [pc, #428]	@ (8001034 <SetCommutationStep+0x200>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e8c:	2104      	movs	r1, #4
 8000e8e:	4869      	ldr	r0, [pc, #420]	@ (8001034 <SetCommutationStep+0x200>)
 8000e90:	f002 fc46 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000e94:	2104      	movs	r1, #4
 8000e96:	4867      	ldr	r0, [pc, #412]	@ (8001034 <SetCommutationStep+0x200>)
 8000e98:	f003 ff88 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000e9c:	2108      	movs	r1, #8
 8000e9e:	4865      	ldr	r0, [pc, #404]	@ (8001034 <SetCommutationStep+0x200>)
 8000ea0:	f002 fd4c 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000ea4:	2108      	movs	r1, #8
 8000ea6:	4863      	ldr	r0, [pc, #396]	@ (8001034 <SetCommutationStep+0x200>)
 8000ea8:	f004 f842 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>
              break;
 8000eac:	e0bd      	b.n	800102a <SetCommutationStep+0x1f6>
          case 1:
              // Commutation Step 1:
              // - Phase A (TIM_CHANNEL_1): PWM active with given duty.
              // - Phase B (TIM_CHANNEL_2): PWM outputs stopped.
              // - Phase C (TIM_CHANNEL_3): Set low (compare = 0) and activated.
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
 8000eae:	4b61      	ldr	r3, [pc, #388]	@ (8001034 <SetCommutationStep+0x200>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	88ba      	ldrh	r2, [r7, #4]
 8000eb4:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000eb6:	2100      	movs	r1, #0
 8000eb8:	485e      	ldr	r0, [pc, #376]	@ (8001034 <SetCommutationStep+0x200>)
 8000eba:	f002 fc31 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	485c      	ldr	r0, [pc, #368]	@ (8001034 <SetCommutationStep+0x200>)
 8000ec2:	f003 ff73 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000ec6:	2104      	movs	r1, #4
 8000ec8:	485a      	ldr	r0, [pc, #360]	@ (8001034 <SetCommutationStep+0x200>)
 8000eca:	f002 fd37 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000ece:	2104      	movs	r1, #4
 8000ed0:	4858      	ldr	r0, [pc, #352]	@ (8001034 <SetCommutationStep+0x200>)
 8000ed2:	f004 f82d 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000ed6:	4b57      	ldr	r3, [pc, #348]	@ (8001034 <SetCommutationStep+0x200>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2200      	movs	r2, #0
 8000edc:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000ede:	2108      	movs	r1, #8
 8000ee0:	4854      	ldr	r0, [pc, #336]	@ (8001034 <SetCommutationStep+0x200>)
 8000ee2:	f002 fc1d 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000ee6:	2108      	movs	r1, #8
 8000ee8:	4852      	ldr	r0, [pc, #328]	@ (8001034 <SetCommutationStep+0x200>)
 8000eea:	f003 ff5f 	bl	8004dac <HAL_TIMEx_PWMN_Start>
              break;
 8000eee:	e09c      	b.n	800102a <SetCommutationStep+0x1f6>
          case 3:
              // Commutation Step 3:
              // - Phase A (TIM_CHANNEL_1): Set low (compare = 0) and activated.
              // - Phase B (TIM_CHANNEL_2): PWM active with given duty.
              // - Phase C (TIM_CHANNEL_3): PWM outputs stopped.
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000ef0:	4b50      	ldr	r3, [pc, #320]	@ (8001034 <SetCommutationStep+0x200>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ef8:	2100      	movs	r1, #0
 8000efa:	484e      	ldr	r0, [pc, #312]	@ (8001034 <SetCommutationStep+0x200>)
 8000efc:	f002 fc10 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f00:	2100      	movs	r1, #0
 8000f02:	484c      	ldr	r0, [pc, #304]	@ (8001034 <SetCommutationStep+0x200>)
 8000f04:	f003 ff52 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 8000f08:	4b4a      	ldr	r3, [pc, #296]	@ (8001034 <SetCommutationStep+0x200>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	88ba      	ldrh	r2, [r7, #4]
 8000f0e:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f10:	2104      	movs	r1, #4
 8000f12:	4848      	ldr	r0, [pc, #288]	@ (8001034 <SetCommutationStep+0x200>)
 8000f14:	f002 fc04 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f18:	2104      	movs	r1, #4
 8000f1a:	4846      	ldr	r0, [pc, #280]	@ (8001034 <SetCommutationStep+0x200>)
 8000f1c:	f003 ff46 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8000f20:	2108      	movs	r1, #8
 8000f22:	4844      	ldr	r0, [pc, #272]	@ (8001034 <SetCommutationStep+0x200>)
 8000f24:	f002 fd0a 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8000f28:	2108      	movs	r1, #8
 8000f2a:	4842      	ldr	r0, [pc, #264]	@ (8001034 <SetCommutationStep+0x200>)
 8000f2c:	f004 f800 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>
              break;
 8000f30:	e07b      	b.n	800102a <SetCommutationStep+0x1f6>
          case 2:
              // Commutation Step 2:
              // - Phase A (TIM_CHANNEL_1): PWM outputs stopped.
              // - Phase B (TIM_CHANNEL_2): PWM active with given duty.
              // - Phase C (TIM_CHANNEL_3): Set low (compare = 0) and activated.
              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000f32:	2100      	movs	r1, #0
 8000f34:	483f      	ldr	r0, [pc, #252]	@ (8001034 <SetCommutationStep+0x200>)
 8000f36:	f002 fd01 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	483d      	ldr	r0, [pc, #244]	@ (8001034 <SetCommutationStep+0x200>)
 8000f3e:	f003 fff7 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
 8000f42:	4b3c      	ldr	r3, [pc, #240]	@ (8001034 <SetCommutationStep+0x200>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	88ba      	ldrh	r2, [r7, #4]
 8000f48:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f4a:	2104      	movs	r1, #4
 8000f4c:	4839      	ldr	r0, [pc, #228]	@ (8001034 <SetCommutationStep+0x200>)
 8000f4e:	f002 fbe7 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f52:	2104      	movs	r1, #4
 8000f54:	4837      	ldr	r0, [pc, #220]	@ (8001034 <SetCommutationStep+0x200>)
 8000f56:	f003 ff29 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, 0);
 8000f5a:	4b36      	ldr	r3, [pc, #216]	@ (8001034 <SetCommutationStep+0x200>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000f62:	2108      	movs	r1, #8
 8000f64:	4833      	ldr	r0, [pc, #204]	@ (8001034 <SetCommutationStep+0x200>)
 8000f66:	f002 fbdb 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000f6a:	2108      	movs	r1, #8
 8000f6c:	4831      	ldr	r0, [pc, #196]	@ (8001034 <SetCommutationStep+0x200>)
 8000f6e:	f003 ff1d 	bl	8004dac <HAL_TIMEx_PWMN_Start>
              break;
 8000f72:	e05a      	b.n	800102a <SetCommutationStep+0x1f6>
          case 4:
              // Commutation Step 4:
              // - Phase A (TIM_CHANNEL_1): Set low (compare = 0) and activated.
              // - Phase B (TIM_CHANNEL_2): PWM outputs stopped.
              // - Phase C (TIM_CHANNEL_3): PWM active with given duty.
              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8000f74:	4b2f      	ldr	r3, [pc, #188]	@ (8001034 <SetCommutationStep+0x200>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2200      	movs	r2, #0
 8000f7a:	635a      	str	r2, [r3, #52]	@ 0x34
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	482d      	ldr	r0, [pc, #180]	@ (8001034 <SetCommutationStep+0x200>)
 8000f80:	f002 fbce 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f84:	2100      	movs	r1, #0
 8000f86:	482b      	ldr	r0, [pc, #172]	@ (8001034 <SetCommutationStep+0x200>)
 8000f88:	f003 ff10 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4829      	ldr	r0, [pc, #164]	@ (8001034 <SetCommutationStep+0x200>)
 8000f90:	f002 fcd4 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000f94:	2104      	movs	r1, #4
 8000f96:	4827      	ldr	r0, [pc, #156]	@ (8001034 <SetCommutationStep+0x200>)
 8000f98:	f003 ffca 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 8000f9c:	4b25      	ldr	r3, [pc, #148]	@ (8001034 <SetCommutationStep+0x200>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	88ba      	ldrh	r2, [r7, #4]
 8000fa2:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fa4:	2108      	movs	r1, #8
 8000fa6:	4823      	ldr	r0, [pc, #140]	@ (8001034 <SetCommutationStep+0x200>)
 8000fa8:	f002 fbba 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000fac:	2108      	movs	r1, #8
 8000fae:	4821      	ldr	r0, [pc, #132]	@ (8001034 <SetCommutationStep+0x200>)
 8000fb0:	f003 fefc 	bl	8004dac <HAL_TIMEx_PWMN_Start>
              break;
 8000fb4:	e039      	b.n	800102a <SetCommutationStep+0x1f6>
          case 5:
              // Commutation Step 5:
              // - Phase A (TIM_CHANNEL_1): PWM outputs stopped.
              // - Phase B (TIM_CHANNEL_2): Set low (compare = 0) and activated.
              // - Phase C (TIM_CHANNEL_3): PWM active with given duty.
              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	481e      	ldr	r0, [pc, #120]	@ (8001034 <SetCommutationStep+0x200>)
 8000fba:	f002 fcbf 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	481c      	ldr	r0, [pc, #112]	@ (8001034 <SetCommutationStep+0x200>)
 8000fc2:	f003 ffb5 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001034 <SetCommutationStep+0x200>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	639a      	str	r2, [r3, #56]	@ 0x38
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4818      	ldr	r0, [pc, #96]	@ (8001034 <SetCommutationStep+0x200>)
 8000fd2:	f002 fba5 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	4816      	ldr	r0, [pc, #88]	@ (8001034 <SetCommutationStep+0x200>)
 8000fda:	f003 fee7 	bl	8004dac <HAL_TIMEx_PWMN_Start>

              __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_3, duty);
 8000fde:	4b15      	ldr	r3, [pc, #84]	@ (8001034 <SetCommutationStep+0x200>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	88ba      	ldrh	r2, [r7, #4]
 8000fe4:	63da      	str	r2, [r3, #60]	@ 0x3c
              HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000fe6:	2108      	movs	r1, #8
 8000fe8:	4812      	ldr	r0, [pc, #72]	@ (8001034 <SetCommutationStep+0x200>)
 8000fea:	f002 fb99 	bl	8003720 <HAL_TIM_PWM_Start>
              HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4810      	ldr	r0, [pc, #64]	@ (8001034 <SetCommutationStep+0x200>)
 8000ff2:	f003 fedb 	bl	8004dac <HAL_TIMEx_PWMN_Start>
              break;
 8000ff6:	e018      	b.n	800102a <SetCommutationStep+0x1f6>

          default:
              // Default case: Safety fallback to stop all PWM outputs.
              // This ensures that if an invalid commutation step is provided,
              // all channels are disabled to prevent unintended motor behavior.
              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	480e      	ldr	r0, [pc, #56]	@ (8001034 <SetCommutationStep+0x200>)
 8000ffc:	f002 fc9e 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	480c      	ldr	r0, [pc, #48]	@ (8001034 <SetCommutationStep+0x200>)
 8001004:	f003 ff94 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>
              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001008:	2104      	movs	r1, #4
 800100a:	480a      	ldr	r0, [pc, #40]	@ (8001034 <SetCommutationStep+0x200>)
 800100c:	f002 fc96 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001010:	2104      	movs	r1, #4
 8001012:	4808      	ldr	r0, [pc, #32]	@ (8001034 <SetCommutationStep+0x200>)
 8001014:	f003 ff8c 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>
              HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 8001018:	2108      	movs	r1, #8
 800101a:	4806      	ldr	r0, [pc, #24]	@ (8001034 <SetCommutationStep+0x200>)
 800101c:	f002 fc8e 	bl	800393c <HAL_TIM_PWM_Stop>
              HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8001020:	2108      	movs	r1, #8
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <SetCommutationStep+0x200>)
 8001024:	f003 ff84 	bl	8004f30 <HAL_TIMEx_PWMN_Stop>
              break;
 8001028:	bf00      	nop
      }
  }
 800102a:	bf00      	nop
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	24000060 	.word	0x24000060

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <Error_Handler+0x8>

08001044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800104a:	4b0a      	ldr	r3, [pc, #40]	@ (8001074 <HAL_MspInit+0x30>)
 800104c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001050:	4a08      	ldr	r2, [pc, #32]	@ (8001074 <HAL_MspInit+0x30>)
 8001052:	f043 0302 	orr.w	r3, r3, #2
 8001056:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800105a:	4b06      	ldr	r3, [pc, #24]	@ (8001074 <HAL_MspInit+0x30>)
 800105c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58024400 	.word	0x58024400

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	@ 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a29      	ldr	r2, [pc, #164]	@ (800113c <HAL_TIM_Base_MspInit+0xc4>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d10f      	bne.n	80010ba <HAL_TIM_Base_MspInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800109a:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 800109c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010a0:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80010b8:	e03b      	b.n	8001132 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM4)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a21      	ldr	r2, [pc, #132]	@ (8001144 <HAL_TIM_Base_MspInit+0xcc>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d136      	bne.n	8001132 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010c4:	4b1e      	ldr	r3, [pc, #120]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ca:	4a1d      	ldr	r2, [pc, #116]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	f003 0304 	and.w	r3, r3, #4
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010e2:	4b17      	ldr	r3, [pc, #92]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010e8:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010ea:	f043 0308 	orr.w	r3, r3, #8
 80010ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_TIM_Base_MspInit+0xc8>)
 80010f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010f8:	f003 0308 	and.w	r3, r3, #8
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110a:	2300      	movs	r3, #0
 800110c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110e:	2300      	movs	r3, #0
 8001110:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001112:	2302      	movs	r3, #2
 8001114:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	480a      	ldr	r0, [pc, #40]	@ (8001148 <HAL_TIM_Base_MspInit+0xd0>)
 800111e:	f000 fcd7 	bl	8001ad0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001122:	2200      	movs	r2, #0
 8001124:	2100      	movs	r1, #0
 8001126:	201e      	movs	r0, #30
 8001128:	f000 fc19 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800112c:	201e      	movs	r0, #30
 800112e:	f000 fc30 	bl	8001992 <HAL_NVIC_EnableIRQ>
}
 8001132:	bf00      	nop
 8001134:	3728      	adds	r7, #40	@ 0x28
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40010000 	.word	0x40010000
 8001140:	58024400 	.word	0x58024400
 8001144:	40000800 	.word	0x40000800
 8001148:	58020c00 	.word	0x58020c00

0800114c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a22      	ldr	r2, [pc, #136]	@ (80011f4 <HAL_TIM_MspPostInit+0xa8>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d13e      	bne.n	80011ec <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	4b22      	ldr	r3, [pc, #136]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001176:	f043 0302 	orr.w	r3, r3, #2
 800117a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800117e:	4b1e      	ldr	r3, [pc, #120]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001180:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	613b      	str	r3, [r7, #16]
 800118a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800118c:	4b1a      	ldr	r3, [pc, #104]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	4a19      	ldr	r2, [pc, #100]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 8001194:	f043 0310 	orr.w	r3, r3, #16
 8001198:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800119c:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <HAL_TIM_MspPostInit+0xac>)
 800119e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a2:	f003 0310 	and.w	r3, r3, #16
 80011a6:	60fb      	str	r3, [r7, #12]
 80011a8:	68fb      	ldr	r3, [r7, #12]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011aa:	2302      	movs	r3, #2
 80011ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ae:	2302      	movs	r3, #2
 80011b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b2:	2300      	movs	r3, #0
 80011b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011ba:	2301      	movs	r3, #1
 80011bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011be:	f107 0314 	add.w	r3, r7, #20
 80011c2:	4619      	mov	r1, r3
 80011c4:	480d      	ldr	r0, [pc, #52]	@ (80011fc <HAL_TIM_MspPostInit+0xb0>)
 80011c6:	f000 fc83 	bl	8001ad0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011ca:	f44f 533c 	mov.w	r3, #12032	@ 0x2f00
 80011ce:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d0:	2302      	movs	r3, #2
 80011d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011dc:	2301      	movs	r3, #1
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4806      	ldr	r0, [pc, #24]	@ (8001200 <HAL_TIM_MspPostInit+0xb4>)
 80011e8:	f000 fc72 	bl	8001ad0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	@ 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010000 	.word	0x40010000
 80011f8:	58024400 	.word	0x58024400
 80011fc:	58020400 	.word	0x58020400
 8001200:	58021000 	.word	0x58021000

08001204 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <NMI_Handler+0x4>

0800120c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001210:	bf00      	nop
 8001212:	e7fd      	b.n	8001210 <HardFault_Handler+0x4>

08001214 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001218:	bf00      	nop
 800121a:	e7fd      	b.n	8001218 <MemManage_Handler+0x4>

0800121c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001220:	bf00      	nop
 8001222:	e7fd      	b.n	8001220 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <UsageFault_Handler+0x4>

0800122c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125a:	f000 fa79 	bl	8001750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001268:	4802      	ldr	r0, [pc, #8]	@ (8001274 <TIM4_IRQHandler+0x10>)
 800126a:	f002 fc5e 	bl	8003b2a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	240000ac 	.word	0x240000ac

08001278 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800127c:	2000      	movs	r0, #0
 800127e:	f000 f915 	bl	80014ac <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80012c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800128c:	f7ff f99c 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001290:	480c      	ldr	r0, [pc, #48]	@ (80012c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001292:	490d      	ldr	r1, [pc, #52]	@ (80012c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001294:	4a0d      	ldr	r2, [pc, #52]	@ (80012cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001298:	e002      	b.n	80012a0 <LoopCopyDataInit>

0800129a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800129a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800129c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129e:	3304      	adds	r3, #4

080012a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a4:	d3f9      	bcc.n	800129a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a6:	4a0a      	ldr	r2, [pc, #40]	@ (80012d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012a8:	4c0a      	ldr	r4, [pc, #40]	@ (80012d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ac:	e001      	b.n	80012b2 <LoopFillZerobss>

080012ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b0:	3204      	adds	r2, #4

080012b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b4:	d3fb      	bcc.n	80012ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012b6:	f004 ffd3 	bl	8006260 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fa1b 	bl	80006f4 <main>
  bx  lr
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012c4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012c8:	24000034 	.word	0x24000034
  ldr r2, =_sidata
 80012cc:	08006304 	.word	0x08006304
  ldr r2, =_sbss
 80012d0:	24000034 	.word	0x24000034
  ldr r4, =_ebss
 80012d4:	2400019c 	.word	0x2400019c

080012d8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC3_IRQHandler>
	...

080012dc <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b08c      	sub	sp, #48	@ 0x30
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d009      	beq.n	8001304 <BSP_LED_Init+0x28>
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d006      	beq.n	8001304 <BSP_LED_Init+0x28>
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	d003      	beq.n	8001304 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012fc:	f06f 0301 	mvn.w	r3, #1
 8001300:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001302:	e055      	b.n	80013b0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10f      	bne.n	800132a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800130a:	4b2c      	ldr	r3, [pc, #176]	@ (80013bc <BSP_LED_Init+0xe0>)
 800130c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001310:	4a2a      	ldr	r2, [pc, #168]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001312:	f043 0302 	orr.w	r3, r3, #2
 8001316:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131a:	4b28      	ldr	r3, [pc, #160]	@ (80013bc <BSP_LED_Init+0xe0>)
 800131c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	617b      	str	r3, [r7, #20]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	e021      	b.n	800136e <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800132a:	79fb      	ldrb	r3, [r7, #7]
 800132c:	2b01      	cmp	r3, #1
 800132e:	d10f      	bne.n	8001350 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001330:	4b22      	ldr	r3, [pc, #136]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001338:	f043 0310 	orr.w	r3, r3, #16
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b1e      	ldr	r3, [pc, #120]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0310 	and.w	r3, r3, #16
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	e00e      	b.n	800136e <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001350:	4b1a      	ldr	r3, [pc, #104]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	4a19      	ldr	r2, [pc, #100]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001360:	4b16      	ldr	r3, [pc, #88]	@ (80013bc <BSP_LED_Init+0xe0>)
 8001362:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800136e:	79fb      	ldrb	r3, [r7, #7]
 8001370:	4a13      	ldr	r2, [pc, #76]	@ (80013c0 <BSP_LED_Init+0xe4>)
 8001372:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001376:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001378:	2301      	movs	r3, #1
 800137a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	4a0f      	ldr	r2, [pc, #60]	@ (80013c4 <BSP_LED_Init+0xe8>)
 8001388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138c:	f107 0218 	add.w	r2, r7, #24
 8001390:	4611      	mov	r1, r2
 8001392:	4618      	mov	r0, r3
 8001394:	f000 fb9c 	bl	8001ad0 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	4a0a      	ldr	r2, [pc, #40]	@ (80013c4 <BSP_LED_Init+0xe8>)
 800139c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4a07      	ldr	r2, [pc, #28]	@ (80013c0 <BSP_LED_Init+0xe4>)
 80013a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013a8:	2200      	movs	r2, #0
 80013aa:	4619      	mov	r1, r3
 80013ac:	f000 fd40 	bl	8001e30 <HAL_GPIO_WritePin>
  }

  return ret;
 80013b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3730      	adds	r7, #48	@ 0x30
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	58024400 	.word	0x58024400
 80013c0:	080062d0 	.word	0x080062d0
 80013c4:	24000014 	.word	0x24000014

080013c8 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	460a      	mov	r2, r1
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80013d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001494 <BSP_PB_Init+0xcc>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013de:	4a2d      	ldr	r2, [pc, #180]	@ (8001494 <BSP_PB_Init+0xcc>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013e8:	4b2a      	ldr	r3, [pc, #168]	@ (8001494 <BSP_PB_Init+0xcc>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	f003 0304 	and.w	r3, r3, #4
 80013f2:	60bb      	str	r3, [r7, #8]
 80013f4:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80013f6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013fa:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001400:	2302      	movs	r3, #2
 8001402:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001404:	79bb      	ldrb	r3, [r7, #6]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d10c      	bne.n	8001424 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800140e:	79fb      	ldrb	r3, [r7, #7]
 8001410:	4a21      	ldr	r2, [pc, #132]	@ (8001498 <BSP_PB_Init+0xd0>)
 8001412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001416:	f107 020c 	add.w	r2, r7, #12
 800141a:	4611      	mov	r1, r2
 800141c:	4618      	mov	r0, r3
 800141e:	f000 fb57 	bl	8001ad0 <HAL_GPIO_Init>
 8001422:	e031      	b.n	8001488 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001424:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001428:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	4a1a      	ldr	r2, [pc, #104]	@ (8001498 <BSP_PB_Init+0xd0>)
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	f107 020c 	add.w	r2, r7, #12
 8001436:	4611      	mov	r1, r2
 8001438:	4618      	mov	r0, r3
 800143a:	f000 fb49 	bl	8001ad0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4a16      	ldr	r2, [pc, #88]	@ (800149c <BSP_PB_Init+0xd4>)
 8001444:	441a      	add	r2, r3
 8001446:	79fb      	ldrb	r3, [r7, #7]
 8001448:	4915      	ldr	r1, [pc, #84]	@ (80014a0 <BSP_PB_Init+0xd8>)
 800144a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f000 faec 	bl	8001a2e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	00db      	lsls	r3, r3, #3
 800145a:	4a10      	ldr	r2, [pc, #64]	@ (800149c <BSP_PB_Init+0xd4>)
 800145c:	1898      	adds	r0, r3, r2
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	4a10      	ldr	r2, [pc, #64]	@ (80014a4 <BSP_PB_Init+0xdc>)
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	461a      	mov	r2, r3
 8001468:	2100      	movs	r1, #0
 800146a:	f000 fac1 	bl	80019f0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800146e:	2028      	movs	r0, #40	@ 0x28
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	4a0d      	ldr	r2, [pc, #52]	@ (80014a8 <BSP_PB_Init+0xe0>)
 8001474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001478:	2200      	movs	r2, #0
 800147a:	4619      	mov	r1, r3
 800147c:	f000 fa6f 	bl	800195e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001480:	2328      	movs	r3, #40	@ 0x28
 8001482:	4618      	mov	r0, r3
 8001484:	f000 fa85 	bl	8001992 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3720      	adds	r7, #32
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	58024400 	.word	0x58024400
 8001498:	24000020 	.word	0x24000020
 800149c:	240000fc 	.word	0x240000fc
 80014a0:	080062d8 	.word	0x080062d8
 80014a4:	24000024 	.word	0x24000024
 80014a8:	24000028 	.word	0x24000028

080014ac <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	4a04      	ldr	r2, [pc, #16]	@ (80014cc <BSP_PB_IRQHandler+0x20>)
 80014bc:	4413      	add	r3, r2
 80014be:	4618      	mov	r0, r3
 80014c0:	f000 faca 	bl	8001a58 <HAL_EXTI_IRQHandler>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	240000fc 	.word	0x240000fc

080014d0 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	6039      	str	r1, [r7, #0]
 80014f2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80014fe:	f06f 0301 	mvn.w	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	e018      	b.n	8001538 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	2294      	movs	r2, #148	@ 0x94
 800150a:	fb02 f303 	mul.w	r3, r2, r3
 800150e:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <BSP_COM_Init+0x5c>)
 8001510:	4413      	add	r3, r2
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f852 	bl	80015bc <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2294      	movs	r2, #148	@ 0x94
 800151c:	fb02 f303 	mul.w	r3, r2, r3
 8001520:	4a08      	ldr	r2, [pc, #32]	@ (8001544 <BSP_COM_Init+0x5c>)
 8001522:	4413      	add	r3, r2
 8001524:	6839      	ldr	r1, [r7, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 f80e 	bl	8001548 <MX_USART3_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d002      	beq.n	8001538 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001532:	f06f 0303 	mvn.w	r3, #3
 8001536:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001538:	68fb      	ldr	r3, [r7, #12]
}
 800153a:	4618      	mov	r0, r3
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	24000104 	.word	0x24000104

08001548 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001552:	4b15      	ldr	r3, [pc, #84]	@ (80015a8 <MX_USART3_Init+0x60>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	220c      	movs	r2, #12
 8001566:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	895b      	ldrh	r3, [r3, #10]
 800156c:	461a      	mov	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	891b      	ldrh	r3, [r3, #8]
 800157e:	461a      	mov	r2, r3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	899b      	ldrh	r3, [r3, #12]
 8001588:	461a      	mov	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001594:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f003 fe77 	bl	800528a <HAL_UART_Init>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	24000010 	.word	0x24000010

080015ac <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80015b0:	2000      	movs	r0, #0
 80015b2:	f7ff ff8d 	bl	80014d0 <BSP_PB_Callback>
}
 80015b6:	bf00      	nop
 80015b8:	bd80      	pop	{r7, pc}
	...

080015bc <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b08a      	sub	sp, #40	@ 0x28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80015c4:	4b27      	ldr	r3, [pc, #156]	@ (8001664 <COM1_MspInit+0xa8>)
 80015c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015ca:	4a26      	ldr	r2, [pc, #152]	@ (8001664 <COM1_MspInit+0xa8>)
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015d4:	4b23      	ldr	r3, [pc, #140]	@ (8001664 <COM1_MspInit+0xa8>)
 80015d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80015e2:	4b20      	ldr	r3, [pc, #128]	@ (8001664 <COM1_MspInit+0xa8>)
 80015e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <COM1_MspInit+0xa8>)
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80015f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001664 <COM1_MspInit+0xa8>)
 80015f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001600:	4b18      	ldr	r3, [pc, #96]	@ (8001664 <COM1_MspInit+0xa8>)
 8001602:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001606:	4a17      	ldr	r2, [pc, #92]	@ (8001664 <COM1_MspInit+0xa8>)
 8001608:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800160c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <COM1_MspInit+0xa8>)
 8001612:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001616:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800161a:	60bb      	str	r3, [r7, #8]
 800161c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800161e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001622:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001628:	2302      	movs	r3, #2
 800162a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800162c:	2301      	movs	r3, #1
 800162e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001630:	2307      	movs	r3, #7
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	4619      	mov	r1, r3
 800163a:	480b      	ldr	r0, [pc, #44]	@ (8001668 <COM1_MspInit+0xac>)
 800163c:	f000 fa48 	bl	8001ad0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001640:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001644:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001646:	2302      	movs	r3, #2
 8001648:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800164a:	2307      	movs	r3, #7
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4804      	ldr	r0, [pc, #16]	@ (8001668 <COM1_MspInit+0xac>)
 8001656:	f000 fa3b 	bl	8001ad0 <HAL_GPIO_Init>
}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	@ 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	58024400 	.word	0x58024400
 8001668:	58020c00 	.word	0x58020c00

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001672:	2003      	movs	r0, #3
 8001674:	f000 f968 	bl	8001948 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001678:	f001 fa8c 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 800167c:	4602      	mov	r2, r0
 800167e:	4b15      	ldr	r3, [pc, #84]	@ (80016d4 <HAL_Init+0x68>)
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	0a1b      	lsrs	r3, r3, #8
 8001684:	f003 030f 	and.w	r3, r3, #15
 8001688:	4913      	ldr	r1, [pc, #76]	@ (80016d8 <HAL_Init+0x6c>)
 800168a:	5ccb      	ldrb	r3, [r1, r3]
 800168c:	f003 031f 	and.w	r3, r3, #31
 8001690:	fa22 f303 	lsr.w	r3, r2, r3
 8001694:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001696:	4b0f      	ldr	r3, [pc, #60]	@ (80016d4 <HAL_Init+0x68>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f003 030f 	and.w	r3, r3, #15
 800169e:	4a0e      	ldr	r2, [pc, #56]	@ (80016d8 <HAL_Init+0x6c>)
 80016a0:	5cd3      	ldrb	r3, [r2, r3]
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a0b      	ldr	r2, [pc, #44]	@ (80016dc <HAL_Init+0x70>)
 80016ae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016b0:	4a0b      	ldr	r2, [pc, #44]	@ (80016e0 <HAL_Init+0x74>)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	2000      	movs	r0, #0
 80016b8:	f000 f814 	bl	80016e4 <HAL_InitTick>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e002      	b.n	80016cc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016c6:	f7ff fcbd 	bl	8001044 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ca:	2300      	movs	r3, #0
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3708      	adds	r7, #8
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	58024400 	.word	0x58024400
 80016d8:	080062c0 	.word	0x080062c0
 80016dc:	24000004 	.word	0x24000004
 80016e0:	24000000 	.word	0x24000000

080016e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016ec:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <HAL_InitTick+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d101      	bne.n	80016f8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e021      	b.n	800173c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80016f8:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <HAL_InitTick+0x64>)
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	4619      	mov	r1, r3
 8001702:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001706:	fbb3 f3f1 	udiv	r3, r3, r1
 800170a:	fbb2 f3f3 	udiv	r3, r2, r3
 800170e:	4618      	mov	r0, r3
 8001710:	f000 f94d 	bl	80019ae <HAL_SYSTICK_Config>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e00e      	b.n	800173c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b0f      	cmp	r3, #15
 8001722:	d80a      	bhi.n	800173a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001724:	2200      	movs	r2, #0
 8001726:	6879      	ldr	r1, [r7, #4]
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f000 f917 	bl	800195e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001730:	4a06      	ldr	r2, [pc, #24]	@ (800174c <HAL_InitTick+0x68>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001736:	2300      	movs	r3, #0
 8001738:	e000      	b.n	800173c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	24000030 	.word	0x24000030
 8001748:	24000000 	.word	0x24000000
 800174c:	2400002c 	.word	0x2400002c

08001750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_IncTick+0x20>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	461a      	mov	r2, r3
 800175a:	4b06      	ldr	r3, [pc, #24]	@ (8001774 <HAL_IncTick+0x24>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4413      	add	r3, r2
 8001760:	4a04      	ldr	r2, [pc, #16]	@ (8001774 <HAL_IncTick+0x24>)
 8001762:	6013      	str	r3, [r2, #0]
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	24000030 	.word	0x24000030
 8001774:	24000198 	.word	0x24000198

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	@ (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	24000198 	.word	0x24000198

08001790 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <HAL_GetREVID+0x14>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	0c1b      	lsrs	r3, r3, #16
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	5c001000 	.word	0x5c001000

080017a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b8:	4b0b      	ldr	r3, [pc, #44]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017c4:	4013      	ands	r3, r2
 80017c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017d0:	4b06      	ldr	r3, [pc, #24]	@ (80017ec <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d6:	4a04      	ldr	r2, [pc, #16]	@ (80017e8 <__NVIC_SetPriorityGrouping+0x40>)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	60d3      	str	r3, [r2, #12]
}
 80017dc:	bf00      	nop
 80017de:	3714      	adds	r7, #20
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	e000ed00 	.word	0xe000ed00
 80017ec:	05fa0000 	.word	0x05fa0000

080017f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017f4:	4b04      	ldr	r3, [pc, #16]	@ (8001808 <__NVIC_GetPriorityGrouping+0x18>)
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	f003 0307 	and.w	r3, r3, #7
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001816:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181a:	2b00      	cmp	r3, #0
 800181c:	db0b      	blt.n	8001836 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800181e:	88fb      	ldrh	r3, [r7, #6]
 8001820:	f003 021f 	and.w	r2, r3, #31
 8001824:	4907      	ldr	r1, [pc, #28]	@ (8001844 <__NVIC_EnableIRQ+0x38>)
 8001826:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800182a:	095b      	lsrs	r3, r3, #5
 800182c:	2001      	movs	r0, #1
 800182e:	fa00 f202 	lsl.w	r2, r0, r2
 8001832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	e000e100 	.word	0xe000e100

08001848 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001848:	b480      	push	{r7}
 800184a:	b083      	sub	sp, #12
 800184c:	af00      	add	r7, sp, #0
 800184e:	4603      	mov	r3, r0
 8001850:	6039      	str	r1, [r7, #0]
 8001852:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001854:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001858:	2b00      	cmp	r3, #0
 800185a:	db0a      	blt.n	8001872 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	490c      	ldr	r1, [pc, #48]	@ (8001894 <__NVIC_SetPriority+0x4c>)
 8001862:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001866:	0112      	lsls	r2, r2, #4
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	440b      	add	r3, r1
 800186c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001870:	e00a      	b.n	8001888 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	b2da      	uxtb	r2, r3
 8001876:	4908      	ldr	r1, [pc, #32]	@ (8001898 <__NVIC_SetPriority+0x50>)
 8001878:	88fb      	ldrh	r3, [r7, #6]
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	3b04      	subs	r3, #4
 8001880:	0112      	lsls	r2, r2, #4
 8001882:	b2d2      	uxtb	r2, r2
 8001884:	440b      	add	r3, r1
 8001886:	761a      	strb	r2, [r3, #24]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000e100 	.word	0xe000e100
 8001898:	e000ed00 	.word	0xe000ed00

0800189c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800189c:	b480      	push	{r7}
 800189e:	b089      	sub	sp, #36	@ 0x24
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	60f8      	str	r0, [r7, #12]
 80018a4:	60b9      	str	r1, [r7, #8]
 80018a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f003 0307 	and.w	r3, r3, #7
 80018ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	f1c3 0307 	rsb	r3, r3, #7
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	bf28      	it	cs
 80018ba:	2304      	movcs	r3, #4
 80018bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3304      	adds	r3, #4
 80018c2:	2b06      	cmp	r3, #6
 80018c4:	d902      	bls.n	80018cc <NVIC_EncodePriority+0x30>
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	3b03      	subs	r3, #3
 80018ca:	e000      	b.n	80018ce <NVIC_EncodePriority+0x32>
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d0:	f04f 32ff 	mov.w	r2, #4294967295
 80018d4:	69bb      	ldr	r3, [r7, #24]
 80018d6:	fa02 f303 	lsl.w	r3, r2, r3
 80018da:	43da      	mvns	r2, r3
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	401a      	ands	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018e4:	f04f 31ff 	mov.w	r1, #4294967295
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43d9      	mvns	r1, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	4313      	orrs	r3, r2
         );
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3724      	adds	r7, #36	@ 0x24
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
	...

08001904 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001914:	d301      	bcc.n	800191a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001916:	2301      	movs	r3, #1
 8001918:	e00f      	b.n	800193a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800191a:	4a0a      	ldr	r2, [pc, #40]	@ (8001944 <SysTick_Config+0x40>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	3b01      	subs	r3, #1
 8001920:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001922:	210f      	movs	r1, #15
 8001924:	f04f 30ff 	mov.w	r0, #4294967295
 8001928:	f7ff ff8e 	bl	8001848 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <SysTick_Config+0x40>)
 800192e:	2200      	movs	r2, #0
 8001930:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001932:	4b04      	ldr	r3, [pc, #16]	@ (8001944 <SysTick_Config+0x40>)
 8001934:	2207      	movs	r2, #7
 8001936:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3708      	adds	r7, #8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	e000e010 	.word	0xe000e010

08001948 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7ff ff29 	bl	80017a8 <__NVIC_SetPriorityGrouping>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}

0800195e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	4603      	mov	r3, r0
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
 800196a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800196c:	f7ff ff40 	bl	80017f0 <__NVIC_GetPriorityGrouping>
 8001970:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	68b9      	ldr	r1, [r7, #8]
 8001976:	6978      	ldr	r0, [r7, #20]
 8001978:	f7ff ff90 	bl	800189c <NVIC_EncodePriority>
 800197c:	4602      	mov	r2, r0
 800197e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001982:	4611      	mov	r1, r2
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff ff5f 	bl	8001848 <__NVIC_SetPriority>
}
 800198a:	bf00      	nop
 800198c:	3718      	adds	r7, #24
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	4603      	mov	r3, r0
 800199a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800199c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff33 	bl	800180c <__NVIC_EnableIRQ>
}
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b6:	6878      	ldr	r0, [r7, #4]
 80019b8:	f7ff ffa4 	bl	8001904 <SysTick_Config>
 80019bc:	4603      	mov	r3, r0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80019cc:	4b07      	ldr	r3, [pc, #28]	@ (80019ec <HAL_GetCurrentCPUID+0x24>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	091b      	lsrs	r3, r3, #4
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	2b07      	cmp	r3, #7
 80019d8:	d101      	bne.n	80019de <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80019da:	2303      	movs	r3, #3
 80019dc:	e000      	b.n	80019e0 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80019de:	2301      	movs	r3, #1
  }
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 80019f0:	b480      	push	{r7}
 80019f2:	b087      	sub	sp, #28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	460b      	mov	r3, r1
 80019fa:	607a      	str	r2, [r7, #4]
 80019fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d101      	bne.n	8001a0c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e00a      	b.n	8001a22 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d103      	bne.n	8001a1a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	605a      	str	r2, [r3, #4]
      break;
 8001a18:	e002      	b.n	8001a20 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	75fb      	strb	r3, [r7, #23]
      break;
 8001a1e:	bf00      	nop
  }

  return status;
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	371c      	adds	r7, #28
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e003      	b.n	8001a4a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001a48:	2300      	movs	r3, #0
  }
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
	...

08001a58 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2201      	movs	r2, #1
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001a7c:	f7ff ffa4 	bl	80019c8 <HAL_GetCurrentCPUID>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d105      	bne.n	8001a92 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	011a      	lsls	r2, r3, #4
 8001a8a:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac8 <HAL_EXTI_IRQHandler+0x70>)
 8001a8c:	4413      	add	r3, r2
 8001a8e:	617b      	str	r3, [r7, #20]
 8001a90:	e004      	b.n	8001a9c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	011a      	lsls	r2, r3, #4
 8001a96:	4b0d      	ldr	r3, [pc, #52]	@ (8001acc <HAL_EXTI_IRQHandler+0x74>)
 8001a98:	4413      	add	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d009      	beq.n	8001ac0 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d002      	beq.n	8001ac0 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	4798      	blx	r3
    }
  }
}
 8001ac0:	bf00      	nop
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	58000088 	.word	0x58000088
 8001acc:	580000c8 	.word	0x580000c8

08001ad0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b089      	sub	sp, #36	@ 0x24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ada:	2300      	movs	r3, #0
 8001adc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ade:	4b89      	ldr	r3, [pc, #548]	@ (8001d04 <HAL_GPIO_Init+0x234>)
 8001ae0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ae2:	e194      	b.n	8001e0e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	2101      	movs	r1, #1
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 8186 	beq.w	8001e08 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d005      	beq.n	8001b14 <HAL_GPIO_Init+0x44>
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d130      	bne.n	8001b76 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b1a:	69fb      	ldr	r3, [r7, #28]
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	2203      	movs	r2, #3
 8001b20:	fa02 f303 	lsl.w	r3, r2, r3
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	68da      	ldr	r2, [r3, #12]
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69ba      	ldr	r2, [r7, #24]
 8001b42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	4013      	ands	r3, r2
 8001b58:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	091b      	lsrs	r3, r3, #4
 8001b60:	f003 0201 	and.w	r2, r3, #1
 8001b64:	69fb      	ldr	r3, [r7, #28]
 8001b66:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6a:	69ba      	ldr	r2, [r7, #24]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d017      	beq.n	8001bb2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b88:	69fb      	ldr	r3, [r7, #28]
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	2203      	movs	r2, #3
 8001b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b92:	43db      	mvns	r3, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4013      	ands	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	005b      	lsls	r3, r3, #1
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 0303 	and.w	r3, r3, #3
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d123      	bne.n	8001c06 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	08da      	lsrs	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3208      	adds	r2, #8
 8001bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f003 0307 	and.w	r3, r3, #7
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	220f      	movs	r2, #15
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43db      	mvns	r3, r3
 8001bdc:	69ba      	ldr	r2, [r7, #24]
 8001bde:	4013      	ands	r3, r2
 8001be0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	f003 0307 	and.w	r3, r3, #7
 8001bec:	009b      	lsls	r3, r3, #2
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	69ba      	ldr	r2, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	08da      	lsrs	r2, r3, #3
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3208      	adds	r2, #8
 8001c00:	69b9      	ldr	r1, [r7, #24]
 8001c02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	2203      	movs	r2, #3
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 0203 	and.w	r2, r3, #3
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	f000 80e0 	beq.w	8001e08 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c48:	4b2f      	ldr	r3, [pc, #188]	@ (8001d08 <HAL_GPIO_Init+0x238>)
 8001c4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c4e:	4a2e      	ldr	r2, [pc, #184]	@ (8001d08 <HAL_GPIO_Init+0x238>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_GPIO_Init+0x238>)
 8001c5a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c66:	4a29      	ldr	r2, [pc, #164]	@ (8001d0c <HAL_GPIO_Init+0x23c>)
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	089b      	lsrs	r3, r3, #2
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	220f      	movs	r2, #15
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	4013      	ands	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a20      	ldr	r2, [pc, #128]	@ (8001d10 <HAL_GPIO_Init+0x240>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d052      	beq.n	8001d38 <HAL_GPIO_Init+0x268>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a1f      	ldr	r2, [pc, #124]	@ (8001d14 <HAL_GPIO_Init+0x244>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d031      	beq.n	8001cfe <HAL_GPIO_Init+0x22e>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001d18 <HAL_GPIO_Init+0x248>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d02b      	beq.n	8001cfa <HAL_GPIO_Init+0x22a>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a1d      	ldr	r2, [pc, #116]	@ (8001d1c <HAL_GPIO_Init+0x24c>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d025      	beq.n	8001cf6 <HAL_GPIO_Init+0x226>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	@ (8001d20 <HAL_GPIO_Init+0x250>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d01f      	beq.n	8001cf2 <HAL_GPIO_Init+0x222>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d24 <HAL_GPIO_Init+0x254>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d019      	beq.n	8001cee <HAL_GPIO_Init+0x21e>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001d28 <HAL_GPIO_Init+0x258>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d013      	beq.n	8001cea <HAL_GPIO_Init+0x21a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <HAL_GPIO_Init+0x25c>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <HAL_GPIO_Init+0x216>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a18      	ldr	r2, [pc, #96]	@ (8001d30 <HAL_GPIO_Init+0x260>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d007      	beq.n	8001ce2 <HAL_GPIO_Init+0x212>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a17      	ldr	r2, [pc, #92]	@ (8001d34 <HAL_GPIO_Init+0x264>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d101      	bne.n	8001cde <HAL_GPIO_Init+0x20e>
 8001cda:	2309      	movs	r3, #9
 8001cdc:	e02d      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cde:	230a      	movs	r3, #10
 8001ce0:	e02b      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001ce2:	2308      	movs	r3, #8
 8001ce4:	e029      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e027      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cea:	2306      	movs	r3, #6
 8001cec:	e025      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cee:	2305      	movs	r3, #5
 8001cf0:	e023      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cf2:	2304      	movs	r3, #4
 8001cf4:	e021      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	e01f      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	e01d      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e01b      	b.n	8001d3a <HAL_GPIO_Init+0x26a>
 8001d02:	bf00      	nop
 8001d04:	58000080 	.word	0x58000080
 8001d08:	58024400 	.word	0x58024400
 8001d0c:	58000400 	.word	0x58000400
 8001d10:	58020000 	.word	0x58020000
 8001d14:	58020400 	.word	0x58020400
 8001d18:	58020800 	.word	0x58020800
 8001d1c:	58020c00 	.word	0x58020c00
 8001d20:	58021000 	.word	0x58021000
 8001d24:	58021400 	.word	0x58021400
 8001d28:	58021800 	.word	0x58021800
 8001d2c:	58021c00 	.word	0x58021c00
 8001d30:	58022000 	.word	0x58022000
 8001d34:	58022400 	.word	0x58022400
 8001d38:	2300      	movs	r3, #0
 8001d3a:	69fa      	ldr	r2, [r7, #28]
 8001d3c:	f002 0203 	and.w	r2, r2, #3
 8001d40:	0092      	lsls	r2, r2, #2
 8001d42:	4093      	lsls	r3, r2
 8001d44:	69ba      	ldr	r2, [r7, #24]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d4a:	4938      	ldr	r1, [pc, #224]	@ (8001e2c <HAL_GPIO_Init+0x35c>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	4013      	ands	r3, r2
 8001d68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001d7e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001d86:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	43db      	mvns	r3, r3
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4013      	ands	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d003      	beq.n	8001dac <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001dac:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d003      	beq.n	8001dd8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	fa22 f303 	lsr.w	r3, r2, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f47f ae63 	bne.w	8001ae4 <HAL_GPIO_Init+0x14>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	3724      	adds	r7, #36	@ 0x24
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	58000400 	.word	0x58000400

08001e30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	807b      	strh	r3, [r7, #2]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e40:	787b      	ldrb	r3, [r7, #1]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e46:	887a      	ldrh	r2, [r7, #2]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001e4c:	e003      	b.n	8001e56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001e4e:	887b      	ldrh	r3, [r7, #2]
 8001e50:	041a      	lsls	r2, r3, #16
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	619a      	str	r2, [r3, #24]
}
 8001e56:	bf00      	nop
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e6c:	4a08      	ldr	r2, [pc, #32]	@ (8001e90 <HAL_HSEM_FastTake+0x2c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	3320      	adds	r3, #32
 8001e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e76:	4a07      	ldr	r2, [pc, #28]	@ (8001e94 <HAL_HSEM_FastTake+0x30>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d101      	bne.n	8001e80 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	e000      	b.n	8001e82 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	58026400 	.word	0x58026400
 8001e94:	80000300 	.word	0x80000300

08001e98 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001ea2:	4906      	ldr	r1, [pc, #24]	@ (8001ebc <HAL_HSEM_Release+0x24>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	58026400 	.word	0x58026400

08001ec0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001ec8:	4b29      	ldr	r3, [pc, #164]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f003 0307 	and.w	r3, r3, #7
 8001ed0:	2b06      	cmp	r3, #6
 8001ed2:	d00a      	beq.n	8001eea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ed4:	4b26      	ldr	r3, [pc, #152]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e040      	b.n	8001f68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e03e      	b.n	8001f68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001eea:	4b21      	ldr	r3, [pc, #132]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001ef2:	491f      	ldr	r1, [pc, #124]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001efa:	f7ff fc3d 	bl	8001778 <HAL_GetTick>
 8001efe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f00:	e009      	b.n	8001f16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f02:	f7ff fc39 	bl	8001778 <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f10:	d901      	bls.n	8001f16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e028      	b.n	8001f68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001f16:	4b16      	ldr	r3, [pc, #88]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f22:	d1ee      	bne.n	8001f02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b1e      	cmp	r3, #30
 8001f28:	d008      	beq.n	8001f3c <HAL_PWREx_ConfigSupply+0x7c>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001f2e:	d005      	beq.n	8001f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b1d      	cmp	r3, #29
 8001f34:	d002      	beq.n	8001f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b2d      	cmp	r3, #45	@ 0x2d
 8001f3a:	d114      	bne.n	8001f66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001f3c:	f7ff fc1c 	bl	8001778 <HAL_GetTick>
 8001f40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f42:	e009      	b.n	8001f58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001f44:	f7ff fc18 	bl	8001778 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001f52:	d901      	bls.n	8001f58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001f58:	4b05      	ldr	r3, [pc, #20]	@ (8001f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f64:	d1ee      	bne.n	8001f44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	58024800 	.word	0x58024800

08001f74 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08c      	sub	sp, #48	@ 0x30
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	f000 bc48 	b.w	8002818 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 8088 	beq.w	80020a6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b99      	ldr	r3, [pc, #612]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa0:	4b96      	ldr	r3, [pc, #600]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fa8:	2b10      	cmp	r3, #16
 8001faa:	d007      	beq.n	8001fbc <HAL_RCC_OscConfig+0x48>
 8001fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d111      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62>
 8001fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d10c      	bne.n	8001fd6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fbc:	4b8f      	ldr	r3, [pc, #572]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d06d      	beq.n	80020a4 <HAL_RCC_OscConfig+0x130>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d169      	bne.n	80020a4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	f000 bc21 	b.w	8002818 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x7a>
 8001fe0:	4b86      	ldr	r3, [pc, #536]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a85      	ldr	r2, [pc, #532]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fea:	6013      	str	r3, [r2, #0]
 8001fec:	e02e      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10c      	bne.n	8002010 <HAL_RCC_OscConfig+0x9c>
 8001ff6:	4b81      	ldr	r3, [pc, #516]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a80      	ldr	r2, [pc, #512]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8001ffc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002000:	6013      	str	r3, [r2, #0]
 8002002:	4b7e      	ldr	r3, [pc, #504]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a7d      	ldr	r2, [pc, #500]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002008:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800200c:	6013      	str	r3, [r2, #0]
 800200e:	e01d      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002018:	d10c      	bne.n	8002034 <HAL_RCC_OscConfig+0xc0>
 800201a:	4b78      	ldr	r3, [pc, #480]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a77      	ldr	r2, [pc, #476]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002020:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002024:	6013      	str	r3, [r2, #0]
 8002026:	4b75      	ldr	r3, [pc, #468]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a74      	ldr	r2, [pc, #464]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 800202c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002030:	6013      	str	r3, [r2, #0]
 8002032:	e00b      	b.n	800204c <HAL_RCC_OscConfig+0xd8>
 8002034:	4b71      	ldr	r3, [pc, #452]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a70      	ldr	r2, [pc, #448]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 800203a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	4b6e      	ldr	r3, [pc, #440]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a6d      	ldr	r2, [pc, #436]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002046:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800204a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff fb90 	bl	8001778 <HAL_GetTick>
 8002058:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800205c:	f7ff fb8c 	bl	8001778 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b64      	cmp	r3, #100	@ 0x64
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e3d4      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206e:	4b63      	ldr	r3, [pc, #396]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d0f0      	beq.n	800205c <HAL_RCC_OscConfig+0xe8>
 800207a:	e014      	b.n	80020a6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff fb7c 	bl	8001778 <HAL_GetTick>
 8002080:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002084:	f7ff fb78 	bl	8001778 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b64      	cmp	r3, #100	@ 0x64
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e3c0      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002096:	4b59      	ldr	r3, [pc, #356]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x110>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 80ca 	beq.w	8002248 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020b4:	4b51      	ldr	r3, [pc, #324]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020bc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020be:	4b4f      	ldr	r3, [pc, #316]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80020c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80020c4:	6a3b      	ldr	r3, [r7, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d007      	beq.n	80020da <HAL_RCC_OscConfig+0x166>
 80020ca:	6a3b      	ldr	r3, [r7, #32]
 80020cc:	2b18      	cmp	r3, #24
 80020ce:	d156      	bne.n	800217e <HAL_RCC_OscConfig+0x20a>
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d151      	bne.n	800217e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020da:	4b48      	ldr	r3, [pc, #288]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d005      	beq.n	80020f2 <HAL_RCC_OscConfig+0x17e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e392      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80020f2:	4b42      	ldr	r3, [pc, #264]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f023 0219 	bic.w	r2, r3, #25
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	493f      	ldr	r1, [pc, #252]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002104:	f7ff fb38 	bl	8001778 <HAL_GetTick>
 8002108:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800210a:	e008      	b.n	800211e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800210c:	f7ff fb34 	bl	8001778 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d901      	bls.n	800211e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e37c      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800211e:	4b37      	ldr	r3, [pc, #220]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d0f0      	beq.n	800210c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800212a:	f7ff fb31 	bl	8001790 <HAL_GetREVID>
 800212e:	4603      	mov	r3, r0
 8002130:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002134:	4293      	cmp	r3, r2
 8002136:	d817      	bhi.n	8002168 <HAL_RCC_OscConfig+0x1f4>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	691b      	ldr	r3, [r3, #16]
 800213c:	2b40      	cmp	r3, #64	@ 0x40
 800213e:	d108      	bne.n	8002152 <HAL_RCC_OscConfig+0x1de>
 8002140:	4b2e      	ldr	r3, [pc, #184]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002148:	4a2c      	ldr	r2, [pc, #176]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 800214a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800214e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002150:	e07a      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002152:	4b2a      	ldr	r3, [pc, #168]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	031b      	lsls	r3, r3, #12
 8002160:	4926      	ldr	r1, [pc, #152]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002166:	e06f      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002168:	4b24      	ldr	r3, [pc, #144]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	061b      	lsls	r3, r3, #24
 8002176:	4921      	ldr	r1, [pc, #132]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002178:	4313      	orrs	r3, r2
 800217a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800217c:	e064      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d047      	beq.n	8002216 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002186:	4b1d      	ldr	r3, [pc, #116]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f023 0219 	bic.w	r2, r3, #25
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	491a      	ldr	r1, [pc, #104]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 8002194:	4313      	orrs	r3, r2
 8002196:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff faee 	bl	8001778 <HAL_GetTick>
 800219c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a0:	f7ff faea 	bl	8001778 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e332      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b2:	4b12      	ldr	r3, [pc, #72]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0304 	and.w	r3, r3, #4
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0f0      	beq.n	80021a0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	f7ff fae7 	bl	8001790 <HAL_GetREVID>
 80021c2:	4603      	mov	r3, r0
 80021c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d819      	bhi.n	8002200 <HAL_RCC_OscConfig+0x28c>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	691b      	ldr	r3, [r3, #16]
 80021d0:	2b40      	cmp	r3, #64	@ 0x40
 80021d2:	d108      	bne.n	80021e6 <HAL_RCC_OscConfig+0x272>
 80021d4:	4b09      	ldr	r3, [pc, #36]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80021dc:	4a07      	ldr	r2, [pc, #28]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80021de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e2:	6053      	str	r3, [r2, #4]
 80021e4:	e030      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
 80021e6:	4b05      	ldr	r3, [pc, #20]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	031b      	lsls	r3, r3, #12
 80021f4:	4901      	ldr	r1, [pc, #4]	@ (80021fc <HAL_RCC_OscConfig+0x288>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	604b      	str	r3, [r1, #4]
 80021fa:	e025      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
 80021fc:	58024400 	.word	0x58024400
 8002200:	4b9a      	ldr	r3, [pc, #616]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	4997      	ldr	r1, [pc, #604]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
 8002214:	e018      	b.n	8002248 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002216:	4b95      	ldr	r3, [pc, #596]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a94      	ldr	r2, [pc, #592]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800221c:	f023 0301 	bic.w	r3, r3, #1
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff faa9 	bl	8001778 <HAL_GetTick>
 8002226:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff faa5 	bl	8001778 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e2ed      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800223c:	4b8b      	ldr	r3, [pc, #556]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d1f0      	bne.n	800222a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0310 	and.w	r3, r3, #16
 8002250:	2b00      	cmp	r3, #0
 8002252:	f000 80a9 	beq.w	80023a8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002256:	4b85      	ldr	r3, [pc, #532]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800225e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002260:	4b82      	ldr	r3, [pc, #520]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002264:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	2b08      	cmp	r3, #8
 800226a:	d007      	beq.n	800227c <HAL_RCC_OscConfig+0x308>
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	2b18      	cmp	r3, #24
 8002270:	d13a      	bne.n	80022e8 <HAL_RCC_OscConfig+0x374>
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	f003 0303 	and.w	r3, r3, #3
 8002278:	2b01      	cmp	r3, #1
 800227a:	d135      	bne.n	80022e8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800227c:	4b7b      	ldr	r3, [pc, #492]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_OscConfig+0x320>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	2b80      	cmp	r3, #128	@ 0x80
 800228e:	d001      	beq.n	8002294 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e2c1      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002294:	f7ff fa7c 	bl	8001790 <HAL_GetREVID>
 8002298:	4603      	mov	r3, r0
 800229a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800229e:	4293      	cmp	r3, r2
 80022a0:	d817      	bhi.n	80022d2 <HAL_RCC_OscConfig+0x35e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	2b20      	cmp	r3, #32
 80022a8:	d108      	bne.n	80022bc <HAL_RCC_OscConfig+0x348>
 80022aa:	4b70      	ldr	r3, [pc, #448]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80022b2:	4a6e      	ldr	r2, [pc, #440]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80022b8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022ba:	e075      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022bc:	4b6b      	ldr	r3, [pc, #428]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	069b      	lsls	r3, r3, #26
 80022ca:	4968      	ldr	r1, [pc, #416]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022d0:	e06a      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80022d2:	4b66      	ldr	r3, [pc, #408]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	061b      	lsls	r3, r3, #24
 80022e0:	4962      	ldr	r1, [pc, #392]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80022e6:	e05f      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	69db      	ldr	r3, [r3, #28]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d042      	beq.n	8002376 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80022f0:	4b5e      	ldr	r3, [pc, #376]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a5d      	ldr	r2, [pc, #372]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80022f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80022fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7ff fa3c 	bl	8001778 <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002304:	f7ff fa38 	bl	8001778 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b02      	cmp	r3, #2
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e280      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002316:	4b55      	ldr	r3, [pc, #340]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002322:	f7ff fa35 	bl	8001790 <HAL_GetREVID>
 8002326:	4603      	mov	r3, r0
 8002328:	f241 0203 	movw	r2, #4099	@ 0x1003
 800232c:	4293      	cmp	r3, r2
 800232e:	d817      	bhi.n	8002360 <HAL_RCC_OscConfig+0x3ec>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	2b20      	cmp	r3, #32
 8002336:	d108      	bne.n	800234a <HAL_RCC_OscConfig+0x3d6>
 8002338:	4b4c      	ldr	r3, [pc, #304]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002340:	4a4a      	ldr	r2, [pc, #296]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002346:	6053      	str	r3, [r2, #4]
 8002348:	e02e      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
 800234a:	4b48      	ldr	r3, [pc, #288]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	069b      	lsls	r3, r3, #26
 8002358:	4944      	ldr	r1, [pc, #272]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]
 800235e:	e023      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
 8002360:	4b42      	ldr	r3, [pc, #264]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a1b      	ldr	r3, [r3, #32]
 800236c:	061b      	lsls	r3, r3, #24
 800236e:	493f      	ldr	r1, [pc, #252]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e018      	b.n	80023a8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002376:	4b3d      	ldr	r3, [pc, #244]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a3c      	ldr	r2, [pc, #240]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800237c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002380:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002382:	f7ff f9f9 	bl	8001778 <HAL_GetTick>
 8002386:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002388:	e008      	b.n	800239c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800238a:	f7ff f9f5 	bl	8001778 <HAL_GetTick>
 800238e:	4602      	mov	r2, r0
 8002390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d901      	bls.n	800239c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002398:	2303      	movs	r3, #3
 800239a:	e23d      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800239c:	4b33      	ldr	r3, [pc, #204]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d1f0      	bne.n	800238a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0308 	and.w	r3, r3, #8
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d036      	beq.n	8002422 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d019      	beq.n	80023f0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023bc:	4b2b      	ldr	r3, [pc, #172]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023c0:	4a2a      	ldr	r2, [pc, #168]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	f043 0301 	orr.w	r3, r3, #1
 80023c6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023c8:	f7ff f9d6 	bl	8001778 <HAL_GetTick>
 80023cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d0:	f7ff f9d2 	bl	8001778 <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e21a      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80023e2:	4b22      	ldr	r3, [pc, #136]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023e6:	f003 0302 	and.w	r3, r3, #2
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x45c>
 80023ee:	e018      	b.n	8002422 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023f0:	4b1e      	ldr	r3, [pc, #120]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023f4:	4a1d      	ldr	r2, [pc, #116]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 80023f6:	f023 0301 	bic.w	r3, r3, #1
 80023fa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff f9bc 	bl	8001778 <HAL_GetTick>
 8002400:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002402:	e008      	b.n	8002416 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002404:	f7ff f9b8 	bl	8001778 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	2b02      	cmp	r3, #2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e200      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002416:	4b15      	ldr	r3, [pc, #84]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002418:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d1f0      	bne.n	8002404 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0320 	and.w	r3, r3, #32
 800242a:	2b00      	cmp	r3, #0
 800242c:	d039      	beq.n	80024a2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	699b      	ldr	r3, [r3, #24]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d01c      	beq.n	8002470 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002436:	4b0d      	ldr	r3, [pc, #52]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a0c      	ldr	r2, [pc, #48]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800243c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002440:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002442:	f7ff f999 	bl	8001778 <HAL_GetTick>
 8002446:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002448:	e008      	b.n	800245c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800244a:	f7ff f995 	bl	8001778 <HAL_GetTick>
 800244e:	4602      	mov	r2, r0
 8002450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	2b02      	cmp	r3, #2
 8002456:	d901      	bls.n	800245c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002458:	2303      	movs	r3, #3
 800245a:	e1dd      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800245c:	4b03      	ldr	r3, [pc, #12]	@ (800246c <HAL_RCC_OscConfig+0x4f8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0f0      	beq.n	800244a <HAL_RCC_OscConfig+0x4d6>
 8002468:	e01b      	b.n	80024a2 <HAL_RCC_OscConfig+0x52e>
 800246a:	bf00      	nop
 800246c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002470:	4b9b      	ldr	r3, [pc, #620]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a9a      	ldr	r2, [pc, #616]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002476:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800247a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800247c:	f7ff f97c 	bl	8001778 <HAL_GetTick>
 8002480:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002482:	e008      	b.n	8002496 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002484:	f7ff f978 	bl	8001778 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d901      	bls.n	8002496 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	e1c0      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002496:	4b92      	ldr	r3, [pc, #584]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1f0      	bne.n	8002484 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0304 	and.w	r3, r3, #4
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 8081 	beq.w	80025b2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80024b0:	4b8c      	ldr	r3, [pc, #560]	@ (80026e4 <HAL_RCC_OscConfig+0x770>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a8b      	ldr	r2, [pc, #556]	@ (80026e4 <HAL_RCC_OscConfig+0x770>)
 80024b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024bc:	f7ff f95c 	bl	8001778 <HAL_GetTick>
 80024c0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024c2:	e008      	b.n	80024d6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024c4:	f7ff f958 	bl	8001778 <HAL_GetTick>
 80024c8:	4602      	mov	r2, r0
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	2b64      	cmp	r3, #100	@ 0x64
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e1a0      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80024d6:	4b83      	ldr	r3, [pc, #524]	@ (80026e4 <HAL_RCC_OscConfig+0x770>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d106      	bne.n	80024f8 <HAL_RCC_OscConfig+0x584>
 80024ea:	4b7d      	ldr	r3, [pc, #500]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024ee:	4a7c      	ldr	r2, [pc, #496]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80024f0:	f043 0301 	orr.w	r3, r3, #1
 80024f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024f6:	e02d      	b.n	8002554 <HAL_RCC_OscConfig+0x5e0>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x5a6>
 8002500:	4b77      	ldr	r3, [pc, #476]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002504:	4a76      	ldr	r2, [pc, #472]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	6713      	str	r3, [r2, #112]	@ 0x70
 800250c:	4b74      	ldr	r3, [pc, #464]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002510:	4a73      	ldr	r2, [pc, #460]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002512:	f023 0304 	bic.w	r3, r3, #4
 8002516:	6713      	str	r3, [r2, #112]	@ 0x70
 8002518:	e01c      	b.n	8002554 <HAL_RCC_OscConfig+0x5e0>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	2b05      	cmp	r3, #5
 8002520:	d10c      	bne.n	800253c <HAL_RCC_OscConfig+0x5c8>
 8002522:	4b6f      	ldr	r3, [pc, #444]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002526:	4a6e      	ldr	r2, [pc, #440]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002528:	f043 0304 	orr.w	r3, r3, #4
 800252c:	6713      	str	r3, [r2, #112]	@ 0x70
 800252e:	4b6c      	ldr	r3, [pc, #432]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002532:	4a6b      	ldr	r2, [pc, #428]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	6713      	str	r3, [r2, #112]	@ 0x70
 800253a:	e00b      	b.n	8002554 <HAL_RCC_OscConfig+0x5e0>
 800253c:	4b68      	ldr	r3, [pc, #416]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800253e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002540:	4a67      	ldr	r2, [pc, #412]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002542:	f023 0301 	bic.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	@ 0x70
 8002548:	4b65      	ldr	r3, [pc, #404]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800254a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800254c:	4a64      	ldr	r2, [pc, #400]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800254e:	f023 0304 	bic.w	r3, r3, #4
 8002552:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d015      	beq.n	8002588 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800255c:	f7ff f90c 	bl	8001778 <HAL_GetTick>
 8002560:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002562:	e00a      	b.n	800257a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002564:	f7ff f908 	bl	8001778 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e14e      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800257a:	4b59      	ldr	r3, [pc, #356]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0ee      	beq.n	8002564 <HAL_RCC_OscConfig+0x5f0>
 8002586:	e014      	b.n	80025b2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002588:	f7ff f8f6 	bl	8001778 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800258e:	e00a      	b.n	80025a6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002590:	f7ff f8f2 	bl	8001778 <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e138      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025a6:	4b4e      	ldr	r3, [pc, #312]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1ee      	bne.n	8002590 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f000 812d 	beq.w	8002816 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80025bc:	4b48      	ldr	r3, [pc, #288]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025c4:	2b18      	cmp	r3, #24
 80025c6:	f000 80bd 	beq.w	8002744 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	f040 809e 	bne.w	8002710 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025d4:	4b42      	ldr	r3, [pc, #264]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a41      	ldr	r2, [pc, #260]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80025da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7ff f8ca 	bl	8001778 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7ff f8c6 	bl	8001778 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e10e      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025fa:	4b39      	ldr	r3, [pc, #228]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002606:	4b36      	ldr	r3, [pc, #216]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002608:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800260a:	4b37      	ldr	r3, [pc, #220]	@ (80026e8 <HAL_RCC_OscConfig+0x774>)
 800260c:	4013      	ands	r3, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	430a      	orrs	r2, r1
 800261a:	4931      	ldr	r1, [pc, #196]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800261c:	4313      	orrs	r3, r2
 800261e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	3b01      	subs	r3, #1
 8002626:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800262e:	3b01      	subs	r3, #1
 8002630:	025b      	lsls	r3, r3, #9
 8002632:	b29b      	uxth	r3, r3
 8002634:	431a      	orrs	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800263a:	3b01      	subs	r3, #1
 800263c:	041b      	lsls	r3, r3, #16
 800263e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002648:	3b01      	subs	r3, #1
 800264a:	061b      	lsls	r3, r3, #24
 800264c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002650:	4923      	ldr	r1, [pc, #140]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002652:	4313      	orrs	r3, r2
 8002654:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002656:	4b22      	ldr	r3, [pc, #136]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800265a:	4a21      	ldr	r2, [pc, #132]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002662:	4b1f      	ldr	r3, [pc, #124]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002664:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002666:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <HAL_RCC_OscConfig+0x778>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800266e:	00d2      	lsls	r2, r2, #3
 8002670:	491b      	ldr	r1, [pc, #108]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002676:	4b1a      	ldr	r3, [pc, #104]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800267a:	f023 020c 	bic.w	r2, r3, #12
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	4917      	ldr	r1, [pc, #92]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002684:	4313      	orrs	r3, r2
 8002686:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002688:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800268a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800268c:	f023 0202 	bic.w	r2, r3, #2
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002694:	4912      	ldr	r1, [pc, #72]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 8002696:	4313      	orrs	r3, r2
 8002698:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800269a:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 800269c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800269e:	4a10      	ldr	r2, [pc, #64]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026a6:	4b0e      	ldr	r3, [pc, #56]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	4a0d      	ldr	r2, [pc, #52]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80026b2:	4b0b      	ldr	r3, [pc, #44]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80026be:	4b08      	ldr	r3, [pc, #32]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c2:	4a07      	ldr	r2, [pc, #28]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ca:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a04      	ldr	r2, [pc, #16]	@ (80026e0 <HAL_RCC_OscConfig+0x76c>)
 80026d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80026d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d6:	f7ff f84f 	bl	8001778 <HAL_GetTick>
 80026da:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026dc:	e011      	b.n	8002702 <HAL_RCC_OscConfig+0x78e>
 80026de:	bf00      	nop
 80026e0:	58024400 	.word	0x58024400
 80026e4:	58024800 	.word	0x58024800
 80026e8:	fffffc0c 	.word	0xfffffc0c
 80026ec:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026f0:	f7ff f842 	bl	8001778 <HAL_GetTick>
 80026f4:	4602      	mov	r2, r0
 80026f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026f8:	1ad3      	subs	r3, r2, r3
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e08a      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002702:	4b47      	ldr	r3, [pc, #284]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d0f0      	beq.n	80026f0 <HAL_RCC_OscConfig+0x77c>
 800270e:	e082      	b.n	8002816 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b43      	ldr	r3, [pc, #268]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a42      	ldr	r2, [pc, #264]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002716:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800271a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7ff f82c 	bl	8001778 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002724:	f7ff f828 	bl	8001778 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e070      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002736:	4b3a      	ldr	r3, [pc, #232]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1f0      	bne.n	8002724 <HAL_RCC_OscConfig+0x7b0>
 8002742:	e068      	b.n	8002816 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002744:	4b36      	ldr	r3, [pc, #216]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002748:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800274a:	4b35      	ldr	r3, [pc, #212]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800274e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002754:	2b01      	cmp	r3, #1
 8002756:	d031      	beq.n	80027bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	f003 0203 	and.w	r2, r3, #3
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002762:	429a      	cmp	r2, r3
 8002764:	d12a      	bne.n	80027bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	091b      	lsrs	r3, r3, #4
 800276a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	429a      	cmp	r2, r3
 8002774:	d122      	bne.n	80027bc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002780:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002782:	429a      	cmp	r2, r3
 8002784:	d11a      	bne.n	80027bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	0a5b      	lsrs	r3, r3, #9
 800278a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002792:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002794:	429a      	cmp	r2, r3
 8002796:	d111      	bne.n	80027bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d108      	bne.n	80027bc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	0e1b      	lsrs	r3, r3, #24
 80027ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027b6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d001      	beq.n	80027c0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e02b      	b.n	8002818 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80027c0:	4b17      	ldr	r3, [pc, #92]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 80027c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80027ca:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027d0:	693a      	ldr	r2, [r7, #16]
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d01f      	beq.n	8002816 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80027d6:	4b12      	ldr	r3, [pc, #72]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	4a11      	ldr	r2, [pc, #68]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027e2:	f7fe ffc9 	bl	8001778 <HAL_GetTick>
 80027e6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80027e8:	bf00      	nop
 80027ea:	f7fe ffc5 	bl	8001778 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d0f9      	beq.n	80027ea <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80027f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 80027f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80027fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002824 <HAL_RCC_OscConfig+0x8b0>)
 80027fc:	4013      	ands	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002802:	00d2      	lsls	r2, r2, #3
 8002804:	4906      	ldr	r1, [pc, #24]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002806:	4313      	orrs	r3, r2
 8002808:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800280a:	4b05      	ldr	r3, [pc, #20]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 800280c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800280e:	4a04      	ldr	r2, [pc, #16]	@ (8002820 <HAL_RCC_OscConfig+0x8ac>)
 8002810:	f043 0301 	orr.w	r3, r3, #1
 8002814:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3730      	adds	r7, #48	@ 0x30
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	58024400 	.word	0x58024400
 8002824:	ffff0007 	.word	0xffff0007

08002828 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b086      	sub	sp, #24
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e19c      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800283c:	4b8a      	ldr	r3, [pc, #552]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 030f 	and.w	r3, r3, #15
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	429a      	cmp	r2, r3
 8002848:	d910      	bls.n	800286c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284a:	4b87      	ldr	r3, [pc, #540]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 020f 	bic.w	r2, r3, #15
 8002852:	4985      	ldr	r1, [pc, #532]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	4313      	orrs	r3, r2
 8002858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b83      	ldr	r3, [pc, #524]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e184      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	4b7b      	ldr	r3, [pc, #492]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002884:	429a      	cmp	r2, r3
 8002886:	d908      	bls.n	800289a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002888:	4b78      	ldr	r3, [pc, #480]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 800288a:	699b      	ldr	r3, [r3, #24]
 800288c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	4975      	ldr	r1, [pc, #468]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002896:	4313      	orrs	r3, r2
 8002898:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0308 	and.w	r3, r3, #8
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	695a      	ldr	r2, [r3, #20]
 80028aa:	4b70      	ldr	r3, [pc, #448]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d908      	bls.n	80028c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80028b6:	4b6d      	ldr	r3, [pc, #436]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028b8:	69db      	ldr	r3, [r3, #28]
 80028ba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	496a      	ldr	r1, [pc, #424]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0310 	and.w	r3, r3, #16
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d010      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	699a      	ldr	r2, [r3, #24]
 80028d8:	4b64      	ldr	r3, [pc, #400]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028da:	69db      	ldr	r3, [r3, #28]
 80028dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d908      	bls.n	80028f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80028e4:	4b61      	ldr	r3, [pc, #388]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028e6:	69db      	ldr	r3, [r3, #28]
 80028e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	699b      	ldr	r3, [r3, #24]
 80028f0:	495e      	ldr	r1, [pc, #376]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0320 	and.w	r3, r3, #32
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d010      	beq.n	8002924 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69da      	ldr	r2, [r3, #28]
 8002906:	4b59      	ldr	r3, [pc, #356]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002908:	6a1b      	ldr	r3, [r3, #32]
 800290a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800290e:	429a      	cmp	r2, r3
 8002910:	d908      	bls.n	8002924 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002912:	4b56      	ldr	r3, [pc, #344]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
 800291e:	4953      	ldr	r1, [pc, #332]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002920:	4313      	orrs	r3, r2
 8002922:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68da      	ldr	r2, [r3, #12]
 8002934:	4b4d      	ldr	r3, [pc, #308]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	429a      	cmp	r2, r3
 800293e:	d908      	bls.n	8002952 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002940:	4b4a      	ldr	r3, [pc, #296]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	f023 020f 	bic.w	r2, r3, #15
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4947      	ldr	r1, [pc, #284]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 800294e:	4313      	orrs	r3, r2
 8002950:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0301 	and.w	r3, r3, #1
 800295a:	2b00      	cmp	r3, #0
 800295c:	d055      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800295e:	4b43      	ldr	r3, [pc, #268]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	4940      	ldr	r1, [pc, #256]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 800296c:	4313      	orrs	r3, r2
 800296e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d107      	bne.n	8002988 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002978:	4b3c      	ldr	r3, [pc, #240]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d121      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0f6      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002990:	4b36      	ldr	r3, [pc, #216]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d115      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0ea      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029a8:	4b30      	ldr	r3, [pc, #192]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d109      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0de      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80029b8:	4b2c      	ldr	r3, [pc, #176]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0d6      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029c8:	4b28      	ldr	r3, [pc, #160]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	f023 0207 	bic.w	r2, r3, #7
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	4925      	ldr	r1, [pc, #148]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029da:	f7fe fecd 	bl	8001778 <HAL_GetTick>
 80029de:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e0:	e00a      	b.n	80029f8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e2:	f7fe fec9 	bl	8001778 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d901      	bls.n	80029f8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e0be      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	4b1c      	ldr	r3, [pc, #112]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 80029fa:	691b      	ldr	r3, [r3, #16]
 80029fc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	00db      	lsls	r3, r3, #3
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d1eb      	bne.n	80029e2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d010      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	68da      	ldr	r2, [r3, #12]
 8002a1a:	4b14      	ldr	r3, [pc, #80]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d208      	bcs.n	8002a38 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a26:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	f023 020f 	bic.w	r2, r3, #15
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	490e      	ldr	r1, [pc, #56]	@ (8002a6c <HAL_RCC_ClockConfig+0x244>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a38:	4b0b      	ldr	r3, [pc, #44]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 030f 	and.w	r3, r3, #15
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d214      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a46:	4b08      	ldr	r3, [pc, #32]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f023 020f 	bic.w	r2, r3, #15
 8002a4e:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a56:	4b04      	ldr	r3, [pc, #16]	@ (8002a68 <HAL_RCC_ClockConfig+0x240>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 030f 	and.w	r3, r3, #15
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d005      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e086      	b.n	8002b76 <HAL_RCC_ClockConfig+0x34e>
 8002a68:	52002000 	.word	0x52002000
 8002a6c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	4b3f      	ldr	r3, [pc, #252]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d208      	bcs.n	8002a9e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a8c:	4b3c      	ldr	r3, [pc, #240]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002a8e:	699b      	ldr	r3, [r3, #24]
 8002a90:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	4939      	ldr	r1, [pc, #228]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0308 	and.w	r3, r3, #8
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	4b34      	ldr	r3, [pc, #208]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002ab0:	69db      	ldr	r3, [r3, #28]
 8002ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d208      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002aba:	4b31      	ldr	r3, [pc, #196]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	492e      	ldr	r1, [pc, #184]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	699a      	ldr	r2, [r3, #24]
 8002adc:	4b28      	ldr	r3, [pc, #160]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d208      	bcs.n	8002afa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ae8:	4b25      	ldr	r3, [pc, #148]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	4922      	ldr	r1, [pc, #136]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d010      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69da      	ldr	r2, [r3, #28]
 8002b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
 8002b0e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d208      	bcs.n	8002b28 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002b16:	4b1a      	ldr	r3, [pc, #104]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002b18:	6a1b      	ldr	r3, [r3, #32]
 8002b1a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	4917      	ldr	r1, [pc, #92]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b28:	f000 f834 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	4b14      	ldr	r3, [pc, #80]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	0a1b      	lsrs	r3, r3, #8
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	4912      	ldr	r1, [pc, #72]	@ (8002b84 <HAL_RCC_ClockConfig+0x35c>)
 8002b3a:	5ccb      	ldrb	r3, [r1, r3]
 8002b3c:	f003 031f 	and.w	r3, r3, #31
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
 8002b44:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b46:	4b0e      	ldr	r3, [pc, #56]	@ (8002b80 <HAL_RCC_ClockConfig+0x358>)
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	4a0d      	ldr	r2, [pc, #52]	@ (8002b84 <HAL_RCC_ClockConfig+0x35c>)
 8002b50:	5cd3      	ldrb	r3, [r2, r3]
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b88 <HAL_RCC_ClockConfig+0x360>)
 8002b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b60:	4a0a      	ldr	r2, [pc, #40]	@ (8002b8c <HAL_RCC_ClockConfig+0x364>)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002b66:	4b0a      	ldr	r3, [pc, #40]	@ (8002b90 <HAL_RCC_ClockConfig+0x368>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f7fe fdba 	bl	80016e4 <HAL_InitTick>
 8002b70:	4603      	mov	r3, r0
 8002b72:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3718      	adds	r7, #24
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	58024400 	.word	0x58024400
 8002b84:	080062c0 	.word	0x080062c0
 8002b88:	24000004 	.word	0x24000004
 8002b8c:	24000000 	.word	0x24000000
 8002b90:	2400002c 	.word	0x2400002c

08002b94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b089      	sub	sp, #36	@ 0x24
 8002b98:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b9a:	4bb3      	ldr	r3, [pc, #716]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ba2:	2b18      	cmp	r3, #24
 8002ba4:	f200 8155 	bhi.w	8002e52 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8002bb0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bae:	bf00      	nop
 8002bb0:	08002c15 	.word	0x08002c15
 8002bb4:	08002e53 	.word	0x08002e53
 8002bb8:	08002e53 	.word	0x08002e53
 8002bbc:	08002e53 	.word	0x08002e53
 8002bc0:	08002e53 	.word	0x08002e53
 8002bc4:	08002e53 	.word	0x08002e53
 8002bc8:	08002e53 	.word	0x08002e53
 8002bcc:	08002e53 	.word	0x08002e53
 8002bd0:	08002c3b 	.word	0x08002c3b
 8002bd4:	08002e53 	.word	0x08002e53
 8002bd8:	08002e53 	.word	0x08002e53
 8002bdc:	08002e53 	.word	0x08002e53
 8002be0:	08002e53 	.word	0x08002e53
 8002be4:	08002e53 	.word	0x08002e53
 8002be8:	08002e53 	.word	0x08002e53
 8002bec:	08002e53 	.word	0x08002e53
 8002bf0:	08002c41 	.word	0x08002c41
 8002bf4:	08002e53 	.word	0x08002e53
 8002bf8:	08002e53 	.word	0x08002e53
 8002bfc:	08002e53 	.word	0x08002e53
 8002c00:	08002e53 	.word	0x08002e53
 8002c04:	08002e53 	.word	0x08002e53
 8002c08:	08002e53 	.word	0x08002e53
 8002c0c:	08002e53 	.word	0x08002e53
 8002c10:	08002c47 	.word	0x08002c47
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c14:	4b94      	ldr	r3, [pc, #592]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0320 	and.w	r3, r3, #32
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d009      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c20:	4b91      	ldr	r3, [pc, #580]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	08db      	lsrs	r3, r3, #3
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	4a90      	ldr	r2, [pc, #576]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002c32:	e111      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002c34:	4b8d      	ldr	r3, [pc, #564]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002c36:	61bb      	str	r3, [r7, #24]
      break;
 8002c38:	e10e      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002c3a:	4b8d      	ldr	r3, [pc, #564]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c3c:	61bb      	str	r3, [r7, #24]
      break;
 8002c3e:	e10b      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002c40:	4b8c      	ldr	r3, [pc, #560]	@ (8002e74 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002c42:	61bb      	str	r3, [r7, #24]
      break;
 8002c44:	e108      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c46:	4b88      	ldr	r3, [pc, #544]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002c50:	4b85      	ldr	r3, [pc, #532]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c54:	091b      	lsrs	r3, r3, #4
 8002c56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c5a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002c5c:	4b82      	ldr	r3, [pc, #520]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002c66:	4b80      	ldr	r3, [pc, #512]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6a:	08db      	lsrs	r3, r3, #3
 8002c6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	fb02 f303 	mul.w	r3, r2, r3
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c7e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f000 80e1 	beq.w	8002e4c <HAL_RCC_GetSysClockFreq+0x2b8>
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	f000 8083 	beq.w	8002d98 <HAL_RCC_GetSysClockFreq+0x204>
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b02      	cmp	r3, #2
 8002c96:	f200 80a1 	bhi.w	8002ddc <HAL_RCC_GetSysClockFreq+0x248>
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x114>
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d056      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002ca6:	e099      	b.n	8002ddc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ca8:	4b6f      	ldr	r3, [pc, #444]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d02d      	beq.n	8002d10 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cb4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002e6c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	ee07 3a90 	vmov	s15, r3
 8002ccc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	ee07 3a90 	vmov	s15, r3
 8002cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cde:	4b62      	ldr	r3, [pc, #392]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cee:	ed97 6a02 	vldr	s12, [r7, #8]
 8002cf2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002d0e:	e087      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002e7c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d22:	4b51      	ldr	r3, [pc, #324]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d32:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d36:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d52:	e065      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002e80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002d62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d66:	4b40      	ldr	r3, [pc, #256]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d6e:	ee07 3a90 	vmov	s15, r3
 8002d72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d7a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d92:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002d96:	e043      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002e84 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002daa:	4b2f      	ldr	r3, [pc, #188]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dbe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dda:	e021      	b.n	8002e20 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002e80 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b1e      	ldr	r3, [pc, #120]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002e78 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e1e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e24:	0a5b      	lsrs	r3, r3, #9
 8002e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	ee07 3a90 	vmov	s15, r3
 8002e34:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e38:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e44:	ee17 3a90 	vmov	r3, s15
 8002e48:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002e4a:	e005      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	61bb      	str	r3, [r7, #24]
      break;
 8002e50:	e002      	b.n	8002e58 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002e52:	4b07      	ldr	r3, [pc, #28]	@ (8002e70 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002e54:	61bb      	str	r3, [r7, #24]
      break;
 8002e56:	bf00      	nop
  }

  return sysclockfreq;
 8002e58:	69bb      	ldr	r3, [r7, #24]
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3724      	adds	r7, #36	@ 0x24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	58024400 	.word	0x58024400
 8002e6c:	03d09000 	.word	0x03d09000
 8002e70:	003d0900 	.word	0x003d0900
 8002e74:	017d7840 	.word	0x017d7840
 8002e78:	46000000 	.word	0x46000000
 8002e7c:	4c742400 	.word	0x4c742400
 8002e80:	4a742400 	.word	0x4a742400
 8002e84:	4bbebc20 	.word	0x4bbebc20

08002e88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002e8e:	f7ff fe81 	bl	8002b94 <HAL_RCC_GetSysClockFreq>
 8002e92:	4602      	mov	r2, r0
 8002e94:	4b10      	ldr	r3, [pc, #64]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	0a1b      	lsrs	r3, r3, #8
 8002e9a:	f003 030f 	and.w	r3, r3, #15
 8002e9e:	490f      	ldr	r1, [pc, #60]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x54>)
 8002ea0:	5ccb      	ldrb	r3, [r1, r3]
 8002ea2:	f003 031f 	and.w	r3, r3, #31
 8002ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8002eaa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eac:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	4a09      	ldr	r2, [pc, #36]	@ (8002edc <HAL_RCC_GetHCLKFreq+0x54>)
 8002eb6:	5cd3      	ldrb	r3, [r2, r3]
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	4a07      	ldr	r2, [pc, #28]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ec4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ec6:	4a07      	ldr	r2, [pc, #28]	@ (8002ee4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ecc:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3708      	adds	r7, #8
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	58024400 	.word	0x58024400
 8002edc:	080062c0 	.word	0x080062c0
 8002ee0:	24000004 	.word	0x24000004
 8002ee4:	24000000 	.word	0x24000000

08002ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002eec:	f7ff ffcc 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	4b06      	ldr	r3, [pc, #24]	@ (8002f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	f003 0307 	and.w	r3, r3, #7
 8002efc:	4904      	ldr	r1, [pc, #16]	@ (8002f10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002efe:	5ccb      	ldrb	r3, [r1, r3]
 8002f00:	f003 031f 	and.w	r3, r3, #31
 8002f04:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	58024400 	.word	0x58024400
 8002f10:	080062c0 	.word	0x080062c0

08002f14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002f18:	f7ff ffb6 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	4b06      	ldr	r3, [pc, #24]	@ (8002f38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	0a1b      	lsrs	r3, r3, #8
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	4904      	ldr	r1, [pc, #16]	@ (8002f3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f2a:	5ccb      	ldrb	r3, [r1, r3]
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	080062c0 	.word	0x080062c0

08002f40 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002f44:	f7ff ffa0 	bl	8002e88 <HAL_RCC_GetHCLKFreq>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	4b06      	ldr	r3, [pc, #24]	@ (8002f64 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002f4c:	6a1b      	ldr	r3, [r3, #32]
 8002f4e:	091b      	lsrs	r3, r3, #4
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	4904      	ldr	r1, [pc, #16]	@ (8002f68 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002f56:	5ccb      	ldrb	r3, [r1, r3]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	58024400 	.word	0x58024400
 8002f68:	080062c0 	.word	0x080062c0

08002f6c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	@ 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f74:	4ba1      	ldr	r3, [pc, #644]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	f003 0303 	and.w	r3, r3, #3
 8002f7c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002f7e:	4b9f      	ldr	r3, [pc, #636]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f82:	0b1b      	lsrs	r3, r3, #12
 8002f84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f88:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002f8a:	4b9c      	ldr	r3, [pc, #624]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002f96:	4b99      	ldr	r3, [pc, #612]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f9a:	08db      	lsrs	r3, r3, #3
 8002f9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	ee07 3a90 	vmov	s15, r3
 8002faa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	f000 8111 	beq.w	80031dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	f000 8083 	beq.w	80030c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	f200 80a1 	bhi.w	800310c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d003      	beq.n	8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d056      	beq.n	8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002fd6:	e099      	b.n	800310c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fd8:	4b88      	ldr	r3, [pc, #544]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0320 	and.w	r3, r3, #32
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d02d      	beq.n	8003040 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fe4:	4b85      	ldr	r3, [pc, #532]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	08db      	lsrs	r3, r3, #3
 8002fea:	f003 0303 	and.w	r3, r3, #3
 8002fee:	4a84      	ldr	r2, [pc, #528]	@ (8003200 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	ee07 3a90 	vmov	s15, r3
 8003006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b7b      	ldr	r3, [pc, #492]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003022:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800303e:	e087      	b.n	8003150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003208 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b6a      	ldr	r3, [pc, #424]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a03 	vldr	s12, [r7, #12]
 8003066:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003082:	e065      	b.n	8003150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800320c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b59      	ldr	r3, [pc, #356]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003098:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80030aa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030c6:	e043      	b.n	8003150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003210 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80030d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030da:	4b48      	ldr	r3, [pc, #288]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80030dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030e2:	ee07 3a90 	vmov	s15, r3
 80030e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80030ee:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80030f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800310a:	e021      	b.n	8003150 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003116:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800320c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800311a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800311e:	4b37      	ldr	r3, [pc, #220]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003120:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800312e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003132:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003204 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800313a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800313e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800314e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003150:	4b2a      	ldr	r3, [pc, #168]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003154:	0a5b      	lsrs	r3, r3, #9
 8003156:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800315a:	ee07 3a90 	vmov	s15, r3
 800315e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003162:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003166:	ee37 7a87 	vadd.f32	s14, s15, s14
 800316a:	edd7 6a07 	vldr	s13, [r7, #28]
 800316e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003172:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003176:	ee17 2a90 	vmov	r2, s15
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800317e:	4b1f      	ldr	r3, [pc, #124]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003182:	0c1b      	lsrs	r3, r3, #16
 8003184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003188:	ee07 3a90 	vmov	s15, r3
 800318c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003190:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003194:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003198:	edd7 6a07 	vldr	s13, [r7, #28]
 800319c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031a4:	ee17 2a90 	vmov	r2, s15
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80031ac:	4b13      	ldr	r3, [pc, #76]	@ (80031fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80031ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031b0:	0e1b      	lsrs	r3, r3, #24
 80031b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80031ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031d2:	ee17 2a90 	vmov	r2, s15
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80031da:	e008      	b.n	80031ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2200      	movs	r2, #0
 80031ec:	609a      	str	r2, [r3, #8]
}
 80031ee:	bf00      	nop
 80031f0:	3724      	adds	r7, #36	@ 0x24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	58024400 	.word	0x58024400
 8003200:	03d09000 	.word	0x03d09000
 8003204:	46000000 	.word	0x46000000
 8003208:	4c742400 	.word	0x4c742400
 800320c:	4a742400 	.word	0x4a742400
 8003210:	4bbebc20 	.word	0x4bbebc20

08003214 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003214:	b480      	push	{r7}
 8003216:	b089      	sub	sp, #36	@ 0x24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800321c:	4ba1      	ldr	r3, [pc, #644]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800321e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003226:	4b9f      	ldr	r3, [pc, #636]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003228:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800322a:	0d1b      	lsrs	r3, r3, #20
 800322c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003230:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003232:	4b9c      	ldr	r3, [pc, #624]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	0a1b      	lsrs	r3, r3, #8
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800323e:	4b99      	ldr	r3, [pc, #612]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003240:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003242:	08db      	lsrs	r3, r3, #3
 8003244:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003248:	693a      	ldr	r2, [r7, #16]
 800324a:	fb02 f303 	mul.w	r3, r2, r3
 800324e:	ee07 3a90 	vmov	s15, r3
 8003252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003256:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8111 	beq.w	8003484 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b02      	cmp	r3, #2
 8003266:	f000 8083 	beq.w	8003370 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b02      	cmp	r3, #2
 800326e:	f200 80a1 	bhi.w	80033b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d056      	beq.n	800332c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800327e:	e099      	b.n	80033b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003280:	4b88      	ldr	r3, [pc, #544]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0320 	and.w	r3, r3, #32
 8003288:	2b00      	cmp	r3, #0
 800328a:	d02d      	beq.n	80032e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800328c:	4b85      	ldr	r3, [pc, #532]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	08db      	lsrs	r3, r3, #3
 8003292:	f003 0303 	and.w	r3, r3, #3
 8003296:	4a84      	ldr	r2, [pc, #528]	@ (80034a8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003298:	fa22 f303 	lsr.w	r3, r2, r3
 800329c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	ee07 3a90 	vmov	s15, r3
 80032a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032b6:	4b7b      	ldr	r3, [pc, #492]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032be:	ee07 3a90 	vmov	s15, r3
 80032c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80032ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80034ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80032ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80032e6:	e087      	b.n	80033f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80034b0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80032f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032fa:	4b6a      	ldr	r3, [pc, #424]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003302:	ee07 3a90 	vmov	s15, r3
 8003306:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800330a:	ed97 6a03 	vldr	s12, [r7, #12]
 800330e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80034ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003312:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003316:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800331a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800331e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003326:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800332a:	e065      	b.n	80033f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	ee07 3a90 	vmov	s15, r3
 8003332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003336:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80034b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800333a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333e:	4b59      	ldr	r3, [pc, #356]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003346:	ee07 3a90 	vmov	s15, r3
 800334a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003352:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80034ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003356:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800335a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003362:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003366:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800336e:	e043      	b.n	80033f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	ee07 3a90 	vmov	s15, r3
 8003376:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800337a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80034b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800337e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003382:	4b48      	ldr	r3, [pc, #288]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338a:	ee07 3a90 	vmov	s15, r3
 800338e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003392:	ed97 6a03 	vldr	s12, [r7, #12]
 8003396:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80034ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800339a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033b2:	e021      	b.n	80033f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80034b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80033c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ce:	ee07 3a90 	vmov	s15, r3
 80033d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80033da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80034ac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80033de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033f6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80033f8:	4b2a      	ldr	r3, [pc, #168]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80033fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fc:	0a5b      	lsrs	r3, r3, #9
 80033fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800340e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003412:	edd7 6a07 	vldr	s13, [r7, #28]
 8003416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800341e:	ee17 2a90 	vmov	r2, s15
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003426:	4b1f      	ldr	r3, [pc, #124]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342a:	0c1b      	lsrs	r3, r3, #16
 800342c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003430:	ee07 3a90 	vmov	s15, r3
 8003434:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003438:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800343c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003440:	edd7 6a07 	vldr	s13, [r7, #28]
 8003444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800344c:	ee17 2a90 	vmov	r2, s15
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003454:	4b13      	ldr	r3, [pc, #76]	@ (80034a4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	0e1b      	lsrs	r3, r3, #24
 800345a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003466:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800346a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800346e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003472:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800347a:	ee17 2a90 	vmov	r2, s15
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003482:	e008      	b.n	8003496 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	609a      	str	r2, [r3, #8]
}
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	58024400 	.word	0x58024400
 80034a8:	03d09000 	.word	0x03d09000
 80034ac:	46000000 	.word	0x46000000
 80034b0:	4c742400 	.word	0x4c742400
 80034b4:	4a742400 	.word	0x4a742400
 80034b8:	4bbebc20 	.word	0x4bbebc20

080034bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e049      	b.n	8003562 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7fd fdc8 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 feec 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d001      	beq.n	8003584 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e054      	b.n	800362e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0201 	orr.w	r2, r2, #1
 800359a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a26      	ldr	r2, [pc, #152]	@ (800363c <HAL_TIM_Base_Start_IT+0xd0>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d022      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ae:	d01d      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a22      	ldr	r2, [pc, #136]	@ (8003640 <HAL_TIM_Base_Start_IT+0xd4>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d018      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a21      	ldr	r2, [pc, #132]	@ (8003644 <HAL_TIM_Base_Start_IT+0xd8>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003648 <HAL_TIM_Base_Start_IT+0xdc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00e      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a1e      	ldr	r2, [pc, #120]	@ (800364c <HAL_TIM_Base_Start_IT+0xe0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d009      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003650 <HAL_TIM_Base_Start_IT+0xe4>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d004      	beq.n	80035ec <HAL_TIM_Base_Start_IT+0x80>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003654 <HAL_TIM_Base_Start_IT+0xe8>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d115      	bne.n	8003618 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	4b19      	ldr	r3, [pc, #100]	@ (8003658 <HAL_TIM_Base_Start_IT+0xec>)
 80035f4:	4013      	ands	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2b06      	cmp	r3, #6
 80035fc:	d015      	beq.n	800362a <HAL_TIM_Base_Start_IT+0xbe>
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d011      	beq.n	800362a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003616:	e008      	b.n	800362a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f042 0201 	orr.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e000      	b.n	800362c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800362c:	2300      	movs	r3, #0
}
 800362e:	4618      	mov	r0, r3
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40010000 	.word	0x40010000
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40010400 	.word	0x40010400
 8003650:	40001800 	.word	0x40001800
 8003654:	40014000 	.word	0x40014000
 8003658:	00010007 	.word	0x00010007

0800365c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e049      	b.n	8003702 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f841 	bl	800370a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3304      	adds	r3, #4
 8003698:	4619      	mov	r1, r3
 800369a:	4610      	mov	r0, r2
 800369c:	f000 fe1c 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2201      	movs	r2, #1
 80036d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2201      	movs	r2, #1
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2201      	movs	r2, #1
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003700:	2300      	movs	r3, #0
}
 8003702:	4618      	mov	r0, r3
 8003704:	3708      	adds	r7, #8
 8003706:	46bd      	mov	sp, r7
 8003708:	bd80      	pop	{r7, pc}

0800370a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
	...

08003720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
 8003728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d109      	bne.n	8003744 <HAL_TIM_PWM_Start+0x24>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b01      	cmp	r3, #1
 800373a:	bf14      	ite	ne
 800373c:	2301      	movne	r3, #1
 800373e:	2300      	moveq	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e03c      	b.n	80037be <HAL_TIM_PWM_Start+0x9e>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	2b04      	cmp	r3, #4
 8003748:	d109      	bne.n	800375e <HAL_TIM_PWM_Start+0x3e>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b01      	cmp	r3, #1
 8003754:	bf14      	ite	ne
 8003756:	2301      	movne	r3, #1
 8003758:	2300      	moveq	r3, #0
 800375a:	b2db      	uxtb	r3, r3
 800375c:	e02f      	b.n	80037be <HAL_TIM_PWM_Start+0x9e>
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	2b08      	cmp	r3, #8
 8003762:	d109      	bne.n	8003778 <HAL_TIM_PWM_Start+0x58>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e022      	b.n	80037be <HAL_TIM_PWM_Start+0x9e>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b0c      	cmp	r3, #12
 800377c:	d109      	bne.n	8003792 <HAL_TIM_PWM_Start+0x72>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b01      	cmp	r3, #1
 8003788:	bf14      	ite	ne
 800378a:	2301      	movne	r3, #1
 800378c:	2300      	moveq	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	e015      	b.n	80037be <HAL_TIM_PWM_Start+0x9e>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	2b10      	cmp	r3, #16
 8003796:	d109      	bne.n	80037ac <HAL_TIM_PWM_Start+0x8c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e008      	b.n	80037be <HAL_TIM_PWM_Start+0x9e>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e0a1      	b.n	800390a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d104      	bne.n	80037d6 <HAL_TIM_PWM_Start+0xb6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d4:	e023      	b.n	800381e <HAL_TIM_PWM_Start+0xfe>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d104      	bne.n	80037e6 <HAL_TIM_PWM_Start+0xc6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e4:	e01b      	b.n	800381e <HAL_TIM_PWM_Start+0xfe>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d104      	bne.n	80037f6 <HAL_TIM_PWM_Start+0xd6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037f4:	e013      	b.n	800381e <HAL_TIM_PWM_Start+0xfe>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	d104      	bne.n	8003806 <HAL_TIM_PWM_Start+0xe6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003804:	e00b      	b.n	800381e <HAL_TIM_PWM_Start+0xfe>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b10      	cmp	r3, #16
 800380a:	d104      	bne.n	8003816 <HAL_TIM_PWM_Start+0xf6>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003814:	e003      	b.n	800381e <HAL_TIM_PWM_Start+0xfe>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2201      	movs	r2, #1
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fa9a 	bl	8004d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a38      	ldr	r2, [pc, #224]	@ (8003914 <HAL_TIM_PWM_Start+0x1f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_TIM_PWM_Start+0x13e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a37      	ldr	r2, [pc, #220]	@ (8003918 <HAL_TIM_PWM_Start+0x1f8>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_TIM_PWM_Start+0x13e>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a35      	ldr	r2, [pc, #212]	@ (800391c <HAL_TIM_PWM_Start+0x1fc>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_TIM_PWM_Start+0x13e>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a34      	ldr	r2, [pc, #208]	@ (8003920 <HAL_TIM_PWM_Start+0x200>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIM_PWM_Start+0x13e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a32      	ldr	r2, [pc, #200]	@ (8003924 <HAL_TIM_PWM_Start+0x204>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_TIM_PWM_Start+0x142>
 800385e:	2301      	movs	r3, #1
 8003860:	e000      	b.n	8003864 <HAL_TIM_PWM_Start+0x144>
 8003862:	2300      	movs	r3, #0
 8003864:	2b00      	cmp	r3, #0
 8003866:	d007      	beq.n	8003878 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003876:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a25      	ldr	r2, [pc, #148]	@ (8003914 <HAL_TIM_PWM_Start+0x1f4>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d022      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800388a:	d01d      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <HAL_TIM_PWM_Start+0x208>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d018      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a24      	ldr	r2, [pc, #144]	@ (800392c <HAL_TIM_PWM_Start+0x20c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d013      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a22      	ldr	r2, [pc, #136]	@ (8003930 <HAL_TIM_PWM_Start+0x210>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d00e      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003918 <HAL_TIM_PWM_Start+0x1f8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d009      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a1e      	ldr	r2, [pc, #120]	@ (8003934 <HAL_TIM_PWM_Start+0x214>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d004      	beq.n	80038c8 <HAL_TIM_PWM_Start+0x1a8>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a16      	ldr	r2, [pc, #88]	@ (800391c <HAL_TIM_PWM_Start+0x1fc>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d115      	bne.n	80038f4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	689a      	ldr	r2, [r3, #8]
 80038ce:	4b1a      	ldr	r3, [pc, #104]	@ (8003938 <HAL_TIM_PWM_Start+0x218>)
 80038d0:	4013      	ands	r3, r2
 80038d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2b06      	cmp	r3, #6
 80038d8:	d015      	beq.n	8003906 <HAL_TIM_PWM_Start+0x1e6>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038e0:	d011      	beq.n	8003906 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681a      	ldr	r2, [r3, #0]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f042 0201 	orr.w	r2, r2, #1
 80038f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038f2:	e008      	b.n	8003906 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	601a      	str	r2, [r3, #0]
 8003904:	e000      	b.n	8003908 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003906:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	40010000 	.word	0x40010000
 8003918:	40010400 	.word	0x40010400
 800391c:	40014000 	.word	0x40014000
 8003920:	40014400 	.word	0x40014400
 8003924:	40014800 	.word	0x40014800
 8003928:	40000400 	.word	0x40000400
 800392c:	40000800 	.word	0x40000800
 8003930:	40000c00 	.word	0x40000c00
 8003934:	40001800 	.word	0x40001800
 8003938:	00010007 	.word	0x00010007

0800393c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2200      	movs	r2, #0
 800394c:	6839      	ldr	r1, [r7, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fa06 	bl	8004d60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a3e      	ldr	r2, [pc, #248]	@ (8003a54 <HAL_TIM_PWM_Stop+0x118>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d013      	beq.n	8003986 <HAL_TIM_PWM_Stop+0x4a>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a3d      	ldr	r2, [pc, #244]	@ (8003a58 <HAL_TIM_PWM_Stop+0x11c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIM_PWM_Stop+0x4a>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a3b      	ldr	r2, [pc, #236]	@ (8003a5c <HAL_TIM_PWM_Stop+0x120>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIM_PWM_Stop+0x4a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3a      	ldr	r2, [pc, #232]	@ (8003a60 <HAL_TIM_PWM_Stop+0x124>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIM_PWM_Stop+0x4a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a38      	ldr	r2, [pc, #224]	@ (8003a64 <HAL_TIM_PWM_Stop+0x128>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d101      	bne.n	800398a <HAL_TIM_PWM_Stop+0x4e>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_TIM_PWM_Stop+0x50>
 800398a:	2300      	movs	r3, #0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d017      	beq.n	80039c0 <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6a1a      	ldr	r2, [r3, #32]
 8003996:	f241 1311 	movw	r3, #4369	@ 0x1111
 800399a:	4013      	ands	r3, r2
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <HAL_TIM_PWM_Stop+0x84>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	6a1a      	ldr	r2, [r3, #32]
 80039a6:	f240 4344 	movw	r3, #1092	@ 0x444
 80039aa:	4013      	ands	r3, r2
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d107      	bne.n	80039c0 <HAL_TIM_PWM_Stop+0x84>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80039be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6a1a      	ldr	r2, [r3, #32]
 80039c6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10f      	bne.n	80039f0 <HAL_TIM_PWM_Stop+0xb4>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	f240 4344 	movw	r3, #1092	@ 0x444
 80039da:	4013      	ands	r3, r2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d107      	bne.n	80039f0 <HAL_TIM_PWM_Stop+0xb4>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f022 0201 	bic.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <HAL_TIM_PWM_Stop+0xc4>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039fe:	e023      	b.n	8003a48 <HAL_TIM_PWM_Stop+0x10c>
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d104      	bne.n	8003a10 <HAL_TIM_PWM_Stop+0xd4>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a0e:	e01b      	b.n	8003a48 <HAL_TIM_PWM_Stop+0x10c>
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d104      	bne.n	8003a20 <HAL_TIM_PWM_Stop+0xe4>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a1e:	e013      	b.n	8003a48 <HAL_TIM_PWM_Stop+0x10c>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	2b0c      	cmp	r3, #12
 8003a24:	d104      	bne.n	8003a30 <HAL_TIM_PWM_Stop+0xf4>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003a2e:	e00b      	b.n	8003a48 <HAL_TIM_PWM_Stop+0x10c>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d104      	bne.n	8003a40 <HAL_TIM_PWM_Stop+0x104>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a3e:	e003      	b.n	8003a48 <HAL_TIM_PWM_Stop+0x10c>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3708      	adds	r7, #8
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40010400 	.word	0x40010400
 8003a5c:	40014000 	.word	0x40014000
 8003a60:	40014400 	.word	0x40014400
 8003a64:	40014800 	.word	0x40014800

08003a68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e049      	b.n	8003b0e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f841 	bl	8003b16 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2202      	movs	r2, #2
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	4610      	mov	r0, r2
 8003aa8:	f000 fc16 	bl	80042d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3708      	adds	r7, #8
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b083      	sub	sp, #12
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b2a:	b580      	push	{r7, lr}
 8003b2c:	b084      	sub	sp, #16
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d020      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d01b      	beq.n	8003b8e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0202 	mvn.w	r2, #2
 8003b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb91 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e005      	b.n	8003b88 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fb83 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 fb94 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d020      	beq.n	8003bda <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f003 0304 	and.w	r3, r3, #4
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d01b      	beq.n	8003bda <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f06f 0204 	mvn.w	r2, #4
 8003baa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2202      	movs	r2, #2
 8003bb0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	699b      	ldr	r3, [r3, #24]
 8003bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 fb6b 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003bc6:	e005      	b.n	8003bd4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb5d 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fb6e 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003bda:	68bb      	ldr	r3, [r7, #8]
 8003bdc:	f003 0308 	and.w	r3, r3, #8
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d020      	beq.n	8003c26 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0308 	and.w	r3, r3, #8
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01b      	beq.n	8003c26 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f06f 0208 	mvn.w	r2, #8
 8003bf6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f000 fb45 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003c12:	e005      	b.n	8003c20 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f000 fb37 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb48 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f003 0310 	and.w	r3, r3, #16
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d020      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d01b      	beq.n	8003c72 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f06f 0210 	mvn.w	r2, #16
 8003c42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2208      	movs	r2, #8
 8003c48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69db      	ldr	r3, [r3, #28]
 8003c50:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c58:	6878      	ldr	r0, [r7, #4]
 8003c5a:	f000 fb1f 	bl	800429c <HAL_TIM_IC_CaptureCallback>
 8003c5e:	e005      	b.n	8003c6c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 fb11 	bl	8004288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fb22 	bl	80042b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00c      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f003 0301 	and.w	r3, r3, #1
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d007      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f06f 0201 	mvn.w	r2, #1
 8003c8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7fd f84b 	bl	8000d2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d104      	bne.n	8003caa <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00c      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d007      	beq.n	8003cc4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f001 faaa 	bl	8005218 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00c      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d007      	beq.n	8003ce8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f001 faa2 	bl	800522c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00c      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d007      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 fadc 	bl	80042c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0320 	and.w	r3, r3, #32
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0320 	and.w	r3, r3, #32
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0220 	mvn.w	r2, #32
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f001 fa6a 	bl	8005204 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d30:	bf00      	nop
 8003d32:	3710      	adds	r7, #16
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d101      	bne.n	8003d56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	e088      	b.n	8003e68 <HAL_TIM_IC_ConfigChannel+0x130>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11b      	bne.n	8003d9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003d74:	f000 fe2c 	bl	80049d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 020c 	bic.w	r2, r2, #12
 8003d86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	6999      	ldr	r1, [r3, #24]
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	689a      	ldr	r2, [r3, #8]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	619a      	str	r2, [r3, #24]
 8003d9a:	e060      	b.n	8003e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d11c      	bne.n	8003ddc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003db2:	f000 feb0 	bl	8004b16 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699a      	ldr	r2, [r3, #24]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003dc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6999      	ldr	r1, [r3, #24]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	021a      	lsls	r2, r3, #8
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	619a      	str	r2, [r3, #24]
 8003dda:	e040      	b.n	8003e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b08      	cmp	r3, #8
 8003de0:	d11b      	bne.n	8003e1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003df2:	f000 fefd 	bl	8004bf0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f022 020c 	bic.w	r2, r2, #12
 8003e04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	430a      	orrs	r2, r1
 8003e16:	61da      	str	r2, [r3, #28]
 8003e18:	e021      	b.n	8003e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d11c      	bne.n	8003e5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003e30:	f000 ff1a 	bl	8004c68 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	69da      	ldr	r2, [r3, #28]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003e42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	69d9      	ldr	r1, [r3, #28]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	021a      	lsls	r2, r3, #8
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
 8003e58:	e001      	b.n	8003e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b086      	sub	sp, #24
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0ff      	b.n	800408e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b14      	cmp	r3, #20
 8003e9a:	f200 80f0 	bhi.w	800407e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003e9e:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea4:	08003ef9 	.word	0x08003ef9
 8003ea8:	0800407f 	.word	0x0800407f
 8003eac:	0800407f 	.word	0x0800407f
 8003eb0:	0800407f 	.word	0x0800407f
 8003eb4:	08003f39 	.word	0x08003f39
 8003eb8:	0800407f 	.word	0x0800407f
 8003ebc:	0800407f 	.word	0x0800407f
 8003ec0:	0800407f 	.word	0x0800407f
 8003ec4:	08003f7b 	.word	0x08003f7b
 8003ec8:	0800407f 	.word	0x0800407f
 8003ecc:	0800407f 	.word	0x0800407f
 8003ed0:	0800407f 	.word	0x0800407f
 8003ed4:	08003fbb 	.word	0x08003fbb
 8003ed8:	0800407f 	.word	0x0800407f
 8003edc:	0800407f 	.word	0x0800407f
 8003ee0:	0800407f 	.word	0x0800407f
 8003ee4:	08003ffd 	.word	0x08003ffd
 8003ee8:	0800407f 	.word	0x0800407f
 8003eec:	0800407f 	.word	0x0800407f
 8003ef0:	0800407f 	.word	0x0800407f
 8003ef4:	0800403d 	.word	0x0800403d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	68b9      	ldr	r1, [r7, #8]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fa90 	bl	8004424 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699a      	ldr	r2, [r3, #24]
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f042 0208 	orr.w	r2, r2, #8
 8003f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0204 	bic.w	r2, r2, #4
 8003f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6999      	ldr	r1, [r3, #24]
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	619a      	str	r2, [r3, #24]
      break;
 8003f36:	e0a5      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	68b9      	ldr	r1, [r7, #8]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f000 fb00 	bl	8004544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699a      	ldr	r2, [r3, #24]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6999      	ldr	r1, [r3, #24]
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	021a      	lsls	r2, r3, #8
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	619a      	str	r2, [r3, #24]
      break;
 8003f78:	e084      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68b9      	ldr	r1, [r7, #8]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f000 fb69 	bl	8004658 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	69da      	ldr	r2, [r3, #28]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f042 0208 	orr.w	r2, r2, #8
 8003f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0204 	bic.w	r2, r2, #4
 8003fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	69d9      	ldr	r1, [r3, #28]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	61da      	str	r2, [r3, #28]
      break;
 8003fb8:	e064      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68b9      	ldr	r1, [r7, #8]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fbd1 	bl	8004768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	69da      	ldr	r2, [r3, #28]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	69da      	ldr	r2, [r3, #28]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fe4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69d9      	ldr	r1, [r3, #28]
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	021a      	lsls	r2, r3, #8
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	61da      	str	r2, [r3, #28]
      break;
 8003ffa:	e043      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	68b9      	ldr	r1, [r7, #8]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fc1a 	bl	800483c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f042 0208 	orr.w	r2, r2, #8
 8004016:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f022 0204 	bic.w	r2, r2, #4
 8004026:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	691a      	ldr	r2, [r3, #16]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800403a:	e023      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68b9      	ldr	r1, [r7, #8]
 8004042:	4618      	mov	r0, r3
 8004044:	f000 fc5e 	bl	8004904 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004056:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004066:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	021a      	lsls	r2, r3, #8
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	430a      	orrs	r2, r1
 800407a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800407c:	e002      	b.n	8004084 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	75fb      	strb	r3, [r7, #23]
      break;
 8004082:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800408c:	7dfb      	ldrb	r3, [r7, #23]
}
 800408e:	4618      	mov	r0, r3
 8004090:	3718      	adds	r7, #24
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop

08004098 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_TIM_ConfigClockSource+0x1c>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0dc      	b.n	800426e <HAL_TIM_ConfigClockSource+0x1d6>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2202      	movs	r2, #2
 80040c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040cc:	68ba      	ldr	r2, [r7, #8]
 80040ce:	4b6a      	ldr	r3, [pc, #424]	@ (8004278 <HAL_TIM_ConfigClockSource+0x1e0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68ba      	ldr	r2, [r7, #8]
 80040e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a64      	ldr	r2, [pc, #400]	@ (800427c <HAL_TIM_ConfigClockSource+0x1e4>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	f000 80a9 	beq.w	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 80040f0:	4a62      	ldr	r2, [pc, #392]	@ (800427c <HAL_TIM_ConfigClockSource+0x1e4>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	f200 80ae 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 80040f8:	4a61      	ldr	r2, [pc, #388]	@ (8004280 <HAL_TIM_ConfigClockSource+0x1e8>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	f000 80a1 	beq.w	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004100:	4a5f      	ldr	r2, [pc, #380]	@ (8004280 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	f200 80a6 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004108:	4a5e      	ldr	r2, [pc, #376]	@ (8004284 <HAL_TIM_ConfigClockSource+0x1ec>)
 800410a:	4293      	cmp	r3, r2
 800410c:	f000 8099 	beq.w	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004110:	4a5c      	ldr	r2, [pc, #368]	@ (8004284 <HAL_TIM_ConfigClockSource+0x1ec>)
 8004112:	4293      	cmp	r3, r2
 8004114:	f200 809e 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004118:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800411c:	f000 8091 	beq.w	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004120:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004124:	f200 8096 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004128:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800412c:	f000 8089 	beq.w	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004130:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004134:	f200 808e 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413c:	d03e      	beq.n	80041bc <HAL_TIM_ConfigClockSource+0x124>
 800413e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004142:	f200 8087 	bhi.w	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414a:	f000 8086 	beq.w	800425a <HAL_TIM_ConfigClockSource+0x1c2>
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004152:	d87f      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004154:	2b70      	cmp	r3, #112	@ 0x70
 8004156:	d01a      	beq.n	800418e <HAL_TIM_ConfigClockSource+0xf6>
 8004158:	2b70      	cmp	r3, #112	@ 0x70
 800415a:	d87b      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 800415c:	2b60      	cmp	r3, #96	@ 0x60
 800415e:	d050      	beq.n	8004202 <HAL_TIM_ConfigClockSource+0x16a>
 8004160:	2b60      	cmp	r3, #96	@ 0x60
 8004162:	d877      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004164:	2b50      	cmp	r3, #80	@ 0x50
 8004166:	d03c      	beq.n	80041e2 <HAL_TIM_ConfigClockSource+0x14a>
 8004168:	2b50      	cmp	r3, #80	@ 0x50
 800416a:	d873      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 800416c:	2b40      	cmp	r3, #64	@ 0x40
 800416e:	d058      	beq.n	8004222 <HAL_TIM_ConfigClockSource+0x18a>
 8004170:	2b40      	cmp	r3, #64	@ 0x40
 8004172:	d86f      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004174:	2b30      	cmp	r3, #48	@ 0x30
 8004176:	d064      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004178:	2b30      	cmp	r3, #48	@ 0x30
 800417a:	d86b      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 800417c:	2b20      	cmp	r3, #32
 800417e:	d060      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004180:	2b20      	cmp	r3, #32
 8004182:	d867      	bhi.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
 8004184:	2b00      	cmp	r3, #0
 8004186:	d05c      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 8004188:	2b10      	cmp	r3, #16
 800418a:	d05a      	beq.n	8004242 <HAL_TIM_ConfigClockSource+0x1aa>
 800418c:	e062      	b.n	8004254 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800419e:	f000 fdbf 	bl	8004d20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80041b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68ba      	ldr	r2, [r7, #8]
 80041b8:	609a      	str	r2, [r3, #8]
      break;
 80041ba:	e04f      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	f000 fda8 	bl	8004d20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80041de:	609a      	str	r2, [r3, #8]
      break;
 80041e0:	e03c      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ee:	461a      	mov	r2, r3
 80041f0:	f000 fc62 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2150      	movs	r1, #80	@ 0x50
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fd72 	bl	8004ce4 <TIM_ITRx_SetConfig>
      break;
 8004200:	e02c      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800420e:	461a      	mov	r2, r3
 8004210:	f000 fcbe 	bl	8004b90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2160      	movs	r1, #96	@ 0x60
 800421a:	4618      	mov	r0, r3
 800421c:	f000 fd62 	bl	8004ce4 <TIM_ITRx_SetConfig>
      break;
 8004220:	e01c      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800422e:	461a      	mov	r2, r3
 8004230:	f000 fc42 	bl	8004ab8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2140      	movs	r1, #64	@ 0x40
 800423a:	4618      	mov	r0, r3
 800423c:	f000 fd52 	bl	8004ce4 <TIM_ITRx_SetConfig>
      break;
 8004240:	e00c      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4619      	mov	r1, r3
 800424c:	4610      	mov	r0, r2
 800424e:	f000 fd49 	bl	8004ce4 <TIM_ITRx_SetConfig>
      break;
 8004252:	e003      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	73fb      	strb	r3, [r7, #15]
      break;
 8004258:	e000      	b.n	800425c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800425a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2201      	movs	r2, #1
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800426c:	7bfb      	ldrb	r3, [r7, #15]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	ffceff88 	.word	0xffceff88
 800427c:	00100040 	.word	0x00100040
 8004280:	00100030 	.word	0x00100030
 8004284:	00100020 	.word	0x00100020

08004288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004290:	bf00      	nop
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80042d8:	b480      	push	{r7}
 80042da:	b085      	sub	sp, #20
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a46      	ldr	r2, [pc, #280]	@ (8004404 <TIM_Base_SetConfig+0x12c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d013      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042f6:	d00f      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a43      	ldr	r2, [pc, #268]	@ (8004408 <TIM_Base_SetConfig+0x130>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d00b      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a42      	ldr	r2, [pc, #264]	@ (800440c <TIM_Base_SetConfig+0x134>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d007      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a41      	ldr	r2, [pc, #260]	@ (8004410 <TIM_Base_SetConfig+0x138>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a40      	ldr	r2, [pc, #256]	@ (8004414 <TIM_Base_SetConfig+0x13c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d108      	bne.n	800432a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800431e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	4313      	orrs	r3, r2
 8004328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a35      	ldr	r2, [pc, #212]	@ (8004404 <TIM_Base_SetConfig+0x12c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d01f      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004338:	d01b      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a32      	ldr	r2, [pc, #200]	@ (8004408 <TIM_Base_SetConfig+0x130>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d017      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a31      	ldr	r2, [pc, #196]	@ (800440c <TIM_Base_SetConfig+0x134>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a30      	ldr	r2, [pc, #192]	@ (8004410 <TIM_Base_SetConfig+0x138>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d00f      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2f      	ldr	r2, [pc, #188]	@ (8004414 <TIM_Base_SetConfig+0x13c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00b      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a2e      	ldr	r2, [pc, #184]	@ (8004418 <TIM_Base_SetConfig+0x140>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d007      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a2d      	ldr	r2, [pc, #180]	@ (800441c <TIM_Base_SetConfig+0x144>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d003      	beq.n	8004372 <TIM_Base_SetConfig+0x9a>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a2c      	ldr	r2, [pc, #176]	@ (8004420 <TIM_Base_SetConfig+0x148>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d108      	bne.n	8004384 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004378:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	4313      	orrs	r3, r2
 8004382:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <TIM_Base_SetConfig+0x12c>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d00f      	beq.n	80043d0 <TIM_Base_SetConfig+0xf8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a18      	ldr	r2, [pc, #96]	@ (8004414 <TIM_Base_SetConfig+0x13c>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d00b      	beq.n	80043d0 <TIM_Base_SetConfig+0xf8>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a17      	ldr	r2, [pc, #92]	@ (8004418 <TIM_Base_SetConfig+0x140>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d007      	beq.n	80043d0 <TIM_Base_SetConfig+0xf8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a16      	ldr	r2, [pc, #88]	@ (800441c <TIM_Base_SetConfig+0x144>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d003      	beq.n	80043d0 <TIM_Base_SetConfig+0xf8>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a15      	ldr	r2, [pc, #84]	@ (8004420 <TIM_Base_SetConfig+0x148>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d103      	bne.n	80043d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2201      	movs	r2, #1
 80043dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d105      	bne.n	80043f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	f023 0201 	bic.w	r2, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	611a      	str	r2, [r3, #16]
  }
}
 80043f6:	bf00      	nop
 80043f8:	3714      	adds	r7, #20
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40010000 	.word	0x40010000
 8004408:	40000400 	.word	0x40000400
 800440c:	40000800 	.word	0x40000800
 8004410:	40000c00 	.word	0x40000c00
 8004414:	40010400 	.word	0x40010400
 8004418:	40014000 	.word	0x40014000
 800441c:	40014400 	.word	0x40014400
 8004420:	40014800 	.word	0x40014800

08004424 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004424:	b480      	push	{r7}
 8004426:	b087      	sub	sp, #28
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a1b      	ldr	r3, [r3, #32]
 8004438:	f023 0201 	bic.w	r2, r3, #1
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	4b37      	ldr	r3, [pc, #220]	@ (800452c <TIM_OC1_SetConfig+0x108>)
 8004450:	4013      	ands	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	4313      	orrs	r3, r2
 8004464:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	f023 0302 	bic.w	r3, r3, #2
 800446c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	4313      	orrs	r3, r2
 8004476:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a2d      	ldr	r2, [pc, #180]	@ (8004530 <TIM_OC1_SetConfig+0x10c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d00f      	beq.n	80044a0 <TIM_OC1_SetConfig+0x7c>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a2c      	ldr	r2, [pc, #176]	@ (8004534 <TIM_OC1_SetConfig+0x110>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d00b      	beq.n	80044a0 <TIM_OC1_SetConfig+0x7c>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <TIM_OC1_SetConfig+0x114>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d007      	beq.n	80044a0 <TIM_OC1_SetConfig+0x7c>
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <TIM_OC1_SetConfig+0x118>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d003      	beq.n	80044a0 <TIM_OC1_SetConfig+0x7c>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	4a29      	ldr	r2, [pc, #164]	@ (8004540 <TIM_OC1_SetConfig+0x11c>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d10c      	bne.n	80044ba <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f023 0308 	bic.w	r3, r3, #8
 80044a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004530 <TIM_OC1_SetConfig+0x10c>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d00f      	beq.n	80044e2 <TIM_OC1_SetConfig+0xbe>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1b      	ldr	r2, [pc, #108]	@ (8004534 <TIM_OC1_SetConfig+0x110>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d00b      	beq.n	80044e2 <TIM_OC1_SetConfig+0xbe>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1a      	ldr	r2, [pc, #104]	@ (8004538 <TIM_OC1_SetConfig+0x114>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d007      	beq.n	80044e2 <TIM_OC1_SetConfig+0xbe>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a19      	ldr	r2, [pc, #100]	@ (800453c <TIM_OC1_SetConfig+0x118>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d003      	beq.n	80044e2 <TIM_OC1_SetConfig+0xbe>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a18      	ldr	r2, [pc, #96]	@ (8004540 <TIM_OC1_SetConfig+0x11c>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d111      	bne.n	8004506 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80044f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	693a      	ldr	r2, [r7, #16]
 800450a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685a      	ldr	r2, [r3, #4]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	621a      	str	r2, [r3, #32]
}
 8004520:	bf00      	nop
 8004522:	371c      	adds	r7, #28
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr
 800452c:	fffeff8f 	.word	0xfffeff8f
 8004530:	40010000 	.word	0x40010000
 8004534:	40010400 	.word	0x40010400
 8004538:	40014000 	.word	0x40014000
 800453c:	40014400 	.word	0x40014400
 8004540:	40014800 	.word	0x40014800

08004544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004544:	b480      	push	{r7}
 8004546:	b087      	sub	sp, #28
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
 800454c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a1b      	ldr	r3, [r3, #32]
 8004552:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f023 0210 	bic.w	r2, r3, #16
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	699b      	ldr	r3, [r3, #24]
 800456a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	4b34      	ldr	r3, [pc, #208]	@ (8004640 <TIM_OC2_SetConfig+0xfc>)
 8004570:	4013      	ands	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800457a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	021b      	lsls	r3, r3, #8
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0320 	bic.w	r3, r3, #32
 800458e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a29      	ldr	r2, [pc, #164]	@ (8004644 <TIM_OC2_SetConfig+0x100>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d003      	beq.n	80045ac <TIM_OC2_SetConfig+0x68>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	4a28      	ldr	r2, [pc, #160]	@ (8004648 <TIM_OC2_SetConfig+0x104>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d10d      	bne.n	80045c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045c6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004644 <TIM_OC2_SetConfig+0x100>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d00f      	beq.n	80045f0 <TIM_OC2_SetConfig+0xac>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	4a1d      	ldr	r2, [pc, #116]	@ (8004648 <TIM_OC2_SetConfig+0x104>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d00b      	beq.n	80045f0 <TIM_OC2_SetConfig+0xac>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a1c      	ldr	r2, [pc, #112]	@ (800464c <TIM_OC2_SetConfig+0x108>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d007      	beq.n	80045f0 <TIM_OC2_SetConfig+0xac>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004650 <TIM_OC2_SetConfig+0x10c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d003      	beq.n	80045f0 <TIM_OC2_SetConfig+0xac>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a1a      	ldr	r2, [pc, #104]	@ (8004654 <TIM_OC2_SetConfig+0x110>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d113      	bne.n	8004618 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80045f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	4313      	orrs	r3, r2
 800460a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	693a      	ldr	r2, [r7, #16]
 8004614:	4313      	orrs	r3, r2
 8004616:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	685a      	ldr	r2, [r3, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	621a      	str	r2, [r3, #32]
}
 8004632:	bf00      	nop
 8004634:	371c      	adds	r7, #28
 8004636:	46bd      	mov	sp, r7
 8004638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463c:	4770      	bx	lr
 800463e:	bf00      	nop
 8004640:	feff8fff 	.word	0xfeff8fff
 8004644:	40010000 	.word	0x40010000
 8004648:	40010400 	.word	0x40010400
 800464c:	40014000 	.word	0x40014000
 8004650:	40014400 	.word	0x40014400
 8004654:	40014800 	.word	0x40014800

08004658 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6a1b      	ldr	r3, [r3, #32]
 800466c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004680:	68fa      	ldr	r2, [r7, #12]
 8004682:	4b33      	ldr	r3, [pc, #204]	@ (8004750 <TIM_OC3_SetConfig+0xf8>)
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4313      	orrs	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	021b      	lsls	r3, r3, #8
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a28      	ldr	r2, [pc, #160]	@ (8004754 <TIM_OC3_SetConfig+0xfc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d003      	beq.n	80046be <TIM_OC3_SetConfig+0x66>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	4a27      	ldr	r2, [pc, #156]	@ (8004758 <TIM_OC3_SetConfig+0x100>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d10d      	bne.n	80046da <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046c4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004754 <TIM_OC3_SetConfig+0xfc>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d00f      	beq.n	8004702 <TIM_OC3_SetConfig+0xaa>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a1c      	ldr	r2, [pc, #112]	@ (8004758 <TIM_OC3_SetConfig+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d00b      	beq.n	8004702 <TIM_OC3_SetConfig+0xaa>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	@ (800475c <TIM_OC3_SetConfig+0x104>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d007      	beq.n	8004702 <TIM_OC3_SetConfig+0xaa>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a1a      	ldr	r2, [pc, #104]	@ (8004760 <TIM_OC3_SetConfig+0x108>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d003      	beq.n	8004702 <TIM_OC3_SetConfig+0xaa>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a19      	ldr	r2, [pc, #100]	@ (8004764 <TIM_OC3_SetConfig+0x10c>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d113      	bne.n	800472a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004708:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004710:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	011b      	lsls	r3, r3, #4
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	4313      	orrs	r3, r2
 800471c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	699b      	ldr	r3, [r3, #24]
 8004722:	011b      	lsls	r3, r3, #4
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	4313      	orrs	r3, r2
 8004728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	fffeff8f 	.word	0xfffeff8f
 8004754:	40010000 	.word	0x40010000
 8004758:	40010400 	.word	0x40010400
 800475c:	40014000 	.word	0x40014000
 8004760:	40014400 	.word	0x40014400
 8004764:	40014800 	.word	0x40014800

08004768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004768:	b480      	push	{r7}
 800476a:	b087      	sub	sp, #28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a1b      	ldr	r3, [r3, #32]
 8004776:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a1b      	ldr	r3, [r3, #32]
 800477c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4b24      	ldr	r3, [pc, #144]	@ (8004824 <TIM_OC4_SetConfig+0xbc>)
 8004794:	4013      	ands	r3, r2
 8004796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800479e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	021b      	lsls	r3, r3, #8
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	031b      	lsls	r3, r3, #12
 80047ba:	693a      	ldr	r2, [r7, #16]
 80047bc:	4313      	orrs	r3, r2
 80047be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	4a19      	ldr	r2, [pc, #100]	@ (8004828 <TIM_OC4_SetConfig+0xc0>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d00f      	beq.n	80047e8 <TIM_OC4_SetConfig+0x80>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a18      	ldr	r2, [pc, #96]	@ (800482c <TIM_OC4_SetConfig+0xc4>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00b      	beq.n	80047e8 <TIM_OC4_SetConfig+0x80>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4a17      	ldr	r2, [pc, #92]	@ (8004830 <TIM_OC4_SetConfig+0xc8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d007      	beq.n	80047e8 <TIM_OC4_SetConfig+0x80>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a16      	ldr	r2, [pc, #88]	@ (8004834 <TIM_OC4_SetConfig+0xcc>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d003      	beq.n	80047e8 <TIM_OC4_SetConfig+0x80>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a15      	ldr	r2, [pc, #84]	@ (8004838 <TIM_OC4_SetConfig+0xd0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d109      	bne.n	80047fc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	019b      	lsls	r3, r3, #6
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	621a      	str	r2, [r3, #32]
}
 8004816:	bf00      	nop
 8004818:	371c      	adds	r7, #28
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	feff8fff 	.word	0xfeff8fff
 8004828:	40010000 	.word	0x40010000
 800482c:	40010400 	.word	0x40010400
 8004830:	40014000 	.word	0x40014000
 8004834:	40014400 	.word	0x40014400
 8004838:	40014800 	.word	0x40014800

0800483c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
 8004844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	4b21      	ldr	r3, [pc, #132]	@ (80048ec <TIM_OC5_SetConfig+0xb0>)
 8004868:	4013      	ands	r3, r2
 800486a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800487c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	4313      	orrs	r3, r2
 8004888:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a18      	ldr	r2, [pc, #96]	@ (80048f0 <TIM_OC5_SetConfig+0xb4>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00f      	beq.n	80048b2 <TIM_OC5_SetConfig+0x76>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a17      	ldr	r2, [pc, #92]	@ (80048f4 <TIM_OC5_SetConfig+0xb8>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d00b      	beq.n	80048b2 <TIM_OC5_SetConfig+0x76>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a16      	ldr	r2, [pc, #88]	@ (80048f8 <TIM_OC5_SetConfig+0xbc>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d007      	beq.n	80048b2 <TIM_OC5_SetConfig+0x76>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a15      	ldr	r2, [pc, #84]	@ (80048fc <TIM_OC5_SetConfig+0xc0>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d003      	beq.n	80048b2 <TIM_OC5_SetConfig+0x76>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a14      	ldr	r2, [pc, #80]	@ (8004900 <TIM_OC5_SetConfig+0xc4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d109      	bne.n	80048c6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	695b      	ldr	r3, [r3, #20]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	621a      	str	r2, [r3, #32]
}
 80048e0:	bf00      	nop
 80048e2:	371c      	adds	r7, #28
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	fffeff8f 	.word	0xfffeff8f
 80048f0:	40010000 	.word	0x40010000
 80048f4:	40010400 	.word	0x40010400
 80048f8:	40014000 	.word	0x40014000
 80048fc:	40014400 	.word	0x40014400
 8004900:	40014800 	.word	0x40014800

08004904 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004904:	b480      	push	{r7}
 8004906:	b087      	sub	sp, #28
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6a1b      	ldr	r3, [r3, #32]
 8004918:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800492a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800492c:	68fa      	ldr	r2, [r7, #12]
 800492e:	4b22      	ldr	r3, [pc, #136]	@ (80049b8 <TIM_OC6_SetConfig+0xb4>)
 8004930:	4013      	ands	r3, r2
 8004932:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	021b      	lsls	r3, r3, #8
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4313      	orrs	r3, r2
 800493e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004946:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	051b      	lsls	r3, r3, #20
 800494e:	693a      	ldr	r2, [r7, #16]
 8004950:	4313      	orrs	r3, r2
 8004952:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a19      	ldr	r2, [pc, #100]	@ (80049bc <TIM_OC6_SetConfig+0xb8>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_OC6_SetConfig+0x78>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <TIM_OC6_SetConfig+0xbc>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_OC6_SetConfig+0x78>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a17      	ldr	r2, [pc, #92]	@ (80049c4 <TIM_OC6_SetConfig+0xc0>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_OC6_SetConfig+0x78>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a16      	ldr	r2, [pc, #88]	@ (80049c8 <TIM_OC6_SetConfig+0xc4>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC6_SetConfig+0x78>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a15      	ldr	r2, [pc, #84]	@ (80049cc <TIM_OC6_SetConfig+0xc8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d109      	bne.n	8004990 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	695b      	ldr	r3, [r3, #20]
 8004988:	029b      	lsls	r3, r3, #10
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	4313      	orrs	r3, r2
 800498e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	621a      	str	r2, [r3, #32]
}
 80049aa:	bf00      	nop
 80049ac:	371c      	adds	r7, #28
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	feff8fff 	.word	0xfeff8fff
 80049bc:	40010000 	.word	0x40010000
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40014400 	.word	0x40014400
 80049cc:	40014800 	.word	0x40014800

080049d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
 80049e8:	f023 0201 	bic.w	r2, r3, #1
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a28      	ldr	r2, [pc, #160]	@ (8004a9c <TIM_TI1_SetConfig+0xcc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d01b      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a04:	d017      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	4a25      	ldr	r2, [pc, #148]	@ (8004aa0 <TIM_TI1_SetConfig+0xd0>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d013      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	4a24      	ldr	r2, [pc, #144]	@ (8004aa4 <TIM_TI1_SetConfig+0xd4>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d00f      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	4a23      	ldr	r2, [pc, #140]	@ (8004aa8 <TIM_TI1_SetConfig+0xd8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d00b      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a22      	ldr	r2, [pc, #136]	@ (8004aac <TIM_TI1_SetConfig+0xdc>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d007      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	4a21      	ldr	r2, [pc, #132]	@ (8004ab0 <TIM_TI1_SetConfig+0xe0>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d003      	beq.n	8004a36 <TIM_TI1_SetConfig+0x66>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	4a20      	ldr	r2, [pc, #128]	@ (8004ab4 <TIM_TI1_SetConfig+0xe4>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d101      	bne.n	8004a3a <TIM_TI1_SetConfig+0x6a>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <TIM_TI1_SetConfig+0x6c>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d008      	beq.n	8004a52 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	617b      	str	r3, [r7, #20]
 8004a50:	e003      	b.n	8004a5a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	011b      	lsls	r3, r3, #4
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	697a      	ldr	r2, [r7, #20]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	f023 030a 	bic.w	r3, r3, #10
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f003 030a 	and.w	r3, r3, #10
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	697a      	ldr	r2, [r7, #20]
 8004a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	621a      	str	r2, [r3, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	371c      	adds	r7, #28
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40001800 	.word	0x40001800
 8004ab4:	40014000 	.word	0x40014000

08004ab8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b087      	sub	sp, #28
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	60f8      	str	r0, [r7, #12]
 8004ac0:	60b9      	str	r1, [r7, #8]
 8004ac2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6a1b      	ldr	r3, [r3, #32]
 8004ac8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	f023 0201 	bic.w	r2, r3, #1
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ae2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	011b      	lsls	r3, r3, #4
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f023 030a 	bic.w	r3, r3, #10
 8004af4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	693a      	ldr	r2, [r7, #16]
 8004b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	621a      	str	r2, [r3, #32]
}
 8004b0a:	bf00      	nop
 8004b0c:	371c      	adds	r7, #28
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b14:	4770      	bx	lr

08004b16 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004b16:	b480      	push	{r7}
 8004b18:	b087      	sub	sp, #28
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	60f8      	str	r0, [r7, #12]
 8004b1e:	60b9      	str	r1, [r7, #8]
 8004b20:	607a      	str	r2, [r7, #4]
 8004b22:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	f023 0210 	bic.w	r2, r3, #16
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	699b      	ldr	r3, [r3, #24]
 8004b3a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	021b      	lsls	r3, r3, #8
 8004b48:	693a      	ldr	r2, [r7, #16]
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004b54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	031b      	lsls	r3, r3, #12
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	693a      	ldr	r2, [r7, #16]
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004b68:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	4313      	orrs	r3, r2
 8004b76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	697a      	ldr	r2, [r7, #20]
 8004b82:	621a      	str	r2, [r3, #32]
}
 8004b84:	bf00      	nop
 8004b86:	371c      	adds	r7, #28
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b087      	sub	sp, #28
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	f023 0210 	bic.w	r2, r3, #16
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004bba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	031b      	lsls	r3, r3, #12
 8004bc0:	693a      	ldr	r2, [r7, #16]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004bcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	011b      	lsls	r3, r3, #4
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	697a      	ldr	r2, [r7, #20]
 8004be2:	621a      	str	r2, [r3, #32]
}
 8004be4:	bf00      	nop
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b087      	sub	sp, #28
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a1b      	ldr	r3, [r3, #32]
 8004c02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6a1b      	ldr	r3, [r3, #32]
 8004c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	69db      	ldr	r3, [r3, #28]
 8004c14:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	f023 0303 	bic.w	r3, r3, #3
 8004c1c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004c2c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	693a      	ldr	r2, [r7, #16]
 8004c36:	4313      	orrs	r3, r2
 8004c38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004c40:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	021b      	lsls	r3, r3, #8
 8004c46:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	621a      	str	r2, [r3, #32]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]
 8004c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	6a1b      	ldr	r3, [r3, #32]
 8004c80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	69db      	ldr	r3, [r3, #28]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c94:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	021b      	lsls	r3, r3, #8
 8004c9a:	693a      	ldr	r2, [r7, #16]
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004ca6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	031b      	lsls	r3, r3, #12
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	693a      	ldr	r2, [r7, #16]
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8004cba:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	031b      	lsls	r3, r3, #12
 8004cc0:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	697a      	ldr	r2, [r7, #20]
 8004cd4:	621a      	str	r2, [r3, #32]
}
 8004cd6:	bf00      	nop
 8004cd8:	371c      	adds	r7, #28
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	4b09      	ldr	r3, [pc, #36]	@ (8004d1c <TIM_ITRx_SetConfig+0x38>)
 8004cf8:	4013      	ands	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	f043 0307 	orr.w	r3, r3, #7
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	609a      	str	r2, [r3, #8]
}
 8004d0e:	bf00      	nop
 8004d10:	3714      	adds	r7, #20
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
 8004d1a:	bf00      	nop
 8004d1c:	ffcfff8f 	.word	0xffcfff8f

08004d20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b087      	sub	sp, #28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	607a      	str	r2, [r7, #4]
 8004d2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	371c      	adds	r7, #28
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f003 031f 	and.w	r3, r3, #31
 8004d72:	2201      	movs	r2, #1
 8004d74:	fa02 f303 	lsl.w	r3, r2, r3
 8004d78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6a1a      	ldr	r2, [r3, #32]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	43db      	mvns	r3, r3
 8004d82:	401a      	ands	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a1a      	ldr	r2, [r3, #32]
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f003 031f 	and.w	r3, r3, #31
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	fa01 f303 	lsl.w	r3, r1, r3
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	621a      	str	r2, [r3, #32]
}
 8004d9e:	bf00      	nop
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
	...

08004dac <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIMEx_PWMN_Start+0x24>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e022      	b.n	8004e16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2b04      	cmp	r3, #4
 8004dd4:	d109      	bne.n	8004dea <HAL_TIMEx_PWMN_Start+0x3e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	bf14      	ite	ne
 8004de2:	2301      	movne	r3, #1
 8004de4:	2300      	moveq	r3, #0
 8004de6:	b2db      	uxtb	r3, r3
 8004de8:	e015      	b.n	8004e16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d109      	bne.n	8004e04 <HAL_TIMEx_PWMN_Start+0x58>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	bf14      	ite	ne
 8004dfc:	2301      	movne	r3, #1
 8004dfe:	2300      	moveq	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	e008      	b.n	8004e16 <HAL_TIMEx_PWMN_Start+0x6a>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	bf14      	ite	ne
 8004e10:	2301      	movne	r3, #1
 8004e12:	2300      	moveq	r3, #0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e073      	b.n	8004f06 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d104      	bne.n	8004e2e <HAL_TIMEx_PWMN_Start+0x82>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2202      	movs	r2, #2
 8004e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e2c:	e013      	b.n	8004e56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b04      	cmp	r3, #4
 8004e32:	d104      	bne.n	8004e3e <HAL_TIMEx_PWMN_Start+0x92>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2202      	movs	r2, #2
 8004e38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e3c:	e00b      	b.n	8004e56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b08      	cmp	r3, #8
 8004e42:	d104      	bne.n	8004e4e <HAL_TIMEx_PWMN_Start+0xa2>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2202      	movs	r2, #2
 8004e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e4c:	e003      	b.n	8004e56 <HAL_TIMEx_PWMN_Start+0xaa>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2202      	movs	r2, #2
 8004e52:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2204      	movs	r2, #4
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f9ee 	bl	8005240 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e72:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a25      	ldr	r2, [pc, #148]	@ (8004f10 <HAL_TIMEx_PWMN_Start+0x164>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d022      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e86:	d01d      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a21      	ldr	r2, [pc, #132]	@ (8004f14 <HAL_TIMEx_PWMN_Start+0x168>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d018      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a20      	ldr	r2, [pc, #128]	@ (8004f18 <HAL_TIMEx_PWMN_Start+0x16c>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d013      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8004f1c <HAL_TIMEx_PWMN_Start+0x170>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d00e      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <HAL_TIMEx_PWMN_Start+0x174>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d009      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004f24 <HAL_TIMEx_PWMN_Start+0x178>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIMEx_PWMN_Start+0x118>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8004f28 <HAL_TIMEx_PWMN_Start+0x17c>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d115      	bne.n	8004ef0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	689a      	ldr	r2, [r3, #8]
 8004eca:	4b18      	ldr	r3, [pc, #96]	@ (8004f2c <HAL_TIMEx_PWMN_Start+0x180>)
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2b06      	cmp	r3, #6
 8004ed4:	d015      	beq.n	8004f02 <HAL_TIMEx_PWMN_Start+0x156>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004edc:	d011      	beq.n	8004f02 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f042 0201 	orr.w	r2, r2, #1
 8004eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eee:	e008      	b.n	8004f02 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f042 0201 	orr.w	r2, r2, #1
 8004efe:	601a      	str	r2, [r3, #0]
 8004f00:	e000      	b.n	8004f04 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40010000 	.word	0x40010000
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800
 8004f1c:	40000c00 	.word	0x40000c00
 8004f20:	40010400 	.word	0x40010400
 8004f24:	40001800 	.word	0x40001800
 8004f28:	40014000 	.word	0x40014000
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 f97c 	bl	8005240 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	6a1a      	ldr	r2, [r3, #32]
 8004f4e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f52:	4013      	ands	r3, r2
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10f      	bne.n	8004f78 <HAL_TIMEx_PWMN_Stop+0x48>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6a1a      	ldr	r2, [r3, #32]
 8004f5e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d107      	bne.n	8004f78 <HAL_TIMEx_PWMN_Stop+0x48>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f76:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	6a1a      	ldr	r2, [r3, #32]
 8004f7e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f82:	4013      	ands	r3, r2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10f      	bne.n	8004fa8 <HAL_TIMEx_PWMN_Stop+0x78>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <HAL_TIMEx_PWMN_Stop+0x78>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 0201 	bic.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d104      	bne.n	8004fb8 <HAL_TIMEx_PWMN_Stop+0x88>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fb6:	e013      	b.n	8004fe0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d104      	bne.n	8004fc8 <HAL_TIMEx_PWMN_Stop+0x98>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc6:	e00b      	b.n	8004fe0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d104      	bne.n	8004fd8 <HAL_TIMEx_PWMN_Stop+0xa8>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fd6:	e003      	b.n	8004fe0 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
	...

08004fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005000:	2302      	movs	r3, #2
 8005002:	e06d      	b.n	80050e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a30      	ldr	r2, [pc, #192]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d004      	beq.n	8005038 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a2f      	ldr	r2, [pc, #188]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d108      	bne.n	800504a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800503e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	4313      	orrs	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005050:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a20      	ldr	r2, [pc, #128]	@ (80050ec <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d022      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005076:	d01d      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1d      	ldr	r2, [pc, #116]	@ (80050f4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d018      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1c      	ldr	r2, [pc, #112]	@ (80050f8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d013      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1a      	ldr	r2, [pc, #104]	@ (80050fc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d00e      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a15      	ldr	r2, [pc, #84]	@ (80050f0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d009      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a16      	ldr	r2, [pc, #88]	@ (8005100 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d004      	beq.n	80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a15      	ldr	r2, [pc, #84]	@ (8005104 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d10c      	bne.n	80050ce <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050ba:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2200      	movs	r2, #0
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	40010000 	.word	0x40010000
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40000400 	.word	0x40000400
 80050f8:	40000800 	.word	0x40000800
 80050fc:	40000c00 	.word	0x40000c00
 8005100:	40001800 	.word	0x40001800
 8005104:	40014000 	.word	0x40014000

08005108 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
 8005110:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005112:	2300      	movs	r3, #0
 8005114:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800511c:	2b01      	cmp	r3, #1
 800511e:	d101      	bne.n	8005124 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005120:	2302      	movs	r3, #2
 8005122:	e065      	b.n	80051f0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4313      	orrs	r3, r2
 8005146:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	4313      	orrs	r3, r2
 8005154:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4313      	orrs	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	4313      	orrs	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	699b      	ldr	r3, [r3, #24]
 8005198:	041b      	lsls	r3, r3, #16
 800519a:	4313      	orrs	r3, r2
 800519c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4a16      	ldr	r2, [pc, #88]	@ (80051fc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d004      	beq.n	80051b2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a14      	ldr	r2, [pc, #80]	@ (8005200 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d115      	bne.n	80051de <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051bc:	051b      	lsls	r3, r3, #20
 80051be:	4313      	orrs	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	69db      	ldr	r3, [r3, #28]
 80051cc:	4313      	orrs	r3, r2
 80051ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3714      	adds	r7, #20
 80051f4:	46bd      	mov	sp, r7
 80051f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fa:	4770      	bx	lr
 80051fc:	40010000 	.word	0x40010000
 8005200:	40010400 	.word	0x40010400

08005204 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005240:	b480      	push	{r7}
 8005242:	b087      	sub	sp, #28
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	f003 030f 	and.w	r3, r3, #15
 8005252:	2204      	movs	r2, #4
 8005254:	fa02 f303 	lsl.w	r3, r2, r3
 8005258:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a1a      	ldr	r2, [r3, #32]
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	43db      	mvns	r3, r3
 8005262:	401a      	ands	r2, r3
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1a      	ldr	r2, [r3, #32]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	fa01 f303 	lsl.w	r3, r1, r3
 8005278:	431a      	orrs	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	621a      	str	r2, [r3, #32]
}
 800527e:	bf00      	nop
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005288:	4770      	bx	lr

0800528a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800528a:	b580      	push	{r7, lr}
 800528c:	b082      	sub	sp, #8
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d101      	bne.n	800529c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e042      	b.n	8005322 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d106      	bne.n	80052b4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f83b 	bl	800532a <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2224      	movs	r2, #36	@ 0x24
 80052b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f022 0201 	bic.w	r2, r2, #1
 80052ca:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d002      	beq.n	80052da <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fd9b 	bl	8005e10 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f830 	bl	8005340 <UART_SetConfig>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e01b      	b.n	8005322 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052f8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005308:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	f000 fe1a 	bl	8005f54 <UART_CheckIdleState>
 8005320:	4603      	mov	r3, r0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3708      	adds	r7, #8
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8005332:	bf00      	nop
 8005334:	370c      	adds	r7, #12
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
	...

08005340 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005340:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005344:	b092      	sub	sp, #72	@ 0x48
 8005346:	af00      	add	r7, sp, #0
 8005348:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800534a:	2300      	movs	r3, #0
 800534c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	689a      	ldr	r2, [r3, #8]
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	431a      	orrs	r2, r3
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	431a      	orrs	r2, r3
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	69db      	ldr	r3, [r3, #28]
 8005364:	4313      	orrs	r3, r2
 8005366:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4bbe      	ldr	r3, [pc, #760]	@ (8005668 <UART_SetConfig+0x328>)
 8005370:	4013      	ands	r3, r2
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	6812      	ldr	r2, [r2, #0]
 8005376:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005378:	430b      	orrs	r3, r1
 800537a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537c:	697b      	ldr	r3, [r7, #20]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	68da      	ldr	r2, [r3, #12]
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	699b      	ldr	r3, [r3, #24]
 8005396:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4ab3      	ldr	r2, [pc, #716]	@ (800566c <UART_SetConfig+0x32c>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d004      	beq.n	80053ac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053a8:	4313      	orrs	r3, r2
 80053aa:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	689a      	ldr	r2, [r3, #8]
 80053b2:	4baf      	ldr	r3, [pc, #700]	@ (8005670 <UART_SetConfig+0x330>)
 80053b4:	4013      	ands	r3, r2
 80053b6:	697a      	ldr	r2, [r7, #20]
 80053b8:	6812      	ldr	r2, [r2, #0]
 80053ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80053bc:	430b      	orrs	r3, r1
 80053be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053c6:	f023 010f 	bic.w	r1, r3, #15
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	4aa6      	ldr	r2, [pc, #664]	@ (8005674 <UART_SetConfig+0x334>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d177      	bne.n	80054d0 <UART_SetConfig+0x190>
 80053e0:	4ba5      	ldr	r3, [pc, #660]	@ (8005678 <UART_SetConfig+0x338>)
 80053e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80053e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80053e8:	2b28      	cmp	r3, #40	@ 0x28
 80053ea:	d86d      	bhi.n	80054c8 <UART_SetConfig+0x188>
 80053ec:	a201      	add	r2, pc, #4	@ (adr r2, 80053f4 <UART_SetConfig+0xb4>)
 80053ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053f2:	bf00      	nop
 80053f4:	08005499 	.word	0x08005499
 80053f8:	080054c9 	.word	0x080054c9
 80053fc:	080054c9 	.word	0x080054c9
 8005400:	080054c9 	.word	0x080054c9
 8005404:	080054c9 	.word	0x080054c9
 8005408:	080054c9 	.word	0x080054c9
 800540c:	080054c9 	.word	0x080054c9
 8005410:	080054c9 	.word	0x080054c9
 8005414:	080054a1 	.word	0x080054a1
 8005418:	080054c9 	.word	0x080054c9
 800541c:	080054c9 	.word	0x080054c9
 8005420:	080054c9 	.word	0x080054c9
 8005424:	080054c9 	.word	0x080054c9
 8005428:	080054c9 	.word	0x080054c9
 800542c:	080054c9 	.word	0x080054c9
 8005430:	080054c9 	.word	0x080054c9
 8005434:	080054a9 	.word	0x080054a9
 8005438:	080054c9 	.word	0x080054c9
 800543c:	080054c9 	.word	0x080054c9
 8005440:	080054c9 	.word	0x080054c9
 8005444:	080054c9 	.word	0x080054c9
 8005448:	080054c9 	.word	0x080054c9
 800544c:	080054c9 	.word	0x080054c9
 8005450:	080054c9 	.word	0x080054c9
 8005454:	080054b1 	.word	0x080054b1
 8005458:	080054c9 	.word	0x080054c9
 800545c:	080054c9 	.word	0x080054c9
 8005460:	080054c9 	.word	0x080054c9
 8005464:	080054c9 	.word	0x080054c9
 8005468:	080054c9 	.word	0x080054c9
 800546c:	080054c9 	.word	0x080054c9
 8005470:	080054c9 	.word	0x080054c9
 8005474:	080054b9 	.word	0x080054b9
 8005478:	080054c9 	.word	0x080054c9
 800547c:	080054c9 	.word	0x080054c9
 8005480:	080054c9 	.word	0x080054c9
 8005484:	080054c9 	.word	0x080054c9
 8005488:	080054c9 	.word	0x080054c9
 800548c:	080054c9 	.word	0x080054c9
 8005490:	080054c9 	.word	0x080054c9
 8005494:	080054c1 	.word	0x080054c1
 8005498:	2301      	movs	r3, #1
 800549a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800549e:	e222      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054a0:	2304      	movs	r3, #4
 80054a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054a6:	e21e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054a8:	2308      	movs	r3, #8
 80054aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ae:	e21a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054b0:	2310      	movs	r3, #16
 80054b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054b6:	e216      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054b8:	2320      	movs	r3, #32
 80054ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054be:	e212      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054c0:	2340      	movs	r3, #64	@ 0x40
 80054c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054c6:	e20e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054c8:	2380      	movs	r3, #128	@ 0x80
 80054ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80054ce:	e20a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4a69      	ldr	r2, [pc, #420]	@ (800567c <UART_SetConfig+0x33c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d130      	bne.n	800553c <UART_SetConfig+0x1fc>
 80054da:	4b67      	ldr	r3, [pc, #412]	@ (8005678 <UART_SetConfig+0x338>)
 80054dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	2b05      	cmp	r3, #5
 80054e4:	d826      	bhi.n	8005534 <UART_SetConfig+0x1f4>
 80054e6:	a201      	add	r2, pc, #4	@ (adr r2, 80054ec <UART_SetConfig+0x1ac>)
 80054e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ec:	08005505 	.word	0x08005505
 80054f0:	0800550d 	.word	0x0800550d
 80054f4:	08005515 	.word	0x08005515
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005525 	.word	0x08005525
 8005500:	0800552d 	.word	0x0800552d
 8005504:	2300      	movs	r3, #0
 8005506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800550a:	e1ec      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800550c:	2304      	movs	r3, #4
 800550e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005512:	e1e8      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005514:	2308      	movs	r3, #8
 8005516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800551a:	e1e4      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800551c:	2310      	movs	r3, #16
 800551e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005522:	e1e0      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005524:	2320      	movs	r3, #32
 8005526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800552a:	e1dc      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800552c:	2340      	movs	r3, #64	@ 0x40
 800552e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005532:	e1d8      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005534:	2380      	movs	r3, #128	@ 0x80
 8005536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800553a:	e1d4      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a4f      	ldr	r2, [pc, #316]	@ (8005680 <UART_SetConfig+0x340>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d130      	bne.n	80055a8 <UART_SetConfig+0x268>
 8005546:	4b4c      	ldr	r3, [pc, #304]	@ (8005678 <UART_SetConfig+0x338>)
 8005548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b05      	cmp	r3, #5
 8005550:	d826      	bhi.n	80055a0 <UART_SetConfig+0x260>
 8005552:	a201      	add	r2, pc, #4	@ (adr r2, 8005558 <UART_SetConfig+0x218>)
 8005554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005558:	08005571 	.word	0x08005571
 800555c:	08005579 	.word	0x08005579
 8005560:	08005581 	.word	0x08005581
 8005564:	08005589 	.word	0x08005589
 8005568:	08005591 	.word	0x08005591
 800556c:	08005599 	.word	0x08005599
 8005570:	2300      	movs	r3, #0
 8005572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005576:	e1b6      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005578:	2304      	movs	r3, #4
 800557a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800557e:	e1b2      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005580:	2308      	movs	r3, #8
 8005582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005586:	e1ae      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005588:	2310      	movs	r3, #16
 800558a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800558e:	e1aa      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005590:	2320      	movs	r3, #32
 8005592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005596:	e1a6      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005598:	2340      	movs	r3, #64	@ 0x40
 800559a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800559e:	e1a2      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055a6:	e19e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a35      	ldr	r2, [pc, #212]	@ (8005684 <UART_SetConfig+0x344>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d130      	bne.n	8005614 <UART_SetConfig+0x2d4>
 80055b2:	4b31      	ldr	r3, [pc, #196]	@ (8005678 <UART_SetConfig+0x338>)
 80055b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	2b05      	cmp	r3, #5
 80055bc:	d826      	bhi.n	800560c <UART_SetConfig+0x2cc>
 80055be:	a201      	add	r2, pc, #4	@ (adr r2, 80055c4 <UART_SetConfig+0x284>)
 80055c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055c4:	080055dd 	.word	0x080055dd
 80055c8:	080055e5 	.word	0x080055e5
 80055cc:	080055ed 	.word	0x080055ed
 80055d0:	080055f5 	.word	0x080055f5
 80055d4:	080055fd 	.word	0x080055fd
 80055d8:	08005605 	.word	0x08005605
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e2:	e180      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055e4:	2304      	movs	r3, #4
 80055e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ea:	e17c      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055ec:	2308      	movs	r3, #8
 80055ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f2:	e178      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055f4:	2310      	movs	r3, #16
 80055f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fa:	e174      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80055fc:	2320      	movs	r3, #32
 80055fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005602:	e170      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005604:	2340      	movs	r3, #64	@ 0x40
 8005606:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560a:	e16c      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800560c:	2380      	movs	r3, #128	@ 0x80
 800560e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005612:	e168      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1b      	ldr	r2, [pc, #108]	@ (8005688 <UART_SetConfig+0x348>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d142      	bne.n	80056a4 <UART_SetConfig+0x364>
 800561e:	4b16      	ldr	r3, [pc, #88]	@ (8005678 <UART_SetConfig+0x338>)
 8005620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	2b05      	cmp	r3, #5
 8005628:	d838      	bhi.n	800569c <UART_SetConfig+0x35c>
 800562a:	a201      	add	r2, pc, #4	@ (adr r2, 8005630 <UART_SetConfig+0x2f0>)
 800562c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005630:	08005649 	.word	0x08005649
 8005634:	08005651 	.word	0x08005651
 8005638:	08005659 	.word	0x08005659
 800563c:	08005661 	.word	0x08005661
 8005640:	0800568d 	.word	0x0800568d
 8005644:	08005695 	.word	0x08005695
 8005648:	2300      	movs	r3, #0
 800564a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564e:	e14a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005650:	2304      	movs	r3, #4
 8005652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005656:	e146      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005658:	2308      	movs	r3, #8
 800565a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565e:	e142      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005660:	2310      	movs	r3, #16
 8005662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005666:	e13e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005668:	cfff69f3 	.word	0xcfff69f3
 800566c:	58000c00 	.word	0x58000c00
 8005670:	11fff4ff 	.word	0x11fff4ff
 8005674:	40011000 	.word	0x40011000
 8005678:	58024400 	.word	0x58024400
 800567c:	40004400 	.word	0x40004400
 8005680:	40004800 	.word	0x40004800
 8005684:	40004c00 	.word	0x40004c00
 8005688:	40005000 	.word	0x40005000
 800568c:	2320      	movs	r3, #32
 800568e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005692:	e128      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005694:	2340      	movs	r3, #64	@ 0x40
 8005696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800569a:	e124      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800569c:	2380      	movs	r3, #128	@ 0x80
 800569e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056a2:	e120      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4acb      	ldr	r2, [pc, #812]	@ (80059d8 <UART_SetConfig+0x698>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d176      	bne.n	800579c <UART_SetConfig+0x45c>
 80056ae:	4bcb      	ldr	r3, [pc, #812]	@ (80059dc <UART_SetConfig+0x69c>)
 80056b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056b6:	2b28      	cmp	r3, #40	@ 0x28
 80056b8:	d86c      	bhi.n	8005794 <UART_SetConfig+0x454>
 80056ba:	a201      	add	r2, pc, #4	@ (adr r2, 80056c0 <UART_SetConfig+0x380>)
 80056bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c0:	08005765 	.word	0x08005765
 80056c4:	08005795 	.word	0x08005795
 80056c8:	08005795 	.word	0x08005795
 80056cc:	08005795 	.word	0x08005795
 80056d0:	08005795 	.word	0x08005795
 80056d4:	08005795 	.word	0x08005795
 80056d8:	08005795 	.word	0x08005795
 80056dc:	08005795 	.word	0x08005795
 80056e0:	0800576d 	.word	0x0800576d
 80056e4:	08005795 	.word	0x08005795
 80056e8:	08005795 	.word	0x08005795
 80056ec:	08005795 	.word	0x08005795
 80056f0:	08005795 	.word	0x08005795
 80056f4:	08005795 	.word	0x08005795
 80056f8:	08005795 	.word	0x08005795
 80056fc:	08005795 	.word	0x08005795
 8005700:	08005775 	.word	0x08005775
 8005704:	08005795 	.word	0x08005795
 8005708:	08005795 	.word	0x08005795
 800570c:	08005795 	.word	0x08005795
 8005710:	08005795 	.word	0x08005795
 8005714:	08005795 	.word	0x08005795
 8005718:	08005795 	.word	0x08005795
 800571c:	08005795 	.word	0x08005795
 8005720:	0800577d 	.word	0x0800577d
 8005724:	08005795 	.word	0x08005795
 8005728:	08005795 	.word	0x08005795
 800572c:	08005795 	.word	0x08005795
 8005730:	08005795 	.word	0x08005795
 8005734:	08005795 	.word	0x08005795
 8005738:	08005795 	.word	0x08005795
 800573c:	08005795 	.word	0x08005795
 8005740:	08005785 	.word	0x08005785
 8005744:	08005795 	.word	0x08005795
 8005748:	08005795 	.word	0x08005795
 800574c:	08005795 	.word	0x08005795
 8005750:	08005795 	.word	0x08005795
 8005754:	08005795 	.word	0x08005795
 8005758:	08005795 	.word	0x08005795
 800575c:	08005795 	.word	0x08005795
 8005760:	0800578d 	.word	0x0800578d
 8005764:	2301      	movs	r3, #1
 8005766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800576a:	e0bc      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800576c:	2304      	movs	r3, #4
 800576e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005772:	e0b8      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005774:	2308      	movs	r3, #8
 8005776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800577a:	e0b4      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800577c:	2310      	movs	r3, #16
 800577e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005782:	e0b0      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005784:	2320      	movs	r3, #32
 8005786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578a:	e0ac      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800578c:	2340      	movs	r3, #64	@ 0x40
 800578e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005792:	e0a8      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005794:	2380      	movs	r3, #128	@ 0x80
 8005796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579a:	e0a4      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a8f      	ldr	r2, [pc, #572]	@ (80059e0 <UART_SetConfig+0x6a0>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d130      	bne.n	8005808 <UART_SetConfig+0x4c8>
 80057a6:	4b8d      	ldr	r3, [pc, #564]	@ (80059dc <UART_SetConfig+0x69c>)
 80057a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	2b05      	cmp	r3, #5
 80057b0:	d826      	bhi.n	8005800 <UART_SetConfig+0x4c0>
 80057b2:	a201      	add	r2, pc, #4	@ (adr r2, 80057b8 <UART_SetConfig+0x478>)
 80057b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057b8:	080057d1 	.word	0x080057d1
 80057bc:	080057d9 	.word	0x080057d9
 80057c0:	080057e1 	.word	0x080057e1
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	2300      	movs	r3, #0
 80057d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d6:	e086      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80057d8:	2304      	movs	r3, #4
 80057da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057de:	e082      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80057e0:	2308      	movs	r3, #8
 80057e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e6:	e07e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80057e8:	2310      	movs	r3, #16
 80057ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057ee:	e07a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80057f0:	2320      	movs	r3, #32
 80057f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057f6:	e076      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80057f8:	2340      	movs	r3, #64	@ 0x40
 80057fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057fe:	e072      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005800:	2380      	movs	r3, #128	@ 0x80
 8005802:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005806:	e06e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a75      	ldr	r2, [pc, #468]	@ (80059e4 <UART_SetConfig+0x6a4>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d130      	bne.n	8005874 <UART_SetConfig+0x534>
 8005812:	4b72      	ldr	r3, [pc, #456]	@ (80059dc <UART_SetConfig+0x69c>)
 8005814:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005816:	f003 0307 	and.w	r3, r3, #7
 800581a:	2b05      	cmp	r3, #5
 800581c:	d826      	bhi.n	800586c <UART_SetConfig+0x52c>
 800581e:	a201      	add	r2, pc, #4	@ (adr r2, 8005824 <UART_SetConfig+0x4e4>)
 8005820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005824:	0800583d 	.word	0x0800583d
 8005828:	08005845 	.word	0x08005845
 800582c:	0800584d 	.word	0x0800584d
 8005830:	08005855 	.word	0x08005855
 8005834:	0800585d 	.word	0x0800585d
 8005838:	08005865 	.word	0x08005865
 800583c:	2300      	movs	r3, #0
 800583e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005842:	e050      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005844:	2304      	movs	r3, #4
 8005846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800584a:	e04c      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800584c:	2308      	movs	r3, #8
 800584e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005852:	e048      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005854:	2310      	movs	r3, #16
 8005856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800585a:	e044      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800585c:	2320      	movs	r3, #32
 800585e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005862:	e040      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005864:	2340      	movs	r3, #64	@ 0x40
 8005866:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800586a:	e03c      	b.n	80058e6 <UART_SetConfig+0x5a6>
 800586c:	2380      	movs	r3, #128	@ 0x80
 800586e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005872:	e038      	b.n	80058e6 <UART_SetConfig+0x5a6>
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a5b      	ldr	r2, [pc, #364]	@ (80059e8 <UART_SetConfig+0x6a8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d130      	bne.n	80058e0 <UART_SetConfig+0x5a0>
 800587e:	4b57      	ldr	r3, [pc, #348]	@ (80059dc <UART_SetConfig+0x69c>)
 8005880:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005882:	f003 0307 	and.w	r3, r3, #7
 8005886:	2b05      	cmp	r3, #5
 8005888:	d826      	bhi.n	80058d8 <UART_SetConfig+0x598>
 800588a:	a201      	add	r2, pc, #4	@ (adr r2, 8005890 <UART_SetConfig+0x550>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058a9 	.word	0x080058a9
 8005894:	080058b1 	.word	0x080058b1
 8005898:	080058b9 	.word	0x080058b9
 800589c:	080058c1 	.word	0x080058c1
 80058a0:	080058c9 	.word	0x080058c9
 80058a4:	080058d1 	.word	0x080058d1
 80058a8:	2302      	movs	r3, #2
 80058aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ae:	e01a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058b0:	2304      	movs	r3, #4
 80058b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b6:	e016      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058b8:	2308      	movs	r3, #8
 80058ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058be:	e012      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058c0:	2310      	movs	r3, #16
 80058c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c6:	e00e      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058c8:	2320      	movs	r3, #32
 80058ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ce:	e00a      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058d0:	2340      	movs	r3, #64	@ 0x40
 80058d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d6:	e006      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058d8:	2380      	movs	r3, #128	@ 0x80
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e002      	b.n	80058e6 <UART_SetConfig+0x5a6>
 80058e0:	2380      	movs	r3, #128	@ 0x80
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a3f      	ldr	r2, [pc, #252]	@ (80059e8 <UART_SetConfig+0x6a8>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	f040 80f8 	bne.w	8005ae2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80058f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80058f6:	2b20      	cmp	r3, #32
 80058f8:	dc46      	bgt.n	8005988 <UART_SetConfig+0x648>
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	f2c0 8082 	blt.w	8005a04 <UART_SetConfig+0x6c4>
 8005900:	3b02      	subs	r3, #2
 8005902:	2b1e      	cmp	r3, #30
 8005904:	d87e      	bhi.n	8005a04 <UART_SetConfig+0x6c4>
 8005906:	a201      	add	r2, pc, #4	@ (adr r2, 800590c <UART_SetConfig+0x5cc>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800598f 	.word	0x0800598f
 8005910:	08005a05 	.word	0x08005a05
 8005914:	08005997 	.word	0x08005997
 8005918:	08005a05 	.word	0x08005a05
 800591c:	08005a05 	.word	0x08005a05
 8005920:	08005a05 	.word	0x08005a05
 8005924:	080059a7 	.word	0x080059a7
 8005928:	08005a05 	.word	0x08005a05
 800592c:	08005a05 	.word	0x08005a05
 8005930:	08005a05 	.word	0x08005a05
 8005934:	08005a05 	.word	0x08005a05
 8005938:	08005a05 	.word	0x08005a05
 800593c:	08005a05 	.word	0x08005a05
 8005940:	08005a05 	.word	0x08005a05
 8005944:	080059b7 	.word	0x080059b7
 8005948:	08005a05 	.word	0x08005a05
 800594c:	08005a05 	.word	0x08005a05
 8005950:	08005a05 	.word	0x08005a05
 8005954:	08005a05 	.word	0x08005a05
 8005958:	08005a05 	.word	0x08005a05
 800595c:	08005a05 	.word	0x08005a05
 8005960:	08005a05 	.word	0x08005a05
 8005964:	08005a05 	.word	0x08005a05
 8005968:	08005a05 	.word	0x08005a05
 800596c:	08005a05 	.word	0x08005a05
 8005970:	08005a05 	.word	0x08005a05
 8005974:	08005a05 	.word	0x08005a05
 8005978:	08005a05 	.word	0x08005a05
 800597c:	08005a05 	.word	0x08005a05
 8005980:	08005a05 	.word	0x08005a05
 8005984:	080059f7 	.word	0x080059f7
 8005988:	2b40      	cmp	r3, #64	@ 0x40
 800598a:	d037      	beq.n	80059fc <UART_SetConfig+0x6bc>
 800598c:	e03a      	b.n	8005a04 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800598e:	f7fd fad7 	bl	8002f40 <HAL_RCCEx_GetD3PCLK1Freq>
 8005992:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005994:	e03c      	b.n	8005a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800599a:	4618      	mov	r0, r3
 800599c:	f7fd fae6 	bl	8002f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80059a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059a4:	e034      	b.n	8005a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80059a6:	f107 0318 	add.w	r3, r7, #24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7fd fc32 	bl	8003214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059b4:	e02c      	b.n	8005a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80059b6:	4b09      	ldr	r3, [pc, #36]	@ (80059dc <UART_SetConfig+0x69c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f003 0320 	and.w	r3, r3, #32
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d016      	beq.n	80059f0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80059c2:	4b06      	ldr	r3, [pc, #24]	@ (80059dc <UART_SetConfig+0x69c>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	08db      	lsrs	r3, r3, #3
 80059c8:	f003 0303 	and.w	r3, r3, #3
 80059cc:	4a07      	ldr	r2, [pc, #28]	@ (80059ec <UART_SetConfig+0x6ac>)
 80059ce:	fa22 f303 	lsr.w	r3, r2, r3
 80059d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80059d4:	e01c      	b.n	8005a10 <UART_SetConfig+0x6d0>
 80059d6:	bf00      	nop
 80059d8:	40011400 	.word	0x40011400
 80059dc:	58024400 	.word	0x58024400
 80059e0:	40007800 	.word	0x40007800
 80059e4:	40007c00 	.word	0x40007c00
 80059e8:	58000c00 	.word	0x58000c00
 80059ec:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80059f0:	4b9d      	ldr	r3, [pc, #628]	@ (8005c68 <UART_SetConfig+0x928>)
 80059f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059f4:	e00c      	b.n	8005a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80059f6:	4b9d      	ldr	r3, [pc, #628]	@ (8005c6c <UART_SetConfig+0x92c>)
 80059f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80059fa:	e009      	b.n	8005a10 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80059fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005a00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005a02:	e005      	b.n	8005a10 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005a0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005a10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	f000 81de 	beq.w	8005dd4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a1c:	4a94      	ldr	r2, [pc, #592]	@ (8005c70 <UART_SetConfig+0x930>)
 8005a1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a22:	461a      	mov	r2, r3
 8005a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a26:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a2a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	4613      	mov	r3, r2
 8005a32:	005b      	lsls	r3, r3, #1
 8005a34:	4413      	add	r3, r2
 8005a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d305      	bcc.n	8005a48 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005a42:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d903      	bls.n	8005a50 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005a4e:	e1c1      	b.n	8005dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005a50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a52:	2200      	movs	r2, #0
 8005a54:	60bb      	str	r3, [r7, #8]
 8005a56:	60fa      	str	r2, [r7, #12]
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	4a84      	ldr	r2, [pc, #528]	@ (8005c70 <UART_SetConfig+0x930>)
 8005a5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	2200      	movs	r2, #0
 8005a66:	603b      	str	r3, [r7, #0]
 8005a68:	607a      	str	r2, [r7, #4]
 8005a6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005a72:	f7fa fc31 	bl	80002d8 <__aeabi_uldivmod>
 8005a76:	4602      	mov	r2, r0
 8005a78:	460b      	mov	r3, r1
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	f04f 0200 	mov.w	r2, #0
 8005a82:	f04f 0300 	mov.w	r3, #0
 8005a86:	020b      	lsls	r3, r1, #8
 8005a88:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005a8c:	0202      	lsls	r2, r0, #8
 8005a8e:	6979      	ldr	r1, [r7, #20]
 8005a90:	6849      	ldr	r1, [r1, #4]
 8005a92:	0849      	lsrs	r1, r1, #1
 8005a94:	2000      	movs	r0, #0
 8005a96:	460c      	mov	r4, r1
 8005a98:	4605      	mov	r5, r0
 8005a9a:	eb12 0804 	adds.w	r8, r2, r4
 8005a9e:	eb43 0905 	adc.w	r9, r3, r5
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	469a      	mov	sl, r3
 8005aaa:	4693      	mov	fp, r2
 8005aac:	4652      	mov	r2, sl
 8005aae:	465b      	mov	r3, fp
 8005ab0:	4640      	mov	r0, r8
 8005ab2:	4649      	mov	r1, r9
 8005ab4:	f7fa fc10 	bl	80002d8 <__aeabi_uldivmod>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	460b      	mov	r3, r1
 8005abc:	4613      	mov	r3, r2
 8005abe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ac6:	d308      	bcc.n	8005ada <UART_SetConfig+0x79a>
 8005ac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ace:	d204      	bcs.n	8005ada <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ad6:	60da      	str	r2, [r3, #12]
 8005ad8:	e17c      	b.n	8005dd4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ae0:	e178      	b.n	8005dd4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	69db      	ldr	r3, [r3, #28]
 8005ae6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005aea:	f040 80c5 	bne.w	8005c78 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005aee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	dc48      	bgt.n	8005b88 <UART_SetConfig+0x848>
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	db7b      	blt.n	8005bf2 <UART_SetConfig+0x8b2>
 8005afa:	2b20      	cmp	r3, #32
 8005afc:	d879      	bhi.n	8005bf2 <UART_SetConfig+0x8b2>
 8005afe:	a201      	add	r2, pc, #4	@ (adr r2, 8005b04 <UART_SetConfig+0x7c4>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b8f 	.word	0x08005b8f
 8005b08:	08005b97 	.word	0x08005b97
 8005b0c:	08005bf3 	.word	0x08005bf3
 8005b10:	08005bf3 	.word	0x08005bf3
 8005b14:	08005b9f 	.word	0x08005b9f
 8005b18:	08005bf3 	.word	0x08005bf3
 8005b1c:	08005bf3 	.word	0x08005bf3
 8005b20:	08005bf3 	.word	0x08005bf3
 8005b24:	08005baf 	.word	0x08005baf
 8005b28:	08005bf3 	.word	0x08005bf3
 8005b2c:	08005bf3 	.word	0x08005bf3
 8005b30:	08005bf3 	.word	0x08005bf3
 8005b34:	08005bf3 	.word	0x08005bf3
 8005b38:	08005bf3 	.word	0x08005bf3
 8005b3c:	08005bf3 	.word	0x08005bf3
 8005b40:	08005bf3 	.word	0x08005bf3
 8005b44:	08005bbf 	.word	0x08005bbf
 8005b48:	08005bf3 	.word	0x08005bf3
 8005b4c:	08005bf3 	.word	0x08005bf3
 8005b50:	08005bf3 	.word	0x08005bf3
 8005b54:	08005bf3 	.word	0x08005bf3
 8005b58:	08005bf3 	.word	0x08005bf3
 8005b5c:	08005bf3 	.word	0x08005bf3
 8005b60:	08005bf3 	.word	0x08005bf3
 8005b64:	08005bf3 	.word	0x08005bf3
 8005b68:	08005bf3 	.word	0x08005bf3
 8005b6c:	08005bf3 	.word	0x08005bf3
 8005b70:	08005bf3 	.word	0x08005bf3
 8005b74:	08005bf3 	.word	0x08005bf3
 8005b78:	08005bf3 	.word	0x08005bf3
 8005b7c:	08005bf3 	.word	0x08005bf3
 8005b80:	08005bf3 	.word	0x08005bf3
 8005b84:	08005be5 	.word	0x08005be5
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	d02e      	beq.n	8005bea <UART_SetConfig+0x8aa>
 8005b8c:	e031      	b.n	8005bf2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b8e:	f7fd f9ab 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8005b92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b94:	e033      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005b96:	f7fd f9bd 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8005b9a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005b9c:	e02f      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b9e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fd f9e2 	bl	8002f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bac:	e027      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bae:	f107 0318 	add.w	r3, r7, #24
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f7fd fb2e 	bl	8003214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bbc:	e01f      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005bbe:	4b2d      	ldr	r3, [pc, #180]	@ (8005c74 <UART_SetConfig+0x934>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f003 0320 	and.w	r3, r3, #32
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005bca:	4b2a      	ldr	r3, [pc, #168]	@ (8005c74 <UART_SetConfig+0x934>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	08db      	lsrs	r3, r3, #3
 8005bd0:	f003 0303 	and.w	r3, r3, #3
 8005bd4:	4a24      	ldr	r2, [pc, #144]	@ (8005c68 <UART_SetConfig+0x928>)
 8005bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005bdc:	e00f      	b.n	8005bfe <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005bde:	4b22      	ldr	r3, [pc, #136]	@ (8005c68 <UART_SetConfig+0x928>)
 8005be0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be2:	e00c      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005be4:	4b21      	ldr	r3, [pc, #132]	@ (8005c6c <UART_SetConfig+0x92c>)
 8005be6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005be8:	e009      	b.n	8005bfe <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005bf0:	e005      	b.n	8005bfe <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005bfc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005bfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	f000 80e7 	beq.w	8005dd4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c0a:	4a19      	ldr	r2, [pc, #100]	@ (8005c70 <UART_SetConfig+0x930>)
 8005c0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005c10:	461a      	mov	r2, r3
 8005c12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c14:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c18:	005a      	lsls	r2, r3, #1
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	085b      	lsrs	r3, r3, #1
 8005c20:	441a      	add	r2, r3
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	2b0f      	cmp	r3, #15
 8005c30:	d916      	bls.n	8005c60 <UART_SetConfig+0x920>
 8005c32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c38:	d212      	bcs.n	8005c60 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3c:	b29b      	uxth	r3, r3
 8005c3e:	f023 030f 	bic.w	r3, r3, #15
 8005c42:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005c52:	4313      	orrs	r3, r2
 8005c54:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005c56:	697b      	ldr	r3, [r7, #20]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005c5c:	60da      	str	r2, [r3, #12]
 8005c5e:	e0b9      	b.n	8005dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c66:	e0b5      	b.n	8005dd4 <UART_SetConfig+0xa94>
 8005c68:	03d09000 	.word	0x03d09000
 8005c6c:	003d0900 	.word	0x003d0900
 8005c70:	080062dc 	.word	0x080062dc
 8005c74:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c78:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c7c:	2b20      	cmp	r3, #32
 8005c7e:	dc49      	bgt.n	8005d14 <UART_SetConfig+0x9d4>
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	db7c      	blt.n	8005d7e <UART_SetConfig+0xa3e>
 8005c84:	2b20      	cmp	r3, #32
 8005c86:	d87a      	bhi.n	8005d7e <UART_SetConfig+0xa3e>
 8005c88:	a201      	add	r2, pc, #4	@ (adr r2, 8005c90 <UART_SetConfig+0x950>)
 8005c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8e:	bf00      	nop
 8005c90:	08005d1b 	.word	0x08005d1b
 8005c94:	08005d23 	.word	0x08005d23
 8005c98:	08005d7f 	.word	0x08005d7f
 8005c9c:	08005d7f 	.word	0x08005d7f
 8005ca0:	08005d2b 	.word	0x08005d2b
 8005ca4:	08005d7f 	.word	0x08005d7f
 8005ca8:	08005d7f 	.word	0x08005d7f
 8005cac:	08005d7f 	.word	0x08005d7f
 8005cb0:	08005d3b 	.word	0x08005d3b
 8005cb4:	08005d7f 	.word	0x08005d7f
 8005cb8:	08005d7f 	.word	0x08005d7f
 8005cbc:	08005d7f 	.word	0x08005d7f
 8005cc0:	08005d7f 	.word	0x08005d7f
 8005cc4:	08005d7f 	.word	0x08005d7f
 8005cc8:	08005d7f 	.word	0x08005d7f
 8005ccc:	08005d7f 	.word	0x08005d7f
 8005cd0:	08005d4b 	.word	0x08005d4b
 8005cd4:	08005d7f 	.word	0x08005d7f
 8005cd8:	08005d7f 	.word	0x08005d7f
 8005cdc:	08005d7f 	.word	0x08005d7f
 8005ce0:	08005d7f 	.word	0x08005d7f
 8005ce4:	08005d7f 	.word	0x08005d7f
 8005ce8:	08005d7f 	.word	0x08005d7f
 8005cec:	08005d7f 	.word	0x08005d7f
 8005cf0:	08005d7f 	.word	0x08005d7f
 8005cf4:	08005d7f 	.word	0x08005d7f
 8005cf8:	08005d7f 	.word	0x08005d7f
 8005cfc:	08005d7f 	.word	0x08005d7f
 8005d00:	08005d7f 	.word	0x08005d7f
 8005d04:	08005d7f 	.word	0x08005d7f
 8005d08:	08005d7f 	.word	0x08005d7f
 8005d0c:	08005d7f 	.word	0x08005d7f
 8005d10:	08005d71 	.word	0x08005d71
 8005d14:	2b40      	cmp	r3, #64	@ 0x40
 8005d16:	d02e      	beq.n	8005d76 <UART_SetConfig+0xa36>
 8005d18:	e031      	b.n	8005d7e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d1a:	f7fd f8e5 	bl	8002ee8 <HAL_RCC_GetPCLK1Freq>
 8005d1e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d20:	e033      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d22:	f7fd f8f7 	bl	8002f14 <HAL_RCC_GetPCLK2Freq>
 8005d26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d28:	e02f      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd f91c 	bl	8002f6c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d38:	e027      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d3a:	f107 0318 	add.w	r3, r7, #24
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f7fd fa68 	bl	8003214 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d48:	e01f      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8005e00 <UART_SetConfig+0xac0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d56:	4b2a      	ldr	r3, [pc, #168]	@ (8005e00 <UART_SetConfig+0xac0>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	08db      	lsrs	r3, r3, #3
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	4a28      	ldr	r2, [pc, #160]	@ (8005e04 <UART_SetConfig+0xac4>)
 8005d62:	fa22 f303 	lsr.w	r3, r2, r3
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d68:	e00f      	b.n	8005d8a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005d6a:	4b26      	ldr	r3, [pc, #152]	@ (8005e04 <UART_SetConfig+0xac4>)
 8005d6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d6e:	e00c      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d70:	4b25      	ldr	r3, [pc, #148]	@ (8005e08 <UART_SetConfig+0xac8>)
 8005d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d74:	e009      	b.n	8005d8a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d7c:	e005      	b.n	8005d8a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d88:	bf00      	nop
    }

    if (pclk != 0U)
 8005d8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d021      	beq.n	8005dd4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d94:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <UART_SetConfig+0xacc>)
 8005d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	085b      	lsrs	r3, r3, #1
 8005da8:	441a      	add	r2, r3
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005db2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005db4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db6:	2b0f      	cmp	r3, #15
 8005db8:	d909      	bls.n	8005dce <UART_SetConfig+0xa8e>
 8005dba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005dc0:	d205      	bcs.n	8005dce <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	60da      	str	r2, [r3, #12]
 8005dcc:	e002      	b.n	8005dd4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	2200      	movs	r2, #0
 8005de8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005df0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3748      	adds	r7, #72	@ 0x48
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005dfe:	bf00      	nop
 8005e00:	58024400 	.word	0x58024400
 8005e04:	03d09000 	.word	0x03d09000
 8005e08:	003d0900 	.word	0x003d0900
 8005e0c:	080062dc 	.word	0x080062dc

08005e10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e1c:	f003 0308 	and.w	r3, r3, #8
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d00a      	beq.n	8005e3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	430a      	orrs	r2, r1
 8005e38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e3e:	f003 0301 	and.w	r3, r3, #1
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d00a      	beq.n	8005e7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	430a      	orrs	r2, r1
 8005e7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d00a      	beq.n	8005ea0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea4:	f003 0310 	and.w	r3, r3, #16
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00a      	beq.n	8005ec2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	f003 0320 	and.w	r3, r3, #32
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d00a      	beq.n	8005ee4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ee8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01a      	beq.n	8005f26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	430a      	orrs	r2, r1
 8005f04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0e:	d10a      	bne.n	8005f26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	430a      	orrs	r2, r1
 8005f46:	605a      	str	r2, [r3, #4]
  }
}
 8005f48:	bf00      	nop
 8005f4a:	370c      	adds	r7, #12
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr

08005f54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b098      	sub	sp, #96	@ 0x60
 8005f58:	af02      	add	r7, sp, #8
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f64:	f7fb fc08 	bl	8001778 <HAL_GetTick>
 8005f68:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b08      	cmp	r3, #8
 8005f76:	d12f      	bne.n	8005fd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005f80:	2200      	movs	r2, #0
 8005f82:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f88e 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d022      	beq.n	8005fd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fa2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fa6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fb0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005fb2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005fb6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005fbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e063      	b.n	80060a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d149      	bne.n	800607a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005fea:	9300      	str	r3, [sp, #0]
 8005fec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 f857 	bl	80060a8 <UART_WaitOnFlagUntilTimeout>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d03c      	beq.n	800607a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	623b      	str	r3, [r7, #32]
   return(result);
 800600e:	6a3b      	ldr	r3, [r7, #32]
 8006010:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006014:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800601e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006020:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800602c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e6      	bne.n	8006000 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	3308      	adds	r3, #8
 8006038:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	e853 3f00 	ldrex	r3, [r3]
 8006040:	60fb      	str	r3, [r7, #12]
   return(result);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f023 0301 	bic.w	r3, r3, #1
 8006048:	64bb      	str	r3, [r7, #72]	@ 0x48
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	3308      	adds	r3, #8
 8006050:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006052:	61fa      	str	r2, [r7, #28]
 8006054:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	69b9      	ldr	r1, [r7, #24]
 8006058:	69fa      	ldr	r2, [r7, #28]
 800605a:	e841 2300 	strex	r3, r2, [r1]
 800605e:	617b      	str	r3, [r7, #20]
   return(result);
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1e5      	bne.n	8006032 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e012      	b.n	80060a0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2220      	movs	r2, #32
 800607e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2220      	movs	r2, #32
 8006086:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2200      	movs	r2, #0
 8006094:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800609e:	2300      	movs	r3, #0
}
 80060a0:	4618      	mov	r0, r3
 80060a2:	3758      	adds	r7, #88	@ 0x58
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b084      	sub	sp, #16
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	603b      	str	r3, [r7, #0]
 80060b4:	4613      	mov	r3, r2
 80060b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060b8:	e04f      	b.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060c0:	d04b      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060c2:	f7fb fb59 	bl	8001778 <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d302      	bcc.n	80060d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d101      	bne.n	80060dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060d8:	2303      	movs	r3, #3
 80060da:	e04e      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0304 	and.w	r3, r3, #4
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d037      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	2b80      	cmp	r3, #128	@ 0x80
 80060ee:	d034      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b40      	cmp	r3, #64	@ 0x40
 80060f4:	d031      	beq.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	69db      	ldr	r3, [r3, #28]
 80060fc:	f003 0308 	and.w	r3, r3, #8
 8006100:	2b08      	cmp	r3, #8
 8006102:	d110      	bne.n	8006126 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2208      	movs	r2, #8
 800610a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f839 	bl	8006184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2208      	movs	r2, #8
 8006116:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e029      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	69db      	ldr	r3, [r3, #28]
 800612c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006130:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006134:	d111      	bne.n	800615a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800613e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f81f 	bl	8006184 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2220      	movs	r2, #32
 800614a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e00f      	b.n	800617a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	69da      	ldr	r2, [r3, #28]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d0a0      	beq.n	80060ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3710      	adds	r7, #16
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006184:	b480      	push	{r7}
 8006186:	b095      	sub	sp, #84	@ 0x54
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006192:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006194:	e853 3f00 	ldrex	r3, [r3]
 8006198:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800619a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80061ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80061b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80061b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1e6      	bne.n	800618c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	3308      	adds	r3, #8
 80061c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	61fb      	str	r3, [r7, #28]
   return(result);
 80061ce:	69fa      	ldr	r2, [r7, #28]
 80061d0:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <UART_EndRxTransfer+0xc8>)
 80061d2:	4013      	ands	r3, r2
 80061d4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3308      	adds	r3, #8
 80061dc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80061de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80061e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061e6:	e841 2300 	strex	r3, r2, [r1]
 80061ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80061ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d1e5      	bne.n	80061be <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d118      	bne.n	800622c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	e853 3f00 	ldrex	r3, [r3]
 8006206:	60bb      	str	r3, [r7, #8]
   return(result);
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f023 0310 	bic.w	r3, r3, #16
 800620e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	461a      	mov	r2, r3
 8006216:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006218:	61bb      	str	r3, [r7, #24]
 800621a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	69ba      	ldr	r2, [r7, #24]
 8006220:	e841 2300 	strex	r3, r2, [r1]
 8006224:	613b      	str	r3, [r7, #16]
   return(result);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d1e6      	bne.n	80061fa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2220      	movs	r2, #32
 8006230:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2200      	movs	r2, #0
 8006238:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2200      	movs	r2, #0
 800623e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006240:	bf00      	nop
 8006242:	3754      	adds	r7, #84	@ 0x54
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	effffffe 	.word	0xeffffffe

08006250 <memset>:
 8006250:	4402      	add	r2, r0
 8006252:	4603      	mov	r3, r0
 8006254:	4293      	cmp	r3, r2
 8006256:	d100      	bne.n	800625a <memset+0xa>
 8006258:	4770      	bx	lr
 800625a:	f803 1b01 	strb.w	r1, [r3], #1
 800625e:	e7f9      	b.n	8006254 <memset+0x4>

08006260 <__libc_init_array>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	4d0d      	ldr	r5, [pc, #52]	@ (8006298 <__libc_init_array+0x38>)
 8006264:	4c0d      	ldr	r4, [pc, #52]	@ (800629c <__libc_init_array+0x3c>)
 8006266:	1b64      	subs	r4, r4, r5
 8006268:	10a4      	asrs	r4, r4, #2
 800626a:	2600      	movs	r6, #0
 800626c:	42a6      	cmp	r6, r4
 800626e:	d109      	bne.n	8006284 <__libc_init_array+0x24>
 8006270:	4d0b      	ldr	r5, [pc, #44]	@ (80062a0 <__libc_init_array+0x40>)
 8006272:	4c0c      	ldr	r4, [pc, #48]	@ (80062a4 <__libc_init_array+0x44>)
 8006274:	f000 f818 	bl	80062a8 <_init>
 8006278:	1b64      	subs	r4, r4, r5
 800627a:	10a4      	asrs	r4, r4, #2
 800627c:	2600      	movs	r6, #0
 800627e:	42a6      	cmp	r6, r4
 8006280:	d105      	bne.n	800628e <__libc_init_array+0x2e>
 8006282:	bd70      	pop	{r4, r5, r6, pc}
 8006284:	f855 3b04 	ldr.w	r3, [r5], #4
 8006288:	4798      	blx	r3
 800628a:	3601      	adds	r6, #1
 800628c:	e7ee      	b.n	800626c <__libc_init_array+0xc>
 800628e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006292:	4798      	blx	r3
 8006294:	3601      	adds	r6, #1
 8006296:	e7f2      	b.n	800627e <__libc_init_array+0x1e>
 8006298:	080062fc 	.word	0x080062fc
 800629c:	080062fc 	.word	0x080062fc
 80062a0:	080062fc 	.word	0x080062fc
 80062a4:	08006300 	.word	0x08006300

080062a8 <_init>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr

080062b4 <_fini>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	bf00      	nop
 80062b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ba:	bc08      	pop	{r3}
 80062bc:	469e      	mov	lr, r3
 80062be:	4770      	bx	lr
