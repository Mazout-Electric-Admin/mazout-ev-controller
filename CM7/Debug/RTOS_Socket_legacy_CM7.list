
RTOS_Socket_legacy_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb54  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  0800fdf4  0800fdf4  00010df4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010254  08010254  00012088  2**0
                  CONTENTS
  4 .ARM          00000008  08010254  08010254  00011254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801025c  0801025c  00012088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801025c  0801025c  0001125c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010260  08010260  00011260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08010264  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000504c  24000088  080102ec  00012088  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240050d4  080102ec  000120d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00012088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000255da  00000000  00000000  000120b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000046e0  00000000  00000000  00037690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ba0  00000000  00000000  0003bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000156e  00000000  00000000  0003d910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003d876  00000000  00000000  0003ee7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023913  00000000  00000000  0007c6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00194860  00000000  00000000  000a0007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00234867  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008030  00000000  00000000  002348ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0023c8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800fddc 	.word	0x0800fddc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	0800fddc 	.word	0x0800fddc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007b2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007b6:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007b8:	bf00      	nop
 80007ba:	4b55      	ldr	r3, [pc, #340]	@ (8000910 <main+0x164>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d004      	beq.n	80007d0 <main+0x24>
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	1e5a      	subs	r2, r3, #1
 80007ca:	607a      	str	r2, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	dcf4      	bgt.n	80007ba <main+0xe>
  if ( timeout < 0 )
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	da01      	bge.n	80007da <main+0x2e>
  {
  Error_Handler();
 80007d6:	f001 f909 	bl	80019ec <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007da:	f001 fd07 	bl	80021ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007de:	f000 f8b9 	bl	8000954 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007e2:	4b4b      	ldr	r3, [pc, #300]	@ (8000910 <main+0x164>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	4a49      	ldr	r2, [pc, #292]	@ (8000910 <main+0x164>)
 80007ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f2:	4b47      	ldr	r3, [pc, #284]	@ (8000910 <main+0x164>)
 80007f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000800:	2000      	movs	r0, #0
 8000802:	f004 fec5 	bl	8005590 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000806:	2100      	movs	r1, #0
 8000808:	2000      	movs	r0, #0
 800080a:	f004 fedb 	bl	80055c4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800080e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000812:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000814:	bf00      	nop
 8000816:	4b3e      	ldr	r3, [pc, #248]	@ (8000910 <main+0x164>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800081e:	2b00      	cmp	r3, #0
 8000820:	d104      	bne.n	800082c <main+0x80>
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	1e5a      	subs	r2, r3, #1
 8000826:	607a      	str	r2, [r7, #4]
 8000828:	2b00      	cmp	r3, #0
 800082a:	dcf4      	bgt.n	8000816 <main+0x6a>
if ( timeout < 0 )
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	2b00      	cmp	r3, #0
 8000830:	da01      	bge.n	8000836 <main+0x8a>
{
Error_Handler();
 8000832:	f001 f8db 	bl	80019ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000836:	f000 fa25 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 800083a:	f000 f9fb 	bl	8000c34 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800083e:	f000 f9ad 	bl	8000b9c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000842:	f000 f903 	bl	8000a4c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize SIM7600
  NetworkInit();
 8000846:	f000 faf7 	bl	8000e38 <NetworkInit>

  // Open a socket
  OpenSocket();
 800084a:	f000 fd8f 	bl	800136c <OpenSocket>

  serverAttributes.immobilizeStatus[0] = 0x01;
 800084e:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <main+0x168>)
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
  serverAttributes.rpmPreset[0] = 0x64;
 8000854:	4b2f      	ldr	r3, [pc, #188]	@ (8000914 <main+0x168>)
 8000856:	2264      	movs	r2, #100	@ 0x64
 8000858:	705a      	strb	r2, [r3, #1]
  memset(serverAttributes.gpsData, 0x00, sizeof(serverAttributes.gpsData));
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	482e      	ldr	r0, [pc, #184]	@ (8000918 <main+0x16c>)
 8000860:	f00e f983 	bl	800eb6a <memset>
  serverAttributes.currentData[0] = 0x12;
 8000864:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <main+0x168>)
 8000866:	2212      	movs	r2, #18
 8000868:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
  serverAttributes.currentData[1] = 0x34;
 800086c:	4b29      	ldr	r3, [pc, #164]	@ (8000914 <main+0x168>)
 800086e:	2234      	movs	r2, #52	@ 0x34
 8000870:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
  serverAttributes.voltageData[0] = 0x56;
 8000874:	4b27      	ldr	r3, [pc, #156]	@ (8000914 <main+0x168>)
 8000876:	2256      	movs	r2, #86	@ 0x56
 8000878:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  serverAttributes.voltageData[1] = 0x78;
 800087c:	4b25      	ldr	r3, [pc, #148]	@ (8000914 <main+0x168>)
 800087e:	2278      	movs	r2, #120	@ 0x78
 8000880:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  serverAttributes.rpm[0] = 0x32;
 8000884:	4b23      	ldr	r3, [pc, #140]	@ (8000914 <main+0x168>)
 8000886:	2232      	movs	r2, #50	@ 0x32
 8000888:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  serverAttributes.temperature[0] = 0x20;
 800088c:	4b21      	ldr	r3, [pc, #132]	@ (8000914 <main+0x168>)
 800088e:	2220      	movs	r2, #32
 8000890:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  serverAttributes.networkStrength[0] = 0x05;
 8000894:	4b1f      	ldr	r3, [pc, #124]	@ (8000914 <main+0x168>)
 8000896:	2205      	movs	r2, #5
 8000898:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800089c:	f00a fe54 	bl	800b548 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_lock */
  uart_lockHandle = osMutexNew(&uart_lock_attributes);
 80008a0:	481e      	ldr	r0, [pc, #120]	@ (800091c <main+0x170>)
 80008a2:	f00a ff48 	bl	800b736 <osMutexNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a1d      	ldr	r2, [pc, #116]	@ (8000920 <main+0x174>)
 80008aa:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80008ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000924 <main+0x178>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	481d      	ldr	r0, [pc, #116]	@ (8000928 <main+0x17c>)
 80008b2:	f00a fe93 	bl	800b5dc <osThreadNew>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a1c      	ldr	r2, [pc, #112]	@ (800092c <main+0x180>)
 80008ba:	6013      	str	r3, [r2, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 80008bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <main+0x184>)
 80008be:	2100      	movs	r1, #0
 80008c0:	481c      	ldr	r0, [pc, #112]	@ (8000934 <main+0x188>)
 80008c2:	f00a fe8b 	bl	800b5dc <osThreadNew>
 80008c6:	4603      	mov	r3, r0
 80008c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000938 <main+0x18c>)
 80008ca:	6013      	str	r3, [r2, #0]

  /* creation of receiveTask */
  receiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &receiveTask_attributes);
 80008cc:	4a1b      	ldr	r2, [pc, #108]	@ (800093c <main+0x190>)
 80008ce:	2100      	movs	r1, #0
 80008d0:	481b      	ldr	r0, [pc, #108]	@ (8000940 <main+0x194>)
 80008d2:	f00a fe83 	bl	800b5dc <osThreadNew>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a1a      	ldr	r2, [pc, #104]	@ (8000944 <main+0x198>)
 80008da:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(StartGpsTask, NULL, &gpsTask_attributes);
 80008dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000948 <main+0x19c>)
 80008de:	2100      	movs	r1, #0
 80008e0:	481a      	ldr	r0, [pc, #104]	@ (800094c <main+0x1a0>)
 80008e2:	f00a fe7b 	bl	800b5dc <osThreadNew>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a19      	ldr	r2, [pc, #100]	@ (8000950 <main+0x1a4>)
 80008ea:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 80008ec:	2000      	movs	r0, #0
 80008ee:	f001 fb71 	bl	8001fd4 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f001 fb6e 	bl	8001fd4 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80008f8:	2002      	movs	r0, #2
 80008fa:	f001 fb6b 	bl	8001fd4 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008fe:	2101      	movs	r1, #1
 8000900:	2000      	movs	r0, #0
 8000902:	f001 fbdd 	bl	80020c0 <BSP_PB_Init>

  /* Start scheduler */
  osKernelStart();
 8000906:	f00a fe43 	bl	800b590 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800090a:	bf00      	nop
 800090c:	e7fd      	b.n	800090a <main+0x15e>
 800090e:	bf00      	nop
 8000910:	58024400 	.word	0x58024400
 8000914:	24000518 	.word	0x24000518
 8000918:	2400051a 	.word	0x2400051a
 800091c:	08010128 	.word	0x08010128
 8000920:	2400020c 	.word	0x2400020c
 8000924:	08010098 	.word	0x08010098
 8000928:	08001975 	.word	0x08001975
 800092c:	240001fc 	.word	0x240001fc
 8000930:	080100bc 	.word	0x080100bc
 8000934:	08001985 	.word	0x08001985
 8000938:	24000200 	.word	0x24000200
 800093c:	080100e0 	.word	0x080100e0
 8000940:	0800199b 	.word	0x0800199b
 8000944:	24000204 	.word	0x24000204
 8000948:	08010104 	.word	0x08010104
 800094c:	080019b1 	.word	0x080019b1
 8000950:	24000208 	.word	0x24000208

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	@ 0x70
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	224c      	movs	r2, #76	@ 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f00e f901 	bl	800eb6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f00e f8fb 	bl	800eb6a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000974:	2002      	movs	r0, #2
 8000976:	f004 fe39 	bl	80055ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <SystemClock_Config+0xf0>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <SystemClock_Config+0xf4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <SystemClock_Config+0xf4>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ac:	bf00      	nop
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009d4:	2332      	movs	r3, #50	@ 0x32
 80009d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f004 fe53 	bl	80056a0 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a00:	f000 fff4 	bl	80019ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	233f      	movs	r3, #63	@ 0x3f
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a10:	2308      	movs	r3, #8
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a18:	2340      	movs	r3, #64	@ 0x40
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f005 fa92 	bl	8005f54 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a36:	f000 ffd9 	bl	80019ec <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3770      	adds	r7, #112	@ 0x70
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024800 	.word	0x58024800

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b096      	sub	sp, #88	@ 0x58
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a52:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a5e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
 8000a6e:	615a      	str	r2, [r3, #20]
 8000a70:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	222c      	movs	r2, #44	@ 0x2c
 8000a76:	2100      	movs	r1, #0
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f00e f876 	bl	800eb6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a7e:	4b45      	ldr	r3, [pc, #276]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a80:	4a45      	ldr	r2, [pc, #276]	@ (8000b98 <MX_TIM1_Init+0x14c>)
 8000a82:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a84:	4b43      	ldr	r3, [pc, #268]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000a8a:	4b42      	ldr	r3, [pc, #264]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a8c:	2220      	movs	r2, #32
 8000a8e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a90:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a92:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a96:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a98:	4b3e      	ldr	r3, [pc, #248]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aa4:	4b3b      	ldr	r3, [pc, #236]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aaa:	483a      	ldr	r0, [pc, #232]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000aac:	f007 fd26 	bl	80084fc <HAL_TIM_PWM_Init>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000ab6:	f000 ff99 	bl	80019ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2300      	movs	r3, #0
 8000abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000aca:	4619      	mov	r1, r3
 8000acc:	4831      	ldr	r0, [pc, #196]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000ace:	f008 fb2b 	bl	8009128 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ad8:	f000 ff88 	bl	80019ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000adc:	2360      	movs	r3, #96	@ 0x60
 8000ade:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000aec:	2300      	movs	r3, #0
 8000aee:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000af0:	2300      	movs	r3, #0
 8000af2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000af4:	2300      	movs	r3, #0
 8000af6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000afc:	2200      	movs	r2, #0
 8000afe:	4619      	mov	r1, r3
 8000b00:	4824      	ldr	r0, [pc, #144]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b02:	f007 fe59 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000b0c:	f000 ff6e 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b14:	2204      	movs	r2, #4
 8000b16:	4619      	mov	r1, r3
 8000b18:	481e      	ldr	r0, [pc, #120]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b1a:	f007 fe4d 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000b24:	f000 ff62 	bl	80019ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b28:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b2c:	2208      	movs	r2, #8
 8000b2e:	4619      	mov	r1, r3
 8000b30:	4818      	ldr	r0, [pc, #96]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b32:	f007 fe41 	bl	80087b8 <HAL_TIM_PWM_ConfigChannel>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000b3c:	f000 ff56 	bl	80019ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b44:	2300      	movs	r3, #0
 8000b46:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b54:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b58:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b66:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	4619      	mov	r1, r3
 8000b74:	4807      	ldr	r0, [pc, #28]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b76:	f008 fb65 	bl	8009244 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8000b80:	f000 ff34 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b84:	4803      	ldr	r0, [pc, #12]	@ (8000b94 <MX_TIM1_Init+0x148>)
 8000b86:	f000 ff7d 	bl	8001a84 <HAL_TIM_MspPostInit>

}
 8000b8a:	bf00      	nop
 8000b8c:	3758      	adds	r7, #88	@ 0x58
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	240000a4 	.word	0x240000a4
 8000b98:	40010000 	.word	0x40010000

08000b9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	@ (8000c30 <MX_USART1_UART_Init+0x94>)
 8000ba4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000ba8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b17      	ldr	r3, [pc, #92]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bd2:	4b16      	ldr	r3, [pc, #88]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be4:	4811      	ldr	r0, [pc, #68]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000be6:	f008 fbc9 	bl	800937c <HAL_UART_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000bf0:	f000 fefc 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	480d      	ldr	r0, [pc, #52]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000bf8:	f00a fb43 	bl	800b282 <HAL_UARTEx_SetTxFifoThreshold>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c02:	f000 fef3 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c06:	2100      	movs	r1, #0
 8000c08:	4808      	ldr	r0, [pc, #32]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000c0a:	f00a fb78 	bl	800b2fe <HAL_UARTEx_SetRxFifoThreshold>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c14:	f000 feea 	bl	80019ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	@ (8000c2c <MX_USART1_UART_Init+0x90>)
 8000c1a:	f00a faf9 	bl	800b210 <HAL_UARTEx_DisableFifoMode>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c24:	f000 fee2 	bl	80019ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	240000f0 	.word	0x240000f0
 8000c30:	40011000 	.word	0x40011000

08000c34 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c3a:	4b11      	ldr	r3, [pc, #68]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c3c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c40:	4a0f      	ldr	r2, [pc, #60]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c80 <MX_DMA_Init+0x4c>)
 8000c4c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c58:	2200      	movs	r2, #0
 8000c5a:	2105      	movs	r1, #5
 8000c5c:	200b      	movs	r0, #11
 8000c5e:	f001 fbe5 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c62:	200b      	movs	r0, #11
 8000c64:	f001 fbfc 	bl	8002460 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2105      	movs	r1, #5
 8000c6c:	200c      	movs	r0, #12
 8000c6e:	f001 fbdd 	bl	800242c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c72:	200c      	movs	r0, #12
 8000c74:	f001 fbf4 	bl	8002460 <HAL_NVIC_EnableIRQ>

}
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	58024400 	.word	0x58024400

08000c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b08c      	sub	sp, #48	@ 0x30
 8000c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 031c 	add.w	r3, r7, #28
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b61      	ldr	r3, [pc, #388]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca0:	4a5f      	ldr	r2, [pc, #380]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000ca2:	f043 0304 	orr.w	r3, r3, #4
 8000ca6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000caa:	4b5d      	ldr	r3, [pc, #372]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb0:	f003 0304 	and.w	r3, r3, #4
 8000cb4:	61bb      	str	r3, [r7, #24]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb8:	4b59      	ldr	r3, [pc, #356]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cbe:	4a58      	ldr	r2, [pc, #352]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cc8:	4b55      	ldr	r3, [pc, #340]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cce:	f003 0301 	and.w	r3, r3, #1
 8000cd2:	617b      	str	r3, [r7, #20]
 8000cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cd6:	4b52      	ldr	r3, [pc, #328]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cdc:	4a50      	ldr	r2, [pc, #320]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cde:	f043 0310 	orr.w	r3, r3, #16
 8000ce2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ce6:	4b4e      	ldr	r3, [pc, #312]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000ce8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cec:	f003 0310 	and.w	r3, r3, #16
 8000cf0:	613b      	str	r3, [r7, #16]
 8000cf2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cfa:	4a49      	ldr	r2, [pc, #292]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d04:	4b46      	ldr	r3, [pc, #280]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d12:	4b43      	ldr	r3, [pc, #268]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d18:	4a41      	ldr	r2, [pc, #260]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d1a:	f043 0308 	orr.w	r3, r3, #8
 8000d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d22:	4b3f      	ldr	r3, [pc, #252]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d30:	4b3b      	ldr	r3, [pc, #236]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d36:	4a3a      	ldr	r2, [pc, #232]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d40:	4b37      	ldr	r3, [pc, #220]	@ (8000e20 <MX_GPIO_Init+0x19c>)
 8000d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d4e:	2332      	movs	r3, #50	@ 0x32
 8000d50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d5e:	230b      	movs	r3, #11
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d62:	f107 031c 	add.w	r3, r7, #28
 8000d66:	4619      	mov	r1, r3
 8000d68:	482e      	ldr	r0, [pc, #184]	@ (8000e24 <MX_GPIO_Init+0x1a0>)
 8000d6a:	f004 fa47 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d6e:	2386      	movs	r3, #134	@ 0x86
 8000d70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d72:	2302      	movs	r3, #2
 8000d74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d7e:	230b      	movs	r3, #11
 8000d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4827      	ldr	r0, [pc, #156]	@ (8000e28 <MX_GPIO_Init+0x1a4>)
 8000d8a:	f004 fa37 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000da0:	230b      	movs	r3, #11
 8000da2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 031c 	add.w	r3, r7, #28
 8000da8:	4619      	mov	r1, r3
 8000daa:	4820      	ldr	r0, [pc, #128]	@ (8000e2c <MX_GPIO_Init+0x1a8>)
 8000dac:	f004 fa26 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000db0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000dc2:	2307      	movs	r3, #7
 8000dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4818      	ldr	r0, [pc, #96]	@ (8000e30 <MX_GPIO_Init+0x1ac>)
 8000dce:	f004 fa15 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000dd2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000de4:	230a      	movs	r3, #10
 8000de6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	4619      	mov	r1, r3
 8000dee:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <MX_GPIO_Init+0x1a4>)
 8000df0:	f004 fa04 	bl	80051fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000df4:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000df8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e06:	230b      	movs	r3, #11
 8000e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e0a:	f107 031c 	add.w	r3, r7, #28
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	@ (8000e34 <MX_GPIO_Init+0x1b0>)
 8000e12:	f004 f9f3 	bl	80051fc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	bf00      	nop
 8000e18:	3730      	adds	r7, #48	@ 0x30
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	58024400 	.word	0x58024400
 8000e24:	58020800 	.word	0x58020800
 8000e28:	58020000 	.word	0x58020000
 8000e2c:	58020400 	.word	0x58020400
 8000e30:	58020c00 	.word	0x58020c00
 8000e34:	58021800 	.word	0x58021800

08000e38 <NetworkInit>:

/* USER CODE BEGIN 4 */

void NetworkInit() {
 8000e38:	b5b0      	push	{r4, r5, r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

	strcpy(txBuffer, "ATE0\r\n");
 8000e3c:	4bbe      	ldr	r3, [pc, #760]	@ (8001138 <NetworkInit+0x300>)
 8000e3e:	4abf      	ldr	r2, [pc, #764]	@ (800113c <NetworkInit+0x304>)
 8000e40:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e44:	6018      	str	r0, [r3, #0]
 8000e46:	3304      	adds	r3, #4
 8000e48:	8019      	strh	r1, [r3, #0]
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	0c0a      	lsrs	r2, r1, #16
 8000e4e:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000e50:	48b9      	ldr	r0, [pc, #740]	@ (8001138 <NetworkInit+0x300>)
 8000e52:	f7ff fa45 	bl	80002e0 <strlen>
 8000e56:	4603      	mov	r3, r0
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	2364      	movs	r3, #100	@ 0x64
 8000e5c:	49b6      	ldr	r1, [pc, #728]	@ (8001138 <NetworkInit+0x300>)
 8000e5e:	48b8      	ldr	r0, [pc, #736]	@ (8001140 <NetworkInit+0x308>)
 8000e60:	f008 fadc 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8000e64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e68:	2100      	movs	r1, #0
 8000e6a:	48b3      	ldr	r0, [pc, #716]	@ (8001138 <NetworkInit+0x300>)
 8000e6c:	f00d fe7d 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000e70:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e74:	2100      	movs	r1, #0
 8000e76:	48b3      	ldr	r0, [pc, #716]	@ (8001144 <NetworkInit+0x30c>)
 8000e78:	f00d fe77 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000e7c:	2364      	movs	r3, #100	@ 0x64
 8000e7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000e82:	49b0      	ldr	r1, [pc, #704]	@ (8001144 <NetworkInit+0x30c>)
 8000e84:	48ae      	ldr	r0, [pc, #696]	@ (8001140 <NetworkInit+0x308>)
 8000e86:	f008 fb57 	bl	8009538 <HAL_UART_Receive>
	//HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Check SIM is ready
    strcpy(txBuffer, "AT+CPIN?\r\n");
 8000e8a:	4bab      	ldr	r3, [pc, #684]	@ (8001138 <NetworkInit+0x300>)
 8000e8c:	4aae      	ldr	r2, [pc, #696]	@ (8001148 <NetworkInit+0x310>)
 8000e8e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e90:	c303      	stmia	r3!, {r0, r1}
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	3302      	adds	r3, #2
 8000e96:	0c12      	lsrs	r2, r2, #16
 8000e98:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000e9a:	48a7      	ldr	r0, [pc, #668]	@ (8001138 <NetworkInit+0x300>)
 8000e9c:	f7ff fa20 	bl	80002e0 <strlen>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	b29a      	uxth	r2, r3
 8000ea4:	2364      	movs	r3, #100	@ 0x64
 8000ea6:	49a4      	ldr	r1, [pc, #656]	@ (8001138 <NetworkInit+0x300>)
 8000ea8:	48a5      	ldr	r0, [pc, #660]	@ (8001140 <NetworkInit+0x308>)
 8000eaa:	f008 fab7 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8000eae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	48a0      	ldr	r0, [pc, #640]	@ (8001138 <NetworkInit+0x300>)
 8000eb6:	f00d fe58 	bl	800eb6a <memset>

    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000eba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	48a0      	ldr	r0, [pc, #640]	@ (8001144 <NetworkInit+0x30c>)
 8000ec2:	f00d fe52 	bl	800eb6a <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000ec6:	2364      	movs	r3, #100	@ 0x64
 8000ec8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ecc:	499d      	ldr	r1, [pc, #628]	@ (8001144 <NetworkInit+0x30c>)
 8000ece:	489c      	ldr	r0, [pc, #624]	@ (8001140 <NetworkInit+0x308>)
 8000ed0:	f008 fb32 	bl	8009538 <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);

    // Check network registration
    strcpy(txBuffer, "AT+CREG=2\r\n");
 8000ed4:	4b98      	ldr	r3, [pc, #608]	@ (8001138 <NetworkInit+0x300>)
 8000ed6:	4a9d      	ldr	r2, [pc, #628]	@ (800114c <NetworkInit+0x314>)
 8000ed8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000eda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000ede:	4896      	ldr	r0, [pc, #600]	@ (8001138 <NetworkInit+0x300>)
 8000ee0:	f7ff f9fe 	bl	80002e0 <strlen>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	b29a      	uxth	r2, r3
 8000ee8:	2364      	movs	r3, #100	@ 0x64
 8000eea:	4993      	ldr	r1, [pc, #588]	@ (8001138 <NetworkInit+0x300>)
 8000eec:	4894      	ldr	r0, [pc, #592]	@ (8001140 <NetworkInit+0x308>)
 8000eee:	f008 fa95 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8000ef2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	488f      	ldr	r0, [pc, #572]	@ (8001138 <NetworkInit+0x300>)
 8000efa:	f00d fe36 	bl	800eb6a <memset>

    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000efe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f02:	2100      	movs	r1, #0
 8000f04:	488f      	ldr	r0, [pc, #572]	@ (8001144 <NetworkInit+0x30c>)
 8000f06:	f00d fe30 	bl	800eb6a <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000f0a:	2364      	movs	r3, #100	@ 0x64
 8000f0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f10:	498c      	ldr	r1, [pc, #560]	@ (8001144 <NetworkInit+0x30c>)
 8000f12:	488b      	ldr	r0, [pc, #556]	@ (8001140 <NetworkInit+0x308>)
 8000f14:	f008 fb10 	bl	8009538 <HAL_UART_Receive>

    // Check network registration
	strcpy(txBuffer, "AT+CGREG=0\r\n");
 8000f18:	4a87      	ldr	r2, [pc, #540]	@ (8001138 <NetworkInit+0x300>)
 8000f1a:	4b8d      	ldr	r3, [pc, #564]	@ (8001150 <NetworkInit+0x318>)
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f20:	c407      	stmia	r4!, {r0, r1, r2}
 8000f22:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000f24:	4884      	ldr	r0, [pc, #528]	@ (8001138 <NetworkInit+0x300>)
 8000f26:	f7ff f9db 	bl	80002e0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	2364      	movs	r3, #100	@ 0x64
 8000f30:	4981      	ldr	r1, [pc, #516]	@ (8001138 <NetworkInit+0x300>)
 8000f32:	4883      	ldr	r0, [pc, #524]	@ (8001140 <NetworkInit+0x308>)
 8000f34:	f008 fa72 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8000f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	487e      	ldr	r0, [pc, #504]	@ (8001138 <NetworkInit+0x300>)
 8000f40:	f00d fe13 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000f44:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f48:	2100      	movs	r1, #0
 8000f4a:	487e      	ldr	r0, [pc, #504]	@ (8001144 <NetworkInit+0x30c>)
 8000f4c:	f00d fe0d 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000f50:	2364      	movs	r3, #100	@ 0x64
 8000f52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f56:	497b      	ldr	r1, [pc, #492]	@ (8001144 <NetworkInit+0x30c>)
 8000f58:	4879      	ldr	r0, [pc, #484]	@ (8001140 <NetworkInit+0x308>)
 8000f5a:	f008 faed 	bl	8009538 <HAL_UART_Receive>

    // Set APN
    strcpy(txBuffer, "AT+QICSGP=1,1,\"airtelgprs.com\","","",0\r\n");
 8000f5e:	4a76      	ldr	r2, [pc, #472]	@ (8001138 <NetworkInit+0x300>)
 8000f60:	4b7c      	ldr	r3, [pc, #496]	@ (8001154 <NetworkInit+0x31c>)
 8000f62:	4614      	mov	r4, r2
 8000f64:	461d      	mov	r5, r3
 8000f66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f6e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000f72:	6020      	str	r0, [r4, #0]
 8000f74:	3404      	adds	r4, #4
 8000f76:	7021      	strb	r1, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000f78:	486f      	ldr	r0, [pc, #444]	@ (8001138 <NetworkInit+0x300>)
 8000f7a:	f7ff f9b1 	bl	80002e0 <strlen>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	2364      	movs	r3, #100	@ 0x64
 8000f84:	496c      	ldr	r1, [pc, #432]	@ (8001138 <NetworkInit+0x300>)
 8000f86:	486e      	ldr	r0, [pc, #440]	@ (8001140 <NetworkInit+0x308>)
 8000f88:	f008 fa48 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8000f8c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f90:	2100      	movs	r1, #0
 8000f92:	4869      	ldr	r0, [pc, #420]	@ (8001138 <NetworkInit+0x300>)
 8000f94:	f00d fde9 	bl	800eb6a <memset>

    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4869      	ldr	r0, [pc, #420]	@ (8001144 <NetworkInit+0x30c>)
 8000fa0:	f00d fde3 	bl	800eb6a <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000fa4:	2364      	movs	r3, #100	@ 0x64
 8000fa6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000faa:	4966      	ldr	r1, [pc, #408]	@ (8001144 <NetworkInit+0x30c>)
 8000fac:	4864      	ldr	r0, [pc, #400]	@ (8001140 <NetworkInit+0x308>)
 8000fae:	f008 fac3 	bl	8009538 <HAL_UART_Receive>

    // PDP Contextn
	strcpy(txBuffer, "AT+QIACT=1\r\n");
 8000fb2:	4a61      	ldr	r2, [pc, #388]	@ (8001138 <NetworkInit+0x300>)
 8000fb4:	4b68      	ldr	r3, [pc, #416]	@ (8001158 <NetworkInit+0x320>)
 8000fb6:	4614      	mov	r4, r2
 8000fb8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fba:	c407      	stmia	r4!, {r0, r1, r2}
 8000fbc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8000fbe:	485e      	ldr	r0, [pc, #376]	@ (8001138 <NetworkInit+0x300>)
 8000fc0:	f7ff f98e 	bl	80002e0 <strlen>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	2364      	movs	r3, #100	@ 0x64
 8000fca:	495b      	ldr	r1, [pc, #364]	@ (8001138 <NetworkInit+0x300>)
 8000fcc:	485c      	ldr	r0, [pc, #368]	@ (8001140 <NetworkInit+0x308>)
 8000fce:	f008 fa25 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8000fd2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4857      	ldr	r0, [pc, #348]	@ (8001138 <NetworkInit+0x300>)
 8000fda:	f00d fdc6 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8000fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4857      	ldr	r0, [pc, #348]	@ (8001144 <NetworkInit+0x30c>)
 8000fe6:	f00d fdc0 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8000fea:	2364      	movs	r3, #100	@ 0x64
 8000fec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000ff0:	4954      	ldr	r1, [pc, #336]	@ (8001144 <NetworkInit+0x30c>)
 8000ff2:	4853      	ldr	r0, [pc, #332]	@ (8001140 <NetworkInit+0x308>)
 8000ff4:	f008 faa0 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"outport\",\"uart1\"\r\n");
 8000ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8001138 <NetworkInit+0x300>)
 8000ffa:	4b58      	ldr	r3, [pc, #352]	@ (800115c <NetworkInit+0x324>)
 8000ffc:	4614      	mov	r4, r2
 8000ffe:	461d      	mov	r5, r3
 8001000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001004:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001008:	c407      	stmia	r4!, {r0, r1, r2}
 800100a:	8023      	strh	r3, [r4, #0]
 800100c:	3402      	adds	r4, #2
 800100e:	0c1b      	lsrs	r3, r3, #16
 8001010:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8001012:	4849      	ldr	r0, [pc, #292]	@ (8001138 <NetworkInit+0x300>)
 8001014:	f7ff f964 	bl	80002e0 <strlen>
 8001018:	4603      	mov	r3, r0
 800101a:	b29a      	uxth	r2, r3
 800101c:	2364      	movs	r3, #100	@ 0x64
 800101e:	4946      	ldr	r1, [pc, #280]	@ (8001138 <NetworkInit+0x300>)
 8001020:	4847      	ldr	r0, [pc, #284]	@ (8001140 <NetworkInit+0x308>)
 8001022:	f008 f9fb 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001026:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800102a:	2100      	movs	r1, #0
 800102c:	4842      	ldr	r0, [pc, #264]	@ (8001138 <NetworkInit+0x300>)
 800102e:	f00d fd9c 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8001032:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001036:	2100      	movs	r1, #0
 8001038:	4842      	ldr	r0, [pc, #264]	@ (8001144 <NetworkInit+0x30c>)
 800103a:	f00d fd96 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 800103e:	2364      	movs	r3, #100	@ 0x64
 8001040:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001044:	493f      	ldr	r1, [pc, #252]	@ (8001144 <NetworkInit+0x30c>)
 8001046:	483e      	ldr	r0, [pc, #248]	@ (8001140 <NetworkInit+0x308>)
 8001048:	f008 fa76 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"gnssconfig\",0\r\n");
 800104c:	4a3a      	ldr	r2, [pc, #232]	@ (8001138 <NetworkInit+0x300>)
 800104e:	4b44      	ldr	r3, [pc, #272]	@ (8001160 <NetworkInit+0x328>)
 8001050:	4614      	mov	r4, r2
 8001052:	461d      	mov	r5, r3
 8001054:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001058:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800105c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8001060:	4835      	ldr	r0, [pc, #212]	@ (8001138 <NetworkInit+0x300>)
 8001062:	f7ff f93d 	bl	80002e0 <strlen>
 8001066:	4603      	mov	r3, r0
 8001068:	b29a      	uxth	r2, r3
 800106a:	2364      	movs	r3, #100	@ 0x64
 800106c:	4932      	ldr	r1, [pc, #200]	@ (8001138 <NetworkInit+0x300>)
 800106e:	4834      	ldr	r0, [pc, #208]	@ (8001140 <NetworkInit+0x308>)
 8001070:	f008 f9d4 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001074:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001078:	2100      	movs	r1, #0
 800107a:	482f      	ldr	r0, [pc, #188]	@ (8001138 <NetworkInit+0x300>)
 800107c:	f00d fd75 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 8001080:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001084:	2100      	movs	r1, #0
 8001086:	482f      	ldr	r0, [pc, #188]	@ (8001144 <NetworkInit+0x30c>)
 8001088:	f00d fd6f 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 800108c:	2364      	movs	r3, #100	@ 0x64
 800108e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001092:	492c      	ldr	r1, [pc, #176]	@ (8001144 <NetworkInit+0x30c>)
 8001094:	482a      	ldr	r0, [pc, #168]	@ (8001140 <NetworkInit+0x308>)
 8001096:	f008 fa4f 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"autogps\",1\r\n");
 800109a:	4a27      	ldr	r2, [pc, #156]	@ (8001138 <NetworkInit+0x300>)
 800109c:	4b31      	ldr	r3, [pc, #196]	@ (8001164 <NetworkInit+0x32c>)
 800109e:	4614      	mov	r4, r2
 80010a0:	461d      	mov	r5, r3
 80010a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010aa:	c403      	stmia	r4!, {r0, r1}
 80010ac:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80010ae:	4822      	ldr	r0, [pc, #136]	@ (8001138 <NetworkInit+0x300>)
 80010b0:	f7ff f916 	bl	80002e0 <strlen>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	2364      	movs	r3, #100	@ 0x64
 80010ba:	491f      	ldr	r1, [pc, #124]	@ (8001138 <NetworkInit+0x300>)
 80010bc:	4820      	ldr	r0, [pc, #128]	@ (8001140 <NetworkInit+0x308>)
 80010be:	f008 f9ad 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 80010c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010c6:	2100      	movs	r1, #0
 80010c8:	481b      	ldr	r0, [pc, #108]	@ (8001138 <NetworkInit+0x300>)
 80010ca:	f00d fd4e 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80010ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010d2:	2100      	movs	r1, #0
 80010d4:	481b      	ldr	r0, [pc, #108]	@ (8001144 <NetworkInit+0x30c>)
 80010d6:	f00d fd48 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 80010da:	2364      	movs	r3, #100	@ 0x64
 80010dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010e0:	4918      	ldr	r1, [pc, #96]	@ (8001144 <NetworkInit+0x30c>)
 80010e2:	4817      	ldr	r0, [pc, #92]	@ (8001140 <NetworkInit+0x308>)
 80010e4:	f008 fa28 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"gpsnmeatype\",0\r\n");
 80010e8:	4a13      	ldr	r2, [pc, #76]	@ (8001138 <NetworkInit+0x300>)
 80010ea:	4b1f      	ldr	r3, [pc, #124]	@ (8001168 <NetworkInit+0x330>)
 80010ec:	4614      	mov	r4, r2
 80010ee:	461d      	mov	r5, r3
 80010f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80010f8:	c407      	stmia	r4!, {r0, r1, r2}
 80010fa:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80010fc:	480e      	ldr	r0, [pc, #56]	@ (8001138 <NetworkInit+0x300>)
 80010fe:	f7ff f8ef 	bl	80002e0 <strlen>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	2364      	movs	r3, #100	@ 0x64
 8001108:	490b      	ldr	r1, [pc, #44]	@ (8001138 <NetworkInit+0x300>)
 800110a:	480d      	ldr	r0, [pc, #52]	@ (8001140 <NetworkInit+0x308>)
 800110c:	f008 f986 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001110:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001114:	2100      	movs	r1, #0
 8001116:	4808      	ldr	r0, [pc, #32]	@ (8001138 <NetworkInit+0x300>)
 8001118:	f00d fd27 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 800111c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001120:	2100      	movs	r1, #0
 8001122:	4808      	ldr	r0, [pc, #32]	@ (8001144 <NetworkInit+0x30c>)
 8001124:	f00d fd21 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8001128:	2364      	movs	r3, #100	@ 0x64
 800112a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800112e:	4905      	ldr	r1, [pc, #20]	@ (8001144 <NetworkInit+0x30c>)
 8001130:	4803      	ldr	r0, [pc, #12]	@ (8001140 <NetworkInit+0x308>)
 8001132:	f008 fa01 	bl	8009538 <HAL_UART_Receive>
 8001136:	e019      	b.n	800116c <NetworkInit+0x334>
 8001138:	24000210 	.word	0x24000210
 800113c:	0800fe2c 	.word	0x0800fe2c
 8001140:	240000f0 	.word	0x240000f0
 8001144:	24000310 	.word	0x24000310
 8001148:	0800fe34 	.word	0x0800fe34
 800114c:	0800fe40 	.word	0x0800fe40
 8001150:	0800fe4c 	.word	0x0800fe4c
 8001154:	0800fe5c 	.word	0x0800fe5c
 8001158:	0800fe84 	.word	0x0800fe84
 800115c:	0800fe94 	.word	0x0800fe94
 8001160:	0800feb4 	.word	0x0800feb4
 8001164:	0800fed0 	.word	0x0800fed0
 8001168:	0800feec 	.word	0x0800feec

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"glonassnmeatype\",0\r\n");
 800116c:	4a75      	ldr	r2, [pc, #468]	@ (8001344 <NetworkInit+0x50c>)
 800116e:	4b76      	ldr	r3, [pc, #472]	@ (8001348 <NetworkInit+0x510>)
 8001170:	4614      	mov	r4, r2
 8001172:	461d      	mov	r5, r3
 8001174:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001176:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001178:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800117a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800117c:	682b      	ldr	r3, [r5, #0]
 800117e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8001180:	4870      	ldr	r0, [pc, #448]	@ (8001344 <NetworkInit+0x50c>)
 8001182:	f7ff f8ad 	bl	80002e0 <strlen>
 8001186:	4603      	mov	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	2364      	movs	r3, #100	@ 0x64
 800118c:	496d      	ldr	r1, [pc, #436]	@ (8001344 <NetworkInit+0x50c>)
 800118e:	486f      	ldr	r0, [pc, #444]	@ (800134c <NetworkInit+0x514>)
 8001190:	f008 f944 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001194:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001198:	2100      	movs	r1, #0
 800119a:	486a      	ldr	r0, [pc, #424]	@ (8001344 <NetworkInit+0x50c>)
 800119c:	f00d fce5 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80011a0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011a4:	2100      	movs	r1, #0
 80011a6:	486a      	ldr	r0, [pc, #424]	@ (8001350 <NetworkInit+0x518>)
 80011a8:	f00d fcdf 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 80011ac:	2364      	movs	r3, #100	@ 0x64
 80011ae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011b2:	4967      	ldr	r1, [pc, #412]	@ (8001350 <NetworkInit+0x518>)
 80011b4:	4865      	ldr	r0, [pc, #404]	@ (800134c <NetworkInit+0x514>)
 80011b6:	f008 f9bf 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"galileonmeatype\",0\r\n");
 80011ba:	4a62      	ldr	r2, [pc, #392]	@ (8001344 <NetworkInit+0x50c>)
 80011bc:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <NetworkInit+0x51c>)
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011ca:	682b      	ldr	r3, [r5, #0]
 80011cc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80011ce:	485d      	ldr	r0, [pc, #372]	@ (8001344 <NetworkInit+0x50c>)
 80011d0:	f7ff f886 	bl	80002e0 <strlen>
 80011d4:	4603      	mov	r3, r0
 80011d6:	b29a      	uxth	r2, r3
 80011d8:	2364      	movs	r3, #100	@ 0x64
 80011da:	495a      	ldr	r1, [pc, #360]	@ (8001344 <NetworkInit+0x50c>)
 80011dc:	485b      	ldr	r0, [pc, #364]	@ (800134c <NetworkInit+0x514>)
 80011de:	f008 f91d 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 80011e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011e6:	2100      	movs	r1, #0
 80011e8:	4856      	ldr	r0, [pc, #344]	@ (8001344 <NetworkInit+0x50c>)
 80011ea:	f00d fcbe 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80011ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80011f2:	2100      	movs	r1, #0
 80011f4:	4856      	ldr	r0, [pc, #344]	@ (8001350 <NetworkInit+0x518>)
 80011f6:	f00d fcb8 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 80011fa:	2364      	movs	r3, #100	@ 0x64
 80011fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001200:	4953      	ldr	r1, [pc, #332]	@ (8001350 <NetworkInit+0x518>)
 8001202:	4852      	ldr	r0, [pc, #328]	@ (800134c <NetworkInit+0x514>)
 8001204:	f008 f998 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"beidounmeatype\",0\r\n");
 8001208:	4a4e      	ldr	r2, [pc, #312]	@ (8001344 <NetworkInit+0x50c>)
 800120a:	4b53      	ldr	r3, [pc, #332]	@ (8001358 <NetworkInit+0x520>)
 800120c:	4614      	mov	r4, r2
 800120e:	461d      	mov	r5, r3
 8001210:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001212:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001214:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 800121c:	4849      	ldr	r0, [pc, #292]	@ (8001344 <NetworkInit+0x50c>)
 800121e:	f7ff f85f 	bl	80002e0 <strlen>
 8001222:	4603      	mov	r3, r0
 8001224:	b29a      	uxth	r2, r3
 8001226:	2364      	movs	r3, #100	@ 0x64
 8001228:	4946      	ldr	r1, [pc, #280]	@ (8001344 <NetworkInit+0x50c>)
 800122a:	4848      	ldr	r0, [pc, #288]	@ (800134c <NetworkInit+0x514>)
 800122c:	f008 f8f6 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001230:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001234:	2100      	movs	r1, #0
 8001236:	4843      	ldr	r0, [pc, #268]	@ (8001344 <NetworkInit+0x50c>)
 8001238:	f00d fc97 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 800123c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001240:	2100      	movs	r1, #0
 8001242:	4843      	ldr	r0, [pc, #268]	@ (8001350 <NetworkInit+0x518>)
 8001244:	f00d fc91 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8001248:	2364      	movs	r3, #100	@ 0x64
 800124a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800124e:	4940      	ldr	r1, [pc, #256]	@ (8001350 <NetworkInit+0x518>)
 8001250:	483e      	ldr	r0, [pc, #248]	@ (800134c <NetworkInit+0x514>)
 8001252:	f008 f971 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"beidounmeaformat\",0\r\n");
 8001256:	4a3b      	ldr	r2, [pc, #236]	@ (8001344 <NetworkInit+0x50c>)
 8001258:	4b40      	ldr	r3, [pc, #256]	@ (800135c <NetworkInit+0x524>)
 800125a:	4614      	mov	r4, r2
 800125c:	461d      	mov	r5, r3
 800125e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001260:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001262:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001264:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001266:	682b      	ldr	r3, [r5, #0]
 8001268:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 800126a:	4836      	ldr	r0, [pc, #216]	@ (8001344 <NetworkInit+0x50c>)
 800126c:	f7ff f838 	bl	80002e0 <strlen>
 8001270:	4603      	mov	r3, r0
 8001272:	b29a      	uxth	r2, r3
 8001274:	2364      	movs	r3, #100	@ 0x64
 8001276:	4933      	ldr	r1, [pc, #204]	@ (8001344 <NetworkInit+0x50c>)
 8001278:	4834      	ldr	r0, [pc, #208]	@ (800134c <NetworkInit+0x514>)
 800127a:	f008 f8cf 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 800127e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001282:	2100      	movs	r1, #0
 8001284:	482f      	ldr	r0, [pc, #188]	@ (8001344 <NetworkInit+0x50c>)
 8001286:	f00d fc70 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 800128a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800128e:	2100      	movs	r1, #0
 8001290:	482f      	ldr	r0, [pc, #188]	@ (8001350 <NetworkInit+0x518>)
 8001292:	f00d fc6a 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 8001296:	2364      	movs	r3, #100	@ 0x64
 8001298:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800129c:	492c      	ldr	r1, [pc, #176]	@ (8001350 <NetworkInit+0x518>)
 800129e:	482b      	ldr	r0, [pc, #172]	@ (800134c <NetworkInit+0x514>)
 80012a0:	f008 f94a 	bl	8009538 <HAL_UART_Receive>

	// Set GPS Mode
	strcpy(txBuffer, "AT+QGPSCFG=\"gnssnmeatype\",0\r\n");
 80012a4:	4a27      	ldr	r2, [pc, #156]	@ (8001344 <NetworkInit+0x50c>)
 80012a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <NetworkInit+0x528>)
 80012a8:	4614      	mov	r4, r2
 80012aa:	461d      	mov	r5, r3
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80012b4:	c407      	stmia	r4!, {r0, r1, r2}
 80012b6:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80012b8:	4822      	ldr	r0, [pc, #136]	@ (8001344 <NetworkInit+0x50c>)
 80012ba:	f7ff f811 	bl	80002e0 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	2364      	movs	r3, #100	@ 0x64
 80012c4:	491f      	ldr	r1, [pc, #124]	@ (8001344 <NetworkInit+0x50c>)
 80012c6:	4821      	ldr	r0, [pc, #132]	@ (800134c <NetworkInit+0x514>)
 80012c8:	f008 f8a8 	bl	800941c <HAL_UART_Transmit>
	memset(txBuffer, '\0' , sizeof(txBuffer));
 80012cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012d0:	2100      	movs	r1, #0
 80012d2:	481c      	ldr	r0, [pc, #112]	@ (8001344 <NetworkInit+0x50c>)
 80012d4:	f00d fc49 	bl	800eb6a <memset>

	memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80012d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012dc:	2100      	movs	r1, #0
 80012de:	481c      	ldr	r0, [pc, #112]	@ (8001350 <NetworkInit+0x518>)
 80012e0:	f00d fc43 	bl	800eb6a <memset>
	HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 80012e4:	2364      	movs	r3, #100	@ 0x64
 80012e6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012ea:	4919      	ldr	r1, [pc, #100]	@ (8001350 <NetworkInit+0x518>)
 80012ec:	4817      	ldr	r0, [pc, #92]	@ (800134c <NetworkInit+0x514>)
 80012ee:	f008 f923 	bl	8009538 <HAL_UART_Receive>

    // Start TCP/IP service
    strcpy(txBuffer, "ATV=1\r\n");
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <NetworkInit+0x50c>)
 80012f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001364 <NetworkInit+0x52c>)
 80012f6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012fa:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80012fe:	4811      	ldr	r0, [pc, #68]	@ (8001344 <NetworkInit+0x50c>)
 8001300:	f7fe ffee 	bl	80002e0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b29a      	uxth	r2, r3
 8001308:	2364      	movs	r3, #100	@ 0x64
 800130a:	490e      	ldr	r1, [pc, #56]	@ (8001344 <NetworkInit+0x50c>)
 800130c:	480f      	ldr	r0, [pc, #60]	@ (800134c <NetworkInit+0x514>)
 800130e:	f008 f885 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8001312:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001316:	2100      	movs	r1, #0
 8001318:	480a      	ldr	r0, [pc, #40]	@ (8001344 <NetworkInit+0x50c>)
 800131a:	f00d fc26 	bl	800eb6a <memset>

    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 800131e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001322:	2100      	movs	r1, #0
 8001324:	480a      	ldr	r0, [pc, #40]	@ (8001350 <NetworkInit+0x518>)
 8001326:	f00d fc20 	bl	800eb6a <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 800132a:	2364      	movs	r3, #100	@ 0x64
 800132c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001330:	4907      	ldr	r1, [pc, #28]	@ (8001350 <NetworkInit+0x518>)
 8001332:	4806      	ldr	r0, [pc, #24]	@ (800134c <NetworkInit+0x514>)
 8001334:	f008 f900 	bl	8009538 <HAL_UART_Receive>


    // Check response
    if (strstr(rxBuffer, "+NETOPEN: 0") == NULL) {
 8001338:	490b      	ldr	r1, [pc, #44]	@ (8001368 <NetworkInit+0x530>)
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <NetworkInit+0x518>)
 800133c:	f00d fc9a 	bl	800ec74 <strstr>
        //Error_Handler();
    }
}
 8001340:	bf00      	nop
 8001342:	bdb0      	pop	{r4, r5, r7, pc}
 8001344:	24000210 	.word	0x24000210
 8001348:	0800ff0c 	.word	0x0800ff0c
 800134c:	240000f0 	.word	0x240000f0
 8001350:	24000310 	.word	0x24000310
 8001354:	0800ff30 	.word	0x0800ff30
 8001358:	0800ff54 	.word	0x0800ff54
 800135c:	0800ff74 	.word	0x0800ff74
 8001360:	0800ff98 	.word	0x0800ff98
 8001364:	0800ffb8 	.word	0x0800ffb8
 8001368:	0800ffc0 	.word	0x0800ffc0

0800136c <OpenSocket>:

void OpenSocket() {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af02      	add	r7, sp, #8
    sprintf(txBuffer, "AT+QIOPEN=1,%d,\"TCP\",\"%s\",%d,0,0\r\n", SOCKET_INDEX, SERVER_IP, SERVER_PORT);
 8001372:	f640 33ea 	movw	r3, #3050	@ 0xbea
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <OpenSocket+0x78>)
 800137a:	2200      	movs	r2, #0
 800137c:	491a      	ldr	r1, [pc, #104]	@ (80013e8 <OpenSocket+0x7c>)
 800137e:	481b      	ldr	r0, [pc, #108]	@ (80013ec <OpenSocket+0x80>)
 8001380:	f00d fb90 	bl	800eaa4 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8001384:	4819      	ldr	r0, [pc, #100]	@ (80013ec <OpenSocket+0x80>)
 8001386:	f7fe ffab 	bl	80002e0 <strlen>
 800138a:	4603      	mov	r3, r0
 800138c:	b29a      	uxth	r2, r3
 800138e:	2364      	movs	r3, #100	@ 0x64
 8001390:	4916      	ldr	r1, [pc, #88]	@ (80013ec <OpenSocket+0x80>)
 8001392:	4817      	ldr	r0, [pc, #92]	@ (80013f0 <OpenSocket+0x84>)
 8001394:	f008 f842 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8001398:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800139c:	2100      	movs	r1, #0
 800139e:	4813      	ldr	r0, [pc, #76]	@ (80013ec <OpenSocket+0x80>)
 80013a0:	f00d fbe3 	bl	800eb6a <memset>

    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80013a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013a8:	2100      	movs	r1, #0
 80013aa:	4812      	ldr	r0, [pc, #72]	@ (80013f4 <OpenSocket+0x88>)
 80013ac:	f00d fbdd 	bl	800eb6a <memset>
    HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
 80013b0:	2364      	movs	r3, #100	@ 0x64
 80013b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013b6:	490f      	ldr	r1, [pc, #60]	@ (80013f4 <OpenSocket+0x88>)
 80013b8:	480d      	ldr	r0, [pc, #52]	@ (80013f0 <OpenSocket+0x84>)
 80013ba:	f008 f8bd 	bl	8009538 <HAL_UART_Receive>
    //HAL_UART_Receive_DMA(&huart1, (uint8_t *)rxBuffer, 256);
    memset(rxBuffer, '\0' , sizeof(rxBuffer));
 80013be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013c2:	2100      	movs	r1, #0
 80013c4:	480b      	ldr	r0, [pc, #44]	@ (80013f4 <OpenSocket+0x88>)
 80013c6:	f00d fbd0 	bl	800eb6a <memset>


    //memset(txBuffer, '\0' , sizeof(txBuffer));
    // Check response
    if (strstr(rxBuffer, "+CIPOPEN: 0,0") == NULL) {
 80013ca:	490b      	ldr	r1, [pc, #44]	@ (80013f8 <OpenSocket+0x8c>)
 80013cc:	4809      	ldr	r0, [pc, #36]	@ (80013f4 <OpenSocket+0x88>)
 80013ce:	f00d fc51 	bl	800ec74 <strstr>
        //Error_Handler();
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);
 80013d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80013d6:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <OpenSocket+0x88>)
 80013d8:	4805      	ldr	r0, [pc, #20]	@ (80013f0 <OpenSocket+0x84>)
 80013da:	f009 ffce 	bl	800b37a <HAL_UARTEx_ReceiveToIdle_DMA>

    // Enable UART IDLE line detection interrupt
    //__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800ffcc 	.word	0x0800ffcc
 80013e8:	0800ffdc 	.word	0x0800ffdc
 80013ec:	24000210 	.word	0x24000210
 80013f0:	240000f0 	.word	0x240000f0
 80013f4:	24000310 	.word	0x24000310
 80013f8:	08010000 	.word	0x08010000

080013fc <SocketSendData>:


void SocketSendData(void) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b08a      	sub	sp, #40	@ 0x28
 8001400:	af00      	add	r7, sp, #0
	uint8_t data[40];

	encodeServerData(propertyIndex, data);
 8001402:	4b24      	ldr	r3, [pc, #144]	@ (8001494 <SocketSendData+0x98>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	463a      	mov	r2, r7
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f000 f972 	bl	80016f4 <encodeServerData>

	osMutexAcquire(uart_lockHandle, osWaitForever);
 8001410:	4b21      	ldr	r3, [pc, #132]	@ (8001498 <SocketSendData+0x9c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 31ff 	mov.w	r1, #4294967295
 8001418:	4618      	mov	r0, r3
 800141a:	f00a fa12 	bl	800b842 <osMutexAcquire>

	sprintf(txBuffer, "AT+QISEND=%d,%d\r\n", SOCKET_INDEX, sizeof(data));
 800141e:	2328      	movs	r3, #40	@ 0x28
 8001420:	2200      	movs	r2, #0
 8001422:	491e      	ldr	r1, [pc, #120]	@ (800149c <SocketSendData+0xa0>)
 8001424:	481e      	ldr	r0, [pc, #120]	@ (80014a0 <SocketSendData+0xa4>)
 8001426:	f00d fb3d 	bl	800eaa4 <siprintf>

    // Wait for `>` prompt
    while (!strstr((char *)checkBuffer, ">")) {
 800142a:	e00c      	b.n	8001446 <SocketSendData+0x4a>

    	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 800142c:	481c      	ldr	r0, [pc, #112]	@ (80014a0 <SocketSendData+0xa4>)
 800142e:	f7fe ff57 	bl	80002e0 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	b29a      	uxth	r2, r3
 8001436:	2364      	movs	r3, #100	@ 0x64
 8001438:	4919      	ldr	r1, [pc, #100]	@ (80014a0 <SocketSendData+0xa4>)
 800143a:	481a      	ldr	r0, [pc, #104]	@ (80014a4 <SocketSendData+0xa8>)
 800143c:	f007 ffee 	bl	800941c <HAL_UART_Transmit>
    	osDelay(10);  // Wait for the response
 8001440:	200a      	movs	r0, #10
 8001442:	f00a f95d 	bl	800b700 <osDelay>
    while (!strstr((char *)checkBuffer, ">")) {
 8001446:	213e      	movs	r1, #62	@ 0x3e
 8001448:	4817      	ldr	r0, [pc, #92]	@ (80014a8 <SocketSendData+0xac>)
 800144a:	f00d fb96 	bl	800eb7a <strchr>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d0eb      	beq.n	800142c <SocketSendData+0x30>
    }
    memset(txBuffer, '\0' , sizeof(txBuffer));
 8001454:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001458:	2100      	movs	r1, #0
 800145a:	4811      	ldr	r0, [pc, #68]	@ (80014a0 <SocketSendData+0xa4>)
 800145c:	f00d fb85 	bl	800eb6a <memset>

    // Send data
   // HAL_UART_Transmit(&huart1, (uint8_t *)data, sizeof(data), UART_TIMEOUT);
   // memset(txBuffer, '\0' , sizeof(txBuffer));

    osMutexRelease(uart_lockHandle);
 8001460:	4b0d      	ldr	r3, [pc, #52]	@ (8001498 <SocketSendData+0x9c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f00a fa37 	bl	800b8d8 <osMutexRelease>

    if (strstr(rxBuffer, "SEND OK") == NULL) {
 800146a:	4910      	ldr	r1, [pc, #64]	@ (80014ac <SocketSendData+0xb0>)
 800146c:	4810      	ldr	r0, [pc, #64]	@ (80014b0 <SocketSendData+0xb4>)
 800146e:	f00d fc01 	bl	800ec74 <strstr>
        //Error_Handler();
    }
    if(++propertyIndex > 8)	propertyIndex  = 0;
 8001472:	4b08      	ldr	r3, [pc, #32]	@ (8001494 <SocketSendData+0x98>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	3301      	adds	r3, #1
 8001478:	b2da      	uxtb	r2, r3
 800147a:	4b06      	ldr	r3, [pc, #24]	@ (8001494 <SocketSendData+0x98>)
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SocketSendData+0x98>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b08      	cmp	r3, #8
 8001484:	d902      	bls.n	800148c <SocketSendData+0x90>
 8001486:	4b03      	ldr	r3, [pc, #12]	@ (8001494 <SocketSendData+0x98>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	@ 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	24000514 	.word	0x24000514
 8001498:	2400020c 	.word	0x2400020c
 800149c:	08010010 	.word	0x08010010
 80014a0:	24000210 	.word	0x24000210
 80014a4:	240000f0 	.word	0x240000f0
 80014a8:	24000410 	.word	0x24000410
 80014ac:	08010024 	.word	0x08010024
 80014b0:	24000310 	.word	0x24000310

080014b4 <SocketReceiveData>:

void SocketReceiveData(void) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
	int length = sizeof(rxBuffer);
 80014ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014be:	607b      	str	r3, [r7, #4]

	osMutexAcquire(uart_lockHandle, osWaitForever);
 80014c0:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <SocketReceiveData+0x60>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f04f 31ff 	mov.w	r1, #4294967295
 80014c8:	4618      	mov	r0, r3
 80014ca:	f00a f9ba 	bl	800b842 <osMutexAcquire>

    sprintf(txBuffer, "AT+QIRD=0,%d,%d\r\n", SOCKET_INDEX, length);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	4911      	ldr	r1, [pc, #68]	@ (8001518 <SocketReceiveData+0x64>)
 80014d4:	4811      	ldr	r0, [pc, #68]	@ (800151c <SocketReceiveData+0x68>)
 80014d6:	f00d fae5 	bl	800eaa4 <siprintf>

    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 80014da:	4810      	ldr	r0, [pc, #64]	@ (800151c <SocketReceiveData+0x68>)
 80014dc:	f7fe ff00 	bl	80002e0 <strlen>
 80014e0:	4603      	mov	r3, r0
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	2364      	movs	r3, #100	@ 0x64
 80014e6:	490d      	ldr	r1, [pc, #52]	@ (800151c <SocketReceiveData+0x68>)
 80014e8:	480d      	ldr	r0, [pc, #52]	@ (8001520 <SocketReceiveData+0x6c>)
 80014ea:	f007 ff97 	bl	800941c <HAL_UART_Transmit>
    memset(txBuffer, '\0' , sizeof(txBuffer));
 80014ee:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014f2:	2100      	movs	r1, #0
 80014f4:	4809      	ldr	r0, [pc, #36]	@ (800151c <SocketReceiveData+0x68>)
 80014f6:	f00d fb38 	bl	800eb6a <memset>

    osMutexRelease(uart_lockHandle);
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <SocketReceiveData+0x60>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f00a f9ea 	bl	800b8d8 <osMutexRelease>

    // Check if data received successfully
    if (strstr(rxBuffer, "+CIPRXGET:") == NULL) {
 8001504:	4907      	ldr	r1, [pc, #28]	@ (8001524 <SocketReceiveData+0x70>)
 8001506:	4808      	ldr	r0, [pc, #32]	@ (8001528 <SocketReceiveData+0x74>)
 8001508:	f00d fbb4 	bl	800ec74 <strstr>
        //Error_Handler();
    }
}
 800150c:	bf00      	nop
 800150e:	3708      	adds	r7, #8
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	2400020c 	.word	0x2400020c
 8001518:	0801002c 	.word	0x0801002c
 800151c:	24000210 	.word	0x24000210
 8001520:	240000f0 	.word	0x240000f0
 8001524:	08010040 	.word	0x08010040
 8001528:	24000310 	.word	0x24000310

0800152c <gps>:

void gps(void) {
 800152c:	b590      	push	{r4, r7, lr}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af00      	add	r7, sp, #0
	char *gpsString;
	osMutexAcquire(uart_lockHandle, osWaitForever);
 8001532:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <gps+0xf0>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f04f 31ff 	mov.w	r1, #4294967295
 800153a:	4618      	mov	r0, r3
 800153c:	f00a f981 	bl	800b842 <osMutexAcquire>

	strcpy(txBuffer, "AT+QGPSLOC=2\r\n");
 8001540:	4a37      	ldr	r2, [pc, #220]	@ (8001620 <gps+0xf4>)
 8001542:	4b38      	ldr	r3, [pc, #224]	@ (8001624 <gps+0xf8>)
 8001544:	4614      	mov	r4, r2
 8001546:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001548:	c407      	stmia	r4!, {r0, r1, r2}
 800154a:	8023      	strh	r3, [r4, #0]
 800154c:	3402      	adds	r4, #2
 800154e:	0c1b      	lsrs	r3, r3, #16
 8001550:	7023      	strb	r3, [r4, #0]

	while (!strstr((char *)checkBuffer, "GPGSV")) {
 8001552:	e00c      	b.n	800156e <gps+0x42>

	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8001554:	4832      	ldr	r0, [pc, #200]	@ (8001620 <gps+0xf4>)
 8001556:	f7fe fec3 	bl	80002e0 <strlen>
 800155a:	4603      	mov	r3, r0
 800155c:	b29a      	uxth	r2, r3
 800155e:	2364      	movs	r3, #100	@ 0x64
 8001560:	492f      	ldr	r1, [pc, #188]	@ (8001620 <gps+0xf4>)
 8001562:	4831      	ldr	r0, [pc, #196]	@ (8001628 <gps+0xfc>)
 8001564:	f007 ff5a 	bl	800941c <HAL_UART_Transmit>
	osDelay(10);  // Wait for the response
 8001568:	200a      	movs	r0, #10
 800156a:	f00a f8c9 	bl	800b700 <osDelay>
	while (!strstr((char *)checkBuffer, "GPGSV")) {
 800156e:	492f      	ldr	r1, [pc, #188]	@ (800162c <gps+0x100>)
 8001570:	482f      	ldr	r0, [pc, #188]	@ (8001630 <gps+0x104>)
 8001572:	f00d fb7f 	bl	800ec74 <strstr>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0eb      	beq.n	8001554 <gps+0x28>
	}

	gpsString = strstr((char *)checkBuffer, "GPGSV");
 800157c:	492b      	ldr	r1, [pc, #172]	@ (800162c <gps+0x100>)
 800157e:	482c      	ldr	r0, [pc, #176]	@ (8001630 <gps+0x104>)
 8001580:	f00d fb78 	bl	800ec74 <strstr>
 8001584:	6278      	str	r0, [r7, #36]	@ 0x24

	memset(txBuffer, '\0' , sizeof(txBuffer));
 8001586:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800158a:	2100      	movs	r1, #0
 800158c:	4824      	ldr	r0, [pc, #144]	@ (8001620 <gps+0xf4>)
 800158e:	f00d faec 	bl	800eb6a <memset>

	// Move pointer past "+CGPSINFO:"
	gpsString += 10;
 8001592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001594:	330a      	adds	r3, #10
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24

	// Example response: 3113.343286,N,12121.234064,E,...
	char latitude[16] = {0};
 8001598:	2300      	movs	r3, #0
 800159a:	613b      	str	r3, [r7, #16]
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
	char longitude[16] = {0};
 80015a8:	2300      	movs	r3, #0
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]

	// Extract latitude and longitude strings
	char *token = strtok(gpsString, ",");
 80015b6:	491f      	ldr	r1, [pc, #124]	@ (8001634 <gps+0x108>)
 80015b8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80015ba:	f00d faff 	bl	800ebbc <strtok>
 80015be:	6238      	str	r0, [r7, #32]
	if (token != NULL) strncpy(latitude, token, sizeof(latitude) - 1);
 80015c0:	6a3b      	ldr	r3, [r7, #32]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d006      	beq.n	80015d4 <gps+0xa8>
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	220f      	movs	r2, #15
 80015cc:	6a39      	ldr	r1, [r7, #32]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00d fae0 	bl	800eb94 <strncpy>
	token = strtok(NULL, ","); // Skip N/S indicator
 80015d4:	4917      	ldr	r1, [pc, #92]	@ (8001634 <gps+0x108>)
 80015d6:	2000      	movs	r0, #0
 80015d8:	f00d faf0 	bl	800ebbc <strtok>
 80015dc:	6238      	str	r0, [r7, #32]
	token = strtok(NULL, ",");
 80015de:	4915      	ldr	r1, [pc, #84]	@ (8001634 <gps+0x108>)
 80015e0:	2000      	movs	r0, #0
 80015e2:	f00d faeb 	bl	800ebbc <strtok>
 80015e6:	6238      	str	r0, [r7, #32]
	if (token != NULL) strncpy(longitude, token, sizeof(longitude) - 1);
 80015e8:	6a3b      	ldr	r3, [r7, #32]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d005      	beq.n	80015fa <gps+0xce>
 80015ee:	463b      	mov	r3, r7
 80015f0:	220f      	movs	r2, #15
 80015f2:	6a39      	ldr	r1, [r7, #32]
 80015f4:	4618      	mov	r0, r3
 80015f6:	f00d facd 	bl	800eb94 <strncpy>

	// Format and store in gpsData
	sprintf((char *)serverAttributes.gpsData, "%s,%s", latitude, longitude);
 80015fa:	463b      	mov	r3, r7
 80015fc:	f107 0210 	add.w	r2, r7, #16
 8001600:	490d      	ldr	r1, [pc, #52]	@ (8001638 <gps+0x10c>)
 8001602:	480e      	ldr	r0, [pc, #56]	@ (800163c <gps+0x110>)
 8001604:	f00d fa4e 	bl	800eaa4 <siprintf>

	osMutexRelease(uart_lockHandle);
 8001608:	4b04      	ldr	r3, [pc, #16]	@ (800161c <gps+0xf0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f00a f963 	bl	800b8d8 <osMutexRelease>
}
 8001612:	bf00      	nop
 8001614:	372c      	adds	r7, #44	@ 0x2c
 8001616:	46bd      	mov	sp, r7
 8001618:	bd90      	pop	{r4, r7, pc}
 800161a:	bf00      	nop
 800161c:	2400020c 	.word	0x2400020c
 8001620:	24000210 	.word	0x24000210
 8001624:	0801004c 	.word	0x0801004c
 8001628:	240000f0 	.word	0x240000f0
 800162c:	0801005c 	.word	0x0801005c
 8001630:	24000410 	.word	0x24000410
 8001634:	08010064 	.word	0x08010064
 8001638:	08010068 	.word	0x08010068
 800163c:	2400051a 	.word	0x2400051a

08001640 <HandleReceivedData>:

void HandleReceivedData(uint8_t writeIndex) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]

	uint16_t newDataCount = (writeIndex >= readIndex)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	b29a      	uxth	r2, r3
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <HandleReceivedData+0xa8>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d306      	bcc.n	8001664 <HandleReceivedData+0x24>
	                            ? (writeIndex - readIndex)
 8001656:	79fb      	ldrb	r3, [r7, #7]
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <HandleReceivedData+0xa8>)
 800165c:	881b      	ldrh	r3, [r3, #0]
	uint16_t newDataCount = (writeIndex >= readIndex)
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	b29b      	uxth	r3, r3
 8001662:	e008      	b.n	8001676 <HandleReceivedData+0x36>
	                            : (RX_BUFFER_SIZE - readIndex + writeIndex);
 8001664:	79fb      	ldrb	r3, [r7, #7]
 8001666:	b29a      	uxth	r2, r3
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <HandleReceivedData+0xa8>)
 800166a:	881b      	ldrh	r3, [r3, #0]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29b      	uxth	r3, r3
	uint16_t newDataCount = (writeIndex >= readIndex)
 8001670:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8001674:	b29b      	uxth	r3, r3
 8001676:	81bb      	strh	r3, [r7, #12]
	memset(checkBuffer, '\0', RX_BUFFER_SIZE);
 8001678:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800167c:	2100      	movs	r1, #0
 800167e:	481b      	ldr	r0, [pc, #108]	@ (80016ec <HandleReceivedData+0xac>)
 8001680:	f00d fa73 	bl	800eb6a <memset>
	for (uint16_t i = 0; i < newDataCount; i++) {
 8001684:	2300      	movs	r3, #0
 8001686:	81fb      	strh	r3, [r7, #14]
 8001688:	e017      	b.n	80016ba <HandleReceivedData+0x7a>
		// Copy new data to the process buffer
		uint8_t newByte = rxBuffer[readIndex];
 800168a:	4b17      	ldr	r3, [pc, #92]	@ (80016e8 <HandleReceivedData+0xa8>)
 800168c:	881b      	ldrh	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <HandleReceivedData+0xb0>)
 8001692:	5c9b      	ldrb	r3, [r3, r2]
 8001694:	72fb      	strb	r3, [r7, #11]
		checkBuffer[i] = newByte;
 8001696:	89fb      	ldrh	r3, [r7, #14]
 8001698:	4914      	ldr	r1, [pc, #80]	@ (80016ec <HandleReceivedData+0xac>)
 800169a:	7afa      	ldrb	r2, [r7, #11]
 800169c:	54ca      	strb	r2, [r1, r3]

		// Increment read index circularly
		readIndex = (readIndex + 1) % RX_BUFFER_SIZE;
 800169e:	4b12      	ldr	r3, [pc, #72]	@ (80016e8 <HandleReceivedData+0xa8>)
 80016a0:	881b      	ldrh	r3, [r3, #0]
 80016a2:	3301      	adds	r3, #1
 80016a4:	425a      	negs	r2, r3
 80016a6:	b2db      	uxtb	r3, r3
 80016a8:	b2d2      	uxtb	r2, r2
 80016aa:	bf58      	it	pl
 80016ac:	4253      	negpl	r3, r2
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	4b0d      	ldr	r3, [pc, #52]	@ (80016e8 <HandleReceivedData+0xa8>)
 80016b2:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < newDataCount; i++) {
 80016b4:	89fb      	ldrh	r3, [r7, #14]
 80016b6:	3301      	adds	r3, #1
 80016b8:	81fb      	strh	r3, [r7, #14]
 80016ba:	89fa      	ldrh	r2, [r7, #14]
 80016bc:	89bb      	ldrh	r3, [r7, #12]
 80016be:	429a      	cmp	r2, r3
 80016c0:	d3e3      	bcc.n	800168a <HandleReceivedData+0x4a>
	}
	// Check if we have a complete packet
	if (readIndex >= PACKET_MIN_LENGTH) { // Assume minimum length is 2 bytes (Type + Length)
 80016c2:	4b09      	ldr	r3, [pc, #36]	@ (80016e8 <HandleReceivedData+0xa8>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	2b05      	cmp	r3, #5
 80016c8:	d90a      	bls.n	80016e0 <HandleReceivedData+0xa0>
		if (checkBuffer[0] == 0xAA) {
 80016ca:	4b08      	ldr	r3, [pc, #32]	@ (80016ec <HandleReceivedData+0xac>)
 80016cc:	781b      	ldrb	r3, [r3, #0]
 80016ce:	2baa      	cmp	r3, #170	@ 0xaa
 80016d0:	d106      	bne.n	80016e0 <HandleReceivedData+0xa0>
			decodeServerData((uint8_t *)checkBuffer, readIndex);
 80016d2:	4b05      	ldr	r3, [pc, #20]	@ (80016e8 <HandleReceivedData+0xa8>)
 80016d4:	881b      	ldrh	r3, [r3, #0]
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	4619      	mov	r1, r3
 80016da:	4804      	ldr	r0, [pc, #16]	@ (80016ec <HandleReceivedData+0xac>)
 80016dc:	f000 f8b2 	bl	8001844 <decodeServerData>
		}
	}
}
 80016e0:	bf00      	nop
 80016e2:	3710      	adds	r7, #16
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	24000512 	.word	0x24000512
 80016ec:	24000410 	.word	0x24000410
 80016f0:	24000310 	.word	0x24000310

080016f4 <encodeServerData>:


uint8_t encodeServerData(ServerPropertyType type, uint8_t *packet) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	6039      	str	r1, [r7, #0]
 80016fe:	71fb      	strb	r3, [r7, #7]
    uint8_t payloadLength = 0;
 8001700:	2300      	movs	r3, #0
 8001702:	75fb      	strb	r3, [r7, #23]
    uint8_t *payload;

    switch (type) {
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	3b01      	subs	r3, #1
 8001708:	2b07      	cmp	r3, #7
 800170a:	d83b      	bhi.n	8001784 <encodeServerData+0x90>
 800170c:	a201      	add	r2, pc, #4	@ (adr r2, 8001714 <encodeServerData+0x20>)
 800170e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001712:	bf00      	nop
 8001714:	08001735 	.word	0x08001735
 8001718:	0800173f 	.word	0x0800173f
 800171c:	08001749 	.word	0x08001749
 8001720:	08001753 	.word	0x08001753
 8001724:	0800175d 	.word	0x0800175d
 8001728:	08001767 	.word	0x08001767
 800172c:	08001771 	.word	0x08001771
 8001730:	0800177b 	.word	0x0800177b
        case IMMOBILIZE_STATUS:
            payload = serverAttributes.immobilizeStatus;
 8001734:	4b3b      	ldr	r3, [pc, #236]	@ (8001824 <encodeServerData+0x130>)
 8001736:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.immobilizeStatus);
 8001738:	2301      	movs	r3, #1
 800173a:	75fb      	strb	r3, [r7, #23]
            break;
 800173c:	e024      	b.n	8001788 <encodeServerData+0x94>
        case RPM_PRESET:
            payload = serverAttributes.rpmPreset;
 800173e:	4b3a      	ldr	r3, [pc, #232]	@ (8001828 <encodeServerData+0x134>)
 8001740:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.rpmPreset);
 8001742:	2301      	movs	r3, #1
 8001744:	75fb      	strb	r3, [r7, #23]
            break;
 8001746:	e01f      	b.n	8001788 <encodeServerData+0x94>
        case GPS:
            payload = serverAttributes.gpsData;
 8001748:	4b38      	ldr	r3, [pc, #224]	@ (800182c <encodeServerData+0x138>)
 800174a:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.gpsData);
 800174c:	2320      	movs	r3, #32
 800174e:	75fb      	strb	r3, [r7, #23]
            break;
 8001750:	e01a      	b.n	8001788 <encodeServerData+0x94>
        case CURRENT:
            payload = serverAttributes.currentData;
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <encodeServerData+0x13c>)
 8001754:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.currentData);
 8001756:	2302      	movs	r3, #2
 8001758:	75fb      	strb	r3, [r7, #23]
            break;
 800175a:	e015      	b.n	8001788 <encodeServerData+0x94>
        case VOLTAGE:
            payload = serverAttributes.voltageData;
 800175c:	4b35      	ldr	r3, [pc, #212]	@ (8001834 <encodeServerData+0x140>)
 800175e:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.voltageData);
 8001760:	2302      	movs	r3, #2
 8001762:	75fb      	strb	r3, [r7, #23]
            break;
 8001764:	e010      	b.n	8001788 <encodeServerData+0x94>
        case RPM:
            payload = serverAttributes.rpm;
 8001766:	4b34      	ldr	r3, [pc, #208]	@ (8001838 <encodeServerData+0x144>)
 8001768:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.rpm);
 800176a:	2301      	movs	r3, #1
 800176c:	75fb      	strb	r3, [r7, #23]
            break;
 800176e:	e00b      	b.n	8001788 <encodeServerData+0x94>
        case TEMPERATURE:
            payload = serverAttributes.temperature;
 8001770:	4b32      	ldr	r3, [pc, #200]	@ (800183c <encodeServerData+0x148>)
 8001772:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.temperature);
 8001774:	2301      	movs	r3, #1
 8001776:	75fb      	strb	r3, [r7, #23]
            break;
 8001778:	e006      	b.n	8001788 <encodeServerData+0x94>
        case NETWORK_STRENGTH:
            payload = serverAttributes.networkStrength;
 800177a:	4b31      	ldr	r3, [pc, #196]	@ (8001840 <encodeServerData+0x14c>)
 800177c:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.networkStrength);
 800177e:	2301      	movs	r3, #1
 8001780:	75fb      	strb	r3, [r7, #23]
            break;
 8001782:	e001      	b.n	8001788 <encodeServerData+0x94>
        default:
            return 0; // Unknown type
 8001784:	2300      	movs	r3, #0
 8001786:	e049      	b.n	800181c <encodeServerData+0x128>
    }

    // Create the packet
    uint8_t index = 0;
 8001788:	2300      	movs	r3, #0
 800178a:	737b      	strb	r3, [r7, #13]
    packet[index++] = 0xAA;  // Header byte 1
 800178c:	7b7b      	ldrb	r3, [r7, #13]
 800178e:	1c5a      	adds	r2, r3, #1
 8001790:	737a      	strb	r2, [r7, #13]
 8001792:	461a      	mov	r2, r3
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	4413      	add	r3, r2
 8001798:	22aa      	movs	r2, #170	@ 0xaa
 800179a:	701a      	strb	r2, [r3, #0]
    packet[index++] = 0xBB;  // Header byte 2
 800179c:	7b7b      	ldrb	r3, [r7, #13]
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	737a      	strb	r2, [r7, #13]
 80017a2:	461a      	mov	r2, r3
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4413      	add	r3, r2
 80017a8:	22bb      	movs	r2, #187	@ 0xbb
 80017aa:	701a      	strb	r2, [r3, #0]
    packet[index++] = type;  // Property type
 80017ac:	7b7b      	ldrb	r3, [r7, #13]
 80017ae:	1c5a      	adds	r2, r3, #1
 80017b0:	737a      	strb	r2, [r7, #13]
 80017b2:	461a      	mov	r2, r3
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	79fa      	ldrb	r2, [r7, #7]
 80017ba:	701a      	strb	r2, [r3, #0]
    packet[index++] = payloadLength; // Payload length
 80017bc:	7b7b      	ldrb	r3, [r7, #13]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	737a      	strb	r2, [r7, #13]
 80017c2:	461a      	mov	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	4413      	add	r3, r2
 80017c8:	7dfa      	ldrb	r2, [r7, #23]
 80017ca:	701a      	strb	r2, [r3, #0]

    // Copy payload
    memcpy(&packet[index], payload, payloadLength);
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	683a      	ldr	r2, [r7, #0]
 80017d0:	4413      	add	r3, r2
 80017d2:	7dfa      	ldrb	r2, [r7, #23]
 80017d4:	6939      	ldr	r1, [r7, #16]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00d fb2b 	bl	800ee32 <memcpy>
    index += payloadLength;
 80017dc:	7b7a      	ldrb	r2, [r7, #13]
 80017de:	7dfb      	ldrb	r3, [r7, #23]
 80017e0:	4413      	add	r3, r2
 80017e2:	737b      	strb	r3, [r7, #13]

    // Add checksum
    uint8_t checksum = 0;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 80017e8:	2302      	movs	r3, #2
 80017ea:	73bb      	strb	r3, [r7, #14]
 80017ec:	e009      	b.n	8001802 <encodeServerData+0x10e>
        checksum ^= packet[i];
 80017ee:	7bbb      	ldrb	r3, [r7, #14]
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	4413      	add	r3, r2
 80017f4:	781a      	ldrb	r2, [r3, #0]
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	4053      	eors	r3, r2
 80017fa:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 80017fc:	7bbb      	ldrb	r3, [r7, #14]
 80017fe:	3301      	adds	r3, #1
 8001800:	73bb      	strb	r3, [r7, #14]
 8001802:	7bba      	ldrb	r2, [r7, #14]
 8001804:	7b7b      	ldrb	r3, [r7, #13]
 8001806:	429a      	cmp	r2, r3
 8001808:	d3f1      	bcc.n	80017ee <encodeServerData+0xfa>
    }
    packet[index++] = checksum;
 800180a:	7b7b      	ldrb	r3, [r7, #13]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	737a      	strb	r2, [r7, #13]
 8001810:	461a      	mov	r2, r3
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	7bfa      	ldrb	r2, [r7, #15]
 8001818:	701a      	strb	r2, [r3, #0]

    return index; // Total packet length
 800181a:	7b7b      	ldrb	r3, [r7, #13]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	24000518 	.word	0x24000518
 8001828:	24000519 	.word	0x24000519
 800182c:	2400051a 	.word	0x2400051a
 8001830:	2400053a 	.word	0x2400053a
 8001834:	2400053c 	.word	0x2400053c
 8001838:	2400053e 	.word	0x2400053e
 800183c:	2400053f 	.word	0x2400053f
 8001840:	24000540 	.word	0x24000540

08001844 <decodeServerData>:

void decodeServerData(uint8_t *packet, uint8_t length) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	70fb      	strb	r3, [r7, #3]
    if (length < 5) return; // Invalid packet length
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	2b04      	cmp	r3, #4
 8001854:	d960      	bls.n	8001918 <decodeServerData+0xd4>

    // Validate header
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2baa      	cmp	r3, #170	@ 0xaa
 800185c:	d15e      	bne.n	800191c <decodeServerData+0xd8>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3301      	adds	r3, #1
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2bbb      	cmp	r3, #187	@ 0xbb
 8001866:	d159      	bne.n	800191c <decodeServerData+0xd8>

    // Extract type and payload length
    ServerPropertyType type = packet[2];
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	789b      	ldrb	r3, [r3, #2]
 800186c:	73fb      	strb	r3, [r7, #15]
    uint8_t payloadLength = packet[3];
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	78db      	ldrb	r3, [r3, #3]
 8001872:	73bb      	strb	r3, [r7, #14]
   //     checksum ^= packet[i];
   // }
   // if (checksum != packet[4 + payloadLength]) return;

    // Extract payload
    uint8_t *payload = &packet[4];
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3304      	adds	r3, #4
 8001878:	60bb      	str	r3, [r7, #8]

    // Update serverAttributes
    switch (type) {
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	3b01      	subs	r3, #1
 800187e:	2b07      	cmp	r3, #7
 8001880:	d84e      	bhi.n	8001920 <decodeServerData+0xdc>
 8001882:	a201      	add	r2, pc, #4	@ (adr r2, 8001888 <decodeServerData+0x44>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	080018a9 	.word	0x080018a9
 800188c:	080018b7 	.word	0x080018b7
 8001890:	080018c5 	.word	0x080018c5
 8001894:	080018d3 	.word	0x080018d3
 8001898:	080018e1 	.word	0x080018e1
 800189c:	080018ef 	.word	0x080018ef
 80018a0:	080018fd 	.word	0x080018fd
 80018a4:	0800190b 	.word	0x0800190b
        case IMMOBILIZE_STATUS:
            memcpy(serverAttributes.immobilizeStatus, payload, payloadLength);
 80018a8:	7bbb      	ldrb	r3, [r7, #14]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68b9      	ldr	r1, [r7, #8]
 80018ae:	481e      	ldr	r0, [pc, #120]	@ (8001928 <decodeServerData+0xe4>)
 80018b0:	f00d fabf 	bl	800ee32 <memcpy>
            break;
 80018b4:	e035      	b.n	8001922 <decodeServerData+0xde>
        case RPM_PRESET:
            memcpy(serverAttributes.rpmPreset, payload, payloadLength);
 80018b6:	7bbb      	ldrb	r3, [r7, #14]
 80018b8:	461a      	mov	r2, r3
 80018ba:	68b9      	ldr	r1, [r7, #8]
 80018bc:	481b      	ldr	r0, [pc, #108]	@ (800192c <decodeServerData+0xe8>)
 80018be:	f00d fab8 	bl	800ee32 <memcpy>
            break;
 80018c2:	e02e      	b.n	8001922 <decodeServerData+0xde>
        case GPS:
            memcpy(serverAttributes.gpsData, payload, payloadLength);
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	461a      	mov	r2, r3
 80018c8:	68b9      	ldr	r1, [r7, #8]
 80018ca:	4819      	ldr	r0, [pc, #100]	@ (8001930 <decodeServerData+0xec>)
 80018cc:	f00d fab1 	bl	800ee32 <memcpy>
            break;
 80018d0:	e027      	b.n	8001922 <decodeServerData+0xde>
        case CURRENT:
            memcpy(serverAttributes.currentData, payload, payloadLength);
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	461a      	mov	r2, r3
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	4816      	ldr	r0, [pc, #88]	@ (8001934 <decodeServerData+0xf0>)
 80018da:	f00d faaa 	bl	800ee32 <memcpy>
            break;
 80018de:	e020      	b.n	8001922 <decodeServerData+0xde>
        case VOLTAGE:
            memcpy(serverAttributes.voltageData, payload, payloadLength);
 80018e0:	7bbb      	ldrb	r3, [r7, #14]
 80018e2:	461a      	mov	r2, r3
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	4814      	ldr	r0, [pc, #80]	@ (8001938 <decodeServerData+0xf4>)
 80018e8:	f00d faa3 	bl	800ee32 <memcpy>
            break;
 80018ec:	e019      	b.n	8001922 <decodeServerData+0xde>
        case RPM:
            memcpy(serverAttributes.rpm, payload, payloadLength);
 80018ee:	7bbb      	ldrb	r3, [r7, #14]
 80018f0:	461a      	mov	r2, r3
 80018f2:	68b9      	ldr	r1, [r7, #8]
 80018f4:	4811      	ldr	r0, [pc, #68]	@ (800193c <decodeServerData+0xf8>)
 80018f6:	f00d fa9c 	bl	800ee32 <memcpy>
            break;
 80018fa:	e012      	b.n	8001922 <decodeServerData+0xde>
        case TEMPERATURE:
            memcpy(serverAttributes.temperature, payload, payloadLength);
 80018fc:	7bbb      	ldrb	r3, [r7, #14]
 80018fe:	461a      	mov	r2, r3
 8001900:	68b9      	ldr	r1, [r7, #8]
 8001902:	480f      	ldr	r0, [pc, #60]	@ (8001940 <decodeServerData+0xfc>)
 8001904:	f00d fa95 	bl	800ee32 <memcpy>
            break;
 8001908:	e00b      	b.n	8001922 <decodeServerData+0xde>
        case NETWORK_STRENGTH:
            memcpy(serverAttributes.networkStrength, payload, payloadLength);
 800190a:	7bbb      	ldrb	r3, [r7, #14]
 800190c:	461a      	mov	r2, r3
 800190e:	68b9      	ldr	r1, [r7, #8]
 8001910:	480c      	ldr	r0, [pc, #48]	@ (8001944 <decodeServerData+0x100>)
 8001912:	f00d fa8e 	bl	800ee32 <memcpy>
            break;
 8001916:	e004      	b.n	8001922 <decodeServerData+0xde>
    if (length < 5) return; // Invalid packet length
 8001918:	bf00      	nop
 800191a:	e002      	b.n	8001922 <decodeServerData+0xde>
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 800191c:	bf00      	nop
 800191e:	e000      	b.n	8001922 <decodeServerData+0xde>
        default:
            // Unknown type
            break;
 8001920:	bf00      	nop
    }
}
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	24000518 	.word	0x24000518
 800192c:	24000519 	.word	0x24000519
 8001930:	2400051a 	.word	0x2400051a
 8001934:	2400053a 	.word	0x2400053a
 8001938:	2400053c 	.word	0x2400053c
 800193c:	2400053e 	.word	0x2400053e
 8001940:	2400053f 	.word	0x2400053f
 8001944:	24000540 	.word	0x24000540

08001948 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
    //if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
      //  __HAL_UART_CLEAR_IDLEFLAG(&huart1);  // Clear the idle flag

	// Process received data
	writeIndex = Size;//(RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));// % RX_BUFFER_SIZE;
 8001954:	4a06      	ldr	r2, [pc, #24]	@ (8001970 <HAL_UARTEx_RxEventCallback+0x28>)
 8001956:	887b      	ldrh	r3, [r7, #2]
 8001958:	8013      	strh	r3, [r2, #0]
	HandleReceivedData(writeIndex);
 800195a:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <HAL_UARTEx_RxEventCallback+0x28>)
 800195c:	881b      	ldrh	r3, [r3, #0]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff fe6d 	bl	8001640 <HandleReceivedData>
}
 8001966:	bf00      	nop
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	24000510 	.word	0x24000510

08001974 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f009 febf 	bl	800b700 <osDelay>
 8001982:	e7fb      	b.n	800197c <StartDefaultTask+0x8>

08001984 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketSendData();
 800198c:	f7ff fd36 	bl	80013fc <SocketSendData>
	  osDelay(20);
 8001990:	2014      	movs	r0, #20
 8001992:	f009 feb5 	bl	800b700 <osDelay>
	  SocketSendData();
 8001996:	bf00      	nop
 8001998:	e7f8      	b.n	800198c <StartSendTask+0x8>

0800199a <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b082      	sub	sp, #8
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketReceiveData();
 80019a2:	f7ff fd87 	bl	80014b4 <SocketReceiveData>
	  osDelay(20);
 80019a6:	2014      	movs	r0, #20
 80019a8:	f009 feaa 	bl	800b700 <osDelay>
	  SocketReceiveData();
 80019ac:	bf00      	nop
 80019ae:	e7f8      	b.n	80019a2 <StartReceiveTask+0x8>

080019b0 <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
  /* Infinite loop */
  for(;;)
  {
	gps();
 80019b8:	f7ff fdb8 	bl	800152c <gps>
    osDelay(20);
 80019bc:	2014      	movs	r0, #20
 80019be:	f009 fe9f 	bl	800b700 <osDelay>
	gps();
 80019c2:	bf00      	nop
 80019c4:	e7f8      	b.n	80019b8 <StartGpsTask+0x8>
	...

080019c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a04      	ldr	r2, [pc, #16]	@ (80019e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d101      	bne.n	80019de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019da:	f000 fc43 	bl	8002264 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40001000 	.word	0x40001000

080019ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019ec:	b480      	push	{r7}
 80019ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f0:	b672      	cpsid	i
}
 80019f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <Error_Handler+0x8>

080019f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_MspInit+0x38>)
 8001a00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a04:	4a0a      	ldr	r2, [pc, #40]	@ (8001a30 <HAL_MspInit+0x38>)
 8001a06:	f043 0302 	orr.w	r3, r3, #2
 8001a0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001a0e:	4b08      	ldr	r3, [pc, #32]	@ (8001a30 <HAL_MspInit+0x38>)
 8001a10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001a14:	f003 0302 	and.w	r3, r3, #2
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	210f      	movs	r1, #15
 8001a20:	f06f 0001 	mvn.w	r0, #1
 8001a24:	f000 fd02 	bl	800242c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	58024400 	.word	0x58024400

08001a34 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a0e      	ldr	r2, [pc, #56]	@ (8001a7c <HAL_TIM_PWM_MspInit+0x48>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d116      	bne.n	8001a74 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a46:	4b0e      	ldr	r3, [pc, #56]	@ (8001a80 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a4c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a80 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a4e:	f043 0301 	orr.w	r3, r3, #1
 8001a52:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a56:	4b0a      	ldr	r3, [pc, #40]	@ (8001a80 <HAL_TIM_PWM_MspInit+0x4c>)
 8001a58:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a5c:	f003 0301 	and.w	r3, r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	2019      	movs	r0, #25
 8001a6a:	f000 fcdf 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001a6e:	2019      	movs	r0, #25
 8001a70:	f000 fcf6 	bl	8002460 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001a74:	bf00      	nop
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40010000 	.word	0x40010000
 8001a80:	58024400 	.word	0x58024400

08001a84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b08a      	sub	sp, #40	@ 0x28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a8c:	f107 0314 	add.w	r3, r7, #20
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]
 8001a94:	605a      	str	r2, [r3, #4]
 8001a96:	609a      	str	r2, [r3, #8]
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a22      	ldr	r2, [pc, #136]	@ (8001b2c <HAL_TIM_MspPostInit+0xa8>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d13e      	bne.n	8001b24 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	4b22      	ldr	r3, [pc, #136]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aac:	4a20      	ldr	r2, [pc, #128]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001aae:	f043 0302 	orr.w	r3, r3, #2
 8001ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001abc:	f003 0302 	and.w	r3, r3, #2
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aca:	4a19      	ldr	r2, [pc, #100]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001acc:	f043 0310 	orr.w	r3, r3, #16
 8001ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ad4:	4b16      	ldr	r3, [pc, #88]	@ (8001b30 <HAL_TIM_MspPostInit+0xac>)
 8001ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	60fb      	str	r3, [r7, #12]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
    PE9     ------> TIM1_CH1
    PE10     ------> TIM1_CH2N
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001af6:	f107 0314 	add.w	r3, r7, #20
 8001afa:	4619      	mov	r1, r3
 8001afc:	480d      	ldr	r0, [pc, #52]	@ (8001b34 <HAL_TIM_MspPostInit+0xb0>)
 8001afe:	f003 fb7d 	bl	80051fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b02:	f44f 533c 	mov.w	r3, #12032	@ 0x2f00
 8001b06:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 0314 	add.w	r3, r7, #20
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	@ (8001b38 <HAL_TIM_MspPostInit+0xb4>)
 8001b20:	f003 fb6c 	bl	80051fc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3728      	adds	r7, #40	@ 0x28
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	58024400 	.word	0x58024400
 8001b34:	58020400 	.word	0x58020400
 8001b38:	58021000 	.word	0x58021000

08001b3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b0ba      	sub	sp, #232	@ 0xe8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b44:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
 8001b4c:	605a      	str	r2, [r3, #4]
 8001b4e:	609a      	str	r2, [r3, #8]
 8001b50:	60da      	str	r2, [r3, #12]
 8001b52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b54:	f107 0310 	add.w	r3, r7, #16
 8001b58:	22c0      	movs	r2, #192	@ 0xc0
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f00d f804 	bl	800eb6a <memset>
  if(huart->Instance==USART1)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a42      	ldr	r2, [pc, #264]	@ (8001c70 <HAL_UART_MspInit+0x134>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d17c      	bne.n	8001c66 <HAL_UART_MspInit+0x12a>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b6c:	f04f 0201 	mov.w	r2, #1
 8001b70:	f04f 0300 	mov.w	r3, #0
 8001b74:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b7e:	f107 0310 	add.w	r3, r7, #16
 8001b82:	4618      	mov	r0, r3
 8001b84:	f004 fdb4 	bl	80066f0 <HAL_RCCEx_PeriphCLKConfig>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001b8e:	f7ff ff2d 	bl	80019ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001b94:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b98:	4a36      	ldr	r2, [pc, #216]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ba2:	4b34      	ldr	r3, [pc, #208]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001ba4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb0:	4b30      	ldr	r3, [pc, #192]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001bb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001bb8:	f043 0302 	orr.w	r3, r3, #2
 8001bbc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	@ (8001c74 <HAL_UART_MspInit+0x138>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	60bb      	str	r3, [r7, #8]
 8001bcc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001bce:	23c0      	movs	r3, #192	@ 0xc0
 8001bd0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001be6:	2307      	movs	r3, #7
 8001be8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bec:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4821      	ldr	r0, [pc, #132]	@ (8001c78 <HAL_UART_MspInit+0x13c>)
 8001bf4:	f003 fb02 	bl	80051fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream0;
 8001bf8:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001bfa:	4a21      	ldr	r2, [pc, #132]	@ (8001c80 <HAL_UART_MspInit+0x144>)
 8001bfc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c00:	2229      	movs	r2, #41	@ 0x29
 8001c02:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c04:	4b1d      	ldr	r3, [pc, #116]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c10:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c16:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c18:	4b18      	ldr	r3, [pc, #96]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c2a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c2c:	4b13      	ldr	r3, [pc, #76]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c32:	4b12      	ldr	r3, [pc, #72]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001c38:	4810      	ldr	r0, [pc, #64]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c3a:	f000 fc33 	bl	80024a4 <HAL_DMA_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001c44:	f7ff fed2 	bl	80019ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4a0c      	ldr	r2, [pc, #48]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c4c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_UART_MspInit+0x140>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2105      	movs	r1, #5
 8001c5a:	2025      	movs	r0, #37	@ 0x25
 8001c5c:	f000 fbe6 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c60:	2025      	movs	r0, #37	@ 0x25
 8001c62:	f000 fbfd 	bl	8002460 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001c66:	bf00      	nop
 8001c68:	37e8      	adds	r7, #232	@ 0xe8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40011000 	.word	0x40011000
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020400 	.word	0x58020400
 8001c7c:	24000184 	.word	0x24000184
 8001c80:	40020010 	.word	0x40020010

08001c84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b090      	sub	sp, #64	@ 0x40
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2b0f      	cmp	r3, #15
 8001c90:	d827      	bhi.n	8001ce2 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001c92:	2200      	movs	r2, #0
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	2036      	movs	r0, #54	@ 0x36
 8001c98:	f000 fbc8 	bl	800242c <HAL_NVIC_SetPriority>

     /* Enable the TIM6 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001c9c:	2036      	movs	r0, #54	@ 0x36
 8001c9e:	f000 fbdf 	bl	8002460 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001ca2:	4a29      	ldr	r2, [pc, #164]	@ (8001d48 <HAL_InitTick+0xc4>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ca8:	4b28      	ldr	r3, [pc, #160]	@ (8001d4c <HAL_InitTick+0xc8>)
 8001caa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cae:	4a27      	ldr	r2, [pc, #156]	@ (8001d4c <HAL_InitTick+0xc8>)
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <HAL_InitTick+0xc8>)
 8001cba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cbe:	f003 0310 	and.w	r3, r3, #16
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001cc6:	f107 0210 	add.w	r2, r7, #16
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f004 fccb 	bl	800666c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d106      	bne.n	8001cee <HAL_InitTick+0x6a>
 8001ce0:	e001      	b.n	8001ce6 <HAL_InitTick+0x62>
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e02b      	b.n	8001d3e <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001ce6:	f004 fc95 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8001cea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8001cec:	e004      	b.n	8001cf8 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001cee:	f004 fc91 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001cfa:	4a15      	ldr	r2, [pc, #84]	@ (8001d50 <HAL_InitTick+0xcc>)
 8001cfc:	fba2 2303 	umull	r2, r3, r2, r3
 8001d00:	0c9b      	lsrs	r3, r3, #18
 8001d02:	3b01      	subs	r3, #1
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001d06:	4b13      	ldr	r3, [pc, #76]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d08:	4a13      	ldr	r2, [pc, #76]	@ (8001d58 <HAL_InitTick+0xd4>)
 8001d0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d0e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001d14:	4a0f      	ldr	r2, [pc, #60]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001d26:	480b      	ldr	r0, [pc, #44]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d28:	f006 fb0e 	bl	8008348 <HAL_TIM_Base_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d104      	bne.n	8001d3c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001d32:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <HAL_InitTick+0xd0>)
 8001d34:	f006 fb6a 	bl	800840c <HAL_TIM_Base_Start_IT>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	e000      	b.n	8001d3e <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3740      	adds	r7, #64	@ 0x40
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	24000020 	.word	0x24000020
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	431bde83 	.word	0x431bde83
 8001d54:	24000544 	.word	0x24000544
 8001d58:	40001000 	.word	0x40001000

08001d5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d60:	bf00      	nop
 8001d62:	e7fd      	b.n	8001d60 <NMI_Handler+0x4>

08001d64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d68:	bf00      	nop
 8001d6a:	e7fd      	b.n	8001d68 <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	bf00      	nop
 8001d72:	e7fd      	b.n	8001d70 <MemManage_Handler+0x4>

08001d74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d78:	bf00      	nop
 8001d7a:	e7fd      	b.n	8001d78 <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	bf00      	nop
 8001d82:	e7fd      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d88:	bf00      	nop
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001d98:	4802      	ldr	r0, [pc, #8]	@ (8001da4 <DMA1_Stream0_IRQHandler+0x10>)
 8001d9a:	f001 fead 	bl	8003af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	24000184 	.word	0x24000184

08001da8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001dac:	4802      	ldr	r0, [pc, #8]	@ (8001db8 <TIM1_UP_IRQHandler+0x10>)
 8001dae:	f006 fbfc 	bl	80085aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	240000a4 	.word	0x240000a4

08001dbc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001dc0:	4802      	ldr	r0, [pc, #8]	@ (8001dcc <USART1_IRQHandler+0x10>)
 8001dc2:	f007 fc81 	bl	80096c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001dc6:	bf00      	nop
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	240000f0 	.word	0x240000f0

08001dd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	f000 f9e5 	bl	80021a4 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001de4:	4802      	ldr	r0, [pc, #8]	@ (8001df0 <TIM6_DAC_IRQHandler+0x10>)
 8001de6:	f006 fbe0 	bl	80085aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	24000544 	.word	0x24000544

08001df4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return 1;
 8001df8:	2301      	movs	r3, #1
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_kill>:

int _kill(int pid, int sig)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e0e:	f00c ffe3 	bl	800edd8 <__errno>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2216      	movs	r2, #22
 8001e16:	601a      	str	r2, [r3, #0]
  return -1;
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3708      	adds	r7, #8
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <_exit>:

void _exit (int status)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e30:	6878      	ldr	r0, [r7, #4]
 8001e32:	f7ff ffe7 	bl	8001e04 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e36:	bf00      	nop
 8001e38:	e7fd      	b.n	8001e36 <_exit+0x12>

08001e3a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b086      	sub	sp, #24
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	60f8      	str	r0, [r7, #12]
 8001e42:	60b9      	str	r1, [r7, #8]
 8001e44:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
 8001e4a:	e00a      	b.n	8001e62 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e4c:	f3af 8000 	nop.w
 8001e50:	4601      	mov	r1, r0
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	1c5a      	adds	r2, r3, #1
 8001e56:	60ba      	str	r2, [r7, #8]
 8001e58:	b2ca      	uxtb	r2, r1
 8001e5a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dbf0      	blt.n	8001e4c <_read+0x12>
  }

  return len;
 8001e6a:	687b      	ldr	r3, [r7, #4]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3718      	adds	r7, #24
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	2300      	movs	r3, #0
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e009      	b.n	8001e9a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60ba      	str	r2, [r7, #8]
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	dbf1      	blt.n	8001e86 <_write+0x12>
  }
  return len;
 8001ea2:	687b      	ldr	r3, [r7, #4]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3718      	adds	r7, #24
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <_close>:

int _close(int file)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr

08001ec4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ed4:	605a      	str	r2, [r3, #4]
  return 0;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <_isatty>:

int _isatty(int file)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eec:	2301      	movs	r3, #1
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b085      	sub	sp, #20
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	60f8      	str	r0, [r7, #12]
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f06:	2300      	movs	r3, #0
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f1c:	4a14      	ldr	r2, [pc, #80]	@ (8001f70 <_sbrk+0x5c>)
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <_sbrk+0x60>)
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f28:	4b13      	ldr	r3, [pc, #76]	@ (8001f78 <_sbrk+0x64>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d102      	bne.n	8001f36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f30:	4b11      	ldr	r3, [pc, #68]	@ (8001f78 <_sbrk+0x64>)
 8001f32:	4a12      	ldr	r2, [pc, #72]	@ (8001f7c <_sbrk+0x68>)
 8001f34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f36:	4b10      	ldr	r3, [pc, #64]	@ (8001f78 <_sbrk+0x64>)
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	693a      	ldr	r2, [r7, #16]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d207      	bcs.n	8001f54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f44:	f00c ff48 	bl	800edd8 <__errno>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	220c      	movs	r2, #12
 8001f4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e009      	b.n	8001f68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f54:	4b08      	ldr	r3, [pc, #32]	@ (8001f78 <_sbrk+0x64>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f5a:	4b07      	ldr	r3, [pc, #28]	@ (8001f78 <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	@ (8001f78 <_sbrk+0x64>)
 8001f64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f66:	68fb      	ldr	r3, [r7, #12]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3718      	adds	r7, #24
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	24080000 	.word	0x24080000
 8001f74:	00000400 	.word	0x00000400
 8001f78:	24000590 	.word	0x24000590
 8001f7c:	240050d8 	.word	0x240050d8

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fb8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f84:	f7fe fb7c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f88:	480c      	ldr	r0, [pc, #48]	@ (8001fbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f8a:	490d      	ldr	r1, [pc, #52]	@ (8001fc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f90:	e002      	b.n	8001f98 <LoopCopyDataInit>

08001f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f96:	3304      	adds	r3, #4

08001f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f9c:	d3f9      	bcc.n	8001f92 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fa0:	4c0a      	ldr	r4, [pc, #40]	@ (8001fcc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa4:	e001      	b.n	8001faa <LoopFillZerobss>

08001fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa8:	3204      	adds	r2, #4

08001faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fac:	d3fb      	bcc.n	8001fa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fae:	f00c ff19 	bl	800ede4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7fe fbfb 	bl	80007ac <main>
  bx  lr
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fb8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001fbc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001fc0:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8001fc4:	08010264 	.word	0x08010264
  ldr r2, =_sbss
 8001fc8:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8001fcc:	240050d4 	.word	0x240050d4

08001fd0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC3_IRQHandler>
	...

08001fd4 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	4603      	mov	r3, r0
 8001fdc:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001fe2:	79fb      	ldrb	r3, [r7, #7]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d009      	beq.n	8001ffc <BSP_LED_Init+0x28>
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d006      	beq.n	8001ffc <BSP_LED_Init+0x28>
 8001fee:	79fb      	ldrb	r3, [r7, #7]
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d003      	beq.n	8001ffc <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001ff4:	f06f 0301 	mvn.w	r3, #1
 8001ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ffa:	e055      	b.n	80020a8 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001ffc:	79fb      	ldrb	r3, [r7, #7]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002002:	4b2c      	ldr	r3, [pc, #176]	@ (80020b4 <BSP_LED_Init+0xe0>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002008:	4a2a      	ldr	r2, [pc, #168]	@ (80020b4 <BSP_LED_Init+0xe0>)
 800200a:	f043 0302 	orr.w	r3, r3, #2
 800200e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002012:	4b28      	ldr	r3, [pc, #160]	@ (80020b4 <BSP_LED_Init+0xe0>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	f003 0302 	and.w	r3, r3, #2
 800201c:	617b      	str	r3, [r7, #20]
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	e021      	b.n	8002066 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10f      	bne.n	8002048 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002028:	4b22      	ldr	r3, [pc, #136]	@ (80020b4 <BSP_LED_Init+0xe0>)
 800202a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800202e:	4a21      	ldr	r2, [pc, #132]	@ (80020b4 <BSP_LED_Init+0xe0>)
 8002030:	f043 0310 	orr.w	r3, r3, #16
 8002034:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002038:	4b1e      	ldr	r3, [pc, #120]	@ (80020b4 <BSP_LED_Init+0xe0>)
 800203a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800203e:	f003 0310 	and.w	r3, r3, #16
 8002042:	613b      	str	r3, [r7, #16]
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	e00e      	b.n	8002066 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002048:	4b1a      	ldr	r3, [pc, #104]	@ (80020b4 <BSP_LED_Init+0xe0>)
 800204a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800204e:	4a19      	ldr	r2, [pc, #100]	@ (80020b4 <BSP_LED_Init+0xe0>)
 8002050:	f043 0302 	orr.w	r3, r3, #2
 8002054:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002058:	4b16      	ldr	r3, [pc, #88]	@ (80020b4 <BSP_LED_Init+0xe0>)
 800205a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8002066:	79fb      	ldrb	r3, [r7, #7]
 8002068:	4a13      	ldr	r2, [pc, #76]	@ (80020b8 <BSP_LED_Init+0xe4>)
 800206a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800206e:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002070:	2301      	movs	r3, #1
 8002072:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002078:	2303      	movs	r3, #3
 800207a:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	4a0f      	ldr	r2, [pc, #60]	@ (80020bc <BSP_LED_Init+0xe8>)
 8002080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002084:	f107 0218 	add.w	r2, r7, #24
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f003 f8b6 	bl	80051fc <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002090:	79fb      	ldrb	r3, [r7, #7]
 8002092:	4a0a      	ldr	r2, [pc, #40]	@ (80020bc <BSP_LED_Init+0xe8>)
 8002094:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002098:	79fb      	ldrb	r3, [r7, #7]
 800209a:	4a07      	ldr	r2, [pc, #28]	@ (80020b8 <BSP_LED_Init+0xe4>)
 800209c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	f003 fa5a 	bl	800555c <HAL_GPIO_WritePin>
  }

  return ret;
 80020a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3730      	adds	r7, #48	@ 0x30
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	58024400 	.word	0x58024400
 80020b8:	08010138 	.word	0x08010138
 80020bc:	24000008 	.word	0x24000008

080020c0 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	460a      	mov	r2, r1
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	4613      	mov	r3, r2
 80020ce:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80020d0:	4b2e      	ldr	r3, [pc, #184]	@ (800218c <BSP_PB_Init+0xcc>)
 80020d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020d6:	4a2d      	ldr	r2, [pc, #180]	@ (800218c <BSP_PB_Init+0xcc>)
 80020d8:	f043 0304 	orr.w	r3, r3, #4
 80020dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80020e0:	4b2a      	ldr	r3, [pc, #168]	@ (800218c <BSP_PB_Init+0xcc>)
 80020e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020e6:	f003 0304 	and.w	r3, r3, #4
 80020ea:	60bb      	str	r3, [r7, #8]
 80020ec:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80020ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020f2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80020f4:	2302      	movs	r3, #2
 80020f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80020f8:	2302      	movs	r3, #2
 80020fa:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80020fc:	79bb      	ldrb	r3, [r7, #6]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002102:	2300      	movs	r3, #0
 8002104:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002106:	79fb      	ldrb	r3, [r7, #7]
 8002108:	4a21      	ldr	r2, [pc, #132]	@ (8002190 <BSP_PB_Init+0xd0>)
 800210a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800210e:	f107 020c 	add.w	r2, r7, #12
 8002112:	4611      	mov	r1, r2
 8002114:	4618      	mov	r0, r3
 8002116:	f003 f871 	bl	80051fc <HAL_GPIO_Init>
 800211a:	e031      	b.n	8002180 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800211c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002120:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <BSP_PB_Init+0xd0>)
 8002126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212a:	f107 020c 	add.w	r2, r7, #12
 800212e:	4611      	mov	r1, r2
 8002130:	4618      	mov	r0, r3
 8002132:	f003 f863 	bl	80051fc <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8002136:	79fb      	ldrb	r3, [r7, #7]
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <BSP_PB_Init+0xd4>)
 800213c:	441a      	add	r2, r3
 800213e:	79fb      	ldrb	r3, [r7, #7]
 8002140:	4915      	ldr	r1, [pc, #84]	@ (8002198 <BSP_PB_Init+0xd8>)
 8002142:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8002146:	4619      	mov	r1, r3
 8002148:	4610      	mov	r0, r2
 800214a:	f003 f806 	bl	800515a <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800214e:	79fb      	ldrb	r3, [r7, #7]
 8002150:	00db      	lsls	r3, r3, #3
 8002152:	4a10      	ldr	r2, [pc, #64]	@ (8002194 <BSP_PB_Init+0xd4>)
 8002154:	1898      	adds	r0, r3, r2
 8002156:	79fb      	ldrb	r3, [r7, #7]
 8002158:	4a10      	ldr	r2, [pc, #64]	@ (800219c <BSP_PB_Init+0xdc>)
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	461a      	mov	r2, r3
 8002160:	2100      	movs	r1, #0
 8002162:	f002 ffdb 	bl	800511c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8002166:	2028      	movs	r0, #40	@ 0x28
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	4a0d      	ldr	r2, [pc, #52]	@ (80021a0 <BSP_PB_Init+0xe0>)
 800216c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002170:	2200      	movs	r2, #0
 8002172:	4619      	mov	r1, r3
 8002174:	f000 f95a 	bl	800242c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8002178:	2328      	movs	r3, #40	@ 0x28
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f970 	bl	8002460 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3720      	adds	r7, #32
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	58024400 	.word	0x58024400
 8002190:	24000014 	.word	0x24000014
 8002194:	24000594 	.word	0x24000594
 8002198:	08010140 	.word	0x08010140
 800219c:	24000018 	.word	0x24000018
 80021a0:	2400001c 	.word	0x2400001c

080021a4 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	4603      	mov	r3, r0
 80021ac:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80021ae:	79fb      	ldrb	r3, [r7, #7]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <BSP_PB_IRQHandler+0x20>)
 80021b4:	4413      	add	r3, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f002 ffe4 	bl	8005184 <HAL_EXTI_IRQHandler>
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	24000594 	.word	0x24000594

080021c8 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	4603      	mov	r3, r0
 80021d0:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80021d2:	bf00      	nop
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr

080021de <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7ff fff0 	bl	80021c8 <BSP_PB_Callback>
}
 80021e8:	bf00      	nop
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021f2:	2003      	movs	r0, #3
 80021f4:	f000 f90f 	bl	8002416 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021f8:	f004 f862 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80021fc:	4602      	mov	r2, r0
 80021fe:	4b15      	ldr	r3, [pc, #84]	@ (8002254 <HAL_Init+0x68>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	0a1b      	lsrs	r3, r3, #8
 8002204:	f003 030f 	and.w	r3, r3, #15
 8002208:	4913      	ldr	r1, [pc, #76]	@ (8002258 <HAL_Init+0x6c>)
 800220a:	5ccb      	ldrb	r3, [r1, r3]
 800220c:	f003 031f 	and.w	r3, r3, #31
 8002210:	fa22 f303 	lsr.w	r3, r2, r3
 8002214:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002216:	4b0f      	ldr	r3, [pc, #60]	@ (8002254 <HAL_Init+0x68>)
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	4a0e      	ldr	r2, [pc, #56]	@ (8002258 <HAL_Init+0x6c>)
 8002220:	5cd3      	ldrb	r3, [r2, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	687a      	ldr	r2, [r7, #4]
 8002228:	fa22 f303 	lsr.w	r3, r2, r3
 800222c:	4a0b      	ldr	r2, [pc, #44]	@ (800225c <HAL_Init+0x70>)
 800222e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002230:	4a0b      	ldr	r2, [pc, #44]	@ (8002260 <HAL_Init+0x74>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002236:	200f      	movs	r0, #15
 8002238:	f7ff fd24 	bl	8001c84 <HAL_InitTick>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e002      	b.n	800224c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002246:	f7ff fbd7 	bl	80019f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3708      	adds	r7, #8
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	58024400 	.word	0x58024400
 8002258:	08010088 	.word	0x08010088
 800225c:	24000004 	.word	0x24000004
 8002260:	24000000 	.word	0x24000000

08002264 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002268:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <HAL_IncTick+0x20>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	4b06      	ldr	r3, [pc, #24]	@ (8002288 <HAL_IncTick+0x24>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4413      	add	r3, r2
 8002274:	4a04      	ldr	r2, [pc, #16]	@ (8002288 <HAL_IncTick+0x24>)
 8002276:	6013      	str	r3, [r2, #0]
}
 8002278:	bf00      	nop
 800227a:	46bd      	mov	sp, r7
 800227c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002280:	4770      	bx	lr
 8002282:	bf00      	nop
 8002284:	24000024 	.word	0x24000024
 8002288:	2400059c 	.word	0x2400059c

0800228c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  return uwTick;
 8002290:	4b03      	ldr	r3, [pc, #12]	@ (80022a0 <HAL_GetTick+0x14>)
 8002292:	681b      	ldr	r3, [r3, #0]
}
 8002294:	4618      	mov	r0, r3
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	2400059c 	.word	0x2400059c

080022a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80022a8:	4b03      	ldr	r3, [pc, #12]	@ (80022b8 <HAL_GetREVID+0x14>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	0c1b      	lsrs	r3, r3, #16
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	5c001000 	.word	0x5c001000

080022bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022cc:	4b0b      	ldr	r3, [pc, #44]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022d8:	4013      	ands	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022e0:	68bb      	ldr	r3, [r7, #8]
 80022e2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80022e4:	4b06      	ldr	r3, [pc, #24]	@ (8002300 <__NVIC_SetPriorityGrouping+0x44>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022ea:	4a04      	ldr	r2, [pc, #16]	@ (80022fc <__NVIC_SetPriorityGrouping+0x40>)
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	60d3      	str	r3, [r2, #12]
}
 80022f0:	bf00      	nop
 80022f2:	3714      	adds	r7, #20
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000ed00 	.word	0xe000ed00
 8002300:	05fa0000 	.word	0x05fa0000

08002304 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002304:	b480      	push	{r7}
 8002306:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002308:	4b04      	ldr	r3, [pc, #16]	@ (800231c <__NVIC_GetPriorityGrouping+0x18>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	0a1b      	lsrs	r3, r3, #8
 800230e:	f003 0307 	and.w	r3, r3, #7
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800232a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800232e:	2b00      	cmp	r3, #0
 8002330:	db0b      	blt.n	800234a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	f003 021f 	and.w	r2, r3, #31
 8002338:	4907      	ldr	r1, [pc, #28]	@ (8002358 <__NVIC_EnableIRQ+0x38>)
 800233a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800233e:	095b      	lsrs	r3, r3, #5
 8002340:	2001      	movs	r0, #1
 8002342:	fa00 f202 	lsl.w	r2, r0, r2
 8002346:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
 8002356:	bf00      	nop
 8002358:	e000e100 	.word	0xe000e100

0800235c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	4603      	mov	r3, r0
 8002364:	6039      	str	r1, [r7, #0]
 8002366:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002368:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800236c:	2b00      	cmp	r3, #0
 800236e:	db0a      	blt.n	8002386 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	b2da      	uxtb	r2, r3
 8002374:	490c      	ldr	r1, [pc, #48]	@ (80023a8 <__NVIC_SetPriority+0x4c>)
 8002376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800237a:	0112      	lsls	r2, r2, #4
 800237c:	b2d2      	uxtb	r2, r2
 800237e:	440b      	add	r3, r1
 8002380:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002384:	e00a      	b.n	800239c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	b2da      	uxtb	r2, r3
 800238a:	4908      	ldr	r1, [pc, #32]	@ (80023ac <__NVIC_SetPriority+0x50>)
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	f003 030f 	and.w	r3, r3, #15
 8002392:	3b04      	subs	r3, #4
 8002394:	0112      	lsls	r2, r2, #4
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	440b      	add	r3, r1
 800239a:	761a      	strb	r2, [r3, #24]
}
 800239c:	bf00      	nop
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr
 80023a8:	e000e100 	.word	0xe000e100
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b089      	sub	sp, #36	@ 0x24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f1c3 0307 	rsb	r3, r3, #7
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	bf28      	it	cs
 80023ce:	2304      	movcs	r3, #4
 80023d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3304      	adds	r3, #4
 80023d6:	2b06      	cmp	r3, #6
 80023d8:	d902      	bls.n	80023e0 <NVIC_EncodePriority+0x30>
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	3b03      	subs	r3, #3
 80023de:	e000      	b.n	80023e2 <NVIC_EncodePriority+0x32>
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023e4:	f04f 32ff 	mov.w	r2, #4294967295
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	43da      	mvns	r2, r3
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	401a      	ands	r2, r3
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023f8:	f04f 31ff 	mov.w	r1, #4294967295
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002402:	43d9      	mvns	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002408:	4313      	orrs	r3, r2
         );
}
 800240a:	4618      	mov	r0, r3
 800240c:	3724      	adds	r7, #36	@ 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ff4c 	bl	80022bc <__NVIC_SetPriorityGrouping>
}
 8002424:	bf00      	nop
 8002426:	3708      	adds	r7, #8
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}

0800242c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	60b9      	str	r1, [r7, #8]
 8002436:	607a      	str	r2, [r7, #4]
 8002438:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800243a:	f7ff ff63 	bl	8002304 <__NVIC_GetPriorityGrouping>
 800243e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	68b9      	ldr	r1, [r7, #8]
 8002444:	6978      	ldr	r0, [r7, #20]
 8002446:	f7ff ffb3 	bl	80023b0 <NVIC_EncodePriority>
 800244a:	4602      	mov	r2, r0
 800244c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002450:	4611      	mov	r1, r2
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ff82 	bl	800235c <__NVIC_SetPriority>
}
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	4603      	mov	r3, r0
 8002468:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800246a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff56 	bl	8002320 <__NVIC_EnableIRQ>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8002480:	4b07      	ldr	r3, [pc, #28]	@ (80024a0 <HAL_GetCurrentCPUID+0x24>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	2b07      	cmp	r3, #7
 800248c:	d101      	bne.n	8002492 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800248e:	2303      	movs	r3, #3
 8002490:	e000      	b.n	8002494 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8002492:	2301      	movs	r3, #1
  }
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	e000ed00 	.word	0xe000ed00

080024a4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b086      	sub	sp, #24
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80024ac:	f7ff feee 	bl	800228c <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e316      	b.n	8002aea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a66      	ldr	r2, [pc, #408]	@ (800265c <HAL_DMA_Init+0x1b8>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d04a      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_DMA_Init+0x1bc>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d045      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a63      	ldr	r2, [pc, #396]	@ (8002664 <HAL_DMA_Init+0x1c0>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d040      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a62      	ldr	r2, [pc, #392]	@ (8002668 <HAL_DMA_Init+0x1c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d03b      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a60      	ldr	r2, [pc, #384]	@ (800266c <HAL_DMA_Init+0x1c8>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d036      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <HAL_DMA_Init+0x1cc>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d031      	beq.n	800255c <HAL_DMA_Init+0xb8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002674 <HAL_DMA_Init+0x1d0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d02c      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <HAL_DMA_Init+0x1d4>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d027      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a5a      	ldr	r2, [pc, #360]	@ (800267c <HAL_DMA_Init+0x1d8>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d022      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_DMA_Init+0x1dc>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d01d      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a57      	ldr	r2, [pc, #348]	@ (8002684 <HAL_DMA_Init+0x1e0>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d018      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_DMA_Init+0x1e4>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d013      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a54      	ldr	r2, [pc, #336]	@ (800268c <HAL_DMA_Init+0x1e8>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00e      	beq.n	800255c <HAL_DMA_Init+0xb8>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a53      	ldr	r2, [pc, #332]	@ (8002690 <HAL_DMA_Init+0x1ec>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d009      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a51      	ldr	r2, [pc, #324]	@ (8002694 <HAL_DMA_Init+0x1f0>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d004      	beq.n	800255c <HAL_DMA_Init+0xb8>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a50      	ldr	r2, [pc, #320]	@ (8002698 <HAL_DMA_Init+0x1f4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d101      	bne.n	8002560 <HAL_DMA_Init+0xbc>
 800255c:	2301      	movs	r3, #1
 800255e:	e000      	b.n	8002562 <HAL_DMA_Init+0xbe>
 8002560:	2300      	movs	r3, #0
 8002562:	2b00      	cmp	r3, #0
 8002564:	f000 813b 	beq.w	80027de <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2202      	movs	r2, #2
 800256c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a37      	ldr	r2, [pc, #220]	@ (800265c <HAL_DMA_Init+0x1b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d04a      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a36      	ldr	r2, [pc, #216]	@ (8002660 <HAL_DMA_Init+0x1bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d045      	beq.n	8002618 <HAL_DMA_Init+0x174>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	@ (8002664 <HAL_DMA_Init+0x1c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d040      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a33      	ldr	r2, [pc, #204]	@ (8002668 <HAL_DMA_Init+0x1c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d03b      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a31      	ldr	r2, [pc, #196]	@ (800266c <HAL_DMA_Init+0x1c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d036      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a30      	ldr	r2, [pc, #192]	@ (8002670 <HAL_DMA_Init+0x1cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d031      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2e      	ldr	r2, [pc, #184]	@ (8002674 <HAL_DMA_Init+0x1d0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d02c      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	@ (8002678 <HAL_DMA_Init+0x1d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d027      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	@ (800267c <HAL_DMA_Init+0x1d8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2a      	ldr	r2, [pc, #168]	@ (8002680 <HAL_DMA_Init+0x1dc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d01d      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	@ (8002684 <HAL_DMA_Init+0x1e0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d018      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	@ (8002688 <HAL_DMA_Init+0x1e4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d013      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a25      	ldr	r2, [pc, #148]	@ (800268c <HAL_DMA_Init+0x1e8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d00e      	beq.n	8002618 <HAL_DMA_Init+0x174>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a24      	ldr	r2, [pc, #144]	@ (8002690 <HAL_DMA_Init+0x1ec>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_DMA_Init+0x174>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	@ (8002694 <HAL_DMA_Init+0x1f0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d004      	beq.n	8002618 <HAL_DMA_Init+0x174>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	@ (8002698 <HAL_DMA_Init+0x1f4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d108      	bne.n	800262a <HAL_DMA_Init+0x186>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f022 0201 	bic.w	r2, r2, #1
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e007      	b.n	800263a <HAL_DMA_Init+0x196>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f022 0201 	bic.w	r2, r2, #1
 8002638:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800263a:	e02f      	b.n	800269c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800263c:	f7ff fe26 	bl	800228c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b05      	cmp	r3, #5
 8002648:	d928      	bls.n	800269c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2220      	movs	r2, #32
 800264e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2203      	movs	r2, #3
 8002654:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	e246      	b.n	8002aea <HAL_DMA_Init+0x646>
 800265c:	40020010 	.word	0x40020010
 8002660:	40020028 	.word	0x40020028
 8002664:	40020040 	.word	0x40020040
 8002668:	40020058 	.word	0x40020058
 800266c:	40020070 	.word	0x40020070
 8002670:	40020088 	.word	0x40020088
 8002674:	400200a0 	.word	0x400200a0
 8002678:	400200b8 	.word	0x400200b8
 800267c:	40020410 	.word	0x40020410
 8002680:	40020428 	.word	0x40020428
 8002684:	40020440 	.word	0x40020440
 8002688:	40020458 	.word	0x40020458
 800268c:	40020470 	.word	0x40020470
 8002690:	40020488 	.word	0x40020488
 8002694:	400204a0 	.word	0x400204a0
 8002698:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1c8      	bne.n	800263c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026b2:	697a      	ldr	r2, [r7, #20]
 80026b4:	4b83      	ldr	r3, [pc, #524]	@ (80028c4 <HAL_DMA_Init+0x420>)
 80026b6:	4013      	ands	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80026c2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026ce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	699b      	ldr	r3, [r3, #24]
 80026d4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80026da:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4313      	orrs	r3, r2
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4313      	orrs	r3, r2
 80026fe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002700:	4b71      	ldr	r3, [pc, #452]	@ (80028c8 <HAL_DMA_Init+0x424>)
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4b71      	ldr	r3, [pc, #452]	@ (80028cc <HAL_DMA_Init+0x428>)
 8002706:	4013      	ands	r3, r2
 8002708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800270c:	d328      	bcc.n	8002760 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b28      	cmp	r3, #40	@ 0x28
 8002714:	d903      	bls.n	800271e <HAL_DMA_Init+0x27a>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b2e      	cmp	r3, #46	@ 0x2e
 800271c:	d917      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	2b3e      	cmp	r3, #62	@ 0x3e
 8002724:	d903      	bls.n	800272e <HAL_DMA_Init+0x28a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b42      	cmp	r3, #66	@ 0x42
 800272c:	d90f      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	2b46      	cmp	r3, #70	@ 0x46
 8002734:	d903      	bls.n	800273e <HAL_DMA_Init+0x29a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b48      	cmp	r3, #72	@ 0x48
 800273c:	d907      	bls.n	800274e <HAL_DMA_Init+0x2aa>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b4e      	cmp	r3, #78	@ 0x4e
 8002744:	d905      	bls.n	8002752 <HAL_DMA_Init+0x2ae>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	2b52      	cmp	r3, #82	@ 0x52
 800274c:	d801      	bhi.n	8002752 <HAL_DMA_Init+0x2ae>
 800274e:	2301      	movs	r3, #1
 8002750:	e000      	b.n	8002754 <HAL_DMA_Init+0x2b0>
 8002752:	2300      	movs	r3, #0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d003      	beq.n	8002760 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800275e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	697a      	ldr	r2, [r7, #20]
 8002766:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f023 0307 	bic.w	r3, r3, #7
 8002776:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	4313      	orrs	r3, r2
 8002780:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002786:	2b04      	cmp	r3, #4
 8002788:	d117      	bne.n	80027ba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	697a      	ldr	r2, [r7, #20]
 8002790:	4313      	orrs	r3, r2
 8002792:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d00e      	beq.n	80027ba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f002 fb33 	bl	8004e08 <DMA_CheckFifoParam>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d008      	beq.n	80027ba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2240      	movs	r2, #64	@ 0x40
 80027ac:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e197      	b.n	8002aea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f002 fa6e 	bl	8004ca4 <DMA_CalcBaseAndBitshift>
 80027c8:	4603      	mov	r3, r0
 80027ca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027d0:	f003 031f 	and.w	r3, r3, #31
 80027d4:	223f      	movs	r2, #63	@ 0x3f
 80027d6:	409a      	lsls	r2, r3
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	609a      	str	r2, [r3, #8]
 80027dc:	e0cd      	b.n	800297a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a3b      	ldr	r2, [pc, #236]	@ (80028d0 <HAL_DMA_Init+0x42c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d022      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a39      	ldr	r2, [pc, #228]	@ (80028d4 <HAL_DMA_Init+0x430>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d01d      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <HAL_DMA_Init+0x434>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d018      	beq.n	800282e <HAL_DMA_Init+0x38a>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a36      	ldr	r2, [pc, #216]	@ (80028dc <HAL_DMA_Init+0x438>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d013      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a35      	ldr	r2, [pc, #212]	@ (80028e0 <HAL_DMA_Init+0x43c>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d00e      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a33      	ldr	r2, [pc, #204]	@ (80028e4 <HAL_DMA_Init+0x440>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d009      	beq.n	800282e <HAL_DMA_Init+0x38a>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a32      	ldr	r2, [pc, #200]	@ (80028e8 <HAL_DMA_Init+0x444>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d004      	beq.n	800282e <HAL_DMA_Init+0x38a>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a30      	ldr	r2, [pc, #192]	@ (80028ec <HAL_DMA_Init+0x448>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Init+0x38e>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_DMA_Init+0x390>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8097 	beq.w	8002968 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a24      	ldr	r2, [pc, #144]	@ (80028d0 <HAL_DMA_Init+0x42c>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d021      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a22      	ldr	r2, [pc, #136]	@ (80028d4 <HAL_DMA_Init+0x430>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d01c      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a21      	ldr	r2, [pc, #132]	@ (80028d8 <HAL_DMA_Init+0x434>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d017      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_DMA_Init+0x438>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d012      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_DMA_Init+0x43c>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d00d      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_DMA_Init+0x440>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d008      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_DMA_Init+0x444>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d003      	beq.n	8002888 <HAL_DMA_Init+0x3e4>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_DMA_Init+0x448>)
 8002886:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4b13      	ldr	r3, [pc, #76]	@ (80028f0 <HAL_DMA_Init+0x44c>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b40      	cmp	r3, #64	@ 0x40
 80028ae:	d021      	beq.n	80028f4 <HAL_DMA_Init+0x450>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	2b80      	cmp	r3, #128	@ 0x80
 80028b6:	d102      	bne.n	80028be <HAL_DMA_Init+0x41a>
 80028b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80028bc:	e01b      	b.n	80028f6 <HAL_DMA_Init+0x452>
 80028be:	2300      	movs	r3, #0
 80028c0:	e019      	b.n	80028f6 <HAL_DMA_Init+0x452>
 80028c2:	bf00      	nop
 80028c4:	fe10803f 	.word	0xfe10803f
 80028c8:	5c001000 	.word	0x5c001000
 80028cc:	ffff0000 	.word	0xffff0000
 80028d0:	58025408 	.word	0x58025408
 80028d4:	5802541c 	.word	0x5802541c
 80028d8:	58025430 	.word	0x58025430
 80028dc:	58025444 	.word	0x58025444
 80028e0:	58025458 	.word	0x58025458
 80028e4:	5802546c 	.word	0x5802546c
 80028e8:	58025480 	.word	0x58025480
 80028ec:	58025494 	.word	0x58025494
 80028f0:	fffe000f 	.word	0xfffe000f
 80028f4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80028fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002904:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800290c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002914:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800291c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a1b      	ldr	r3, [r3, #32]
 8002922:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002924:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	697a      	ldr	r2, [r7, #20]
 8002932:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	461a      	mov	r2, r3
 800293a:	4b6e      	ldr	r3, [pc, #440]	@ (8002af4 <HAL_DMA_Init+0x650>)
 800293c:	4413      	add	r3, r2
 800293e:	4a6e      	ldr	r2, [pc, #440]	@ (8002af8 <HAL_DMA_Init+0x654>)
 8002940:	fba2 2303 	umull	r2, r3, r2, r3
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	009a      	lsls	r2, r3, #2
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f002 f9a9 	bl	8004ca4 <DMA_CalcBaseAndBitshift>
 8002952:	4603      	mov	r3, r0
 8002954:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	2201      	movs	r2, #1
 8002960:	409a      	lsls	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	605a      	str	r2, [r3, #4]
 8002966:	e008      	b.n	800297a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2240      	movs	r2, #64	@ 0x40
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2203      	movs	r2, #3
 8002972:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e0b7      	b.n	8002aea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a5f      	ldr	r2, [pc, #380]	@ (8002afc <HAL_DMA_Init+0x658>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d072      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a5d      	ldr	r2, [pc, #372]	@ (8002b00 <HAL_DMA_Init+0x65c>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d06d      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a5c      	ldr	r2, [pc, #368]	@ (8002b04 <HAL_DMA_Init+0x660>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d068      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a5a      	ldr	r2, [pc, #360]	@ (8002b08 <HAL_DMA_Init+0x664>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d063      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a59      	ldr	r2, [pc, #356]	@ (8002b0c <HAL_DMA_Init+0x668>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d05e      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a57      	ldr	r2, [pc, #348]	@ (8002b10 <HAL_DMA_Init+0x66c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d059      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a56      	ldr	r2, [pc, #344]	@ (8002b14 <HAL_DMA_Init+0x670>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d054      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a54      	ldr	r2, [pc, #336]	@ (8002b18 <HAL_DMA_Init+0x674>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d04f      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a53      	ldr	r2, [pc, #332]	@ (8002b1c <HAL_DMA_Init+0x678>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d04a      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a51      	ldr	r2, [pc, #324]	@ (8002b20 <HAL_DMA_Init+0x67c>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d045      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a50      	ldr	r2, [pc, #320]	@ (8002b24 <HAL_DMA_Init+0x680>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d040      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a4e      	ldr	r2, [pc, #312]	@ (8002b28 <HAL_DMA_Init+0x684>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d03b      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a4d      	ldr	r2, [pc, #308]	@ (8002b2c <HAL_DMA_Init+0x688>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d036      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a4b      	ldr	r2, [pc, #300]	@ (8002b30 <HAL_DMA_Init+0x68c>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d031      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_DMA_Init+0x690>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d02c      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a48      	ldr	r2, [pc, #288]	@ (8002b38 <HAL_DMA_Init+0x694>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d027      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a47      	ldr	r2, [pc, #284]	@ (8002b3c <HAL_DMA_Init+0x698>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a45      	ldr	r2, [pc, #276]	@ (8002b40 <HAL_DMA_Init+0x69c>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01d      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a44      	ldr	r2, [pc, #272]	@ (8002b44 <HAL_DMA_Init+0x6a0>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a42      	ldr	r2, [pc, #264]	@ (8002b48 <HAL_DMA_Init+0x6a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d013      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a41      	ldr	r2, [pc, #260]	@ (8002b4c <HAL_DMA_Init+0x6a8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d00e      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a3f      	ldr	r2, [pc, #252]	@ (8002b50 <HAL_DMA_Init+0x6ac>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d009      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a3e      	ldr	r2, [pc, #248]	@ (8002b54 <HAL_DMA_Init+0x6b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d004      	beq.n	8002a6a <HAL_DMA_Init+0x5c6>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_DMA_Init+0x6b4>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_Init+0x5ca>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <HAL_DMA_Init+0x5cc>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d032      	beq.n	8002ada <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f002 fa43 	bl	8004f00 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b80      	cmp	r3, #128	@ 0x80
 8002a80:	d102      	bne.n	8002a88 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2200      	movs	r2, #0
 8002a86:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a9c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_DMA_Init+0x624>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	2b08      	cmp	r3, #8
 8002aac:	d80c      	bhi.n	8002ac8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f002 fac0 	bl	8005034 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ab8:	2200      	movs	r2, #0
 8002aba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	e008      	b.n	8002ada <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002ae8:	2300      	movs	r3, #0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3718      	adds	r7, #24
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
 8002af2:	bf00      	nop
 8002af4:	a7fdabf8 	.word	0xa7fdabf8
 8002af8:	cccccccd 	.word	0xcccccccd
 8002afc:	40020010 	.word	0x40020010
 8002b00:	40020028 	.word	0x40020028
 8002b04:	40020040 	.word	0x40020040
 8002b08:	40020058 	.word	0x40020058
 8002b0c:	40020070 	.word	0x40020070
 8002b10:	40020088 	.word	0x40020088
 8002b14:	400200a0 	.word	0x400200a0
 8002b18:	400200b8 	.word	0x400200b8
 8002b1c:	40020410 	.word	0x40020410
 8002b20:	40020428 	.word	0x40020428
 8002b24:	40020440 	.word	0x40020440
 8002b28:	40020458 	.word	0x40020458
 8002b2c:	40020470 	.word	0x40020470
 8002b30:	40020488 	.word	0x40020488
 8002b34:	400204a0 	.word	0x400204a0
 8002b38:	400204b8 	.word	0x400204b8
 8002b3c:	58025408 	.word	0x58025408
 8002b40:	5802541c 	.word	0x5802541c
 8002b44:	58025430 	.word	0x58025430
 8002b48:	58025444 	.word	0x58025444
 8002b4c:	58025458 	.word	0x58025458
 8002b50:	5802546c 	.word	0x5802546c
 8002b54:	58025480 	.word	0x58025480
 8002b58:	58025494 	.word	0x58025494

08002b5c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
 8002b68:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e226      	b.n	8002fc6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d101      	bne.n	8002b86 <HAL_DMA_Start_IT+0x2a>
 8002b82:	2302      	movs	r3, #2
 8002b84:	e21f      	b.n	8002fc6 <HAL_DMA_Start_IT+0x46a>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	f040 820a 	bne.w	8002fb0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a68      	ldr	r2, [pc, #416]	@ (8002d50 <HAL_DMA_Start_IT+0x1f4>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d04a      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a66      	ldr	r2, [pc, #408]	@ (8002d54 <HAL_DMA_Start_IT+0x1f8>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d045      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a65      	ldr	r2, [pc, #404]	@ (8002d58 <HAL_DMA_Start_IT+0x1fc>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d040      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a63      	ldr	r2, [pc, #396]	@ (8002d5c <HAL_DMA_Start_IT+0x200>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d03b      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a62      	ldr	r2, [pc, #392]	@ (8002d60 <HAL_DMA_Start_IT+0x204>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d036      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a60      	ldr	r2, [pc, #384]	@ (8002d64 <HAL_DMA_Start_IT+0x208>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d031      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a5f      	ldr	r2, [pc, #380]	@ (8002d68 <HAL_DMA_Start_IT+0x20c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d02c      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d6c <HAL_DMA_Start_IT+0x210>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d027      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a5c      	ldr	r2, [pc, #368]	@ (8002d70 <HAL_DMA_Start_IT+0x214>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d022      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a5a      	ldr	r2, [pc, #360]	@ (8002d74 <HAL_DMA_Start_IT+0x218>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01d      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a59      	ldr	r2, [pc, #356]	@ (8002d78 <HAL_DMA_Start_IT+0x21c>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d018      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a57      	ldr	r2, [pc, #348]	@ (8002d7c <HAL_DMA_Start_IT+0x220>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d013      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a56      	ldr	r2, [pc, #344]	@ (8002d80 <HAL_DMA_Start_IT+0x224>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d00e      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a54      	ldr	r2, [pc, #336]	@ (8002d84 <HAL_DMA_Start_IT+0x228>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d009      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a53      	ldr	r2, [pc, #332]	@ (8002d88 <HAL_DMA_Start_IT+0x22c>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d004      	beq.n	8002c4a <HAL_DMA_Start_IT+0xee>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a51      	ldr	r2, [pc, #324]	@ (8002d8c <HAL_DMA_Start_IT+0x230>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d108      	bne.n	8002c5c <HAL_DMA_Start_IT+0x100>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f022 0201 	bic.w	r2, r2, #1
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	e007      	b.n	8002c6c <HAL_DMA_Start_IT+0x110>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0201 	bic.w	r2, r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	68b9      	ldr	r1, [r7, #8]
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	f001 fe6a 	bl	800494c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a34      	ldr	r2, [pc, #208]	@ (8002d50 <HAL_DMA_Start_IT+0x1f4>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d04a      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4a33      	ldr	r2, [pc, #204]	@ (8002d54 <HAL_DMA_Start_IT+0x1f8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d045      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a31      	ldr	r2, [pc, #196]	@ (8002d58 <HAL_DMA_Start_IT+0x1fc>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d040      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a30      	ldr	r2, [pc, #192]	@ (8002d5c <HAL_DMA_Start_IT+0x200>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d03b      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <HAL_DMA_Start_IT+0x204>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d036      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a2d      	ldr	r2, [pc, #180]	@ (8002d64 <HAL_DMA_Start_IT+0x208>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d031      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002d68 <HAL_DMA_Start_IT+0x20c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d02c      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	@ (8002d6c <HAL_DMA_Start_IT+0x210>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d027      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	@ (8002d70 <HAL_DMA_Start_IT+0x214>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d022      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a27      	ldr	r2, [pc, #156]	@ (8002d74 <HAL_DMA_Start_IT+0x218>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d01d      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a25      	ldr	r2, [pc, #148]	@ (8002d78 <HAL_DMA_Start_IT+0x21c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d018      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a24      	ldr	r2, [pc, #144]	@ (8002d7c <HAL_DMA_Start_IT+0x220>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d013      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a22      	ldr	r2, [pc, #136]	@ (8002d80 <HAL_DMA_Start_IT+0x224>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00e      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <HAL_DMA_Start_IT+0x228>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d009      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a1f      	ldr	r2, [pc, #124]	@ (8002d88 <HAL_DMA_Start_IT+0x22c>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d004      	beq.n	8002d18 <HAL_DMA_Start_IT+0x1bc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a1e      	ldr	r2, [pc, #120]	@ (8002d8c <HAL_DMA_Start_IT+0x230>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_DMA_Start_IT+0x1c0>
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e000      	b.n	8002d1e <HAL_DMA_Start_IT+0x1c2>
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d036      	beq.n	8002d90 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f023 021e 	bic.w	r2, r3, #30
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0216 	orr.w	r2, r2, #22
 8002d34:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d03e      	beq.n	8002dbc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f042 0208 	orr.w	r2, r2, #8
 8002d4c:	601a      	str	r2, [r3, #0]
 8002d4e:	e035      	b.n	8002dbc <HAL_DMA_Start_IT+0x260>
 8002d50:	40020010 	.word	0x40020010
 8002d54:	40020028 	.word	0x40020028
 8002d58:	40020040 	.word	0x40020040
 8002d5c:	40020058 	.word	0x40020058
 8002d60:	40020070 	.word	0x40020070
 8002d64:	40020088 	.word	0x40020088
 8002d68:	400200a0 	.word	0x400200a0
 8002d6c:	400200b8 	.word	0x400200b8
 8002d70:	40020410 	.word	0x40020410
 8002d74:	40020428 	.word	0x40020428
 8002d78:	40020440 	.word	0x40020440
 8002d7c:	40020458 	.word	0x40020458
 8002d80:	40020470 	.word	0x40020470
 8002d84:	40020488 	.word	0x40020488
 8002d88:	400204a0 	.word	0x400204a0
 8002d8c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f023 020e 	bic.w	r2, r3, #14
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 020a 	orr.w	r2, r2, #10
 8002da2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d007      	beq.n	8002dbc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0204 	orr.w	r2, r2, #4
 8002dba:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	@ (8002fd0 <HAL_DMA_Start_IT+0x474>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d072      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a82      	ldr	r2, [pc, #520]	@ (8002fd4 <HAL_DMA_Start_IT+0x478>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d06d      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a80      	ldr	r2, [pc, #512]	@ (8002fd8 <HAL_DMA_Start_IT+0x47c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d068      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7f      	ldr	r2, [pc, #508]	@ (8002fdc <HAL_DMA_Start_IT+0x480>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d063      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe0 <HAL_DMA_Start_IT+0x484>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d05e      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe4 <HAL_DMA_Start_IT+0x488>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d059      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe8 <HAL_DMA_Start_IT+0x48c>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d054      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a79      	ldr	r2, [pc, #484]	@ (8002fec <HAL_DMA_Start_IT+0x490>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d04f      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a77      	ldr	r2, [pc, #476]	@ (8002ff0 <HAL_DMA_Start_IT+0x494>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d04a      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a76      	ldr	r2, [pc, #472]	@ (8002ff4 <HAL_DMA_Start_IT+0x498>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d045      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a74      	ldr	r2, [pc, #464]	@ (8002ff8 <HAL_DMA_Start_IT+0x49c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d040      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	@ (8002ffc <HAL_DMA_Start_IT+0x4a0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d03b      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a71      	ldr	r2, [pc, #452]	@ (8003000 <HAL_DMA_Start_IT+0x4a4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d036      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a70      	ldr	r2, [pc, #448]	@ (8003004 <HAL_DMA_Start_IT+0x4a8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d031      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003008 <HAL_DMA_Start_IT+0x4ac>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d02c      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a6d      	ldr	r2, [pc, #436]	@ (800300c <HAL_DMA_Start_IT+0x4b0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d027      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6b      	ldr	r2, [pc, #428]	@ (8003010 <HAL_DMA_Start_IT+0x4b4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d022      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6a      	ldr	r2, [pc, #424]	@ (8003014 <HAL_DMA_Start_IT+0x4b8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d01d      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a68      	ldr	r2, [pc, #416]	@ (8003018 <HAL_DMA_Start_IT+0x4bc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d018      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a67      	ldr	r2, [pc, #412]	@ (800301c <HAL_DMA_Start_IT+0x4c0>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d013      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a65      	ldr	r2, [pc, #404]	@ (8003020 <HAL_DMA_Start_IT+0x4c4>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d00e      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a64      	ldr	r2, [pc, #400]	@ (8003024 <HAL_DMA_Start_IT+0x4c8>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d009      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a62      	ldr	r2, [pc, #392]	@ (8003028 <HAL_DMA_Start_IT+0x4cc>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d004      	beq.n	8002eac <HAL_DMA_Start_IT+0x350>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a61      	ldr	r2, [pc, #388]	@ (800302c <HAL_DMA_Start_IT+0x4d0>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_DMA_Start_IT+0x354>
 8002eac:	2301      	movs	r3, #1
 8002eae:	e000      	b.n	8002eb2 <HAL_DMA_Start_IT+0x356>
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d01a      	beq.n	8002eec <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d007      	beq.n	8002ed4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ece:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ed2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ee6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eea:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a37      	ldr	r2, [pc, #220]	@ (8002fd0 <HAL_DMA_Start_IT+0x474>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d04a      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a36      	ldr	r2, [pc, #216]	@ (8002fd4 <HAL_DMA_Start_IT+0x478>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d045      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a34      	ldr	r2, [pc, #208]	@ (8002fd8 <HAL_DMA_Start_IT+0x47c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d040      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a33      	ldr	r2, [pc, #204]	@ (8002fdc <HAL_DMA_Start_IT+0x480>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d03b      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a31      	ldr	r2, [pc, #196]	@ (8002fe0 <HAL_DMA_Start_IT+0x484>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d036      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a30      	ldr	r2, [pc, #192]	@ (8002fe4 <HAL_DMA_Start_IT+0x488>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a2e      	ldr	r2, [pc, #184]	@ (8002fe8 <HAL_DMA_Start_IT+0x48c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d02c      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a2d      	ldr	r2, [pc, #180]	@ (8002fec <HAL_DMA_Start_IT+0x490>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d027      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff0 <HAL_DMA_Start_IT+0x494>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d022      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff4 <HAL_DMA_Start_IT+0x498>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d01d      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a28      	ldr	r2, [pc, #160]	@ (8002ff8 <HAL_DMA_Start_IT+0x49c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d018      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a27      	ldr	r2, [pc, #156]	@ (8002ffc <HAL_DMA_Start_IT+0x4a0>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a25      	ldr	r2, [pc, #148]	@ (8003000 <HAL_DMA_Start_IT+0x4a4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00e      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <HAL_DMA_Start_IT+0x4a8>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d009      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a22      	ldr	r2, [pc, #136]	@ (8003008 <HAL_DMA_Start_IT+0x4ac>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <HAL_DMA_Start_IT+0x430>
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a21      	ldr	r2, [pc, #132]	@ (800300c <HAL_DMA_Start_IT+0x4b0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d108      	bne.n	8002f9e <HAL_DMA_Start_IT+0x442>
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	e012      	b.n	8002fc4 <HAL_DMA_Start_IT+0x468>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e009      	b.n	8002fc4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002fb6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3718      	adds	r7, #24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40020010 	.word	0x40020010
 8002fd4:	40020028 	.word	0x40020028
 8002fd8:	40020040 	.word	0x40020040
 8002fdc:	40020058 	.word	0x40020058
 8002fe0:	40020070 	.word	0x40020070
 8002fe4:	40020088 	.word	0x40020088
 8002fe8:	400200a0 	.word	0x400200a0
 8002fec:	400200b8 	.word	0x400200b8
 8002ff0:	40020410 	.word	0x40020410
 8002ff4:	40020428 	.word	0x40020428
 8002ff8:	40020440 	.word	0x40020440
 8002ffc:	40020458 	.word	0x40020458
 8003000:	40020470 	.word	0x40020470
 8003004:	40020488 	.word	0x40020488
 8003008:	400204a0 	.word	0x400204a0
 800300c:	400204b8 	.word	0x400204b8
 8003010:	58025408 	.word	0x58025408
 8003014:	5802541c 	.word	0x5802541c
 8003018:	58025430 	.word	0x58025430
 800301c:	58025444 	.word	0x58025444
 8003020:	58025458 	.word	0x58025458
 8003024:	5802546c 	.word	0x5802546c
 8003028:	58025480 	.word	0x58025480
 800302c:	58025494 	.word	0x58025494

08003030 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003038:	f7ff f928 	bl	800228c <HAL_GetTick>
 800303c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d101      	bne.n	8003048 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e2dc      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d008      	beq.n	8003066 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e2cd      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a76      	ldr	r2, [pc, #472]	@ (8003244 <HAL_DMA_Abort+0x214>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d04a      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a74      	ldr	r2, [pc, #464]	@ (8003248 <HAL_DMA_Abort+0x218>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d045      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a73      	ldr	r2, [pc, #460]	@ (800324c <HAL_DMA_Abort+0x21c>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d040      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a71      	ldr	r2, [pc, #452]	@ (8003250 <HAL_DMA_Abort+0x220>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d03b      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a70      	ldr	r2, [pc, #448]	@ (8003254 <HAL_DMA_Abort+0x224>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d036      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a6e      	ldr	r2, [pc, #440]	@ (8003258 <HAL_DMA_Abort+0x228>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d031      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a6d      	ldr	r2, [pc, #436]	@ (800325c <HAL_DMA_Abort+0x22c>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d02c      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003260 <HAL_DMA_Abort+0x230>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d027      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6a      	ldr	r2, [pc, #424]	@ (8003264 <HAL_DMA_Abort+0x234>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d022      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a68      	ldr	r2, [pc, #416]	@ (8003268 <HAL_DMA_Abort+0x238>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d01d      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a67      	ldr	r2, [pc, #412]	@ (800326c <HAL_DMA_Abort+0x23c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d018      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a65      	ldr	r2, [pc, #404]	@ (8003270 <HAL_DMA_Abort+0x240>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d013      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a64      	ldr	r2, [pc, #400]	@ (8003274 <HAL_DMA_Abort+0x244>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d00e      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a62      	ldr	r2, [pc, #392]	@ (8003278 <HAL_DMA_Abort+0x248>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d009      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a61      	ldr	r2, [pc, #388]	@ (800327c <HAL_DMA_Abort+0x24c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d004      	beq.n	8003106 <HAL_DMA_Abort+0xd6>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a5f      	ldr	r2, [pc, #380]	@ (8003280 <HAL_DMA_Abort+0x250>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d101      	bne.n	800310a <HAL_DMA_Abort+0xda>
 8003106:	2301      	movs	r3, #1
 8003108:	e000      	b.n	800310c <HAL_DMA_Abort+0xdc>
 800310a:	2300      	movs	r3, #0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f022 021e 	bic.w	r2, r2, #30
 800311e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800312e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e00a      	b.n	800314e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 020e 	bic.w	r2, r2, #14
 8003146:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a3c      	ldr	r2, [pc, #240]	@ (8003244 <HAL_DMA_Abort+0x214>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d072      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a3a      	ldr	r2, [pc, #232]	@ (8003248 <HAL_DMA_Abort+0x218>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d06d      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a39      	ldr	r2, [pc, #228]	@ (800324c <HAL_DMA_Abort+0x21c>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d068      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a37      	ldr	r2, [pc, #220]	@ (8003250 <HAL_DMA_Abort+0x220>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d063      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a36      	ldr	r2, [pc, #216]	@ (8003254 <HAL_DMA_Abort+0x224>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d05e      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a34      	ldr	r2, [pc, #208]	@ (8003258 <HAL_DMA_Abort+0x228>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d059      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a33      	ldr	r2, [pc, #204]	@ (800325c <HAL_DMA_Abort+0x22c>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d054      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a31      	ldr	r2, [pc, #196]	@ (8003260 <HAL_DMA_Abort+0x230>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d04f      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a30      	ldr	r2, [pc, #192]	@ (8003264 <HAL_DMA_Abort+0x234>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04a      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003268 <HAL_DMA_Abort+0x238>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d045      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a2d      	ldr	r2, [pc, #180]	@ (800326c <HAL_DMA_Abort+0x23c>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d040      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a2b      	ldr	r2, [pc, #172]	@ (8003270 <HAL_DMA_Abort+0x240>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d03b      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a2a      	ldr	r2, [pc, #168]	@ (8003274 <HAL_DMA_Abort+0x244>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d036      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a28      	ldr	r2, [pc, #160]	@ (8003278 <HAL_DMA_Abort+0x248>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d031      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a27      	ldr	r2, [pc, #156]	@ (800327c <HAL_DMA_Abort+0x24c>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d02c      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a25      	ldr	r2, [pc, #148]	@ (8003280 <HAL_DMA_Abort+0x250>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d027      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a24      	ldr	r2, [pc, #144]	@ (8003284 <HAL_DMA_Abort+0x254>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d022      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a22      	ldr	r2, [pc, #136]	@ (8003288 <HAL_DMA_Abort+0x258>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d01d      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a21      	ldr	r2, [pc, #132]	@ (800328c <HAL_DMA_Abort+0x25c>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d018      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a1f      	ldr	r2, [pc, #124]	@ (8003290 <HAL_DMA_Abort+0x260>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d013      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a1e      	ldr	r2, [pc, #120]	@ (8003294 <HAL_DMA_Abort+0x264>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00e      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1c      	ldr	r2, [pc, #112]	@ (8003298 <HAL_DMA_Abort+0x268>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d009      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a1b      	ldr	r2, [pc, #108]	@ (800329c <HAL_DMA_Abort+0x26c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d004      	beq.n	800323e <HAL_DMA_Abort+0x20e>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a19      	ldr	r2, [pc, #100]	@ (80032a0 <HAL_DMA_Abort+0x270>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d132      	bne.n	80032a4 <HAL_DMA_Abort+0x274>
 800323e:	2301      	movs	r3, #1
 8003240:	e031      	b.n	80032a6 <HAL_DMA_Abort+0x276>
 8003242:	bf00      	nop
 8003244:	40020010 	.word	0x40020010
 8003248:	40020028 	.word	0x40020028
 800324c:	40020040 	.word	0x40020040
 8003250:	40020058 	.word	0x40020058
 8003254:	40020070 	.word	0x40020070
 8003258:	40020088 	.word	0x40020088
 800325c:	400200a0 	.word	0x400200a0
 8003260:	400200b8 	.word	0x400200b8
 8003264:	40020410 	.word	0x40020410
 8003268:	40020428 	.word	0x40020428
 800326c:	40020440 	.word	0x40020440
 8003270:	40020458 	.word	0x40020458
 8003274:	40020470 	.word	0x40020470
 8003278:	40020488 	.word	0x40020488
 800327c:	400204a0 	.word	0x400204a0
 8003280:	400204b8 	.word	0x400204b8
 8003284:	58025408 	.word	0x58025408
 8003288:	5802541c 	.word	0x5802541c
 800328c:	58025430 	.word	0x58025430
 8003290:	58025444 	.word	0x58025444
 8003294:	58025458 	.word	0x58025458
 8003298:	5802546c 	.word	0x5802546c
 800329c:	58025480 	.word	0x58025480
 80032a0:	58025494 	.word	0x58025494
 80032a4:	2300      	movs	r3, #0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d007      	beq.n	80032ba <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80032b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a6d      	ldr	r2, [pc, #436]	@ (8003474 <HAL_DMA_Abort+0x444>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d04a      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003478 <HAL_DMA_Abort+0x448>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d045      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a6a      	ldr	r2, [pc, #424]	@ (800347c <HAL_DMA_Abort+0x44c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d040      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a68      	ldr	r2, [pc, #416]	@ (8003480 <HAL_DMA_Abort+0x450>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d03b      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a67      	ldr	r2, [pc, #412]	@ (8003484 <HAL_DMA_Abort+0x454>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d036      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a65      	ldr	r2, [pc, #404]	@ (8003488 <HAL_DMA_Abort+0x458>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d031      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a64      	ldr	r2, [pc, #400]	@ (800348c <HAL_DMA_Abort+0x45c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d02c      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a62      	ldr	r2, [pc, #392]	@ (8003490 <HAL_DMA_Abort+0x460>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d027      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a61      	ldr	r2, [pc, #388]	@ (8003494 <HAL_DMA_Abort+0x464>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a5f      	ldr	r2, [pc, #380]	@ (8003498 <HAL_DMA_Abort+0x468>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01d      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5e      	ldr	r2, [pc, #376]	@ (800349c <HAL_DMA_Abort+0x46c>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d018      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5c      	ldr	r2, [pc, #368]	@ (80034a0 <HAL_DMA_Abort+0x470>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d013      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5b      	ldr	r2, [pc, #364]	@ (80034a4 <HAL_DMA_Abort+0x474>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00e      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a59      	ldr	r2, [pc, #356]	@ (80034a8 <HAL_DMA_Abort+0x478>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d009      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a58      	ldr	r2, [pc, #352]	@ (80034ac <HAL_DMA_Abort+0x47c>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d004      	beq.n	800335a <HAL_DMA_Abort+0x32a>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a56      	ldr	r2, [pc, #344]	@ (80034b0 <HAL_DMA_Abort+0x480>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d108      	bne.n	800336c <HAL_DMA_Abort+0x33c>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 0201 	bic.w	r2, r2, #1
 8003368:	601a      	str	r2, [r3, #0]
 800336a:	e007      	b.n	800337c <HAL_DMA_Abort+0x34c>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0201 	bic.w	r2, r2, #1
 800337a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800337c:	e013      	b.n	80033a6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800337e:	f7fe ff85 	bl	800228c <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b05      	cmp	r3, #5
 800338a:	d90c      	bls.n	80033a6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2220      	movs	r2, #32
 8003390:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2203      	movs	r2, #3
 8003396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e12d      	b.n	8003602 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1e5      	bne.n	800337e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a2f      	ldr	r2, [pc, #188]	@ (8003474 <HAL_DMA_Abort+0x444>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d04a      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a2d      	ldr	r2, [pc, #180]	@ (8003478 <HAL_DMA_Abort+0x448>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d045      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a2c      	ldr	r2, [pc, #176]	@ (800347c <HAL_DMA_Abort+0x44c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d040      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a2a      	ldr	r2, [pc, #168]	@ (8003480 <HAL_DMA_Abort+0x450>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d03b      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a29      	ldr	r2, [pc, #164]	@ (8003484 <HAL_DMA_Abort+0x454>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d036      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <HAL_DMA_Abort+0x458>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d031      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a26      	ldr	r2, [pc, #152]	@ (800348c <HAL_DMA_Abort+0x45c>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d02c      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a24      	ldr	r2, [pc, #144]	@ (8003490 <HAL_DMA_Abort+0x460>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d027      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a23      	ldr	r2, [pc, #140]	@ (8003494 <HAL_DMA_Abort+0x464>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d022      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a21      	ldr	r2, [pc, #132]	@ (8003498 <HAL_DMA_Abort+0x468>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01d      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a20      	ldr	r2, [pc, #128]	@ (800349c <HAL_DMA_Abort+0x46c>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d018      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a1e      	ldr	r2, [pc, #120]	@ (80034a0 <HAL_DMA_Abort+0x470>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d013      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a1d      	ldr	r2, [pc, #116]	@ (80034a4 <HAL_DMA_Abort+0x474>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d00e      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1b      	ldr	r2, [pc, #108]	@ (80034a8 <HAL_DMA_Abort+0x478>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d009      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a1a      	ldr	r2, [pc, #104]	@ (80034ac <HAL_DMA_Abort+0x47c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d004      	beq.n	8003452 <HAL_DMA_Abort+0x422>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	@ (80034b0 <HAL_DMA_Abort+0x480>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d101      	bne.n	8003456 <HAL_DMA_Abort+0x426>
 8003452:	2301      	movs	r3, #1
 8003454:	e000      	b.n	8003458 <HAL_DMA_Abort+0x428>
 8003456:	2300      	movs	r3, #0
 8003458:	2b00      	cmp	r3, #0
 800345a:	d02b      	beq.n	80034b4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003460:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	223f      	movs	r2, #63	@ 0x3f
 800346c:	409a      	lsls	r2, r3
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	609a      	str	r2, [r3, #8]
 8003472:	e02a      	b.n	80034ca <HAL_DMA_Abort+0x49a>
 8003474:	40020010 	.word	0x40020010
 8003478:	40020028 	.word	0x40020028
 800347c:	40020040 	.word	0x40020040
 8003480:	40020058 	.word	0x40020058
 8003484:	40020070 	.word	0x40020070
 8003488:	40020088 	.word	0x40020088
 800348c:	400200a0 	.word	0x400200a0
 8003490:	400200b8 	.word	0x400200b8
 8003494:	40020410 	.word	0x40020410
 8003498:	40020428 	.word	0x40020428
 800349c:	40020440 	.word	0x40020440
 80034a0:	40020458 	.word	0x40020458
 80034a4:	40020470 	.word	0x40020470
 80034a8:	40020488 	.word	0x40020488
 80034ac:	400204a0 	.word	0x400204a0
 80034b0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034be:	f003 031f 	and.w	r3, r3, #31
 80034c2:	2201      	movs	r2, #1
 80034c4:	409a      	lsls	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4f      	ldr	r2, [pc, #316]	@ (800360c <HAL_DMA_Abort+0x5dc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d072      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003610 <HAL_DMA_Abort+0x5e0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d06d      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a4c      	ldr	r2, [pc, #304]	@ (8003614 <HAL_DMA_Abort+0x5e4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d068      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a4a      	ldr	r2, [pc, #296]	@ (8003618 <HAL_DMA_Abort+0x5e8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d063      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a49      	ldr	r2, [pc, #292]	@ (800361c <HAL_DMA_Abort+0x5ec>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d05e      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a47      	ldr	r2, [pc, #284]	@ (8003620 <HAL_DMA_Abort+0x5f0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d059      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a46      	ldr	r2, [pc, #280]	@ (8003624 <HAL_DMA_Abort+0x5f4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d054      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a44      	ldr	r2, [pc, #272]	@ (8003628 <HAL_DMA_Abort+0x5f8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d04f      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a43      	ldr	r2, [pc, #268]	@ (800362c <HAL_DMA_Abort+0x5fc>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d04a      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a41      	ldr	r2, [pc, #260]	@ (8003630 <HAL_DMA_Abort+0x600>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d045      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a40      	ldr	r2, [pc, #256]	@ (8003634 <HAL_DMA_Abort+0x604>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d040      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a3e      	ldr	r2, [pc, #248]	@ (8003638 <HAL_DMA_Abort+0x608>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d03b      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a3d      	ldr	r2, [pc, #244]	@ (800363c <HAL_DMA_Abort+0x60c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d036      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3b      	ldr	r2, [pc, #236]	@ (8003640 <HAL_DMA_Abort+0x610>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a3a      	ldr	r2, [pc, #232]	@ (8003644 <HAL_DMA_Abort+0x614>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d02c      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a38      	ldr	r2, [pc, #224]	@ (8003648 <HAL_DMA_Abort+0x618>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d027      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a37      	ldr	r2, [pc, #220]	@ (800364c <HAL_DMA_Abort+0x61c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d022      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a35      	ldr	r2, [pc, #212]	@ (8003650 <HAL_DMA_Abort+0x620>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a34      	ldr	r2, [pc, #208]	@ (8003654 <HAL_DMA_Abort+0x624>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d018      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a32      	ldr	r2, [pc, #200]	@ (8003658 <HAL_DMA_Abort+0x628>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d013      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a31      	ldr	r2, [pc, #196]	@ (800365c <HAL_DMA_Abort+0x62c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a2f      	ldr	r2, [pc, #188]	@ (8003660 <HAL_DMA_Abort+0x630>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d009      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a2e      	ldr	r2, [pc, #184]	@ (8003664 <HAL_DMA_Abort+0x634>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d004      	beq.n	80035ba <HAL_DMA_Abort+0x58a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a2c      	ldr	r2, [pc, #176]	@ (8003668 <HAL_DMA_Abort+0x638>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d101      	bne.n	80035be <HAL_DMA_Abort+0x58e>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_DMA_Abort+0x590>
 80035be:	2300      	movs	r3, #0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d015      	beq.n	80035f0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035c8:	687a      	ldr	r2, [r7, #4]
 80035ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80035cc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00c      	beq.n	80035f0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80035e4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80035ee:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	40020010 	.word	0x40020010
 8003610:	40020028 	.word	0x40020028
 8003614:	40020040 	.word	0x40020040
 8003618:	40020058 	.word	0x40020058
 800361c:	40020070 	.word	0x40020070
 8003620:	40020088 	.word	0x40020088
 8003624:	400200a0 	.word	0x400200a0
 8003628:	400200b8 	.word	0x400200b8
 800362c:	40020410 	.word	0x40020410
 8003630:	40020428 	.word	0x40020428
 8003634:	40020440 	.word	0x40020440
 8003638:	40020458 	.word	0x40020458
 800363c:	40020470 	.word	0x40020470
 8003640:	40020488 	.word	0x40020488
 8003644:	400204a0 	.word	0x400204a0
 8003648:	400204b8 	.word	0x400204b8
 800364c:	58025408 	.word	0x58025408
 8003650:	5802541c 	.word	0x5802541c
 8003654:	58025430 	.word	0x58025430
 8003658:	58025444 	.word	0x58025444
 800365c:	58025458 	.word	0x58025458
 8003660:	5802546c 	.word	0x5802546c
 8003664:	58025480 	.word	0x58025480
 8003668:	58025494 	.word	0x58025494

0800366c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e237      	b.n	8003aee <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b02      	cmp	r3, #2
 8003688:	d004      	beq.n	8003694 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2280      	movs	r2, #128	@ 0x80
 800368e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e22c      	b.n	8003aee <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a5c      	ldr	r2, [pc, #368]	@ (800380c <HAL_DMA_Abort_IT+0x1a0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d04a      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003810 <HAL_DMA_Abort_IT+0x1a4>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d045      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a59      	ldr	r2, [pc, #356]	@ (8003814 <HAL_DMA_Abort_IT+0x1a8>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d040      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a58      	ldr	r2, [pc, #352]	@ (8003818 <HAL_DMA_Abort_IT+0x1ac>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d03b      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a56      	ldr	r2, [pc, #344]	@ (800381c <HAL_DMA_Abort_IT+0x1b0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d036      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a55      	ldr	r2, [pc, #340]	@ (8003820 <HAL_DMA_Abort_IT+0x1b4>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d031      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a53      	ldr	r2, [pc, #332]	@ (8003824 <HAL_DMA_Abort_IT+0x1b8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d02c      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a52      	ldr	r2, [pc, #328]	@ (8003828 <HAL_DMA_Abort_IT+0x1bc>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d027      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a50      	ldr	r2, [pc, #320]	@ (800382c <HAL_DMA_Abort_IT+0x1c0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d022      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a4f      	ldr	r2, [pc, #316]	@ (8003830 <HAL_DMA_Abort_IT+0x1c4>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d01d      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4d      	ldr	r2, [pc, #308]	@ (8003834 <HAL_DMA_Abort_IT+0x1c8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4c      	ldr	r2, [pc, #304]	@ (8003838 <HAL_DMA_Abort_IT+0x1cc>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d013      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4a      	ldr	r2, [pc, #296]	@ (800383c <HAL_DMA_Abort_IT+0x1d0>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a49      	ldr	r2, [pc, #292]	@ (8003840 <HAL_DMA_Abort_IT+0x1d4>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a47      	ldr	r2, [pc, #284]	@ (8003844 <HAL_DMA_Abort_IT+0x1d8>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_DMA_Abort_IT+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a46      	ldr	r2, [pc, #280]	@ (8003848 <HAL_DMA_Abort_IT+0x1dc>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d101      	bne.n	8003738 <HAL_DMA_Abort_IT+0xcc>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_DMA_Abort_IT+0xce>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	f000 8086 	beq.w	800384c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2204      	movs	r2, #4
 8003744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a2f      	ldr	r2, [pc, #188]	@ (800380c <HAL_DMA_Abort_IT+0x1a0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a2e      	ldr	r2, [pc, #184]	@ (8003810 <HAL_DMA_Abort_IT+0x1a4>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a2c      	ldr	r2, [pc, #176]	@ (8003814 <HAL_DMA_Abort_IT+0x1a8>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a2b      	ldr	r2, [pc, #172]	@ (8003818 <HAL_DMA_Abort_IT+0x1ac>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a29      	ldr	r2, [pc, #164]	@ (800381c <HAL_DMA_Abort_IT+0x1b0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a28      	ldr	r2, [pc, #160]	@ (8003820 <HAL_DMA_Abort_IT+0x1b4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a26      	ldr	r2, [pc, #152]	@ (8003824 <HAL_DMA_Abort_IT+0x1b8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a25      	ldr	r2, [pc, #148]	@ (8003828 <HAL_DMA_Abort_IT+0x1bc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a23      	ldr	r2, [pc, #140]	@ (800382c <HAL_DMA_Abort_IT+0x1c0>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a22      	ldr	r2, [pc, #136]	@ (8003830 <HAL_DMA_Abort_IT+0x1c4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <HAL_DMA_Abort_IT+0x1c8>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a1f      	ldr	r2, [pc, #124]	@ (8003838 <HAL_DMA_Abort_IT+0x1cc>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a1d      	ldr	r2, [pc, #116]	@ (800383c <HAL_DMA_Abort_IT+0x1d0>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a1c      	ldr	r2, [pc, #112]	@ (8003840 <HAL_DMA_Abort_IT+0x1d4>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a1a      	ldr	r2, [pc, #104]	@ (8003844 <HAL_DMA_Abort_IT+0x1d8>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_DMA_Abort_IT+0x17c>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a19      	ldr	r2, [pc, #100]	@ (8003848 <HAL_DMA_Abort_IT+0x1dc>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d108      	bne.n	80037fa <HAL_DMA_Abort_IT+0x18e>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
 80037f8:	e178      	b.n	8003aec <HAL_DMA_Abort_IT+0x480>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 0201 	bic.w	r2, r2, #1
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e16f      	b.n	8003aec <HAL_DMA_Abort_IT+0x480>
 800380c:	40020010 	.word	0x40020010
 8003810:	40020028 	.word	0x40020028
 8003814:	40020040 	.word	0x40020040
 8003818:	40020058 	.word	0x40020058
 800381c:	40020070 	.word	0x40020070
 8003820:	40020088 	.word	0x40020088
 8003824:	400200a0 	.word	0x400200a0
 8003828:	400200b8 	.word	0x400200b8
 800382c:	40020410 	.word	0x40020410
 8003830:	40020428 	.word	0x40020428
 8003834:	40020440 	.word	0x40020440
 8003838:	40020458 	.word	0x40020458
 800383c:	40020470 	.word	0x40020470
 8003840:	40020488 	.word	0x40020488
 8003844:	400204a0 	.word	0x400204a0
 8003848:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 020e 	bic.w	r2, r2, #14
 800385a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a6c      	ldr	r2, [pc, #432]	@ (8003a14 <HAL_DMA_Abort_IT+0x3a8>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d04a      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6b      	ldr	r2, [pc, #428]	@ (8003a18 <HAL_DMA_Abort_IT+0x3ac>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d045      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a69      	ldr	r2, [pc, #420]	@ (8003a1c <HAL_DMA_Abort_IT+0x3b0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d040      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a68      	ldr	r2, [pc, #416]	@ (8003a20 <HAL_DMA_Abort_IT+0x3b4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d03b      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a66      	ldr	r2, [pc, #408]	@ (8003a24 <HAL_DMA_Abort_IT+0x3b8>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d036      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a65      	ldr	r2, [pc, #404]	@ (8003a28 <HAL_DMA_Abort_IT+0x3bc>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d031      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a63      	ldr	r2, [pc, #396]	@ (8003a2c <HAL_DMA_Abort_IT+0x3c0>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d02c      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a62      	ldr	r2, [pc, #392]	@ (8003a30 <HAL_DMA_Abort_IT+0x3c4>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d027      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a60      	ldr	r2, [pc, #384]	@ (8003a34 <HAL_DMA_Abort_IT+0x3c8>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d022      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a5f      	ldr	r2, [pc, #380]	@ (8003a38 <HAL_DMA_Abort_IT+0x3cc>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d01d      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a5d      	ldr	r2, [pc, #372]	@ (8003a3c <HAL_DMA_Abort_IT+0x3d0>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d018      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a5c      	ldr	r2, [pc, #368]	@ (8003a40 <HAL_DMA_Abort_IT+0x3d4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d013      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a5a      	ldr	r2, [pc, #360]	@ (8003a44 <HAL_DMA_Abort_IT+0x3d8>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d00e      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a59      	ldr	r2, [pc, #356]	@ (8003a48 <HAL_DMA_Abort_IT+0x3dc>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d009      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a57      	ldr	r2, [pc, #348]	@ (8003a4c <HAL_DMA_Abort_IT+0x3e0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d004      	beq.n	80038fc <HAL_DMA_Abort_IT+0x290>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a56      	ldr	r2, [pc, #344]	@ (8003a50 <HAL_DMA_Abort_IT+0x3e4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d108      	bne.n	800390e <HAL_DMA_Abort_IT+0x2a2>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0201 	bic.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]
 800390c:	e007      	b.n	800391e <HAL_DMA_Abort_IT+0x2b2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0201 	bic.w	r2, r2, #1
 800391c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a3c      	ldr	r2, [pc, #240]	@ (8003a14 <HAL_DMA_Abort_IT+0x3a8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d072      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a3a      	ldr	r2, [pc, #232]	@ (8003a18 <HAL_DMA_Abort_IT+0x3ac>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d06d      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a39      	ldr	r2, [pc, #228]	@ (8003a1c <HAL_DMA_Abort_IT+0x3b0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d068      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a37      	ldr	r2, [pc, #220]	@ (8003a20 <HAL_DMA_Abort_IT+0x3b4>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d063      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a36      	ldr	r2, [pc, #216]	@ (8003a24 <HAL_DMA_Abort_IT+0x3b8>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d05e      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a34      	ldr	r2, [pc, #208]	@ (8003a28 <HAL_DMA_Abort_IT+0x3bc>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d059      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a33      	ldr	r2, [pc, #204]	@ (8003a2c <HAL_DMA_Abort_IT+0x3c0>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d054      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a31      	ldr	r2, [pc, #196]	@ (8003a30 <HAL_DMA_Abort_IT+0x3c4>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d04f      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a30      	ldr	r2, [pc, #192]	@ (8003a34 <HAL_DMA_Abort_IT+0x3c8>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d04a      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2e      	ldr	r2, [pc, #184]	@ (8003a38 <HAL_DMA_Abort_IT+0x3cc>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d045      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a2d      	ldr	r2, [pc, #180]	@ (8003a3c <HAL_DMA_Abort_IT+0x3d0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d040      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a2b      	ldr	r2, [pc, #172]	@ (8003a40 <HAL_DMA_Abort_IT+0x3d4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d03b      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a44 <HAL_DMA_Abort_IT+0x3d8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d036      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a28      	ldr	r2, [pc, #160]	@ (8003a48 <HAL_DMA_Abort_IT+0x3dc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d031      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a27      	ldr	r2, [pc, #156]	@ (8003a4c <HAL_DMA_Abort_IT+0x3e0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d02c      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a25      	ldr	r2, [pc, #148]	@ (8003a50 <HAL_DMA_Abort_IT+0x3e4>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d027      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a24      	ldr	r2, [pc, #144]	@ (8003a54 <HAL_DMA_Abort_IT+0x3e8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d022      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a22      	ldr	r2, [pc, #136]	@ (8003a58 <HAL_DMA_Abort_IT+0x3ec>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01d      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a21      	ldr	r2, [pc, #132]	@ (8003a5c <HAL_DMA_Abort_IT+0x3f0>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d018      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a1f      	ldr	r2, [pc, #124]	@ (8003a60 <HAL_DMA_Abort_IT+0x3f4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d013      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1e      	ldr	r2, [pc, #120]	@ (8003a64 <HAL_DMA_Abort_IT+0x3f8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d00e      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003a68 <HAL_DMA_Abort_IT+0x3fc>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d009      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a1b      	ldr	r2, [pc, #108]	@ (8003a6c <HAL_DMA_Abort_IT+0x400>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_Abort_IT+0x3a2>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a19      	ldr	r2, [pc, #100]	@ (8003a70 <HAL_DMA_Abort_IT+0x404>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d132      	bne.n	8003a74 <HAL_DMA_Abort_IT+0x408>
 8003a0e:	2301      	movs	r3, #1
 8003a10:	e031      	b.n	8003a76 <HAL_DMA_Abort_IT+0x40a>
 8003a12:	bf00      	nop
 8003a14:	40020010 	.word	0x40020010
 8003a18:	40020028 	.word	0x40020028
 8003a1c:	40020040 	.word	0x40020040
 8003a20:	40020058 	.word	0x40020058
 8003a24:	40020070 	.word	0x40020070
 8003a28:	40020088 	.word	0x40020088
 8003a2c:	400200a0 	.word	0x400200a0
 8003a30:	400200b8 	.word	0x400200b8
 8003a34:	40020410 	.word	0x40020410
 8003a38:	40020428 	.word	0x40020428
 8003a3c:	40020440 	.word	0x40020440
 8003a40:	40020458 	.word	0x40020458
 8003a44:	40020470 	.word	0x40020470
 8003a48:	40020488 	.word	0x40020488
 8003a4c:	400204a0 	.word	0x400204a0
 8003a50:	400204b8 	.word	0x400204b8
 8003a54:	58025408 	.word	0x58025408
 8003a58:	5802541c 	.word	0x5802541c
 8003a5c:	58025430 	.word	0x58025430
 8003a60:	58025444 	.word	0x58025444
 8003a64:	58025458 	.word	0x58025458
 8003a68:	5802546c 	.word	0x5802546c
 8003a6c:	58025480 	.word	0x58025480
 8003a70:	58025494 	.word	0x58025494
 8003a74:	2300      	movs	r3, #0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d028      	beq.n	8003acc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a88:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a8e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a94:	f003 031f 	and.w	r3, r3, #31
 8003a98:	2201      	movs	r2, #1
 8003a9a:	409a      	lsls	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003aa8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00c      	beq.n	8003acc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003abc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003aca:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003aec:	2300      	movs	r3, #0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop

08003af8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b08a      	sub	sp, #40	@ 0x28
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b04:	4b67      	ldr	r3, [pc, #412]	@ (8003ca4 <HAL_DMA_IRQHandler+0x1ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a67      	ldr	r2, [pc, #412]	@ (8003ca8 <HAL_DMA_IRQHandler+0x1b0>)
 8003b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b0e:	0a9b      	lsrs	r3, r3, #10
 8003b10:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b1c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003b1e:	6a3b      	ldr	r3, [r7, #32]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a5f      	ldr	r2, [pc, #380]	@ (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a5d      	ldr	r2, [pc, #372]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a5c      	ldr	r2, [pc, #368]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a59      	ldr	r2, [pc, #356]	@ (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a57      	ldr	r2, [pc, #348]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a56      	ldr	r2, [pc, #344]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a54      	ldr	r2, [pc, #336]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a53      	ldr	r2, [pc, #332]	@ (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a51      	ldr	r2, [pc, #324]	@ (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a50      	ldr	r2, [pc, #320]	@ (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a4e      	ldr	r2, [pc, #312]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a4d      	ldr	r2, [pc, #308]	@ (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a4a      	ldr	r2, [pc, #296]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_IRQHandler+0xd2>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a48      	ldr	r2, [pc, #288]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_IRQHandler+0xd6>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_IRQHandler+0xd8>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	f000 842b 	beq.w	800442c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bda:	f003 031f 	and.w	r3, r3, #31
 8003bde:	2208      	movs	r2, #8
 8003be0:	409a      	lsls	r2, r3
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	4013      	ands	r3, r2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80a2 	beq.w	8003d30 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a2e      	ldr	r2, [pc, #184]	@ (8003cac <HAL_DMA_IRQHandler+0x1b4>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d04a      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	@ (8003cb0 <HAL_DMA_IRQHandler+0x1b8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d045      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb4 <HAL_DMA_IRQHandler+0x1bc>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d040      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a2a      	ldr	r2, [pc, #168]	@ (8003cb8 <HAL_DMA_IRQHandler+0x1c0>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d03b      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a28      	ldr	r2, [pc, #160]	@ (8003cbc <HAL_DMA_IRQHandler+0x1c4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d036      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a27      	ldr	r2, [pc, #156]	@ (8003cc0 <HAL_DMA_IRQHandler+0x1c8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d031      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a25      	ldr	r2, [pc, #148]	@ (8003cc4 <HAL_DMA_IRQHandler+0x1cc>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02c      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a24      	ldr	r2, [pc, #144]	@ (8003cc8 <HAL_DMA_IRQHandler+0x1d0>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d027      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a22      	ldr	r2, [pc, #136]	@ (8003ccc <HAL_DMA_IRQHandler+0x1d4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d022      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a21      	ldr	r2, [pc, #132]	@ (8003cd0 <HAL_DMA_IRQHandler+0x1d8>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d01d      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a1f      	ldr	r2, [pc, #124]	@ (8003cd4 <HAL_DMA_IRQHandler+0x1dc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d018      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8003cd8 <HAL_DMA_IRQHandler+0x1e0>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d013      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a1c      	ldr	r2, [pc, #112]	@ (8003cdc <HAL_DMA_IRQHandler+0x1e4>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a1b      	ldr	r2, [pc, #108]	@ (8003ce0 <HAL_DMA_IRQHandler+0x1e8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d009      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	@ (8003ce4 <HAL_DMA_IRQHandler+0x1ec>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_DMA_IRQHandler+0x194>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a18      	ldr	r2, [pc, #96]	@ (8003ce8 <HAL_DMA_IRQHandler+0x1f0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d12f      	bne.n	8003cec <HAL_DMA_IRQHandler+0x1f4>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
 8003ca0:	e02e      	b.n	8003d00 <HAL_DMA_IRQHandler+0x208>
 8003ca2:	bf00      	nop
 8003ca4:	24000000 	.word	0x24000000
 8003ca8:	1b4e81b5 	.word	0x1b4e81b5
 8003cac:	40020010 	.word	0x40020010
 8003cb0:	40020028 	.word	0x40020028
 8003cb4:	40020040 	.word	0x40020040
 8003cb8:	40020058 	.word	0x40020058
 8003cbc:	40020070 	.word	0x40020070
 8003cc0:	40020088 	.word	0x40020088
 8003cc4:	400200a0 	.word	0x400200a0
 8003cc8:	400200b8 	.word	0x400200b8
 8003ccc:	40020410 	.word	0x40020410
 8003cd0:	40020428 	.word	0x40020428
 8003cd4:	40020440 	.word	0x40020440
 8003cd8:	40020458 	.word	0x40020458
 8003cdc:	40020470 	.word	0x40020470
 8003ce0:	40020488 	.word	0x40020488
 8003ce4:	400204a0 	.word	0x400204a0
 8003ce8:	400204b8 	.word	0x400204b8
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0308 	and.w	r3, r3, #8
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d015      	beq.n	8003d30 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0204 	bic.w	r2, r2, #4
 8003d12:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d18:	f003 031f 	and.w	r3, r3, #31
 8003d1c:	2208      	movs	r2, #8
 8003d1e:	409a      	lsls	r2, r3
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d28:	f043 0201 	orr.w	r2, r3, #1
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d34:	f003 031f 	and.w	r3, r3, #31
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d06e      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a69      	ldr	r2, [pc, #420]	@ (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d04a      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a67      	ldr	r2, [pc, #412]	@ (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d045      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a66      	ldr	r2, [pc, #408]	@ (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d040      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a64      	ldr	r2, [pc, #400]	@ (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d03b      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a63      	ldr	r2, [pc, #396]	@ (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d036      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a61      	ldr	r2, [pc, #388]	@ (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d031      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a60      	ldr	r2, [pc, #384]	@ (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d02c      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a5e      	ldr	r2, [pc, #376]	@ (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d027      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a5d      	ldr	r2, [pc, #372]	@ (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d022      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a5b      	ldr	r2, [pc, #364]	@ (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d01d      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a5a      	ldr	r2, [pc, #360]	@ (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d018      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a58      	ldr	r2, [pc, #352]	@ (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d013      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a57      	ldr	r2, [pc, #348]	@ (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d00e      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a55      	ldr	r2, [pc, #340]	@ (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d009      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a54      	ldr	r2, [pc, #336]	@ (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d004      	beq.n	8003de6 <HAL_DMA_IRQHandler+0x2ee>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a52      	ldr	r2, [pc, #328]	@ (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d10a      	bne.n	8003dfc <HAL_DMA_IRQHandler+0x304>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	bf14      	ite	ne
 8003df4:	2301      	movne	r3, #1
 8003df6:	2300      	moveq	r3, #0
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	e003      	b.n	8003e04 <HAL_DMA_IRQHandler+0x30c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	2300      	movs	r3, #0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00d      	beq.n	8003e24 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e0c:	f003 031f 	and.w	r3, r3, #31
 8003e10:	2201      	movs	r2, #1
 8003e12:	409a      	lsls	r2, r3
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f043 0202 	orr.w	r2, r3, #2
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2204      	movs	r2, #4
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 808f 	beq.w	8003f58 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ef0 <HAL_DMA_IRQHandler+0x3f8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d04a      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a2a      	ldr	r2, [pc, #168]	@ (8003ef4 <HAL_DMA_IRQHandler+0x3fc>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d045      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a29      	ldr	r2, [pc, #164]	@ (8003ef8 <HAL_DMA_IRQHandler+0x400>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d040      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a27      	ldr	r2, [pc, #156]	@ (8003efc <HAL_DMA_IRQHandler+0x404>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d03b      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a26      	ldr	r2, [pc, #152]	@ (8003f00 <HAL_DMA_IRQHandler+0x408>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d036      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a24      	ldr	r2, [pc, #144]	@ (8003f04 <HAL_DMA_IRQHandler+0x40c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d031      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a23      	ldr	r2, [pc, #140]	@ (8003f08 <HAL_DMA_IRQHandler+0x410>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d02c      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a21      	ldr	r2, [pc, #132]	@ (8003f0c <HAL_DMA_IRQHandler+0x414>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d027      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a20      	ldr	r2, [pc, #128]	@ (8003f10 <HAL_DMA_IRQHandler+0x418>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d022      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1e      	ldr	r2, [pc, #120]	@ (8003f14 <HAL_DMA_IRQHandler+0x41c>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d01d      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1d      	ldr	r2, [pc, #116]	@ (8003f18 <HAL_DMA_IRQHandler+0x420>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d018      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a1b      	ldr	r2, [pc, #108]	@ (8003f1c <HAL_DMA_IRQHandler+0x424>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d013      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f20 <HAL_DMA_IRQHandler+0x428>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d00e      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_DMA_IRQHandler+0x42c>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d009      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a17      	ldr	r2, [pc, #92]	@ (8003f28 <HAL_DMA_IRQHandler+0x430>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d004      	beq.n	8003eda <HAL_DMA_IRQHandler+0x3e2>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a15      	ldr	r2, [pc, #84]	@ (8003f2c <HAL_DMA_IRQHandler+0x434>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d12a      	bne.n	8003f30 <HAL_DMA_IRQHandler+0x438>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	bf14      	ite	ne
 8003ee8:	2301      	movne	r3, #1
 8003eea:	2300      	moveq	r3, #0
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	e023      	b.n	8003f38 <HAL_DMA_IRQHandler+0x440>
 8003ef0:	40020010 	.word	0x40020010
 8003ef4:	40020028 	.word	0x40020028
 8003ef8:	40020040 	.word	0x40020040
 8003efc:	40020058 	.word	0x40020058
 8003f00:	40020070 	.word	0x40020070
 8003f04:	40020088 	.word	0x40020088
 8003f08:	400200a0 	.word	0x400200a0
 8003f0c:	400200b8 	.word	0x400200b8
 8003f10:	40020410 	.word	0x40020410
 8003f14:	40020428 	.word	0x40020428
 8003f18:	40020440 	.word	0x40020440
 8003f1c:	40020458 	.word	0x40020458
 8003f20:	40020470 	.word	0x40020470
 8003f24:	40020488 	.word	0x40020488
 8003f28:	400204a0 	.word	0x400204a0
 8003f2c:	400204b8 	.word	0x400204b8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2300      	movs	r3, #0
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00d      	beq.n	8003f58 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f40:	f003 031f 	and.w	r3, r3, #31
 8003f44:	2204      	movs	r2, #4
 8003f46:	409a      	lsls	r2, r3
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f50:	f043 0204 	orr.w	r2, r3, #4
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2210      	movs	r2, #16
 8003f62:	409a      	lsls	r2, r3
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	f000 80a6 	beq.w	80040ba <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a85      	ldr	r2, [pc, #532]	@ (8004188 <HAL_DMA_IRQHandler+0x690>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d04a      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a83      	ldr	r2, [pc, #524]	@ (800418c <HAL_DMA_IRQHandler+0x694>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d045      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a82      	ldr	r2, [pc, #520]	@ (8004190 <HAL_DMA_IRQHandler+0x698>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d040      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a80      	ldr	r2, [pc, #512]	@ (8004194 <HAL_DMA_IRQHandler+0x69c>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d03b      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a7f      	ldr	r2, [pc, #508]	@ (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d036      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a7d      	ldr	r2, [pc, #500]	@ (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d031      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a7c      	ldr	r2, [pc, #496]	@ (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d02c      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a7a      	ldr	r2, [pc, #488]	@ (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d027      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a79      	ldr	r2, [pc, #484]	@ (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a77      	ldr	r2, [pc, #476]	@ (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d01d      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a76      	ldr	r2, [pc, #472]	@ (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d018      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a74      	ldr	r2, [pc, #464]	@ (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d013      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a73      	ldr	r2, [pc, #460]	@ (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d00e      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a71      	ldr	r2, [pc, #452]	@ (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d009      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a70      	ldr	r2, [pc, #448]	@ (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d004      	beq.n	800400e <HAL_DMA_IRQHandler+0x516>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a6e      	ldr	r2, [pc, #440]	@ (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d10a      	bne.n	8004024 <HAL_DMA_IRQHandler+0x52c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0308 	and.w	r3, r3, #8
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf14      	ite	ne
 800401c:	2301      	movne	r3, #1
 800401e:	2300      	moveq	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	e009      	b.n	8004038 <HAL_DMA_IRQHandler+0x540>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	bf14      	ite	ne
 8004032:	2301      	movne	r3, #1
 8004034:	2300      	moveq	r3, #0
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b00      	cmp	r3, #0
 800403a:	d03e      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004040:	f003 031f 	and.w	r3, r3, #31
 8004044:	2210      	movs	r2, #16
 8004046:	409a      	lsls	r2, r3
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d018      	beq.n	800408c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d108      	bne.n	800407a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800406c:	2b00      	cmp	r3, #0
 800406e:	d024      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	4798      	blx	r3
 8004078:	e01f      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407e:	2b00      	cmp	r3, #0
 8004080:	d01b      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e016      	b.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004096:	2b00      	cmp	r3, #0
 8004098:	d107      	bne.n	80040aa <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0208 	bic.w	r2, r2, #8
 80040a8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040be:	f003 031f 	and.w	r3, r3, #31
 80040c2:	2220      	movs	r2, #32
 80040c4:	409a      	lsls	r2, r3
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	4013      	ands	r3, r2
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8110 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a2c      	ldr	r2, [pc, #176]	@ (8004188 <HAL_DMA_IRQHandler+0x690>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d04a      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a2b      	ldr	r2, [pc, #172]	@ (800418c <HAL_DMA_IRQHandler+0x694>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d045      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a29      	ldr	r2, [pc, #164]	@ (8004190 <HAL_DMA_IRQHandler+0x698>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d040      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a28      	ldr	r2, [pc, #160]	@ (8004194 <HAL_DMA_IRQHandler+0x69c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d03b      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a26      	ldr	r2, [pc, #152]	@ (8004198 <HAL_DMA_IRQHandler+0x6a0>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d036      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a25      	ldr	r2, [pc, #148]	@ (800419c <HAL_DMA_IRQHandler+0x6a4>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d031      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a23      	ldr	r2, [pc, #140]	@ (80041a0 <HAL_DMA_IRQHandler+0x6a8>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d02c      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a22      	ldr	r2, [pc, #136]	@ (80041a4 <HAL_DMA_IRQHandler+0x6ac>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d027      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a20      	ldr	r2, [pc, #128]	@ (80041a8 <HAL_DMA_IRQHandler+0x6b0>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d022      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a1f      	ldr	r2, [pc, #124]	@ (80041ac <HAL_DMA_IRQHandler+0x6b4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d01d      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a1d      	ldr	r2, [pc, #116]	@ (80041b0 <HAL_DMA_IRQHandler+0x6b8>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d018      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a1c      	ldr	r2, [pc, #112]	@ (80041b4 <HAL_DMA_IRQHandler+0x6bc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d013      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a1a      	ldr	r2, [pc, #104]	@ (80041b8 <HAL_DMA_IRQHandler+0x6c0>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d00e      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a19      	ldr	r2, [pc, #100]	@ (80041bc <HAL_DMA_IRQHandler+0x6c4>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d009      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a17      	ldr	r2, [pc, #92]	@ (80041c0 <HAL_DMA_IRQHandler+0x6c8>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d004      	beq.n	8004170 <HAL_DMA_IRQHandler+0x678>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a16      	ldr	r2, [pc, #88]	@ (80041c4 <HAL_DMA_IRQHandler+0x6cc>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d12b      	bne.n	80041c8 <HAL_DMA_IRQHandler+0x6d0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b00      	cmp	r3, #0
 800417c:	bf14      	ite	ne
 800417e:	2301      	movne	r3, #1
 8004180:	2300      	moveq	r3, #0
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e02a      	b.n	80041dc <HAL_DMA_IRQHandler+0x6e4>
 8004186:	bf00      	nop
 8004188:	40020010 	.word	0x40020010
 800418c:	40020028 	.word	0x40020028
 8004190:	40020040 	.word	0x40020040
 8004194:	40020058 	.word	0x40020058
 8004198:	40020070 	.word	0x40020070
 800419c:	40020088 	.word	0x40020088
 80041a0:	400200a0 	.word	0x400200a0
 80041a4:	400200b8 	.word	0x400200b8
 80041a8:	40020410 	.word	0x40020410
 80041ac:	40020428 	.word	0x40020428
 80041b0:	40020440 	.word	0x40020440
 80041b4:	40020458 	.word	0x40020458
 80041b8:	40020470 	.word	0x40020470
 80041bc:	40020488 	.word	0x40020488
 80041c0:	400204a0 	.word	0x400204a0
 80041c4:	400204b8 	.word	0x400204b8
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0302 	and.w	r3, r3, #2
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	bf14      	ite	ne
 80041d6:	2301      	movne	r3, #1
 80041d8:	2300      	moveq	r3, #0
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	f000 8087 	beq.w	80042f0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	2220      	movs	r2, #32
 80041ec:	409a      	lsls	r2, r3
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b04      	cmp	r3, #4
 80041fc:	d139      	bne.n	8004272 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f022 0216 	bic.w	r2, r2, #22
 800420c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800421c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <HAL_DMA_IRQHandler+0x736>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422a:	2b00      	cmp	r3, #0
 800422c:	d007      	beq.n	800423e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681a      	ldr	r2, [r3, #0]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 0208 	bic.w	r2, r2, #8
 800423c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004242:	f003 031f 	and.w	r3, r3, #31
 8004246:	223f      	movs	r2, #63	@ 0x3f
 8004248:	409a      	lsls	r2, r3
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 834a 	beq.w	80048fc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	4798      	blx	r3
          }
          return;
 8004270:	e344      	b.n	80048fc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d018      	beq.n	80042b2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d108      	bne.n	80042a0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	2b00      	cmp	r3, #0
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	4798      	blx	r3
 800429e:	e027      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ac:	6878      	ldr	r0, [r7, #4]
 80042ae:	4798      	blx	r3
 80042b0:	e01e      	b.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10f      	bne.n	80042e0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f022 0210 	bic.w	r2, r2, #16
 80042ce:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	f000 8306 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b00      	cmp	r3, #0
 8004304:	f000 8088 	beq.w	8004418 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2204      	movs	r2, #4
 800430c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a7a      	ldr	r2, [pc, #488]	@ (8004500 <HAL_DMA_IRQHandler+0xa08>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d04a      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a79      	ldr	r2, [pc, #484]	@ (8004504 <HAL_DMA_IRQHandler+0xa0c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d045      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a77      	ldr	r2, [pc, #476]	@ (8004508 <HAL_DMA_IRQHandler+0xa10>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d040      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a76      	ldr	r2, [pc, #472]	@ (800450c <HAL_DMA_IRQHandler+0xa14>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d03b      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a74      	ldr	r2, [pc, #464]	@ (8004510 <HAL_DMA_IRQHandler+0xa18>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d036      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a73      	ldr	r2, [pc, #460]	@ (8004514 <HAL_DMA_IRQHandler+0xa1c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d031      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a71      	ldr	r2, [pc, #452]	@ (8004518 <HAL_DMA_IRQHandler+0xa20>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d02c      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a70      	ldr	r2, [pc, #448]	@ (800451c <HAL_DMA_IRQHandler+0xa24>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d027      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a6e      	ldr	r2, [pc, #440]	@ (8004520 <HAL_DMA_IRQHandler+0xa28>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d022      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a6d      	ldr	r2, [pc, #436]	@ (8004524 <HAL_DMA_IRQHandler+0xa2c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d01d      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a6b      	ldr	r2, [pc, #428]	@ (8004528 <HAL_DMA_IRQHandler+0xa30>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d018      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a6a      	ldr	r2, [pc, #424]	@ (800452c <HAL_DMA_IRQHandler+0xa34>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d013      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a68      	ldr	r2, [pc, #416]	@ (8004530 <HAL_DMA_IRQHandler+0xa38>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a67      	ldr	r2, [pc, #412]	@ (8004534 <HAL_DMA_IRQHandler+0xa3c>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d009      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a65      	ldr	r2, [pc, #404]	@ (8004538 <HAL_DMA_IRQHandler+0xa40>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d004      	beq.n	80043b0 <HAL_DMA_IRQHandler+0x8b8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a64      	ldr	r2, [pc, #400]	@ (800453c <HAL_DMA_IRQHandler+0xa44>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d108      	bne.n	80043c2 <HAL_DMA_IRQHandler+0x8ca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 0201 	bic.w	r2, r2, #1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	e007      	b.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0201 	bic.w	r2, r2, #1
 80043d0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3301      	adds	r3, #1
 80043d6:	60fb      	str	r3, [r7, #12]
 80043d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043da:	429a      	cmp	r2, r3
 80043dc:	d307      	bcc.n	80043ee <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1f2      	bne.n	80043d2 <HAL_DMA_IRQHandler+0x8da>
 80043ec:	e000      	b.n	80043f0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80043ee:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d004      	beq.n	8004408 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2203      	movs	r2, #3
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8004406:	e003      	b.n	8004410 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2201      	movs	r2, #1
 800440c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800441c:	2b00      	cmp	r3, #0
 800441e:	f000 8272 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	4798      	blx	r3
 800442a:	e26c      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a43      	ldr	r2, [pc, #268]	@ (8004540 <HAL_DMA_IRQHandler+0xa48>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d022      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4a42      	ldr	r2, [pc, #264]	@ (8004544 <HAL_DMA_IRQHandler+0xa4c>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d01d      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a40      	ldr	r2, [pc, #256]	@ (8004548 <HAL_DMA_IRQHandler+0xa50>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d018      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3f      	ldr	r2, [pc, #252]	@ (800454c <HAL_DMA_IRQHandler+0xa54>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d013      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3d      	ldr	r2, [pc, #244]	@ (8004550 <HAL_DMA_IRQHandler+0xa58>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00e      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a3c      	ldr	r2, [pc, #240]	@ (8004554 <HAL_DMA_IRQHandler+0xa5c>)
 8004464:	4293      	cmp	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a3a      	ldr	r2, [pc, #232]	@ (8004558 <HAL_DMA_IRQHandler+0xa60>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d004      	beq.n	800447c <HAL_DMA_IRQHandler+0x984>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a39      	ldr	r2, [pc, #228]	@ (800455c <HAL_DMA_IRQHandler+0xa64>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d101      	bne.n	8004480 <HAL_DMA_IRQHandler+0x988>
 800447c:	2301      	movs	r3, #1
 800447e:	e000      	b.n	8004482 <HAL_DMA_IRQHandler+0x98a>
 8004480:	2300      	movs	r3, #0
 8004482:	2b00      	cmp	r3, #0
 8004484:	f000 823f 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004494:	f003 031f 	and.w	r3, r3, #31
 8004498:	2204      	movs	r2, #4
 800449a:	409a      	lsls	r2, r3
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80cd 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 80c7 	beq.w	8004640 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044b6:	f003 031f 	and.w	r3, r3, #31
 80044ba:	2204      	movs	r2, #4
 80044bc:	409a      	lsls	r2, r3
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d049      	beq.n	8004560 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044da:	2b00      	cmp	r3, #0
 80044dc:	f000 8210 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044e8:	e20a      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	f000 8206 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80044fc:	e200      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
 80044fe:	bf00      	nop
 8004500:	40020010 	.word	0x40020010
 8004504:	40020028 	.word	0x40020028
 8004508:	40020040 	.word	0x40020040
 800450c:	40020058 	.word	0x40020058
 8004510:	40020070 	.word	0x40020070
 8004514:	40020088 	.word	0x40020088
 8004518:	400200a0 	.word	0x400200a0
 800451c:	400200b8 	.word	0x400200b8
 8004520:	40020410 	.word	0x40020410
 8004524:	40020428 	.word	0x40020428
 8004528:	40020440 	.word	0x40020440
 800452c:	40020458 	.word	0x40020458
 8004530:	40020470 	.word	0x40020470
 8004534:	40020488 	.word	0x40020488
 8004538:	400204a0 	.word	0x400204a0
 800453c:	400204b8 	.word	0x400204b8
 8004540:	58025408 	.word	0x58025408
 8004544:	5802541c 	.word	0x5802541c
 8004548:	58025430 	.word	0x58025430
 800454c:	58025444 	.word	0x58025444
 8004550:	58025458 	.word	0x58025458
 8004554:	5802546c 	.word	0x5802546c
 8004558:	58025480 	.word	0x58025480
 800455c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f003 0320 	and.w	r3, r3, #32
 8004566:	2b00      	cmp	r3, #0
 8004568:	d160      	bne.n	800462c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a7f      	ldr	r2, [pc, #508]	@ (800476c <HAL_DMA_IRQHandler+0xc74>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d04a      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a7d      	ldr	r2, [pc, #500]	@ (8004770 <HAL_DMA_IRQHandler+0xc78>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d045      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a7c      	ldr	r2, [pc, #496]	@ (8004774 <HAL_DMA_IRQHandler+0xc7c>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d040      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a7a      	ldr	r2, [pc, #488]	@ (8004778 <HAL_DMA_IRQHandler+0xc80>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d03b      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a79      	ldr	r2, [pc, #484]	@ (800477c <HAL_DMA_IRQHandler+0xc84>)
 8004598:	4293      	cmp	r3, r2
 800459a:	d036      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a77      	ldr	r2, [pc, #476]	@ (8004780 <HAL_DMA_IRQHandler+0xc88>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d031      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a76      	ldr	r2, [pc, #472]	@ (8004784 <HAL_DMA_IRQHandler+0xc8c>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d02c      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a74      	ldr	r2, [pc, #464]	@ (8004788 <HAL_DMA_IRQHandler+0xc90>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d027      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a73      	ldr	r2, [pc, #460]	@ (800478c <HAL_DMA_IRQHandler+0xc94>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d022      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4a71      	ldr	r2, [pc, #452]	@ (8004790 <HAL_DMA_IRQHandler+0xc98>)
 80045ca:	4293      	cmp	r3, r2
 80045cc:	d01d      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a70      	ldr	r2, [pc, #448]	@ (8004794 <HAL_DMA_IRQHandler+0xc9c>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d018      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a6e      	ldr	r2, [pc, #440]	@ (8004798 <HAL_DMA_IRQHandler+0xca0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a6d      	ldr	r2, [pc, #436]	@ (800479c <HAL_DMA_IRQHandler+0xca4>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d00e      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a6b      	ldr	r2, [pc, #428]	@ (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d009      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a6a      	ldr	r2, [pc, #424]	@ (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d004      	beq.n	800460a <HAL_DMA_IRQHandler+0xb12>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a68      	ldr	r2, [pc, #416]	@ (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d108      	bne.n	800461c <HAL_DMA_IRQHandler+0xb24>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 0208 	bic.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e007      	b.n	800462c <HAL_DMA_IRQHandler+0xb34>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f022 0204 	bic.w	r2, r2, #4
 800462a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004630:	2b00      	cmp	r3, #0
 8004632:	f000 8165 	beq.w	8004900 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800463e:	e15f      	b.n	8004900 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004644:	f003 031f 	and.w	r3, r3, #31
 8004648:	2202      	movs	r2, #2
 800464a:	409a      	lsls	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	4013      	ands	r3, r2
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 80c5 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	f000 80bf 	beq.w	80047e0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004666:	f003 031f 	and.w	r3, r3, #31
 800466a:	2202      	movs	r2, #2
 800466c:	409a      	lsls	r2, r3
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d018      	beq.n	80046ae <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d109      	bne.n	800469a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 813a 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004698:	e134      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f000 8130 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80046ac:	e12a      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	f040 8089 	bne.w	80047cc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a2b      	ldr	r2, [pc, #172]	@ (800476c <HAL_DMA_IRQHandler+0xc74>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d04a      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a29      	ldr	r2, [pc, #164]	@ (8004770 <HAL_DMA_IRQHandler+0xc78>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d045      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a28      	ldr	r2, [pc, #160]	@ (8004774 <HAL_DMA_IRQHandler+0xc7c>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d040      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a26      	ldr	r2, [pc, #152]	@ (8004778 <HAL_DMA_IRQHandler+0xc80>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d03b      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a25      	ldr	r2, [pc, #148]	@ (800477c <HAL_DMA_IRQHandler+0xc84>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d036      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <HAL_DMA_IRQHandler+0xc88>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d031      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a22      	ldr	r2, [pc, #136]	@ (8004784 <HAL_DMA_IRQHandler+0xc8c>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d02c      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a20      	ldr	r2, [pc, #128]	@ (8004788 <HAL_DMA_IRQHandler+0xc90>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d027      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a1f      	ldr	r2, [pc, #124]	@ (800478c <HAL_DMA_IRQHandler+0xc94>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d022      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a1d      	ldr	r2, [pc, #116]	@ (8004790 <HAL_DMA_IRQHandler+0xc98>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d01d      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a1c      	ldr	r2, [pc, #112]	@ (8004794 <HAL_DMA_IRQHandler+0xc9c>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d018      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1a      	ldr	r2, [pc, #104]	@ (8004798 <HAL_DMA_IRQHandler+0xca0>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d013      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a19      	ldr	r2, [pc, #100]	@ (800479c <HAL_DMA_IRQHandler+0xca4>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d00e      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a17      	ldr	r2, [pc, #92]	@ (80047a0 <HAL_DMA_IRQHandler+0xca8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d009      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a16      	ldr	r2, [pc, #88]	@ (80047a4 <HAL_DMA_IRQHandler+0xcac>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d004      	beq.n	800475a <HAL_DMA_IRQHandler+0xc62>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a14      	ldr	r2, [pc, #80]	@ (80047a8 <HAL_DMA_IRQHandler+0xcb0>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d128      	bne.n	80047ac <HAL_DMA_IRQHandler+0xcb4>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0214 	bic.w	r2, r2, #20
 8004768:	601a      	str	r2, [r3, #0]
 800476a:	e027      	b.n	80047bc <HAL_DMA_IRQHandler+0xcc4>
 800476c:	40020010 	.word	0x40020010
 8004770:	40020028 	.word	0x40020028
 8004774:	40020040 	.word	0x40020040
 8004778:	40020058 	.word	0x40020058
 800477c:	40020070 	.word	0x40020070
 8004780:	40020088 	.word	0x40020088
 8004784:	400200a0 	.word	0x400200a0
 8004788:	400200b8 	.word	0x400200b8
 800478c:	40020410 	.word	0x40020410
 8004790:	40020428 	.word	0x40020428
 8004794:	40020440 	.word	0x40020440
 8004798:	40020458 	.word	0x40020458
 800479c:	40020470 	.word	0x40020470
 80047a0:	40020488 	.word	0x40020488
 80047a4:	400204a0 	.word	0x400204a0
 80047a8:	400204b8 	.word	0x400204b8
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f022 020a 	bic.w	r2, r2, #10
 80047ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	f000 8097 	beq.w	8004904 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80047de:	e091      	b.n	8004904 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047e4:	f003 031f 	and.w	r3, r3, #31
 80047e8:	2208      	movs	r2, #8
 80047ea:	409a      	lsls	r2, r3
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	f000 8088 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0308 	and.w	r3, r3, #8
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 8082 	beq.w	8004906 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a41      	ldr	r2, [pc, #260]	@ (800490c <HAL_DMA_IRQHandler+0xe14>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d04a      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a3f      	ldr	r2, [pc, #252]	@ (8004910 <HAL_DMA_IRQHandler+0xe18>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d045      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a3e      	ldr	r2, [pc, #248]	@ (8004914 <HAL_DMA_IRQHandler+0xe1c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d040      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a3c      	ldr	r2, [pc, #240]	@ (8004918 <HAL_DMA_IRQHandler+0xe20>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d03b      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a3b      	ldr	r2, [pc, #236]	@ (800491c <HAL_DMA_IRQHandler+0xe24>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d036      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a39      	ldr	r2, [pc, #228]	@ (8004920 <HAL_DMA_IRQHandler+0xe28>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d031      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <HAL_DMA_IRQHandler+0xe2c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d02c      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a36      	ldr	r2, [pc, #216]	@ (8004928 <HAL_DMA_IRQHandler+0xe30>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d027      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a35      	ldr	r2, [pc, #212]	@ (800492c <HAL_DMA_IRQHandler+0xe34>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d022      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a33      	ldr	r2, [pc, #204]	@ (8004930 <HAL_DMA_IRQHandler+0xe38>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01d      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a32      	ldr	r2, [pc, #200]	@ (8004934 <HAL_DMA_IRQHandler+0xe3c>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d018      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a30      	ldr	r2, [pc, #192]	@ (8004938 <HAL_DMA_IRQHandler+0xe40>)
 8004876:	4293      	cmp	r3, r2
 8004878:	d013      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a2f      	ldr	r2, [pc, #188]	@ (800493c <HAL_DMA_IRQHandler+0xe44>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00e      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a2d      	ldr	r2, [pc, #180]	@ (8004940 <HAL_DMA_IRQHandler+0xe48>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d009      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a2c      	ldr	r2, [pc, #176]	@ (8004944 <HAL_DMA_IRQHandler+0xe4c>)
 8004894:	4293      	cmp	r3, r2
 8004896:	d004      	beq.n	80048a2 <HAL_DMA_IRQHandler+0xdaa>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2a      	ldr	r2, [pc, #168]	@ (8004948 <HAL_DMA_IRQHandler+0xe50>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d108      	bne.n	80048b4 <HAL_DMA_IRQHandler+0xdbc>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f022 021c 	bic.w	r2, r2, #28
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	e007      	b.n	80048c4 <HAL_DMA_IRQHandler+0xdcc>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f022 020e 	bic.w	r2, r2, #14
 80048c2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048c8:	f003 031f 	and.w	r3, r3, #31
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d009      	beq.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	4798      	blx	r3
 80048fa:	e004      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80048fc:	bf00      	nop
 80048fe:	e002      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004900:	bf00      	nop
 8004902:	e000      	b.n	8004906 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004904:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004906:	3728      	adds	r7, #40	@ 0x28
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	40020010 	.word	0x40020010
 8004910:	40020028 	.word	0x40020028
 8004914:	40020040 	.word	0x40020040
 8004918:	40020058 	.word	0x40020058
 800491c:	40020070 	.word	0x40020070
 8004920:	40020088 	.word	0x40020088
 8004924:	400200a0 	.word	0x400200a0
 8004928:	400200b8 	.word	0x400200b8
 800492c:	40020410 	.word	0x40020410
 8004930:	40020428 	.word	0x40020428
 8004934:	40020440 	.word	0x40020440
 8004938:	40020458 	.word	0x40020458
 800493c:	40020470 	.word	0x40020470
 8004940:	40020488 	.word	0x40020488
 8004944:	400204a0 	.word	0x400204a0
 8004948:	400204b8 	.word	0x400204b8

0800494c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800494c:	b480      	push	{r7}
 800494e:	b087      	sub	sp, #28
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	607a      	str	r2, [r7, #4]
 8004958:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800495e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004964:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a7f      	ldr	r2, [pc, #508]	@ (8004b68 <DMA_SetConfig+0x21c>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d072      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a7d      	ldr	r2, [pc, #500]	@ (8004b6c <DMA_SetConfig+0x220>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d06d      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a7c      	ldr	r2, [pc, #496]	@ (8004b70 <DMA_SetConfig+0x224>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d068      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a7a      	ldr	r2, [pc, #488]	@ (8004b74 <DMA_SetConfig+0x228>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d063      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a79      	ldr	r2, [pc, #484]	@ (8004b78 <DMA_SetConfig+0x22c>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d05e      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a77      	ldr	r2, [pc, #476]	@ (8004b7c <DMA_SetConfig+0x230>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d059      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a76      	ldr	r2, [pc, #472]	@ (8004b80 <DMA_SetConfig+0x234>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d054      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a74      	ldr	r2, [pc, #464]	@ (8004b84 <DMA_SetConfig+0x238>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d04f      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a73      	ldr	r2, [pc, #460]	@ (8004b88 <DMA_SetConfig+0x23c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d04a      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a71      	ldr	r2, [pc, #452]	@ (8004b8c <DMA_SetConfig+0x240>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d045      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a70      	ldr	r2, [pc, #448]	@ (8004b90 <DMA_SetConfig+0x244>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d040      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a6e      	ldr	r2, [pc, #440]	@ (8004b94 <DMA_SetConfig+0x248>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d03b      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a6d      	ldr	r2, [pc, #436]	@ (8004b98 <DMA_SetConfig+0x24c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d036      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a6b      	ldr	r2, [pc, #428]	@ (8004b9c <DMA_SetConfig+0x250>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d031      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a6a      	ldr	r2, [pc, #424]	@ (8004ba0 <DMA_SetConfig+0x254>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d02c      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a68      	ldr	r2, [pc, #416]	@ (8004ba4 <DMA_SetConfig+0x258>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d027      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a67      	ldr	r2, [pc, #412]	@ (8004ba8 <DMA_SetConfig+0x25c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d022      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a65      	ldr	r2, [pc, #404]	@ (8004bac <DMA_SetConfig+0x260>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d01d      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a64      	ldr	r2, [pc, #400]	@ (8004bb0 <DMA_SetConfig+0x264>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d018      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a62      	ldr	r2, [pc, #392]	@ (8004bb4 <DMA_SetConfig+0x268>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a61      	ldr	r2, [pc, #388]	@ (8004bb8 <DMA_SetConfig+0x26c>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a5f      	ldr	r2, [pc, #380]	@ (8004bbc <DMA_SetConfig+0x270>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5e      	ldr	r2, [pc, #376]	@ (8004bc0 <DMA_SetConfig+0x274>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <DMA_SetConfig+0x10a>
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a5c      	ldr	r2, [pc, #368]	@ (8004bc4 <DMA_SetConfig+0x278>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <DMA_SetConfig+0x10e>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <DMA_SetConfig+0x110>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00d      	beq.n	8004a7c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004a68:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004a7a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a39      	ldr	r2, [pc, #228]	@ (8004b68 <DMA_SetConfig+0x21c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d04a      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a38      	ldr	r2, [pc, #224]	@ (8004b6c <DMA_SetConfig+0x220>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d045      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a36      	ldr	r2, [pc, #216]	@ (8004b70 <DMA_SetConfig+0x224>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d040      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a35      	ldr	r2, [pc, #212]	@ (8004b74 <DMA_SetConfig+0x228>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d03b      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a33      	ldr	r2, [pc, #204]	@ (8004b78 <DMA_SetConfig+0x22c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d036      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a32      	ldr	r2, [pc, #200]	@ (8004b7c <DMA_SetConfig+0x230>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d031      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a30      	ldr	r2, [pc, #192]	@ (8004b80 <DMA_SetConfig+0x234>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d02c      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8004b84 <DMA_SetConfig+0x238>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d027      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8004b88 <DMA_SetConfig+0x23c>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d022      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a2c      	ldr	r2, [pc, #176]	@ (8004b8c <DMA_SetConfig+0x240>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d01d      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a2a      	ldr	r2, [pc, #168]	@ (8004b90 <DMA_SetConfig+0x244>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d018      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a29      	ldr	r2, [pc, #164]	@ (8004b94 <DMA_SetConfig+0x248>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d013      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a27      	ldr	r2, [pc, #156]	@ (8004b98 <DMA_SetConfig+0x24c>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d00e      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a26      	ldr	r2, [pc, #152]	@ (8004b9c <DMA_SetConfig+0x250>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d009      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a24      	ldr	r2, [pc, #144]	@ (8004ba0 <DMA_SetConfig+0x254>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <DMA_SetConfig+0x1d0>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a23      	ldr	r2, [pc, #140]	@ (8004ba4 <DMA_SetConfig+0x258>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <DMA_SetConfig+0x1d4>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e000      	b.n	8004b22 <DMA_SetConfig+0x1d6>
 8004b20:	2300      	movs	r3, #0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d059      	beq.n	8004bda <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b2a:	f003 031f 	and.w	r3, r3, #31
 8004b2e:	223f      	movs	r2, #63	@ 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b44:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	683a      	ldr	r2, [r7, #0]
 8004b4c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	2b40      	cmp	r3, #64	@ 0x40
 8004b54:	d138      	bne.n	8004bc8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8004b66:	e086      	b.n	8004c76 <DMA_SetConfig+0x32a>
 8004b68:	40020010 	.word	0x40020010
 8004b6c:	40020028 	.word	0x40020028
 8004b70:	40020040 	.word	0x40020040
 8004b74:	40020058 	.word	0x40020058
 8004b78:	40020070 	.word	0x40020070
 8004b7c:	40020088 	.word	0x40020088
 8004b80:	400200a0 	.word	0x400200a0
 8004b84:	400200b8 	.word	0x400200b8
 8004b88:	40020410 	.word	0x40020410
 8004b8c:	40020428 	.word	0x40020428
 8004b90:	40020440 	.word	0x40020440
 8004b94:	40020458 	.word	0x40020458
 8004b98:	40020470 	.word	0x40020470
 8004b9c:	40020488 	.word	0x40020488
 8004ba0:	400204a0 	.word	0x400204a0
 8004ba4:	400204b8 	.word	0x400204b8
 8004ba8:	58025408 	.word	0x58025408
 8004bac:	5802541c 	.word	0x5802541c
 8004bb0:	58025430 	.word	0x58025430
 8004bb4:	58025444 	.word	0x58025444
 8004bb8:	58025458 	.word	0x58025458
 8004bbc:	5802546c 	.word	0x5802546c
 8004bc0:	58025480 	.word	0x58025480
 8004bc4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
}
 8004bd8:	e04d      	b.n	8004c76 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a29      	ldr	r2, [pc, #164]	@ (8004c84 <DMA_SetConfig+0x338>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d022      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a27      	ldr	r2, [pc, #156]	@ (8004c88 <DMA_SetConfig+0x33c>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01d      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a26      	ldr	r2, [pc, #152]	@ (8004c8c <DMA_SetConfig+0x340>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d018      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a24      	ldr	r2, [pc, #144]	@ (8004c90 <DMA_SetConfig+0x344>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d013      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a23      	ldr	r2, [pc, #140]	@ (8004c94 <DMA_SetConfig+0x348>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d00e      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a21      	ldr	r2, [pc, #132]	@ (8004c98 <DMA_SetConfig+0x34c>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d009      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a20      	ldr	r2, [pc, #128]	@ (8004c9c <DMA_SetConfig+0x350>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d004      	beq.n	8004c2a <DMA_SetConfig+0x2de>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a1e      	ldr	r2, [pc, #120]	@ (8004ca0 <DMA_SetConfig+0x354>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d101      	bne.n	8004c2e <DMA_SetConfig+0x2e2>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e000      	b.n	8004c30 <DMA_SetConfig+0x2e4>
 8004c2e:	2300      	movs	r3, #0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d020      	beq.n	8004c76 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c38:	f003 031f 	and.w	r3, r3, #31
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	409a      	lsls	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d108      	bne.n	8004c66 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68ba      	ldr	r2, [r7, #8]
 8004c62:	60da      	str	r2, [r3, #12]
}
 8004c64:	e007      	b.n	8004c76 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	60da      	str	r2, [r3, #12]
}
 8004c76:	bf00      	nop
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	58025408 	.word	0x58025408
 8004c88:	5802541c 	.word	0x5802541c
 8004c8c:	58025430 	.word	0x58025430
 8004c90:	58025444 	.word	0x58025444
 8004c94:	58025458 	.word	0x58025458
 8004c98:	5802546c 	.word	0x5802546c
 8004c9c:	58025480 	.word	0x58025480
 8004ca0:	58025494 	.word	0x58025494

08004ca4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a42      	ldr	r2, [pc, #264]	@ (8004dbc <DMA_CalcBaseAndBitshift+0x118>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d04a      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a41      	ldr	r2, [pc, #260]	@ (8004dc0 <DMA_CalcBaseAndBitshift+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d045      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc4 <DMA_CalcBaseAndBitshift+0x120>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d040      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a3e      	ldr	r2, [pc, #248]	@ (8004dc8 <DMA_CalcBaseAndBitshift+0x124>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d03b      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dcc <DMA_CalcBaseAndBitshift+0x128>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d036      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	@ (8004dd0 <DMA_CalcBaseAndBitshift+0x12c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d031      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a39      	ldr	r2, [pc, #228]	@ (8004dd4 <DMA_CalcBaseAndBitshift+0x130>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d02c      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a38      	ldr	r2, [pc, #224]	@ (8004dd8 <DMA_CalcBaseAndBitshift+0x134>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d027      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a36      	ldr	r2, [pc, #216]	@ (8004ddc <DMA_CalcBaseAndBitshift+0x138>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d022      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a35      	ldr	r2, [pc, #212]	@ (8004de0 <DMA_CalcBaseAndBitshift+0x13c>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d01d      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a33      	ldr	r2, [pc, #204]	@ (8004de4 <DMA_CalcBaseAndBitshift+0x140>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d018      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a32      	ldr	r2, [pc, #200]	@ (8004de8 <DMA_CalcBaseAndBitshift+0x144>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d013      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a30      	ldr	r2, [pc, #192]	@ (8004dec <DMA_CalcBaseAndBitshift+0x148>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00e      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a2f      	ldr	r2, [pc, #188]	@ (8004df0 <DMA_CalcBaseAndBitshift+0x14c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d009      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004df4 <DMA_CalcBaseAndBitshift+0x150>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d004      	beq.n	8004d4c <DMA_CalcBaseAndBitshift+0xa8>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a2c      	ldr	r2, [pc, #176]	@ (8004df8 <DMA_CalcBaseAndBitshift+0x154>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d101      	bne.n	8004d50 <DMA_CalcBaseAndBitshift+0xac>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e000      	b.n	8004d52 <DMA_CalcBaseAndBitshift+0xae>
 8004d50:	2300      	movs	r3, #0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d024      	beq.n	8004da0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	3b10      	subs	r3, #16
 8004d5e:	4a27      	ldr	r2, [pc, #156]	@ (8004dfc <DMA_CalcBaseAndBitshift+0x158>)
 8004d60:	fba2 2303 	umull	r2, r3, r2, r3
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0307 	and.w	r3, r3, #7
 8004d6e:	4a24      	ldr	r2, [pc, #144]	@ (8004e00 <DMA_CalcBaseAndBitshift+0x15c>)
 8004d70:	5cd3      	ldrb	r3, [r2, r3]
 8004d72:	461a      	mov	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d908      	bls.n	8004d90 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	461a      	mov	r2, r3
 8004d84:	4b1f      	ldr	r3, [pc, #124]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x160>)
 8004d86:	4013      	ands	r3, r2
 8004d88:	1d1a      	adds	r2, r3, #4
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d8e:	e00d      	b.n	8004dac <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	461a      	mov	r2, r3
 8004d96:	4b1b      	ldr	r3, [pc, #108]	@ (8004e04 <DMA_CalcBaseAndBitshift+0x160>)
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8004d9e:	e005      	b.n	8004dac <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	40020010 	.word	0x40020010
 8004dc0:	40020028 	.word	0x40020028
 8004dc4:	40020040 	.word	0x40020040
 8004dc8:	40020058 	.word	0x40020058
 8004dcc:	40020070 	.word	0x40020070
 8004dd0:	40020088 	.word	0x40020088
 8004dd4:	400200a0 	.word	0x400200a0
 8004dd8:	400200b8 	.word	0x400200b8
 8004ddc:	40020410 	.word	0x40020410
 8004de0:	40020428 	.word	0x40020428
 8004de4:	40020440 	.word	0x40020440
 8004de8:	40020458 	.word	0x40020458
 8004dec:	40020470 	.word	0x40020470
 8004df0:	40020488 	.word	0x40020488
 8004df4:	400204a0 	.word	0x400204a0
 8004df8:	400204b8 	.word	0x400204b8
 8004dfc:	aaaaaaab 	.word	0xaaaaaaab
 8004e00:	08010144 	.word	0x08010144
 8004e04:	fffffc00 	.word	0xfffffc00

08004e08 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e10:	2300      	movs	r3, #0
 8004e12:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d120      	bne.n	8004e5e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e20:	2b03      	cmp	r3, #3
 8004e22:	d858      	bhi.n	8004ed6 <DMA_CheckFifoParam+0xce>
 8004e24:	a201      	add	r2, pc, #4	@ (adr r2, 8004e2c <DMA_CheckFifoParam+0x24>)
 8004e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e2a:	bf00      	nop
 8004e2c:	08004e3d 	.word	0x08004e3d
 8004e30:	08004e4f 	.word	0x08004e4f
 8004e34:	08004e3d 	.word	0x08004e3d
 8004e38:	08004ed7 	.word	0x08004ed7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d048      	beq.n	8004eda <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e4c:	e045      	b.n	8004eda <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e56:	d142      	bne.n	8004ede <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e5c:	e03f      	b.n	8004ede <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e66:	d123      	bne.n	8004eb0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d838      	bhi.n	8004ee2 <DMA_CheckFifoParam+0xda>
 8004e70:	a201      	add	r2, pc, #4	@ (adr r2, 8004e78 <DMA_CheckFifoParam+0x70>)
 8004e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e76:	bf00      	nop
 8004e78:	08004e89 	.word	0x08004e89
 8004e7c:	08004e8f 	.word	0x08004e8f
 8004e80:	08004e89 	.word	0x08004e89
 8004e84:	08004ea1 	.word	0x08004ea1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	73fb      	strb	r3, [r7, #15]
        break;
 8004e8c:	e030      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e92:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d025      	beq.n	8004ee6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e9e:	e022      	b.n	8004ee6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004ea8:	d11f      	bne.n	8004eea <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004eaa:	2301      	movs	r3, #1
 8004eac:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004eae:	e01c      	b.n	8004eea <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <DMA_CheckFifoParam+0xb6>
 8004eb8:	2b03      	cmp	r3, #3
 8004eba:	d003      	beq.n	8004ec4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004ebc:	e018      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ec2:	e015      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ed4:	e00b      	b.n	8004eee <DMA_CheckFifoParam+0xe6>
        break;
 8004ed6:	bf00      	nop
 8004ed8:	e00a      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eda:	bf00      	nop
 8004edc:	e008      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e006      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e004      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004ee6:	bf00      	nop
 8004ee8:	e002      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
        break;
 8004eea:	bf00      	nop
 8004eec:	e000      	b.n	8004ef0 <DMA_CheckFifoParam+0xe8>
    break;
 8004eee:	bf00      	nop
    }
  }

  return status;
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3714      	adds	r7, #20
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop

08004f00 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a38      	ldr	r2, [pc, #224]	@ (8004ff4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d022      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a36      	ldr	r2, [pc, #216]	@ (8004ff8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01d      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a35      	ldr	r2, [pc, #212]	@ (8004ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d018      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a33      	ldr	r2, [pc, #204]	@ (8005000 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a32      	ldr	r2, [pc, #200]	@ (8005004 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00e      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d009      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	@ (800500c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d004      	beq.n	8004f5e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a2d      	ldr	r2, [pc, #180]	@ (8005010 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d101      	bne.n	8004f62 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d01a      	beq.n	8004f9e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	3b08      	subs	r3, #8
 8004f70:	4a28      	ldr	r2, [pc, #160]	@ (8005014 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004f72:	fba2 2303 	umull	r2, r3, r2, r3
 8004f76:	091b      	lsrs	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004f7a:	68fa      	ldr	r2, [r7, #12]
 8004f7c:	4b26      	ldr	r3, [pc, #152]	@ (8005018 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004f7e:	4413      	add	r3, r2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	461a      	mov	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a24      	ldr	r2, [pc, #144]	@ (800501c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004f8c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f003 031f 	and.w	r3, r3, #31
 8004f94:	2201      	movs	r2, #1
 8004f96:	409a      	lsls	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004f9c:	e024      	b.n	8004fe8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	3b10      	subs	r3, #16
 8004fa6:	4a1e      	ldr	r2, [pc, #120]	@ (8005020 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fac:	091b      	lsrs	r3, r3, #4
 8004fae:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a1c      	ldr	r2, [pc, #112]	@ (8005024 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d806      	bhi.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	@ (8005028 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d902      	bls.n	8004fc6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4b18      	ldr	r3, [pc, #96]	@ (800502c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a16      	ldr	r2, [pc, #88]	@ (8005030 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004fd8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f003 031f 	and.w	r3, r3, #31
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	409a      	lsls	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004fe8:	bf00      	nop
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr
 8004ff4:	58025408 	.word	0x58025408
 8004ff8:	5802541c 	.word	0x5802541c
 8004ffc:	58025430 	.word	0x58025430
 8005000:	58025444 	.word	0x58025444
 8005004:	58025458 	.word	0x58025458
 8005008:	5802546c 	.word	0x5802546c
 800500c:	58025480 	.word	0x58025480
 8005010:	58025494 	.word	0x58025494
 8005014:	cccccccd 	.word	0xcccccccd
 8005018:	16009600 	.word	0x16009600
 800501c:	58025880 	.word	0x58025880
 8005020:	aaaaaaab 	.word	0xaaaaaaab
 8005024:	400204b8 	.word	0x400204b8
 8005028:	4002040f 	.word	0x4002040f
 800502c:	10008200 	.word	0x10008200
 8005030:	40020880 	.word	0x40020880

08005034 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d04a      	beq.n	80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b08      	cmp	r3, #8
 800504e:	d847      	bhi.n	80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a25      	ldr	r2, [pc, #148]	@ (80050ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d022      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a24      	ldr	r2, [pc, #144]	@ (80050f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d01d      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a22      	ldr	r2, [pc, #136]	@ (80050f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d018      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a21      	ldr	r2, [pc, #132]	@ (80050f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d013      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a1f      	ldr	r2, [pc, #124]	@ (80050fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d00e      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a1e      	ldr	r2, [pc, #120]	@ (8005100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d009      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a1c      	ldr	r2, [pc, #112]	@ (8005104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d004      	beq.n	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a1b      	ldr	r2, [pc, #108]	@ (8005108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d101      	bne.n	80050a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80050a0:	2301      	movs	r3, #1
 80050a2:	e000      	b.n	80050a6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80050a4:	2300      	movs	r3, #0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00a      	beq.n	80050c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	4b17      	ldr	r3, [pc, #92]	@ (800510c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	461a      	mov	r2, r3
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a15      	ldr	r2, [pc, #84]	@ (8005110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80050bc:	671a      	str	r2, [r3, #112]	@ 0x70
 80050be:	e009      	b.n	80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4b14      	ldr	r3, [pc, #80]	@ (8005114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	461a      	mov	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a11      	ldr	r2, [pc, #68]	@ (8005118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80050d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3b01      	subs	r3, #1
 80050d8:	2201      	movs	r2, #1
 80050da:	409a      	lsls	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	58025408 	.word	0x58025408
 80050f0:	5802541c 	.word	0x5802541c
 80050f4:	58025430 	.word	0x58025430
 80050f8:	58025444 	.word	0x58025444
 80050fc:	58025458 	.word	0x58025458
 8005100:	5802546c 	.word	0x5802546c
 8005104:	58025480 	.word	0x58025480
 8005108:	58025494 	.word	0x58025494
 800510c:	1600963f 	.word	0x1600963f
 8005110:	58025940 	.word	0x58025940
 8005114:	1000823f 	.word	0x1000823f
 8005118:	40020940 	.word	0x40020940

0800511c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800511c:	b480      	push	{r7}
 800511e:	b087      	sub	sp, #28
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	460b      	mov	r3, r1
 8005126:	607a      	str	r2, [r7, #4]
 8005128:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	e00a      	b.n	800514e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005138:	7afb      	ldrb	r3, [r7, #11]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	605a      	str	r2, [r3, #4]
      break;
 8005144:	e002      	b.n	800514c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	75fb      	strb	r3, [r7, #23]
      break;
 800514a:	bf00      	nop
  }

  return status;
 800514c:	7dfb      	ldrb	r3, [r7, #23]
}
 800514e:	4618      	mov	r0, r3
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e003      	b.n	8005176 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005174:	2300      	movs	r3, #0
  }
}
 8005176:	4618      	mov	r0, r3
 8005178:	370c      	adds	r7, #12
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	0c1b      	lsrs	r3, r3, #16
 8005192:	f003 0303 	and.w	r3, r3, #3
 8005196:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 031f 	and.w	r3, r3, #31
 80051a0:	2201      	movs	r2, #1
 80051a2:	fa02 f303 	lsl.w	r3, r2, r3
 80051a6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80051a8:	f7fd f968 	bl	800247c <HAL_GetCurrentCPUID>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b03      	cmp	r3, #3
 80051b0:	d105      	bne.n	80051be <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	011a      	lsls	r2, r3, #4
 80051b6:	4b0f      	ldr	r3, [pc, #60]	@ (80051f4 <HAL_EXTI_IRQHandler+0x70>)
 80051b8:	4413      	add	r3, r2
 80051ba:	617b      	str	r3, [r7, #20]
 80051bc:	e004      	b.n	80051c8 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	011a      	lsls	r2, r3, #4
 80051c2:	4b0d      	ldr	r3, [pc, #52]	@ (80051f8 <HAL_EXTI_IRQHandler+0x74>)
 80051c4:	4413      	add	r3, r2
 80051c6:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4013      	ands	r3, r2
 80051d0:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d009      	beq.n	80051ec <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	4798      	blx	r3
    }
  }
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	58000088 	.word	0x58000088
 80051f8:	580000c8 	.word	0x580000c8

080051fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b089      	sub	sp, #36	@ 0x24
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800520a:	4b89      	ldr	r3, [pc, #548]	@ (8005430 <HAL_GPIO_Init+0x234>)
 800520c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800520e:	e194      	b.n	800553a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	2101      	movs	r1, #1
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	fa01 f303 	lsl.w	r3, r1, r3
 800521c:	4013      	ands	r3, r2
 800521e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	2b00      	cmp	r3, #0
 8005224:	f000 8186 	beq.w	8005534 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	f003 0303 	and.w	r3, r3, #3
 8005230:	2b01      	cmp	r3, #1
 8005232:	d005      	beq.n	8005240 <HAL_GPIO_Init+0x44>
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0303 	and.w	r3, r3, #3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d130      	bne.n	80052a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	2203      	movs	r2, #3
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	68da      	ldr	r2, [r3, #12]
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	005b      	lsls	r3, r3, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	4313      	orrs	r3, r2
 8005268:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005276:	2201      	movs	r2, #1
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	43db      	mvns	r3, r3
 8005280:	69ba      	ldr	r2, [r7, #24]
 8005282:	4013      	ands	r3, r2
 8005284:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	091b      	lsrs	r3, r3, #4
 800528c:	f003 0201 	and.w	r2, r3, #1
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	fa02 f303 	lsl.w	r3, r2, r3
 8005296:	69ba      	ldr	r2, [r7, #24]
 8005298:	4313      	orrs	r3, r2
 800529a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69ba      	ldr	r2, [r7, #24]
 80052a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	d017      	beq.n	80052de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	2203      	movs	r2, #3
 80052ba:	fa02 f303 	lsl.w	r3, r2, r3
 80052be:	43db      	mvns	r3, r3
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	4013      	ands	r3, r2
 80052c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	69ba      	ldr	r2, [r7, #24]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69ba      	ldr	r2, [r7, #24]
 80052dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f003 0303 	and.w	r3, r3, #3
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	d123      	bne.n	8005332 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	08da      	lsrs	r2, r3, #3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	3208      	adds	r2, #8
 80052f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	f003 0307 	and.w	r3, r3, #7
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	220f      	movs	r2, #15
 8005302:	fa02 f303 	lsl.w	r3, r2, r3
 8005306:	43db      	mvns	r3, r3
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	4013      	ands	r3, r2
 800530c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	691a      	ldr	r2, [r3, #16]
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	fa02 f303 	lsl.w	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	4313      	orrs	r3, r2
 8005322:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	08da      	lsrs	r2, r3, #3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	3208      	adds	r2, #8
 800532c:	69b9      	ldr	r1, [r7, #24]
 800532e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005338:	69fb      	ldr	r3, [r7, #28]
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	2203      	movs	r2, #3
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	43db      	mvns	r3, r3
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	4013      	ands	r3, r2
 8005348:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	f003 0203 	and.w	r2, r3, #3
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	fa02 f303 	lsl.w	r3, r2, r3
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	4313      	orrs	r3, r2
 800535e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	69ba      	ldr	r2, [r7, #24]
 8005364:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800536e:	2b00      	cmp	r3, #0
 8005370:	f000 80e0 	beq.w	8005534 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005374:	4b2f      	ldr	r3, [pc, #188]	@ (8005434 <HAL_GPIO_Init+0x238>)
 8005376:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800537a:	4a2e      	ldr	r2, [pc, #184]	@ (8005434 <HAL_GPIO_Init+0x238>)
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005384:	4b2b      	ldr	r3, [pc, #172]	@ (8005434 <HAL_GPIO_Init+0x238>)
 8005386:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800538a:	f003 0302 	and.w	r3, r3, #2
 800538e:	60fb      	str	r3, [r7, #12]
 8005390:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005392:	4a29      	ldr	r2, [pc, #164]	@ (8005438 <HAL_GPIO_Init+0x23c>)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	089b      	lsrs	r3, r3, #2
 8005398:	3302      	adds	r3, #2
 800539a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	220f      	movs	r2, #15
 80053aa:	fa02 f303 	lsl.w	r3, r2, r3
 80053ae:	43db      	mvns	r3, r3
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	4013      	ands	r3, r2
 80053b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a20      	ldr	r2, [pc, #128]	@ (800543c <HAL_GPIO_Init+0x240>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d052      	beq.n	8005464 <HAL_GPIO_Init+0x268>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005440 <HAL_GPIO_Init+0x244>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d031      	beq.n	800542a <HAL_GPIO_Init+0x22e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a1e      	ldr	r2, [pc, #120]	@ (8005444 <HAL_GPIO_Init+0x248>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d02b      	beq.n	8005426 <HAL_GPIO_Init+0x22a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a1d      	ldr	r2, [pc, #116]	@ (8005448 <HAL_GPIO_Init+0x24c>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d025      	beq.n	8005422 <HAL_GPIO_Init+0x226>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	@ (800544c <HAL_GPIO_Init+0x250>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d01f      	beq.n	800541e <HAL_GPIO_Init+0x222>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a1b      	ldr	r2, [pc, #108]	@ (8005450 <HAL_GPIO_Init+0x254>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d019      	beq.n	800541a <HAL_GPIO_Init+0x21e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a1a      	ldr	r2, [pc, #104]	@ (8005454 <HAL_GPIO_Init+0x258>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_GPIO_Init+0x21a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a19      	ldr	r2, [pc, #100]	@ (8005458 <HAL_GPIO_Init+0x25c>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00d      	beq.n	8005412 <HAL_GPIO_Init+0x216>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a18      	ldr	r2, [pc, #96]	@ (800545c <HAL_GPIO_Init+0x260>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <HAL_GPIO_Init+0x212>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a17      	ldr	r2, [pc, #92]	@ (8005460 <HAL_GPIO_Init+0x264>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <HAL_GPIO_Init+0x20e>
 8005406:	2309      	movs	r3, #9
 8005408:	e02d      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800540a:	230a      	movs	r3, #10
 800540c:	e02b      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800540e:	2308      	movs	r3, #8
 8005410:	e029      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 8005412:	2307      	movs	r3, #7
 8005414:	e027      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 8005416:	2306      	movs	r3, #6
 8005418:	e025      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800541a:	2305      	movs	r3, #5
 800541c:	e023      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800541e:	2304      	movs	r3, #4
 8005420:	e021      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 8005422:	2303      	movs	r3, #3
 8005424:	e01f      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 8005426:	2302      	movs	r3, #2
 8005428:	e01d      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800542a:	2301      	movs	r3, #1
 800542c:	e01b      	b.n	8005466 <HAL_GPIO_Init+0x26a>
 800542e:	bf00      	nop
 8005430:	58000080 	.word	0x58000080
 8005434:	58024400 	.word	0x58024400
 8005438:	58000400 	.word	0x58000400
 800543c:	58020000 	.word	0x58020000
 8005440:	58020400 	.word	0x58020400
 8005444:	58020800 	.word	0x58020800
 8005448:	58020c00 	.word	0x58020c00
 800544c:	58021000 	.word	0x58021000
 8005450:	58021400 	.word	0x58021400
 8005454:	58021800 	.word	0x58021800
 8005458:	58021c00 	.word	0x58021c00
 800545c:	58022000 	.word	0x58022000
 8005460:	58022400 	.word	0x58022400
 8005464:	2300      	movs	r3, #0
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	f002 0203 	and.w	r2, r2, #3
 800546c:	0092      	lsls	r2, r2, #2
 800546e:	4093      	lsls	r3, r2
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	4313      	orrs	r3, r2
 8005474:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005476:	4938      	ldr	r1, [pc, #224]	@ (8005558 <HAL_GPIO_Init+0x35c>)
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	089b      	lsrs	r3, r3, #2
 800547c:	3302      	adds	r3, #2
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005484:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	43db      	mvns	r3, r3
 8005490:	69ba      	ldr	r2, [r7, #24]
 8005492:	4013      	ands	r3, r2
 8005494:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80054a2:	69ba      	ldr	r2, [r7, #24]
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80054aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054ae:	69bb      	ldr	r3, [r7, #24]
 80054b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80054b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	43db      	mvns	r3, r3
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	4013      	ands	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80054d0:	69ba      	ldr	r2, [r7, #24]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80054d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	43db      	mvns	r3, r3
 80054ea:	69ba      	ldr	r2, [r7, #24]
 80054ec:	4013      	ands	r3, r2
 80054ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d003      	beq.n	8005504 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4313      	orrs	r3, r2
 8005502:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	69ba      	ldr	r2, [r7, #24]
 8005508:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	43db      	mvns	r3, r3
 8005514:	69ba      	ldr	r2, [r7, #24]
 8005516:	4013      	ands	r3, r2
 8005518:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d003      	beq.n	800552e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005526:	69ba      	ldr	r2, [r7, #24]
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	4313      	orrs	r3, r2
 800552c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	69ba      	ldr	r2, [r7, #24]
 8005532:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	3301      	adds	r3, #1
 8005538:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	fa22 f303 	lsr.w	r3, r2, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	f47f ae63 	bne.w	8005210 <HAL_GPIO_Init+0x14>
  }
}
 800554a:	bf00      	nop
 800554c:	bf00      	nop
 800554e:	3724      	adds	r7, #36	@ 0x24
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	58000400 	.word	0x58000400

0800555c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	460b      	mov	r3, r1
 8005566:	807b      	strh	r3, [r7, #2]
 8005568:	4613      	mov	r3, r2
 800556a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800556c:	787b      	ldrb	r3, [r7, #1]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d003      	beq.n	800557a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005572:	887a      	ldrh	r2, [r7, #2]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005578:	e003      	b.n	8005582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800557a:	887b      	ldrh	r3, [r7, #2]
 800557c:	041a      	lsls	r2, r3, #16
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	619a      	str	r2, [r3, #24]
}
 8005582:	bf00      	nop
 8005584:	370c      	adds	r7, #12
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005598:	4a08      	ldr	r2, [pc, #32]	@ (80055bc <HAL_HSEM_FastTake+0x2c>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3320      	adds	r3, #32
 800559e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055a2:	4a07      	ldr	r2, [pc, #28]	@ (80055c0 <HAL_HSEM_FastTake+0x30>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d101      	bne.n	80055ac <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80055a8:	2300      	movs	r3, #0
 80055aa:	e000      	b.n	80055ae <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80055ac:	2301      	movs	r3, #1
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	58026400 	.word	0x58026400
 80055c0:	80000300 	.word	0x80000300

080055c4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80055ce:	4906      	ldr	r1, [pc, #24]	@ (80055e8 <HAL_HSEM_Release+0x24>)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e6:	4770      	bx	lr
 80055e8:	58026400 	.word	0x58026400

080055ec <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80055f4:	4b29      	ldr	r3, [pc, #164]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	2b06      	cmp	r3, #6
 80055fe:	d00a      	beq.n	8005616 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005600:	4b26      	ldr	r3, [pc, #152]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	429a      	cmp	r2, r3
 800560c:	d001      	beq.n	8005612 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e040      	b.n	8005694 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005612:	2300      	movs	r3, #0
 8005614:	e03e      	b.n	8005694 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005616:	4b21      	ldr	r3, [pc, #132]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800561e:	491f      	ldr	r1, [pc, #124]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4313      	orrs	r3, r2
 8005624:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005626:	f7fc fe31 	bl	800228c <HAL_GetTick>
 800562a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800562c:	e009      	b.n	8005642 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800562e:	f7fc fe2d 	bl	800228c <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800563c:	d901      	bls.n	8005642 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e028      	b.n	8005694 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005642:	4b16      	ldr	r3, [pc, #88]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800564a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800564e:	d1ee      	bne.n	800562e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b1e      	cmp	r3, #30
 8005654:	d008      	beq.n	8005668 <HAL_PWREx_ConfigSupply+0x7c>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b2e      	cmp	r3, #46	@ 0x2e
 800565a:	d005      	beq.n	8005668 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2b1d      	cmp	r3, #29
 8005660:	d002      	beq.n	8005668 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2b2d      	cmp	r3, #45	@ 0x2d
 8005666:	d114      	bne.n	8005692 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005668:	f7fc fe10 	bl	800228c <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800566e:	e009      	b.n	8005684 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005670:	f7fc fe0c 	bl	800228c <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800567e:	d901      	bls.n	8005684 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	e007      	b.n	8005694 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005684:	4b05      	ldr	r3, [pc, #20]	@ (800569c <HAL_PWREx_ConfigSupply+0xb0>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800568c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005690:	d1ee      	bne.n	8005670 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	58024800 	.word	0x58024800

080056a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b08c      	sub	sp, #48	@ 0x30
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d102      	bne.n	80056b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	f000 bc48 	b.w	8005f44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	f000 8088 	beq.w	80057d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056c2:	4b99      	ldr	r3, [pc, #612]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80056ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80056cc:	4b96      	ldr	r3, [pc, #600]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80056ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80056d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d4:	2b10      	cmp	r3, #16
 80056d6:	d007      	beq.n	80056e8 <HAL_RCC_OscConfig+0x48>
 80056d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056da:	2b18      	cmp	r3, #24
 80056dc:	d111      	bne.n	8005702 <HAL_RCC_OscConfig+0x62>
 80056de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e0:	f003 0303 	and.w	r3, r3, #3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d10c      	bne.n	8005702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e8:	4b8f      	ldr	r3, [pc, #572]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d06d      	beq.n	80057d0 <HAL_RCC_OscConfig+0x130>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d169      	bne.n	80057d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80056fc:	2301      	movs	r3, #1
 80056fe:	f000 bc21 	b.w	8005f44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800570a:	d106      	bne.n	800571a <HAL_RCC_OscConfig+0x7a>
 800570c:	4b86      	ldr	r3, [pc, #536]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a85      	ldr	r2, [pc, #532]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	e02e      	b.n	8005778 <HAL_RCC_OscConfig+0xd8>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10c      	bne.n	800573c <HAL_RCC_OscConfig+0x9c>
 8005722:	4b81      	ldr	r3, [pc, #516]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a80      	ldr	r2, [pc, #512]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	4b7e      	ldr	r3, [pc, #504]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a7d      	ldr	r2, [pc, #500]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005738:	6013      	str	r3, [r2, #0]
 800573a:	e01d      	b.n	8005778 <HAL_RCC_OscConfig+0xd8>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005744:	d10c      	bne.n	8005760 <HAL_RCC_OscConfig+0xc0>
 8005746:	4b78      	ldr	r3, [pc, #480]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a77      	ldr	r2, [pc, #476]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800574c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005750:	6013      	str	r3, [r2, #0]
 8005752:	4b75      	ldr	r3, [pc, #468]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a74      	ldr	r2, [pc, #464]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800575c:	6013      	str	r3, [r2, #0]
 800575e:	e00b      	b.n	8005778 <HAL_RCC_OscConfig+0xd8>
 8005760:	4b71      	ldr	r3, [pc, #452]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a70      	ldr	r2, [pc, #448]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800576a:	6013      	str	r3, [r2, #0]
 800576c:	4b6e      	ldr	r3, [pc, #440]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a6d      	ldr	r2, [pc, #436]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d013      	beq.n	80057a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fd84 	bl	800228c <HAL_GetTick>
 8005784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fc fd80 	bl	800228c <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	@ 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e3d4      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800579a:	4b63      	ldr	r3, [pc, #396]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0xe8>
 80057a6:	e014      	b.n	80057d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7fc fd70 	bl	800228c <HAL_GetTick>
 80057ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b0:	f7fc fd6c 	bl	800228c <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b64      	cmp	r3, #100	@ 0x64
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e3c0      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80057c2:	4b59      	ldr	r3, [pc, #356]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x110>
 80057ce:	e000      	b.n	80057d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f003 0302 	and.w	r3, r3, #2
 80057da:	2b00      	cmp	r3, #0
 80057dc:	f000 80ca 	beq.w	8005974 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e0:	4b51      	ldr	r3, [pc, #324]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80057e2:	691b      	ldr	r3, [r3, #16]
 80057e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80057ea:	4b4f      	ldr	r3, [pc, #316]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80057ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80057f0:	6a3b      	ldr	r3, [r7, #32]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d007      	beq.n	8005806 <HAL_RCC_OscConfig+0x166>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2b18      	cmp	r3, #24
 80057fa:	d156      	bne.n	80058aa <HAL_RCC_OscConfig+0x20a>
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	f003 0303 	and.w	r3, r3, #3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d151      	bne.n	80058aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005806:	4b48      	ldr	r3, [pc, #288]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 0304 	and.w	r3, r3, #4
 800580e:	2b00      	cmp	r3, #0
 8005810:	d005      	beq.n	800581e <HAL_RCC_OscConfig+0x17e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e392      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800581e:	4b42      	ldr	r3, [pc, #264]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f023 0219 	bic.w	r2, r3, #25
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	493f      	ldr	r1, [pc, #252]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800582c:	4313      	orrs	r3, r2
 800582e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005830:	f7fc fd2c 	bl	800228c <HAL_GetTick>
 8005834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005836:	e008      	b.n	800584a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005838:	f7fc fd28 	bl	800228c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b02      	cmp	r3, #2
 8005844:	d901      	bls.n	800584a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	e37c      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800584a:	4b37      	ldr	r3, [pc, #220]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0304 	and.w	r3, r3, #4
 8005852:	2b00      	cmp	r3, #0
 8005854:	d0f0      	beq.n	8005838 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005856:	f7fc fd25 	bl	80022a4 <HAL_GetREVID>
 800585a:	4603      	mov	r3, r0
 800585c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005860:	4293      	cmp	r3, r2
 8005862:	d817      	bhi.n	8005894 <HAL_RCC_OscConfig+0x1f4>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b40      	cmp	r3, #64	@ 0x40
 800586a:	d108      	bne.n	800587e <HAL_RCC_OscConfig+0x1de>
 800586c:	4b2e      	ldr	r3, [pc, #184]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005874:	4a2c      	ldr	r2, [pc, #176]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800587a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800587c:	e07a      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800587e:	4b2a      	ldr	r3, [pc, #168]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005880:	685b      	ldr	r3, [r3, #4]
 8005882:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	031b      	lsls	r3, r3, #12
 800588c:	4926      	ldr	r1, [pc, #152]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800588e:	4313      	orrs	r3, r2
 8005890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005892:	e06f      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005894:	4b24      	ldr	r3, [pc, #144]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	061b      	lsls	r3, r3, #24
 80058a2:	4921      	ldr	r1, [pc, #132]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80058a4:	4313      	orrs	r3, r2
 80058a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058a8:	e064      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	68db      	ldr	r3, [r3, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d047      	beq.n	8005942 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058b2:	4b1d      	ldr	r3, [pc, #116]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 0219 	bic.w	r2, r3, #25
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	491a      	ldr	r1, [pc, #104]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80058c0:	4313      	orrs	r3, r2
 80058c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fc fce2 	bl	800228c <HAL_GetTick>
 80058c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058cc:	f7fc fcde 	bl	800228c <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e332      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058de:	4b12      	ldr	r3, [pc, #72]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 0304 	and.w	r3, r3, #4
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058ea:	f7fc fcdb 	bl	80022a4 <HAL_GetREVID>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d819      	bhi.n	800592c <HAL_RCC_OscConfig+0x28c>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	691b      	ldr	r3, [r3, #16]
 80058fc:	2b40      	cmp	r3, #64	@ 0x40
 80058fe:	d108      	bne.n	8005912 <HAL_RCC_OscConfig+0x272>
 8005900:	4b09      	ldr	r3, [pc, #36]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005908:	4a07      	ldr	r2, [pc, #28]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 800590a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800590e:	6053      	str	r3, [r2, #4]
 8005910:	e030      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
 8005912:	4b05      	ldr	r3, [pc, #20]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	691b      	ldr	r3, [r3, #16]
 800591e:	031b      	lsls	r3, r3, #12
 8005920:	4901      	ldr	r1, [pc, #4]	@ (8005928 <HAL_RCC_OscConfig+0x288>)
 8005922:	4313      	orrs	r3, r2
 8005924:	604b      	str	r3, [r1, #4]
 8005926:	e025      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
 8005928:	58024400 	.word	0x58024400
 800592c:	4b9a      	ldr	r3, [pc, #616]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	4997      	ldr	r1, [pc, #604]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 800593c:	4313      	orrs	r3, r2
 800593e:	604b      	str	r3, [r1, #4]
 8005940:	e018      	b.n	8005974 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005942:	4b95      	ldr	r3, [pc, #596]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a94      	ldr	r2, [pc, #592]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005948:	f023 0301 	bic.w	r3, r3, #1
 800594c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800594e:	f7fc fc9d 	bl	800228c <HAL_GetTick>
 8005952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005954:	e008      	b.n	8005968 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005956:	f7fc fc99 	bl	800228c <HAL_GetTick>
 800595a:	4602      	mov	r2, r0
 800595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800595e:	1ad3      	subs	r3, r2, r3
 8005960:	2b02      	cmp	r3, #2
 8005962:	d901      	bls.n	8005968 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005964:	2303      	movs	r3, #3
 8005966:	e2ed      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005968:	4b8b      	ldr	r3, [pc, #556]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0304 	and.w	r3, r3, #4
 8005970:	2b00      	cmp	r3, #0
 8005972:	d1f0      	bne.n	8005956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f003 0310 	and.w	r3, r3, #16
 800597c:	2b00      	cmp	r3, #0
 800597e:	f000 80a9 	beq.w	8005ad4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005982:	4b85      	ldr	r3, [pc, #532]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005984:	691b      	ldr	r3, [r3, #16]
 8005986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800598a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800598c:	4b82      	ldr	r3, [pc, #520]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 800598e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005990:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005992:	69bb      	ldr	r3, [r7, #24]
 8005994:	2b08      	cmp	r3, #8
 8005996:	d007      	beq.n	80059a8 <HAL_RCC_OscConfig+0x308>
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	2b18      	cmp	r3, #24
 800599c:	d13a      	bne.n	8005a14 <HAL_RCC_OscConfig+0x374>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f003 0303 	and.w	r3, r3, #3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d135      	bne.n	8005a14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d005      	beq.n	80059c0 <HAL_RCC_OscConfig+0x320>
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	2b80      	cmp	r3, #128	@ 0x80
 80059ba:	d001      	beq.n	80059c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e2c1      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059c0:	f7fc fc70 	bl	80022a4 <HAL_GetREVID>
 80059c4:	4603      	mov	r3, r0
 80059c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d817      	bhi.n	80059fe <HAL_RCC_OscConfig+0x35e>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d108      	bne.n	80059e8 <HAL_RCC_OscConfig+0x348>
 80059d6:	4b70      	ldr	r3, [pc, #448]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80059de:	4a6e      	ldr	r2, [pc, #440]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 80059e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80059e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059e6:	e075      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059e8:	4b6b      	ldr	r3, [pc, #428]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a1b      	ldr	r3, [r3, #32]
 80059f4:	069b      	lsls	r3, r3, #26
 80059f6:	4968      	ldr	r1, [pc, #416]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 80059f8:	4313      	orrs	r3, r2
 80059fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80059fc:	e06a      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80059fe:	4b66      	ldr	r3, [pc, #408]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6a1b      	ldr	r3, [r3, #32]
 8005a0a:	061b      	lsls	r3, r3, #24
 8005a0c:	4962      	ldr	r1, [pc, #392]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a12:	e05f      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d042      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a5d      	ldr	r2, [pc, #372]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a28:	f7fc fc30 	bl	800228c <HAL_GetTick>
 8005a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005a30:	f7fc fc2c 	bl	800228c <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e280      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a42:	4b55      	ldr	r3, [pc, #340]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a4e:	f7fc fc29 	bl	80022a4 <HAL_GetREVID>
 8005a52:	4603      	mov	r3, r0
 8005a54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d817      	bhi.n	8005a8c <HAL_RCC_OscConfig+0x3ec>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	2b20      	cmp	r3, #32
 8005a62:	d108      	bne.n	8005a76 <HAL_RCC_OscConfig+0x3d6>
 8005a64:	4b4c      	ldr	r3, [pc, #304]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005a72:	6053      	str	r3, [r2, #4]
 8005a74:	e02e      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
 8005a76:	4b48      	ldr	r3, [pc, #288]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a78:	685b      	ldr	r3, [r3, #4]
 8005a7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	069b      	lsls	r3, r3, #26
 8005a84:	4944      	ldr	r1, [pc, #272]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a86:	4313      	orrs	r3, r2
 8005a88:	604b      	str	r3, [r1, #4]
 8005a8a:	e023      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
 8005a8c:	4b42      	ldr	r3, [pc, #264]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	061b      	lsls	r3, r3, #24
 8005a9a:	493f      	ldr	r1, [pc, #252]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60cb      	str	r3, [r1, #12]
 8005aa0:	e018      	b.n	8005ad4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fc fbed 	bl	800228c <HAL_GetTick>
 8005ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005ab6:	f7fc fbe9 	bl	800228c <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b02      	cmp	r3, #2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e23d      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005ac8:	4b33      	ldr	r3, [pc, #204]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d036      	beq.n	8005b4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d019      	beq.n	8005b1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aec:	4a2a      	ldr	r2, [pc, #168]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005aee:	f043 0301 	orr.w	r3, r3, #1
 8005af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af4:	f7fc fbca 	bl	800228c <HAL_GetTick>
 8005af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005afa:	e008      	b.n	8005b0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005afc:	f7fc fbc6 	bl	800228c <HAL_GetTick>
 8005b00:	4602      	mov	r2, r0
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	1ad3      	subs	r3, r2, r3
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d901      	bls.n	8005b0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e21a      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005b0e:	4b22      	ldr	r3, [pc, #136]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b12:	f003 0302 	and.w	r3, r3, #2
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d0f0      	beq.n	8005afc <HAL_RCC_OscConfig+0x45c>
 8005b1a:	e018      	b.n	8005b4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b20:	4a1d      	ldr	r2, [pc, #116]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fc fbb0 	bl	800228c <HAL_GetTick>
 8005b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fc fbac 	bl	800228c <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e200      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005b42:	4b15      	ldr	r3, [pc, #84]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1f0      	bne.n	8005b30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f003 0320 	and.w	r3, r3, #32
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d039      	beq.n	8005bce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01c      	beq.n	8005b9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005b62:	4b0d      	ldr	r3, [pc, #52]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a0c      	ldr	r2, [pc, #48]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005b6e:	f7fc fb8d 	bl	800228c <HAL_GetTick>
 8005b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b74:	e008      	b.n	8005b88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005b76:	f7fc fb89 	bl	800228c <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d901      	bls.n	8005b88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e1dd      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005b88:	4b03      	ldr	r3, [pc, #12]	@ (8005b98 <HAL_RCC_OscConfig+0x4f8>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0f0      	beq.n	8005b76 <HAL_RCC_OscConfig+0x4d6>
 8005b94:	e01b      	b.n	8005bce <HAL_RCC_OscConfig+0x52e>
 8005b96:	bf00      	nop
 8005b98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a9a      	ldr	r2, [pc, #616]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ba8:	f7fc fb70 	bl	800228c <HAL_GetTick>
 8005bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bae:	e008      	b.n	8005bc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005bb0:	f7fc fb6c 	bl	800228c <HAL_GetTick>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb8:	1ad3      	subs	r3, r2, r3
 8005bba:	2b02      	cmp	r3, #2
 8005bbc:	d901      	bls.n	8005bc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005bbe:	2303      	movs	r3, #3
 8005bc0:	e1c0      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005bc2:	4b92      	ldr	r3, [pc, #584]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f0      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f003 0304 	and.w	r3, r3, #4
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8081 	beq.w	8005cde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8005e10 <HAL_RCC_OscConfig+0x770>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a8b      	ldr	r2, [pc, #556]	@ (8005e10 <HAL_RCC_OscConfig+0x770>)
 8005be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005be8:	f7fc fb50 	bl	800228c <HAL_GetTick>
 8005bec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bf0:	f7fc fb4c 	bl	800228c <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b64      	cmp	r3, #100	@ 0x64
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e1a0      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c02:	4b83      	ldr	r3, [pc, #524]	@ (8005e10 <HAL_RCC_OscConfig+0x770>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d0f0      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d106      	bne.n	8005c24 <HAL_RCC_OscConfig+0x584>
 8005c16:	4b7d      	ldr	r3, [pc, #500]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c1c:	f043 0301 	orr.w	r3, r3, #1
 8005c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c22:	e02d      	b.n	8005c80 <HAL_RCC_OscConfig+0x5e0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10c      	bne.n	8005c46 <HAL_RCC_OscConfig+0x5a6>
 8005c2c:	4b77      	ldr	r3, [pc, #476]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c30:	4a76      	ldr	r2, [pc, #472]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c32:	f023 0301 	bic.w	r3, r3, #1
 8005c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c38:	4b74      	ldr	r3, [pc, #464]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c3c:	4a73      	ldr	r2, [pc, #460]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c3e:	f023 0304 	bic.w	r3, r3, #4
 8005c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c44:	e01c      	b.n	8005c80 <HAL_RCC_OscConfig+0x5e0>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2b05      	cmp	r3, #5
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCC_OscConfig+0x5c8>
 8005c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c52:	4a6e      	ldr	r2, [pc, #440]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c54:	f043 0304 	orr.w	r3, r3, #4
 8005c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c60:	f043 0301 	orr.w	r3, r3, #1
 8005c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c66:	e00b      	b.n	8005c80 <HAL_RCC_OscConfig+0x5e0>
 8005c68:	4b68      	ldr	r3, [pc, #416]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c6c:	4a67      	ldr	r2, [pc, #412]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c6e:	f023 0301 	bic.w	r3, r3, #1
 8005c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c74:	4b65      	ldr	r3, [pc, #404]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	4a64      	ldr	r2, [pc, #400]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005c7a:	f023 0304 	bic.w	r3, r3, #4
 8005c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d015      	beq.n	8005cb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c88:	f7fc fb00 	bl	800228c <HAL_GetTick>
 8005c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fc fafc 	bl	800228c <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e14e      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ca6:	4b59      	ldr	r3, [pc, #356]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d0ee      	beq.n	8005c90 <HAL_RCC_OscConfig+0x5f0>
 8005cb2:	e014      	b.n	8005cde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005cb4:	f7fc faea 	bl	800228c <HAL_GetTick>
 8005cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cba:	e00a      	b.n	8005cd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cbc:	f7fc fae6 	bl	800228c <HAL_GetTick>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d901      	bls.n	8005cd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	e138      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d1ee      	bne.n	8005cbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 812d 	beq.w	8005f42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005ce8:	4b48      	ldr	r3, [pc, #288]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cf0:	2b18      	cmp	r3, #24
 8005cf2:	f000 80bd 	beq.w	8005e70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	f040 809e 	bne.w	8005e3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d00:	4b42      	ldr	r3, [pc, #264]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a41      	ldr	r2, [pc, #260]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fc fabe 	bl	800228c <HAL_GetTick>
 8005d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d14:	f7fc faba 	bl	800228c <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e10e      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d26:	4b39      	ldr	r3, [pc, #228]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d32:	4b36      	ldr	r3, [pc, #216]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005d36:	4b37      	ldr	r3, [pc, #220]	@ (8005e14 <HAL_RCC_OscConfig+0x774>)
 8005d38:	4013      	ands	r3, r2
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005d42:	0112      	lsls	r2, r2, #4
 8005d44:	430a      	orrs	r2, r1
 8005d46:	4931      	ldr	r1, [pc, #196]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d50:	3b01      	subs	r3, #1
 8005d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	025b      	lsls	r3, r3, #9
 8005d5e:	b29b      	uxth	r3, r3
 8005d60:	431a      	orrs	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d66:	3b01      	subs	r3, #1
 8005d68:	041b      	lsls	r3, r3, #16
 8005d6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d6e:	431a      	orrs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d74:	3b01      	subs	r3, #1
 8005d76:	061b      	lsls	r3, r3, #24
 8005d78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d7c:	4923      	ldr	r1, [pc, #140]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8005d82:	4b22      	ldr	r3, [pc, #136]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d86:	4a21      	ldr	r2, [pc, #132]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d88:	f023 0301 	bic.w	r3, r3, #1
 8005d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d92:	4b21      	ldr	r3, [pc, #132]	@ (8005e18 <HAL_RCC_OscConfig+0x778>)
 8005d94:	4013      	ands	r3, r2
 8005d96:	687a      	ldr	r2, [r7, #4]
 8005d98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005d9a:	00d2      	lsls	r2, r2, #3
 8005d9c:	491b      	ldr	r1, [pc, #108]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005da2:	4b1a      	ldr	r3, [pc, #104]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da6:	f023 020c 	bic.w	r2, r3, #12
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dae:	4917      	ldr	r1, [pc, #92]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005db0:	4313      	orrs	r3, r2
 8005db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005db4:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db8:	f023 0202 	bic.w	r2, r3, #2
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dc0:	4912      	ldr	r1, [pc, #72]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005dc6:	4b11      	ldr	r3, [pc, #68]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dca:	4a10      	ldr	r2, [pc, #64]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005dde:	4b0b      	ldr	r3, [pc, #44]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de2:	4a0a      	ldr	r2, [pc, #40]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005dea:	4b08      	ldr	r3, [pc, #32]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dee:	4a07      	ldr	r2, [pc, #28]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005df0:	f043 0301 	orr.w	r3, r3, #1
 8005df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005df6:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a04      	ldr	r2, [pc, #16]	@ (8005e0c <HAL_RCC_OscConfig+0x76c>)
 8005dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e02:	f7fc fa43 	bl	800228c <HAL_GetTick>
 8005e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e08:	e011      	b.n	8005e2e <HAL_RCC_OscConfig+0x78e>
 8005e0a:	bf00      	nop
 8005e0c:	58024400 	.word	0x58024400
 8005e10:	58024800 	.word	0x58024800
 8005e14:	fffffc0c 	.word	0xfffffc0c
 8005e18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e1c:	f7fc fa36 	bl	800228c <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e08a      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005e2e:	4b47      	ldr	r3, [pc, #284]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d0f0      	beq.n	8005e1c <HAL_RCC_OscConfig+0x77c>
 8005e3a:	e082      	b.n	8005f42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e3c:	4b43      	ldr	r3, [pc, #268]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a42      	ldr	r2, [pc, #264]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e48:	f7fc fa20 	bl	800228c <HAL_GetTick>
 8005e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e50:	f7fc fa1c 	bl	800228c <HAL_GetTick>
 8005e54:	4602      	mov	r2, r0
 8005e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e070      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005e62:	4b3a      	ldr	r3, [pc, #232]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d1f0      	bne.n	8005e50 <HAL_RCC_OscConfig+0x7b0>
 8005e6e:	e068      	b.n	8005f42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005e70:	4b36      	ldr	r3, [pc, #216]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005e76:	4b35      	ldr	r3, [pc, #212]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d031      	beq.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	f003 0203 	and.w	r2, r3, #3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d12a      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	091b      	lsrs	r3, r3, #4
 8005e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d122      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d11a      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	0a5b      	lsrs	r3, r3, #9
 8005eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d111      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	0c1b      	lsrs	r3, r3, #16
 8005ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d108      	bne.n	8005ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	0e1b      	lsrs	r3, r3, #24
 8005eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ee2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d001      	beq.n	8005eec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005ee8:	2301      	movs	r3, #1
 8005eea:	e02b      	b.n	8005f44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8005eec:	4b17      	ldr	r3, [pc, #92]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ef0:	08db      	lsrs	r3, r3, #3
 8005ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ef6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005efc:	693a      	ldr	r2, [r7, #16]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d01f      	beq.n	8005f42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8005f02:	4b12      	ldr	r3, [pc, #72]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f06:	4a11      	ldr	r2, [pc, #68]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005f0e:	f7fc f9bd 	bl	800228c <HAL_GetTick>
 8005f12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8005f14:	bf00      	nop
 8005f16:	f7fc f9b9 	bl	800228c <HAL_GetTick>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d0f9      	beq.n	8005f16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005f22:	4b0a      	ldr	r3, [pc, #40]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f26:	4b0a      	ldr	r3, [pc, #40]	@ (8005f50 <HAL_RCC_OscConfig+0x8b0>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005f2e:	00d2      	lsls	r2, r2, #3
 8005f30:	4906      	ldr	r1, [pc, #24]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f32:	4313      	orrs	r3, r2
 8005f34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8005f36:	4b05      	ldr	r3, [pc, #20]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3a:	4a04      	ldr	r2, [pc, #16]	@ (8005f4c <HAL_RCC_OscConfig+0x8ac>)
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8005f42:	2300      	movs	r3, #0
}
 8005f44:	4618      	mov	r0, r3
 8005f46:	3730      	adds	r7, #48	@ 0x30
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	58024400 	.word	0x58024400
 8005f50:	ffff0007 	.word	0xffff0007

08005f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b086      	sub	sp, #24
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e19c      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f68:	4b8a      	ldr	r3, [pc, #552]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 030f 	and.w	r3, r3, #15
 8005f70:	683a      	ldr	r2, [r7, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d910      	bls.n	8005f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f76:	4b87      	ldr	r3, [pc, #540]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f023 020f 	bic.w	r2, r3, #15
 8005f7e:	4985      	ldr	r1, [pc, #532]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f86:	4b83      	ldr	r3, [pc, #524]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 030f 	and.w	r3, r3, #15
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d001      	beq.n	8005f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005f94:	2301      	movs	r3, #1
 8005f96:	e184      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0304 	and.w	r3, r3, #4
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d010      	beq.n	8005fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	4b7b      	ldr	r3, [pc, #492]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d908      	bls.n	8005fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005fb4:	4b78      	ldr	r3, [pc, #480]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	4975      	ldr	r1, [pc, #468]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0308 	and.w	r3, r3, #8
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d010      	beq.n	8005ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695a      	ldr	r2, [r3, #20]
 8005fd6:	4b70      	ldr	r3, [pc, #448]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005fd8:	69db      	ldr	r3, [r3, #28]
 8005fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d908      	bls.n	8005ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	496a      	ldr	r1, [pc, #424]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0310 	and.w	r3, r3, #16
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d010      	beq.n	8006022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	699a      	ldr	r2, [r3, #24]
 8006004:	4b64      	ldr	r3, [pc, #400]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006006:	69db      	ldr	r3, [r3, #28]
 8006008:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800600c:	429a      	cmp	r2, r3
 800600e:	d908      	bls.n	8006022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006010:	4b61      	ldr	r3, [pc, #388]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	495e      	ldr	r1, [pc, #376]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 800601e:	4313      	orrs	r3, r2
 8006020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d010      	beq.n	8006050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	69da      	ldr	r2, [r3, #28]
 8006032:	4b59      	ldr	r3, [pc, #356]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800603a:	429a      	cmp	r2, r3
 800603c:	d908      	bls.n	8006050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800603e:	4b56      	ldr	r3, [pc, #344]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4953      	ldr	r1, [pc, #332]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 800604c:	4313      	orrs	r3, r2
 800604e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f003 0302 	and.w	r3, r3, #2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d010      	beq.n	800607e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	4b4d      	ldr	r3, [pc, #308]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f003 030f 	and.w	r3, r3, #15
 8006068:	429a      	cmp	r2, r3
 800606a:	d908      	bls.n	800607e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800606c:	4b4a      	ldr	r3, [pc, #296]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f023 020f 	bic.w	r2, r3, #15
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4947      	ldr	r1, [pc, #284]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 800607a:	4313      	orrs	r3, r2
 800607c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d055      	beq.n	8006136 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 800608c:	699b      	ldr	r3, [r3, #24]
 800608e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	4940      	ldr	r1, [pc, #256]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006098:	4313      	orrs	r3, r2
 800609a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d107      	bne.n	80060b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060a4:	4b3c      	ldr	r3, [pc, #240]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d121      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e0f6      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2b03      	cmp	r3, #3
 80060ba:	d107      	bne.n	80060cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80060bc:	4b36      	ldr	r3, [pc, #216]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d115      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060c8:	2301      	movs	r3, #1
 80060ca:	e0ea      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	685b      	ldr	r3, [r3, #4]
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d107      	bne.n	80060e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80060d4:	4b30      	ldr	r3, [pc, #192]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e0de      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060e4:	4b2c      	ldr	r3, [pc, #176]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0304 	and.w	r3, r3, #4
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0d6      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80060f4:	4b28      	ldr	r3, [pc, #160]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f023 0207 	bic.w	r2, r3, #7
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	4925      	ldr	r1, [pc, #148]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006102:	4313      	orrs	r3, r2
 8006104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006106:	f7fc f8c1 	bl	800228c <HAL_GetTick>
 800610a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800610c:	e00a      	b.n	8006124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800610e:	f7fc f8bd 	bl	800228c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800611c:	4293      	cmp	r3, r2
 800611e:	d901      	bls.n	8006124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006120:	2303      	movs	r3, #3
 8006122:	e0be      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006124:	4b1c      	ldr	r3, [pc, #112]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	00db      	lsls	r3, r3, #3
 8006132:	429a      	cmp	r2, r3
 8006134:	d1eb      	bne.n	800610e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d010      	beq.n	8006164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	68da      	ldr	r2, [r3, #12]
 8006146:	4b14      	ldr	r3, [pc, #80]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006148:	699b      	ldr	r3, [r3, #24]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	429a      	cmp	r2, r3
 8006150:	d208      	bcs.n	8006164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006152:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	f023 020f 	bic.w	r2, r3, #15
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	490e      	ldr	r1, [pc, #56]	@ (8006198 <HAL_RCC_ClockConfig+0x244>)
 8006160:	4313      	orrs	r3, r2
 8006162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006164:	4b0b      	ldr	r3, [pc, #44]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	683a      	ldr	r2, [r7, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d214      	bcs.n	800619c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006172:	4b08      	ldr	r3, [pc, #32]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f023 020f 	bic.w	r2, r3, #15
 800617a:	4906      	ldr	r1, [pc, #24]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	4313      	orrs	r3, r2
 8006180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006182:	4b04      	ldr	r3, [pc, #16]	@ (8006194 <HAL_RCC_ClockConfig+0x240>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 030f 	and.w	r3, r3, #15
 800618a:	683a      	ldr	r2, [r7, #0]
 800618c:	429a      	cmp	r2, r3
 800618e:	d005      	beq.n	800619c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	e086      	b.n	80062a2 <HAL_RCC_ClockConfig+0x34e>
 8006194:	52002000 	.word	0x52002000
 8006198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d010      	beq.n	80061ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691a      	ldr	r2, [r3, #16]
 80061ac:	4b3f      	ldr	r3, [pc, #252]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d208      	bcs.n	80061ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80061b8:	4b3c      	ldr	r3, [pc, #240]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	4939      	ldr	r1, [pc, #228]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061c6:	4313      	orrs	r3, r2
 80061c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d010      	beq.n	80061f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	695a      	ldr	r2, [r3, #20]
 80061da:	4b34      	ldr	r3, [pc, #208]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061dc:	69db      	ldr	r3, [r3, #28]
 80061de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80061e2:	429a      	cmp	r2, r3
 80061e4:	d208      	bcs.n	80061f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80061e6:	4b31      	ldr	r3, [pc, #196]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061e8:	69db      	ldr	r3, [r3, #28]
 80061ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	695b      	ldr	r3, [r3, #20]
 80061f2:	492e      	ldr	r1, [pc, #184]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 80061f4:	4313      	orrs	r3, r2
 80061f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 0310 	and.w	r3, r3, #16
 8006200:	2b00      	cmp	r3, #0
 8006202:	d010      	beq.n	8006226 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	4b28      	ldr	r3, [pc, #160]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006210:	429a      	cmp	r2, r3
 8006212:	d208      	bcs.n	8006226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006214:	4b25      	ldr	r3, [pc, #148]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006216:	69db      	ldr	r3, [r3, #28]
 8006218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	699b      	ldr	r3, [r3, #24]
 8006220:	4922      	ldr	r1, [pc, #136]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006222:	4313      	orrs	r3, r2
 8006224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0320 	and.w	r3, r3, #32
 800622e:	2b00      	cmp	r3, #0
 8006230:	d010      	beq.n	8006254 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69da      	ldr	r2, [r3, #28]
 8006236:	4b1d      	ldr	r3, [pc, #116]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006238:	6a1b      	ldr	r3, [r3, #32]
 800623a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800623e:	429a      	cmp	r2, r3
 8006240:	d208      	bcs.n	8006254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006242:	4b1a      	ldr	r3, [pc, #104]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	69db      	ldr	r3, [r3, #28]
 800624e:	4917      	ldr	r1, [pc, #92]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006250:	4313      	orrs	r3, r2
 8006252:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006254:	f000 f834 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 8006258:	4602      	mov	r2, r0
 800625a:	4b14      	ldr	r3, [pc, #80]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	0a1b      	lsrs	r3, r3, #8
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	4912      	ldr	r1, [pc, #72]	@ (80062b0 <HAL_RCC_ClockConfig+0x35c>)
 8006266:	5ccb      	ldrb	r3, [r1, r3]
 8006268:	f003 031f 	and.w	r3, r3, #31
 800626c:	fa22 f303 	lsr.w	r3, r2, r3
 8006270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006272:	4b0e      	ldr	r3, [pc, #56]	@ (80062ac <HAL_RCC_ClockConfig+0x358>)
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	f003 030f 	and.w	r3, r3, #15
 800627a:	4a0d      	ldr	r2, [pc, #52]	@ (80062b0 <HAL_RCC_ClockConfig+0x35c>)
 800627c:	5cd3      	ldrb	r3, [r2, r3]
 800627e:	f003 031f 	and.w	r3, r3, #31
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	fa22 f303 	lsr.w	r3, r2, r3
 8006288:	4a0a      	ldr	r2, [pc, #40]	@ (80062b4 <HAL_RCC_ClockConfig+0x360>)
 800628a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800628c:	4a0a      	ldr	r2, [pc, #40]	@ (80062b8 <HAL_RCC_ClockConfig+0x364>)
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006292:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_RCC_ClockConfig+0x368>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4618      	mov	r0, r3
 8006298:	f7fb fcf4 	bl	8001c84 <HAL_InitTick>
 800629c:	4603      	mov	r3, r0
 800629e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3718      	adds	r7, #24
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	58024400 	.word	0x58024400
 80062b0:	08010088 	.word	0x08010088
 80062b4:	24000004 	.word	0x24000004
 80062b8:	24000000 	.word	0x24000000
 80062bc:	24000020 	.word	0x24000020

080062c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b089      	sub	sp, #36	@ 0x24
 80062c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c6:	4bb3      	ldr	r3, [pc, #716]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062c8:	691b      	ldr	r3, [r3, #16]
 80062ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80062ce:	2b18      	cmp	r3, #24
 80062d0:	f200 8155 	bhi.w	800657e <HAL_RCC_GetSysClockFreq+0x2be>
 80062d4:	a201      	add	r2, pc, #4	@ (adr r2, 80062dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	08006341 	.word	0x08006341
 80062e0:	0800657f 	.word	0x0800657f
 80062e4:	0800657f 	.word	0x0800657f
 80062e8:	0800657f 	.word	0x0800657f
 80062ec:	0800657f 	.word	0x0800657f
 80062f0:	0800657f 	.word	0x0800657f
 80062f4:	0800657f 	.word	0x0800657f
 80062f8:	0800657f 	.word	0x0800657f
 80062fc:	08006367 	.word	0x08006367
 8006300:	0800657f 	.word	0x0800657f
 8006304:	0800657f 	.word	0x0800657f
 8006308:	0800657f 	.word	0x0800657f
 800630c:	0800657f 	.word	0x0800657f
 8006310:	0800657f 	.word	0x0800657f
 8006314:	0800657f 	.word	0x0800657f
 8006318:	0800657f 	.word	0x0800657f
 800631c:	0800636d 	.word	0x0800636d
 8006320:	0800657f 	.word	0x0800657f
 8006324:	0800657f 	.word	0x0800657f
 8006328:	0800657f 	.word	0x0800657f
 800632c:	0800657f 	.word	0x0800657f
 8006330:	0800657f 	.word	0x0800657f
 8006334:	0800657f 	.word	0x0800657f
 8006338:	0800657f 	.word	0x0800657f
 800633c:	08006373 	.word	0x08006373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006340:	4b94      	ldr	r3, [pc, #592]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0320 	and.w	r3, r3, #32
 8006348:	2b00      	cmp	r3, #0
 800634a:	d009      	beq.n	8006360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800634c:	4b91      	ldr	r3, [pc, #580]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	08db      	lsrs	r3, r3, #3
 8006352:	f003 0303 	and.w	r3, r3, #3
 8006356:	4a90      	ldr	r2, [pc, #576]	@ (8006598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006358:	fa22 f303 	lsr.w	r3, r2, r3
 800635c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800635e:	e111      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006360:	4b8d      	ldr	r3, [pc, #564]	@ (8006598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006362:	61bb      	str	r3, [r7, #24]
      break;
 8006364:	e10e      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006366:	4b8d      	ldr	r3, [pc, #564]	@ (800659c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006368:	61bb      	str	r3, [r7, #24]
      break;
 800636a:	e10b      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800636c:	4b8c      	ldr	r3, [pc, #560]	@ (80065a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800636e:	61bb      	str	r3, [r7, #24]
      break;
 8006370:	e108      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006372:	4b88      	ldr	r3, [pc, #544]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800637c:	4b85      	ldr	r3, [pc, #532]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800637e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006380:	091b      	lsrs	r3, r3, #4
 8006382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006386:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006388:	4b82      	ldr	r3, [pc, #520]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006392:	4b80      	ldr	r3, [pc, #512]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006396:	08db      	lsrs	r3, r3, #3
 8006398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	fb02 f303 	mul.w	r3, r2, r3
 80063a2:	ee07 3a90 	vmov	s15, r3
 80063a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 80e1 	beq.w	8006578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	f000 8083 	beq.w	80064c4 <HAL_RCC_GetSysClockFreq+0x204>
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	f200 80a1 	bhi.w	8006508 <HAL_RCC_GetSysClockFreq+0x248>
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d003      	beq.n	80063d4 <HAL_RCC_GetSysClockFreq+0x114>
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d056      	beq.n	8006480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80063d2:	e099      	b.n	8006508 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063d4:	4b6f      	ldr	r3, [pc, #444]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d02d      	beq.n	800643c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80063e0:	4b6c      	ldr	r3, [pc, #432]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	08db      	lsrs	r3, r3, #3
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	4a6b      	ldr	r2, [pc, #428]	@ (8006598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063ec:	fa22 f303 	lsr.w	r3, r2, r3
 80063f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	ee07 3a90 	vmov	s15, r3
 80063f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800640a:	4b62      	ldr	r3, [pc, #392]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800640e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006412:	ee07 3a90 	vmov	s15, r3
 8006416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800641a:	ed97 6a02 	vldr	s12, [r7, #8]
 800641e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80065a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800642a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800642e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006436:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800643a:	e087      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	ee07 3a90 	vmov	s15, r3
 8006442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006446:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80065a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800644a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800644e:	4b51      	ldr	r3, [pc, #324]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006456:	ee07 3a90 	vmov	s15, r3
 800645a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006462:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80065a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800646a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800646e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800647e:	e065      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006480:	693b      	ldr	r3, [r7, #16]
 8006482:	ee07 3a90 	vmov	s15, r3
 8006486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800648a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80065ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800648e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006492:	4b40      	ldr	r3, [pc, #256]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800649a:	ee07 3a90 	vmov	s15, r3
 800649e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80065a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80064c2:	e043      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	ee07 3a90 	vmov	s15, r3
 80064ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80065b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80064d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80064ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80065a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80064fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006506:	e021      	b.n	800654c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	ee07 3a90 	vmov	s15, r3
 800650e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006512:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80065ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8006516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800651a:	4b1e      	ldr	r3, [pc, #120]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800651c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	ee07 3a90 	vmov	s15, r3
 8006526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800652a:	ed97 6a02 	vldr	s12, [r7, #8]
 800652e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80065a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800653a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800653e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800654a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800654c:	4b11      	ldr	r3, [pc, #68]	@ (8006594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800654e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006550:	0a5b      	lsrs	r3, r3, #9
 8006552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006556:	3301      	adds	r3, #1
 8006558:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	ee07 3a90 	vmov	s15, r3
 8006560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006564:	edd7 6a07 	vldr	s13, [r7, #28]
 8006568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800656c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006570:	ee17 3a90 	vmov	r3, s15
 8006574:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006576:	e005      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
      break;
 800657c:	e002      	b.n	8006584 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006580:	61bb      	str	r3, [r7, #24]
      break;
 8006582:	bf00      	nop
  }

  return sysclockfreq;
 8006584:	69bb      	ldr	r3, [r7, #24]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3724      	adds	r7, #36	@ 0x24
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr
 8006592:	bf00      	nop
 8006594:	58024400 	.word	0x58024400
 8006598:	03d09000 	.word	0x03d09000
 800659c:	003d0900 	.word	0x003d0900
 80065a0:	017d7840 	.word	0x017d7840
 80065a4:	46000000 	.word	0x46000000
 80065a8:	4c742400 	.word	0x4c742400
 80065ac:	4a742400 	.word	0x4a742400
 80065b0:	4bbebc20 	.word	0x4bbebc20

080065b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80065ba:	f7ff fe81 	bl	80062c0 <HAL_RCC_GetSysClockFreq>
 80065be:	4602      	mov	r2, r0
 80065c0:	4b10      	ldr	r3, [pc, #64]	@ (8006604 <HAL_RCC_GetHCLKFreq+0x50>)
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	0a1b      	lsrs	r3, r3, #8
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	490f      	ldr	r1, [pc, #60]	@ (8006608 <HAL_RCC_GetHCLKFreq+0x54>)
 80065cc:	5ccb      	ldrb	r3, [r1, r3]
 80065ce:	f003 031f 	and.w	r3, r3, #31
 80065d2:	fa22 f303 	lsr.w	r3, r2, r3
 80065d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <HAL_RCC_GetHCLKFreq+0x50>)
 80065da:	699b      	ldr	r3, [r3, #24]
 80065dc:	f003 030f 	and.w	r3, r3, #15
 80065e0:	4a09      	ldr	r2, [pc, #36]	@ (8006608 <HAL_RCC_GetHCLKFreq+0x54>)
 80065e2:	5cd3      	ldrb	r3, [r2, r3]
 80065e4:	f003 031f 	and.w	r3, r3, #31
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	fa22 f303 	lsr.w	r3, r2, r3
 80065ee:	4a07      	ldr	r2, [pc, #28]	@ (800660c <HAL_RCC_GetHCLKFreq+0x58>)
 80065f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80065f2:	4a07      	ldr	r2, [pc, #28]	@ (8006610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80065f8:	4b04      	ldr	r3, [pc, #16]	@ (800660c <HAL_RCC_GetHCLKFreq+0x58>)
 80065fa:	681b      	ldr	r3, [r3, #0]
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3708      	adds	r7, #8
 8006600:	46bd      	mov	sp, r7
 8006602:	bd80      	pop	{r7, pc}
 8006604:	58024400 	.word	0x58024400
 8006608:	08010088 	.word	0x08010088
 800660c:	24000004 	.word	0x24000004
 8006610:	24000000 	.word	0x24000000

08006614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006618:	f7ff ffcc 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 800661c:	4602      	mov	r2, r0
 800661e:	4b06      	ldr	r3, [pc, #24]	@ (8006638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006620:	69db      	ldr	r3, [r3, #28]
 8006622:	091b      	lsrs	r3, r3, #4
 8006624:	f003 0307 	and.w	r3, r3, #7
 8006628:	4904      	ldr	r1, [pc, #16]	@ (800663c <HAL_RCC_GetPCLK1Freq+0x28>)
 800662a:	5ccb      	ldrb	r3, [r1, r3]
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006634:	4618      	mov	r0, r3
 8006636:	bd80      	pop	{r7, pc}
 8006638:	58024400 	.word	0x58024400
 800663c:	08010088 	.word	0x08010088

08006640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006644:	f7ff ffb6 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 8006648:	4602      	mov	r2, r0
 800664a:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	0a1b      	lsrs	r3, r3, #8
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	4904      	ldr	r1, [pc, #16]	@ (8006668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006656:	5ccb      	ldrb	r3, [r1, r3]
 8006658:	f003 031f 	and.w	r3, r3, #31
 800665c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006660:	4618      	mov	r0, r3
 8006662:	bd80      	pop	{r7, pc}
 8006664:	58024400 	.word	0x58024400
 8006668:	08010088 	.word	0x08010088

0800666c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	223f      	movs	r2, #63	@ 0x3f
 800667a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800667c:	4b1a      	ldr	r3, [pc, #104]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	f003 0207 	and.w	r2, r3, #7
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8006688:	4b17      	ldr	r3, [pc, #92]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8006694:	4b14      	ldr	r3, [pc, #80]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 8006696:	699b      	ldr	r3, [r3, #24]
 8006698:	f003 020f 	and.w	r2, r3, #15
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80066a0:	4b11      	ldr	r3, [pc, #68]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80066ac:	4b0e      	ldr	r3, [pc, #56]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 80066ae:	69db      	ldr	r3, [r3, #28]
 80066b0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80066b8:	4b0b      	ldr	r3, [pc, #44]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80066c4:	4b08      	ldr	r3, [pc, #32]	@ (80066e8 <HAL_RCC_GetClockConfig+0x7c>)
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80066d0:	4b06      	ldr	r3, [pc, #24]	@ (80066ec <HAL_RCC_GetClockConfig+0x80>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 020f 	and.w	r2, r3, #15
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	601a      	str	r2, [r3, #0]
}
 80066dc:	bf00      	nop
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	58024400 	.word	0x58024400
 80066ec:	52002000 	.word	0x52002000

080066f0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066f4:	b0ca      	sub	sp, #296	@ 0x128
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066fc:	2300      	movs	r3, #0
 80066fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006702:	2300      	movs	r3, #0
 8006704:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006708:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800670c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006710:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006714:	2500      	movs	r5, #0
 8006716:	ea54 0305 	orrs.w	r3, r4, r5
 800671a:	d049      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800671c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006720:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006722:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006726:	d02f      	beq.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006728:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800672c:	d828      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800672e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006732:	d01a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006734:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006738:	d822      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800673e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006742:	d007      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006744:	e01c      	b.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006746:	4bb8      	ldr	r3, [pc, #736]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800674a:	4ab7      	ldr	r2, [pc, #732]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800674c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006750:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006752:	e01a      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006754:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006758:	3308      	adds	r3, #8
 800675a:	2102      	movs	r1, #2
 800675c:	4618      	mov	r0, r3
 800675e:	f001 fc8f 	bl	8008080 <RCCEx_PLL2_Config>
 8006762:	4603      	mov	r3, r0
 8006764:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006768:	e00f      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800676a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800676e:	3328      	adds	r3, #40	@ 0x28
 8006770:	2102      	movs	r1, #2
 8006772:	4618      	mov	r0, r3
 8006774:	f001 fd36 	bl	80081e4 <RCCEx_PLL3_Config>
 8006778:	4603      	mov	r3, r0
 800677a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800677e:	e004      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006786:	e000      	b.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006788:	bf00      	nop
    }

    if (ret == HAL_OK)
 800678a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800678e:	2b00      	cmp	r3, #0
 8006790:	d10a      	bne.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006792:	4ba5      	ldr	r3, [pc, #660]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006794:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006796:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800679a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800679e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80067a0:	4aa1      	ldr	r2, [pc, #644]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067a2:	430b      	orrs	r3, r1
 80067a4:	6513      	str	r3, [r2, #80]	@ 0x50
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80067ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80067b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80067bc:	f04f 0900 	mov.w	r9, #0
 80067c0:	ea58 0309 	orrs.w	r3, r8, r9
 80067c4:	d047      	beq.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80067c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d82a      	bhi.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80067d0:	a201      	add	r2, pc, #4	@ (adr r2, 80067d8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80067d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067d6:	bf00      	nop
 80067d8:	080067ed 	.word	0x080067ed
 80067dc:	080067fb 	.word	0x080067fb
 80067e0:	08006811 	.word	0x08006811
 80067e4:	0800682f 	.word	0x0800682f
 80067e8:	0800682f 	.word	0x0800682f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067ec:	4b8e      	ldr	r3, [pc, #568]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f0:	4a8d      	ldr	r2, [pc, #564]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80067f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80067f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80067f8:	e01a      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80067fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80067fe:	3308      	adds	r3, #8
 8006800:	2100      	movs	r1, #0
 8006802:	4618      	mov	r0, r3
 8006804:	f001 fc3c 	bl	8008080 <RCCEx_PLL2_Config>
 8006808:	4603      	mov	r3, r0
 800680a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800680e:	e00f      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006814:	3328      	adds	r3, #40	@ 0x28
 8006816:	2100      	movs	r1, #0
 8006818:	4618      	mov	r0, r3
 800681a:	f001 fce3 	bl	80081e4 <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006824:	e004      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800682c:	e000      	b.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800682e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10a      	bne.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006838:	4b7b      	ldr	r3, [pc, #492]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800683a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800683c:	f023 0107 	bic.w	r1, r3, #7
 8006840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006844:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006846:	4a78      	ldr	r2, [pc, #480]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006848:	430b      	orrs	r3, r1
 800684a:	6513      	str	r3, [r2, #80]	@ 0x50
 800684c:	e003      	b.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800684e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006852:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800685a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800685e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006862:	f04f 0b00 	mov.w	fp, #0
 8006866:	ea5a 030b 	orrs.w	r3, sl, fp
 800686a:	d04c      	beq.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800686c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006876:	d030      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006878:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687c:	d829      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800687e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006880:	d02d      	beq.n	80068de <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006882:	2bc0      	cmp	r3, #192	@ 0xc0
 8006884:	d825      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006886:	2b80      	cmp	r3, #128	@ 0x80
 8006888:	d018      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800688a:	2b80      	cmp	r3, #128	@ 0x80
 800688c:	d821      	bhi.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800688e:	2b00      	cmp	r3, #0
 8006890:	d002      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006892:	2b40      	cmp	r3, #64	@ 0x40
 8006894:	d007      	beq.n	80068a6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006896:	e01c      	b.n	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006898:	4b63      	ldr	r3, [pc, #396]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	4a62      	ldr	r2, [pc, #392]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800689e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068a4:	e01c      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068aa:	3308      	adds	r3, #8
 80068ac:	2100      	movs	r1, #0
 80068ae:	4618      	mov	r0, r3
 80068b0:	f001 fbe6 	bl	8008080 <RCCEx_PLL2_Config>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068ba:	e011      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068c0:	3328      	adds	r3, #40	@ 0x28
 80068c2:	2100      	movs	r1, #0
 80068c4:	4618      	mov	r0, r3
 80068c6:	f001 fc8d 	bl	80081e4 <RCCEx_PLL3_Config>
 80068ca:	4603      	mov	r3, r0
 80068cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80068d0:	e006      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80068d8:	e002      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068da:	bf00      	nop
 80068dc:	e000      	b.n	80068e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80068de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80068e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80068e8:	4b4f      	ldr	r3, [pc, #316]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80068ec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80068f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80068f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068f6:	4a4c      	ldr	r2, [pc, #304]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6513      	str	r3, [r2, #80]	@ 0x50
 80068fc:	e003      	b.n	8006906 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006902:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006906:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800690a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800690e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006912:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006916:	2300      	movs	r3, #0
 8006918:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800691c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006920:	460b      	mov	r3, r1
 8006922:	4313      	orrs	r3, r2
 8006924:	d053      	beq.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006926:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800692a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800692e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006932:	d035      	beq.n	80069a0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006934:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006938:	d82e      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800693a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800693e:	d031      	beq.n	80069a4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006940:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006944:	d828      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006946:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800694a:	d01a      	beq.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800694c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006950:	d822      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006956:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800695a:	d007      	beq.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800695c:	e01c      	b.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695e:	4b32      	ldr	r3, [pc, #200]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006962:	4a31      	ldr	r2, [pc, #196]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006968:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800696a:	e01c      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006970:	3308      	adds	r3, #8
 8006972:	2100      	movs	r1, #0
 8006974:	4618      	mov	r0, r3
 8006976:	f001 fb83 	bl	8008080 <RCCEx_PLL2_Config>
 800697a:	4603      	mov	r3, r0
 800697c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006980:	e011      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006986:	3328      	adds	r3, #40	@ 0x28
 8006988:	2100      	movs	r1, #0
 800698a:	4618      	mov	r0, r3
 800698c:	f001 fc2a 	bl	80081e4 <RCCEx_PLL3_Config>
 8006990:	4603      	mov	r3, r0
 8006992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006996:	e006      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800699e:	e002      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069a0:	bf00      	nop
 80069a2:	e000      	b.n	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80069a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80069a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d10b      	bne.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80069ae:	4b1e      	ldr	r3, [pc, #120]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069b2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80069b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80069be:	4a1a      	ldr	r2, [pc, #104]	@ (8006a28 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80069c0:	430b      	orrs	r3, r1
 80069c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80069c4:	e003      	b.n	80069ce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80069ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80069ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80069da:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80069de:	2300      	movs	r3, #0
 80069e0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80069e4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80069e8:	460b      	mov	r3, r1
 80069ea:	4313      	orrs	r3, r2
 80069ec:	d056      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80069ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80069f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80069f6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80069fa:	d038      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80069fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006a00:	d831      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a02:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a06:	d034      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006a08:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006a0c:	d82b      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a0e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a12:	d01d      	beq.n	8006a50 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006a14:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006a18:	d825      	bhi.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d006      	beq.n	8006a2c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006a1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006a22:	d00a      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006a24:	e01f      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006a26:	bf00      	nop
 8006a28:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a2c:	4ba2      	ldr	r3, [pc, #648]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a30:	4aa1      	ldr	r2, [pc, #644]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006a36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a38:	e01c      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a3e:	3308      	adds	r3, #8
 8006a40:	2100      	movs	r1, #0
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fb1c 	bl	8008080 <RCCEx_PLL2_Config>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006a4e:	e011      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a54:	3328      	adds	r3, #40	@ 0x28
 8006a56:	2100      	movs	r1, #0
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f001 fbc3 	bl	80081e4 <RCCEx_PLL3_Config>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006a64:	e006      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006a6c:	e002      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006a72:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006a74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10b      	bne.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006a7c:	4b8e      	ldr	r3, [pc, #568]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a80:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006a88:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a8c:	4a8a      	ldr	r2, [pc, #552]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006a8e:	430b      	orrs	r3, r1
 8006a90:	6593      	str	r3, [r2, #88]	@ 0x58
 8006a92:	e003      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006a98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aa4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006aa8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006aac:	2300      	movs	r3, #0
 8006aae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006ab2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	d03a      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ac0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006ac2:	2b30      	cmp	r3, #48	@ 0x30
 8006ac4:	d01f      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006ac6:	2b30      	cmp	r3, #48	@ 0x30
 8006ac8:	d819      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006aca:	2b20      	cmp	r3, #32
 8006acc:	d00c      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006ace:	2b20      	cmp	r3, #32
 8006ad0:	d815      	bhi.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d019      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006ad6:	2b10      	cmp	r3, #16
 8006ad8:	d111      	bne.n	8006afe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ada:	4b77      	ldr	r3, [pc, #476]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006adc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ade:	4a76      	ldr	r2, [pc, #472]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ae0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ae4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006ae6:	e011      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006aec:	3308      	adds	r3, #8
 8006aee:	2102      	movs	r1, #2
 8006af0:	4618      	mov	r0, r3
 8006af2:	f001 fac5 	bl	8008080 <RCCEx_PLL2_Config>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006afc:	e006      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006b04:	e002      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b06:	bf00      	nop
 8006b08:	e000      	b.n	8006b0c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006b0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006b0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d10a      	bne.n	8006b2a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006b14:	4b68      	ldr	r3, [pc, #416]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b18:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b22:	4a65      	ldr	r2, [pc, #404]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b24:	430b      	orrs	r3, r1
 8006b26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006b28:	e003      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006b2e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006b3e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006b42:	2300      	movs	r3, #0
 8006b44:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006b48:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006b4c:	460b      	mov	r3, r1
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	d051      	beq.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b58:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b5c:	d035      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006b62:	d82e      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b64:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b68:	d031      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006b6a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006b6e:	d828      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b74:	d01a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006b76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b7a:	d822      	bhi.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8006b80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b84:	d007      	beq.n	8006b96 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8006b86:	e01c      	b.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b88:	4b4b      	ldr	r3, [pc, #300]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006b8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006b92:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006b94:	e01c      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	2100      	movs	r1, #0
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f001 fa6e 	bl	8008080 <RCCEx_PLL2_Config>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006baa:	e011      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bb0:	3328      	adds	r3, #40	@ 0x28
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f001 fb15 	bl	80081e4 <RCCEx_PLL3_Config>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8006bc0:	e006      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006bc8:	e002      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8006bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d10a      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006bd8:	4b37      	ldr	r3, [pc, #220]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006bda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bdc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8006be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006be4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006be6:	4a34      	ldr	r2, [pc, #208]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6513      	str	r3, [r2, #80]	@ 0x50
 8006bec:	e003      	b.n	8006bf6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006bf2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bfe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8006c02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c06:	2300      	movs	r3, #0
 8006c08:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8006c0c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8006c10:	460b      	mov	r3, r1
 8006c12:	4313      	orrs	r3, r2
 8006c14:	d056      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8006c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c1a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c20:	d033      	beq.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006c22:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c26:	d82c      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c28:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c2c:	d02f      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006c2e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c32:	d826      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c34:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c38:	d02b      	beq.n	8006c92 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8006c3a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006c3e:	d820      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c40:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c44:	d012      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8006c46:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006c4a:	d81a      	bhi.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d022      	beq.n	8006c96 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8006c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c54:	d115      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c5a:	3308      	adds	r3, #8
 8006c5c:	2101      	movs	r1, #1
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f001 fa0e 	bl	8008080 <RCCEx_PLL2_Config>
 8006c64:	4603      	mov	r3, r0
 8006c66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c6a:	e015      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006c6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c70:	3328      	adds	r3, #40	@ 0x28
 8006c72:	2101      	movs	r1, #1
 8006c74:	4618      	mov	r0, r3
 8006c76:	f001 fab5 	bl	80081e4 <RCCEx_PLL3_Config>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8006c80:	e00a      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c88:	e006      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c8a:	bf00      	nop
 8006c8c:	e004      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c8e:	bf00      	nop
 8006c90:	e002      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c92:	bf00      	nop
 8006c94:	e000      	b.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8006c96:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10d      	bne.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006ca0:	4b05      	ldr	r3, [pc, #20]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ca4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8006ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006cae:	4a02      	ldr	r2, [pc, #8]	@ (8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006cb0:	430b      	orrs	r3, r1
 8006cb2:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cb4:	e006      	b.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8006cb6:	bf00      	nop
 8006cb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ccc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8006cd0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006cda:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8006cde:	460b      	mov	r3, r1
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	d055      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8006ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006cec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cf0:	d033      	beq.n	8006d5a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8006cf2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006cf6:	d82c      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006cf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cfc:	d02f      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8006cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d02:	d826      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d04:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d08:	d02b      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8006d0a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006d0e:	d820      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d14:	d012      	beq.n	8006d3c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8006d16:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006d1a:	d81a      	bhi.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d022      	beq.n	8006d66 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8006d20:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006d24:	d115      	bne.n	8006d52 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	2101      	movs	r1, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f001 f9a6 	bl	8008080 <RCCEx_PLL2_Config>
 8006d34:	4603      	mov	r3, r0
 8006d36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d3a:	e015      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d40:	3328      	adds	r3, #40	@ 0x28
 8006d42:	2101      	movs	r1, #1
 8006d44:	4618      	mov	r0, r3
 8006d46:	f001 fa4d 	bl	80081e4 <RCCEx_PLL3_Config>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8006d50:	e00a      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8006d52:	2301      	movs	r3, #1
 8006d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d58:	e006      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d5a:	bf00      	nop
 8006d5c:	e004      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e002      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d62:	bf00      	nop
 8006d64:	e000      	b.n	8006d68 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8006d66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d10b      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006d70:	4ba3      	ldr	r3, [pc, #652]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d74:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8006d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d7c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d80:	4a9f      	ldr	r2, [pc, #636]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006d82:	430b      	orrs	r3, r1
 8006d84:	6593      	str	r3, [r2, #88]	@ 0x58
 8006d86:	e003      	b.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8006d9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8006da6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006daa:	460b      	mov	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	d037      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8006db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006db6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dba:	d00e      	beq.n	8006dda <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8006dbc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006dc0:	d816      	bhi.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d018      	beq.n	8006df8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8006dc6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006dca:	d111      	bne.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dd0:	4a8b      	ldr	r2, [pc, #556]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006dd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dd6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006dd8:	e00f      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dde:	3308      	adds	r3, #8
 8006de0:	2101      	movs	r1, #1
 8006de2:	4618      	mov	r0, r3
 8006de4:	f001 f94c 	bl	8008080 <RCCEx_PLL2_Config>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8006dee:	e004      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006df6:	e000      	b.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8006df8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006e02:	4b7f      	ldr	r3, [pc, #508]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e06:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e10:	4a7b      	ldr	r2, [pc, #492]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e12:	430b      	orrs	r3, r1
 8006e14:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e16:	e003      	b.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e28:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e30:	2300      	movs	r3, #0
 8006e32:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8006e36:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	d039      	beq.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e46:	2b03      	cmp	r3, #3
 8006e48:	d81c      	bhi.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8006e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e8d 	.word	0x08006e8d
 8006e54:	08006e61 	.word	0x08006e61
 8006e58:	08006e6f 	.word	0x08006e6f
 8006e5c:	08006e8d 	.word	0x08006e8d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e60:	4b67      	ldr	r3, [pc, #412]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e64:	4a66      	ldr	r2, [pc, #408]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e6c:	e00f      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e72:	3308      	adds	r3, #8
 8006e74:	2102      	movs	r1, #2
 8006e76:	4618      	mov	r0, r3
 8006e78:	f001 f902 	bl	8008080 <RCCEx_PLL2_Config>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8006e82:	e004      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e8a:	e000      	b.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8006e8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d10a      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006e96:	4b5a      	ldr	r3, [pc, #360]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e9a:	f023 0103 	bic.w	r1, r3, #3
 8006e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006ea4:	4a56      	ldr	r2, [pc, #344]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ea6:	430b      	orrs	r3, r1
 8006ea8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ebc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8006ec0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006eca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8006ece:	460b      	mov	r3, r1
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	f000 809f 	beq.w	8007014 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006ed6:	4b4b      	ldr	r3, [pc, #300]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4a4a      	ldr	r2, [pc, #296]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006edc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ee0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ee2:	f7fb f9d3 	bl	800228c <HAL_GetTick>
 8006ee6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006eea:	e00b      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006eec:	f7fb f9ce 	bl	800228c <HAL_GetTick>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	2b64      	cmp	r3, #100	@ 0x64
 8006efa:	d903      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8006efc:	2303      	movs	r3, #3
 8006efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f02:	e005      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f04:	4b3f      	ldr	r3, [pc, #252]	@ (8007004 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ed      	beq.n	8006eec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8006f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d179      	bne.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f18:	4b39      	ldr	r3, [pc, #228]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f1a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f24:	4053      	eors	r3, r2
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d015      	beq.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006f2e:	4b34      	ldr	r3, [pc, #208]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f36:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006f3a:	4b31      	ldr	r3, [pc, #196]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f3e:	4a30      	ldr	r2, [pc, #192]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006f44:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006f46:	4b2e      	ldr	r3, [pc, #184]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f4a:	4a2d      	ldr	r2, [pc, #180]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f50:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006f52:	4a2b      	ldr	r2, [pc, #172]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8006f58:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006f62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f66:	d118      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f68:	f7fb f990 	bl	800228c <HAL_GetTick>
 8006f6c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f70:	e00d      	b.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f72:	f7fb f98b 	bl	800228c <HAL_GetTick>
 8006f76:	4602      	mov	r2, r0
 8006f78:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8006f7c:	1ad2      	subs	r2, r2, r3
 8006f7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d903      	bls.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8006f86:	2303      	movs	r3, #3
 8006f88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8006f8c:	e005      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f8e:	4b1c      	ldr	r3, [pc, #112]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006f90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f92:	f003 0302 	and.w	r3, r3, #2
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d0eb      	beq.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d129      	bne.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006faa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006fb2:	d10e      	bne.n	8006fd2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8006fb4:	4b12      	ldr	r3, [pc, #72]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fb6:	691b      	ldr	r3, [r3, #16]
 8006fb8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8006fbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fc4:	091a      	lsrs	r2, r3, #4
 8006fc6:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8006fc8:	4013      	ands	r3, r2
 8006fca:	4a0d      	ldr	r2, [pc, #52]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fcc:	430b      	orrs	r3, r1
 8006fce:	6113      	str	r3, [r2, #16]
 8006fd0:	e005      	b.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	4a0a      	ldr	r2, [pc, #40]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fd8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006fdc:	6113      	str	r3, [r2, #16]
 8006fde:	4b08      	ldr	r3, [pc, #32]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006fe0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8006fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006fea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006fee:	4a04      	ldr	r2, [pc, #16]	@ (8007000 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8006ff0:	430b      	orrs	r3, r1
 8006ff2:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ff4:	e00e      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006ff6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ffa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8006ffe:	e009      	b.n	8007014 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007000:	58024400 	.word	0x58024400
 8007004:	58024800 	.word	0x58024800
 8007008:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800700c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007010:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007014:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800701c:	f002 0301 	and.w	r3, r2, #1
 8007020:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007024:	2300      	movs	r3, #0
 8007026:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800702a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800702e:	460b      	mov	r3, r1
 8007030:	4313      	orrs	r3, r2
 8007032:	f000 8089 	beq.w	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8007036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800703a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800703c:	2b28      	cmp	r3, #40	@ 0x28
 800703e:	d86b      	bhi.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007040:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007046:	bf00      	nop
 8007048:	08007121 	.word	0x08007121
 800704c:	08007119 	.word	0x08007119
 8007050:	08007119 	.word	0x08007119
 8007054:	08007119 	.word	0x08007119
 8007058:	08007119 	.word	0x08007119
 800705c:	08007119 	.word	0x08007119
 8007060:	08007119 	.word	0x08007119
 8007064:	08007119 	.word	0x08007119
 8007068:	080070ed 	.word	0x080070ed
 800706c:	08007119 	.word	0x08007119
 8007070:	08007119 	.word	0x08007119
 8007074:	08007119 	.word	0x08007119
 8007078:	08007119 	.word	0x08007119
 800707c:	08007119 	.word	0x08007119
 8007080:	08007119 	.word	0x08007119
 8007084:	08007119 	.word	0x08007119
 8007088:	08007103 	.word	0x08007103
 800708c:	08007119 	.word	0x08007119
 8007090:	08007119 	.word	0x08007119
 8007094:	08007119 	.word	0x08007119
 8007098:	08007119 	.word	0x08007119
 800709c:	08007119 	.word	0x08007119
 80070a0:	08007119 	.word	0x08007119
 80070a4:	08007119 	.word	0x08007119
 80070a8:	08007121 	.word	0x08007121
 80070ac:	08007119 	.word	0x08007119
 80070b0:	08007119 	.word	0x08007119
 80070b4:	08007119 	.word	0x08007119
 80070b8:	08007119 	.word	0x08007119
 80070bc:	08007119 	.word	0x08007119
 80070c0:	08007119 	.word	0x08007119
 80070c4:	08007119 	.word	0x08007119
 80070c8:	08007121 	.word	0x08007121
 80070cc:	08007119 	.word	0x08007119
 80070d0:	08007119 	.word	0x08007119
 80070d4:	08007119 	.word	0x08007119
 80070d8:	08007119 	.word	0x08007119
 80070dc:	08007119 	.word	0x08007119
 80070e0:	08007119 	.word	0x08007119
 80070e4:	08007119 	.word	0x08007119
 80070e8:	08007121 	.word	0x08007121
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f0:	3308      	adds	r3, #8
 80070f2:	2101      	movs	r1, #1
 80070f4:	4618      	mov	r0, r3
 80070f6:	f000 ffc3 	bl	8008080 <RCCEx_PLL2_Config>
 80070fa:	4603      	mov	r3, r0
 80070fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007100:	e00f      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007106:	3328      	adds	r3, #40	@ 0x28
 8007108:	2101      	movs	r1, #1
 800710a:	4618      	mov	r0, r3
 800710c:	f001 f86a 	bl	80081e4 <RCCEx_PLL3_Config>
 8007110:	4603      	mov	r3, r0
 8007112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007116:	e004      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800711e:	e000      	b.n	8007122 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007122:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007126:	2b00      	cmp	r3, #0
 8007128:	d10a      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800712a:	4bbf      	ldr	r3, [pc, #764]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800712c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800712e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007136:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007138:	4abb      	ldr	r2, [pc, #748]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800713a:	430b      	orrs	r3, r1
 800713c:	6553      	str	r3, [r2, #84]	@ 0x54
 800713e:	e003      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f002 0302 	and.w	r3, r2, #2
 8007154:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800715e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d041      	beq.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800716e:	2b05      	cmp	r3, #5
 8007170:	d824      	bhi.n	80071bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007172:	a201      	add	r2, pc, #4	@ (adr r2, 8007178 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007178:	080071c5 	.word	0x080071c5
 800717c:	08007191 	.word	0x08007191
 8007180:	080071a7 	.word	0x080071a7
 8007184:	080071c5 	.word	0x080071c5
 8007188:	080071c5 	.word	0x080071c5
 800718c:	080071c5 	.word	0x080071c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007194:	3308      	adds	r3, #8
 8007196:	2101      	movs	r1, #1
 8007198:	4618      	mov	r0, r3
 800719a:	f000 ff71 	bl	8008080 <RCCEx_PLL2_Config>
 800719e:	4603      	mov	r3, r0
 80071a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071a4:	e00f      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071aa:	3328      	adds	r3, #40	@ 0x28
 80071ac:	2101      	movs	r1, #1
 80071ae:	4618      	mov	r0, r3
 80071b0:	f001 f818 	bl	80081e4 <RCCEx_PLL3_Config>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80071ba:	e004      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071c2:	e000      	b.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80071c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d10a      	bne.n	80071e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071ce:	4b96      	ldr	r3, [pc, #600]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071d2:	f023 0107 	bic.w	r1, r3, #7
 80071d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80071dc:	4a92      	ldr	r2, [pc, #584]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80071de:	430b      	orrs	r3, r1
 80071e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80071e2:	e003      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f4:	f002 0304 	and.w	r3, r2, #4
 80071f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80071fc:	2300      	movs	r3, #0
 80071fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007202:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8007206:	460b      	mov	r3, r1
 8007208:	4313      	orrs	r3, r2
 800720a:	d044      	beq.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800720c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007210:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007214:	2b05      	cmp	r3, #5
 8007216:	d825      	bhi.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8007218:	a201      	add	r2, pc, #4	@ (adr r2, 8007220 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800721a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800721e:	bf00      	nop
 8007220:	0800726d 	.word	0x0800726d
 8007224:	08007239 	.word	0x08007239
 8007228:	0800724f 	.word	0x0800724f
 800722c:	0800726d 	.word	0x0800726d
 8007230:	0800726d 	.word	0x0800726d
 8007234:	0800726d 	.word	0x0800726d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800723c:	3308      	adds	r3, #8
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f000 ff1d 	bl	8008080 <RCCEx_PLL2_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800724c:	e00f      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800724e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007252:	3328      	adds	r3, #40	@ 0x28
 8007254:	2101      	movs	r1, #1
 8007256:	4618      	mov	r0, r3
 8007258:	f000 ffc4 	bl	80081e4 <RCCEx_PLL3_Config>
 800725c:	4603      	mov	r3, r0
 800725e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007262:	e004      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800726a:	e000      	b.n	800726e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800726c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007272:	2b00      	cmp	r3, #0
 8007274:	d10b      	bne.n	800728e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007276:	4b6c      	ldr	r3, [pc, #432]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800727a:	f023 0107 	bic.w	r1, r3, #7
 800727e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007282:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007286:	4a68      	ldr	r2, [pc, #416]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007288:	430b      	orrs	r3, r1
 800728a:	6593      	str	r3, [r2, #88]	@ 0x58
 800728c:	e003      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800728e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007292:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729e:	f002 0320 	and.w	r3, r2, #32
 80072a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80072a6:	2300      	movs	r3, #0
 80072a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80072ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80072b0:	460b      	mov	r3, r1
 80072b2:	4313      	orrs	r3, r2
 80072b4:	d055      	beq.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80072b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072c2:	d033      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80072c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072c8:	d82c      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072ce:	d02f      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80072d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d4:	d826      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072da:	d02b      	beq.n	8007334 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80072dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072e0:	d820      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e6:	d012      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80072e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ec:	d81a      	bhi.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d022      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80072f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f6:	d115      	bne.n	8007324 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80072f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fc:	3308      	adds	r3, #8
 80072fe:	2100      	movs	r1, #0
 8007300:	4618      	mov	r0, r3
 8007302:	f000 febd 	bl	8008080 <RCCEx_PLL2_Config>
 8007306:	4603      	mov	r3, r0
 8007308:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800730c:	e015      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800730e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007312:	3328      	adds	r3, #40	@ 0x28
 8007314:	2102      	movs	r1, #2
 8007316:	4618      	mov	r0, r3
 8007318:	f000 ff64 	bl	80081e4 <RCCEx_PLL3_Config>
 800731c:	4603      	mov	r3, r0
 800731e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007322:	e00a      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800732a:	e006      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800732c:	bf00      	nop
 800732e:	e004      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007330:	bf00      	nop
 8007332:	e002      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007334:	bf00      	nop
 8007336:	e000      	b.n	800733a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007338:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800733e:	2b00      	cmp	r3, #0
 8007340:	d10b      	bne.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007342:	4b39      	ldr	r3, [pc, #228]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007346:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800734a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800734e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007352:	4a35      	ldr	r2, [pc, #212]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007354:	430b      	orrs	r3, r1
 8007356:	6553      	str	r3, [r2, #84]	@ 0x54
 8007358:	e003      	b.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800735e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800736e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007372:	2300      	movs	r3, #0
 8007374:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007378:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800737c:	460b      	mov	r3, r1
 800737e:	4313      	orrs	r3, r2
 8007380:	d058      	beq.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007386:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800738a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800738e:	d033      	beq.n	80073f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007390:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007394:	d82c      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007396:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800739a:	d02f      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800739c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073a0:	d826      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073a6:	d02b      	beq.n	8007400 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80073a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80073ac:	d820      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b2:	d012      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80073b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80073b8:	d81a      	bhi.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d022      	beq.n	8007404 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80073be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80073c2:	d115      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80073c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073c8:	3308      	adds	r3, #8
 80073ca:	2100      	movs	r1, #0
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fe57 	bl	8008080 <RCCEx_PLL2_Config>
 80073d2:	4603      	mov	r3, r0
 80073d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073d8:	e015      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80073da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073de:	3328      	adds	r3, #40	@ 0x28
 80073e0:	2102      	movs	r1, #2
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 fefe 	bl	80081e4 <RCCEx_PLL3_Config>
 80073e8:	4603      	mov	r3, r0
 80073ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80073ee:	e00a      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073f6:	e006      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073f8:	bf00      	nop
 80073fa:	e004      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007404:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007406:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10e      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800740e:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007412:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800741a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800741e:	4a02      	ldr	r2, [pc, #8]	@ (8007428 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007420:	430b      	orrs	r3, r1
 8007422:	6593      	str	r3, [r2, #88]	@ 0x58
 8007424:	e006      	b.n	8007434 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007426:	bf00      	nop
 8007428:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800742c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007430:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007434:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800743c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007440:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007444:	2300      	movs	r3, #0
 8007446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800744a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800744e:	460b      	mov	r3, r1
 8007450:	4313      	orrs	r3, r2
 8007452:	d055      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007458:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800745c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007460:	d033      	beq.n	80074ca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007462:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007466:	d82c      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007468:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800746c:	d02f      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800746e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007472:	d826      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007474:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007478:	d02b      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800747a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800747e:	d820      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007480:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007484:	d012      	beq.n	80074ac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800748a:	d81a      	bhi.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800748c:	2b00      	cmp	r3, #0
 800748e:	d022      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007494:	d115      	bne.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007496:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749a:	3308      	adds	r3, #8
 800749c:	2100      	movs	r1, #0
 800749e:	4618      	mov	r0, r3
 80074a0:	f000 fdee 	bl	8008080 <RCCEx_PLL2_Config>
 80074a4:	4603      	mov	r3, r0
 80074a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074aa:	e015      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80074ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b0:	3328      	adds	r3, #40	@ 0x28
 80074b2:	2102      	movs	r1, #2
 80074b4:	4618      	mov	r0, r3
 80074b6:	f000 fe95 	bl	80081e4 <RCCEx_PLL3_Config>
 80074ba:	4603      	mov	r3, r0
 80074bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80074c0:	e00a      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074c8:	e006      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074ca:	bf00      	nop
 80074cc:	e004      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074ce:	bf00      	nop
 80074d0:	e002      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074d2:	bf00      	nop
 80074d4:	e000      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80074d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80074e0:	4ba1      	ldr	r3, [pc, #644]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80074e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074ec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80074f0:	4a9d      	ldr	r2, [pc, #628]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80074f2:	430b      	orrs	r3, r1
 80074f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80074f6:	e003      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007508:	f002 0308 	and.w	r3, r2, #8
 800750c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007510:	2300      	movs	r3, #0
 8007512:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007516:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800751a:	460b      	mov	r3, r1
 800751c:	4313      	orrs	r3, r2
 800751e:	d01e      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007524:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007528:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800752c:	d10c      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	3328      	adds	r3, #40	@ 0x28
 8007534:	2102      	movs	r1, #2
 8007536:	4618      	mov	r0, r3
 8007538:	f000 fe54 	bl	80081e4 <RCCEx_PLL3_Config>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007548:	4b87      	ldr	r3, [pc, #540]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800754a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800754c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007554:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007558:	4a83      	ldr	r2, [pc, #524]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800755a:	430b      	orrs	r3, r1
 800755c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800755e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007566:	f002 0310 	and.w	r3, r2, #16
 800756a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800756e:	2300      	movs	r3, #0
 8007570:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007574:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d01e      	beq.n	80075bc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007586:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800758a:	d10c      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800758c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007590:	3328      	adds	r3, #40	@ 0x28
 8007592:	2102      	movs	r1, #2
 8007594:	4618      	mov	r0, r3
 8007596:	f000 fe25 	bl	80081e4 <RCCEx_PLL3_Config>
 800759a:	4603      	mov	r3, r0
 800759c:	2b00      	cmp	r3, #0
 800759e:	d002      	beq.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80075a6:	4b70      	ldr	r3, [pc, #448]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075aa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80075ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80075b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80075b8:	430b      	orrs	r3, r1
 80075ba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80075bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80075c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075cc:	2300      	movs	r3, #0
 80075ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80075d2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80075d6:	460b      	mov	r3, r1
 80075d8:	4313      	orrs	r3, r2
 80075da:	d03e      	beq.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80075dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80075e4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075e8:	d022      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80075ea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80075ee:	d81b      	bhi.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d003      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80075f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80075f8:	d00b      	beq.n	8007612 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80075fa:	e015      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80075fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007600:	3308      	adds	r3, #8
 8007602:	2100      	movs	r1, #0
 8007604:	4618      	mov	r0, r3
 8007606:	f000 fd3b 	bl	8008080 <RCCEx_PLL2_Config>
 800760a:	4603      	mov	r3, r0
 800760c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007610:	e00f      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	3328      	adds	r3, #40	@ 0x28
 8007618:	2102      	movs	r1, #2
 800761a:	4618      	mov	r0, r3
 800761c:	f000 fde2 	bl	80081e4 <RCCEx_PLL3_Config>
 8007620:	4603      	mov	r3, r0
 8007622:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007626:	e004      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800762e:	e000      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007630:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007632:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800763a:	4b4b      	ldr	r3, [pc, #300]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800763c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800763e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007646:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800764a:	4a47      	ldr	r2, [pc, #284]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800764c:	430b      	orrs	r3, r1
 800764e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007650:	e003      	b.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007652:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007656:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007662:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007666:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007668:	2300      	movs	r3, #0
 800766a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800766c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007670:	460b      	mov	r3, r1
 8007672:	4313      	orrs	r3, r2
 8007674:	d03b      	beq.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800767e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007682:	d01f      	beq.n	80076c4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007684:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007688:	d818      	bhi.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800768a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800768e:	d003      	beq.n	8007698 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007690:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007694:	d007      	beq.n	80076a6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007696:	e011      	b.n	80076bc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007698:	4b33      	ldr	r3, [pc, #204]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800769a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800769c:	4a32      	ldr	r2, [pc, #200]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800769e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80076a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80076a4:	e00f      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076aa:	3328      	adds	r3, #40	@ 0x28
 80076ac:	2101      	movs	r1, #1
 80076ae:	4618      	mov	r0, r3
 80076b0:	f000 fd98 	bl	80081e4 <RCCEx_PLL3_Config>
 80076b4:	4603      	mov	r3, r0
 80076b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80076ba:	e004      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076bc:	2301      	movs	r3, #1
 80076be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076c2:	e000      	b.n	80076c6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80076c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d10b      	bne.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80076ce:	4b26      	ldr	r3, [pc, #152]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076d2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80076de:	4a22      	ldr	r2, [pc, #136]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80076e0:	430b      	orrs	r3, r1
 80076e2:	6553      	str	r3, [r2, #84]	@ 0x54
 80076e4:	e003      	b.n	80076ee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80076ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80076fa:	673b      	str	r3, [r7, #112]	@ 0x70
 80076fc:	2300      	movs	r3, #0
 80076fe:	677b      	str	r3, [r7, #116]	@ 0x74
 8007700:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007704:	460b      	mov	r3, r1
 8007706:	4313      	orrs	r3, r2
 8007708:	d034      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800770a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007714:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007718:	d007      	beq.n	800772a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800771a:	e011      	b.n	8007740 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800771c:	4b12      	ldr	r3, [pc, #72]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800771e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007720:	4a11      	ldr	r2, [pc, #68]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007722:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007726:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007728:	e00e      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800772a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800772e:	3308      	adds	r3, #8
 8007730:	2102      	movs	r1, #2
 8007732:	4618      	mov	r0, r3
 8007734:	f000 fca4 	bl	8008080 <RCCEx_PLL2_Config>
 8007738:	4603      	mov	r3, r0
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800773e:	e003      	b.n	8007748 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007740:	2301      	movs	r3, #1
 8007742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10d      	bne.n	800776c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007750:	4b05      	ldr	r3, [pc, #20]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007754:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775e:	4a02      	ldr	r2, [pc, #8]	@ (8007768 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007760:	430b      	orrs	r3, r1
 8007762:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007764:	e006      	b.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007766:	bf00      	nop
 8007768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800776c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800777c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007780:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007782:	2300      	movs	r3, #0
 8007784:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007786:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800778a:	460b      	mov	r3, r1
 800778c:	4313      	orrs	r3, r2
 800778e:	d00c      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007794:	3328      	adds	r3, #40	@ 0x28
 8007796:	2102      	movs	r1, #2
 8007798:	4618      	mov	r0, r3
 800779a:	f000 fd23 	bl	80081e4 <RCCEx_PLL3_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d002      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077b2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80077b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80077b8:	2300      	movs	r3, #0
 80077ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80077bc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80077c0:	460b      	mov	r3, r1
 80077c2:	4313      	orrs	r3, r2
 80077c4:	d038      	beq.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80077c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d2:	d018      	beq.n	8007806 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80077d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80077d8:	d811      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077de:	d014      	beq.n	800780a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80077e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80077e4:	d80b      	bhi.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d011      	beq.n	800780e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80077ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077ee:	d106      	bne.n	80077fe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80077f0:	4bc3      	ldr	r3, [pc, #780]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077f4:	4ac2      	ldr	r2, [pc, #776]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80077f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80077fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80077fc:	e008      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007804:	e004      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007806:	bf00      	nop
 8007808:	e002      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800780a:	bf00      	nop
 800780c:	e000      	b.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800780e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007814:	2b00      	cmp	r3, #0
 8007816:	d10b      	bne.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007818:	4bb9      	ldr	r3, [pc, #740]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800781a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800781c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007824:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007828:	4ab5      	ldr	r2, [pc, #724]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800782a:	430b      	orrs	r3, r1
 800782c:	6553      	str	r3, [r2, #84]	@ 0x54
 800782e:	e003      	b.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007834:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800783c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007840:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007844:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007846:	2300      	movs	r3, #0
 8007848:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800784a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800784e:	460b      	mov	r3, r1
 8007850:	4313      	orrs	r3, r2
 8007852:	d009      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007854:	4baa      	ldr	r3, [pc, #680]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007858:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800785c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007862:	4aa7      	ldr	r2, [pc, #668]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007864:	430b      	orrs	r3, r1
 8007866:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007870:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007874:	653b      	str	r3, [r7, #80]	@ 0x50
 8007876:	2300      	movs	r3, #0
 8007878:	657b      	str	r3, [r7, #84]	@ 0x54
 800787a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800787e:	460b      	mov	r3, r1
 8007880:	4313      	orrs	r3, r2
 8007882:	d00a      	beq.n	800789a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007884:	4b9e      	ldr	r3, [pc, #632]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007886:	691b      	ldr	r3, [r3, #16]
 8007888:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800788c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007890:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007894:	4a9a      	ldr	r2, [pc, #616]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007896:	430b      	orrs	r3, r1
 8007898:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078a2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80078a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078a8:	2300      	movs	r3, #0
 80078aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078ac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80078b0:	460b      	mov	r3, r1
 80078b2:	4313      	orrs	r3, r2
 80078b4:	d009      	beq.n	80078ca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80078b6:	4b92      	ldr	r3, [pc, #584]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80078be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078c4:	4a8e      	ldr	r2, [pc, #568]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078c6:	430b      	orrs	r3, r1
 80078c8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80078ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078d2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80078d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80078d8:	2300      	movs	r3, #0
 80078da:	647b      	str	r3, [r7, #68]	@ 0x44
 80078dc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80078e0:	460b      	mov	r3, r1
 80078e2:	4313      	orrs	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80078e6:	4b86      	ldr	r3, [pc, #536]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	4a85      	ldr	r2, [pc, #532]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078ec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80078f0:	6113      	str	r3, [r2, #16]
 80078f2:	4b83      	ldr	r3, [pc, #524]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80078f4:	6919      	ldr	r1, [r3, #16]
 80078f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078fa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80078fe:	4a80      	ldr	r2, [pc, #512]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007900:	430b      	orrs	r3, r1
 8007902:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800790c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007910:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007912:	2300      	movs	r3, #0
 8007914:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007916:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800791a:	460b      	mov	r3, r1
 800791c:	4313      	orrs	r3, r2
 800791e:	d009      	beq.n	8007934 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007920:	4b77      	ldr	r3, [pc, #476]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007922:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007924:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800792c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800792e:	4a74      	ldr	r2, [pc, #464]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007930:	430b      	orrs	r3, r1
 8007932:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007940:	633b      	str	r3, [r7, #48]	@ 0x30
 8007942:	2300      	movs	r3, #0
 8007944:	637b      	str	r3, [r7, #52]	@ 0x34
 8007946:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800794a:	460b      	mov	r3, r1
 800794c:	4313      	orrs	r3, r2
 800794e:	d00a      	beq.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007950:	4b6b      	ldr	r3, [pc, #428]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007954:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007960:	4a67      	ldr	r2, [pc, #412]	@ (8007b00 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007962:	430b      	orrs	r3, r1
 8007964:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800796a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796e:	2100      	movs	r1, #0
 8007970:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007978:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800797c:	460b      	mov	r3, r1
 800797e:	4313      	orrs	r3, r2
 8007980:	d011      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007986:	3308      	adds	r3, #8
 8007988:	2100      	movs	r1, #0
 800798a:	4618      	mov	r0, r3
 800798c:	f000 fb78 	bl	8008080 <RCCEx_PLL2_Config>
 8007990:	4603      	mov	r3, r0
 8007992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007996:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800799a:	2b00      	cmp	r3, #0
 800799c:	d003      	beq.n	80079a6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800799e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80079a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ae:	2100      	movs	r1, #0
 80079b0:	6239      	str	r1, [r7, #32]
 80079b2:	f003 0302 	and.w	r3, r3, #2
 80079b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80079b8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80079bc:	460b      	mov	r3, r1
 80079be:	4313      	orrs	r3, r2
 80079c0:	d011      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	3308      	adds	r3, #8
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fb58 	bl	8008080 <RCCEx_PLL2_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80079d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d003      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80079e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ee:	2100      	movs	r1, #0
 80079f0:	61b9      	str	r1, [r7, #24]
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	61fb      	str	r3, [r7, #28]
 80079f8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80079fc:	460b      	mov	r3, r1
 80079fe:	4313      	orrs	r3, r2
 8007a00:	d011      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	3308      	adds	r3, #8
 8007a08:	2102      	movs	r1, #2
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f000 fb38 	bl	8008080 <RCCEx_PLL2_Config>
 8007a10:	4603      	mov	r3, r0
 8007a12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d003      	beq.n	8007a26 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007a26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	2100      	movs	r1, #0
 8007a30:	6139      	str	r1, [r7, #16]
 8007a32:	f003 0308 	and.w	r3, r3, #8
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	d011      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a46:	3328      	adds	r3, #40	@ 0x28
 8007a48:	2100      	movs	r1, #0
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 fbca 	bl	80081e4 <RCCEx_PLL3_Config>
 8007a50:	4603      	mov	r3, r0
 8007a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d003      	beq.n	8007a66 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007a66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a6e:	2100      	movs	r1, #0
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	60fb      	str	r3, [r7, #12]
 8007a78:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d011      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	3328      	adds	r3, #40	@ 0x28
 8007a88:	2101      	movs	r1, #1
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fbaa 	bl	80081e4 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007a96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d003      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007aa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	607b      	str	r3, [r7, #4]
 8007ab8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007abc:	460b      	mov	r3, r1
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	d011      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac6:	3328      	adds	r3, #40	@ 0x28
 8007ac8:	2102      	movs	r1, #2
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fb8a 	bl	80081e4 <RCCEx_PLL3_Config>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d003      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007ae6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d101      	bne.n	8007af2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007aee:	2300      	movs	r3, #0
 8007af0:	e000      	b.n	8007af4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
}
 8007af4:	4618      	mov	r0, r3
 8007af6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007afa:	46bd      	mov	sp, r7
 8007afc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b00:	58024400 	.word	0x58024400

08007b04 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007b08:	f7fe fd54 	bl	80065b4 <HAL_RCC_GetHCLKFreq>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	091b      	lsrs	r3, r3, #4
 8007b14:	f003 0307 	and.w	r3, r3, #7
 8007b18:	4904      	ldr	r1, [pc, #16]	@ (8007b2c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007b1a:	5ccb      	ldrb	r3, [r1, r3]
 8007b1c:	f003 031f 	and.w	r3, r3, #31
 8007b20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	58024400 	.word	0x58024400
 8007b2c:	08010088 	.word	0x08010088

08007b30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007b30:	b480      	push	{r7}
 8007b32:	b089      	sub	sp, #36	@ 0x24
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b38:	4ba1      	ldr	r3, [pc, #644]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007b42:	4b9f      	ldr	r3, [pc, #636]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b46:	0b1b      	lsrs	r3, r3, #12
 8007b48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b4c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007b4e:	4b9c      	ldr	r3, [pc, #624]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b52:	091b      	lsrs	r3, r3, #4
 8007b54:	f003 0301 	and.w	r3, r3, #1
 8007b58:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007b5a:	4b99      	ldr	r3, [pc, #612]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b5e:	08db      	lsrs	r3, r3, #3
 8007b60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b64:	693a      	ldr	r2, [r7, #16]
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	ee07 3a90 	vmov	s15, r3
 8007b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b72:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007b76:	697b      	ldr	r3, [r7, #20]
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8111 	beq.w	8007da0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	f000 8083 	beq.w	8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8007b86:	69bb      	ldr	r3, [r7, #24]
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	f200 80a1 	bhi.w	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007b8e:	69bb      	ldr	r3, [r7, #24]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d003      	beq.n	8007b9c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007b94:	69bb      	ldr	r3, [r7, #24]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d056      	beq.n	8007c48 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8007b9a:	e099      	b.n	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b9c:	4b88      	ldr	r3, [pc, #544]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 0320 	and.w	r3, r3, #32
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d02d      	beq.n	8007c04 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ba8:	4b85      	ldr	r3, [pc, #532]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	08db      	lsrs	r3, r3, #3
 8007bae:	f003 0303 	and.w	r3, r3, #3
 8007bb2:	4a84      	ldr	r2, [pc, #528]	@ (8007dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007bb4:	fa22 f303 	lsr.w	r3, r2, r3
 8007bb8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	ee07 3a90 	vmov	s15, r3
 8007bc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bc4:	697b      	ldr	r3, [r7, #20]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bd2:	4b7b      	ldr	r3, [pc, #492]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bda:	ee07 3a90 	vmov	s15, r3
 8007bde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007be6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007bea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007bf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bfe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007c02:	e087      	b.n	8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	ee07 3a90 	vmov	s15, r3
 8007c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c0e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8007dcc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007c12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c16:	4b6a      	ldr	r3, [pc, #424]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c26:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c2a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c46:	e065      	b.n	8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c48:	697b      	ldr	r3, [r7, #20]
 8007c4a:	ee07 3a90 	vmov	s15, r3
 8007c4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c52:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007c56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c5a:	4b59      	ldr	r3, [pc, #356]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c62:	ee07 3a90 	vmov	s15, r3
 8007c66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c6e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007c72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007c7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c8a:	e043      	b.n	8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	ee07 3a90 	vmov	s15, r3
 8007c92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c96:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8007dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8007c9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c9e:	4b48      	ldr	r3, [pc, #288]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ca2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca6:	ee07 3a90 	vmov	s15, r3
 8007caa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cb2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007cc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007cce:	e021      	b.n	8007d14 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	ee07 3a90 	vmov	s15, r3
 8007cd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cda:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8007dd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ce2:	4b37      	ldr	r3, [pc, #220]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cf6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8007dc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007d12:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8007d14:	4b2a      	ldr	r3, [pc, #168]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d18:	0a5b      	lsrs	r3, r3, #9
 8007d1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d1e:	ee07 3a90 	vmov	s15, r3
 8007d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d26:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d3a:	ee17 2a90 	vmov	r2, s15
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8007d42:	4b1f      	ldr	r3, [pc, #124]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d46:	0c1b      	lsrs	r3, r3, #16
 8007d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d4c:	ee07 3a90 	vmov	s15, r3
 8007d50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d54:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d58:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d68:	ee17 2a90 	vmov	r2, s15
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8007d70:	4b13      	ldr	r3, [pc, #76]	@ (8007dc0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d74:	0e1b      	lsrs	r3, r3, #24
 8007d76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007d7a:	ee07 3a90 	vmov	s15, r3
 8007d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007d86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d96:	ee17 2a90 	vmov	r2, s15
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007d9e:	e008      	b.n	8007db2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	609a      	str	r2, [r3, #8]
}
 8007db2:	bf00      	nop
 8007db4:	3724      	adds	r7, #36	@ 0x24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop
 8007dc0:	58024400 	.word	0x58024400
 8007dc4:	03d09000 	.word	0x03d09000
 8007dc8:	46000000 	.word	0x46000000
 8007dcc:	4c742400 	.word	0x4c742400
 8007dd0:	4a742400 	.word	0x4a742400
 8007dd4:	4bbebc20 	.word	0x4bbebc20

08007dd8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b089      	sub	sp, #36	@ 0x24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007de0:	4ba1      	ldr	r3, [pc, #644]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de4:	f003 0303 	and.w	r3, r3, #3
 8007de8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8007dea:	4b9f      	ldr	r3, [pc, #636]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dee:	0d1b      	lsrs	r3, r3, #20
 8007df0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007df4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007df6:	4b9c      	ldr	r3, [pc, #624]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dfa:	0a1b      	lsrs	r3, r3, #8
 8007dfc:	f003 0301 	and.w	r3, r3, #1
 8007e00:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8007e02:	4b99      	ldr	r3, [pc, #612]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007e06:	08db      	lsrs	r3, r3, #3
 8007e08:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007e0c:	693a      	ldr	r2, [r7, #16]
 8007e0e:	fb02 f303 	mul.w	r3, r2, r3
 8007e12:	ee07 3a90 	vmov	s15, r3
 8007e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e1a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 8111 	beq.w	8008048 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007e26:	69bb      	ldr	r3, [r7, #24]
 8007e28:	2b02      	cmp	r3, #2
 8007e2a:	f000 8083 	beq.w	8007f34 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	f200 80a1 	bhi.w	8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d003      	beq.n	8007e44 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007e3c:	69bb      	ldr	r3, [r7, #24]
 8007e3e:	2b01      	cmp	r3, #1
 8007e40:	d056      	beq.n	8007ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007e42:	e099      	b.n	8007f78 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e44:	4b88      	ldr	r3, [pc, #544]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	f003 0320 	and.w	r3, r3, #32
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d02d      	beq.n	8007eac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007e50:	4b85      	ldr	r3, [pc, #532]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	08db      	lsrs	r3, r3, #3
 8007e56:	f003 0303 	and.w	r3, r3, #3
 8007e5a:	4a84      	ldr	r2, [pc, #528]	@ (800806c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007e60:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	ee07 3a90 	vmov	s15, r3
 8007e68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	ee07 3a90 	vmov	s15, r3
 8007e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e82:	ee07 3a90 	vmov	s15, r3
 8007e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007e8e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ea6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8007eaa:	e087      	b.n	8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007eb6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008074 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ec6:	ee07 3a90 	vmov	s15, r3
 8007eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ece:	ed97 6a03 	vldr	s12, [r7, #12]
 8007ed2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007eea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007eee:	e065      	b.n	8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	ee07 3a90 	vmov	s15, r3
 8007ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007efa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007efe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f02:	4b59      	ldr	r3, [pc, #356]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f0a:	ee07 3a90 	vmov	s15, r3
 8007f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f12:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f16:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f32:	e043      	b.n	8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	ee07 3a90 	vmov	s15, r3
 8007f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f3e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800807c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007f42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f46:	4b48      	ldr	r3, [pc, #288]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f4e:	ee07 3a90 	vmov	s15, r3
 8007f52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f56:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f5a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007f5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007f62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007f66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007f6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007f76:	e021      	b.n	8007fbc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	ee07 3a90 	vmov	s15, r3
 8007f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007f82:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008078 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007f86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007f8a:	4b37      	ldr	r3, [pc, #220]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f92:	ee07 3a90 	vmov	s15, r3
 8007f96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007f9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007f9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008070 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007fa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007fa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007faa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007fae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007fb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007fba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8007fbc:	4b2a      	ldr	r3, [pc, #168]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fc0:	0a5b      	lsrs	r3, r3, #9
 8007fc2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007fc6:	ee07 3a90 	vmov	s15, r3
 8007fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007fce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007fd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fd6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007fda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007fde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007fe2:	ee17 2a90 	vmov	r2, s15
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8007fea:	4b1f      	ldr	r3, [pc, #124]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007fee:	0c1b      	lsrs	r3, r3, #16
 8007ff0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ff4:	ee07 3a90 	vmov	s15, r3
 8007ff8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ffc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008000:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008004:	edd7 6a07 	vldr	s13, [r7, #28]
 8008008:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800800c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008010:	ee17 2a90 	vmov	r2, s15
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008018:	4b13      	ldr	r3, [pc, #76]	@ (8008068 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800801a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800801c:	0e1b      	lsrs	r3, r3, #24
 800801e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800802a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800802e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008032:	edd7 6a07 	vldr	s13, [r7, #28]
 8008036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800803a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800803e:	ee17 2a90 	vmov	r2, s15
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008046:	e008      	b.n	800805a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2200      	movs	r2, #0
 800804c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	2200      	movs	r2, #0
 8008052:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	609a      	str	r2, [r3, #8]
}
 800805a:	bf00      	nop
 800805c:	3724      	adds	r7, #36	@ 0x24
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr
 8008066:	bf00      	nop
 8008068:	58024400 	.word	0x58024400
 800806c:	03d09000 	.word	0x03d09000
 8008070:	46000000 	.word	0x46000000
 8008074:	4c742400 	.word	0x4c742400
 8008078:	4a742400 	.word	0x4a742400
 800807c:	4bbebc20 	.word	0x4bbebc20

08008080 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b084      	sub	sp, #16
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
 8008088:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800808a:	2300      	movs	r3, #0
 800808c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800808e:	4b53      	ldr	r3, [pc, #332]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	2b03      	cmp	r3, #3
 8008098:	d101      	bne.n	800809e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	e099      	b.n	80081d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800809e:	4b4f      	ldr	r3, [pc, #316]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a4e      	ldr	r2, [pc, #312]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80080a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80080a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080aa:	f7fa f8ef 	bl	800228c <HAL_GetTick>
 80080ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080b0:	e008      	b.n	80080c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80080b2:	f7fa f8eb 	bl	800228c <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	1ad3      	subs	r3, r2, r3
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d901      	bls.n	80080c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e086      	b.n	80081d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80080c4:	4b45      	ldr	r3, [pc, #276]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1f0      	bne.n	80080b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80080d0:	4b42      	ldr	r3, [pc, #264]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80080d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	031b      	lsls	r3, r3, #12
 80080de:	493f      	ldr	r1, [pc, #252]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80080e0:	4313      	orrs	r3, r2
 80080e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	3b01      	subs	r3, #1
 80080ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	3b01      	subs	r3, #1
 80080f4:	025b      	lsls	r3, r3, #9
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	431a      	orrs	r2, r3
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	3b01      	subs	r3, #1
 8008100:	041b      	lsls	r3, r3, #16
 8008102:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	691b      	ldr	r3, [r3, #16]
 800810c:	3b01      	subs	r3, #1
 800810e:	061b      	lsls	r3, r3, #24
 8008110:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008114:	4931      	ldr	r1, [pc, #196]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008116:	4313      	orrs	r3, r2
 8008118:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800811a:	4b30      	ldr	r3, [pc, #192]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800811c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800811e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	695b      	ldr	r3, [r3, #20]
 8008126:	492d      	ldr	r1, [pc, #180]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008128:	4313      	orrs	r3, r2
 800812a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800812c:	4b2b      	ldr	r3, [pc, #172]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800812e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008130:	f023 0220 	bic.w	r2, r3, #32
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	699b      	ldr	r3, [r3, #24]
 8008138:	4928      	ldr	r1, [pc, #160]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800813a:	4313      	orrs	r3, r2
 800813c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800813e:	4b27      	ldr	r3, [pc, #156]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008142:	4a26      	ldr	r2, [pc, #152]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008144:	f023 0310 	bic.w	r3, r3, #16
 8008148:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800814a:	4b24      	ldr	r3, [pc, #144]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800814c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800814e:	4b24      	ldr	r3, [pc, #144]	@ (80081e0 <RCCEx_PLL2_Config+0x160>)
 8008150:	4013      	ands	r3, r2
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	69d2      	ldr	r2, [r2, #28]
 8008156:	00d2      	lsls	r2, r2, #3
 8008158:	4920      	ldr	r1, [pc, #128]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800815a:	4313      	orrs	r3, r2
 800815c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800815e:	4b1f      	ldr	r3, [pc, #124]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008162:	4a1e      	ldr	r2, [pc, #120]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008164:	f043 0310 	orr.w	r3, r3, #16
 8008168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d106      	bne.n	800817e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008170:	4b1a      	ldr	r3, [pc, #104]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008174:	4a19      	ldr	r2, [pc, #100]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008176:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800817a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800817c:	e00f      	b.n	800819e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d106      	bne.n	8008192 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008184:	4b15      	ldr	r3, [pc, #84]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	4a14      	ldr	r2, [pc, #80]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 800818a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800818e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008190:	e005      	b.n	800819e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008192:	4b12      	ldr	r3, [pc, #72]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008196:	4a11      	ldr	r2, [pc, #68]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 8008198:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800819c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800819e:	4b0f      	ldr	r3, [pc, #60]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a0e      	ldr	r2, [pc, #56]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80081a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80081a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081aa:	f7fa f86f 	bl	800228c <HAL_GetTick>
 80081ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081b0:	e008      	b.n	80081c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80081b2:	f7fa f86b 	bl	800228c <HAL_GetTick>
 80081b6:	4602      	mov	r2, r0
 80081b8:	68bb      	ldr	r3, [r7, #8]
 80081ba:	1ad3      	subs	r3, r2, r3
 80081bc:	2b02      	cmp	r3, #2
 80081be:	d901      	bls.n	80081c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80081c0:	2303      	movs	r3, #3
 80081c2:	e006      	b.n	80081d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80081c4:	4b05      	ldr	r3, [pc, #20]	@ (80081dc <RCCEx_PLL2_Config+0x15c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0f0      	beq.n	80081b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	58024400 	.word	0x58024400
 80081e0:	ffff0007 	.word	0xffff0007

080081e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b084      	sub	sp, #16
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80081f2:	4b53      	ldr	r3, [pc, #332]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081f6:	f003 0303 	and.w	r3, r3, #3
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	d101      	bne.n	8008202 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e099      	b.n	8008336 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008202:	4b4f      	ldr	r3, [pc, #316]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a4e      	ldr	r2, [pc, #312]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008208:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800820c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800820e:	f7fa f83d 	bl	800228c <HAL_GetTick>
 8008212:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008214:	e008      	b.n	8008228 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008216:	f7fa f839 	bl	800228c <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b02      	cmp	r3, #2
 8008222:	d901      	bls.n	8008228 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008224:	2303      	movs	r3, #3
 8008226:	e086      	b.n	8008336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008228:	4b45      	ldr	r3, [pc, #276]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008230:	2b00      	cmp	r3, #0
 8008232:	d1f0      	bne.n	8008216 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008234:	4b42      	ldr	r3, [pc, #264]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	051b      	lsls	r3, r3, #20
 8008242:	493f      	ldr	r1, [pc, #252]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008244:	4313      	orrs	r3, r2
 8008246:	628b      	str	r3, [r1, #40]	@ 0x28
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	3b01      	subs	r3, #1
 800824e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	3b01      	subs	r3, #1
 8008258:	025b      	lsls	r3, r3, #9
 800825a:	b29b      	uxth	r3, r3
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	3b01      	subs	r3, #1
 8008264:	041b      	lsls	r3, r3, #16
 8008266:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800826a:	431a      	orrs	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	3b01      	subs	r3, #1
 8008272:	061b      	lsls	r3, r3, #24
 8008274:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008278:	4931      	ldr	r1, [pc, #196]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800827e:	4b30      	ldr	r3, [pc, #192]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008282:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695b      	ldr	r3, [r3, #20]
 800828a:	492d      	ldr	r1, [pc, #180]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 800828c:	4313      	orrs	r3, r2
 800828e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008290:	4b2b      	ldr	r3, [pc, #172]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008294:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	699b      	ldr	r3, [r3, #24]
 800829c:	4928      	ldr	r1, [pc, #160]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80082a2:	4b27      	ldr	r3, [pc, #156]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a6:	4a26      	ldr	r2, [pc, #152]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80082ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80082ae:	4b24      	ldr	r3, [pc, #144]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082b2:	4b24      	ldr	r3, [pc, #144]	@ (8008344 <RCCEx_PLL3_Config+0x160>)
 80082b4:	4013      	ands	r3, r2
 80082b6:	687a      	ldr	r2, [r7, #4]
 80082b8:	69d2      	ldr	r2, [r2, #28]
 80082ba:	00d2      	lsls	r2, r2, #3
 80082bc:	4920      	ldr	r1, [pc, #128]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082be:	4313      	orrs	r3, r2
 80082c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80082c2:	4b1f      	ldr	r3, [pc, #124]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	4a1e      	ldr	r2, [pc, #120]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80082d4:	4b1a      	ldr	r3, [pc, #104]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082d8:	4a19      	ldr	r2, [pc, #100]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80082de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082e0:	e00f      	b.n	8008302 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	d106      	bne.n	80082f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80082e8:	4b15      	ldr	r3, [pc, #84]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ec:	4a14      	ldr	r2, [pc, #80]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80082f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80082f4:	e005      	b.n	8008302 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80082f6:	4b12      	ldr	r3, [pc, #72]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fa:	4a11      	ldr	r2, [pc, #68]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 80082fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008300:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008302:	4b0f      	ldr	r3, [pc, #60]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a0e      	ldr	r2, [pc, #56]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 8008308:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800830c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800830e:	f7f9 ffbd 	bl	800228c <HAL_GetTick>
 8008312:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008314:	e008      	b.n	8008328 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008316:	f7f9 ffb9 	bl	800228c <HAL_GetTick>
 800831a:	4602      	mov	r2, r0
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	1ad3      	subs	r3, r2, r3
 8008320:	2b02      	cmp	r3, #2
 8008322:	d901      	bls.n	8008328 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008324:	2303      	movs	r3, #3
 8008326:	e006      	b.n	8008336 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008328:	4b05      	ldr	r3, [pc, #20]	@ (8008340 <RCCEx_PLL3_Config+0x15c>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008330:	2b00      	cmp	r3, #0
 8008332:	d0f0      	beq.n	8008316 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
}
 8008336:	4618      	mov	r0, r3
 8008338:	3710      	adds	r7, #16
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}
 800833e:	bf00      	nop
 8008340:	58024400 	.word	0x58024400
 8008344:	ffff0007 	.word	0xffff0007

08008348 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008356:	2301      	movs	r3, #1
 8008358:	e049      	b.n	80083ee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008360:	b2db      	uxtb	r3, r3
 8008362:	2b00      	cmp	r3, #0
 8008364:	d106      	bne.n	8008374 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f841 	bl	80083f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2202      	movs	r2, #2
 8008378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	3304      	adds	r3, #4
 8008384:	4619      	mov	r1, r3
 8008386:	4610      	mov	r0, r2
 8008388:	f000 fb52 	bl	8008a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2201      	movs	r2, #1
 8008390:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2201      	movs	r2, #1
 8008398:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2201      	movs	r2, #1
 80083a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2201      	movs	r2, #1
 80083b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2201      	movs	r2, #1
 80083b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3708      	adds	r7, #8
 80083f2:	46bd      	mov	sp, r7
 80083f4:	bd80      	pop	{r7, pc}

080083f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80083f6:	b480      	push	{r7}
 80083f8:	b083      	sub	sp, #12
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80083fe:	bf00      	nop
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
	...

0800840c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800840c:	b480      	push	{r7}
 800840e:	b085      	sub	sp, #20
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b01      	cmp	r3, #1
 800841e:	d001      	beq.n	8008424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008420:	2301      	movs	r3, #1
 8008422:	e054      	b.n	80084ce <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68da      	ldr	r2, [r3, #12]
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	f042 0201 	orr.w	r2, r2, #1
 800843a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a26      	ldr	r2, [pc, #152]	@ (80084dc <HAL_TIM_Base_Start_IT+0xd0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d022      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800844e:	d01d      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a22      	ldr	r2, [pc, #136]	@ (80084e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008456:	4293      	cmp	r3, r2
 8008458:	d018      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	4a21      	ldr	r2, [pc, #132]	@ (80084e4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008460:	4293      	cmp	r3, r2
 8008462:	d013      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	4a1f      	ldr	r2, [pc, #124]	@ (80084e8 <HAL_TIM_Base_Start_IT+0xdc>)
 800846a:	4293      	cmp	r3, r2
 800846c:	d00e      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	4a1e      	ldr	r2, [pc, #120]	@ (80084ec <HAL_TIM_Base_Start_IT+0xe0>)
 8008474:	4293      	cmp	r3, r2
 8008476:	d009      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4a1c      	ldr	r2, [pc, #112]	@ (80084f0 <HAL_TIM_Base_Start_IT+0xe4>)
 800847e:	4293      	cmp	r3, r2
 8008480:	d004      	beq.n	800848c <HAL_TIM_Base_Start_IT+0x80>
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4a1b      	ldr	r2, [pc, #108]	@ (80084f4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d115      	bne.n	80084b8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	689a      	ldr	r2, [r3, #8]
 8008492:	4b19      	ldr	r3, [pc, #100]	@ (80084f8 <HAL_TIM_Base_Start_IT+0xec>)
 8008494:	4013      	ands	r3, r2
 8008496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2b06      	cmp	r3, #6
 800849c:	d015      	beq.n	80084ca <HAL_TIM_Base_Start_IT+0xbe>
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084a4:	d011      	beq.n	80084ca <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	681a      	ldr	r2, [r3, #0]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f042 0201 	orr.w	r2, r2, #1
 80084b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084b6:	e008      	b.n	80084ca <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e000      	b.n	80084cc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	40010000 	.word	0x40010000
 80084e0:	40000400 	.word	0x40000400
 80084e4:	40000800 	.word	0x40000800
 80084e8:	40000c00 	.word	0x40000c00
 80084ec:	40010400 	.word	0x40010400
 80084f0:	40001800 	.word	0x40001800
 80084f4:	40014000 	.word	0x40014000
 80084f8:	00010007 	.word	0x00010007

080084fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b082      	sub	sp, #8
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d101      	bne.n	800850e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800850a:	2301      	movs	r3, #1
 800850c:	e049      	b.n	80085a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f9 fa86 	bl	8001a34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3304      	adds	r3, #4
 8008538:	4619      	mov	r1, r3
 800853a:	4610      	mov	r0, r2
 800853c:	f000 fa78 	bl	8008a30 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2201      	movs	r2, #1
 8008544:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2201      	movs	r2, #1
 800854c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2201      	movs	r2, #1
 8008554:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2201      	movs	r2, #1
 800855c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2201      	movs	r2, #1
 8008564:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2201      	movs	r2, #1
 800856c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2201      	movs	r2, #1
 8008584:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2201      	movs	r2, #1
 800858c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3708      	adds	r7, #8
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}

080085aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085aa:	b580      	push	{r7, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
 80085b0:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	691b      	ldr	r3, [r3, #16]
 80085c0:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	f003 0302 	and.w	r3, r3, #2
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d020      	beq.n	800860e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f003 0302 	and.w	r3, r3, #2
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d01b      	beq.n	800860e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f06f 0202 	mvn.w	r2, #2
 80085de:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2201      	movs	r2, #1
 80085e4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	699b      	ldr	r3, [r3, #24]
 80085ec:	f003 0303 	and.w	r3, r3, #3
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d003      	beq.n	80085fc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f9fd 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 80085fa:	e005      	b.n	8008608 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f9ef 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa00 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800860e:	68bb      	ldr	r3, [r7, #8]
 8008610:	f003 0304 	and.w	r3, r3, #4
 8008614:	2b00      	cmp	r3, #0
 8008616:	d020      	beq.n	800865a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	f003 0304 	and.w	r3, r3, #4
 800861e:	2b00      	cmp	r3, #0
 8008620:	d01b      	beq.n	800865a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f06f 0204 	mvn.w	r2, #4
 800862a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2202      	movs	r2, #2
 8008630:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	699b      	ldr	r3, [r3, #24]
 8008638:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f000 f9d7 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 8008646:	e005      	b.n	8008654 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 f9c9 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f9da 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800865a:	68bb      	ldr	r3, [r7, #8]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d020      	beq.n	80086a6 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b00      	cmp	r3, #0
 800866c:	d01b      	beq.n	80086a6 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f06f 0208 	mvn.w	r2, #8
 8008676:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2204      	movs	r2, #4
 800867c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f003 0303 	and.w	r3, r3, #3
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f000 f9b1 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 8008692:	e005      	b.n	80086a0 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f9a3 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 f9b4 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	2200      	movs	r2, #0
 80086a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80086a6:	68bb      	ldr	r3, [r7, #8]
 80086a8:	f003 0310 	and.w	r3, r3, #16
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d020      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f003 0310 	and.w	r3, r3, #16
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d01b      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	f06f 0210 	mvn.w	r2, #16
 80086c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2208      	movs	r2, #8
 80086c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d003      	beq.n	80086e0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 f98b 	bl	80089f4 <HAL_TIM_IC_CaptureCallback>
 80086de:	e005      	b.n	80086ec <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086e0:	6878      	ldr	r0, [r7, #4]
 80086e2:	f000 f97d 	bl	80089e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 f98e 	bl	8008a08 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	f003 0301 	and.w	r3, r3, #1
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d00c      	beq.n	8008716 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f003 0301 	and.w	r3, r3, #1
 8008702:	2b00      	cmp	r3, #0
 8008704:	d007      	beq.n	8008716 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f06f 0201 	mvn.w	r2, #1
 800870e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f7f9 f959 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d104      	bne.n	800872a <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00c      	beq.n	8008744 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008730:	2b00      	cmp	r3, #0
 8008732:	d007      	beq.n	8008744 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800873c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fe08 	bl	8009354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008754:	2b00      	cmp	r3, #0
 8008756:	d007      	beq.n	8008768 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fe00 	bl	8009368 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00c      	beq.n	800878c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d007      	beq.n	800878c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008786:	6878      	ldr	r0, [r7, #4]
 8008788:	f000 f948 	bl	8008a1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b00      	cmp	r3, #0
 8008794:	d00c      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f003 0320 	and.w	r3, r3, #32
 800879c:	2b00      	cmp	r3, #0
 800879e:	d007      	beq.n	80087b0 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f06f 0220 	mvn.w	r2, #32
 80087a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fdc8 	bl	8009340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087b0:	bf00      	nop
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b086      	sub	sp, #24
 80087bc:	af00      	add	r7, sp, #0
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d101      	bne.n	80087d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80087d2:	2302      	movs	r3, #2
 80087d4:	e0ff      	b.n	80089d6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2201      	movs	r2, #1
 80087da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2b14      	cmp	r3, #20
 80087e2:	f200 80f0 	bhi.w	80089c6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80087e6:	a201      	add	r2, pc, #4	@ (adr r2, 80087ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	08008841 	.word	0x08008841
 80087f0:	080089c7 	.word	0x080089c7
 80087f4:	080089c7 	.word	0x080089c7
 80087f8:	080089c7 	.word	0x080089c7
 80087fc:	08008881 	.word	0x08008881
 8008800:	080089c7 	.word	0x080089c7
 8008804:	080089c7 	.word	0x080089c7
 8008808:	080089c7 	.word	0x080089c7
 800880c:	080088c3 	.word	0x080088c3
 8008810:	080089c7 	.word	0x080089c7
 8008814:	080089c7 	.word	0x080089c7
 8008818:	080089c7 	.word	0x080089c7
 800881c:	08008903 	.word	0x08008903
 8008820:	080089c7 	.word	0x080089c7
 8008824:	080089c7 	.word	0x080089c7
 8008828:	080089c7 	.word	0x080089c7
 800882c:	08008945 	.word	0x08008945
 8008830:	080089c7 	.word	0x080089c7
 8008834:	080089c7 	.word	0x080089c7
 8008838:	080089c7 	.word	0x080089c7
 800883c:	08008985 	.word	0x08008985
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	68b9      	ldr	r1, [r7, #8]
 8008846:	4618      	mov	r0, r3
 8008848:	f000 f998 	bl	8008b7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	699a      	ldr	r2, [r3, #24]
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f042 0208 	orr.w	r2, r2, #8
 800885a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	699a      	ldr	r2, [r3, #24]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f022 0204 	bic.w	r2, r2, #4
 800886a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6999      	ldr	r1, [r3, #24]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	691a      	ldr	r2, [r3, #16]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	430a      	orrs	r2, r1
 800887c:	619a      	str	r2, [r3, #24]
      break;
 800887e:	e0a5      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68b9      	ldr	r1, [r7, #8]
 8008886:	4618      	mov	r0, r3
 8008888:	f000 fa08 	bl	8008c9c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	699a      	ldr	r2, [r3, #24]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800889a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	6999      	ldr	r1, [r3, #24]
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	691b      	ldr	r3, [r3, #16]
 80088b6:	021a      	lsls	r2, r3, #8
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	430a      	orrs	r2, r1
 80088be:	619a      	str	r2, [r3, #24]
      break;
 80088c0:	e084      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	68b9      	ldr	r1, [r7, #8]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fa71 	bl	8008db0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	69da      	ldr	r2, [r3, #28]
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f042 0208 	orr.w	r2, r2, #8
 80088dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	69da      	ldr	r2, [r3, #28]
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f022 0204 	bic.w	r2, r2, #4
 80088ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	69d9      	ldr	r1, [r3, #28]
 80088f4:	68bb      	ldr	r3, [r7, #8]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	61da      	str	r2, [r3, #28]
      break;
 8008900:	e064      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	68b9      	ldr	r1, [r7, #8]
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fad9 	bl	8008ec0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	69da      	ldr	r2, [r3, #28]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800891c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	69da      	ldr	r2, [r3, #28]
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800892c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	69d9      	ldr	r1, [r3, #28]
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	021a      	lsls	r2, r3, #8
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	430a      	orrs	r2, r1
 8008940:	61da      	str	r2, [r3, #28]
      break;
 8008942:	e043      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	68b9      	ldr	r1, [r7, #8]
 800894a:	4618      	mov	r0, r3
 800894c:	f000 fb22 	bl	8008f94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f042 0208 	orr.w	r2, r2, #8
 800895e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0204 	bic.w	r2, r2, #4
 800896e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	691a      	ldr	r2, [r3, #16]
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	430a      	orrs	r2, r1
 8008980:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008982:	e023      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68b9      	ldr	r1, [r7, #8]
 800898a:	4618      	mov	r0, r3
 800898c:	f000 fb66 	bl	800905c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800899e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089ae:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	691b      	ldr	r3, [r3, #16]
 80089ba:	021a      	lsls	r2, r3, #8
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	430a      	orrs	r2, r1
 80089c2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80089c4:	e002      	b.n	80089cc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop

080089e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b083      	sub	sp, #12
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80089e8:	bf00      	nop
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80089fc:	bf00      	nop
 80089fe:	370c      	adds	r7, #12
 8008a00:	46bd      	mov	sp, r7
 8008a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a10:	bf00      	nop
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b083      	sub	sp, #12
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a46      	ldr	r2, [pc, #280]	@ (8008b5c <TIM_Base_SetConfig+0x12c>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d013      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4e:	d00f      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4a43      	ldr	r2, [pc, #268]	@ (8008b60 <TIM_Base_SetConfig+0x130>)
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d00b      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4a42      	ldr	r2, [pc, #264]	@ (8008b64 <TIM_Base_SetConfig+0x134>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d007      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	4a41      	ldr	r2, [pc, #260]	@ (8008b68 <TIM_Base_SetConfig+0x138>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d003      	beq.n	8008a70 <TIM_Base_SetConfig+0x40>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	4a40      	ldr	r2, [pc, #256]	@ (8008b6c <TIM_Base_SetConfig+0x13c>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d108      	bne.n	8008a82 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	68fa      	ldr	r2, [r7, #12]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	4a35      	ldr	r2, [pc, #212]	@ (8008b5c <TIM_Base_SetConfig+0x12c>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	d01f      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a90:	d01b      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a32      	ldr	r2, [pc, #200]	@ (8008b60 <TIM_Base_SetConfig+0x130>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d017      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	4a31      	ldr	r2, [pc, #196]	@ (8008b64 <TIM_Base_SetConfig+0x134>)
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d013      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	4a30      	ldr	r2, [pc, #192]	@ (8008b68 <TIM_Base_SetConfig+0x138>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d00f      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4a2f      	ldr	r2, [pc, #188]	@ (8008b6c <TIM_Base_SetConfig+0x13c>)
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	d00b      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	4a2e      	ldr	r2, [pc, #184]	@ (8008b70 <TIM_Base_SetConfig+0x140>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d007      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a2d      	ldr	r2, [pc, #180]	@ (8008b74 <TIM_Base_SetConfig+0x144>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d003      	beq.n	8008aca <TIM_Base_SetConfig+0x9a>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	4a2c      	ldr	r2, [pc, #176]	@ (8008b78 <TIM_Base_SetConfig+0x148>)
 8008ac6:	4293      	cmp	r3, r2
 8008ac8:	d108      	bne.n	8008adc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	68fa      	ldr	r2, [r7, #12]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	689a      	ldr	r2, [r3, #8]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	4a16      	ldr	r2, [pc, #88]	@ (8008b5c <TIM_Base_SetConfig+0x12c>)
 8008b04:	4293      	cmp	r3, r2
 8008b06:	d00f      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a18      	ldr	r2, [pc, #96]	@ (8008b6c <TIM_Base_SetConfig+0x13c>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d00b      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	4a17      	ldr	r2, [pc, #92]	@ (8008b70 <TIM_Base_SetConfig+0x140>)
 8008b14:	4293      	cmp	r3, r2
 8008b16:	d007      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a16      	ldr	r2, [pc, #88]	@ (8008b74 <TIM_Base_SetConfig+0x144>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d003      	beq.n	8008b28 <TIM_Base_SetConfig+0xf8>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a15      	ldr	r2, [pc, #84]	@ (8008b78 <TIM_Base_SetConfig+0x148>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d103      	bne.n	8008b30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	691a      	ldr	r2, [r3, #16]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	f003 0301 	and.w	r3, r3, #1
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d105      	bne.n	8008b4e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f023 0201 	bic.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]
  }
}
 8008b4e:	bf00      	nop
 8008b50:	3714      	adds	r7, #20
 8008b52:	46bd      	mov	sp, r7
 8008b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	40010000 	.word	0x40010000
 8008b60:	40000400 	.word	0x40000400
 8008b64:	40000800 	.word	0x40000800
 8008b68:	40000c00 	.word	0x40000c00
 8008b6c:	40010400 	.word	0x40010400
 8008b70:	40014000 	.word	0x40014000
 8008b74:	40014400 	.word	0x40014400
 8008b78:	40014800 	.word	0x40014800

08008b7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b087      	sub	sp, #28
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1b      	ldr	r3, [r3, #32]
 8008b8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6a1b      	ldr	r3, [r3, #32]
 8008b90:	f023 0201 	bic.w	r2, r3, #1
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	699b      	ldr	r3, [r3, #24]
 8008ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008ba4:	68fa      	ldr	r2, [r7, #12]
 8008ba6:	4b37      	ldr	r3, [pc, #220]	@ (8008c84 <TIM_OC1_SetConfig+0x108>)
 8008ba8:	4013      	ands	r3, r2
 8008baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0303 	bic.w	r3, r3, #3
 8008bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f023 0302 	bic.w	r3, r3, #2
 8008bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8008c88 <TIM_OC1_SetConfig+0x10c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d00f      	beq.n	8008bf8 <TIM_OC1_SetConfig+0x7c>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a2c      	ldr	r2, [pc, #176]	@ (8008c8c <TIM_OC1_SetConfig+0x110>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d00b      	beq.n	8008bf8 <TIM_OC1_SetConfig+0x7c>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a2b      	ldr	r2, [pc, #172]	@ (8008c90 <TIM_OC1_SetConfig+0x114>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d007      	beq.n	8008bf8 <TIM_OC1_SetConfig+0x7c>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a2a      	ldr	r2, [pc, #168]	@ (8008c94 <TIM_OC1_SetConfig+0x118>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d003      	beq.n	8008bf8 <TIM_OC1_SetConfig+0x7c>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a29      	ldr	r2, [pc, #164]	@ (8008c98 <TIM_OC1_SetConfig+0x11c>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d10c      	bne.n	8008c12 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	f023 0308 	bic.w	r3, r3, #8
 8008bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	697a      	ldr	r2, [r7, #20]
 8008c06:	4313      	orrs	r3, r2
 8008c08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f023 0304 	bic.w	r3, r3, #4
 8008c10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	4a1c      	ldr	r2, [pc, #112]	@ (8008c88 <TIM_OC1_SetConfig+0x10c>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d00f      	beq.n	8008c3a <TIM_OC1_SetConfig+0xbe>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8008c8c <TIM_OC1_SetConfig+0x110>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d00b      	beq.n	8008c3a <TIM_OC1_SetConfig+0xbe>
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	4a1a      	ldr	r2, [pc, #104]	@ (8008c90 <TIM_OC1_SetConfig+0x114>)
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d007      	beq.n	8008c3a <TIM_OC1_SetConfig+0xbe>
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	4a19      	ldr	r2, [pc, #100]	@ (8008c94 <TIM_OC1_SetConfig+0x118>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d003      	beq.n	8008c3a <TIM_OC1_SetConfig+0xbe>
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a18      	ldr	r2, [pc, #96]	@ (8008c98 <TIM_OC1_SetConfig+0x11c>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d111      	bne.n	8008c5e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	695b      	ldr	r3, [r3, #20]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	4313      	orrs	r3, r2
 8008c52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	699b      	ldr	r3, [r3, #24]
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	4313      	orrs	r3, r2
 8008c5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	68fa      	ldr	r2, [r7, #12]
 8008c68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	685a      	ldr	r2, [r3, #4]
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	621a      	str	r2, [r3, #32]
}
 8008c78:	bf00      	nop
 8008c7a:	371c      	adds	r7, #28
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr
 8008c84:	fffeff8f 	.word	0xfffeff8f
 8008c88:	40010000 	.word	0x40010000
 8008c8c:	40010400 	.word	0x40010400
 8008c90:	40014000 	.word	0x40014000
 8008c94:	40014400 	.word	0x40014400
 8008c98:	40014800 	.word	0x40014800

08008c9c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c9c:	b480      	push	{r7}
 8008c9e:	b087      	sub	sp, #28
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
 8008ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	6a1b      	ldr	r3, [r3, #32]
 8008cb0:	f023 0210 	bic.w	r2, r3, #16
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cc4:	68fa      	ldr	r2, [r7, #12]
 8008cc6:	4b34      	ldr	r3, [pc, #208]	@ (8008d98 <TIM_OC2_SetConfig+0xfc>)
 8008cc8:	4013      	ands	r3, r2
 8008cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	021b      	lsls	r3, r3, #8
 8008cda:	68fa      	ldr	r2, [r7, #12]
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f023 0320 	bic.w	r3, r3, #32
 8008ce6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	689b      	ldr	r3, [r3, #8]
 8008cec:	011b      	lsls	r3, r3, #4
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a29      	ldr	r2, [pc, #164]	@ (8008d9c <TIM_OC2_SetConfig+0x100>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d003      	beq.n	8008d04 <TIM_OC2_SetConfig+0x68>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a28      	ldr	r2, [pc, #160]	@ (8008da0 <TIM_OC2_SetConfig+0x104>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d10d      	bne.n	8008d20 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	011b      	lsls	r3, r3, #4
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	4313      	orrs	r3, r2
 8008d16:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d1e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a1e      	ldr	r2, [pc, #120]	@ (8008d9c <TIM_OC2_SetConfig+0x100>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d00f      	beq.n	8008d48 <TIM_OC2_SetConfig+0xac>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8008da0 <TIM_OC2_SetConfig+0x104>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d00b      	beq.n	8008d48 <TIM_OC2_SetConfig+0xac>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	4a1c      	ldr	r2, [pc, #112]	@ (8008da4 <TIM_OC2_SetConfig+0x108>)
 8008d34:	4293      	cmp	r3, r2
 8008d36:	d007      	beq.n	8008d48 <TIM_OC2_SetConfig+0xac>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8008da8 <TIM_OC2_SetConfig+0x10c>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d003      	beq.n	8008d48 <TIM_OC2_SetConfig+0xac>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	4a1a      	ldr	r2, [pc, #104]	@ (8008dac <TIM_OC2_SetConfig+0x110>)
 8008d44:	4293      	cmp	r3, r2
 8008d46:	d113      	bne.n	8008d70 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d4e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d56:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	695b      	ldr	r3, [r3, #20]
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	4313      	orrs	r3, r2
 8008d62:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	699b      	ldr	r3, [r3, #24]
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68fa      	ldr	r2, [r7, #12]
 8008d7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	685a      	ldr	r2, [r3, #4]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	697a      	ldr	r2, [r7, #20]
 8008d88:	621a      	str	r2, [r3, #32]
}
 8008d8a:	bf00      	nop
 8008d8c:	371c      	adds	r7, #28
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	feff8fff 	.word	0xfeff8fff
 8008d9c:	40010000 	.word	0x40010000
 8008da0:	40010400 	.word	0x40010400
 8008da4:	40014000 	.word	0x40014000
 8008da8:	40014400 	.word	0x40014400
 8008dac:	40014800 	.word	0x40014800

08008db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b087      	sub	sp, #28
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
 8008db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6a1b      	ldr	r3, [r3, #32]
 8008dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6a1b      	ldr	r3, [r3, #32]
 8008dc4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	685b      	ldr	r3, [r3, #4]
 8008dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4b33      	ldr	r3, [pc, #204]	@ (8008ea8 <TIM_OC3_SetConfig+0xf8>)
 8008ddc:	4013      	ands	r3, r2
 8008dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f023 0303 	bic.w	r3, r3, #3
 8008de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	68fa      	ldr	r2, [r7, #12]
 8008dee:	4313      	orrs	r3, r2
 8008df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008df2:	697b      	ldr	r3, [r7, #20]
 8008df4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	697a      	ldr	r2, [r7, #20]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a28      	ldr	r2, [pc, #160]	@ (8008eac <TIM_OC3_SetConfig+0xfc>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d003      	beq.n	8008e16 <TIM_OC3_SetConfig+0x66>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a27      	ldr	r2, [pc, #156]	@ (8008eb0 <TIM_OC3_SetConfig+0x100>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d10d      	bne.n	8008e32 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	021b      	lsls	r3, r3, #8
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	4313      	orrs	r3, r2
 8008e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1d      	ldr	r2, [pc, #116]	@ (8008eac <TIM_OC3_SetConfig+0xfc>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d00f      	beq.n	8008e5a <TIM_OC3_SetConfig+0xaa>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8008eb0 <TIM_OC3_SetConfig+0x100>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d00b      	beq.n	8008e5a <TIM_OC3_SetConfig+0xaa>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a1b      	ldr	r2, [pc, #108]	@ (8008eb4 <TIM_OC3_SetConfig+0x104>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d007      	beq.n	8008e5a <TIM_OC3_SetConfig+0xaa>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8008eb8 <TIM_OC3_SetConfig+0x108>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d003      	beq.n	8008e5a <TIM_OC3_SetConfig+0xaa>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a19      	ldr	r2, [pc, #100]	@ (8008ebc <TIM_OC3_SetConfig+0x10c>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d113      	bne.n	8008e82 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e62:	693b      	ldr	r3, [r7, #16]
 8008e64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	695b      	ldr	r3, [r3, #20]
 8008e6e:	011b      	lsls	r3, r3, #4
 8008e70:	693a      	ldr	r2, [r7, #16]
 8008e72:	4313      	orrs	r3, r2
 8008e74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	011b      	lsls	r3, r3, #4
 8008e7c:	693a      	ldr	r2, [r7, #16]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	693a      	ldr	r2, [r7, #16]
 8008e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	68fa      	ldr	r2, [r7, #12]
 8008e8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	685a      	ldr	r2, [r3, #4]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	621a      	str	r2, [r3, #32]
}
 8008e9c:	bf00      	nop
 8008e9e:	371c      	adds	r7, #28
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	fffeff8f 	.word	0xfffeff8f
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	40010400 	.word	0x40010400
 8008eb4:	40014000 	.word	0x40014000
 8008eb8:	40014400 	.word	0x40014400
 8008ebc:	40014800 	.word	0x40014800

08008ec0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b087      	sub	sp, #28
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
 8008ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a1b      	ldr	r3, [r3, #32]
 8008ed4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	4b24      	ldr	r3, [pc, #144]	@ (8008f7c <TIM_OC4_SetConfig+0xbc>)
 8008eec:	4013      	ands	r3, r2
 8008eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	021b      	lsls	r3, r3, #8
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	689b      	ldr	r3, [r3, #8]
 8008f10:	031b      	lsls	r3, r3, #12
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a19      	ldr	r2, [pc, #100]	@ (8008f80 <TIM_OC4_SetConfig+0xc0>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d00f      	beq.n	8008f40 <TIM_OC4_SetConfig+0x80>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a18      	ldr	r2, [pc, #96]	@ (8008f84 <TIM_OC4_SetConfig+0xc4>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d00b      	beq.n	8008f40 <TIM_OC4_SetConfig+0x80>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a17      	ldr	r2, [pc, #92]	@ (8008f88 <TIM_OC4_SetConfig+0xc8>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d007      	beq.n	8008f40 <TIM_OC4_SetConfig+0x80>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a16      	ldr	r2, [pc, #88]	@ (8008f8c <TIM_OC4_SetConfig+0xcc>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d003      	beq.n	8008f40 <TIM_OC4_SetConfig+0x80>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a15      	ldr	r2, [pc, #84]	@ (8008f90 <TIM_OC4_SetConfig+0xd0>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d109      	bne.n	8008f54 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008f46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	695b      	ldr	r3, [r3, #20]
 8008f4c:	019b      	lsls	r3, r3, #6
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	4313      	orrs	r3, r2
 8008f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	697a      	ldr	r2, [r7, #20]
 8008f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	685a      	ldr	r2, [r3, #4]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	621a      	str	r2, [r3, #32]
}
 8008f6e:	bf00      	nop
 8008f70:	371c      	adds	r7, #28
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	feff8fff 	.word	0xfeff8fff
 8008f80:	40010000 	.word	0x40010000
 8008f84:	40010400 	.word	0x40010400
 8008f88:	40014000 	.word	0x40014000
 8008f8c:	40014400 	.word	0x40014400
 8008f90:	40014800 	.word	0x40014800

08008f94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b087      	sub	sp, #28
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6a1b      	ldr	r3, [r3, #32]
 8008fa2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	685b      	ldr	r3, [r3, #4]
 8008fb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008fbc:	68fa      	ldr	r2, [r7, #12]
 8008fbe:	4b21      	ldr	r3, [pc, #132]	@ (8009044 <TIM_OC5_SetConfig+0xb0>)
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8008fd4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	041b      	lsls	r3, r3, #16
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a18      	ldr	r2, [pc, #96]	@ (8009048 <TIM_OC5_SetConfig+0xb4>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d00f      	beq.n	800900a <TIM_OC5_SetConfig+0x76>
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	4a17      	ldr	r2, [pc, #92]	@ (800904c <TIM_OC5_SetConfig+0xb8>)
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d00b      	beq.n	800900a <TIM_OC5_SetConfig+0x76>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <TIM_OC5_SetConfig+0xbc>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d007      	beq.n	800900a <TIM_OC5_SetConfig+0x76>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <TIM_OC5_SetConfig+0xc0>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d003      	beq.n	800900a <TIM_OC5_SetConfig+0x76>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	4a14      	ldr	r2, [pc, #80]	@ (8009058 <TIM_OC5_SetConfig+0xc4>)
 8009006:	4293      	cmp	r3, r2
 8009008:	d109      	bne.n	800901e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009010:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	695b      	ldr	r3, [r3, #20]
 8009016:	021b      	lsls	r3, r3, #8
 8009018:	697a      	ldr	r2, [r7, #20]
 800901a:	4313      	orrs	r3, r2
 800901c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	697a      	ldr	r2, [r7, #20]
 8009022:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	693a      	ldr	r2, [r7, #16]
 8009036:	621a      	str	r2, [r3, #32]
}
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr
 8009044:	fffeff8f 	.word	0xfffeff8f
 8009048:	40010000 	.word	0x40010000
 800904c:	40010400 	.word	0x40010400
 8009050:	40014000 	.word	0x40014000
 8009054:	40014400 	.word	0x40014400
 8009058:	40014800 	.word	0x40014800

0800905c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009084:	68fa      	ldr	r2, [r7, #12]
 8009086:	4b22      	ldr	r3, [pc, #136]	@ (8009110 <TIM_OC6_SetConfig+0xb4>)
 8009088:	4013      	ands	r3, r2
 800908a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	021b      	lsls	r3, r3, #8
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	4313      	orrs	r3, r2
 8009096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009098:	693b      	ldr	r3, [r7, #16]
 800909a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800909e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	689b      	ldr	r3, [r3, #8]
 80090a4:	051b      	lsls	r3, r3, #20
 80090a6:	693a      	ldr	r2, [r7, #16]
 80090a8:	4313      	orrs	r3, r2
 80090aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	4a19      	ldr	r2, [pc, #100]	@ (8009114 <TIM_OC6_SetConfig+0xb8>)
 80090b0:	4293      	cmp	r3, r2
 80090b2:	d00f      	beq.n	80090d4 <TIM_OC6_SetConfig+0x78>
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	4a18      	ldr	r2, [pc, #96]	@ (8009118 <TIM_OC6_SetConfig+0xbc>)
 80090b8:	4293      	cmp	r3, r2
 80090ba:	d00b      	beq.n	80090d4 <TIM_OC6_SetConfig+0x78>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	4a17      	ldr	r2, [pc, #92]	@ (800911c <TIM_OC6_SetConfig+0xc0>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d007      	beq.n	80090d4 <TIM_OC6_SetConfig+0x78>
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	4a16      	ldr	r2, [pc, #88]	@ (8009120 <TIM_OC6_SetConfig+0xc4>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d003      	beq.n	80090d4 <TIM_OC6_SetConfig+0x78>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	4a15      	ldr	r2, [pc, #84]	@ (8009124 <TIM_OC6_SetConfig+0xc8>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d109      	bne.n	80090e8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80090d4:	697b      	ldr	r3, [r7, #20]
 80090d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80090da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	695b      	ldr	r3, [r3, #20]
 80090e0:	029b      	lsls	r3, r3, #10
 80090e2:	697a      	ldr	r2, [r7, #20]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	697a      	ldr	r2, [r7, #20]
 80090ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80090f4:	683b      	ldr	r3, [r7, #0]
 80090f6:	685a      	ldr	r2, [r3, #4]
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	693a      	ldr	r2, [r7, #16]
 8009100:	621a      	str	r2, [r3, #32]
}
 8009102:	bf00      	nop
 8009104:	371c      	adds	r7, #28
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	feff8fff 	.word	0xfeff8fff
 8009114:	40010000 	.word	0x40010000
 8009118:	40010400 	.word	0x40010400
 800911c:	40014000 	.word	0x40014000
 8009120:	40014400 	.word	0x40014400
 8009124:	40014800 	.word	0x40014800

08009128 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009128:	b480      	push	{r7}
 800912a:	b085      	sub	sp, #20
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009138:	2b01      	cmp	r3, #1
 800913a:	d101      	bne.n	8009140 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800913c:	2302      	movs	r3, #2
 800913e:	e06d      	b.n	800921c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	2202      	movs	r2, #2
 800914c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689b      	ldr	r3, [r3, #8]
 800915e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a30      	ldr	r2, [pc, #192]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d004      	beq.n	8009174 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a2f      	ldr	r2, [pc, #188]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d108      	bne.n	8009186 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800917a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	4313      	orrs	r3, r2
 8009184:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800918c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68fa      	ldr	r2, [r7, #12]
 8009194:	4313      	orrs	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a20      	ldr	r2, [pc, #128]	@ (8009228 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d022      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091b2:	d01d      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	4a1d      	ldr	r2, [pc, #116]	@ (8009230 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d018      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a1c      	ldr	r2, [pc, #112]	@ (8009234 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80091c4:	4293      	cmp	r3, r2
 80091c6:	d013      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a1a      	ldr	r2, [pc, #104]	@ (8009238 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d00e      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	4a15      	ldr	r2, [pc, #84]	@ (800922c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d009      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	4a16      	ldr	r2, [pc, #88]	@ (800923c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d004      	beq.n	80091f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	4a15      	ldr	r2, [pc, #84]	@ (8009240 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d10c      	bne.n	800920a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091f6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	68ba      	ldr	r2, [r7, #8]
 80091fe:	4313      	orrs	r3, r2
 8009200:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	68ba      	ldr	r2, [r7, #8]
 8009208:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2200      	movs	r2, #0
 8009216:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3714      	adds	r7, #20
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr
 8009228:	40010000 	.word	0x40010000
 800922c:	40010400 	.word	0x40010400
 8009230:	40000400 	.word	0x40000400
 8009234:	40000800 	.word	0x40000800
 8009238:	40000c00 	.word	0x40000c00
 800923c:	40001800 	.word	0x40001800
 8009240:	40014000 	.word	0x40014000

08009244 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800924e:	2300      	movs	r3, #0
 8009250:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009258:	2b01      	cmp	r3, #1
 800925a:	d101      	bne.n	8009260 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800925c:	2302      	movs	r3, #2
 800925e:	e065      	b.n	800932c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	4313      	orrs	r3, r2
 8009274:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	4313      	orrs	r3, r2
 8009282:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800928a:	683b      	ldr	r3, [r7, #0]
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	4313      	orrs	r3, r2
 8009290:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4313      	orrs	r3, r2
 800929e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	691b      	ldr	r3, [r3, #16]
 80092aa:	4313      	orrs	r3, r2
 80092ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	695b      	ldr	r3, [r3, #20]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092c6:	4313      	orrs	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	041b      	lsls	r3, r3, #16
 80092d6:	4313      	orrs	r3, r2
 80092d8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a16      	ldr	r2, [pc, #88]	@ (8009338 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d004      	beq.n	80092ee <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	4a14      	ldr	r2, [pc, #80]	@ (800933c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d115      	bne.n	800931a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092f8:	051b      	lsls	r3, r3, #20
 80092fa:	4313      	orrs	r3, r2
 80092fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	69db      	ldr	r3, [r3, #28]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	4313      	orrs	r3, r2
 8009318:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2200      	movs	r2, #0
 8009326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3714      	adds	r7, #20
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr
 8009338:	40010000 	.word	0x40010000
 800933c:	40010400 	.word	0x40010400

08009340 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009348:	bf00      	nop
 800934a:	370c      	adds	r7, #12
 800934c:	46bd      	mov	sp, r7
 800934e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009352:	4770      	bx	lr

08009354 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800935c:	bf00      	nop
 800935e:	370c      	adds	r7, #12
 8009360:	46bd      	mov	sp, r7
 8009362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009366:	4770      	bx	lr

08009368 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009368:	b480      	push	{r7}
 800936a:	b083      	sub	sp, #12
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009370:	bf00      	nop
 8009372:	370c      	adds	r7, #12
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b082      	sub	sp, #8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d101      	bne.n	800938e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	e042      	b.n	8009414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009394:	2b00      	cmp	r3, #0
 8009396:	d106      	bne.n	80093a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2200      	movs	r2, #0
 800939c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7f8 fbcb 	bl	8001b3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2224      	movs	r2, #36	@ 0x24
 80093aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	681a      	ldr	r2, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	f022 0201 	bic.w	r2, r2, #1
 80093bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80093c6:	6878      	ldr	r0, [r7, #4]
 80093c8:	f001 fac8 	bl	800a95c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f000 fd5d 	bl	8009e8c <UART_SetConfig>
 80093d2:	4603      	mov	r3, r0
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d101      	bne.n	80093dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80093d8:	2301      	movs	r3, #1
 80093da:	e01b      	b.n	8009414 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	685a      	ldr	r2, [r3, #4]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80093ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	689a      	ldr	r2, [r3, #8]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80093fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	681b      	ldr	r3, [r3, #0]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	f042 0201 	orr.w	r2, r2, #1
 800940a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f001 fb47 	bl	800aaa0 <UART_CheckIdleState>
 8009412:	4603      	mov	r3, r0
}
 8009414:	4618      	mov	r0, r3
 8009416:	3708      	adds	r7, #8
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}

0800941c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08a      	sub	sp, #40	@ 0x28
 8009420:	af02      	add	r7, sp, #8
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	603b      	str	r3, [r7, #0]
 8009428:	4613      	mov	r3, r2
 800942a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009432:	2b20      	cmp	r3, #32
 8009434:	d17b      	bne.n	800952e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d002      	beq.n	8009442 <HAL_UART_Transmit+0x26>
 800943c:	88fb      	ldrh	r3, [r7, #6]
 800943e:	2b00      	cmp	r3, #0
 8009440:	d101      	bne.n	8009446 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e074      	b.n	8009530 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2221      	movs	r2, #33	@ 0x21
 8009452:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009456:	f7f8 ff19 	bl	800228c <HAL_GetTick>
 800945a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	88fa      	ldrh	r2, [r7, #6]
 8009460:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	88fa      	ldrh	r2, [r7, #6]
 8009468:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009474:	d108      	bne.n	8009488 <HAL_UART_Transmit+0x6c>
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d104      	bne.n	8009488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800947e:	2300      	movs	r3, #0
 8009480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	61bb      	str	r3, [r7, #24]
 8009486:	e003      	b.n	8009490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8009488:	68bb      	ldr	r3, [r7, #8]
 800948a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800948c:	2300      	movs	r3, #0
 800948e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009490:	e030      	b.n	80094f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	9300      	str	r3, [sp, #0]
 8009496:	697b      	ldr	r3, [r7, #20]
 8009498:	2200      	movs	r2, #0
 800949a:	2180      	movs	r1, #128	@ 0x80
 800949c:	68f8      	ldr	r0, [r7, #12]
 800949e:	f001 fba9 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d005      	beq.n	80094b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	2220      	movs	r2, #32
 80094ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80094b0:	2303      	movs	r3, #3
 80094b2:	e03d      	b.n	8009530 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80094b4:	69fb      	ldr	r3, [r7, #28]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d10b      	bne.n	80094d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80094ba:	69bb      	ldr	r3, [r7, #24]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80094c8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	3302      	adds	r3, #2
 80094ce:	61bb      	str	r3, [r7, #24]
 80094d0:	e007      	b.n	80094e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80094d2:	69fb      	ldr	r3, [r7, #28]
 80094d4:	781a      	ldrb	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80094dc:	69fb      	ldr	r3, [r7, #28]
 80094de:	3301      	adds	r3, #1
 80094e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	3b01      	subs	r3, #1
 80094ec:	b29a      	uxth	r2, r3
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1c8      	bne.n	8009492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	9300      	str	r3, [sp, #0]
 8009504:	697b      	ldr	r3, [r7, #20]
 8009506:	2200      	movs	r2, #0
 8009508:	2140      	movs	r1, #64	@ 0x40
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f001 fb72 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 8009510:	4603      	mov	r3, r0
 8009512:	2b00      	cmp	r3, #0
 8009514:	d005      	beq.n	8009522 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800951e:	2303      	movs	r3, #3
 8009520:	e006      	b.n	8009530 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2220      	movs	r2, #32
 8009526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	e000      	b.n	8009530 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800952e:	2302      	movs	r3, #2
  }
}
 8009530:	4618      	mov	r0, r3
 8009532:	3720      	adds	r7, #32
 8009534:	46bd      	mov	sp, r7
 8009536:	bd80      	pop	{r7, pc}

08009538 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	@ 0x28
 800953c:	af02      	add	r7, sp, #8
 800953e:	60f8      	str	r0, [r7, #12]
 8009540:	60b9      	str	r1, [r7, #8]
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	4613      	mov	r3, r2
 8009546:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800954e:	2b20      	cmp	r3, #32
 8009550:	f040 80b5 	bne.w	80096be <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <HAL_UART_Receive+0x28>
 800955a:	88fb      	ldrh	r3, [r7, #6]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d101      	bne.n	8009564 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	e0ad      	b.n	80096c0 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2222      	movs	r2, #34	@ 0x22
 8009570:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	2200      	movs	r2, #0
 8009578:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800957a:	f7f8 fe87 	bl	800228c <HAL_GetTick>
 800957e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	88fa      	ldrh	r2, [r7, #6]
 8009584:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	88fa      	ldrh	r2, [r7, #6]
 800958c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009598:	d10e      	bne.n	80095b8 <HAL_UART_Receive+0x80>
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	691b      	ldr	r3, [r3, #16]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d105      	bne.n	80095ae <HAL_UART_Receive+0x76>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80095a8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095ac:	e02d      	b.n	800960a <HAL_UART_Receive+0xd2>
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	22ff      	movs	r2, #255	@ 0xff
 80095b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095b6:	e028      	b.n	800960a <HAL_UART_Receive+0xd2>
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	689b      	ldr	r3, [r3, #8]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d10d      	bne.n	80095dc <HAL_UART_Receive+0xa4>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d104      	bne.n	80095d2 <HAL_UART_Receive+0x9a>
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	22ff      	movs	r2, #255	@ 0xff
 80095cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095d0:	e01b      	b.n	800960a <HAL_UART_Receive+0xd2>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	227f      	movs	r2, #127	@ 0x7f
 80095d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095da:	e016      	b.n	800960a <HAL_UART_Receive+0xd2>
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095e4:	d10d      	bne.n	8009602 <HAL_UART_Receive+0xca>
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d104      	bne.n	80095f8 <HAL_UART_Receive+0xc0>
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	227f      	movs	r2, #127	@ 0x7f
 80095f2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80095f6:	e008      	b.n	800960a <HAL_UART_Receive+0xd2>
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	223f      	movs	r2, #63	@ 0x3f
 80095fc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8009600:	e003      	b.n	800960a <HAL_UART_Receive+0xd2>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2200      	movs	r2, #0
 8009606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009610:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800961a:	d108      	bne.n	800962e <HAL_UART_Receive+0xf6>
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	691b      	ldr	r3, [r3, #16]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d104      	bne.n	800962e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8009624:	2300      	movs	r3, #0
 8009626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	61bb      	str	r3, [r7, #24]
 800962c:	e003      	b.n	8009636 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009636:	e036      	b.n	80096a6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	9300      	str	r3, [sp, #0]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2200      	movs	r2, #0
 8009640:	2120      	movs	r1, #32
 8009642:	68f8      	ldr	r0, [r7, #12]
 8009644:	f001 fad6 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 8009648:	4603      	mov	r3, r0
 800964a:	2b00      	cmp	r3, #0
 800964c:	d005      	beq.n	800965a <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	2220      	movs	r2, #32
 8009652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 8009656:	2303      	movs	r3, #3
 8009658:	e032      	b.n	80096c0 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d10c      	bne.n	800967a <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009666:	b29a      	uxth	r2, r3
 8009668:	8a7b      	ldrh	r3, [r7, #18]
 800966a:	4013      	ands	r3, r2
 800966c:	b29a      	uxth	r2, r3
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	3302      	adds	r3, #2
 8009676:	61bb      	str	r3, [r7, #24]
 8009678:	e00c      	b.n	8009694 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009680:	b2da      	uxtb	r2, r3
 8009682:	8a7b      	ldrh	r3, [r7, #18]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	4013      	ands	r3, r2
 8009688:	b2da      	uxtb	r2, r3
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800968e:	69fb      	ldr	r3, [r7, #28]
 8009690:	3301      	adds	r3, #1
 8009692:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800969a:	b29b      	uxth	r3, r3
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80096ac:	b29b      	uxth	r3, r3
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d1c2      	bne.n	8009638 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2220      	movs	r2, #32
 80096b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 80096ba:	2300      	movs	r3, #0
 80096bc:	e000      	b.n	80096c0 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 80096be:	2302      	movs	r3, #2
  }
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3720      	adds	r7, #32
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b0ba      	sub	sp, #232	@ 0xe8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	69db      	ldr	r3, [r3, #28]
 80096d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096ee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80096f2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80096f6:	4013      	ands	r3, r2
 80096f8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80096fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009700:	2b00      	cmp	r3, #0
 8009702:	d11b      	bne.n	800973c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009708:	f003 0320 	and.w	r3, r3, #32
 800970c:	2b00      	cmp	r3, #0
 800970e:	d015      	beq.n	800973c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009714:	f003 0320 	and.w	r3, r3, #32
 8009718:	2b00      	cmp	r3, #0
 800971a:	d105      	bne.n	8009728 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800971c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009720:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d009      	beq.n	800973c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800972c:	2b00      	cmp	r3, #0
 800972e:	f000 8377 	beq.w	8009e20 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	4798      	blx	r3
      }
      return;
 800973a:	e371      	b.n	8009e20 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800973c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 8123 	beq.w	800998c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8009746:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800974a:	4b8d      	ldr	r3, [pc, #564]	@ (8009980 <HAL_UART_IRQHandler+0x2b8>)
 800974c:	4013      	ands	r3, r2
 800974e:	2b00      	cmp	r3, #0
 8009750:	d106      	bne.n	8009760 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8009752:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8009756:	4b8b      	ldr	r3, [pc, #556]	@ (8009984 <HAL_UART_IRQHandler+0x2bc>)
 8009758:	4013      	ands	r3, r2
 800975a:	2b00      	cmp	r3, #0
 800975c:	f000 8116 	beq.w	800998c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009764:	f003 0301 	and.w	r3, r3, #1
 8009768:	2b00      	cmp	r3, #0
 800976a:	d011      	beq.n	8009790 <HAL_UART_IRQHandler+0xc8>
 800976c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009770:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009774:	2b00      	cmp	r3, #0
 8009776:	d00b      	beq.n	8009790 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2201      	movs	r2, #1
 800977e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009786:	f043 0201 	orr.w	r2, r3, #1
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009794:	f003 0302 	and.w	r3, r3, #2
 8009798:	2b00      	cmp	r3, #0
 800979a:	d011      	beq.n	80097c0 <HAL_UART_IRQHandler+0xf8>
 800979c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097a0:	f003 0301 	and.w	r3, r3, #1
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00b      	beq.n	80097c0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2202      	movs	r2, #2
 80097ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097b6:	f043 0204 	orr.w	r2, r3, #4
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80097c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097c4:	f003 0304 	and.w	r3, r3, #4
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d011      	beq.n	80097f0 <HAL_UART_IRQHandler+0x128>
 80097cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d00b      	beq.n	80097f0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2204      	movs	r2, #4
 80097de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80097e6:	f043 0202 	orr.w	r2, r3, #2
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80097f4:	f003 0308 	and.w	r3, r3, #8
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d017      	beq.n	800982c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80097fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009800:	f003 0320 	and.w	r3, r3, #32
 8009804:	2b00      	cmp	r3, #0
 8009806:	d105      	bne.n	8009814 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8009808:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800980c:	4b5c      	ldr	r3, [pc, #368]	@ (8009980 <HAL_UART_IRQHandler+0x2b8>)
 800980e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009810:	2b00      	cmp	r3, #0
 8009812:	d00b      	beq.n	800982c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2208      	movs	r2, #8
 800981a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009822:	f043 0208 	orr.w	r2, r3, #8
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800982c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009830:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009834:	2b00      	cmp	r3, #0
 8009836:	d012      	beq.n	800985e <HAL_UART_IRQHandler+0x196>
 8009838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800983c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00c      	beq.n	800985e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800984c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009854:	f043 0220 	orr.w	r2, r3, #32
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009864:	2b00      	cmp	r3, #0
 8009866:	f000 82dd 	beq.w	8009e24 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800986a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800986e:	f003 0320 	and.w	r3, r3, #32
 8009872:	2b00      	cmp	r3, #0
 8009874:	d013      	beq.n	800989e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800987a:	f003 0320 	and.w	r3, r3, #32
 800987e:	2b00      	cmp	r3, #0
 8009880:	d105      	bne.n	800988e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009882:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d007      	beq.n	800989e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80098a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	689b      	ldr	r3, [r3, #8]
 80098ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098b2:	2b40      	cmp	r3, #64	@ 0x40
 80098b4:	d005      	beq.n	80098c2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80098b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80098ba:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d054      	beq.n	800996c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 faec 	bl	800aea0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	689b      	ldr	r3, [r3, #8]
 80098ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098d2:	2b40      	cmp	r3, #64	@ 0x40
 80098d4:	d146      	bne.n	8009964 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	3308      	adds	r3, #8
 80098dc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80098e4:	e853 3f00 	ldrex	r3, [r3]
 80098e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80098ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80098f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098f4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	3308      	adds	r3, #8
 80098fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009902:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009906:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800990e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800991a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d1d9      	bne.n	80098d6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009928:	2b00      	cmp	r3, #0
 800992a:	d017      	beq.n	800995c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009932:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <HAL_UART_IRQHandler+0x2c0>)
 8009934:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800993c:	4618      	mov	r0, r3
 800993e:	f7f9 fe95 	bl	800366c <HAL_DMA_Abort_IT>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d019      	beq.n	800997c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800994e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8009956:	4610      	mov	r0, r2
 8009958:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800995a:	e00f      	b.n	800997c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f000 fa8b 	bl	8009e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009962:	e00b      	b.n	800997c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa87 	bl	8009e78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800996a:	e007      	b.n	800997c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	f000 fa83 	bl	8009e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2200      	movs	r2, #0
 8009976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800997a:	e253      	b.n	8009e24 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800997c:	bf00      	nop
    return;
 800997e:	e251      	b.n	8009e24 <HAL_UART_IRQHandler+0x75c>
 8009980:	10000001 	.word	0x10000001
 8009984:	04000120 	.word	0x04000120
 8009988:	0800b153 	.word	0x0800b153

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009990:	2b01      	cmp	r3, #1
 8009992:	f040 81e7 	bne.w	8009d64 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800999a:	f003 0310 	and.w	r3, r3, #16
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 81e0 	beq.w	8009d64 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80099a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099a8:	f003 0310 	and.w	r3, r3, #16
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 81d9 	beq.w	8009d64 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2210      	movs	r2, #16
 80099b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b40      	cmp	r3, #64	@ 0x40
 80099c6:	f040 8151 	bne.w	8009c6c <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a96      	ldr	r2, [pc, #600]	@ (8009c2c <HAL_UART_IRQHandler+0x564>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d068      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a93      	ldr	r2, [pc, #588]	@ (8009c30 <HAL_UART_IRQHandler+0x568>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d061      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a91      	ldr	r2, [pc, #580]	@ (8009c34 <HAL_UART_IRQHandler+0x56c>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d05a      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a8e      	ldr	r2, [pc, #568]	@ (8009c38 <HAL_UART_IRQHandler+0x570>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d053      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a8c      	ldr	r2, [pc, #560]	@ (8009c3c <HAL_UART_IRQHandler+0x574>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d04c      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	4a89      	ldr	r2, [pc, #548]	@ (8009c40 <HAL_UART_IRQHandler+0x578>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d045      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a87      	ldr	r2, [pc, #540]	@ (8009c44 <HAL_UART_IRQHandler+0x57c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d03e      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a84      	ldr	r2, [pc, #528]	@ (8009c48 <HAL_UART_IRQHandler+0x580>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d037      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a82      	ldr	r2, [pc, #520]	@ (8009c4c <HAL_UART_IRQHandler+0x584>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d030      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	4a7f      	ldr	r2, [pc, #508]	@ (8009c50 <HAL_UART_IRQHandler+0x588>)
 8009a52:	4293      	cmp	r3, r2
 8009a54:	d029      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a7d      	ldr	r2, [pc, #500]	@ (8009c54 <HAL_UART_IRQHandler+0x58c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d022      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	4a7a      	ldr	r2, [pc, #488]	@ (8009c58 <HAL_UART_IRQHandler+0x590>)
 8009a6e:	4293      	cmp	r3, r2
 8009a70:	d01b      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a78      	ldr	r2, [pc, #480]	@ (8009c5c <HAL_UART_IRQHandler+0x594>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d014      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a75      	ldr	r2, [pc, #468]	@ (8009c60 <HAL_UART_IRQHandler+0x598>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d00d      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a73      	ldr	r2, [pc, #460]	@ (8009c64 <HAL_UART_IRQHandler+0x59c>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d006      	beq.n	8009aaa <HAL_UART_IRQHandler+0x3e2>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a70      	ldr	r2, [pc, #448]	@ (8009c68 <HAL_UART_IRQHandler+0x5a0>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d106      	bne.n	8009ab8 <HAL_UART_IRQHandler+0x3f0>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	e005      	b.n	8009ac4 <HAL_UART_IRQHandler+0x3fc>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	685b      	ldr	r3, [r3, #4]
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ac8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	f000 81ab 	beq.w	8009e28 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009ad8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009adc:	429a      	cmp	r2, r3
 8009ade:	f080 81a3 	bcs.w	8009e28 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009ae8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009af8:	f000 8087 	beq.w	8009c0a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009b08:	e853 3f00 	ldrex	r3, [r3]
 8009b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009b10:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009b14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009b18:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	461a      	mov	r2, r3
 8009b22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009b26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009b2a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009b32:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009b36:	e841 2300 	strex	r3, r2, [r1]
 8009b3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009b3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d1da      	bne.n	8009afc <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	3308      	adds	r3, #8
 8009b4c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009b50:	e853 3f00 	ldrex	r3, [r3]
 8009b54:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009b56:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009b58:	f023 0301 	bic.w	r3, r3, #1
 8009b5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	3308      	adds	r3, #8
 8009b66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009b6a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009b6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b70:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009b72:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009b76:	e841 2300 	strex	r3, r2, [r1]
 8009b7a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009b7c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d1e1      	bne.n	8009b46 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	3308      	adds	r3, #8
 8009b88:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b8a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009b8c:	e853 3f00 	ldrex	r3, [r3]
 8009b90:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009b92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009b94:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	3308      	adds	r3, #8
 8009ba2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009ba6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009baa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009bac:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009bae:	e841 2300 	strex	r3, r2, [r1]
 8009bb2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009bb4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1e3      	bne.n	8009b82 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2220      	movs	r2, #32
 8009bbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009bd0:	e853 3f00 	ldrex	r3, [r3]
 8009bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009bd8:	f023 0310 	bic.w	r3, r3, #16
 8009bdc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	461a      	mov	r2, r3
 8009be6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009bea:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bec:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009bf0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009bf2:	e841 2300 	strex	r3, r2, [r1]
 8009bf6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1e4      	bne.n	8009bc8 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c04:	4618      	mov	r0, r3
 8009c06:	f7f9 fa13 	bl	8003030 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2202      	movs	r2, #2
 8009c0e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	1ad3      	subs	r3, r2, r3
 8009c20:	b29b      	uxth	r3, r3
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f7f7 fe8f 	bl	8001948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009c2a:	e0fd      	b.n	8009e28 <HAL_UART_IRQHandler+0x760>
 8009c2c:	40020010 	.word	0x40020010
 8009c30:	40020028 	.word	0x40020028
 8009c34:	40020040 	.word	0x40020040
 8009c38:	40020058 	.word	0x40020058
 8009c3c:	40020070 	.word	0x40020070
 8009c40:	40020088 	.word	0x40020088
 8009c44:	400200a0 	.word	0x400200a0
 8009c48:	400200b8 	.word	0x400200b8
 8009c4c:	40020410 	.word	0x40020410
 8009c50:	40020428 	.word	0x40020428
 8009c54:	40020440 	.word	0x40020440
 8009c58:	40020458 	.word	0x40020458
 8009c5c:	40020470 	.word	0x40020470
 8009c60:	40020488 	.word	0x40020488
 8009c64:	400204a0 	.word	0x400204a0
 8009c68:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	1ad3      	subs	r3, r2, r3
 8009c7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	f000 80cf 	beq.w	8009e2c <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8009c8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	f000 80ca 	beq.w	8009e2c <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ca0:	e853 3f00 	ldrex	r3, [r3]
 8009ca4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ca8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009cac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009cba:	647b      	str	r3, [r7, #68]	@ 0x44
 8009cbc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cc2:	e841 2300 	strex	r3, r2, [r1]
 8009cc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cca:	2b00      	cmp	r3, #0
 8009ccc:	d1e4      	bne.n	8009c98 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	3308      	adds	r3, #8
 8009cd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cd8:	e853 3f00 	ldrex	r3, [r3]
 8009cdc:	623b      	str	r3, [r7, #32]
   return(result);
 8009cde:	6a3a      	ldr	r2, [r7, #32]
 8009ce0:	4b55      	ldr	r3, [pc, #340]	@ (8009e38 <HAL_UART_IRQHandler+0x770>)
 8009ce2:	4013      	ands	r3, r2
 8009ce4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	3308      	adds	r3, #8
 8009cee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009cf2:	633a      	str	r2, [r7, #48]	@ 0x30
 8009cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cf6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009cfa:	e841 2300 	strex	r3, r2, [r1]
 8009cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d1e3      	bne.n	8009cce <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	2220      	movs	r2, #32
 8009d0a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2200      	movs	r2, #0
 8009d12:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2200      	movs	r2, #0
 8009d18:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d20:	693b      	ldr	r3, [r7, #16]
 8009d22:	e853 3f00 	ldrex	r3, [r3]
 8009d26:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f023 0310 	bic.w	r3, r3, #16
 8009d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	461a      	mov	r2, r3
 8009d38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009d3c:	61fb      	str	r3, [r7, #28]
 8009d3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d40:	69b9      	ldr	r1, [r7, #24]
 8009d42:	69fa      	ldr	r2, [r7, #28]
 8009d44:	e841 2300 	strex	r3, r2, [r1]
 8009d48:	617b      	str	r3, [r7, #20]
   return(result);
 8009d4a:	697b      	ldr	r3, [r7, #20]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d1e4      	bne.n	8009d1a <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009d56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f7f7 fdf3 	bl	8001948 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009d62:	e063      	b.n	8009e2c <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d68:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d00e      	beq.n	8009d8e <HAL_UART_IRQHandler+0x6c6>
 8009d70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009d74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009d84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fa24 	bl	800b1d4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d8c:	e051      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009d92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d014      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d105      	bne.n	8009db2 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009da6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009daa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d008      	beq.n	8009dc4 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d03a      	beq.n	8009e30 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	4798      	blx	r3
    }
    return;
 8009dc2:	e035      	b.n	8009e30 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009dc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009dc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d009      	beq.n	8009de4 <HAL_UART_IRQHandler+0x71c>
 8009dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009dd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d003      	beq.n	8009de4 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8009ddc:	6878      	ldr	r0, [r7, #4]
 8009dde:	f001 f9ce 	bl	800b17e <UART_EndTransmit_IT>
    return;
 8009de2:	e026      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009de8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <HAL_UART_IRQHandler+0x73c>
 8009df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009df4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d003      	beq.n	8009e04 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f001 f9fd 	bl	800b1fc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e02:	e016      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009e08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d010      	beq.n	8009e32 <HAL_UART_IRQHandler+0x76a>
 8009e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	da0c      	bge.n	8009e32 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f001 f9e5 	bl	800b1e8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e1e:	e008      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e20:	bf00      	nop
 8009e22:	e006      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e24:	bf00      	nop
 8009e26:	e004      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e28:	bf00      	nop
 8009e2a:	e002      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
      return;
 8009e2c:	bf00      	nop
 8009e2e:	e000      	b.n	8009e32 <HAL_UART_IRQHandler+0x76a>
    return;
 8009e30:	bf00      	nop
  }
}
 8009e32:	37e8      	adds	r7, #232	@ 0xe8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}
 8009e38:	effffffe 	.word	0xeffffffe

08009e3c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009e6c:	bf00      	nop
 8009e6e:	370c      	adds	r7, #12
 8009e70:	46bd      	mov	sp, r7
 8009e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e76:	4770      	bx	lr

08009e78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e78:	b480      	push	{r7}
 8009e7a:	b083      	sub	sp, #12
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e90:	b092      	sub	sp, #72	@ 0x48
 8009e92:	af00      	add	r7, sp, #0
 8009e94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009e96:	2300      	movs	r3, #0
 8009e98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e9c:	697b      	ldr	r3, [r7, #20]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	697b      	ldr	r3, [r7, #20]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	431a      	orrs	r2, r3
 8009ea6:	697b      	ldr	r3, [r7, #20]
 8009ea8:	695b      	ldr	r3, [r3, #20]
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	69db      	ldr	r3, [r3, #28]
 8009eb0:	4313      	orrs	r3, r2
 8009eb2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	4bbe      	ldr	r3, [pc, #760]	@ (800a1b4 <UART_SetConfig+0x328>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	697a      	ldr	r2, [r7, #20]
 8009ec0:	6812      	ldr	r2, [r2, #0]
 8009ec2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009ec4:	430b      	orrs	r3, r1
 8009ec6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ec8:	697b      	ldr	r3, [r7, #20]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	699b      	ldr	r3, [r3, #24]
 8009ee2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4ab3      	ldr	r2, [pc, #716]	@ (800a1b8 <UART_SetConfig+0x32c>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d004      	beq.n	8009ef8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	6a1b      	ldr	r3, [r3, #32]
 8009ef2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	4baf      	ldr	r3, [pc, #700]	@ (800a1bc <UART_SetConfig+0x330>)
 8009f00:	4013      	ands	r3, r2
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009f08:	430b      	orrs	r3, r1
 8009f0a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f12:	f023 010f 	bic.w	r1, r3, #15
 8009f16:	697b      	ldr	r3, [r7, #20]
 8009f18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	430a      	orrs	r2, r1
 8009f20:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4aa6      	ldr	r2, [pc, #664]	@ (800a1c0 <UART_SetConfig+0x334>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d177      	bne.n	800a01c <UART_SetConfig+0x190>
 8009f2c:	4ba5      	ldr	r3, [pc, #660]	@ (800a1c4 <UART_SetConfig+0x338>)
 8009f2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009f30:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009f34:	2b28      	cmp	r3, #40	@ 0x28
 8009f36:	d86d      	bhi.n	800a014 <UART_SetConfig+0x188>
 8009f38:	a201      	add	r2, pc, #4	@ (adr r2, 8009f40 <UART_SetConfig+0xb4>)
 8009f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3e:	bf00      	nop
 8009f40:	08009fe5 	.word	0x08009fe5
 8009f44:	0800a015 	.word	0x0800a015
 8009f48:	0800a015 	.word	0x0800a015
 8009f4c:	0800a015 	.word	0x0800a015
 8009f50:	0800a015 	.word	0x0800a015
 8009f54:	0800a015 	.word	0x0800a015
 8009f58:	0800a015 	.word	0x0800a015
 8009f5c:	0800a015 	.word	0x0800a015
 8009f60:	08009fed 	.word	0x08009fed
 8009f64:	0800a015 	.word	0x0800a015
 8009f68:	0800a015 	.word	0x0800a015
 8009f6c:	0800a015 	.word	0x0800a015
 8009f70:	0800a015 	.word	0x0800a015
 8009f74:	0800a015 	.word	0x0800a015
 8009f78:	0800a015 	.word	0x0800a015
 8009f7c:	0800a015 	.word	0x0800a015
 8009f80:	08009ff5 	.word	0x08009ff5
 8009f84:	0800a015 	.word	0x0800a015
 8009f88:	0800a015 	.word	0x0800a015
 8009f8c:	0800a015 	.word	0x0800a015
 8009f90:	0800a015 	.word	0x0800a015
 8009f94:	0800a015 	.word	0x0800a015
 8009f98:	0800a015 	.word	0x0800a015
 8009f9c:	0800a015 	.word	0x0800a015
 8009fa0:	08009ffd 	.word	0x08009ffd
 8009fa4:	0800a015 	.word	0x0800a015
 8009fa8:	0800a015 	.word	0x0800a015
 8009fac:	0800a015 	.word	0x0800a015
 8009fb0:	0800a015 	.word	0x0800a015
 8009fb4:	0800a015 	.word	0x0800a015
 8009fb8:	0800a015 	.word	0x0800a015
 8009fbc:	0800a015 	.word	0x0800a015
 8009fc0:	0800a005 	.word	0x0800a005
 8009fc4:	0800a015 	.word	0x0800a015
 8009fc8:	0800a015 	.word	0x0800a015
 8009fcc:	0800a015 	.word	0x0800a015
 8009fd0:	0800a015 	.word	0x0800a015
 8009fd4:	0800a015 	.word	0x0800a015
 8009fd8:	0800a015 	.word	0x0800a015
 8009fdc:	0800a015 	.word	0x0800a015
 8009fe0:	0800a00d 	.word	0x0800a00d
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009fea:	e222      	b.n	800a432 <UART_SetConfig+0x5a6>
 8009fec:	2304      	movs	r3, #4
 8009fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ff2:	e21e      	b.n	800a432 <UART_SetConfig+0x5a6>
 8009ff4:	2308      	movs	r3, #8
 8009ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009ffa:	e21a      	b.n	800a432 <UART_SetConfig+0x5a6>
 8009ffc:	2310      	movs	r3, #16
 8009ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a002:	e216      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a004:	2320      	movs	r3, #32
 800a006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a00a:	e212      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a00c:	2340      	movs	r3, #64	@ 0x40
 800a00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a012:	e20e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a014:	2380      	movs	r3, #128	@ 0x80
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a01a:	e20a      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a69      	ldr	r2, [pc, #420]	@ (800a1c8 <UART_SetConfig+0x33c>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d130      	bne.n	800a088 <UART_SetConfig+0x1fc>
 800a026:	4b67      	ldr	r3, [pc, #412]	@ (800a1c4 <UART_SetConfig+0x338>)
 800a028:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a02a:	f003 0307 	and.w	r3, r3, #7
 800a02e:	2b05      	cmp	r3, #5
 800a030:	d826      	bhi.n	800a080 <UART_SetConfig+0x1f4>
 800a032:	a201      	add	r2, pc, #4	@ (adr r2, 800a038 <UART_SetConfig+0x1ac>)
 800a034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a038:	0800a051 	.word	0x0800a051
 800a03c:	0800a059 	.word	0x0800a059
 800a040:	0800a061 	.word	0x0800a061
 800a044:	0800a069 	.word	0x0800a069
 800a048:	0800a071 	.word	0x0800a071
 800a04c:	0800a079 	.word	0x0800a079
 800a050:	2300      	movs	r3, #0
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a056:	e1ec      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a058:	2304      	movs	r3, #4
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a05e:	e1e8      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a060:	2308      	movs	r3, #8
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a066:	e1e4      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a068:	2310      	movs	r3, #16
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a06e:	e1e0      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a070:	2320      	movs	r3, #32
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a076:	e1dc      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a078:	2340      	movs	r3, #64	@ 0x40
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a07e:	e1d8      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a080:	2380      	movs	r3, #128	@ 0x80
 800a082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a086:	e1d4      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a088:	697b      	ldr	r3, [r7, #20]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a4f      	ldr	r2, [pc, #316]	@ (800a1cc <UART_SetConfig+0x340>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d130      	bne.n	800a0f4 <UART_SetConfig+0x268>
 800a092:	4b4c      	ldr	r3, [pc, #304]	@ (800a1c4 <UART_SetConfig+0x338>)
 800a094:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a096:	f003 0307 	and.w	r3, r3, #7
 800a09a:	2b05      	cmp	r3, #5
 800a09c:	d826      	bhi.n	800a0ec <UART_SetConfig+0x260>
 800a09e:	a201      	add	r2, pc, #4	@ (adr r2, 800a0a4 <UART_SetConfig+0x218>)
 800a0a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a4:	0800a0bd 	.word	0x0800a0bd
 800a0a8:	0800a0c5 	.word	0x0800a0c5
 800a0ac:	0800a0cd 	.word	0x0800a0cd
 800a0b0:	0800a0d5 	.word	0x0800a0d5
 800a0b4:	0800a0dd 	.word	0x0800a0dd
 800a0b8:	0800a0e5 	.word	0x0800a0e5
 800a0bc:	2300      	movs	r3, #0
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0c2:	e1b6      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0c4:	2304      	movs	r3, #4
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ca:	e1b2      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0cc:	2308      	movs	r3, #8
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0d2:	e1ae      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0d4:	2310      	movs	r3, #16
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0da:	e1aa      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0dc:	2320      	movs	r3, #32
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0e2:	e1a6      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0e4:	2340      	movs	r3, #64	@ 0x40
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0ea:	e1a2      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0ec:	2380      	movs	r3, #128	@ 0x80
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a0f2:	e19e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a0f4:	697b      	ldr	r3, [r7, #20]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a35      	ldr	r2, [pc, #212]	@ (800a1d0 <UART_SetConfig+0x344>)
 800a0fa:	4293      	cmp	r3, r2
 800a0fc:	d130      	bne.n	800a160 <UART_SetConfig+0x2d4>
 800a0fe:	4b31      	ldr	r3, [pc, #196]	@ (800a1c4 <UART_SetConfig+0x338>)
 800a100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	2b05      	cmp	r3, #5
 800a108:	d826      	bhi.n	800a158 <UART_SetConfig+0x2cc>
 800a10a:	a201      	add	r2, pc, #4	@ (adr r2, 800a110 <UART_SetConfig+0x284>)
 800a10c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a110:	0800a129 	.word	0x0800a129
 800a114:	0800a131 	.word	0x0800a131
 800a118:	0800a139 	.word	0x0800a139
 800a11c:	0800a141 	.word	0x0800a141
 800a120:	0800a149 	.word	0x0800a149
 800a124:	0800a151 	.word	0x0800a151
 800a128:	2300      	movs	r3, #0
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a12e:	e180      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a130:	2304      	movs	r3, #4
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a136:	e17c      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a138:	2308      	movs	r3, #8
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a13e:	e178      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a140:	2310      	movs	r3, #16
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a146:	e174      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a148:	2320      	movs	r3, #32
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14e:	e170      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a150:	2340      	movs	r3, #64	@ 0x40
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a156:	e16c      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a158:	2380      	movs	r3, #128	@ 0x80
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15e:	e168      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	4a1b      	ldr	r2, [pc, #108]	@ (800a1d4 <UART_SetConfig+0x348>)
 800a166:	4293      	cmp	r3, r2
 800a168:	d142      	bne.n	800a1f0 <UART_SetConfig+0x364>
 800a16a:	4b16      	ldr	r3, [pc, #88]	@ (800a1c4 <UART_SetConfig+0x338>)
 800a16c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a16e:	f003 0307 	and.w	r3, r3, #7
 800a172:	2b05      	cmp	r3, #5
 800a174:	d838      	bhi.n	800a1e8 <UART_SetConfig+0x35c>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <UART_SetConfig+0x2f0>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a195 	.word	0x0800a195
 800a180:	0800a19d 	.word	0x0800a19d
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a1ad 	.word	0x0800a1ad
 800a18c:	0800a1d9 	.word	0x0800a1d9
 800a190:	0800a1e1 	.word	0x0800a1e1
 800a194:	2300      	movs	r3, #0
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a19a:	e14a      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a19c:	2304      	movs	r3, #4
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1a2:	e146      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1a4:	2308      	movs	r3, #8
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1aa:	e142      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b2:	e13e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1b4:	cfff69f3 	.word	0xcfff69f3
 800a1b8:	58000c00 	.word	0x58000c00
 800a1bc:	11fff4ff 	.word	0x11fff4ff
 800a1c0:	40011000 	.word	0x40011000
 800a1c4:	58024400 	.word	0x58024400
 800a1c8:	40004400 	.word	0x40004400
 800a1cc:	40004800 	.word	0x40004800
 800a1d0:	40004c00 	.word	0x40004c00
 800a1d4:	40005000 	.word	0x40005000
 800a1d8:	2320      	movs	r3, #32
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e128      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1e0:	2340      	movs	r3, #64	@ 0x40
 800a1e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1e6:	e124      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1e8:	2380      	movs	r3, #128	@ 0x80
 800a1ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ee:	e120      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4acb      	ldr	r2, [pc, #812]	@ (800a524 <UART_SetConfig+0x698>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d176      	bne.n	800a2e8 <UART_SetConfig+0x45c>
 800a1fa:	4bcb      	ldr	r3, [pc, #812]	@ (800a528 <UART_SetConfig+0x69c>)
 800a1fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1fe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a202:	2b28      	cmp	r3, #40	@ 0x28
 800a204:	d86c      	bhi.n	800a2e0 <UART_SetConfig+0x454>
 800a206:	a201      	add	r2, pc, #4	@ (adr r2, 800a20c <UART_SetConfig+0x380>)
 800a208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a20c:	0800a2b1 	.word	0x0800a2b1
 800a210:	0800a2e1 	.word	0x0800a2e1
 800a214:	0800a2e1 	.word	0x0800a2e1
 800a218:	0800a2e1 	.word	0x0800a2e1
 800a21c:	0800a2e1 	.word	0x0800a2e1
 800a220:	0800a2e1 	.word	0x0800a2e1
 800a224:	0800a2e1 	.word	0x0800a2e1
 800a228:	0800a2e1 	.word	0x0800a2e1
 800a22c:	0800a2b9 	.word	0x0800a2b9
 800a230:	0800a2e1 	.word	0x0800a2e1
 800a234:	0800a2e1 	.word	0x0800a2e1
 800a238:	0800a2e1 	.word	0x0800a2e1
 800a23c:	0800a2e1 	.word	0x0800a2e1
 800a240:	0800a2e1 	.word	0x0800a2e1
 800a244:	0800a2e1 	.word	0x0800a2e1
 800a248:	0800a2e1 	.word	0x0800a2e1
 800a24c:	0800a2c1 	.word	0x0800a2c1
 800a250:	0800a2e1 	.word	0x0800a2e1
 800a254:	0800a2e1 	.word	0x0800a2e1
 800a258:	0800a2e1 	.word	0x0800a2e1
 800a25c:	0800a2e1 	.word	0x0800a2e1
 800a260:	0800a2e1 	.word	0x0800a2e1
 800a264:	0800a2e1 	.word	0x0800a2e1
 800a268:	0800a2e1 	.word	0x0800a2e1
 800a26c:	0800a2c9 	.word	0x0800a2c9
 800a270:	0800a2e1 	.word	0x0800a2e1
 800a274:	0800a2e1 	.word	0x0800a2e1
 800a278:	0800a2e1 	.word	0x0800a2e1
 800a27c:	0800a2e1 	.word	0x0800a2e1
 800a280:	0800a2e1 	.word	0x0800a2e1
 800a284:	0800a2e1 	.word	0x0800a2e1
 800a288:	0800a2e1 	.word	0x0800a2e1
 800a28c:	0800a2d1 	.word	0x0800a2d1
 800a290:	0800a2e1 	.word	0x0800a2e1
 800a294:	0800a2e1 	.word	0x0800a2e1
 800a298:	0800a2e1 	.word	0x0800a2e1
 800a29c:	0800a2e1 	.word	0x0800a2e1
 800a2a0:	0800a2e1 	.word	0x0800a2e1
 800a2a4:	0800a2e1 	.word	0x0800a2e1
 800a2a8:	0800a2e1 	.word	0x0800a2e1
 800a2ac:	0800a2d9 	.word	0x0800a2d9
 800a2b0:	2301      	movs	r3, #1
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e0bc      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2b8:	2304      	movs	r3, #4
 800a2ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2be:	e0b8      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2c0:	2308      	movs	r3, #8
 800a2c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2c6:	e0b4      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ce:	e0b0      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2d6:	e0ac      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2d8:	2340      	movs	r3, #64	@ 0x40
 800a2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2de:	e0a8      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2e0:	2380      	movs	r3, #128	@ 0x80
 800a2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2e6:	e0a4      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a8f      	ldr	r2, [pc, #572]	@ (800a52c <UART_SetConfig+0x6a0>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d130      	bne.n	800a354 <UART_SetConfig+0x4c8>
 800a2f2:	4b8d      	ldr	r3, [pc, #564]	@ (800a528 <UART_SetConfig+0x69c>)
 800a2f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2f6:	f003 0307 	and.w	r3, r3, #7
 800a2fa:	2b05      	cmp	r3, #5
 800a2fc:	d826      	bhi.n	800a34c <UART_SetConfig+0x4c0>
 800a2fe:	a201      	add	r2, pc, #4	@ (adr r2, 800a304 <UART_SetConfig+0x478>)
 800a300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a304:	0800a31d 	.word	0x0800a31d
 800a308:	0800a325 	.word	0x0800a325
 800a30c:	0800a32d 	.word	0x0800a32d
 800a310:	0800a335 	.word	0x0800a335
 800a314:	0800a33d 	.word	0x0800a33d
 800a318:	0800a345 	.word	0x0800a345
 800a31c:	2300      	movs	r3, #0
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a322:	e086      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a324:	2304      	movs	r3, #4
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a32a:	e082      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a32c:	2308      	movs	r3, #8
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a332:	e07e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a334:	2310      	movs	r3, #16
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33a:	e07a      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a33c:	2320      	movs	r3, #32
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a342:	e076      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a344:	2340      	movs	r3, #64	@ 0x40
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a34a:	e072      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a34c:	2380      	movs	r3, #128	@ 0x80
 800a34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a352:	e06e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a354:	697b      	ldr	r3, [r7, #20]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	4a75      	ldr	r2, [pc, #468]	@ (800a530 <UART_SetConfig+0x6a4>)
 800a35a:	4293      	cmp	r3, r2
 800a35c:	d130      	bne.n	800a3c0 <UART_SetConfig+0x534>
 800a35e:	4b72      	ldr	r3, [pc, #456]	@ (800a528 <UART_SetConfig+0x69c>)
 800a360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a362:	f003 0307 	and.w	r3, r3, #7
 800a366:	2b05      	cmp	r3, #5
 800a368:	d826      	bhi.n	800a3b8 <UART_SetConfig+0x52c>
 800a36a:	a201      	add	r2, pc, #4	@ (adr r2, 800a370 <UART_SetConfig+0x4e4>)
 800a36c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a370:	0800a389 	.word	0x0800a389
 800a374:	0800a391 	.word	0x0800a391
 800a378:	0800a399 	.word	0x0800a399
 800a37c:	0800a3a1 	.word	0x0800a3a1
 800a380:	0800a3a9 	.word	0x0800a3a9
 800a384:	0800a3b1 	.word	0x0800a3b1
 800a388:	2300      	movs	r3, #0
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a38e:	e050      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a390:	2304      	movs	r3, #4
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a396:	e04c      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a398:	2308      	movs	r3, #8
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a39e:	e048      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3a0:	2310      	movs	r3, #16
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3a6:	e044      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3a8:	2320      	movs	r3, #32
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3ae:	e040      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3b0:	2340      	movs	r3, #64	@ 0x40
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3b6:	e03c      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3b8:	2380      	movs	r3, #128	@ 0x80
 800a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3be:	e038      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a5b      	ldr	r2, [pc, #364]	@ (800a534 <UART_SetConfig+0x6a8>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d130      	bne.n	800a42c <UART_SetConfig+0x5a0>
 800a3ca:	4b57      	ldr	r3, [pc, #348]	@ (800a528 <UART_SetConfig+0x69c>)
 800a3cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3ce:	f003 0307 	and.w	r3, r3, #7
 800a3d2:	2b05      	cmp	r3, #5
 800a3d4:	d826      	bhi.n	800a424 <UART_SetConfig+0x598>
 800a3d6:	a201      	add	r2, pc, #4	@ (adr r2, 800a3dc <UART_SetConfig+0x550>)
 800a3d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3dc:	0800a3f5 	.word	0x0800a3f5
 800a3e0:	0800a3fd 	.word	0x0800a3fd
 800a3e4:	0800a405 	.word	0x0800a405
 800a3e8:	0800a40d 	.word	0x0800a40d
 800a3ec:	0800a415 	.word	0x0800a415
 800a3f0:	0800a41d 	.word	0x0800a41d
 800a3f4:	2302      	movs	r3, #2
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a3fa:	e01a      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a3fc:	2304      	movs	r3, #4
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a402:	e016      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a404:	2308      	movs	r3, #8
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40a:	e012      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a40c:	2310      	movs	r3, #16
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a412:	e00e      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a414:	2320      	movs	r3, #32
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41a:	e00a      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a41c:	2340      	movs	r3, #64	@ 0x40
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a422:	e006      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a424:	2380      	movs	r3, #128	@ 0x80
 800a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42a:	e002      	b.n	800a432 <UART_SetConfig+0x5a6>
 800a42c:	2380      	movs	r3, #128	@ 0x80
 800a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a3f      	ldr	r2, [pc, #252]	@ (800a534 <UART_SetConfig+0x6a8>)
 800a438:	4293      	cmp	r3, r2
 800a43a:	f040 80f8 	bne.w	800a62e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a43e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a442:	2b20      	cmp	r3, #32
 800a444:	dc46      	bgt.n	800a4d4 <UART_SetConfig+0x648>
 800a446:	2b02      	cmp	r3, #2
 800a448:	f2c0 8082 	blt.w	800a550 <UART_SetConfig+0x6c4>
 800a44c:	3b02      	subs	r3, #2
 800a44e:	2b1e      	cmp	r3, #30
 800a450:	d87e      	bhi.n	800a550 <UART_SetConfig+0x6c4>
 800a452:	a201      	add	r2, pc, #4	@ (adr r2, 800a458 <UART_SetConfig+0x5cc>)
 800a454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a458:	0800a4db 	.word	0x0800a4db
 800a45c:	0800a551 	.word	0x0800a551
 800a460:	0800a4e3 	.word	0x0800a4e3
 800a464:	0800a551 	.word	0x0800a551
 800a468:	0800a551 	.word	0x0800a551
 800a46c:	0800a551 	.word	0x0800a551
 800a470:	0800a4f3 	.word	0x0800a4f3
 800a474:	0800a551 	.word	0x0800a551
 800a478:	0800a551 	.word	0x0800a551
 800a47c:	0800a551 	.word	0x0800a551
 800a480:	0800a551 	.word	0x0800a551
 800a484:	0800a551 	.word	0x0800a551
 800a488:	0800a551 	.word	0x0800a551
 800a48c:	0800a551 	.word	0x0800a551
 800a490:	0800a503 	.word	0x0800a503
 800a494:	0800a551 	.word	0x0800a551
 800a498:	0800a551 	.word	0x0800a551
 800a49c:	0800a551 	.word	0x0800a551
 800a4a0:	0800a551 	.word	0x0800a551
 800a4a4:	0800a551 	.word	0x0800a551
 800a4a8:	0800a551 	.word	0x0800a551
 800a4ac:	0800a551 	.word	0x0800a551
 800a4b0:	0800a551 	.word	0x0800a551
 800a4b4:	0800a551 	.word	0x0800a551
 800a4b8:	0800a551 	.word	0x0800a551
 800a4bc:	0800a551 	.word	0x0800a551
 800a4c0:	0800a551 	.word	0x0800a551
 800a4c4:	0800a551 	.word	0x0800a551
 800a4c8:	0800a551 	.word	0x0800a551
 800a4cc:	0800a551 	.word	0x0800a551
 800a4d0:	0800a543 	.word	0x0800a543
 800a4d4:	2b40      	cmp	r3, #64	@ 0x40
 800a4d6:	d037      	beq.n	800a548 <UART_SetConfig+0x6bc>
 800a4d8:	e03a      	b.n	800a550 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a4da:	f7fd fb13 	bl	8007b04 <HAL_RCCEx_GetD3PCLK1Freq>
 800a4de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a4e0:	e03c      	b.n	800a55c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fd fb22 	bl	8007b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a4ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4f0:	e034      	b.n	800a55c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4f2:	f107 0318 	add.w	r3, r7, #24
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f7fd fc6e 	bl	8007dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a4fc:	69fb      	ldr	r3, [r7, #28]
 800a4fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a500:	e02c      	b.n	800a55c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a502:	4b09      	ldr	r3, [pc, #36]	@ (800a528 <UART_SetConfig+0x69c>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f003 0320 	and.w	r3, r3, #32
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d016      	beq.n	800a53c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a50e:	4b06      	ldr	r3, [pc, #24]	@ (800a528 <UART_SetConfig+0x69c>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	08db      	lsrs	r3, r3, #3
 800a514:	f003 0303 	and.w	r3, r3, #3
 800a518:	4a07      	ldr	r2, [pc, #28]	@ (800a538 <UART_SetConfig+0x6ac>)
 800a51a:	fa22 f303 	lsr.w	r3, r2, r3
 800a51e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a520:	e01c      	b.n	800a55c <UART_SetConfig+0x6d0>
 800a522:	bf00      	nop
 800a524:	40011400 	.word	0x40011400
 800a528:	58024400 	.word	0x58024400
 800a52c:	40007800 	.word	0x40007800
 800a530:	40007c00 	.word	0x40007c00
 800a534:	58000c00 	.word	0x58000c00
 800a538:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a53c:	4b9d      	ldr	r3, [pc, #628]	@ (800a7b4 <UART_SetConfig+0x928>)
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e00c      	b.n	800a55c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a542:	4b9d      	ldr	r3, [pc, #628]	@ (800a7b8 <UART_SetConfig+0x92c>)
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a546:	e009      	b.n	800a55c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a548:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a54c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a54e:	e005      	b.n	800a55c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a550:	2300      	movs	r3, #0
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a554:	2301      	movs	r3, #1
 800a556:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a55a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a55c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 81de 	beq.w	800a920 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a564:	697b      	ldr	r3, [r7, #20]
 800a566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a568:	4a94      	ldr	r2, [pc, #592]	@ (800a7bc <UART_SetConfig+0x930>)
 800a56a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a56e:	461a      	mov	r2, r3
 800a570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a572:	fbb3 f3f2 	udiv	r3, r3, r2
 800a576:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	685a      	ldr	r2, [r3, #4]
 800a57c:	4613      	mov	r3, r2
 800a57e:	005b      	lsls	r3, r3, #1
 800a580:	4413      	add	r3, r2
 800a582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a584:	429a      	cmp	r2, r3
 800a586:	d305      	bcc.n	800a594 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a588:	697b      	ldr	r3, [r7, #20]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a58e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a590:	429a      	cmp	r2, r3
 800a592:	d903      	bls.n	800a59c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a594:	2301      	movs	r3, #1
 800a596:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a59a:	e1c1      	b.n	800a920 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a59c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a59e:	2200      	movs	r2, #0
 800a5a0:	60bb      	str	r3, [r7, #8]
 800a5a2:	60fa      	str	r2, [r7, #12]
 800a5a4:	697b      	ldr	r3, [r7, #20]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5a8:	4a84      	ldr	r2, [pc, #528]	@ (800a7bc <UART_SetConfig+0x930>)
 800a5aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ae:	b29b      	uxth	r3, r3
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	603b      	str	r3, [r7, #0]
 800a5b4:	607a      	str	r2, [r7, #4]
 800a5b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a5be:	f7f5 fee7 	bl	8000390 <__aeabi_uldivmod>
 800a5c2:	4602      	mov	r2, r0
 800a5c4:	460b      	mov	r3, r1
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	f04f 0200 	mov.w	r2, #0
 800a5ce:	f04f 0300 	mov.w	r3, #0
 800a5d2:	020b      	lsls	r3, r1, #8
 800a5d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a5d8:	0202      	lsls	r2, r0, #8
 800a5da:	6979      	ldr	r1, [r7, #20]
 800a5dc:	6849      	ldr	r1, [r1, #4]
 800a5de:	0849      	lsrs	r1, r1, #1
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	460c      	mov	r4, r1
 800a5e4:	4605      	mov	r5, r0
 800a5e6:	eb12 0804 	adds.w	r8, r2, r4
 800a5ea:	eb43 0905 	adc.w	r9, r3, r5
 800a5ee:	697b      	ldr	r3, [r7, #20]
 800a5f0:	685b      	ldr	r3, [r3, #4]
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	469a      	mov	sl, r3
 800a5f6:	4693      	mov	fp, r2
 800a5f8:	4652      	mov	r2, sl
 800a5fa:	465b      	mov	r3, fp
 800a5fc:	4640      	mov	r0, r8
 800a5fe:	4649      	mov	r1, r9
 800a600:	f7f5 fec6 	bl	8000390 <__aeabi_uldivmod>
 800a604:	4602      	mov	r2, r0
 800a606:	460b      	mov	r3, r1
 800a608:	4613      	mov	r3, r2
 800a60a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a60c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a60e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a612:	d308      	bcc.n	800a626 <UART_SetConfig+0x79a>
 800a614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a616:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a61a:	d204      	bcs.n	800a626 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a61c:	697b      	ldr	r3, [r7, #20]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a622:	60da      	str	r2, [r3, #12]
 800a624:	e17c      	b.n	800a920 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a62c:	e178      	b.n	800a920 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a636:	f040 80c5 	bne.w	800a7c4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a63a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a63e:	2b20      	cmp	r3, #32
 800a640:	dc48      	bgt.n	800a6d4 <UART_SetConfig+0x848>
 800a642:	2b00      	cmp	r3, #0
 800a644:	db7b      	blt.n	800a73e <UART_SetConfig+0x8b2>
 800a646:	2b20      	cmp	r3, #32
 800a648:	d879      	bhi.n	800a73e <UART_SetConfig+0x8b2>
 800a64a:	a201      	add	r2, pc, #4	@ (adr r2, 800a650 <UART_SetConfig+0x7c4>)
 800a64c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a650:	0800a6db 	.word	0x0800a6db
 800a654:	0800a6e3 	.word	0x0800a6e3
 800a658:	0800a73f 	.word	0x0800a73f
 800a65c:	0800a73f 	.word	0x0800a73f
 800a660:	0800a6eb 	.word	0x0800a6eb
 800a664:	0800a73f 	.word	0x0800a73f
 800a668:	0800a73f 	.word	0x0800a73f
 800a66c:	0800a73f 	.word	0x0800a73f
 800a670:	0800a6fb 	.word	0x0800a6fb
 800a674:	0800a73f 	.word	0x0800a73f
 800a678:	0800a73f 	.word	0x0800a73f
 800a67c:	0800a73f 	.word	0x0800a73f
 800a680:	0800a73f 	.word	0x0800a73f
 800a684:	0800a73f 	.word	0x0800a73f
 800a688:	0800a73f 	.word	0x0800a73f
 800a68c:	0800a73f 	.word	0x0800a73f
 800a690:	0800a70b 	.word	0x0800a70b
 800a694:	0800a73f 	.word	0x0800a73f
 800a698:	0800a73f 	.word	0x0800a73f
 800a69c:	0800a73f 	.word	0x0800a73f
 800a6a0:	0800a73f 	.word	0x0800a73f
 800a6a4:	0800a73f 	.word	0x0800a73f
 800a6a8:	0800a73f 	.word	0x0800a73f
 800a6ac:	0800a73f 	.word	0x0800a73f
 800a6b0:	0800a73f 	.word	0x0800a73f
 800a6b4:	0800a73f 	.word	0x0800a73f
 800a6b8:	0800a73f 	.word	0x0800a73f
 800a6bc:	0800a73f 	.word	0x0800a73f
 800a6c0:	0800a73f 	.word	0x0800a73f
 800a6c4:	0800a73f 	.word	0x0800a73f
 800a6c8:	0800a73f 	.word	0x0800a73f
 800a6cc:	0800a73f 	.word	0x0800a73f
 800a6d0:	0800a731 	.word	0x0800a731
 800a6d4:	2b40      	cmp	r3, #64	@ 0x40
 800a6d6:	d02e      	beq.n	800a736 <UART_SetConfig+0x8aa>
 800a6d8:	e031      	b.n	800a73e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6da:	f7fb ff9b 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 800a6de:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e0:	e033      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6e2:	f7fb ffad 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 800a6e6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a6e8:	e02f      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f7fd fa1e 	bl	8007b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f8:	e027      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6fa:	f107 0318 	add.w	r3, r7, #24
 800a6fe:	4618      	mov	r0, r3
 800a700:	f7fd fb6a 	bl	8007dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a704:	69fb      	ldr	r3, [r7, #28]
 800a706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a708:	e01f      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a70a:	4b2d      	ldr	r3, [pc, #180]	@ (800a7c0 <UART_SetConfig+0x934>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f003 0320 	and.w	r3, r3, #32
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a716:	4b2a      	ldr	r3, [pc, #168]	@ (800a7c0 <UART_SetConfig+0x934>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	08db      	lsrs	r3, r3, #3
 800a71c:	f003 0303 	and.w	r3, r3, #3
 800a720:	4a24      	ldr	r2, [pc, #144]	@ (800a7b4 <UART_SetConfig+0x928>)
 800a722:	fa22 f303 	lsr.w	r3, r2, r3
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a728:	e00f      	b.n	800a74a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a72a:	4b22      	ldr	r3, [pc, #136]	@ (800a7b4 <UART_SetConfig+0x928>)
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a72e:	e00c      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a730:	4b21      	ldr	r3, [pc, #132]	@ (800a7b8 <UART_SetConfig+0x92c>)
 800a732:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a734:	e009      	b.n	800a74a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a736:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73c:	e005      	b.n	800a74a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a742:	2301      	movs	r3, #1
 800a744:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a748:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a74a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	f000 80e7 	beq.w	800a920 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a756:	4a19      	ldr	r2, [pc, #100]	@ (800a7bc <UART_SetConfig+0x930>)
 800a758:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a75c:	461a      	mov	r2, r3
 800a75e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a760:	fbb3 f3f2 	udiv	r3, r3, r2
 800a764:	005a      	lsls	r2, r3, #1
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	085b      	lsrs	r3, r3, #1
 800a76c:	441a      	add	r2, r3
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	fbb2 f3f3 	udiv	r3, r2, r3
 800a776:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a77a:	2b0f      	cmp	r3, #15
 800a77c:	d916      	bls.n	800a7ac <UART_SetConfig+0x920>
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a784:	d212      	bcs.n	800a7ac <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a788:	b29b      	uxth	r3, r3
 800a78a:	f023 030f 	bic.w	r3, r3, #15
 800a78e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	085b      	lsrs	r3, r3, #1
 800a794:	b29b      	uxth	r3, r3
 800a796:	f003 0307 	and.w	r3, r3, #7
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a7a2:	697b      	ldr	r3, [r7, #20]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a7a8:	60da      	str	r2, [r3, #12]
 800a7aa:	e0b9      	b.n	800a920 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a7b2:	e0b5      	b.n	800a920 <UART_SetConfig+0xa94>
 800a7b4:	03d09000 	.word	0x03d09000
 800a7b8:	003d0900 	.word	0x003d0900
 800a7bc:	0801014c 	.word	0x0801014c
 800a7c0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a7c4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a7c8:	2b20      	cmp	r3, #32
 800a7ca:	dc49      	bgt.n	800a860 <UART_SetConfig+0x9d4>
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	db7c      	blt.n	800a8ca <UART_SetConfig+0xa3e>
 800a7d0:	2b20      	cmp	r3, #32
 800a7d2:	d87a      	bhi.n	800a8ca <UART_SetConfig+0xa3e>
 800a7d4:	a201      	add	r2, pc, #4	@ (adr r2, 800a7dc <UART_SetConfig+0x950>)
 800a7d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7da:	bf00      	nop
 800a7dc:	0800a867 	.word	0x0800a867
 800a7e0:	0800a86f 	.word	0x0800a86f
 800a7e4:	0800a8cb 	.word	0x0800a8cb
 800a7e8:	0800a8cb 	.word	0x0800a8cb
 800a7ec:	0800a877 	.word	0x0800a877
 800a7f0:	0800a8cb 	.word	0x0800a8cb
 800a7f4:	0800a8cb 	.word	0x0800a8cb
 800a7f8:	0800a8cb 	.word	0x0800a8cb
 800a7fc:	0800a887 	.word	0x0800a887
 800a800:	0800a8cb 	.word	0x0800a8cb
 800a804:	0800a8cb 	.word	0x0800a8cb
 800a808:	0800a8cb 	.word	0x0800a8cb
 800a80c:	0800a8cb 	.word	0x0800a8cb
 800a810:	0800a8cb 	.word	0x0800a8cb
 800a814:	0800a8cb 	.word	0x0800a8cb
 800a818:	0800a8cb 	.word	0x0800a8cb
 800a81c:	0800a897 	.word	0x0800a897
 800a820:	0800a8cb 	.word	0x0800a8cb
 800a824:	0800a8cb 	.word	0x0800a8cb
 800a828:	0800a8cb 	.word	0x0800a8cb
 800a82c:	0800a8cb 	.word	0x0800a8cb
 800a830:	0800a8cb 	.word	0x0800a8cb
 800a834:	0800a8cb 	.word	0x0800a8cb
 800a838:	0800a8cb 	.word	0x0800a8cb
 800a83c:	0800a8cb 	.word	0x0800a8cb
 800a840:	0800a8cb 	.word	0x0800a8cb
 800a844:	0800a8cb 	.word	0x0800a8cb
 800a848:	0800a8cb 	.word	0x0800a8cb
 800a84c:	0800a8cb 	.word	0x0800a8cb
 800a850:	0800a8cb 	.word	0x0800a8cb
 800a854:	0800a8cb 	.word	0x0800a8cb
 800a858:	0800a8cb 	.word	0x0800a8cb
 800a85c:	0800a8bd 	.word	0x0800a8bd
 800a860:	2b40      	cmp	r3, #64	@ 0x40
 800a862:	d02e      	beq.n	800a8c2 <UART_SetConfig+0xa36>
 800a864:	e031      	b.n	800a8ca <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a866:	f7fb fed5 	bl	8006614 <HAL_RCC_GetPCLK1Freq>
 800a86a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a86c:	e033      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a86e:	f7fb fee7 	bl	8006640 <HAL_RCC_GetPCLK2Freq>
 800a872:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a874:	e02f      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a876:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7fd f958 	bl	8007b30 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a882:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a884:	e027      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a886:	f107 0318 	add.w	r3, r7, #24
 800a88a:	4618      	mov	r0, r3
 800a88c:	f7fd faa4 	bl	8007dd8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a890:	69fb      	ldr	r3, [r7, #28]
 800a892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a894:	e01f      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a896:	4b2d      	ldr	r3, [pc, #180]	@ (800a94c <UART_SetConfig+0xac0>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0320 	and.w	r3, r3, #32
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d009      	beq.n	800a8b6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a8a2:	4b2a      	ldr	r3, [pc, #168]	@ (800a94c <UART_SetConfig+0xac0>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	08db      	lsrs	r3, r3, #3
 800a8a8:	f003 0303 	and.w	r3, r3, #3
 800a8ac:	4a28      	ldr	r2, [pc, #160]	@ (800a950 <UART_SetConfig+0xac4>)
 800a8ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a8b4:	e00f      	b.n	800a8d6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a8b6:	4b26      	ldr	r3, [pc, #152]	@ (800a950 <UART_SetConfig+0xac4>)
 800a8b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ba:	e00c      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a8bc:	4b25      	ldr	r3, [pc, #148]	@ (800a954 <UART_SetConfig+0xac8>)
 800a8be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c0:	e009      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8c8:	e005      	b.n	800a8d6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8d4:	bf00      	nop
    }

    if (pclk != 0U)
 800a8d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d021      	beq.n	800a920 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8e0:	4a1d      	ldr	r2, [pc, #116]	@ (800a958 <UART_SetConfig+0xacc>)
 800a8e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8e6:	461a      	mov	r2, r3
 800a8e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8ea:	fbb3 f2f2 	udiv	r2, r3, r2
 800a8ee:	697b      	ldr	r3, [r7, #20]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	085b      	lsrs	r3, r3, #1
 800a8f4:	441a      	add	r2, r3
 800a8f6:	697b      	ldr	r3, [r7, #20]
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	2b0f      	cmp	r3, #15
 800a904:	d909      	bls.n	800a91a <UART_SetConfig+0xa8e>
 800a906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a90c:	d205      	bcs.n	800a91a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a90e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a910:	b29a      	uxth	r2, r3
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	60da      	str	r2, [r3, #12]
 800a918:	e002      	b.n	800a920 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a91a:	2301      	movs	r3, #1
 800a91c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a920:	697b      	ldr	r3, [r7, #20]
 800a922:	2201      	movs	r2, #1
 800a924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	2201      	movs	r2, #1
 800a92c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	2200      	movs	r2, #0
 800a934:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	2200      	movs	r2, #0
 800a93a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800a93c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800a940:	4618      	mov	r0, r3
 800a942:	3748      	adds	r7, #72	@ 0x48
 800a944:	46bd      	mov	sp, r7
 800a946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a94a:	bf00      	nop
 800a94c:	58024400 	.word	0x58024400
 800a950:	03d09000 	.word	0x03d09000
 800a954:	003d0900 	.word	0x003d0900
 800a958:	0801014c 	.word	0x0801014c

0800a95c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b083      	sub	sp, #12
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a968:	f003 0308 	and.w	r3, r3, #8
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d00a      	beq.n	800a986 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	430a      	orrs	r2, r1
 800a984:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00a      	beq.n	800a9a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	685b      	ldr	r3, [r3, #4]
 800a998:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	430a      	orrs	r2, r1
 800a9a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ac:	f003 0302 	and.w	r3, r3, #2
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00a      	beq.n	800a9ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	430a      	orrs	r2, r1
 800a9c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9ce:	f003 0304 	and.w	r3, r3, #4
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d00a      	beq.n	800a9ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	430a      	orrs	r2, r1
 800a9ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	f003 0310 	and.w	r3, r3, #16
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d00a      	beq.n	800aa0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	430a      	orrs	r2, r1
 800aa0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa12:	f003 0320 	and.w	r3, r3, #32
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d00a      	beq.n	800aa30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	430a      	orrs	r2, r1
 800aa2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d01a      	beq.n	800aa72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	685b      	ldr	r3, [r3, #4]
 800aa42:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	430a      	orrs	r2, r1
 800aa50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa5a:	d10a      	bne.n	800aa72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	685b      	ldr	r3, [r3, #4]
 800aa62:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	605a      	str	r2, [r3, #4]
  }
}
 800aa94:	bf00      	nop
 800aa96:	370c      	adds	r7, #12
 800aa98:	46bd      	mov	sp, r7
 800aa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9e:	4770      	bx	lr

0800aaa0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aaa0:	b580      	push	{r7, lr}
 800aaa2:	b098      	sub	sp, #96	@ 0x60
 800aaa4:	af02      	add	r7, sp, #8
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aab0:	f7f7 fbec 	bl	800228c <HAL_GetTick>
 800aab4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	f003 0308 	and.w	r3, r3, #8
 800aac0:	2b08      	cmp	r3, #8
 800aac2:	d12f      	bne.n	800ab24 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aac4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aacc:	2200      	movs	r2, #0
 800aace:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f88e 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d022      	beq.n	800ab24 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aae6:	e853 3f00 	ldrex	r3, [r3]
 800aaea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800aaec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aaee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800aaf2:	653b      	str	r3, [r7, #80]	@ 0x50
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	461a      	mov	r2, r3
 800aafa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800aafc:	647b      	str	r3, [r7, #68]	@ 0x44
 800aafe:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab00:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ab02:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ab04:	e841 2300 	strex	r3, r2, [r1]
 800ab08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ab0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d1e6      	bne.n	800aade <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	2220      	movs	r2, #32
 800ab14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e063      	b.n	800abec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 0304 	and.w	r3, r3, #4
 800ab2e:	2b04      	cmp	r3, #4
 800ab30:	d149      	bne.n	800abc6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab32:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ab36:	9300      	str	r3, [sp, #0]
 800ab38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f000 f857 	bl	800abf4 <UART_WaitOnFlagUntilTimeout>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d03c      	beq.n	800abc6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab54:	e853 3f00 	ldrex	r3, [r3]
 800ab58:	623b      	str	r3, [r7, #32]
   return(result);
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ab60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	461a      	mov	r2, r3
 800ab68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ab6a:	633b      	str	r3, [r7, #48]	@ 0x30
 800ab6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab6e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ab70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab72:	e841 2300 	strex	r3, r2, [r1]
 800ab76:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ab78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d1e6      	bne.n	800ab4c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	3308      	adds	r3, #8
 800ab84:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab86:	693b      	ldr	r3, [r7, #16]
 800ab88:	e853 3f00 	ldrex	r3, [r3]
 800ab8c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	f023 0301 	bic.w	r3, r3, #1
 800ab94:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3308      	adds	r3, #8
 800ab9c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ab9e:	61fa      	str	r2, [r7, #28]
 800aba0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba2:	69b9      	ldr	r1, [r7, #24]
 800aba4:	69fa      	ldr	r2, [r7, #28]
 800aba6:	e841 2300 	strex	r3, r2, [r1]
 800abaa:	617b      	str	r3, [r7, #20]
   return(result);
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d1e5      	bne.n	800ab7e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abc2:	2303      	movs	r3, #3
 800abc4:	e012      	b.n	800abec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2220      	movs	r2, #32
 800abca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2200      	movs	r2, #0
 800abe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3758      	adds	r7, #88	@ 0x58
 800abf0:	46bd      	mov	sp, r7
 800abf2:	bd80      	pop	{r7, pc}

0800abf4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	60f8      	str	r0, [r7, #12]
 800abfc:	60b9      	str	r1, [r7, #8]
 800abfe:	603b      	str	r3, [r7, #0]
 800ac00:	4613      	mov	r3, r2
 800ac02:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ac04:	e04f      	b.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac0c:	d04b      	beq.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac0e:	f7f7 fb3d 	bl	800228c <HAL_GetTick>
 800ac12:	4602      	mov	r2, r0
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	69ba      	ldr	r2, [r7, #24]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d302      	bcc.n	800ac24 <UART_WaitOnFlagUntilTimeout+0x30>
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ac24:	2303      	movs	r3, #3
 800ac26:	e04e      	b.n	800acc6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	f003 0304 	and.w	r3, r3, #4
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d037      	beq.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	2b80      	cmp	r3, #128	@ 0x80
 800ac3a:	d034      	beq.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b40      	cmp	r3, #64	@ 0x40
 800ac40:	d031      	beq.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	f003 0308 	and.w	r3, r3, #8
 800ac4c:	2b08      	cmp	r3, #8
 800ac4e:	d110      	bne.n	800ac72 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2208      	movs	r2, #8
 800ac56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac58:	68f8      	ldr	r0, [r7, #12]
 800ac5a:	f000 f921 	bl	800aea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2208      	movs	r2, #8
 800ac62:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e029      	b.n	800acc6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	69db      	ldr	r3, [r3, #28]
 800ac78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ac7c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ac80:	d111      	bne.n	800aca6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ac8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ac8c:	68f8      	ldr	r0, [r7, #12]
 800ac8e:	f000 f907 	bl	800aea0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ac92:	68fb      	ldr	r3, [r7, #12]
 800ac94:	2220      	movs	r2, #32
 800ac96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800aca2:	2303      	movs	r3, #3
 800aca4:	e00f      	b.n	800acc6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	4013      	ands	r3, r2
 800acb0:	68ba      	ldr	r2, [r7, #8]
 800acb2:	429a      	cmp	r2, r3
 800acb4:	bf0c      	ite	eq
 800acb6:	2301      	moveq	r3, #1
 800acb8:	2300      	movne	r3, #0
 800acba:	b2db      	uxtb	r3, r3
 800acbc:	461a      	mov	r2, r3
 800acbe:	79fb      	ldrb	r3, [r7, #7]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d0a0      	beq.n	800ac06 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800acc4:	2300      	movs	r3, #0
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3710      	adds	r7, #16
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
	...

0800acd0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b096      	sub	sp, #88	@ 0x58
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	68ba      	ldr	r2, [r7, #8]
 800ace2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	88fa      	ldrh	r2, [r7, #6]
 800ace8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2200      	movs	r2, #0
 800acf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2222      	movs	r2, #34	@ 0x22
 800acf8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d02d      	beq.n	800ad62 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad0c:	4a40      	ldr	r2, [pc, #256]	@ (800ae10 <UART_Start_Receive_DMA+0x140>)
 800ad0e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad16:	4a3f      	ldr	r2, [pc, #252]	@ (800ae14 <UART_Start_Receive_DMA+0x144>)
 800ad18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad20:	4a3d      	ldr	r2, [pc, #244]	@ (800ae18 <UART_Start_Receive_DMA+0x148>)
 800ad22:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	3324      	adds	r3, #36	@ 0x24
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad40:	461a      	mov	r2, r3
 800ad42:	88fb      	ldrh	r3, [r7, #6]
 800ad44:	f7f7 ff0a 	bl	8002b5c <HAL_DMA_Start_IT>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d009      	beq.n	800ad62 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	2210      	movs	r2, #16
 800ad52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	2220      	movs	r2, #32
 800ad5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ad5e:	2301      	movs	r3, #1
 800ad60:	e051      	b.n	800ae06 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	691b      	ldr	r3, [r3, #16]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d018      	beq.n	800ad9c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ad72:	e853 3f00 	ldrex	r3, [r3]
 800ad76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ad78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ad7e:	657b      	str	r3, [r7, #84]	@ 0x54
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	461a      	mov	r2, r3
 800ad86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ad88:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ad8a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ad8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ad90:	e841 2300 	strex	r3, r2, [r1]
 800ad94:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800ad96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d1e6      	bne.n	800ad6a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	3308      	adds	r3, #8
 800ada2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada6:	e853 3f00 	ldrex	r3, [r3]
 800adaa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800adac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adae:	f043 0301 	orr.w	r3, r3, #1
 800adb2:	653b      	str	r3, [r7, #80]	@ 0x50
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	3308      	adds	r3, #8
 800adba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800adbc:	637a      	str	r2, [r7, #52]	@ 0x34
 800adbe:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800adc2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800adc4:	e841 2300 	strex	r3, r2, [r1]
 800adc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800adca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d1e5      	bne.n	800ad9c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	3308      	adds	r3, #8
 800add6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	e853 3f00 	ldrex	r3, [r3]
 800adde:	613b      	str	r3, [r7, #16]
   return(result);
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ade6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	3308      	adds	r3, #8
 800adee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800adf0:	623a      	str	r2, [r7, #32]
 800adf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf4:	69f9      	ldr	r1, [r7, #28]
 800adf6:	6a3a      	ldr	r2, [r7, #32]
 800adf8:	e841 2300 	strex	r3, r2, [r1]
 800adfc:	61bb      	str	r3, [r7, #24]
   return(result);
 800adfe:	69bb      	ldr	r3, [r7, #24]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1e5      	bne.n	800add0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3758      	adds	r7, #88	@ 0x58
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}
 800ae0e:	bf00      	nop
 800ae10:	0800af6d 	.word	0x0800af6d
 800ae14:	0800b095 	.word	0x0800b095
 800ae18:	0800b0d3 	.word	0x0800b0d3

0800ae1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b08f      	sub	sp, #60	@ 0x3c
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2a:	6a3b      	ldr	r3, [r7, #32]
 800ae2c:	e853 3f00 	ldrex	r3, [r3]
 800ae30:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ae38:	637b      	str	r3, [r7, #52]	@ 0x34
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ae44:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae4a:	e841 2300 	strex	r3, r2, [r1]
 800ae4e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d1e6      	bne.n	800ae24 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3308      	adds	r3, #8
 800ae5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800ae6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3308      	adds	r3, #8
 800ae74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae76:	61ba      	str	r2, [r7, #24]
 800ae78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6979      	ldr	r1, [r7, #20]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	613b      	str	r3, [r7, #16]
   return(result);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e5      	bne.n	800ae56 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800ae92:	bf00      	nop
 800ae94:	373c      	adds	r7, #60	@ 0x3c
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
	...

0800aea0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800aea0:	b480      	push	{r7}
 800aea2:	b095      	sub	sp, #84	@ 0x54
 800aea4:	af00      	add	r7, sp, #0
 800aea6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800aeb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800aebc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800aec6:	643b      	str	r3, [r7, #64]	@ 0x40
 800aec8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800aecc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800aed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e6      	bne.n	800aea8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	3308      	adds	r3, #8
 800aee0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aee2:	6a3b      	ldr	r3, [r7, #32]
 800aee4:	e853 3f00 	ldrex	r3, [r3]
 800aee8:	61fb      	str	r3, [r7, #28]
   return(result);
 800aeea:	69fa      	ldr	r2, [r7, #28]
 800aeec:	4b1e      	ldr	r3, [pc, #120]	@ (800af68 <UART_EndRxTransfer+0xc8>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	64bb      	str	r3, [r7, #72]	@ 0x48
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	3308      	adds	r3, #8
 800aef8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800aefa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aefc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aefe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800af00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800af02:	e841 2300 	strex	r3, r2, [r1]
 800af06:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800af08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d1e5      	bne.n	800aeda <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800af12:	2b01      	cmp	r3, #1
 800af14:	d118      	bne.n	800af48 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	e853 3f00 	ldrex	r3, [r3]
 800af22:	60bb      	str	r3, [r7, #8]
   return(result);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f023 0310 	bic.w	r3, r3, #16
 800af2a:	647b      	str	r3, [r7, #68]	@ 0x44
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	461a      	mov	r2, r3
 800af32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800af34:	61bb      	str	r3, [r7, #24]
 800af36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af38:	6979      	ldr	r1, [r7, #20]
 800af3a:	69ba      	ldr	r2, [r7, #24]
 800af3c:	e841 2300 	strex	r3, r2, [r1]
 800af40:	613b      	str	r3, [r7, #16]
   return(result);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e6      	bne.n	800af16 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2220      	movs	r2, #32
 800af4c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	2200      	movs	r2, #0
 800af54:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800af5c:	bf00      	nop
 800af5e:	3754      	adds	r7, #84	@ 0x54
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr
 800af68:	effffffe 	.word	0xeffffffe

0800af6c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	b09c      	sub	sp, #112	@ 0x70
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af78:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	69db      	ldr	r3, [r3, #28]
 800af7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800af82:	d071      	beq.n	800b068 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800af84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af86:	2200      	movs	r2, #0
 800af88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800af9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800af9c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800afa0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800afa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800afaa:	65bb      	str	r3, [r7, #88]	@ 0x58
 800afac:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800afb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800afb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e6      	bne.n	800af8c <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800afce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	667b      	str	r3, [r7, #100]	@ 0x64
 800afd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800afde:	647a      	str	r2, [r7, #68]	@ 0x44
 800afe0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800afe4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800afec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e5      	bne.n	800afbe <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3308      	adds	r3, #8
 800aff8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	e853 3f00 	ldrex	r3, [r3]
 800b000:	623b      	str	r3, [r7, #32]
   return(result);
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b008:	663b      	str	r3, [r7, #96]	@ 0x60
 800b00a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	3308      	adds	r3, #8
 800b010:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b012:	633a      	str	r2, [r7, #48]	@ 0x30
 800b014:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b016:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b018:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b01a:	e841 2300 	strex	r3, r2, [r1]
 800b01e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e5      	bne.n	800aff2 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800b026:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b028:	2220      	movs	r2, #32
 800b02a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b02e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b032:	2b01      	cmp	r3, #1
 800b034:	d118      	bne.n	800b068 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b036:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	e853 3f00 	ldrex	r3, [r3]
 800b042:	60fb      	str	r3, [r7, #12]
   return(result);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	f023 0310 	bic.w	r3, r3, #16
 800b04a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b04c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	461a      	mov	r2, r3
 800b052:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b054:	61fb      	str	r3, [r7, #28]
 800b056:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b058:	69b9      	ldr	r1, [r7, #24]
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	e841 2300 	strex	r3, r2, [r1]
 800b060:	617b      	str	r3, [r7, #20]
   return(result);
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d1e6      	bne.n	800b036 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b06a:	2200      	movs	r2, #0
 800b06c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b06e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b070:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b072:	2b01      	cmp	r3, #1
 800b074:	d107      	bne.n	800b086 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b076:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b078:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b07c:	4619      	mov	r1, r3
 800b07e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b080:	f7f6 fc62 	bl	8001948 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b084:	e002      	b.n	800b08c <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800b086:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800b088:	f7fe fee2 	bl	8009e50 <HAL_UART_RxCpltCallback>
}
 800b08c:	bf00      	nop
 800b08e:	3770      	adds	r7, #112	@ 0x70
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b084      	sub	sp, #16
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0a0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2201      	movs	r2, #1
 800b0a6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d109      	bne.n	800b0c4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b0b6:	085b      	lsrs	r3, r3, #1
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7f6 fc43 	bl	8001948 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b0c2:	e002      	b.n	800b0ca <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f7fe fecd 	bl	8009e64 <HAL_UART_RxHalfCpltCallback>
}
 800b0ca:	bf00      	nop
 800b0cc:	3710      	adds	r7, #16
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b086      	sub	sp, #24
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800b0e0:	697b      	ldr	r3, [r7, #20]
 800b0e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b0e6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b0ee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b0fa:	2b80      	cmp	r3, #128	@ 0x80
 800b0fc:	d109      	bne.n	800b112 <UART_DMAError+0x40>
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b21      	cmp	r3, #33	@ 0x21
 800b102:	d106      	bne.n	800b112 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	2200      	movs	r2, #0
 800b108:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800b10c:	6978      	ldr	r0, [r7, #20]
 800b10e:	f7ff fe85 	bl	800ae1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800b112:	697b      	ldr	r3, [r7, #20]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	689b      	ldr	r3, [r3, #8]
 800b118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b11c:	2b40      	cmp	r3, #64	@ 0x40
 800b11e:	d109      	bne.n	800b134 <UART_DMAError+0x62>
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2b22      	cmp	r3, #34	@ 0x22
 800b124:	d106      	bne.n	800b134 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800b126:	697b      	ldr	r3, [r7, #20]
 800b128:	2200      	movs	r2, #0
 800b12a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800b12e:	6978      	ldr	r0, [r7, #20]
 800b130:	f7ff feb6 	bl	800aea0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b134:	697b      	ldr	r3, [r7, #20]
 800b136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b13a:	f043 0210 	orr.w	r2, r3, #16
 800b13e:	697b      	ldr	r3, [r7, #20]
 800b140:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b144:	6978      	ldr	r0, [r7, #20]
 800b146:	f7fe fe97 	bl	8009e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b14a:	bf00      	nop
 800b14c:	3718      	adds	r7, #24
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}

0800b152 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b152:	b580      	push	{r7, lr}
 800b154:	b084      	sub	sp, #16
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b15e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	2200      	movs	r2, #0
 800b164:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f7fe fe81 	bl	8009e78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b176:	bf00      	nop
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b088      	sub	sp, #32
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	e853 3f00 	ldrex	r3, [r3]
 800b192:	60bb      	str	r3, [r7, #8]
   return(result);
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b19a:	61fb      	str	r3, [r7, #28]
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	61bb      	str	r3, [r7, #24]
 800b1a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1a8:	6979      	ldr	r1, [r7, #20]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	e841 2300 	strex	r3, r2, [r1]
 800b1b0:	613b      	str	r3, [r7, #16]
   return(result);
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d1e6      	bne.n	800b186 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2220      	movs	r2, #32
 800b1bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2200      	movs	r2, #0
 800b1c4:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7fe fe38 	bl	8009e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b1cc:	bf00      	nop
 800b1ce:	3720      	adds	r7, #32
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b083      	sub	sp, #12
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b1dc:	bf00      	nop
 800b1de:	370c      	adds	r7, #12
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr

0800b1e8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d101      	bne.n	800b226 <HAL_UARTEx_DisableFifoMode+0x16>
 800b222:	2302      	movs	r3, #2
 800b224:	e027      	b.n	800b276 <HAL_UARTEx_DisableFifoMode+0x66>
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2201      	movs	r2, #1
 800b22a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	@ 0x24
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f022 0201 	bic.w	r2, r2, #1
 800b24c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800b254:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2200      	movs	r2, #0
 800b25a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	68fa      	ldr	r2, [r7, #12]
 800b262:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	2220      	movs	r2, #32
 800b268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	3714      	adds	r7, #20
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b292:	2b01      	cmp	r3, #1
 800b294:	d101      	bne.n	800b29a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b296:	2302      	movs	r3, #2
 800b298:	e02d      	b.n	800b2f6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2201      	movs	r2, #1
 800b29e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2224      	movs	r2, #36	@ 0x24
 800b2a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	f022 0201 	bic.w	r2, r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	689b      	ldr	r3, [r3, #8]
 800b2c8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	683a      	ldr	r2, [r7, #0]
 800b2d2:	430a      	orrs	r2, r1
 800b2d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2d6:	6878      	ldr	r0, [r7, #4]
 800b2d8:	f000 f8a4 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	68fa      	ldr	r2, [r7, #12]
 800b2e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2220      	movs	r2, #32
 800b2e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3710      	adds	r7, #16
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}

0800b2fe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2fe:	b580      	push	{r7, lr}
 800b300:	b084      	sub	sp, #16
 800b302:	af00      	add	r7, sp, #0
 800b304:	6078      	str	r0, [r7, #4]
 800b306:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d101      	bne.n	800b316 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b312:	2302      	movs	r3, #2
 800b314:	e02d      	b.n	800b372 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	2201      	movs	r2, #1
 800b31a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2224      	movs	r2, #36	@ 0x24
 800b322:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	681a      	ldr	r2, [r3, #0]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	f022 0201 	bic.w	r2, r2, #1
 800b33c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	689b      	ldr	r3, [r3, #8]
 800b344:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	430a      	orrs	r2, r1
 800b350:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f000 f866 	bl	800b424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	68fa      	ldr	r2, [r7, #12]
 800b35e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b370:	2300      	movs	r3, #0
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}

0800b37a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b37a:	b580      	push	{r7, lr}
 800b37c:	b08c      	sub	sp, #48	@ 0x30
 800b37e:	af00      	add	r7, sp, #0
 800b380:	60f8      	str	r0, [r7, #12]
 800b382:	60b9      	str	r1, [r7, #8]
 800b384:	4613      	mov	r3, r2
 800b386:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800b38e:	2b20      	cmp	r3, #32
 800b390:	d142      	bne.n	800b418 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d002      	beq.n	800b39e <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800b398:	88fb      	ldrh	r3, [r7, #6]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e03b      	b.n	800b41a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800b3ae:	88fb      	ldrh	r3, [r7, #6]
 800b3b0:	461a      	mov	r2, r3
 800b3b2:	68b9      	ldr	r1, [r7, #8]
 800b3b4:	68f8      	ldr	r0, [r7, #12]
 800b3b6:	f7ff fc8b 	bl	800acd0 <UART_Start_Receive_DMA>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800b3c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d124      	bne.n	800b412 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b3cc:	2b01      	cmp	r3, #1
 800b3ce:	d11d      	bne.n	800b40c <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	2210      	movs	r2, #16
 800b3d6:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3de:	69bb      	ldr	r3, [r7, #24]
 800b3e0:	e853 3f00 	ldrex	r3, [r3]
 800b3e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	f043 0310 	orr.w	r3, r3, #16
 800b3ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	461a      	mov	r2, r3
 800b3f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3f6:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3f8:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6a39      	ldr	r1, [r7, #32]
 800b3fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	61fb      	str	r3, [r7, #28]
   return(result);
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e6      	bne.n	800b3d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800b40a:	e002      	b.n	800b412 <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800b412:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b416:	e000      	b.n	800b41a <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800b418:	2302      	movs	r3, #2
  }
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3730      	adds	r7, #48	@ 0x30
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b430:	2b00      	cmp	r3, #0
 800b432:	d108      	bne.n	800b446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2201      	movs	r2, #1
 800b438:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	2201      	movs	r2, #1
 800b440:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b444:	e031      	b.n	800b4aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b446:	2310      	movs	r3, #16
 800b448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b44a:	2310      	movs	r3, #16
 800b44c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	689b      	ldr	r3, [r3, #8]
 800b454:	0e5b      	lsrs	r3, r3, #25
 800b456:	b2db      	uxtb	r3, r3
 800b458:	f003 0307 	and.w	r3, r3, #7
 800b45c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	689b      	ldr	r3, [r3, #8]
 800b464:	0f5b      	lsrs	r3, r3, #29
 800b466:	b2db      	uxtb	r3, r3
 800b468:	f003 0307 	and.w	r3, r3, #7
 800b46c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b46e:	7bbb      	ldrb	r3, [r7, #14]
 800b470:	7b3a      	ldrb	r2, [r7, #12]
 800b472:	4911      	ldr	r1, [pc, #68]	@ (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b474:	5c8a      	ldrb	r2, [r1, r2]
 800b476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b47a:	7b3a      	ldrb	r2, [r7, #12]
 800b47c:	490f      	ldr	r1, [pc, #60]	@ (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b47e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b480:	fb93 f3f2 	sdiv	r3, r3, r2
 800b484:	b29a      	uxth	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
 800b48e:	7b7a      	ldrb	r2, [r7, #13]
 800b490:	4909      	ldr	r1, [pc, #36]	@ (800b4b8 <UARTEx_SetNbDataToProcess+0x94>)
 800b492:	5c8a      	ldrb	r2, [r1, r2]
 800b494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b498:	7b7a      	ldrb	r2, [r7, #13]
 800b49a:	4908      	ldr	r1, [pc, #32]	@ (800b4bc <UARTEx_SetNbDataToProcess+0x98>)
 800b49c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b49e:	fb93 f3f2 	sdiv	r3, r3, r2
 800b4a2:	b29a      	uxth	r2, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800b4aa:	bf00      	nop
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	08010164 	.word	0x08010164
 800b4bc:	0801016c 	.word	0x0801016c

0800b4c0 <__NVIC_SetPriority>:
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b083      	sub	sp, #12
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	6039      	str	r1, [r7, #0]
 800b4ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800b4cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	db0a      	blt.n	800b4ea <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	b2da      	uxtb	r2, r3
 800b4d8:	490c      	ldr	r1, [pc, #48]	@ (800b50c <__NVIC_SetPriority+0x4c>)
 800b4da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b4de:	0112      	lsls	r2, r2, #4
 800b4e0:	b2d2      	uxtb	r2, r2
 800b4e2:	440b      	add	r3, r1
 800b4e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800b4e8:	e00a      	b.n	800b500 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	b2da      	uxtb	r2, r3
 800b4ee:	4908      	ldr	r1, [pc, #32]	@ (800b510 <__NVIC_SetPriority+0x50>)
 800b4f0:	88fb      	ldrh	r3, [r7, #6]
 800b4f2:	f003 030f 	and.w	r3, r3, #15
 800b4f6:	3b04      	subs	r3, #4
 800b4f8:	0112      	lsls	r2, r2, #4
 800b4fa:	b2d2      	uxtb	r2, r2
 800b4fc:	440b      	add	r3, r1
 800b4fe:	761a      	strb	r2, [r3, #24]
}
 800b500:	bf00      	nop
 800b502:	370c      	adds	r7, #12
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	e000e100 	.word	0xe000e100
 800b510:	e000ed00 	.word	0xe000ed00

0800b514 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800b514:	b580      	push	{r7, lr}
 800b516:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800b518:	4b05      	ldr	r3, [pc, #20]	@ (800b530 <SysTick_Handler+0x1c>)
 800b51a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800b51c:	f002 fcc4 	bl	800dea8 <xTaskGetSchedulerState>
 800b520:	4603      	mov	r3, r0
 800b522:	2b01      	cmp	r3, #1
 800b524:	d001      	beq.n	800b52a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800b526:	f000 feaf 	bl	800c288 <xPortSysTickHandler>
  }
}
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	e000e010 	.word	0xe000e010

0800b534 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800b538:	2100      	movs	r1, #0
 800b53a:	f06f 0004 	mvn.w	r0, #4
 800b53e:	f7ff ffbf 	bl	800b4c0 <__NVIC_SetPriority>
#endif
}
 800b542:	bf00      	nop
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b548:	b480      	push	{r7}
 800b54a:	b083      	sub	sp, #12
 800b54c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b54e:	f3ef 8305 	mrs	r3, IPSR
 800b552:	603b      	str	r3, [r7, #0]
  return(result);
 800b554:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800b55a:	f06f 0305 	mvn.w	r3, #5
 800b55e:	607b      	str	r3, [r7, #4]
 800b560:	e00c      	b.n	800b57c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b562:	4b0a      	ldr	r3, [pc, #40]	@ (800b58c <osKernelInitialize+0x44>)
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d105      	bne.n	800b576 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b56a:	4b08      	ldr	r3, [pc, #32]	@ (800b58c <osKernelInitialize+0x44>)
 800b56c:	2201      	movs	r2, #1
 800b56e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b570:	2300      	movs	r3, #0
 800b572:	607b      	str	r3, [r7, #4]
 800b574:	e002      	b.n	800b57c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800b576:	f04f 33ff 	mov.w	r3, #4294967295
 800b57a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b57c:	687b      	ldr	r3, [r7, #4]
}
 800b57e:	4618      	mov	r0, r3
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	240005a0 	.word	0x240005a0

0800b590 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b590:	b580      	push	{r7, lr}
 800b592:	b082      	sub	sp, #8
 800b594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b596:	f3ef 8305 	mrs	r3, IPSR
 800b59a:	603b      	str	r3, [r7, #0]
  return(result);
 800b59c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d003      	beq.n	800b5aa <osKernelStart+0x1a>
    stat = osErrorISR;
 800b5a2:	f06f 0305 	mvn.w	r3, #5
 800b5a6:	607b      	str	r3, [r7, #4]
 800b5a8:	e010      	b.n	800b5cc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b5aa:	4b0b      	ldr	r3, [pc, #44]	@ (800b5d8 <osKernelStart+0x48>)
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d109      	bne.n	800b5c6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b5b2:	f7ff ffbf 	bl	800b534 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b5b6:	4b08      	ldr	r3, [pc, #32]	@ (800b5d8 <osKernelStart+0x48>)
 800b5b8:	2202      	movs	r2, #2
 800b5ba:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b5bc:	f002 f800 	bl	800d5c0 <vTaskStartScheduler>
      stat = osOK;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	607b      	str	r3, [r7, #4]
 800b5c4:	e002      	b.n	800b5cc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800b5c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800b5cc:	687b      	ldr	r3, [r7, #4]
}
 800b5ce:	4618      	mov	r0, r3
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	240005a0 	.word	0x240005a0

0800b5dc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b5dc:	b580      	push	{r7, lr}
 800b5de:	b08e      	sub	sp, #56	@ 0x38
 800b5e0:	af04      	add	r7, sp, #16
 800b5e2:	60f8      	str	r0, [r7, #12]
 800b5e4:	60b9      	str	r1, [r7, #8]
 800b5e6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ec:	f3ef 8305 	mrs	r3, IPSR
 800b5f0:	617b      	str	r3, [r7, #20]
  return(result);
 800b5f2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d17e      	bne.n	800b6f6 <osThreadNew+0x11a>
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d07b      	beq.n	800b6f6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800b5fe:	2380      	movs	r3, #128	@ 0x80
 800b600:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800b602:	2318      	movs	r3, #24
 800b604:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800b606:	2300      	movs	r3, #0
 800b608:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800b60a:	f04f 33ff 	mov.w	r3, #4294967295
 800b60e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d045      	beq.n	800b6a2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <osThreadNew+0x48>
        name = attr->name;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	699b      	ldr	r3, [r3, #24]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d002      	beq.n	800b632 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	699b      	ldr	r3, [r3, #24]
 800b630:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b632:	69fb      	ldr	r3, [r7, #28]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d008      	beq.n	800b64a <osThreadNew+0x6e>
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	2b38      	cmp	r3, #56	@ 0x38
 800b63c:	d805      	bhi.n	800b64a <osThreadNew+0x6e>
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	f003 0301 	and.w	r3, r3, #1
 800b646:	2b00      	cmp	r3, #0
 800b648:	d001      	beq.n	800b64e <osThreadNew+0x72>
        return (NULL);
 800b64a:	2300      	movs	r3, #0
 800b64c:	e054      	b.n	800b6f8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d003      	beq.n	800b65e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	089b      	lsrs	r3, r3, #2
 800b65c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	689b      	ldr	r3, [r3, #8]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d00e      	beq.n	800b684 <osThreadNew+0xa8>
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	2ba7      	cmp	r3, #167	@ 0xa7
 800b66c:	d90a      	bls.n	800b684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b672:	2b00      	cmp	r3, #0
 800b674:	d006      	beq.n	800b684 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	695b      	ldr	r3, [r3, #20]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d002      	beq.n	800b684 <osThreadNew+0xa8>
        mem = 1;
 800b67e:	2301      	movs	r3, #1
 800b680:	61bb      	str	r3, [r7, #24]
 800b682:	e010      	b.n	800b6a6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d10c      	bne.n	800b6a6 <osThreadNew+0xca>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d108      	bne.n	800b6a6 <osThreadNew+0xca>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d104      	bne.n	800b6a6 <osThreadNew+0xca>
          mem = 0;
 800b69c:	2300      	movs	r3, #0
 800b69e:	61bb      	str	r3, [r7, #24]
 800b6a0:	e001      	b.n	800b6a6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800b6a2:	2300      	movs	r3, #0
 800b6a4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b6a6:	69bb      	ldr	r3, [r7, #24]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d110      	bne.n	800b6ce <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800b6b0:	687a      	ldr	r2, [r7, #4]
 800b6b2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800b6b4:	9202      	str	r2, [sp, #8]
 800b6b6:	9301      	str	r3, [sp, #4]
 800b6b8:	69fb      	ldr	r3, [r7, #28]
 800b6ba:	9300      	str	r3, [sp, #0]
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	6a3a      	ldr	r2, [r7, #32]
 800b6c0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	f001 fd88 	bl	800d1d8 <xTaskCreateStatic>
 800b6c8:	4603      	mov	r3, r0
 800b6ca:	613b      	str	r3, [r7, #16]
 800b6cc:	e013      	b.n	800b6f6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800b6ce:	69bb      	ldr	r3, [r7, #24]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d110      	bne.n	800b6f6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800b6d4:	6a3b      	ldr	r3, [r7, #32]
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	f107 0310 	add.w	r3, r7, #16
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	69fb      	ldr	r3, [r7, #28]
 800b6e0:	9300      	str	r3, [sp, #0]
 800b6e2:	68bb      	ldr	r3, [r7, #8]
 800b6e4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b6e6:	68f8      	ldr	r0, [r7, #12]
 800b6e8:	f001 fdd6 	bl	800d298 <xTaskCreate>
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b01      	cmp	r3, #1
 800b6f0:	d001      	beq.n	800b6f6 <osThreadNew+0x11a>
            hTask = NULL;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800b6f6:	693b      	ldr	r3, [r7, #16]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3728      	adds	r7, #40	@ 0x28
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800b700:	b580      	push	{r7, lr}
 800b702:	b084      	sub	sp, #16
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b708:	f3ef 8305 	mrs	r3, IPSR
 800b70c:	60bb      	str	r3, [r7, #8]
  return(result);
 800b70e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b710:	2b00      	cmp	r3, #0
 800b712:	d003      	beq.n	800b71c <osDelay+0x1c>
    stat = osErrorISR;
 800b714:	f06f 0305 	mvn.w	r3, #5
 800b718:	60fb      	str	r3, [r7, #12]
 800b71a:	e007      	b.n	800b72c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	2b00      	cmp	r3, #0
 800b724:	d002      	beq.n	800b72c <osDelay+0x2c>
      vTaskDelay(ticks);
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f001 ff14 	bl	800d554 <vTaskDelay>
    }
  }

  return (stat);
 800b72c:	68fb      	ldr	r3, [r7, #12]
}
 800b72e:	4618      	mov	r0, r3
 800b730:	3710      	adds	r7, #16
 800b732:	46bd      	mov	sp, r7
 800b734:	bd80      	pop	{r7, pc}

0800b736 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800b736:	b580      	push	{r7, lr}
 800b738:	b088      	sub	sp, #32
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b742:	f3ef 8305 	mrs	r3, IPSR
 800b746:	60bb      	str	r3, [r7, #8]
  return(result);
 800b748:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d174      	bne.n	800b838 <osMutexNew+0x102>
    if (attr != NULL) {
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d003      	beq.n	800b75c <osMutexNew+0x26>
      type = attr->attr_bits;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	685b      	ldr	r3, [r3, #4]
 800b758:	61bb      	str	r3, [r7, #24]
 800b75a:	e001      	b.n	800b760 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b760:	69bb      	ldr	r3, [r7, #24]
 800b762:	f003 0301 	and.w	r3, r3, #1
 800b766:	2b00      	cmp	r3, #0
 800b768:	d002      	beq.n	800b770 <osMutexNew+0x3a>
      rmtx = 1U;
 800b76a:	2301      	movs	r3, #1
 800b76c:	617b      	str	r3, [r7, #20]
 800b76e:	e001      	b.n	800b774 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b770:	2300      	movs	r3, #0
 800b772:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b774:	69bb      	ldr	r3, [r7, #24]
 800b776:	f003 0308 	and.w	r3, r3, #8
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d15c      	bne.n	800b838 <osMutexNew+0x102>
      mem = -1;
 800b77e:	f04f 33ff 	mov.w	r3, #4294967295
 800b782:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d015      	beq.n	800b7b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	689b      	ldr	r3, [r3, #8]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d006      	beq.n	800b7a0 <osMutexNew+0x6a>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	68db      	ldr	r3, [r3, #12]
 800b796:	2b4f      	cmp	r3, #79	@ 0x4f
 800b798:	d902      	bls.n	800b7a0 <osMutexNew+0x6a>
          mem = 1;
 800b79a:	2301      	movs	r3, #1
 800b79c:	613b      	str	r3, [r7, #16]
 800b79e:	e00c      	b.n	800b7ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	689b      	ldr	r3, [r3, #8]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d108      	bne.n	800b7ba <osMutexNew+0x84>
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	68db      	ldr	r3, [r3, #12]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d104      	bne.n	800b7ba <osMutexNew+0x84>
            mem = 0;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	613b      	str	r3, [r7, #16]
 800b7b4:	e001      	b.n	800b7ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b7ba:	693b      	ldr	r3, [r7, #16]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d112      	bne.n	800b7e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b7c0:	697b      	ldr	r3, [r7, #20]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d007      	beq.n	800b7d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	689b      	ldr	r3, [r3, #8]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	2004      	movs	r0, #4
 800b7ce:	f000 ff64 	bl	800c69a <xQueueCreateMutexStatic>
 800b7d2:	61f8      	str	r0, [r7, #28]
 800b7d4:	e016      	b.n	800b804 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	4619      	mov	r1, r3
 800b7dc:	2001      	movs	r0, #1
 800b7de:	f000 ff5c 	bl	800c69a <xQueueCreateMutexStatic>
 800b7e2:	61f8      	str	r0, [r7, #28]
 800b7e4:	e00e      	b.n	800b804 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d10b      	bne.n	800b804 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d004      	beq.n	800b7fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b7f2:	2004      	movs	r0, #4
 800b7f4:	f000 ff39 	bl	800c66a <xQueueCreateMutex>
 800b7f8:	61f8      	str	r0, [r7, #28]
 800b7fa:	e003      	b.n	800b804 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b7fc:	2001      	movs	r0, #1
 800b7fe:	f000 ff34 	bl	800c66a <xQueueCreateMutex>
 800b802:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b804:	69fb      	ldr	r3, [r7, #28]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d00c      	beq.n	800b824 <osMutexNew+0xee>
        if (attr != NULL) {
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d003      	beq.n	800b818 <osMutexNew+0xe2>
          name = attr->name;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e001      	b.n	800b81c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b818:	2300      	movs	r3, #0
 800b81a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b81c:	68f9      	ldr	r1, [r7, #12]
 800b81e:	69f8      	ldr	r0, [r7, #28]
 800b820:	f001 fc7c 	bl	800d11c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b824:	69fb      	ldr	r3, [r7, #28]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d006      	beq.n	800b838 <osMutexNew+0x102>
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d003      	beq.n	800b838 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b830:	69fb      	ldr	r3, [r7, #28]
 800b832:	f043 0301 	orr.w	r3, r3, #1
 800b836:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b838:	69fb      	ldr	r3, [r7, #28]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3720      	adds	r7, #32
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b842:	b580      	push	{r7, lr}
 800b844:	b086      	sub	sp, #24
 800b846:	af00      	add	r7, sp, #0
 800b848:	6078      	str	r0, [r7, #4]
 800b84a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f023 0301 	bic.w	r3, r3, #1
 800b852:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	f003 0301 	and.w	r3, r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b860:	f3ef 8305 	mrs	r3, IPSR
 800b864:	60bb      	str	r3, [r7, #8]
  return(result);
 800b866:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d003      	beq.n	800b874 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b86c:	f06f 0305 	mvn.w	r3, #5
 800b870:	617b      	str	r3, [r7, #20]
 800b872:	e02c      	b.n	800b8ce <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d103      	bne.n	800b882 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b87a:	f06f 0303 	mvn.w	r3, #3
 800b87e:	617b      	str	r3, [r7, #20]
 800b880:	e025      	b.n	800b8ce <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	d011      	beq.n	800b8ac <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b888:	6839      	ldr	r1, [r7, #0]
 800b88a:	6938      	ldr	r0, [r7, #16]
 800b88c:	f000 ff55 	bl	800c73a <xQueueTakeMutexRecursive>
 800b890:	4603      	mov	r3, r0
 800b892:	2b01      	cmp	r3, #1
 800b894:	d01b      	beq.n	800b8ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d003      	beq.n	800b8a4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b89c:	f06f 0301 	mvn.w	r3, #1
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	e014      	b.n	800b8ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b8a4:	f06f 0302 	mvn.w	r3, #2
 800b8a8:	617b      	str	r3, [r7, #20]
 800b8aa:	e010      	b.n	800b8ce <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b8ac:	6839      	ldr	r1, [r7, #0]
 800b8ae:	6938      	ldr	r0, [r7, #16]
 800b8b0:	f001 f9fc 	bl	800ccac <xQueueSemaphoreTake>
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	2b01      	cmp	r3, #1
 800b8b8:	d009      	beq.n	800b8ce <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d003      	beq.n	800b8c8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b8c0:	f06f 0301 	mvn.w	r3, #1
 800b8c4:	617b      	str	r3, [r7, #20]
 800b8c6:	e002      	b.n	800b8ce <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b8c8:	f06f 0302 	mvn.w	r3, #2
 800b8cc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b8ce:	697b      	ldr	r3, [r7, #20]
}
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	3718      	adds	r7, #24
 800b8d4:	46bd      	mov	sp, r7
 800b8d6:	bd80      	pop	{r7, pc}

0800b8d8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b086      	sub	sp, #24
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f023 0301 	bic.w	r3, r3, #1
 800b8e6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	f003 0301 	and.w	r3, r3, #1
 800b8ee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8f4:	f3ef 8305 	mrs	r3, IPSR
 800b8f8:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8fa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d003      	beq.n	800b908 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b900:	f06f 0305 	mvn.w	r3, #5
 800b904:	617b      	str	r3, [r7, #20]
 800b906:	e01f      	b.n	800b948 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d103      	bne.n	800b916 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b90e:	f06f 0303 	mvn.w	r3, #3
 800b912:	617b      	str	r3, [r7, #20]
 800b914:	e018      	b.n	800b948 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d009      	beq.n	800b930 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b91c:	6938      	ldr	r0, [r7, #16]
 800b91e:	f000 fed7 	bl	800c6d0 <xQueueGiveMutexRecursive>
 800b922:	4603      	mov	r3, r0
 800b924:	2b01      	cmp	r3, #1
 800b926:	d00f      	beq.n	800b948 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b928:	f06f 0302 	mvn.w	r3, #2
 800b92c:	617b      	str	r3, [r7, #20]
 800b92e:	e00b      	b.n	800b948 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b930:	2300      	movs	r3, #0
 800b932:	2200      	movs	r2, #0
 800b934:	2100      	movs	r1, #0
 800b936:	6938      	ldr	r0, [r7, #16]
 800b938:	f000 ff36 	bl	800c7a8 <xQueueGenericSend>
 800b93c:	4603      	mov	r3, r0
 800b93e:	2b01      	cmp	r3, #1
 800b940:	d002      	beq.n	800b948 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b942:	f06f 0302 	mvn.w	r3, #2
 800b946:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b948:	697b      	ldr	r3, [r7, #20]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3718      	adds	r7, #24
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
	...

0800b954 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	60f8      	str	r0, [r7, #12]
 800b95c:	60b9      	str	r1, [r7, #8]
 800b95e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	4a07      	ldr	r2, [pc, #28]	@ (800b980 <vApplicationGetIdleTaskMemory+0x2c>)
 800b964:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	4a06      	ldr	r2, [pc, #24]	@ (800b984 <vApplicationGetIdleTaskMemory+0x30>)
 800b96a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2280      	movs	r2, #128	@ 0x80
 800b970:	601a      	str	r2, [r3, #0]
}
 800b972:	bf00      	nop
 800b974:	3714      	adds	r7, #20
 800b976:	46bd      	mov	sp, r7
 800b978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	240005a4 	.word	0x240005a4
 800b984:	2400064c 	.word	0x2400064c

0800b988 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b988:	b480      	push	{r7}
 800b98a:	b085      	sub	sp, #20
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	60f8      	str	r0, [r7, #12]
 800b990:	60b9      	str	r1, [r7, #8]
 800b992:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4a07      	ldr	r2, [pc, #28]	@ (800b9b4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b998:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	4a06      	ldr	r2, [pc, #24]	@ (800b9b8 <vApplicationGetTimerTaskMemory+0x30>)
 800b99e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b9a6:	601a      	str	r2, [r3, #0]
}
 800b9a8:	bf00      	nop
 800b9aa:	3714      	adds	r7, #20
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b2:	4770      	bx	lr
 800b9b4:	2400084c 	.word	0x2400084c
 800b9b8:	240008f4 	.word	0x240008f4

0800b9bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b08a      	sub	sp, #40	@ 0x28
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9c8:	f001 fe6a 	bl	800d6a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9cc:	4b5c      	ldr	r3, [pc, #368]	@ (800bb40 <pvPortMalloc+0x184>)
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d101      	bne.n	800b9d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9d4:	f000 f924 	bl	800bc20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9d8:	4b5a      	ldr	r3, [pc, #360]	@ (800bb44 <pvPortMalloc+0x188>)
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	f040 8095 	bne.w	800bb10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d01e      	beq.n	800ba2a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b9ec:	2208      	movs	r2, #8
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f003 0307 	and.w	r3, r3, #7
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d015      	beq.n	800ba2a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f023 0307 	bic.w	r3, r3, #7
 800ba04:	3308      	adds	r3, #8
 800ba06:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	f003 0307 	and.w	r3, r3, #7
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d00b      	beq.n	800ba2a <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba16:	f383 8811 	msr	BASEPRI, r3
 800ba1a:	f3bf 8f6f 	isb	sy
 800ba1e:	f3bf 8f4f 	dsb	sy
 800ba22:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop
 800ba28:	e7fd      	b.n	800ba26 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d06f      	beq.n	800bb10 <pvPortMalloc+0x154>
 800ba30:	4b45      	ldr	r3, [pc, #276]	@ (800bb48 <pvPortMalloc+0x18c>)
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d86a      	bhi.n	800bb10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba3a:	4b44      	ldr	r3, [pc, #272]	@ (800bb4c <pvPortMalloc+0x190>)
 800ba3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba3e:	4b43      	ldr	r3, [pc, #268]	@ (800bb4c <pvPortMalloc+0x190>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba44:	e004      	b.n	800ba50 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ba46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	687a      	ldr	r2, [r7, #4]
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d903      	bls.n	800ba62 <pvPortMalloc+0xa6>
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d1f1      	bne.n	800ba46 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba62:	4b37      	ldr	r3, [pc, #220]	@ (800bb40 <pvPortMalloc+0x184>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d051      	beq.n	800bb10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba6c:	6a3b      	ldr	r3, [r7, #32]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2208      	movs	r2, #8
 800ba72:	4413      	add	r3, r2
 800ba74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba78:	681a      	ldr	r2, [r3, #0]
 800ba7a:	6a3b      	ldr	r3, [r7, #32]
 800ba7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba80:	685a      	ldr	r2, [r3, #4]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	1ad2      	subs	r2, r2, r3
 800ba86:	2308      	movs	r3, #8
 800ba88:	005b      	lsls	r3, r3, #1
 800ba8a:	429a      	cmp	r2, r3
 800ba8c:	d920      	bls.n	800bad0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	4413      	add	r3, r2
 800ba94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba96:	69bb      	ldr	r3, [r7, #24]
 800ba98:	f003 0307 	and.w	r3, r3, #7
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00b      	beq.n	800bab8 <pvPortMalloc+0xfc>
	__asm volatile
 800baa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800baa4:	f383 8811 	msr	BASEPRI, r3
 800baa8:	f3bf 8f6f 	isb	sy
 800baac:	f3bf 8f4f 	dsb	sy
 800bab0:	613b      	str	r3, [r7, #16]
}
 800bab2:	bf00      	nop
 800bab4:	bf00      	nop
 800bab6:	e7fd      	b.n	800bab4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baba:	685a      	ldr	r2, [r3, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	1ad2      	subs	r2, r2, r3
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bac6:	687a      	ldr	r2, [r7, #4]
 800bac8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baca:	69b8      	ldr	r0, [r7, #24]
 800bacc:	f000 f90a 	bl	800bce4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bad0:	4b1d      	ldr	r3, [pc, #116]	@ (800bb48 <pvPortMalloc+0x18c>)
 800bad2:	681a      	ldr	r2, [r3, #0]
 800bad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	1ad3      	subs	r3, r2, r3
 800bada:	4a1b      	ldr	r2, [pc, #108]	@ (800bb48 <pvPortMalloc+0x18c>)
 800badc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bade:	4b1a      	ldr	r3, [pc, #104]	@ (800bb48 <pvPortMalloc+0x18c>)
 800bae0:	681a      	ldr	r2, [r3, #0]
 800bae2:	4b1b      	ldr	r3, [pc, #108]	@ (800bb50 <pvPortMalloc+0x194>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	429a      	cmp	r2, r3
 800bae8:	d203      	bcs.n	800baf2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800baea:	4b17      	ldr	r3, [pc, #92]	@ (800bb48 <pvPortMalloc+0x18c>)
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	4a18      	ldr	r2, [pc, #96]	@ (800bb50 <pvPortMalloc+0x194>)
 800baf0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800baf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	4b13      	ldr	r3, [pc, #76]	@ (800bb44 <pvPortMalloc+0x188>)
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	431a      	orrs	r2, r3
 800bafc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bafe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb02:	2200      	movs	r2, #0
 800bb04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bb06:	4b13      	ldr	r3, [pc, #76]	@ (800bb54 <pvPortMalloc+0x198>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	4a11      	ldr	r2, [pc, #68]	@ (800bb54 <pvPortMalloc+0x198>)
 800bb0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bb10:	f001 fdd4 	bl	800d6bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bb14:	69fb      	ldr	r3, [r7, #28]
 800bb16:	f003 0307 	and.w	r3, r3, #7
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00b      	beq.n	800bb36 <pvPortMalloc+0x17a>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	60fb      	str	r3, [r7, #12]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <pvPortMalloc+0x176>
	return pvReturn;
 800bb36:	69fb      	ldr	r3, [r7, #28]
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3728      	adds	r7, #40	@ 0x28
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}
 800bb40:	240048fc 	.word	0x240048fc
 800bb44:	24004910 	.word	0x24004910
 800bb48:	24004900 	.word	0x24004900
 800bb4c:	240048f4 	.word	0x240048f4
 800bb50:	24004904 	.word	0x24004904
 800bb54:	24004908 	.word	0x24004908

0800bb58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b086      	sub	sp, #24
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d04f      	beq.n	800bc0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb6a:	2308      	movs	r3, #8
 800bb6c:	425b      	negs	r3, r3
 800bb6e:	697a      	ldr	r2, [r7, #20]
 800bb70:	4413      	add	r3, r2
 800bb72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	4b25      	ldr	r3, [pc, #148]	@ (800bc14 <vPortFree+0xbc>)
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	4013      	ands	r3, r2
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d10b      	bne.n	800bb9e <vPortFree+0x46>
	__asm volatile
 800bb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb8a:	f383 8811 	msr	BASEPRI, r3
 800bb8e:	f3bf 8f6f 	isb	sy
 800bb92:	f3bf 8f4f 	dsb	sy
 800bb96:	60fb      	str	r3, [r7, #12]
}
 800bb98:	bf00      	nop
 800bb9a:	bf00      	nop
 800bb9c:	e7fd      	b.n	800bb9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb9e:	693b      	ldr	r3, [r7, #16]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d00b      	beq.n	800bbbe <vPortFree+0x66>
	__asm volatile
 800bba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbaa:	f383 8811 	msr	BASEPRI, r3
 800bbae:	f3bf 8f6f 	isb	sy
 800bbb2:	f3bf 8f4f 	dsb	sy
 800bbb6:	60bb      	str	r3, [r7, #8]
}
 800bbb8:	bf00      	nop
 800bbba:	bf00      	nop
 800bbbc:	e7fd      	b.n	800bbba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bbbe:	693b      	ldr	r3, [r7, #16]
 800bbc0:	685a      	ldr	r2, [r3, #4]
 800bbc2:	4b14      	ldr	r3, [pc, #80]	@ (800bc14 <vPortFree+0xbc>)
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d01e      	beq.n	800bc0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d11a      	bne.n	800bc0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	685a      	ldr	r2, [r3, #4]
 800bbd8:	4b0e      	ldr	r3, [pc, #56]	@ (800bc14 <vPortFree+0xbc>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	43db      	mvns	r3, r3
 800bbde:	401a      	ands	r2, r3
 800bbe0:	693b      	ldr	r3, [r7, #16]
 800bbe2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bbe4:	f001 fd5c 	bl	800d6a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	685a      	ldr	r2, [r3, #4]
 800bbec:	4b0a      	ldr	r3, [pc, #40]	@ (800bc18 <vPortFree+0xc0>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4413      	add	r3, r2
 800bbf2:	4a09      	ldr	r2, [pc, #36]	@ (800bc18 <vPortFree+0xc0>)
 800bbf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbf6:	6938      	ldr	r0, [r7, #16]
 800bbf8:	f000 f874 	bl	800bce4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800bbfc:	4b07      	ldr	r3, [pc, #28]	@ (800bc1c <vPortFree+0xc4>)
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	3301      	adds	r3, #1
 800bc02:	4a06      	ldr	r2, [pc, #24]	@ (800bc1c <vPortFree+0xc4>)
 800bc04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800bc06:	f001 fd59 	bl	800d6bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bc0a:	bf00      	nop
 800bc0c:	3718      	adds	r7, #24
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	24004910 	.word	0x24004910
 800bc18:	24004900 	.word	0x24004900
 800bc1c:	2400490c 	.word	0x2400490c

0800bc20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bc20:	b480      	push	{r7}
 800bc22:	b085      	sub	sp, #20
 800bc24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bc26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800bc2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bc2c:	4b27      	ldr	r3, [pc, #156]	@ (800bccc <prvHeapInit+0xac>)
 800bc2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d00c      	beq.n	800bc54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	3307      	adds	r3, #7
 800bc3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	f023 0307 	bic.w	r3, r3, #7
 800bc46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bc48:	68ba      	ldr	r2, [r7, #8]
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	1ad3      	subs	r3, r2, r3
 800bc4e:	4a1f      	ldr	r2, [pc, #124]	@ (800bccc <prvHeapInit+0xac>)
 800bc50:	4413      	add	r3, r2
 800bc52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc58:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd0 <prvHeapInit+0xb0>)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc5e:	4b1c      	ldr	r3, [pc, #112]	@ (800bcd0 <prvHeapInit+0xb0>)
 800bc60:	2200      	movs	r2, #0
 800bc62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	68ba      	ldr	r2, [r7, #8]
 800bc68:	4413      	add	r3, r2
 800bc6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc6c:	2208      	movs	r2, #8
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	1a9b      	subs	r3, r3, r2
 800bc72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	f023 0307 	bic.w	r3, r3, #7
 800bc7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	4a15      	ldr	r2, [pc, #84]	@ (800bcd4 <prvHeapInit+0xb4>)
 800bc80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc82:	4b14      	ldr	r3, [pc, #80]	@ (800bcd4 <prvHeapInit+0xb4>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2200      	movs	r2, #0
 800bc88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc8a:	4b12      	ldr	r3, [pc, #72]	@ (800bcd4 <prvHeapInit+0xb4>)
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc96:	683b      	ldr	r3, [r7, #0]
 800bc98:	68fa      	ldr	r2, [r7, #12]
 800bc9a:	1ad2      	subs	r2, r2, r3
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bca0:	4b0c      	ldr	r3, [pc, #48]	@ (800bcd4 <prvHeapInit+0xb4>)
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4a0a      	ldr	r2, [pc, #40]	@ (800bcd8 <prvHeapInit+0xb8>)
 800bcae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	685b      	ldr	r3, [r3, #4]
 800bcb4:	4a09      	ldr	r2, [pc, #36]	@ (800bcdc <prvHeapInit+0xbc>)
 800bcb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bcb8:	4b09      	ldr	r3, [pc, #36]	@ (800bce0 <prvHeapInit+0xc0>)
 800bcba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800bcbe:	601a      	str	r2, [r3, #0]
}
 800bcc0:	bf00      	nop
 800bcc2:	3714      	adds	r7, #20
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	24000cf4 	.word	0x24000cf4
 800bcd0:	240048f4 	.word	0x240048f4
 800bcd4:	240048fc 	.word	0x240048fc
 800bcd8:	24004904 	.word	0x24004904
 800bcdc:	24004900 	.word	0x24004900
 800bce0:	24004910 	.word	0x24004910

0800bce4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bce4:	b480      	push	{r7}
 800bce6:	b085      	sub	sp, #20
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bcec:	4b28      	ldr	r3, [pc, #160]	@ (800bd90 <prvInsertBlockIntoFreeList+0xac>)
 800bcee:	60fb      	str	r3, [r7, #12]
 800bcf0:	e002      	b.n	800bcf8 <prvInsertBlockIntoFreeList+0x14>
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	60fb      	str	r3, [r7, #12]
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	687a      	ldr	r2, [r7, #4]
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d8f7      	bhi.n	800bcf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	685b      	ldr	r3, [r3, #4]
 800bd0a:	68ba      	ldr	r2, [r7, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	687a      	ldr	r2, [r7, #4]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d108      	bne.n	800bd26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	685a      	ldr	r2, [r3, #4]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	441a      	add	r2, r3
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	685b      	ldr	r3, [r3, #4]
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	441a      	add	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d118      	bne.n	800bd6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681a      	ldr	r2, [r3, #0]
 800bd3e:	4b15      	ldr	r3, [pc, #84]	@ (800bd94 <prvInsertBlockIntoFreeList+0xb0>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	429a      	cmp	r2, r3
 800bd44:	d00d      	beq.n	800bd62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	685a      	ldr	r2, [r3, #4]
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	441a      	add	r2, r3
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	601a      	str	r2, [r3, #0]
 800bd60:	e008      	b.n	800bd74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd62:	4b0c      	ldr	r3, [pc, #48]	@ (800bd94 <prvInsertBlockIntoFreeList+0xb0>)
 800bd64:	681a      	ldr	r2, [r3, #0]
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	601a      	str	r2, [r3, #0]
 800bd6a:	e003      	b.n	800bd74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681a      	ldr	r2, [r3, #0]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d002      	beq.n	800bd82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	687a      	ldr	r2, [r7, #4]
 800bd80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd82:	bf00      	nop
 800bd84:	3714      	adds	r7, #20
 800bd86:	46bd      	mov	sp, r7
 800bd88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd8c:	4770      	bx	lr
 800bd8e:	bf00      	nop
 800bd90:	240048f4 	.word	0x240048f4
 800bd94:	240048fc 	.word	0x240048fc

0800bd98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bd98:	b480      	push	{r7}
 800bd9a:	b083      	sub	sp, #12
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f103 0208 	add.w	r2, r3, #8
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	f04f 32ff 	mov.w	r2, #4294967295
 800bdb0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f103 0208 	add.w	r2, r3, #8
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f103 0208 	add.w	r2, r3, #8
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	2200      	movs	r2, #0
 800bdca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bdcc:	bf00      	nop
 800bdce:	370c      	adds	r7, #12
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd6:	4770      	bx	lr

0800bdd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bdd8:	b480      	push	{r7}
 800bdda:	b083      	sub	sp, #12
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2200      	movs	r2, #0
 800bde4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bde6:	bf00      	nop
 800bde8:	370c      	adds	r7, #12
 800bdea:	46bd      	mov	sp, r7
 800bdec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf0:	4770      	bx	lr

0800bdf2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b085      	sub	sp, #20
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800be02:	683b      	ldr	r3, [r7, #0]
 800be04:	68fa      	ldr	r2, [r7, #12]
 800be06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	689a      	ldr	r2, [r3, #8]
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	689b      	ldr	r3, [r3, #8]
 800be14:	683a      	ldr	r2, [r7, #0]
 800be16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	683a      	ldr	r2, [r7, #0]
 800be1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	687a      	ldr	r2, [r7, #4]
 800be22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	1c5a      	adds	r2, r3, #1
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	601a      	str	r2, [r3, #0]
}
 800be2e:	bf00      	nop
 800be30:	3714      	adds	r7, #20
 800be32:	46bd      	mov	sp, r7
 800be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be38:	4770      	bx	lr

0800be3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800be3a:	b480      	push	{r7}
 800be3c:	b085      	sub	sp, #20
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
 800be42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be50:	d103      	bne.n	800be5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	691b      	ldr	r3, [r3, #16]
 800be56:	60fb      	str	r3, [r7, #12]
 800be58:	e00c      	b.n	800be74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	3308      	adds	r3, #8
 800be5e:	60fb      	str	r3, [r7, #12]
 800be60:	e002      	b.n	800be68 <vListInsert+0x2e>
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	685b      	ldr	r3, [r3, #4]
 800be66:	60fb      	str	r3, [r7, #12]
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	429a      	cmp	r2, r3
 800be72:	d2f6      	bcs.n	800be62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	685a      	ldr	r2, [r3, #4]
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800be7c:	683b      	ldr	r3, [r7, #0]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	683a      	ldr	r2, [r7, #0]
 800be82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	683a      	ldr	r2, [r7, #0]
 800be8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	1c5a      	adds	r2, r3, #1
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	601a      	str	r2, [r3, #0]
}
 800bea0:	bf00      	nop
 800bea2:	3714      	adds	r7, #20
 800bea4:	46bd      	mov	sp, r7
 800bea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beaa:	4770      	bx	lr

0800beac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800beac:	b480      	push	{r7}
 800beae:	b085      	sub	sp, #20
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	691b      	ldr	r3, [r3, #16]
 800beb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	685b      	ldr	r3, [r3, #4]
 800bebe:	687a      	ldr	r2, [r7, #4]
 800bec0:	6892      	ldr	r2, [r2, #8]
 800bec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689b      	ldr	r3, [r3, #8]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6852      	ldr	r2, [r2, #4]
 800becc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	685b      	ldr	r3, [r3, #4]
 800bed2:	687a      	ldr	r2, [r7, #4]
 800bed4:	429a      	cmp	r2, r3
 800bed6:	d103      	bne.n	800bee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	689a      	ldr	r2, [r3, #8]
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	1e5a      	subs	r2, r3, #1
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	3714      	adds	r7, #20
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr

0800bf00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bf00:	b480      	push	{r7}
 800bf02:	b085      	sub	sp, #20
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	60f8      	str	r0, [r7, #12]
 800bf08:	60b9      	str	r1, [r7, #8]
 800bf0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	3b04      	subs	r3, #4
 800bf10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800bf18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	3b04      	subs	r3, #4
 800bf1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800bf20:	68bb      	ldr	r3, [r7, #8]
 800bf22:	f023 0201 	bic.w	r2, r3, #1
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	3b04      	subs	r3, #4
 800bf2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bf30:	4a0c      	ldr	r2, [pc, #48]	@ (800bf64 <pxPortInitialiseStack+0x64>)
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	3b14      	subs	r3, #20
 800bf3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	3b04      	subs	r3, #4
 800bf46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f06f 0202 	mvn.w	r2, #2
 800bf4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	3b20      	subs	r3, #32
 800bf54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bf56:	68fb      	ldr	r3, [r7, #12]
}
 800bf58:	4618      	mov	r0, r3
 800bf5a:	3714      	adds	r7, #20
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf62:	4770      	bx	lr
 800bf64:	0800bf69 	.word	0x0800bf69

0800bf68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bf68:	b480      	push	{r7}
 800bf6a:	b085      	sub	sp, #20
 800bf6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bf72:	4b13      	ldr	r3, [pc, #76]	@ (800bfc0 <prvTaskExitError+0x58>)
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf7a:	d00b      	beq.n	800bf94 <prvTaskExitError+0x2c>
	__asm volatile
 800bf7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf80:	f383 8811 	msr	BASEPRI, r3
 800bf84:	f3bf 8f6f 	isb	sy
 800bf88:	f3bf 8f4f 	dsb	sy
 800bf8c:	60fb      	str	r3, [r7, #12]
}
 800bf8e:	bf00      	nop
 800bf90:	bf00      	nop
 800bf92:	e7fd      	b.n	800bf90 <prvTaskExitError+0x28>
	__asm volatile
 800bf94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf98:	f383 8811 	msr	BASEPRI, r3
 800bf9c:	f3bf 8f6f 	isb	sy
 800bfa0:	f3bf 8f4f 	dsb	sy
 800bfa4:	60bb      	str	r3, [r7, #8]
}
 800bfa6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bfa8:	bf00      	nop
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d0fc      	beq.n	800bfaa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bfb0:	bf00      	nop
 800bfb2:	bf00      	nop
 800bfb4:	3714      	adds	r7, #20
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfbc:	4770      	bx	lr
 800bfbe:	bf00      	nop
 800bfc0:	24000028 	.word	0x24000028
	...

0800bfd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bfd0:	4b07      	ldr	r3, [pc, #28]	@ (800bff0 <pxCurrentTCBConst2>)
 800bfd2:	6819      	ldr	r1, [r3, #0]
 800bfd4:	6808      	ldr	r0, [r1, #0]
 800bfd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	f380 8809 	msr	PSP, r0
 800bfde:	f3bf 8f6f 	isb	sy
 800bfe2:	f04f 0000 	mov.w	r0, #0
 800bfe6:	f380 8811 	msr	BASEPRI, r0
 800bfea:	4770      	bx	lr
 800bfec:	f3af 8000 	nop.w

0800bff0 <pxCurrentTCBConst2>:
 800bff0:	2400495c 	.word	0x2400495c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bff4:	bf00      	nop
 800bff6:	bf00      	nop

0800bff8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bff8:	4808      	ldr	r0, [pc, #32]	@ (800c01c <prvPortStartFirstTask+0x24>)
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	6800      	ldr	r0, [r0, #0]
 800bffe:	f380 8808 	msr	MSP, r0
 800c002:	f04f 0000 	mov.w	r0, #0
 800c006:	f380 8814 	msr	CONTROL, r0
 800c00a:	b662      	cpsie	i
 800c00c:	b661      	cpsie	f
 800c00e:	f3bf 8f4f 	dsb	sy
 800c012:	f3bf 8f6f 	isb	sy
 800c016:	df00      	svc	0
 800c018:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c01a:	bf00      	nop
 800c01c:	e000ed08 	.word	0xe000ed08

0800c020 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b086      	sub	sp, #24
 800c024:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c026:	4b47      	ldr	r3, [pc, #284]	@ (800c144 <xPortStartScheduler+0x124>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a47      	ldr	r2, [pc, #284]	@ (800c148 <xPortStartScheduler+0x128>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d10b      	bne.n	800c048 <xPortStartScheduler+0x28>
	__asm volatile
 800c030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c034:	f383 8811 	msr	BASEPRI, r3
 800c038:	f3bf 8f6f 	isb	sy
 800c03c:	f3bf 8f4f 	dsb	sy
 800c040:	613b      	str	r3, [r7, #16]
}
 800c042:	bf00      	nop
 800c044:	bf00      	nop
 800c046:	e7fd      	b.n	800c044 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c048:	4b3e      	ldr	r3, [pc, #248]	@ (800c144 <xPortStartScheduler+0x124>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a3f      	ldr	r2, [pc, #252]	@ (800c14c <xPortStartScheduler+0x12c>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d10b      	bne.n	800c06a <xPortStartScheduler+0x4a>
	__asm volatile
 800c052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c056:	f383 8811 	msr	BASEPRI, r3
 800c05a:	f3bf 8f6f 	isb	sy
 800c05e:	f3bf 8f4f 	dsb	sy
 800c062:	60fb      	str	r3, [r7, #12]
}
 800c064:	bf00      	nop
 800c066:	bf00      	nop
 800c068:	e7fd      	b.n	800c066 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c06a:	4b39      	ldr	r3, [pc, #228]	@ (800c150 <xPortStartScheduler+0x130>)
 800c06c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	781b      	ldrb	r3, [r3, #0]
 800c072:	b2db      	uxtb	r3, r3
 800c074:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c076:	697b      	ldr	r3, [r7, #20]
 800c078:	22ff      	movs	r2, #255	@ 0xff
 800c07a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c07c:	697b      	ldr	r3, [r7, #20]
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c084:	78fb      	ldrb	r3, [r7, #3]
 800c086:	b2db      	uxtb	r3, r3
 800c088:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c08c:	b2da      	uxtb	r2, r3
 800c08e:	4b31      	ldr	r3, [pc, #196]	@ (800c154 <xPortStartScheduler+0x134>)
 800c090:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c092:	4b31      	ldr	r3, [pc, #196]	@ (800c158 <xPortStartScheduler+0x138>)
 800c094:	2207      	movs	r2, #7
 800c096:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c098:	e009      	b.n	800c0ae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c09a:	4b2f      	ldr	r3, [pc, #188]	@ (800c158 <xPortStartScheduler+0x138>)
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	3b01      	subs	r3, #1
 800c0a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0a2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c0a4:	78fb      	ldrb	r3, [r7, #3]
 800c0a6:	b2db      	uxtb	r3, r3
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	b2db      	uxtb	r3, r3
 800c0ac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c0b6:	2b80      	cmp	r3, #128	@ 0x80
 800c0b8:	d0ef      	beq.n	800c09a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c0ba:	4b27      	ldr	r3, [pc, #156]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	f1c3 0307 	rsb	r3, r3, #7
 800c0c2:	2b04      	cmp	r3, #4
 800c0c4:	d00b      	beq.n	800c0de <xPortStartScheduler+0xbe>
	__asm volatile
 800c0c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0ca:	f383 8811 	msr	BASEPRI, r3
 800c0ce:	f3bf 8f6f 	isb	sy
 800c0d2:	f3bf 8f4f 	dsb	sy
 800c0d6:	60bb      	str	r3, [r7, #8]
}
 800c0d8:	bf00      	nop
 800c0da:	bf00      	nop
 800c0dc:	e7fd      	b.n	800c0da <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c0de:	4b1e      	ldr	r3, [pc, #120]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	021b      	lsls	r3, r3, #8
 800c0e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0e6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c0e8:	4b1b      	ldr	r3, [pc, #108]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c0f0:	4a19      	ldr	r2, [pc, #100]	@ (800c158 <xPortStartScheduler+0x138>)
 800c0f2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	b2da      	uxtb	r2, r3
 800c0f8:	697b      	ldr	r3, [r7, #20]
 800c0fa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c0fc:	4b17      	ldr	r3, [pc, #92]	@ (800c15c <xPortStartScheduler+0x13c>)
 800c0fe:	681b      	ldr	r3, [r3, #0]
 800c100:	4a16      	ldr	r2, [pc, #88]	@ (800c15c <xPortStartScheduler+0x13c>)
 800c102:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c106:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c108:	4b14      	ldr	r3, [pc, #80]	@ (800c15c <xPortStartScheduler+0x13c>)
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4a13      	ldr	r2, [pc, #76]	@ (800c15c <xPortStartScheduler+0x13c>)
 800c10e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c112:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c114:	f000 f8da 	bl	800c2cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c118:	4b11      	ldr	r3, [pc, #68]	@ (800c160 <xPortStartScheduler+0x140>)
 800c11a:	2200      	movs	r2, #0
 800c11c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c11e:	f000 f8f9 	bl	800c314 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c122:	4b10      	ldr	r3, [pc, #64]	@ (800c164 <xPortStartScheduler+0x144>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a0f      	ldr	r2, [pc, #60]	@ (800c164 <xPortStartScheduler+0x144>)
 800c128:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c12c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c12e:	f7ff ff63 	bl	800bff8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c132:	f001 fc2b 	bl	800d98c <vTaskSwitchContext>
	prvTaskExitError();
 800c136:	f7ff ff17 	bl	800bf68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c13a:	2300      	movs	r3, #0
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3718      	adds	r7, #24
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}
 800c144:	e000ed00 	.word	0xe000ed00
 800c148:	410fc271 	.word	0x410fc271
 800c14c:	410fc270 	.word	0x410fc270
 800c150:	e000e400 	.word	0xe000e400
 800c154:	24004914 	.word	0x24004914
 800c158:	24004918 	.word	0x24004918
 800c15c:	e000ed20 	.word	0xe000ed20
 800c160:	24000028 	.word	0x24000028
 800c164:	e000ef34 	.word	0xe000ef34

0800c168 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
	__asm volatile
 800c16e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c172:	f383 8811 	msr	BASEPRI, r3
 800c176:	f3bf 8f6f 	isb	sy
 800c17a:	f3bf 8f4f 	dsb	sy
 800c17e:	607b      	str	r3, [r7, #4]
}
 800c180:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c182:	4b10      	ldr	r3, [pc, #64]	@ (800c1c4 <vPortEnterCritical+0x5c>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	3301      	adds	r3, #1
 800c188:	4a0e      	ldr	r2, [pc, #56]	@ (800c1c4 <vPortEnterCritical+0x5c>)
 800c18a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c18c:	4b0d      	ldr	r3, [pc, #52]	@ (800c1c4 <vPortEnterCritical+0x5c>)
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b01      	cmp	r3, #1
 800c192:	d110      	bne.n	800c1b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c194:	4b0c      	ldr	r3, [pc, #48]	@ (800c1c8 <vPortEnterCritical+0x60>)
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	b2db      	uxtb	r3, r3
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d00b      	beq.n	800c1b6 <vPortEnterCritical+0x4e>
	__asm volatile
 800c19e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1a2:	f383 8811 	msr	BASEPRI, r3
 800c1a6:	f3bf 8f6f 	isb	sy
 800c1aa:	f3bf 8f4f 	dsb	sy
 800c1ae:	603b      	str	r3, [r7, #0]
}
 800c1b0:	bf00      	nop
 800c1b2:	bf00      	nop
 800c1b4:	e7fd      	b.n	800c1b2 <vPortEnterCritical+0x4a>
	}
}
 800c1b6:	bf00      	nop
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr
 800c1c2:	bf00      	nop
 800c1c4:	24000028 	.word	0x24000028
 800c1c8:	e000ed04 	.word	0xe000ed04

0800c1cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c1d2:	4b12      	ldr	r3, [pc, #72]	@ (800c21c <vPortExitCritical+0x50>)
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10b      	bne.n	800c1f2 <vPortExitCritical+0x26>
	__asm volatile
 800c1da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1de:	f383 8811 	msr	BASEPRI, r3
 800c1e2:	f3bf 8f6f 	isb	sy
 800c1e6:	f3bf 8f4f 	dsb	sy
 800c1ea:	607b      	str	r3, [r7, #4]
}
 800c1ec:	bf00      	nop
 800c1ee:	bf00      	nop
 800c1f0:	e7fd      	b.n	800c1ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c1f2:	4b0a      	ldr	r3, [pc, #40]	@ (800c21c <vPortExitCritical+0x50>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	3b01      	subs	r3, #1
 800c1f8:	4a08      	ldr	r2, [pc, #32]	@ (800c21c <vPortExitCritical+0x50>)
 800c1fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c1fc:	4b07      	ldr	r3, [pc, #28]	@ (800c21c <vPortExitCritical+0x50>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d105      	bne.n	800c210 <vPortExitCritical+0x44>
 800c204:	2300      	movs	r3, #0
 800c206:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c208:	683b      	ldr	r3, [r7, #0]
 800c20a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c20e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr
 800c21c:	24000028 	.word	0x24000028

0800c220 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c220:	f3ef 8009 	mrs	r0, PSP
 800c224:	f3bf 8f6f 	isb	sy
 800c228:	4b15      	ldr	r3, [pc, #84]	@ (800c280 <pxCurrentTCBConst>)
 800c22a:	681a      	ldr	r2, [r3, #0]
 800c22c:	f01e 0f10 	tst.w	lr, #16
 800c230:	bf08      	it	eq
 800c232:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c236:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c23a:	6010      	str	r0, [r2, #0]
 800c23c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c240:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c244:	f380 8811 	msr	BASEPRI, r0
 800c248:	f3bf 8f4f 	dsb	sy
 800c24c:	f3bf 8f6f 	isb	sy
 800c250:	f001 fb9c 	bl	800d98c <vTaskSwitchContext>
 800c254:	f04f 0000 	mov.w	r0, #0
 800c258:	f380 8811 	msr	BASEPRI, r0
 800c25c:	bc09      	pop	{r0, r3}
 800c25e:	6819      	ldr	r1, [r3, #0]
 800c260:	6808      	ldr	r0, [r1, #0]
 800c262:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c266:	f01e 0f10 	tst.w	lr, #16
 800c26a:	bf08      	it	eq
 800c26c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c270:	f380 8809 	msr	PSP, r0
 800c274:	f3bf 8f6f 	isb	sy
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	f3af 8000 	nop.w

0800c280 <pxCurrentTCBConst>:
 800c280:	2400495c 	.word	0x2400495c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c284:	bf00      	nop
 800c286:	bf00      	nop

0800c288 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c288:	b580      	push	{r7, lr}
 800c28a:	b082      	sub	sp, #8
 800c28c:	af00      	add	r7, sp, #0
	__asm volatile
 800c28e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c292:	f383 8811 	msr	BASEPRI, r3
 800c296:	f3bf 8f6f 	isb	sy
 800c29a:	f3bf 8f4f 	dsb	sy
 800c29e:	607b      	str	r3, [r7, #4]
}
 800c2a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c2a2:	f001 fab9 	bl	800d818 <xTaskIncrementTick>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d003      	beq.n	800c2b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c2ac:	4b06      	ldr	r3, [pc, #24]	@ (800c2c8 <xPortSysTickHandler+0x40>)
 800c2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c2b2:	601a      	str	r2, [r3, #0]
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	f383 8811 	msr	BASEPRI, r3
}
 800c2be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c2c0:	bf00      	nop
 800c2c2:	3708      	adds	r7, #8
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	e000ed04 	.word	0xe000ed04

0800c2cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c2cc:	b480      	push	{r7}
 800c2ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c2d0:	4b0b      	ldr	r3, [pc, #44]	@ (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c2d6:	4b0b      	ldr	r3, [pc, #44]	@ (800c304 <vPortSetupTimerInterrupt+0x38>)
 800c2d8:	2200      	movs	r2, #0
 800c2da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c2dc:	4b0a      	ldr	r3, [pc, #40]	@ (800c308 <vPortSetupTimerInterrupt+0x3c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0a      	ldr	r2, [pc, #40]	@ (800c30c <vPortSetupTimerInterrupt+0x40>)
 800c2e2:	fba2 2303 	umull	r2, r3, r2, r3
 800c2e6:	099b      	lsrs	r3, r3, #6
 800c2e8:	4a09      	ldr	r2, [pc, #36]	@ (800c310 <vPortSetupTimerInterrupt+0x44>)
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c2ee:	4b04      	ldr	r3, [pc, #16]	@ (800c300 <vPortSetupTimerInterrupt+0x34>)
 800c2f0:	2207      	movs	r2, #7
 800c2f2:	601a      	str	r2, [r3, #0]
}
 800c2f4:	bf00      	nop
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	e000e010 	.word	0xe000e010
 800c304:	e000e018 	.word	0xe000e018
 800c308:	24000000 	.word	0x24000000
 800c30c:	10624dd3 	.word	0x10624dd3
 800c310:	e000e014 	.word	0xe000e014

0800c314 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c314:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c324 <vPortEnableVFP+0x10>
 800c318:	6801      	ldr	r1, [r0, #0]
 800c31a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c31e:	6001      	str	r1, [r0, #0]
 800c320:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c322:	bf00      	nop
 800c324:	e000ed88 	.word	0xe000ed88

0800c328 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c32e:	f3ef 8305 	mrs	r3, IPSR
 800c332:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b0f      	cmp	r3, #15
 800c338:	d915      	bls.n	800c366 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c33a:	4a18      	ldr	r2, [pc, #96]	@ (800c39c <vPortValidateInterruptPriority+0x74>)
 800c33c:	68fb      	ldr	r3, [r7, #12]
 800c33e:	4413      	add	r3, r2
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c344:	4b16      	ldr	r3, [pc, #88]	@ (800c3a0 <vPortValidateInterruptPriority+0x78>)
 800c346:	781b      	ldrb	r3, [r3, #0]
 800c348:	7afa      	ldrb	r2, [r7, #11]
 800c34a:	429a      	cmp	r2, r3
 800c34c:	d20b      	bcs.n	800c366 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c352:	f383 8811 	msr	BASEPRI, r3
 800c356:	f3bf 8f6f 	isb	sy
 800c35a:	f3bf 8f4f 	dsb	sy
 800c35e:	607b      	str	r3, [r7, #4]
}
 800c360:	bf00      	nop
 800c362:	bf00      	nop
 800c364:	e7fd      	b.n	800c362 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c366:	4b0f      	ldr	r3, [pc, #60]	@ (800c3a4 <vPortValidateInterruptPriority+0x7c>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c36e:	4b0e      	ldr	r3, [pc, #56]	@ (800c3a8 <vPortValidateInterruptPriority+0x80>)
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	429a      	cmp	r2, r3
 800c374:	d90b      	bls.n	800c38e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c37a:	f383 8811 	msr	BASEPRI, r3
 800c37e:	f3bf 8f6f 	isb	sy
 800c382:	f3bf 8f4f 	dsb	sy
 800c386:	603b      	str	r3, [r7, #0]
}
 800c388:	bf00      	nop
 800c38a:	bf00      	nop
 800c38c:	e7fd      	b.n	800c38a <vPortValidateInterruptPriority+0x62>
	}
 800c38e:	bf00      	nop
 800c390:	3714      	adds	r7, #20
 800c392:	46bd      	mov	sp, r7
 800c394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c398:	4770      	bx	lr
 800c39a:	bf00      	nop
 800c39c:	e000e3f0 	.word	0xe000e3f0
 800c3a0:	24004914 	.word	0x24004914
 800c3a4:	e000ed0c 	.word	0xe000ed0c
 800c3a8:	24004918 	.word	0x24004918

0800c3ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c3ac:	b580      	push	{r7, lr}
 800c3ae:	b084      	sub	sp, #16
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	6078      	str	r0, [r7, #4]
 800c3b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d10b      	bne.n	800c3d8 <xQueueGenericReset+0x2c>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	60bb      	str	r3, [r7, #8]
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c3d8:	f7ff fec6 	bl	800c168 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681a      	ldr	r2, [r3, #0]
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3e4:	68f9      	ldr	r1, [r7, #12]
 800c3e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c3e8:	fb01 f303 	mul.w	r3, r1, r3
 800c3ec:	441a      	add	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	681a      	ldr	r2, [r3, #0]
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c408:	3b01      	subs	r3, #1
 800c40a:	68f9      	ldr	r1, [r7, #12]
 800c40c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800c40e:	fb01 f303 	mul.w	r3, r1, r3
 800c412:	441a      	add	r2, r3
 800c414:	68fb      	ldr	r3, [r7, #12]
 800c416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	22ff      	movs	r2, #255	@ 0xff
 800c41c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	22ff      	movs	r2, #255	@ 0xff
 800c424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800c428:	683b      	ldr	r3, [r7, #0]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d114      	bne.n	800c458 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d01a      	beq.n	800c46c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	3310      	adds	r3, #16
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 fb5e 	bl	800dafc <xTaskRemoveFromEventList>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d012      	beq.n	800c46c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c446:	4b0d      	ldr	r3, [pc, #52]	@ (800c47c <xQueueGenericReset+0xd0>)
 800c448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c44c:	601a      	str	r2, [r3, #0]
 800c44e:	f3bf 8f4f 	dsb	sy
 800c452:	f3bf 8f6f 	isb	sy
 800c456:	e009      	b.n	800c46c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	3310      	adds	r3, #16
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff fc9b 	bl	800bd98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	3324      	adds	r3, #36	@ 0x24
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff fc96 	bl	800bd98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c46c:	f7ff feae 	bl	800c1cc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c470:	2301      	movs	r3, #1
}
 800c472:	4618      	mov	r0, r3
 800c474:	3710      	adds	r7, #16
 800c476:	46bd      	mov	sp, r7
 800c478:	bd80      	pop	{r7, pc}
 800c47a:	bf00      	nop
 800c47c:	e000ed04 	.word	0xe000ed04

0800c480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c480:	b580      	push	{r7, lr}
 800c482:	b08e      	sub	sp, #56	@ 0x38
 800c484:	af02      	add	r7, sp, #8
 800c486:	60f8      	str	r0, [r7, #12]
 800c488:	60b9      	str	r1, [r7, #8]
 800c48a:	607a      	str	r2, [r7, #4]
 800c48c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d10b      	bne.n	800c4ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c4a6:	bf00      	nop
 800c4a8:	bf00      	nop
 800c4aa:	e7fd      	b.n	800c4a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d10b      	bne.n	800c4ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800c4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4b6:	f383 8811 	msr	BASEPRI, r3
 800c4ba:	f3bf 8f6f 	isb	sy
 800c4be:	f3bf 8f4f 	dsb	sy
 800c4c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c4c4:	bf00      	nop
 800c4c6:	bf00      	nop
 800c4c8:	e7fd      	b.n	800c4c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d002      	beq.n	800c4d6 <xQueueGenericCreateStatic+0x56>
 800c4d0:	68bb      	ldr	r3, [r7, #8]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <xQueueGenericCreateStatic+0x5a>
 800c4d6:	2301      	movs	r3, #1
 800c4d8:	e000      	b.n	800c4dc <xQueueGenericCreateStatic+0x5c>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d10b      	bne.n	800c4f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800c4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e4:	f383 8811 	msr	BASEPRI, r3
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	f3bf 8f4f 	dsb	sy
 800c4f0:	623b      	str	r3, [r7, #32]
}
 800c4f2:	bf00      	nop
 800c4f4:	bf00      	nop
 800c4f6:	e7fd      	b.n	800c4f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d102      	bne.n	800c504 <xQueueGenericCreateStatic+0x84>
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d101      	bne.n	800c508 <xQueueGenericCreateStatic+0x88>
 800c504:	2301      	movs	r3, #1
 800c506:	e000      	b.n	800c50a <xQueueGenericCreateStatic+0x8a>
 800c508:	2300      	movs	r3, #0
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d10b      	bne.n	800c526 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	61fb      	str	r3, [r7, #28]
}
 800c520:	bf00      	nop
 800c522:	bf00      	nop
 800c524:	e7fd      	b.n	800c522 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c526:	2350      	movs	r3, #80	@ 0x50
 800c528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c52a:	697b      	ldr	r3, [r7, #20]
 800c52c:	2b50      	cmp	r3, #80	@ 0x50
 800c52e:	d00b      	beq.n	800c548 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800c530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c534:	f383 8811 	msr	BASEPRI, r3
 800c538:	f3bf 8f6f 	isb	sy
 800c53c:	f3bf 8f4f 	dsb	sy
 800c540:	61bb      	str	r3, [r7, #24]
}
 800c542:	bf00      	nop
 800c544:	bf00      	nop
 800c546:	e7fd      	b.n	800c544 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c548:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800c54e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00d      	beq.n	800c570 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c556:	2201      	movs	r2, #1
 800c558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c55c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800c560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c562:	9300      	str	r3, [sp, #0]
 800c564:	4613      	mov	r3, r2
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	68b9      	ldr	r1, [r7, #8]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 f840 	bl	800c5f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800c572:	4618      	mov	r0, r3
 800c574:	3730      	adds	r7, #48	@ 0x30
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}

0800c57a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c57a:	b580      	push	{r7, lr}
 800c57c:	b08a      	sub	sp, #40	@ 0x28
 800c57e:	af02      	add	r7, sp, #8
 800c580:	60f8      	str	r0, [r7, #12]
 800c582:	60b9      	str	r1, [r7, #8]
 800c584:	4613      	mov	r3, r2
 800c586:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d10b      	bne.n	800c5a6 <xQueueGenericCreate+0x2c>
	__asm volatile
 800c58e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	613b      	str	r3, [r7, #16]
}
 800c5a0:	bf00      	nop
 800c5a2:	bf00      	nop
 800c5a4:	e7fd      	b.n	800c5a2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	68ba      	ldr	r2, [r7, #8]
 800c5aa:	fb02 f303 	mul.w	r3, r2, r3
 800c5ae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c5b0:	69fb      	ldr	r3, [r7, #28]
 800c5b2:	3350      	adds	r3, #80	@ 0x50
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7ff fa01 	bl	800b9bc <pvPortMalloc>
 800c5ba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c5bc:	69bb      	ldr	r3, [r7, #24]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d011      	beq.n	800c5e6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c5c2:	69bb      	ldr	r3, [r7, #24]
 800c5c4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c5c6:	697b      	ldr	r3, [r7, #20]
 800c5c8:	3350      	adds	r3, #80	@ 0x50
 800c5ca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c5cc:	69bb      	ldr	r3, [r7, #24]
 800c5ce:	2200      	movs	r2, #0
 800c5d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c5d4:	79fa      	ldrb	r2, [r7, #7]
 800c5d6:	69bb      	ldr	r3, [r7, #24]
 800c5d8:	9300      	str	r3, [sp, #0]
 800c5da:	4613      	mov	r3, r2
 800c5dc:	697a      	ldr	r2, [r7, #20]
 800c5de:	68b9      	ldr	r1, [r7, #8]
 800c5e0:	68f8      	ldr	r0, [r7, #12]
 800c5e2:	f000 f805 	bl	800c5f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c5e6:	69bb      	ldr	r3, [r7, #24]
	}
 800c5e8:	4618      	mov	r0, r3
 800c5ea:	3720      	adds	r7, #32
 800c5ec:	46bd      	mov	sp, r7
 800c5ee:	bd80      	pop	{r7, pc}

0800c5f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	60f8      	str	r0, [r7, #12]
 800c5f8:	60b9      	str	r1, [r7, #8]
 800c5fa:	607a      	str	r2, [r7, #4]
 800c5fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d103      	bne.n	800c60c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c604:	69bb      	ldr	r3, [r7, #24]
 800c606:	69ba      	ldr	r2, [r7, #24]
 800c608:	601a      	str	r2, [r3, #0]
 800c60a:	e002      	b.n	800c612 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c60c:	69bb      	ldr	r3, [r7, #24]
 800c60e:	687a      	ldr	r2, [r7, #4]
 800c610:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c612:	69bb      	ldr	r3, [r7, #24]
 800c614:	68fa      	ldr	r2, [r7, #12]
 800c616:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c618:	69bb      	ldr	r3, [r7, #24]
 800c61a:	68ba      	ldr	r2, [r7, #8]
 800c61c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c61e:	2101      	movs	r1, #1
 800c620:	69b8      	ldr	r0, [r7, #24]
 800c622:	f7ff fec3 	bl	800c3ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800c626:	69bb      	ldr	r3, [r7, #24]
 800c628:	78fa      	ldrb	r2, [r7, #3]
 800c62a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c62e:	bf00      	nop
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00e      	beq.n	800c662 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	2200      	movs	r2, #0
 800c654:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c656:	2300      	movs	r3, #0
 800c658:	2200      	movs	r2, #0
 800c65a:	2100      	movs	r1, #0
 800c65c:	6878      	ldr	r0, [r7, #4]
 800c65e:	f000 f8a3 	bl	800c7a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c662:	bf00      	nop
 800c664:	3708      	adds	r7, #8
 800c666:	46bd      	mov	sp, r7
 800c668:	bd80      	pop	{r7, pc}

0800c66a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c66a:	b580      	push	{r7, lr}
 800c66c:	b086      	sub	sp, #24
 800c66e:	af00      	add	r7, sp, #0
 800c670:	4603      	mov	r3, r0
 800c672:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c674:	2301      	movs	r3, #1
 800c676:	617b      	str	r3, [r7, #20]
 800c678:	2300      	movs	r3, #0
 800c67a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	461a      	mov	r2, r3
 800c680:	6939      	ldr	r1, [r7, #16]
 800c682:	6978      	ldr	r0, [r7, #20]
 800c684:	f7ff ff79 	bl	800c57a <xQueueGenericCreate>
 800c688:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c68a:	68f8      	ldr	r0, [r7, #12]
 800c68c:	f7ff ffd3 	bl	800c636 <prvInitialiseMutex>

		return xNewQueue;
 800c690:	68fb      	ldr	r3, [r7, #12]
	}
 800c692:	4618      	mov	r0, r3
 800c694:	3718      	adds	r7, #24
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b088      	sub	sp, #32
 800c69e:	af02      	add	r7, sp, #8
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	6039      	str	r1, [r7, #0]
 800c6a4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	617b      	str	r3, [r7, #20]
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c6ae:	79fb      	ldrb	r3, [r7, #7]
 800c6b0:	9300      	str	r3, [sp, #0]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	6939      	ldr	r1, [r7, #16]
 800c6b8:	6978      	ldr	r0, [r7, #20]
 800c6ba:	f7ff fee1 	bl	800c480 <xQueueGenericCreateStatic>
 800c6be:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c6c0:	68f8      	ldr	r0, [r7, #12]
 800c6c2:	f7ff ffb8 	bl	800c636 <prvInitialiseMutex>

		return xNewQueue;
 800c6c6:	68fb      	ldr	r3, [r7, #12]
	}
 800c6c8:	4618      	mov	r0, r3
 800c6ca:	3718      	adds	r7, #24
 800c6cc:	46bd      	mov	sp, r7
 800c6ce:	bd80      	pop	{r7, pc}

0800c6d0 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800c6d0:	b590      	push	{r4, r7, lr}
 800c6d2:	b087      	sub	sp, #28
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10b      	bne.n	800c6fa <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800c6e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e6:	f383 8811 	msr	BASEPRI, r3
 800c6ea:	f3bf 8f6f 	isb	sy
 800c6ee:	f3bf 8f4f 	dsb	sy
 800c6f2:	60fb      	str	r3, [r7, #12]
}
 800c6f4:	bf00      	nop
 800c6f6:	bf00      	nop
 800c6f8:	e7fd      	b.n	800c6f6 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	689c      	ldr	r4, [r3, #8]
 800c6fe:	f001 fbc3 	bl	800de88 <xTaskGetCurrentTaskHandle>
 800c702:	4603      	mov	r3, r0
 800c704:	429c      	cmp	r4, r3
 800c706:	d111      	bne.n	800c72c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	1e5a      	subs	r2, r3, #1
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800c712:	693b      	ldr	r3, [r7, #16]
 800c714:	68db      	ldr	r3, [r3, #12]
 800c716:	2b00      	cmp	r3, #0
 800c718:	d105      	bne.n	800c726 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800c71a:	2300      	movs	r3, #0
 800c71c:	2200      	movs	r2, #0
 800c71e:	2100      	movs	r1, #0
 800c720:	6938      	ldr	r0, [r7, #16]
 800c722:	f000 f841 	bl	800c7a8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800c726:	2301      	movs	r3, #1
 800c728:	617b      	str	r3, [r7, #20]
 800c72a:	e001      	b.n	800c730 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800c72c:	2300      	movs	r3, #0
 800c72e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800c730:	697b      	ldr	r3, [r7, #20]
	}
 800c732:	4618      	mov	r0, r3
 800c734:	371c      	adds	r7, #28
 800c736:	46bd      	mov	sp, r7
 800c738:	bd90      	pop	{r4, r7, pc}

0800c73a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800c73a:	b590      	push	{r4, r7, lr}
 800c73c:	b087      	sub	sp, #28
 800c73e:	af00      	add	r7, sp, #0
 800c740:	6078      	str	r0, [r7, #4]
 800c742:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800c74e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c752:	f383 8811 	msr	BASEPRI, r3
 800c756:	f3bf 8f6f 	isb	sy
 800c75a:	f3bf 8f4f 	dsb	sy
 800c75e:	60fb      	str	r3, [r7, #12]
}
 800c760:	bf00      	nop
 800c762:	bf00      	nop
 800c764:	e7fd      	b.n	800c762 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c766:	693b      	ldr	r3, [r7, #16]
 800c768:	689c      	ldr	r4, [r3, #8]
 800c76a:	f001 fb8d 	bl	800de88 <xTaskGetCurrentTaskHandle>
 800c76e:	4603      	mov	r3, r0
 800c770:	429c      	cmp	r4, r3
 800c772:	d107      	bne.n	800c784 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c774:	693b      	ldr	r3, [r7, #16]
 800c776:	68db      	ldr	r3, [r3, #12]
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800c77e:	2301      	movs	r3, #1
 800c780:	617b      	str	r3, [r7, #20]
 800c782:	e00c      	b.n	800c79e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6938      	ldr	r0, [r7, #16]
 800c788:	f000 fa90 	bl	800ccac <xQueueSemaphoreTake>
 800c78c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800c78e:	697b      	ldr	r3, [r7, #20]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d004      	beq.n	800c79e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	68db      	ldr	r3, [r3, #12]
 800c798:	1c5a      	adds	r2, r3, #1
 800c79a:	693b      	ldr	r3, [r7, #16]
 800c79c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800c79e:	697b      	ldr	r3, [r7, #20]
	}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	371c      	adds	r7, #28
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	bd90      	pop	{r4, r7, pc}

0800c7a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b08e      	sub	sp, #56	@ 0x38
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800c7be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d10b      	bne.n	800c7dc <xQueueGenericSend+0x34>
	__asm volatile
 800c7c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7c8:	f383 8811 	msr	BASEPRI, r3
 800c7cc:	f3bf 8f6f 	isb	sy
 800c7d0:	f3bf 8f4f 	dsb	sy
 800c7d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c7d6:	bf00      	nop
 800c7d8:	bf00      	nop
 800c7da:	e7fd      	b.n	800c7d8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7dc:	68bb      	ldr	r3, [r7, #8]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d103      	bne.n	800c7ea <xQueueGenericSend+0x42>
 800c7e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c7e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d101      	bne.n	800c7ee <xQueueGenericSend+0x46>
 800c7ea:	2301      	movs	r3, #1
 800c7ec:	e000      	b.n	800c7f0 <xQueueGenericSend+0x48>
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d10b      	bne.n	800c80c <xQueueGenericSend+0x64>
	__asm volatile
 800c7f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f8:	f383 8811 	msr	BASEPRI, r3
 800c7fc:	f3bf 8f6f 	isb	sy
 800c800:	f3bf 8f4f 	dsb	sy
 800c804:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800c806:	bf00      	nop
 800c808:	bf00      	nop
 800c80a:	e7fd      	b.n	800c808 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d103      	bne.n	800c81a <xQueueGenericSend+0x72>
 800c812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c816:	2b01      	cmp	r3, #1
 800c818:	d101      	bne.n	800c81e <xQueueGenericSend+0x76>
 800c81a:	2301      	movs	r3, #1
 800c81c:	e000      	b.n	800c820 <xQueueGenericSend+0x78>
 800c81e:	2300      	movs	r3, #0
 800c820:	2b00      	cmp	r3, #0
 800c822:	d10b      	bne.n	800c83c <xQueueGenericSend+0x94>
	__asm volatile
 800c824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c828:	f383 8811 	msr	BASEPRI, r3
 800c82c:	f3bf 8f6f 	isb	sy
 800c830:	f3bf 8f4f 	dsb	sy
 800c834:	623b      	str	r3, [r7, #32]
}
 800c836:	bf00      	nop
 800c838:	bf00      	nop
 800c83a:	e7fd      	b.n	800c838 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c83c:	f001 fb34 	bl	800dea8 <xTaskGetSchedulerState>
 800c840:	4603      	mov	r3, r0
 800c842:	2b00      	cmp	r3, #0
 800c844:	d102      	bne.n	800c84c <xQueueGenericSend+0xa4>
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d101      	bne.n	800c850 <xQueueGenericSend+0xa8>
 800c84c:	2301      	movs	r3, #1
 800c84e:	e000      	b.n	800c852 <xQueueGenericSend+0xaa>
 800c850:	2300      	movs	r3, #0
 800c852:	2b00      	cmp	r3, #0
 800c854:	d10b      	bne.n	800c86e <xQueueGenericSend+0xc6>
	__asm volatile
 800c856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c85a:	f383 8811 	msr	BASEPRI, r3
 800c85e:	f3bf 8f6f 	isb	sy
 800c862:	f3bf 8f4f 	dsb	sy
 800c866:	61fb      	str	r3, [r7, #28]
}
 800c868:	bf00      	nop
 800c86a:	bf00      	nop
 800c86c:	e7fd      	b.n	800c86a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c86e:	f7ff fc7b 	bl	800c168 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d302      	bcc.n	800c884 <xQueueGenericSend+0xdc>
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	2b02      	cmp	r3, #2
 800c882:	d129      	bne.n	800c8d8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c884:	683a      	ldr	r2, [r7, #0]
 800c886:	68b9      	ldr	r1, [r7, #8]
 800c888:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c88a:	f000 fb37 	bl	800cefc <prvCopyDataToQueue>
 800c88e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c894:	2b00      	cmp	r3, #0
 800c896:	d010      	beq.n	800c8ba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c898:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c89a:	3324      	adds	r3, #36	@ 0x24
 800c89c:	4618      	mov	r0, r3
 800c89e:	f001 f92d 	bl	800dafc <xTaskRemoveFromEventList>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d013      	beq.n	800c8d0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c8a8:	4b3f      	ldr	r3, [pc, #252]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c8aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8ae:	601a      	str	r2, [r3, #0]
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	f3bf 8f6f 	isb	sy
 800c8b8:	e00a      	b.n	800c8d0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d007      	beq.n	800c8d0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c8c0:	4b39      	ldr	r3, [pc, #228]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c8c6:	601a      	str	r2, [r3, #0]
 800c8c8:	f3bf 8f4f 	dsb	sy
 800c8cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c8d0:	f7ff fc7c 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 800c8d4:	2301      	movs	r3, #1
 800c8d6:	e063      	b.n	800c9a0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d103      	bne.n	800c8e6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c8de:	f7ff fc75 	bl	800c1cc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	e05c      	b.n	800c9a0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c8e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d106      	bne.n	800c8fa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c8ec:	f107 0314 	add.w	r3, r7, #20
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	f001 f967 	bl	800dbc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c8f6:	2301      	movs	r3, #1
 800c8f8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c8fa:	f7ff fc67 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c8fe:	f000 fecf 	bl	800d6a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c902:	f7ff fc31 	bl	800c168 <vPortEnterCritical>
 800c906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800c90c:	b25b      	sxtb	r3, r3
 800c90e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c912:	d103      	bne.n	800c91c <xQueueGenericSend+0x174>
 800c914:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c916:	2200      	movs	r2, #0
 800c918:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c91c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c91e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800c922:	b25b      	sxtb	r3, r3
 800c924:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c928:	d103      	bne.n	800c932 <xQueueGenericSend+0x18a>
 800c92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c92c:	2200      	movs	r2, #0
 800c92e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c932:	f7ff fc4b 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c936:	1d3a      	adds	r2, r7, #4
 800c938:	f107 0314 	add.w	r3, r7, #20
 800c93c:	4611      	mov	r1, r2
 800c93e:	4618      	mov	r0, r3
 800c940:	f001 f956 	bl	800dbf0 <xTaskCheckForTimeOut>
 800c944:	4603      	mov	r3, r0
 800c946:	2b00      	cmp	r3, #0
 800c948:	d124      	bne.n	800c994 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c94a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c94c:	f000 fbce 	bl	800d0ec <prvIsQueueFull>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	d018      	beq.n	800c988 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c958:	3310      	adds	r3, #16
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	4611      	mov	r1, r2
 800c95e:	4618      	mov	r0, r3
 800c960:	f001 f87a 	bl	800da58 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c966:	f000 fb59 	bl	800d01c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c96a:	f000 fea7 	bl	800d6bc <xTaskResumeAll>
 800c96e:	4603      	mov	r3, r0
 800c970:	2b00      	cmp	r3, #0
 800c972:	f47f af7c 	bne.w	800c86e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c976:	4b0c      	ldr	r3, [pc, #48]	@ (800c9a8 <xQueueGenericSend+0x200>)
 800c978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	f3bf 8f4f 	dsb	sy
 800c982:	f3bf 8f6f 	isb	sy
 800c986:	e772      	b.n	800c86e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c988:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c98a:	f000 fb47 	bl	800d01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c98e:	f000 fe95 	bl	800d6bc <xTaskResumeAll>
 800c992:	e76c      	b.n	800c86e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c994:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c996:	f000 fb41 	bl	800d01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c99a:	f000 fe8f 	bl	800d6bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c99e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3738      	adds	r7, #56	@ 0x38
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}
 800c9a8:	e000ed04 	.word	0xe000ed04

0800c9ac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b090      	sub	sp, #64	@ 0x40
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800c9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10b      	bne.n	800c9dc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800c9c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c8:	f383 8811 	msr	BASEPRI, r3
 800c9cc:	f3bf 8f6f 	isb	sy
 800c9d0:	f3bf 8f4f 	dsb	sy
 800c9d4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800c9d6:	bf00      	nop
 800c9d8:	bf00      	nop
 800c9da:	e7fd      	b.n	800c9d8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d103      	bne.n	800c9ea <xQueueGenericSendFromISR+0x3e>
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c9e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d101      	bne.n	800c9ee <xQueueGenericSendFromISR+0x42>
 800c9ea:	2301      	movs	r3, #1
 800c9ec:	e000      	b.n	800c9f0 <xQueueGenericSendFromISR+0x44>
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d10b      	bne.n	800ca0c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ca06:	bf00      	nop
 800ca08:	bf00      	nop
 800ca0a:	e7fd      	b.n	800ca08 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ca0c:	683b      	ldr	r3, [r7, #0]
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d103      	bne.n	800ca1a <xQueueGenericSendFromISR+0x6e>
 800ca12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d101      	bne.n	800ca1e <xQueueGenericSendFromISR+0x72>
 800ca1a:	2301      	movs	r3, #1
 800ca1c:	e000      	b.n	800ca20 <xQueueGenericSendFromISR+0x74>
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10b      	bne.n	800ca3c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	623b      	str	r3, [r7, #32]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ca3c:	f7ff fc74 	bl	800c328 <vPortValidateInterruptPriority>
	__asm volatile
 800ca40:	f3ef 8211 	mrs	r2, BASEPRI
 800ca44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca48:	f383 8811 	msr	BASEPRI, r3
 800ca4c:	f3bf 8f6f 	isb	sy
 800ca50:	f3bf 8f4f 	dsb	sy
 800ca54:	61fa      	str	r2, [r7, #28]
 800ca56:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ca58:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca5a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ca5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca5e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ca60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ca64:	429a      	cmp	r2, r3
 800ca66:	d302      	bcc.n	800ca6e <xQueueGenericSendFromISR+0xc2>
 800ca68:	683b      	ldr	r3, [r7, #0]
 800ca6a:	2b02      	cmp	r3, #2
 800ca6c:	d12f      	bne.n	800cace <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ca6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ca74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ca78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ca7e:	683a      	ldr	r2, [r7, #0]
 800ca80:	68b9      	ldr	r1, [r7, #8]
 800ca82:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ca84:	f000 fa3a 	bl	800cefc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ca88:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ca8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca90:	d112      	bne.n	800cab8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ca92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d016      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ca9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca9c:	3324      	adds	r3, #36	@ 0x24
 800ca9e:	4618      	mov	r0, r3
 800caa0:	f001 f82c 	bl	800dafc <xTaskRemoveFromEventList>
 800caa4:	4603      	mov	r3, r0
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d00e      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d00b      	beq.n	800cac8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2201      	movs	r2, #1
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	e007      	b.n	800cac8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800cab8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800cabc:	3301      	adds	r3, #1
 800cabe:	b2db      	uxtb	r3, r3
 800cac0:	b25a      	sxtb	r2, r3
 800cac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800cac8:	2301      	movs	r3, #1
 800caca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800cacc:	e001      	b.n	800cad2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800cad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cad4:	617b      	str	r3, [r7, #20]
	__asm volatile
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f383 8811 	msr	BASEPRI, r3
}
 800cadc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cade:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3740      	adds	r7, #64	@ 0x40
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}

0800cae8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b08c      	sub	sp, #48	@ 0x30
 800caec:	af00      	add	r7, sp, #0
 800caee:	60f8      	str	r0, [r7, #12]
 800caf0:	60b9      	str	r1, [r7, #8]
 800caf2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800caf4:	2300      	movs	r3, #0
 800caf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cafc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d10b      	bne.n	800cb1a <xQueueReceive+0x32>
	__asm volatile
 800cb02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb06:	f383 8811 	msr	BASEPRI, r3
 800cb0a:	f3bf 8f6f 	isb	sy
 800cb0e:	f3bf 8f4f 	dsb	sy
 800cb12:	623b      	str	r3, [r7, #32]
}
 800cb14:	bf00      	nop
 800cb16:	bf00      	nop
 800cb18:	e7fd      	b.n	800cb16 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d103      	bne.n	800cb28 <xQueueReceive+0x40>
 800cb20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d101      	bne.n	800cb2c <xQueueReceive+0x44>
 800cb28:	2301      	movs	r3, #1
 800cb2a:	e000      	b.n	800cb2e <xQueueReceive+0x46>
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d10b      	bne.n	800cb4a <xQueueReceive+0x62>
	__asm volatile
 800cb32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb36:	f383 8811 	msr	BASEPRI, r3
 800cb3a:	f3bf 8f6f 	isb	sy
 800cb3e:	f3bf 8f4f 	dsb	sy
 800cb42:	61fb      	str	r3, [r7, #28]
}
 800cb44:	bf00      	nop
 800cb46:	bf00      	nop
 800cb48:	e7fd      	b.n	800cb46 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cb4a:	f001 f9ad 	bl	800dea8 <xTaskGetSchedulerState>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d102      	bne.n	800cb5a <xQueueReceive+0x72>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <xQueueReceive+0x76>
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	e000      	b.n	800cb60 <xQueueReceive+0x78>
 800cb5e:	2300      	movs	r3, #0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d10b      	bne.n	800cb7c <xQueueReceive+0x94>
	__asm volatile
 800cb64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb68:	f383 8811 	msr	BASEPRI, r3
 800cb6c:	f3bf 8f6f 	isb	sy
 800cb70:	f3bf 8f4f 	dsb	sy
 800cb74:	61bb      	str	r3, [r7, #24]
}
 800cb76:	bf00      	nop
 800cb78:	bf00      	nop
 800cb7a:	e7fd      	b.n	800cb78 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cb7c:	f7ff faf4 	bl	800c168 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cb84:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01f      	beq.n	800cbcc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb8c:	68b9      	ldr	r1, [r7, #8]
 800cb8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb90:	f000 fa1e 	bl	800cfd0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb96:	1e5a      	subs	r2, r3, #1
 800cb98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb9e:	691b      	ldr	r3, [r3, #16]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d00f      	beq.n	800cbc4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba6:	3310      	adds	r3, #16
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f000 ffa7 	bl	800dafc <xTaskRemoveFromEventList>
 800cbae:	4603      	mov	r3, r0
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d007      	beq.n	800cbc4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cbb4:	4b3c      	ldr	r3, [pc, #240]	@ (800cca8 <xQueueReceive+0x1c0>)
 800cbb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbba:	601a      	str	r2, [r3, #0]
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cbc4:	f7ff fb02 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e069      	b.n	800cca0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d103      	bne.n	800cbda <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800cbd2:	f7ff fafb 	bl	800c1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	e062      	b.n	800cca0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cbda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d106      	bne.n	800cbee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cbe0:	f107 0310 	add.w	r3, r7, #16
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	f000 ffed 	bl	800dbc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cbea:	2301      	movs	r3, #1
 800cbec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cbee:	f7ff faed 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cbf2:	f000 fd55 	bl	800d6a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cbf6:	f7ff fab7 	bl	800c168 <vPortEnterCritical>
 800cbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cc00:	b25b      	sxtb	r3, r3
 800cc02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc06:	d103      	bne.n	800cc10 <xQueueReceive+0x128>
 800cc08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cc16:	b25b      	sxtb	r3, r3
 800cc18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc1c:	d103      	bne.n	800cc26 <xQueueReceive+0x13e>
 800cc1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc20:	2200      	movs	r2, #0
 800cc22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800cc26:	f7ff fad1 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cc2a:	1d3a      	adds	r2, r7, #4
 800cc2c:	f107 0310 	add.w	r3, r7, #16
 800cc30:	4611      	mov	r1, r2
 800cc32:	4618      	mov	r0, r3
 800cc34:	f000 ffdc 	bl	800dbf0 <xTaskCheckForTimeOut>
 800cc38:	4603      	mov	r3, r0
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d123      	bne.n	800cc86 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc3e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc40:	f000 fa3e 	bl	800d0c0 <prvIsQueueEmpty>
 800cc44:	4603      	mov	r3, r0
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d017      	beq.n	800cc7a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cc4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc4c:	3324      	adds	r3, #36	@ 0x24
 800cc4e:	687a      	ldr	r2, [r7, #4]
 800cc50:	4611      	mov	r1, r2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f000 ff00 	bl	800da58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cc58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc5a:	f000 f9df 	bl	800d01c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cc5e:	f000 fd2d 	bl	800d6bc <xTaskResumeAll>
 800cc62:	4603      	mov	r3, r0
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d189      	bne.n	800cb7c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800cc68:	4b0f      	ldr	r3, [pc, #60]	@ (800cca8 <xQueueReceive+0x1c0>)
 800cc6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	f3bf 8f4f 	dsb	sy
 800cc74:	f3bf 8f6f 	isb	sy
 800cc78:	e780      	b.n	800cb7c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800cc7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc7c:	f000 f9ce 	bl	800d01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cc80:	f000 fd1c 	bl	800d6bc <xTaskResumeAll>
 800cc84:	e77a      	b.n	800cb7c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800cc86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc88:	f000 f9c8 	bl	800d01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cc8c:	f000 fd16 	bl	800d6bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cc90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc92:	f000 fa15 	bl	800d0c0 <prvIsQueueEmpty>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f43f af6f 	beq.w	800cb7c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cc9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3730      	adds	r7, #48	@ 0x30
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	e000ed04 	.word	0xe000ed04

0800ccac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b08e      	sub	sp, #56	@ 0x38
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ccc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10b      	bne.n	800cce0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800ccc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cccc:	f383 8811 	msr	BASEPRI, r3
 800ccd0:	f3bf 8f6f 	isb	sy
 800ccd4:	f3bf 8f4f 	dsb	sy
 800ccd8:	623b      	str	r3, [r7, #32]
}
 800ccda:	bf00      	nop
 800ccdc:	bf00      	nop
 800ccde:	e7fd      	b.n	800ccdc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cce0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d00b      	beq.n	800cd00 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	61fb      	str	r3, [r7, #28]
}
 800ccfa:	bf00      	nop
 800ccfc:	bf00      	nop
 800ccfe:	e7fd      	b.n	800ccfc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cd00:	f001 f8d2 	bl	800dea8 <xTaskGetSchedulerState>
 800cd04:	4603      	mov	r3, r0
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d102      	bne.n	800cd10 <xQueueSemaphoreTake+0x64>
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <xQueueSemaphoreTake+0x68>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e000      	b.n	800cd16 <xQueueSemaphoreTake+0x6a>
 800cd14:	2300      	movs	r3, #0
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d10b      	bne.n	800cd32 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800cd1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd1e:	f383 8811 	msr	BASEPRI, r3
 800cd22:	f3bf 8f6f 	isb	sy
 800cd26:	f3bf 8f4f 	dsb	sy
 800cd2a:	61bb      	str	r3, [r7, #24]
}
 800cd2c:	bf00      	nop
 800cd2e:	bf00      	nop
 800cd30:	e7fd      	b.n	800cd2e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cd32:	f7ff fa19 	bl	800c168 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800cd36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd3a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800cd3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d024      	beq.n	800cd8c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800cd42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd44:	1e5a      	subs	r2, r3, #1
 800cd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd48:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cd4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d104      	bne.n	800cd5c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800cd52:	f001 fa23 	bl	800e19c <pvTaskIncrementMutexHeldCount>
 800cd56:	4602      	mov	r2, r0
 800cd58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd5e:	691b      	ldr	r3, [r3, #16]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00f      	beq.n	800cd84 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd66:	3310      	adds	r3, #16
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f000 fec7 	bl	800dafc <xTaskRemoveFromEventList>
 800cd6e:	4603      	mov	r3, r0
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d007      	beq.n	800cd84 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800cd74:	4b54      	ldr	r3, [pc, #336]	@ (800cec8 <xQueueSemaphoreTake+0x21c>)
 800cd76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cd7a:	601a      	str	r2, [r3, #0]
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cd84:	f7ff fa22 	bl	800c1cc <vPortExitCritical>
				return pdPASS;
 800cd88:	2301      	movs	r3, #1
 800cd8a:	e098      	b.n	800cebe <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d112      	bne.n	800cdb8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800cd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d00b      	beq.n	800cdb0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800cd98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd9c:	f383 8811 	msr	BASEPRI, r3
 800cda0:	f3bf 8f6f 	isb	sy
 800cda4:	f3bf 8f4f 	dsb	sy
 800cda8:	617b      	str	r3, [r7, #20]
}
 800cdaa:	bf00      	nop
 800cdac:	bf00      	nop
 800cdae:	e7fd      	b.n	800cdac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800cdb0:	f7ff fa0c 	bl	800c1cc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800cdb4:	2300      	movs	r3, #0
 800cdb6:	e082      	b.n	800cebe <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800cdb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cdbe:	f107 030c 	add.w	r3, r7, #12
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f000 fefe 	bl	800dbc4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cdcc:	f7ff f9fe 	bl	800c1cc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cdd0:	f000 fc66 	bl	800d6a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cdd4:	f7ff f9c8 	bl	800c168 <vPortEnterCritical>
 800cdd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800cdde:	b25b      	sxtb	r3, r3
 800cde0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cde4:	d103      	bne.n	800cdee <xQueueSemaphoreTake+0x142>
 800cde6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cde8:	2200      	movs	r2, #0
 800cdea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800cdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800cdf4:	b25b      	sxtb	r3, r3
 800cdf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdfa:	d103      	bne.n	800ce04 <xQueueSemaphoreTake+0x158>
 800cdfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ce04:	f7ff f9e2 	bl	800c1cc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ce08:	463a      	mov	r2, r7
 800ce0a:	f107 030c 	add.w	r3, r7, #12
 800ce0e:	4611      	mov	r1, r2
 800ce10:	4618      	mov	r0, r3
 800ce12:	f000 feed 	bl	800dbf0 <xTaskCheckForTimeOut>
 800ce16:	4603      	mov	r3, r0
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d132      	bne.n	800ce82 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce1e:	f000 f94f 	bl	800d0c0 <prvIsQueueEmpty>
 800ce22:	4603      	mov	r3, r0
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d026      	beq.n	800ce76 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d109      	bne.n	800ce44 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ce30:	f7ff f99a 	bl	800c168 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ce34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce36:	689b      	ldr	r3, [r3, #8]
 800ce38:	4618      	mov	r0, r3
 800ce3a:	f001 f853 	bl	800dee4 <xTaskPriorityInherit>
 800ce3e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ce40:	f7ff f9c4 	bl	800c1cc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ce44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ce46:	3324      	adds	r3, #36	@ 0x24
 800ce48:	683a      	ldr	r2, [r7, #0]
 800ce4a:	4611      	mov	r1, r2
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	f000 fe03 	bl	800da58 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ce52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce54:	f000 f8e2 	bl	800d01c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ce58:	f000 fc30 	bl	800d6bc <xTaskResumeAll>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f47f af67 	bne.w	800cd32 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ce64:	4b18      	ldr	r3, [pc, #96]	@ (800cec8 <xQueueSemaphoreTake+0x21c>)
 800ce66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce6a:	601a      	str	r2, [r3, #0]
 800ce6c:	f3bf 8f4f 	dsb	sy
 800ce70:	f3bf 8f6f 	isb	sy
 800ce74:	e75d      	b.n	800cd32 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ce76:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce78:	f000 f8d0 	bl	800d01c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ce7c:	f000 fc1e 	bl	800d6bc <xTaskResumeAll>
 800ce80:	e757      	b.n	800cd32 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ce82:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce84:	f000 f8ca 	bl	800d01c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ce88:	f000 fc18 	bl	800d6bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ce8c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ce8e:	f000 f917 	bl	800d0c0 <prvIsQueueEmpty>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	f43f af4c 	beq.w	800cd32 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ce9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d00d      	beq.n	800cebc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800cea0:	f7ff f962 	bl	800c168 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cea4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cea6:	f000 f811 	bl	800cecc <prvGetDisinheritPriorityAfterTimeout>
 800ceaa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ceac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ceae:	689b      	ldr	r3, [r3, #8]
 800ceb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f001 f8ee 	bl	800e094 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800ceb8:	f7ff f988 	bl	800c1cc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cebc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3738      	adds	r7, #56	@ 0x38
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	e000ed04 	.word	0xe000ed04

0800cecc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cecc:	b480      	push	{r7}
 800cece:	b085      	sub	sp, #20
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d006      	beq.n	800ceea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800cee6:	60fb      	str	r3, [r7, #12]
 800cee8:	e001      	b.n	800ceee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ceea:	2300      	movs	r3, #0
 800ceec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ceee:	68fb      	ldr	r3, [r7, #12]
	}
 800cef0:	4618      	mov	r0, r3
 800cef2:	3714      	adds	r7, #20
 800cef4:	46bd      	mov	sp, r7
 800cef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefa:	4770      	bx	lr

0800cefc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b086      	sub	sp, #24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cf10:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10d      	bne.n	800cf36 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d14d      	bne.n	800cfbe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	689b      	ldr	r3, [r3, #8]
 800cf26:	4618      	mov	r0, r3
 800cf28:	f001 f844 	bl	800dfb4 <xTaskPriorityDisinherit>
 800cf2c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2200      	movs	r2, #0
 800cf32:	609a      	str	r2, [r3, #8]
 800cf34:	e043      	b.n	800cfbe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d119      	bne.n	800cf70 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	6858      	ldr	r0, [r3, #4]
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf44:	461a      	mov	r2, r3
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	f001 ff73 	bl	800ee32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	685a      	ldr	r2, [r3, #4]
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf54:	441a      	add	r2, r3
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf5a:	68fb      	ldr	r3, [r7, #12]
 800cf5c:	685a      	ldr	r2, [r3, #4]
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d32b      	bcc.n	800cfbe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cf66:	68fb      	ldr	r3, [r7, #12]
 800cf68:	681a      	ldr	r2, [r3, #0]
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	605a      	str	r2, [r3, #4]
 800cf6e:	e026      	b.n	800cfbe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	68d8      	ldr	r0, [r3, #12]
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf78:	461a      	mov	r2, r3
 800cf7a:	68b9      	ldr	r1, [r7, #8]
 800cf7c:	f001 ff59 	bl	800ee32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	68da      	ldr	r2, [r3, #12]
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf88:	425b      	negs	r3, r3
 800cf8a:	441a      	add	r2, r3
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	68da      	ldr	r2, [r3, #12]
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	429a      	cmp	r2, r3
 800cf9a:	d207      	bcs.n	800cfac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	689a      	ldr	r2, [r3, #8]
 800cfa0:	68fb      	ldr	r3, [r7, #12]
 800cfa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfa4:	425b      	negs	r3, r3
 800cfa6:	441a      	add	r2, r3
 800cfa8:	68fb      	ldr	r3, [r7, #12]
 800cfaa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d105      	bne.n	800cfbe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	3b01      	subs	r3, #1
 800cfbc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cfbe:	693b      	ldr	r3, [r7, #16]
 800cfc0:	1c5a      	adds	r2, r3, #1
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800cfc6:	697b      	ldr	r3, [r7, #20]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3718      	adds	r7, #24
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}

0800cfd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
 800cfd8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d018      	beq.n	800d014 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	68da      	ldr	r2, [r3, #12]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cfea:	441a      	add	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	68da      	ldr	r2, [r3, #12]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	689b      	ldr	r3, [r3, #8]
 800cff8:	429a      	cmp	r2, r3
 800cffa:	d303      	bcc.n	800d004 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681a      	ldr	r2, [r3, #0]
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	68d9      	ldr	r1, [r3, #12]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d00c:	461a      	mov	r2, r3
 800d00e:	6838      	ldr	r0, [r7, #0]
 800d010:	f001 ff0f 	bl	800ee32 <memcpy>
	}
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d024:	f7ff f8a0 	bl	800c168 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d02e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d030:	e011      	b.n	800d056 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	2b00      	cmp	r3, #0
 800d038:	d012      	beq.n	800d060 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	3324      	adds	r3, #36	@ 0x24
 800d03e:	4618      	mov	r0, r3
 800d040:	f000 fd5c 	bl	800dafc <xTaskRemoveFromEventList>
 800d044:	4603      	mov	r3, r0
 800d046:	2b00      	cmp	r3, #0
 800d048:	d001      	beq.n	800d04e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d04a:	f000 fe35 	bl	800dcb8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
 800d050:	3b01      	subs	r3, #1
 800d052:	b2db      	uxtb	r3, r3
 800d054:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d056:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	dce9      	bgt.n	800d032 <prvUnlockQueue+0x16>
 800d05e:	e000      	b.n	800d062 <prvUnlockQueue+0x46>
					break;
 800d060:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	22ff      	movs	r2, #255	@ 0xff
 800d066:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800d06a:	f7ff f8af 	bl	800c1cc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d06e:	f7ff f87b 	bl	800c168 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d078:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d07a:	e011      	b.n	800d0a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	691b      	ldr	r3, [r3, #16]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d012      	beq.n	800d0aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	3310      	adds	r3, #16
 800d088:	4618      	mov	r0, r3
 800d08a:	f000 fd37 	bl	800dafc <xTaskRemoveFromEventList>
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d094:	f000 fe10 	bl	800dcb8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d098:	7bbb      	ldrb	r3, [r7, #14]
 800d09a:	3b01      	subs	r3, #1
 800d09c:	b2db      	uxtb	r3, r3
 800d09e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d0a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	dce9      	bgt.n	800d07c <prvUnlockQueue+0x60>
 800d0a8:	e000      	b.n	800d0ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d0aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	22ff      	movs	r2, #255	@ 0xff
 800d0b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800d0b4:	f7ff f88a 	bl	800c1cc <vPortExitCritical>
}
 800d0b8:	bf00      	nop
 800d0ba:	3710      	adds	r7, #16
 800d0bc:	46bd      	mov	sp, r7
 800d0be:	bd80      	pop	{r7, pc}

0800d0c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d0c0:	b580      	push	{r7, lr}
 800d0c2:	b084      	sub	sp, #16
 800d0c4:	af00      	add	r7, sp, #0
 800d0c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0c8:	f7ff f84e 	bl	800c168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d102      	bne.n	800d0da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]
 800d0d8:	e001      	b.n	800d0de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d0da:	2300      	movs	r3, #0
 800d0dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d0de:	f7ff f875 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d0f4:	f7ff f838 	bl	800c168 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d100:	429a      	cmp	r2, r3
 800d102:	d102      	bne.n	800d10a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d104:	2301      	movs	r3, #1
 800d106:	60fb      	str	r3, [r7, #12]
 800d108:	e001      	b.n	800d10e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d10a:	2300      	movs	r3, #0
 800d10c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d10e:	f7ff f85d 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800d112:	68fb      	ldr	r3, [r7, #12]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3710      	adds	r7, #16
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800d11c:	b480      	push	{r7}
 800d11e:	b085      	sub	sp, #20
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d126:	2300      	movs	r3, #0
 800d128:	60fb      	str	r3, [r7, #12]
 800d12a:	e014      	b.n	800d156 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d12c:	4a0f      	ldr	r2, [pc, #60]	@ (800d16c <vQueueAddToRegistry+0x50>)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d10b      	bne.n	800d150 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d138:	490c      	ldr	r1, [pc, #48]	@ (800d16c <vQueueAddToRegistry+0x50>)
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	683a      	ldr	r2, [r7, #0]
 800d13e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d142:	4a0a      	ldr	r2, [pc, #40]	@ (800d16c <vQueueAddToRegistry+0x50>)
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	00db      	lsls	r3, r3, #3
 800d148:	4413      	add	r3, r2
 800d14a:	687a      	ldr	r2, [r7, #4]
 800d14c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800d14e:	e006      	b.n	800d15e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	3301      	adds	r3, #1
 800d154:	60fb      	str	r3, [r7, #12]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b07      	cmp	r3, #7
 800d15a:	d9e7      	bls.n	800d12c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d15c:	bf00      	nop
 800d15e:	bf00      	nop
 800d160:	3714      	adds	r7, #20
 800d162:	46bd      	mov	sp, r7
 800d164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d168:	4770      	bx	lr
 800d16a:	bf00      	nop
 800d16c:	2400491c 	.word	0x2400491c

0800d170 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800d180:	f7fe fff2 	bl	800c168 <vPortEnterCritical>
 800d184:	697b      	ldr	r3, [r7, #20]
 800d186:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d18a:	b25b      	sxtb	r3, r3
 800d18c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d190:	d103      	bne.n	800d19a <vQueueWaitForMessageRestricted+0x2a>
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2200      	movs	r2, #0
 800d196:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d19a:	697b      	ldr	r3, [r7, #20]
 800d19c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1a6:	d103      	bne.n	800d1b0 <vQueueWaitForMessageRestricted+0x40>
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	2200      	movs	r2, #0
 800d1ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d1b0:	f7ff f80c 	bl	800c1cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800d1b4:	697b      	ldr	r3, [r7, #20]
 800d1b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d106      	bne.n	800d1ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	3324      	adds	r3, #36	@ 0x24
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	68b9      	ldr	r1, [r7, #8]
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f000 fc6d 	bl	800daa4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800d1ca:	6978      	ldr	r0, [r7, #20]
 800d1cc:	f7ff ff26 	bl	800d01c <prvUnlockQueue>
	}
 800d1d0:	bf00      	nop
 800d1d2:	3718      	adds	r7, #24
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b08e      	sub	sp, #56	@ 0x38
 800d1dc:	af04      	add	r7, sp, #16
 800d1de:	60f8      	str	r0, [r7, #12]
 800d1e0:	60b9      	str	r1, [r7, #8]
 800d1e2:	607a      	str	r2, [r7, #4]
 800d1e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d1e8:	2b00      	cmp	r3, #0
 800d1ea:	d10b      	bne.n	800d204 <xTaskCreateStatic+0x2c>
	__asm volatile
 800d1ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f0:	f383 8811 	msr	BASEPRI, r3
 800d1f4:	f3bf 8f6f 	isb	sy
 800d1f8:	f3bf 8f4f 	dsb	sy
 800d1fc:	623b      	str	r3, [r7, #32]
}
 800d1fe:	bf00      	nop
 800d200:	bf00      	nop
 800d202:	e7fd      	b.n	800d200 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800d204:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d206:	2b00      	cmp	r3, #0
 800d208:	d10b      	bne.n	800d222 <xTaskCreateStatic+0x4a>
	__asm volatile
 800d20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d20e:	f383 8811 	msr	BASEPRI, r3
 800d212:	f3bf 8f6f 	isb	sy
 800d216:	f3bf 8f4f 	dsb	sy
 800d21a:	61fb      	str	r3, [r7, #28]
}
 800d21c:	bf00      	nop
 800d21e:	bf00      	nop
 800d220:	e7fd      	b.n	800d21e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d222:	23a8      	movs	r3, #168	@ 0xa8
 800d224:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	2ba8      	cmp	r3, #168	@ 0xa8
 800d22a:	d00b      	beq.n	800d244 <xTaskCreateStatic+0x6c>
	__asm volatile
 800d22c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d230:	f383 8811 	msr	BASEPRI, r3
 800d234:	f3bf 8f6f 	isb	sy
 800d238:	f3bf 8f4f 	dsb	sy
 800d23c:	61bb      	str	r3, [r7, #24]
}
 800d23e:	bf00      	nop
 800d240:	bf00      	nop
 800d242:	e7fd      	b.n	800d240 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d244:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d246:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d01e      	beq.n	800d28a <xTaskCreateStatic+0xb2>
 800d24c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d01b      	beq.n	800d28a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d254:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d258:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d25a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d25e:	2202      	movs	r2, #2
 800d260:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d264:	2300      	movs	r3, #0
 800d266:	9303      	str	r3, [sp, #12]
 800d268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d26a:	9302      	str	r3, [sp, #8]
 800d26c:	f107 0314 	add.w	r3, r7, #20
 800d270:	9301      	str	r3, [sp, #4]
 800d272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d274:	9300      	str	r3, [sp, #0]
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	687a      	ldr	r2, [r7, #4]
 800d27a:	68b9      	ldr	r1, [r7, #8]
 800d27c:	68f8      	ldr	r0, [r7, #12]
 800d27e:	f000 f851 	bl	800d324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d282:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800d284:	f000 f8f6 	bl	800d474 <prvAddNewTaskToReadyList>
 800d288:	e001      	b.n	800d28e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d28e:	697b      	ldr	r3, [r7, #20]
	}
 800d290:	4618      	mov	r0, r3
 800d292:	3728      	adds	r7, #40	@ 0x28
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b08c      	sub	sp, #48	@ 0x30
 800d29c:	af04      	add	r7, sp, #16
 800d29e:	60f8      	str	r0, [r7, #12]
 800d2a0:	60b9      	str	r1, [r7, #8]
 800d2a2:	603b      	str	r3, [r7, #0]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2a8:	88fb      	ldrh	r3, [r7, #6]
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4618      	mov	r0, r3
 800d2ae:	f7fe fb85 	bl	800b9bc <pvPortMalloc>
 800d2b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d00e      	beq.n	800d2d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2ba:	20a8      	movs	r0, #168	@ 0xa8
 800d2bc:	f7fe fb7e 	bl	800b9bc <pvPortMalloc>
 800d2c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d003      	beq.n	800d2d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2c8:	69fb      	ldr	r3, [r7, #28]
 800d2ca:	697a      	ldr	r2, [r7, #20]
 800d2cc:	631a      	str	r2, [r3, #48]	@ 0x30
 800d2ce:	e005      	b.n	800d2dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2d0:	6978      	ldr	r0, [r7, #20]
 800d2d2:	f7fe fc41 	bl	800bb58 <vPortFree>
 800d2d6:	e001      	b.n	800d2dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2d8:	2300      	movs	r3, #0
 800d2da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d017      	beq.n	800d312 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d2ea:	88fa      	ldrh	r2, [r7, #6]
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9303      	str	r3, [sp, #12]
 800d2f0:	69fb      	ldr	r3, [r7, #28]
 800d2f2:	9302      	str	r3, [sp, #8]
 800d2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f6:	9301      	str	r3, [sp, #4]
 800d2f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d2fa:	9300      	str	r3, [sp, #0]
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	68b9      	ldr	r1, [r7, #8]
 800d300:	68f8      	ldr	r0, [r7, #12]
 800d302:	f000 f80f 	bl	800d324 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d306:	69f8      	ldr	r0, [r7, #28]
 800d308:	f000 f8b4 	bl	800d474 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d30c:	2301      	movs	r3, #1
 800d30e:	61bb      	str	r3, [r7, #24]
 800d310:	e002      	b.n	800d318 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d312:	f04f 33ff 	mov.w	r3, #4294967295
 800d316:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d318:	69bb      	ldr	r3, [r7, #24]
	}
 800d31a:	4618      	mov	r0, r3
 800d31c:	3720      	adds	r7, #32
 800d31e:	46bd      	mov	sp, r7
 800d320:	bd80      	pop	{r7, pc}
	...

0800d324 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b088      	sub	sp, #32
 800d328:	af00      	add	r7, sp, #0
 800d32a:	60f8      	str	r0, [r7, #12]
 800d32c:	60b9      	str	r1, [r7, #8]
 800d32e:	607a      	str	r2, [r7, #4]
 800d330:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d334:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	009b      	lsls	r3, r3, #2
 800d33a:	461a      	mov	r2, r3
 800d33c:	21a5      	movs	r1, #165	@ 0xa5
 800d33e:	f001 fc14 	bl	800eb6a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d344:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d346:	6879      	ldr	r1, [r7, #4]
 800d348:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 800d34c:	440b      	add	r3, r1
 800d34e:	009b      	lsls	r3, r3, #2
 800d350:	4413      	add	r3, r2
 800d352:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d354:	69bb      	ldr	r3, [r7, #24]
 800d356:	f023 0307 	bic.w	r3, r3, #7
 800d35a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d35c:	69bb      	ldr	r3, [r7, #24]
 800d35e:	f003 0307 	and.w	r3, r3, #7
 800d362:	2b00      	cmp	r3, #0
 800d364:	d00b      	beq.n	800d37e <prvInitialiseNewTask+0x5a>
	__asm volatile
 800d366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d36a:	f383 8811 	msr	BASEPRI, r3
 800d36e:	f3bf 8f6f 	isb	sy
 800d372:	f3bf 8f4f 	dsb	sy
 800d376:	617b      	str	r3, [r7, #20]
}
 800d378:	bf00      	nop
 800d37a:	bf00      	nop
 800d37c:	e7fd      	b.n	800d37a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d37e:	68bb      	ldr	r3, [r7, #8]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d01f      	beq.n	800d3c4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d384:	2300      	movs	r3, #0
 800d386:	61fb      	str	r3, [r7, #28]
 800d388:	e012      	b.n	800d3b0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d38a:	68ba      	ldr	r2, [r7, #8]
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	4413      	add	r3, r2
 800d390:	7819      	ldrb	r1, [r3, #0]
 800d392:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d394:	69fb      	ldr	r3, [r7, #28]
 800d396:	4413      	add	r3, r2
 800d398:	3334      	adds	r3, #52	@ 0x34
 800d39a:	460a      	mov	r2, r1
 800d39c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d39e:	68ba      	ldr	r2, [r7, #8]
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	4413      	add	r3, r2
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d006      	beq.n	800d3b8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	3301      	adds	r3, #1
 800d3ae:	61fb      	str	r3, [r7, #28]
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	2b0f      	cmp	r3, #15
 800d3b4:	d9e9      	bls.n	800d38a <prvInitialiseNewTask+0x66>
 800d3b6:	e000      	b.n	800d3ba <prvInitialiseNewTask+0x96>
			{
				break;
 800d3b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3bc:	2200      	movs	r2, #0
 800d3be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800d3c2:	e003      	b.n	800d3cc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3ce:	2b37      	cmp	r3, #55	@ 0x37
 800d3d0:	d901      	bls.n	800d3d6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3d2:	2337      	movs	r3, #55	@ 0x37
 800d3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d3e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d3e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3ea:	3304      	adds	r3, #4
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	f7fe fcf3 	bl	800bdd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3f4:	3318      	adds	r3, #24
 800d3f6:	4618      	mov	r0, r3
 800d3f8:	f7fe fcee 	bl	800bdd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d3fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d400:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d404:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800d408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d40e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d410:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d414:	2200      	movs	r2, #0
 800d416:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800d422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d424:	3354      	adds	r3, #84	@ 0x54
 800d426:	224c      	movs	r2, #76	@ 0x4c
 800d428:	2100      	movs	r1, #0
 800d42a:	4618      	mov	r0, r3
 800d42c:	f001 fb9d 	bl	800eb6a <memset>
 800d430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d432:	4a0d      	ldr	r2, [pc, #52]	@ (800d468 <prvInitialiseNewTask+0x144>)
 800d434:	659a      	str	r2, [r3, #88]	@ 0x58
 800d436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d438:	4a0c      	ldr	r2, [pc, #48]	@ (800d46c <prvInitialiseNewTask+0x148>)
 800d43a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800d43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d43e:	4a0c      	ldr	r2, [pc, #48]	@ (800d470 <prvInitialiseNewTask+0x14c>)
 800d440:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	68f9      	ldr	r1, [r7, #12]
 800d446:	69b8      	ldr	r0, [r7, #24]
 800d448:	f7fe fd5a 	bl	800bf00 <pxPortInitialiseStack>
 800d44c:	4602      	mov	r2, r0
 800d44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d450:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d45a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d45c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d45e:	bf00      	nop
 800d460:	3720      	adds	r7, #32
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	24004f88 	.word	0x24004f88
 800d46c:	24004ff0 	.word	0x24004ff0
 800d470:	24005058 	.word	0x24005058

0800d474 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d47c:	f7fe fe74 	bl	800c168 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d480:	4b2d      	ldr	r3, [pc, #180]	@ (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3301      	adds	r3, #1
 800d486:	4a2c      	ldr	r2, [pc, #176]	@ (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d488:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d48a:	4b2c      	ldr	r3, [pc, #176]	@ (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d109      	bne.n	800d4a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d492:	4a2a      	ldr	r2, [pc, #168]	@ (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d498:	4b27      	ldr	r3, [pc, #156]	@ (800d538 <prvAddNewTaskToReadyList+0xc4>)
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	2b01      	cmp	r3, #1
 800d49e:	d110      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d4a0:	f000 fc2e 	bl	800dd00 <prvInitialiseTaskLists>
 800d4a4:	e00d      	b.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d4a6:	4b26      	ldr	r3, [pc, #152]	@ (800d540 <prvAddNewTaskToReadyList+0xcc>)
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d109      	bne.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4ae:	4b23      	ldr	r3, [pc, #140]	@ (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4b8:	429a      	cmp	r2, r3
 800d4ba:	d802      	bhi.n	800d4c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4bc:	4a1f      	ldr	r2, [pc, #124]	@ (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4c2:	4b20      	ldr	r3, [pc, #128]	@ (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	4a1e      	ldr	r2, [pc, #120]	@ (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800d4cc:	4b1d      	ldr	r3, [pc, #116]	@ (800d544 <prvAddNewTaskToReadyList+0xd0>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4d8:	4b1b      	ldr	r3, [pc, #108]	@ (800d548 <prvAddNewTaskToReadyList+0xd4>)
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d903      	bls.n	800d4e8 <prvAddNewTaskToReadyList+0x74>
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e4:	4a18      	ldr	r2, [pc, #96]	@ (800d548 <prvAddNewTaskToReadyList+0xd4>)
 800d4e6:	6013      	str	r3, [r2, #0]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4ec:	4613      	mov	r3, r2
 800d4ee:	009b      	lsls	r3, r3, #2
 800d4f0:	4413      	add	r3, r2
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4a15      	ldr	r2, [pc, #84]	@ (800d54c <prvAddNewTaskToReadyList+0xd8>)
 800d4f6:	441a      	add	r2, r3
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	3304      	adds	r3, #4
 800d4fc:	4619      	mov	r1, r3
 800d4fe:	4610      	mov	r0, r2
 800d500:	f7fe fc77 	bl	800bdf2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d504:	f7fe fe62 	bl	800c1cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d508:	4b0d      	ldr	r3, [pc, #52]	@ (800d540 <prvAddNewTaskToReadyList+0xcc>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d00e      	beq.n	800d52e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d510:	4b0a      	ldr	r3, [pc, #40]	@ (800d53c <prvAddNewTaskToReadyList+0xc8>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d51a:	429a      	cmp	r2, r3
 800d51c:	d207      	bcs.n	800d52e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d51e:	4b0c      	ldr	r3, [pc, #48]	@ (800d550 <prvAddNewTaskToReadyList+0xdc>)
 800d520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d524:	601a      	str	r2, [r3, #0]
 800d526:	f3bf 8f4f 	dsb	sy
 800d52a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d52e:	bf00      	nop
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	24004e30 	.word	0x24004e30
 800d53c:	2400495c 	.word	0x2400495c
 800d540:	24004e3c 	.word	0x24004e3c
 800d544:	24004e4c 	.word	0x24004e4c
 800d548:	24004e38 	.word	0x24004e38
 800d54c:	24004960 	.word	0x24004960
 800d550:	e000ed04 	.word	0xe000ed04

0800d554 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d55c:	2300      	movs	r3, #0
 800d55e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	2b00      	cmp	r3, #0
 800d564:	d018      	beq.n	800d598 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d566:	4b14      	ldr	r3, [pc, #80]	@ (800d5b8 <vTaskDelay+0x64>)
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d00b      	beq.n	800d586 <vTaskDelay+0x32>
	__asm volatile
 800d56e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d572:	f383 8811 	msr	BASEPRI, r3
 800d576:	f3bf 8f6f 	isb	sy
 800d57a:	f3bf 8f4f 	dsb	sy
 800d57e:	60bb      	str	r3, [r7, #8]
}
 800d580:	bf00      	nop
 800d582:	bf00      	nop
 800d584:	e7fd      	b.n	800d582 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d586:	f000 f88b 	bl	800d6a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d58a:	2100      	movs	r1, #0
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f000 fe19 	bl	800e1c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d592:	f000 f893 	bl	800d6bc <xTaskResumeAll>
 800d596:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d107      	bne.n	800d5ae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800d59e:	4b07      	ldr	r3, [pc, #28]	@ (800d5bc <vTaskDelay+0x68>)
 800d5a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d5a4:	601a      	str	r2, [r3, #0]
 800d5a6:	f3bf 8f4f 	dsb	sy
 800d5aa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d5ae:	bf00      	nop
 800d5b0:	3710      	adds	r7, #16
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}
 800d5b6:	bf00      	nop
 800d5b8:	24004e58 	.word	0x24004e58
 800d5bc:	e000ed04 	.word	0xe000ed04

0800d5c0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d5c0:	b580      	push	{r7, lr}
 800d5c2:	b08a      	sub	sp, #40	@ 0x28
 800d5c4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d5c6:	2300      	movs	r3, #0
 800d5c8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d5ca:	2300      	movs	r3, #0
 800d5cc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d5ce:	463a      	mov	r2, r7
 800d5d0:	1d39      	adds	r1, r7, #4
 800d5d2:	f107 0308 	add.w	r3, r7, #8
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	f7fe f9bc 	bl	800b954 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d5dc:	6839      	ldr	r1, [r7, #0]
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	68ba      	ldr	r2, [r7, #8]
 800d5e2:	9202      	str	r2, [sp, #8]
 800d5e4:	9301      	str	r3, [sp, #4]
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	9300      	str	r3, [sp, #0]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	460a      	mov	r2, r1
 800d5ee:	4924      	ldr	r1, [pc, #144]	@ (800d680 <vTaskStartScheduler+0xc0>)
 800d5f0:	4824      	ldr	r0, [pc, #144]	@ (800d684 <vTaskStartScheduler+0xc4>)
 800d5f2:	f7ff fdf1 	bl	800d1d8 <xTaskCreateStatic>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4a23      	ldr	r2, [pc, #140]	@ (800d688 <vTaskStartScheduler+0xc8>)
 800d5fa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d5fc:	4b22      	ldr	r3, [pc, #136]	@ (800d688 <vTaskStartScheduler+0xc8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d002      	beq.n	800d60a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d604:	2301      	movs	r3, #1
 800d606:	617b      	str	r3, [r7, #20]
 800d608:	e001      	b.n	800d60e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d60a:	2300      	movs	r3, #0
 800d60c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d102      	bne.n	800d61a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800d614:	f000 fe2a 	bl	800e26c <xTimerCreateTimerTask>
 800d618:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d11b      	bne.n	800d658 <vTaskStartScheduler+0x98>
	__asm volatile
 800d620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d624:	f383 8811 	msr	BASEPRI, r3
 800d628:	f3bf 8f6f 	isb	sy
 800d62c:	f3bf 8f4f 	dsb	sy
 800d630:	613b      	str	r3, [r7, #16]
}
 800d632:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d634:	4b15      	ldr	r3, [pc, #84]	@ (800d68c <vTaskStartScheduler+0xcc>)
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	3354      	adds	r3, #84	@ 0x54
 800d63a:	4a15      	ldr	r2, [pc, #84]	@ (800d690 <vTaskStartScheduler+0xd0>)
 800d63c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d63e:	4b15      	ldr	r3, [pc, #84]	@ (800d694 <vTaskStartScheduler+0xd4>)
 800d640:	f04f 32ff 	mov.w	r2, #4294967295
 800d644:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d646:	4b14      	ldr	r3, [pc, #80]	@ (800d698 <vTaskStartScheduler+0xd8>)
 800d648:	2201      	movs	r2, #1
 800d64a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d64c:	4b13      	ldr	r3, [pc, #76]	@ (800d69c <vTaskStartScheduler+0xdc>)
 800d64e:	2200      	movs	r2, #0
 800d650:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d652:	f7fe fce5 	bl	800c020 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d656:	e00f      	b.n	800d678 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d658:	697b      	ldr	r3, [r7, #20]
 800d65a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d65e:	d10b      	bne.n	800d678 <vTaskStartScheduler+0xb8>
	__asm volatile
 800d660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	60fb      	str	r3, [r7, #12]
}
 800d672:	bf00      	nop
 800d674:	bf00      	nop
 800d676:	e7fd      	b.n	800d674 <vTaskStartScheduler+0xb4>
}
 800d678:	bf00      	nop
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}
 800d680:	08010070 	.word	0x08010070
 800d684:	0800dcd1 	.word	0x0800dcd1
 800d688:	24004e54 	.word	0x24004e54
 800d68c:	2400495c 	.word	0x2400495c
 800d690:	24000038 	.word	0x24000038
 800d694:	24004e50 	.word	0x24004e50
 800d698:	24004e3c 	.word	0x24004e3c
 800d69c:	24004e34 	.word	0x24004e34

0800d6a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d6a0:	b480      	push	{r7}
 800d6a2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d6a4:	4b04      	ldr	r3, [pc, #16]	@ (800d6b8 <vTaskSuspendAll+0x18>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	4a03      	ldr	r2, [pc, #12]	@ (800d6b8 <vTaskSuspendAll+0x18>)
 800d6ac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d6ae:	bf00      	nop
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr
 800d6b8:	24004e58 	.word	0x24004e58

0800d6bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d6ca:	4b42      	ldr	r3, [pc, #264]	@ (800d7d4 <xTaskResumeAll+0x118>)
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d10b      	bne.n	800d6ea <xTaskResumeAll+0x2e>
	__asm volatile
 800d6d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d6:	f383 8811 	msr	BASEPRI, r3
 800d6da:	f3bf 8f6f 	isb	sy
 800d6de:	f3bf 8f4f 	dsb	sy
 800d6e2:	603b      	str	r3, [r7, #0]
}
 800d6e4:	bf00      	nop
 800d6e6:	bf00      	nop
 800d6e8:	e7fd      	b.n	800d6e6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d6ea:	f7fe fd3d 	bl	800c168 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d6ee:	4b39      	ldr	r3, [pc, #228]	@ (800d7d4 <xTaskResumeAll+0x118>)
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	3b01      	subs	r3, #1
 800d6f4:	4a37      	ldr	r2, [pc, #220]	@ (800d7d4 <xTaskResumeAll+0x118>)
 800d6f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d6f8:	4b36      	ldr	r3, [pc, #216]	@ (800d7d4 <xTaskResumeAll+0x118>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d162      	bne.n	800d7c6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d700:	4b35      	ldr	r3, [pc, #212]	@ (800d7d8 <xTaskResumeAll+0x11c>)
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	2b00      	cmp	r3, #0
 800d706:	d05e      	beq.n	800d7c6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d708:	e02f      	b.n	800d76a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d70a:	4b34      	ldr	r3, [pc, #208]	@ (800d7dc <xTaskResumeAll+0x120>)
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	68db      	ldr	r3, [r3, #12]
 800d710:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3318      	adds	r3, #24
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fbc8 	bl	800beac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3304      	adds	r3, #4
 800d720:	4618      	mov	r0, r3
 800d722:	f7fe fbc3 	bl	800beac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d72a:	4b2d      	ldr	r3, [pc, #180]	@ (800d7e0 <xTaskResumeAll+0x124>)
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	429a      	cmp	r2, r3
 800d730:	d903      	bls.n	800d73a <xTaskResumeAll+0x7e>
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d736:	4a2a      	ldr	r2, [pc, #168]	@ (800d7e0 <xTaskResumeAll+0x124>)
 800d738:	6013      	str	r3, [r2, #0]
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d73e:	4613      	mov	r3, r2
 800d740:	009b      	lsls	r3, r3, #2
 800d742:	4413      	add	r3, r2
 800d744:	009b      	lsls	r3, r3, #2
 800d746:	4a27      	ldr	r2, [pc, #156]	@ (800d7e4 <xTaskResumeAll+0x128>)
 800d748:	441a      	add	r2, r3
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	3304      	adds	r3, #4
 800d74e:	4619      	mov	r1, r3
 800d750:	4610      	mov	r0, r2
 800d752:	f7fe fb4e 	bl	800bdf2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d75a:	4b23      	ldr	r3, [pc, #140]	@ (800d7e8 <xTaskResumeAll+0x12c>)
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d760:	429a      	cmp	r2, r3
 800d762:	d302      	bcc.n	800d76a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d764:	4b21      	ldr	r3, [pc, #132]	@ (800d7ec <xTaskResumeAll+0x130>)
 800d766:	2201      	movs	r2, #1
 800d768:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d76a:	4b1c      	ldr	r3, [pc, #112]	@ (800d7dc <xTaskResumeAll+0x120>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1cb      	bne.n	800d70a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d001      	beq.n	800d77c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d778:	f000 fb66 	bl	800de48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d77c:	4b1c      	ldr	r3, [pc, #112]	@ (800d7f0 <xTaskResumeAll+0x134>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d010      	beq.n	800d7aa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d788:	f000 f846 	bl	800d818 <xTaskIncrementTick>
 800d78c:	4603      	mov	r3, r0
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d002      	beq.n	800d798 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d792:	4b16      	ldr	r3, [pc, #88]	@ (800d7ec <xTaskResumeAll+0x130>)
 800d794:	2201      	movs	r2, #1
 800d796:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	3b01      	subs	r3, #1
 800d79c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1f1      	bne.n	800d788 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800d7a4:	4b12      	ldr	r3, [pc, #72]	@ (800d7f0 <xTaskResumeAll+0x134>)
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d7aa:	4b10      	ldr	r3, [pc, #64]	@ (800d7ec <xTaskResumeAll+0x130>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d009      	beq.n	800d7c6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d7b2:	2301      	movs	r3, #1
 800d7b4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800d7f4 <xTaskResumeAll+0x138>)
 800d7b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7bc:	601a      	str	r2, [r3, #0]
 800d7be:	f3bf 8f4f 	dsb	sy
 800d7c2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d7c6:	f7fe fd01 	bl	800c1cc <vPortExitCritical>

	return xAlreadyYielded;
 800d7ca:	68bb      	ldr	r3, [r7, #8]
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3710      	adds	r7, #16
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	24004e58 	.word	0x24004e58
 800d7d8:	24004e30 	.word	0x24004e30
 800d7dc:	24004df0 	.word	0x24004df0
 800d7e0:	24004e38 	.word	0x24004e38
 800d7e4:	24004960 	.word	0x24004960
 800d7e8:	2400495c 	.word	0x2400495c
 800d7ec:	24004e44 	.word	0x24004e44
 800d7f0:	24004e40 	.word	0x24004e40
 800d7f4:	e000ed04 	.word	0xe000ed04

0800d7f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b083      	sub	sp, #12
 800d7fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d7fe:	4b05      	ldr	r3, [pc, #20]	@ (800d814 <xTaskGetTickCount+0x1c>)
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d804:	687b      	ldr	r3, [r7, #4]
}
 800d806:	4618      	mov	r0, r3
 800d808:	370c      	adds	r7, #12
 800d80a:	46bd      	mov	sp, r7
 800d80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d810:	4770      	bx	lr
 800d812:	bf00      	nop
 800d814:	24004e34 	.word	0x24004e34

0800d818 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b086      	sub	sp, #24
 800d81c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d81e:	2300      	movs	r3, #0
 800d820:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d822:	4b4f      	ldr	r3, [pc, #316]	@ (800d960 <xTaskIncrementTick+0x148>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	2b00      	cmp	r3, #0
 800d828:	f040 8090 	bne.w	800d94c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d82c:	4b4d      	ldr	r3, [pc, #308]	@ (800d964 <xTaskIncrementTick+0x14c>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	3301      	adds	r3, #1
 800d832:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d834:	4a4b      	ldr	r2, [pc, #300]	@ (800d964 <xTaskIncrementTick+0x14c>)
 800d836:	693b      	ldr	r3, [r7, #16]
 800d838:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d121      	bne.n	800d884 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800d840:	4b49      	ldr	r3, [pc, #292]	@ (800d968 <xTaskIncrementTick+0x150>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00b      	beq.n	800d862 <xTaskIncrementTick+0x4a>
	__asm volatile
 800d84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d84e:	f383 8811 	msr	BASEPRI, r3
 800d852:	f3bf 8f6f 	isb	sy
 800d856:	f3bf 8f4f 	dsb	sy
 800d85a:	603b      	str	r3, [r7, #0]
}
 800d85c:	bf00      	nop
 800d85e:	bf00      	nop
 800d860:	e7fd      	b.n	800d85e <xTaskIncrementTick+0x46>
 800d862:	4b41      	ldr	r3, [pc, #260]	@ (800d968 <xTaskIncrementTick+0x150>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	60fb      	str	r3, [r7, #12]
 800d868:	4b40      	ldr	r3, [pc, #256]	@ (800d96c <xTaskIncrementTick+0x154>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	4a3e      	ldr	r2, [pc, #248]	@ (800d968 <xTaskIncrementTick+0x150>)
 800d86e:	6013      	str	r3, [r2, #0]
 800d870:	4a3e      	ldr	r2, [pc, #248]	@ (800d96c <xTaskIncrementTick+0x154>)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	6013      	str	r3, [r2, #0]
 800d876:	4b3e      	ldr	r3, [pc, #248]	@ (800d970 <xTaskIncrementTick+0x158>)
 800d878:	681b      	ldr	r3, [r3, #0]
 800d87a:	3301      	adds	r3, #1
 800d87c:	4a3c      	ldr	r2, [pc, #240]	@ (800d970 <xTaskIncrementTick+0x158>)
 800d87e:	6013      	str	r3, [r2, #0]
 800d880:	f000 fae2 	bl	800de48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d884:	4b3b      	ldr	r3, [pc, #236]	@ (800d974 <xTaskIncrementTick+0x15c>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	693a      	ldr	r2, [r7, #16]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d349      	bcc.n	800d922 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d88e:	4b36      	ldr	r3, [pc, #216]	@ (800d968 <xTaskIncrementTick+0x150>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d104      	bne.n	800d8a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d898:	4b36      	ldr	r3, [pc, #216]	@ (800d974 <xTaskIncrementTick+0x15c>)
 800d89a:	f04f 32ff 	mov.w	r2, #4294967295
 800d89e:	601a      	str	r2, [r3, #0]
					break;
 800d8a0:	e03f      	b.n	800d922 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a2:	4b31      	ldr	r3, [pc, #196]	@ (800d968 <xTaskIncrementTick+0x150>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	68db      	ldr	r3, [r3, #12]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d8b2:	693a      	ldr	r2, [r7, #16]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	429a      	cmp	r2, r3
 800d8b8:	d203      	bcs.n	800d8c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d8ba:	4a2e      	ldr	r2, [pc, #184]	@ (800d974 <xTaskIncrementTick+0x15c>)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d8c0:	e02f      	b.n	800d922 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe faf0 	bl	800beac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d004      	beq.n	800d8de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d8d4:	68bb      	ldr	r3, [r7, #8]
 800d8d6:	3318      	adds	r3, #24
 800d8d8:	4618      	mov	r0, r3
 800d8da:	f7fe fae7 	bl	800beac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e2:	4b25      	ldr	r3, [pc, #148]	@ (800d978 <xTaskIncrementTick+0x160>)
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	429a      	cmp	r2, r3
 800d8e8:	d903      	bls.n	800d8f2 <xTaskIncrementTick+0xda>
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d8ee:	4a22      	ldr	r2, [pc, #136]	@ (800d978 <xTaskIncrementTick+0x160>)
 800d8f0:	6013      	str	r3, [r2, #0]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8f6:	4613      	mov	r3, r2
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800d97c <xTaskIncrementTick+0x164>)
 800d900:	441a      	add	r2, r3
 800d902:	68bb      	ldr	r3, [r7, #8]
 800d904:	3304      	adds	r3, #4
 800d906:	4619      	mov	r1, r3
 800d908:	4610      	mov	r0, r2
 800d90a:	f7fe fa72 	bl	800bdf2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d90e:	68bb      	ldr	r3, [r7, #8]
 800d910:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d912:	4b1b      	ldr	r3, [pc, #108]	@ (800d980 <xTaskIncrementTick+0x168>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d918:	429a      	cmp	r2, r3
 800d91a:	d3b8      	bcc.n	800d88e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d91c:	2301      	movs	r3, #1
 800d91e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d920:	e7b5      	b.n	800d88e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d922:	4b17      	ldr	r3, [pc, #92]	@ (800d980 <xTaskIncrementTick+0x168>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d928:	4914      	ldr	r1, [pc, #80]	@ (800d97c <xTaskIncrementTick+0x164>)
 800d92a:	4613      	mov	r3, r2
 800d92c:	009b      	lsls	r3, r3, #2
 800d92e:	4413      	add	r3, r2
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	440b      	add	r3, r1
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	2b01      	cmp	r3, #1
 800d938:	d901      	bls.n	800d93e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800d93a:	2301      	movs	r3, #1
 800d93c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d93e:	4b11      	ldr	r3, [pc, #68]	@ (800d984 <xTaskIncrementTick+0x16c>)
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	2b00      	cmp	r3, #0
 800d944:	d007      	beq.n	800d956 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800d946:	2301      	movs	r3, #1
 800d948:	617b      	str	r3, [r7, #20]
 800d94a:	e004      	b.n	800d956 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d94c:	4b0e      	ldr	r3, [pc, #56]	@ (800d988 <xTaskIncrementTick+0x170>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	3301      	adds	r3, #1
 800d952:	4a0d      	ldr	r2, [pc, #52]	@ (800d988 <xTaskIncrementTick+0x170>)
 800d954:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d956:	697b      	ldr	r3, [r7, #20]
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3718      	adds	r7, #24
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}
 800d960:	24004e58 	.word	0x24004e58
 800d964:	24004e34 	.word	0x24004e34
 800d968:	24004de8 	.word	0x24004de8
 800d96c:	24004dec 	.word	0x24004dec
 800d970:	24004e48 	.word	0x24004e48
 800d974:	24004e50 	.word	0x24004e50
 800d978:	24004e38 	.word	0x24004e38
 800d97c:	24004960 	.word	0x24004960
 800d980:	2400495c 	.word	0x2400495c
 800d984:	24004e44 	.word	0x24004e44
 800d988:	24004e40 	.word	0x24004e40

0800d98c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d98c:	b480      	push	{r7}
 800d98e:	b085      	sub	sp, #20
 800d990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d992:	4b2b      	ldr	r3, [pc, #172]	@ (800da40 <vTaskSwitchContext+0xb4>)
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	2b00      	cmp	r3, #0
 800d998:	d003      	beq.n	800d9a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d99a:	4b2a      	ldr	r3, [pc, #168]	@ (800da44 <vTaskSwitchContext+0xb8>)
 800d99c:	2201      	movs	r2, #1
 800d99e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d9a0:	e047      	b.n	800da32 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800d9a2:	4b28      	ldr	r3, [pc, #160]	@ (800da44 <vTaskSwitchContext+0xb8>)
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d9a8:	4b27      	ldr	r3, [pc, #156]	@ (800da48 <vTaskSwitchContext+0xbc>)
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	60fb      	str	r3, [r7, #12]
 800d9ae:	e011      	b.n	800d9d4 <vTaskSwitchContext+0x48>
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d10b      	bne.n	800d9ce <vTaskSwitchContext+0x42>
	__asm volatile
 800d9b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ba:	f383 8811 	msr	BASEPRI, r3
 800d9be:	f3bf 8f6f 	isb	sy
 800d9c2:	f3bf 8f4f 	dsb	sy
 800d9c6:	607b      	str	r3, [r7, #4]
}
 800d9c8:	bf00      	nop
 800d9ca:	bf00      	nop
 800d9cc:	e7fd      	b.n	800d9ca <vTaskSwitchContext+0x3e>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	3b01      	subs	r3, #1
 800d9d2:	60fb      	str	r3, [r7, #12]
 800d9d4:	491d      	ldr	r1, [pc, #116]	@ (800da4c <vTaskSwitchContext+0xc0>)
 800d9d6:	68fa      	ldr	r2, [r7, #12]
 800d9d8:	4613      	mov	r3, r2
 800d9da:	009b      	lsls	r3, r3, #2
 800d9dc:	4413      	add	r3, r2
 800d9de:	009b      	lsls	r3, r3, #2
 800d9e0:	440b      	add	r3, r1
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d0e3      	beq.n	800d9b0 <vTaskSwitchContext+0x24>
 800d9e8:	68fa      	ldr	r2, [r7, #12]
 800d9ea:	4613      	mov	r3, r2
 800d9ec:	009b      	lsls	r3, r3, #2
 800d9ee:	4413      	add	r3, r2
 800d9f0:	009b      	lsls	r3, r3, #2
 800d9f2:	4a16      	ldr	r2, [pc, #88]	@ (800da4c <vTaskSwitchContext+0xc0>)
 800d9f4:	4413      	add	r3, r2
 800d9f6:	60bb      	str	r3, [r7, #8]
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	685b      	ldr	r3, [r3, #4]
 800d9fc:	685a      	ldr	r2, [r3, #4]
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	605a      	str	r2, [r3, #4]
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	685a      	ldr	r2, [r3, #4]
 800da06:	68bb      	ldr	r3, [r7, #8]
 800da08:	3308      	adds	r3, #8
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d104      	bne.n	800da18 <vTaskSwitchContext+0x8c>
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	685b      	ldr	r3, [r3, #4]
 800da12:	685a      	ldr	r2, [r3, #4]
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	605a      	str	r2, [r3, #4]
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	685b      	ldr	r3, [r3, #4]
 800da1c:	68db      	ldr	r3, [r3, #12]
 800da1e:	4a0c      	ldr	r2, [pc, #48]	@ (800da50 <vTaskSwitchContext+0xc4>)
 800da20:	6013      	str	r3, [r2, #0]
 800da22:	4a09      	ldr	r2, [pc, #36]	@ (800da48 <vTaskSwitchContext+0xbc>)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800da28:	4b09      	ldr	r3, [pc, #36]	@ (800da50 <vTaskSwitchContext+0xc4>)
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3354      	adds	r3, #84	@ 0x54
 800da2e:	4a09      	ldr	r2, [pc, #36]	@ (800da54 <vTaskSwitchContext+0xc8>)
 800da30:	6013      	str	r3, [r2, #0]
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	24004e58 	.word	0x24004e58
 800da44:	24004e44 	.word	0x24004e44
 800da48:	24004e38 	.word	0x24004e38
 800da4c:	24004960 	.word	0x24004960
 800da50:	2400495c 	.word	0x2400495c
 800da54:	24000038 	.word	0x24000038

0800da58 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800da58:	b580      	push	{r7, lr}
 800da5a:	b084      	sub	sp, #16
 800da5c:	af00      	add	r7, sp, #0
 800da5e:	6078      	str	r0, [r7, #4]
 800da60:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	2b00      	cmp	r3, #0
 800da66:	d10b      	bne.n	800da80 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800da68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da6c:	f383 8811 	msr	BASEPRI, r3
 800da70:	f3bf 8f6f 	isb	sy
 800da74:	f3bf 8f4f 	dsb	sy
 800da78:	60fb      	str	r3, [r7, #12]
}
 800da7a:	bf00      	nop
 800da7c:	bf00      	nop
 800da7e:	e7fd      	b.n	800da7c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800da80:	4b07      	ldr	r3, [pc, #28]	@ (800daa0 <vTaskPlaceOnEventList+0x48>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	3318      	adds	r3, #24
 800da86:	4619      	mov	r1, r3
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f7fe f9d6 	bl	800be3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800da8e:	2101      	movs	r1, #1
 800da90:	6838      	ldr	r0, [r7, #0]
 800da92:	f000 fb97 	bl	800e1c4 <prvAddCurrentTaskToDelayedList>
}
 800da96:	bf00      	nop
 800da98:	3710      	adds	r7, #16
 800da9a:	46bd      	mov	sp, r7
 800da9c:	bd80      	pop	{r7, pc}
 800da9e:	bf00      	nop
 800daa0:	2400495c 	.word	0x2400495c

0800daa4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b086      	sub	sp, #24
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d10b      	bne.n	800dace <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800dab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800daba:	f383 8811 	msr	BASEPRI, r3
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	f3bf 8f4f 	dsb	sy
 800dac6:	617b      	str	r3, [r7, #20]
}
 800dac8:	bf00      	nop
 800daca:	bf00      	nop
 800dacc:	e7fd      	b.n	800daca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800dace:	4b0a      	ldr	r3, [pc, #40]	@ (800daf8 <vTaskPlaceOnEventListRestricted+0x54>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	3318      	adds	r3, #24
 800dad4:	4619      	mov	r1, r3
 800dad6:	68f8      	ldr	r0, [r7, #12]
 800dad8:	f7fe f98b 	bl	800bdf2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d002      	beq.n	800dae8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800dae2:	f04f 33ff 	mov.w	r3, #4294967295
 800dae6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800dae8:	6879      	ldr	r1, [r7, #4]
 800daea:	68b8      	ldr	r0, [r7, #8]
 800daec:	f000 fb6a 	bl	800e1c4 <prvAddCurrentTaskToDelayedList>
	}
 800daf0:	bf00      	nop
 800daf2:	3718      	adds	r7, #24
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}
 800daf8:	2400495c 	.word	0x2400495c

0800dafc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dafc:	b580      	push	{r7, lr}
 800dafe:	b086      	sub	sp, #24
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	68db      	ldr	r3, [r3, #12]
 800db0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800db0c:	693b      	ldr	r3, [r7, #16]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d10b      	bne.n	800db2a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800db12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db16:	f383 8811 	msr	BASEPRI, r3
 800db1a:	f3bf 8f6f 	isb	sy
 800db1e:	f3bf 8f4f 	dsb	sy
 800db22:	60fb      	str	r3, [r7, #12]
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop
 800db28:	e7fd      	b.n	800db26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800db2a:	693b      	ldr	r3, [r7, #16]
 800db2c:	3318      	adds	r3, #24
 800db2e:	4618      	mov	r0, r3
 800db30:	f7fe f9bc 	bl	800beac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800db34:	4b1d      	ldr	r3, [pc, #116]	@ (800dbac <xTaskRemoveFromEventList+0xb0>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d11d      	bne.n	800db78 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800db3c:	693b      	ldr	r3, [r7, #16]
 800db3e:	3304      	adds	r3, #4
 800db40:	4618      	mov	r0, r3
 800db42:	f7fe f9b3 	bl	800beac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800db46:	693b      	ldr	r3, [r7, #16]
 800db48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db4a:	4b19      	ldr	r3, [pc, #100]	@ (800dbb0 <xTaskRemoveFromEventList+0xb4>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d903      	bls.n	800db5a <xTaskRemoveFromEventList+0x5e>
 800db52:	693b      	ldr	r3, [r7, #16]
 800db54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db56:	4a16      	ldr	r2, [pc, #88]	@ (800dbb0 <xTaskRemoveFromEventList+0xb4>)
 800db58:	6013      	str	r3, [r2, #0]
 800db5a:	693b      	ldr	r3, [r7, #16]
 800db5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db5e:	4613      	mov	r3, r2
 800db60:	009b      	lsls	r3, r3, #2
 800db62:	4413      	add	r3, r2
 800db64:	009b      	lsls	r3, r3, #2
 800db66:	4a13      	ldr	r2, [pc, #76]	@ (800dbb4 <xTaskRemoveFromEventList+0xb8>)
 800db68:	441a      	add	r2, r3
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	3304      	adds	r3, #4
 800db6e:	4619      	mov	r1, r3
 800db70:	4610      	mov	r0, r2
 800db72:	f7fe f93e 	bl	800bdf2 <vListInsertEnd>
 800db76:	e005      	b.n	800db84 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800db78:	693b      	ldr	r3, [r7, #16]
 800db7a:	3318      	adds	r3, #24
 800db7c:	4619      	mov	r1, r3
 800db7e:	480e      	ldr	r0, [pc, #56]	@ (800dbb8 <xTaskRemoveFromEventList+0xbc>)
 800db80:	f7fe f937 	bl	800bdf2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800db84:	693b      	ldr	r3, [r7, #16]
 800db86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800db88:	4b0c      	ldr	r3, [pc, #48]	@ (800dbbc <xTaskRemoveFromEventList+0xc0>)
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db8e:	429a      	cmp	r2, r3
 800db90:	d905      	bls.n	800db9e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800db92:	2301      	movs	r3, #1
 800db94:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800db96:	4b0a      	ldr	r3, [pc, #40]	@ (800dbc0 <xTaskRemoveFromEventList+0xc4>)
 800db98:	2201      	movs	r2, #1
 800db9a:	601a      	str	r2, [r3, #0]
 800db9c:	e001      	b.n	800dba2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800db9e:	2300      	movs	r3, #0
 800dba0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dba2:	697b      	ldr	r3, [r7, #20]
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	3718      	adds	r7, #24
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	24004e58 	.word	0x24004e58
 800dbb0:	24004e38 	.word	0x24004e38
 800dbb4:	24004960 	.word	0x24004960
 800dbb8:	24004df0 	.word	0x24004df0
 800dbbc:	2400495c 	.word	0x2400495c
 800dbc0:	24004e44 	.word	0x24004e44

0800dbc4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dbc4:	b480      	push	{r7}
 800dbc6:	b083      	sub	sp, #12
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dbcc:	4b06      	ldr	r3, [pc, #24]	@ (800dbe8 <vTaskInternalSetTimeOutState+0x24>)
 800dbce:	681a      	ldr	r2, [r3, #0]
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dbd4:	4b05      	ldr	r3, [pc, #20]	@ (800dbec <vTaskInternalSetTimeOutState+0x28>)
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	605a      	str	r2, [r3, #4]
}
 800dbdc:	bf00      	nop
 800dbde:	370c      	adds	r7, #12
 800dbe0:	46bd      	mov	sp, r7
 800dbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe6:	4770      	bx	lr
 800dbe8:	24004e48 	.word	0x24004e48
 800dbec:	24004e34 	.word	0x24004e34

0800dbf0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b088      	sub	sp, #32
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	6078      	str	r0, [r7, #4]
 800dbf8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d10b      	bne.n	800dc18 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800dc00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc04:	f383 8811 	msr	BASEPRI, r3
 800dc08:	f3bf 8f6f 	isb	sy
 800dc0c:	f3bf 8f4f 	dsb	sy
 800dc10:	613b      	str	r3, [r7, #16]
}
 800dc12:	bf00      	nop
 800dc14:	bf00      	nop
 800dc16:	e7fd      	b.n	800dc14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10b      	bne.n	800dc36 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800dc1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc22:	f383 8811 	msr	BASEPRI, r3
 800dc26:	f3bf 8f6f 	isb	sy
 800dc2a:	f3bf 8f4f 	dsb	sy
 800dc2e:	60fb      	str	r3, [r7, #12]
}
 800dc30:	bf00      	nop
 800dc32:	bf00      	nop
 800dc34:	e7fd      	b.n	800dc32 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800dc36:	f7fe fa97 	bl	800c168 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dc3a:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb0 <xTaskCheckForTimeOut+0xc0>)
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	69ba      	ldr	r2, [r7, #24]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc52:	d102      	bne.n	800dc5a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dc54:	2300      	movs	r3, #0
 800dc56:	61fb      	str	r3, [r7, #28]
 800dc58:	e023      	b.n	800dca2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681a      	ldr	r2, [r3, #0]
 800dc5e:	4b15      	ldr	r3, [pc, #84]	@ (800dcb4 <xTaskCheckForTimeOut+0xc4>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	429a      	cmp	r2, r3
 800dc64:	d007      	beq.n	800dc76 <xTaskCheckForTimeOut+0x86>
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	69ba      	ldr	r2, [r7, #24]
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d302      	bcc.n	800dc76 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dc70:	2301      	movs	r3, #1
 800dc72:	61fb      	str	r3, [r7, #28]
 800dc74:	e015      	b.n	800dca2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	697a      	ldr	r2, [r7, #20]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d20b      	bcs.n	800dc98 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	1ad2      	subs	r2, r2, r3
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f7ff ff99 	bl	800dbc4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dc92:	2300      	movs	r3, #0
 800dc94:	61fb      	str	r3, [r7, #28]
 800dc96:	e004      	b.n	800dca2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dc9e:	2301      	movs	r3, #1
 800dca0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dca2:	f7fe fa93 	bl	800c1cc <vPortExitCritical>

	return xReturn;
 800dca6:	69fb      	ldr	r3, [r7, #28]
}
 800dca8:	4618      	mov	r0, r3
 800dcaa:	3720      	adds	r7, #32
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	24004e34 	.word	0x24004e34
 800dcb4:	24004e48 	.word	0x24004e48

0800dcb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dcbc:	4b03      	ldr	r3, [pc, #12]	@ (800dccc <vTaskMissedYield+0x14>)
 800dcbe:	2201      	movs	r2, #1
 800dcc0:	601a      	str	r2, [r3, #0]
}
 800dcc2:	bf00      	nop
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr
 800dccc:	24004e44 	.word	0x24004e44

0800dcd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b082      	sub	sp, #8
 800dcd4:	af00      	add	r7, sp, #0
 800dcd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dcd8:	f000 f852 	bl	800dd80 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dcdc:	4b06      	ldr	r3, [pc, #24]	@ (800dcf8 <prvIdleTask+0x28>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b01      	cmp	r3, #1
 800dce2:	d9f9      	bls.n	800dcd8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800dce4:	4b05      	ldr	r3, [pc, #20]	@ (800dcfc <prvIdleTask+0x2c>)
 800dce6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800dcf4:	e7f0      	b.n	800dcd8 <prvIdleTask+0x8>
 800dcf6:	bf00      	nop
 800dcf8:	24004960 	.word	0x24004960
 800dcfc:	e000ed04 	.word	0xe000ed04

0800dd00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd06:	2300      	movs	r3, #0
 800dd08:	607b      	str	r3, [r7, #4]
 800dd0a:	e00c      	b.n	800dd26 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dd0c:	687a      	ldr	r2, [r7, #4]
 800dd0e:	4613      	mov	r3, r2
 800dd10:	009b      	lsls	r3, r3, #2
 800dd12:	4413      	add	r3, r2
 800dd14:	009b      	lsls	r3, r3, #2
 800dd16:	4a12      	ldr	r2, [pc, #72]	@ (800dd60 <prvInitialiseTaskLists+0x60>)
 800dd18:	4413      	add	r3, r2
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	f7fe f83c 	bl	800bd98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	3301      	adds	r3, #1
 800dd24:	607b      	str	r3, [r7, #4]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2b37      	cmp	r3, #55	@ 0x37
 800dd2a:	d9ef      	bls.n	800dd0c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dd2c:	480d      	ldr	r0, [pc, #52]	@ (800dd64 <prvInitialiseTaskLists+0x64>)
 800dd2e:	f7fe f833 	bl	800bd98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dd32:	480d      	ldr	r0, [pc, #52]	@ (800dd68 <prvInitialiseTaskLists+0x68>)
 800dd34:	f7fe f830 	bl	800bd98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd38:	480c      	ldr	r0, [pc, #48]	@ (800dd6c <prvInitialiseTaskLists+0x6c>)
 800dd3a:	f7fe f82d 	bl	800bd98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd3e:	480c      	ldr	r0, [pc, #48]	@ (800dd70 <prvInitialiseTaskLists+0x70>)
 800dd40:	f7fe f82a 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd44:	480b      	ldr	r0, [pc, #44]	@ (800dd74 <prvInitialiseTaskLists+0x74>)
 800dd46:	f7fe f827 	bl	800bd98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd4a:	4b0b      	ldr	r3, [pc, #44]	@ (800dd78 <prvInitialiseTaskLists+0x78>)
 800dd4c:	4a05      	ldr	r2, [pc, #20]	@ (800dd64 <prvInitialiseTaskLists+0x64>)
 800dd4e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd50:	4b0a      	ldr	r3, [pc, #40]	@ (800dd7c <prvInitialiseTaskLists+0x7c>)
 800dd52:	4a05      	ldr	r2, [pc, #20]	@ (800dd68 <prvInitialiseTaskLists+0x68>)
 800dd54:	601a      	str	r2, [r3, #0]
}
 800dd56:	bf00      	nop
 800dd58:	3708      	adds	r7, #8
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	24004960 	.word	0x24004960
 800dd64:	24004dc0 	.word	0x24004dc0
 800dd68:	24004dd4 	.word	0x24004dd4
 800dd6c:	24004df0 	.word	0x24004df0
 800dd70:	24004e04 	.word	0x24004e04
 800dd74:	24004e1c 	.word	0x24004e1c
 800dd78:	24004de8 	.word	0x24004de8
 800dd7c:	24004dec 	.word	0x24004dec

0800dd80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800dd80:	b580      	push	{r7, lr}
 800dd82:	b082      	sub	sp, #8
 800dd84:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800dd86:	e019      	b.n	800ddbc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800dd88:	f7fe f9ee 	bl	800c168 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd8c:	4b10      	ldr	r3, [pc, #64]	@ (800ddd0 <prvCheckTasksWaitingTermination+0x50>)
 800dd8e:	68db      	ldr	r3, [r3, #12]
 800dd90:	68db      	ldr	r3, [r3, #12]
 800dd92:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	3304      	adds	r3, #4
 800dd98:	4618      	mov	r0, r3
 800dd9a:	f7fe f887 	bl	800beac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dd9e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddd4 <prvCheckTasksWaitingTermination+0x54>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	3b01      	subs	r3, #1
 800dda4:	4a0b      	ldr	r2, [pc, #44]	@ (800ddd4 <prvCheckTasksWaitingTermination+0x54>)
 800dda6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800dda8:	4b0b      	ldr	r3, [pc, #44]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	3b01      	subs	r3, #1
 800ddae:	4a0a      	ldr	r2, [pc, #40]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddb0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ddb2:	f7fe fa0b 	bl	800c1cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ddb6:	6878      	ldr	r0, [r7, #4]
 800ddb8:	f000 f810 	bl	800dddc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ddbc:	4b06      	ldr	r3, [pc, #24]	@ (800ddd8 <prvCheckTasksWaitingTermination+0x58>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d1e1      	bne.n	800dd88 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ddc4:	bf00      	nop
 800ddc6:	bf00      	nop
 800ddc8:	3708      	adds	r7, #8
 800ddca:	46bd      	mov	sp, r7
 800ddcc:	bd80      	pop	{r7, pc}
 800ddce:	bf00      	nop
 800ddd0:	24004e04 	.word	0x24004e04
 800ddd4:	24004e30 	.word	0x24004e30
 800ddd8:	24004e18 	.word	0x24004e18

0800dddc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	3354      	adds	r3, #84	@ 0x54
 800dde8:	4618      	mov	r0, r3
 800ddea:	f000 ff69 	bl	800ecc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d108      	bne.n	800de0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	f7fd feab 	bl	800bb58 <vPortFree>
				vPortFree( pxTCB );
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f7fd fea8 	bl	800bb58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800de08:	e019      	b.n	800de3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800de10:	2b01      	cmp	r3, #1
 800de12:	d103      	bne.n	800de1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800de14:	6878      	ldr	r0, [r7, #4]
 800de16:	f7fd fe9f 	bl	800bb58 <vPortFree>
	}
 800de1a:	e010      	b.n	800de3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800de22:	2b02      	cmp	r3, #2
 800de24:	d00b      	beq.n	800de3e <prvDeleteTCB+0x62>
	__asm volatile
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	60fb      	str	r3, [r7, #12]
}
 800de38:	bf00      	nop
 800de3a:	bf00      	nop
 800de3c:	e7fd      	b.n	800de3a <prvDeleteTCB+0x5e>
	}
 800de3e:	bf00      	nop
 800de40:	3710      	adds	r7, #16
 800de42:	46bd      	mov	sp, r7
 800de44:	bd80      	pop	{r7, pc}
	...

0800de48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800de48:	b480      	push	{r7}
 800de4a:	b083      	sub	sp, #12
 800de4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de4e:	4b0c      	ldr	r3, [pc, #48]	@ (800de80 <prvResetNextTaskUnblockTime+0x38>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d104      	bne.n	800de62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800de58:	4b0a      	ldr	r3, [pc, #40]	@ (800de84 <prvResetNextTaskUnblockTime+0x3c>)
 800de5a:	f04f 32ff 	mov.w	r2, #4294967295
 800de5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800de60:	e008      	b.n	800de74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de62:	4b07      	ldr	r3, [pc, #28]	@ (800de80 <prvResetNextTaskUnblockTime+0x38>)
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	68db      	ldr	r3, [r3, #12]
 800de68:	68db      	ldr	r3, [r3, #12]
 800de6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	4a04      	ldr	r2, [pc, #16]	@ (800de84 <prvResetNextTaskUnblockTime+0x3c>)
 800de72:	6013      	str	r3, [r2, #0]
}
 800de74:	bf00      	nop
 800de76:	370c      	adds	r7, #12
 800de78:	46bd      	mov	sp, r7
 800de7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de7e:	4770      	bx	lr
 800de80:	24004de8 	.word	0x24004de8
 800de84:	24004e50 	.word	0x24004e50

0800de88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800de8e:	4b05      	ldr	r3, [pc, #20]	@ (800dea4 <xTaskGetCurrentTaskHandle+0x1c>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	607b      	str	r3, [r7, #4]

		return xReturn;
 800de94:	687b      	ldr	r3, [r7, #4]
	}
 800de96:	4618      	mov	r0, r3
 800de98:	370c      	adds	r7, #12
 800de9a:	46bd      	mov	sp, r7
 800de9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dea0:	4770      	bx	lr
 800dea2:	bf00      	nop
 800dea4:	2400495c 	.word	0x2400495c

0800dea8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800dea8:	b480      	push	{r7}
 800deaa:	b083      	sub	sp, #12
 800deac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800deae:	4b0b      	ldr	r3, [pc, #44]	@ (800dedc <xTaskGetSchedulerState+0x34>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d102      	bne.n	800debc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800deb6:	2301      	movs	r3, #1
 800deb8:	607b      	str	r3, [r7, #4]
 800deba:	e008      	b.n	800dece <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800debc:	4b08      	ldr	r3, [pc, #32]	@ (800dee0 <xTaskGetSchedulerState+0x38>)
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d102      	bne.n	800deca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800dec4:	2302      	movs	r3, #2
 800dec6:	607b      	str	r3, [r7, #4]
 800dec8:	e001      	b.n	800dece <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800deca:	2300      	movs	r3, #0
 800decc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800dece:	687b      	ldr	r3, [r7, #4]
	}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	24004e3c 	.word	0x24004e3c
 800dee0:	24004e58 	.word	0x24004e58

0800dee4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800def0:	2300      	movs	r3, #0
 800def2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2b00      	cmp	r3, #0
 800def8:	d051      	beq.n	800df9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800defe:	4b2a      	ldr	r3, [pc, #168]	@ (800dfa8 <xTaskPriorityInherit+0xc4>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df04:	429a      	cmp	r2, r3
 800df06:	d241      	bcs.n	800df8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800df08:	68bb      	ldr	r3, [r7, #8]
 800df0a:	699b      	ldr	r3, [r3, #24]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	db06      	blt.n	800df1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df10:	4b25      	ldr	r3, [pc, #148]	@ (800dfa8 <xTaskPriorityInherit+0xc4>)
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df16:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	6959      	ldr	r1, [r3, #20]
 800df22:	68bb      	ldr	r3, [r7, #8]
 800df24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df26:	4613      	mov	r3, r2
 800df28:	009b      	lsls	r3, r3, #2
 800df2a:	4413      	add	r3, r2
 800df2c:	009b      	lsls	r3, r3, #2
 800df2e:	4a1f      	ldr	r2, [pc, #124]	@ (800dfac <xTaskPriorityInherit+0xc8>)
 800df30:	4413      	add	r3, r2
 800df32:	4299      	cmp	r1, r3
 800df34:	d122      	bne.n	800df7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800df36:	68bb      	ldr	r3, [r7, #8]
 800df38:	3304      	adds	r3, #4
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7fd ffb6 	bl	800beac <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df40:	4b19      	ldr	r3, [pc, #100]	@ (800dfa8 <xTaskPriorityInherit+0xc4>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800df4a:	68bb      	ldr	r3, [r7, #8]
 800df4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df4e:	4b18      	ldr	r3, [pc, #96]	@ (800dfb0 <xTaskPriorityInherit+0xcc>)
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	429a      	cmp	r2, r3
 800df54:	d903      	bls.n	800df5e <xTaskPriorityInherit+0x7a>
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df5a:	4a15      	ldr	r2, [pc, #84]	@ (800dfb0 <xTaskPriorityInherit+0xcc>)
 800df5c:	6013      	str	r3, [r2, #0]
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df62:	4613      	mov	r3, r2
 800df64:	009b      	lsls	r3, r3, #2
 800df66:	4413      	add	r3, r2
 800df68:	009b      	lsls	r3, r3, #2
 800df6a:	4a10      	ldr	r2, [pc, #64]	@ (800dfac <xTaskPriorityInherit+0xc8>)
 800df6c:	441a      	add	r2, r3
 800df6e:	68bb      	ldr	r3, [r7, #8]
 800df70:	3304      	adds	r3, #4
 800df72:	4619      	mov	r1, r3
 800df74:	4610      	mov	r0, r2
 800df76:	f7fd ff3c 	bl	800bdf2 <vListInsertEnd>
 800df7a:	e004      	b.n	800df86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800df7c:	4b0a      	ldr	r3, [pc, #40]	@ (800dfa8 <xTaskPriorityInherit+0xc4>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800df82:	68bb      	ldr	r3, [r7, #8]
 800df84:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800df86:	2301      	movs	r3, #1
 800df88:	60fb      	str	r3, [r7, #12]
 800df8a:	e008      	b.n	800df9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800df8c:	68bb      	ldr	r3, [r7, #8]
 800df8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800df90:	4b05      	ldr	r3, [pc, #20]	@ (800dfa8 <xTaskPriorityInherit+0xc4>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df96:	429a      	cmp	r2, r3
 800df98:	d201      	bcs.n	800df9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800df9a:	2301      	movs	r3, #1
 800df9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800df9e:	68fb      	ldr	r3, [r7, #12]
	}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3710      	adds	r7, #16
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	2400495c 	.word	0x2400495c
 800dfac:	24004960 	.word	0x24004960
 800dfb0:	24004e38 	.word	0x24004e38

0800dfb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	b086      	sub	sp, #24
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d058      	beq.n	800e07c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800dfca:	4b2f      	ldr	r3, [pc, #188]	@ (800e088 <xTaskPriorityDisinherit+0xd4>)
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	693a      	ldr	r2, [r7, #16]
 800dfd0:	429a      	cmp	r2, r3
 800dfd2:	d00b      	beq.n	800dfec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
 800dfe4:	60fb      	str	r3, [r7, #12]
}
 800dfe6:	bf00      	nop
 800dfe8:	bf00      	nop
 800dfea:	e7fd      	b.n	800dfe8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10b      	bne.n	800e00c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800dff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dff8:	f383 8811 	msr	BASEPRI, r3
 800dffc:	f3bf 8f6f 	isb	sy
 800e000:	f3bf 8f4f 	dsb	sy
 800e004:	60bb      	str	r3, [r7, #8]
}
 800e006:	bf00      	nop
 800e008:	bf00      	nop
 800e00a:	e7fd      	b.n	800e008 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800e00c:	693b      	ldr	r3, [r7, #16]
 800e00e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e010:	1e5a      	subs	r2, r3, #1
 800e012:	693b      	ldr	r3, [r7, #16]
 800e014:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e01a:	693b      	ldr	r3, [r7, #16]
 800e01c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e01e:	429a      	cmp	r2, r3
 800e020:	d02c      	beq.n	800e07c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e022:	693b      	ldr	r3, [r7, #16]
 800e024:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e026:	2b00      	cmp	r3, #0
 800e028:	d128      	bne.n	800e07c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e02a:	693b      	ldr	r3, [r7, #16]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4618      	mov	r0, r3
 800e030:	f7fd ff3c 	bl	800beac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e034:	693b      	ldr	r3, [r7, #16]
 800e036:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e03c:	693b      	ldr	r3, [r7, #16]
 800e03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e040:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e04c:	4b0f      	ldr	r3, [pc, #60]	@ (800e08c <xTaskPriorityDisinherit+0xd8>)
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	429a      	cmp	r2, r3
 800e052:	d903      	bls.n	800e05c <xTaskPriorityDisinherit+0xa8>
 800e054:	693b      	ldr	r3, [r7, #16]
 800e056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e058:	4a0c      	ldr	r2, [pc, #48]	@ (800e08c <xTaskPriorityDisinherit+0xd8>)
 800e05a:	6013      	str	r3, [r2, #0]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e060:	4613      	mov	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	4a09      	ldr	r2, [pc, #36]	@ (800e090 <xTaskPriorityDisinherit+0xdc>)
 800e06a:	441a      	add	r2, r3
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	3304      	adds	r3, #4
 800e070:	4619      	mov	r1, r3
 800e072:	4610      	mov	r0, r2
 800e074:	f7fd febd 	bl	800bdf2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e078:	2301      	movs	r3, #1
 800e07a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e07c:	697b      	ldr	r3, [r7, #20]
	}
 800e07e:	4618      	mov	r0, r3
 800e080:	3718      	adds	r7, #24
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	2400495c 	.word	0x2400495c
 800e08c:	24004e38 	.word	0x24004e38
 800e090:	24004960 	.word	0x24004960

0800e094 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e094:	b580      	push	{r7, lr}
 800e096:	b088      	sub	sp, #32
 800e098:	af00      	add	r7, sp, #0
 800e09a:	6078      	str	r0, [r7, #4]
 800e09c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e0a2:	2301      	movs	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d06c      	beq.n	800e186 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e0ac:	69bb      	ldr	r3, [r7, #24]
 800e0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d10b      	bne.n	800e0cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800e0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b8:	f383 8811 	msr	BASEPRI, r3
 800e0bc:	f3bf 8f6f 	isb	sy
 800e0c0:	f3bf 8f4f 	dsb	sy
 800e0c4:	60fb      	str	r3, [r7, #12]
}
 800e0c6:	bf00      	nop
 800e0c8:	bf00      	nop
 800e0ca:	e7fd      	b.n	800e0c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e0cc:	69bb      	ldr	r3, [r7, #24]
 800e0ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	429a      	cmp	r2, r3
 800e0d4:	d902      	bls.n	800e0dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	61fb      	str	r3, [r7, #28]
 800e0da:	e002      	b.n	800e0e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e0e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d04c      	beq.n	800e186 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e0ec:	69bb      	ldr	r3, [r7, #24]
 800e0ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e0f0:	697a      	ldr	r2, [r7, #20]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d147      	bne.n	800e186 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e0f6:	4b26      	ldr	r3, [pc, #152]	@ (800e190 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	69ba      	ldr	r2, [r7, #24]
 800e0fc:	429a      	cmp	r2, r3
 800e0fe:	d10b      	bne.n	800e118 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800e100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	60bb      	str	r3, [r7, #8]
}
 800e112:	bf00      	nop
 800e114:	bf00      	nop
 800e116:	e7fd      	b.n	800e114 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e118:	69bb      	ldr	r3, [r7, #24]
 800e11a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e11c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e11e:	69bb      	ldr	r3, [r7, #24]
 800e120:	69fa      	ldr	r2, [r7, #28]
 800e122:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e124:	69bb      	ldr	r3, [r7, #24]
 800e126:	699b      	ldr	r3, [r3, #24]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	db04      	blt.n	800e136 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e12c:	69fb      	ldr	r3, [r7, #28]
 800e12e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e132:	69bb      	ldr	r3, [r7, #24]
 800e134:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e136:	69bb      	ldr	r3, [r7, #24]
 800e138:	6959      	ldr	r1, [r3, #20]
 800e13a:	693a      	ldr	r2, [r7, #16]
 800e13c:	4613      	mov	r3, r2
 800e13e:	009b      	lsls	r3, r3, #2
 800e140:	4413      	add	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4a13      	ldr	r2, [pc, #76]	@ (800e194 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e146:	4413      	add	r3, r2
 800e148:	4299      	cmp	r1, r3
 800e14a:	d11c      	bne.n	800e186 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e14c:	69bb      	ldr	r3, [r7, #24]
 800e14e:	3304      	adds	r3, #4
 800e150:	4618      	mov	r0, r3
 800e152:	f7fd feab 	bl	800beac <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e15a:	4b0f      	ldr	r3, [pc, #60]	@ (800e198 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	429a      	cmp	r2, r3
 800e160:	d903      	bls.n	800e16a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800e162:	69bb      	ldr	r3, [r7, #24]
 800e164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e166:	4a0c      	ldr	r2, [pc, #48]	@ (800e198 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	69bb      	ldr	r3, [r7, #24]
 800e16c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e16e:	4613      	mov	r3, r2
 800e170:	009b      	lsls	r3, r3, #2
 800e172:	4413      	add	r3, r2
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	4a07      	ldr	r2, [pc, #28]	@ (800e194 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800e178:	441a      	add	r2, r3
 800e17a:	69bb      	ldr	r3, [r7, #24]
 800e17c:	3304      	adds	r3, #4
 800e17e:	4619      	mov	r1, r3
 800e180:	4610      	mov	r0, r2
 800e182:	f7fd fe36 	bl	800bdf2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e186:	bf00      	nop
 800e188:	3720      	adds	r7, #32
 800e18a:	46bd      	mov	sp, r7
 800e18c:	bd80      	pop	{r7, pc}
 800e18e:	bf00      	nop
 800e190:	2400495c 	.word	0x2400495c
 800e194:	24004960 	.word	0x24004960
 800e198:	24004e38 	.word	0x24004e38

0800e19c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e19c:	b480      	push	{r7}
 800e19e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e1a0:	4b07      	ldr	r3, [pc, #28]	@ (800e1c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d004      	beq.n	800e1b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e1a8:	4b05      	ldr	r3, [pc, #20]	@ (800e1c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e1ae:	3201      	adds	r2, #1
 800e1b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800e1b2:	4b03      	ldr	r3, [pc, #12]	@ (800e1c0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
	}
 800e1b6:	4618      	mov	r0, r3
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr
 800e1c0:	2400495c 	.word	0x2400495c

0800e1c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b084      	sub	sp, #16
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e1ce:	4b21      	ldr	r3, [pc, #132]	@ (800e254 <prvAddCurrentTaskToDelayedList+0x90>)
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e1d4:	4b20      	ldr	r3, [pc, #128]	@ (800e258 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fd fe66 	bl	800beac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1e6:	d10a      	bne.n	800e1fe <prvAddCurrentTaskToDelayedList+0x3a>
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d007      	beq.n	800e1fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e1ee:	4b1a      	ldr	r3, [pc, #104]	@ (800e258 <prvAddCurrentTaskToDelayedList+0x94>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	3304      	adds	r3, #4
 800e1f4:	4619      	mov	r1, r3
 800e1f6:	4819      	ldr	r0, [pc, #100]	@ (800e25c <prvAddCurrentTaskToDelayedList+0x98>)
 800e1f8:	f7fd fdfb 	bl	800bdf2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e1fc:	e026      	b.n	800e24c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e1fe:	68fa      	ldr	r2, [r7, #12]
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	4413      	add	r3, r2
 800e204:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e206:	4b14      	ldr	r3, [pc, #80]	@ (800e258 <prvAddCurrentTaskToDelayedList+0x94>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	68ba      	ldr	r2, [r7, #8]
 800e20c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e20e:	68ba      	ldr	r2, [r7, #8]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	429a      	cmp	r2, r3
 800e214:	d209      	bcs.n	800e22a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e216:	4b12      	ldr	r3, [pc, #72]	@ (800e260 <prvAddCurrentTaskToDelayedList+0x9c>)
 800e218:	681a      	ldr	r2, [r3, #0]
 800e21a:	4b0f      	ldr	r3, [pc, #60]	@ (800e258 <prvAddCurrentTaskToDelayedList+0x94>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	3304      	adds	r3, #4
 800e220:	4619      	mov	r1, r3
 800e222:	4610      	mov	r0, r2
 800e224:	f7fd fe09 	bl	800be3a <vListInsert>
}
 800e228:	e010      	b.n	800e24c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e22a:	4b0e      	ldr	r3, [pc, #56]	@ (800e264 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e22c:	681a      	ldr	r2, [r3, #0]
 800e22e:	4b0a      	ldr	r3, [pc, #40]	@ (800e258 <prvAddCurrentTaskToDelayedList+0x94>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	3304      	adds	r3, #4
 800e234:	4619      	mov	r1, r3
 800e236:	4610      	mov	r0, r2
 800e238:	f7fd fdff 	bl	800be3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e23c:	4b0a      	ldr	r3, [pc, #40]	@ (800e268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	68ba      	ldr	r2, [r7, #8]
 800e242:	429a      	cmp	r2, r3
 800e244:	d202      	bcs.n	800e24c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e246:	4a08      	ldr	r2, [pc, #32]	@ (800e268 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e248:	68bb      	ldr	r3, [r7, #8]
 800e24a:	6013      	str	r3, [r2, #0]
}
 800e24c:	bf00      	nop
 800e24e:	3710      	adds	r7, #16
 800e250:	46bd      	mov	sp, r7
 800e252:	bd80      	pop	{r7, pc}
 800e254:	24004e34 	.word	0x24004e34
 800e258:	2400495c 	.word	0x2400495c
 800e25c:	24004e1c 	.word	0x24004e1c
 800e260:	24004dec 	.word	0x24004dec
 800e264:	24004de8 	.word	0x24004de8
 800e268:	24004e50 	.word	0x24004e50

0800e26c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b08a      	sub	sp, #40	@ 0x28
 800e270:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e272:	2300      	movs	r3, #0
 800e274:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e276:	f000 fb13 	bl	800e8a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e27a:	4b1d      	ldr	r3, [pc, #116]	@ (800e2f0 <xTimerCreateTimerTask+0x84>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d021      	beq.n	800e2c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e282:	2300      	movs	r3, #0
 800e284:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e286:	2300      	movs	r3, #0
 800e288:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e28a:	1d3a      	adds	r2, r7, #4
 800e28c:	f107 0108 	add.w	r1, r7, #8
 800e290:	f107 030c 	add.w	r3, r7, #12
 800e294:	4618      	mov	r0, r3
 800e296:	f7fd fb77 	bl	800b988 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e29a:	6879      	ldr	r1, [r7, #4]
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	68fa      	ldr	r2, [r7, #12]
 800e2a0:	9202      	str	r2, [sp, #8]
 800e2a2:	9301      	str	r3, [sp, #4]
 800e2a4:	2302      	movs	r3, #2
 800e2a6:	9300      	str	r3, [sp, #0]
 800e2a8:	2300      	movs	r3, #0
 800e2aa:	460a      	mov	r2, r1
 800e2ac:	4911      	ldr	r1, [pc, #68]	@ (800e2f4 <xTimerCreateTimerTask+0x88>)
 800e2ae:	4812      	ldr	r0, [pc, #72]	@ (800e2f8 <xTimerCreateTimerTask+0x8c>)
 800e2b0:	f7fe ff92 	bl	800d1d8 <xTaskCreateStatic>
 800e2b4:	4603      	mov	r3, r0
 800e2b6:	4a11      	ldr	r2, [pc, #68]	@ (800e2fc <xTimerCreateTimerTask+0x90>)
 800e2b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800e2ba:	4b10      	ldr	r3, [pc, #64]	@ (800e2fc <xTimerCreateTimerTask+0x90>)
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	2b00      	cmp	r3, #0
 800e2c0:	d001      	beq.n	800e2c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800e2c2:	2301      	movs	r3, #1
 800e2c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d10b      	bne.n	800e2e4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800e2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e2d0:	f383 8811 	msr	BASEPRI, r3
 800e2d4:	f3bf 8f6f 	isb	sy
 800e2d8:	f3bf 8f4f 	dsb	sy
 800e2dc:	613b      	str	r3, [r7, #16]
}
 800e2de:	bf00      	nop
 800e2e0:	bf00      	nop
 800e2e2:	e7fd      	b.n	800e2e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800e2e4:	697b      	ldr	r3, [r7, #20]
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	3718      	adds	r7, #24
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}
 800e2ee:	bf00      	nop
 800e2f0:	24004e8c 	.word	0x24004e8c
 800e2f4:	08010078 	.word	0x08010078
 800e2f8:	0800e439 	.word	0x0800e439
 800e2fc:	24004e90 	.word	0x24004e90

0800e300 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b08a      	sub	sp, #40	@ 0x28
 800e304:	af00      	add	r7, sp, #0
 800e306:	60f8      	str	r0, [r7, #12]
 800e308:	60b9      	str	r1, [r7, #8]
 800e30a:	607a      	str	r2, [r7, #4]
 800e30c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800e30e:	2300      	movs	r3, #0
 800e310:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800e312:	68fb      	ldr	r3, [r7, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d10b      	bne.n	800e330 <xTimerGenericCommand+0x30>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	623b      	str	r3, [r7, #32]
}
 800e32a:	bf00      	nop
 800e32c:	bf00      	nop
 800e32e:	e7fd      	b.n	800e32c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800e330:	4b19      	ldr	r3, [pc, #100]	@ (800e398 <xTimerGenericCommand+0x98>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d02a      	beq.n	800e38e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	2b05      	cmp	r3, #5
 800e348:	dc18      	bgt.n	800e37c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e34a:	f7ff fdad 	bl	800dea8 <xTaskGetSchedulerState>
 800e34e:	4603      	mov	r3, r0
 800e350:	2b02      	cmp	r3, #2
 800e352:	d109      	bne.n	800e368 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e354:	4b10      	ldr	r3, [pc, #64]	@ (800e398 <xTimerGenericCommand+0x98>)
 800e356:	6818      	ldr	r0, [r3, #0]
 800e358:	f107 0110 	add.w	r1, r7, #16
 800e35c:	2300      	movs	r3, #0
 800e35e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e360:	f7fe fa22 	bl	800c7a8 <xQueueGenericSend>
 800e364:	6278      	str	r0, [r7, #36]	@ 0x24
 800e366:	e012      	b.n	800e38e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e368:	4b0b      	ldr	r3, [pc, #44]	@ (800e398 <xTimerGenericCommand+0x98>)
 800e36a:	6818      	ldr	r0, [r3, #0]
 800e36c:	f107 0110 	add.w	r1, r7, #16
 800e370:	2300      	movs	r3, #0
 800e372:	2200      	movs	r2, #0
 800e374:	f7fe fa18 	bl	800c7a8 <xQueueGenericSend>
 800e378:	6278      	str	r0, [r7, #36]	@ 0x24
 800e37a:	e008      	b.n	800e38e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e37c:	4b06      	ldr	r3, [pc, #24]	@ (800e398 <xTimerGenericCommand+0x98>)
 800e37e:	6818      	ldr	r0, [r3, #0]
 800e380:	f107 0110 	add.w	r1, r7, #16
 800e384:	2300      	movs	r3, #0
 800e386:	683a      	ldr	r2, [r7, #0]
 800e388:	f7fe fb10 	bl	800c9ac <xQueueGenericSendFromISR>
 800e38c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800e38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e390:	4618      	mov	r0, r3
 800e392:	3728      	adds	r7, #40	@ 0x28
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	24004e8c 	.word	0x24004e8c

0800e39c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b088      	sub	sp, #32
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a6:	4b23      	ldr	r3, [pc, #140]	@ (800e434 <prvProcessExpiredTimer+0x98>)
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	68db      	ldr	r3, [r3, #12]
 800e3ac:	68db      	ldr	r3, [r3, #12]
 800e3ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	3304      	adds	r3, #4
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7fd fd79 	bl	800beac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e3ba:	697b      	ldr	r3, [r7, #20]
 800e3bc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e3c0:	f003 0304 	and.w	r3, r3, #4
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d023      	beq.n	800e410 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e3c8:	697b      	ldr	r3, [r7, #20]
 800e3ca:	699a      	ldr	r2, [r3, #24]
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	18d1      	adds	r1, r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	683a      	ldr	r2, [r7, #0]
 800e3d4:	6978      	ldr	r0, [r7, #20]
 800e3d6:	f000 f8d5 	bl	800e584 <prvInsertTimerInActiveList>
 800e3da:	4603      	mov	r3, r0
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d020      	beq.n	800e422 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	9300      	str	r3, [sp, #0]
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	687a      	ldr	r2, [r7, #4]
 800e3e8:	2100      	movs	r1, #0
 800e3ea:	6978      	ldr	r0, [r7, #20]
 800e3ec:	f7ff ff88 	bl	800e300 <xTimerGenericCommand>
 800e3f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d114      	bne.n	800e422 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800e3f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3fc:	f383 8811 	msr	BASEPRI, r3
 800e400:	f3bf 8f6f 	isb	sy
 800e404:	f3bf 8f4f 	dsb	sy
 800e408:	60fb      	str	r3, [r7, #12]
}
 800e40a:	bf00      	nop
 800e40c:	bf00      	nop
 800e40e:	e7fd      	b.n	800e40c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e410:	697b      	ldr	r3, [r7, #20]
 800e412:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e416:	f023 0301 	bic.w	r3, r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	697b      	ldr	r3, [r7, #20]
 800e41e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e422:	697b      	ldr	r3, [r7, #20]
 800e424:	6a1b      	ldr	r3, [r3, #32]
 800e426:	6978      	ldr	r0, [r7, #20]
 800e428:	4798      	blx	r3
}
 800e42a:	bf00      	nop
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	24004e84 	.word	0x24004e84

0800e438 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e440:	f107 0308 	add.w	r3, r7, #8
 800e444:	4618      	mov	r0, r3
 800e446:	f000 f859 	bl	800e4fc <prvGetNextExpireTime>
 800e44a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	4619      	mov	r1, r3
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 f805 	bl	800e460 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800e456:	f000 f8d7 	bl	800e608 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800e45a:	bf00      	nop
 800e45c:	e7f0      	b.n	800e440 <prvTimerTask+0x8>
	...

0800e460 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800e460:	b580      	push	{r7, lr}
 800e462:	b084      	sub	sp, #16
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
 800e468:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800e46a:	f7ff f919 	bl	800d6a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e46e:	f107 0308 	add.w	r3, r7, #8
 800e472:	4618      	mov	r0, r3
 800e474:	f000 f866 	bl	800e544 <prvSampleTimeNow>
 800e478:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800e47a:	68bb      	ldr	r3, [r7, #8]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d130      	bne.n	800e4e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d10a      	bne.n	800e49c <prvProcessTimerOrBlockTask+0x3c>
 800e486:	687a      	ldr	r2, [r7, #4]
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d806      	bhi.n	800e49c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800e48e:	f7ff f915 	bl	800d6bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800e492:	68f9      	ldr	r1, [r7, #12]
 800e494:	6878      	ldr	r0, [r7, #4]
 800e496:	f7ff ff81 	bl	800e39c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800e49a:	e024      	b.n	800e4e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800e49c:	683b      	ldr	r3, [r7, #0]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d008      	beq.n	800e4b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800e4a2:	4b13      	ldr	r3, [pc, #76]	@ (800e4f0 <prvProcessTimerOrBlockTask+0x90>)
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d101      	bne.n	800e4b0 <prvProcessTimerOrBlockTask+0x50>
 800e4ac:	2301      	movs	r3, #1
 800e4ae:	e000      	b.n	800e4b2 <prvProcessTimerOrBlockTask+0x52>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e4b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e4f4 <prvProcessTimerOrBlockTask+0x94>)
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	687a      	ldr	r2, [r7, #4]
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	683a      	ldr	r2, [r7, #0]
 800e4c0:	4619      	mov	r1, r3
 800e4c2:	f7fe fe55 	bl	800d170 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800e4c6:	f7ff f8f9 	bl	800d6bc <xTaskResumeAll>
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	d10a      	bne.n	800e4e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800e4d0:	4b09      	ldr	r3, [pc, #36]	@ (800e4f8 <prvProcessTimerOrBlockTask+0x98>)
 800e4d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e4d6:	601a      	str	r2, [r3, #0]
 800e4d8:	f3bf 8f4f 	dsb	sy
 800e4dc:	f3bf 8f6f 	isb	sy
}
 800e4e0:	e001      	b.n	800e4e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800e4e2:	f7ff f8eb 	bl	800d6bc <xTaskResumeAll>
}
 800e4e6:	bf00      	nop
 800e4e8:	3710      	adds	r7, #16
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	bd80      	pop	{r7, pc}
 800e4ee:	bf00      	nop
 800e4f0:	24004e88 	.word	0x24004e88
 800e4f4:	24004e8c 	.word	0x24004e8c
 800e4f8:	e000ed04 	.word	0xe000ed04

0800e4fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800e4fc:	b480      	push	{r7}
 800e4fe:	b085      	sub	sp, #20
 800e500:	af00      	add	r7, sp, #0
 800e502:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e504:	4b0e      	ldr	r3, [pc, #56]	@ (800e540 <prvGetNextExpireTime+0x44>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	681b      	ldr	r3, [r3, #0]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	d101      	bne.n	800e512 <prvGetNextExpireTime+0x16>
 800e50e:	2201      	movs	r2, #1
 800e510:	e000      	b.n	800e514 <prvGetNextExpireTime+0x18>
 800e512:	2200      	movs	r2, #0
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d105      	bne.n	800e52c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e520:	4b07      	ldr	r3, [pc, #28]	@ (800e540 <prvGetNextExpireTime+0x44>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	e001      	b.n	800e530 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800e52c:	2300      	movs	r3, #0
 800e52e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800e530:	68fb      	ldr	r3, [r7, #12]
}
 800e532:	4618      	mov	r0, r3
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr
 800e53e:	bf00      	nop
 800e540:	24004e84 	.word	0x24004e84

0800e544 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b084      	sub	sp, #16
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800e54c:	f7ff f954 	bl	800d7f8 <xTaskGetTickCount>
 800e550:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800e552:	4b0b      	ldr	r3, [pc, #44]	@ (800e580 <prvSampleTimeNow+0x3c>)
 800e554:	681b      	ldr	r3, [r3, #0]
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	429a      	cmp	r2, r3
 800e55a:	d205      	bcs.n	800e568 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800e55c:	f000 f93a 	bl	800e7d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	601a      	str	r2, [r3, #0]
 800e566:	e002      	b.n	800e56e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	2200      	movs	r2, #0
 800e56c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800e56e:	4a04      	ldr	r2, [pc, #16]	@ (800e580 <prvSampleTimeNow+0x3c>)
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800e574:	68fb      	ldr	r3, [r7, #12]
}
 800e576:	4618      	mov	r0, r3
 800e578:	3710      	adds	r7, #16
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}
 800e57e:	bf00      	nop
 800e580:	24004e94 	.word	0x24004e94

0800e584 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b086      	sub	sp, #24
 800e588:	af00      	add	r7, sp, #0
 800e58a:	60f8      	str	r0, [r7, #12]
 800e58c:	60b9      	str	r1, [r7, #8]
 800e58e:	607a      	str	r2, [r7, #4]
 800e590:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800e592:	2300      	movs	r3, #0
 800e594:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	68ba      	ldr	r2, [r7, #8]
 800e59a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	68fa      	ldr	r2, [r7, #12]
 800e5a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	429a      	cmp	r2, r3
 800e5a8:	d812      	bhi.n	800e5d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5aa:	687a      	ldr	r2, [r7, #4]
 800e5ac:	683b      	ldr	r3, [r7, #0]
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	699b      	ldr	r3, [r3, #24]
 800e5b4:	429a      	cmp	r2, r3
 800e5b6:	d302      	bcc.n	800e5be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800e5b8:	2301      	movs	r3, #1
 800e5ba:	617b      	str	r3, [r7, #20]
 800e5bc:	e01b      	b.n	800e5f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e5be:	4b10      	ldr	r3, [pc, #64]	@ (800e600 <prvInsertTimerInActiveList+0x7c>)
 800e5c0:	681a      	ldr	r2, [r3, #0]
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	3304      	adds	r3, #4
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4610      	mov	r0, r2
 800e5ca:	f7fd fc36 	bl	800be3a <vListInsert>
 800e5ce:	e012      	b.n	800e5f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d206      	bcs.n	800e5e6 <prvInsertTimerInActiveList+0x62>
 800e5d8:	68ba      	ldr	r2, [r7, #8]
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d302      	bcc.n	800e5e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800e5e0:	2301      	movs	r3, #1
 800e5e2:	617b      	str	r3, [r7, #20]
 800e5e4:	e007      	b.n	800e5f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e5e6:	4b07      	ldr	r3, [pc, #28]	@ (800e604 <prvInsertTimerInActiveList+0x80>)
 800e5e8:	681a      	ldr	r2, [r3, #0]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	3304      	adds	r3, #4
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	4610      	mov	r0, r2
 800e5f2:	f7fd fc22 	bl	800be3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800e5f6:	697b      	ldr	r3, [r7, #20]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	24004e88 	.word	0x24004e88
 800e604:	24004e84 	.word	0x24004e84

0800e608 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b08e      	sub	sp, #56	@ 0x38
 800e60c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e60e:	e0ce      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	2b00      	cmp	r3, #0
 800e614:	da19      	bge.n	800e64a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800e616:	1d3b      	adds	r3, r7, #4
 800e618:	3304      	adds	r3, #4
 800e61a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800e61c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d10b      	bne.n	800e63a <prvProcessReceivedCommands+0x32>
	__asm volatile
 800e622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e626:	f383 8811 	msr	BASEPRI, r3
 800e62a:	f3bf 8f6f 	isb	sy
 800e62e:	f3bf 8f4f 	dsb	sy
 800e632:	61fb      	str	r3, [r7, #28]
}
 800e634:	bf00      	nop
 800e636:	bf00      	nop
 800e638:	e7fd      	b.n	800e636 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800e63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e640:	6850      	ldr	r0, [r2, #4]
 800e642:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e644:	6892      	ldr	r2, [r2, #8]
 800e646:	4611      	mov	r1, r2
 800e648:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	f2c0 80ae 	blt.w	800e7ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800e656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e658:	695b      	ldr	r3, [r3, #20]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d004      	beq.n	800e668 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e660:	3304      	adds	r3, #4
 800e662:	4618      	mov	r0, r3
 800e664:	f7fd fc22 	bl	800beac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e668:	463b      	mov	r3, r7
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7ff ff6a 	bl	800e544 <prvSampleTimeNow>
 800e670:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	2b09      	cmp	r3, #9
 800e676:	f200 8097 	bhi.w	800e7a8 <prvProcessReceivedCommands+0x1a0>
 800e67a:	a201      	add	r2, pc, #4	@ (adr r2, 800e680 <prvProcessReceivedCommands+0x78>)
 800e67c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e680:	0800e6a9 	.word	0x0800e6a9
 800e684:	0800e6a9 	.word	0x0800e6a9
 800e688:	0800e6a9 	.word	0x0800e6a9
 800e68c:	0800e71f 	.word	0x0800e71f
 800e690:	0800e733 	.word	0x0800e733
 800e694:	0800e77f 	.word	0x0800e77f
 800e698:	0800e6a9 	.word	0x0800e6a9
 800e69c:	0800e6a9 	.word	0x0800e6a9
 800e6a0:	0800e71f 	.word	0x0800e71f
 800e6a4:	0800e733 	.word	0x0800e733
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6ae:	f043 0301 	orr.w	r3, r3, #1
 800e6b2:	b2da      	uxtb	r2, r3
 800e6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800e6ba:	68ba      	ldr	r2, [r7, #8]
 800e6bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6be:	699b      	ldr	r3, [r3, #24]
 800e6c0:	18d1      	adds	r1, r2, r3
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e6c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6c8:	f7ff ff5c 	bl	800e584 <prvInsertTimerInActiveList>
 800e6cc:	4603      	mov	r3, r0
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d06c      	beq.n	800e7ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6d4:	6a1b      	ldr	r3, [r3, #32]
 800e6d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e6da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e6e0:	f003 0304 	and.w	r3, r3, #4
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d061      	beq.n	800e7ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800e6e8:	68ba      	ldr	r2, [r7, #8]
 800e6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e6ec:	699b      	ldr	r3, [r3, #24]
 800e6ee:	441a      	add	r2, r3
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	2100      	movs	r1, #0
 800e6f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e6fa:	f7ff fe01 	bl	800e300 <xTimerGenericCommand>
 800e6fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800e700:	6a3b      	ldr	r3, [r7, #32]
 800e702:	2b00      	cmp	r3, #0
 800e704:	d152      	bne.n	800e7ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800e706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70a:	f383 8811 	msr	BASEPRI, r3
 800e70e:	f3bf 8f6f 	isb	sy
 800e712:	f3bf 8f4f 	dsb	sy
 800e716:	61bb      	str	r3, [r7, #24]
}
 800e718:	bf00      	nop
 800e71a:	bf00      	nop
 800e71c:	e7fd      	b.n	800e71a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e720:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e724:	f023 0301 	bic.w	r3, r3, #1
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e72c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e730:	e03d      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e738:	f043 0301 	orr.w	r3, r3, #1
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e740:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e744:	68ba      	ldr	r2, [r7, #8]
 800e746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e748:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e74a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d10b      	bne.n	800e76a <prvProcessReceivedCommands+0x162>
	__asm volatile
 800e752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e756:	f383 8811 	msr	BASEPRI, r3
 800e75a:	f3bf 8f6f 	isb	sy
 800e75e:	f3bf 8f4f 	dsb	sy
 800e762:	617b      	str	r3, [r7, #20]
}
 800e764:	bf00      	nop
 800e766:	bf00      	nop
 800e768:	e7fd      	b.n	800e766 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e76c:	699a      	ldr	r2, [r3, #24]
 800e76e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e770:	18d1      	adds	r1, r2, r3
 800e772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e776:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e778:	f7ff ff04 	bl	800e584 <prvInsertTimerInActiveList>
					break;
 800e77c:	e017      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e780:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e784:	f003 0302 	and.w	r3, r3, #2
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d103      	bne.n	800e794 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800e78c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e78e:	f7fd f9e3 	bl	800bb58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e792:	e00c      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e796:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e79a:	f023 0301 	bic.w	r3, r3, #1
 800e79e:	b2da      	uxtb	r2, r3
 800e7a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800e7a6:	e002      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800e7a8:	bf00      	nop
 800e7aa:	e000      	b.n	800e7ae <prvProcessReceivedCommands+0x1a6>
					break;
 800e7ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e7ae:	4b08      	ldr	r3, [pc, #32]	@ (800e7d0 <prvProcessReceivedCommands+0x1c8>)
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	1d39      	adds	r1, r7, #4
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fe f996 	bl	800cae8 <xQueueReceive>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	f47f af26 	bne.w	800e610 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800e7c4:	bf00      	nop
 800e7c6:	bf00      	nop
 800e7c8:	3730      	adds	r7, #48	@ 0x30
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
 800e7ce:	bf00      	nop
 800e7d0:	24004e8c 	.word	0x24004e8c

0800e7d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e7d4:	b580      	push	{r7, lr}
 800e7d6:	b088      	sub	sp, #32
 800e7d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e7da:	e049      	b.n	800e870 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e7dc:	4b2e      	ldr	r3, [pc, #184]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	68db      	ldr	r3, [r3, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7e6:	4b2c      	ldr	r3, [pc, #176]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	68db      	ldr	r3, [r3, #12]
 800e7ec:	68db      	ldr	r3, [r3, #12]
 800e7ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	3304      	adds	r3, #4
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f7fd fb59 	bl	800beac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	6a1b      	ldr	r3, [r3, #32]
 800e7fe:	68f8      	ldr	r0, [r7, #12]
 800e800:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800e808:	f003 0304 	and.w	r3, r3, #4
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d02f      	beq.n	800e870 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	699b      	ldr	r3, [r3, #24]
 800e814:	693a      	ldr	r2, [r7, #16]
 800e816:	4413      	add	r3, r2
 800e818:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e81a:	68ba      	ldr	r2, [r7, #8]
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	429a      	cmp	r2, r3
 800e820:	d90e      	bls.n	800e840 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	68ba      	ldr	r2, [r7, #8]
 800e826:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	68fa      	ldr	r2, [r7, #12]
 800e82c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e82e:	4b1a      	ldr	r3, [pc, #104]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e830:	681a      	ldr	r2, [r3, #0]
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	3304      	adds	r3, #4
 800e836:	4619      	mov	r1, r3
 800e838:	4610      	mov	r0, r2
 800e83a:	f7fd fafe 	bl	800be3a <vListInsert>
 800e83e:	e017      	b.n	800e870 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e840:	2300      	movs	r3, #0
 800e842:	9300      	str	r3, [sp, #0]
 800e844:	2300      	movs	r3, #0
 800e846:	693a      	ldr	r2, [r7, #16]
 800e848:	2100      	movs	r1, #0
 800e84a:	68f8      	ldr	r0, [r7, #12]
 800e84c:	f7ff fd58 	bl	800e300 <xTimerGenericCommand>
 800e850:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d10b      	bne.n	800e870 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800e858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e85c:	f383 8811 	msr	BASEPRI, r3
 800e860:	f3bf 8f6f 	isb	sy
 800e864:	f3bf 8f4f 	dsb	sy
 800e868:	603b      	str	r3, [r7, #0]
}
 800e86a:	bf00      	nop
 800e86c:	bf00      	nop
 800e86e:	e7fd      	b.n	800e86c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e870:	4b09      	ldr	r3, [pc, #36]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d1b0      	bne.n	800e7dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e87a:	4b07      	ldr	r3, [pc, #28]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e880:	4b06      	ldr	r3, [pc, #24]	@ (800e89c <prvSwitchTimerLists+0xc8>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	4a04      	ldr	r2, [pc, #16]	@ (800e898 <prvSwitchTimerLists+0xc4>)
 800e886:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e888:	4a04      	ldr	r2, [pc, #16]	@ (800e89c <prvSwitchTimerLists+0xc8>)
 800e88a:	697b      	ldr	r3, [r7, #20]
 800e88c:	6013      	str	r3, [r2, #0]
}
 800e88e:	bf00      	nop
 800e890:	3718      	adds	r7, #24
 800e892:	46bd      	mov	sp, r7
 800e894:	bd80      	pop	{r7, pc}
 800e896:	bf00      	nop
 800e898:	24004e84 	.word	0x24004e84
 800e89c:	24004e88 	.word	0x24004e88

0800e8a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b082      	sub	sp, #8
 800e8a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e8a6:	f7fd fc5f 	bl	800c168 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e8aa:	4b15      	ldr	r3, [pc, #84]	@ (800e900 <prvCheckForValidListAndQueue+0x60>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d120      	bne.n	800e8f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e8b2:	4814      	ldr	r0, [pc, #80]	@ (800e904 <prvCheckForValidListAndQueue+0x64>)
 800e8b4:	f7fd fa70 	bl	800bd98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e8b8:	4813      	ldr	r0, [pc, #76]	@ (800e908 <prvCheckForValidListAndQueue+0x68>)
 800e8ba:	f7fd fa6d 	bl	800bd98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e8be:	4b13      	ldr	r3, [pc, #76]	@ (800e90c <prvCheckForValidListAndQueue+0x6c>)
 800e8c0:	4a10      	ldr	r2, [pc, #64]	@ (800e904 <prvCheckForValidListAndQueue+0x64>)
 800e8c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e8c4:	4b12      	ldr	r3, [pc, #72]	@ (800e910 <prvCheckForValidListAndQueue+0x70>)
 800e8c6:	4a10      	ldr	r2, [pc, #64]	@ (800e908 <prvCheckForValidListAndQueue+0x68>)
 800e8c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e8ca:	2300      	movs	r3, #0
 800e8cc:	9300      	str	r3, [sp, #0]
 800e8ce:	4b11      	ldr	r3, [pc, #68]	@ (800e914 <prvCheckForValidListAndQueue+0x74>)
 800e8d0:	4a11      	ldr	r2, [pc, #68]	@ (800e918 <prvCheckForValidListAndQueue+0x78>)
 800e8d2:	2110      	movs	r1, #16
 800e8d4:	200a      	movs	r0, #10
 800e8d6:	f7fd fdd3 	bl	800c480 <xQueueGenericCreateStatic>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	4a08      	ldr	r2, [pc, #32]	@ (800e900 <prvCheckForValidListAndQueue+0x60>)
 800e8de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e8e0:	4b07      	ldr	r3, [pc, #28]	@ (800e900 <prvCheckForValidListAndQueue+0x60>)
 800e8e2:	681b      	ldr	r3, [r3, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d005      	beq.n	800e8f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e8e8:	4b05      	ldr	r3, [pc, #20]	@ (800e900 <prvCheckForValidListAndQueue+0x60>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	490b      	ldr	r1, [pc, #44]	@ (800e91c <prvCheckForValidListAndQueue+0x7c>)
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7fe fc14 	bl	800d11c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e8f4:	f7fd fc6a 	bl	800c1cc <vPortExitCritical>
}
 800e8f8:	bf00      	nop
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}
 800e8fe:	bf00      	nop
 800e900:	24004e8c 	.word	0x24004e8c
 800e904:	24004e5c 	.word	0x24004e5c
 800e908:	24004e70 	.word	0x24004e70
 800e90c:	24004e84 	.word	0x24004e84
 800e910:	24004e88 	.word	0x24004e88
 800e914:	24004f38 	.word	0x24004f38
 800e918:	24004e98 	.word	0x24004e98
 800e91c:	08010080 	.word	0x08010080

0800e920 <std>:
 800e920:	2300      	movs	r3, #0
 800e922:	b510      	push	{r4, lr}
 800e924:	4604      	mov	r4, r0
 800e926:	e9c0 3300 	strd	r3, r3, [r0]
 800e92a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e92e:	6083      	str	r3, [r0, #8]
 800e930:	8181      	strh	r1, [r0, #12]
 800e932:	6643      	str	r3, [r0, #100]	@ 0x64
 800e934:	81c2      	strh	r2, [r0, #14]
 800e936:	6183      	str	r3, [r0, #24]
 800e938:	4619      	mov	r1, r3
 800e93a:	2208      	movs	r2, #8
 800e93c:	305c      	adds	r0, #92	@ 0x5c
 800e93e:	f000 f914 	bl	800eb6a <memset>
 800e942:	4b0d      	ldr	r3, [pc, #52]	@ (800e978 <std+0x58>)
 800e944:	6263      	str	r3, [r4, #36]	@ 0x24
 800e946:	4b0d      	ldr	r3, [pc, #52]	@ (800e97c <std+0x5c>)
 800e948:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e94a:	4b0d      	ldr	r3, [pc, #52]	@ (800e980 <std+0x60>)
 800e94c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e94e:	4b0d      	ldr	r3, [pc, #52]	@ (800e984 <std+0x64>)
 800e950:	6323      	str	r3, [r4, #48]	@ 0x30
 800e952:	4b0d      	ldr	r3, [pc, #52]	@ (800e988 <std+0x68>)
 800e954:	6224      	str	r4, [r4, #32]
 800e956:	429c      	cmp	r4, r3
 800e958:	d006      	beq.n	800e968 <std+0x48>
 800e95a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e95e:	4294      	cmp	r4, r2
 800e960:	d002      	beq.n	800e968 <std+0x48>
 800e962:	33d0      	adds	r3, #208	@ 0xd0
 800e964:	429c      	cmp	r4, r3
 800e966:	d105      	bne.n	800e974 <std+0x54>
 800e968:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e96c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e970:	f000 ba5c 	b.w	800ee2c <__retarget_lock_init_recursive>
 800e974:	bd10      	pop	{r4, pc}
 800e976:	bf00      	nop
 800e978:	0800eae5 	.word	0x0800eae5
 800e97c:	0800eb07 	.word	0x0800eb07
 800e980:	0800eb3f 	.word	0x0800eb3f
 800e984:	0800eb63 	.word	0x0800eb63
 800e988:	24004f88 	.word	0x24004f88

0800e98c <stdio_exit_handler>:
 800e98c:	4a02      	ldr	r2, [pc, #8]	@ (800e998 <stdio_exit_handler+0xc>)
 800e98e:	4903      	ldr	r1, [pc, #12]	@ (800e99c <stdio_exit_handler+0x10>)
 800e990:	4803      	ldr	r0, [pc, #12]	@ (800e9a0 <stdio_exit_handler+0x14>)
 800e992:	f000 b869 	b.w	800ea68 <_fwalk_sglue>
 800e996:	bf00      	nop
 800e998:	2400002c 	.word	0x2400002c
 800e99c:	0800f761 	.word	0x0800f761
 800e9a0:	2400003c 	.word	0x2400003c

0800e9a4 <cleanup_stdio>:
 800e9a4:	6841      	ldr	r1, [r0, #4]
 800e9a6:	4b0c      	ldr	r3, [pc, #48]	@ (800e9d8 <cleanup_stdio+0x34>)
 800e9a8:	4299      	cmp	r1, r3
 800e9aa:	b510      	push	{r4, lr}
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	d001      	beq.n	800e9b4 <cleanup_stdio+0x10>
 800e9b0:	f000 fed6 	bl	800f760 <_fflush_r>
 800e9b4:	68a1      	ldr	r1, [r4, #8]
 800e9b6:	4b09      	ldr	r3, [pc, #36]	@ (800e9dc <cleanup_stdio+0x38>)
 800e9b8:	4299      	cmp	r1, r3
 800e9ba:	d002      	beq.n	800e9c2 <cleanup_stdio+0x1e>
 800e9bc:	4620      	mov	r0, r4
 800e9be:	f000 fecf 	bl	800f760 <_fflush_r>
 800e9c2:	68e1      	ldr	r1, [r4, #12]
 800e9c4:	4b06      	ldr	r3, [pc, #24]	@ (800e9e0 <cleanup_stdio+0x3c>)
 800e9c6:	4299      	cmp	r1, r3
 800e9c8:	d004      	beq.n	800e9d4 <cleanup_stdio+0x30>
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d0:	f000 bec6 	b.w	800f760 <_fflush_r>
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	bf00      	nop
 800e9d8:	24004f88 	.word	0x24004f88
 800e9dc:	24004ff0 	.word	0x24004ff0
 800e9e0:	24005058 	.word	0x24005058

0800e9e4 <global_stdio_init.part.0>:
 800e9e4:	b510      	push	{r4, lr}
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea14 <global_stdio_init.part.0+0x30>)
 800e9e8:	4c0b      	ldr	r4, [pc, #44]	@ (800ea18 <global_stdio_init.part.0+0x34>)
 800e9ea:	4a0c      	ldr	r2, [pc, #48]	@ (800ea1c <global_stdio_init.part.0+0x38>)
 800e9ec:	601a      	str	r2, [r3, #0]
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	2104      	movs	r1, #4
 800e9f4:	f7ff ff94 	bl	800e920 <std>
 800e9f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e9fc:	2201      	movs	r2, #1
 800e9fe:	2109      	movs	r1, #9
 800ea00:	f7ff ff8e 	bl	800e920 <std>
 800ea04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ea08:	2202      	movs	r2, #2
 800ea0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea0e:	2112      	movs	r1, #18
 800ea10:	f7ff bf86 	b.w	800e920 <std>
 800ea14:	240050c0 	.word	0x240050c0
 800ea18:	24004f88 	.word	0x24004f88
 800ea1c:	0800e98d 	.word	0x0800e98d

0800ea20 <__sfp_lock_acquire>:
 800ea20:	4801      	ldr	r0, [pc, #4]	@ (800ea28 <__sfp_lock_acquire+0x8>)
 800ea22:	f000 ba04 	b.w	800ee2e <__retarget_lock_acquire_recursive>
 800ea26:	bf00      	nop
 800ea28:	240050c9 	.word	0x240050c9

0800ea2c <__sfp_lock_release>:
 800ea2c:	4801      	ldr	r0, [pc, #4]	@ (800ea34 <__sfp_lock_release+0x8>)
 800ea2e:	f000 b9ff 	b.w	800ee30 <__retarget_lock_release_recursive>
 800ea32:	bf00      	nop
 800ea34:	240050c9 	.word	0x240050c9

0800ea38 <__sinit>:
 800ea38:	b510      	push	{r4, lr}
 800ea3a:	4604      	mov	r4, r0
 800ea3c:	f7ff fff0 	bl	800ea20 <__sfp_lock_acquire>
 800ea40:	6a23      	ldr	r3, [r4, #32]
 800ea42:	b11b      	cbz	r3, 800ea4c <__sinit+0x14>
 800ea44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea48:	f7ff bff0 	b.w	800ea2c <__sfp_lock_release>
 800ea4c:	4b04      	ldr	r3, [pc, #16]	@ (800ea60 <__sinit+0x28>)
 800ea4e:	6223      	str	r3, [r4, #32]
 800ea50:	4b04      	ldr	r3, [pc, #16]	@ (800ea64 <__sinit+0x2c>)
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d1f5      	bne.n	800ea44 <__sinit+0xc>
 800ea58:	f7ff ffc4 	bl	800e9e4 <global_stdio_init.part.0>
 800ea5c:	e7f2      	b.n	800ea44 <__sinit+0xc>
 800ea5e:	bf00      	nop
 800ea60:	0800e9a5 	.word	0x0800e9a5
 800ea64:	240050c0 	.word	0x240050c0

0800ea68 <_fwalk_sglue>:
 800ea68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea6c:	4607      	mov	r7, r0
 800ea6e:	4688      	mov	r8, r1
 800ea70:	4614      	mov	r4, r2
 800ea72:	2600      	movs	r6, #0
 800ea74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea78:	f1b9 0901 	subs.w	r9, r9, #1
 800ea7c:	d505      	bpl.n	800ea8a <_fwalk_sglue+0x22>
 800ea7e:	6824      	ldr	r4, [r4, #0]
 800ea80:	2c00      	cmp	r4, #0
 800ea82:	d1f7      	bne.n	800ea74 <_fwalk_sglue+0xc>
 800ea84:	4630      	mov	r0, r6
 800ea86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8a:	89ab      	ldrh	r3, [r5, #12]
 800ea8c:	2b01      	cmp	r3, #1
 800ea8e:	d907      	bls.n	800eaa0 <_fwalk_sglue+0x38>
 800ea90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea94:	3301      	adds	r3, #1
 800ea96:	d003      	beq.n	800eaa0 <_fwalk_sglue+0x38>
 800ea98:	4629      	mov	r1, r5
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c0      	blx	r8
 800ea9e:	4306      	orrs	r6, r0
 800eaa0:	3568      	adds	r5, #104	@ 0x68
 800eaa2:	e7e9      	b.n	800ea78 <_fwalk_sglue+0x10>

0800eaa4 <siprintf>:
 800eaa4:	b40e      	push	{r1, r2, r3}
 800eaa6:	b500      	push	{lr}
 800eaa8:	b09c      	sub	sp, #112	@ 0x70
 800eaaa:	ab1d      	add	r3, sp, #116	@ 0x74
 800eaac:	9002      	str	r0, [sp, #8]
 800eaae:	9006      	str	r0, [sp, #24]
 800eab0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800eab4:	4809      	ldr	r0, [pc, #36]	@ (800eadc <siprintf+0x38>)
 800eab6:	9107      	str	r1, [sp, #28]
 800eab8:	9104      	str	r1, [sp, #16]
 800eaba:	4909      	ldr	r1, [pc, #36]	@ (800eae0 <siprintf+0x3c>)
 800eabc:	f853 2b04 	ldr.w	r2, [r3], #4
 800eac0:	9105      	str	r1, [sp, #20]
 800eac2:	6800      	ldr	r0, [r0, #0]
 800eac4:	9301      	str	r3, [sp, #4]
 800eac6:	a902      	add	r1, sp, #8
 800eac8:	f000 fb3c 	bl	800f144 <_svfiprintf_r>
 800eacc:	9b02      	ldr	r3, [sp, #8]
 800eace:	2200      	movs	r2, #0
 800ead0:	701a      	strb	r2, [r3, #0]
 800ead2:	b01c      	add	sp, #112	@ 0x70
 800ead4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ead8:	b003      	add	sp, #12
 800eada:	4770      	bx	lr
 800eadc:	24000038 	.word	0x24000038
 800eae0:	ffff0208 	.word	0xffff0208

0800eae4 <__sread>:
 800eae4:	b510      	push	{r4, lr}
 800eae6:	460c      	mov	r4, r1
 800eae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eaec:	f000 f950 	bl	800ed90 <_read_r>
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	bfab      	itete	ge
 800eaf4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800eaf6:	89a3      	ldrhlt	r3, [r4, #12]
 800eaf8:	181b      	addge	r3, r3, r0
 800eafa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800eafe:	bfac      	ite	ge
 800eb00:	6563      	strge	r3, [r4, #84]	@ 0x54
 800eb02:	81a3      	strhlt	r3, [r4, #12]
 800eb04:	bd10      	pop	{r4, pc}

0800eb06 <__swrite>:
 800eb06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0a:	461f      	mov	r7, r3
 800eb0c:	898b      	ldrh	r3, [r1, #12]
 800eb0e:	05db      	lsls	r3, r3, #23
 800eb10:	4605      	mov	r5, r0
 800eb12:	460c      	mov	r4, r1
 800eb14:	4616      	mov	r6, r2
 800eb16:	d505      	bpl.n	800eb24 <__swrite+0x1e>
 800eb18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb1c:	2302      	movs	r3, #2
 800eb1e:	2200      	movs	r2, #0
 800eb20:	f000 f924 	bl	800ed6c <_lseek_r>
 800eb24:	89a3      	ldrh	r3, [r4, #12]
 800eb26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800eb2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800eb2e:	81a3      	strh	r3, [r4, #12]
 800eb30:	4632      	mov	r2, r6
 800eb32:	463b      	mov	r3, r7
 800eb34:	4628      	mov	r0, r5
 800eb36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eb3a:	f000 b93b 	b.w	800edb4 <_write_r>

0800eb3e <__sseek>:
 800eb3e:	b510      	push	{r4, lr}
 800eb40:	460c      	mov	r4, r1
 800eb42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb46:	f000 f911 	bl	800ed6c <_lseek_r>
 800eb4a:	1c43      	adds	r3, r0, #1
 800eb4c:	89a3      	ldrh	r3, [r4, #12]
 800eb4e:	bf15      	itete	ne
 800eb50:	6560      	strne	r0, [r4, #84]	@ 0x54
 800eb52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800eb56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800eb5a:	81a3      	strheq	r3, [r4, #12]
 800eb5c:	bf18      	it	ne
 800eb5e:	81a3      	strhne	r3, [r4, #12]
 800eb60:	bd10      	pop	{r4, pc}

0800eb62 <__sclose>:
 800eb62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb66:	f000 b89b 	b.w	800eca0 <_close_r>

0800eb6a <memset>:
 800eb6a:	4402      	add	r2, r0
 800eb6c:	4603      	mov	r3, r0
 800eb6e:	4293      	cmp	r3, r2
 800eb70:	d100      	bne.n	800eb74 <memset+0xa>
 800eb72:	4770      	bx	lr
 800eb74:	f803 1b01 	strb.w	r1, [r3], #1
 800eb78:	e7f9      	b.n	800eb6e <memset+0x4>

0800eb7a <strchr>:
 800eb7a:	b2c9      	uxtb	r1, r1
 800eb7c:	4603      	mov	r3, r0
 800eb7e:	4618      	mov	r0, r3
 800eb80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb84:	b112      	cbz	r2, 800eb8c <strchr+0x12>
 800eb86:	428a      	cmp	r2, r1
 800eb88:	d1f9      	bne.n	800eb7e <strchr+0x4>
 800eb8a:	4770      	bx	lr
 800eb8c:	2900      	cmp	r1, #0
 800eb8e:	bf18      	it	ne
 800eb90:	2000      	movne	r0, #0
 800eb92:	4770      	bx	lr

0800eb94 <strncpy>:
 800eb94:	b510      	push	{r4, lr}
 800eb96:	3901      	subs	r1, #1
 800eb98:	4603      	mov	r3, r0
 800eb9a:	b132      	cbz	r2, 800ebaa <strncpy+0x16>
 800eb9c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eba0:	f803 4b01 	strb.w	r4, [r3], #1
 800eba4:	3a01      	subs	r2, #1
 800eba6:	2c00      	cmp	r4, #0
 800eba8:	d1f7      	bne.n	800eb9a <strncpy+0x6>
 800ebaa:	441a      	add	r2, r3
 800ebac:	2100      	movs	r1, #0
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d100      	bne.n	800ebb4 <strncpy+0x20>
 800ebb2:	bd10      	pop	{r4, pc}
 800ebb4:	f803 1b01 	strb.w	r1, [r3], #1
 800ebb8:	e7f9      	b.n	800ebae <strncpy+0x1a>
	...

0800ebbc <strtok>:
 800ebbc:	4b16      	ldr	r3, [pc, #88]	@ (800ec18 <strtok+0x5c>)
 800ebbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebc2:	681f      	ldr	r7, [r3, #0]
 800ebc4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800ebc6:	4605      	mov	r5, r0
 800ebc8:	460e      	mov	r6, r1
 800ebca:	b9ec      	cbnz	r4, 800ec08 <strtok+0x4c>
 800ebcc:	2050      	movs	r0, #80	@ 0x50
 800ebce:	f000 f9a7 	bl	800ef20 <malloc>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	6478      	str	r0, [r7, #68]	@ 0x44
 800ebd6:	b920      	cbnz	r0, 800ebe2 <strtok+0x26>
 800ebd8:	4b10      	ldr	r3, [pc, #64]	@ (800ec1c <strtok+0x60>)
 800ebda:	4811      	ldr	r0, [pc, #68]	@ (800ec20 <strtok+0x64>)
 800ebdc:	215b      	movs	r1, #91	@ 0x5b
 800ebde:	f000 f937 	bl	800ee50 <__assert_func>
 800ebe2:	e9c0 4400 	strd	r4, r4, [r0]
 800ebe6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ebea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ebee:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800ebf2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800ebf6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800ebfa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800ebfe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800ec02:	6184      	str	r4, [r0, #24]
 800ec04:	7704      	strb	r4, [r0, #28]
 800ec06:	6244      	str	r4, [r0, #36]	@ 0x24
 800ec08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ec0a:	4631      	mov	r1, r6
 800ec0c:	4628      	mov	r0, r5
 800ec0e:	2301      	movs	r3, #1
 800ec10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ec14:	f000 b806 	b.w	800ec24 <__strtok_r>
 800ec18:	24000038 	.word	0x24000038
 800ec1c:	08010174 	.word	0x08010174
 800ec20:	0801018b 	.word	0x0801018b

0800ec24 <__strtok_r>:
 800ec24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec26:	4604      	mov	r4, r0
 800ec28:	b908      	cbnz	r0, 800ec2e <__strtok_r+0xa>
 800ec2a:	6814      	ldr	r4, [r2, #0]
 800ec2c:	b144      	cbz	r4, 800ec40 <__strtok_r+0x1c>
 800ec2e:	4620      	mov	r0, r4
 800ec30:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ec34:	460f      	mov	r7, r1
 800ec36:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ec3a:	b91e      	cbnz	r6, 800ec44 <__strtok_r+0x20>
 800ec3c:	b965      	cbnz	r5, 800ec58 <__strtok_r+0x34>
 800ec3e:	6015      	str	r5, [r2, #0]
 800ec40:	2000      	movs	r0, #0
 800ec42:	e005      	b.n	800ec50 <__strtok_r+0x2c>
 800ec44:	42b5      	cmp	r5, r6
 800ec46:	d1f6      	bne.n	800ec36 <__strtok_r+0x12>
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d1f0      	bne.n	800ec2e <__strtok_r+0xa>
 800ec4c:	6014      	str	r4, [r2, #0]
 800ec4e:	7003      	strb	r3, [r0, #0]
 800ec50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec52:	461c      	mov	r4, r3
 800ec54:	e00c      	b.n	800ec70 <__strtok_r+0x4c>
 800ec56:	b915      	cbnz	r5, 800ec5e <__strtok_r+0x3a>
 800ec58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec5c:	460e      	mov	r6, r1
 800ec5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ec62:	42ab      	cmp	r3, r5
 800ec64:	d1f7      	bne.n	800ec56 <__strtok_r+0x32>
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d0f3      	beq.n	800ec52 <__strtok_r+0x2e>
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ec70:	6014      	str	r4, [r2, #0]
 800ec72:	e7ed      	b.n	800ec50 <__strtok_r+0x2c>

0800ec74 <strstr>:
 800ec74:	780a      	ldrb	r2, [r1, #0]
 800ec76:	b570      	push	{r4, r5, r6, lr}
 800ec78:	b96a      	cbnz	r2, 800ec96 <strstr+0x22>
 800ec7a:	bd70      	pop	{r4, r5, r6, pc}
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d109      	bne.n	800ec94 <strstr+0x20>
 800ec80:	460c      	mov	r4, r1
 800ec82:	4605      	mov	r5, r0
 800ec84:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d0f6      	beq.n	800ec7a <strstr+0x6>
 800ec8c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ec90:	429e      	cmp	r6, r3
 800ec92:	d0f7      	beq.n	800ec84 <strstr+0x10>
 800ec94:	3001      	adds	r0, #1
 800ec96:	7803      	ldrb	r3, [r0, #0]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d1ef      	bne.n	800ec7c <strstr+0x8>
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	e7ec      	b.n	800ec7a <strstr+0x6>

0800eca0 <_close_r>:
 800eca0:	b538      	push	{r3, r4, r5, lr}
 800eca2:	4d06      	ldr	r5, [pc, #24]	@ (800ecbc <_close_r+0x1c>)
 800eca4:	2300      	movs	r3, #0
 800eca6:	4604      	mov	r4, r0
 800eca8:	4608      	mov	r0, r1
 800ecaa:	602b      	str	r3, [r5, #0]
 800ecac:	f7f3 f8fe 	bl	8001eac <_close>
 800ecb0:	1c43      	adds	r3, r0, #1
 800ecb2:	d102      	bne.n	800ecba <_close_r+0x1a>
 800ecb4:	682b      	ldr	r3, [r5, #0]
 800ecb6:	b103      	cbz	r3, 800ecba <_close_r+0x1a>
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	bd38      	pop	{r3, r4, r5, pc}
 800ecbc:	240050c4 	.word	0x240050c4

0800ecc0 <_reclaim_reent>:
 800ecc0:	4b29      	ldr	r3, [pc, #164]	@ (800ed68 <_reclaim_reent+0xa8>)
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	4283      	cmp	r3, r0
 800ecc6:	b570      	push	{r4, r5, r6, lr}
 800ecc8:	4604      	mov	r4, r0
 800ecca:	d04b      	beq.n	800ed64 <_reclaim_reent+0xa4>
 800eccc:	69c3      	ldr	r3, [r0, #28]
 800ecce:	b1ab      	cbz	r3, 800ecfc <_reclaim_reent+0x3c>
 800ecd0:	68db      	ldr	r3, [r3, #12]
 800ecd2:	b16b      	cbz	r3, 800ecf0 <_reclaim_reent+0x30>
 800ecd4:	2500      	movs	r5, #0
 800ecd6:	69e3      	ldr	r3, [r4, #28]
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	5959      	ldr	r1, [r3, r5]
 800ecdc:	2900      	cmp	r1, #0
 800ecde:	d13b      	bne.n	800ed58 <_reclaim_reent+0x98>
 800ece0:	3504      	adds	r5, #4
 800ece2:	2d80      	cmp	r5, #128	@ 0x80
 800ece4:	d1f7      	bne.n	800ecd6 <_reclaim_reent+0x16>
 800ece6:	69e3      	ldr	r3, [r4, #28]
 800ece8:	4620      	mov	r0, r4
 800ecea:	68d9      	ldr	r1, [r3, #12]
 800ecec:	f000 f8ce 	bl	800ee8c <_free_r>
 800ecf0:	69e3      	ldr	r3, [r4, #28]
 800ecf2:	6819      	ldr	r1, [r3, #0]
 800ecf4:	b111      	cbz	r1, 800ecfc <_reclaim_reent+0x3c>
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 f8c8 	bl	800ee8c <_free_r>
 800ecfc:	6961      	ldr	r1, [r4, #20]
 800ecfe:	b111      	cbz	r1, 800ed06 <_reclaim_reent+0x46>
 800ed00:	4620      	mov	r0, r4
 800ed02:	f000 f8c3 	bl	800ee8c <_free_r>
 800ed06:	69e1      	ldr	r1, [r4, #28]
 800ed08:	b111      	cbz	r1, 800ed10 <_reclaim_reent+0x50>
 800ed0a:	4620      	mov	r0, r4
 800ed0c:	f000 f8be 	bl	800ee8c <_free_r>
 800ed10:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800ed12:	b111      	cbz	r1, 800ed1a <_reclaim_reent+0x5a>
 800ed14:	4620      	mov	r0, r4
 800ed16:	f000 f8b9 	bl	800ee8c <_free_r>
 800ed1a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed1c:	b111      	cbz	r1, 800ed24 <_reclaim_reent+0x64>
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f000 f8b4 	bl	800ee8c <_free_r>
 800ed24:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800ed26:	b111      	cbz	r1, 800ed2e <_reclaim_reent+0x6e>
 800ed28:	4620      	mov	r0, r4
 800ed2a:	f000 f8af 	bl	800ee8c <_free_r>
 800ed2e:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ed30:	b111      	cbz	r1, 800ed38 <_reclaim_reent+0x78>
 800ed32:	4620      	mov	r0, r4
 800ed34:	f000 f8aa 	bl	800ee8c <_free_r>
 800ed38:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800ed3a:	b111      	cbz	r1, 800ed42 <_reclaim_reent+0x82>
 800ed3c:	4620      	mov	r0, r4
 800ed3e:	f000 f8a5 	bl	800ee8c <_free_r>
 800ed42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ed44:	b111      	cbz	r1, 800ed4c <_reclaim_reent+0x8c>
 800ed46:	4620      	mov	r0, r4
 800ed48:	f000 f8a0 	bl	800ee8c <_free_r>
 800ed4c:	6a23      	ldr	r3, [r4, #32]
 800ed4e:	b14b      	cbz	r3, 800ed64 <_reclaim_reent+0xa4>
 800ed50:	4620      	mov	r0, r4
 800ed52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed56:	4718      	bx	r3
 800ed58:	680e      	ldr	r6, [r1, #0]
 800ed5a:	4620      	mov	r0, r4
 800ed5c:	f000 f896 	bl	800ee8c <_free_r>
 800ed60:	4631      	mov	r1, r6
 800ed62:	e7bb      	b.n	800ecdc <_reclaim_reent+0x1c>
 800ed64:	bd70      	pop	{r4, r5, r6, pc}
 800ed66:	bf00      	nop
 800ed68:	24000038 	.word	0x24000038

0800ed6c <_lseek_r>:
 800ed6c:	b538      	push	{r3, r4, r5, lr}
 800ed6e:	4d07      	ldr	r5, [pc, #28]	@ (800ed8c <_lseek_r+0x20>)
 800ed70:	4604      	mov	r4, r0
 800ed72:	4608      	mov	r0, r1
 800ed74:	4611      	mov	r1, r2
 800ed76:	2200      	movs	r2, #0
 800ed78:	602a      	str	r2, [r5, #0]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	f7f3 f8bd 	bl	8001efa <_lseek>
 800ed80:	1c43      	adds	r3, r0, #1
 800ed82:	d102      	bne.n	800ed8a <_lseek_r+0x1e>
 800ed84:	682b      	ldr	r3, [r5, #0]
 800ed86:	b103      	cbz	r3, 800ed8a <_lseek_r+0x1e>
 800ed88:	6023      	str	r3, [r4, #0]
 800ed8a:	bd38      	pop	{r3, r4, r5, pc}
 800ed8c:	240050c4 	.word	0x240050c4

0800ed90 <_read_r>:
 800ed90:	b538      	push	{r3, r4, r5, lr}
 800ed92:	4d07      	ldr	r5, [pc, #28]	@ (800edb0 <_read_r+0x20>)
 800ed94:	4604      	mov	r4, r0
 800ed96:	4608      	mov	r0, r1
 800ed98:	4611      	mov	r1, r2
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	602a      	str	r2, [r5, #0]
 800ed9e:	461a      	mov	r2, r3
 800eda0:	f7f3 f84b 	bl	8001e3a <_read>
 800eda4:	1c43      	adds	r3, r0, #1
 800eda6:	d102      	bne.n	800edae <_read_r+0x1e>
 800eda8:	682b      	ldr	r3, [r5, #0]
 800edaa:	b103      	cbz	r3, 800edae <_read_r+0x1e>
 800edac:	6023      	str	r3, [r4, #0]
 800edae:	bd38      	pop	{r3, r4, r5, pc}
 800edb0:	240050c4 	.word	0x240050c4

0800edb4 <_write_r>:
 800edb4:	b538      	push	{r3, r4, r5, lr}
 800edb6:	4d07      	ldr	r5, [pc, #28]	@ (800edd4 <_write_r+0x20>)
 800edb8:	4604      	mov	r4, r0
 800edba:	4608      	mov	r0, r1
 800edbc:	4611      	mov	r1, r2
 800edbe:	2200      	movs	r2, #0
 800edc0:	602a      	str	r2, [r5, #0]
 800edc2:	461a      	mov	r2, r3
 800edc4:	f7f3 f856 	bl	8001e74 <_write>
 800edc8:	1c43      	adds	r3, r0, #1
 800edca:	d102      	bne.n	800edd2 <_write_r+0x1e>
 800edcc:	682b      	ldr	r3, [r5, #0]
 800edce:	b103      	cbz	r3, 800edd2 <_write_r+0x1e>
 800edd0:	6023      	str	r3, [r4, #0]
 800edd2:	bd38      	pop	{r3, r4, r5, pc}
 800edd4:	240050c4 	.word	0x240050c4

0800edd8 <__errno>:
 800edd8:	4b01      	ldr	r3, [pc, #4]	@ (800ede0 <__errno+0x8>)
 800edda:	6818      	ldr	r0, [r3, #0]
 800eddc:	4770      	bx	lr
 800edde:	bf00      	nop
 800ede0:	24000038 	.word	0x24000038

0800ede4 <__libc_init_array>:
 800ede4:	b570      	push	{r4, r5, r6, lr}
 800ede6:	4d0d      	ldr	r5, [pc, #52]	@ (800ee1c <__libc_init_array+0x38>)
 800ede8:	4c0d      	ldr	r4, [pc, #52]	@ (800ee20 <__libc_init_array+0x3c>)
 800edea:	1b64      	subs	r4, r4, r5
 800edec:	10a4      	asrs	r4, r4, #2
 800edee:	2600      	movs	r6, #0
 800edf0:	42a6      	cmp	r6, r4
 800edf2:	d109      	bne.n	800ee08 <__libc_init_array+0x24>
 800edf4:	4d0b      	ldr	r5, [pc, #44]	@ (800ee24 <__libc_init_array+0x40>)
 800edf6:	4c0c      	ldr	r4, [pc, #48]	@ (800ee28 <__libc_init_array+0x44>)
 800edf8:	f000 fff0 	bl	800fddc <_init>
 800edfc:	1b64      	subs	r4, r4, r5
 800edfe:	10a4      	asrs	r4, r4, #2
 800ee00:	2600      	movs	r6, #0
 800ee02:	42a6      	cmp	r6, r4
 800ee04:	d105      	bne.n	800ee12 <__libc_init_array+0x2e>
 800ee06:	bd70      	pop	{r4, r5, r6, pc}
 800ee08:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee0c:	4798      	blx	r3
 800ee0e:	3601      	adds	r6, #1
 800ee10:	e7ee      	b.n	800edf0 <__libc_init_array+0xc>
 800ee12:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee16:	4798      	blx	r3
 800ee18:	3601      	adds	r6, #1
 800ee1a:	e7f2      	b.n	800ee02 <__libc_init_array+0x1e>
 800ee1c:	0801025c 	.word	0x0801025c
 800ee20:	0801025c 	.word	0x0801025c
 800ee24:	0801025c 	.word	0x0801025c
 800ee28:	08010260 	.word	0x08010260

0800ee2c <__retarget_lock_init_recursive>:
 800ee2c:	4770      	bx	lr

0800ee2e <__retarget_lock_acquire_recursive>:
 800ee2e:	4770      	bx	lr

0800ee30 <__retarget_lock_release_recursive>:
 800ee30:	4770      	bx	lr

0800ee32 <memcpy>:
 800ee32:	440a      	add	r2, r1
 800ee34:	4291      	cmp	r1, r2
 800ee36:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee3a:	d100      	bne.n	800ee3e <memcpy+0xc>
 800ee3c:	4770      	bx	lr
 800ee3e:	b510      	push	{r4, lr}
 800ee40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee48:	4291      	cmp	r1, r2
 800ee4a:	d1f9      	bne.n	800ee40 <memcpy+0xe>
 800ee4c:	bd10      	pop	{r4, pc}
	...

0800ee50 <__assert_func>:
 800ee50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee52:	4614      	mov	r4, r2
 800ee54:	461a      	mov	r2, r3
 800ee56:	4b09      	ldr	r3, [pc, #36]	@ (800ee7c <__assert_func+0x2c>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	4605      	mov	r5, r0
 800ee5c:	68d8      	ldr	r0, [r3, #12]
 800ee5e:	b954      	cbnz	r4, 800ee76 <__assert_func+0x26>
 800ee60:	4b07      	ldr	r3, [pc, #28]	@ (800ee80 <__assert_func+0x30>)
 800ee62:	461c      	mov	r4, r3
 800ee64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee68:	9100      	str	r1, [sp, #0]
 800ee6a:	462b      	mov	r3, r5
 800ee6c:	4905      	ldr	r1, [pc, #20]	@ (800ee84 <__assert_func+0x34>)
 800ee6e:	f000 fc9f 	bl	800f7b0 <fiprintf>
 800ee72:	f000 fcd9 	bl	800f828 <abort>
 800ee76:	4b04      	ldr	r3, [pc, #16]	@ (800ee88 <__assert_func+0x38>)
 800ee78:	e7f4      	b.n	800ee64 <__assert_func+0x14>
 800ee7a:	bf00      	nop
 800ee7c:	24000038 	.word	0x24000038
 800ee80:	08010220 	.word	0x08010220
 800ee84:	080101f2 	.word	0x080101f2
 800ee88:	080101e5 	.word	0x080101e5

0800ee8c <_free_r>:
 800ee8c:	b538      	push	{r3, r4, r5, lr}
 800ee8e:	4605      	mov	r5, r0
 800ee90:	2900      	cmp	r1, #0
 800ee92:	d041      	beq.n	800ef18 <_free_r+0x8c>
 800ee94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ee98:	1f0c      	subs	r4, r1, #4
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	bfb8      	it	lt
 800ee9e:	18e4      	addlt	r4, r4, r3
 800eea0:	f000 f8e8 	bl	800f074 <__malloc_lock>
 800eea4:	4a1d      	ldr	r2, [pc, #116]	@ (800ef1c <_free_r+0x90>)
 800eea6:	6813      	ldr	r3, [r2, #0]
 800eea8:	b933      	cbnz	r3, 800eeb8 <_free_r+0x2c>
 800eeaa:	6063      	str	r3, [r4, #4]
 800eeac:	6014      	str	r4, [r2, #0]
 800eeae:	4628      	mov	r0, r5
 800eeb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eeb4:	f000 b8e4 	b.w	800f080 <__malloc_unlock>
 800eeb8:	42a3      	cmp	r3, r4
 800eeba:	d908      	bls.n	800eece <_free_r+0x42>
 800eebc:	6820      	ldr	r0, [r4, #0]
 800eebe:	1821      	adds	r1, r4, r0
 800eec0:	428b      	cmp	r3, r1
 800eec2:	bf01      	itttt	eq
 800eec4:	6819      	ldreq	r1, [r3, #0]
 800eec6:	685b      	ldreq	r3, [r3, #4]
 800eec8:	1809      	addeq	r1, r1, r0
 800eeca:	6021      	streq	r1, [r4, #0]
 800eecc:	e7ed      	b.n	800eeaa <_free_r+0x1e>
 800eece:	461a      	mov	r2, r3
 800eed0:	685b      	ldr	r3, [r3, #4]
 800eed2:	b10b      	cbz	r3, 800eed8 <_free_r+0x4c>
 800eed4:	42a3      	cmp	r3, r4
 800eed6:	d9fa      	bls.n	800eece <_free_r+0x42>
 800eed8:	6811      	ldr	r1, [r2, #0]
 800eeda:	1850      	adds	r0, r2, r1
 800eedc:	42a0      	cmp	r0, r4
 800eede:	d10b      	bne.n	800eef8 <_free_r+0x6c>
 800eee0:	6820      	ldr	r0, [r4, #0]
 800eee2:	4401      	add	r1, r0
 800eee4:	1850      	adds	r0, r2, r1
 800eee6:	4283      	cmp	r3, r0
 800eee8:	6011      	str	r1, [r2, #0]
 800eeea:	d1e0      	bne.n	800eeae <_free_r+0x22>
 800eeec:	6818      	ldr	r0, [r3, #0]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	6053      	str	r3, [r2, #4]
 800eef2:	4408      	add	r0, r1
 800eef4:	6010      	str	r0, [r2, #0]
 800eef6:	e7da      	b.n	800eeae <_free_r+0x22>
 800eef8:	d902      	bls.n	800ef00 <_free_r+0x74>
 800eefa:	230c      	movs	r3, #12
 800eefc:	602b      	str	r3, [r5, #0]
 800eefe:	e7d6      	b.n	800eeae <_free_r+0x22>
 800ef00:	6820      	ldr	r0, [r4, #0]
 800ef02:	1821      	adds	r1, r4, r0
 800ef04:	428b      	cmp	r3, r1
 800ef06:	bf04      	itt	eq
 800ef08:	6819      	ldreq	r1, [r3, #0]
 800ef0a:	685b      	ldreq	r3, [r3, #4]
 800ef0c:	6063      	str	r3, [r4, #4]
 800ef0e:	bf04      	itt	eq
 800ef10:	1809      	addeq	r1, r1, r0
 800ef12:	6021      	streq	r1, [r4, #0]
 800ef14:	6054      	str	r4, [r2, #4]
 800ef16:	e7ca      	b.n	800eeae <_free_r+0x22>
 800ef18:	bd38      	pop	{r3, r4, r5, pc}
 800ef1a:	bf00      	nop
 800ef1c:	240050d0 	.word	0x240050d0

0800ef20 <malloc>:
 800ef20:	4b02      	ldr	r3, [pc, #8]	@ (800ef2c <malloc+0xc>)
 800ef22:	4601      	mov	r1, r0
 800ef24:	6818      	ldr	r0, [r3, #0]
 800ef26:	f000 b825 	b.w	800ef74 <_malloc_r>
 800ef2a:	bf00      	nop
 800ef2c:	24000038 	.word	0x24000038

0800ef30 <sbrk_aligned>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4e0f      	ldr	r6, [pc, #60]	@ (800ef70 <sbrk_aligned+0x40>)
 800ef34:	460c      	mov	r4, r1
 800ef36:	6831      	ldr	r1, [r6, #0]
 800ef38:	4605      	mov	r5, r0
 800ef3a:	b911      	cbnz	r1, 800ef42 <sbrk_aligned+0x12>
 800ef3c:	f000 fc64 	bl	800f808 <_sbrk_r>
 800ef40:	6030      	str	r0, [r6, #0]
 800ef42:	4621      	mov	r1, r4
 800ef44:	4628      	mov	r0, r5
 800ef46:	f000 fc5f 	bl	800f808 <_sbrk_r>
 800ef4a:	1c43      	adds	r3, r0, #1
 800ef4c:	d103      	bne.n	800ef56 <sbrk_aligned+0x26>
 800ef4e:	f04f 34ff 	mov.w	r4, #4294967295
 800ef52:	4620      	mov	r0, r4
 800ef54:	bd70      	pop	{r4, r5, r6, pc}
 800ef56:	1cc4      	adds	r4, r0, #3
 800ef58:	f024 0403 	bic.w	r4, r4, #3
 800ef5c:	42a0      	cmp	r0, r4
 800ef5e:	d0f8      	beq.n	800ef52 <sbrk_aligned+0x22>
 800ef60:	1a21      	subs	r1, r4, r0
 800ef62:	4628      	mov	r0, r5
 800ef64:	f000 fc50 	bl	800f808 <_sbrk_r>
 800ef68:	3001      	adds	r0, #1
 800ef6a:	d1f2      	bne.n	800ef52 <sbrk_aligned+0x22>
 800ef6c:	e7ef      	b.n	800ef4e <sbrk_aligned+0x1e>
 800ef6e:	bf00      	nop
 800ef70:	240050cc 	.word	0x240050cc

0800ef74 <_malloc_r>:
 800ef74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef78:	1ccd      	adds	r5, r1, #3
 800ef7a:	f025 0503 	bic.w	r5, r5, #3
 800ef7e:	3508      	adds	r5, #8
 800ef80:	2d0c      	cmp	r5, #12
 800ef82:	bf38      	it	cc
 800ef84:	250c      	movcc	r5, #12
 800ef86:	2d00      	cmp	r5, #0
 800ef88:	4606      	mov	r6, r0
 800ef8a:	db01      	blt.n	800ef90 <_malloc_r+0x1c>
 800ef8c:	42a9      	cmp	r1, r5
 800ef8e:	d904      	bls.n	800ef9a <_malloc_r+0x26>
 800ef90:	230c      	movs	r3, #12
 800ef92:	6033      	str	r3, [r6, #0]
 800ef94:	2000      	movs	r0, #0
 800ef96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f070 <_malloc_r+0xfc>
 800ef9e:	f000 f869 	bl	800f074 <__malloc_lock>
 800efa2:	f8d8 3000 	ldr.w	r3, [r8]
 800efa6:	461c      	mov	r4, r3
 800efa8:	bb44      	cbnz	r4, 800effc <_malloc_r+0x88>
 800efaa:	4629      	mov	r1, r5
 800efac:	4630      	mov	r0, r6
 800efae:	f7ff ffbf 	bl	800ef30 <sbrk_aligned>
 800efb2:	1c43      	adds	r3, r0, #1
 800efb4:	4604      	mov	r4, r0
 800efb6:	d158      	bne.n	800f06a <_malloc_r+0xf6>
 800efb8:	f8d8 4000 	ldr.w	r4, [r8]
 800efbc:	4627      	mov	r7, r4
 800efbe:	2f00      	cmp	r7, #0
 800efc0:	d143      	bne.n	800f04a <_malloc_r+0xd6>
 800efc2:	2c00      	cmp	r4, #0
 800efc4:	d04b      	beq.n	800f05e <_malloc_r+0xea>
 800efc6:	6823      	ldr	r3, [r4, #0]
 800efc8:	4639      	mov	r1, r7
 800efca:	4630      	mov	r0, r6
 800efcc:	eb04 0903 	add.w	r9, r4, r3
 800efd0:	f000 fc1a 	bl	800f808 <_sbrk_r>
 800efd4:	4581      	cmp	r9, r0
 800efd6:	d142      	bne.n	800f05e <_malloc_r+0xea>
 800efd8:	6821      	ldr	r1, [r4, #0]
 800efda:	1a6d      	subs	r5, r5, r1
 800efdc:	4629      	mov	r1, r5
 800efde:	4630      	mov	r0, r6
 800efe0:	f7ff ffa6 	bl	800ef30 <sbrk_aligned>
 800efe4:	3001      	adds	r0, #1
 800efe6:	d03a      	beq.n	800f05e <_malloc_r+0xea>
 800efe8:	6823      	ldr	r3, [r4, #0]
 800efea:	442b      	add	r3, r5
 800efec:	6023      	str	r3, [r4, #0]
 800efee:	f8d8 3000 	ldr.w	r3, [r8]
 800eff2:	685a      	ldr	r2, [r3, #4]
 800eff4:	bb62      	cbnz	r2, 800f050 <_malloc_r+0xdc>
 800eff6:	f8c8 7000 	str.w	r7, [r8]
 800effa:	e00f      	b.n	800f01c <_malloc_r+0xa8>
 800effc:	6822      	ldr	r2, [r4, #0]
 800effe:	1b52      	subs	r2, r2, r5
 800f000:	d420      	bmi.n	800f044 <_malloc_r+0xd0>
 800f002:	2a0b      	cmp	r2, #11
 800f004:	d917      	bls.n	800f036 <_malloc_r+0xc2>
 800f006:	1961      	adds	r1, r4, r5
 800f008:	42a3      	cmp	r3, r4
 800f00a:	6025      	str	r5, [r4, #0]
 800f00c:	bf18      	it	ne
 800f00e:	6059      	strne	r1, [r3, #4]
 800f010:	6863      	ldr	r3, [r4, #4]
 800f012:	bf08      	it	eq
 800f014:	f8c8 1000 	streq.w	r1, [r8]
 800f018:	5162      	str	r2, [r4, r5]
 800f01a:	604b      	str	r3, [r1, #4]
 800f01c:	4630      	mov	r0, r6
 800f01e:	f000 f82f 	bl	800f080 <__malloc_unlock>
 800f022:	f104 000b 	add.w	r0, r4, #11
 800f026:	1d23      	adds	r3, r4, #4
 800f028:	f020 0007 	bic.w	r0, r0, #7
 800f02c:	1ac2      	subs	r2, r0, r3
 800f02e:	bf1c      	itt	ne
 800f030:	1a1b      	subne	r3, r3, r0
 800f032:	50a3      	strne	r3, [r4, r2]
 800f034:	e7af      	b.n	800ef96 <_malloc_r+0x22>
 800f036:	6862      	ldr	r2, [r4, #4]
 800f038:	42a3      	cmp	r3, r4
 800f03a:	bf0c      	ite	eq
 800f03c:	f8c8 2000 	streq.w	r2, [r8]
 800f040:	605a      	strne	r2, [r3, #4]
 800f042:	e7eb      	b.n	800f01c <_malloc_r+0xa8>
 800f044:	4623      	mov	r3, r4
 800f046:	6864      	ldr	r4, [r4, #4]
 800f048:	e7ae      	b.n	800efa8 <_malloc_r+0x34>
 800f04a:	463c      	mov	r4, r7
 800f04c:	687f      	ldr	r7, [r7, #4]
 800f04e:	e7b6      	b.n	800efbe <_malloc_r+0x4a>
 800f050:	461a      	mov	r2, r3
 800f052:	685b      	ldr	r3, [r3, #4]
 800f054:	42a3      	cmp	r3, r4
 800f056:	d1fb      	bne.n	800f050 <_malloc_r+0xdc>
 800f058:	2300      	movs	r3, #0
 800f05a:	6053      	str	r3, [r2, #4]
 800f05c:	e7de      	b.n	800f01c <_malloc_r+0xa8>
 800f05e:	230c      	movs	r3, #12
 800f060:	6033      	str	r3, [r6, #0]
 800f062:	4630      	mov	r0, r6
 800f064:	f000 f80c 	bl	800f080 <__malloc_unlock>
 800f068:	e794      	b.n	800ef94 <_malloc_r+0x20>
 800f06a:	6005      	str	r5, [r0, #0]
 800f06c:	e7d6      	b.n	800f01c <_malloc_r+0xa8>
 800f06e:	bf00      	nop
 800f070:	240050d0 	.word	0x240050d0

0800f074 <__malloc_lock>:
 800f074:	4801      	ldr	r0, [pc, #4]	@ (800f07c <__malloc_lock+0x8>)
 800f076:	f7ff beda 	b.w	800ee2e <__retarget_lock_acquire_recursive>
 800f07a:	bf00      	nop
 800f07c:	240050c8 	.word	0x240050c8

0800f080 <__malloc_unlock>:
 800f080:	4801      	ldr	r0, [pc, #4]	@ (800f088 <__malloc_unlock+0x8>)
 800f082:	f7ff bed5 	b.w	800ee30 <__retarget_lock_release_recursive>
 800f086:	bf00      	nop
 800f088:	240050c8 	.word	0x240050c8

0800f08c <__ssputs_r>:
 800f08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f090:	688e      	ldr	r6, [r1, #8]
 800f092:	461f      	mov	r7, r3
 800f094:	42be      	cmp	r6, r7
 800f096:	680b      	ldr	r3, [r1, #0]
 800f098:	4682      	mov	sl, r0
 800f09a:	460c      	mov	r4, r1
 800f09c:	4690      	mov	r8, r2
 800f09e:	d82d      	bhi.n	800f0fc <__ssputs_r+0x70>
 800f0a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f0a8:	d026      	beq.n	800f0f8 <__ssputs_r+0x6c>
 800f0aa:	6965      	ldr	r5, [r4, #20]
 800f0ac:	6909      	ldr	r1, [r1, #16]
 800f0ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0b2:	eba3 0901 	sub.w	r9, r3, r1
 800f0b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0ba:	1c7b      	adds	r3, r7, #1
 800f0bc:	444b      	add	r3, r9
 800f0be:	106d      	asrs	r5, r5, #1
 800f0c0:	429d      	cmp	r5, r3
 800f0c2:	bf38      	it	cc
 800f0c4:	461d      	movcc	r5, r3
 800f0c6:	0553      	lsls	r3, r2, #21
 800f0c8:	d527      	bpl.n	800f11a <__ssputs_r+0x8e>
 800f0ca:	4629      	mov	r1, r5
 800f0cc:	f7ff ff52 	bl	800ef74 <_malloc_r>
 800f0d0:	4606      	mov	r6, r0
 800f0d2:	b360      	cbz	r0, 800f12e <__ssputs_r+0xa2>
 800f0d4:	6921      	ldr	r1, [r4, #16]
 800f0d6:	464a      	mov	r2, r9
 800f0d8:	f7ff feab 	bl	800ee32 <memcpy>
 800f0dc:	89a3      	ldrh	r3, [r4, #12]
 800f0de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f0e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f0e6:	81a3      	strh	r3, [r4, #12]
 800f0e8:	6126      	str	r6, [r4, #16]
 800f0ea:	6165      	str	r5, [r4, #20]
 800f0ec:	444e      	add	r6, r9
 800f0ee:	eba5 0509 	sub.w	r5, r5, r9
 800f0f2:	6026      	str	r6, [r4, #0]
 800f0f4:	60a5      	str	r5, [r4, #8]
 800f0f6:	463e      	mov	r6, r7
 800f0f8:	42be      	cmp	r6, r7
 800f0fa:	d900      	bls.n	800f0fe <__ssputs_r+0x72>
 800f0fc:	463e      	mov	r6, r7
 800f0fe:	6820      	ldr	r0, [r4, #0]
 800f100:	4632      	mov	r2, r6
 800f102:	4641      	mov	r1, r8
 800f104:	f000 fb66 	bl	800f7d4 <memmove>
 800f108:	68a3      	ldr	r3, [r4, #8]
 800f10a:	1b9b      	subs	r3, r3, r6
 800f10c:	60a3      	str	r3, [r4, #8]
 800f10e:	6823      	ldr	r3, [r4, #0]
 800f110:	4433      	add	r3, r6
 800f112:	6023      	str	r3, [r4, #0]
 800f114:	2000      	movs	r0, #0
 800f116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f11a:	462a      	mov	r2, r5
 800f11c:	f000 fb8b 	bl	800f836 <_realloc_r>
 800f120:	4606      	mov	r6, r0
 800f122:	2800      	cmp	r0, #0
 800f124:	d1e0      	bne.n	800f0e8 <__ssputs_r+0x5c>
 800f126:	6921      	ldr	r1, [r4, #16]
 800f128:	4650      	mov	r0, sl
 800f12a:	f7ff feaf 	bl	800ee8c <_free_r>
 800f12e:	230c      	movs	r3, #12
 800f130:	f8ca 3000 	str.w	r3, [sl]
 800f134:	89a3      	ldrh	r3, [r4, #12]
 800f136:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f13a:	81a3      	strh	r3, [r4, #12]
 800f13c:	f04f 30ff 	mov.w	r0, #4294967295
 800f140:	e7e9      	b.n	800f116 <__ssputs_r+0x8a>
	...

0800f144 <_svfiprintf_r>:
 800f144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f148:	4698      	mov	r8, r3
 800f14a:	898b      	ldrh	r3, [r1, #12]
 800f14c:	061b      	lsls	r3, r3, #24
 800f14e:	b09d      	sub	sp, #116	@ 0x74
 800f150:	4607      	mov	r7, r0
 800f152:	460d      	mov	r5, r1
 800f154:	4614      	mov	r4, r2
 800f156:	d510      	bpl.n	800f17a <_svfiprintf_r+0x36>
 800f158:	690b      	ldr	r3, [r1, #16]
 800f15a:	b973      	cbnz	r3, 800f17a <_svfiprintf_r+0x36>
 800f15c:	2140      	movs	r1, #64	@ 0x40
 800f15e:	f7ff ff09 	bl	800ef74 <_malloc_r>
 800f162:	6028      	str	r0, [r5, #0]
 800f164:	6128      	str	r0, [r5, #16]
 800f166:	b930      	cbnz	r0, 800f176 <_svfiprintf_r+0x32>
 800f168:	230c      	movs	r3, #12
 800f16a:	603b      	str	r3, [r7, #0]
 800f16c:	f04f 30ff 	mov.w	r0, #4294967295
 800f170:	b01d      	add	sp, #116	@ 0x74
 800f172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f176:	2340      	movs	r3, #64	@ 0x40
 800f178:	616b      	str	r3, [r5, #20]
 800f17a:	2300      	movs	r3, #0
 800f17c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f17e:	2320      	movs	r3, #32
 800f180:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f184:	f8cd 800c 	str.w	r8, [sp, #12]
 800f188:	2330      	movs	r3, #48	@ 0x30
 800f18a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f328 <_svfiprintf_r+0x1e4>
 800f18e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f192:	f04f 0901 	mov.w	r9, #1
 800f196:	4623      	mov	r3, r4
 800f198:	469a      	mov	sl, r3
 800f19a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f19e:	b10a      	cbz	r2, 800f1a4 <_svfiprintf_r+0x60>
 800f1a0:	2a25      	cmp	r2, #37	@ 0x25
 800f1a2:	d1f9      	bne.n	800f198 <_svfiprintf_r+0x54>
 800f1a4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1a8:	d00b      	beq.n	800f1c2 <_svfiprintf_r+0x7e>
 800f1aa:	465b      	mov	r3, fp
 800f1ac:	4622      	mov	r2, r4
 800f1ae:	4629      	mov	r1, r5
 800f1b0:	4638      	mov	r0, r7
 800f1b2:	f7ff ff6b 	bl	800f08c <__ssputs_r>
 800f1b6:	3001      	adds	r0, #1
 800f1b8:	f000 80a7 	beq.w	800f30a <_svfiprintf_r+0x1c6>
 800f1bc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1be:	445a      	add	r2, fp
 800f1c0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1c2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1c6:	2b00      	cmp	r3, #0
 800f1c8:	f000 809f 	beq.w	800f30a <_svfiprintf_r+0x1c6>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	f04f 32ff 	mov.w	r2, #4294967295
 800f1d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1d6:	f10a 0a01 	add.w	sl, sl, #1
 800f1da:	9304      	str	r3, [sp, #16]
 800f1dc:	9307      	str	r3, [sp, #28]
 800f1de:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f1e2:	931a      	str	r3, [sp, #104]	@ 0x68
 800f1e4:	4654      	mov	r4, sl
 800f1e6:	2205      	movs	r2, #5
 800f1e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f1ec:	484e      	ldr	r0, [pc, #312]	@ (800f328 <_svfiprintf_r+0x1e4>)
 800f1ee:	f7f1 f87f 	bl	80002f0 <memchr>
 800f1f2:	9a04      	ldr	r2, [sp, #16]
 800f1f4:	b9d8      	cbnz	r0, 800f22e <_svfiprintf_r+0xea>
 800f1f6:	06d0      	lsls	r0, r2, #27
 800f1f8:	bf44      	itt	mi
 800f1fa:	2320      	movmi	r3, #32
 800f1fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f200:	0711      	lsls	r1, r2, #28
 800f202:	bf44      	itt	mi
 800f204:	232b      	movmi	r3, #43	@ 0x2b
 800f206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f20a:	f89a 3000 	ldrb.w	r3, [sl]
 800f20e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f210:	d015      	beq.n	800f23e <_svfiprintf_r+0xfa>
 800f212:	9a07      	ldr	r2, [sp, #28]
 800f214:	4654      	mov	r4, sl
 800f216:	2000      	movs	r0, #0
 800f218:	f04f 0c0a 	mov.w	ip, #10
 800f21c:	4621      	mov	r1, r4
 800f21e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f222:	3b30      	subs	r3, #48	@ 0x30
 800f224:	2b09      	cmp	r3, #9
 800f226:	d94b      	bls.n	800f2c0 <_svfiprintf_r+0x17c>
 800f228:	b1b0      	cbz	r0, 800f258 <_svfiprintf_r+0x114>
 800f22a:	9207      	str	r2, [sp, #28]
 800f22c:	e014      	b.n	800f258 <_svfiprintf_r+0x114>
 800f22e:	eba0 0308 	sub.w	r3, r0, r8
 800f232:	fa09 f303 	lsl.w	r3, r9, r3
 800f236:	4313      	orrs	r3, r2
 800f238:	9304      	str	r3, [sp, #16]
 800f23a:	46a2      	mov	sl, r4
 800f23c:	e7d2      	b.n	800f1e4 <_svfiprintf_r+0xa0>
 800f23e:	9b03      	ldr	r3, [sp, #12]
 800f240:	1d19      	adds	r1, r3, #4
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	9103      	str	r1, [sp, #12]
 800f246:	2b00      	cmp	r3, #0
 800f248:	bfbb      	ittet	lt
 800f24a:	425b      	neglt	r3, r3
 800f24c:	f042 0202 	orrlt.w	r2, r2, #2
 800f250:	9307      	strge	r3, [sp, #28]
 800f252:	9307      	strlt	r3, [sp, #28]
 800f254:	bfb8      	it	lt
 800f256:	9204      	strlt	r2, [sp, #16]
 800f258:	7823      	ldrb	r3, [r4, #0]
 800f25a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f25c:	d10a      	bne.n	800f274 <_svfiprintf_r+0x130>
 800f25e:	7863      	ldrb	r3, [r4, #1]
 800f260:	2b2a      	cmp	r3, #42	@ 0x2a
 800f262:	d132      	bne.n	800f2ca <_svfiprintf_r+0x186>
 800f264:	9b03      	ldr	r3, [sp, #12]
 800f266:	1d1a      	adds	r2, r3, #4
 800f268:	681b      	ldr	r3, [r3, #0]
 800f26a:	9203      	str	r2, [sp, #12]
 800f26c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f270:	3402      	adds	r4, #2
 800f272:	9305      	str	r3, [sp, #20]
 800f274:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f338 <_svfiprintf_r+0x1f4>
 800f278:	7821      	ldrb	r1, [r4, #0]
 800f27a:	2203      	movs	r2, #3
 800f27c:	4650      	mov	r0, sl
 800f27e:	f7f1 f837 	bl	80002f0 <memchr>
 800f282:	b138      	cbz	r0, 800f294 <_svfiprintf_r+0x150>
 800f284:	9b04      	ldr	r3, [sp, #16]
 800f286:	eba0 000a 	sub.w	r0, r0, sl
 800f28a:	2240      	movs	r2, #64	@ 0x40
 800f28c:	4082      	lsls	r2, r0
 800f28e:	4313      	orrs	r3, r2
 800f290:	3401      	adds	r4, #1
 800f292:	9304      	str	r3, [sp, #16]
 800f294:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f298:	4824      	ldr	r0, [pc, #144]	@ (800f32c <_svfiprintf_r+0x1e8>)
 800f29a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f29e:	2206      	movs	r2, #6
 800f2a0:	f7f1 f826 	bl	80002f0 <memchr>
 800f2a4:	2800      	cmp	r0, #0
 800f2a6:	d036      	beq.n	800f316 <_svfiprintf_r+0x1d2>
 800f2a8:	4b21      	ldr	r3, [pc, #132]	@ (800f330 <_svfiprintf_r+0x1ec>)
 800f2aa:	bb1b      	cbnz	r3, 800f2f4 <_svfiprintf_r+0x1b0>
 800f2ac:	9b03      	ldr	r3, [sp, #12]
 800f2ae:	3307      	adds	r3, #7
 800f2b0:	f023 0307 	bic.w	r3, r3, #7
 800f2b4:	3308      	adds	r3, #8
 800f2b6:	9303      	str	r3, [sp, #12]
 800f2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2ba:	4433      	add	r3, r6
 800f2bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2be:	e76a      	b.n	800f196 <_svfiprintf_r+0x52>
 800f2c0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	2001      	movs	r0, #1
 800f2c8:	e7a8      	b.n	800f21c <_svfiprintf_r+0xd8>
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	3401      	adds	r4, #1
 800f2ce:	9305      	str	r3, [sp, #20]
 800f2d0:	4619      	mov	r1, r3
 800f2d2:	f04f 0c0a 	mov.w	ip, #10
 800f2d6:	4620      	mov	r0, r4
 800f2d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2dc:	3a30      	subs	r2, #48	@ 0x30
 800f2de:	2a09      	cmp	r2, #9
 800f2e0:	d903      	bls.n	800f2ea <_svfiprintf_r+0x1a6>
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	d0c6      	beq.n	800f274 <_svfiprintf_r+0x130>
 800f2e6:	9105      	str	r1, [sp, #20]
 800f2e8:	e7c4      	b.n	800f274 <_svfiprintf_r+0x130>
 800f2ea:	fb0c 2101 	mla	r1, ip, r1, r2
 800f2ee:	4604      	mov	r4, r0
 800f2f0:	2301      	movs	r3, #1
 800f2f2:	e7f0      	b.n	800f2d6 <_svfiprintf_r+0x192>
 800f2f4:	ab03      	add	r3, sp, #12
 800f2f6:	9300      	str	r3, [sp, #0]
 800f2f8:	462a      	mov	r2, r5
 800f2fa:	4b0e      	ldr	r3, [pc, #56]	@ (800f334 <_svfiprintf_r+0x1f0>)
 800f2fc:	a904      	add	r1, sp, #16
 800f2fe:	4638      	mov	r0, r7
 800f300:	f3af 8000 	nop.w
 800f304:	1c42      	adds	r2, r0, #1
 800f306:	4606      	mov	r6, r0
 800f308:	d1d6      	bne.n	800f2b8 <_svfiprintf_r+0x174>
 800f30a:	89ab      	ldrh	r3, [r5, #12]
 800f30c:	065b      	lsls	r3, r3, #25
 800f30e:	f53f af2d 	bmi.w	800f16c <_svfiprintf_r+0x28>
 800f312:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f314:	e72c      	b.n	800f170 <_svfiprintf_r+0x2c>
 800f316:	ab03      	add	r3, sp, #12
 800f318:	9300      	str	r3, [sp, #0]
 800f31a:	462a      	mov	r2, r5
 800f31c:	4b05      	ldr	r3, [pc, #20]	@ (800f334 <_svfiprintf_r+0x1f0>)
 800f31e:	a904      	add	r1, sp, #16
 800f320:	4638      	mov	r0, r7
 800f322:	f000 f879 	bl	800f418 <_printf_i>
 800f326:	e7ed      	b.n	800f304 <_svfiprintf_r+0x1c0>
 800f328:	08010221 	.word	0x08010221
 800f32c:	0801022b 	.word	0x0801022b
 800f330:	00000000 	.word	0x00000000
 800f334:	0800f08d 	.word	0x0800f08d
 800f338:	08010227 	.word	0x08010227

0800f33c <_printf_common>:
 800f33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f340:	4616      	mov	r6, r2
 800f342:	4698      	mov	r8, r3
 800f344:	688a      	ldr	r2, [r1, #8]
 800f346:	690b      	ldr	r3, [r1, #16]
 800f348:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f34c:	4293      	cmp	r3, r2
 800f34e:	bfb8      	it	lt
 800f350:	4613      	movlt	r3, r2
 800f352:	6033      	str	r3, [r6, #0]
 800f354:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f358:	4607      	mov	r7, r0
 800f35a:	460c      	mov	r4, r1
 800f35c:	b10a      	cbz	r2, 800f362 <_printf_common+0x26>
 800f35e:	3301      	adds	r3, #1
 800f360:	6033      	str	r3, [r6, #0]
 800f362:	6823      	ldr	r3, [r4, #0]
 800f364:	0699      	lsls	r1, r3, #26
 800f366:	bf42      	ittt	mi
 800f368:	6833      	ldrmi	r3, [r6, #0]
 800f36a:	3302      	addmi	r3, #2
 800f36c:	6033      	strmi	r3, [r6, #0]
 800f36e:	6825      	ldr	r5, [r4, #0]
 800f370:	f015 0506 	ands.w	r5, r5, #6
 800f374:	d106      	bne.n	800f384 <_printf_common+0x48>
 800f376:	f104 0a19 	add.w	sl, r4, #25
 800f37a:	68e3      	ldr	r3, [r4, #12]
 800f37c:	6832      	ldr	r2, [r6, #0]
 800f37e:	1a9b      	subs	r3, r3, r2
 800f380:	42ab      	cmp	r3, r5
 800f382:	dc26      	bgt.n	800f3d2 <_printf_common+0x96>
 800f384:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f388:	6822      	ldr	r2, [r4, #0]
 800f38a:	3b00      	subs	r3, #0
 800f38c:	bf18      	it	ne
 800f38e:	2301      	movne	r3, #1
 800f390:	0692      	lsls	r2, r2, #26
 800f392:	d42b      	bmi.n	800f3ec <_printf_common+0xb0>
 800f394:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f398:	4641      	mov	r1, r8
 800f39a:	4638      	mov	r0, r7
 800f39c:	47c8      	blx	r9
 800f39e:	3001      	adds	r0, #1
 800f3a0:	d01e      	beq.n	800f3e0 <_printf_common+0xa4>
 800f3a2:	6823      	ldr	r3, [r4, #0]
 800f3a4:	6922      	ldr	r2, [r4, #16]
 800f3a6:	f003 0306 	and.w	r3, r3, #6
 800f3aa:	2b04      	cmp	r3, #4
 800f3ac:	bf02      	ittt	eq
 800f3ae:	68e5      	ldreq	r5, [r4, #12]
 800f3b0:	6833      	ldreq	r3, [r6, #0]
 800f3b2:	1aed      	subeq	r5, r5, r3
 800f3b4:	68a3      	ldr	r3, [r4, #8]
 800f3b6:	bf0c      	ite	eq
 800f3b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f3bc:	2500      	movne	r5, #0
 800f3be:	4293      	cmp	r3, r2
 800f3c0:	bfc4      	itt	gt
 800f3c2:	1a9b      	subgt	r3, r3, r2
 800f3c4:	18ed      	addgt	r5, r5, r3
 800f3c6:	2600      	movs	r6, #0
 800f3c8:	341a      	adds	r4, #26
 800f3ca:	42b5      	cmp	r5, r6
 800f3cc:	d11a      	bne.n	800f404 <_printf_common+0xc8>
 800f3ce:	2000      	movs	r0, #0
 800f3d0:	e008      	b.n	800f3e4 <_printf_common+0xa8>
 800f3d2:	2301      	movs	r3, #1
 800f3d4:	4652      	mov	r2, sl
 800f3d6:	4641      	mov	r1, r8
 800f3d8:	4638      	mov	r0, r7
 800f3da:	47c8      	blx	r9
 800f3dc:	3001      	adds	r0, #1
 800f3de:	d103      	bne.n	800f3e8 <_printf_common+0xac>
 800f3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800f3e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f3e8:	3501      	adds	r5, #1
 800f3ea:	e7c6      	b.n	800f37a <_printf_common+0x3e>
 800f3ec:	18e1      	adds	r1, r4, r3
 800f3ee:	1c5a      	adds	r2, r3, #1
 800f3f0:	2030      	movs	r0, #48	@ 0x30
 800f3f2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f3f6:	4422      	add	r2, r4
 800f3f8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f3fc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f400:	3302      	adds	r3, #2
 800f402:	e7c7      	b.n	800f394 <_printf_common+0x58>
 800f404:	2301      	movs	r3, #1
 800f406:	4622      	mov	r2, r4
 800f408:	4641      	mov	r1, r8
 800f40a:	4638      	mov	r0, r7
 800f40c:	47c8      	blx	r9
 800f40e:	3001      	adds	r0, #1
 800f410:	d0e6      	beq.n	800f3e0 <_printf_common+0xa4>
 800f412:	3601      	adds	r6, #1
 800f414:	e7d9      	b.n	800f3ca <_printf_common+0x8e>
	...

0800f418 <_printf_i>:
 800f418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f41c:	7e0f      	ldrb	r7, [r1, #24]
 800f41e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f420:	2f78      	cmp	r7, #120	@ 0x78
 800f422:	4691      	mov	r9, r2
 800f424:	4680      	mov	r8, r0
 800f426:	460c      	mov	r4, r1
 800f428:	469a      	mov	sl, r3
 800f42a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f42e:	d807      	bhi.n	800f440 <_printf_i+0x28>
 800f430:	2f62      	cmp	r7, #98	@ 0x62
 800f432:	d80a      	bhi.n	800f44a <_printf_i+0x32>
 800f434:	2f00      	cmp	r7, #0
 800f436:	f000 80d2 	beq.w	800f5de <_printf_i+0x1c6>
 800f43a:	2f58      	cmp	r7, #88	@ 0x58
 800f43c:	f000 80b9 	beq.w	800f5b2 <_printf_i+0x19a>
 800f440:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f444:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f448:	e03a      	b.n	800f4c0 <_printf_i+0xa8>
 800f44a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f44e:	2b15      	cmp	r3, #21
 800f450:	d8f6      	bhi.n	800f440 <_printf_i+0x28>
 800f452:	a101      	add	r1, pc, #4	@ (adr r1, 800f458 <_printf_i+0x40>)
 800f454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f458:	0800f4b1 	.word	0x0800f4b1
 800f45c:	0800f4c5 	.word	0x0800f4c5
 800f460:	0800f441 	.word	0x0800f441
 800f464:	0800f441 	.word	0x0800f441
 800f468:	0800f441 	.word	0x0800f441
 800f46c:	0800f441 	.word	0x0800f441
 800f470:	0800f4c5 	.word	0x0800f4c5
 800f474:	0800f441 	.word	0x0800f441
 800f478:	0800f441 	.word	0x0800f441
 800f47c:	0800f441 	.word	0x0800f441
 800f480:	0800f441 	.word	0x0800f441
 800f484:	0800f5c5 	.word	0x0800f5c5
 800f488:	0800f4ef 	.word	0x0800f4ef
 800f48c:	0800f57f 	.word	0x0800f57f
 800f490:	0800f441 	.word	0x0800f441
 800f494:	0800f441 	.word	0x0800f441
 800f498:	0800f5e7 	.word	0x0800f5e7
 800f49c:	0800f441 	.word	0x0800f441
 800f4a0:	0800f4ef 	.word	0x0800f4ef
 800f4a4:	0800f441 	.word	0x0800f441
 800f4a8:	0800f441 	.word	0x0800f441
 800f4ac:	0800f587 	.word	0x0800f587
 800f4b0:	6833      	ldr	r3, [r6, #0]
 800f4b2:	1d1a      	adds	r2, r3, #4
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	6032      	str	r2, [r6, #0]
 800f4b8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f4bc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f4c0:	2301      	movs	r3, #1
 800f4c2:	e09d      	b.n	800f600 <_printf_i+0x1e8>
 800f4c4:	6833      	ldr	r3, [r6, #0]
 800f4c6:	6820      	ldr	r0, [r4, #0]
 800f4c8:	1d19      	adds	r1, r3, #4
 800f4ca:	6031      	str	r1, [r6, #0]
 800f4cc:	0606      	lsls	r6, r0, #24
 800f4ce:	d501      	bpl.n	800f4d4 <_printf_i+0xbc>
 800f4d0:	681d      	ldr	r5, [r3, #0]
 800f4d2:	e003      	b.n	800f4dc <_printf_i+0xc4>
 800f4d4:	0645      	lsls	r5, r0, #25
 800f4d6:	d5fb      	bpl.n	800f4d0 <_printf_i+0xb8>
 800f4d8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f4dc:	2d00      	cmp	r5, #0
 800f4de:	da03      	bge.n	800f4e8 <_printf_i+0xd0>
 800f4e0:	232d      	movs	r3, #45	@ 0x2d
 800f4e2:	426d      	negs	r5, r5
 800f4e4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4e8:	4859      	ldr	r0, [pc, #356]	@ (800f650 <_printf_i+0x238>)
 800f4ea:	230a      	movs	r3, #10
 800f4ec:	e011      	b.n	800f512 <_printf_i+0xfa>
 800f4ee:	6821      	ldr	r1, [r4, #0]
 800f4f0:	6833      	ldr	r3, [r6, #0]
 800f4f2:	0608      	lsls	r0, r1, #24
 800f4f4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f4f8:	d402      	bmi.n	800f500 <_printf_i+0xe8>
 800f4fa:	0649      	lsls	r1, r1, #25
 800f4fc:	bf48      	it	mi
 800f4fe:	b2ad      	uxthmi	r5, r5
 800f500:	2f6f      	cmp	r7, #111	@ 0x6f
 800f502:	4853      	ldr	r0, [pc, #332]	@ (800f650 <_printf_i+0x238>)
 800f504:	6033      	str	r3, [r6, #0]
 800f506:	bf14      	ite	ne
 800f508:	230a      	movne	r3, #10
 800f50a:	2308      	moveq	r3, #8
 800f50c:	2100      	movs	r1, #0
 800f50e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f512:	6866      	ldr	r6, [r4, #4]
 800f514:	60a6      	str	r6, [r4, #8]
 800f516:	2e00      	cmp	r6, #0
 800f518:	bfa2      	ittt	ge
 800f51a:	6821      	ldrge	r1, [r4, #0]
 800f51c:	f021 0104 	bicge.w	r1, r1, #4
 800f520:	6021      	strge	r1, [r4, #0]
 800f522:	b90d      	cbnz	r5, 800f528 <_printf_i+0x110>
 800f524:	2e00      	cmp	r6, #0
 800f526:	d04b      	beq.n	800f5c0 <_printf_i+0x1a8>
 800f528:	4616      	mov	r6, r2
 800f52a:	fbb5 f1f3 	udiv	r1, r5, r3
 800f52e:	fb03 5711 	mls	r7, r3, r1, r5
 800f532:	5dc7      	ldrb	r7, [r0, r7]
 800f534:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f538:	462f      	mov	r7, r5
 800f53a:	42bb      	cmp	r3, r7
 800f53c:	460d      	mov	r5, r1
 800f53e:	d9f4      	bls.n	800f52a <_printf_i+0x112>
 800f540:	2b08      	cmp	r3, #8
 800f542:	d10b      	bne.n	800f55c <_printf_i+0x144>
 800f544:	6823      	ldr	r3, [r4, #0]
 800f546:	07df      	lsls	r7, r3, #31
 800f548:	d508      	bpl.n	800f55c <_printf_i+0x144>
 800f54a:	6923      	ldr	r3, [r4, #16]
 800f54c:	6861      	ldr	r1, [r4, #4]
 800f54e:	4299      	cmp	r1, r3
 800f550:	bfde      	ittt	le
 800f552:	2330      	movle	r3, #48	@ 0x30
 800f554:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f558:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f55c:	1b92      	subs	r2, r2, r6
 800f55e:	6122      	str	r2, [r4, #16]
 800f560:	f8cd a000 	str.w	sl, [sp]
 800f564:	464b      	mov	r3, r9
 800f566:	aa03      	add	r2, sp, #12
 800f568:	4621      	mov	r1, r4
 800f56a:	4640      	mov	r0, r8
 800f56c:	f7ff fee6 	bl	800f33c <_printf_common>
 800f570:	3001      	adds	r0, #1
 800f572:	d14a      	bne.n	800f60a <_printf_i+0x1f2>
 800f574:	f04f 30ff 	mov.w	r0, #4294967295
 800f578:	b004      	add	sp, #16
 800f57a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f57e:	6823      	ldr	r3, [r4, #0]
 800f580:	f043 0320 	orr.w	r3, r3, #32
 800f584:	6023      	str	r3, [r4, #0]
 800f586:	4833      	ldr	r0, [pc, #204]	@ (800f654 <_printf_i+0x23c>)
 800f588:	2778      	movs	r7, #120	@ 0x78
 800f58a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f58e:	6823      	ldr	r3, [r4, #0]
 800f590:	6831      	ldr	r1, [r6, #0]
 800f592:	061f      	lsls	r7, r3, #24
 800f594:	f851 5b04 	ldr.w	r5, [r1], #4
 800f598:	d402      	bmi.n	800f5a0 <_printf_i+0x188>
 800f59a:	065f      	lsls	r7, r3, #25
 800f59c:	bf48      	it	mi
 800f59e:	b2ad      	uxthmi	r5, r5
 800f5a0:	6031      	str	r1, [r6, #0]
 800f5a2:	07d9      	lsls	r1, r3, #31
 800f5a4:	bf44      	itt	mi
 800f5a6:	f043 0320 	orrmi.w	r3, r3, #32
 800f5aa:	6023      	strmi	r3, [r4, #0]
 800f5ac:	b11d      	cbz	r5, 800f5b6 <_printf_i+0x19e>
 800f5ae:	2310      	movs	r3, #16
 800f5b0:	e7ac      	b.n	800f50c <_printf_i+0xf4>
 800f5b2:	4827      	ldr	r0, [pc, #156]	@ (800f650 <_printf_i+0x238>)
 800f5b4:	e7e9      	b.n	800f58a <_printf_i+0x172>
 800f5b6:	6823      	ldr	r3, [r4, #0]
 800f5b8:	f023 0320 	bic.w	r3, r3, #32
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	e7f6      	b.n	800f5ae <_printf_i+0x196>
 800f5c0:	4616      	mov	r6, r2
 800f5c2:	e7bd      	b.n	800f540 <_printf_i+0x128>
 800f5c4:	6833      	ldr	r3, [r6, #0]
 800f5c6:	6825      	ldr	r5, [r4, #0]
 800f5c8:	6961      	ldr	r1, [r4, #20]
 800f5ca:	1d18      	adds	r0, r3, #4
 800f5cc:	6030      	str	r0, [r6, #0]
 800f5ce:	062e      	lsls	r6, r5, #24
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	d501      	bpl.n	800f5d8 <_printf_i+0x1c0>
 800f5d4:	6019      	str	r1, [r3, #0]
 800f5d6:	e002      	b.n	800f5de <_printf_i+0x1c6>
 800f5d8:	0668      	lsls	r0, r5, #25
 800f5da:	d5fb      	bpl.n	800f5d4 <_printf_i+0x1bc>
 800f5dc:	8019      	strh	r1, [r3, #0]
 800f5de:	2300      	movs	r3, #0
 800f5e0:	6123      	str	r3, [r4, #16]
 800f5e2:	4616      	mov	r6, r2
 800f5e4:	e7bc      	b.n	800f560 <_printf_i+0x148>
 800f5e6:	6833      	ldr	r3, [r6, #0]
 800f5e8:	1d1a      	adds	r2, r3, #4
 800f5ea:	6032      	str	r2, [r6, #0]
 800f5ec:	681e      	ldr	r6, [r3, #0]
 800f5ee:	6862      	ldr	r2, [r4, #4]
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	4630      	mov	r0, r6
 800f5f4:	f7f0 fe7c 	bl	80002f0 <memchr>
 800f5f8:	b108      	cbz	r0, 800f5fe <_printf_i+0x1e6>
 800f5fa:	1b80      	subs	r0, r0, r6
 800f5fc:	6060      	str	r0, [r4, #4]
 800f5fe:	6863      	ldr	r3, [r4, #4]
 800f600:	6123      	str	r3, [r4, #16]
 800f602:	2300      	movs	r3, #0
 800f604:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f608:	e7aa      	b.n	800f560 <_printf_i+0x148>
 800f60a:	6923      	ldr	r3, [r4, #16]
 800f60c:	4632      	mov	r2, r6
 800f60e:	4649      	mov	r1, r9
 800f610:	4640      	mov	r0, r8
 800f612:	47d0      	blx	sl
 800f614:	3001      	adds	r0, #1
 800f616:	d0ad      	beq.n	800f574 <_printf_i+0x15c>
 800f618:	6823      	ldr	r3, [r4, #0]
 800f61a:	079b      	lsls	r3, r3, #30
 800f61c:	d413      	bmi.n	800f646 <_printf_i+0x22e>
 800f61e:	68e0      	ldr	r0, [r4, #12]
 800f620:	9b03      	ldr	r3, [sp, #12]
 800f622:	4298      	cmp	r0, r3
 800f624:	bfb8      	it	lt
 800f626:	4618      	movlt	r0, r3
 800f628:	e7a6      	b.n	800f578 <_printf_i+0x160>
 800f62a:	2301      	movs	r3, #1
 800f62c:	4632      	mov	r2, r6
 800f62e:	4649      	mov	r1, r9
 800f630:	4640      	mov	r0, r8
 800f632:	47d0      	blx	sl
 800f634:	3001      	adds	r0, #1
 800f636:	d09d      	beq.n	800f574 <_printf_i+0x15c>
 800f638:	3501      	adds	r5, #1
 800f63a:	68e3      	ldr	r3, [r4, #12]
 800f63c:	9903      	ldr	r1, [sp, #12]
 800f63e:	1a5b      	subs	r3, r3, r1
 800f640:	42ab      	cmp	r3, r5
 800f642:	dcf2      	bgt.n	800f62a <_printf_i+0x212>
 800f644:	e7eb      	b.n	800f61e <_printf_i+0x206>
 800f646:	2500      	movs	r5, #0
 800f648:	f104 0619 	add.w	r6, r4, #25
 800f64c:	e7f5      	b.n	800f63a <_printf_i+0x222>
 800f64e:	bf00      	nop
 800f650:	08010232 	.word	0x08010232
 800f654:	08010243 	.word	0x08010243

0800f658 <__sflush_r>:
 800f658:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f65c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f660:	0716      	lsls	r6, r2, #28
 800f662:	4605      	mov	r5, r0
 800f664:	460c      	mov	r4, r1
 800f666:	d454      	bmi.n	800f712 <__sflush_r+0xba>
 800f668:	684b      	ldr	r3, [r1, #4]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	dc02      	bgt.n	800f674 <__sflush_r+0x1c>
 800f66e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f670:	2b00      	cmp	r3, #0
 800f672:	dd48      	ble.n	800f706 <__sflush_r+0xae>
 800f674:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f676:	2e00      	cmp	r6, #0
 800f678:	d045      	beq.n	800f706 <__sflush_r+0xae>
 800f67a:	2300      	movs	r3, #0
 800f67c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f680:	682f      	ldr	r7, [r5, #0]
 800f682:	6a21      	ldr	r1, [r4, #32]
 800f684:	602b      	str	r3, [r5, #0]
 800f686:	d030      	beq.n	800f6ea <__sflush_r+0x92>
 800f688:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f68a:	89a3      	ldrh	r3, [r4, #12]
 800f68c:	0759      	lsls	r1, r3, #29
 800f68e:	d505      	bpl.n	800f69c <__sflush_r+0x44>
 800f690:	6863      	ldr	r3, [r4, #4]
 800f692:	1ad2      	subs	r2, r2, r3
 800f694:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f696:	b10b      	cbz	r3, 800f69c <__sflush_r+0x44>
 800f698:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f69a:	1ad2      	subs	r2, r2, r3
 800f69c:	2300      	movs	r3, #0
 800f69e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f6a0:	6a21      	ldr	r1, [r4, #32]
 800f6a2:	4628      	mov	r0, r5
 800f6a4:	47b0      	blx	r6
 800f6a6:	1c43      	adds	r3, r0, #1
 800f6a8:	89a3      	ldrh	r3, [r4, #12]
 800f6aa:	d106      	bne.n	800f6ba <__sflush_r+0x62>
 800f6ac:	6829      	ldr	r1, [r5, #0]
 800f6ae:	291d      	cmp	r1, #29
 800f6b0:	d82b      	bhi.n	800f70a <__sflush_r+0xb2>
 800f6b2:	4a2a      	ldr	r2, [pc, #168]	@ (800f75c <__sflush_r+0x104>)
 800f6b4:	410a      	asrs	r2, r1
 800f6b6:	07d6      	lsls	r6, r2, #31
 800f6b8:	d427      	bmi.n	800f70a <__sflush_r+0xb2>
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	6062      	str	r2, [r4, #4]
 800f6be:	04d9      	lsls	r1, r3, #19
 800f6c0:	6922      	ldr	r2, [r4, #16]
 800f6c2:	6022      	str	r2, [r4, #0]
 800f6c4:	d504      	bpl.n	800f6d0 <__sflush_r+0x78>
 800f6c6:	1c42      	adds	r2, r0, #1
 800f6c8:	d101      	bne.n	800f6ce <__sflush_r+0x76>
 800f6ca:	682b      	ldr	r3, [r5, #0]
 800f6cc:	b903      	cbnz	r3, 800f6d0 <__sflush_r+0x78>
 800f6ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800f6d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f6d2:	602f      	str	r7, [r5, #0]
 800f6d4:	b1b9      	cbz	r1, 800f706 <__sflush_r+0xae>
 800f6d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f6da:	4299      	cmp	r1, r3
 800f6dc:	d002      	beq.n	800f6e4 <__sflush_r+0x8c>
 800f6de:	4628      	mov	r0, r5
 800f6e0:	f7ff fbd4 	bl	800ee8c <_free_r>
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f6e8:	e00d      	b.n	800f706 <__sflush_r+0xae>
 800f6ea:	2301      	movs	r3, #1
 800f6ec:	4628      	mov	r0, r5
 800f6ee:	47b0      	blx	r6
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	1c50      	adds	r0, r2, #1
 800f6f4:	d1c9      	bne.n	800f68a <__sflush_r+0x32>
 800f6f6:	682b      	ldr	r3, [r5, #0]
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d0c6      	beq.n	800f68a <__sflush_r+0x32>
 800f6fc:	2b1d      	cmp	r3, #29
 800f6fe:	d001      	beq.n	800f704 <__sflush_r+0xac>
 800f700:	2b16      	cmp	r3, #22
 800f702:	d11e      	bne.n	800f742 <__sflush_r+0xea>
 800f704:	602f      	str	r7, [r5, #0]
 800f706:	2000      	movs	r0, #0
 800f708:	e022      	b.n	800f750 <__sflush_r+0xf8>
 800f70a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f70e:	b21b      	sxth	r3, r3
 800f710:	e01b      	b.n	800f74a <__sflush_r+0xf2>
 800f712:	690f      	ldr	r7, [r1, #16]
 800f714:	2f00      	cmp	r7, #0
 800f716:	d0f6      	beq.n	800f706 <__sflush_r+0xae>
 800f718:	0793      	lsls	r3, r2, #30
 800f71a:	680e      	ldr	r6, [r1, #0]
 800f71c:	bf08      	it	eq
 800f71e:	694b      	ldreq	r3, [r1, #20]
 800f720:	600f      	str	r7, [r1, #0]
 800f722:	bf18      	it	ne
 800f724:	2300      	movne	r3, #0
 800f726:	eba6 0807 	sub.w	r8, r6, r7
 800f72a:	608b      	str	r3, [r1, #8]
 800f72c:	f1b8 0f00 	cmp.w	r8, #0
 800f730:	dde9      	ble.n	800f706 <__sflush_r+0xae>
 800f732:	6a21      	ldr	r1, [r4, #32]
 800f734:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f736:	4643      	mov	r3, r8
 800f738:	463a      	mov	r2, r7
 800f73a:	4628      	mov	r0, r5
 800f73c:	47b0      	blx	r6
 800f73e:	2800      	cmp	r0, #0
 800f740:	dc08      	bgt.n	800f754 <__sflush_r+0xfc>
 800f742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f746:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f74a:	81a3      	strh	r3, [r4, #12]
 800f74c:	f04f 30ff 	mov.w	r0, #4294967295
 800f750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f754:	4407      	add	r7, r0
 800f756:	eba8 0800 	sub.w	r8, r8, r0
 800f75a:	e7e7      	b.n	800f72c <__sflush_r+0xd4>
 800f75c:	dfbffffe 	.word	0xdfbffffe

0800f760 <_fflush_r>:
 800f760:	b538      	push	{r3, r4, r5, lr}
 800f762:	690b      	ldr	r3, [r1, #16]
 800f764:	4605      	mov	r5, r0
 800f766:	460c      	mov	r4, r1
 800f768:	b913      	cbnz	r3, 800f770 <_fflush_r+0x10>
 800f76a:	2500      	movs	r5, #0
 800f76c:	4628      	mov	r0, r5
 800f76e:	bd38      	pop	{r3, r4, r5, pc}
 800f770:	b118      	cbz	r0, 800f77a <_fflush_r+0x1a>
 800f772:	6a03      	ldr	r3, [r0, #32]
 800f774:	b90b      	cbnz	r3, 800f77a <_fflush_r+0x1a>
 800f776:	f7ff f95f 	bl	800ea38 <__sinit>
 800f77a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d0f3      	beq.n	800f76a <_fflush_r+0xa>
 800f782:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f784:	07d0      	lsls	r0, r2, #31
 800f786:	d404      	bmi.n	800f792 <_fflush_r+0x32>
 800f788:	0599      	lsls	r1, r3, #22
 800f78a:	d402      	bmi.n	800f792 <_fflush_r+0x32>
 800f78c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f78e:	f7ff fb4e 	bl	800ee2e <__retarget_lock_acquire_recursive>
 800f792:	4628      	mov	r0, r5
 800f794:	4621      	mov	r1, r4
 800f796:	f7ff ff5f 	bl	800f658 <__sflush_r>
 800f79a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f79c:	07da      	lsls	r2, r3, #31
 800f79e:	4605      	mov	r5, r0
 800f7a0:	d4e4      	bmi.n	800f76c <_fflush_r+0xc>
 800f7a2:	89a3      	ldrh	r3, [r4, #12]
 800f7a4:	059b      	lsls	r3, r3, #22
 800f7a6:	d4e1      	bmi.n	800f76c <_fflush_r+0xc>
 800f7a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f7aa:	f7ff fb41 	bl	800ee30 <__retarget_lock_release_recursive>
 800f7ae:	e7dd      	b.n	800f76c <_fflush_r+0xc>

0800f7b0 <fiprintf>:
 800f7b0:	b40e      	push	{r1, r2, r3}
 800f7b2:	b503      	push	{r0, r1, lr}
 800f7b4:	4601      	mov	r1, r0
 800f7b6:	ab03      	add	r3, sp, #12
 800f7b8:	4805      	ldr	r0, [pc, #20]	@ (800f7d0 <fiprintf+0x20>)
 800f7ba:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7be:	6800      	ldr	r0, [r0, #0]
 800f7c0:	9301      	str	r3, [sp, #4]
 800f7c2:	f000 f88f 	bl	800f8e4 <_vfiprintf_r>
 800f7c6:	b002      	add	sp, #8
 800f7c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7cc:	b003      	add	sp, #12
 800f7ce:	4770      	bx	lr
 800f7d0:	24000038 	.word	0x24000038

0800f7d4 <memmove>:
 800f7d4:	4288      	cmp	r0, r1
 800f7d6:	b510      	push	{r4, lr}
 800f7d8:	eb01 0402 	add.w	r4, r1, r2
 800f7dc:	d902      	bls.n	800f7e4 <memmove+0x10>
 800f7de:	4284      	cmp	r4, r0
 800f7e0:	4623      	mov	r3, r4
 800f7e2:	d807      	bhi.n	800f7f4 <memmove+0x20>
 800f7e4:	1e43      	subs	r3, r0, #1
 800f7e6:	42a1      	cmp	r1, r4
 800f7e8:	d008      	beq.n	800f7fc <memmove+0x28>
 800f7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f7ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f7f2:	e7f8      	b.n	800f7e6 <memmove+0x12>
 800f7f4:	4402      	add	r2, r0
 800f7f6:	4601      	mov	r1, r0
 800f7f8:	428a      	cmp	r2, r1
 800f7fa:	d100      	bne.n	800f7fe <memmove+0x2a>
 800f7fc:	bd10      	pop	{r4, pc}
 800f7fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f802:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f806:	e7f7      	b.n	800f7f8 <memmove+0x24>

0800f808 <_sbrk_r>:
 800f808:	b538      	push	{r3, r4, r5, lr}
 800f80a:	4d06      	ldr	r5, [pc, #24]	@ (800f824 <_sbrk_r+0x1c>)
 800f80c:	2300      	movs	r3, #0
 800f80e:	4604      	mov	r4, r0
 800f810:	4608      	mov	r0, r1
 800f812:	602b      	str	r3, [r5, #0]
 800f814:	f7f2 fb7e 	bl	8001f14 <_sbrk>
 800f818:	1c43      	adds	r3, r0, #1
 800f81a:	d102      	bne.n	800f822 <_sbrk_r+0x1a>
 800f81c:	682b      	ldr	r3, [r5, #0]
 800f81e:	b103      	cbz	r3, 800f822 <_sbrk_r+0x1a>
 800f820:	6023      	str	r3, [r4, #0]
 800f822:	bd38      	pop	{r3, r4, r5, pc}
 800f824:	240050c4 	.word	0x240050c4

0800f828 <abort>:
 800f828:	b508      	push	{r3, lr}
 800f82a:	2006      	movs	r0, #6
 800f82c:	f000 fa2e 	bl	800fc8c <raise>
 800f830:	2001      	movs	r0, #1
 800f832:	f7f2 faf7 	bl	8001e24 <_exit>

0800f836 <_realloc_r>:
 800f836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f83a:	4680      	mov	r8, r0
 800f83c:	4615      	mov	r5, r2
 800f83e:	460c      	mov	r4, r1
 800f840:	b921      	cbnz	r1, 800f84c <_realloc_r+0x16>
 800f842:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f846:	4611      	mov	r1, r2
 800f848:	f7ff bb94 	b.w	800ef74 <_malloc_r>
 800f84c:	b92a      	cbnz	r2, 800f85a <_realloc_r+0x24>
 800f84e:	f7ff fb1d 	bl	800ee8c <_free_r>
 800f852:	2400      	movs	r4, #0
 800f854:	4620      	mov	r0, r4
 800f856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f85a:	f000 fa33 	bl	800fcc4 <_malloc_usable_size_r>
 800f85e:	4285      	cmp	r5, r0
 800f860:	4606      	mov	r6, r0
 800f862:	d802      	bhi.n	800f86a <_realloc_r+0x34>
 800f864:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f868:	d8f4      	bhi.n	800f854 <_realloc_r+0x1e>
 800f86a:	4629      	mov	r1, r5
 800f86c:	4640      	mov	r0, r8
 800f86e:	f7ff fb81 	bl	800ef74 <_malloc_r>
 800f872:	4607      	mov	r7, r0
 800f874:	2800      	cmp	r0, #0
 800f876:	d0ec      	beq.n	800f852 <_realloc_r+0x1c>
 800f878:	42b5      	cmp	r5, r6
 800f87a:	462a      	mov	r2, r5
 800f87c:	4621      	mov	r1, r4
 800f87e:	bf28      	it	cs
 800f880:	4632      	movcs	r2, r6
 800f882:	f7ff fad6 	bl	800ee32 <memcpy>
 800f886:	4621      	mov	r1, r4
 800f888:	4640      	mov	r0, r8
 800f88a:	f7ff faff 	bl	800ee8c <_free_r>
 800f88e:	463c      	mov	r4, r7
 800f890:	e7e0      	b.n	800f854 <_realloc_r+0x1e>

0800f892 <__sfputc_r>:
 800f892:	6893      	ldr	r3, [r2, #8]
 800f894:	3b01      	subs	r3, #1
 800f896:	2b00      	cmp	r3, #0
 800f898:	b410      	push	{r4}
 800f89a:	6093      	str	r3, [r2, #8]
 800f89c:	da08      	bge.n	800f8b0 <__sfputc_r+0x1e>
 800f89e:	6994      	ldr	r4, [r2, #24]
 800f8a0:	42a3      	cmp	r3, r4
 800f8a2:	db01      	blt.n	800f8a8 <__sfputc_r+0x16>
 800f8a4:	290a      	cmp	r1, #10
 800f8a6:	d103      	bne.n	800f8b0 <__sfputc_r+0x1e>
 800f8a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8ac:	f000 b932 	b.w	800fb14 <__swbuf_r>
 800f8b0:	6813      	ldr	r3, [r2, #0]
 800f8b2:	1c58      	adds	r0, r3, #1
 800f8b4:	6010      	str	r0, [r2, #0]
 800f8b6:	7019      	strb	r1, [r3, #0]
 800f8b8:	4608      	mov	r0, r1
 800f8ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8be:	4770      	bx	lr

0800f8c0 <__sfputs_r>:
 800f8c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8c2:	4606      	mov	r6, r0
 800f8c4:	460f      	mov	r7, r1
 800f8c6:	4614      	mov	r4, r2
 800f8c8:	18d5      	adds	r5, r2, r3
 800f8ca:	42ac      	cmp	r4, r5
 800f8cc:	d101      	bne.n	800f8d2 <__sfputs_r+0x12>
 800f8ce:	2000      	movs	r0, #0
 800f8d0:	e007      	b.n	800f8e2 <__sfputs_r+0x22>
 800f8d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f8d6:	463a      	mov	r2, r7
 800f8d8:	4630      	mov	r0, r6
 800f8da:	f7ff ffda 	bl	800f892 <__sfputc_r>
 800f8de:	1c43      	adds	r3, r0, #1
 800f8e0:	d1f3      	bne.n	800f8ca <__sfputs_r+0xa>
 800f8e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f8e4 <_vfiprintf_r>:
 800f8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8e8:	460d      	mov	r5, r1
 800f8ea:	b09d      	sub	sp, #116	@ 0x74
 800f8ec:	4614      	mov	r4, r2
 800f8ee:	4698      	mov	r8, r3
 800f8f0:	4606      	mov	r6, r0
 800f8f2:	b118      	cbz	r0, 800f8fc <_vfiprintf_r+0x18>
 800f8f4:	6a03      	ldr	r3, [r0, #32]
 800f8f6:	b90b      	cbnz	r3, 800f8fc <_vfiprintf_r+0x18>
 800f8f8:	f7ff f89e 	bl	800ea38 <__sinit>
 800f8fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f8fe:	07d9      	lsls	r1, r3, #31
 800f900:	d405      	bmi.n	800f90e <_vfiprintf_r+0x2a>
 800f902:	89ab      	ldrh	r3, [r5, #12]
 800f904:	059a      	lsls	r2, r3, #22
 800f906:	d402      	bmi.n	800f90e <_vfiprintf_r+0x2a>
 800f908:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f90a:	f7ff fa90 	bl	800ee2e <__retarget_lock_acquire_recursive>
 800f90e:	89ab      	ldrh	r3, [r5, #12]
 800f910:	071b      	lsls	r3, r3, #28
 800f912:	d501      	bpl.n	800f918 <_vfiprintf_r+0x34>
 800f914:	692b      	ldr	r3, [r5, #16]
 800f916:	b99b      	cbnz	r3, 800f940 <_vfiprintf_r+0x5c>
 800f918:	4629      	mov	r1, r5
 800f91a:	4630      	mov	r0, r6
 800f91c:	f000 f938 	bl	800fb90 <__swsetup_r>
 800f920:	b170      	cbz	r0, 800f940 <_vfiprintf_r+0x5c>
 800f922:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f924:	07dc      	lsls	r4, r3, #31
 800f926:	d504      	bpl.n	800f932 <_vfiprintf_r+0x4e>
 800f928:	f04f 30ff 	mov.w	r0, #4294967295
 800f92c:	b01d      	add	sp, #116	@ 0x74
 800f92e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f932:	89ab      	ldrh	r3, [r5, #12]
 800f934:	0598      	lsls	r0, r3, #22
 800f936:	d4f7      	bmi.n	800f928 <_vfiprintf_r+0x44>
 800f938:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f93a:	f7ff fa79 	bl	800ee30 <__retarget_lock_release_recursive>
 800f93e:	e7f3      	b.n	800f928 <_vfiprintf_r+0x44>
 800f940:	2300      	movs	r3, #0
 800f942:	9309      	str	r3, [sp, #36]	@ 0x24
 800f944:	2320      	movs	r3, #32
 800f946:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f94a:	f8cd 800c 	str.w	r8, [sp, #12]
 800f94e:	2330      	movs	r3, #48	@ 0x30
 800f950:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800fb00 <_vfiprintf_r+0x21c>
 800f954:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f958:	f04f 0901 	mov.w	r9, #1
 800f95c:	4623      	mov	r3, r4
 800f95e:	469a      	mov	sl, r3
 800f960:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f964:	b10a      	cbz	r2, 800f96a <_vfiprintf_r+0x86>
 800f966:	2a25      	cmp	r2, #37	@ 0x25
 800f968:	d1f9      	bne.n	800f95e <_vfiprintf_r+0x7a>
 800f96a:	ebba 0b04 	subs.w	fp, sl, r4
 800f96e:	d00b      	beq.n	800f988 <_vfiprintf_r+0xa4>
 800f970:	465b      	mov	r3, fp
 800f972:	4622      	mov	r2, r4
 800f974:	4629      	mov	r1, r5
 800f976:	4630      	mov	r0, r6
 800f978:	f7ff ffa2 	bl	800f8c0 <__sfputs_r>
 800f97c:	3001      	adds	r0, #1
 800f97e:	f000 80a7 	beq.w	800fad0 <_vfiprintf_r+0x1ec>
 800f982:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f984:	445a      	add	r2, fp
 800f986:	9209      	str	r2, [sp, #36]	@ 0x24
 800f988:	f89a 3000 	ldrb.w	r3, [sl]
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	f000 809f 	beq.w	800fad0 <_vfiprintf_r+0x1ec>
 800f992:	2300      	movs	r3, #0
 800f994:	f04f 32ff 	mov.w	r2, #4294967295
 800f998:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f99c:	f10a 0a01 	add.w	sl, sl, #1
 800f9a0:	9304      	str	r3, [sp, #16]
 800f9a2:	9307      	str	r3, [sp, #28]
 800f9a4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f9a8:	931a      	str	r3, [sp, #104]	@ 0x68
 800f9aa:	4654      	mov	r4, sl
 800f9ac:	2205      	movs	r2, #5
 800f9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9b2:	4853      	ldr	r0, [pc, #332]	@ (800fb00 <_vfiprintf_r+0x21c>)
 800f9b4:	f7f0 fc9c 	bl	80002f0 <memchr>
 800f9b8:	9a04      	ldr	r2, [sp, #16]
 800f9ba:	b9d8      	cbnz	r0, 800f9f4 <_vfiprintf_r+0x110>
 800f9bc:	06d1      	lsls	r1, r2, #27
 800f9be:	bf44      	itt	mi
 800f9c0:	2320      	movmi	r3, #32
 800f9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9c6:	0713      	lsls	r3, r2, #28
 800f9c8:	bf44      	itt	mi
 800f9ca:	232b      	movmi	r3, #43	@ 0x2b
 800f9cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f9d0:	f89a 3000 	ldrb.w	r3, [sl]
 800f9d4:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d6:	d015      	beq.n	800fa04 <_vfiprintf_r+0x120>
 800f9d8:	9a07      	ldr	r2, [sp, #28]
 800f9da:	4654      	mov	r4, sl
 800f9dc:	2000      	movs	r0, #0
 800f9de:	f04f 0c0a 	mov.w	ip, #10
 800f9e2:	4621      	mov	r1, r4
 800f9e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f9e8:	3b30      	subs	r3, #48	@ 0x30
 800f9ea:	2b09      	cmp	r3, #9
 800f9ec:	d94b      	bls.n	800fa86 <_vfiprintf_r+0x1a2>
 800f9ee:	b1b0      	cbz	r0, 800fa1e <_vfiprintf_r+0x13a>
 800f9f0:	9207      	str	r2, [sp, #28]
 800f9f2:	e014      	b.n	800fa1e <_vfiprintf_r+0x13a>
 800f9f4:	eba0 0308 	sub.w	r3, r0, r8
 800f9f8:	fa09 f303 	lsl.w	r3, r9, r3
 800f9fc:	4313      	orrs	r3, r2
 800f9fe:	9304      	str	r3, [sp, #16]
 800fa00:	46a2      	mov	sl, r4
 800fa02:	e7d2      	b.n	800f9aa <_vfiprintf_r+0xc6>
 800fa04:	9b03      	ldr	r3, [sp, #12]
 800fa06:	1d19      	adds	r1, r3, #4
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	9103      	str	r1, [sp, #12]
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	bfbb      	ittet	lt
 800fa10:	425b      	neglt	r3, r3
 800fa12:	f042 0202 	orrlt.w	r2, r2, #2
 800fa16:	9307      	strge	r3, [sp, #28]
 800fa18:	9307      	strlt	r3, [sp, #28]
 800fa1a:	bfb8      	it	lt
 800fa1c:	9204      	strlt	r2, [sp, #16]
 800fa1e:	7823      	ldrb	r3, [r4, #0]
 800fa20:	2b2e      	cmp	r3, #46	@ 0x2e
 800fa22:	d10a      	bne.n	800fa3a <_vfiprintf_r+0x156>
 800fa24:	7863      	ldrb	r3, [r4, #1]
 800fa26:	2b2a      	cmp	r3, #42	@ 0x2a
 800fa28:	d132      	bne.n	800fa90 <_vfiprintf_r+0x1ac>
 800fa2a:	9b03      	ldr	r3, [sp, #12]
 800fa2c:	1d1a      	adds	r2, r3, #4
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	9203      	str	r2, [sp, #12]
 800fa32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fa36:	3402      	adds	r4, #2
 800fa38:	9305      	str	r3, [sp, #20]
 800fa3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800fb10 <_vfiprintf_r+0x22c>
 800fa3e:	7821      	ldrb	r1, [r4, #0]
 800fa40:	2203      	movs	r2, #3
 800fa42:	4650      	mov	r0, sl
 800fa44:	f7f0 fc54 	bl	80002f0 <memchr>
 800fa48:	b138      	cbz	r0, 800fa5a <_vfiprintf_r+0x176>
 800fa4a:	9b04      	ldr	r3, [sp, #16]
 800fa4c:	eba0 000a 	sub.w	r0, r0, sl
 800fa50:	2240      	movs	r2, #64	@ 0x40
 800fa52:	4082      	lsls	r2, r0
 800fa54:	4313      	orrs	r3, r2
 800fa56:	3401      	adds	r4, #1
 800fa58:	9304      	str	r3, [sp, #16]
 800fa5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa5e:	4829      	ldr	r0, [pc, #164]	@ (800fb04 <_vfiprintf_r+0x220>)
 800fa60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa64:	2206      	movs	r2, #6
 800fa66:	f7f0 fc43 	bl	80002f0 <memchr>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	d03f      	beq.n	800faee <_vfiprintf_r+0x20a>
 800fa6e:	4b26      	ldr	r3, [pc, #152]	@ (800fb08 <_vfiprintf_r+0x224>)
 800fa70:	bb1b      	cbnz	r3, 800faba <_vfiprintf_r+0x1d6>
 800fa72:	9b03      	ldr	r3, [sp, #12]
 800fa74:	3307      	adds	r3, #7
 800fa76:	f023 0307 	bic.w	r3, r3, #7
 800fa7a:	3308      	adds	r3, #8
 800fa7c:	9303      	str	r3, [sp, #12]
 800fa7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa80:	443b      	add	r3, r7
 800fa82:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa84:	e76a      	b.n	800f95c <_vfiprintf_r+0x78>
 800fa86:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa8a:	460c      	mov	r4, r1
 800fa8c:	2001      	movs	r0, #1
 800fa8e:	e7a8      	b.n	800f9e2 <_vfiprintf_r+0xfe>
 800fa90:	2300      	movs	r3, #0
 800fa92:	3401      	adds	r4, #1
 800fa94:	9305      	str	r3, [sp, #20]
 800fa96:	4619      	mov	r1, r3
 800fa98:	f04f 0c0a 	mov.w	ip, #10
 800fa9c:	4620      	mov	r0, r4
 800fa9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800faa2:	3a30      	subs	r2, #48	@ 0x30
 800faa4:	2a09      	cmp	r2, #9
 800faa6:	d903      	bls.n	800fab0 <_vfiprintf_r+0x1cc>
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d0c6      	beq.n	800fa3a <_vfiprintf_r+0x156>
 800faac:	9105      	str	r1, [sp, #20]
 800faae:	e7c4      	b.n	800fa3a <_vfiprintf_r+0x156>
 800fab0:	fb0c 2101 	mla	r1, ip, r1, r2
 800fab4:	4604      	mov	r4, r0
 800fab6:	2301      	movs	r3, #1
 800fab8:	e7f0      	b.n	800fa9c <_vfiprintf_r+0x1b8>
 800faba:	ab03      	add	r3, sp, #12
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	462a      	mov	r2, r5
 800fac0:	4b12      	ldr	r3, [pc, #72]	@ (800fb0c <_vfiprintf_r+0x228>)
 800fac2:	a904      	add	r1, sp, #16
 800fac4:	4630      	mov	r0, r6
 800fac6:	f3af 8000 	nop.w
 800faca:	4607      	mov	r7, r0
 800facc:	1c78      	adds	r0, r7, #1
 800face:	d1d6      	bne.n	800fa7e <_vfiprintf_r+0x19a>
 800fad0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fad2:	07d9      	lsls	r1, r3, #31
 800fad4:	d405      	bmi.n	800fae2 <_vfiprintf_r+0x1fe>
 800fad6:	89ab      	ldrh	r3, [r5, #12]
 800fad8:	059a      	lsls	r2, r3, #22
 800fada:	d402      	bmi.n	800fae2 <_vfiprintf_r+0x1fe>
 800fadc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fade:	f7ff f9a7 	bl	800ee30 <__retarget_lock_release_recursive>
 800fae2:	89ab      	ldrh	r3, [r5, #12]
 800fae4:	065b      	lsls	r3, r3, #25
 800fae6:	f53f af1f 	bmi.w	800f928 <_vfiprintf_r+0x44>
 800faea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800faec:	e71e      	b.n	800f92c <_vfiprintf_r+0x48>
 800faee:	ab03      	add	r3, sp, #12
 800faf0:	9300      	str	r3, [sp, #0]
 800faf2:	462a      	mov	r2, r5
 800faf4:	4b05      	ldr	r3, [pc, #20]	@ (800fb0c <_vfiprintf_r+0x228>)
 800faf6:	a904      	add	r1, sp, #16
 800faf8:	4630      	mov	r0, r6
 800fafa:	f7ff fc8d 	bl	800f418 <_printf_i>
 800fafe:	e7e4      	b.n	800faca <_vfiprintf_r+0x1e6>
 800fb00:	08010221 	.word	0x08010221
 800fb04:	0801022b 	.word	0x0801022b
 800fb08:	00000000 	.word	0x00000000
 800fb0c:	0800f8c1 	.word	0x0800f8c1
 800fb10:	08010227 	.word	0x08010227

0800fb14 <__swbuf_r>:
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	460e      	mov	r6, r1
 800fb18:	4614      	mov	r4, r2
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	b118      	cbz	r0, 800fb26 <__swbuf_r+0x12>
 800fb1e:	6a03      	ldr	r3, [r0, #32]
 800fb20:	b90b      	cbnz	r3, 800fb26 <__swbuf_r+0x12>
 800fb22:	f7fe ff89 	bl	800ea38 <__sinit>
 800fb26:	69a3      	ldr	r3, [r4, #24]
 800fb28:	60a3      	str	r3, [r4, #8]
 800fb2a:	89a3      	ldrh	r3, [r4, #12]
 800fb2c:	071a      	lsls	r2, r3, #28
 800fb2e:	d501      	bpl.n	800fb34 <__swbuf_r+0x20>
 800fb30:	6923      	ldr	r3, [r4, #16]
 800fb32:	b943      	cbnz	r3, 800fb46 <__swbuf_r+0x32>
 800fb34:	4621      	mov	r1, r4
 800fb36:	4628      	mov	r0, r5
 800fb38:	f000 f82a 	bl	800fb90 <__swsetup_r>
 800fb3c:	b118      	cbz	r0, 800fb46 <__swbuf_r+0x32>
 800fb3e:	f04f 37ff 	mov.w	r7, #4294967295
 800fb42:	4638      	mov	r0, r7
 800fb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb46:	6823      	ldr	r3, [r4, #0]
 800fb48:	6922      	ldr	r2, [r4, #16]
 800fb4a:	1a98      	subs	r0, r3, r2
 800fb4c:	6963      	ldr	r3, [r4, #20]
 800fb4e:	b2f6      	uxtb	r6, r6
 800fb50:	4283      	cmp	r3, r0
 800fb52:	4637      	mov	r7, r6
 800fb54:	dc05      	bgt.n	800fb62 <__swbuf_r+0x4e>
 800fb56:	4621      	mov	r1, r4
 800fb58:	4628      	mov	r0, r5
 800fb5a:	f7ff fe01 	bl	800f760 <_fflush_r>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	d1ed      	bne.n	800fb3e <__swbuf_r+0x2a>
 800fb62:	68a3      	ldr	r3, [r4, #8]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	60a3      	str	r3, [r4, #8]
 800fb68:	6823      	ldr	r3, [r4, #0]
 800fb6a:	1c5a      	adds	r2, r3, #1
 800fb6c:	6022      	str	r2, [r4, #0]
 800fb6e:	701e      	strb	r6, [r3, #0]
 800fb70:	6962      	ldr	r2, [r4, #20]
 800fb72:	1c43      	adds	r3, r0, #1
 800fb74:	429a      	cmp	r2, r3
 800fb76:	d004      	beq.n	800fb82 <__swbuf_r+0x6e>
 800fb78:	89a3      	ldrh	r3, [r4, #12]
 800fb7a:	07db      	lsls	r3, r3, #31
 800fb7c:	d5e1      	bpl.n	800fb42 <__swbuf_r+0x2e>
 800fb7e:	2e0a      	cmp	r6, #10
 800fb80:	d1df      	bne.n	800fb42 <__swbuf_r+0x2e>
 800fb82:	4621      	mov	r1, r4
 800fb84:	4628      	mov	r0, r5
 800fb86:	f7ff fdeb 	bl	800f760 <_fflush_r>
 800fb8a:	2800      	cmp	r0, #0
 800fb8c:	d0d9      	beq.n	800fb42 <__swbuf_r+0x2e>
 800fb8e:	e7d6      	b.n	800fb3e <__swbuf_r+0x2a>

0800fb90 <__swsetup_r>:
 800fb90:	b538      	push	{r3, r4, r5, lr}
 800fb92:	4b29      	ldr	r3, [pc, #164]	@ (800fc38 <__swsetup_r+0xa8>)
 800fb94:	4605      	mov	r5, r0
 800fb96:	6818      	ldr	r0, [r3, #0]
 800fb98:	460c      	mov	r4, r1
 800fb9a:	b118      	cbz	r0, 800fba4 <__swsetup_r+0x14>
 800fb9c:	6a03      	ldr	r3, [r0, #32]
 800fb9e:	b90b      	cbnz	r3, 800fba4 <__swsetup_r+0x14>
 800fba0:	f7fe ff4a 	bl	800ea38 <__sinit>
 800fba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fba8:	0719      	lsls	r1, r3, #28
 800fbaa:	d422      	bmi.n	800fbf2 <__swsetup_r+0x62>
 800fbac:	06da      	lsls	r2, r3, #27
 800fbae:	d407      	bmi.n	800fbc0 <__swsetup_r+0x30>
 800fbb0:	2209      	movs	r2, #9
 800fbb2:	602a      	str	r2, [r5, #0]
 800fbb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fbb8:	81a3      	strh	r3, [r4, #12]
 800fbba:	f04f 30ff 	mov.w	r0, #4294967295
 800fbbe:	e033      	b.n	800fc28 <__swsetup_r+0x98>
 800fbc0:	0758      	lsls	r0, r3, #29
 800fbc2:	d512      	bpl.n	800fbea <__swsetup_r+0x5a>
 800fbc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fbc6:	b141      	cbz	r1, 800fbda <__swsetup_r+0x4a>
 800fbc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fbcc:	4299      	cmp	r1, r3
 800fbce:	d002      	beq.n	800fbd6 <__swsetup_r+0x46>
 800fbd0:	4628      	mov	r0, r5
 800fbd2:	f7ff f95b 	bl	800ee8c <_free_r>
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800fbda:	89a3      	ldrh	r3, [r4, #12]
 800fbdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fbe0:	81a3      	strh	r3, [r4, #12]
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6063      	str	r3, [r4, #4]
 800fbe6:	6923      	ldr	r3, [r4, #16]
 800fbe8:	6023      	str	r3, [r4, #0]
 800fbea:	89a3      	ldrh	r3, [r4, #12]
 800fbec:	f043 0308 	orr.w	r3, r3, #8
 800fbf0:	81a3      	strh	r3, [r4, #12]
 800fbf2:	6923      	ldr	r3, [r4, #16]
 800fbf4:	b94b      	cbnz	r3, 800fc0a <__swsetup_r+0x7a>
 800fbf6:	89a3      	ldrh	r3, [r4, #12]
 800fbf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fbfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fc00:	d003      	beq.n	800fc0a <__swsetup_r+0x7a>
 800fc02:	4621      	mov	r1, r4
 800fc04:	4628      	mov	r0, r5
 800fc06:	f000 f88b 	bl	800fd20 <__smakebuf_r>
 800fc0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc0e:	f013 0201 	ands.w	r2, r3, #1
 800fc12:	d00a      	beq.n	800fc2a <__swsetup_r+0x9a>
 800fc14:	2200      	movs	r2, #0
 800fc16:	60a2      	str	r2, [r4, #8]
 800fc18:	6962      	ldr	r2, [r4, #20]
 800fc1a:	4252      	negs	r2, r2
 800fc1c:	61a2      	str	r2, [r4, #24]
 800fc1e:	6922      	ldr	r2, [r4, #16]
 800fc20:	b942      	cbnz	r2, 800fc34 <__swsetup_r+0xa4>
 800fc22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fc26:	d1c5      	bne.n	800fbb4 <__swsetup_r+0x24>
 800fc28:	bd38      	pop	{r3, r4, r5, pc}
 800fc2a:	0799      	lsls	r1, r3, #30
 800fc2c:	bf58      	it	pl
 800fc2e:	6962      	ldrpl	r2, [r4, #20]
 800fc30:	60a2      	str	r2, [r4, #8]
 800fc32:	e7f4      	b.n	800fc1e <__swsetup_r+0x8e>
 800fc34:	2000      	movs	r0, #0
 800fc36:	e7f7      	b.n	800fc28 <__swsetup_r+0x98>
 800fc38:	24000038 	.word	0x24000038

0800fc3c <_raise_r>:
 800fc3c:	291f      	cmp	r1, #31
 800fc3e:	b538      	push	{r3, r4, r5, lr}
 800fc40:	4605      	mov	r5, r0
 800fc42:	460c      	mov	r4, r1
 800fc44:	d904      	bls.n	800fc50 <_raise_r+0x14>
 800fc46:	2316      	movs	r3, #22
 800fc48:	6003      	str	r3, [r0, #0]
 800fc4a:	f04f 30ff 	mov.w	r0, #4294967295
 800fc4e:	bd38      	pop	{r3, r4, r5, pc}
 800fc50:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fc52:	b112      	cbz	r2, 800fc5a <_raise_r+0x1e>
 800fc54:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fc58:	b94b      	cbnz	r3, 800fc6e <_raise_r+0x32>
 800fc5a:	4628      	mov	r0, r5
 800fc5c:	f000 f830 	bl	800fcc0 <_getpid_r>
 800fc60:	4622      	mov	r2, r4
 800fc62:	4601      	mov	r1, r0
 800fc64:	4628      	mov	r0, r5
 800fc66:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fc6a:	f000 b817 	b.w	800fc9c <_kill_r>
 800fc6e:	2b01      	cmp	r3, #1
 800fc70:	d00a      	beq.n	800fc88 <_raise_r+0x4c>
 800fc72:	1c59      	adds	r1, r3, #1
 800fc74:	d103      	bne.n	800fc7e <_raise_r+0x42>
 800fc76:	2316      	movs	r3, #22
 800fc78:	6003      	str	r3, [r0, #0]
 800fc7a:	2001      	movs	r0, #1
 800fc7c:	e7e7      	b.n	800fc4e <_raise_r+0x12>
 800fc7e:	2100      	movs	r1, #0
 800fc80:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fc84:	4620      	mov	r0, r4
 800fc86:	4798      	blx	r3
 800fc88:	2000      	movs	r0, #0
 800fc8a:	e7e0      	b.n	800fc4e <_raise_r+0x12>

0800fc8c <raise>:
 800fc8c:	4b02      	ldr	r3, [pc, #8]	@ (800fc98 <raise+0xc>)
 800fc8e:	4601      	mov	r1, r0
 800fc90:	6818      	ldr	r0, [r3, #0]
 800fc92:	f7ff bfd3 	b.w	800fc3c <_raise_r>
 800fc96:	bf00      	nop
 800fc98:	24000038 	.word	0x24000038

0800fc9c <_kill_r>:
 800fc9c:	b538      	push	{r3, r4, r5, lr}
 800fc9e:	4d07      	ldr	r5, [pc, #28]	@ (800fcbc <_kill_r+0x20>)
 800fca0:	2300      	movs	r3, #0
 800fca2:	4604      	mov	r4, r0
 800fca4:	4608      	mov	r0, r1
 800fca6:	4611      	mov	r1, r2
 800fca8:	602b      	str	r3, [r5, #0]
 800fcaa:	f7f2 f8ab 	bl	8001e04 <_kill>
 800fcae:	1c43      	adds	r3, r0, #1
 800fcb0:	d102      	bne.n	800fcb8 <_kill_r+0x1c>
 800fcb2:	682b      	ldr	r3, [r5, #0]
 800fcb4:	b103      	cbz	r3, 800fcb8 <_kill_r+0x1c>
 800fcb6:	6023      	str	r3, [r4, #0]
 800fcb8:	bd38      	pop	{r3, r4, r5, pc}
 800fcba:	bf00      	nop
 800fcbc:	240050c4 	.word	0x240050c4

0800fcc0 <_getpid_r>:
 800fcc0:	f7f2 b898 	b.w	8001df4 <_getpid>

0800fcc4 <_malloc_usable_size_r>:
 800fcc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcc8:	1f18      	subs	r0, r3, #4
 800fcca:	2b00      	cmp	r3, #0
 800fccc:	bfbc      	itt	lt
 800fcce:	580b      	ldrlt	r3, [r1, r0]
 800fcd0:	18c0      	addlt	r0, r0, r3
 800fcd2:	4770      	bx	lr

0800fcd4 <__swhatbuf_r>:
 800fcd4:	b570      	push	{r4, r5, r6, lr}
 800fcd6:	460c      	mov	r4, r1
 800fcd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fcdc:	2900      	cmp	r1, #0
 800fcde:	b096      	sub	sp, #88	@ 0x58
 800fce0:	4615      	mov	r5, r2
 800fce2:	461e      	mov	r6, r3
 800fce4:	da0d      	bge.n	800fd02 <__swhatbuf_r+0x2e>
 800fce6:	89a3      	ldrh	r3, [r4, #12]
 800fce8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fcec:	f04f 0100 	mov.w	r1, #0
 800fcf0:	bf14      	ite	ne
 800fcf2:	2340      	movne	r3, #64	@ 0x40
 800fcf4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fcf8:	2000      	movs	r0, #0
 800fcfa:	6031      	str	r1, [r6, #0]
 800fcfc:	602b      	str	r3, [r5, #0]
 800fcfe:	b016      	add	sp, #88	@ 0x58
 800fd00:	bd70      	pop	{r4, r5, r6, pc}
 800fd02:	466a      	mov	r2, sp
 800fd04:	f000 f848 	bl	800fd98 <_fstat_r>
 800fd08:	2800      	cmp	r0, #0
 800fd0a:	dbec      	blt.n	800fce6 <__swhatbuf_r+0x12>
 800fd0c:	9901      	ldr	r1, [sp, #4]
 800fd0e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fd12:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fd16:	4259      	negs	r1, r3
 800fd18:	4159      	adcs	r1, r3
 800fd1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fd1e:	e7eb      	b.n	800fcf8 <__swhatbuf_r+0x24>

0800fd20 <__smakebuf_r>:
 800fd20:	898b      	ldrh	r3, [r1, #12]
 800fd22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd24:	079d      	lsls	r5, r3, #30
 800fd26:	4606      	mov	r6, r0
 800fd28:	460c      	mov	r4, r1
 800fd2a:	d507      	bpl.n	800fd3c <__smakebuf_r+0x1c>
 800fd2c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	6123      	str	r3, [r4, #16]
 800fd34:	2301      	movs	r3, #1
 800fd36:	6163      	str	r3, [r4, #20]
 800fd38:	b003      	add	sp, #12
 800fd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd3c:	ab01      	add	r3, sp, #4
 800fd3e:	466a      	mov	r2, sp
 800fd40:	f7ff ffc8 	bl	800fcd4 <__swhatbuf_r>
 800fd44:	9f00      	ldr	r7, [sp, #0]
 800fd46:	4605      	mov	r5, r0
 800fd48:	4639      	mov	r1, r7
 800fd4a:	4630      	mov	r0, r6
 800fd4c:	f7ff f912 	bl	800ef74 <_malloc_r>
 800fd50:	b948      	cbnz	r0, 800fd66 <__smakebuf_r+0x46>
 800fd52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd56:	059a      	lsls	r2, r3, #22
 800fd58:	d4ee      	bmi.n	800fd38 <__smakebuf_r+0x18>
 800fd5a:	f023 0303 	bic.w	r3, r3, #3
 800fd5e:	f043 0302 	orr.w	r3, r3, #2
 800fd62:	81a3      	strh	r3, [r4, #12]
 800fd64:	e7e2      	b.n	800fd2c <__smakebuf_r+0xc>
 800fd66:	89a3      	ldrh	r3, [r4, #12]
 800fd68:	6020      	str	r0, [r4, #0]
 800fd6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fd6e:	81a3      	strh	r3, [r4, #12]
 800fd70:	9b01      	ldr	r3, [sp, #4]
 800fd72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fd76:	b15b      	cbz	r3, 800fd90 <__smakebuf_r+0x70>
 800fd78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fd7c:	4630      	mov	r0, r6
 800fd7e:	f000 f81d 	bl	800fdbc <_isatty_r>
 800fd82:	b128      	cbz	r0, 800fd90 <__smakebuf_r+0x70>
 800fd84:	89a3      	ldrh	r3, [r4, #12]
 800fd86:	f023 0303 	bic.w	r3, r3, #3
 800fd8a:	f043 0301 	orr.w	r3, r3, #1
 800fd8e:	81a3      	strh	r3, [r4, #12]
 800fd90:	89a3      	ldrh	r3, [r4, #12]
 800fd92:	431d      	orrs	r5, r3
 800fd94:	81a5      	strh	r5, [r4, #12]
 800fd96:	e7cf      	b.n	800fd38 <__smakebuf_r+0x18>

0800fd98 <_fstat_r>:
 800fd98:	b538      	push	{r3, r4, r5, lr}
 800fd9a:	4d07      	ldr	r5, [pc, #28]	@ (800fdb8 <_fstat_r+0x20>)
 800fd9c:	2300      	movs	r3, #0
 800fd9e:	4604      	mov	r4, r0
 800fda0:	4608      	mov	r0, r1
 800fda2:	4611      	mov	r1, r2
 800fda4:	602b      	str	r3, [r5, #0]
 800fda6:	f7f2 f88d 	bl	8001ec4 <_fstat>
 800fdaa:	1c43      	adds	r3, r0, #1
 800fdac:	d102      	bne.n	800fdb4 <_fstat_r+0x1c>
 800fdae:	682b      	ldr	r3, [r5, #0]
 800fdb0:	b103      	cbz	r3, 800fdb4 <_fstat_r+0x1c>
 800fdb2:	6023      	str	r3, [r4, #0]
 800fdb4:	bd38      	pop	{r3, r4, r5, pc}
 800fdb6:	bf00      	nop
 800fdb8:	240050c4 	.word	0x240050c4

0800fdbc <_isatty_r>:
 800fdbc:	b538      	push	{r3, r4, r5, lr}
 800fdbe:	4d06      	ldr	r5, [pc, #24]	@ (800fdd8 <_isatty_r+0x1c>)
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4604      	mov	r4, r0
 800fdc4:	4608      	mov	r0, r1
 800fdc6:	602b      	str	r3, [r5, #0]
 800fdc8:	f7f2 f88c 	bl	8001ee4 <_isatty>
 800fdcc:	1c43      	adds	r3, r0, #1
 800fdce:	d102      	bne.n	800fdd6 <_isatty_r+0x1a>
 800fdd0:	682b      	ldr	r3, [r5, #0]
 800fdd2:	b103      	cbz	r3, 800fdd6 <_isatty_r+0x1a>
 800fdd4:	6023      	str	r3, [r4, #0]
 800fdd6:	bd38      	pop	{r3, r4, r5, pc}
 800fdd8:	240050c4 	.word	0x240050c4

0800fddc <_init>:
 800fddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdde:	bf00      	nop
 800fde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde2:	bc08      	pop	{r3}
 800fde4:	469e      	mov	lr, r3
 800fde6:	4770      	bx	lr

0800fde8 <_fini>:
 800fde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdea:	bf00      	nop
 800fdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdee:	bc08      	pop	{r3}
 800fdf0:	469e      	mov	lr, r3
 800fdf2:	4770      	bx	lr
