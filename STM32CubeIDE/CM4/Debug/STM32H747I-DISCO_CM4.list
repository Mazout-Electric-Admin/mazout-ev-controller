
STM32H747I-DISCO_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f844  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d8  0810fae4  0810fae4  00010ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810febc  0810febc  00010ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810fec4  0810fec4  00010ec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0810fec8  0810fec8  00010ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000188  10000000  0810fecc  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00005098  10000188  08110054  00011188  2**2
                  ALLOC
  8 ._user_heap_stack 00002000  10005220  08110054  00011220  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00011188  2**0
                  CONTENTS, READONLY
 10 .debug_info   00025361  00000000  00000000  000111b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004998  00000000  00000000  00036519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ab0  00000000  00000000  0003aeb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000014bc  00000000  00000000  0003c968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00043467  00000000  00000000  0003de24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00024f1a  00000000  00000000  0008128b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001ab85d  00000000  00000000  000a61a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00251a02  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00007530  00000000  00000000  00251a48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000006f  00000000  00000000  00258f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	10000188 	.word	0x10000188
 81002bc:	00000000 	.word	0x00000000
 81002c0:	0810facc 	.word	0x0810facc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	1000018c 	.word	0x1000018c
 81002dc:	0810facc 	.word	0x0810facc

081002e0 <strlen>:
 81002e0:	4603      	mov	r3, r0
 81002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002e6:	2a00      	cmp	r2, #0
 81002e8:	d1fb      	bne.n	81002e2 <strlen+0x2>
 81002ea:	1a18      	subs	r0, r3, r0
 81002ec:	3801      	subs	r0, #1
 81002ee:	4770      	bx	lr

081002f0 <memchr>:
 81002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002f4:	2a10      	cmp	r2, #16
 81002f6:	db2b      	blt.n	8100350 <memchr+0x60>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	d008      	beq.n	8100310 <memchr+0x20>
 81002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100302:	3a01      	subs	r2, #1
 8100304:	428b      	cmp	r3, r1
 8100306:	d02d      	beq.n	8100364 <memchr+0x74>
 8100308:	f010 0f07 	tst.w	r0, #7
 810030c:	b342      	cbz	r2, 8100360 <memchr+0x70>
 810030e:	d1f6      	bne.n	81002fe <memchr+0xe>
 8100310:	b4f0      	push	{r4, r5, r6, r7}
 8100312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810031a:	f022 0407 	bic.w	r4, r2, #7
 810031e:	f07f 0700 	mvns.w	r7, #0
 8100322:	2300      	movs	r3, #0
 8100324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100328:	3c08      	subs	r4, #8
 810032a:	ea85 0501 	eor.w	r5, r5, r1
 810032e:	ea86 0601 	eor.w	r6, r6, r1
 8100332:	fa85 f547 	uadd8	r5, r5, r7
 8100336:	faa3 f587 	sel	r5, r3, r7
 810033a:	fa86 f647 	uadd8	r6, r6, r7
 810033e:	faa5 f687 	sel	r6, r5, r7
 8100342:	b98e      	cbnz	r6, 8100368 <memchr+0x78>
 8100344:	d1ee      	bne.n	8100324 <memchr+0x34>
 8100346:	bcf0      	pop	{r4, r5, r6, r7}
 8100348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810034c:	f002 0207 	and.w	r2, r2, #7
 8100350:	b132      	cbz	r2, 8100360 <memchr+0x70>
 8100352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100356:	3a01      	subs	r2, #1
 8100358:	ea83 0301 	eor.w	r3, r3, r1
 810035c:	b113      	cbz	r3, 8100364 <memchr+0x74>
 810035e:	d1f8      	bne.n	8100352 <memchr+0x62>
 8100360:	2000      	movs	r0, #0
 8100362:	4770      	bx	lr
 8100364:	3801      	subs	r0, #1
 8100366:	4770      	bx	lr
 8100368:	2d00      	cmp	r5, #0
 810036a:	bf06      	itte	eq
 810036c:	4635      	moveq	r5, r6
 810036e:	3803      	subeq	r0, #3
 8100370:	3807      	subne	r0, #7
 8100372:	f015 0f01 	tst.w	r5, #1
 8100376:	d107      	bne.n	8100388 <memchr+0x98>
 8100378:	3001      	adds	r0, #1
 810037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810037e:	bf02      	ittt	eq
 8100380:	3001      	addeq	r0, #1
 8100382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100386:	3001      	addeq	r0, #1
 8100388:	bcf0      	pop	{r4, r5, r6, r7}
 810038a:	3801      	subs	r0, #1
 810038c:	4770      	bx	lr
 810038e:	bf00      	nop

08100390 <__aeabi_uldivmod>:
 8100390:	b953      	cbnz	r3, 81003a8 <__aeabi_uldivmod+0x18>
 8100392:	b94a      	cbnz	r2, 81003a8 <__aeabi_uldivmod+0x18>
 8100394:	2900      	cmp	r1, #0
 8100396:	bf08      	it	eq
 8100398:	2800      	cmpeq	r0, #0
 810039a:	bf1c      	itt	ne
 810039c:	f04f 31ff 	movne.w	r1, #4294967295
 81003a0:	f04f 30ff 	movne.w	r0, #4294967295
 81003a4:	f000 b96a 	b.w	810067c <__aeabi_idiv0>
 81003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 81003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81003b0:	f000 f806 	bl	81003c0 <__udivmoddi4>
 81003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 81003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81003bc:	b004      	add	sp, #16
 81003be:	4770      	bx	lr

081003c0 <__udivmoddi4>:
 81003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81003c4:	9d08      	ldr	r5, [sp, #32]
 81003c6:	460c      	mov	r4, r1
 81003c8:	2b00      	cmp	r3, #0
 81003ca:	d14e      	bne.n	810046a <__udivmoddi4+0xaa>
 81003cc:	4694      	mov	ip, r2
 81003ce:	458c      	cmp	ip, r1
 81003d0:	4686      	mov	lr, r0
 81003d2:	fab2 f282 	clz	r2, r2
 81003d6:	d962      	bls.n	810049e <__udivmoddi4+0xde>
 81003d8:	b14a      	cbz	r2, 81003ee <__udivmoddi4+0x2e>
 81003da:	f1c2 0320 	rsb	r3, r2, #32
 81003de:	4091      	lsls	r1, r2
 81003e0:	fa20 f303 	lsr.w	r3, r0, r3
 81003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 81003e8:	4319      	orrs	r1, r3
 81003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 81003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 81003f2:	fa1f f68c 	uxth.w	r6, ip
 81003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 81003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8100402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100406:	fb04 f106 	mul.w	r1, r4, r6
 810040a:	4299      	cmp	r1, r3
 810040c:	d90a      	bls.n	8100424 <__udivmoddi4+0x64>
 810040e:	eb1c 0303 	adds.w	r3, ip, r3
 8100412:	f104 30ff 	add.w	r0, r4, #4294967295
 8100416:	f080 8112 	bcs.w	810063e <__udivmoddi4+0x27e>
 810041a:	4299      	cmp	r1, r3
 810041c:	f240 810f 	bls.w	810063e <__udivmoddi4+0x27e>
 8100420:	3c02      	subs	r4, #2
 8100422:	4463      	add	r3, ip
 8100424:	1a59      	subs	r1, r3, r1
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb1 f0f7 	udiv	r0, r1, r7
 810042e:	fb07 1110 	mls	r1, r7, r0, r1
 8100432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8100436:	fb00 f606 	mul.w	r6, r0, r6
 810043a:	429e      	cmp	r6, r3
 810043c:	d90a      	bls.n	8100454 <__udivmoddi4+0x94>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 31ff 	add.w	r1, r0, #4294967295
 8100446:	f080 80fc 	bcs.w	8100642 <__udivmoddi4+0x282>
 810044a:	429e      	cmp	r6, r3
 810044c:	f240 80f9 	bls.w	8100642 <__udivmoddi4+0x282>
 8100450:	4463      	add	r3, ip
 8100452:	3802      	subs	r0, #2
 8100454:	1b9b      	subs	r3, r3, r6
 8100456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 810045a:	2100      	movs	r1, #0
 810045c:	b11d      	cbz	r5, 8100466 <__udivmoddi4+0xa6>
 810045e:	40d3      	lsrs	r3, r2
 8100460:	2200      	movs	r2, #0
 8100462:	e9c5 3200 	strd	r3, r2, [r5]
 8100466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810046a:	428b      	cmp	r3, r1
 810046c:	d905      	bls.n	810047a <__udivmoddi4+0xba>
 810046e:	b10d      	cbz	r5, 8100474 <__udivmoddi4+0xb4>
 8100470:	e9c5 0100 	strd	r0, r1, [r5]
 8100474:	2100      	movs	r1, #0
 8100476:	4608      	mov	r0, r1
 8100478:	e7f5      	b.n	8100466 <__udivmoddi4+0xa6>
 810047a:	fab3 f183 	clz	r1, r3
 810047e:	2900      	cmp	r1, #0
 8100480:	d146      	bne.n	8100510 <__udivmoddi4+0x150>
 8100482:	42a3      	cmp	r3, r4
 8100484:	d302      	bcc.n	810048c <__udivmoddi4+0xcc>
 8100486:	4290      	cmp	r0, r2
 8100488:	f0c0 80f0 	bcc.w	810066c <__udivmoddi4+0x2ac>
 810048c:	1a86      	subs	r6, r0, r2
 810048e:	eb64 0303 	sbc.w	r3, r4, r3
 8100492:	2001      	movs	r0, #1
 8100494:	2d00      	cmp	r5, #0
 8100496:	d0e6      	beq.n	8100466 <__udivmoddi4+0xa6>
 8100498:	e9c5 6300 	strd	r6, r3, [r5]
 810049c:	e7e3      	b.n	8100466 <__udivmoddi4+0xa6>
 810049e:	2a00      	cmp	r2, #0
 81004a0:	f040 8090 	bne.w	81005c4 <__udivmoddi4+0x204>
 81004a4:	eba1 040c 	sub.w	r4, r1, ip
 81004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81004ac:	fa1f f78c 	uxth.w	r7, ip
 81004b0:	2101      	movs	r1, #1
 81004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 81004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 81004ba:	fb08 4416 	mls	r4, r8, r6, r4
 81004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004c2:	fb07 f006 	mul.w	r0, r7, r6
 81004c6:	4298      	cmp	r0, r3
 81004c8:	d908      	bls.n	81004dc <__udivmoddi4+0x11c>
 81004ca:	eb1c 0303 	adds.w	r3, ip, r3
 81004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 81004d2:	d202      	bcs.n	81004da <__udivmoddi4+0x11a>
 81004d4:	4298      	cmp	r0, r3
 81004d6:	f200 80cd 	bhi.w	8100674 <__udivmoddi4+0x2b4>
 81004da:	4626      	mov	r6, r4
 81004dc:	1a1c      	subs	r4, r3, r0
 81004de:	fa1f f38e 	uxth.w	r3, lr
 81004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 81004e6:	fb08 4410 	mls	r4, r8, r0, r4
 81004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 81004ee:	fb00 f707 	mul.w	r7, r0, r7
 81004f2:	429f      	cmp	r7, r3
 81004f4:	d908      	bls.n	8100508 <__udivmoddi4+0x148>
 81004f6:	eb1c 0303 	adds.w	r3, ip, r3
 81004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 81004fe:	d202      	bcs.n	8100506 <__udivmoddi4+0x146>
 8100500:	429f      	cmp	r7, r3
 8100502:	f200 80b0 	bhi.w	8100666 <__udivmoddi4+0x2a6>
 8100506:	4620      	mov	r0, r4
 8100508:	1bdb      	subs	r3, r3, r7
 810050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 810050e:	e7a5      	b.n	810045c <__udivmoddi4+0x9c>
 8100510:	f1c1 0620 	rsb	r6, r1, #32
 8100514:	408b      	lsls	r3, r1
 8100516:	fa22 f706 	lsr.w	r7, r2, r6
 810051a:	431f      	orrs	r7, r3
 810051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8100520:	fa04 f301 	lsl.w	r3, r4, r1
 8100524:	ea43 030c 	orr.w	r3, r3, ip
 8100528:	40f4      	lsrs	r4, r6
 810052a:	fa00 f801 	lsl.w	r8, r0, r1
 810052e:	0c38      	lsrs	r0, r7, #16
 8100530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8100534:	fbb4 fef0 	udiv	lr, r4, r0
 8100538:	fa1f fc87 	uxth.w	ip, r7
 810053c:	fb00 441e 	mls	r4, r0, lr, r4
 8100540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8100544:	fb0e f90c 	mul.w	r9, lr, ip
 8100548:	45a1      	cmp	r9, r4
 810054a:	fa02 f201 	lsl.w	r2, r2, r1
 810054e:	d90a      	bls.n	8100566 <__udivmoddi4+0x1a6>
 8100550:	193c      	adds	r4, r7, r4
 8100552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8100556:	f080 8084 	bcs.w	8100662 <__udivmoddi4+0x2a2>
 810055a:	45a1      	cmp	r9, r4
 810055c:	f240 8081 	bls.w	8100662 <__udivmoddi4+0x2a2>
 8100560:	f1ae 0e02 	sub.w	lr, lr, #2
 8100564:	443c      	add	r4, r7
 8100566:	eba4 0409 	sub.w	r4, r4, r9
 810056a:	fa1f f983 	uxth.w	r9, r3
 810056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8100572:	fb00 4413 	mls	r4, r0, r3, r4
 8100576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810057a:	fb03 fc0c 	mul.w	ip, r3, ip
 810057e:	45a4      	cmp	ip, r4
 8100580:	d907      	bls.n	8100592 <__udivmoddi4+0x1d2>
 8100582:	193c      	adds	r4, r7, r4
 8100584:	f103 30ff 	add.w	r0, r3, #4294967295
 8100588:	d267      	bcs.n	810065a <__udivmoddi4+0x29a>
 810058a:	45a4      	cmp	ip, r4
 810058c:	d965      	bls.n	810065a <__udivmoddi4+0x29a>
 810058e:	3b02      	subs	r3, #2
 8100590:	443c      	add	r4, r7
 8100592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8100596:	fba0 9302 	umull	r9, r3, r0, r2
 810059a:	eba4 040c 	sub.w	r4, r4, ip
 810059e:	429c      	cmp	r4, r3
 81005a0:	46ce      	mov	lr, r9
 81005a2:	469c      	mov	ip, r3
 81005a4:	d351      	bcc.n	810064a <__udivmoddi4+0x28a>
 81005a6:	d04e      	beq.n	8100646 <__udivmoddi4+0x286>
 81005a8:	b155      	cbz	r5, 81005c0 <__udivmoddi4+0x200>
 81005aa:	ebb8 030e 	subs.w	r3, r8, lr
 81005ae:	eb64 040c 	sbc.w	r4, r4, ip
 81005b2:	fa04 f606 	lsl.w	r6, r4, r6
 81005b6:	40cb      	lsrs	r3, r1
 81005b8:	431e      	orrs	r6, r3
 81005ba:	40cc      	lsrs	r4, r1
 81005bc:	e9c5 6400 	strd	r6, r4, [r5]
 81005c0:	2100      	movs	r1, #0
 81005c2:	e750      	b.n	8100466 <__udivmoddi4+0xa6>
 81005c4:	f1c2 0320 	rsb	r3, r2, #32
 81005c8:	fa20 f103 	lsr.w	r1, r0, r3
 81005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 81005d0:	fa24 f303 	lsr.w	r3, r4, r3
 81005d4:	4094      	lsls	r4, r2
 81005d6:	430c      	orrs	r4, r1
 81005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 81005e0:	fa1f f78c 	uxth.w	r7, ip
 81005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 81005e8:	fb08 3110 	mls	r1, r8, r0, r3
 81005ec:	0c23      	lsrs	r3, r4, #16
 81005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 81005f2:	fb00 f107 	mul.w	r1, r0, r7
 81005f6:	4299      	cmp	r1, r3
 81005f8:	d908      	bls.n	810060c <__udivmoddi4+0x24c>
 81005fa:	eb1c 0303 	adds.w	r3, ip, r3
 81005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8100602:	d22c      	bcs.n	810065e <__udivmoddi4+0x29e>
 8100604:	4299      	cmp	r1, r3
 8100606:	d92a      	bls.n	810065e <__udivmoddi4+0x29e>
 8100608:	3802      	subs	r0, #2
 810060a:	4463      	add	r3, ip
 810060c:	1a5b      	subs	r3, r3, r1
 810060e:	b2a4      	uxth	r4, r4
 8100610:	fbb3 f1f8 	udiv	r1, r3, r8
 8100614:	fb08 3311 	mls	r3, r8, r1, r3
 8100618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 810061c:	fb01 f307 	mul.w	r3, r1, r7
 8100620:	42a3      	cmp	r3, r4
 8100622:	d908      	bls.n	8100636 <__udivmoddi4+0x276>
 8100624:	eb1c 0404 	adds.w	r4, ip, r4
 8100628:	f101 36ff 	add.w	r6, r1, #4294967295
 810062c:	d213      	bcs.n	8100656 <__udivmoddi4+0x296>
 810062e:	42a3      	cmp	r3, r4
 8100630:	d911      	bls.n	8100656 <__udivmoddi4+0x296>
 8100632:	3902      	subs	r1, #2
 8100634:	4464      	add	r4, ip
 8100636:	1ae4      	subs	r4, r4, r3
 8100638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 810063c:	e739      	b.n	81004b2 <__udivmoddi4+0xf2>
 810063e:	4604      	mov	r4, r0
 8100640:	e6f0      	b.n	8100424 <__udivmoddi4+0x64>
 8100642:	4608      	mov	r0, r1
 8100644:	e706      	b.n	8100454 <__udivmoddi4+0x94>
 8100646:	45c8      	cmp	r8, r9
 8100648:	d2ae      	bcs.n	81005a8 <__udivmoddi4+0x1e8>
 810064a:	ebb9 0e02 	subs.w	lr, r9, r2
 810064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8100652:	3801      	subs	r0, #1
 8100654:	e7a8      	b.n	81005a8 <__udivmoddi4+0x1e8>
 8100656:	4631      	mov	r1, r6
 8100658:	e7ed      	b.n	8100636 <__udivmoddi4+0x276>
 810065a:	4603      	mov	r3, r0
 810065c:	e799      	b.n	8100592 <__udivmoddi4+0x1d2>
 810065e:	4630      	mov	r0, r6
 8100660:	e7d4      	b.n	810060c <__udivmoddi4+0x24c>
 8100662:	46d6      	mov	lr, sl
 8100664:	e77f      	b.n	8100566 <__udivmoddi4+0x1a6>
 8100666:	4463      	add	r3, ip
 8100668:	3802      	subs	r0, #2
 810066a:	e74d      	b.n	8100508 <__udivmoddi4+0x148>
 810066c:	4606      	mov	r6, r0
 810066e:	4623      	mov	r3, r4
 8100670:	4608      	mov	r0, r1
 8100672:	e70f      	b.n	8100494 <__udivmoddi4+0xd4>
 8100674:	3e02      	subs	r6, #2
 8100676:	4463      	add	r3, ip
 8100678:	e730      	b.n	81004dc <__udivmoddi4+0x11c>
 810067a:	bf00      	nop

0810067c <__aeabi_idiv0>:
 810067c:	4770      	bx	lr
 810067e:	bf00      	nop

08100680 <HAL_TIM_PeriodElapsedCallback>:
};



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100680:	b580      	push	{r7, lr}
 8100682:	b082      	sub	sp, #8
 8100684:	af00      	add	r7, sp, #0
 8100686:	6078      	str	r0, [r7, #4]

	if (htim->Instance == TIM5) {
 8100688:	687b      	ldr	r3, [r7, #4]
 810068a:	681b      	ldr	r3, [r3, #0]
 810068c:	4a49      	ldr	r2, [pc, #292]	@ (81007b4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 810068e:	4293      	cmp	r3, r2
 8100690:	d101      	bne.n	8100696 <HAL_TIM_PeriodElapsedCallback+0x16>
	    HAL_IncTick();
 8100692:	f002 f847 	bl	8102724 <HAL_IncTick>
	  }
	//_duty = CCRValue_937_5_72[_index];
	//SetCommutationStep(step,_duty);
	if (htim->Instance == TIM4) {
 8100696:	687b      	ldr	r3, [r7, #4]
 8100698:	681b      	ldr	r3, [r3, #0]
 810069a:	4a47      	ldr	r2, [pc, #284]	@ (81007b8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 810069c:	4293      	cmp	r3, r2
 810069e:	f040 8084 	bne.w	81007aa <HAL_TIM_PeriodElapsedCallback+0x12a>

		if(_index == CCRValue_NSize || _index > CCRValue_NSize || _index < 0)
 81006a2:	4b46      	ldr	r3, [pc, #280]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006a4:	881b      	ldrh	r3, [r3, #0]
 81006a6:	b29b      	uxth	r3, r3
 81006a8:	2b48      	cmp	r3, #72	@ 0x48
 81006aa:	d007      	beq.n	81006bc <HAL_TIM_PeriodElapsedCallback+0x3c>
 81006ac:	4b43      	ldr	r3, [pc, #268]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006ae:	881b      	ldrh	r3, [r3, #0]
 81006b0:	b29b      	uxth	r3, r3
 81006b2:	2b48      	cmp	r3, #72	@ 0x48
 81006b4:	d802      	bhi.n	81006bc <HAL_TIM_PeriodElapsedCallback+0x3c>
 81006b6:	4b41      	ldr	r3, [pc, #260]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006b8:	881b      	ldrh	r3, [r3, #0]
 81006ba:	e002      	b.n	81006c2 <HAL_TIM_PeriodElapsedCallback+0x42>
		{
			_index = 0;
 81006bc:	4b3f      	ldr	r3, [pc, #252]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006be:	2200      	movs	r2, #0
 81006c0:	801a      	strh	r2, [r3, #0]
			}
			else if (step == 5) {
					step = 0;
			}*/
		}
		++_index;
 81006c2:	4b3e      	ldr	r3, [pc, #248]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006c4:	881b      	ldrh	r3, [r3, #0]
 81006c6:	b29b      	uxth	r3, r3
 81006c8:	3301      	adds	r3, #1
 81006ca:	b29a      	uxth	r2, r3
 81006cc:	4b3b      	ldr	r3, [pc, #236]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 81006ce:	801a      	strh	r2, [r3, #0]
		if (serverAttributes.immobilizeStatus[0] == 0x01) {
 81006d0:	4b3b      	ldr	r3, [pc, #236]	@ (81007c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 81006d2:	781b      	ldrb	r3, [r3, #0]
 81006d4:	2b01      	cmp	r3, #1
 81006d6:	d117      	bne.n	8100708 <HAL_TIM_PeriodElapsedCallback+0x88>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 81006d8:	2100      	movs	r1, #0
 81006da:	483a      	ldr	r0, [pc, #232]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81006dc:	f007 fcec 	bl	81080b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 81006e0:	2100      	movs	r1, #0
 81006e2:	4838      	ldr	r0, [pc, #224]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81006e4:	f008 fe34 	bl	8109350 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 81006e8:	2104      	movs	r1, #4
 81006ea:	4836      	ldr	r0, [pc, #216]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81006ec:	f007 fce4 	bl	81080b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 81006f0:	2104      	movs	r1, #4
 81006f2:	4834      	ldr	r0, [pc, #208]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81006f4:	f008 fe2c 	bl	8109350 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_3);
 81006f8:	2108      	movs	r1, #8
 81006fa:	4832      	ldr	r0, [pc, #200]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81006fc:	f007 fcdc 	bl	81080b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_3);
 8100700:	2108      	movs	r1, #8
 8100702:	4830      	ldr	r0, [pc, #192]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8100704:	f008 fe24 	bl	8109350 <HAL_TIMEx_PWMN_Stop>
		}

		if (serverAttributes.immobilizeStatus[0] == 0x00) {
 8100708:	4b2d      	ldr	r3, [pc, #180]	@ (81007c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 810070a:	781b      	ldrb	r3, [r3, #0]
 810070c:	2b00      	cmp	r3, #0
 810070e:	d14c      	bne.n	81007aa <HAL_TIM_PeriodElapsedCallback+0x12a>
			//++_index;
			threeSine(_index);
 8100710:	4b2a      	ldr	r3, [pc, #168]	@ (81007bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8100712:	881b      	ldrh	r3, [r3, #0]
 8100714:	b29b      	uxth	r3, r3
 8100716:	4618      	mov	r0, r3
 8100718:	f000 f858 	bl	81007cc <threeSine>
			if (serverAttributes.rpmPreset[1] == 0xf4) {
 810071c:	4b28      	ldr	r3, [pc, #160]	@ (81007c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 810071e:	789b      	ldrb	r3, [r3, #2]
 8100720:	2bf4      	cmp	r3, #244	@ 0xf4
 8100722:	d114      	bne.n	810074e <HAL_TIM_PeriodElapsedCallback+0xce>
				//threeSine(_index);
				device_config(1);
 8100724:	2001      	movs	r0, #1
 8100726:	f000 fe1d 	bl	8101364 <device_config>
				__HAL_TIM_SET_AUTORELOAD( &htim4, 500);
 810072a:	4b27      	ldr	r3, [pc, #156]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 810072c:	681b      	ldr	r3, [r3, #0]
 810072e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8100732:	62da      	str	r2, [r3, #44]	@ 0x2c
 8100734:	4b24      	ldr	r3, [pc, #144]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8100736:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 810073a:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_AUTORELOAD( &htim1, 10000);
 810073c:	4b21      	ldr	r3, [pc, #132]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 810073e:	681b      	ldr	r3, [r3, #0]
 8100740:	f242 7210 	movw	r2, #10000	@ 0x2710
 8100744:	62da      	str	r2, [r3, #44]	@ 0x2c
 8100746:	4b1f      	ldr	r3, [pc, #124]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8100748:	f242 7210 	movw	r2, #10000	@ 0x2710
 810074c:	60da      	str	r2, [r3, #12]
			}
			if (serverAttributes.rpmPreset[1] == 0xdc) {
 810074e:	4b1c      	ldr	r3, [pc, #112]	@ (81007c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8100750:	789b      	ldrb	r3, [r3, #2]
 8100752:	2bdc      	cmp	r3, #220	@ 0xdc
 8100754:	d112      	bne.n	810077c <HAL_TIM_PeriodElapsedCallback+0xfc>
				//threeSine(_index);
				device_config(2);
 8100756:	2002      	movs	r0, #2
 8100758:	f000 fe04 	bl	8101364 <device_config>
				__HAL_TIM_SET_AUTORELOAD( &htim4, 200);
 810075c:	4b1a      	ldr	r3, [pc, #104]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 810075e:	681b      	ldr	r3, [r3, #0]
 8100760:	22c8      	movs	r2, #200	@ 0xc8
 8100762:	62da      	str	r2, [r3, #44]	@ 0x2c
 8100764:	4b18      	ldr	r3, [pc, #96]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8100766:	22c8      	movs	r2, #200	@ 0xc8
 8100768:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_AUTORELOAD( &htim1, 8000);
 810076a:	4b16      	ldr	r3, [pc, #88]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 810076c:	681b      	ldr	r3, [r3, #0]
 810076e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8100772:	62da      	str	r2, [r3, #44]	@ 0x2c
 8100774:	4b13      	ldr	r3, [pc, #76]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8100776:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 810077a:	60da      	str	r2, [r3, #12]
			}
			if (serverAttributes.rpmPreset[1] == 0xc4) {
 810077c:	4b10      	ldr	r3, [pc, #64]	@ (81007c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 810077e:	789b      	ldrb	r3, [r3, #2]
 8100780:	2bc4      	cmp	r3, #196	@ 0xc4
 8100782:	d112      	bne.n	81007aa <HAL_TIM_PeriodElapsedCallback+0x12a>
				//threeSine(_index);
				device_config(3);
 8100784:	2003      	movs	r0, #3
 8100786:	f000 fded 	bl	8101364 <device_config>
				__HAL_TIM_SET_AUTORELOAD( &htim4, 120);
 810078a:	4b0f      	ldr	r3, [pc, #60]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 810078c:	681b      	ldr	r3, [r3, #0]
 810078e:	2278      	movs	r2, #120	@ 0x78
 8100790:	62da      	str	r2, [r3, #44]	@ 0x2c
 8100792:	4b0d      	ldr	r3, [pc, #52]	@ (81007c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8100794:	2278      	movs	r2, #120	@ 0x78
 8100796:	60da      	str	r2, [r3, #12]
				__HAL_TIM_SET_AUTORELOAD( &htim1, 8000);
 8100798:	4b0a      	ldr	r3, [pc, #40]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 810079a:	681b      	ldr	r3, [r3, #0]
 810079c:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 81007a0:	62da      	str	r2, [r3, #44]	@ 0x2c
 81007a2:	4b08      	ldr	r3, [pc, #32]	@ (81007c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 81007a4:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 81007a8:	60da      	str	r2, [r3, #12]
		++_index;
		__HAL_TIM_SET_AUTORELOAD( &htim4, arr4_);
		__HAL_TIM_SET_AUTORELOAD( &htim1, arr1_);
	*/
	}
}
 81007aa:	bf00      	nop
 81007ac:	3708      	adds	r7, #8
 81007ae:	46bd      	mov	sp, r7
 81007b0:	bd80      	pop	{r7, pc}
 81007b2:	bf00      	nop
 81007b4:	40000c00 	.word	0x40000c00
 81007b8:	40000800 	.word	0x40000800
 81007bc:	100001a4 	.word	0x100001a4
 81007c0:	100004b0 	.word	0x100004b0
 81007c4:	100004e4 	.word	0x100004e4
 81007c8:	10000530 	.word	0x10000530

081007cc <threeSine>:
            break;
    }
}

void threeSine(uint16_t degree)
{
 81007cc:	b580      	push	{r7, lr}
 81007ce:	b082      	sub	sp, #8
 81007d0:	af00      	add	r7, sp, #0
 81007d2:	4603      	mov	r3, r0
 81007d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_1, CCRValue_937_5_72[degree] );
 81007d6:	88fa      	ldrh	r2, [r7, #6]
 81007d8:	4b24      	ldr	r3, [pc, #144]	@ (810086c <threeSine+0xa0>)
 81007da:	681b      	ldr	r3, [r3, #0]
 81007dc:	4924      	ldr	r1, [pc, #144]	@ (8100870 <threeSine+0xa4>)
 81007de:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 81007e2:	635a      	str	r2, [r3, #52]	@ 0x34
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 81007e4:	2100      	movs	r1, #0
 81007e6:	4821      	ldr	r0, [pc, #132]	@ (810086c <threeSine+0xa0>)
 81007e8:	f007 fb58 	bl	8107e9c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 81007ec:	2100      	movs	r1, #0
 81007ee:	481f      	ldr	r0, [pc, #124]	@ (810086c <threeSine+0xa0>)
 81007f0:	f008 fcec 	bl	81091cc <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_2, CCRValue_937_5_72[(degree + 24) % CCRValue_NSize] );
 81007f4:	88fb      	ldrh	r3, [r7, #6]
 81007f6:	f103 0118 	add.w	r1, r3, #24
 81007fa:	4b1e      	ldr	r3, [pc, #120]	@ (8100874 <threeSine+0xa8>)
 81007fc:	fb83 2301 	smull	r2, r3, r3, r1
 8100800:	111a      	asrs	r2, r3, #4
 8100802:	17cb      	asrs	r3, r1, #31
 8100804:	1ad2      	subs	r2, r2, r3
 8100806:	4613      	mov	r3, r2
 8100808:	00db      	lsls	r3, r3, #3
 810080a:	4413      	add	r3, r2
 810080c:	00db      	lsls	r3, r3, #3
 810080e:	1aca      	subs	r2, r1, r3
 8100810:	4b16      	ldr	r3, [pc, #88]	@ (810086c <threeSine+0xa0>)
 8100812:	681b      	ldr	r3, [r3, #0]
 8100814:	4916      	ldr	r1, [pc, #88]	@ (8100870 <threeSine+0xa4>)
 8100816:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 810081a:	639a      	str	r2, [r3, #56]	@ 0x38
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 810081c:	2104      	movs	r1, #4
 810081e:	4813      	ldr	r0, [pc, #76]	@ (810086c <threeSine+0xa0>)
 8100820:	f007 fb3c 	bl	8107e9c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8100824:	2104      	movs	r1, #4
 8100826:	4811      	ldr	r0, [pc, #68]	@ (810086c <threeSine+0xa0>)
 8100828:	f008 fcd0 	bl	81091cc <HAL_TIMEx_PWMN_Start>

	__HAL_TIM_SET_COMPARE( &htim1, TIM_CHANNEL_3, CCRValue_937_5_72[(degree + 48) % CCRValue_NSize] );
 810082c:	88fb      	ldrh	r3, [r7, #6]
 810082e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8100832:	4b10      	ldr	r3, [pc, #64]	@ (8100874 <threeSine+0xa8>)
 8100834:	fb83 2301 	smull	r2, r3, r3, r1
 8100838:	111a      	asrs	r2, r3, #4
 810083a:	17cb      	asrs	r3, r1, #31
 810083c:	1ad2      	subs	r2, r2, r3
 810083e:	4613      	mov	r3, r2
 8100840:	00db      	lsls	r3, r3, #3
 8100842:	4413      	add	r3, r2
 8100844:	00db      	lsls	r3, r3, #3
 8100846:	1aca      	subs	r2, r1, r3
 8100848:	4b08      	ldr	r3, [pc, #32]	@ (810086c <threeSine+0xa0>)
 810084a:	681b      	ldr	r3, [r3, #0]
 810084c:	4908      	ldr	r1, [pc, #32]	@ (8100870 <threeSine+0xa4>)
 810084e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8100852:	63da      	str	r2, [r3, #60]	@ 0x3c
	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8100854:	2108      	movs	r1, #8
 8100856:	4805      	ldr	r0, [pc, #20]	@ (810086c <threeSine+0xa0>)
 8100858:	f007 fb20 	bl	8107e9c <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 810085c:	2108      	movs	r1, #8
 810085e:	4803      	ldr	r0, [pc, #12]	@ (810086c <threeSine+0xa0>)
 8100860:	f008 fcb4 	bl	81091cc <HAL_TIMEx_PWMN_Start>
}
 8100864:	bf00      	nop
 8100866:	3708      	adds	r7, #8
 8100868:	46bd      	mov	sp, r7
 810086a:	bd80      	pop	{r7, pc}
 810086c:	100004e4 	.word	0x100004e4
 8100870:	10000000 	.word	0x10000000
 8100874:	38e38e39 	.word	0x38e38e39

08100878 <gps>:
extern char rxBuffer[RX_BUFFER_SIZE];        // Buffer for receiving AT responses
extern char checkBuffer[RX_BUFFER_SIZE];

extern UART_HandleTypeDef huart1;

void gps(void) {
 8100878:	b590      	push	{r4, r7, lr}
 810087a:	b08d      	sub	sp, #52	@ 0x34
 810087c:	af00      	add	r7, sp, #0
	//SocketSendData();
	char *gpsString;
	char extractedData[32] = {0};
 810087e:	2300      	movs	r3, #0
 8100880:	607b      	str	r3, [r7, #4]
 8100882:	f107 0308 	add.w	r3, r7, #8
 8100886:	2200      	movs	r2, #0
 8100888:	601a      	str	r2, [r3, #0]
 810088a:	605a      	str	r2, [r3, #4]
 810088c:	609a      	str	r2, [r3, #8]
 810088e:	60da      	str	r2, [r3, #12]
 8100890:	611a      	str	r2, [r3, #16]
 8100892:	615a      	str	r2, [r3, #20]
 8100894:	619a      	str	r2, [r3, #24]
	uint16_t ctr = 0;
 8100896:	2300      	movs	r3, #0
 8100898:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t set = 0;
 810089a:	2300      	movs	r3, #0
 810089c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    //osMutexAcquire(uart_lockHandle, osWaitForever);
    if (osMutexAcquire(uart_lockHandle, 1000) != osOK) {  // Add timeout
 81008a0:	4b8e      	ldr	r3, [pc, #568]	@ (8100adc <gps+0x264>)
 81008a2:	681b      	ldr	r3, [r3, #0]
 81008a4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 81008a8:	4618      	mov	r0, r3
 81008aa:	f00b fae8 	bl	810be7e <osMutexAcquire>
 81008ae:	4603      	mov	r3, r0
 81008b0:	2b00      	cmp	r3, #0
 81008b2:	f040 81a2 	bne.w	8100bfa <gps+0x382>
		//printf("Mutex acquisition failed! Possible deadlock.\n");
		return;
	}

    device_config(c_type);
 81008b6:	4b8a      	ldr	r3, [pc, #552]	@ (8100ae0 <gps+0x268>)
 81008b8:	781b      	ldrb	r3, [r3, #0]
 81008ba:	4618      	mov	r0, r3
 81008bc:	f000 fd52 	bl	8101364 <device_config>

    memset(txBuffer, NULL_, sizeof(txBuffer));
 81008c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81008c4:	2100      	movs	r1, #0
 81008c6:	4887      	ldr	r0, [pc, #540]	@ (8100ae4 <gps+0x26c>)
 81008c8:	f00e fc0e 	bl	810f0e8 <memset>
	strcpy(txBuffer, CMD_GPS_CHECK);
 81008cc:	4a85      	ldr	r2, [pc, #532]	@ (8100ae4 <gps+0x26c>)
 81008ce:	4b86      	ldr	r3, [pc, #536]	@ (8100ae8 <gps+0x270>)
 81008d0:	cb03      	ldmia	r3!, {r0, r1}
 81008d2:	6010      	str	r0, [r2, #0]
 81008d4:	6051      	str	r1, [r2, #4]
 81008d6:	8819      	ldrh	r1, [r3, #0]
 81008d8:	789b      	ldrb	r3, [r3, #2]
 81008da:	8111      	strh	r1, [r2, #8]
 81008dc:	7293      	strb	r3, [r2, #10]
	//osDelay(2000);
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81008de:	4881      	ldr	r0, [pc, #516]	@ (8100ae4 <gps+0x26c>)
 81008e0:	f7ff fcfe 	bl	81002e0 <strlen>
 81008e4:	4603      	mov	r3, r0
 81008e6:	b29a      	uxth	r2, r3
 81008e8:	2364      	movs	r3, #100	@ 0x64
 81008ea:	497e      	ldr	r1, [pc, #504]	@ (8100ae4 <gps+0x26c>)
 81008ec:	487f      	ldr	r0, [pc, #508]	@ (8100aec <gps+0x274>)
 81008ee:	f008 ff2c 	bl	810974a <HAL_UART_Transmit>
	osDelay(100);
 81008f2:	2064      	movs	r0, #100	@ 0x64
 81008f4:	f00b f9f5 	bl	810bce2 <osDelay>
	gpsString = strstr((char *)checkBuffer, CMD_GPS_CHECK_R_T);
 81008f8:	497d      	ldr	r1, [pc, #500]	@ (8100af0 <gps+0x278>)
 81008fa:	487e      	ldr	r0, [pc, #504]	@ (8100af4 <gps+0x27c>)
 81008fc:	f00e fc1c 	bl	810f138 <strstr>
 8100900:	62b8      	str	r0, [r7, #40]	@ 0x28
	if (gpsString != NULL){
 8100902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100904:	2b00      	cmp	r3, #0
 8100906:	d002      	beq.n	810090e <gps+0x96>
		set = 1;
 8100908:	2301      	movs	r3, #1
 810090a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	}

	while (1) {
		if (set == 0)
 810090e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8100912:	2b00      	cmp	r3, #0
 8100914:	d158      	bne.n	81009c8 <gps+0x150>
		{
			memset(txBuffer, NULL_, sizeof(txBuffer));
 8100916:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810091a:	2100      	movs	r1, #0
 810091c:	4871      	ldr	r0, [pc, #452]	@ (8100ae4 <gps+0x26c>)
 810091e:	f00e fbe3 	bl	810f0e8 <memset>
			strcpy(txBuffer, CMD_GPS_CHECK);
 8100922:	4a70      	ldr	r2, [pc, #448]	@ (8100ae4 <gps+0x26c>)
 8100924:	4b70      	ldr	r3, [pc, #448]	@ (8100ae8 <gps+0x270>)
 8100926:	cb03      	ldmia	r3!, {r0, r1}
 8100928:	6010      	str	r0, [r2, #0]
 810092a:	6051      	str	r1, [r2, #4]
 810092c:	8819      	ldrh	r1, [r3, #0]
 810092e:	789b      	ldrb	r3, [r3, #2]
 8100930:	8111      	strh	r1, [r2, #8]
 8100932:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100934:	486b      	ldr	r0, [pc, #428]	@ (8100ae4 <gps+0x26c>)
 8100936:	f7ff fcd3 	bl	81002e0 <strlen>
 810093a:	4603      	mov	r3, r0
 810093c:	b29a      	uxth	r2, r3
 810093e:	2364      	movs	r3, #100	@ 0x64
 8100940:	4968      	ldr	r1, [pc, #416]	@ (8100ae4 <gps+0x26c>)
 8100942:	486a      	ldr	r0, [pc, #424]	@ (8100aec <gps+0x274>)
 8100944:	f008 ff01 	bl	810974a <HAL_UART_Transmit>
			osDelay(100);
 8100948:	2064      	movs	r0, #100	@ 0x64
 810094a:	f00b f9ca 	bl	810bce2 <osDelay>
			gpsString = strstr((char *)checkBuffer, CMD_GPS_CHECK_R_T);
 810094e:	4968      	ldr	r1, [pc, #416]	@ (8100af0 <gps+0x278>)
 8100950:	4868      	ldr	r0, [pc, #416]	@ (8100af4 <gps+0x27c>)
 8100952:	f00e fbf1 	bl	810f138 <strstr>
 8100956:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (gpsString != NULL){
 8100958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810095a:	2b00      	cmp	r3, #0
 810095c:	d025      	beq.n	81009aa <gps+0x132>
				set = 1;
 810095e:	2301      	movs	r3, #1
 8100960:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
				//osDelay(6000);
				memset(txBuffer, NULL_, sizeof(txBuffer));
 8100964:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100968:	2100      	movs	r1, #0
 810096a:	485e      	ldr	r0, [pc, #376]	@ (8100ae4 <gps+0x26c>)
 810096c:	f00e fbbc 	bl	810f0e8 <memset>
				strcpy(txBuffer, CMD_GPS_DATA);
 8100970:	4a5c      	ldr	r2, [pc, #368]	@ (8100ae4 <gps+0x26c>)
 8100972:	4b61      	ldr	r3, [pc, #388]	@ (8100af8 <gps+0x280>)
 8100974:	4614      	mov	r4, r2
 8100976:	cb07      	ldmia	r3!, {r0, r1, r2}
 8100978:	6020      	str	r0, [r4, #0]
 810097a:	6061      	str	r1, [r4, #4]
 810097c:	60a2      	str	r2, [r4, #8]
 810097e:	881a      	ldrh	r2, [r3, #0]
 8100980:	789b      	ldrb	r3, [r3, #2]
 8100982:	81a2      	strh	r2, [r4, #12]
 8100984:	73a3      	strb	r3, [r4, #14]
				HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100986:	4857      	ldr	r0, [pc, #348]	@ (8100ae4 <gps+0x26c>)
 8100988:	f7ff fcaa 	bl	81002e0 <strlen>
 810098c:	4603      	mov	r3, r0
 810098e:	b29a      	uxth	r2, r3
 8100990:	2364      	movs	r3, #100	@ 0x64
 8100992:	4954      	ldr	r1, [pc, #336]	@ (8100ae4 <gps+0x26c>)
 8100994:	4855      	ldr	r0, [pc, #340]	@ (8100aec <gps+0x274>)
 8100996:	f008 fed8 	bl	810974a <HAL_UART_Transmit>
				osDelay(100);
 810099a:	2064      	movs	r0, #100	@ 0x64
 810099c:	f00b f9a1 	bl	810bce2 <osDelay>
				gpsString = strstr((char *)rxBuffer, GPS_ACK);
 81009a0:	4956      	ldr	r1, [pc, #344]	@ (8100afc <gps+0x284>)
 81009a2:	4857      	ldr	r0, [pc, #348]	@ (8100b00 <gps+0x288>)
 81009a4:	f00e fbc8 	bl	810f138 <strstr>
 81009a8:	62b8      	str	r0, [r7, #40]	@ 0x28
				if (gpsString != NULL){
				}
			}
			osDelay(100);
 81009aa:	2064      	movs	r0, #100	@ 0x64
 81009ac:	f00b f999 	bl	810bce2 <osDelay>
			gpsString = strstr((char *)checkBuffer, ERROR_GPS_ACTIVE);
 81009b0:	4954      	ldr	r1, [pc, #336]	@ (8100b04 <gps+0x28c>)
 81009b2:	4850      	ldr	r0, [pc, #320]	@ (8100af4 <gps+0x27c>)
 81009b4:	f00e fbc0 	bl	810f138 <strstr>
 81009b8:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (gpsString != NULL){
 81009ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81009bc:	2b00      	cmp	r3, #0
 81009be:	d02d      	beq.n	8100a1c <gps+0x1a4>
				set = 1;
 81009c0:	2301      	movs	r3, #1
 81009c2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
 81009c6:	e029      	b.n	8100a1c <gps+0x1a4>
			}
		}
		else if (set == 1) {
 81009c8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 81009cc:	2b01      	cmp	r3, #1
 81009ce:	d125      	bne.n	8100a1c <gps+0x1a4>

			memset(txBuffer, NULL_, sizeof(txBuffer));
 81009d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81009d4:	2100      	movs	r1, #0
 81009d6:	4843      	ldr	r0, [pc, #268]	@ (8100ae4 <gps+0x26c>)
 81009d8:	f00e fb86 	bl	810f0e8 <memset>
			strcpy(txBuffer, CMD_GPS_DATA);
 81009dc:	4a41      	ldr	r2, [pc, #260]	@ (8100ae4 <gps+0x26c>)
 81009de:	4b46      	ldr	r3, [pc, #280]	@ (8100af8 <gps+0x280>)
 81009e0:	4614      	mov	r4, r2
 81009e2:	cb07      	ldmia	r3!, {r0, r1, r2}
 81009e4:	6020      	str	r0, [r4, #0]
 81009e6:	6061      	str	r1, [r4, #4]
 81009e8:	60a2      	str	r2, [r4, #8]
 81009ea:	881a      	ldrh	r2, [r3, #0]
 81009ec:	789b      	ldrb	r3, [r3, #2]
 81009ee:	81a2      	strh	r2, [r4, #12]
 81009f0:	73a3      	strb	r3, [r4, #14]
			HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81009f2:	483c      	ldr	r0, [pc, #240]	@ (8100ae4 <gps+0x26c>)
 81009f4:	f7ff fc74 	bl	81002e0 <strlen>
 81009f8:	4603      	mov	r3, r0
 81009fa:	b29a      	uxth	r2, r3
 81009fc:	2364      	movs	r3, #100	@ 0x64
 81009fe:	4939      	ldr	r1, [pc, #228]	@ (8100ae4 <gps+0x26c>)
 8100a00:	483a      	ldr	r0, [pc, #232]	@ (8100aec <gps+0x274>)
 8100a02:	f008 fea2 	bl	810974a <HAL_UART_Transmit>
			osDelay(100);
 8100a06:	2064      	movs	r0, #100	@ 0x64
 8100a08:	f00b f96b 	bl	810bce2 <osDelay>
			gpsString = strstr((char *)rxBuffer, GPS_ACK);
 8100a0c:	493b      	ldr	r1, [pc, #236]	@ (8100afc <gps+0x284>)
 8100a0e:	483c      	ldr	r0, [pc, #240]	@ (8100b00 <gps+0x288>)
 8100a10:	f00e fb92 	bl	810f138 <strstr>
 8100a14:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (gpsString != NULL){
 8100a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100a18:	2b00      	cmp	r3, #0
 8100a1a:	d17b      	bne.n	8100b14 <gps+0x29c>
				break;
			}

		}
		if (ctr == 100 && gps_start == 0) {
 8100a1c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8100a1e:	2b64      	cmp	r3, #100	@ 0x64
 8100a20:	d104      	bne.n	8100a2c <gps+0x1b4>
 8100a22:	4b39      	ldr	r3, [pc, #228]	@ (8100b08 <gps+0x290>)
 8100a24:	781b      	ldrb	r3, [r3, #0]
 8100a26:	2b00      	cmp	r3, #0
 8100a28:	f000 80c9 	beq.w	8100bbe <gps+0x346>
			goto cleanup;
		}
		else if (ctr == 2 && gps_start == 1){
 8100a2c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8100a2e:	2b02      	cmp	r3, #2
 8100a30:	d104      	bne.n	8100a3c <gps+0x1c4>
 8100a32:	4b35      	ldr	r3, [pc, #212]	@ (8100b08 <gps+0x290>)
 8100a34:	781b      	ldrb	r3, [r3, #0]
 8100a36:	2b01      	cmp	r3, #1
 8100a38:	f000 80c3 	beq.w	8100bc2 <gps+0x34a>
			goto cleanup;
		}
		osDelay(100);
 8100a3c:	2064      	movs	r0, #100	@ 0x64
 8100a3e:	f00b f950 	bl	810bce2 <osDelay>
		gpsString = strstr((char *)checkBuffer, ERROR_GPS_FIX);
 8100a42:	4932      	ldr	r1, [pc, #200]	@ (8100b0c <gps+0x294>)
 8100a44:	482b      	ldr	r0, [pc, #172]	@ (8100af4 <gps+0x27c>)
 8100a46:	f00e fb77 	bl	810f138 <strstr>
 8100a4a:	62b8      	str	r0, [r7, #40]	@ 0x28
		if (gpsString != NULL){
 8100a4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100a4e:	2b00      	cmp	r3, #0
 8100a50:	f43f af5d 	beq.w	810090e <gps+0x96>
			memset(txBuffer, NULL_, sizeof(txBuffer));
 8100a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100a58:	2100      	movs	r1, #0
 8100a5a:	4822      	ldr	r0, [pc, #136]	@ (8100ae4 <gps+0x26c>)
 8100a5c:	f00e fb44 	bl	810f0e8 <memset>
			strcpy(txBuffer, CMD_GPS_CHECK);
 8100a60:	4a20      	ldr	r2, [pc, #128]	@ (8100ae4 <gps+0x26c>)
 8100a62:	4b21      	ldr	r3, [pc, #132]	@ (8100ae8 <gps+0x270>)
 8100a64:	cb03      	ldmia	r3!, {r0, r1}
 8100a66:	6010      	str	r0, [r2, #0]
 8100a68:	6051      	str	r1, [r2, #4]
 8100a6a:	8819      	ldrh	r1, [r3, #0]
 8100a6c:	789b      	ldrb	r3, [r3, #2]
 8100a6e:	8111      	strh	r1, [r2, #8]
 8100a70:	7293      	strb	r3, [r2, #10]
			HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100a72:	481c      	ldr	r0, [pc, #112]	@ (8100ae4 <gps+0x26c>)
 8100a74:	f7ff fc34 	bl	81002e0 <strlen>
 8100a78:	4603      	mov	r3, r0
 8100a7a:	b29a      	uxth	r2, r3
 8100a7c:	2364      	movs	r3, #100	@ 0x64
 8100a7e:	4919      	ldr	r1, [pc, #100]	@ (8100ae4 <gps+0x26c>)
 8100a80:	481a      	ldr	r0, [pc, #104]	@ (8100aec <gps+0x274>)
 8100a82:	f008 fe62 	bl	810974a <HAL_UART_Transmit>
			osDelay(100);
 8100a86:	2064      	movs	r0, #100	@ 0x64
 8100a88:	f00b f92b 	bl	810bce2 <osDelay>
			gpsString = strstr((char *)checkBuffer, CMD_GPS_CHECK_R_T);
 8100a8c:	4918      	ldr	r1, [pc, #96]	@ (8100af0 <gps+0x278>)
 8100a8e:	4819      	ldr	r0, [pc, #100]	@ (8100af4 <gps+0x27c>)
 8100a90:	f00e fb52 	bl	810f138 <strstr>
 8100a94:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (gpsString != NULL && gps_start == 0){
 8100a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100a98:	2b00      	cmp	r3, #0
 8100a9a:	d00b      	beq.n	8100ab4 <gps+0x23c>
 8100a9c:	4b1a      	ldr	r3, [pc, #104]	@ (8100b08 <gps+0x290>)
 8100a9e:	781b      	ldrb	r3, [r3, #0]
 8100aa0:	2b00      	cmp	r3, #0
 8100aa2:	d107      	bne.n	8100ab4 <gps+0x23c>
				++ctr;
 8100aa4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8100aa6:	3301      	adds	r3, #1
 8100aa8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
				osDelay(6000);
 8100aaa:	f241 7070 	movw	r0, #6000	@ 0x1770
 8100aae:	f00b f918 	bl	810bce2 <osDelay>
 8100ab2:	e009      	b.n	8100ac8 <gps+0x250>
			}
			else if (gpsString != NULL && gps_start == 1){
 8100ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100ab6:	2b00      	cmp	r3, #0
 8100ab8:	d006      	beq.n	8100ac8 <gps+0x250>
 8100aba:	4b13      	ldr	r3, [pc, #76]	@ (8100b08 <gps+0x290>)
 8100abc:	781b      	ldrb	r3, [r3, #0]
 8100abe:	2b01      	cmp	r3, #1
 8100ac0:	d102      	bne.n	8100ac8 <gps+0x250>
				++ctr;
 8100ac2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8100ac4:	3301      	adds	r3, #1
 8100ac6:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			}
			gpsString = strstr((char *)checkBuffer, CMD_GPS_CHECK_R_F);
 8100ac8:	4911      	ldr	r1, [pc, #68]	@ (8100b10 <gps+0x298>)
 8100aca:	480a      	ldr	r0, [pc, #40]	@ (8100af4 <gps+0x27c>)
 8100acc:	f00e fb34 	bl	810f138 <strstr>
 8100ad0:	62b8      	str	r0, [r7, #40]	@ 0x28
			if (gpsString != NULL)	goto cleanup;
 8100ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100ad4:	2b00      	cmp	r3, #0
 8100ad6:	d176      	bne.n	8100bc6 <gps+0x34e>
		if (set == 0)
 8100ad8:	e719      	b.n	810090e <gps+0x96>
 8100ada:	bf00      	nop
 8100adc:	10000698 	.word	0x10000698
 8100ae0:	100004a8 	.word	0x100004a8
 8100ae4:	100001a8 	.word	0x100001a8
 8100ae8:	0810fae4 	.word	0x0810fae4
 8100aec:	1000057c 	.word	0x1000057c
 8100af0:	0810faf0 	.word	0x0810faf0
 8100af4:	100003a8 	.word	0x100003a8
 8100af8:	0810fafc 	.word	0x0810fafc
 8100afc:	0810fb0c 	.word	0x0810fb0c
 8100b00:	100002a8 	.word	0x100002a8
 8100b04:	0810fb18 	.word	0x0810fb18
 8100b08:	100001a6 	.word	0x100001a6
 8100b0c:	0810fb28 	.word	0x0810fb28
 8100b10:	0810fb38 	.word	0x0810fb38
				break;
 8100b14:	bf00      	nop
		}
	}

    memset(txBuffer, NULL_, sizeof(txBuffer));
 8100b16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100b1a:	2100      	movs	r1, #0
 8100b1c:	483a      	ldr	r0, [pc, #232]	@ (8100c08 <gps+0x390>)
 8100b1e:	f00e fae3 	bl	810f0e8 <memset>

    // Check for "GNRMC" in the response
    gpsString = strstr(gpsString, ".");//CHECK_DOT);
 8100b22:	212e      	movs	r1, #46	@ 0x2e
 8100b24:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8100b26:	f00e fae7 	bl	810f0f8 <strchr>
 8100b2a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (gpsString == NULL) {
 8100b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100b2e:	2b00      	cmp	r3, #0
 8100b30:	d04b      	beq.n	8100bca <gps+0x352>
        goto cleanup;
    }

    // Check for the first comma
    gpsString = strstr(gpsString, ",");//CHECK_COMMA);
 8100b32:	212c      	movs	r1, #44	@ 0x2c
 8100b34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8100b36:	f00e fadf 	bl	810f0f8 <strchr>
 8100b3a:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (gpsString == NULL) {
 8100b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8100b3e:	2b00      	cmp	r3, #0
 8100b40:	d045      	beq.n	8100bce <gps+0x356>
        goto cleanup;
    }

    // Extract data
    strncpy(extractedData, gpsString, 18);
 8100b42:	1d3b      	adds	r3, r7, #4
 8100b44:	2212      	movs	r2, #18
 8100b46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8100b48:	4618      	mov	r0, r3
 8100b4a:	f00e fae2 	bl	810f112 <strncpy>
    extractedData[19] = NULL_; // Ensure null termination
 8100b4e:	2300      	movs	r3, #0
 8100b50:	75fb      	strb	r3, [r7, #23]

    // Remove the first comma
    char *comma = strchr(extractedData, ',');
 8100b52:	1d3b      	adds	r3, r7, #4
 8100b54:	212c      	movs	r1, #44	@ 0x2c
 8100b56:	4618      	mov	r0, r3
 8100b58:	f00e face 	bl	810f0f8 <strchr>
 8100b5c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (comma != NULL) {
 8100b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b60:	2b00      	cmp	r3, #0
 8100b62:	d00a      	beq.n	8100b7a <gps+0x302>
        memmove(comma, comma + 1, strlen(comma)); // Shift the characters left
 8100b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8100b66:	1c5c      	adds	r4, r3, #1
 8100b68:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8100b6a:	f7ff fbb9 	bl	81002e0 <strlen>
 8100b6e:	4603      	mov	r3, r0
 8100b70:	461a      	mov	r2, r3
 8100b72:	4621      	mov	r1, r4
 8100b74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8100b76:	f00e fa9d 	bl	810f0b4 <memmove>
    }

    // Copy data to server attributes
    memcpy(serverAttributes.gpsData, extractedData, strlen(extractedData));
 8100b7a:	1d3b      	adds	r3, r7, #4
 8100b7c:	4618      	mov	r0, r3
 8100b7e:	f7ff fbaf 	bl	81002e0 <strlen>
 8100b82:	4602      	mov	r2, r0
 8100b84:	1d3b      	adds	r3, r7, #4
 8100b86:	4619      	mov	r1, r3
 8100b88:	4820      	ldr	r0, [pc, #128]	@ (8100c0c <gps+0x394>)
 8100b8a:	f00e fb6d 	bl	810f268 <memcpy>
    //strcpy(txBuffer, "AT+QGPSEND\r\n");
    //HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
    //memset(txBuffer, NULL_, sizeof(txBuffer));

    // Release mutex and exit
    osMutexRelease(uart_lockHandle);
 8100b8e:	4b20      	ldr	r3, [pc, #128]	@ (8100c10 <gps+0x398>)
 8100b90:	681b      	ldr	r3, [r3, #0]
 8100b92:	4618      	mov	r0, r3
 8100b94:	f00b f9be 	bl	810bf14 <osMutexRelease>
    ctr = 0;
 8100b98:	2300      	movs	r3, #0
 8100b9a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if(++propertyIndex > 11){
 8100b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8100c14 <gps+0x39c>)
 8100b9e:	781b      	ldrb	r3, [r3, #0]
 8100ba0:	3301      	adds	r3, #1
 8100ba2:	b2da      	uxtb	r2, r3
 8100ba4:	4b1b      	ldr	r3, [pc, #108]	@ (8100c14 <gps+0x39c>)
 8100ba6:	701a      	strb	r2, [r3, #0]
 8100ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8100c14 <gps+0x39c>)
 8100baa:	781b      	ldrb	r3, [r3, #0]
 8100bac:	2b0b      	cmp	r3, #11
 8100bae:	d902      	bls.n	8100bb6 <gps+0x33e>
  		propertyIndex  = 3;
 8100bb0:	4b18      	ldr	r3, [pc, #96]	@ (8100c14 <gps+0x39c>)
 8100bb2:	2203      	movs	r2, #3
 8100bb4:	701a      	strb	r2, [r3, #0]
  	}
    gps_start = 1;
 8100bb6:	4b18      	ldr	r3, [pc, #96]	@ (8100c18 <gps+0x3a0>)
 8100bb8:	2201      	movs	r2, #1
 8100bba:	701a      	strb	r2, [r3, #0]
    return;
 8100bbc:	e020      	b.n	8100c00 <gps+0x388>
			goto cleanup;
 8100bbe:	bf00      	nop
 8100bc0:	e006      	b.n	8100bd0 <gps+0x358>
			goto cleanup;
 8100bc2:	bf00      	nop
 8100bc4:	e004      	b.n	8100bd0 <gps+0x358>
			if (gpsString != NULL)	goto cleanup;
 8100bc6:	bf00      	nop
 8100bc8:	e002      	b.n	8100bd0 <gps+0x358>
        goto cleanup;
 8100bca:	bf00      	nop
 8100bcc:	e000      	b.n	8100bd0 <gps+0x358>
        goto cleanup;
 8100bce:	bf00      	nop
    //strcpy(txBuffer, "AT+QGPSEND\r\n");
    //HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
    //memset(txBuffer, NULL_, sizeof(txBuffer));

    // Release mutex before exiting
    osMutexRelease(uart_lockHandle);
 8100bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8100c10 <gps+0x398>)
 8100bd2:	681b      	ldr	r3, [r3, #0]
 8100bd4:	4618      	mov	r0, r3
 8100bd6:	f00b f99d 	bl	810bf14 <osMutexRelease>
    ctr = 0;
 8100bda:	2300      	movs	r3, #0
 8100bdc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    if(++propertyIndex > 11){
 8100bde:	4b0d      	ldr	r3, [pc, #52]	@ (8100c14 <gps+0x39c>)
 8100be0:	781b      	ldrb	r3, [r3, #0]
 8100be2:	3301      	adds	r3, #1
 8100be4:	b2da      	uxtb	r2, r3
 8100be6:	4b0b      	ldr	r3, [pc, #44]	@ (8100c14 <gps+0x39c>)
 8100be8:	701a      	strb	r2, [r3, #0]
 8100bea:	4b0a      	ldr	r3, [pc, #40]	@ (8100c14 <gps+0x39c>)
 8100bec:	781b      	ldrb	r3, [r3, #0]
 8100bee:	2b0b      	cmp	r3, #11
 8100bf0:	d905      	bls.n	8100bfe <gps+0x386>
  		propertyIndex  = 3;
 8100bf2:	4b08      	ldr	r3, [pc, #32]	@ (8100c14 <gps+0x39c>)
 8100bf4:	2203      	movs	r2, #3
 8100bf6:	701a      	strb	r2, [r3, #0]
  	}
    return;
 8100bf8:	e001      	b.n	8100bfe <gps+0x386>
		return;
 8100bfa:	bf00      	nop
 8100bfc:	e000      	b.n	8100c00 <gps+0x388>
    return;
 8100bfe:	bf00      	nop
}
 8100c00:	3734      	adds	r7, #52	@ 0x34
 8100c02:	46bd      	mov	sp, r7
 8100c04:	bd90      	pop	{r4, r7, pc}
 8100c06:	bf00      	nop
 8100c08:	100001a8 	.word	0x100001a8
 8100c0c:	100004b3 	.word	0x100004b3
 8100c10:	10000698 	.word	0x10000698
 8100c14:	10000120 	.word	0x10000120
 8100c18:	100001a6 	.word	0x100001a6

08100c1c <NetworkInit>:

uint8_t propertyIndex = 3;
uint8_t c_type = 0;


void NetworkInit() {
 8100c1c:	b5b0      	push	{r4, r5, r7, lr}
 8100c1e:	b084      	sub	sp, #16
 8100c20:	af02      	add	r7, sp, #8

	uint16_t rxLength = 0;
 8100c22:	2300      	movs	r3, #0
 8100c24:	80fb      	strh	r3, [r7, #6]
	//while(rxBuffer[0] == ){
	strcpy(txBuffer, CMD_ECHO_OFF);
 8100c26:	4bb9      	ldr	r3, [pc, #740]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c28:	4ab9      	ldr	r2, [pc, #740]	@ (8100f10 <NetworkInit+0x2f4>)
 8100c2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8100c2e:	6018      	str	r0, [r3, #0]
 8100c30:	3304      	adds	r3, #4
 8100c32:	8019      	strh	r1, [r3, #0]
 8100c34:	3302      	adds	r3, #2
 8100c36:	0c0a      	lsrs	r2, r1, #16
 8100c38:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100c3a:	48b4      	ldr	r0, [pc, #720]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c3c:	f7ff fb50 	bl	81002e0 <strlen>
 8100c40:	4603      	mov	r3, r0
 8100c42:	b29a      	uxth	r2, r3
 8100c44:	2364      	movs	r3, #100	@ 0x64
 8100c46:	49b1      	ldr	r1, [pc, #708]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c48:	48b2      	ldr	r0, [pc, #712]	@ (8100f14 <NetworkInit+0x2f8>)
 8100c4a:	f008 fd7e 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100c4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c52:	2100      	movs	r1, #0
 8100c54:	48ad      	ldr	r0, [pc, #692]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c56:	f00e fa47 	bl	810f0e8 <memset>
	//}
	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c5e:	2100      	movs	r1, #0
 8100c60:	48ad      	ldr	r0, [pc, #692]	@ (8100f18 <NetworkInit+0x2fc>)
 8100c62:	f00e fa41 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100c66:	4bab      	ldr	r3, [pc, #684]	@ (8100f14 <NetworkInit+0x2f8>)
 8100c68:	681b      	ldr	r3, [r3, #0]
 8100c6a:	2220      	movs	r2, #32
 8100c6c:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100c6e:	48a9      	ldr	r0, [pc, #676]	@ (8100f14 <NetworkInit+0x2f8>)
 8100c70:	f008 fdf9 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100c74:	1dbb      	adds	r3, r7, #6
 8100c76:	2264      	movs	r2, #100	@ 0x64
 8100c78:	9200      	str	r2, [sp, #0]
 8100c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100c7e:	49a6      	ldr	r1, [pc, #664]	@ (8100f18 <NetworkInit+0x2fc>)
 8100c80:	48a4      	ldr	r0, [pc, #656]	@ (8100f14 <NetworkInit+0x2f8>)
 8100c82:	f00a fd55 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);

    // Check SIM is ready
    strcpy(txBuffer, CMD_CHECK_SIM);
 8100c86:	4ba1      	ldr	r3, [pc, #644]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c88:	4aa4      	ldr	r2, [pc, #656]	@ (8100f1c <NetworkInit+0x300>)
 8100c8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8100c8c:	c303      	stmia	r3!, {r0, r1}
 8100c8e:	801a      	strh	r2, [r3, #0]
 8100c90:	3302      	adds	r3, #2
 8100c92:	0c12      	lsrs	r2, r2, #16
 8100c94:	701a      	strb	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100c96:	489d      	ldr	r0, [pc, #628]	@ (8100f0c <NetworkInit+0x2f0>)
 8100c98:	f7ff fb22 	bl	81002e0 <strlen>
 8100c9c:	4603      	mov	r3, r0
 8100c9e:	b29a      	uxth	r2, r3
 8100ca0:	2364      	movs	r3, #100	@ 0x64
 8100ca2:	499a      	ldr	r1, [pc, #616]	@ (8100f0c <NetworkInit+0x2f0>)
 8100ca4:	489b      	ldr	r0, [pc, #620]	@ (8100f14 <NetworkInit+0x2f8>)
 8100ca6:	f008 fd50 	bl	810974a <HAL_UART_Transmit>
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100caa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100cae:	2100      	movs	r1, #0
 8100cb0:	4896      	ldr	r0, [pc, #600]	@ (8100f0c <NetworkInit+0x2f0>)
 8100cb2:	f00e fa19 	bl	810f0e8 <memset>

    memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100cb6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100cba:	2100      	movs	r1, #0
 8100cbc:	4896      	ldr	r0, [pc, #600]	@ (8100f18 <NetworkInit+0x2fc>)
 8100cbe:	f00e fa13 	bl	810f0e8 <memset>
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100cc2:	4b94      	ldr	r3, [pc, #592]	@ (8100f14 <NetworkInit+0x2f8>)
 8100cc4:	681b      	ldr	r3, [r3, #0]
 8100cc6:	2220      	movs	r2, #32
 8100cc8:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100cca:	4892      	ldr	r0, [pc, #584]	@ (8100f14 <NetworkInit+0x2f8>)
 8100ccc:	f008 fdcb 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100cd0:	1dbb      	adds	r3, r7, #6
 8100cd2:	2264      	movs	r2, #100	@ 0x64
 8100cd4:	9200      	str	r2, [sp, #0]
 8100cd6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100cda:	498f      	ldr	r1, [pc, #572]	@ (8100f18 <NetworkInit+0x2fc>)
 8100cdc:	488d      	ldr	r0, [pc, #564]	@ (8100f14 <NetworkInit+0x2f8>)
 8100cde:	f00a fd27 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
    //HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);

    //osDelay(100);

    // Check network registration
    strcpy(txBuffer, CMD_NETWORK_REG);
 8100ce2:	4b8a      	ldr	r3, [pc, #552]	@ (8100f0c <NetworkInit+0x2f0>)
 8100ce4:	4a8e      	ldr	r2, [pc, #568]	@ (8100f20 <NetworkInit+0x304>)
 8100ce6:	ca07      	ldmia	r2, {r0, r1, r2}
 8100ce8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100cec:	4887      	ldr	r0, [pc, #540]	@ (8100f0c <NetworkInit+0x2f0>)
 8100cee:	f7ff faf7 	bl	81002e0 <strlen>
 8100cf2:	4603      	mov	r3, r0
 8100cf4:	b29a      	uxth	r2, r3
 8100cf6:	2364      	movs	r3, #100	@ 0x64
 8100cf8:	4984      	ldr	r1, [pc, #528]	@ (8100f0c <NetworkInit+0x2f0>)
 8100cfa:	4886      	ldr	r0, [pc, #536]	@ (8100f14 <NetworkInit+0x2f8>)
 8100cfc:	f008 fd25 	bl	810974a <HAL_UART_Transmit>
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100d00:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d04:	2100      	movs	r1, #0
 8100d06:	4881      	ldr	r0, [pc, #516]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d08:	f00e f9ee 	bl	810f0e8 <memset>

    memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100d0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d10:	2100      	movs	r1, #0
 8100d12:	4881      	ldr	r0, [pc, #516]	@ (8100f18 <NetworkInit+0x2fc>)
 8100d14:	f00e f9e8 	bl	810f0e8 <memset>
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100d18:	4b7e      	ldr	r3, [pc, #504]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d1a:	681b      	ldr	r3, [r3, #0]
 8100d1c:	2220      	movs	r2, #32
 8100d1e:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100d20:	487c      	ldr	r0, [pc, #496]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d22:	f008 fda0 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100d26:	1dbb      	adds	r3, r7, #6
 8100d28:	2264      	movs	r2, #100	@ 0x64
 8100d2a:	9200      	str	r2, [sp, #0]
 8100d2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d30:	4979      	ldr	r1, [pc, #484]	@ (8100f18 <NetworkInit+0x2fc>)
 8100d32:	4878      	ldr	r0, [pc, #480]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d34:	f00a fcfc 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
    //HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
    //osDelay(100);

    // Check network registration
	strcpy(txBuffer, CMD_NETWORK_PDP_CFG);
 8100d38:	4a74      	ldr	r2, [pc, #464]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8100f24 <NetworkInit+0x308>)
 8100d3c:	4614      	mov	r4, r2
 8100d3e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8100d40:	c407      	stmia	r4!, {r0, r1, r2}
 8100d42:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100d44:	4871      	ldr	r0, [pc, #452]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d46:	f7ff facb 	bl	81002e0 <strlen>
 8100d4a:	4603      	mov	r3, r0
 8100d4c:	b29a      	uxth	r2, r3
 8100d4e:	2364      	movs	r3, #100	@ 0x64
 8100d50:	496e      	ldr	r1, [pc, #440]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d52:	4870      	ldr	r0, [pc, #448]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d54:	f008 fcf9 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100d58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d5c:	2100      	movs	r1, #0
 8100d5e:	486b      	ldr	r0, [pc, #428]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d60:	f00e f9c2 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100d64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d68:	2100      	movs	r1, #0
 8100d6a:	486b      	ldr	r0, [pc, #428]	@ (8100f18 <NetworkInit+0x2fc>)
 8100d6c:	f00e f9bc 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100d70:	4b68      	ldr	r3, [pc, #416]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d72:	681b      	ldr	r3, [r3, #0]
 8100d74:	2220      	movs	r2, #32
 8100d76:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100d78:	4866      	ldr	r0, [pc, #408]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d7a:	f008 fd74 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100d7e:	1dbb      	adds	r3, r7, #6
 8100d80:	2264      	movs	r2, #100	@ 0x64
 8100d82:	9200      	str	r2, [sp, #0]
 8100d84:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100d88:	4963      	ldr	r1, [pc, #396]	@ (8100f18 <NetworkInit+0x2fc>)
 8100d8a:	4862      	ldr	r0, [pc, #392]	@ (8100f14 <NetworkInit+0x2f8>)
 8100d8c:	f00a fcd0 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

    // Set APN
    strcpy(txBuffer, CMD_SET_APN);
 8100d90:	4a5e      	ldr	r2, [pc, #376]	@ (8100f0c <NetworkInit+0x2f0>)
 8100d92:	4b65      	ldr	r3, [pc, #404]	@ (8100f28 <NetworkInit+0x30c>)
 8100d94:	4614      	mov	r4, r2
 8100d96:	461d      	mov	r5, r3
 8100d98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100da0:	e895 0003 	ldmia.w	r5, {r0, r1}
 8100da4:	6020      	str	r0, [r4, #0]
 8100da6:	3404      	adds	r4, #4
 8100da8:	7021      	strb	r1, [r4, #0]
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100daa:	4858      	ldr	r0, [pc, #352]	@ (8100f0c <NetworkInit+0x2f0>)
 8100dac:	f7ff fa98 	bl	81002e0 <strlen>
 8100db0:	4603      	mov	r3, r0
 8100db2:	b29a      	uxth	r2, r3
 8100db4:	2364      	movs	r3, #100	@ 0x64
 8100db6:	4955      	ldr	r1, [pc, #340]	@ (8100f0c <NetworkInit+0x2f0>)
 8100db8:	4856      	ldr	r0, [pc, #344]	@ (8100f14 <NetworkInit+0x2f8>)
 8100dba:	f008 fcc6 	bl	810974a <HAL_UART_Transmit>
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100dc2:	2100      	movs	r1, #0
 8100dc4:	4851      	ldr	r0, [pc, #324]	@ (8100f0c <NetworkInit+0x2f0>)
 8100dc6:	f00e f98f 	bl	810f0e8 <memset>

    memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100dca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100dce:	2100      	movs	r1, #0
 8100dd0:	4851      	ldr	r0, [pc, #324]	@ (8100f18 <NetworkInit+0x2fc>)
 8100dd2:	f00e f989 	bl	810f0e8 <memset>
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8100f14 <NetworkInit+0x2f8>)
 8100dd8:	681b      	ldr	r3, [r3, #0]
 8100dda:	2220      	movs	r2, #32
 8100ddc:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100dde:	484d      	ldr	r0, [pc, #308]	@ (8100f14 <NetworkInit+0x2f8>)
 8100de0:	f008 fd41 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100de4:	1dbb      	adds	r3, r7, #6
 8100de6:	2264      	movs	r2, #100	@ 0x64
 8100de8:	9200      	str	r2, [sp, #0]
 8100dea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100dee:	494a      	ldr	r1, [pc, #296]	@ (8100f18 <NetworkInit+0x2fc>)
 8100df0:	4848      	ldr	r0, [pc, #288]	@ (8100f14 <NetworkInit+0x2f8>)
 8100df2:	f00a fc9d 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

    // PDP Contextn
    strcpy(txBuffer, CMD_ACTIVATE_PDP);
 8100df6:	4a45      	ldr	r2, [pc, #276]	@ (8100f0c <NetworkInit+0x2f0>)
 8100df8:	4b4c      	ldr	r3, [pc, #304]	@ (8100f2c <NetworkInit+0x310>)
 8100dfa:	4614      	mov	r4, r2
 8100dfc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8100dfe:	c407      	stmia	r4!, {r0, r1, r2}
 8100e00:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100e02:	4842      	ldr	r0, [pc, #264]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e04:	f7ff fa6c 	bl	81002e0 <strlen>
 8100e08:	4603      	mov	r3, r0
 8100e0a:	b29a      	uxth	r2, r3
 8100e0c:	2364      	movs	r3, #100	@ 0x64
 8100e0e:	493f      	ldr	r1, [pc, #252]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e10:	4840      	ldr	r0, [pc, #256]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e12:	f008 fc9a 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100e16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e1a:	2100      	movs	r1, #0
 8100e1c:	483b      	ldr	r0, [pc, #236]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e1e:	f00e f963 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100e22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e26:	2100      	movs	r1, #0
 8100e28:	483b      	ldr	r0, [pc, #236]	@ (8100f18 <NetworkInit+0x2fc>)
 8100e2a:	f00e f95d 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100e2e:	4b39      	ldr	r3, [pc, #228]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e30:	681b      	ldr	r3, [r3, #0]
 8100e32:	2220      	movs	r2, #32
 8100e34:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100e36:	4837      	ldr	r0, [pc, #220]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e38:	f008 fd15 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100e3c:	1dbb      	adds	r3, r7, #6
 8100e3e:	2264      	movs	r2, #100	@ 0x64
 8100e40:	9200      	str	r2, [sp, #0]
 8100e42:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e46:	4934      	ldr	r1, [pc, #208]	@ (8100f18 <NetworkInit+0x2fc>)
 8100e48:	4832      	ldr	r0, [pc, #200]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e4a:	f00a fc71 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);


	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_PORT);
 8100e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e50:	4b37      	ldr	r3, [pc, #220]	@ (8100f30 <NetworkInit+0x314>)
 8100e52:	4614      	mov	r4, r2
 8100e54:	461d      	mov	r5, r3
 8100e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100e5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8100e5e:	c407      	stmia	r4!, {r0, r1, r2}
 8100e60:	8023      	strh	r3, [r4, #0]
 8100e62:	3402      	adds	r4, #2
 8100e64:	0c1b      	lsrs	r3, r3, #16
 8100e66:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100e68:	4828      	ldr	r0, [pc, #160]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e6a:	f7ff fa39 	bl	81002e0 <strlen>
 8100e6e:	4603      	mov	r3, r0
 8100e70:	b29a      	uxth	r2, r3
 8100e72:	2364      	movs	r3, #100	@ 0x64
 8100e74:	4925      	ldr	r1, [pc, #148]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e76:	4827      	ldr	r0, [pc, #156]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e78:	f008 fc67 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100e7c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e80:	2100      	movs	r1, #0
 8100e82:	4822      	ldr	r0, [pc, #136]	@ (8100f0c <NetworkInit+0x2f0>)
 8100e84:	f00e f930 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100e88:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100e8c:	2100      	movs	r1, #0
 8100e8e:	4822      	ldr	r0, [pc, #136]	@ (8100f18 <NetworkInit+0x2fc>)
 8100e90:	f00e f92a 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100e94:	4b1f      	ldr	r3, [pc, #124]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e96:	681b      	ldr	r3, [r3, #0]
 8100e98:	2220      	movs	r2, #32
 8100e9a:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100e9c:	481d      	ldr	r0, [pc, #116]	@ (8100f14 <NetworkInit+0x2f8>)
 8100e9e:	f008 fce2 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100ea2:	1dbb      	adds	r3, r7, #6
 8100ea4:	2264      	movs	r2, #100	@ 0x64
 8100ea6:	9200      	str	r2, [sp, #0]
 8100ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100eac:	491a      	ldr	r1, [pc, #104]	@ (8100f18 <NetworkInit+0x2fc>)
 8100eae:	4819      	ldr	r0, [pc, #100]	@ (8100f14 <NetworkInit+0x2f8>)
 8100eb0:	f00a fc3e 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GNSS_CFG);//3
 8100eb4:	4a15      	ldr	r2, [pc, #84]	@ (8100f0c <NetworkInit+0x2f0>)
 8100eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8100f34 <NetworkInit+0x318>)
 8100eb8:	4614      	mov	r4, r2
 8100eba:	461d      	mov	r5, r3
 8100ebc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100ebe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100ec0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100ec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100ec8:	4810      	ldr	r0, [pc, #64]	@ (8100f0c <NetworkInit+0x2f0>)
 8100eca:	f7ff fa09 	bl	81002e0 <strlen>
 8100ece:	4603      	mov	r3, r0
 8100ed0:	b29a      	uxth	r2, r3
 8100ed2:	2364      	movs	r3, #100	@ 0x64
 8100ed4:	490d      	ldr	r1, [pc, #52]	@ (8100f0c <NetworkInit+0x2f0>)
 8100ed6:	480f      	ldr	r0, [pc, #60]	@ (8100f14 <NetworkInit+0x2f8>)
 8100ed8:	f008 fc37 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100edc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100ee0:	2100      	movs	r1, #0
 8100ee2:	480a      	ldr	r0, [pc, #40]	@ (8100f0c <NetworkInit+0x2f0>)
 8100ee4:	f00e f900 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100ee8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100eec:	2100      	movs	r1, #0
 8100eee:	480a      	ldr	r0, [pc, #40]	@ (8100f18 <NetworkInit+0x2fc>)
 8100ef0:	f00e f8fa 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100ef4:	4b07      	ldr	r3, [pc, #28]	@ (8100f14 <NetworkInit+0x2f8>)
 8100ef6:	681b      	ldr	r3, [r3, #0]
 8100ef8:	2220      	movs	r2, #32
 8100efa:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100efc:	4805      	ldr	r0, [pc, #20]	@ (8100f14 <NetworkInit+0x2f8>)
 8100efe:	f008 fcb2 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100f02:	1dbb      	adds	r3, r7, #6
 8100f04:	2264      	movs	r2, #100	@ 0x64
 8100f06:	9200      	str	r2, [sp, #0]
 8100f08:	e016      	b.n	8100f38 <NetworkInit+0x31c>
 8100f0a:	bf00      	nop
 8100f0c:	100001a8 	.word	0x100001a8
 8100f10:	0810fb44 	.word	0x0810fb44
 8100f14:	1000057c 	.word	0x1000057c
 8100f18:	100002a8 	.word	0x100002a8
 8100f1c:	0810fb4c 	.word	0x0810fb4c
 8100f20:	0810fb58 	.word	0x0810fb58
 8100f24:	0810fb64 	.word	0x0810fb64
 8100f28:	0810fb74 	.word	0x0810fb74
 8100f2c:	0810fb9c 	.word	0x0810fb9c
 8100f30:	0810fbac 	.word	0x0810fbac
 8100f34:	0810fbcc 	.word	0x0810fbcc
 8100f38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100f3c:	49b5      	ldr	r1, [pc, #724]	@ (8101214 <NetworkInit+0x5f8>)
 8100f3e:	48b6      	ldr	r0, [pc, #728]	@ (8101218 <NetworkInit+0x5fc>)
 8100f40:	f00a fbf6 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GPS_A);
 8100f44:	4ab5      	ldr	r2, [pc, #724]	@ (810121c <NetworkInit+0x600>)
 8100f46:	4bb6      	ldr	r3, [pc, #728]	@ (8101220 <NetworkInit+0x604>)
 8100f48:	4614      	mov	r4, r2
 8100f4a:	461d      	mov	r5, r3
 8100f4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100f50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8100f54:	c403      	stmia	r4!, {r0, r1}
 8100f56:	7022      	strb	r2, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100f58:	48b0      	ldr	r0, [pc, #704]	@ (810121c <NetworkInit+0x600>)
 8100f5a:	f7ff f9c1 	bl	81002e0 <strlen>
 8100f5e:	4603      	mov	r3, r0
 8100f60:	b29a      	uxth	r2, r3
 8100f62:	2364      	movs	r3, #100	@ 0x64
 8100f64:	49ad      	ldr	r1, [pc, #692]	@ (810121c <NetworkInit+0x600>)
 8100f66:	48ac      	ldr	r0, [pc, #688]	@ (8101218 <NetworkInit+0x5fc>)
 8100f68:	f008 fbef 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100f6c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100f70:	2100      	movs	r1, #0
 8100f72:	48aa      	ldr	r0, [pc, #680]	@ (810121c <NetworkInit+0x600>)
 8100f74:	f00e f8b8 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100f7c:	2100      	movs	r1, #0
 8100f7e:	48a5      	ldr	r0, [pc, #660]	@ (8101214 <NetworkInit+0x5f8>)
 8100f80:	f00e f8b2 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100f84:	4ba4      	ldr	r3, [pc, #656]	@ (8101218 <NetworkInit+0x5fc>)
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	2220      	movs	r2, #32
 8100f8a:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100f8c:	48a2      	ldr	r0, [pc, #648]	@ (8101218 <NetworkInit+0x5fc>)
 8100f8e:	f008 fc6a 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100f92:	1dbb      	adds	r3, r7, #6
 8100f94:	2264      	movs	r2, #100	@ 0x64
 8100f96:	9200      	str	r2, [sp, #0]
 8100f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100f9c:	499d      	ldr	r1, [pc, #628]	@ (8101214 <NetworkInit+0x5f8>)
 8100f9e:	489e      	ldr	r0, [pc, #632]	@ (8101218 <NetworkInit+0x5fc>)
 8100fa0:	f00a fbc6 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GPS);
 8100fa4:	4a9d      	ldr	r2, [pc, #628]	@ (810121c <NetworkInit+0x600>)
 8100fa6:	4b9f      	ldr	r3, [pc, #636]	@ (8101224 <NetworkInit+0x608>)
 8100fa8:	4614      	mov	r4, r2
 8100faa:	461d      	mov	r5, r3
 8100fac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8100fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8100fb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8100fb4:	c407      	stmia	r4!, {r0, r1, r2}
 8100fb6:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8100fb8:	4898      	ldr	r0, [pc, #608]	@ (810121c <NetworkInit+0x600>)
 8100fba:	f7ff f991 	bl	81002e0 <strlen>
 8100fbe:	4603      	mov	r3, r0
 8100fc0:	b29a      	uxth	r2, r3
 8100fc2:	2364      	movs	r3, #100	@ 0x64
 8100fc4:	4995      	ldr	r1, [pc, #596]	@ (810121c <NetworkInit+0x600>)
 8100fc6:	4894      	ldr	r0, [pc, #592]	@ (8101218 <NetworkInit+0x5fc>)
 8100fc8:	f008 fbbf 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 8100fcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100fd0:	2100      	movs	r1, #0
 8100fd2:	4892      	ldr	r0, [pc, #584]	@ (810121c <NetworkInit+0x600>)
 8100fd4:	f00e f888 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8100fd8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100fdc:	2100      	movs	r1, #0
 8100fde:	488d      	ldr	r0, [pc, #564]	@ (8101214 <NetworkInit+0x5f8>)
 8100fe0:	f00e f882 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8100fe4:	4b8c      	ldr	r3, [pc, #560]	@ (8101218 <NetworkInit+0x5fc>)
 8100fe6:	681b      	ldr	r3, [r3, #0]
 8100fe8:	2220      	movs	r2, #32
 8100fea:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 8100fec:	488a      	ldr	r0, [pc, #552]	@ (8101218 <NetworkInit+0x5fc>)
 8100fee:	f008 fc3a 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8100ff2:	1dbb      	adds	r3, r7, #6
 8100ff4:	2264      	movs	r2, #100	@ 0x64
 8100ff6:	9200      	str	r2, [sp, #0]
 8100ff8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8100ffc:	4985      	ldr	r1, [pc, #532]	@ (8101214 <NetworkInit+0x5f8>)
 8100ffe:	4886      	ldr	r0, [pc, #536]	@ (8101218 <NetworkInit+0x5fc>)
 8101000:	f00a fb96 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GLONASS);
 8101004:	4a85      	ldr	r2, [pc, #532]	@ (810121c <NetworkInit+0x600>)
 8101006:	4b88      	ldr	r3, [pc, #544]	@ (8101228 <NetworkInit+0x60c>)
 8101008:	4614      	mov	r4, r2
 810100a:	461d      	mov	r5, r3
 810100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101014:	682b      	ldr	r3, [r5, #0]
 8101016:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101018:	4880      	ldr	r0, [pc, #512]	@ (810121c <NetworkInit+0x600>)
 810101a:	f7ff f961 	bl	81002e0 <strlen>
 810101e:	4603      	mov	r3, r0
 8101020:	b29a      	uxth	r2, r3
 8101022:	2364      	movs	r3, #100	@ 0x64
 8101024:	497d      	ldr	r1, [pc, #500]	@ (810121c <NetworkInit+0x600>)
 8101026:	487c      	ldr	r0, [pc, #496]	@ (8101218 <NetworkInit+0x5fc>)
 8101028:	f008 fb8f 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 810102c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101030:	2100      	movs	r1, #0
 8101032:	487a      	ldr	r0, [pc, #488]	@ (810121c <NetworkInit+0x600>)
 8101034:	f00e f858 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8101038:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810103c:	2100      	movs	r1, #0
 810103e:	4875      	ldr	r0, [pc, #468]	@ (8101214 <NetworkInit+0x5f8>)
 8101040:	f00e f852 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8101044:	4b74      	ldr	r3, [pc, #464]	@ (8101218 <NetworkInit+0x5fc>)
 8101046:	681b      	ldr	r3, [r3, #0]
 8101048:	2220      	movs	r2, #32
 810104a:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 810104c:	4872      	ldr	r0, [pc, #456]	@ (8101218 <NetworkInit+0x5fc>)
 810104e:	f008 fc0a 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8101052:	1dbb      	adds	r3, r7, #6
 8101054:	2264      	movs	r2, #100	@ 0x64
 8101056:	9200      	str	r2, [sp, #0]
 8101058:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810105c:	496d      	ldr	r1, [pc, #436]	@ (8101214 <NetworkInit+0x5f8>)
 810105e:	486e      	ldr	r0, [pc, #440]	@ (8101218 <NetworkInit+0x5fc>)
 8101060:	f00a fb66 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GALILEO);
 8101064:	4a6d      	ldr	r2, [pc, #436]	@ (810121c <NetworkInit+0x600>)
 8101066:	4b71      	ldr	r3, [pc, #452]	@ (810122c <NetworkInit+0x610>)
 8101068:	4614      	mov	r4, r2
 810106a:	461d      	mov	r5, r3
 810106c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810106e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101074:	682b      	ldr	r3, [r5, #0]
 8101076:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101078:	4868      	ldr	r0, [pc, #416]	@ (810121c <NetworkInit+0x600>)
 810107a:	f7ff f931 	bl	81002e0 <strlen>
 810107e:	4603      	mov	r3, r0
 8101080:	b29a      	uxth	r2, r3
 8101082:	2364      	movs	r3, #100	@ 0x64
 8101084:	4965      	ldr	r1, [pc, #404]	@ (810121c <NetworkInit+0x600>)
 8101086:	4864      	ldr	r0, [pc, #400]	@ (8101218 <NetworkInit+0x5fc>)
 8101088:	f008 fb5f 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 810108c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101090:	2100      	movs	r1, #0
 8101092:	4862      	ldr	r0, [pc, #392]	@ (810121c <NetworkInit+0x600>)
 8101094:	f00e f828 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8101098:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810109c:	2100      	movs	r1, #0
 810109e:	485d      	ldr	r0, [pc, #372]	@ (8101214 <NetworkInit+0x5f8>)
 81010a0:	f00e f822 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 81010a4:	4b5c      	ldr	r3, [pc, #368]	@ (8101218 <NetworkInit+0x5fc>)
 81010a6:	681b      	ldr	r3, [r3, #0]
 81010a8:	2220      	movs	r2, #32
 81010aa:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 81010ac:	485a      	ldr	r0, [pc, #360]	@ (8101218 <NetworkInit+0x5fc>)
 81010ae:	f008 fbda 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 81010b2:	1dbb      	adds	r3, r7, #6
 81010b4:	2264      	movs	r2, #100	@ 0x64
 81010b6:	9200      	str	r2, [sp, #0]
 81010b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81010bc:	4955      	ldr	r1, [pc, #340]	@ (8101214 <NetworkInit+0x5f8>)
 81010be:	4856      	ldr	r0, [pc, #344]	@ (8101218 <NetworkInit+0x5fc>)
 81010c0:	f00a fb36 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_BID_T);
 81010c4:	4a55      	ldr	r2, [pc, #340]	@ (810121c <NetworkInit+0x600>)
 81010c6:	4b5a      	ldr	r3, [pc, #360]	@ (8101230 <NetworkInit+0x614>)
 81010c8:	4614      	mov	r4, r2
 81010ca:	461d      	mov	r5, r3
 81010cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81010ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81010d0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 81010d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81010d8:	4850      	ldr	r0, [pc, #320]	@ (810121c <NetworkInit+0x600>)
 81010da:	f7ff f901 	bl	81002e0 <strlen>
 81010de:	4603      	mov	r3, r0
 81010e0:	b29a      	uxth	r2, r3
 81010e2:	2364      	movs	r3, #100	@ 0x64
 81010e4:	494d      	ldr	r1, [pc, #308]	@ (810121c <NetworkInit+0x600>)
 81010e6:	484c      	ldr	r0, [pc, #304]	@ (8101218 <NetworkInit+0x5fc>)
 81010e8:	f008 fb2f 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 81010ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81010f0:	2100      	movs	r1, #0
 81010f2:	484a      	ldr	r0, [pc, #296]	@ (810121c <NetworkInit+0x600>)
 81010f4:	f00d fff8 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 81010f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81010fc:	2100      	movs	r1, #0
 81010fe:	4845      	ldr	r0, [pc, #276]	@ (8101214 <NetworkInit+0x5f8>)
 8101100:	f00d fff2 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8101104:	4b44      	ldr	r3, [pc, #272]	@ (8101218 <NetworkInit+0x5fc>)
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	2220      	movs	r2, #32
 810110a:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 810110c:	4842      	ldr	r0, [pc, #264]	@ (8101218 <NetworkInit+0x5fc>)
 810110e:	f008 fbaa 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8101112:	1dbb      	adds	r3, r7, #6
 8101114:	2264      	movs	r2, #100	@ 0x64
 8101116:	9200      	str	r2, [sp, #0]
 8101118:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810111c:	493d      	ldr	r1, [pc, #244]	@ (8101214 <NetworkInit+0x5f8>)
 810111e:	483e      	ldr	r0, [pc, #248]	@ (8101218 <NetworkInit+0x5fc>)
 8101120:	f00a fb06 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_BID_F);
 8101124:	4a3d      	ldr	r2, [pc, #244]	@ (810121c <NetworkInit+0x600>)
 8101126:	4b43      	ldr	r3, [pc, #268]	@ (8101234 <NetworkInit+0x618>)
 8101128:	4614      	mov	r4, r2
 810112a:	461d      	mov	r5, r3
 810112c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810112e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8101132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101134:	682b      	ldr	r3, [r5, #0]
 8101136:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101138:	4838      	ldr	r0, [pc, #224]	@ (810121c <NetworkInit+0x600>)
 810113a:	f7ff f8d1 	bl	81002e0 <strlen>
 810113e:	4603      	mov	r3, r0
 8101140:	b29a      	uxth	r2, r3
 8101142:	2364      	movs	r3, #100	@ 0x64
 8101144:	4935      	ldr	r1, [pc, #212]	@ (810121c <NetworkInit+0x600>)
 8101146:	4834      	ldr	r0, [pc, #208]	@ (8101218 <NetworkInit+0x5fc>)
 8101148:	f008 faff 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 810114c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101150:	2100      	movs	r1, #0
 8101152:	4832      	ldr	r0, [pc, #200]	@ (810121c <NetworkInit+0x600>)
 8101154:	f00d ffc8 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8101158:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810115c:	2100      	movs	r1, #0
 810115e:	482d      	ldr	r0, [pc, #180]	@ (8101214 <NetworkInit+0x5f8>)
 8101160:	f00d ffc2 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8101164:	4b2c      	ldr	r3, [pc, #176]	@ (8101218 <NetworkInit+0x5fc>)
 8101166:	681b      	ldr	r3, [r3, #0]
 8101168:	2220      	movs	r2, #32
 810116a:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 810116c:	482a      	ldr	r0, [pc, #168]	@ (8101218 <NetworkInit+0x5fc>)
 810116e:	f008 fb7a 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8101172:	1dbb      	adds	r3, r7, #6
 8101174:	2264      	movs	r2, #100	@ 0x64
 8101176:	9200      	str	r2, [sp, #0]
 8101178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810117c:	4925      	ldr	r1, [pc, #148]	@ (8101214 <NetworkInit+0x5f8>)
 810117e:	4826      	ldr	r0, [pc, #152]	@ (8101218 <NetworkInit+0x5fc>)
 8101180:	f00a fad6 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Set GPS Mode
	strcpy(txBuffer, CMD_GPS_CFG_GNSS);//2
 8101184:	4a25      	ldr	r2, [pc, #148]	@ (810121c <NetworkInit+0x600>)
 8101186:	4b2c      	ldr	r3, [pc, #176]	@ (8101238 <NetworkInit+0x61c>)
 8101188:	4614      	mov	r4, r2
 810118a:	461d      	mov	r5, r3
 810118c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 810118e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8101190:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8101194:	c407      	stmia	r4!, {r0, r1, r2}
 8101196:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101198:	4820      	ldr	r0, [pc, #128]	@ (810121c <NetworkInit+0x600>)
 810119a:	f7ff f8a1 	bl	81002e0 <strlen>
 810119e:	4603      	mov	r3, r0
 81011a0:	b29a      	uxth	r2, r3
 81011a2:	2364      	movs	r3, #100	@ 0x64
 81011a4:	491d      	ldr	r1, [pc, #116]	@ (810121c <NetworkInit+0x600>)
 81011a6:	481c      	ldr	r0, [pc, #112]	@ (8101218 <NetworkInit+0x5fc>)
 81011a8:	f008 facf 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 81011ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81011b0:	2100      	movs	r1, #0
 81011b2:	481a      	ldr	r0, [pc, #104]	@ (810121c <NetworkInit+0x600>)
 81011b4:	f00d ff98 	bl	810f0e8 <memset>

	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 81011b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81011bc:	2100      	movs	r1, #0
 81011be:	4815      	ldr	r0, [pc, #84]	@ (8101214 <NetworkInit+0x5f8>)
 81011c0:	f00d ff92 	bl	810f0e8 <memset>
	__HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 81011c4:	4b14      	ldr	r3, [pc, #80]	@ (8101218 <NetworkInit+0x5fc>)
 81011c6:	681b      	ldr	r3, [r3, #0]
 81011c8:	2220      	movs	r2, #32
 81011ca:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 81011cc:	4812      	ldr	r0, [pc, #72]	@ (8101218 <NetworkInit+0x5fc>)
 81011ce:	f008 fb4a 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 81011d2:	1dbb      	adds	r3, r7, #6
 81011d4:	2264      	movs	r2, #100	@ 0x64
 81011d6:	9200      	str	r2, [sp, #0]
 81011d8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81011dc:	490d      	ldr	r1, [pc, #52]	@ (8101214 <NetworkInit+0x5f8>)
 81011de:	480e      	ldr	r0, [pc, #56]	@ (8101218 <NetworkInit+0x5fc>)
 81011e0:	f00a faa6 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

	// Start GPS session
	strcpy(txBuffer, CMD_GPS_MODE_ON);
 81011e4:	4b0d      	ldr	r3, [pc, #52]	@ (810121c <NetworkInit+0x600>)
 81011e6:	4a15      	ldr	r2, [pc, #84]	@ (810123c <NetworkInit+0x620>)
 81011e8:	ca07      	ldmia	r2, {r0, r1, r2}
 81011ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81011ee:	480b      	ldr	r0, [pc, #44]	@ (810121c <NetworkInit+0x600>)
 81011f0:	f7ff f876 	bl	81002e0 <strlen>
 81011f4:	4603      	mov	r3, r0
 81011f6:	b29a      	uxth	r2, r3
 81011f8:	2364      	movs	r3, #100	@ 0x64
 81011fa:	4908      	ldr	r1, [pc, #32]	@ (810121c <NetworkInit+0x600>)
 81011fc:	4806      	ldr	r0, [pc, #24]	@ (8101218 <NetworkInit+0x5fc>)
 81011fe:	f008 faa4 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_, sizeof(txBuffer));
 8101202:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101206:	2100      	movs	r1, #0
 8101208:	4804      	ldr	r0, [pc, #16]	@ (810121c <NetworkInit+0x600>)
 810120a:	f00d ff6d 	bl	810f0e8 <memset>

    // Start TCP/IP service
    strcpy(txBuffer, CMD_NETWORK_ACTIVATE);
 810120e:	4b03      	ldr	r3, [pc, #12]	@ (810121c <NetworkInit+0x600>)
 8101210:	e016      	b.n	8101240 <NetworkInit+0x624>
 8101212:	bf00      	nop
 8101214:	100002a8 	.word	0x100002a8
 8101218:	1000057c 	.word	0x1000057c
 810121c:	100001a8 	.word	0x100001a8
 8101220:	0810fbe8 	.word	0x0810fbe8
 8101224:	0810fc04 	.word	0x0810fc04
 8101228:	0810fc24 	.word	0x0810fc24
 810122c:	0810fc48 	.word	0x0810fc48
 8101230:	0810fc6c 	.word	0x0810fc6c
 8101234:	0810fc8c 	.word	0x0810fc8c
 8101238:	0810fcb0 	.word	0x0810fcb0
 810123c:	0810fcd0 	.word	0x0810fcd0
 8101240:	4a19      	ldr	r2, [pc, #100]	@ (81012a8 <NetworkInit+0x68c>)
 8101242:	e892 0003 	ldmia.w	r2, {r0, r1}
 8101246:	e883 0003 	stmia.w	r3, {r0, r1}
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 810124a:	4818      	ldr	r0, [pc, #96]	@ (81012ac <NetworkInit+0x690>)
 810124c:	f7ff f848 	bl	81002e0 <strlen>
 8101250:	4603      	mov	r3, r0
 8101252:	b29a      	uxth	r2, r3
 8101254:	2364      	movs	r3, #100	@ 0x64
 8101256:	4915      	ldr	r1, [pc, #84]	@ (81012ac <NetworkInit+0x690>)
 8101258:	4815      	ldr	r0, [pc, #84]	@ (81012b0 <NetworkInit+0x694>)
 810125a:	f008 fa76 	bl	810974a <HAL_UART_Transmit>
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 810125e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101262:	2100      	movs	r1, #0
 8101264:	4811      	ldr	r0, [pc, #68]	@ (81012ac <NetworkInit+0x690>)
 8101266:	f00d ff3f 	bl	810f0e8 <memset>

    memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 810126a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810126e:	2100      	movs	r1, #0
 8101270:	4810      	ldr	r0, [pc, #64]	@ (81012b4 <NetworkInit+0x698>)
 8101272:	f00d ff39 	bl	810f0e8 <memset>
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8101276:	4b0e      	ldr	r3, [pc, #56]	@ (81012b0 <NetworkInit+0x694>)
 8101278:	681b      	ldr	r3, [r3, #0]
 810127a:	2220      	movs	r2, #32
 810127c:	621a      	str	r2, [r3, #32]
	HAL_UART_Abort(&huart1);
 810127e:	480c      	ldr	r0, [pc, #48]	@ (81012b0 <NetworkInit+0x694>)
 8101280:	f008 faf1 	bl	8109866 <HAL_UART_Abort>
	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8101284:	1dbb      	adds	r3, r7, #6
 8101286:	2264      	movs	r2, #100	@ 0x64
 8101288:	9200      	str	r2, [sp, #0]
 810128a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810128e:	4909      	ldr	r1, [pc, #36]	@ (81012b4 <NetworkInit+0x698>)
 8101290:	4807      	ldr	r0, [pc, #28]	@ (81012b0 <NetworkInit+0x694>)
 8101292:	f00a fa4d 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	//osDelay(100);

    // Check response
    if (strstr(rxBuffer, RESPONSE_NETOPEN_OK) == NULL) {
 8101296:	4908      	ldr	r1, [pc, #32]	@ (81012b8 <NetworkInit+0x69c>)
 8101298:	4806      	ldr	r0, [pc, #24]	@ (81012b4 <NetworkInit+0x698>)
 810129a:	f00d ff4d 	bl	810f138 <strstr>
        //Error_Handler();
    }

    return;
 810129e:	bf00      	nop
}
 81012a0:	3708      	adds	r7, #8
 81012a2:	46bd      	mov	sp, r7
 81012a4:	bdb0      	pop	{r4, r5, r7, pc}
 81012a6:	bf00      	nop
 81012a8:	0810fcdc 	.word	0x0810fcdc
 81012ac:	100001a8 	.word	0x100001a8
 81012b0:	1000057c 	.word	0x1000057c
 81012b4:	100002a8 	.word	0x100002a8
 81012b8:	0810fce4 	.word	0x0810fce4

081012bc <OpenSocket>:

void OpenSocket() {
 81012bc:	b580      	push	{r7, lr}
 81012be:	b084      	sub	sp, #16
 81012c0:	af02      	add	r7, sp, #8
	uint16_t rxLength = 0;
 81012c2:	2300      	movs	r3, #0
 81012c4:	80fb      	strh	r3, [r7, #6]

    sprintf(txBuffer, CMD_OPEN_SOCKET_FORMAT, SOCKET_INDEX, SERVER_IP, SERVER_PORT);
 81012c6:	f640 33ea 	movw	r3, #3050	@ 0xbea
 81012ca:	9300      	str	r3, [sp, #0]
 81012cc:	4b1f      	ldr	r3, [pc, #124]	@ (810134c <OpenSocket+0x90>)
 81012ce:	2200      	movs	r2, #0
 81012d0:	491f      	ldr	r1, [pc, #124]	@ (8101350 <OpenSocket+0x94>)
 81012d2:	4820      	ldr	r0, [pc, #128]	@ (8101354 <OpenSocket+0x98>)
 81012d4:	f00d fece 	bl	810f074 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81012d8:	481e      	ldr	r0, [pc, #120]	@ (8101354 <OpenSocket+0x98>)
 81012da:	f7ff f801 	bl	81002e0 <strlen>
 81012de:	4603      	mov	r3, r0
 81012e0:	b29a      	uxth	r2, r3
 81012e2:	2364      	movs	r3, #100	@ 0x64
 81012e4:	491b      	ldr	r1, [pc, #108]	@ (8101354 <OpenSocket+0x98>)
 81012e6:	481c      	ldr	r0, [pc, #112]	@ (8101358 <OpenSocket+0x9c>)
 81012e8:	f008 fa2f 	bl	810974a <HAL_UART_Transmit>
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 81012ec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81012f0:	2100      	movs	r1, #0
 81012f2:	4818      	ldr	r0, [pc, #96]	@ (8101354 <OpenSocket+0x98>)
 81012f4:	f00d fef8 	bl	810f0e8 <memset>

    memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 81012f8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81012fc:	2100      	movs	r1, #0
 81012fe:	4817      	ldr	r0, [pc, #92]	@ (810135c <OpenSocket+0xa0>)
 8101300:	f00d fef2 	bl	810f0e8 <memset>
    __HAL_UART_CLEAR_FLAG(&huart1, UART_FLAG_RXNE);
 8101304:	4b14      	ldr	r3, [pc, #80]	@ (8101358 <OpenSocket+0x9c>)
 8101306:	681b      	ldr	r3, [r3, #0]
 8101308:	2220      	movs	r2, #32
 810130a:	621a      	str	r2, [r3, #32]
   	HAL_UART_Abort(&huart1);
 810130c:	4812      	ldr	r0, [pc, #72]	@ (8101358 <OpenSocket+0x9c>)
 810130e:	f008 faaa 	bl	8109866 <HAL_UART_Abort>
   	HAL_UARTEx_ReceiveToIdle(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), &rxLength, UART_TIMEOUT);
 8101312:	1dbb      	adds	r3, r7, #6
 8101314:	2264      	movs	r2, #100	@ 0x64
 8101316:	9200      	str	r2, [sp, #0]
 8101318:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810131c:	490f      	ldr	r1, [pc, #60]	@ (810135c <OpenSocket+0xa0>)
 810131e:	480e      	ldr	r0, [pc, #56]	@ (8101358 <OpenSocket+0x9c>)
 8101320:	f00a fa06 	bl	810b730 <HAL_UARTEx_ReceiveToIdle>
   	//HAL_UART_Receive(&huart1, (uint8_t *)rxBuffer, sizeof(rxBuffer), UART_TIMEOUT);
   	//HAL_UART_Receive_DMA(&huart4, (uint8_t *)rxBuffer, 256);
	memset(rxBuffer, NULL_ , sizeof(rxBuffer));
 8101324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101328:	2100      	movs	r1, #0
 810132a:	480c      	ldr	r0, [pc, #48]	@ (810135c <OpenSocket+0xa0>)
 810132c:	f00d fedc 	bl	810f0e8 <memset>


    // Check response
    if (strstr(rxBuffer, RESPONSE_SOCKET_OPEN_OK) == NULL) {
 8101330:	490b      	ldr	r1, [pc, #44]	@ (8101360 <OpenSocket+0xa4>)
 8101332:	480a      	ldr	r0, [pc, #40]	@ (810135c <OpenSocket+0xa0>)
 8101334:	f00d ff00 	bl	810f138 <strstr>
        //Error_Handler();
    }
    HAL_UARTEx_ReceiveToIdle_DMA(&huart1, (uint8_t *)rxBuffer, RX_BUFFER_SIZE);   /////////Need to change as this will go on
 8101338:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810133c:	4907      	ldr	r1, [pc, #28]	@ (810135c <OpenSocket+0xa0>)
 810133e:	4806      	ldr	r0, [pc, #24]	@ (8101358 <OpenSocket+0x9c>)
 8101340:	f00a faf8 	bl	810b934 <HAL_UARTEx_ReceiveToIdle_DMA>
    																		// to all the other files also
    return;
 8101344:	bf00      	nop
}
 8101346:	3708      	adds	r7, #8
 8101348:	46bd      	mov	sp, r7
 810134a:	bd80      	pop	{r7, pc}
 810134c:	0810fcf0 	.word	0x0810fcf0
 8101350:	0810fd00 	.word	0x0810fd00
 8101354:	100001a8 	.word	0x100001a8
 8101358:	1000057c 	.word	0x1000057c
 810135c:	100002a8 	.word	0x100002a8
 8101360:	0810fd24 	.word	0x0810fd24

08101364 <device_config>:

void device_config(int type)
{
 8101364:	b480      	push	{r7}
 8101366:	b083      	sub	sp, #12
 8101368:	af00      	add	r7, sp, #0
 810136a:	6078      	str	r0, [r7, #4]
	if(type == 1)
 810136c:	687b      	ldr	r3, [r7, #4]
 810136e:	2b01      	cmp	r3, #1
 8101370:	d138      	bne.n	81013e4 <device_config+0x80>
	{
	  serverAttributes.currentData[0] = 0xDD;
 8101372:	4b5b      	ldr	r3, [pc, #364]	@ (81014e0 <device_config+0x17c>)
 8101374:	22dd      	movs	r2, #221	@ 0xdd
 8101376:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  serverAttributes.currentData[1] = 0x4D;
 810137a:	4b59      	ldr	r3, [pc, #356]	@ (81014e0 <device_config+0x17c>)
 810137c:	224d      	movs	r2, #77	@ 0x4d
 810137e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  serverAttributes.voltageData[0] = 0x63;
 8101382:	4b57      	ldr	r3, [pc, #348]	@ (81014e0 <device_config+0x17c>)
 8101384:	2263      	movs	r2, #99	@ 0x63
 8101386:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  serverAttributes.voltageData[1] = 0x63;
 810138a:	4b55      	ldr	r3, [pc, #340]	@ (81014e0 <device_config+0x17c>)
 810138c:	2263      	movs	r2, #99	@ 0x63
 810138e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	  serverAttributes.rpm[0] = 0x01;
 8101392:	4b53      	ldr	r3, [pc, #332]	@ (81014e0 <device_config+0x17c>)
 8101394:	2201      	movs	r2, #1
 8101396:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	  serverAttributes.rpm[1] = 0xF3;
 810139a:	4b51      	ldr	r3, [pc, #324]	@ (81014e0 <device_config+0x17c>)
 810139c:	22f3      	movs	r2, #243	@ 0xf3
 810139e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	  serverAttributes.motor_temp[0] = 0x20;
 81013a2:	4b4f      	ldr	r3, [pc, #316]	@ (81014e0 <device_config+0x17c>)
 81013a4:	2220      	movs	r2, #32
 81013a6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  serverAttributes.device_temp[0] = 0x20;
 81013aa:	4b4d      	ldr	r3, [pc, #308]	@ (81014e0 <device_config+0x17c>)
 81013ac:	2220      	movs	r2, #32
 81013ae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	  serverAttributes.networkStrength[0] = 0x10;
 81013b2:	4b4b      	ldr	r3, [pc, #300]	@ (81014e0 <device_config+0x17c>)
 81013b4:	2210      	movs	r2, #16
 81013b6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  serverAttributes.soc[0] = 0x63;
 81013ba:	4b49      	ldr	r3, [pc, #292]	@ (81014e0 <device_config+0x17c>)
 81013bc:	2263      	movs	r2, #99	@ 0x63
 81013be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	  serverAttributes.soc[1] = 0x63;
 81013c2:	4b47      	ldr	r3, [pc, #284]	@ (81014e0 <device_config+0x17c>)
 81013c4:	2263      	movs	r2, #99	@ 0x63
 81013c6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	  serverAttributes.torque[0] = 0x04;
 81013ca:	4b45      	ldr	r3, [pc, #276]	@ (81014e0 <device_config+0x17c>)
 81013cc:	2204      	movs	r2, #4
 81013ce:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	  serverAttributes.throttle[0] = 0x01;
 81013d2:	4b43      	ldr	r3, [pc, #268]	@ (81014e0 <device_config+0x17c>)
 81013d4:	2201      	movs	r2, #1
 81013d6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	  serverAttributes.throttle[1] = 0x02;
 81013da:	4b41      	ldr	r3, [pc, #260]	@ (81014e0 <device_config+0x17c>)
 81013dc:	2202      	movs	r2, #2
 81013de:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	  serverAttributes.soc[1] = 0x63;
	  serverAttributes.torque[0] = 0x09;
	  serverAttributes.throttle[0] = 0x01;
	  serverAttributes.throttle[1] = 0x02;
	}
	return;
 81013e2:	e077      	b.n	81014d4 <device_config+0x170>
	else if(type == 2)
 81013e4:	687b      	ldr	r3, [r7, #4]
 81013e6:	2b02      	cmp	r3, #2
 81013e8:	d138      	bne.n	810145c <device_config+0xf8>
	  serverAttributes.currentData[0] = 0x01;
 81013ea:	4b3d      	ldr	r3, [pc, #244]	@ (81014e0 <device_config+0x17c>)
 81013ec:	2201      	movs	r2, #1
 81013ee:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  serverAttributes.currentData[1] = 0x16;
 81013f2:	4b3b      	ldr	r3, [pc, #236]	@ (81014e0 <device_config+0x17c>)
 81013f4:	2216      	movs	r2, #22
 81013f6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  serverAttributes.voltageData[0] = 0x63;
 81013fa:	4b39      	ldr	r3, [pc, #228]	@ (81014e0 <device_config+0x17c>)
 81013fc:	2263      	movs	r2, #99	@ 0x63
 81013fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  serverAttributes.voltageData[1] = 0x63;
 8101402:	4b37      	ldr	r3, [pc, #220]	@ (81014e0 <device_config+0x17c>)
 8101404:	2263      	movs	r2, #99	@ 0x63
 8101406:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	  serverAttributes.rpm[0] = 0x05;
 810140a:	4b35      	ldr	r3, [pc, #212]	@ (81014e0 <device_config+0x17c>)
 810140c:	2205      	movs	r2, #5
 810140e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	  serverAttributes.rpm[1] = 0xDB;
 8101412:	4b33      	ldr	r3, [pc, #204]	@ (81014e0 <device_config+0x17c>)
 8101414:	22db      	movs	r2, #219	@ 0xdb
 8101416:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	  serverAttributes.motor_temp[0] = 0x21;
 810141a:	4b31      	ldr	r3, [pc, #196]	@ (81014e0 <device_config+0x17c>)
 810141c:	2221      	movs	r2, #33	@ 0x21
 810141e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  serverAttributes.device_temp[0] = 0x21;
 8101422:	4b2f      	ldr	r3, [pc, #188]	@ (81014e0 <device_config+0x17c>)
 8101424:	2221      	movs	r2, #33	@ 0x21
 8101426:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	  serverAttributes.networkStrength[0] = 0x16;
 810142a:	4b2d      	ldr	r3, [pc, #180]	@ (81014e0 <device_config+0x17c>)
 810142c:	2216      	movs	r2, #22
 810142e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  serverAttributes.soc[0] = 0x63;
 8101432:	4b2b      	ldr	r3, [pc, #172]	@ (81014e0 <device_config+0x17c>)
 8101434:	2263      	movs	r2, #99	@ 0x63
 8101436:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	  serverAttributes.soc[1] = 0x63;
 810143a:	4b29      	ldr	r3, [pc, #164]	@ (81014e0 <device_config+0x17c>)
 810143c:	2263      	movs	r2, #99	@ 0x63
 810143e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	  serverAttributes.torque[0] = 0x0A;
 8101442:	4b27      	ldr	r3, [pc, #156]	@ (81014e0 <device_config+0x17c>)
 8101444:	220a      	movs	r2, #10
 8101446:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	  serverAttributes.throttle[0] = 0x01;
 810144a:	4b25      	ldr	r3, [pc, #148]	@ (81014e0 <device_config+0x17c>)
 810144c:	2201      	movs	r2, #1
 810144e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	  serverAttributes.throttle[1] = 0x02;
 8101452:	4b23      	ldr	r3, [pc, #140]	@ (81014e0 <device_config+0x17c>)
 8101454:	2202      	movs	r2, #2
 8101456:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	return;
 810145a:	e03b      	b.n	81014d4 <device_config+0x170>
	else if(type == 3)
 810145c:	687b      	ldr	r3, [r7, #4]
 810145e:	2b03      	cmp	r3, #3
 8101460:	d138      	bne.n	81014d4 <device_config+0x170>
	  serverAttributes.currentData[0] = 0x01;
 8101462:	4b1f      	ldr	r3, [pc, #124]	@ (81014e0 <device_config+0x17c>)
 8101464:	2201      	movs	r2, #1
 8101466:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	  serverAttributes.currentData[1] = 0x55;
 810146a:	4b1d      	ldr	r3, [pc, #116]	@ (81014e0 <device_config+0x17c>)
 810146c:	2255      	movs	r2, #85	@ 0x55
 810146e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	  serverAttributes.voltageData[0] = 0x63;
 8101472:	4b1b      	ldr	r3, [pc, #108]	@ (81014e0 <device_config+0x17c>)
 8101474:	2263      	movs	r2, #99	@ 0x63
 8101476:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	  serverAttributes.voltageData[1] = 0x63;
 810147a:	4b19      	ldr	r3, [pc, #100]	@ (81014e0 <device_config+0x17c>)
 810147c:	2263      	movs	r2, #99	@ 0x63
 810147e:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	  serverAttributes.rpm[0] = 0x09;
 8101482:	4b17      	ldr	r3, [pc, #92]	@ (81014e0 <device_config+0x17c>)
 8101484:	2209      	movs	r2, #9
 8101486:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	  serverAttributes.rpm[1] = 0xC3;
 810148a:	4b15      	ldr	r3, [pc, #84]	@ (81014e0 <device_config+0x17c>)
 810148c:	22c3      	movs	r2, #195	@ 0xc3
 810148e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	  serverAttributes.motor_temp[0] = 0x21;
 8101492:	4b13      	ldr	r3, [pc, #76]	@ (81014e0 <device_config+0x17c>)
 8101494:	2221      	movs	r2, #33	@ 0x21
 8101496:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	  serverAttributes.device_temp[0] = 0x21;
 810149a:	4b11      	ldr	r3, [pc, #68]	@ (81014e0 <device_config+0x17c>)
 810149c:	2221      	movs	r2, #33	@ 0x21
 810149e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	  serverAttributes.networkStrength[0] = 0x16;
 81014a2:	4b0f      	ldr	r3, [pc, #60]	@ (81014e0 <device_config+0x17c>)
 81014a4:	2216      	movs	r2, #22
 81014a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	  serverAttributes.soc[0] = 0x63;
 81014aa:	4b0d      	ldr	r3, [pc, #52]	@ (81014e0 <device_config+0x17c>)
 81014ac:	2263      	movs	r2, #99	@ 0x63
 81014ae:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	  serverAttributes.soc[1] = 0x63;
 81014b2:	4b0b      	ldr	r3, [pc, #44]	@ (81014e0 <device_config+0x17c>)
 81014b4:	2263      	movs	r2, #99	@ 0x63
 81014b6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	  serverAttributes.torque[0] = 0x09;
 81014ba:	4b09      	ldr	r3, [pc, #36]	@ (81014e0 <device_config+0x17c>)
 81014bc:	2209      	movs	r2, #9
 81014be:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	  serverAttributes.throttle[0] = 0x01;
 81014c2:	4b07      	ldr	r3, [pc, #28]	@ (81014e0 <device_config+0x17c>)
 81014c4:	2201      	movs	r2, #1
 81014c6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	  serverAttributes.throttle[1] = 0x02;
 81014ca:	4b05      	ldr	r3, [pc, #20]	@ (81014e0 <device_config+0x17c>)
 81014cc:	2202      	movs	r2, #2
 81014ce:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	return;
 81014d2:	bf00      	nop
 81014d4:	bf00      	nop
}
 81014d6:	370c      	adds	r7, #12
 81014d8:	46bd      	mov	sp, r7
 81014da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014de:	4770      	bx	lr
 81014e0:	100004b0 	.word	0x100004b0

081014e4 <SocketSendData>:

void SocketSendData(void) {
 81014e4:	b5b0      	push	{r4, r5, r7, lr}
 81014e6:	b08a      	sub	sp, #40	@ 0x28
 81014e8:	af00      	add	r7, sp, #0
	uint8_t data[21];
	uint8_t data_len = 0;
 81014ea:	2300      	movs	r3, #0
 81014ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	TickType_t xLastWakeTime;

	memset(data, NULL_, sizeof(data));
 81014f0:	1d3b      	adds	r3, r7, #4
 81014f2:	2215      	movs	r2, #21
 81014f4:	2100      	movs	r1, #0
 81014f6:	4618      	mov	r0, r3
 81014f8:	f00d fdf6 	bl	810f0e8 <memset>

	data_len = encodeServerData(propertyIndex, data);
 81014fc:	4b3a      	ldr	r3, [pc, #232]	@ (81015e8 <SocketSendData+0x104>)
 81014fe:	781b      	ldrb	r3, [r3, #0]
 8101500:	1d3a      	adds	r2, r7, #4
 8101502:	4611      	mov	r1, r2
 8101504:	4618      	mov	r0, r3
 8101506:	f000 f939 	bl	810177c <encodeServerData>
 810150a:	4603      	mov	r3, r0
 810150c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	//osMutexAcquire(uart_lockHandle, osWaitForever);
	if (osMutexAcquire(uart_lockHandle, 1000) != osOK) {  // Add timeout
 8101510:	4b36      	ldr	r3, [pc, #216]	@ (81015ec <SocketSendData+0x108>)
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8101518:	4618      	mov	r0, r3
 810151a:	f00a fcb0 	bl	810be7e <osMutexAcquire>
 810151e:	4603      	mov	r3, r0
 8101520:	2b00      	cmp	r3, #0
 8101522:	d15c      	bne.n	81015de <SocketSendData+0xfa>
	    //printf("Mutex acquisition failed! Possible deadlock.\n");
	    return;
	}

	sprintf(txBuffer, CMD_SEND_DATA_FORMAT, SOCKET_INDEX, data_len);
 8101524:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8101528:	2200      	movs	r2, #0
 810152a:	4931      	ldr	r1, [pc, #196]	@ (81015f0 <SocketSendData+0x10c>)
 810152c:	4831      	ldr	r0, [pc, #196]	@ (81015f4 <SocketSendData+0x110>)
 810152e:	f00d fda1 	bl	810f074 <siprintf>
		//TickType_t xLastWakeTime = osKernelGetTickCount();
		osDelayUntil(500);
	}
	*/
	 // Wait for `>` prompt
	uint32_t timeout = osKernelGetTickCount() + 1000;  // 5s timeout
 8101532:	f00a fb2f 	bl	810bb94 <osKernelGetTickCount>
 8101536:	4603      	mov	r3, r0
 8101538:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 810153c:	623b      	str	r3, [r7, #32]
	while (!strstr((char *)checkBuffer, SERVER_ACK)) {
 810153e:	e01e      	b.n	810157e <SocketSendData+0x9a>
		HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101540:	482c      	ldr	r0, [pc, #176]	@ (81015f4 <SocketSendData+0x110>)
 8101542:	f7fe fecd 	bl	81002e0 <strlen>
 8101546:	4603      	mov	r3, r0
 8101548:	b29a      	uxth	r2, r3
 810154a:	2364      	movs	r3, #100	@ 0x64
 810154c:	4929      	ldr	r1, [pc, #164]	@ (81015f4 <SocketSendData+0x110>)
 810154e:	482a      	ldr	r0, [pc, #168]	@ (81015f8 <SocketSendData+0x114>)
 8101550:	f008 f8fb 	bl	810974a <HAL_UART_Transmit>

		if (osKernelGetTickCount() > timeout) {
 8101554:	f00a fb1e 	bl	810bb94 <osKernelGetTickCount>
 8101558:	4602      	mov	r2, r0
 810155a:	6a3b      	ldr	r3, [r7, #32]
 810155c:	4293      	cmp	r3, r2
 810155e:	d205      	bcs.n	810156c <SocketSendData+0x88>
			osMutexRelease(uart_lockHandle);
 8101560:	4b22      	ldr	r3, [pc, #136]	@ (81015ec <SocketSendData+0x108>)
 8101562:	681b      	ldr	r3, [r3, #0]
 8101564:	4618      	mov	r0, r3
 8101566:	f00a fcd5 	bl	810bf14 <osMutexRelease>
			return;  // Exit if server never responds
 810156a:	e039      	b.n	81015e0 <SocketSendData+0xfc>
		}

		xLastWakeTime = osKernelGetTickCount();
 810156c:	f00a fb12 	bl	810bb94 <osKernelGetTickCount>
 8101570:	61f8      	str	r0, [r7, #28]
		osDelayUntil(xLastWakeTime + 500);  // Fixed osDelayUntil usage
 8101572:	69fb      	ldr	r3, [r7, #28]
 8101574:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8101578:	4618      	mov	r0, r3
 810157a:	f00a fbcd 	bl	810bd18 <osDelayUntil>
	while (!strstr((char *)checkBuffer, SERVER_ACK)) {
 810157e:	213e      	movs	r1, #62	@ 0x3e
 8101580:	481e      	ldr	r0, [pc, #120]	@ (81015fc <SocketSendData+0x118>)
 8101582:	f00d fdb9 	bl	810f0f8 <strchr>
 8101586:	4603      	mov	r3, r0
 8101588:	2b00      	cmp	r3, #0
 810158a:	d0d9      	beq.n	8101540 <SocketSendData+0x5c>
	}

	memset(txBuffer, NULL_ , sizeof(txBuffer));
 810158c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101590:	2100      	movs	r1, #0
 8101592:	4818      	ldr	r0, [pc, #96]	@ (81015f4 <SocketSendData+0x110>)
 8101594:	f00d fda8 	bl	810f0e8 <memset>

	// Send data
	//memset(txBuffer, (uint8_t *)data, sizeof(data));
	memcpy(txBuffer, (uint8_t *)data, sizeof(data));
 8101598:	4b16      	ldr	r3, [pc, #88]	@ (81015f4 <SocketSendData+0x110>)
 810159a:	461c      	mov	r4, r3
 810159c:	1d3d      	adds	r5, r7, #4
 810159e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 81015a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 81015a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 81015a6:	6020      	str	r0, [r4, #0]
 81015a8:	3404      	adds	r4, #4
 81015aa:	7021      	strb	r1, [r4, #0]

	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 81015ac:	4811      	ldr	r0, [pc, #68]	@ (81015f4 <SocketSendData+0x110>)
 81015ae:	f7fe fe97 	bl	81002e0 <strlen>
 81015b2:	4603      	mov	r3, r0
 81015b4:	b29a      	uxth	r2, r3
 81015b6:	2364      	movs	r3, #100	@ 0x64
 81015b8:	490e      	ldr	r1, [pc, #56]	@ (81015f4 <SocketSendData+0x110>)
 81015ba:	480f      	ldr	r0, [pc, #60]	@ (81015f8 <SocketSendData+0x114>)
 81015bc:	f008 f8c5 	bl	810974a <HAL_UART_Transmit>
	memset(txBuffer, NULL_ , sizeof(txBuffer));
 81015c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81015c4:	2100      	movs	r1, #0
 81015c6:	480b      	ldr	r0, [pc, #44]	@ (81015f4 <SocketSendData+0x110>)
 81015c8:	f00d fd8e 	bl	810f0e8 <memset>

	osMutexRelease(uart_lockHandle);
 81015cc:	4b07      	ldr	r3, [pc, #28]	@ (81015ec <SocketSendData+0x108>)
 81015ce:	681b      	ldr	r3, [r3, #0]
 81015d0:	4618      	mov	r0, r3
 81015d2:	f00a fc9f 	bl	810bf14 <osMutexRelease>

	osDelay(10);
 81015d6:	200a      	movs	r0, #10
 81015d8:	f00a fb83 	bl	810bce2 <osDelay>
	//TickType_t xLastWakeTime = osKernelGetTickCount();
	//osDelayUntil(10);

	return;
 81015dc:	e000      	b.n	81015e0 <SocketSendData+0xfc>
	    return;
 81015de:	bf00      	nop
}
 81015e0:	3728      	adds	r7, #40	@ 0x28
 81015e2:	46bd      	mov	sp, r7
 81015e4:	bdb0      	pop	{r4, r5, r7, pc}
 81015e6:	bf00      	nop
 81015e8:	10000120 	.word	0x10000120
 81015ec:	10000698 	.word	0x10000698
 81015f0:	0810fd34 	.word	0x0810fd34
 81015f4:	100001a8 	.word	0x100001a8
 81015f8:	1000057c 	.word	0x1000057c
 81015fc:	100003a8 	.word	0x100003a8

08101600 <SocketReceiveData>:

void SocketReceiveData(void) {
 8101600:	b580      	push	{r7, lr}
 8101602:	b082      	sub	sp, #8
 8101604:	af00      	add	r7, sp, #0
	int length = sizeof(rxBuffer);
 8101606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810160a:	607b      	str	r3, [r7, #4]
	uint8_t ctr = 0;
 810160c:	2300      	movs	r3, #0
 810160e:	70fb      	strb	r3, [r7, #3]

	//osMutexAcquire(uart_lockHandle, osWaitForever);
	if (osMutexAcquire(uart_lockHandle, 1000) != osOK) {  // Add timeout
 8101610:	4b16      	ldr	r3, [pc, #88]	@ (810166c <SocketReceiveData+0x6c>)
 8101612:	681b      	ldr	r3, [r3, #0]
 8101614:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8101618:	4618      	mov	r0, r3
 810161a:	f00a fc30 	bl	810be7e <osMutexAcquire>
 810161e:	4603      	mov	r3, r0
 8101620:	2b00      	cmp	r3, #0
 8101622:	d11e      	bne.n	8101662 <SocketReceiveData+0x62>
		//printf("Mutex acquisition failed! Possible deadlock.\n");
		return;
	}

    sprintf(txBuffer, CMD_RECEIVE_DATA_FORMAT, SOCKET_INDEX, length);
 8101624:	687b      	ldr	r3, [r7, #4]
 8101626:	2200      	movs	r2, #0
 8101628:	4911      	ldr	r1, [pc, #68]	@ (8101670 <SocketReceiveData+0x70>)
 810162a:	4812      	ldr	r0, [pc, #72]	@ (8101674 <SocketReceiveData+0x74>)
 810162c:	f00d fd22 	bl	810f074 <siprintf>
    //while(++ctr < 10) {
    	HAL_UART_Transmit(&huart1, (uint8_t *)txBuffer, strlen(txBuffer), UART_TIMEOUT);
 8101630:	4810      	ldr	r0, [pc, #64]	@ (8101674 <SocketReceiveData+0x74>)
 8101632:	f7fe fe55 	bl	81002e0 <strlen>
 8101636:	4603      	mov	r3, r0
 8101638:	b29a      	uxth	r2, r3
 810163a:	2364      	movs	r3, #100	@ 0x64
 810163c:	490d      	ldr	r1, [pc, #52]	@ (8101674 <SocketReceiveData+0x74>)
 810163e:	480e      	ldr	r0, [pc, #56]	@ (8101678 <SocketReceiveData+0x78>)
 8101640:	f008 f883 	bl	810974a <HAL_UART_Transmit>
    	//osDelay(50);
    //}
    memset(txBuffer, NULL_ , sizeof(txBuffer));
 8101644:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101648:	2100      	movs	r1, #0
 810164a:	480a      	ldr	r0, [pc, #40]	@ (8101674 <SocketReceiveData+0x74>)
 810164c:	f00d fd4c 	bl	810f0e8 <memset>

    osMutexRelease(uart_lockHandle);
 8101650:	4b06      	ldr	r3, [pc, #24]	@ (810166c <SocketReceiveData+0x6c>)
 8101652:	681b      	ldr	r3, [r3, #0]
 8101654:	4618      	mov	r0, r3
 8101656:	f00a fc5d 	bl	810bf14 <osMutexRelease>

    osDelay(1);
 810165a:	2001      	movs	r0, #1
 810165c:	f00a fb41 	bl	810bce2 <osDelay>
 8101660:	e000      	b.n	8101664 <SocketReceiveData+0x64>
		return;
 8101662:	bf00      	nop

    //return;

}
 8101664:	3708      	adds	r7, #8
 8101666:	46bd      	mov	sp, r7
 8101668:	bd80      	pop	{r7, pc}
 810166a:	bf00      	nop
 810166c:	10000698 	.word	0x10000698
 8101670:	0810fd48 	.word	0x0810fd48
 8101674:	100001a8 	.word	0x100001a8
 8101678:	1000057c 	.word	0x1000057c

0810167c <HAL_UARTEx_RxEventCallback>:

serverProperties serverAttributes;

extern UART_HandleTypeDef huart1;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 810167c:	b580      	push	{r7, lr}
 810167e:	b082      	sub	sp, #8
 8101680:	af00      	add	r7, sp, #0
 8101682:	6078      	str	r0, [r7, #4]
 8101684:	460b      	mov	r3, r1
 8101686:	807b      	strh	r3, [r7, #2]
    //if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)) {
      //  __HAL_UART_CLEAR_IDLEFLAG(&huart1);  // Clear the idle flag

	// Process received data
	writeIndex = Size;//(RX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));// % RX_BUFFER_SIZE;
 8101688:	4a06      	ldr	r2, [pc, #24]	@ (81016a4 <HAL_UARTEx_RxEventCallback+0x28>)
 810168a:	887b      	ldrh	r3, [r7, #2]
 810168c:	8013      	strh	r3, [r2, #0]
	HandleReceivedData(writeIndex);
 810168e:	4b05      	ldr	r3, [pc, #20]	@ (81016a4 <HAL_UARTEx_RxEventCallback+0x28>)
 8101690:	881b      	ldrh	r3, [r3, #0]
 8101692:	b2db      	uxtb	r3, r3
 8101694:	4618      	mov	r0, r3
 8101696:	f000 f807 	bl	81016a8 <HandleReceivedData>
}
 810169a:	bf00      	nop
 810169c:	3708      	adds	r7, #8
 810169e:	46bd      	mov	sp, r7
 81016a0:	bd80      	pop	{r7, pc}
 81016a2:	bf00      	nop
 81016a4:	100004aa 	.word	0x100004aa

081016a8 <HandleReceivedData>:

void HandleReceivedData(uint8_t writeIndex) {
 81016a8:	b580      	push	{r7, lr}
 81016aa:	b086      	sub	sp, #24
 81016ac:	af00      	add	r7, sp, #0
 81016ae:	4603      	mov	r3, r0
 81016b0:	71fb      	strb	r3, [r7, #7]

	uint16_t newDataCount = (writeIndex >= readIndex)
 81016b2:	79fb      	ldrb	r3, [r7, #7]
 81016b4:	b29a      	uxth	r2, r3
 81016b6:	4b2e      	ldr	r3, [pc, #184]	@ (8101770 <HandleReceivedData+0xc8>)
 81016b8:	881b      	ldrh	r3, [r3, #0]
 81016ba:	429a      	cmp	r2, r3
 81016bc:	d306      	bcc.n	81016cc <HandleReceivedData+0x24>
	                            ? (writeIndex - readIndex)
 81016be:	79fb      	ldrb	r3, [r7, #7]
 81016c0:	b29a      	uxth	r2, r3
 81016c2:	4b2b      	ldr	r3, [pc, #172]	@ (8101770 <HandleReceivedData+0xc8>)
 81016c4:	881b      	ldrh	r3, [r3, #0]
	uint16_t newDataCount = (writeIndex >= readIndex)
 81016c6:	1ad3      	subs	r3, r2, r3
 81016c8:	b29b      	uxth	r3, r3
 81016ca:	e008      	b.n	81016de <HandleReceivedData+0x36>
	                            : (RX_BUFFER_SIZE - readIndex + writeIndex);
 81016cc:	79fb      	ldrb	r3, [r7, #7]
 81016ce:	b29a      	uxth	r2, r3
 81016d0:	4b27      	ldr	r3, [pc, #156]	@ (8101770 <HandleReceivedData+0xc8>)
 81016d2:	881b      	ldrh	r3, [r3, #0]
 81016d4:	1ad3      	subs	r3, r2, r3
 81016d6:	b29b      	uxth	r3, r3
	uint16_t newDataCount = (writeIndex >= readIndex)
 81016d8:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 81016dc:	b29b      	uxth	r3, r3
 81016de:	81fb      	strh	r3, [r7, #14]
	memset(checkBuffer, '\0', RX_BUFFER_SIZE);
 81016e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81016e4:	2100      	movs	r1, #0
 81016e6:	4823      	ldr	r0, [pc, #140]	@ (8101774 <HandleReceivedData+0xcc>)
 81016e8:	f00d fcfe 	bl	810f0e8 <memset>
	for (uint16_t i = 0; i < newDataCount; i++) {
 81016ec:	2300      	movs	r3, #0
 81016ee:	82fb      	strh	r3, [r7, #22]
 81016f0:	e017      	b.n	8101722 <HandleReceivedData+0x7a>
		// Copy new data to the process buffer
		uint8_t newByte = rxBuffer[readIndex];
 81016f2:	4b1f      	ldr	r3, [pc, #124]	@ (8101770 <HandleReceivedData+0xc8>)
 81016f4:	881b      	ldrh	r3, [r3, #0]
 81016f6:	461a      	mov	r2, r3
 81016f8:	4b1f      	ldr	r3, [pc, #124]	@ (8101778 <HandleReceivedData+0xd0>)
 81016fa:	5c9b      	ldrb	r3, [r3, r2]
 81016fc:	737b      	strb	r3, [r7, #13]
		checkBuffer[i] = newByte;
 81016fe:	8afb      	ldrh	r3, [r7, #22]
 8101700:	491c      	ldr	r1, [pc, #112]	@ (8101774 <HandleReceivedData+0xcc>)
 8101702:	7b7a      	ldrb	r2, [r7, #13]
 8101704:	54ca      	strb	r2, [r1, r3]

		// Increment read index circularly
		readIndex = (readIndex + 1) % RX_BUFFER_SIZE;
 8101706:	4b1a      	ldr	r3, [pc, #104]	@ (8101770 <HandleReceivedData+0xc8>)
 8101708:	881b      	ldrh	r3, [r3, #0]
 810170a:	3301      	adds	r3, #1
 810170c:	425a      	negs	r2, r3
 810170e:	b2db      	uxtb	r3, r3
 8101710:	b2d2      	uxtb	r2, r2
 8101712:	bf58      	it	pl
 8101714:	4253      	negpl	r3, r2
 8101716:	b29a      	uxth	r2, r3
 8101718:	4b15      	ldr	r3, [pc, #84]	@ (8101770 <HandleReceivedData+0xc8>)
 810171a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < newDataCount; i++) {
 810171c:	8afb      	ldrh	r3, [r7, #22]
 810171e:	3301      	adds	r3, #1
 8101720:	82fb      	strh	r3, [r7, #22]
 8101722:	8afa      	ldrh	r2, [r7, #22]
 8101724:	89fb      	ldrh	r3, [r7, #14]
 8101726:	429a      	cmp	r2, r3
 8101728:	d3e3      	bcc.n	81016f2 <HandleReceivedData+0x4a>
	}
	// Check if we have a complete packet
	if (readIndex >= PACKET_MIN_LENGTH) { // Assume minimum length is 2 bytes (Type + Length)
 810172a:	4b11      	ldr	r3, [pc, #68]	@ (8101770 <HandleReceivedData+0xc8>)
 810172c:	881b      	ldrh	r3, [r3, #0]
 810172e:	2b05      	cmp	r3, #5
 8101730:	d91a      	bls.n	8101768 <HandleReceivedData+0xc0>
		for(int i = 0; i < 20; i++){
 8101732:	2300      	movs	r3, #0
 8101734:	613b      	str	r3, [r7, #16]
 8101736:	e014      	b.n	8101762 <HandleReceivedData+0xba>
			if (checkBuffer[i] == 0xAA) {
 8101738:	4a0e      	ldr	r2, [pc, #56]	@ (8101774 <HandleReceivedData+0xcc>)
 810173a:	693b      	ldr	r3, [r7, #16]
 810173c:	4413      	add	r3, r2
 810173e:	781b      	ldrb	r3, [r3, #0]
 8101740:	2baa      	cmp	r3, #170	@ 0xaa
 8101742:	d10b      	bne.n	810175c <HandleReceivedData+0xb4>
				decodeServerData((uint8_t *)&checkBuffer[i], readIndex);
 8101744:	693b      	ldr	r3, [r7, #16]
 8101746:	4a0b      	ldr	r2, [pc, #44]	@ (8101774 <HandleReceivedData+0xcc>)
 8101748:	4413      	add	r3, r2
 810174a:	4a09      	ldr	r2, [pc, #36]	@ (8101770 <HandleReceivedData+0xc8>)
 810174c:	8812      	ldrh	r2, [r2, #0]
 810174e:	b2d2      	uxtb	r2, r2
 8101750:	4611      	mov	r1, r2
 8101752:	4618      	mov	r0, r3
 8101754:	f000 f8e6 	bl	8101924 <decodeServerData>
				break;
 8101758:	bf00      	nop
			}
		}
	}
}
 810175a:	e005      	b.n	8101768 <HandleReceivedData+0xc0>
		for(int i = 0; i < 20; i++){
 810175c:	693b      	ldr	r3, [r7, #16]
 810175e:	3301      	adds	r3, #1
 8101760:	613b      	str	r3, [r7, #16]
 8101762:	693b      	ldr	r3, [r7, #16]
 8101764:	2b13      	cmp	r3, #19
 8101766:	dde7      	ble.n	8101738 <HandleReceivedData+0x90>
}
 8101768:	bf00      	nop
 810176a:	3718      	adds	r7, #24
 810176c:	46bd      	mov	sp, r7
 810176e:	bd80      	pop	{r7, pc}
 8101770:	100004ac 	.word	0x100004ac
 8101774:	100003a8 	.word	0x100003a8
 8101778:	100002a8 	.word	0x100002a8

0810177c <encodeServerData>:


uint8_t encodeServerData(ServerPropertyType type, uint8_t *packet) {
 810177c:	b580      	push	{r7, lr}
 810177e:	b086      	sub	sp, #24
 8101780:	af00      	add	r7, sp, #0
 8101782:	4603      	mov	r3, r0
 8101784:	6039      	str	r1, [r7, #0]
 8101786:	71fb      	strb	r3, [r7, #7]
    uint8_t payloadLength = 0;
 8101788:	2300      	movs	r3, #0
 810178a:	75fb      	strb	r3, [r7, #23]
    uint8_t *payload;

    switch (type) {
 810178c:	79fb      	ldrb	r3, [r7, #7]
 810178e:	3b01      	subs	r3, #1
 8101790:	2b0b      	cmp	r3, #11
 8101792:	d84d      	bhi.n	8101830 <encodeServerData+0xb4>
 8101794:	a201      	add	r2, pc, #4	@ (adr r2, 810179c <encodeServerData+0x20>)
 8101796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810179a:	bf00      	nop
 810179c:	08101835 	.word	0x08101835
 81017a0:	08101835 	.word	0x08101835
 81017a4:	081017cd 	.word	0x081017cd
 81017a8:	081017d7 	.word	0x081017d7
 81017ac:	081017e1 	.word	0x081017e1
 81017b0:	081017eb 	.word	0x081017eb
 81017b4:	081017f5 	.word	0x081017f5
 81017b8:	081017ff 	.word	0x081017ff
 81017bc:	08101809 	.word	0x08101809
 81017c0:	08101813 	.word	0x08101813
 81017c4:	08101827 	.word	0x08101827
 81017c8:	0810181d 	.word	0x0810181d
        case RPM_PRESET:
            //payload = serverAttributes.rpmPreset;
           // payloadLength = sizeof(serverAttributes.rpmPreset);
            break;
        case GPS:
            payload = serverAttributes.gpsData;
 81017cc:	4b4b      	ldr	r3, [pc, #300]	@ (81018fc <encodeServerData+0x180>)
 81017ce:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.gpsData);
 81017d0:	2320      	movs	r3, #32
 81017d2:	75fb      	strb	r3, [r7, #23]
            break;
 81017d4:	e02f      	b.n	8101836 <encodeServerData+0xba>
        case BUS_CURRENT:
            payload = serverAttributes.currentData;
 81017d6:	4b4a      	ldr	r3, [pc, #296]	@ (8101900 <encodeServerData+0x184>)
 81017d8:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.currentData);
 81017da:	2302      	movs	r3, #2
 81017dc:	75fb      	strb	r3, [r7, #23]
            break;
 81017de:	e02a      	b.n	8101836 <encodeServerData+0xba>
        case BUS_VOLTAGE:
            payload = serverAttributes.voltageData;
 81017e0:	4b48      	ldr	r3, [pc, #288]	@ (8101904 <encodeServerData+0x188>)
 81017e2:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.voltageData);
 81017e4:	2302      	movs	r3, #2
 81017e6:	75fb      	strb	r3, [r7, #23]
            break;
 81017e8:	e025      	b.n	8101836 <encodeServerData+0xba>
        case RPM:
            payload = serverAttributes.rpm;
 81017ea:	4b47      	ldr	r3, [pc, #284]	@ (8101908 <encodeServerData+0x18c>)
 81017ec:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.rpm);
 81017ee:	2302      	movs	r3, #2
 81017f0:	75fb      	strb	r3, [r7, #23]
            break;
 81017f2:	e020      	b.n	8101836 <encodeServerData+0xba>
        case DEVICE_TEMP:
            payload = serverAttributes.device_temp;
 81017f4:	4b45      	ldr	r3, [pc, #276]	@ (810190c <encodeServerData+0x190>)
 81017f6:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.device_temp);
 81017f8:	2301      	movs	r3, #1
 81017fa:	75fb      	strb	r3, [r7, #23]
            break;
 81017fc:	e01b      	b.n	8101836 <encodeServerData+0xba>
        case NETWORK_STRENGTH:
            payload = serverAttributes.networkStrength;
 81017fe:	4b44      	ldr	r3, [pc, #272]	@ (8101910 <encodeServerData+0x194>)
 8101800:	613b      	str	r3, [r7, #16]
            payloadLength = sizeof(serverAttributes.networkStrength);
 8101802:	2301      	movs	r3, #1
 8101804:	75fb      	strb	r3, [r7, #23]
            break;
 8101806:	e016      	b.n	8101836 <encodeServerData+0xba>
        case TORQUE:
			payload = serverAttributes.torque;
 8101808:	4b42      	ldr	r3, [pc, #264]	@ (8101914 <encodeServerData+0x198>)
 810180a:	613b      	str	r3, [r7, #16]
			payloadLength = sizeof(serverAttributes.torque);
 810180c:	2301      	movs	r3, #1
 810180e:	75fb      	strb	r3, [r7, #23]
			break;
 8101810:	e011      	b.n	8101836 <encodeServerData+0xba>
        case SOC:
			payload = serverAttributes.soc;
 8101812:	4b41      	ldr	r3, [pc, #260]	@ (8101918 <encodeServerData+0x19c>)
 8101814:	613b      	str	r3, [r7, #16]
			payloadLength = sizeof(serverAttributes.soc);
 8101816:	2302      	movs	r3, #2
 8101818:	75fb      	strb	r3, [r7, #23]
			break;
 810181a:	e00c      	b.n	8101836 <encodeServerData+0xba>
        case MOTOR_TEMP:
			payload = serverAttributes.motor_temp;
 810181c:	4b3f      	ldr	r3, [pc, #252]	@ (810191c <encodeServerData+0x1a0>)
 810181e:	613b      	str	r3, [r7, #16]
			payloadLength = sizeof(serverAttributes.motor_temp);
 8101820:	2301      	movs	r3, #1
 8101822:	75fb      	strb	r3, [r7, #23]
			break;
 8101824:	e007      	b.n	8101836 <encodeServerData+0xba>
        case THROTTLE:
			payload = serverAttributes.throttle;
 8101826:	4b3e      	ldr	r3, [pc, #248]	@ (8101920 <encodeServerData+0x1a4>)
 8101828:	613b      	str	r3, [r7, #16]
			payloadLength = sizeof(serverAttributes.throttle);
 810182a:	2302      	movs	r3, #2
 810182c:	75fb      	strb	r3, [r7, #23]
			break;
 810182e:	e002      	b.n	8101836 <encodeServerData+0xba>
        default:
            return 0; // Unknown type
 8101830:	2300      	movs	r3, #0
 8101832:	e05f      	b.n	81018f4 <encodeServerData+0x178>
            break;
 8101834:	bf00      	nop
    }

    // Create the packet
    uint8_t index = 0;
 8101836:	2300      	movs	r3, #0
 8101838:	737b      	strb	r3, [r7, #13]
    packet[index++] = 0xAA;  // Header byte 1
 810183a:	7b7b      	ldrb	r3, [r7, #13]
 810183c:	1c5a      	adds	r2, r3, #1
 810183e:	737a      	strb	r2, [r7, #13]
 8101840:	461a      	mov	r2, r3
 8101842:	683b      	ldr	r3, [r7, #0]
 8101844:	4413      	add	r3, r2
 8101846:	22aa      	movs	r2, #170	@ 0xaa
 8101848:	701a      	strb	r2, [r3, #0]
    packet[index++] = 0xBB;  // Header byte 2
 810184a:	7b7b      	ldrb	r3, [r7, #13]
 810184c:	1c5a      	adds	r2, r3, #1
 810184e:	737a      	strb	r2, [r7, #13]
 8101850:	461a      	mov	r2, r3
 8101852:	683b      	ldr	r3, [r7, #0]
 8101854:	4413      	add	r3, r2
 8101856:	22bb      	movs	r2, #187	@ 0xbb
 8101858:	701a      	strb	r2, [r3, #0]
    packet[index++] = type;  // Property type
 810185a:	7b7b      	ldrb	r3, [r7, #13]
 810185c:	1c5a      	adds	r2, r3, #1
 810185e:	737a      	strb	r2, [r7, #13]
 8101860:	461a      	mov	r2, r3
 8101862:	683b      	ldr	r3, [r7, #0]
 8101864:	4413      	add	r3, r2
 8101866:	79fa      	ldrb	r2, [r7, #7]
 8101868:	701a      	strb	r2, [r3, #0]
    packet[index++] = payloadLength; // Payload length
 810186a:	7b7b      	ldrb	r3, [r7, #13]
 810186c:	1c5a      	adds	r2, r3, #1
 810186e:	737a      	strb	r2, [r7, #13]
 8101870:	461a      	mov	r2, r3
 8101872:	683b      	ldr	r3, [r7, #0]
 8101874:	4413      	add	r3, r2
 8101876:	7dfa      	ldrb	r2, [r7, #23]
 8101878:	701a      	strb	r2, [r3, #0]

    // Copy payload
    memcpy(&packet[index], payload, payloadLength);
 810187a:	7b7b      	ldrb	r3, [r7, #13]
 810187c:	683a      	ldr	r2, [r7, #0]
 810187e:	4413      	add	r3, r2
 8101880:	7dfa      	ldrb	r2, [r7, #23]
 8101882:	6939      	ldr	r1, [r7, #16]
 8101884:	4618      	mov	r0, r3
 8101886:	f00d fcef 	bl	810f268 <memcpy>
    index += payloadLength;
 810188a:	7b7a      	ldrb	r2, [r7, #13]
 810188c:	7dfb      	ldrb	r3, [r7, #23]
 810188e:	4413      	add	r3, r2
 8101890:	737b      	strb	r3, [r7, #13]

    // Add checksum
    uint8_t checksum = 0;
 8101892:	2300      	movs	r3, #0
 8101894:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 8101896:	2302      	movs	r3, #2
 8101898:	73bb      	strb	r3, [r7, #14]
 810189a:	e009      	b.n	81018b0 <encodeServerData+0x134>
        checksum ^= packet[i];
 810189c:	7bbb      	ldrb	r3, [r7, #14]
 810189e:	683a      	ldr	r2, [r7, #0]
 81018a0:	4413      	add	r3, r2
 81018a2:	781a      	ldrb	r2, [r3, #0]
 81018a4:	7bfb      	ldrb	r3, [r7, #15]
 81018a6:	4053      	eors	r3, r2
 81018a8:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 2; i < index; i++) {
 81018aa:	7bbb      	ldrb	r3, [r7, #14]
 81018ac:	3301      	adds	r3, #1
 81018ae:	73bb      	strb	r3, [r7, #14]
 81018b0:	7bba      	ldrb	r2, [r7, #14]
 81018b2:	7b7b      	ldrb	r3, [r7, #13]
 81018b4:	429a      	cmp	r2, r3
 81018b6:	d3f1      	bcc.n	810189c <encodeServerData+0x120>
    }
    packet[index++] = checksum;
 81018b8:	7b7b      	ldrb	r3, [r7, #13]
 81018ba:	1c5a      	adds	r2, r3, #1
 81018bc:	737a      	strb	r2, [r7, #13]
 81018be:	461a      	mov	r2, r3
 81018c0:	683b      	ldr	r3, [r7, #0]
 81018c2:	4413      	add	r3, r2
 81018c4:	7bfa      	ldrb	r2, [r7, #15]
 81018c6:	701a      	strb	r2, [r3, #0]
    if (packet[index-1] == 0) packet[index-1] = 0xDD;
 81018c8:	7b7b      	ldrb	r3, [r7, #13]
 81018ca:	3b01      	subs	r3, #1
 81018cc:	683a      	ldr	r2, [r7, #0]
 81018ce:	4413      	add	r3, r2
 81018d0:	781b      	ldrb	r3, [r3, #0]
 81018d2:	2b00      	cmp	r3, #0
 81018d4:	d105      	bne.n	81018e2 <encodeServerData+0x166>
 81018d6:	7b7b      	ldrb	r3, [r7, #13]
 81018d8:	3b01      	subs	r3, #1
 81018da:	683a      	ldr	r2, [r7, #0]
 81018dc:	4413      	add	r3, r2
 81018de:	22dd      	movs	r2, #221	@ 0xdd
 81018e0:	701a      	strb	r2, [r3, #0]
    packet[index++] = 0xCC;
 81018e2:	7b7b      	ldrb	r3, [r7, #13]
 81018e4:	1c5a      	adds	r2, r3, #1
 81018e6:	737a      	strb	r2, [r7, #13]
 81018e8:	461a      	mov	r2, r3
 81018ea:	683b      	ldr	r3, [r7, #0]
 81018ec:	4413      	add	r3, r2
 81018ee:	22cc      	movs	r2, #204	@ 0xcc
 81018f0:	701a      	strb	r2, [r3, #0]

    return index; // Total packet length
 81018f2:	7b7b      	ldrb	r3, [r7, #13]
}
 81018f4:	4618      	mov	r0, r3
 81018f6:	3718      	adds	r7, #24
 81018f8:	46bd      	mov	sp, r7
 81018fa:	bd80      	pop	{r7, pc}
 81018fc:	100004b3 	.word	0x100004b3
 8101900:	100004d3 	.word	0x100004d3
 8101904:	100004d5 	.word	0x100004d5
 8101908:	100004d7 	.word	0x100004d7
 810190c:	100004d9 	.word	0x100004d9
 8101910:	100004e0 	.word	0x100004e0
 8101914:	100004db 	.word	0x100004db
 8101918:	100004dc 	.word	0x100004dc
 810191c:	100004da 	.word	0x100004da
 8101920:	100004de 	.word	0x100004de

08101924 <decodeServerData>:

void decodeServerData(uint8_t *packet, uint8_t length) {
 8101924:	b580      	push	{r7, lr}
 8101926:	b084      	sub	sp, #16
 8101928:	af00      	add	r7, sp, #0
 810192a:	6078      	str	r0, [r7, #4]
 810192c:	460b      	mov	r3, r1
 810192e:	70fb      	strb	r3, [r7, #3]
    if (length < 5) return; // Invalid packet length
 8101930:	78fb      	ldrb	r3, [r7, #3]
 8101932:	2b04      	cmp	r3, #4
 8101934:	f240 809f 	bls.w	8101a76 <decodeServerData+0x152>

    // Validate header
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	781b      	ldrb	r3, [r3, #0]
 810193c:	2baa      	cmp	r3, #170	@ 0xaa
 810193e:	f040 809c 	bne.w	8101a7a <decodeServerData+0x156>
 8101942:	687b      	ldr	r3, [r7, #4]
 8101944:	3301      	adds	r3, #1
 8101946:	781b      	ldrb	r3, [r3, #0]
 8101948:	2bbb      	cmp	r3, #187	@ 0xbb
 810194a:	f040 8096 	bne.w	8101a7a <decodeServerData+0x156>

    // Extract type and payload length
    ServerPropertyType type = packet[2];
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	789b      	ldrb	r3, [r3, #2]
 8101952:	737b      	strb	r3, [r7, #13]
    uint8_t payloadLength = packet[3];
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	78db      	ldrb	r3, [r3, #3]
 8101958:	733b      	strb	r3, [r7, #12]

    // Validate checksum
    uint8_t checksum = 0;
 810195a:	2300      	movs	r3, #0
 810195c:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 4 + payloadLength; i++) {
 810195e:	2300      	movs	r3, #0
 8101960:	73bb      	strb	r3, [r7, #14]
 8101962:	e009      	b.n	8101978 <decodeServerData+0x54>
        checksum ^= packet[i];
 8101964:	7bbb      	ldrb	r3, [r7, #14]
 8101966:	687a      	ldr	r2, [r7, #4]
 8101968:	4413      	add	r3, r2
 810196a:	781a      	ldrb	r2, [r3, #0]
 810196c:	7bfb      	ldrb	r3, [r7, #15]
 810196e:	4053      	eors	r3, r2
 8101970:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < 4 + payloadLength; i++) {
 8101972:	7bbb      	ldrb	r3, [r7, #14]
 8101974:	3301      	adds	r3, #1
 8101976:	73bb      	strb	r3, [r7, #14]
 8101978:	7b3b      	ldrb	r3, [r7, #12]
 810197a:	1cda      	adds	r2, r3, #3
 810197c:	7bbb      	ldrb	r3, [r7, #14]
 810197e:	429a      	cmp	r2, r3
 8101980:	daf0      	bge.n	8101964 <decodeServerData+0x40>
    }
    if (checksum != packet[4 + payloadLength]) return;
 8101982:	7b3b      	ldrb	r3, [r7, #12]
 8101984:	3304      	adds	r3, #4
 8101986:	461a      	mov	r2, r3
 8101988:	687b      	ldr	r3, [r7, #4]
 810198a:	4413      	add	r3, r2
 810198c:	781b      	ldrb	r3, [r3, #0]
 810198e:	7bfa      	ldrb	r2, [r7, #15]
 8101990:	429a      	cmp	r2, r3
 8101992:	d174      	bne.n	8101a7e <decodeServerData+0x15a>

    // Extract payload
    uint8_t *payload = &packet[4];
 8101994:	687b      	ldr	r3, [r7, #4]
 8101996:	3304      	adds	r3, #4
 8101998:	60bb      	str	r3, [r7, #8]

    // Update serverAttributes
    switch (type) {
 810199a:	7b7b      	ldrb	r3, [r7, #13]
 810199c:	3b01      	subs	r3, #1
 810199e:	2b0b      	cmp	r3, #11
 81019a0:	d867      	bhi.n	8101a72 <decodeServerData+0x14e>
 81019a2:	a201      	add	r2, pc, #4	@ (adr r2, 81019a8 <decodeServerData+0x84>)
 81019a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81019a8:	081019d9 	.word	0x081019d9
 81019ac:	081019e7 	.word	0x081019e7
 81019b0:	08101a73 	.word	0x08101a73
 81019b4:	081019f5 	.word	0x081019f5
 81019b8:	08101a03 	.word	0x08101a03
 81019bc:	08101a11 	.word	0x08101a11
 81019c0:	08101a1f 	.word	0x08101a1f
 81019c4:	08101a3b 	.word	0x08101a3b
 81019c8:	08101a49 	.word	0x08101a49
 81019cc:	08101a57 	.word	0x08101a57
 81019d0:	08101a65 	.word	0x08101a65
 81019d4:	08101a2d 	.word	0x08101a2d
        case IMMOBILIZE_STATUS:
            memcpy(serverAttributes.immobilizeStatus, payload, payloadLength);
 81019d8:	7b3b      	ldrb	r3, [r7, #12]
 81019da:	461a      	mov	r2, r3
 81019dc:	68b9      	ldr	r1, [r7, #8]
 81019de:	482a      	ldr	r0, [pc, #168]	@ (8101a88 <decodeServerData+0x164>)
 81019e0:	f00d fc42 	bl	810f268 <memcpy>
            break;
 81019e4:	e046      	b.n	8101a74 <decodeServerData+0x150>
        case RPM_PRESET:
            memcpy(serverAttributes.rpmPreset, payload, payloadLength);
 81019e6:	7b3b      	ldrb	r3, [r7, #12]
 81019e8:	461a      	mov	r2, r3
 81019ea:	68b9      	ldr	r1, [r7, #8]
 81019ec:	4827      	ldr	r0, [pc, #156]	@ (8101a8c <decodeServerData+0x168>)
 81019ee:	f00d fc3b 	bl	810f268 <memcpy>
            break;
 81019f2:	e03f      	b.n	8101a74 <decodeServerData+0x150>
        case GPS:
            //memcpy(serverAttributes.gpsData, payload, payloadLength);
            break;
        case BUS_CURRENT:
            memcpy(serverAttributes.currentData, payload, payloadLength);
 81019f4:	7b3b      	ldrb	r3, [r7, #12]
 81019f6:	461a      	mov	r2, r3
 81019f8:	68b9      	ldr	r1, [r7, #8]
 81019fa:	4825      	ldr	r0, [pc, #148]	@ (8101a90 <decodeServerData+0x16c>)
 81019fc:	f00d fc34 	bl	810f268 <memcpy>
            break;
 8101a00:	e038      	b.n	8101a74 <decodeServerData+0x150>
        case BUS_VOLTAGE:
            memcpy(serverAttributes.voltageData, payload, payloadLength);
 8101a02:	7b3b      	ldrb	r3, [r7, #12]
 8101a04:	461a      	mov	r2, r3
 8101a06:	68b9      	ldr	r1, [r7, #8]
 8101a08:	4822      	ldr	r0, [pc, #136]	@ (8101a94 <decodeServerData+0x170>)
 8101a0a:	f00d fc2d 	bl	810f268 <memcpy>
            break;
 8101a0e:	e031      	b.n	8101a74 <decodeServerData+0x150>
        case RPM:
            memcpy(serverAttributes.rpm, payload, payloadLength);
 8101a10:	7b3b      	ldrb	r3, [r7, #12]
 8101a12:	461a      	mov	r2, r3
 8101a14:	68b9      	ldr	r1, [r7, #8]
 8101a16:	4820      	ldr	r0, [pc, #128]	@ (8101a98 <decodeServerData+0x174>)
 8101a18:	f00d fc26 	bl	810f268 <memcpy>
            break;
 8101a1c:	e02a      	b.n	8101a74 <decodeServerData+0x150>
        case DEVICE_TEMP:
            memcpy(serverAttributes.device_temp, payload, payloadLength);
 8101a1e:	7b3b      	ldrb	r3, [r7, #12]
 8101a20:	461a      	mov	r2, r3
 8101a22:	68b9      	ldr	r1, [r7, #8]
 8101a24:	481d      	ldr	r0, [pc, #116]	@ (8101a9c <decodeServerData+0x178>)
 8101a26:	f00d fc1f 	bl	810f268 <memcpy>
            break;
 8101a2a:	e023      	b.n	8101a74 <decodeServerData+0x150>
        case MOTOR_TEMP:
			memcpy(serverAttributes.motor_temp, payload, payloadLength);
 8101a2c:	7b3b      	ldrb	r3, [r7, #12]
 8101a2e:	461a      	mov	r2, r3
 8101a30:	68b9      	ldr	r1, [r7, #8]
 8101a32:	481b      	ldr	r0, [pc, #108]	@ (8101aa0 <decodeServerData+0x17c>)
 8101a34:	f00d fc18 	bl	810f268 <memcpy>
			break;
 8101a38:	e01c      	b.n	8101a74 <decodeServerData+0x150>
        case NETWORK_STRENGTH:
            memcpy(serverAttributes.networkStrength, payload, payloadLength);
 8101a3a:	7b3b      	ldrb	r3, [r7, #12]
 8101a3c:	461a      	mov	r2, r3
 8101a3e:	68b9      	ldr	r1, [r7, #8]
 8101a40:	4818      	ldr	r0, [pc, #96]	@ (8101aa4 <decodeServerData+0x180>)
 8101a42:	f00d fc11 	bl	810f268 <memcpy>
            break;
 8101a46:	e015      	b.n	8101a74 <decodeServerData+0x150>
        case TORQUE:
			memcpy(serverAttributes.torque, payload, payloadLength);
 8101a48:	7b3b      	ldrb	r3, [r7, #12]
 8101a4a:	461a      	mov	r2, r3
 8101a4c:	68b9      	ldr	r1, [r7, #8]
 8101a4e:	4816      	ldr	r0, [pc, #88]	@ (8101aa8 <decodeServerData+0x184>)
 8101a50:	f00d fc0a 	bl	810f268 <memcpy>
			break;
 8101a54:	e00e      	b.n	8101a74 <decodeServerData+0x150>
        case SOC:
			memcpy(serverAttributes.soc, payload, payloadLength);
 8101a56:	7b3b      	ldrb	r3, [r7, #12]
 8101a58:	461a      	mov	r2, r3
 8101a5a:	68b9      	ldr	r1, [r7, #8]
 8101a5c:	4813      	ldr	r0, [pc, #76]	@ (8101aac <decodeServerData+0x188>)
 8101a5e:	f00d fc03 	bl	810f268 <memcpy>
			break;
 8101a62:	e007      	b.n	8101a74 <decodeServerData+0x150>
        case THROTTLE:
			memcpy(serverAttributes.throttle, payload, payloadLength);
 8101a64:	7b3b      	ldrb	r3, [r7, #12]
 8101a66:	461a      	mov	r2, r3
 8101a68:	68b9      	ldr	r1, [r7, #8]
 8101a6a:	4811      	ldr	r0, [pc, #68]	@ (8101ab0 <decodeServerData+0x18c>)
 8101a6c:	f00d fbfc 	bl	810f268 <memcpy>
			break;
 8101a70:	e000      	b.n	8101a74 <decodeServerData+0x150>
        default:
            // Unknown type
            break;
 8101a72:	bf00      	nop
    }
    return;
 8101a74:	e004      	b.n	8101a80 <decodeServerData+0x15c>
    if (length < 5) return; // Invalid packet length
 8101a76:	bf00      	nop
 8101a78:	e002      	b.n	8101a80 <decodeServerData+0x15c>
    if (packet[0] != 0xAA || packet[1] != 0xBB) return;
 8101a7a:	bf00      	nop
 8101a7c:	e000      	b.n	8101a80 <decodeServerData+0x15c>
    if (checksum != packet[4 + payloadLength]) return;
 8101a7e:	bf00      	nop
}
 8101a80:	3710      	adds	r7, #16
 8101a82:	46bd      	mov	sp, r7
 8101a84:	bd80      	pop	{r7, pc}
 8101a86:	bf00      	nop
 8101a88:	100004b0 	.word	0x100004b0
 8101a8c:	100004b1 	.word	0x100004b1
 8101a90:	100004d3 	.word	0x100004d3
 8101a94:	100004d5 	.word	0x100004d5
 8101a98:	100004d7 	.word	0x100004d7
 8101a9c:	100004d9 	.word	0x100004d9
 8101aa0:	100004da 	.word	0x100004da
 8101aa4:	100004e0 	.word	0x100004e0
 8101aa8:	100004db 	.word	0x100004db
 8101aac:	100004dc 	.word	0x100004dc
 8101ab0:	100004de 	.word	0x100004de

08101ab4 <StartSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSendTask */
void StartSendTask(void *argument)
{
 8101ab4:	b580      	push	{r7, lr}
 8101ab6:	b082      	sub	sp, #8
 8101ab8:	af00      	add	r7, sp, #0
 8101aba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSendTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketSendData();
 8101abc:	f7ff fd12 	bl	81014e4 <SocketSendData>
	  osDelay(4000);
 8101ac0:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8101ac4:	f00a f90d 	bl	810bce2 <osDelay>
	  SocketSendData();
 8101ac8:	bf00      	nop
 8101aca:	e7f7      	b.n	8101abc <StartSendTask+0x8>

08101acc <StartReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartReceiveTask */
void StartReceiveTask(void *argument)
{
 8101acc:	b580      	push	{r7, lr}
 8101ace:	b082      	sub	sp, #8
 8101ad0:	af00      	add	r7, sp, #0
 8101ad2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartReceiveTask */
  /* Infinite loop */
  for(;;)
  {
	  SocketReceiveData();
 8101ad4:	f7ff fd94 	bl	8101600 <SocketReceiveData>
 8101ad8:	e7fc      	b.n	8101ad4 <StartReceiveTask+0x8>

08101ada <StartGpsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGpsTask */
void StartGpsTask(void *argument)
{
 8101ada:	b580      	push	{r7, lr}
 8101adc:	b082      	sub	sp, #8
 8101ade:	af00      	add	r7, sp, #0
 8101ae0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGpsTask */
  /* Infinite loop */
  for(;;)
  {
	gps();
 8101ae2:	f7fe fec9 	bl	8100878 <gps>
    osDelay(8000);
 8101ae6:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8101aea:	f00a f8fa 	bl	810bce2 <osDelay>
	gps();
 8101aee:	bf00      	nop
 8101af0:	e7f7      	b.n	8101ae2 <StartGpsTask+0x8>
	...

08101af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101af4:	b580      	push	{r7, lr}
 8101af6:	b082      	sub	sp, #8
 8101af8:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101afa:	4b6b      	ldr	r3, [pc, #428]	@ (8101ca8 <main+0x1b4>)
 8101afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b00:	4a69      	ldr	r2, [pc, #420]	@ (8101ca8 <main+0x1b4>)
 8101b02:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101b06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101b0a:	4b67      	ldr	r3, [pc, #412]	@ (8101ca8 <main+0x1b4>)
 8101b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101b14:	607b      	str	r3, [r7, #4]
 8101b16:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101b18:	2001      	movs	r0, #1
 8101b1a:	f003 ff0d 	bl	8105938 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101b1e:	f003 ff97 	bl	8105a50 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101b22:	2201      	movs	r2, #1
 8101b24:	2102      	movs	r1, #2
 8101b26:	2000      	movs	r0, #0
 8101b28:	f003 ff18 	bl	810595c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8101cac <main+0x1b8>)
 8101b2e:	681b      	ldr	r3, [r3, #0]
 8101b30:	091b      	lsrs	r3, r3, #4
 8101b32:	f003 030f 	and.w	r3, r3, #15
 8101b36:	2b07      	cmp	r3, #7
 8101b38:	d108      	bne.n	8101b4c <main+0x58>
 8101b3a:	4b5d      	ldr	r3, [pc, #372]	@ (8101cb0 <main+0x1bc>)
 8101b3c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101b40:	4a5b      	ldr	r2, [pc, #364]	@ (8101cb0 <main+0x1bc>)
 8101b42:	f043 0301 	orr.w	r3, r3, #1
 8101b46:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101b4a:	e007      	b.n	8101b5c <main+0x68>
 8101b4c:	4b58      	ldr	r3, [pc, #352]	@ (8101cb0 <main+0x1bc>)
 8101b4e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101b52:	4a57      	ldr	r2, [pc, #348]	@ (8101cb0 <main+0x1bc>)
 8101b54:	f043 0301 	orr.w	r3, r3, #1
 8101b58:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101b5c:	f000 fd84 	bl	8102668 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8101b60:	f000 fa70 	bl	8102044 <MX_MDMA_Init>
  MX_GPIO_Init();
 8101b64:	f000 fa88 	bl	8102078 <MX_GPIO_Init>
  MX_DMA_Init();
 8101b68:	f000 fa4c 	bl	8102004 <MX_DMA_Init>
  MX_TIM1_Init();
 8101b6c:	f000 f8c6 	bl	8101cfc <MX_TIM1_Init>
  MX_TIM4_Init();
 8101b70:	f000 f988 	bl	8101e84 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8101b74:	f000 f9fa 	bl	8101f6c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Initialize SIM7600
    NetworkInit();
 8101b78:	f7ff f850 	bl	8100c1c <NetworkInit>

    // Open a socket
    OpenSocket();
 8101b7c:	f7ff fb9e 	bl	81012bc <OpenSocket>

	//serverAttributes.immobilizeStatus[0] = 0x01;
	serverAttributes.rpmPreset[0] = 0x0;
 8101b80:	4b4c      	ldr	r3, [pc, #304]	@ (8101cb4 <main+0x1c0>)
 8101b82:	2200      	movs	r2, #0
 8101b84:	705a      	strb	r2, [r3, #1]
	serverAttributes.rpmPreset[1] = 0x0;
 8101b86:	4b4b      	ldr	r3, [pc, #300]	@ (8101cb4 <main+0x1c0>)
 8101b88:	2200      	movs	r2, #0
 8101b8a:	709a      	strb	r2, [r3, #2]
	memset(serverAttributes.gpsData, 0x00, sizeof(serverAttributes.gpsData));
 8101b8c:	2220      	movs	r2, #32
 8101b8e:	2100      	movs	r1, #0
 8101b90:	4849      	ldr	r0, [pc, #292]	@ (8101cb8 <main+0x1c4>)
 8101b92:	f00d faa9 	bl	810f0e8 <memset>
	serverAttributes.currentData[0] = 0xDD;
 8101b96:	4b47      	ldr	r3, [pc, #284]	@ (8101cb4 <main+0x1c0>)
 8101b98:	22dd      	movs	r2, #221	@ 0xdd
 8101b9a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
	serverAttributes.currentData[1] = 0x01;
 8101b9e:	4b45      	ldr	r3, [pc, #276]	@ (8101cb4 <main+0x1c0>)
 8101ba0:	2201      	movs	r2, #1
 8101ba2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	serverAttributes.voltageData[0] = 0x0C;
 8101ba6:	4b43      	ldr	r3, [pc, #268]	@ (8101cb4 <main+0x1c0>)
 8101ba8:	220c      	movs	r2, #12
 8101baa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	serverAttributes.voltageData[1] = 0x0B;
 8101bae:	4b41      	ldr	r3, [pc, #260]	@ (8101cb4 <main+0x1c0>)
 8101bb0:	220b      	movs	r2, #11
 8101bb2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
	serverAttributes.rpm[0] = 0x00;
 8101bb6:	4b3f      	ldr	r3, [pc, #252]	@ (8101cb4 <main+0x1c0>)
 8101bb8:	2200      	movs	r2, #0
 8101bba:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
	serverAttributes.rpm[1] = 0x00;
 8101bbe:	4b3d      	ldr	r3, [pc, #244]	@ (8101cb4 <main+0x1c0>)
 8101bc0:	2200      	movs	r2, #0
 8101bc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	serverAttributes.motor_temp[0] = 0x14;
 8101bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8101cb4 <main+0x1c0>)
 8101bc8:	2214      	movs	r2, #20
 8101bca:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	serverAttributes.device_temp[0] = 0x14;
 8101bce:	4b39      	ldr	r3, [pc, #228]	@ (8101cb4 <main+0x1c0>)
 8101bd0:	2214      	movs	r2, #20
 8101bd2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	serverAttributes.networkStrength[0] = 0x05;
 8101bd6:	4b37      	ldr	r3, [pc, #220]	@ (8101cb4 <main+0x1c0>)
 8101bd8:	2205      	movs	r2, #5
 8101bda:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	serverAttributes.soc[0] = 0x63;
 8101bde:	4b35      	ldr	r3, [pc, #212]	@ (8101cb4 <main+0x1c0>)
 8101be0:	2263      	movs	r2, #99	@ 0x63
 8101be2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	serverAttributes.soc[1] = 0x63;
 8101be6:	4b33      	ldr	r3, [pc, #204]	@ (8101cb4 <main+0x1c0>)
 8101be8:	2263      	movs	r2, #99	@ 0x63
 8101bea:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
	serverAttributes.torque[0] = 0xDD;
 8101bee:	4b31      	ldr	r3, [pc, #196]	@ (8101cb4 <main+0x1c0>)
 8101bf0:	22dd      	movs	r2, #221	@ 0xdd
 8101bf2:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
	serverAttributes.throttle[0] = 0x01;
 8101bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8101cb4 <main+0x1c0>)
 8101bf8:	2201      	movs	r2, #1
 8101bfa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
	serverAttributes.throttle[1] = 0x02;
 8101bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8101cb4 <main+0x1c0>)
 8101c00:	2202      	movs	r2, #2
 8101c02:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  	HAL_TIM_Base_Start_IT( &htim1 );
 8101c06:	482d      	ldr	r0, [pc, #180]	@ (8101cbc <main+0x1c8>)
 8101c08:	f006 f80e 	bl	8107c28 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_Base_Start_IT( &htim4 );
 8101c0c:	482c      	ldr	r0, [pc, #176]	@ (8101cc0 <main+0x1cc>)
 8101c0e:	f006 f80b 	bl	8107c28 <HAL_TIM_Base_Start_IT>
  	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_1 );
 8101c12:	2100      	movs	r1, #0
 8101c14:	4829      	ldr	r0, [pc, #164]	@ (8101cbc <main+0x1c8>)
 8101c16:	f006 f941 	bl	8107e9c <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_1 );
 8101c1a:	2100      	movs	r1, #0
 8101c1c:	4827      	ldr	r0, [pc, #156]	@ (8101cbc <main+0x1c8>)
 8101c1e:	f007 fad5 	bl	81091cc <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_2 );
 8101c22:	2104      	movs	r1, #4
 8101c24:	4825      	ldr	r0, [pc, #148]	@ (8101cbc <main+0x1c8>)
 8101c26:	f006 f939 	bl	8107e9c <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_2 );
 8101c2a:	2104      	movs	r1, #4
 8101c2c:	4823      	ldr	r0, [pc, #140]	@ (8101cbc <main+0x1c8>)
 8101c2e:	f007 facd 	bl	81091cc <HAL_TIMEx_PWMN_Start>
  	HAL_TIM_PWM_Start( &htim1, TIM_CHANNEL_3 );
 8101c32:	2108      	movs	r1, #8
 8101c34:	4821      	ldr	r0, [pc, #132]	@ (8101cbc <main+0x1c8>)
 8101c36:	f006 f931 	bl	8107e9c <HAL_TIM_PWM_Start>
  	HAL_TIMEx_PWMN_Start( &htim1, TIM_CHANNEL_3 );
 8101c3a:	2108      	movs	r1, #8
 8101c3c:	481f      	ldr	r0, [pc, #124]	@ (8101cbc <main+0x1c8>)
 8101c3e:	f007 fac5 	bl	81091cc <HAL_TIMEx_PWMN_Start>
  	//HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
  	//counter_ = __HAL_TIM_GET_COUNTER(&htim4);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8101c42:	f009 ff5d 	bl	810bb00 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of uart_lock */
  uart_lockHandle = osMutexNew(&uart_lock_attributes);
 8101c46:	481f      	ldr	r0, [pc, #124]	@ (8101cc4 <main+0x1d0>)
 8101c48:	f00a f893 	bl	810bd72 <osMutexNew>
 8101c4c:	4603      	mov	r3, r0
 8101c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8101cc8 <main+0x1d4>)
 8101c50:	6013      	str	r3, [r2, #0]
  if (uart_lockHandle == NULL) {
 8101c52:	4b1d      	ldr	r3, [pc, #116]	@ (8101cc8 <main+0x1d4>)
 8101c54:	681b      	ldr	r3, [r3, #0]
 8101c56:	2b00      	cmp	r3, #0
 8101c58:	d101      	bne.n	8101c5e <main+0x16a>
      Error_Handler();
 8101c5a:	f000 fa75 	bl	8102148 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8101c5e:	4a1b      	ldr	r2, [pc, #108]	@ (8101ccc <main+0x1d8>)
 8101c60:	2100      	movs	r1, #0
 8101c62:	481b      	ldr	r0, [pc, #108]	@ (8101cd0 <main+0x1dc>)
 8101c64:	f009 ffab 	bl	810bbbe <osThreadNew>
 8101c68:	4603      	mov	r3, r0
 8101c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8101cd4 <main+0x1e0>)
 8101c6c:	6013      	str	r3, [r2, #0]

  /* creation of sendTask */
  sendTaskHandle = osThreadNew(StartSendTask, NULL, &sendTask_attributes);
 8101c6e:	4a1a      	ldr	r2, [pc, #104]	@ (8101cd8 <main+0x1e4>)
 8101c70:	2100      	movs	r1, #0
 8101c72:	481a      	ldr	r0, [pc, #104]	@ (8101cdc <main+0x1e8>)
 8101c74:	f009 ffa3 	bl	810bbbe <osThreadNew>
 8101c78:	4603      	mov	r3, r0
 8101c7a:	4a19      	ldr	r2, [pc, #100]	@ (8101ce0 <main+0x1ec>)
 8101c7c:	6013      	str	r3, [r2, #0]

  /* creation of receiveTask */
  receiveTaskHandle = osThreadNew(StartReceiveTask, NULL, &receiveTask_attributes);
 8101c7e:	4a19      	ldr	r2, [pc, #100]	@ (8101ce4 <main+0x1f0>)
 8101c80:	2100      	movs	r1, #0
 8101c82:	4819      	ldr	r0, [pc, #100]	@ (8101ce8 <main+0x1f4>)
 8101c84:	f009 ff9b 	bl	810bbbe <osThreadNew>
 8101c88:	4603      	mov	r3, r0
 8101c8a:	4a18      	ldr	r2, [pc, #96]	@ (8101cec <main+0x1f8>)
 8101c8c:	6013      	str	r3, [r2, #0]

  /* creation of gpsTask */
  gpsTaskHandle = osThreadNew(StartGpsTask, NULL, &gpsTask_attributes);
 8101c8e:	4a18      	ldr	r2, [pc, #96]	@ (8101cf0 <main+0x1fc>)
 8101c90:	2100      	movs	r1, #0
 8101c92:	4818      	ldr	r0, [pc, #96]	@ (8101cf4 <main+0x200>)
 8101c94:	f009 ff93 	bl	810bbbe <osThreadNew>
 8101c98:	4603      	mov	r3, r0
 8101c9a:	4a17      	ldr	r2, [pc, #92]	@ (8101cf8 <main+0x204>)
 8101c9c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8101c9e:	f009 ff53 	bl	810bb48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101ca2:	bf00      	nop
 8101ca4:	e7fd      	b.n	8101ca2 <main+0x1ae>
 8101ca6:	bf00      	nop
 8101ca8:	58024400 	.word	0x58024400
 8101cac:	e000ed00 	.word	0xe000ed00
 8101cb0:	58026400 	.word	0x58026400
 8101cb4:	100004b0 	.word	0x100004b0
 8101cb8:	100004b3 	.word	0x100004b3
 8101cbc:	100004e4 	.word	0x100004e4
 8101cc0:	10000530 	.word	0x10000530
 8101cc4:	0810fe38 	.word	0x0810fe38
 8101cc8:	10000698 	.word	0x10000698
 8101ccc:	0810fda8 	.word	0x0810fda8
 8101cd0:	08102139 	.word	0x08102139
 8101cd4:	10000688 	.word	0x10000688
 8101cd8:	0810fdcc 	.word	0x0810fdcc
 8101cdc:	08101ab5 	.word	0x08101ab5
 8101ce0:	1000068c 	.word	0x1000068c
 8101ce4:	0810fdf0 	.word	0x0810fdf0
 8101ce8:	08101acd 	.word	0x08101acd
 8101cec:	10000690 	.word	0x10000690
 8101cf0:	0810fe14 	.word	0x0810fe14
 8101cf4:	08101adb 	.word	0x08101adb
 8101cf8:	10000694 	.word	0x10000694

08101cfc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8101cfc:	b580      	push	{r7, lr}
 8101cfe:	b09a      	sub	sp, #104	@ 0x68
 8101d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101d02:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101d06:	2200      	movs	r2, #0
 8101d08:	601a      	str	r2, [r3, #0]
 8101d0a:	605a      	str	r2, [r3, #4]
 8101d0c:	609a      	str	r2, [r3, #8]
 8101d0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101d10:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8101d14:	2200      	movs	r2, #0
 8101d16:	601a      	str	r2, [r3, #0]
 8101d18:	605a      	str	r2, [r3, #4]
 8101d1a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101d1c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101d20:	2200      	movs	r2, #0
 8101d22:	601a      	str	r2, [r3, #0]
 8101d24:	605a      	str	r2, [r3, #4]
 8101d26:	609a      	str	r2, [r3, #8]
 8101d28:	60da      	str	r2, [r3, #12]
 8101d2a:	611a      	str	r2, [r3, #16]
 8101d2c:	615a      	str	r2, [r3, #20]
 8101d2e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8101d30:	1d3b      	adds	r3, r7, #4
 8101d32:	222c      	movs	r2, #44	@ 0x2c
 8101d34:	2100      	movs	r1, #0
 8101d36:	4618      	mov	r0, r3
 8101d38:	f00d f9d6 	bl	810f0e8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101d3c:	4b4f      	ldr	r3, [pc, #316]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d3e:	4a50      	ldr	r2, [pc, #320]	@ (8101e80 <MX_TIM1_Init+0x184>)
 8101d40:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8101d42:	4b4e      	ldr	r3, [pc, #312]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d44:	2200      	movs	r2, #0
 8101d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8101d48:	4b4c      	ldr	r3, [pc, #304]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d4a:	2220      	movs	r2, #32
 8101d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 30000 - 1;
 8101d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d50:	f247 522f 	movw	r2, #29999	@ 0x752f
 8101d54:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101d56:	4b49      	ldr	r3, [pc, #292]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d58:	2200      	movs	r2, #0
 8101d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101d5c:	4b47      	ldr	r3, [pc, #284]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d5e:	2200      	movs	r2, #0
 8101d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8101d62:	4b46      	ldr	r3, [pc, #280]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d64:	2280      	movs	r2, #128	@ 0x80
 8101d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8101d68:	4844      	ldr	r0, [pc, #272]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d6a:	f005 ff05 	bl	8107b78 <HAL_TIM_Base_Init>
 8101d6e:	4603      	mov	r3, r0
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d001      	beq.n	8101d78 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8101d74:	f000 f9e8 	bl	8102148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101d78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101d7c:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8101d7e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8101d82:	4619      	mov	r1, r3
 8101d84:	483d      	ldr	r0, [pc, #244]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d86:	f006 fcc3 	bl	8108710 <HAL_TIM_ConfigClockSource>
 8101d8a:	4603      	mov	r3, r0
 8101d8c:	2b00      	cmp	r3, #0
 8101d8e:	d001      	beq.n	8101d94 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8101d90:	f000 f9da 	bl	8102148 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8101d94:	4839      	ldr	r0, [pc, #228]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101d96:	f006 f820 	bl	8107dda <HAL_TIM_PWM_Init>
 8101d9a:	4603      	mov	r3, r0
 8101d9c:	2b00      	cmp	r3, #0
 8101d9e:	d001      	beq.n	8101da4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8101da0:	f000 f9d2 	bl	8102148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101da4:	2300      	movs	r3, #0
 8101da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8101da8:	2300      	movs	r3, #0
 8101daa:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101dac:	2300      	movs	r3, #0
 8101dae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8101db0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8101db4:	4619      	mov	r1, r3
 8101db6:	4831      	ldr	r0, [pc, #196]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101db8:	f007 fb28 	bl	810940c <HAL_TIMEx_MasterConfigSynchronization>
 8101dbc:	4603      	mov	r3, r0
 8101dbe:	2b00      	cmp	r3, #0
 8101dc0:	d001      	beq.n	8101dc6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8101dc2:	f000 f9c1 	bl	8102148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101dc6:	2360      	movs	r3, #96	@ 0x60
 8101dc8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 0;
 8101dca:	2300      	movs	r3, #0
 8101dcc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101dce:	2300      	movs	r3, #0
 8101dd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8101dd2:	2308      	movs	r3, #8
 8101dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101dd6:	2300      	movs	r3, #0
 8101dd8:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101dda:	2300      	movs	r3, #0
 8101ddc:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101dde:	2300      	movs	r3, #0
 8101de0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101de2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101de6:	2200      	movs	r2, #0
 8101de8:	4619      	mov	r1, r3
 8101dea:	4824      	ldr	r0, [pc, #144]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101dec:	f006 fb7c 	bl	81084e8 <HAL_TIM_PWM_ConfigChannel>
 8101df0:	4603      	mov	r3, r0
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d001      	beq.n	8101dfa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8101df6:	f000 f9a7 	bl	8102148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8101dfa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101dfe:	2204      	movs	r2, #4
 8101e00:	4619      	mov	r1, r3
 8101e02:	481e      	ldr	r0, [pc, #120]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101e04:	f006 fb70 	bl	81084e8 <HAL_TIM_PWM_ConfigChannel>
 8101e08:	4603      	mov	r3, r0
 8101e0a:	2b00      	cmp	r3, #0
 8101e0c:	d001      	beq.n	8101e12 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8101e0e:	f000 f99b 	bl	8102148 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8101e12:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8101e16:	2208      	movs	r2, #8
 8101e18:	4619      	mov	r1, r3
 8101e1a:	4818      	ldr	r0, [pc, #96]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101e1c:	f006 fb64 	bl	81084e8 <HAL_TIM_PWM_ConfigChannel>
 8101e20:	4603      	mov	r3, r0
 8101e22:	2b00      	cmp	r3, #0
 8101e24:	d001      	beq.n	8101e2a <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 8101e26:	f000 f98f 	bl	8102148 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101e2a:	2300      	movs	r3, #0
 8101e2c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101e2e:	2300      	movs	r3, #0
 8101e30:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8101e32:	2300      	movs	r3, #0
 8101e34:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101e36:	2300      	movs	r3, #0
 8101e38:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101e3a:	2300      	movs	r3, #0
 8101e3c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101e3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8101e42:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8101e44:	2300      	movs	r3, #0
 8101e46:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101e48:	2300      	movs	r3, #0
 8101e4a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101e4c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8101e50:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8101e52:	2300      	movs	r3, #0
 8101e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101e56:	2300      	movs	r3, #0
 8101e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101e5a:	1d3b      	adds	r3, r7, #4
 8101e5c:	4619      	mov	r1, r3
 8101e5e:	4807      	ldr	r0, [pc, #28]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101e60:	f007 fb62 	bl	8109528 <HAL_TIMEx_ConfigBreakDeadTime>
 8101e64:	4603      	mov	r3, r0
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d001      	beq.n	8101e6e <MX_TIM1_Init+0x172>
  {
    Error_Handler();
 8101e6a:	f000 f96d 	bl	8102148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101e6e:	4803      	ldr	r0, [pc, #12]	@ (8101e7c <MX_TIM1_Init+0x180>)
 8101e70:	f000 f9ce 	bl	8102210 <HAL_TIM_MspPostInit>

}
 8101e74:	bf00      	nop
 8101e76:	3768      	adds	r7, #104	@ 0x68
 8101e78:	46bd      	mov	sp, r7
 8101e7a:	bd80      	pop	{r7, pc}
 8101e7c:	100004e4 	.word	0x100004e4
 8101e80:	40010000 	.word	0x40010000

08101e84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8101e84:	b580      	push	{r7, lr}
 8101e86:	b08e      	sub	sp, #56	@ 0x38
 8101e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101e8a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101e8e:	2200      	movs	r2, #0
 8101e90:	601a      	str	r2, [r3, #0]
 8101e92:	605a      	str	r2, [r3, #4]
 8101e94:	609a      	str	r2, [r3, #8]
 8101e96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101e98:	f107 031c 	add.w	r3, r7, #28
 8101e9c:	2200      	movs	r2, #0
 8101e9e:	601a      	str	r2, [r3, #0]
 8101ea0:	605a      	str	r2, [r3, #4]
 8101ea2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101ea4:	463b      	mov	r3, r7
 8101ea6:	2200      	movs	r2, #0
 8101ea8:	601a      	str	r2, [r3, #0]
 8101eaa:	605a      	str	r2, [r3, #4]
 8101eac:	609a      	str	r2, [r3, #8]
 8101eae:	60da      	str	r2, [r3, #12]
 8101eb0:	611a      	str	r2, [r3, #16]
 8101eb2:	615a      	str	r2, [r3, #20]
 8101eb4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8101eb6:	4b2b      	ldr	r3, [pc, #172]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101eb8:	4a2b      	ldr	r2, [pc, #172]	@ (8101f68 <MX_TIM4_Init+0xe4>)
 8101eba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 240 - 1;
 8101ebc:	4b29      	ldr	r3, [pc, #164]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101ebe:	22ef      	movs	r2, #239	@ 0xef
 8101ec0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101ec2:	4b28      	ldr	r3, [pc, #160]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101ec4:	2200      	movs	r2, #0
 8101ec6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000 - 1;
 8101ec8:	4b26      	ldr	r3, [pc, #152]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101eca:	f242 720f 	movw	r2, #9999	@ 0x270f
 8101ece:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101ed0:	4b24      	ldr	r3, [pc, #144]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101ed2:	2200      	movs	r2, #0
 8101ed4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101ed6:	4b23      	ldr	r3, [pc, #140]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101ed8:	2200      	movs	r2, #0
 8101eda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8101edc:	4821      	ldr	r0, [pc, #132]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101ede:	f005 fe4b 	bl	8107b78 <HAL_TIM_Base_Init>
 8101ee2:	4603      	mov	r3, r0
 8101ee4:	2b00      	cmp	r3, #0
 8101ee6:	d001      	beq.n	8101eec <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8101ee8:	f000 f92e 	bl	8102148 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8101eec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8101ef0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8101ef2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8101ef6:	4619      	mov	r1, r3
 8101ef8:	481a      	ldr	r0, [pc, #104]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101efa:	f006 fc09 	bl	8108710 <HAL_TIM_ConfigClockSource>
 8101efe:	4603      	mov	r3, r0
 8101f00:	2b00      	cmp	r3, #0
 8101f02:	d001      	beq.n	8101f08 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8101f04:	f000 f920 	bl	8102148 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8101f08:	4816      	ldr	r0, [pc, #88]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101f0a:	f005 ff05 	bl	8107d18 <HAL_TIM_OC_Init>
 8101f0e:	4603      	mov	r3, r0
 8101f10:	2b00      	cmp	r3, #0
 8101f12:	d001      	beq.n	8101f18 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8101f14:	f000 f918 	bl	8102148 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101f18:	2300      	movs	r3, #0
 8101f1a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101f1c:	2300      	movs	r3, #0
 8101f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8101f20:	f107 031c 	add.w	r3, r7, #28
 8101f24:	4619      	mov	r1, r3
 8101f26:	480f      	ldr	r0, [pc, #60]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101f28:	f007 fa70 	bl	810940c <HAL_TIMEx_MasterConfigSynchronization>
 8101f2c:	4603      	mov	r3, r0
 8101f2e:	2b00      	cmp	r3, #0
 8101f30:	d001      	beq.n	8101f36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8101f32:	f000 f909 	bl	8102148 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8101f36:	2300      	movs	r3, #0
 8101f38:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8101f3a:	2300      	movs	r3, #0
 8101f3c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101f3e:	2300      	movs	r3, #0
 8101f40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8101f42:	2300      	movs	r3, #0
 8101f44:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8101f46:	463b      	mov	r3, r7
 8101f48:	2200      	movs	r2, #0
 8101f4a:	4619      	mov	r1, r3
 8101f4c:	4805      	ldr	r0, [pc, #20]	@ (8101f64 <MX_TIM4_Init+0xe0>)
 8101f4e:	f006 fa51 	bl	81083f4 <HAL_TIM_OC_ConfigChannel>
 8101f52:	4603      	mov	r3, r0
 8101f54:	2b00      	cmp	r3, #0
 8101f56:	d001      	beq.n	8101f5c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8101f58:	f000 f8f6 	bl	8102148 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8101f5c:	bf00      	nop
 8101f5e:	3738      	adds	r7, #56	@ 0x38
 8101f60:	46bd      	mov	sp, r7
 8101f62:	bd80      	pop	{r7, pc}
 8101f64:	10000530 	.word	0x10000530
 8101f68:	40000800 	.word	0x40000800

08101f6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8101f6c:	b580      	push	{r7, lr}
 8101f6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8101f70:	4b22      	ldr	r3, [pc, #136]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f72:	4a23      	ldr	r2, [pc, #140]	@ (8102000 <MX_USART1_UART_Init+0x94>)
 8101f74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8101f76:	4b21      	ldr	r3, [pc, #132]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8101f7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8101f7e:	4b1f      	ldr	r3, [pc, #124]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f80:	2200      	movs	r2, #0
 8101f82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8101f84:	4b1d      	ldr	r3, [pc, #116]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f86:	2200      	movs	r2, #0
 8101f88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8101f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f8c:	2200      	movs	r2, #0
 8101f8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8101f90:	4b1a      	ldr	r3, [pc, #104]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f92:	220c      	movs	r2, #12
 8101f94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8101f96:	4b19      	ldr	r3, [pc, #100]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f98:	2200      	movs	r2, #0
 8101f9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8101f9c:	4b17      	ldr	r3, [pc, #92]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101f9e:	2200      	movs	r2, #0
 8101fa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8101fa2:	4b16      	ldr	r3, [pc, #88]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fa4:	2200      	movs	r2, #0
 8101fa6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8101fa8:	4b14      	ldr	r3, [pc, #80]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101faa:	2200      	movs	r2, #0
 8101fac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8101fae:	4b13      	ldr	r3, [pc, #76]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fb0:	2200      	movs	r2, #0
 8101fb2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8101fb4:	4811      	ldr	r0, [pc, #68]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fb6:	f007 fb78 	bl	81096aa <HAL_UART_Init>
 8101fba:	4603      	mov	r3, r0
 8101fbc:	2b00      	cmp	r3, #0
 8101fbe:	d001      	beq.n	8101fc4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8101fc0:	f000 f8c2 	bl	8102148 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fc4:	2100      	movs	r1, #0
 8101fc6:	480d      	ldr	r0, [pc, #52]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fc8:	f009 fb36 	bl	810b638 <HAL_UARTEx_SetTxFifoThreshold>
 8101fcc:	4603      	mov	r3, r0
 8101fce:	2b00      	cmp	r3, #0
 8101fd0:	d001      	beq.n	8101fd6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8101fd2:	f000 f8b9 	bl	8102148 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8101fd6:	2100      	movs	r1, #0
 8101fd8:	4808      	ldr	r0, [pc, #32]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fda:	f009 fb6b 	bl	810b6b4 <HAL_UARTEx_SetRxFifoThreshold>
 8101fde:	4603      	mov	r3, r0
 8101fe0:	2b00      	cmp	r3, #0
 8101fe2:	d001      	beq.n	8101fe8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8101fe4:	f000 f8b0 	bl	8102148 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8101fe8:	4804      	ldr	r0, [pc, #16]	@ (8101ffc <MX_USART1_UART_Init+0x90>)
 8101fea:	f009 faec 	bl	810b5c6 <HAL_UARTEx_DisableFifoMode>
 8101fee:	4603      	mov	r3, r0
 8101ff0:	2b00      	cmp	r3, #0
 8101ff2:	d001      	beq.n	8101ff8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8101ff4:	f000 f8a8 	bl	8102148 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8101ff8:	bf00      	nop
 8101ffa:	bd80      	pop	{r7, pc}
 8101ffc:	1000057c 	.word	0x1000057c
 8102000:	40011000 	.word	0x40011000

08102004 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8102004:	b580      	push	{r7, lr}
 8102006:	b082      	sub	sp, #8
 8102008:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 810200a:	4b0d      	ldr	r3, [pc, #52]	@ (8102040 <MX_DMA_Init+0x3c>)
 810200c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102010:	4a0b      	ldr	r2, [pc, #44]	@ (8102040 <MX_DMA_Init+0x3c>)
 8102012:	f043 0301 	orr.w	r3, r3, #1
 8102016:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810201a:	4b09      	ldr	r3, [pc, #36]	@ (8102040 <MX_DMA_Init+0x3c>)
 810201c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102020:	f003 0301 	and.w	r3, r3, #1
 8102024:	607b      	str	r3, [r7, #4]
 8102026:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8102028:	2200      	movs	r2, #0
 810202a:	2105      	movs	r1, #5
 810202c:	200c      	movs	r0, #12
 810202e:	f000 fc51 	bl	81028d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8102032:	200c      	movs	r0, #12
 8102034:	f000 fc68 	bl	8102908 <HAL_NVIC_EnableIRQ>

}
 8102038:	bf00      	nop
 810203a:	3708      	adds	r7, #8
 810203c:	46bd      	mov	sp, r7
 810203e:	bd80      	pop	{r7, pc}
 8102040:	58024400 	.word	0x58024400

08102044 <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 8102044:	b480      	push	{r7}
 8102046:	b083      	sub	sp, #12
 8102048:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 810204a:	4b0a      	ldr	r3, [pc, #40]	@ (8102074 <MX_MDMA_Init+0x30>)
 810204c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102050:	4a08      	ldr	r2, [pc, #32]	@ (8102074 <MX_MDMA_Init+0x30>)
 8102052:	f043 0301 	orr.w	r3, r3, #1
 8102056:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 810205a:	4b06      	ldr	r3, [pc, #24]	@ (8102074 <MX_MDMA_Init+0x30>)
 810205c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102060:	f003 0301 	and.w	r3, r3, #1
 8102064:	607b      	str	r3, [r7, #4]
 8102066:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8102068:	bf00      	nop
 810206a:	370c      	adds	r7, #12
 810206c:	46bd      	mov	sp, r7
 810206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102072:	4770      	bx	lr
 8102074:	58024400 	.word	0x58024400

08102078 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102078:	b580      	push	{r7, lr}
 810207a:	b08a      	sub	sp, #40	@ 0x28
 810207c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810207e:	f107 0314 	add.w	r3, r7, #20
 8102082:	2200      	movs	r2, #0
 8102084:	601a      	str	r2, [r3, #0]
 8102086:	605a      	str	r2, [r3, #4]
 8102088:	609a      	str	r2, [r3, #8]
 810208a:	60da      	str	r2, [r3, #12]
 810208c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810208e:	4b28      	ldr	r3, [pc, #160]	@ (8102130 <MX_GPIO_Init+0xb8>)
 8102090:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102094:	4a26      	ldr	r2, [pc, #152]	@ (8102130 <MX_GPIO_Init+0xb8>)
 8102096:	f043 0301 	orr.w	r3, r3, #1
 810209a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810209e:	4b24      	ldr	r3, [pc, #144]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020a4:	f003 0301 	and.w	r3, r3, #1
 81020a8:	613b      	str	r3, [r7, #16]
 81020aa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 81020ac:	4b20      	ldr	r3, [pc, #128]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020b2:	4a1f      	ldr	r2, [pc, #124]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 81020b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81020c6:	60fb      	str	r3, [r7, #12]
 81020c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 81020ca:	4b19      	ldr	r3, [pc, #100]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020d0:	4a17      	ldr	r2, [pc, #92]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81020d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020da:	4b15      	ldr	r3, [pc, #84]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81020e4:	60bb      	str	r3, [r7, #8]
 81020e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81020e8:	4b11      	ldr	r3, [pc, #68]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020ee:	4a10      	ldr	r2, [pc, #64]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020f0:	f043 0302 	orr.w	r3, r3, #2
 81020f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020f8:	4b0d      	ldr	r3, [pc, #52]	@ (8102130 <MX_GPIO_Init+0xb8>)
 81020fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020fe:	f003 0302 	and.w	r3, r3, #2
 8102102:	607b      	str	r3, [r7, #4]
 8102104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8102106:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 810210a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810210c:	2302      	movs	r3, #2
 810210e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102110:	2300      	movs	r3, #0
 8102112:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8102114:	2300      	movs	r3, #0
 8102116:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_UART4;
 8102118:	2306      	movs	r3, #6
 810211a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810211c:	f107 0314 	add.w	r3, r7, #20
 8102120:	4619      	mov	r1, r3
 8102122:	4804      	ldr	r0, [pc, #16]	@ (8102134 <MX_GPIO_Init+0xbc>)
 8102124:	f003 fa58 	bl	81055d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8102128:	bf00      	nop
 810212a:	3728      	adds	r7, #40	@ 0x28
 810212c:	46bd      	mov	sp, r7
 810212e:	bd80      	pop	{r7, pc}
 8102130:	58024400 	.word	0x58024400
 8102134:	58020000 	.word	0x58020000

08102138 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8102138:	b580      	push	{r7, lr}
 810213a:	b082      	sub	sp, #8
 810213c:	af00      	add	r7, sp, #0
 810213e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8102140:	2001      	movs	r0, #1
 8102142:	f009 fdce 	bl	810bce2 <osDelay>
 8102146:	e7fb      	b.n	8102140 <StartDefaultTask+0x8>

08102148 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102148:	b480      	push	{r7}
 810214a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810214c:	b672      	cpsid	i
}
 810214e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102150:	bf00      	nop
 8102152:	e7fd      	b.n	8102150 <Error_Handler+0x8>

08102154 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8102154:	b580      	push	{r7, lr}
 8102156:	b082      	sub	sp, #8
 8102158:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810215a:	4b0c      	ldr	r3, [pc, #48]	@ (810218c <HAL_MspInit+0x38>)
 810215c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102160:	4a0a      	ldr	r2, [pc, #40]	@ (810218c <HAL_MspInit+0x38>)
 8102162:	f043 0302 	orr.w	r3, r3, #2
 8102166:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810216a:	4b08      	ldr	r3, [pc, #32]	@ (810218c <HAL_MspInit+0x38>)
 810216c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102170:	f003 0302 	and.w	r3, r3, #2
 8102174:	607b      	str	r3, [r7, #4]
 8102176:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8102178:	2200      	movs	r2, #0
 810217a:	210f      	movs	r1, #15
 810217c:	f06f 0001 	mvn.w	r0, #1
 8102180:	f000 fba8 	bl	81028d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102184:	bf00      	nop
 8102186:	3708      	adds	r7, #8
 8102188:	46bd      	mov	sp, r7
 810218a:	bd80      	pop	{r7, pc}
 810218c:	58024400 	.word	0x58024400

08102190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8102190:	b580      	push	{r7, lr}
 8102192:	b084      	sub	sp, #16
 8102194:	af00      	add	r7, sp, #0
 8102196:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	681b      	ldr	r3, [r3, #0]
 810219c:	4a19      	ldr	r2, [pc, #100]	@ (8102204 <HAL_TIM_Base_MspInit+0x74>)
 810219e:	4293      	cmp	r3, r2
 81021a0:	d10f      	bne.n	81021c2 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81021a2:	4b19      	ldr	r3, [pc, #100]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81021a8:	4a17      	ldr	r2, [pc, #92]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021aa:	f043 0301 	orr.w	r3, r3, #1
 81021ae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 81021b2:	4b15      	ldr	r3, [pc, #84]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 81021b8:	f003 0301 	and.w	r3, r3, #1
 81021bc:	60fb      	str	r3, [r7, #12]
 81021be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 81021c0:	e01b      	b.n	81021fa <HAL_TIM_Base_MspInit+0x6a>
  else if(htim_base->Instance==TIM4)
 81021c2:	687b      	ldr	r3, [r7, #4]
 81021c4:	681b      	ldr	r3, [r3, #0]
 81021c6:	4a11      	ldr	r2, [pc, #68]	@ (810220c <HAL_TIM_Base_MspInit+0x7c>)
 81021c8:	4293      	cmp	r3, r2
 81021ca:	d116      	bne.n	81021fa <HAL_TIM_Base_MspInit+0x6a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 81021cc:	4b0e      	ldr	r3, [pc, #56]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81021d2:	4a0d      	ldr	r2, [pc, #52]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021d4:	f043 0304 	orr.w	r3, r3, #4
 81021d8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81021dc:	4b0a      	ldr	r3, [pc, #40]	@ (8102208 <HAL_TIM_Base_MspInit+0x78>)
 81021de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81021e2:	f003 0304 	and.w	r3, r3, #4
 81021e6:	60bb      	str	r3, [r7, #8]
 81021e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 81021ea:	2200      	movs	r2, #0
 81021ec:	2105      	movs	r1, #5
 81021ee:	201e      	movs	r0, #30
 81021f0:	f000 fb70 	bl	81028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 81021f4:	201e      	movs	r0, #30
 81021f6:	f000 fb87 	bl	8102908 <HAL_NVIC_EnableIRQ>
}
 81021fa:	bf00      	nop
 81021fc:	3710      	adds	r7, #16
 81021fe:	46bd      	mov	sp, r7
 8102200:	bd80      	pop	{r7, pc}
 8102202:	bf00      	nop
 8102204:	40010000 	.word	0x40010000
 8102208:	58024400 	.word	0x58024400
 810220c:	40000800 	.word	0x40000800

08102210 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8102210:	b580      	push	{r7, lr}
 8102212:	b08a      	sub	sp, #40	@ 0x28
 8102214:	af00      	add	r7, sp, #0
 8102216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102218:	f107 0314 	add.w	r3, r7, #20
 810221c:	2200      	movs	r2, #0
 810221e:	601a      	str	r2, [r3, #0]
 8102220:	605a      	str	r2, [r3, #4]
 8102222:	609a      	str	r2, [r3, #8]
 8102224:	60da      	str	r2, [r3, #12]
 8102226:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8102228:	687b      	ldr	r3, [r7, #4]
 810222a:	681b      	ldr	r3, [r3, #0]
 810222c:	4a22      	ldr	r2, [pc, #136]	@ (81022b8 <HAL_TIM_MspPostInit+0xa8>)
 810222e:	4293      	cmp	r3, r2
 8102230:	d13e      	bne.n	81022b0 <HAL_TIM_MspPostInit+0xa0>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8102232:	4b22      	ldr	r3, [pc, #136]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 8102234:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102238:	4a20      	ldr	r2, [pc, #128]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 810223a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 810223e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102242:	4b1e      	ldr	r3, [pc, #120]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 8102244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102248:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 810224c:	613b      	str	r3, [r7, #16]
 810224e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8102250:	4b1a      	ldr	r3, [pc, #104]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 8102252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102256:	4a19      	ldr	r2, [pc, #100]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 8102258:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 810225c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102260:	4b16      	ldr	r3, [pc, #88]	@ (81022bc <HAL_TIM_MspPostInit+0xac>)
 8102262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102266:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 810226a:	60fb      	str	r3, [r7, #12]
 810226c:	68fb      	ldr	r3, [r7, #12]
    PJ11     ------> TIM1_CH2
    PJ10     ------> TIM1_CH2N
    PJ9     ------> TIM1_CH3
    PJ8     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 810226e:	2303      	movs	r3, #3
 8102270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102272:	2302      	movs	r3, #2
 8102274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102276:	2300      	movs	r3, #0
 8102278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810227a:	2300      	movs	r3, #0
 810227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 810227e:	2301      	movs	r3, #1
 8102280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8102282:	f107 0314 	add.w	r3, r7, #20
 8102286:	4619      	mov	r1, r3
 8102288:	480d      	ldr	r0, [pc, #52]	@ (81022c0 <HAL_TIM_MspPostInit+0xb0>)
 810228a:	f003 f9a5 	bl	81055d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 810228e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8102292:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102294:	2302      	movs	r3, #2
 8102296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102298:	2300      	movs	r3, #0
 810229a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810229c:	2300      	movs	r3, #0
 810229e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81022a0:	2301      	movs	r3, #1
 81022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 81022a4:	f107 0314 	add.w	r3, r7, #20
 81022a8:	4619      	mov	r1, r3
 81022aa:	4806      	ldr	r0, [pc, #24]	@ (81022c4 <HAL_TIM_MspPostInit+0xb4>)
 81022ac:	f003 f994 	bl	81055d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 81022b0:	bf00      	nop
 81022b2:	3728      	adds	r7, #40	@ 0x28
 81022b4:	46bd      	mov	sp, r7
 81022b6:	bd80      	pop	{r7, pc}
 81022b8:	40010000 	.word	0x40010000
 81022bc:	58024400 	.word	0x58024400
 81022c0:	58022800 	.word	0x58022800
 81022c4:	58022400 	.word	0x58022400

081022c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81022c8:	b580      	push	{r7, lr}
 81022ca:	b0bc      	sub	sp, #240	@ 0xf0
 81022cc:	af00      	add	r7, sp, #0
 81022ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81022d0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81022d4:	2200      	movs	r2, #0
 81022d6:	601a      	str	r2, [r3, #0]
 81022d8:	605a      	str	r2, [r3, #4]
 81022da:	609a      	str	r2, [r3, #8]
 81022dc:	60da      	str	r2, [r3, #12]
 81022de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81022e0:	f107 0310 	add.w	r3, r7, #16
 81022e4:	22c8      	movs	r2, #200	@ 0xc8
 81022e6:	2100      	movs	r1, #0
 81022e8:	4618      	mov	r0, r3
 81022ea:	f00c fefd 	bl	810f0e8 <memset>
  if(huart->Instance==USART1)
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	681b      	ldr	r3, [r3, #0]
 81022f2:	4a42      	ldr	r2, [pc, #264]	@ (81023fc <HAL_UART_MspInit+0x134>)
 81022f4:	4293      	cmp	r3, r2
 81022f6:	d17d      	bne.n	81023f4 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 81022f8:	f04f 0201 	mov.w	r2, #1
 81022fc:	f04f 0300 	mov.w	r3, #0
 8102300:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8102304:	2300      	movs	r3, #0
 8102306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810230a:	f107 0310 	add.w	r3, r7, #16
 810230e:	4618      	mov	r0, r3
 8102310:	f003 fdc6 	bl	8105ea0 <HAL_RCCEx_PeriphCLKConfig>
 8102314:	4603      	mov	r3, r0
 8102316:	2b00      	cmp	r3, #0
 8102318:	d001      	beq.n	810231e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810231a:	f7ff ff15 	bl	8102148 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 810231e:	4b38      	ldr	r3, [pc, #224]	@ (8102400 <HAL_UART_MspInit+0x138>)
 8102320:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102324:	4a36      	ldr	r2, [pc, #216]	@ (8102400 <HAL_UART_MspInit+0x138>)
 8102326:	f043 0310 	orr.w	r3, r3, #16
 810232a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 810232e:	4b34      	ldr	r3, [pc, #208]	@ (8102400 <HAL_UART_MspInit+0x138>)
 8102330:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8102334:	f003 0310 	and.w	r3, r3, #16
 8102338:	60fb      	str	r3, [r7, #12]
 810233a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810233c:	4b30      	ldr	r3, [pc, #192]	@ (8102400 <HAL_UART_MspInit+0x138>)
 810233e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102342:	4a2f      	ldr	r2, [pc, #188]	@ (8102400 <HAL_UART_MspInit+0x138>)
 8102344:	f043 0302 	orr.w	r3, r3, #2
 8102348:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810234c:	4b2c      	ldr	r3, [pc, #176]	@ (8102400 <HAL_UART_MspInit+0x138>)
 810234e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102352:	f003 0302 	and.w	r3, r3, #2
 8102356:	60bb      	str	r3, [r7, #8]
 8102358:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14;
 810235a:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 810235e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102362:	2302      	movs	r3, #2
 8102364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102368:	2300      	movs	r3, #0
 810236a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810236e:	2300      	movs	r3, #0
 8102370:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8102374:	2304      	movs	r3, #4
 8102376:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810237a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810237e:	4619      	mov	r1, r3
 8102380:	4820      	ldr	r0, [pc, #128]	@ (8102404 <HAL_UART_MspInit+0x13c>)
 8102382:	f003 f929 	bl	81055d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Stream1;
 8102386:	4b20      	ldr	r3, [pc, #128]	@ (8102408 <HAL_UART_MspInit+0x140>)
 8102388:	4a20      	ldr	r2, [pc, #128]	@ (810240c <HAL_UART_MspInit+0x144>)
 810238a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 810238c:	4b1e      	ldr	r3, [pc, #120]	@ (8102408 <HAL_UART_MspInit+0x140>)
 810238e:	2229      	movs	r2, #41	@ 0x29
 8102390:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8102392:	4b1d      	ldr	r3, [pc, #116]	@ (8102408 <HAL_UART_MspInit+0x140>)
 8102394:	2200      	movs	r2, #0
 8102396:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8102398:	4b1b      	ldr	r3, [pc, #108]	@ (8102408 <HAL_UART_MspInit+0x140>)
 810239a:	2200      	movs	r2, #0
 810239c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 810239e:	4b1a      	ldr	r3, [pc, #104]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81023a4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 81023a6:	4b18      	ldr	r3, [pc, #96]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023a8:	2200      	movs	r2, #0
 81023aa:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 81023ac:	4b16      	ldr	r3, [pc, #88]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023ae:	2200      	movs	r2, #0
 81023b0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 81023b2:	4b15      	ldr	r3, [pc, #84]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81023b8:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 81023ba:	4b13      	ldr	r3, [pc, #76]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023bc:	2200      	movs	r2, #0
 81023be:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 81023c0:	4b11      	ldr	r3, [pc, #68]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023c2:	2200      	movs	r2, #0
 81023c4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 81023c6:	4810      	ldr	r0, [pc, #64]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023c8:	f000 fac0 	bl	810294c <HAL_DMA_Init>
 81023cc:	4603      	mov	r3, r0
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d001      	beq.n	81023d6 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 81023d2:	f7ff feb9 	bl	8102148 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 81023d6:	687b      	ldr	r3, [r7, #4]
 81023d8:	4a0b      	ldr	r2, [pc, #44]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023da:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 81023de:	4a0a      	ldr	r2, [pc, #40]	@ (8102408 <HAL_UART_MspInit+0x140>)
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 81023e4:	2200      	movs	r2, #0
 81023e6:	2105      	movs	r1, #5
 81023e8:	2025      	movs	r0, #37	@ 0x25
 81023ea:	f000 fa73 	bl	81028d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 81023ee:	2025      	movs	r0, #37	@ 0x25
 81023f0:	f000 fa8a 	bl	8102908 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 81023f4:	bf00      	nop
 81023f6:	37f0      	adds	r7, #240	@ 0xf0
 81023f8:	46bd      	mov	sp, r7
 81023fa:	bd80      	pop	{r7, pc}
 81023fc:	40011000 	.word	0x40011000
 8102400:	58024400 	.word	0x58024400
 8102404:	58020400 	.word	0x58020400
 8102408:	10000610 	.word	0x10000610
 810240c:	40020028 	.word	0x40020028

08102410 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102410:	b580      	push	{r7, lr}
 8102412:	b090      	sub	sp, #64	@ 0x40
 8102414:	af00      	add	r7, sp, #0
 8102416:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM5 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102418:	687b      	ldr	r3, [r7, #4]
 810241a:	2b0f      	cmp	r3, #15
 810241c:	d827      	bhi.n	810246e <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority ,0);
 810241e:	2200      	movs	r2, #0
 8102420:	6879      	ldr	r1, [r7, #4]
 8102422:	2032      	movs	r0, #50	@ 0x32
 8102424:	f000 fa56 	bl	81028d4 <HAL_NVIC_SetPriority>

     /* Enable the TIM5 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8102428:	2032      	movs	r0, #50	@ 0x32
 810242a:	f000 fa6d 	bl	8102908 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 810242e:	4a29      	ldr	r2, [pc, #164]	@ (81024d4 <HAL_InitTick+0xc4>)
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8102434:	4b28      	ldr	r3, [pc, #160]	@ (81024d8 <HAL_InitTick+0xc8>)
 8102436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810243a:	4a27      	ldr	r2, [pc, #156]	@ (81024d8 <HAL_InitTick+0xc8>)
 810243c:	f043 0308 	orr.w	r3, r3, #8
 8102440:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8102444:	4b24      	ldr	r3, [pc, #144]	@ (81024d8 <HAL_InitTick+0xc8>)
 8102446:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810244a:	f003 0308 	and.w	r3, r3, #8
 810244e:	60fb      	str	r3, [r7, #12]
 8102450:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8102452:	f107 0210 	add.w	r2, r7, #16
 8102456:	f107 0314 	add.w	r3, r7, #20
 810245a:	4611      	mov	r1, r2
 810245c:	4618      	mov	r0, r3
 810245e:	f003 fcdd 	bl	8105e1c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8102462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102464:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8102466:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102468:	2b00      	cmp	r3, #0
 810246a:	d106      	bne.n	810247a <HAL_InitTick+0x6a>
 810246c:	e001      	b.n	8102472 <HAL_InitTick+0x62>
    return HAL_ERROR;
 810246e:	2301      	movs	r3, #1
 8102470:	e02b      	b.n	81024ca <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8102472:	f003 fca7 	bl	8105dc4 <HAL_RCC_GetPCLK1Freq>
 8102476:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102478:	e004      	b.n	8102484 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 810247a:	f003 fca3 	bl	8105dc4 <HAL_RCC_GetPCLK1Freq>
 810247e:	4603      	mov	r3, r0
 8102480:	005b      	lsls	r3, r3, #1
 8102482:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8102484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8102486:	4a15      	ldr	r2, [pc, #84]	@ (81024dc <HAL_InitTick+0xcc>)
 8102488:	fba2 2303 	umull	r2, r3, r2, r3
 810248c:	0c9b      	lsrs	r3, r3, #18
 810248e:	3b01      	subs	r3, #1
 8102490:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8102492:	4b13      	ldr	r3, [pc, #76]	@ (81024e0 <HAL_InitTick+0xd0>)
 8102494:	4a13      	ldr	r2, [pc, #76]	@ (81024e4 <HAL_InitTick+0xd4>)
 8102496:	601a      	str	r2, [r3, #0]
  + Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8102498:	4b11      	ldr	r3, [pc, #68]	@ (81024e0 <HAL_InitTick+0xd0>)
 810249a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 810249e:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 81024a0:	4a0f      	ldr	r2, [pc, #60]	@ (81024e0 <HAL_InitTick+0xd0>)
 81024a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81024a4:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 81024a6:	4b0e      	ldr	r3, [pc, #56]	@ (81024e0 <HAL_InitTick+0xd0>)
 81024a8:	2200      	movs	r2, #0
 81024aa:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024ac:	4b0c      	ldr	r3, [pc, #48]	@ (81024e0 <HAL_InitTick+0xd0>)
 81024ae:	2200      	movs	r2, #0
 81024b0:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim5) == HAL_OK)
 81024b2:	480b      	ldr	r0, [pc, #44]	@ (81024e0 <HAL_InitTick+0xd0>)
 81024b4:	f005 fb60 	bl	8107b78 <HAL_TIM_Base_Init>
 81024b8:	4603      	mov	r3, r0
 81024ba:	2b00      	cmp	r3, #0
 81024bc:	d104      	bne.n	81024c8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim5);
 81024be:	4808      	ldr	r0, [pc, #32]	@ (81024e0 <HAL_InitTick+0xd0>)
 81024c0:	f005 fbb2 	bl	8107c28 <HAL_TIM_Base_Start_IT>
 81024c4:	4603      	mov	r3, r0
 81024c6:	e000      	b.n	81024ca <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81024c8:	2301      	movs	r3, #1
}
 81024ca:	4618      	mov	r0, r3
 81024cc:	3740      	adds	r7, #64	@ 0x40
 81024ce:	46bd      	mov	sp, r7
 81024d0:	bd80      	pop	{r7, pc}
 81024d2:	bf00      	nop
 81024d4:	1000012c 	.word	0x1000012c
 81024d8:	58024400 	.word	0x58024400
 81024dc:	431bde83 	.word	0x431bde83
 81024e0:	1000069c 	.word	0x1000069c
 81024e4:	40000c00 	.word	0x40000c00

081024e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81024e8:	b480      	push	{r7}
 81024ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81024ec:	bf00      	nop
 81024ee:	e7fd      	b.n	81024ec <NMI_Handler+0x4>

081024f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81024f0:	b480      	push	{r7}
 81024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81024f4:	bf00      	nop
 81024f6:	e7fd      	b.n	81024f4 <HardFault_Handler+0x4>

081024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81024f8:	b480      	push	{r7}
 81024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81024fc:	bf00      	nop
 81024fe:	e7fd      	b.n	81024fc <MemManage_Handler+0x4>

08102500 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102500:	b480      	push	{r7}
 8102502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8102504:	bf00      	nop
 8102506:	e7fd      	b.n	8102504 <BusFault_Handler+0x4>

08102508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102508:	b480      	push	{r7}
 810250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810250c:	bf00      	nop
 810250e:	e7fd      	b.n	810250c <UsageFault_Handler+0x4>

08102510 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102510:	b480      	push	{r7}
 8102512:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8102514:	bf00      	nop
 8102516:	46bd      	mov	sp, r7
 8102518:	f85d 7b04 	ldr.w	r7, [sp], #4
 810251c:	4770      	bx	lr
	...

08102520 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8102520:	b580      	push	{r7, lr}
 8102522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8102524:	4802      	ldr	r0, [pc, #8]	@ (8102530 <DMA1_Stream1_IRQHandler+0x10>)
 8102526:	f001 fd39 	bl	8103f9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 810252a:	bf00      	nop
 810252c:	bd80      	pop	{r7, pc}
 810252e:	bf00      	nop
 8102530:	10000610 	.word	0x10000610

08102534 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8102534:	b580      	push	{r7, lr}
 8102536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8102538:	4802      	ldr	r0, [pc, #8]	@ (8102544 <TIM4_IRQHandler+0x10>)
 810253a:	f005 fe53 	bl	81081e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 810253e:	bf00      	nop
 8102540:	bd80      	pop	{r7, pc}
 8102542:	bf00      	nop
 8102544:	10000530 	.word	0x10000530

08102548 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8102548:	b580      	push	{r7, lr}
 810254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 810254c:	4802      	ldr	r0, [pc, #8]	@ (8102558 <USART1_IRQHandler+0x10>)
 810254e:	f007 fa97 	bl	8109a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8102552:	bf00      	nop
 8102554:	bd80      	pop	{r7, pc}
 8102556:	bf00      	nop
 8102558:	1000057c 	.word	0x1000057c

0810255c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 810255c:	b580      	push	{r7, lr}
 810255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8102560:	4802      	ldr	r0, [pc, #8]	@ (810256c <TIM5_IRQHandler+0x10>)
 8102562:	f005 fe3f 	bl	81081e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8102566:	bf00      	nop
 8102568:	bd80      	pop	{r7, pc}
 810256a:	bf00      	nop
 810256c:	1000069c 	.word	0x1000069c

08102570 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8102570:	b580      	push	{r7, lr}
 8102572:	b086      	sub	sp, #24
 8102574:	af00      	add	r7, sp, #0
 8102576:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8102578:	4a14      	ldr	r2, [pc, #80]	@ (81025cc <_sbrk+0x5c>)
 810257a:	4b15      	ldr	r3, [pc, #84]	@ (81025d0 <_sbrk+0x60>)
 810257c:	1ad3      	subs	r3, r2, r3
 810257e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8102580:	697b      	ldr	r3, [r7, #20]
 8102582:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8102584:	4b13      	ldr	r3, [pc, #76]	@ (81025d4 <_sbrk+0x64>)
 8102586:	681b      	ldr	r3, [r3, #0]
 8102588:	2b00      	cmp	r3, #0
 810258a:	d102      	bne.n	8102592 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 810258c:	4b11      	ldr	r3, [pc, #68]	@ (81025d4 <_sbrk+0x64>)
 810258e:	4a12      	ldr	r2, [pc, #72]	@ (81025d8 <_sbrk+0x68>)
 8102590:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8102592:	4b10      	ldr	r3, [pc, #64]	@ (81025d4 <_sbrk+0x64>)
 8102594:	681a      	ldr	r2, [r3, #0]
 8102596:	687b      	ldr	r3, [r7, #4]
 8102598:	4413      	add	r3, r2
 810259a:	693a      	ldr	r2, [r7, #16]
 810259c:	429a      	cmp	r2, r3
 810259e:	d207      	bcs.n	81025b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81025a0:	f00c fe36 	bl	810f210 <__errno>
 81025a4:	4603      	mov	r3, r0
 81025a6:	220c      	movs	r2, #12
 81025a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81025aa:	f04f 33ff 	mov.w	r3, #4294967295
 81025ae:	e009      	b.n	81025c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81025b0:	4b08      	ldr	r3, [pc, #32]	@ (81025d4 <_sbrk+0x64>)
 81025b2:	681b      	ldr	r3, [r3, #0]
 81025b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81025b6:	4b07      	ldr	r3, [pc, #28]	@ (81025d4 <_sbrk+0x64>)
 81025b8:	681a      	ldr	r2, [r3, #0]
 81025ba:	687b      	ldr	r3, [r7, #4]
 81025bc:	4413      	add	r3, r2
 81025be:	4a05      	ldr	r2, [pc, #20]	@ (81025d4 <_sbrk+0x64>)
 81025c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81025c2:	68fb      	ldr	r3, [r7, #12]
}
 81025c4:	4618      	mov	r0, r3
 81025c6:	3718      	adds	r7, #24
 81025c8:	46bd      	mov	sp, r7
 81025ca:	bd80      	pop	{r7, pc}
 81025cc:	10048000 	.word	0x10048000
 81025d0:	00001000 	.word	0x00001000
 81025d4:	100006e8 	.word	0x100006e8
 81025d8:	10005220 	.word	0x10005220

081025dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81025dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8102614 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81025e0:	f000 f826 	bl	8102630 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81025e4:	480c      	ldr	r0, [pc, #48]	@ (8102618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81025e6:	490d      	ldr	r1, [pc, #52]	@ (810261c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8102620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 81025ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81025ec:	e002      	b.n	81025f4 <LoopCopyDataInit>

081025ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81025ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81025f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81025f2:	3304      	adds	r3, #4

081025f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81025f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81025f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81025f8:	d3f9      	bcc.n	81025ee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81025fa:	4a0a      	ldr	r2, [pc, #40]	@ (8102624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81025fc:	4c0a      	ldr	r4, [pc, #40]	@ (8102628 <LoopFillZerobss+0x22>)
  movs r3, #0
 81025fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8102600:	e001      	b.n	8102606 <LoopFillZerobss>

08102602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8102602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8102604:	3204      	adds	r2, #4

08102606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8102606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8102608:	d3fb      	bcc.n	8102602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810260a:	f00c fe07 	bl	810f21c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810260e:	f7ff fa71 	bl	8101af4 <main>
  bx  lr
 8102612:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8102614:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8102618:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810261c:	10000188 	.word	0x10000188
  ldr r2, =_sidata
 8102620:	0810fecc 	.word	0x0810fecc
  ldr r2, =_sbss
 8102624:	10000188 	.word	0x10000188
  ldr r4, =_ebss
 8102628:	10005220 	.word	0x10005220

0810262c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 810262c:	e7fe      	b.n	810262c <ADC3_IRQHandler>
	...

08102630 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8102630:	b480      	push	{r7}
 8102632:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8102634:	4b0b      	ldr	r3, [pc, #44]	@ (8102664 <SystemInit+0x34>)
 8102636:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810263a:	4a0a      	ldr	r2, [pc, #40]	@ (8102664 <SystemInit+0x34>)
 810263c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8102640:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8102644:	4b07      	ldr	r3, [pc, #28]	@ (8102664 <SystemInit+0x34>)
 8102646:	691b      	ldr	r3, [r3, #16]
 8102648:	4a06      	ldr	r2, [pc, #24]	@ (8102664 <SystemInit+0x34>)
 810264a:	f043 0310 	orr.w	r3, r3, #16
 810264e:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8102650:	4b04      	ldr	r3, [pc, #16]	@ (8102664 <SystemInit+0x34>)
 8102652:	f04f 6201 	mov.w	r2, #135266304	@ 0x8100000
 8102656:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8102658:	bf00      	nop
 810265a:	46bd      	mov	sp, r7
 810265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102660:	4770      	bx	lr
 8102662:	bf00      	nop
 8102664:	e000ed00 	.word	0xe000ed00

08102668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8102668:	b580      	push	{r7, lr}
 810266a:	b082      	sub	sp, #8
 810266c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810266e:	4b28      	ldr	r3, [pc, #160]	@ (8102710 <HAL_Init+0xa8>)
 8102670:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102674:	4a26      	ldr	r2, [pc, #152]	@ (8102710 <HAL_Init+0xa8>)
 8102676:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 810267a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810267e:	4b24      	ldr	r3, [pc, #144]	@ (8102710 <HAL_Init+0xa8>)
 8102680:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102684:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102688:	603b      	str	r3, [r7, #0]
 810268a:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 810268c:	4b21      	ldr	r3, [pc, #132]	@ (8102714 <HAL_Init+0xac>)
 810268e:	681b      	ldr	r3, [r3, #0]
 8102690:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8102694:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102698:	4a1e      	ldr	r2, [pc, #120]	@ (8102714 <HAL_Init+0xac>)
 810269a:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 810269e:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81026a0:	4b1c      	ldr	r3, [pc, #112]	@ (8102714 <HAL_Init+0xac>)
 81026a2:	681b      	ldr	r3, [r3, #0]
 81026a4:	4a1b      	ldr	r2, [pc, #108]	@ (8102714 <HAL_Init+0xac>)
 81026a6:	f043 0301 	orr.w	r3, r3, #1
 81026aa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81026ac:	2003      	movs	r0, #3
 81026ae:	f000 f906 	bl	81028be <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81026b2:	f003 f9db 	bl	8105a6c <HAL_RCC_GetSysClockFreq>
 81026b6:	4602      	mov	r2, r0
 81026b8:	4b15      	ldr	r3, [pc, #84]	@ (8102710 <HAL_Init+0xa8>)
 81026ba:	699b      	ldr	r3, [r3, #24]
 81026bc:	0a1b      	lsrs	r3, r3, #8
 81026be:	f003 030f 	and.w	r3, r3, #15
 81026c2:	4915      	ldr	r1, [pc, #84]	@ (8102718 <HAL_Init+0xb0>)
 81026c4:	5ccb      	ldrb	r3, [r1, r3]
 81026c6:	f003 031f 	and.w	r3, r3, #31
 81026ca:	fa22 f303 	lsr.w	r3, r2, r3
 81026ce:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81026d0:	4b0f      	ldr	r3, [pc, #60]	@ (8102710 <HAL_Init+0xa8>)
 81026d2:	699b      	ldr	r3, [r3, #24]
 81026d4:	f003 030f 	and.w	r3, r3, #15
 81026d8:	4a0f      	ldr	r2, [pc, #60]	@ (8102718 <HAL_Init+0xb0>)
 81026da:	5cd3      	ldrb	r3, [r2, r3]
 81026dc:	f003 031f 	and.w	r3, r3, #31
 81026e0:	687a      	ldr	r2, [r7, #4]
 81026e2:	fa22 f303 	lsr.w	r3, r2, r3
 81026e6:	4a0d      	ldr	r2, [pc, #52]	@ (810271c <HAL_Init+0xb4>)
 81026e8:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81026ea:	4b0c      	ldr	r3, [pc, #48]	@ (810271c <HAL_Init+0xb4>)
 81026ec:	681b      	ldr	r3, [r3, #0]
 81026ee:	4a0c      	ldr	r2, [pc, #48]	@ (8102720 <HAL_Init+0xb8>)
 81026f0:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81026f2:	200f      	movs	r0, #15
 81026f4:	f7ff fe8c 	bl	8102410 <HAL_InitTick>
 81026f8:	4603      	mov	r3, r0
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d001      	beq.n	8102702 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81026fe:	2301      	movs	r3, #1
 8102700:	e002      	b.n	8102708 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8102702:	f7ff fd27 	bl	8102154 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8102706:	2300      	movs	r3, #0
}
 8102708:	4618      	mov	r0, r3
 810270a:	3708      	adds	r7, #8
 810270c:	46bd      	mov	sp, r7
 810270e:	bd80      	pop	{r7, pc}
 8102710:	58024400 	.word	0x58024400
 8102714:	40024400 	.word	0x40024400
 8102718:	0810fe48 	.word	0x0810fe48
 810271c:	10000128 	.word	0x10000128
 8102720:	10000124 	.word	0x10000124

08102724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8102724:	b480      	push	{r7}
 8102726:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8102728:	4b06      	ldr	r3, [pc, #24]	@ (8102744 <HAL_IncTick+0x20>)
 810272a:	781b      	ldrb	r3, [r3, #0]
 810272c:	461a      	mov	r2, r3
 810272e:	4b06      	ldr	r3, [pc, #24]	@ (8102748 <HAL_IncTick+0x24>)
 8102730:	681b      	ldr	r3, [r3, #0]
 8102732:	4413      	add	r3, r2
 8102734:	4a04      	ldr	r2, [pc, #16]	@ (8102748 <HAL_IncTick+0x24>)
 8102736:	6013      	str	r3, [r2, #0]
}
 8102738:	bf00      	nop
 810273a:	46bd      	mov	sp, r7
 810273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102740:	4770      	bx	lr
 8102742:	bf00      	nop
 8102744:	10000130 	.word	0x10000130
 8102748:	100006ec 	.word	0x100006ec

0810274c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810274c:	b480      	push	{r7}
 810274e:	af00      	add	r7, sp, #0
  return uwTick;
 8102750:	4b03      	ldr	r3, [pc, #12]	@ (8102760 <HAL_GetTick+0x14>)
 8102752:	681b      	ldr	r3, [r3, #0]
}
 8102754:	4618      	mov	r0, r3
 8102756:	46bd      	mov	sp, r7
 8102758:	f85d 7b04 	ldr.w	r7, [sp], #4
 810275c:	4770      	bx	lr
 810275e:	bf00      	nop
 8102760:	100006ec 	.word	0x100006ec

08102764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102764:	b480      	push	{r7}
 8102766:	b085      	sub	sp, #20
 8102768:	af00      	add	r7, sp, #0
 810276a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810276c:	687b      	ldr	r3, [r7, #4]
 810276e:	f003 0307 	and.w	r3, r3, #7
 8102772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102774:	4b0c      	ldr	r3, [pc, #48]	@ (81027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8102776:	68db      	ldr	r3, [r3, #12]
 8102778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810277a:	68ba      	ldr	r2, [r7, #8]
 810277c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102780:	4013      	ands	r3, r2
 8102782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102784:	68fb      	ldr	r3, [r7, #12]
 8102786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102788:	68bb      	ldr	r3, [r7, #8]
 810278a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810278c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102790:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102796:	4a04      	ldr	r2, [pc, #16]	@ (81027a8 <__NVIC_SetPriorityGrouping+0x44>)
 8102798:	68bb      	ldr	r3, [r7, #8]
 810279a:	60d3      	str	r3, [r2, #12]
}
 810279c:	bf00      	nop
 810279e:	3714      	adds	r7, #20
 81027a0:	46bd      	mov	sp, r7
 81027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027a6:	4770      	bx	lr
 81027a8:	e000ed00 	.word	0xe000ed00

081027ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81027ac:	b480      	push	{r7}
 81027ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81027b0:	4b04      	ldr	r3, [pc, #16]	@ (81027c4 <__NVIC_GetPriorityGrouping+0x18>)
 81027b2:	68db      	ldr	r3, [r3, #12]
 81027b4:	0a1b      	lsrs	r3, r3, #8
 81027b6:	f003 0307 	and.w	r3, r3, #7
}
 81027ba:	4618      	mov	r0, r3
 81027bc:	46bd      	mov	sp, r7
 81027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027c2:	4770      	bx	lr
 81027c4:	e000ed00 	.word	0xe000ed00

081027c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81027c8:	b480      	push	{r7}
 81027ca:	b083      	sub	sp, #12
 81027cc:	af00      	add	r7, sp, #0
 81027ce:	4603      	mov	r3, r0
 81027d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81027d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027d6:	2b00      	cmp	r3, #0
 81027d8:	db0b      	blt.n	81027f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81027da:	88fb      	ldrh	r3, [r7, #6]
 81027dc:	f003 021f 	and.w	r2, r3, #31
 81027e0:	4907      	ldr	r1, [pc, #28]	@ (8102800 <__NVIC_EnableIRQ+0x38>)
 81027e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81027e6:	095b      	lsrs	r3, r3, #5
 81027e8:	2001      	movs	r0, #1
 81027ea:	fa00 f202 	lsl.w	r2, r0, r2
 81027ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81027f2:	bf00      	nop
 81027f4:	370c      	adds	r7, #12
 81027f6:	46bd      	mov	sp, r7
 81027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81027fc:	4770      	bx	lr
 81027fe:	bf00      	nop
 8102800:	e000e100 	.word	0xe000e100

08102804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8102804:	b480      	push	{r7}
 8102806:	b083      	sub	sp, #12
 8102808:	af00      	add	r7, sp, #0
 810280a:	4603      	mov	r3, r0
 810280c:	6039      	str	r1, [r7, #0]
 810280e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102810:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102814:	2b00      	cmp	r3, #0
 8102816:	db0a      	blt.n	810282e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102818:	683b      	ldr	r3, [r7, #0]
 810281a:	b2da      	uxtb	r2, r3
 810281c:	490c      	ldr	r1, [pc, #48]	@ (8102850 <__NVIC_SetPriority+0x4c>)
 810281e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102822:	0112      	lsls	r2, r2, #4
 8102824:	b2d2      	uxtb	r2, r2
 8102826:	440b      	add	r3, r1
 8102828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 810282c:	e00a      	b.n	8102844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810282e:	683b      	ldr	r3, [r7, #0]
 8102830:	b2da      	uxtb	r2, r3
 8102832:	4908      	ldr	r1, [pc, #32]	@ (8102854 <__NVIC_SetPriority+0x50>)
 8102834:	88fb      	ldrh	r3, [r7, #6]
 8102836:	f003 030f 	and.w	r3, r3, #15
 810283a:	3b04      	subs	r3, #4
 810283c:	0112      	lsls	r2, r2, #4
 810283e:	b2d2      	uxtb	r2, r2
 8102840:	440b      	add	r3, r1
 8102842:	761a      	strb	r2, [r3, #24]
}
 8102844:	bf00      	nop
 8102846:	370c      	adds	r7, #12
 8102848:	46bd      	mov	sp, r7
 810284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810284e:	4770      	bx	lr
 8102850:	e000e100 	.word	0xe000e100
 8102854:	e000ed00 	.word	0xe000ed00

08102858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102858:	b480      	push	{r7}
 810285a:	b089      	sub	sp, #36	@ 0x24
 810285c:	af00      	add	r7, sp, #0
 810285e:	60f8      	str	r0, [r7, #12]
 8102860:	60b9      	str	r1, [r7, #8]
 8102862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102864:	68fb      	ldr	r3, [r7, #12]
 8102866:	f003 0307 	and.w	r3, r3, #7
 810286a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 810286c:	69fb      	ldr	r3, [r7, #28]
 810286e:	f1c3 0307 	rsb	r3, r3, #7
 8102872:	2b04      	cmp	r3, #4
 8102874:	bf28      	it	cs
 8102876:	2304      	movcs	r3, #4
 8102878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 810287a:	69fb      	ldr	r3, [r7, #28]
 810287c:	3304      	adds	r3, #4
 810287e:	2b06      	cmp	r3, #6
 8102880:	d902      	bls.n	8102888 <NVIC_EncodePriority+0x30>
 8102882:	69fb      	ldr	r3, [r7, #28]
 8102884:	3b03      	subs	r3, #3
 8102886:	e000      	b.n	810288a <NVIC_EncodePriority+0x32>
 8102888:	2300      	movs	r3, #0
 810288a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810288c:	f04f 32ff 	mov.w	r2, #4294967295
 8102890:	69bb      	ldr	r3, [r7, #24]
 8102892:	fa02 f303 	lsl.w	r3, r2, r3
 8102896:	43da      	mvns	r2, r3
 8102898:	68bb      	ldr	r3, [r7, #8]
 810289a:	401a      	ands	r2, r3
 810289c:	697b      	ldr	r3, [r7, #20]
 810289e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81028a0:	f04f 31ff 	mov.w	r1, #4294967295
 81028a4:	697b      	ldr	r3, [r7, #20]
 81028a6:	fa01 f303 	lsl.w	r3, r1, r3
 81028aa:	43d9      	mvns	r1, r3
 81028ac:	687b      	ldr	r3, [r7, #4]
 81028ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81028b0:	4313      	orrs	r3, r2
         );
}
 81028b2:	4618      	mov	r0, r3
 81028b4:	3724      	adds	r7, #36	@ 0x24
 81028b6:	46bd      	mov	sp, r7
 81028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81028bc:	4770      	bx	lr

081028be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81028be:	b580      	push	{r7, lr}
 81028c0:	b082      	sub	sp, #8
 81028c2:	af00      	add	r7, sp, #0
 81028c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81028c6:	6878      	ldr	r0, [r7, #4]
 81028c8:	f7ff ff4c 	bl	8102764 <__NVIC_SetPriorityGrouping>
}
 81028cc:	bf00      	nop
 81028ce:	3708      	adds	r7, #8
 81028d0:	46bd      	mov	sp, r7
 81028d2:	bd80      	pop	{r7, pc}

081028d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81028d4:	b580      	push	{r7, lr}
 81028d6:	b086      	sub	sp, #24
 81028d8:	af00      	add	r7, sp, #0
 81028da:	4603      	mov	r3, r0
 81028dc:	60b9      	str	r1, [r7, #8]
 81028de:	607a      	str	r2, [r7, #4]
 81028e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81028e2:	f7ff ff63 	bl	81027ac <__NVIC_GetPriorityGrouping>
 81028e6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81028e8:	687a      	ldr	r2, [r7, #4]
 81028ea:	68b9      	ldr	r1, [r7, #8]
 81028ec:	6978      	ldr	r0, [r7, #20]
 81028ee:	f7ff ffb3 	bl	8102858 <NVIC_EncodePriority>
 81028f2:	4602      	mov	r2, r0
 81028f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81028f8:	4611      	mov	r1, r2
 81028fa:	4618      	mov	r0, r3
 81028fc:	f7ff ff82 	bl	8102804 <__NVIC_SetPriority>
}
 8102900:	bf00      	nop
 8102902:	3718      	adds	r7, #24
 8102904:	46bd      	mov	sp, r7
 8102906:	bd80      	pop	{r7, pc}

08102908 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102908:	b580      	push	{r7, lr}
 810290a:	b082      	sub	sp, #8
 810290c:	af00      	add	r7, sp, #0
 810290e:	4603      	mov	r3, r0
 8102910:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102912:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102916:	4618      	mov	r0, r3
 8102918:	f7ff ff56 	bl	81027c8 <__NVIC_EnableIRQ>
}
 810291c:	bf00      	nop
 810291e:	3708      	adds	r7, #8
 8102920:	46bd      	mov	sp, r7
 8102922:	bd80      	pop	{r7, pc}

08102924 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102924:	b480      	push	{r7}
 8102926:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102928:	4b07      	ldr	r3, [pc, #28]	@ (8102948 <HAL_GetCurrentCPUID+0x24>)
 810292a:	681b      	ldr	r3, [r3, #0]
 810292c:	091b      	lsrs	r3, r3, #4
 810292e:	f003 030f 	and.w	r3, r3, #15
 8102932:	2b07      	cmp	r3, #7
 8102934:	d101      	bne.n	810293a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8102936:	2303      	movs	r3, #3
 8102938:	e000      	b.n	810293c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810293a:	2301      	movs	r3, #1
  }
}
 810293c:	4618      	mov	r0, r3
 810293e:	46bd      	mov	sp, r7
 8102940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102944:	4770      	bx	lr
 8102946:	bf00      	nop
 8102948:	e000ed00 	.word	0xe000ed00

0810294c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 810294c:	b580      	push	{r7, lr}
 810294e:	b086      	sub	sp, #24
 8102950:	af00      	add	r7, sp, #0
 8102952:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8102954:	f7ff fefa 	bl	810274c <HAL_GetTick>
 8102958:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810295a:	687b      	ldr	r3, [r7, #4]
 810295c:	2b00      	cmp	r3, #0
 810295e:	d101      	bne.n	8102964 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8102960:	2301      	movs	r3, #1
 8102962:	e314      	b.n	8102f8e <HAL_DMA_Init+0x642>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8102964:	687b      	ldr	r3, [r7, #4]
 8102966:	681b      	ldr	r3, [r3, #0]
 8102968:	4a66      	ldr	r2, [pc, #408]	@ (8102b04 <HAL_DMA_Init+0x1b8>)
 810296a:	4293      	cmp	r3, r2
 810296c:	d04a      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 810296e:	687b      	ldr	r3, [r7, #4]
 8102970:	681b      	ldr	r3, [r3, #0]
 8102972:	4a65      	ldr	r2, [pc, #404]	@ (8102b08 <HAL_DMA_Init+0x1bc>)
 8102974:	4293      	cmp	r3, r2
 8102976:	d045      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 8102978:	687b      	ldr	r3, [r7, #4]
 810297a:	681b      	ldr	r3, [r3, #0]
 810297c:	4a63      	ldr	r2, [pc, #396]	@ (8102b0c <HAL_DMA_Init+0x1c0>)
 810297e:	4293      	cmp	r3, r2
 8102980:	d040      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 8102982:	687b      	ldr	r3, [r7, #4]
 8102984:	681b      	ldr	r3, [r3, #0]
 8102986:	4a62      	ldr	r2, [pc, #392]	@ (8102b10 <HAL_DMA_Init+0x1c4>)
 8102988:	4293      	cmp	r3, r2
 810298a:	d03b      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 810298c:	687b      	ldr	r3, [r7, #4]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	4a60      	ldr	r2, [pc, #384]	@ (8102b14 <HAL_DMA_Init+0x1c8>)
 8102992:	4293      	cmp	r3, r2
 8102994:	d036      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 8102996:	687b      	ldr	r3, [r7, #4]
 8102998:	681b      	ldr	r3, [r3, #0]
 810299a:	4a5f      	ldr	r2, [pc, #380]	@ (8102b18 <HAL_DMA_Init+0x1cc>)
 810299c:	4293      	cmp	r3, r2
 810299e:	d031      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029a0:	687b      	ldr	r3, [r7, #4]
 81029a2:	681b      	ldr	r3, [r3, #0]
 81029a4:	4a5d      	ldr	r2, [pc, #372]	@ (8102b1c <HAL_DMA_Init+0x1d0>)
 81029a6:	4293      	cmp	r3, r2
 81029a8:	d02c      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029aa:	687b      	ldr	r3, [r7, #4]
 81029ac:	681b      	ldr	r3, [r3, #0]
 81029ae:	4a5c      	ldr	r2, [pc, #368]	@ (8102b20 <HAL_DMA_Init+0x1d4>)
 81029b0:	4293      	cmp	r3, r2
 81029b2:	d027      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029b4:	687b      	ldr	r3, [r7, #4]
 81029b6:	681b      	ldr	r3, [r3, #0]
 81029b8:	4a5a      	ldr	r2, [pc, #360]	@ (8102b24 <HAL_DMA_Init+0x1d8>)
 81029ba:	4293      	cmp	r3, r2
 81029bc:	d022      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029be:	687b      	ldr	r3, [r7, #4]
 81029c0:	681b      	ldr	r3, [r3, #0]
 81029c2:	4a59      	ldr	r2, [pc, #356]	@ (8102b28 <HAL_DMA_Init+0x1dc>)
 81029c4:	4293      	cmp	r3, r2
 81029c6:	d01d      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029c8:	687b      	ldr	r3, [r7, #4]
 81029ca:	681b      	ldr	r3, [r3, #0]
 81029cc:	4a57      	ldr	r2, [pc, #348]	@ (8102b2c <HAL_DMA_Init+0x1e0>)
 81029ce:	4293      	cmp	r3, r2
 81029d0:	d018      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029d2:	687b      	ldr	r3, [r7, #4]
 81029d4:	681b      	ldr	r3, [r3, #0]
 81029d6:	4a56      	ldr	r2, [pc, #344]	@ (8102b30 <HAL_DMA_Init+0x1e4>)
 81029d8:	4293      	cmp	r3, r2
 81029da:	d013      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029dc:	687b      	ldr	r3, [r7, #4]
 81029de:	681b      	ldr	r3, [r3, #0]
 81029e0:	4a54      	ldr	r2, [pc, #336]	@ (8102b34 <HAL_DMA_Init+0x1e8>)
 81029e2:	4293      	cmp	r3, r2
 81029e4:	d00e      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029e6:	687b      	ldr	r3, [r7, #4]
 81029e8:	681b      	ldr	r3, [r3, #0]
 81029ea:	4a53      	ldr	r2, [pc, #332]	@ (8102b38 <HAL_DMA_Init+0x1ec>)
 81029ec:	4293      	cmp	r3, r2
 81029ee:	d009      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029f0:	687b      	ldr	r3, [r7, #4]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	4a51      	ldr	r2, [pc, #324]	@ (8102b3c <HAL_DMA_Init+0x1f0>)
 81029f6:	4293      	cmp	r3, r2
 81029f8:	d004      	beq.n	8102a04 <HAL_DMA_Init+0xb8>
 81029fa:	687b      	ldr	r3, [r7, #4]
 81029fc:	681b      	ldr	r3, [r3, #0]
 81029fe:	4a50      	ldr	r2, [pc, #320]	@ (8102b40 <HAL_DMA_Init+0x1f4>)
 8102a00:	4293      	cmp	r3, r2
 8102a02:	d101      	bne.n	8102a08 <HAL_DMA_Init+0xbc>
 8102a04:	2301      	movs	r3, #1
 8102a06:	e000      	b.n	8102a0a <HAL_DMA_Init+0xbe>
 8102a08:	2300      	movs	r3, #0
 8102a0a:	2b00      	cmp	r3, #0
 8102a0c:	f000 813b 	beq.w	8102c86 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102a10:	687b      	ldr	r3, [r7, #4]
 8102a12:	2202      	movs	r2, #2
 8102a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102a18:	687b      	ldr	r3, [r7, #4]
 8102a1a:	2200      	movs	r2, #0
 8102a1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8102a20:	687b      	ldr	r3, [r7, #4]
 8102a22:	681b      	ldr	r3, [r3, #0]
 8102a24:	4a37      	ldr	r2, [pc, #220]	@ (8102b04 <HAL_DMA_Init+0x1b8>)
 8102a26:	4293      	cmp	r3, r2
 8102a28:	d04a      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a2a:	687b      	ldr	r3, [r7, #4]
 8102a2c:	681b      	ldr	r3, [r3, #0]
 8102a2e:	4a36      	ldr	r2, [pc, #216]	@ (8102b08 <HAL_DMA_Init+0x1bc>)
 8102a30:	4293      	cmp	r3, r2
 8102a32:	d045      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a34:	687b      	ldr	r3, [r7, #4]
 8102a36:	681b      	ldr	r3, [r3, #0]
 8102a38:	4a34      	ldr	r2, [pc, #208]	@ (8102b0c <HAL_DMA_Init+0x1c0>)
 8102a3a:	4293      	cmp	r3, r2
 8102a3c:	d040      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a3e:	687b      	ldr	r3, [r7, #4]
 8102a40:	681b      	ldr	r3, [r3, #0]
 8102a42:	4a33      	ldr	r2, [pc, #204]	@ (8102b10 <HAL_DMA_Init+0x1c4>)
 8102a44:	4293      	cmp	r3, r2
 8102a46:	d03b      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a48:	687b      	ldr	r3, [r7, #4]
 8102a4a:	681b      	ldr	r3, [r3, #0]
 8102a4c:	4a31      	ldr	r2, [pc, #196]	@ (8102b14 <HAL_DMA_Init+0x1c8>)
 8102a4e:	4293      	cmp	r3, r2
 8102a50:	d036      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a52:	687b      	ldr	r3, [r7, #4]
 8102a54:	681b      	ldr	r3, [r3, #0]
 8102a56:	4a30      	ldr	r2, [pc, #192]	@ (8102b18 <HAL_DMA_Init+0x1cc>)
 8102a58:	4293      	cmp	r3, r2
 8102a5a:	d031      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a5c:	687b      	ldr	r3, [r7, #4]
 8102a5e:	681b      	ldr	r3, [r3, #0]
 8102a60:	4a2e      	ldr	r2, [pc, #184]	@ (8102b1c <HAL_DMA_Init+0x1d0>)
 8102a62:	4293      	cmp	r3, r2
 8102a64:	d02c      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a66:	687b      	ldr	r3, [r7, #4]
 8102a68:	681b      	ldr	r3, [r3, #0]
 8102a6a:	4a2d      	ldr	r2, [pc, #180]	@ (8102b20 <HAL_DMA_Init+0x1d4>)
 8102a6c:	4293      	cmp	r3, r2
 8102a6e:	d027      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a70:	687b      	ldr	r3, [r7, #4]
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	4a2b      	ldr	r2, [pc, #172]	@ (8102b24 <HAL_DMA_Init+0x1d8>)
 8102a76:	4293      	cmp	r3, r2
 8102a78:	d022      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a7a:	687b      	ldr	r3, [r7, #4]
 8102a7c:	681b      	ldr	r3, [r3, #0]
 8102a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8102b28 <HAL_DMA_Init+0x1dc>)
 8102a80:	4293      	cmp	r3, r2
 8102a82:	d01d      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a84:	687b      	ldr	r3, [r7, #4]
 8102a86:	681b      	ldr	r3, [r3, #0]
 8102a88:	4a28      	ldr	r2, [pc, #160]	@ (8102b2c <HAL_DMA_Init+0x1e0>)
 8102a8a:	4293      	cmp	r3, r2
 8102a8c:	d018      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a8e:	687b      	ldr	r3, [r7, #4]
 8102a90:	681b      	ldr	r3, [r3, #0]
 8102a92:	4a27      	ldr	r2, [pc, #156]	@ (8102b30 <HAL_DMA_Init+0x1e4>)
 8102a94:	4293      	cmp	r3, r2
 8102a96:	d013      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102a98:	687b      	ldr	r3, [r7, #4]
 8102a9a:	681b      	ldr	r3, [r3, #0]
 8102a9c:	4a25      	ldr	r2, [pc, #148]	@ (8102b34 <HAL_DMA_Init+0x1e8>)
 8102a9e:	4293      	cmp	r3, r2
 8102aa0:	d00e      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102aa2:	687b      	ldr	r3, [r7, #4]
 8102aa4:	681b      	ldr	r3, [r3, #0]
 8102aa6:	4a24      	ldr	r2, [pc, #144]	@ (8102b38 <HAL_DMA_Init+0x1ec>)
 8102aa8:	4293      	cmp	r3, r2
 8102aaa:	d009      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102aac:	687b      	ldr	r3, [r7, #4]
 8102aae:	681b      	ldr	r3, [r3, #0]
 8102ab0:	4a22      	ldr	r2, [pc, #136]	@ (8102b3c <HAL_DMA_Init+0x1f0>)
 8102ab2:	4293      	cmp	r3, r2
 8102ab4:	d004      	beq.n	8102ac0 <HAL_DMA_Init+0x174>
 8102ab6:	687b      	ldr	r3, [r7, #4]
 8102ab8:	681b      	ldr	r3, [r3, #0]
 8102aba:	4a21      	ldr	r2, [pc, #132]	@ (8102b40 <HAL_DMA_Init+0x1f4>)
 8102abc:	4293      	cmp	r3, r2
 8102abe:	d108      	bne.n	8102ad2 <HAL_DMA_Init+0x186>
 8102ac0:	687b      	ldr	r3, [r7, #4]
 8102ac2:	681b      	ldr	r3, [r3, #0]
 8102ac4:	681a      	ldr	r2, [r3, #0]
 8102ac6:	687b      	ldr	r3, [r7, #4]
 8102ac8:	681b      	ldr	r3, [r3, #0]
 8102aca:	f022 0201 	bic.w	r2, r2, #1
 8102ace:	601a      	str	r2, [r3, #0]
 8102ad0:	e007      	b.n	8102ae2 <HAL_DMA_Init+0x196>
 8102ad2:	687b      	ldr	r3, [r7, #4]
 8102ad4:	681b      	ldr	r3, [r3, #0]
 8102ad6:	681a      	ldr	r2, [r3, #0]
 8102ad8:	687b      	ldr	r3, [r7, #4]
 8102ada:	681b      	ldr	r3, [r3, #0]
 8102adc:	f022 0201 	bic.w	r2, r2, #1
 8102ae0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102ae2:	e02f      	b.n	8102b44 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8102ae4:	f7ff fe32 	bl	810274c <HAL_GetTick>
 8102ae8:	4602      	mov	r2, r0
 8102aea:	693b      	ldr	r3, [r7, #16]
 8102aec:	1ad3      	subs	r3, r2, r3
 8102aee:	2b05      	cmp	r3, #5
 8102af0:	d928      	bls.n	8102b44 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8102af2:	687b      	ldr	r3, [r7, #4]
 8102af4:	2220      	movs	r2, #32
 8102af6:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8102af8:	687b      	ldr	r3, [r7, #4]
 8102afa:	2203      	movs	r2, #3
 8102afc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8102b00:	2301      	movs	r3, #1
 8102b02:	e244      	b.n	8102f8e <HAL_DMA_Init+0x642>
 8102b04:	40020010 	.word	0x40020010
 8102b08:	40020028 	.word	0x40020028
 8102b0c:	40020040 	.word	0x40020040
 8102b10:	40020058 	.word	0x40020058
 8102b14:	40020070 	.word	0x40020070
 8102b18:	40020088 	.word	0x40020088
 8102b1c:	400200a0 	.word	0x400200a0
 8102b20:	400200b8 	.word	0x400200b8
 8102b24:	40020410 	.word	0x40020410
 8102b28:	40020428 	.word	0x40020428
 8102b2c:	40020440 	.word	0x40020440
 8102b30:	40020458 	.word	0x40020458
 8102b34:	40020470 	.word	0x40020470
 8102b38:	40020488 	.word	0x40020488
 8102b3c:	400204a0 	.word	0x400204a0
 8102b40:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8102b44:	687b      	ldr	r3, [r7, #4]
 8102b46:	681b      	ldr	r3, [r3, #0]
 8102b48:	681b      	ldr	r3, [r3, #0]
 8102b4a:	f003 0301 	and.w	r3, r3, #1
 8102b4e:	2b00      	cmp	r3, #0
 8102b50:	d1c8      	bne.n	8102ae4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8102b52:	687b      	ldr	r3, [r7, #4]
 8102b54:	681b      	ldr	r3, [r3, #0]
 8102b56:	681b      	ldr	r3, [r3, #0]
 8102b58:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8102b5a:	697a      	ldr	r2, [r7, #20]
 8102b5c:	4b84      	ldr	r3, [pc, #528]	@ (8102d70 <HAL_DMA_Init+0x424>)
 8102b5e:	4013      	ands	r3, r2
 8102b60:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8102b62:	687b      	ldr	r3, [r7, #4]
 8102b64:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b66:	687b      	ldr	r3, [r7, #4]
 8102b68:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8102b6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	691b      	ldr	r3, [r3, #16]
 8102b70:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b72:	687b      	ldr	r3, [r7, #4]
 8102b74:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8102b76:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b78:	687b      	ldr	r3, [r7, #4]
 8102b7a:	699b      	ldr	r3, [r3, #24]
 8102b7c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102b7e:	687b      	ldr	r3, [r7, #4]
 8102b80:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8102b82:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8102b84:	687b      	ldr	r3, [r7, #4]
 8102b86:	6a1b      	ldr	r3, [r3, #32]
 8102b88:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8102b8a:	697a      	ldr	r2, [r7, #20]
 8102b8c:	4313      	orrs	r3, r2
 8102b8e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102b90:	687b      	ldr	r3, [r7, #4]
 8102b92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102b94:	2b04      	cmp	r3, #4
 8102b96:	d107      	bne.n	8102ba8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8102b98:	687b      	ldr	r3, [r7, #4]
 8102b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8102b9c:	687b      	ldr	r3, [r7, #4]
 8102b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102ba0:	4313      	orrs	r3, r2
 8102ba2:	697a      	ldr	r2, [r7, #20]
 8102ba4:	4313      	orrs	r3, r2
 8102ba6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8102ba8:	4b72      	ldr	r3, [pc, #456]	@ (8102d74 <HAL_DMA_Init+0x428>)
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	0c1b      	lsrs	r3, r3, #16
 8102bae:	041b      	lsls	r3, r3, #16
 8102bb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102bb4:	d328      	bcc.n	8102c08 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8102bb6:	687b      	ldr	r3, [r7, #4]
 8102bb8:	685b      	ldr	r3, [r3, #4]
 8102bba:	2b28      	cmp	r3, #40	@ 0x28
 8102bbc:	d903      	bls.n	8102bc6 <HAL_DMA_Init+0x27a>
 8102bbe:	687b      	ldr	r3, [r7, #4]
 8102bc0:	685b      	ldr	r3, [r3, #4]
 8102bc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8102bc4:	d917      	bls.n	8102bf6 <HAL_DMA_Init+0x2aa>
 8102bc6:	687b      	ldr	r3, [r7, #4]
 8102bc8:	685b      	ldr	r3, [r3, #4]
 8102bca:	2b3e      	cmp	r3, #62	@ 0x3e
 8102bcc:	d903      	bls.n	8102bd6 <HAL_DMA_Init+0x28a>
 8102bce:	687b      	ldr	r3, [r7, #4]
 8102bd0:	685b      	ldr	r3, [r3, #4]
 8102bd2:	2b42      	cmp	r3, #66	@ 0x42
 8102bd4:	d90f      	bls.n	8102bf6 <HAL_DMA_Init+0x2aa>
 8102bd6:	687b      	ldr	r3, [r7, #4]
 8102bd8:	685b      	ldr	r3, [r3, #4]
 8102bda:	2b46      	cmp	r3, #70	@ 0x46
 8102bdc:	d903      	bls.n	8102be6 <HAL_DMA_Init+0x29a>
 8102bde:	687b      	ldr	r3, [r7, #4]
 8102be0:	685b      	ldr	r3, [r3, #4]
 8102be2:	2b48      	cmp	r3, #72	@ 0x48
 8102be4:	d907      	bls.n	8102bf6 <HAL_DMA_Init+0x2aa>
 8102be6:	687b      	ldr	r3, [r7, #4]
 8102be8:	685b      	ldr	r3, [r3, #4]
 8102bea:	2b4e      	cmp	r3, #78	@ 0x4e
 8102bec:	d905      	bls.n	8102bfa <HAL_DMA_Init+0x2ae>
 8102bee:	687b      	ldr	r3, [r7, #4]
 8102bf0:	685b      	ldr	r3, [r3, #4]
 8102bf2:	2b52      	cmp	r3, #82	@ 0x52
 8102bf4:	d801      	bhi.n	8102bfa <HAL_DMA_Init+0x2ae>
 8102bf6:	2301      	movs	r3, #1
 8102bf8:	e000      	b.n	8102bfc <HAL_DMA_Init+0x2b0>
 8102bfa:	2300      	movs	r3, #0
 8102bfc:	2b00      	cmp	r3, #0
 8102bfe:	d003      	beq.n	8102c08 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8102c00:	697b      	ldr	r3, [r7, #20]
 8102c02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8102c06:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	681b      	ldr	r3, [r3, #0]
 8102c0c:	697a      	ldr	r2, [r7, #20]
 8102c0e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8102c10:	687b      	ldr	r3, [r7, #4]
 8102c12:	681b      	ldr	r3, [r3, #0]
 8102c14:	695b      	ldr	r3, [r3, #20]
 8102c16:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8102c18:	697b      	ldr	r3, [r7, #20]
 8102c1a:	f023 0307 	bic.w	r3, r3, #7
 8102c1e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8102c20:	687b      	ldr	r3, [r7, #4]
 8102c22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102c24:	697a      	ldr	r2, [r7, #20]
 8102c26:	4313      	orrs	r3, r2
 8102c28:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8102c2a:	687b      	ldr	r3, [r7, #4]
 8102c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102c2e:	2b04      	cmp	r3, #4
 8102c30:	d117      	bne.n	8102c62 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c36:	697a      	ldr	r2, [r7, #20]
 8102c38:	4313      	orrs	r3, r2
 8102c3a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c40:	2b00      	cmp	r3, #0
 8102c42:	d00e      	beq.n	8102c62 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8102c44:	6878      	ldr	r0, [r7, #4]
 8102c46:	f002 fb3d 	bl	81052c4 <DMA_CheckFifoParam>
 8102c4a:	4603      	mov	r3, r0
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d008      	beq.n	8102c62 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102c50:	687b      	ldr	r3, [r7, #4]
 8102c52:	2240      	movs	r2, #64	@ 0x40
 8102c54:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8102c56:	687b      	ldr	r3, [r7, #4]
 8102c58:	2201      	movs	r2, #1
 8102c5a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8102c5e:	2301      	movs	r3, #1
 8102c60:	e195      	b.n	8102f8e <HAL_DMA_Init+0x642>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	681b      	ldr	r3, [r3, #0]
 8102c66:	697a      	ldr	r2, [r7, #20]
 8102c68:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102c6a:	6878      	ldr	r0, [r7, #4]
 8102c6c:	f002 fa78 	bl	8105160 <DMA_CalcBaseAndBitshift>
 8102c70:	4603      	mov	r3, r0
 8102c72:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8102c74:	687b      	ldr	r3, [r7, #4]
 8102c76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102c78:	f003 031f 	and.w	r3, r3, #31
 8102c7c:	223f      	movs	r2, #63	@ 0x3f
 8102c7e:	409a      	lsls	r2, r3
 8102c80:	68bb      	ldr	r3, [r7, #8]
 8102c82:	609a      	str	r2, [r3, #8]
 8102c84:	e0cb      	b.n	8102e1e <HAL_DMA_Init+0x4d2>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8102c86:	687b      	ldr	r3, [r7, #4]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	4a3b      	ldr	r2, [pc, #236]	@ (8102d78 <HAL_DMA_Init+0x42c>)
 8102c8c:	4293      	cmp	r3, r2
 8102c8e:	d022      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102c90:	687b      	ldr	r3, [r7, #4]
 8102c92:	681b      	ldr	r3, [r3, #0]
 8102c94:	4a39      	ldr	r2, [pc, #228]	@ (8102d7c <HAL_DMA_Init+0x430>)
 8102c96:	4293      	cmp	r3, r2
 8102c98:	d01d      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102c9a:	687b      	ldr	r3, [r7, #4]
 8102c9c:	681b      	ldr	r3, [r3, #0]
 8102c9e:	4a38      	ldr	r2, [pc, #224]	@ (8102d80 <HAL_DMA_Init+0x434>)
 8102ca0:	4293      	cmp	r3, r2
 8102ca2:	d018      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102ca4:	687b      	ldr	r3, [r7, #4]
 8102ca6:	681b      	ldr	r3, [r3, #0]
 8102ca8:	4a36      	ldr	r2, [pc, #216]	@ (8102d84 <HAL_DMA_Init+0x438>)
 8102caa:	4293      	cmp	r3, r2
 8102cac:	d013      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102cae:	687b      	ldr	r3, [r7, #4]
 8102cb0:	681b      	ldr	r3, [r3, #0]
 8102cb2:	4a35      	ldr	r2, [pc, #212]	@ (8102d88 <HAL_DMA_Init+0x43c>)
 8102cb4:	4293      	cmp	r3, r2
 8102cb6:	d00e      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102cb8:	687b      	ldr	r3, [r7, #4]
 8102cba:	681b      	ldr	r3, [r3, #0]
 8102cbc:	4a33      	ldr	r2, [pc, #204]	@ (8102d8c <HAL_DMA_Init+0x440>)
 8102cbe:	4293      	cmp	r3, r2
 8102cc0:	d009      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102cc2:	687b      	ldr	r3, [r7, #4]
 8102cc4:	681b      	ldr	r3, [r3, #0]
 8102cc6:	4a32      	ldr	r2, [pc, #200]	@ (8102d90 <HAL_DMA_Init+0x444>)
 8102cc8:	4293      	cmp	r3, r2
 8102cca:	d004      	beq.n	8102cd6 <HAL_DMA_Init+0x38a>
 8102ccc:	687b      	ldr	r3, [r7, #4]
 8102cce:	681b      	ldr	r3, [r3, #0]
 8102cd0:	4a30      	ldr	r2, [pc, #192]	@ (8102d94 <HAL_DMA_Init+0x448>)
 8102cd2:	4293      	cmp	r3, r2
 8102cd4:	d101      	bne.n	8102cda <HAL_DMA_Init+0x38e>
 8102cd6:	2301      	movs	r3, #1
 8102cd8:	e000      	b.n	8102cdc <HAL_DMA_Init+0x390>
 8102cda:	2300      	movs	r3, #0
 8102cdc:	2b00      	cmp	r3, #0
 8102cde:	f000 8095 	beq.w	8102e0c <HAL_DMA_Init+0x4c0>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8102ce2:	687b      	ldr	r3, [r7, #4]
 8102ce4:	681b      	ldr	r3, [r3, #0]
 8102ce6:	4a24      	ldr	r2, [pc, #144]	@ (8102d78 <HAL_DMA_Init+0x42c>)
 8102ce8:	4293      	cmp	r3, r2
 8102cea:	d021      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102cec:	687b      	ldr	r3, [r7, #4]
 8102cee:	681b      	ldr	r3, [r3, #0]
 8102cf0:	4a22      	ldr	r2, [pc, #136]	@ (8102d7c <HAL_DMA_Init+0x430>)
 8102cf2:	4293      	cmp	r3, r2
 8102cf4:	d01c      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102cf6:	687b      	ldr	r3, [r7, #4]
 8102cf8:	681b      	ldr	r3, [r3, #0]
 8102cfa:	4a21      	ldr	r2, [pc, #132]	@ (8102d80 <HAL_DMA_Init+0x434>)
 8102cfc:	4293      	cmp	r3, r2
 8102cfe:	d017      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102d00:	687b      	ldr	r3, [r7, #4]
 8102d02:	681b      	ldr	r3, [r3, #0]
 8102d04:	4a1f      	ldr	r2, [pc, #124]	@ (8102d84 <HAL_DMA_Init+0x438>)
 8102d06:	4293      	cmp	r3, r2
 8102d08:	d012      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102d0a:	687b      	ldr	r3, [r7, #4]
 8102d0c:	681b      	ldr	r3, [r3, #0]
 8102d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8102d88 <HAL_DMA_Init+0x43c>)
 8102d10:	4293      	cmp	r3, r2
 8102d12:	d00d      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102d14:	687b      	ldr	r3, [r7, #4]
 8102d16:	681b      	ldr	r3, [r3, #0]
 8102d18:	4a1c      	ldr	r2, [pc, #112]	@ (8102d8c <HAL_DMA_Init+0x440>)
 8102d1a:	4293      	cmp	r3, r2
 8102d1c:	d008      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	681b      	ldr	r3, [r3, #0]
 8102d22:	4a1b      	ldr	r2, [pc, #108]	@ (8102d90 <HAL_DMA_Init+0x444>)
 8102d24:	4293      	cmp	r3, r2
 8102d26:	d003      	beq.n	8102d30 <HAL_DMA_Init+0x3e4>
 8102d28:	687b      	ldr	r3, [r7, #4]
 8102d2a:	681b      	ldr	r3, [r3, #0]
 8102d2c:	4a19      	ldr	r2, [pc, #100]	@ (8102d94 <HAL_DMA_Init+0x448>)
 8102d2e:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8102d30:	687b      	ldr	r3, [r7, #4]
 8102d32:	2202      	movs	r2, #2
 8102d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8102d38:	687b      	ldr	r3, [r7, #4]
 8102d3a:	2200      	movs	r2, #0
 8102d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8102d40:	687b      	ldr	r3, [r7, #4]
 8102d42:	681b      	ldr	r3, [r3, #0]
 8102d44:	681b      	ldr	r3, [r3, #0]
 8102d46:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8102d48:	697b      	ldr	r3, [r7, #20]
 8102d4a:	f423 33ff 	bic.w	r3, r3, #130560	@ 0x1fe00
 8102d4e:	f423 73f8 	bic.w	r3, r3, #496	@ 0x1f0
 8102d52:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102d54:	687b      	ldr	r3, [r7, #4]
 8102d56:	689b      	ldr	r3, [r3, #8]
 8102d58:	2b40      	cmp	r3, #64	@ 0x40
 8102d5a:	d01d      	beq.n	8102d98 <HAL_DMA_Init+0x44c>
 8102d5c:	687b      	ldr	r3, [r7, #4]
 8102d5e:	689b      	ldr	r3, [r3, #8]
 8102d60:	2b80      	cmp	r3, #128	@ 0x80
 8102d62:	d102      	bne.n	8102d6a <HAL_DMA_Init+0x41e>
 8102d64:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8102d68:	e017      	b.n	8102d9a <HAL_DMA_Init+0x44e>
 8102d6a:	2300      	movs	r3, #0
 8102d6c:	e015      	b.n	8102d9a <HAL_DMA_Init+0x44e>
 8102d6e:	bf00      	nop
 8102d70:	fe10803f 	.word	0xfe10803f
 8102d74:	5c001000 	.word	0x5c001000
 8102d78:	58025408 	.word	0x58025408
 8102d7c:	5802541c 	.word	0x5802541c
 8102d80:	58025430 	.word	0x58025430
 8102d84:	58025444 	.word	0x58025444
 8102d88:	58025458 	.word	0x58025458
 8102d8c:	5802546c 	.word	0x5802546c
 8102d90:	58025480 	.word	0x58025480
 8102d94:	58025494 	.word	0x58025494
 8102d98:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102d9a:	687a      	ldr	r2, [r7, #4]
 8102d9c:	68d2      	ldr	r2, [r2, #12]
 8102d9e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102da0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102da2:	687b      	ldr	r3, [r7, #4]
 8102da4:	691b      	ldr	r3, [r3, #16]
 8102da6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8102da8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102daa:	687b      	ldr	r3, [r7, #4]
 8102dac:	695b      	ldr	r3, [r3, #20]
 8102dae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8102db0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102db2:	687b      	ldr	r3, [r7, #4]
 8102db4:	699b      	ldr	r3, [r3, #24]
 8102db6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8102db8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102dba:	687b      	ldr	r3, [r7, #4]
 8102dbc:	69db      	ldr	r3, [r3, #28]
 8102dbe:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8102dc0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	6a1b      	ldr	r3, [r3, #32]
 8102dc6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8102dc8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8102dca:	697a      	ldr	r2, [r7, #20]
 8102dcc:	4313      	orrs	r3, r2
 8102dce:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8102dd0:	687b      	ldr	r3, [r7, #4]
 8102dd2:	681b      	ldr	r3, [r3, #0]
 8102dd4:	697a      	ldr	r2, [r7, #20]
 8102dd6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8102dd8:	687b      	ldr	r3, [r7, #4]
 8102dda:	681b      	ldr	r3, [r3, #0]
 8102ddc:	461a      	mov	r2, r3
 8102dde:	4b6e      	ldr	r3, [pc, #440]	@ (8102f98 <HAL_DMA_Init+0x64c>)
 8102de0:	4413      	add	r3, r2
 8102de2:	4a6e      	ldr	r2, [pc, #440]	@ (8102f9c <HAL_DMA_Init+0x650>)
 8102de4:	fba2 2303 	umull	r2, r3, r2, r3
 8102de8:	091b      	lsrs	r3, r3, #4
 8102dea:	009a      	lsls	r2, r3, #2
 8102dec:	687b      	ldr	r3, [r7, #4]
 8102dee:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8102df0:	6878      	ldr	r0, [r7, #4]
 8102df2:	f002 f9b5 	bl	8105160 <DMA_CalcBaseAndBitshift>
 8102df6:	4603      	mov	r3, r0
 8102df8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102dfe:	f003 031f 	and.w	r3, r3, #31
 8102e02:	2201      	movs	r2, #1
 8102e04:	409a      	lsls	r2, r3
 8102e06:	68fb      	ldr	r3, [r7, #12]
 8102e08:	605a      	str	r2, [r3, #4]
 8102e0a:	e008      	b.n	8102e1e <HAL_DMA_Init+0x4d2>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8102e0c:	687b      	ldr	r3, [r7, #4]
 8102e0e:	2240      	movs	r2, #64	@ 0x40
 8102e10:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8102e12:	687b      	ldr	r3, [r7, #4]
 8102e14:	2203      	movs	r2, #3
 8102e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8102e1a:	2301      	movs	r3, #1
 8102e1c:	e0b7      	b.n	8102f8e <HAL_DMA_Init+0x642>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8102e1e:	687b      	ldr	r3, [r7, #4]
 8102e20:	681b      	ldr	r3, [r3, #0]
 8102e22:	4a5f      	ldr	r2, [pc, #380]	@ (8102fa0 <HAL_DMA_Init+0x654>)
 8102e24:	4293      	cmp	r3, r2
 8102e26:	d072      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e28:	687b      	ldr	r3, [r7, #4]
 8102e2a:	681b      	ldr	r3, [r3, #0]
 8102e2c:	4a5d      	ldr	r2, [pc, #372]	@ (8102fa4 <HAL_DMA_Init+0x658>)
 8102e2e:	4293      	cmp	r3, r2
 8102e30:	d06d      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e32:	687b      	ldr	r3, [r7, #4]
 8102e34:	681b      	ldr	r3, [r3, #0]
 8102e36:	4a5c      	ldr	r2, [pc, #368]	@ (8102fa8 <HAL_DMA_Init+0x65c>)
 8102e38:	4293      	cmp	r3, r2
 8102e3a:	d068      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	681b      	ldr	r3, [r3, #0]
 8102e40:	4a5a      	ldr	r2, [pc, #360]	@ (8102fac <HAL_DMA_Init+0x660>)
 8102e42:	4293      	cmp	r3, r2
 8102e44:	d063      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e46:	687b      	ldr	r3, [r7, #4]
 8102e48:	681b      	ldr	r3, [r3, #0]
 8102e4a:	4a59      	ldr	r2, [pc, #356]	@ (8102fb0 <HAL_DMA_Init+0x664>)
 8102e4c:	4293      	cmp	r3, r2
 8102e4e:	d05e      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e50:	687b      	ldr	r3, [r7, #4]
 8102e52:	681b      	ldr	r3, [r3, #0]
 8102e54:	4a57      	ldr	r2, [pc, #348]	@ (8102fb4 <HAL_DMA_Init+0x668>)
 8102e56:	4293      	cmp	r3, r2
 8102e58:	d059      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e5a:	687b      	ldr	r3, [r7, #4]
 8102e5c:	681b      	ldr	r3, [r3, #0]
 8102e5e:	4a56      	ldr	r2, [pc, #344]	@ (8102fb8 <HAL_DMA_Init+0x66c>)
 8102e60:	4293      	cmp	r3, r2
 8102e62:	d054      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e64:	687b      	ldr	r3, [r7, #4]
 8102e66:	681b      	ldr	r3, [r3, #0]
 8102e68:	4a54      	ldr	r2, [pc, #336]	@ (8102fbc <HAL_DMA_Init+0x670>)
 8102e6a:	4293      	cmp	r3, r2
 8102e6c:	d04f      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e6e:	687b      	ldr	r3, [r7, #4]
 8102e70:	681b      	ldr	r3, [r3, #0]
 8102e72:	4a53      	ldr	r2, [pc, #332]	@ (8102fc0 <HAL_DMA_Init+0x674>)
 8102e74:	4293      	cmp	r3, r2
 8102e76:	d04a      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e78:	687b      	ldr	r3, [r7, #4]
 8102e7a:	681b      	ldr	r3, [r3, #0]
 8102e7c:	4a51      	ldr	r2, [pc, #324]	@ (8102fc4 <HAL_DMA_Init+0x678>)
 8102e7e:	4293      	cmp	r3, r2
 8102e80:	d045      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e82:	687b      	ldr	r3, [r7, #4]
 8102e84:	681b      	ldr	r3, [r3, #0]
 8102e86:	4a50      	ldr	r2, [pc, #320]	@ (8102fc8 <HAL_DMA_Init+0x67c>)
 8102e88:	4293      	cmp	r3, r2
 8102e8a:	d040      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e8c:	687b      	ldr	r3, [r7, #4]
 8102e8e:	681b      	ldr	r3, [r3, #0]
 8102e90:	4a4e      	ldr	r2, [pc, #312]	@ (8102fcc <HAL_DMA_Init+0x680>)
 8102e92:	4293      	cmp	r3, r2
 8102e94:	d03b      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102e96:	687b      	ldr	r3, [r7, #4]
 8102e98:	681b      	ldr	r3, [r3, #0]
 8102e9a:	4a4d      	ldr	r2, [pc, #308]	@ (8102fd0 <HAL_DMA_Init+0x684>)
 8102e9c:	4293      	cmp	r3, r2
 8102e9e:	d036      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ea0:	687b      	ldr	r3, [r7, #4]
 8102ea2:	681b      	ldr	r3, [r3, #0]
 8102ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8102fd4 <HAL_DMA_Init+0x688>)
 8102ea6:	4293      	cmp	r3, r2
 8102ea8:	d031      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	681b      	ldr	r3, [r3, #0]
 8102eae:	4a4a      	ldr	r2, [pc, #296]	@ (8102fd8 <HAL_DMA_Init+0x68c>)
 8102eb0:	4293      	cmp	r3, r2
 8102eb2:	d02c      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102eb4:	687b      	ldr	r3, [r7, #4]
 8102eb6:	681b      	ldr	r3, [r3, #0]
 8102eb8:	4a48      	ldr	r2, [pc, #288]	@ (8102fdc <HAL_DMA_Init+0x690>)
 8102eba:	4293      	cmp	r3, r2
 8102ebc:	d027      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	4a47      	ldr	r2, [pc, #284]	@ (8102fe0 <HAL_DMA_Init+0x694>)
 8102ec4:	4293      	cmp	r3, r2
 8102ec6:	d022      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ec8:	687b      	ldr	r3, [r7, #4]
 8102eca:	681b      	ldr	r3, [r3, #0]
 8102ecc:	4a45      	ldr	r2, [pc, #276]	@ (8102fe4 <HAL_DMA_Init+0x698>)
 8102ece:	4293      	cmp	r3, r2
 8102ed0:	d01d      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	4a44      	ldr	r2, [pc, #272]	@ (8102fe8 <HAL_DMA_Init+0x69c>)
 8102ed8:	4293      	cmp	r3, r2
 8102eda:	d018      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102edc:	687b      	ldr	r3, [r7, #4]
 8102ede:	681b      	ldr	r3, [r3, #0]
 8102ee0:	4a42      	ldr	r2, [pc, #264]	@ (8102fec <HAL_DMA_Init+0x6a0>)
 8102ee2:	4293      	cmp	r3, r2
 8102ee4:	d013      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ee6:	687b      	ldr	r3, [r7, #4]
 8102ee8:	681b      	ldr	r3, [r3, #0]
 8102eea:	4a41      	ldr	r2, [pc, #260]	@ (8102ff0 <HAL_DMA_Init+0x6a4>)
 8102eec:	4293      	cmp	r3, r2
 8102eee:	d00e      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102ef0:	687b      	ldr	r3, [r7, #4]
 8102ef2:	681b      	ldr	r3, [r3, #0]
 8102ef4:	4a3f      	ldr	r2, [pc, #252]	@ (8102ff4 <HAL_DMA_Init+0x6a8>)
 8102ef6:	4293      	cmp	r3, r2
 8102ef8:	d009      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102efa:	687b      	ldr	r3, [r7, #4]
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a3e      	ldr	r2, [pc, #248]	@ (8102ff8 <HAL_DMA_Init+0x6ac>)
 8102f00:	4293      	cmp	r3, r2
 8102f02:	d004      	beq.n	8102f0e <HAL_DMA_Init+0x5c2>
 8102f04:	687b      	ldr	r3, [r7, #4]
 8102f06:	681b      	ldr	r3, [r3, #0]
 8102f08:	4a3c      	ldr	r2, [pc, #240]	@ (8102ffc <HAL_DMA_Init+0x6b0>)
 8102f0a:	4293      	cmp	r3, r2
 8102f0c:	d101      	bne.n	8102f12 <HAL_DMA_Init+0x5c6>
 8102f0e:	2301      	movs	r3, #1
 8102f10:	e000      	b.n	8102f14 <HAL_DMA_Init+0x5c8>
 8102f12:	2300      	movs	r3, #0
 8102f14:	2b00      	cmp	r3, #0
 8102f16:	d032      	beq.n	8102f7e <HAL_DMA_Init+0x632>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8102f18:	6878      	ldr	r0, [r7, #4]
 8102f1a:	f002 fa4f 	bl	81053bc <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8102f1e:	687b      	ldr	r3, [r7, #4]
 8102f20:	689b      	ldr	r3, [r3, #8]
 8102f22:	2b80      	cmp	r3, #128	@ 0x80
 8102f24:	d102      	bne.n	8102f2c <HAL_DMA_Init+0x5e0>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8102f26:	687b      	ldr	r3, [r7, #4]
 8102f28:	2200      	movs	r2, #0
 8102f2a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8102f2c:	687b      	ldr	r3, [r7, #4]
 8102f2e:	685a      	ldr	r2, [r3, #4]
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102f34:	b2d2      	uxtb	r2, r2
 8102f36:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8102f38:	687b      	ldr	r3, [r7, #4]
 8102f3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102f3c:	687a      	ldr	r2, [r7, #4]
 8102f3e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8102f40:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	685b      	ldr	r3, [r3, #4]
 8102f46:	2b00      	cmp	r3, #0
 8102f48:	d010      	beq.n	8102f6c <HAL_DMA_Init+0x620>
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	685b      	ldr	r3, [r3, #4]
 8102f4e:	2b08      	cmp	r3, #8
 8102f50:	d80c      	bhi.n	8102f6c <HAL_DMA_Init+0x620>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8102f52:	6878      	ldr	r0, [r7, #4]
 8102f54:	f002 facc 	bl	81054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8102f58:	687b      	ldr	r3, [r7, #4]
 8102f5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102f5c:	2200      	movs	r2, #0
 8102f5e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8102f60:	687b      	ldr	r3, [r7, #4]
 8102f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102f64:	687a      	ldr	r2, [r7, #4]
 8102f66:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8102f68:	605a      	str	r2, [r3, #4]
 8102f6a:	e008      	b.n	8102f7e <HAL_DMA_Init+0x632>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8102f6c:	687b      	ldr	r3, [r7, #4]
 8102f6e:	2200      	movs	r2, #0
 8102f70:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8102f72:	687b      	ldr	r3, [r7, #4]
 8102f74:	2200      	movs	r2, #0
 8102f76:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8102f78:	687b      	ldr	r3, [r7, #4]
 8102f7a:	2200      	movs	r2, #0
 8102f7c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	2200      	movs	r2, #0
 8102f82:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8102f84:	687b      	ldr	r3, [r7, #4]
 8102f86:	2201      	movs	r2, #1
 8102f88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8102f8c:	2300      	movs	r3, #0
}
 8102f8e:	4618      	mov	r0, r3
 8102f90:	3718      	adds	r7, #24
 8102f92:	46bd      	mov	sp, r7
 8102f94:	bd80      	pop	{r7, pc}
 8102f96:	bf00      	nop
 8102f98:	a7fdabf8 	.word	0xa7fdabf8
 8102f9c:	cccccccd 	.word	0xcccccccd
 8102fa0:	40020010 	.word	0x40020010
 8102fa4:	40020028 	.word	0x40020028
 8102fa8:	40020040 	.word	0x40020040
 8102fac:	40020058 	.word	0x40020058
 8102fb0:	40020070 	.word	0x40020070
 8102fb4:	40020088 	.word	0x40020088
 8102fb8:	400200a0 	.word	0x400200a0
 8102fbc:	400200b8 	.word	0x400200b8
 8102fc0:	40020410 	.word	0x40020410
 8102fc4:	40020428 	.word	0x40020428
 8102fc8:	40020440 	.word	0x40020440
 8102fcc:	40020458 	.word	0x40020458
 8102fd0:	40020470 	.word	0x40020470
 8102fd4:	40020488 	.word	0x40020488
 8102fd8:	400204a0 	.word	0x400204a0
 8102fdc:	400204b8 	.word	0x400204b8
 8102fe0:	58025408 	.word	0x58025408
 8102fe4:	5802541c 	.word	0x5802541c
 8102fe8:	58025430 	.word	0x58025430
 8102fec:	58025444 	.word	0x58025444
 8102ff0:	58025458 	.word	0x58025458
 8102ff4:	5802546c 	.word	0x5802546c
 8102ff8:	58025480 	.word	0x58025480
 8102ffc:	58025494 	.word	0x58025494

08103000 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8103000:	b580      	push	{r7, lr}
 8103002:	b086      	sub	sp, #24
 8103004:	af00      	add	r7, sp, #0
 8103006:	60f8      	str	r0, [r7, #12]
 8103008:	60b9      	str	r1, [r7, #8]
 810300a:	607a      	str	r2, [r7, #4]
 810300c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810300e:	2300      	movs	r3, #0
 8103010:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103012:	68fb      	ldr	r3, [r7, #12]
 8103014:	2b00      	cmp	r3, #0
 8103016:	d101      	bne.n	810301c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8103018:	2301      	movs	r3, #1
 810301a:	e226      	b.n	810346a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 810301c:	68fb      	ldr	r3, [r7, #12]
 810301e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8103022:	2b01      	cmp	r3, #1
 8103024:	d101      	bne.n	810302a <HAL_DMA_Start_IT+0x2a>
 8103026:	2302      	movs	r3, #2
 8103028:	e21f      	b.n	810346a <HAL_DMA_Start_IT+0x46a>
 810302a:	68fb      	ldr	r3, [r7, #12]
 810302c:	2201      	movs	r2, #1
 810302e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8103032:	68fb      	ldr	r3, [r7, #12]
 8103034:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103038:	b2db      	uxtb	r3, r3
 810303a:	2b01      	cmp	r3, #1
 810303c:	f040 820a 	bne.w	8103454 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8103040:	68fb      	ldr	r3, [r7, #12]
 8103042:	2202      	movs	r2, #2
 8103044:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8103048:	68fb      	ldr	r3, [r7, #12]
 810304a:	2200      	movs	r2, #0
 810304c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 810304e:	68fb      	ldr	r3, [r7, #12]
 8103050:	681b      	ldr	r3, [r3, #0]
 8103052:	4a68      	ldr	r2, [pc, #416]	@ (81031f4 <HAL_DMA_Start_IT+0x1f4>)
 8103054:	4293      	cmp	r3, r2
 8103056:	d04a      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 8103058:	68fb      	ldr	r3, [r7, #12]
 810305a:	681b      	ldr	r3, [r3, #0]
 810305c:	4a66      	ldr	r2, [pc, #408]	@ (81031f8 <HAL_DMA_Start_IT+0x1f8>)
 810305e:	4293      	cmp	r3, r2
 8103060:	d045      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 8103062:	68fb      	ldr	r3, [r7, #12]
 8103064:	681b      	ldr	r3, [r3, #0]
 8103066:	4a65      	ldr	r2, [pc, #404]	@ (81031fc <HAL_DMA_Start_IT+0x1fc>)
 8103068:	4293      	cmp	r3, r2
 810306a:	d040      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 810306c:	68fb      	ldr	r3, [r7, #12]
 810306e:	681b      	ldr	r3, [r3, #0]
 8103070:	4a63      	ldr	r2, [pc, #396]	@ (8103200 <HAL_DMA_Start_IT+0x200>)
 8103072:	4293      	cmp	r3, r2
 8103074:	d03b      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 8103076:	68fb      	ldr	r3, [r7, #12]
 8103078:	681b      	ldr	r3, [r3, #0]
 810307a:	4a62      	ldr	r2, [pc, #392]	@ (8103204 <HAL_DMA_Start_IT+0x204>)
 810307c:	4293      	cmp	r3, r2
 810307e:	d036      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 8103080:	68fb      	ldr	r3, [r7, #12]
 8103082:	681b      	ldr	r3, [r3, #0]
 8103084:	4a60      	ldr	r2, [pc, #384]	@ (8103208 <HAL_DMA_Start_IT+0x208>)
 8103086:	4293      	cmp	r3, r2
 8103088:	d031      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 810308a:	68fb      	ldr	r3, [r7, #12]
 810308c:	681b      	ldr	r3, [r3, #0]
 810308e:	4a5f      	ldr	r2, [pc, #380]	@ (810320c <HAL_DMA_Start_IT+0x20c>)
 8103090:	4293      	cmp	r3, r2
 8103092:	d02c      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 8103094:	68fb      	ldr	r3, [r7, #12]
 8103096:	681b      	ldr	r3, [r3, #0]
 8103098:	4a5d      	ldr	r2, [pc, #372]	@ (8103210 <HAL_DMA_Start_IT+0x210>)
 810309a:	4293      	cmp	r3, r2
 810309c:	d027      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 810309e:	68fb      	ldr	r3, [r7, #12]
 81030a0:	681b      	ldr	r3, [r3, #0]
 81030a2:	4a5c      	ldr	r2, [pc, #368]	@ (8103214 <HAL_DMA_Start_IT+0x214>)
 81030a4:	4293      	cmp	r3, r2
 81030a6:	d022      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030a8:	68fb      	ldr	r3, [r7, #12]
 81030aa:	681b      	ldr	r3, [r3, #0]
 81030ac:	4a5a      	ldr	r2, [pc, #360]	@ (8103218 <HAL_DMA_Start_IT+0x218>)
 81030ae:	4293      	cmp	r3, r2
 81030b0:	d01d      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030b2:	68fb      	ldr	r3, [r7, #12]
 81030b4:	681b      	ldr	r3, [r3, #0]
 81030b6:	4a59      	ldr	r2, [pc, #356]	@ (810321c <HAL_DMA_Start_IT+0x21c>)
 81030b8:	4293      	cmp	r3, r2
 81030ba:	d018      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030bc:	68fb      	ldr	r3, [r7, #12]
 81030be:	681b      	ldr	r3, [r3, #0]
 81030c0:	4a57      	ldr	r2, [pc, #348]	@ (8103220 <HAL_DMA_Start_IT+0x220>)
 81030c2:	4293      	cmp	r3, r2
 81030c4:	d013      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030c6:	68fb      	ldr	r3, [r7, #12]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	4a56      	ldr	r2, [pc, #344]	@ (8103224 <HAL_DMA_Start_IT+0x224>)
 81030cc:	4293      	cmp	r3, r2
 81030ce:	d00e      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030d0:	68fb      	ldr	r3, [r7, #12]
 81030d2:	681b      	ldr	r3, [r3, #0]
 81030d4:	4a54      	ldr	r2, [pc, #336]	@ (8103228 <HAL_DMA_Start_IT+0x228>)
 81030d6:	4293      	cmp	r3, r2
 81030d8:	d009      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030da:	68fb      	ldr	r3, [r7, #12]
 81030dc:	681b      	ldr	r3, [r3, #0]
 81030de:	4a53      	ldr	r2, [pc, #332]	@ (810322c <HAL_DMA_Start_IT+0x22c>)
 81030e0:	4293      	cmp	r3, r2
 81030e2:	d004      	beq.n	81030ee <HAL_DMA_Start_IT+0xee>
 81030e4:	68fb      	ldr	r3, [r7, #12]
 81030e6:	681b      	ldr	r3, [r3, #0]
 81030e8:	4a51      	ldr	r2, [pc, #324]	@ (8103230 <HAL_DMA_Start_IT+0x230>)
 81030ea:	4293      	cmp	r3, r2
 81030ec:	d108      	bne.n	8103100 <HAL_DMA_Start_IT+0x100>
 81030ee:	68fb      	ldr	r3, [r7, #12]
 81030f0:	681b      	ldr	r3, [r3, #0]
 81030f2:	681a      	ldr	r2, [r3, #0]
 81030f4:	68fb      	ldr	r3, [r7, #12]
 81030f6:	681b      	ldr	r3, [r3, #0]
 81030f8:	f022 0201 	bic.w	r2, r2, #1
 81030fc:	601a      	str	r2, [r3, #0]
 81030fe:	e007      	b.n	8103110 <HAL_DMA_Start_IT+0x110>
 8103100:	68fb      	ldr	r3, [r7, #12]
 8103102:	681b      	ldr	r3, [r3, #0]
 8103104:	681a      	ldr	r2, [r3, #0]
 8103106:	68fb      	ldr	r3, [r7, #12]
 8103108:	681b      	ldr	r3, [r3, #0]
 810310a:	f022 0201 	bic.w	r2, r2, #1
 810310e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8103110:	683b      	ldr	r3, [r7, #0]
 8103112:	687a      	ldr	r2, [r7, #4]
 8103114:	68b9      	ldr	r1, [r7, #8]
 8103116:	68f8      	ldr	r0, [r7, #12]
 8103118:	f001 fe76 	bl	8104e08 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810311c:	68fb      	ldr	r3, [r7, #12]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	4a34      	ldr	r2, [pc, #208]	@ (81031f4 <HAL_DMA_Start_IT+0x1f4>)
 8103122:	4293      	cmp	r3, r2
 8103124:	d04a      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103126:	68fb      	ldr	r3, [r7, #12]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a33      	ldr	r2, [pc, #204]	@ (81031f8 <HAL_DMA_Start_IT+0x1f8>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d045      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103130:	68fb      	ldr	r3, [r7, #12]
 8103132:	681b      	ldr	r3, [r3, #0]
 8103134:	4a31      	ldr	r2, [pc, #196]	@ (81031fc <HAL_DMA_Start_IT+0x1fc>)
 8103136:	4293      	cmp	r3, r2
 8103138:	d040      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 810313a:	68fb      	ldr	r3, [r7, #12]
 810313c:	681b      	ldr	r3, [r3, #0]
 810313e:	4a30      	ldr	r2, [pc, #192]	@ (8103200 <HAL_DMA_Start_IT+0x200>)
 8103140:	4293      	cmp	r3, r2
 8103142:	d03b      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103144:	68fb      	ldr	r3, [r7, #12]
 8103146:	681b      	ldr	r3, [r3, #0]
 8103148:	4a2e      	ldr	r2, [pc, #184]	@ (8103204 <HAL_DMA_Start_IT+0x204>)
 810314a:	4293      	cmp	r3, r2
 810314c:	d036      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 810314e:	68fb      	ldr	r3, [r7, #12]
 8103150:	681b      	ldr	r3, [r3, #0]
 8103152:	4a2d      	ldr	r2, [pc, #180]	@ (8103208 <HAL_DMA_Start_IT+0x208>)
 8103154:	4293      	cmp	r3, r2
 8103156:	d031      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103158:	68fb      	ldr	r3, [r7, #12]
 810315a:	681b      	ldr	r3, [r3, #0]
 810315c:	4a2b      	ldr	r2, [pc, #172]	@ (810320c <HAL_DMA_Start_IT+0x20c>)
 810315e:	4293      	cmp	r3, r2
 8103160:	d02c      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103162:	68fb      	ldr	r3, [r7, #12]
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4a2a      	ldr	r2, [pc, #168]	@ (8103210 <HAL_DMA_Start_IT+0x210>)
 8103168:	4293      	cmp	r3, r2
 810316a:	d027      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 810316c:	68fb      	ldr	r3, [r7, #12]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	4a28      	ldr	r2, [pc, #160]	@ (8103214 <HAL_DMA_Start_IT+0x214>)
 8103172:	4293      	cmp	r3, r2
 8103174:	d022      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103176:	68fb      	ldr	r3, [r7, #12]
 8103178:	681b      	ldr	r3, [r3, #0]
 810317a:	4a27      	ldr	r2, [pc, #156]	@ (8103218 <HAL_DMA_Start_IT+0x218>)
 810317c:	4293      	cmp	r3, r2
 810317e:	d01d      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103180:	68fb      	ldr	r3, [r7, #12]
 8103182:	681b      	ldr	r3, [r3, #0]
 8103184:	4a25      	ldr	r2, [pc, #148]	@ (810321c <HAL_DMA_Start_IT+0x21c>)
 8103186:	4293      	cmp	r3, r2
 8103188:	d018      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 810318a:	68fb      	ldr	r3, [r7, #12]
 810318c:	681b      	ldr	r3, [r3, #0]
 810318e:	4a24      	ldr	r2, [pc, #144]	@ (8103220 <HAL_DMA_Start_IT+0x220>)
 8103190:	4293      	cmp	r3, r2
 8103192:	d013      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 8103194:	68fb      	ldr	r3, [r7, #12]
 8103196:	681b      	ldr	r3, [r3, #0]
 8103198:	4a22      	ldr	r2, [pc, #136]	@ (8103224 <HAL_DMA_Start_IT+0x224>)
 810319a:	4293      	cmp	r3, r2
 810319c:	d00e      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 810319e:	68fb      	ldr	r3, [r7, #12]
 81031a0:	681b      	ldr	r3, [r3, #0]
 81031a2:	4a21      	ldr	r2, [pc, #132]	@ (8103228 <HAL_DMA_Start_IT+0x228>)
 81031a4:	4293      	cmp	r3, r2
 81031a6:	d009      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 81031a8:	68fb      	ldr	r3, [r7, #12]
 81031aa:	681b      	ldr	r3, [r3, #0]
 81031ac:	4a1f      	ldr	r2, [pc, #124]	@ (810322c <HAL_DMA_Start_IT+0x22c>)
 81031ae:	4293      	cmp	r3, r2
 81031b0:	d004      	beq.n	81031bc <HAL_DMA_Start_IT+0x1bc>
 81031b2:	68fb      	ldr	r3, [r7, #12]
 81031b4:	681b      	ldr	r3, [r3, #0]
 81031b6:	4a1e      	ldr	r2, [pc, #120]	@ (8103230 <HAL_DMA_Start_IT+0x230>)
 81031b8:	4293      	cmp	r3, r2
 81031ba:	d101      	bne.n	81031c0 <HAL_DMA_Start_IT+0x1c0>
 81031bc:	2301      	movs	r3, #1
 81031be:	e000      	b.n	81031c2 <HAL_DMA_Start_IT+0x1c2>
 81031c0:	2300      	movs	r3, #0
 81031c2:	2b00      	cmp	r3, #0
 81031c4:	d036      	beq.n	8103234 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 81031c6:	68fb      	ldr	r3, [r7, #12]
 81031c8:	681b      	ldr	r3, [r3, #0]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	f023 021e 	bic.w	r2, r3, #30
 81031d0:	68fb      	ldr	r3, [r7, #12]
 81031d2:	681b      	ldr	r3, [r3, #0]
 81031d4:	f042 0216 	orr.w	r2, r2, #22
 81031d8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 81031da:	68fb      	ldr	r3, [r7, #12]
 81031dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81031de:	2b00      	cmp	r3, #0
 81031e0:	d03e      	beq.n	8103260 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 81031e2:	68fb      	ldr	r3, [r7, #12]
 81031e4:	681b      	ldr	r3, [r3, #0]
 81031e6:	681a      	ldr	r2, [r3, #0]
 81031e8:	68fb      	ldr	r3, [r7, #12]
 81031ea:	681b      	ldr	r3, [r3, #0]
 81031ec:	f042 0208 	orr.w	r2, r2, #8
 81031f0:	601a      	str	r2, [r3, #0]
 81031f2:	e035      	b.n	8103260 <HAL_DMA_Start_IT+0x260>
 81031f4:	40020010 	.word	0x40020010
 81031f8:	40020028 	.word	0x40020028
 81031fc:	40020040 	.word	0x40020040
 8103200:	40020058 	.word	0x40020058
 8103204:	40020070 	.word	0x40020070
 8103208:	40020088 	.word	0x40020088
 810320c:	400200a0 	.word	0x400200a0
 8103210:	400200b8 	.word	0x400200b8
 8103214:	40020410 	.word	0x40020410
 8103218:	40020428 	.word	0x40020428
 810321c:	40020440 	.word	0x40020440
 8103220:	40020458 	.word	0x40020458
 8103224:	40020470 	.word	0x40020470
 8103228:	40020488 	.word	0x40020488
 810322c:	400204a0 	.word	0x400204a0
 8103230:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8103234:	68fb      	ldr	r3, [r7, #12]
 8103236:	681b      	ldr	r3, [r3, #0]
 8103238:	681b      	ldr	r3, [r3, #0]
 810323a:	f023 020e 	bic.w	r2, r3, #14
 810323e:	68fb      	ldr	r3, [r7, #12]
 8103240:	681b      	ldr	r3, [r3, #0]
 8103242:	f042 020a 	orr.w	r2, r2, #10
 8103246:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8103248:	68fb      	ldr	r3, [r7, #12]
 810324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810324c:	2b00      	cmp	r3, #0
 810324e:	d007      	beq.n	8103260 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8103250:	68fb      	ldr	r3, [r7, #12]
 8103252:	681b      	ldr	r3, [r3, #0]
 8103254:	681a      	ldr	r2, [r3, #0]
 8103256:	68fb      	ldr	r3, [r7, #12]
 8103258:	681b      	ldr	r3, [r3, #0]
 810325a:	f042 0204 	orr.w	r2, r2, #4
 810325e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103260:	68fb      	ldr	r3, [r7, #12]
 8103262:	681b      	ldr	r3, [r3, #0]
 8103264:	4a83      	ldr	r2, [pc, #524]	@ (8103474 <HAL_DMA_Start_IT+0x474>)
 8103266:	4293      	cmp	r3, r2
 8103268:	d072      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810326a:	68fb      	ldr	r3, [r7, #12]
 810326c:	681b      	ldr	r3, [r3, #0]
 810326e:	4a82      	ldr	r2, [pc, #520]	@ (8103478 <HAL_DMA_Start_IT+0x478>)
 8103270:	4293      	cmp	r3, r2
 8103272:	d06d      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103274:	68fb      	ldr	r3, [r7, #12]
 8103276:	681b      	ldr	r3, [r3, #0]
 8103278:	4a80      	ldr	r2, [pc, #512]	@ (810347c <HAL_DMA_Start_IT+0x47c>)
 810327a:	4293      	cmp	r3, r2
 810327c:	d068      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810327e:	68fb      	ldr	r3, [r7, #12]
 8103280:	681b      	ldr	r3, [r3, #0]
 8103282:	4a7f      	ldr	r2, [pc, #508]	@ (8103480 <HAL_DMA_Start_IT+0x480>)
 8103284:	4293      	cmp	r3, r2
 8103286:	d063      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103288:	68fb      	ldr	r3, [r7, #12]
 810328a:	681b      	ldr	r3, [r3, #0]
 810328c:	4a7d      	ldr	r2, [pc, #500]	@ (8103484 <HAL_DMA_Start_IT+0x484>)
 810328e:	4293      	cmp	r3, r2
 8103290:	d05e      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103292:	68fb      	ldr	r3, [r7, #12]
 8103294:	681b      	ldr	r3, [r3, #0]
 8103296:	4a7c      	ldr	r2, [pc, #496]	@ (8103488 <HAL_DMA_Start_IT+0x488>)
 8103298:	4293      	cmp	r3, r2
 810329a:	d059      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810329c:	68fb      	ldr	r3, [r7, #12]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	4a7a      	ldr	r2, [pc, #488]	@ (810348c <HAL_DMA_Start_IT+0x48c>)
 81032a2:	4293      	cmp	r3, r2
 81032a4:	d054      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032a6:	68fb      	ldr	r3, [r7, #12]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	4a79      	ldr	r2, [pc, #484]	@ (8103490 <HAL_DMA_Start_IT+0x490>)
 81032ac:	4293      	cmp	r3, r2
 81032ae:	d04f      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032b0:	68fb      	ldr	r3, [r7, #12]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	4a77      	ldr	r2, [pc, #476]	@ (8103494 <HAL_DMA_Start_IT+0x494>)
 81032b6:	4293      	cmp	r3, r2
 81032b8:	d04a      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032ba:	68fb      	ldr	r3, [r7, #12]
 81032bc:	681b      	ldr	r3, [r3, #0]
 81032be:	4a76      	ldr	r2, [pc, #472]	@ (8103498 <HAL_DMA_Start_IT+0x498>)
 81032c0:	4293      	cmp	r3, r2
 81032c2:	d045      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032c4:	68fb      	ldr	r3, [r7, #12]
 81032c6:	681b      	ldr	r3, [r3, #0]
 81032c8:	4a74      	ldr	r2, [pc, #464]	@ (810349c <HAL_DMA_Start_IT+0x49c>)
 81032ca:	4293      	cmp	r3, r2
 81032cc:	d040      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032ce:	68fb      	ldr	r3, [r7, #12]
 81032d0:	681b      	ldr	r3, [r3, #0]
 81032d2:	4a73      	ldr	r2, [pc, #460]	@ (81034a0 <HAL_DMA_Start_IT+0x4a0>)
 81032d4:	4293      	cmp	r3, r2
 81032d6:	d03b      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032d8:	68fb      	ldr	r3, [r7, #12]
 81032da:	681b      	ldr	r3, [r3, #0]
 81032dc:	4a71      	ldr	r2, [pc, #452]	@ (81034a4 <HAL_DMA_Start_IT+0x4a4>)
 81032de:	4293      	cmp	r3, r2
 81032e0:	d036      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032e2:	68fb      	ldr	r3, [r7, #12]
 81032e4:	681b      	ldr	r3, [r3, #0]
 81032e6:	4a70      	ldr	r2, [pc, #448]	@ (81034a8 <HAL_DMA_Start_IT+0x4a8>)
 81032e8:	4293      	cmp	r3, r2
 81032ea:	d031      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032ec:	68fb      	ldr	r3, [r7, #12]
 81032ee:	681b      	ldr	r3, [r3, #0]
 81032f0:	4a6e      	ldr	r2, [pc, #440]	@ (81034ac <HAL_DMA_Start_IT+0x4ac>)
 81032f2:	4293      	cmp	r3, r2
 81032f4:	d02c      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 81032f6:	68fb      	ldr	r3, [r7, #12]
 81032f8:	681b      	ldr	r3, [r3, #0]
 81032fa:	4a6d      	ldr	r2, [pc, #436]	@ (81034b0 <HAL_DMA_Start_IT+0x4b0>)
 81032fc:	4293      	cmp	r3, r2
 81032fe:	d027      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103300:	68fb      	ldr	r3, [r7, #12]
 8103302:	681b      	ldr	r3, [r3, #0]
 8103304:	4a6b      	ldr	r2, [pc, #428]	@ (81034b4 <HAL_DMA_Start_IT+0x4b4>)
 8103306:	4293      	cmp	r3, r2
 8103308:	d022      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810330a:	68fb      	ldr	r3, [r7, #12]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	4a6a      	ldr	r2, [pc, #424]	@ (81034b8 <HAL_DMA_Start_IT+0x4b8>)
 8103310:	4293      	cmp	r3, r2
 8103312:	d01d      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103314:	68fb      	ldr	r3, [r7, #12]
 8103316:	681b      	ldr	r3, [r3, #0]
 8103318:	4a68      	ldr	r2, [pc, #416]	@ (81034bc <HAL_DMA_Start_IT+0x4bc>)
 810331a:	4293      	cmp	r3, r2
 810331c:	d018      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810331e:	68fb      	ldr	r3, [r7, #12]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	4a67      	ldr	r2, [pc, #412]	@ (81034c0 <HAL_DMA_Start_IT+0x4c0>)
 8103324:	4293      	cmp	r3, r2
 8103326:	d013      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103328:	68fb      	ldr	r3, [r7, #12]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	4a65      	ldr	r2, [pc, #404]	@ (81034c4 <HAL_DMA_Start_IT+0x4c4>)
 810332e:	4293      	cmp	r3, r2
 8103330:	d00e      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103332:	68fb      	ldr	r3, [r7, #12]
 8103334:	681b      	ldr	r3, [r3, #0]
 8103336:	4a64      	ldr	r2, [pc, #400]	@ (81034c8 <HAL_DMA_Start_IT+0x4c8>)
 8103338:	4293      	cmp	r3, r2
 810333a:	d009      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 810333c:	68fb      	ldr	r3, [r7, #12]
 810333e:	681b      	ldr	r3, [r3, #0]
 8103340:	4a62      	ldr	r2, [pc, #392]	@ (81034cc <HAL_DMA_Start_IT+0x4cc>)
 8103342:	4293      	cmp	r3, r2
 8103344:	d004      	beq.n	8103350 <HAL_DMA_Start_IT+0x350>
 8103346:	68fb      	ldr	r3, [r7, #12]
 8103348:	681b      	ldr	r3, [r3, #0]
 810334a:	4a61      	ldr	r2, [pc, #388]	@ (81034d0 <HAL_DMA_Start_IT+0x4d0>)
 810334c:	4293      	cmp	r3, r2
 810334e:	d101      	bne.n	8103354 <HAL_DMA_Start_IT+0x354>
 8103350:	2301      	movs	r3, #1
 8103352:	e000      	b.n	8103356 <HAL_DMA_Start_IT+0x356>
 8103354:	2300      	movs	r3, #0
 8103356:	2b00      	cmp	r3, #0
 8103358:	d01a      	beq.n	8103390 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 810335a:	68fb      	ldr	r3, [r7, #12]
 810335c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810335e:	681b      	ldr	r3, [r3, #0]
 8103360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8103364:	2b00      	cmp	r3, #0
 8103366:	d007      	beq.n	8103378 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8103368:	68fb      	ldr	r3, [r7, #12]
 810336a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810336c:	681a      	ldr	r2, [r3, #0]
 810336e:	68fb      	ldr	r3, [r7, #12]
 8103370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103372:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8103376:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8103378:	68fb      	ldr	r3, [r7, #12]
 810337a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810337c:	2b00      	cmp	r3, #0
 810337e:	d007      	beq.n	8103390 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8103380:	68fb      	ldr	r3, [r7, #12]
 8103382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103384:	681a      	ldr	r2, [r3, #0]
 8103386:	68fb      	ldr	r3, [r7, #12]
 8103388:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810338a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 810338e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8103390:	68fb      	ldr	r3, [r7, #12]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	4a37      	ldr	r2, [pc, #220]	@ (8103474 <HAL_DMA_Start_IT+0x474>)
 8103396:	4293      	cmp	r3, r2
 8103398:	d04a      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 810339a:	68fb      	ldr	r3, [r7, #12]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	4a36      	ldr	r2, [pc, #216]	@ (8103478 <HAL_DMA_Start_IT+0x478>)
 81033a0:	4293      	cmp	r3, r2
 81033a2:	d045      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033a4:	68fb      	ldr	r3, [r7, #12]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	4a34      	ldr	r2, [pc, #208]	@ (810347c <HAL_DMA_Start_IT+0x47c>)
 81033aa:	4293      	cmp	r3, r2
 81033ac:	d040      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033ae:	68fb      	ldr	r3, [r7, #12]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	4a33      	ldr	r2, [pc, #204]	@ (8103480 <HAL_DMA_Start_IT+0x480>)
 81033b4:	4293      	cmp	r3, r2
 81033b6:	d03b      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033b8:	68fb      	ldr	r3, [r7, #12]
 81033ba:	681b      	ldr	r3, [r3, #0]
 81033bc:	4a31      	ldr	r2, [pc, #196]	@ (8103484 <HAL_DMA_Start_IT+0x484>)
 81033be:	4293      	cmp	r3, r2
 81033c0:	d036      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033c2:	68fb      	ldr	r3, [r7, #12]
 81033c4:	681b      	ldr	r3, [r3, #0]
 81033c6:	4a30      	ldr	r2, [pc, #192]	@ (8103488 <HAL_DMA_Start_IT+0x488>)
 81033c8:	4293      	cmp	r3, r2
 81033ca:	d031      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033cc:	68fb      	ldr	r3, [r7, #12]
 81033ce:	681b      	ldr	r3, [r3, #0]
 81033d0:	4a2e      	ldr	r2, [pc, #184]	@ (810348c <HAL_DMA_Start_IT+0x48c>)
 81033d2:	4293      	cmp	r3, r2
 81033d4:	d02c      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033d6:	68fb      	ldr	r3, [r7, #12]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	4a2d      	ldr	r2, [pc, #180]	@ (8103490 <HAL_DMA_Start_IT+0x490>)
 81033dc:	4293      	cmp	r3, r2
 81033de:	d027      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033e0:	68fb      	ldr	r3, [r7, #12]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	4a2b      	ldr	r2, [pc, #172]	@ (8103494 <HAL_DMA_Start_IT+0x494>)
 81033e6:	4293      	cmp	r3, r2
 81033e8:	d022      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033ea:	68fb      	ldr	r3, [r7, #12]
 81033ec:	681b      	ldr	r3, [r3, #0]
 81033ee:	4a2a      	ldr	r2, [pc, #168]	@ (8103498 <HAL_DMA_Start_IT+0x498>)
 81033f0:	4293      	cmp	r3, r2
 81033f2:	d01d      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033f4:	68fb      	ldr	r3, [r7, #12]
 81033f6:	681b      	ldr	r3, [r3, #0]
 81033f8:	4a28      	ldr	r2, [pc, #160]	@ (810349c <HAL_DMA_Start_IT+0x49c>)
 81033fa:	4293      	cmp	r3, r2
 81033fc:	d018      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 81033fe:	68fb      	ldr	r3, [r7, #12]
 8103400:	681b      	ldr	r3, [r3, #0]
 8103402:	4a27      	ldr	r2, [pc, #156]	@ (81034a0 <HAL_DMA_Start_IT+0x4a0>)
 8103404:	4293      	cmp	r3, r2
 8103406:	d013      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 8103408:	68fb      	ldr	r3, [r7, #12]
 810340a:	681b      	ldr	r3, [r3, #0]
 810340c:	4a25      	ldr	r2, [pc, #148]	@ (81034a4 <HAL_DMA_Start_IT+0x4a4>)
 810340e:	4293      	cmp	r3, r2
 8103410:	d00e      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 8103412:	68fb      	ldr	r3, [r7, #12]
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	4a24      	ldr	r2, [pc, #144]	@ (81034a8 <HAL_DMA_Start_IT+0x4a8>)
 8103418:	4293      	cmp	r3, r2
 810341a:	d009      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 810341c:	68fb      	ldr	r3, [r7, #12]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	4a22      	ldr	r2, [pc, #136]	@ (81034ac <HAL_DMA_Start_IT+0x4ac>)
 8103422:	4293      	cmp	r3, r2
 8103424:	d004      	beq.n	8103430 <HAL_DMA_Start_IT+0x430>
 8103426:	68fb      	ldr	r3, [r7, #12]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	4a21      	ldr	r2, [pc, #132]	@ (81034b0 <HAL_DMA_Start_IT+0x4b0>)
 810342c:	4293      	cmp	r3, r2
 810342e:	d108      	bne.n	8103442 <HAL_DMA_Start_IT+0x442>
 8103430:	68fb      	ldr	r3, [r7, #12]
 8103432:	681b      	ldr	r3, [r3, #0]
 8103434:	681a      	ldr	r2, [r3, #0]
 8103436:	68fb      	ldr	r3, [r7, #12]
 8103438:	681b      	ldr	r3, [r3, #0]
 810343a:	f042 0201 	orr.w	r2, r2, #1
 810343e:	601a      	str	r2, [r3, #0]
 8103440:	e012      	b.n	8103468 <HAL_DMA_Start_IT+0x468>
 8103442:	68fb      	ldr	r3, [r7, #12]
 8103444:	681b      	ldr	r3, [r3, #0]
 8103446:	681a      	ldr	r2, [r3, #0]
 8103448:	68fb      	ldr	r3, [r7, #12]
 810344a:	681b      	ldr	r3, [r3, #0]
 810344c:	f042 0201 	orr.w	r2, r2, #1
 8103450:	601a      	str	r2, [r3, #0]
 8103452:	e009      	b.n	8103468 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8103454:	68fb      	ldr	r3, [r7, #12]
 8103456:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810345a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 810345c:	68fb      	ldr	r3, [r7, #12]
 810345e:	2200      	movs	r2, #0
 8103460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8103464:	2301      	movs	r3, #1
 8103466:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8103468:	7dfb      	ldrb	r3, [r7, #23]
}
 810346a:	4618      	mov	r0, r3
 810346c:	3718      	adds	r7, #24
 810346e:	46bd      	mov	sp, r7
 8103470:	bd80      	pop	{r7, pc}
 8103472:	bf00      	nop
 8103474:	40020010 	.word	0x40020010
 8103478:	40020028 	.word	0x40020028
 810347c:	40020040 	.word	0x40020040
 8103480:	40020058 	.word	0x40020058
 8103484:	40020070 	.word	0x40020070
 8103488:	40020088 	.word	0x40020088
 810348c:	400200a0 	.word	0x400200a0
 8103490:	400200b8 	.word	0x400200b8
 8103494:	40020410 	.word	0x40020410
 8103498:	40020428 	.word	0x40020428
 810349c:	40020440 	.word	0x40020440
 81034a0:	40020458 	.word	0x40020458
 81034a4:	40020470 	.word	0x40020470
 81034a8:	40020488 	.word	0x40020488
 81034ac:	400204a0 	.word	0x400204a0
 81034b0:	400204b8 	.word	0x400204b8
 81034b4:	58025408 	.word	0x58025408
 81034b8:	5802541c 	.word	0x5802541c
 81034bc:	58025430 	.word	0x58025430
 81034c0:	58025444 	.word	0x58025444
 81034c4:	58025458 	.word	0x58025458
 81034c8:	5802546c 	.word	0x5802546c
 81034cc:	58025480 	.word	0x58025480
 81034d0:	58025494 	.word	0x58025494

081034d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 81034d4:	b580      	push	{r7, lr}
 81034d6:	b086      	sub	sp, #24
 81034d8:	af00      	add	r7, sp, #0
 81034da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 81034dc:	f7ff f936 	bl	810274c <HAL_GetTick>
 81034e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 81034e2:	687b      	ldr	r3, [r7, #4]
 81034e4:	2b00      	cmp	r3, #0
 81034e6:	d101      	bne.n	81034ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 81034e8:	2301      	movs	r3, #1
 81034ea:	e2dc      	b.n	8103aa6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 81034ec:	687b      	ldr	r3, [r7, #4]
 81034ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 81034f2:	b2db      	uxtb	r3, r3
 81034f4:	2b02      	cmp	r3, #2
 81034f6:	d008      	beq.n	810350a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81034f8:	687b      	ldr	r3, [r7, #4]
 81034fa:	2280      	movs	r2, #128	@ 0x80
 81034fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 81034fe:	687b      	ldr	r3, [r7, #4]
 8103500:	2200      	movs	r2, #0
 8103502:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8103506:	2301      	movs	r3, #1
 8103508:	e2cd      	b.n	8103aa6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 810350a:	687b      	ldr	r3, [r7, #4]
 810350c:	681b      	ldr	r3, [r3, #0]
 810350e:	4a76      	ldr	r2, [pc, #472]	@ (81036e8 <HAL_DMA_Abort+0x214>)
 8103510:	4293      	cmp	r3, r2
 8103512:	d04a      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103514:	687b      	ldr	r3, [r7, #4]
 8103516:	681b      	ldr	r3, [r3, #0]
 8103518:	4a74      	ldr	r2, [pc, #464]	@ (81036ec <HAL_DMA_Abort+0x218>)
 810351a:	4293      	cmp	r3, r2
 810351c:	d045      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	681b      	ldr	r3, [r3, #0]
 8103522:	4a73      	ldr	r2, [pc, #460]	@ (81036f0 <HAL_DMA_Abort+0x21c>)
 8103524:	4293      	cmp	r3, r2
 8103526:	d040      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103528:	687b      	ldr	r3, [r7, #4]
 810352a:	681b      	ldr	r3, [r3, #0]
 810352c:	4a71      	ldr	r2, [pc, #452]	@ (81036f4 <HAL_DMA_Abort+0x220>)
 810352e:	4293      	cmp	r3, r2
 8103530:	d03b      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103532:	687b      	ldr	r3, [r7, #4]
 8103534:	681b      	ldr	r3, [r3, #0]
 8103536:	4a70      	ldr	r2, [pc, #448]	@ (81036f8 <HAL_DMA_Abort+0x224>)
 8103538:	4293      	cmp	r3, r2
 810353a:	d036      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 810353c:	687b      	ldr	r3, [r7, #4]
 810353e:	681b      	ldr	r3, [r3, #0]
 8103540:	4a6e      	ldr	r2, [pc, #440]	@ (81036fc <HAL_DMA_Abort+0x228>)
 8103542:	4293      	cmp	r3, r2
 8103544:	d031      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103546:	687b      	ldr	r3, [r7, #4]
 8103548:	681b      	ldr	r3, [r3, #0]
 810354a:	4a6d      	ldr	r2, [pc, #436]	@ (8103700 <HAL_DMA_Abort+0x22c>)
 810354c:	4293      	cmp	r3, r2
 810354e:	d02c      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103550:	687b      	ldr	r3, [r7, #4]
 8103552:	681b      	ldr	r3, [r3, #0]
 8103554:	4a6b      	ldr	r2, [pc, #428]	@ (8103704 <HAL_DMA_Abort+0x230>)
 8103556:	4293      	cmp	r3, r2
 8103558:	d027      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 810355a:	687b      	ldr	r3, [r7, #4]
 810355c:	681b      	ldr	r3, [r3, #0]
 810355e:	4a6a      	ldr	r2, [pc, #424]	@ (8103708 <HAL_DMA_Abort+0x234>)
 8103560:	4293      	cmp	r3, r2
 8103562:	d022      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103564:	687b      	ldr	r3, [r7, #4]
 8103566:	681b      	ldr	r3, [r3, #0]
 8103568:	4a68      	ldr	r2, [pc, #416]	@ (810370c <HAL_DMA_Abort+0x238>)
 810356a:	4293      	cmp	r3, r2
 810356c:	d01d      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 810356e:	687b      	ldr	r3, [r7, #4]
 8103570:	681b      	ldr	r3, [r3, #0]
 8103572:	4a67      	ldr	r2, [pc, #412]	@ (8103710 <HAL_DMA_Abort+0x23c>)
 8103574:	4293      	cmp	r3, r2
 8103576:	d018      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103578:	687b      	ldr	r3, [r7, #4]
 810357a:	681b      	ldr	r3, [r3, #0]
 810357c:	4a65      	ldr	r2, [pc, #404]	@ (8103714 <HAL_DMA_Abort+0x240>)
 810357e:	4293      	cmp	r3, r2
 8103580:	d013      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	681b      	ldr	r3, [r3, #0]
 8103586:	4a64      	ldr	r2, [pc, #400]	@ (8103718 <HAL_DMA_Abort+0x244>)
 8103588:	4293      	cmp	r3, r2
 810358a:	d00e      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 810358c:	687b      	ldr	r3, [r7, #4]
 810358e:	681b      	ldr	r3, [r3, #0]
 8103590:	4a62      	ldr	r2, [pc, #392]	@ (810371c <HAL_DMA_Abort+0x248>)
 8103592:	4293      	cmp	r3, r2
 8103594:	d009      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	681b      	ldr	r3, [r3, #0]
 810359a:	4a61      	ldr	r2, [pc, #388]	@ (8103720 <HAL_DMA_Abort+0x24c>)
 810359c:	4293      	cmp	r3, r2
 810359e:	d004      	beq.n	81035aa <HAL_DMA_Abort+0xd6>
 81035a0:	687b      	ldr	r3, [r7, #4]
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	4a5f      	ldr	r2, [pc, #380]	@ (8103724 <HAL_DMA_Abort+0x250>)
 81035a6:	4293      	cmp	r3, r2
 81035a8:	d101      	bne.n	81035ae <HAL_DMA_Abort+0xda>
 81035aa:	2301      	movs	r3, #1
 81035ac:	e000      	b.n	81035b0 <HAL_DMA_Abort+0xdc>
 81035ae:	2300      	movs	r3, #0
 81035b0:	2b00      	cmp	r3, #0
 81035b2:	d013      	beq.n	81035dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 81035b4:	687b      	ldr	r3, [r7, #4]
 81035b6:	681b      	ldr	r3, [r3, #0]
 81035b8:	681a      	ldr	r2, [r3, #0]
 81035ba:	687b      	ldr	r3, [r7, #4]
 81035bc:	681b      	ldr	r3, [r3, #0]
 81035be:	f022 021e 	bic.w	r2, r2, #30
 81035c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81035c4:	687b      	ldr	r3, [r7, #4]
 81035c6:	681b      	ldr	r3, [r3, #0]
 81035c8:	695a      	ldr	r2, [r3, #20]
 81035ca:	687b      	ldr	r3, [r7, #4]
 81035cc:	681b      	ldr	r3, [r3, #0]
 81035ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81035d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 81035d4:	687b      	ldr	r3, [r7, #4]
 81035d6:	681b      	ldr	r3, [r3, #0]
 81035d8:	617b      	str	r3, [r7, #20]
 81035da:	e00a      	b.n	81035f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 81035dc:	687b      	ldr	r3, [r7, #4]
 81035de:	681b      	ldr	r3, [r3, #0]
 81035e0:	681a      	ldr	r2, [r3, #0]
 81035e2:	687b      	ldr	r3, [r7, #4]
 81035e4:	681b      	ldr	r3, [r3, #0]
 81035e6:	f022 020e 	bic.w	r2, r2, #14
 81035ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 81035ec:	687b      	ldr	r3, [r7, #4]
 81035ee:	681b      	ldr	r3, [r3, #0]
 81035f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81035f2:	687b      	ldr	r3, [r7, #4]
 81035f4:	681b      	ldr	r3, [r3, #0]
 81035f6:	4a3c      	ldr	r2, [pc, #240]	@ (81036e8 <HAL_DMA_Abort+0x214>)
 81035f8:	4293      	cmp	r3, r2
 81035fa:	d072      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81035fc:	687b      	ldr	r3, [r7, #4]
 81035fe:	681b      	ldr	r3, [r3, #0]
 8103600:	4a3a      	ldr	r2, [pc, #232]	@ (81036ec <HAL_DMA_Abort+0x218>)
 8103602:	4293      	cmp	r3, r2
 8103604:	d06d      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103606:	687b      	ldr	r3, [r7, #4]
 8103608:	681b      	ldr	r3, [r3, #0]
 810360a:	4a39      	ldr	r2, [pc, #228]	@ (81036f0 <HAL_DMA_Abort+0x21c>)
 810360c:	4293      	cmp	r3, r2
 810360e:	d068      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103610:	687b      	ldr	r3, [r7, #4]
 8103612:	681b      	ldr	r3, [r3, #0]
 8103614:	4a37      	ldr	r2, [pc, #220]	@ (81036f4 <HAL_DMA_Abort+0x220>)
 8103616:	4293      	cmp	r3, r2
 8103618:	d063      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810361a:	687b      	ldr	r3, [r7, #4]
 810361c:	681b      	ldr	r3, [r3, #0]
 810361e:	4a36      	ldr	r2, [pc, #216]	@ (81036f8 <HAL_DMA_Abort+0x224>)
 8103620:	4293      	cmp	r3, r2
 8103622:	d05e      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103624:	687b      	ldr	r3, [r7, #4]
 8103626:	681b      	ldr	r3, [r3, #0]
 8103628:	4a34      	ldr	r2, [pc, #208]	@ (81036fc <HAL_DMA_Abort+0x228>)
 810362a:	4293      	cmp	r3, r2
 810362c:	d059      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	681b      	ldr	r3, [r3, #0]
 8103632:	4a33      	ldr	r2, [pc, #204]	@ (8103700 <HAL_DMA_Abort+0x22c>)
 8103634:	4293      	cmp	r3, r2
 8103636:	d054      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103638:	687b      	ldr	r3, [r7, #4]
 810363a:	681b      	ldr	r3, [r3, #0]
 810363c:	4a31      	ldr	r2, [pc, #196]	@ (8103704 <HAL_DMA_Abort+0x230>)
 810363e:	4293      	cmp	r3, r2
 8103640:	d04f      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103642:	687b      	ldr	r3, [r7, #4]
 8103644:	681b      	ldr	r3, [r3, #0]
 8103646:	4a30      	ldr	r2, [pc, #192]	@ (8103708 <HAL_DMA_Abort+0x234>)
 8103648:	4293      	cmp	r3, r2
 810364a:	d04a      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810364c:	687b      	ldr	r3, [r7, #4]
 810364e:	681b      	ldr	r3, [r3, #0]
 8103650:	4a2e      	ldr	r2, [pc, #184]	@ (810370c <HAL_DMA_Abort+0x238>)
 8103652:	4293      	cmp	r3, r2
 8103654:	d045      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103656:	687b      	ldr	r3, [r7, #4]
 8103658:	681b      	ldr	r3, [r3, #0]
 810365a:	4a2d      	ldr	r2, [pc, #180]	@ (8103710 <HAL_DMA_Abort+0x23c>)
 810365c:	4293      	cmp	r3, r2
 810365e:	d040      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103660:	687b      	ldr	r3, [r7, #4]
 8103662:	681b      	ldr	r3, [r3, #0]
 8103664:	4a2b      	ldr	r2, [pc, #172]	@ (8103714 <HAL_DMA_Abort+0x240>)
 8103666:	4293      	cmp	r3, r2
 8103668:	d03b      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810366a:	687b      	ldr	r3, [r7, #4]
 810366c:	681b      	ldr	r3, [r3, #0]
 810366e:	4a2a      	ldr	r2, [pc, #168]	@ (8103718 <HAL_DMA_Abort+0x244>)
 8103670:	4293      	cmp	r3, r2
 8103672:	d036      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103674:	687b      	ldr	r3, [r7, #4]
 8103676:	681b      	ldr	r3, [r3, #0]
 8103678:	4a28      	ldr	r2, [pc, #160]	@ (810371c <HAL_DMA_Abort+0x248>)
 810367a:	4293      	cmp	r3, r2
 810367c:	d031      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	681b      	ldr	r3, [r3, #0]
 8103682:	4a27      	ldr	r2, [pc, #156]	@ (8103720 <HAL_DMA_Abort+0x24c>)
 8103684:	4293      	cmp	r3, r2
 8103686:	d02c      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	681b      	ldr	r3, [r3, #0]
 810368c:	4a25      	ldr	r2, [pc, #148]	@ (8103724 <HAL_DMA_Abort+0x250>)
 810368e:	4293      	cmp	r3, r2
 8103690:	d027      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 8103692:	687b      	ldr	r3, [r7, #4]
 8103694:	681b      	ldr	r3, [r3, #0]
 8103696:	4a24      	ldr	r2, [pc, #144]	@ (8103728 <HAL_DMA_Abort+0x254>)
 8103698:	4293      	cmp	r3, r2
 810369a:	d022      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 810369c:	687b      	ldr	r3, [r7, #4]
 810369e:	681b      	ldr	r3, [r3, #0]
 81036a0:	4a22      	ldr	r2, [pc, #136]	@ (810372c <HAL_DMA_Abort+0x258>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d01d      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	681b      	ldr	r3, [r3, #0]
 81036aa:	4a21      	ldr	r2, [pc, #132]	@ (8103730 <HAL_DMA_Abort+0x25c>)
 81036ac:	4293      	cmp	r3, r2
 81036ae:	d018      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036b0:	687b      	ldr	r3, [r7, #4]
 81036b2:	681b      	ldr	r3, [r3, #0]
 81036b4:	4a1f      	ldr	r2, [pc, #124]	@ (8103734 <HAL_DMA_Abort+0x260>)
 81036b6:	4293      	cmp	r3, r2
 81036b8:	d013      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036ba:	687b      	ldr	r3, [r7, #4]
 81036bc:	681b      	ldr	r3, [r3, #0]
 81036be:	4a1e      	ldr	r2, [pc, #120]	@ (8103738 <HAL_DMA_Abort+0x264>)
 81036c0:	4293      	cmp	r3, r2
 81036c2:	d00e      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036c4:	687b      	ldr	r3, [r7, #4]
 81036c6:	681b      	ldr	r3, [r3, #0]
 81036c8:	4a1c      	ldr	r2, [pc, #112]	@ (810373c <HAL_DMA_Abort+0x268>)
 81036ca:	4293      	cmp	r3, r2
 81036cc:	d009      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	681b      	ldr	r3, [r3, #0]
 81036d2:	4a1b      	ldr	r2, [pc, #108]	@ (8103740 <HAL_DMA_Abort+0x26c>)
 81036d4:	4293      	cmp	r3, r2
 81036d6:	d004      	beq.n	81036e2 <HAL_DMA_Abort+0x20e>
 81036d8:	687b      	ldr	r3, [r7, #4]
 81036da:	681b      	ldr	r3, [r3, #0]
 81036dc:	4a19      	ldr	r2, [pc, #100]	@ (8103744 <HAL_DMA_Abort+0x270>)
 81036de:	4293      	cmp	r3, r2
 81036e0:	d132      	bne.n	8103748 <HAL_DMA_Abort+0x274>
 81036e2:	2301      	movs	r3, #1
 81036e4:	e031      	b.n	810374a <HAL_DMA_Abort+0x276>
 81036e6:	bf00      	nop
 81036e8:	40020010 	.word	0x40020010
 81036ec:	40020028 	.word	0x40020028
 81036f0:	40020040 	.word	0x40020040
 81036f4:	40020058 	.word	0x40020058
 81036f8:	40020070 	.word	0x40020070
 81036fc:	40020088 	.word	0x40020088
 8103700:	400200a0 	.word	0x400200a0
 8103704:	400200b8 	.word	0x400200b8
 8103708:	40020410 	.word	0x40020410
 810370c:	40020428 	.word	0x40020428
 8103710:	40020440 	.word	0x40020440
 8103714:	40020458 	.word	0x40020458
 8103718:	40020470 	.word	0x40020470
 810371c:	40020488 	.word	0x40020488
 8103720:	400204a0 	.word	0x400204a0
 8103724:	400204b8 	.word	0x400204b8
 8103728:	58025408 	.word	0x58025408
 810372c:	5802541c 	.word	0x5802541c
 8103730:	58025430 	.word	0x58025430
 8103734:	58025444 	.word	0x58025444
 8103738:	58025458 	.word	0x58025458
 810373c:	5802546c 	.word	0x5802546c
 8103740:	58025480 	.word	0x58025480
 8103744:	58025494 	.word	0x58025494
 8103748:	2300      	movs	r3, #0
 810374a:	2b00      	cmp	r3, #0
 810374c:	d007      	beq.n	810375e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 810374e:	687b      	ldr	r3, [r7, #4]
 8103750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103752:	681a      	ldr	r2, [r3, #0]
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103758:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 810375c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 810375e:	687b      	ldr	r3, [r7, #4]
 8103760:	681b      	ldr	r3, [r3, #0]
 8103762:	4a6d      	ldr	r2, [pc, #436]	@ (8103918 <HAL_DMA_Abort+0x444>)
 8103764:	4293      	cmp	r3, r2
 8103766:	d04a      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 8103768:	687b      	ldr	r3, [r7, #4]
 810376a:	681b      	ldr	r3, [r3, #0]
 810376c:	4a6b      	ldr	r2, [pc, #428]	@ (810391c <HAL_DMA_Abort+0x448>)
 810376e:	4293      	cmp	r3, r2
 8103770:	d045      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 8103772:	687b      	ldr	r3, [r7, #4]
 8103774:	681b      	ldr	r3, [r3, #0]
 8103776:	4a6a      	ldr	r2, [pc, #424]	@ (8103920 <HAL_DMA_Abort+0x44c>)
 8103778:	4293      	cmp	r3, r2
 810377a:	d040      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 810377c:	687b      	ldr	r3, [r7, #4]
 810377e:	681b      	ldr	r3, [r3, #0]
 8103780:	4a68      	ldr	r2, [pc, #416]	@ (8103924 <HAL_DMA_Abort+0x450>)
 8103782:	4293      	cmp	r3, r2
 8103784:	d03b      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 8103786:	687b      	ldr	r3, [r7, #4]
 8103788:	681b      	ldr	r3, [r3, #0]
 810378a:	4a67      	ldr	r2, [pc, #412]	@ (8103928 <HAL_DMA_Abort+0x454>)
 810378c:	4293      	cmp	r3, r2
 810378e:	d036      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 8103790:	687b      	ldr	r3, [r7, #4]
 8103792:	681b      	ldr	r3, [r3, #0]
 8103794:	4a65      	ldr	r2, [pc, #404]	@ (810392c <HAL_DMA_Abort+0x458>)
 8103796:	4293      	cmp	r3, r2
 8103798:	d031      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 810379a:	687b      	ldr	r3, [r7, #4]
 810379c:	681b      	ldr	r3, [r3, #0]
 810379e:	4a64      	ldr	r2, [pc, #400]	@ (8103930 <HAL_DMA_Abort+0x45c>)
 81037a0:	4293      	cmp	r3, r2
 81037a2:	d02c      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037a4:	687b      	ldr	r3, [r7, #4]
 81037a6:	681b      	ldr	r3, [r3, #0]
 81037a8:	4a62      	ldr	r2, [pc, #392]	@ (8103934 <HAL_DMA_Abort+0x460>)
 81037aa:	4293      	cmp	r3, r2
 81037ac:	d027      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037ae:	687b      	ldr	r3, [r7, #4]
 81037b0:	681b      	ldr	r3, [r3, #0]
 81037b2:	4a61      	ldr	r2, [pc, #388]	@ (8103938 <HAL_DMA_Abort+0x464>)
 81037b4:	4293      	cmp	r3, r2
 81037b6:	d022      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037b8:	687b      	ldr	r3, [r7, #4]
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	4a5f      	ldr	r2, [pc, #380]	@ (810393c <HAL_DMA_Abort+0x468>)
 81037be:	4293      	cmp	r3, r2
 81037c0:	d01d      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037c2:	687b      	ldr	r3, [r7, #4]
 81037c4:	681b      	ldr	r3, [r3, #0]
 81037c6:	4a5e      	ldr	r2, [pc, #376]	@ (8103940 <HAL_DMA_Abort+0x46c>)
 81037c8:	4293      	cmp	r3, r2
 81037ca:	d018      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037cc:	687b      	ldr	r3, [r7, #4]
 81037ce:	681b      	ldr	r3, [r3, #0]
 81037d0:	4a5c      	ldr	r2, [pc, #368]	@ (8103944 <HAL_DMA_Abort+0x470>)
 81037d2:	4293      	cmp	r3, r2
 81037d4:	d013      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037d6:	687b      	ldr	r3, [r7, #4]
 81037d8:	681b      	ldr	r3, [r3, #0]
 81037da:	4a5b      	ldr	r2, [pc, #364]	@ (8103948 <HAL_DMA_Abort+0x474>)
 81037dc:	4293      	cmp	r3, r2
 81037de:	d00e      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037e0:	687b      	ldr	r3, [r7, #4]
 81037e2:	681b      	ldr	r3, [r3, #0]
 81037e4:	4a59      	ldr	r2, [pc, #356]	@ (810394c <HAL_DMA_Abort+0x478>)
 81037e6:	4293      	cmp	r3, r2
 81037e8:	d009      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037ea:	687b      	ldr	r3, [r7, #4]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a58      	ldr	r2, [pc, #352]	@ (8103950 <HAL_DMA_Abort+0x47c>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	d004      	beq.n	81037fe <HAL_DMA_Abort+0x32a>
 81037f4:	687b      	ldr	r3, [r7, #4]
 81037f6:	681b      	ldr	r3, [r3, #0]
 81037f8:	4a56      	ldr	r2, [pc, #344]	@ (8103954 <HAL_DMA_Abort+0x480>)
 81037fa:	4293      	cmp	r3, r2
 81037fc:	d108      	bne.n	8103810 <HAL_DMA_Abort+0x33c>
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	681b      	ldr	r3, [r3, #0]
 8103802:	681a      	ldr	r2, [r3, #0]
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	681b      	ldr	r3, [r3, #0]
 8103808:	f022 0201 	bic.w	r2, r2, #1
 810380c:	601a      	str	r2, [r3, #0]
 810380e:	e007      	b.n	8103820 <HAL_DMA_Abort+0x34c>
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	681b      	ldr	r3, [r3, #0]
 8103814:	681a      	ldr	r2, [r3, #0]
 8103816:	687b      	ldr	r3, [r7, #4]
 8103818:	681b      	ldr	r3, [r3, #0]
 810381a:	f022 0201 	bic.w	r2, r2, #1
 810381e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8103820:	e013      	b.n	810384a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8103822:	f7fe ff93 	bl	810274c <HAL_GetTick>
 8103826:	4602      	mov	r2, r0
 8103828:	693b      	ldr	r3, [r7, #16]
 810382a:	1ad3      	subs	r3, r2, r3
 810382c:	2b05      	cmp	r3, #5
 810382e:	d90c      	bls.n	810384a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8103830:	687b      	ldr	r3, [r7, #4]
 8103832:	2220      	movs	r2, #32
 8103834:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8103836:	687b      	ldr	r3, [r7, #4]
 8103838:	2203      	movs	r2, #3
 810383a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 810383e:	687b      	ldr	r3, [r7, #4]
 8103840:	2200      	movs	r2, #0
 8103842:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8103846:	2301      	movs	r3, #1
 8103848:	e12d      	b.n	8103aa6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 810384a:	697b      	ldr	r3, [r7, #20]
 810384c:	681b      	ldr	r3, [r3, #0]
 810384e:	f003 0301 	and.w	r3, r3, #1
 8103852:	2b00      	cmp	r3, #0
 8103854:	d1e5      	bne.n	8103822 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103856:	687b      	ldr	r3, [r7, #4]
 8103858:	681b      	ldr	r3, [r3, #0]
 810385a:	4a2f      	ldr	r2, [pc, #188]	@ (8103918 <HAL_DMA_Abort+0x444>)
 810385c:	4293      	cmp	r3, r2
 810385e:	d04a      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 8103860:	687b      	ldr	r3, [r7, #4]
 8103862:	681b      	ldr	r3, [r3, #0]
 8103864:	4a2d      	ldr	r2, [pc, #180]	@ (810391c <HAL_DMA_Abort+0x448>)
 8103866:	4293      	cmp	r3, r2
 8103868:	d045      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 810386a:	687b      	ldr	r3, [r7, #4]
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	4a2c      	ldr	r2, [pc, #176]	@ (8103920 <HAL_DMA_Abort+0x44c>)
 8103870:	4293      	cmp	r3, r2
 8103872:	d040      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 8103874:	687b      	ldr	r3, [r7, #4]
 8103876:	681b      	ldr	r3, [r3, #0]
 8103878:	4a2a      	ldr	r2, [pc, #168]	@ (8103924 <HAL_DMA_Abort+0x450>)
 810387a:	4293      	cmp	r3, r2
 810387c:	d03b      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 810387e:	687b      	ldr	r3, [r7, #4]
 8103880:	681b      	ldr	r3, [r3, #0]
 8103882:	4a29      	ldr	r2, [pc, #164]	@ (8103928 <HAL_DMA_Abort+0x454>)
 8103884:	4293      	cmp	r3, r2
 8103886:	d036      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	681b      	ldr	r3, [r3, #0]
 810388c:	4a27      	ldr	r2, [pc, #156]	@ (810392c <HAL_DMA_Abort+0x458>)
 810388e:	4293      	cmp	r3, r2
 8103890:	d031      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 8103892:	687b      	ldr	r3, [r7, #4]
 8103894:	681b      	ldr	r3, [r3, #0]
 8103896:	4a26      	ldr	r2, [pc, #152]	@ (8103930 <HAL_DMA_Abort+0x45c>)
 8103898:	4293      	cmp	r3, r2
 810389a:	d02c      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 810389c:	687b      	ldr	r3, [r7, #4]
 810389e:	681b      	ldr	r3, [r3, #0]
 81038a0:	4a24      	ldr	r2, [pc, #144]	@ (8103934 <HAL_DMA_Abort+0x460>)
 81038a2:	4293      	cmp	r3, r2
 81038a4:	d027      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038a6:	687b      	ldr	r3, [r7, #4]
 81038a8:	681b      	ldr	r3, [r3, #0]
 81038aa:	4a23      	ldr	r2, [pc, #140]	@ (8103938 <HAL_DMA_Abort+0x464>)
 81038ac:	4293      	cmp	r3, r2
 81038ae:	d022      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038b0:	687b      	ldr	r3, [r7, #4]
 81038b2:	681b      	ldr	r3, [r3, #0]
 81038b4:	4a21      	ldr	r2, [pc, #132]	@ (810393c <HAL_DMA_Abort+0x468>)
 81038b6:	4293      	cmp	r3, r2
 81038b8:	d01d      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038ba:	687b      	ldr	r3, [r7, #4]
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	4a20      	ldr	r2, [pc, #128]	@ (8103940 <HAL_DMA_Abort+0x46c>)
 81038c0:	4293      	cmp	r3, r2
 81038c2:	d018      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038c4:	687b      	ldr	r3, [r7, #4]
 81038c6:	681b      	ldr	r3, [r3, #0]
 81038c8:	4a1e      	ldr	r2, [pc, #120]	@ (8103944 <HAL_DMA_Abort+0x470>)
 81038ca:	4293      	cmp	r3, r2
 81038cc:	d013      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038ce:	687b      	ldr	r3, [r7, #4]
 81038d0:	681b      	ldr	r3, [r3, #0]
 81038d2:	4a1d      	ldr	r2, [pc, #116]	@ (8103948 <HAL_DMA_Abort+0x474>)
 81038d4:	4293      	cmp	r3, r2
 81038d6:	d00e      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038d8:	687b      	ldr	r3, [r7, #4]
 81038da:	681b      	ldr	r3, [r3, #0]
 81038dc:	4a1b      	ldr	r2, [pc, #108]	@ (810394c <HAL_DMA_Abort+0x478>)
 81038de:	4293      	cmp	r3, r2
 81038e0:	d009      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038e2:	687b      	ldr	r3, [r7, #4]
 81038e4:	681b      	ldr	r3, [r3, #0]
 81038e6:	4a1a      	ldr	r2, [pc, #104]	@ (8103950 <HAL_DMA_Abort+0x47c>)
 81038e8:	4293      	cmp	r3, r2
 81038ea:	d004      	beq.n	81038f6 <HAL_DMA_Abort+0x422>
 81038ec:	687b      	ldr	r3, [r7, #4]
 81038ee:	681b      	ldr	r3, [r3, #0]
 81038f0:	4a18      	ldr	r2, [pc, #96]	@ (8103954 <HAL_DMA_Abort+0x480>)
 81038f2:	4293      	cmp	r3, r2
 81038f4:	d101      	bne.n	81038fa <HAL_DMA_Abort+0x426>
 81038f6:	2301      	movs	r3, #1
 81038f8:	e000      	b.n	81038fc <HAL_DMA_Abort+0x428>
 81038fa:	2300      	movs	r3, #0
 81038fc:	2b00      	cmp	r3, #0
 81038fe:	d02b      	beq.n	8103958 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103900:	687b      	ldr	r3, [r7, #4]
 8103902:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103904:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8103906:	687b      	ldr	r3, [r7, #4]
 8103908:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810390a:	f003 031f 	and.w	r3, r3, #31
 810390e:	223f      	movs	r2, #63	@ 0x3f
 8103910:	409a      	lsls	r2, r3
 8103912:	68bb      	ldr	r3, [r7, #8]
 8103914:	609a      	str	r2, [r3, #8]
 8103916:	e02a      	b.n	810396e <HAL_DMA_Abort+0x49a>
 8103918:	40020010 	.word	0x40020010
 810391c:	40020028 	.word	0x40020028
 8103920:	40020040 	.word	0x40020040
 8103924:	40020058 	.word	0x40020058
 8103928:	40020070 	.word	0x40020070
 810392c:	40020088 	.word	0x40020088
 8103930:	400200a0 	.word	0x400200a0
 8103934:	400200b8 	.word	0x400200b8
 8103938:	40020410 	.word	0x40020410
 810393c:	40020428 	.word	0x40020428
 8103940:	40020440 	.word	0x40020440
 8103944:	40020458 	.word	0x40020458
 8103948:	40020470 	.word	0x40020470
 810394c:	40020488 	.word	0x40020488
 8103950:	400204a0 	.word	0x400204a0
 8103954:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103958:	687b      	ldr	r3, [r7, #4]
 810395a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810395c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 810395e:	687b      	ldr	r3, [r7, #4]
 8103960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103962:	f003 031f 	and.w	r3, r3, #31
 8103966:	2201      	movs	r2, #1
 8103968:	409a      	lsls	r2, r3
 810396a:	68fb      	ldr	r3, [r7, #12]
 810396c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 810396e:	687b      	ldr	r3, [r7, #4]
 8103970:	681b      	ldr	r3, [r3, #0]
 8103972:	4a4f      	ldr	r2, [pc, #316]	@ (8103ab0 <HAL_DMA_Abort+0x5dc>)
 8103974:	4293      	cmp	r3, r2
 8103976:	d072      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103978:	687b      	ldr	r3, [r7, #4]
 810397a:	681b      	ldr	r3, [r3, #0]
 810397c:	4a4d      	ldr	r2, [pc, #308]	@ (8103ab4 <HAL_DMA_Abort+0x5e0>)
 810397e:	4293      	cmp	r3, r2
 8103980:	d06d      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103982:	687b      	ldr	r3, [r7, #4]
 8103984:	681b      	ldr	r3, [r3, #0]
 8103986:	4a4c      	ldr	r2, [pc, #304]	@ (8103ab8 <HAL_DMA_Abort+0x5e4>)
 8103988:	4293      	cmp	r3, r2
 810398a:	d068      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 810398c:	687b      	ldr	r3, [r7, #4]
 810398e:	681b      	ldr	r3, [r3, #0]
 8103990:	4a4a      	ldr	r2, [pc, #296]	@ (8103abc <HAL_DMA_Abort+0x5e8>)
 8103992:	4293      	cmp	r3, r2
 8103994:	d063      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103996:	687b      	ldr	r3, [r7, #4]
 8103998:	681b      	ldr	r3, [r3, #0]
 810399a:	4a49      	ldr	r2, [pc, #292]	@ (8103ac0 <HAL_DMA_Abort+0x5ec>)
 810399c:	4293      	cmp	r3, r2
 810399e:	d05e      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039a0:	687b      	ldr	r3, [r7, #4]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	4a47      	ldr	r2, [pc, #284]	@ (8103ac4 <HAL_DMA_Abort+0x5f0>)
 81039a6:	4293      	cmp	r3, r2
 81039a8:	d059      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039aa:	687b      	ldr	r3, [r7, #4]
 81039ac:	681b      	ldr	r3, [r3, #0]
 81039ae:	4a46      	ldr	r2, [pc, #280]	@ (8103ac8 <HAL_DMA_Abort+0x5f4>)
 81039b0:	4293      	cmp	r3, r2
 81039b2:	d054      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039b4:	687b      	ldr	r3, [r7, #4]
 81039b6:	681b      	ldr	r3, [r3, #0]
 81039b8:	4a44      	ldr	r2, [pc, #272]	@ (8103acc <HAL_DMA_Abort+0x5f8>)
 81039ba:	4293      	cmp	r3, r2
 81039bc:	d04f      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039be:	687b      	ldr	r3, [r7, #4]
 81039c0:	681b      	ldr	r3, [r3, #0]
 81039c2:	4a43      	ldr	r2, [pc, #268]	@ (8103ad0 <HAL_DMA_Abort+0x5fc>)
 81039c4:	4293      	cmp	r3, r2
 81039c6:	d04a      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039c8:	687b      	ldr	r3, [r7, #4]
 81039ca:	681b      	ldr	r3, [r3, #0]
 81039cc:	4a41      	ldr	r2, [pc, #260]	@ (8103ad4 <HAL_DMA_Abort+0x600>)
 81039ce:	4293      	cmp	r3, r2
 81039d0:	d045      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039d2:	687b      	ldr	r3, [r7, #4]
 81039d4:	681b      	ldr	r3, [r3, #0]
 81039d6:	4a40      	ldr	r2, [pc, #256]	@ (8103ad8 <HAL_DMA_Abort+0x604>)
 81039d8:	4293      	cmp	r3, r2
 81039da:	d040      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039dc:	687b      	ldr	r3, [r7, #4]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a3e      	ldr	r2, [pc, #248]	@ (8103adc <HAL_DMA_Abort+0x608>)
 81039e2:	4293      	cmp	r3, r2
 81039e4:	d03b      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039e6:	687b      	ldr	r3, [r7, #4]
 81039e8:	681b      	ldr	r3, [r3, #0]
 81039ea:	4a3d      	ldr	r2, [pc, #244]	@ (8103ae0 <HAL_DMA_Abort+0x60c>)
 81039ec:	4293      	cmp	r3, r2
 81039ee:	d036      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039f0:	687b      	ldr	r3, [r7, #4]
 81039f2:	681b      	ldr	r3, [r3, #0]
 81039f4:	4a3b      	ldr	r2, [pc, #236]	@ (8103ae4 <HAL_DMA_Abort+0x610>)
 81039f6:	4293      	cmp	r3, r2
 81039f8:	d031      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 81039fa:	687b      	ldr	r3, [r7, #4]
 81039fc:	681b      	ldr	r3, [r3, #0]
 81039fe:	4a3a      	ldr	r2, [pc, #232]	@ (8103ae8 <HAL_DMA_Abort+0x614>)
 8103a00:	4293      	cmp	r3, r2
 8103a02:	d02c      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a04:	687b      	ldr	r3, [r7, #4]
 8103a06:	681b      	ldr	r3, [r3, #0]
 8103a08:	4a38      	ldr	r2, [pc, #224]	@ (8103aec <HAL_DMA_Abort+0x618>)
 8103a0a:	4293      	cmp	r3, r2
 8103a0c:	d027      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a0e:	687b      	ldr	r3, [r7, #4]
 8103a10:	681b      	ldr	r3, [r3, #0]
 8103a12:	4a37      	ldr	r2, [pc, #220]	@ (8103af0 <HAL_DMA_Abort+0x61c>)
 8103a14:	4293      	cmp	r3, r2
 8103a16:	d022      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a18:	687b      	ldr	r3, [r7, #4]
 8103a1a:	681b      	ldr	r3, [r3, #0]
 8103a1c:	4a35      	ldr	r2, [pc, #212]	@ (8103af4 <HAL_DMA_Abort+0x620>)
 8103a1e:	4293      	cmp	r3, r2
 8103a20:	d01d      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a22:	687b      	ldr	r3, [r7, #4]
 8103a24:	681b      	ldr	r3, [r3, #0]
 8103a26:	4a34      	ldr	r2, [pc, #208]	@ (8103af8 <HAL_DMA_Abort+0x624>)
 8103a28:	4293      	cmp	r3, r2
 8103a2a:	d018      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a2c:	687b      	ldr	r3, [r7, #4]
 8103a2e:	681b      	ldr	r3, [r3, #0]
 8103a30:	4a32      	ldr	r2, [pc, #200]	@ (8103afc <HAL_DMA_Abort+0x628>)
 8103a32:	4293      	cmp	r3, r2
 8103a34:	d013      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	4a31      	ldr	r2, [pc, #196]	@ (8103b00 <HAL_DMA_Abort+0x62c>)
 8103a3c:	4293      	cmp	r3, r2
 8103a3e:	d00e      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a40:	687b      	ldr	r3, [r7, #4]
 8103a42:	681b      	ldr	r3, [r3, #0]
 8103a44:	4a2f      	ldr	r2, [pc, #188]	@ (8103b04 <HAL_DMA_Abort+0x630>)
 8103a46:	4293      	cmp	r3, r2
 8103a48:	d009      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	681b      	ldr	r3, [r3, #0]
 8103a4e:	4a2e      	ldr	r2, [pc, #184]	@ (8103b08 <HAL_DMA_Abort+0x634>)
 8103a50:	4293      	cmp	r3, r2
 8103a52:	d004      	beq.n	8103a5e <HAL_DMA_Abort+0x58a>
 8103a54:	687b      	ldr	r3, [r7, #4]
 8103a56:	681b      	ldr	r3, [r3, #0]
 8103a58:	4a2c      	ldr	r2, [pc, #176]	@ (8103b0c <HAL_DMA_Abort+0x638>)
 8103a5a:	4293      	cmp	r3, r2
 8103a5c:	d101      	bne.n	8103a62 <HAL_DMA_Abort+0x58e>
 8103a5e:	2301      	movs	r3, #1
 8103a60:	e000      	b.n	8103a64 <HAL_DMA_Abort+0x590>
 8103a62:	2300      	movs	r3, #0
 8103a64:	2b00      	cmp	r3, #0
 8103a66:	d015      	beq.n	8103a94 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103a68:	687b      	ldr	r3, [r7, #4]
 8103a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103a6c:	687a      	ldr	r2, [r7, #4]
 8103a6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103a70:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8103a72:	687b      	ldr	r3, [r7, #4]
 8103a74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103a76:	2b00      	cmp	r3, #0
 8103a78:	d00c      	beq.n	8103a94 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103a7a:	687b      	ldr	r3, [r7, #4]
 8103a7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103a7e:	681a      	ldr	r2, [r3, #0]
 8103a80:	687b      	ldr	r3, [r7, #4]
 8103a82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103a84:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103a88:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103a8a:	687b      	ldr	r3, [r7, #4]
 8103a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103a8e:	687a      	ldr	r2, [r7, #4]
 8103a90:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103a92:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8103a94:	687b      	ldr	r3, [r7, #4]
 8103a96:	2201      	movs	r2, #1
 8103a98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8103a9c:	687b      	ldr	r3, [r7, #4]
 8103a9e:	2200      	movs	r2, #0
 8103aa0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8103aa4:	2300      	movs	r3, #0
}
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	3718      	adds	r7, #24
 8103aaa:	46bd      	mov	sp, r7
 8103aac:	bd80      	pop	{r7, pc}
 8103aae:	bf00      	nop
 8103ab0:	40020010 	.word	0x40020010
 8103ab4:	40020028 	.word	0x40020028
 8103ab8:	40020040 	.word	0x40020040
 8103abc:	40020058 	.word	0x40020058
 8103ac0:	40020070 	.word	0x40020070
 8103ac4:	40020088 	.word	0x40020088
 8103ac8:	400200a0 	.word	0x400200a0
 8103acc:	400200b8 	.word	0x400200b8
 8103ad0:	40020410 	.word	0x40020410
 8103ad4:	40020428 	.word	0x40020428
 8103ad8:	40020440 	.word	0x40020440
 8103adc:	40020458 	.word	0x40020458
 8103ae0:	40020470 	.word	0x40020470
 8103ae4:	40020488 	.word	0x40020488
 8103ae8:	400204a0 	.word	0x400204a0
 8103aec:	400204b8 	.word	0x400204b8
 8103af0:	58025408 	.word	0x58025408
 8103af4:	5802541c 	.word	0x5802541c
 8103af8:	58025430 	.word	0x58025430
 8103afc:	58025444 	.word	0x58025444
 8103b00:	58025458 	.word	0x58025458
 8103b04:	5802546c 	.word	0x5802546c
 8103b08:	58025480 	.word	0x58025480
 8103b0c:	58025494 	.word	0x58025494

08103b10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8103b10:	b580      	push	{r7, lr}
 8103b12:	b084      	sub	sp, #16
 8103b14:	af00      	add	r7, sp, #0
 8103b16:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8103b18:	687b      	ldr	r3, [r7, #4]
 8103b1a:	2b00      	cmp	r3, #0
 8103b1c:	d101      	bne.n	8103b22 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8103b1e:	2301      	movs	r3, #1
 8103b20:	e237      	b.n	8103f92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8103b22:	687b      	ldr	r3, [r7, #4]
 8103b24:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8103b28:	b2db      	uxtb	r3, r3
 8103b2a:	2b02      	cmp	r3, #2
 8103b2c:	d004      	beq.n	8103b38 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8103b2e:	687b      	ldr	r3, [r7, #4]
 8103b30:	2280      	movs	r2, #128	@ 0x80
 8103b32:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8103b34:	2301      	movs	r3, #1
 8103b36:	e22c      	b.n	8103f92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	681b      	ldr	r3, [r3, #0]
 8103b3c:	4a5c      	ldr	r2, [pc, #368]	@ (8103cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8103b3e:	4293      	cmp	r3, r2
 8103b40:	d04a      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b42:	687b      	ldr	r3, [r7, #4]
 8103b44:	681b      	ldr	r3, [r3, #0]
 8103b46:	4a5b      	ldr	r2, [pc, #364]	@ (8103cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8103b48:	4293      	cmp	r3, r2
 8103b4a:	d045      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	4a59      	ldr	r2, [pc, #356]	@ (8103cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8103b52:	4293      	cmp	r3, r2
 8103b54:	d040      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b56:	687b      	ldr	r3, [r7, #4]
 8103b58:	681b      	ldr	r3, [r3, #0]
 8103b5a:	4a58      	ldr	r2, [pc, #352]	@ (8103cbc <HAL_DMA_Abort_IT+0x1ac>)
 8103b5c:	4293      	cmp	r3, r2
 8103b5e:	d03b      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b60:	687b      	ldr	r3, [r7, #4]
 8103b62:	681b      	ldr	r3, [r3, #0]
 8103b64:	4a56      	ldr	r2, [pc, #344]	@ (8103cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8103b66:	4293      	cmp	r3, r2
 8103b68:	d036      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b6a:	687b      	ldr	r3, [r7, #4]
 8103b6c:	681b      	ldr	r3, [r3, #0]
 8103b6e:	4a55      	ldr	r2, [pc, #340]	@ (8103cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8103b70:	4293      	cmp	r3, r2
 8103b72:	d031      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b74:	687b      	ldr	r3, [r7, #4]
 8103b76:	681b      	ldr	r3, [r3, #0]
 8103b78:	4a53      	ldr	r2, [pc, #332]	@ (8103cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8103b7a:	4293      	cmp	r3, r2
 8103b7c:	d02c      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b7e:	687b      	ldr	r3, [r7, #4]
 8103b80:	681b      	ldr	r3, [r3, #0]
 8103b82:	4a52      	ldr	r2, [pc, #328]	@ (8103ccc <HAL_DMA_Abort_IT+0x1bc>)
 8103b84:	4293      	cmp	r3, r2
 8103b86:	d027      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b88:	687b      	ldr	r3, [r7, #4]
 8103b8a:	681b      	ldr	r3, [r3, #0]
 8103b8c:	4a50      	ldr	r2, [pc, #320]	@ (8103cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8103b8e:	4293      	cmp	r3, r2
 8103b90:	d022      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b92:	687b      	ldr	r3, [r7, #4]
 8103b94:	681b      	ldr	r3, [r3, #0]
 8103b96:	4a4f      	ldr	r2, [pc, #316]	@ (8103cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8103b98:	4293      	cmp	r3, r2
 8103b9a:	d01d      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103b9c:	687b      	ldr	r3, [r7, #4]
 8103b9e:	681b      	ldr	r3, [r3, #0]
 8103ba0:	4a4d      	ldr	r2, [pc, #308]	@ (8103cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8103ba2:	4293      	cmp	r3, r2
 8103ba4:	d018      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103ba6:	687b      	ldr	r3, [r7, #4]
 8103ba8:	681b      	ldr	r3, [r3, #0]
 8103baa:	4a4c      	ldr	r2, [pc, #304]	@ (8103cdc <HAL_DMA_Abort_IT+0x1cc>)
 8103bac:	4293      	cmp	r3, r2
 8103bae:	d013      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103bb0:	687b      	ldr	r3, [r7, #4]
 8103bb2:	681b      	ldr	r3, [r3, #0]
 8103bb4:	4a4a      	ldr	r2, [pc, #296]	@ (8103ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8103bb6:	4293      	cmp	r3, r2
 8103bb8:	d00e      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103bba:	687b      	ldr	r3, [r7, #4]
 8103bbc:	681b      	ldr	r3, [r3, #0]
 8103bbe:	4a49      	ldr	r2, [pc, #292]	@ (8103ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8103bc0:	4293      	cmp	r3, r2
 8103bc2:	d009      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103bc4:	687b      	ldr	r3, [r7, #4]
 8103bc6:	681b      	ldr	r3, [r3, #0]
 8103bc8:	4a47      	ldr	r2, [pc, #284]	@ (8103ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8103bca:	4293      	cmp	r3, r2
 8103bcc:	d004      	beq.n	8103bd8 <HAL_DMA_Abort_IT+0xc8>
 8103bce:	687b      	ldr	r3, [r7, #4]
 8103bd0:	681b      	ldr	r3, [r3, #0]
 8103bd2:	4a46      	ldr	r2, [pc, #280]	@ (8103cec <HAL_DMA_Abort_IT+0x1dc>)
 8103bd4:	4293      	cmp	r3, r2
 8103bd6:	d101      	bne.n	8103bdc <HAL_DMA_Abort_IT+0xcc>
 8103bd8:	2301      	movs	r3, #1
 8103bda:	e000      	b.n	8103bde <HAL_DMA_Abort_IT+0xce>
 8103bdc:	2300      	movs	r3, #0
 8103bde:	2b00      	cmp	r3, #0
 8103be0:	f000 8086 	beq.w	8103cf0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8103be4:	687b      	ldr	r3, [r7, #4]
 8103be6:	2204      	movs	r2, #4
 8103be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8103bec:	687b      	ldr	r3, [r7, #4]
 8103bee:	681b      	ldr	r3, [r3, #0]
 8103bf0:	4a2f      	ldr	r2, [pc, #188]	@ (8103cb0 <HAL_DMA_Abort_IT+0x1a0>)
 8103bf2:	4293      	cmp	r3, r2
 8103bf4:	d04a      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103bf6:	687b      	ldr	r3, [r7, #4]
 8103bf8:	681b      	ldr	r3, [r3, #0]
 8103bfa:	4a2e      	ldr	r2, [pc, #184]	@ (8103cb4 <HAL_DMA_Abort_IT+0x1a4>)
 8103bfc:	4293      	cmp	r3, r2
 8103bfe:	d045      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	681b      	ldr	r3, [r3, #0]
 8103c04:	4a2c      	ldr	r2, [pc, #176]	@ (8103cb8 <HAL_DMA_Abort_IT+0x1a8>)
 8103c06:	4293      	cmp	r3, r2
 8103c08:	d040      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c0a:	687b      	ldr	r3, [r7, #4]
 8103c0c:	681b      	ldr	r3, [r3, #0]
 8103c0e:	4a2b      	ldr	r2, [pc, #172]	@ (8103cbc <HAL_DMA_Abort_IT+0x1ac>)
 8103c10:	4293      	cmp	r3, r2
 8103c12:	d03b      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c14:	687b      	ldr	r3, [r7, #4]
 8103c16:	681b      	ldr	r3, [r3, #0]
 8103c18:	4a29      	ldr	r2, [pc, #164]	@ (8103cc0 <HAL_DMA_Abort_IT+0x1b0>)
 8103c1a:	4293      	cmp	r3, r2
 8103c1c:	d036      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c1e:	687b      	ldr	r3, [r7, #4]
 8103c20:	681b      	ldr	r3, [r3, #0]
 8103c22:	4a28      	ldr	r2, [pc, #160]	@ (8103cc4 <HAL_DMA_Abort_IT+0x1b4>)
 8103c24:	4293      	cmp	r3, r2
 8103c26:	d031      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	4a26      	ldr	r2, [pc, #152]	@ (8103cc8 <HAL_DMA_Abort_IT+0x1b8>)
 8103c2e:	4293      	cmp	r3, r2
 8103c30:	d02c      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c32:	687b      	ldr	r3, [r7, #4]
 8103c34:	681b      	ldr	r3, [r3, #0]
 8103c36:	4a25      	ldr	r2, [pc, #148]	@ (8103ccc <HAL_DMA_Abort_IT+0x1bc>)
 8103c38:	4293      	cmp	r3, r2
 8103c3a:	d027      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c3c:	687b      	ldr	r3, [r7, #4]
 8103c3e:	681b      	ldr	r3, [r3, #0]
 8103c40:	4a23      	ldr	r2, [pc, #140]	@ (8103cd0 <HAL_DMA_Abort_IT+0x1c0>)
 8103c42:	4293      	cmp	r3, r2
 8103c44:	d022      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c46:	687b      	ldr	r3, [r7, #4]
 8103c48:	681b      	ldr	r3, [r3, #0]
 8103c4a:	4a22      	ldr	r2, [pc, #136]	@ (8103cd4 <HAL_DMA_Abort_IT+0x1c4>)
 8103c4c:	4293      	cmp	r3, r2
 8103c4e:	d01d      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c50:	687b      	ldr	r3, [r7, #4]
 8103c52:	681b      	ldr	r3, [r3, #0]
 8103c54:	4a20      	ldr	r2, [pc, #128]	@ (8103cd8 <HAL_DMA_Abort_IT+0x1c8>)
 8103c56:	4293      	cmp	r3, r2
 8103c58:	d018      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8103cdc <HAL_DMA_Abort_IT+0x1cc>)
 8103c60:	4293      	cmp	r3, r2
 8103c62:	d013      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c64:	687b      	ldr	r3, [r7, #4]
 8103c66:	681b      	ldr	r3, [r3, #0]
 8103c68:	4a1d      	ldr	r2, [pc, #116]	@ (8103ce0 <HAL_DMA_Abort_IT+0x1d0>)
 8103c6a:	4293      	cmp	r3, r2
 8103c6c:	d00e      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c6e:	687b      	ldr	r3, [r7, #4]
 8103c70:	681b      	ldr	r3, [r3, #0]
 8103c72:	4a1c      	ldr	r2, [pc, #112]	@ (8103ce4 <HAL_DMA_Abort_IT+0x1d4>)
 8103c74:	4293      	cmp	r3, r2
 8103c76:	d009      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c78:	687b      	ldr	r3, [r7, #4]
 8103c7a:	681b      	ldr	r3, [r3, #0]
 8103c7c:	4a1a      	ldr	r2, [pc, #104]	@ (8103ce8 <HAL_DMA_Abort_IT+0x1d8>)
 8103c7e:	4293      	cmp	r3, r2
 8103c80:	d004      	beq.n	8103c8c <HAL_DMA_Abort_IT+0x17c>
 8103c82:	687b      	ldr	r3, [r7, #4]
 8103c84:	681b      	ldr	r3, [r3, #0]
 8103c86:	4a19      	ldr	r2, [pc, #100]	@ (8103cec <HAL_DMA_Abort_IT+0x1dc>)
 8103c88:	4293      	cmp	r3, r2
 8103c8a:	d108      	bne.n	8103c9e <HAL_DMA_Abort_IT+0x18e>
 8103c8c:	687b      	ldr	r3, [r7, #4]
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	681a      	ldr	r2, [r3, #0]
 8103c92:	687b      	ldr	r3, [r7, #4]
 8103c94:	681b      	ldr	r3, [r3, #0]
 8103c96:	f022 0201 	bic.w	r2, r2, #1
 8103c9a:	601a      	str	r2, [r3, #0]
 8103c9c:	e178      	b.n	8103f90 <HAL_DMA_Abort_IT+0x480>
 8103c9e:	687b      	ldr	r3, [r7, #4]
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	681a      	ldr	r2, [r3, #0]
 8103ca4:	687b      	ldr	r3, [r7, #4]
 8103ca6:	681b      	ldr	r3, [r3, #0]
 8103ca8:	f022 0201 	bic.w	r2, r2, #1
 8103cac:	601a      	str	r2, [r3, #0]
 8103cae:	e16f      	b.n	8103f90 <HAL_DMA_Abort_IT+0x480>
 8103cb0:	40020010 	.word	0x40020010
 8103cb4:	40020028 	.word	0x40020028
 8103cb8:	40020040 	.word	0x40020040
 8103cbc:	40020058 	.word	0x40020058
 8103cc0:	40020070 	.word	0x40020070
 8103cc4:	40020088 	.word	0x40020088
 8103cc8:	400200a0 	.word	0x400200a0
 8103ccc:	400200b8 	.word	0x400200b8
 8103cd0:	40020410 	.word	0x40020410
 8103cd4:	40020428 	.word	0x40020428
 8103cd8:	40020440 	.word	0x40020440
 8103cdc:	40020458 	.word	0x40020458
 8103ce0:	40020470 	.word	0x40020470
 8103ce4:	40020488 	.word	0x40020488
 8103ce8:	400204a0 	.word	0x400204a0
 8103cec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8103cf0:	687b      	ldr	r3, [r7, #4]
 8103cf2:	681b      	ldr	r3, [r3, #0]
 8103cf4:	681a      	ldr	r2, [r3, #0]
 8103cf6:	687b      	ldr	r3, [r7, #4]
 8103cf8:	681b      	ldr	r3, [r3, #0]
 8103cfa:	f022 020e 	bic.w	r2, r2, #14
 8103cfe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8103d00:	687b      	ldr	r3, [r7, #4]
 8103d02:	681b      	ldr	r3, [r3, #0]
 8103d04:	4a6c      	ldr	r2, [pc, #432]	@ (8103eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8103d06:	4293      	cmp	r3, r2
 8103d08:	d04a      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d0a:	687b      	ldr	r3, [r7, #4]
 8103d0c:	681b      	ldr	r3, [r3, #0]
 8103d0e:	4a6b      	ldr	r2, [pc, #428]	@ (8103ebc <HAL_DMA_Abort_IT+0x3ac>)
 8103d10:	4293      	cmp	r3, r2
 8103d12:	d045      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d14:	687b      	ldr	r3, [r7, #4]
 8103d16:	681b      	ldr	r3, [r3, #0]
 8103d18:	4a69      	ldr	r2, [pc, #420]	@ (8103ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8103d1a:	4293      	cmp	r3, r2
 8103d1c:	d040      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d1e:	687b      	ldr	r3, [r7, #4]
 8103d20:	681b      	ldr	r3, [r3, #0]
 8103d22:	4a68      	ldr	r2, [pc, #416]	@ (8103ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8103d24:	4293      	cmp	r3, r2
 8103d26:	d03b      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	4a66      	ldr	r2, [pc, #408]	@ (8103ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8103d2e:	4293      	cmp	r3, r2
 8103d30:	d036      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	681b      	ldr	r3, [r3, #0]
 8103d36:	4a65      	ldr	r2, [pc, #404]	@ (8103ecc <HAL_DMA_Abort_IT+0x3bc>)
 8103d38:	4293      	cmp	r3, r2
 8103d3a:	d031      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d3c:	687b      	ldr	r3, [r7, #4]
 8103d3e:	681b      	ldr	r3, [r3, #0]
 8103d40:	4a63      	ldr	r2, [pc, #396]	@ (8103ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8103d42:	4293      	cmp	r3, r2
 8103d44:	d02c      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d46:	687b      	ldr	r3, [r7, #4]
 8103d48:	681b      	ldr	r3, [r3, #0]
 8103d4a:	4a62      	ldr	r2, [pc, #392]	@ (8103ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8103d4c:	4293      	cmp	r3, r2
 8103d4e:	d027      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681b      	ldr	r3, [r3, #0]
 8103d54:	4a60      	ldr	r2, [pc, #384]	@ (8103ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8103d56:	4293      	cmp	r3, r2
 8103d58:	d022      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d5a:	687b      	ldr	r3, [r7, #4]
 8103d5c:	681b      	ldr	r3, [r3, #0]
 8103d5e:	4a5f      	ldr	r2, [pc, #380]	@ (8103edc <HAL_DMA_Abort_IT+0x3cc>)
 8103d60:	4293      	cmp	r3, r2
 8103d62:	d01d      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d64:	687b      	ldr	r3, [r7, #4]
 8103d66:	681b      	ldr	r3, [r3, #0]
 8103d68:	4a5d      	ldr	r2, [pc, #372]	@ (8103ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8103d6a:	4293      	cmp	r3, r2
 8103d6c:	d018      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d6e:	687b      	ldr	r3, [r7, #4]
 8103d70:	681b      	ldr	r3, [r3, #0]
 8103d72:	4a5c      	ldr	r2, [pc, #368]	@ (8103ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8103d74:	4293      	cmp	r3, r2
 8103d76:	d013      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d78:	687b      	ldr	r3, [r7, #4]
 8103d7a:	681b      	ldr	r3, [r3, #0]
 8103d7c:	4a5a      	ldr	r2, [pc, #360]	@ (8103ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8103d7e:	4293      	cmp	r3, r2
 8103d80:	d00e      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	681b      	ldr	r3, [r3, #0]
 8103d86:	4a59      	ldr	r2, [pc, #356]	@ (8103eec <HAL_DMA_Abort_IT+0x3dc>)
 8103d88:	4293      	cmp	r3, r2
 8103d8a:	d009      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d8c:	687b      	ldr	r3, [r7, #4]
 8103d8e:	681b      	ldr	r3, [r3, #0]
 8103d90:	4a57      	ldr	r2, [pc, #348]	@ (8103ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8103d92:	4293      	cmp	r3, r2
 8103d94:	d004      	beq.n	8103da0 <HAL_DMA_Abort_IT+0x290>
 8103d96:	687b      	ldr	r3, [r7, #4]
 8103d98:	681b      	ldr	r3, [r3, #0]
 8103d9a:	4a56      	ldr	r2, [pc, #344]	@ (8103ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8103d9c:	4293      	cmp	r3, r2
 8103d9e:	d108      	bne.n	8103db2 <HAL_DMA_Abort_IT+0x2a2>
 8103da0:	687b      	ldr	r3, [r7, #4]
 8103da2:	681b      	ldr	r3, [r3, #0]
 8103da4:	681a      	ldr	r2, [r3, #0]
 8103da6:	687b      	ldr	r3, [r7, #4]
 8103da8:	681b      	ldr	r3, [r3, #0]
 8103daa:	f022 0201 	bic.w	r2, r2, #1
 8103dae:	601a      	str	r2, [r3, #0]
 8103db0:	e007      	b.n	8103dc2 <HAL_DMA_Abort_IT+0x2b2>
 8103db2:	687b      	ldr	r3, [r7, #4]
 8103db4:	681b      	ldr	r3, [r3, #0]
 8103db6:	681a      	ldr	r2, [r3, #0]
 8103db8:	687b      	ldr	r3, [r7, #4]
 8103dba:	681b      	ldr	r3, [r3, #0]
 8103dbc:	f022 0201 	bic.w	r2, r2, #1
 8103dc0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8103dc2:	687b      	ldr	r3, [r7, #4]
 8103dc4:	681b      	ldr	r3, [r3, #0]
 8103dc6:	4a3c      	ldr	r2, [pc, #240]	@ (8103eb8 <HAL_DMA_Abort_IT+0x3a8>)
 8103dc8:	4293      	cmp	r3, r2
 8103dca:	d072      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103dcc:	687b      	ldr	r3, [r7, #4]
 8103dce:	681b      	ldr	r3, [r3, #0]
 8103dd0:	4a3a      	ldr	r2, [pc, #232]	@ (8103ebc <HAL_DMA_Abort_IT+0x3ac>)
 8103dd2:	4293      	cmp	r3, r2
 8103dd4:	d06d      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	681b      	ldr	r3, [r3, #0]
 8103dda:	4a39      	ldr	r2, [pc, #228]	@ (8103ec0 <HAL_DMA_Abort_IT+0x3b0>)
 8103ddc:	4293      	cmp	r3, r2
 8103dde:	d068      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	4a37      	ldr	r2, [pc, #220]	@ (8103ec4 <HAL_DMA_Abort_IT+0x3b4>)
 8103de6:	4293      	cmp	r3, r2
 8103de8:	d063      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103dea:	687b      	ldr	r3, [r7, #4]
 8103dec:	681b      	ldr	r3, [r3, #0]
 8103dee:	4a36      	ldr	r2, [pc, #216]	@ (8103ec8 <HAL_DMA_Abort_IT+0x3b8>)
 8103df0:	4293      	cmp	r3, r2
 8103df2:	d05e      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	4a34      	ldr	r2, [pc, #208]	@ (8103ecc <HAL_DMA_Abort_IT+0x3bc>)
 8103dfa:	4293      	cmp	r3, r2
 8103dfc:	d059      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	681b      	ldr	r3, [r3, #0]
 8103e02:	4a33      	ldr	r2, [pc, #204]	@ (8103ed0 <HAL_DMA_Abort_IT+0x3c0>)
 8103e04:	4293      	cmp	r3, r2
 8103e06:	d054      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e08:	687b      	ldr	r3, [r7, #4]
 8103e0a:	681b      	ldr	r3, [r3, #0]
 8103e0c:	4a31      	ldr	r2, [pc, #196]	@ (8103ed4 <HAL_DMA_Abort_IT+0x3c4>)
 8103e0e:	4293      	cmp	r3, r2
 8103e10:	d04f      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	4a30      	ldr	r2, [pc, #192]	@ (8103ed8 <HAL_DMA_Abort_IT+0x3c8>)
 8103e18:	4293      	cmp	r3, r2
 8103e1a:	d04a      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	4a2e      	ldr	r2, [pc, #184]	@ (8103edc <HAL_DMA_Abort_IT+0x3cc>)
 8103e22:	4293      	cmp	r3, r2
 8103e24:	d045      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e26:	687b      	ldr	r3, [r7, #4]
 8103e28:	681b      	ldr	r3, [r3, #0]
 8103e2a:	4a2d      	ldr	r2, [pc, #180]	@ (8103ee0 <HAL_DMA_Abort_IT+0x3d0>)
 8103e2c:	4293      	cmp	r3, r2
 8103e2e:	d040      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e30:	687b      	ldr	r3, [r7, #4]
 8103e32:	681b      	ldr	r3, [r3, #0]
 8103e34:	4a2b      	ldr	r2, [pc, #172]	@ (8103ee4 <HAL_DMA_Abort_IT+0x3d4>)
 8103e36:	4293      	cmp	r3, r2
 8103e38:	d03b      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e3a:	687b      	ldr	r3, [r7, #4]
 8103e3c:	681b      	ldr	r3, [r3, #0]
 8103e3e:	4a2a      	ldr	r2, [pc, #168]	@ (8103ee8 <HAL_DMA_Abort_IT+0x3d8>)
 8103e40:	4293      	cmp	r3, r2
 8103e42:	d036      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	4a28      	ldr	r2, [pc, #160]	@ (8103eec <HAL_DMA_Abort_IT+0x3dc>)
 8103e4a:	4293      	cmp	r3, r2
 8103e4c:	d031      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e4e:	687b      	ldr	r3, [r7, #4]
 8103e50:	681b      	ldr	r3, [r3, #0]
 8103e52:	4a27      	ldr	r2, [pc, #156]	@ (8103ef0 <HAL_DMA_Abort_IT+0x3e0>)
 8103e54:	4293      	cmp	r3, r2
 8103e56:	d02c      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e58:	687b      	ldr	r3, [r7, #4]
 8103e5a:	681b      	ldr	r3, [r3, #0]
 8103e5c:	4a25      	ldr	r2, [pc, #148]	@ (8103ef4 <HAL_DMA_Abort_IT+0x3e4>)
 8103e5e:	4293      	cmp	r3, r2
 8103e60:	d027      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e62:	687b      	ldr	r3, [r7, #4]
 8103e64:	681b      	ldr	r3, [r3, #0]
 8103e66:	4a24      	ldr	r2, [pc, #144]	@ (8103ef8 <HAL_DMA_Abort_IT+0x3e8>)
 8103e68:	4293      	cmp	r3, r2
 8103e6a:	d022      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e6c:	687b      	ldr	r3, [r7, #4]
 8103e6e:	681b      	ldr	r3, [r3, #0]
 8103e70:	4a22      	ldr	r2, [pc, #136]	@ (8103efc <HAL_DMA_Abort_IT+0x3ec>)
 8103e72:	4293      	cmp	r3, r2
 8103e74:	d01d      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e76:	687b      	ldr	r3, [r7, #4]
 8103e78:	681b      	ldr	r3, [r3, #0]
 8103e7a:	4a21      	ldr	r2, [pc, #132]	@ (8103f00 <HAL_DMA_Abort_IT+0x3f0>)
 8103e7c:	4293      	cmp	r3, r2
 8103e7e:	d018      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e80:	687b      	ldr	r3, [r7, #4]
 8103e82:	681b      	ldr	r3, [r3, #0]
 8103e84:	4a1f      	ldr	r2, [pc, #124]	@ (8103f04 <HAL_DMA_Abort_IT+0x3f4>)
 8103e86:	4293      	cmp	r3, r2
 8103e88:	d013      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e8a:	687b      	ldr	r3, [r7, #4]
 8103e8c:	681b      	ldr	r3, [r3, #0]
 8103e8e:	4a1e      	ldr	r2, [pc, #120]	@ (8103f08 <HAL_DMA_Abort_IT+0x3f8>)
 8103e90:	4293      	cmp	r3, r2
 8103e92:	d00e      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e94:	687b      	ldr	r3, [r7, #4]
 8103e96:	681b      	ldr	r3, [r3, #0]
 8103e98:	4a1c      	ldr	r2, [pc, #112]	@ (8103f0c <HAL_DMA_Abort_IT+0x3fc>)
 8103e9a:	4293      	cmp	r3, r2
 8103e9c:	d009      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103e9e:	687b      	ldr	r3, [r7, #4]
 8103ea0:	681b      	ldr	r3, [r3, #0]
 8103ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8103f10 <HAL_DMA_Abort_IT+0x400>)
 8103ea4:	4293      	cmp	r3, r2
 8103ea6:	d004      	beq.n	8103eb2 <HAL_DMA_Abort_IT+0x3a2>
 8103ea8:	687b      	ldr	r3, [r7, #4]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	4a19      	ldr	r2, [pc, #100]	@ (8103f14 <HAL_DMA_Abort_IT+0x404>)
 8103eae:	4293      	cmp	r3, r2
 8103eb0:	d132      	bne.n	8103f18 <HAL_DMA_Abort_IT+0x408>
 8103eb2:	2301      	movs	r3, #1
 8103eb4:	e031      	b.n	8103f1a <HAL_DMA_Abort_IT+0x40a>
 8103eb6:	bf00      	nop
 8103eb8:	40020010 	.word	0x40020010
 8103ebc:	40020028 	.word	0x40020028
 8103ec0:	40020040 	.word	0x40020040
 8103ec4:	40020058 	.word	0x40020058
 8103ec8:	40020070 	.word	0x40020070
 8103ecc:	40020088 	.word	0x40020088
 8103ed0:	400200a0 	.word	0x400200a0
 8103ed4:	400200b8 	.word	0x400200b8
 8103ed8:	40020410 	.word	0x40020410
 8103edc:	40020428 	.word	0x40020428
 8103ee0:	40020440 	.word	0x40020440
 8103ee4:	40020458 	.word	0x40020458
 8103ee8:	40020470 	.word	0x40020470
 8103eec:	40020488 	.word	0x40020488
 8103ef0:	400204a0 	.word	0x400204a0
 8103ef4:	400204b8 	.word	0x400204b8
 8103ef8:	58025408 	.word	0x58025408
 8103efc:	5802541c 	.word	0x5802541c
 8103f00:	58025430 	.word	0x58025430
 8103f04:	58025444 	.word	0x58025444
 8103f08:	58025458 	.word	0x58025458
 8103f0c:	5802546c 	.word	0x5802546c
 8103f10:	58025480 	.word	0x58025480
 8103f14:	58025494 	.word	0x58025494
 8103f18:	2300      	movs	r3, #0
 8103f1a:	2b00      	cmp	r3, #0
 8103f1c:	d028      	beq.n	8103f70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8103f1e:	687b      	ldr	r3, [r7, #4]
 8103f20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103f22:	681a      	ldr	r2, [r3, #0]
 8103f24:	687b      	ldr	r3, [r7, #4]
 8103f26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103f28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103f2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103f2e:	687b      	ldr	r3, [r7, #4]
 8103f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103f32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8103f34:	687b      	ldr	r3, [r7, #4]
 8103f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103f38:	f003 031f 	and.w	r3, r3, #31
 8103f3c:	2201      	movs	r2, #1
 8103f3e:	409a      	lsls	r2, r3
 8103f40:	68fb      	ldr	r3, [r7, #12]
 8103f42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8103f44:	687b      	ldr	r3, [r7, #4]
 8103f46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103f48:	687a      	ldr	r2, [r7, #4]
 8103f4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8103f4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103f52:	2b00      	cmp	r3, #0
 8103f54:	d00c      	beq.n	8103f70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8103f56:	687b      	ldr	r3, [r7, #4]
 8103f58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103f5a:	681a      	ldr	r2, [r3, #0]
 8103f5c:	687b      	ldr	r3, [r7, #4]
 8103f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8103f64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8103f66:	687b      	ldr	r3, [r7, #4]
 8103f68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f6a:	687a      	ldr	r2, [r7, #4]
 8103f6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8103f6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8103f70:	687b      	ldr	r3, [r7, #4]
 8103f72:	2201      	movs	r2, #1
 8103f74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8103f78:	687b      	ldr	r3, [r7, #4]
 8103f7a:	2200      	movs	r2, #0
 8103f7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8103f80:	687b      	ldr	r3, [r7, #4]
 8103f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f84:	2b00      	cmp	r3, #0
 8103f86:	d003      	beq.n	8103f90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8103f88:	687b      	ldr	r3, [r7, #4]
 8103f8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f8c:	6878      	ldr	r0, [r7, #4]
 8103f8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8103f90:	2300      	movs	r3, #0
}
 8103f92:	4618      	mov	r0, r3
 8103f94:	3710      	adds	r7, #16
 8103f96:	46bd      	mov	sp, r7
 8103f98:	bd80      	pop	{r7, pc}
 8103f9a:	bf00      	nop

08103f9c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8103f9c:	b580      	push	{r7, lr}
 8103f9e:	b08a      	sub	sp, #40	@ 0x28
 8103fa0:	af00      	add	r7, sp, #0
 8103fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8103fa4:	2300      	movs	r3, #0
 8103fa6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8103fa8:	4b67      	ldr	r3, [pc, #412]	@ (8104148 <HAL_DMA_IRQHandler+0x1ac>)
 8103faa:	681b      	ldr	r3, [r3, #0]
 8103fac:	4a67      	ldr	r2, [pc, #412]	@ (810414c <HAL_DMA_IRQHandler+0x1b0>)
 8103fae:	fba2 2303 	umull	r2, r3, r2, r3
 8103fb2:	0a9b      	lsrs	r3, r3, #10
 8103fb4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8103fb6:	687b      	ldr	r3, [r7, #4]
 8103fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103fba:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8103fbc:	687b      	ldr	r3, [r7, #4]
 8103fbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103fc0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8103fc2:	6a3b      	ldr	r3, [r7, #32]
 8103fc4:	681b      	ldr	r3, [r3, #0]
 8103fc6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8103fc8:	69fb      	ldr	r3, [r7, #28]
 8103fca:	681b      	ldr	r3, [r3, #0]
 8103fcc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8103fce:	687b      	ldr	r3, [r7, #4]
 8103fd0:	681b      	ldr	r3, [r3, #0]
 8103fd2:	4a5f      	ldr	r2, [pc, #380]	@ (8104150 <HAL_DMA_IRQHandler+0x1b4>)
 8103fd4:	4293      	cmp	r3, r2
 8103fd6:	d04a      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8103fd8:	687b      	ldr	r3, [r7, #4]
 8103fda:	681b      	ldr	r3, [r3, #0]
 8103fdc:	4a5d      	ldr	r2, [pc, #372]	@ (8104154 <HAL_DMA_IRQHandler+0x1b8>)
 8103fde:	4293      	cmp	r3, r2
 8103fe0:	d045      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8103fe2:	687b      	ldr	r3, [r7, #4]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	4a5c      	ldr	r2, [pc, #368]	@ (8104158 <HAL_DMA_IRQHandler+0x1bc>)
 8103fe8:	4293      	cmp	r3, r2
 8103fea:	d040      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8103fec:	687b      	ldr	r3, [r7, #4]
 8103fee:	681b      	ldr	r3, [r3, #0]
 8103ff0:	4a5a      	ldr	r2, [pc, #360]	@ (810415c <HAL_DMA_IRQHandler+0x1c0>)
 8103ff2:	4293      	cmp	r3, r2
 8103ff4:	d03b      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	681b      	ldr	r3, [r3, #0]
 8103ffa:	4a59      	ldr	r2, [pc, #356]	@ (8104160 <HAL_DMA_IRQHandler+0x1c4>)
 8103ffc:	4293      	cmp	r3, r2
 8103ffe:	d036      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104000:	687b      	ldr	r3, [r7, #4]
 8104002:	681b      	ldr	r3, [r3, #0]
 8104004:	4a57      	ldr	r2, [pc, #348]	@ (8104164 <HAL_DMA_IRQHandler+0x1c8>)
 8104006:	4293      	cmp	r3, r2
 8104008:	d031      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 810400a:	687b      	ldr	r3, [r7, #4]
 810400c:	681b      	ldr	r3, [r3, #0]
 810400e:	4a56      	ldr	r2, [pc, #344]	@ (8104168 <HAL_DMA_IRQHandler+0x1cc>)
 8104010:	4293      	cmp	r3, r2
 8104012:	d02c      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104014:	687b      	ldr	r3, [r7, #4]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	4a54      	ldr	r2, [pc, #336]	@ (810416c <HAL_DMA_IRQHandler+0x1d0>)
 810401a:	4293      	cmp	r3, r2
 810401c:	d027      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 810401e:	687b      	ldr	r3, [r7, #4]
 8104020:	681b      	ldr	r3, [r3, #0]
 8104022:	4a53      	ldr	r2, [pc, #332]	@ (8104170 <HAL_DMA_IRQHandler+0x1d4>)
 8104024:	4293      	cmp	r3, r2
 8104026:	d022      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104028:	687b      	ldr	r3, [r7, #4]
 810402a:	681b      	ldr	r3, [r3, #0]
 810402c:	4a51      	ldr	r2, [pc, #324]	@ (8104174 <HAL_DMA_IRQHandler+0x1d8>)
 810402e:	4293      	cmp	r3, r2
 8104030:	d01d      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	4a50      	ldr	r2, [pc, #320]	@ (8104178 <HAL_DMA_IRQHandler+0x1dc>)
 8104038:	4293      	cmp	r3, r2
 810403a:	d018      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 810403c:	687b      	ldr	r3, [r7, #4]
 810403e:	681b      	ldr	r3, [r3, #0]
 8104040:	4a4e      	ldr	r2, [pc, #312]	@ (810417c <HAL_DMA_IRQHandler+0x1e0>)
 8104042:	4293      	cmp	r3, r2
 8104044:	d013      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104046:	687b      	ldr	r3, [r7, #4]
 8104048:	681b      	ldr	r3, [r3, #0]
 810404a:	4a4d      	ldr	r2, [pc, #308]	@ (8104180 <HAL_DMA_IRQHandler+0x1e4>)
 810404c:	4293      	cmp	r3, r2
 810404e:	d00e      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104050:	687b      	ldr	r3, [r7, #4]
 8104052:	681b      	ldr	r3, [r3, #0]
 8104054:	4a4b      	ldr	r2, [pc, #300]	@ (8104184 <HAL_DMA_IRQHandler+0x1e8>)
 8104056:	4293      	cmp	r3, r2
 8104058:	d009      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 810405a:	687b      	ldr	r3, [r7, #4]
 810405c:	681b      	ldr	r3, [r3, #0]
 810405e:	4a4a      	ldr	r2, [pc, #296]	@ (8104188 <HAL_DMA_IRQHandler+0x1ec>)
 8104060:	4293      	cmp	r3, r2
 8104062:	d004      	beq.n	810406e <HAL_DMA_IRQHandler+0xd2>
 8104064:	687b      	ldr	r3, [r7, #4]
 8104066:	681b      	ldr	r3, [r3, #0]
 8104068:	4a48      	ldr	r2, [pc, #288]	@ (810418c <HAL_DMA_IRQHandler+0x1f0>)
 810406a:	4293      	cmp	r3, r2
 810406c:	d101      	bne.n	8104072 <HAL_DMA_IRQHandler+0xd6>
 810406e:	2301      	movs	r3, #1
 8104070:	e000      	b.n	8104074 <HAL_DMA_IRQHandler+0xd8>
 8104072:	2300      	movs	r3, #0
 8104074:	2b00      	cmp	r3, #0
 8104076:	f000 842b 	beq.w	81048d0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810407a:	687b      	ldr	r3, [r7, #4]
 810407c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810407e:	f003 031f 	and.w	r3, r3, #31
 8104082:	2208      	movs	r2, #8
 8104084:	409a      	lsls	r2, r3
 8104086:	69bb      	ldr	r3, [r7, #24]
 8104088:	4013      	ands	r3, r2
 810408a:	2b00      	cmp	r3, #0
 810408c:	f000 80a2 	beq.w	81041d4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8104090:	687b      	ldr	r3, [r7, #4]
 8104092:	681b      	ldr	r3, [r3, #0]
 8104094:	4a2e      	ldr	r2, [pc, #184]	@ (8104150 <HAL_DMA_IRQHandler+0x1b4>)
 8104096:	4293      	cmp	r3, r2
 8104098:	d04a      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 810409a:	687b      	ldr	r3, [r7, #4]
 810409c:	681b      	ldr	r3, [r3, #0]
 810409e:	4a2d      	ldr	r2, [pc, #180]	@ (8104154 <HAL_DMA_IRQHandler+0x1b8>)
 81040a0:	4293      	cmp	r3, r2
 81040a2:	d045      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	4a2b      	ldr	r2, [pc, #172]	@ (8104158 <HAL_DMA_IRQHandler+0x1bc>)
 81040aa:	4293      	cmp	r3, r2
 81040ac:	d040      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	681b      	ldr	r3, [r3, #0]
 81040b2:	4a2a      	ldr	r2, [pc, #168]	@ (810415c <HAL_DMA_IRQHandler+0x1c0>)
 81040b4:	4293      	cmp	r3, r2
 81040b6:	d03b      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	681b      	ldr	r3, [r3, #0]
 81040bc:	4a28      	ldr	r2, [pc, #160]	@ (8104160 <HAL_DMA_IRQHandler+0x1c4>)
 81040be:	4293      	cmp	r3, r2
 81040c0:	d036      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	681b      	ldr	r3, [r3, #0]
 81040c6:	4a27      	ldr	r2, [pc, #156]	@ (8104164 <HAL_DMA_IRQHandler+0x1c8>)
 81040c8:	4293      	cmp	r3, r2
 81040ca:	d031      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040cc:	687b      	ldr	r3, [r7, #4]
 81040ce:	681b      	ldr	r3, [r3, #0]
 81040d0:	4a25      	ldr	r2, [pc, #148]	@ (8104168 <HAL_DMA_IRQHandler+0x1cc>)
 81040d2:	4293      	cmp	r3, r2
 81040d4:	d02c      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	681b      	ldr	r3, [r3, #0]
 81040da:	4a24      	ldr	r2, [pc, #144]	@ (810416c <HAL_DMA_IRQHandler+0x1d0>)
 81040dc:	4293      	cmp	r3, r2
 81040de:	d027      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	4a22      	ldr	r2, [pc, #136]	@ (8104170 <HAL_DMA_IRQHandler+0x1d4>)
 81040e6:	4293      	cmp	r3, r2
 81040e8:	d022      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040ea:	687b      	ldr	r3, [r7, #4]
 81040ec:	681b      	ldr	r3, [r3, #0]
 81040ee:	4a21      	ldr	r2, [pc, #132]	@ (8104174 <HAL_DMA_IRQHandler+0x1d8>)
 81040f0:	4293      	cmp	r3, r2
 81040f2:	d01d      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040f4:	687b      	ldr	r3, [r7, #4]
 81040f6:	681b      	ldr	r3, [r3, #0]
 81040f8:	4a1f      	ldr	r2, [pc, #124]	@ (8104178 <HAL_DMA_IRQHandler+0x1dc>)
 81040fa:	4293      	cmp	r3, r2
 81040fc:	d018      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 81040fe:	687b      	ldr	r3, [r7, #4]
 8104100:	681b      	ldr	r3, [r3, #0]
 8104102:	4a1e      	ldr	r2, [pc, #120]	@ (810417c <HAL_DMA_IRQHandler+0x1e0>)
 8104104:	4293      	cmp	r3, r2
 8104106:	d013      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 8104108:	687b      	ldr	r3, [r7, #4]
 810410a:	681b      	ldr	r3, [r3, #0]
 810410c:	4a1c      	ldr	r2, [pc, #112]	@ (8104180 <HAL_DMA_IRQHandler+0x1e4>)
 810410e:	4293      	cmp	r3, r2
 8104110:	d00e      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 8104112:	687b      	ldr	r3, [r7, #4]
 8104114:	681b      	ldr	r3, [r3, #0]
 8104116:	4a1b      	ldr	r2, [pc, #108]	@ (8104184 <HAL_DMA_IRQHandler+0x1e8>)
 8104118:	4293      	cmp	r3, r2
 810411a:	d009      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 810411c:	687b      	ldr	r3, [r7, #4]
 810411e:	681b      	ldr	r3, [r3, #0]
 8104120:	4a19      	ldr	r2, [pc, #100]	@ (8104188 <HAL_DMA_IRQHandler+0x1ec>)
 8104122:	4293      	cmp	r3, r2
 8104124:	d004      	beq.n	8104130 <HAL_DMA_IRQHandler+0x194>
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	4a18      	ldr	r2, [pc, #96]	@ (810418c <HAL_DMA_IRQHandler+0x1f0>)
 810412c:	4293      	cmp	r3, r2
 810412e:	d12f      	bne.n	8104190 <HAL_DMA_IRQHandler+0x1f4>
 8104130:	687b      	ldr	r3, [r7, #4]
 8104132:	681b      	ldr	r3, [r3, #0]
 8104134:	681b      	ldr	r3, [r3, #0]
 8104136:	f003 0304 	and.w	r3, r3, #4
 810413a:	2b00      	cmp	r3, #0
 810413c:	bf14      	ite	ne
 810413e:	2301      	movne	r3, #1
 8104140:	2300      	moveq	r3, #0
 8104142:	b2db      	uxtb	r3, r3
 8104144:	e02e      	b.n	81041a4 <HAL_DMA_IRQHandler+0x208>
 8104146:	bf00      	nop
 8104148:	10000124 	.word	0x10000124
 810414c:	1b4e81b5 	.word	0x1b4e81b5
 8104150:	40020010 	.word	0x40020010
 8104154:	40020028 	.word	0x40020028
 8104158:	40020040 	.word	0x40020040
 810415c:	40020058 	.word	0x40020058
 8104160:	40020070 	.word	0x40020070
 8104164:	40020088 	.word	0x40020088
 8104168:	400200a0 	.word	0x400200a0
 810416c:	400200b8 	.word	0x400200b8
 8104170:	40020410 	.word	0x40020410
 8104174:	40020428 	.word	0x40020428
 8104178:	40020440 	.word	0x40020440
 810417c:	40020458 	.word	0x40020458
 8104180:	40020470 	.word	0x40020470
 8104184:	40020488 	.word	0x40020488
 8104188:	400204a0 	.word	0x400204a0
 810418c:	400204b8 	.word	0x400204b8
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	681b      	ldr	r3, [r3, #0]
 8104194:	681b      	ldr	r3, [r3, #0]
 8104196:	f003 0308 	and.w	r3, r3, #8
 810419a:	2b00      	cmp	r3, #0
 810419c:	bf14      	ite	ne
 810419e:	2301      	movne	r3, #1
 81041a0:	2300      	moveq	r3, #0
 81041a2:	b2db      	uxtb	r3, r3
 81041a4:	2b00      	cmp	r3, #0
 81041a6:	d015      	beq.n	81041d4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 81041a8:	687b      	ldr	r3, [r7, #4]
 81041aa:	681b      	ldr	r3, [r3, #0]
 81041ac:	681a      	ldr	r2, [r3, #0]
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	681b      	ldr	r3, [r3, #0]
 81041b2:	f022 0204 	bic.w	r2, r2, #4
 81041b6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81041b8:	687b      	ldr	r3, [r7, #4]
 81041ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81041bc:	f003 031f 	and.w	r3, r3, #31
 81041c0:	2208      	movs	r2, #8
 81041c2:	409a      	lsls	r2, r3
 81041c4:	6a3b      	ldr	r3, [r7, #32]
 81041c6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 81041c8:	687b      	ldr	r3, [r7, #4]
 81041ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81041cc:	f043 0201 	orr.w	r2, r3, #1
 81041d0:	687b      	ldr	r3, [r7, #4]
 81041d2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81041d4:	687b      	ldr	r3, [r7, #4]
 81041d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81041d8:	f003 031f 	and.w	r3, r3, #31
 81041dc:	69ba      	ldr	r2, [r7, #24]
 81041de:	fa22 f303 	lsr.w	r3, r2, r3
 81041e2:	f003 0301 	and.w	r3, r3, #1
 81041e6:	2b00      	cmp	r3, #0
 81041e8:	d06e      	beq.n	81042c8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 81041ea:	687b      	ldr	r3, [r7, #4]
 81041ec:	681b      	ldr	r3, [r3, #0]
 81041ee:	4a69      	ldr	r2, [pc, #420]	@ (8104394 <HAL_DMA_IRQHandler+0x3f8>)
 81041f0:	4293      	cmp	r3, r2
 81041f2:	d04a      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	4a67      	ldr	r2, [pc, #412]	@ (8104398 <HAL_DMA_IRQHandler+0x3fc>)
 81041fa:	4293      	cmp	r3, r2
 81041fc:	d045      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 81041fe:	687b      	ldr	r3, [r7, #4]
 8104200:	681b      	ldr	r3, [r3, #0]
 8104202:	4a66      	ldr	r2, [pc, #408]	@ (810439c <HAL_DMA_IRQHandler+0x400>)
 8104204:	4293      	cmp	r3, r2
 8104206:	d040      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104208:	687b      	ldr	r3, [r7, #4]
 810420a:	681b      	ldr	r3, [r3, #0]
 810420c:	4a64      	ldr	r2, [pc, #400]	@ (81043a0 <HAL_DMA_IRQHandler+0x404>)
 810420e:	4293      	cmp	r3, r2
 8104210:	d03b      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	4a63      	ldr	r2, [pc, #396]	@ (81043a4 <HAL_DMA_IRQHandler+0x408>)
 8104218:	4293      	cmp	r3, r2
 810421a:	d036      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 810421c:	687b      	ldr	r3, [r7, #4]
 810421e:	681b      	ldr	r3, [r3, #0]
 8104220:	4a61      	ldr	r2, [pc, #388]	@ (81043a8 <HAL_DMA_IRQHandler+0x40c>)
 8104222:	4293      	cmp	r3, r2
 8104224:	d031      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	681b      	ldr	r3, [r3, #0]
 810422a:	4a60      	ldr	r2, [pc, #384]	@ (81043ac <HAL_DMA_IRQHandler+0x410>)
 810422c:	4293      	cmp	r3, r2
 810422e:	d02c      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	4a5e      	ldr	r2, [pc, #376]	@ (81043b0 <HAL_DMA_IRQHandler+0x414>)
 8104236:	4293      	cmp	r3, r2
 8104238:	d027      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 810423a:	687b      	ldr	r3, [r7, #4]
 810423c:	681b      	ldr	r3, [r3, #0]
 810423e:	4a5d      	ldr	r2, [pc, #372]	@ (81043b4 <HAL_DMA_IRQHandler+0x418>)
 8104240:	4293      	cmp	r3, r2
 8104242:	d022      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104244:	687b      	ldr	r3, [r7, #4]
 8104246:	681b      	ldr	r3, [r3, #0]
 8104248:	4a5b      	ldr	r2, [pc, #364]	@ (81043b8 <HAL_DMA_IRQHandler+0x41c>)
 810424a:	4293      	cmp	r3, r2
 810424c:	d01d      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 810424e:	687b      	ldr	r3, [r7, #4]
 8104250:	681b      	ldr	r3, [r3, #0]
 8104252:	4a5a      	ldr	r2, [pc, #360]	@ (81043bc <HAL_DMA_IRQHandler+0x420>)
 8104254:	4293      	cmp	r3, r2
 8104256:	d018      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	681b      	ldr	r3, [r3, #0]
 810425c:	4a58      	ldr	r2, [pc, #352]	@ (81043c0 <HAL_DMA_IRQHandler+0x424>)
 810425e:	4293      	cmp	r3, r2
 8104260:	d013      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104262:	687b      	ldr	r3, [r7, #4]
 8104264:	681b      	ldr	r3, [r3, #0]
 8104266:	4a57      	ldr	r2, [pc, #348]	@ (81043c4 <HAL_DMA_IRQHandler+0x428>)
 8104268:	4293      	cmp	r3, r2
 810426a:	d00e      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 810426c:	687b      	ldr	r3, [r7, #4]
 810426e:	681b      	ldr	r3, [r3, #0]
 8104270:	4a55      	ldr	r2, [pc, #340]	@ (81043c8 <HAL_DMA_IRQHandler+0x42c>)
 8104272:	4293      	cmp	r3, r2
 8104274:	d009      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	4a54      	ldr	r2, [pc, #336]	@ (81043cc <HAL_DMA_IRQHandler+0x430>)
 810427c:	4293      	cmp	r3, r2
 810427e:	d004      	beq.n	810428a <HAL_DMA_IRQHandler+0x2ee>
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	4a52      	ldr	r2, [pc, #328]	@ (81043d0 <HAL_DMA_IRQHandler+0x434>)
 8104286:	4293      	cmp	r3, r2
 8104288:	d10a      	bne.n	81042a0 <HAL_DMA_IRQHandler+0x304>
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	695b      	ldr	r3, [r3, #20]
 8104290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104294:	2b00      	cmp	r3, #0
 8104296:	bf14      	ite	ne
 8104298:	2301      	movne	r3, #1
 810429a:	2300      	moveq	r3, #0
 810429c:	b2db      	uxtb	r3, r3
 810429e:	e003      	b.n	81042a8 <HAL_DMA_IRQHandler+0x30c>
 81042a0:	687b      	ldr	r3, [r7, #4]
 81042a2:	681b      	ldr	r3, [r3, #0]
 81042a4:	681b      	ldr	r3, [r3, #0]
 81042a6:	2300      	movs	r3, #0
 81042a8:	2b00      	cmp	r3, #0
 81042aa:	d00d      	beq.n	81042c8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81042ac:	687b      	ldr	r3, [r7, #4]
 81042ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81042b0:	f003 031f 	and.w	r3, r3, #31
 81042b4:	2201      	movs	r2, #1
 81042b6:	409a      	lsls	r2, r3
 81042b8:	6a3b      	ldr	r3, [r7, #32]
 81042ba:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 81042bc:	687b      	ldr	r3, [r7, #4]
 81042be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81042c0:	f043 0202 	orr.w	r2, r3, #2
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81042c8:	687b      	ldr	r3, [r7, #4]
 81042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81042cc:	f003 031f 	and.w	r3, r3, #31
 81042d0:	2204      	movs	r2, #4
 81042d2:	409a      	lsls	r2, r3
 81042d4:	69bb      	ldr	r3, [r7, #24]
 81042d6:	4013      	ands	r3, r2
 81042d8:	2b00      	cmp	r3, #0
 81042da:	f000 808f 	beq.w	81043fc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 81042de:	687b      	ldr	r3, [r7, #4]
 81042e0:	681b      	ldr	r3, [r3, #0]
 81042e2:	4a2c      	ldr	r2, [pc, #176]	@ (8104394 <HAL_DMA_IRQHandler+0x3f8>)
 81042e4:	4293      	cmp	r3, r2
 81042e6:	d04a      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 81042e8:	687b      	ldr	r3, [r7, #4]
 81042ea:	681b      	ldr	r3, [r3, #0]
 81042ec:	4a2a      	ldr	r2, [pc, #168]	@ (8104398 <HAL_DMA_IRQHandler+0x3fc>)
 81042ee:	4293      	cmp	r3, r2
 81042f0:	d045      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	4a29      	ldr	r2, [pc, #164]	@ (810439c <HAL_DMA_IRQHandler+0x400>)
 81042f8:	4293      	cmp	r3, r2
 81042fa:	d040      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 81042fc:	687b      	ldr	r3, [r7, #4]
 81042fe:	681b      	ldr	r3, [r3, #0]
 8104300:	4a27      	ldr	r2, [pc, #156]	@ (81043a0 <HAL_DMA_IRQHandler+0x404>)
 8104302:	4293      	cmp	r3, r2
 8104304:	d03b      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104306:	687b      	ldr	r3, [r7, #4]
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	4a26      	ldr	r2, [pc, #152]	@ (81043a4 <HAL_DMA_IRQHandler+0x408>)
 810430c:	4293      	cmp	r3, r2
 810430e:	d036      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	681b      	ldr	r3, [r3, #0]
 8104314:	4a24      	ldr	r2, [pc, #144]	@ (81043a8 <HAL_DMA_IRQHandler+0x40c>)
 8104316:	4293      	cmp	r3, r2
 8104318:	d031      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 810431a:	687b      	ldr	r3, [r7, #4]
 810431c:	681b      	ldr	r3, [r3, #0]
 810431e:	4a23      	ldr	r2, [pc, #140]	@ (81043ac <HAL_DMA_IRQHandler+0x410>)
 8104320:	4293      	cmp	r3, r2
 8104322:	d02c      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104324:	687b      	ldr	r3, [r7, #4]
 8104326:	681b      	ldr	r3, [r3, #0]
 8104328:	4a21      	ldr	r2, [pc, #132]	@ (81043b0 <HAL_DMA_IRQHandler+0x414>)
 810432a:	4293      	cmp	r3, r2
 810432c:	d027      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	681b      	ldr	r3, [r3, #0]
 8104332:	4a20      	ldr	r2, [pc, #128]	@ (81043b4 <HAL_DMA_IRQHandler+0x418>)
 8104334:	4293      	cmp	r3, r2
 8104336:	d022      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104338:	687b      	ldr	r3, [r7, #4]
 810433a:	681b      	ldr	r3, [r3, #0]
 810433c:	4a1e      	ldr	r2, [pc, #120]	@ (81043b8 <HAL_DMA_IRQHandler+0x41c>)
 810433e:	4293      	cmp	r3, r2
 8104340:	d01d      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104342:	687b      	ldr	r3, [r7, #4]
 8104344:	681b      	ldr	r3, [r3, #0]
 8104346:	4a1d      	ldr	r2, [pc, #116]	@ (81043bc <HAL_DMA_IRQHandler+0x420>)
 8104348:	4293      	cmp	r3, r2
 810434a:	d018      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 810434c:	687b      	ldr	r3, [r7, #4]
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	4a1b      	ldr	r2, [pc, #108]	@ (81043c0 <HAL_DMA_IRQHandler+0x424>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d013      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	681b      	ldr	r3, [r3, #0]
 810435a:	4a1a      	ldr	r2, [pc, #104]	@ (81043c4 <HAL_DMA_IRQHandler+0x428>)
 810435c:	4293      	cmp	r3, r2
 810435e:	d00e      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104360:	687b      	ldr	r3, [r7, #4]
 8104362:	681b      	ldr	r3, [r3, #0]
 8104364:	4a18      	ldr	r2, [pc, #96]	@ (81043c8 <HAL_DMA_IRQHandler+0x42c>)
 8104366:	4293      	cmp	r3, r2
 8104368:	d009      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 810436a:	687b      	ldr	r3, [r7, #4]
 810436c:	681b      	ldr	r3, [r3, #0]
 810436e:	4a17      	ldr	r2, [pc, #92]	@ (81043cc <HAL_DMA_IRQHandler+0x430>)
 8104370:	4293      	cmp	r3, r2
 8104372:	d004      	beq.n	810437e <HAL_DMA_IRQHandler+0x3e2>
 8104374:	687b      	ldr	r3, [r7, #4]
 8104376:	681b      	ldr	r3, [r3, #0]
 8104378:	4a15      	ldr	r2, [pc, #84]	@ (81043d0 <HAL_DMA_IRQHandler+0x434>)
 810437a:	4293      	cmp	r3, r2
 810437c:	d12a      	bne.n	81043d4 <HAL_DMA_IRQHandler+0x438>
 810437e:	687b      	ldr	r3, [r7, #4]
 8104380:	681b      	ldr	r3, [r3, #0]
 8104382:	681b      	ldr	r3, [r3, #0]
 8104384:	f003 0302 	and.w	r3, r3, #2
 8104388:	2b00      	cmp	r3, #0
 810438a:	bf14      	ite	ne
 810438c:	2301      	movne	r3, #1
 810438e:	2300      	moveq	r3, #0
 8104390:	b2db      	uxtb	r3, r3
 8104392:	e023      	b.n	81043dc <HAL_DMA_IRQHandler+0x440>
 8104394:	40020010 	.word	0x40020010
 8104398:	40020028 	.word	0x40020028
 810439c:	40020040 	.word	0x40020040
 81043a0:	40020058 	.word	0x40020058
 81043a4:	40020070 	.word	0x40020070
 81043a8:	40020088 	.word	0x40020088
 81043ac:	400200a0 	.word	0x400200a0
 81043b0:	400200b8 	.word	0x400200b8
 81043b4:	40020410 	.word	0x40020410
 81043b8:	40020428 	.word	0x40020428
 81043bc:	40020440 	.word	0x40020440
 81043c0:	40020458 	.word	0x40020458
 81043c4:	40020470 	.word	0x40020470
 81043c8:	40020488 	.word	0x40020488
 81043cc:	400204a0 	.word	0x400204a0
 81043d0:	400204b8 	.word	0x400204b8
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	681b      	ldr	r3, [r3, #0]
 81043d8:	681b      	ldr	r3, [r3, #0]
 81043da:	2300      	movs	r3, #0
 81043dc:	2b00      	cmp	r3, #0
 81043de:	d00d      	beq.n	81043fc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 81043e0:	687b      	ldr	r3, [r7, #4]
 81043e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81043e4:	f003 031f 	and.w	r3, r3, #31
 81043e8:	2204      	movs	r2, #4
 81043ea:	409a      	lsls	r2, r3
 81043ec:	6a3b      	ldr	r3, [r7, #32]
 81043ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81043f4:	f043 0204 	orr.w	r2, r3, #4
 81043f8:	687b      	ldr	r3, [r7, #4]
 81043fa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 81043fc:	687b      	ldr	r3, [r7, #4]
 81043fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104400:	f003 031f 	and.w	r3, r3, #31
 8104404:	2210      	movs	r2, #16
 8104406:	409a      	lsls	r2, r3
 8104408:	69bb      	ldr	r3, [r7, #24]
 810440a:	4013      	ands	r3, r2
 810440c:	2b00      	cmp	r3, #0
 810440e:	f000 80a6 	beq.w	810455e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8104412:	687b      	ldr	r3, [r7, #4]
 8104414:	681b      	ldr	r3, [r3, #0]
 8104416:	4a85      	ldr	r2, [pc, #532]	@ (810462c <HAL_DMA_IRQHandler+0x690>)
 8104418:	4293      	cmp	r3, r2
 810441a:	d04a      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	681b      	ldr	r3, [r3, #0]
 8104420:	4a83      	ldr	r2, [pc, #524]	@ (8104630 <HAL_DMA_IRQHandler+0x694>)
 8104422:	4293      	cmp	r3, r2
 8104424:	d045      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104426:	687b      	ldr	r3, [r7, #4]
 8104428:	681b      	ldr	r3, [r3, #0]
 810442a:	4a82      	ldr	r2, [pc, #520]	@ (8104634 <HAL_DMA_IRQHandler+0x698>)
 810442c:	4293      	cmp	r3, r2
 810442e:	d040      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104430:	687b      	ldr	r3, [r7, #4]
 8104432:	681b      	ldr	r3, [r3, #0]
 8104434:	4a80      	ldr	r2, [pc, #512]	@ (8104638 <HAL_DMA_IRQHandler+0x69c>)
 8104436:	4293      	cmp	r3, r2
 8104438:	d03b      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810443a:	687b      	ldr	r3, [r7, #4]
 810443c:	681b      	ldr	r3, [r3, #0]
 810443e:	4a7f      	ldr	r2, [pc, #508]	@ (810463c <HAL_DMA_IRQHandler+0x6a0>)
 8104440:	4293      	cmp	r3, r2
 8104442:	d036      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104444:	687b      	ldr	r3, [r7, #4]
 8104446:	681b      	ldr	r3, [r3, #0]
 8104448:	4a7d      	ldr	r2, [pc, #500]	@ (8104640 <HAL_DMA_IRQHandler+0x6a4>)
 810444a:	4293      	cmp	r3, r2
 810444c:	d031      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810444e:	687b      	ldr	r3, [r7, #4]
 8104450:	681b      	ldr	r3, [r3, #0]
 8104452:	4a7c      	ldr	r2, [pc, #496]	@ (8104644 <HAL_DMA_IRQHandler+0x6a8>)
 8104454:	4293      	cmp	r3, r2
 8104456:	d02c      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104458:	687b      	ldr	r3, [r7, #4]
 810445a:	681b      	ldr	r3, [r3, #0]
 810445c:	4a7a      	ldr	r2, [pc, #488]	@ (8104648 <HAL_DMA_IRQHandler+0x6ac>)
 810445e:	4293      	cmp	r3, r2
 8104460:	d027      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104462:	687b      	ldr	r3, [r7, #4]
 8104464:	681b      	ldr	r3, [r3, #0]
 8104466:	4a79      	ldr	r2, [pc, #484]	@ (810464c <HAL_DMA_IRQHandler+0x6b0>)
 8104468:	4293      	cmp	r3, r2
 810446a:	d022      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810446c:	687b      	ldr	r3, [r7, #4]
 810446e:	681b      	ldr	r3, [r3, #0]
 8104470:	4a77      	ldr	r2, [pc, #476]	@ (8104650 <HAL_DMA_IRQHandler+0x6b4>)
 8104472:	4293      	cmp	r3, r2
 8104474:	d01d      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104476:	687b      	ldr	r3, [r7, #4]
 8104478:	681b      	ldr	r3, [r3, #0]
 810447a:	4a76      	ldr	r2, [pc, #472]	@ (8104654 <HAL_DMA_IRQHandler+0x6b8>)
 810447c:	4293      	cmp	r3, r2
 810447e:	d018      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104480:	687b      	ldr	r3, [r7, #4]
 8104482:	681b      	ldr	r3, [r3, #0]
 8104484:	4a74      	ldr	r2, [pc, #464]	@ (8104658 <HAL_DMA_IRQHandler+0x6bc>)
 8104486:	4293      	cmp	r3, r2
 8104488:	d013      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810448a:	687b      	ldr	r3, [r7, #4]
 810448c:	681b      	ldr	r3, [r3, #0]
 810448e:	4a73      	ldr	r2, [pc, #460]	@ (810465c <HAL_DMA_IRQHandler+0x6c0>)
 8104490:	4293      	cmp	r3, r2
 8104492:	d00e      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 8104494:	687b      	ldr	r3, [r7, #4]
 8104496:	681b      	ldr	r3, [r3, #0]
 8104498:	4a71      	ldr	r2, [pc, #452]	@ (8104660 <HAL_DMA_IRQHandler+0x6c4>)
 810449a:	4293      	cmp	r3, r2
 810449c:	d009      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 810449e:	687b      	ldr	r3, [r7, #4]
 81044a0:	681b      	ldr	r3, [r3, #0]
 81044a2:	4a70      	ldr	r2, [pc, #448]	@ (8104664 <HAL_DMA_IRQHandler+0x6c8>)
 81044a4:	4293      	cmp	r3, r2
 81044a6:	d004      	beq.n	81044b2 <HAL_DMA_IRQHandler+0x516>
 81044a8:	687b      	ldr	r3, [r7, #4]
 81044aa:	681b      	ldr	r3, [r3, #0]
 81044ac:	4a6e      	ldr	r2, [pc, #440]	@ (8104668 <HAL_DMA_IRQHandler+0x6cc>)
 81044ae:	4293      	cmp	r3, r2
 81044b0:	d10a      	bne.n	81044c8 <HAL_DMA_IRQHandler+0x52c>
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	681b      	ldr	r3, [r3, #0]
 81044b6:	681b      	ldr	r3, [r3, #0]
 81044b8:	f003 0308 	and.w	r3, r3, #8
 81044bc:	2b00      	cmp	r3, #0
 81044be:	bf14      	ite	ne
 81044c0:	2301      	movne	r3, #1
 81044c2:	2300      	moveq	r3, #0
 81044c4:	b2db      	uxtb	r3, r3
 81044c6:	e009      	b.n	81044dc <HAL_DMA_IRQHandler+0x540>
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	681b      	ldr	r3, [r3, #0]
 81044cc:	681b      	ldr	r3, [r3, #0]
 81044ce:	f003 0304 	and.w	r3, r3, #4
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	bf14      	ite	ne
 81044d6:	2301      	movne	r3, #1
 81044d8:	2300      	moveq	r3, #0
 81044da:	b2db      	uxtb	r3, r3
 81044dc:	2b00      	cmp	r3, #0
 81044de:	d03e      	beq.n	810455e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 81044e0:	687b      	ldr	r3, [r7, #4]
 81044e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81044e4:	f003 031f 	and.w	r3, r3, #31
 81044e8:	2210      	movs	r2, #16
 81044ea:	409a      	lsls	r2, r3
 81044ec:	6a3b      	ldr	r3, [r7, #32]
 81044ee:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	681b      	ldr	r3, [r3, #0]
 81044f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 81044fa:	2b00      	cmp	r3, #0
 81044fc:	d018      	beq.n	8104530 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 81044fe:	687b      	ldr	r3, [r7, #4]
 8104500:	681b      	ldr	r3, [r3, #0]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8104508:	2b00      	cmp	r3, #0
 810450a:	d108      	bne.n	810451e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104510:	2b00      	cmp	r3, #0
 8104512:	d024      	beq.n	810455e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8104514:	687b      	ldr	r3, [r7, #4]
 8104516:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104518:	6878      	ldr	r0, [r7, #4]
 810451a:	4798      	blx	r3
 810451c:	e01f      	b.n	810455e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 810451e:	687b      	ldr	r3, [r7, #4]
 8104520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104522:	2b00      	cmp	r3, #0
 8104524:	d01b      	beq.n	810455e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810452a:	6878      	ldr	r0, [r7, #4]
 810452c:	4798      	blx	r3
 810452e:	e016      	b.n	810455e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104530:	687b      	ldr	r3, [r7, #4]
 8104532:	681b      	ldr	r3, [r3, #0]
 8104534:	681b      	ldr	r3, [r3, #0]
 8104536:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810453a:	2b00      	cmp	r3, #0
 810453c:	d107      	bne.n	810454e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 810453e:	687b      	ldr	r3, [r7, #4]
 8104540:	681b      	ldr	r3, [r3, #0]
 8104542:	681a      	ldr	r2, [r3, #0]
 8104544:	687b      	ldr	r3, [r7, #4]
 8104546:	681b      	ldr	r3, [r3, #0]
 8104548:	f022 0208 	bic.w	r2, r2, #8
 810454c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104552:	2b00      	cmp	r3, #0
 8104554:	d003      	beq.n	810455e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8104556:	687b      	ldr	r3, [r7, #4]
 8104558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810455a:	6878      	ldr	r0, [r7, #4]
 810455c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104562:	f003 031f 	and.w	r3, r3, #31
 8104566:	2220      	movs	r2, #32
 8104568:	409a      	lsls	r2, r3
 810456a:	69bb      	ldr	r3, [r7, #24]
 810456c:	4013      	ands	r3, r2
 810456e:	2b00      	cmp	r3, #0
 8104570:	f000 8110 	beq.w	8104794 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8104574:	687b      	ldr	r3, [r7, #4]
 8104576:	681b      	ldr	r3, [r3, #0]
 8104578:	4a2c      	ldr	r2, [pc, #176]	@ (810462c <HAL_DMA_IRQHandler+0x690>)
 810457a:	4293      	cmp	r3, r2
 810457c:	d04a      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 810457e:	687b      	ldr	r3, [r7, #4]
 8104580:	681b      	ldr	r3, [r3, #0]
 8104582:	4a2b      	ldr	r2, [pc, #172]	@ (8104630 <HAL_DMA_IRQHandler+0x694>)
 8104584:	4293      	cmp	r3, r2
 8104586:	d045      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 8104588:	687b      	ldr	r3, [r7, #4]
 810458a:	681b      	ldr	r3, [r3, #0]
 810458c:	4a29      	ldr	r2, [pc, #164]	@ (8104634 <HAL_DMA_IRQHandler+0x698>)
 810458e:	4293      	cmp	r3, r2
 8104590:	d040      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	4a28      	ldr	r2, [pc, #160]	@ (8104638 <HAL_DMA_IRQHandler+0x69c>)
 8104598:	4293      	cmp	r3, r2
 810459a:	d03b      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 810459c:	687b      	ldr	r3, [r7, #4]
 810459e:	681b      	ldr	r3, [r3, #0]
 81045a0:	4a26      	ldr	r2, [pc, #152]	@ (810463c <HAL_DMA_IRQHandler+0x6a0>)
 81045a2:	4293      	cmp	r3, r2
 81045a4:	d036      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045a6:	687b      	ldr	r3, [r7, #4]
 81045a8:	681b      	ldr	r3, [r3, #0]
 81045aa:	4a25      	ldr	r2, [pc, #148]	@ (8104640 <HAL_DMA_IRQHandler+0x6a4>)
 81045ac:	4293      	cmp	r3, r2
 81045ae:	d031      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045b0:	687b      	ldr	r3, [r7, #4]
 81045b2:	681b      	ldr	r3, [r3, #0]
 81045b4:	4a23      	ldr	r2, [pc, #140]	@ (8104644 <HAL_DMA_IRQHandler+0x6a8>)
 81045b6:	4293      	cmp	r3, r2
 81045b8:	d02c      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045ba:	687b      	ldr	r3, [r7, #4]
 81045bc:	681b      	ldr	r3, [r3, #0]
 81045be:	4a22      	ldr	r2, [pc, #136]	@ (8104648 <HAL_DMA_IRQHandler+0x6ac>)
 81045c0:	4293      	cmp	r3, r2
 81045c2:	d027      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045c4:	687b      	ldr	r3, [r7, #4]
 81045c6:	681b      	ldr	r3, [r3, #0]
 81045c8:	4a20      	ldr	r2, [pc, #128]	@ (810464c <HAL_DMA_IRQHandler+0x6b0>)
 81045ca:	4293      	cmp	r3, r2
 81045cc:	d022      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045ce:	687b      	ldr	r3, [r7, #4]
 81045d0:	681b      	ldr	r3, [r3, #0]
 81045d2:	4a1f      	ldr	r2, [pc, #124]	@ (8104650 <HAL_DMA_IRQHandler+0x6b4>)
 81045d4:	4293      	cmp	r3, r2
 81045d6:	d01d      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045d8:	687b      	ldr	r3, [r7, #4]
 81045da:	681b      	ldr	r3, [r3, #0]
 81045dc:	4a1d      	ldr	r2, [pc, #116]	@ (8104654 <HAL_DMA_IRQHandler+0x6b8>)
 81045de:	4293      	cmp	r3, r2
 81045e0:	d018      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045e2:	687b      	ldr	r3, [r7, #4]
 81045e4:	681b      	ldr	r3, [r3, #0]
 81045e6:	4a1c      	ldr	r2, [pc, #112]	@ (8104658 <HAL_DMA_IRQHandler+0x6bc>)
 81045e8:	4293      	cmp	r3, r2
 81045ea:	d013      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045ec:	687b      	ldr	r3, [r7, #4]
 81045ee:	681b      	ldr	r3, [r3, #0]
 81045f0:	4a1a      	ldr	r2, [pc, #104]	@ (810465c <HAL_DMA_IRQHandler+0x6c0>)
 81045f2:	4293      	cmp	r3, r2
 81045f4:	d00e      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	4a19      	ldr	r2, [pc, #100]	@ (8104660 <HAL_DMA_IRQHandler+0x6c4>)
 81045fc:	4293      	cmp	r3, r2
 81045fe:	d009      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 8104600:	687b      	ldr	r3, [r7, #4]
 8104602:	681b      	ldr	r3, [r3, #0]
 8104604:	4a17      	ldr	r2, [pc, #92]	@ (8104664 <HAL_DMA_IRQHandler+0x6c8>)
 8104606:	4293      	cmp	r3, r2
 8104608:	d004      	beq.n	8104614 <HAL_DMA_IRQHandler+0x678>
 810460a:	687b      	ldr	r3, [r7, #4]
 810460c:	681b      	ldr	r3, [r3, #0]
 810460e:	4a16      	ldr	r2, [pc, #88]	@ (8104668 <HAL_DMA_IRQHandler+0x6cc>)
 8104610:	4293      	cmp	r3, r2
 8104612:	d12b      	bne.n	810466c <HAL_DMA_IRQHandler+0x6d0>
 8104614:	687b      	ldr	r3, [r7, #4]
 8104616:	681b      	ldr	r3, [r3, #0]
 8104618:	681b      	ldr	r3, [r3, #0]
 810461a:	f003 0310 	and.w	r3, r3, #16
 810461e:	2b00      	cmp	r3, #0
 8104620:	bf14      	ite	ne
 8104622:	2301      	movne	r3, #1
 8104624:	2300      	moveq	r3, #0
 8104626:	b2db      	uxtb	r3, r3
 8104628:	e02a      	b.n	8104680 <HAL_DMA_IRQHandler+0x6e4>
 810462a:	bf00      	nop
 810462c:	40020010 	.word	0x40020010
 8104630:	40020028 	.word	0x40020028
 8104634:	40020040 	.word	0x40020040
 8104638:	40020058 	.word	0x40020058
 810463c:	40020070 	.word	0x40020070
 8104640:	40020088 	.word	0x40020088
 8104644:	400200a0 	.word	0x400200a0
 8104648:	400200b8 	.word	0x400200b8
 810464c:	40020410 	.word	0x40020410
 8104650:	40020428 	.word	0x40020428
 8104654:	40020440 	.word	0x40020440
 8104658:	40020458 	.word	0x40020458
 810465c:	40020470 	.word	0x40020470
 8104660:	40020488 	.word	0x40020488
 8104664:	400204a0 	.word	0x400204a0
 8104668:	400204b8 	.word	0x400204b8
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	681b      	ldr	r3, [r3, #0]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	f003 0302 	and.w	r3, r3, #2
 8104676:	2b00      	cmp	r3, #0
 8104678:	bf14      	ite	ne
 810467a:	2301      	movne	r3, #1
 810467c:	2300      	moveq	r3, #0
 810467e:	b2db      	uxtb	r3, r3
 8104680:	2b00      	cmp	r3, #0
 8104682:	f000 8087 	beq.w	8104794 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8104686:	687b      	ldr	r3, [r7, #4]
 8104688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810468a:	f003 031f 	and.w	r3, r3, #31
 810468e:	2220      	movs	r2, #32
 8104690:	409a      	lsls	r2, r3
 8104692:	6a3b      	ldr	r3, [r7, #32]
 8104694:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8104696:	687b      	ldr	r3, [r7, #4]
 8104698:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 810469c:	b2db      	uxtb	r3, r3
 810469e:	2b04      	cmp	r3, #4
 81046a0:	d139      	bne.n	8104716 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 81046a2:	687b      	ldr	r3, [r7, #4]
 81046a4:	681b      	ldr	r3, [r3, #0]
 81046a6:	681a      	ldr	r2, [r3, #0]
 81046a8:	687b      	ldr	r3, [r7, #4]
 81046aa:	681b      	ldr	r3, [r3, #0]
 81046ac:	f022 0216 	bic.w	r2, r2, #22
 81046b0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	681b      	ldr	r3, [r3, #0]
 81046b6:	695a      	ldr	r2, [r3, #20]
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81046c0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 81046c2:	687b      	ldr	r3, [r7, #4]
 81046c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81046c6:	2b00      	cmp	r3, #0
 81046c8:	d103      	bne.n	81046d2 <HAL_DMA_IRQHandler+0x736>
 81046ca:	687b      	ldr	r3, [r7, #4]
 81046cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81046ce:	2b00      	cmp	r3, #0
 81046d0:	d007      	beq.n	81046e2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 81046d2:	687b      	ldr	r3, [r7, #4]
 81046d4:	681b      	ldr	r3, [r3, #0]
 81046d6:	681a      	ldr	r2, [r3, #0]
 81046d8:	687b      	ldr	r3, [r7, #4]
 81046da:	681b      	ldr	r3, [r3, #0]
 81046dc:	f022 0208 	bic.w	r2, r2, #8
 81046e0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 81046e2:	687b      	ldr	r3, [r7, #4]
 81046e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81046e6:	f003 031f 	and.w	r3, r3, #31
 81046ea:	223f      	movs	r2, #63	@ 0x3f
 81046ec:	409a      	lsls	r2, r3
 81046ee:	6a3b      	ldr	r3, [r7, #32]
 81046f0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 81046f2:	687b      	ldr	r3, [r7, #4]
 81046f4:	2201      	movs	r2, #1
 81046f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 81046fa:	687b      	ldr	r3, [r7, #4]
 81046fc:	2200      	movs	r2, #0
 81046fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8104702:	687b      	ldr	r3, [r7, #4]
 8104704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104706:	2b00      	cmp	r3, #0
 8104708:	f000 834a 	beq.w	8104da0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 810470c:	687b      	ldr	r3, [r7, #4]
 810470e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104710:	6878      	ldr	r0, [r7, #4]
 8104712:	4798      	blx	r3
          }
          return;
 8104714:	e344      	b.n	8104da0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8104716:	687b      	ldr	r3, [r7, #4]
 8104718:	681b      	ldr	r3, [r3, #0]
 810471a:	681b      	ldr	r3, [r3, #0]
 810471c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8104720:	2b00      	cmp	r3, #0
 8104722:	d018      	beq.n	8104756 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8104724:	687b      	ldr	r3, [r7, #4]
 8104726:	681b      	ldr	r3, [r3, #0]
 8104728:	681b      	ldr	r3, [r3, #0]
 810472a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 810472e:	2b00      	cmp	r3, #0
 8104730:	d108      	bne.n	8104744 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8104732:	687b      	ldr	r3, [r7, #4]
 8104734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104736:	2b00      	cmp	r3, #0
 8104738:	d02c      	beq.n	8104794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 810473a:	687b      	ldr	r3, [r7, #4]
 810473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810473e:	6878      	ldr	r0, [r7, #4]
 8104740:	4798      	blx	r3
 8104742:	e027      	b.n	8104794 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8104744:	687b      	ldr	r3, [r7, #4]
 8104746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104748:	2b00      	cmp	r3, #0
 810474a:	d023      	beq.n	8104794 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 810474c:	687b      	ldr	r3, [r7, #4]
 810474e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104750:	6878      	ldr	r0, [r7, #4]
 8104752:	4798      	blx	r3
 8104754:	e01e      	b.n	8104794 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	681b      	ldr	r3, [r3, #0]
 810475a:	681b      	ldr	r3, [r3, #0]
 810475c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104760:	2b00      	cmp	r3, #0
 8104762:	d10f      	bne.n	8104784 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8104764:	687b      	ldr	r3, [r7, #4]
 8104766:	681b      	ldr	r3, [r3, #0]
 8104768:	681a      	ldr	r2, [r3, #0]
 810476a:	687b      	ldr	r3, [r7, #4]
 810476c:	681b      	ldr	r3, [r3, #0]
 810476e:	f022 0210 	bic.w	r2, r2, #16
 8104772:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	2201      	movs	r2, #1
 8104778:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 810477c:	687b      	ldr	r3, [r7, #4]
 810477e:	2200      	movs	r2, #0
 8104780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8104784:	687b      	ldr	r3, [r7, #4]
 8104786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104788:	2b00      	cmp	r3, #0
 810478a:	d003      	beq.n	8104794 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 810478c:	687b      	ldr	r3, [r7, #4]
 810478e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104790:	6878      	ldr	r0, [r7, #4]
 8104792:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8104794:	687b      	ldr	r3, [r7, #4]
 8104796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104798:	2b00      	cmp	r3, #0
 810479a:	f000 8306 	beq.w	8104daa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 810479e:	687b      	ldr	r3, [r7, #4]
 81047a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047a2:	f003 0301 	and.w	r3, r3, #1
 81047a6:	2b00      	cmp	r3, #0
 81047a8:	f000 8088 	beq.w	81048bc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 81047ac:	687b      	ldr	r3, [r7, #4]
 81047ae:	2204      	movs	r2, #4
 81047b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	681b      	ldr	r3, [r3, #0]
 81047b8:	4a7a      	ldr	r2, [pc, #488]	@ (81049a4 <HAL_DMA_IRQHandler+0xa08>)
 81047ba:	4293      	cmp	r3, r2
 81047bc:	d04a      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047be:	687b      	ldr	r3, [r7, #4]
 81047c0:	681b      	ldr	r3, [r3, #0]
 81047c2:	4a79      	ldr	r2, [pc, #484]	@ (81049a8 <HAL_DMA_IRQHandler+0xa0c>)
 81047c4:	4293      	cmp	r3, r2
 81047c6:	d045      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047c8:	687b      	ldr	r3, [r7, #4]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	4a77      	ldr	r2, [pc, #476]	@ (81049ac <HAL_DMA_IRQHandler+0xa10>)
 81047ce:	4293      	cmp	r3, r2
 81047d0:	d040      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047d2:	687b      	ldr	r3, [r7, #4]
 81047d4:	681b      	ldr	r3, [r3, #0]
 81047d6:	4a76      	ldr	r2, [pc, #472]	@ (81049b0 <HAL_DMA_IRQHandler+0xa14>)
 81047d8:	4293      	cmp	r3, r2
 81047da:	d03b      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047dc:	687b      	ldr	r3, [r7, #4]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	4a74      	ldr	r2, [pc, #464]	@ (81049b4 <HAL_DMA_IRQHandler+0xa18>)
 81047e2:	4293      	cmp	r3, r2
 81047e4:	d036      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047e6:	687b      	ldr	r3, [r7, #4]
 81047e8:	681b      	ldr	r3, [r3, #0]
 81047ea:	4a73      	ldr	r2, [pc, #460]	@ (81049b8 <HAL_DMA_IRQHandler+0xa1c>)
 81047ec:	4293      	cmp	r3, r2
 81047ee:	d031      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047f0:	687b      	ldr	r3, [r7, #4]
 81047f2:	681b      	ldr	r3, [r3, #0]
 81047f4:	4a71      	ldr	r2, [pc, #452]	@ (81049bc <HAL_DMA_IRQHandler+0xa20>)
 81047f6:	4293      	cmp	r3, r2
 81047f8:	d02c      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	681b      	ldr	r3, [r3, #0]
 81047fe:	4a70      	ldr	r2, [pc, #448]	@ (81049c0 <HAL_DMA_IRQHandler+0xa24>)
 8104800:	4293      	cmp	r3, r2
 8104802:	d027      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 8104804:	687b      	ldr	r3, [r7, #4]
 8104806:	681b      	ldr	r3, [r3, #0]
 8104808:	4a6e      	ldr	r2, [pc, #440]	@ (81049c4 <HAL_DMA_IRQHandler+0xa28>)
 810480a:	4293      	cmp	r3, r2
 810480c:	d022      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 810480e:	687b      	ldr	r3, [r7, #4]
 8104810:	681b      	ldr	r3, [r3, #0]
 8104812:	4a6d      	ldr	r2, [pc, #436]	@ (81049c8 <HAL_DMA_IRQHandler+0xa2c>)
 8104814:	4293      	cmp	r3, r2
 8104816:	d01d      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	681b      	ldr	r3, [r3, #0]
 810481c:	4a6b      	ldr	r2, [pc, #428]	@ (81049cc <HAL_DMA_IRQHandler+0xa30>)
 810481e:	4293      	cmp	r3, r2
 8104820:	d018      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 8104822:	687b      	ldr	r3, [r7, #4]
 8104824:	681b      	ldr	r3, [r3, #0]
 8104826:	4a6a      	ldr	r2, [pc, #424]	@ (81049d0 <HAL_DMA_IRQHandler+0xa34>)
 8104828:	4293      	cmp	r3, r2
 810482a:	d013      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 810482c:	687b      	ldr	r3, [r7, #4]
 810482e:	681b      	ldr	r3, [r3, #0]
 8104830:	4a68      	ldr	r2, [pc, #416]	@ (81049d4 <HAL_DMA_IRQHandler+0xa38>)
 8104832:	4293      	cmp	r3, r2
 8104834:	d00e      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 8104836:	687b      	ldr	r3, [r7, #4]
 8104838:	681b      	ldr	r3, [r3, #0]
 810483a:	4a67      	ldr	r2, [pc, #412]	@ (81049d8 <HAL_DMA_IRQHandler+0xa3c>)
 810483c:	4293      	cmp	r3, r2
 810483e:	d009      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 8104840:	687b      	ldr	r3, [r7, #4]
 8104842:	681b      	ldr	r3, [r3, #0]
 8104844:	4a65      	ldr	r2, [pc, #404]	@ (81049dc <HAL_DMA_IRQHandler+0xa40>)
 8104846:	4293      	cmp	r3, r2
 8104848:	d004      	beq.n	8104854 <HAL_DMA_IRQHandler+0x8b8>
 810484a:	687b      	ldr	r3, [r7, #4]
 810484c:	681b      	ldr	r3, [r3, #0]
 810484e:	4a64      	ldr	r2, [pc, #400]	@ (81049e0 <HAL_DMA_IRQHandler+0xa44>)
 8104850:	4293      	cmp	r3, r2
 8104852:	d108      	bne.n	8104866 <HAL_DMA_IRQHandler+0x8ca>
 8104854:	687b      	ldr	r3, [r7, #4]
 8104856:	681b      	ldr	r3, [r3, #0]
 8104858:	681a      	ldr	r2, [r3, #0]
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	681b      	ldr	r3, [r3, #0]
 810485e:	f022 0201 	bic.w	r2, r2, #1
 8104862:	601a      	str	r2, [r3, #0]
 8104864:	e007      	b.n	8104876 <HAL_DMA_IRQHandler+0x8da>
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	681b      	ldr	r3, [r3, #0]
 810486a:	681a      	ldr	r2, [r3, #0]
 810486c:	687b      	ldr	r3, [r7, #4]
 810486e:	681b      	ldr	r3, [r3, #0]
 8104870:	f022 0201 	bic.w	r2, r2, #1
 8104874:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8104876:	68fb      	ldr	r3, [r7, #12]
 8104878:	3301      	adds	r3, #1
 810487a:	60fb      	str	r3, [r7, #12]
 810487c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810487e:	429a      	cmp	r2, r3
 8104880:	d307      	bcc.n	8104892 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8104882:	687b      	ldr	r3, [r7, #4]
 8104884:	681b      	ldr	r3, [r3, #0]
 8104886:	681b      	ldr	r3, [r3, #0]
 8104888:	f003 0301 	and.w	r3, r3, #1
 810488c:	2b00      	cmp	r3, #0
 810488e:	d1f2      	bne.n	8104876 <HAL_DMA_IRQHandler+0x8da>
 8104890:	e000      	b.n	8104894 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8104892:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8104894:	687b      	ldr	r3, [r7, #4]
 8104896:	681b      	ldr	r3, [r3, #0]
 8104898:	681b      	ldr	r3, [r3, #0]
 810489a:	f003 0301 	and.w	r3, r3, #1
 810489e:	2b00      	cmp	r3, #0
 81048a0:	d004      	beq.n	81048ac <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	2203      	movs	r2, #3
 81048a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 81048aa:	e003      	b.n	81048b4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 81048ac:	687b      	ldr	r3, [r7, #4]
 81048ae:	2201      	movs	r2, #1
 81048b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81048b4:	687b      	ldr	r3, [r7, #4]
 81048b6:	2200      	movs	r2, #0
 81048b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 81048bc:	687b      	ldr	r3, [r7, #4]
 81048be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81048c0:	2b00      	cmp	r3, #0
 81048c2:	f000 8272 	beq.w	8104daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 81048c6:	687b      	ldr	r3, [r7, #4]
 81048c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81048ca:	6878      	ldr	r0, [r7, #4]
 81048cc:	4798      	blx	r3
 81048ce:	e26c      	b.n	8104daa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 81048d0:	687b      	ldr	r3, [r7, #4]
 81048d2:	681b      	ldr	r3, [r3, #0]
 81048d4:	4a43      	ldr	r2, [pc, #268]	@ (81049e4 <HAL_DMA_IRQHandler+0xa48>)
 81048d6:	4293      	cmp	r3, r2
 81048d8:	d022      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 81048da:	687b      	ldr	r3, [r7, #4]
 81048dc:	681b      	ldr	r3, [r3, #0]
 81048de:	4a42      	ldr	r2, [pc, #264]	@ (81049e8 <HAL_DMA_IRQHandler+0xa4c>)
 81048e0:	4293      	cmp	r3, r2
 81048e2:	d01d      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 81048e4:	687b      	ldr	r3, [r7, #4]
 81048e6:	681b      	ldr	r3, [r3, #0]
 81048e8:	4a40      	ldr	r2, [pc, #256]	@ (81049ec <HAL_DMA_IRQHandler+0xa50>)
 81048ea:	4293      	cmp	r3, r2
 81048ec:	d018      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 81048ee:	687b      	ldr	r3, [r7, #4]
 81048f0:	681b      	ldr	r3, [r3, #0]
 81048f2:	4a3f      	ldr	r2, [pc, #252]	@ (81049f0 <HAL_DMA_IRQHandler+0xa54>)
 81048f4:	4293      	cmp	r3, r2
 81048f6:	d013      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	681b      	ldr	r3, [r3, #0]
 81048fc:	4a3d      	ldr	r2, [pc, #244]	@ (81049f4 <HAL_DMA_IRQHandler+0xa58>)
 81048fe:	4293      	cmp	r3, r2
 8104900:	d00e      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	681b      	ldr	r3, [r3, #0]
 8104906:	4a3c      	ldr	r2, [pc, #240]	@ (81049f8 <HAL_DMA_IRQHandler+0xa5c>)
 8104908:	4293      	cmp	r3, r2
 810490a:	d009      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 810490c:	687b      	ldr	r3, [r7, #4]
 810490e:	681b      	ldr	r3, [r3, #0]
 8104910:	4a3a      	ldr	r2, [pc, #232]	@ (81049fc <HAL_DMA_IRQHandler+0xa60>)
 8104912:	4293      	cmp	r3, r2
 8104914:	d004      	beq.n	8104920 <HAL_DMA_IRQHandler+0x984>
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	681b      	ldr	r3, [r3, #0]
 810491a:	4a39      	ldr	r2, [pc, #228]	@ (8104a00 <HAL_DMA_IRQHandler+0xa64>)
 810491c:	4293      	cmp	r3, r2
 810491e:	d101      	bne.n	8104924 <HAL_DMA_IRQHandler+0x988>
 8104920:	2301      	movs	r3, #1
 8104922:	e000      	b.n	8104926 <HAL_DMA_IRQHandler+0x98a>
 8104924:	2300      	movs	r3, #0
 8104926:	2b00      	cmp	r3, #0
 8104928:	f000 823f 	beq.w	8104daa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 810492c:	687b      	ldr	r3, [r7, #4]
 810492e:	681b      	ldr	r3, [r3, #0]
 8104930:	681b      	ldr	r3, [r3, #0]
 8104932:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8104934:	687b      	ldr	r3, [r7, #4]
 8104936:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104938:	f003 031f 	and.w	r3, r3, #31
 810493c:	2204      	movs	r2, #4
 810493e:	409a      	lsls	r2, r3
 8104940:	697b      	ldr	r3, [r7, #20]
 8104942:	4013      	ands	r3, r2
 8104944:	2b00      	cmp	r3, #0
 8104946:	f000 80cd 	beq.w	8104ae4 <HAL_DMA_IRQHandler+0xb48>
 810494a:	693b      	ldr	r3, [r7, #16]
 810494c:	f003 0304 	and.w	r3, r3, #4
 8104950:	2b00      	cmp	r3, #0
 8104952:	f000 80c7 	beq.w	8104ae4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8104956:	687b      	ldr	r3, [r7, #4]
 8104958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810495a:	f003 031f 	and.w	r3, r3, #31
 810495e:	2204      	movs	r2, #4
 8104960:	409a      	lsls	r2, r3
 8104962:	69fb      	ldr	r3, [r7, #28]
 8104964:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104966:	693b      	ldr	r3, [r7, #16]
 8104968:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810496c:	2b00      	cmp	r3, #0
 810496e:	d049      	beq.n	8104a04 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104970:	693b      	ldr	r3, [r7, #16]
 8104972:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104976:	2b00      	cmp	r3, #0
 8104978:	d109      	bne.n	810498e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 810497a:	687b      	ldr	r3, [r7, #4]
 810497c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810497e:	2b00      	cmp	r3, #0
 8104980:	f000 8210 	beq.w	8104da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8104984:	687b      	ldr	r3, [r7, #4]
 8104986:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8104988:	6878      	ldr	r0, [r7, #4]
 810498a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 810498c:	e20a      	b.n	8104da4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 810498e:	687b      	ldr	r3, [r7, #4]
 8104990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104992:	2b00      	cmp	r3, #0
 8104994:	f000 8206 	beq.w	8104da4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8104998:	687b      	ldr	r3, [r7, #4]
 810499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810499c:	6878      	ldr	r0, [r7, #4]
 810499e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 81049a0:	e200      	b.n	8104da4 <HAL_DMA_IRQHandler+0xe08>
 81049a2:	bf00      	nop
 81049a4:	40020010 	.word	0x40020010
 81049a8:	40020028 	.word	0x40020028
 81049ac:	40020040 	.word	0x40020040
 81049b0:	40020058 	.word	0x40020058
 81049b4:	40020070 	.word	0x40020070
 81049b8:	40020088 	.word	0x40020088
 81049bc:	400200a0 	.word	0x400200a0
 81049c0:	400200b8 	.word	0x400200b8
 81049c4:	40020410 	.word	0x40020410
 81049c8:	40020428 	.word	0x40020428
 81049cc:	40020440 	.word	0x40020440
 81049d0:	40020458 	.word	0x40020458
 81049d4:	40020470 	.word	0x40020470
 81049d8:	40020488 	.word	0x40020488
 81049dc:	400204a0 	.word	0x400204a0
 81049e0:	400204b8 	.word	0x400204b8
 81049e4:	58025408 	.word	0x58025408
 81049e8:	5802541c 	.word	0x5802541c
 81049ec:	58025430 	.word	0x58025430
 81049f0:	58025444 	.word	0x58025444
 81049f4:	58025458 	.word	0x58025458
 81049f8:	5802546c 	.word	0x5802546c
 81049fc:	58025480 	.word	0x58025480
 8104a00:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104a04:	693b      	ldr	r3, [r7, #16]
 8104a06:	f003 0320 	and.w	r3, r3, #32
 8104a0a:	2b00      	cmp	r3, #0
 8104a0c:	d160      	bne.n	8104ad0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8104a0e:	687b      	ldr	r3, [r7, #4]
 8104a10:	681b      	ldr	r3, [r3, #0]
 8104a12:	4a7f      	ldr	r2, [pc, #508]	@ (8104c10 <HAL_DMA_IRQHandler+0xc74>)
 8104a14:	4293      	cmp	r3, r2
 8104a16:	d04a      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a18:	687b      	ldr	r3, [r7, #4]
 8104a1a:	681b      	ldr	r3, [r3, #0]
 8104a1c:	4a7d      	ldr	r2, [pc, #500]	@ (8104c14 <HAL_DMA_IRQHandler+0xc78>)
 8104a1e:	4293      	cmp	r3, r2
 8104a20:	d045      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a22:	687b      	ldr	r3, [r7, #4]
 8104a24:	681b      	ldr	r3, [r3, #0]
 8104a26:	4a7c      	ldr	r2, [pc, #496]	@ (8104c18 <HAL_DMA_IRQHandler+0xc7c>)
 8104a28:	4293      	cmp	r3, r2
 8104a2a:	d040      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a2c:	687b      	ldr	r3, [r7, #4]
 8104a2e:	681b      	ldr	r3, [r3, #0]
 8104a30:	4a7a      	ldr	r2, [pc, #488]	@ (8104c1c <HAL_DMA_IRQHandler+0xc80>)
 8104a32:	4293      	cmp	r3, r2
 8104a34:	d03b      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a36:	687b      	ldr	r3, [r7, #4]
 8104a38:	681b      	ldr	r3, [r3, #0]
 8104a3a:	4a79      	ldr	r2, [pc, #484]	@ (8104c20 <HAL_DMA_IRQHandler+0xc84>)
 8104a3c:	4293      	cmp	r3, r2
 8104a3e:	d036      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a40:	687b      	ldr	r3, [r7, #4]
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	4a77      	ldr	r2, [pc, #476]	@ (8104c24 <HAL_DMA_IRQHandler+0xc88>)
 8104a46:	4293      	cmp	r3, r2
 8104a48:	d031      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a4a:	687b      	ldr	r3, [r7, #4]
 8104a4c:	681b      	ldr	r3, [r3, #0]
 8104a4e:	4a76      	ldr	r2, [pc, #472]	@ (8104c28 <HAL_DMA_IRQHandler+0xc8c>)
 8104a50:	4293      	cmp	r3, r2
 8104a52:	d02c      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a54:	687b      	ldr	r3, [r7, #4]
 8104a56:	681b      	ldr	r3, [r3, #0]
 8104a58:	4a74      	ldr	r2, [pc, #464]	@ (8104c2c <HAL_DMA_IRQHandler+0xc90>)
 8104a5a:	4293      	cmp	r3, r2
 8104a5c:	d027      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	681b      	ldr	r3, [r3, #0]
 8104a62:	4a73      	ldr	r2, [pc, #460]	@ (8104c30 <HAL_DMA_IRQHandler+0xc94>)
 8104a64:	4293      	cmp	r3, r2
 8104a66:	d022      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a68:	687b      	ldr	r3, [r7, #4]
 8104a6a:	681b      	ldr	r3, [r3, #0]
 8104a6c:	4a71      	ldr	r2, [pc, #452]	@ (8104c34 <HAL_DMA_IRQHandler+0xc98>)
 8104a6e:	4293      	cmp	r3, r2
 8104a70:	d01d      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a72:	687b      	ldr	r3, [r7, #4]
 8104a74:	681b      	ldr	r3, [r3, #0]
 8104a76:	4a70      	ldr	r2, [pc, #448]	@ (8104c38 <HAL_DMA_IRQHandler+0xc9c>)
 8104a78:	4293      	cmp	r3, r2
 8104a7a:	d018      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a7c:	687b      	ldr	r3, [r7, #4]
 8104a7e:	681b      	ldr	r3, [r3, #0]
 8104a80:	4a6e      	ldr	r2, [pc, #440]	@ (8104c3c <HAL_DMA_IRQHandler+0xca0>)
 8104a82:	4293      	cmp	r3, r2
 8104a84:	d013      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a86:	687b      	ldr	r3, [r7, #4]
 8104a88:	681b      	ldr	r3, [r3, #0]
 8104a8a:	4a6d      	ldr	r2, [pc, #436]	@ (8104c40 <HAL_DMA_IRQHandler+0xca4>)
 8104a8c:	4293      	cmp	r3, r2
 8104a8e:	d00e      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a90:	687b      	ldr	r3, [r7, #4]
 8104a92:	681b      	ldr	r3, [r3, #0]
 8104a94:	4a6b      	ldr	r2, [pc, #428]	@ (8104c44 <HAL_DMA_IRQHandler+0xca8>)
 8104a96:	4293      	cmp	r3, r2
 8104a98:	d009      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104a9a:	687b      	ldr	r3, [r7, #4]
 8104a9c:	681b      	ldr	r3, [r3, #0]
 8104a9e:	4a6a      	ldr	r2, [pc, #424]	@ (8104c48 <HAL_DMA_IRQHandler+0xcac>)
 8104aa0:	4293      	cmp	r3, r2
 8104aa2:	d004      	beq.n	8104aae <HAL_DMA_IRQHandler+0xb12>
 8104aa4:	687b      	ldr	r3, [r7, #4]
 8104aa6:	681b      	ldr	r3, [r3, #0]
 8104aa8:	4a68      	ldr	r2, [pc, #416]	@ (8104c4c <HAL_DMA_IRQHandler+0xcb0>)
 8104aaa:	4293      	cmp	r3, r2
 8104aac:	d108      	bne.n	8104ac0 <HAL_DMA_IRQHandler+0xb24>
 8104aae:	687b      	ldr	r3, [r7, #4]
 8104ab0:	681b      	ldr	r3, [r3, #0]
 8104ab2:	681a      	ldr	r2, [r3, #0]
 8104ab4:	687b      	ldr	r3, [r7, #4]
 8104ab6:	681b      	ldr	r3, [r3, #0]
 8104ab8:	f022 0208 	bic.w	r2, r2, #8
 8104abc:	601a      	str	r2, [r3, #0]
 8104abe:	e007      	b.n	8104ad0 <HAL_DMA_IRQHandler+0xb34>
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	681b      	ldr	r3, [r3, #0]
 8104ac4:	681a      	ldr	r2, [r3, #0]
 8104ac6:	687b      	ldr	r3, [r7, #4]
 8104ac8:	681b      	ldr	r3, [r3, #0]
 8104aca:	f022 0204 	bic.w	r2, r2, #4
 8104ace:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8104ad0:	687b      	ldr	r3, [r7, #4]
 8104ad2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104ad4:	2b00      	cmp	r3, #0
 8104ad6:	f000 8165 	beq.w	8104da4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8104ade:	6878      	ldr	r0, [r7, #4]
 8104ae0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104ae2:	e15f      	b.n	8104da4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8104ae4:	687b      	ldr	r3, [r7, #4]
 8104ae6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104ae8:	f003 031f 	and.w	r3, r3, #31
 8104aec:	2202      	movs	r2, #2
 8104aee:	409a      	lsls	r2, r3
 8104af0:	697b      	ldr	r3, [r7, #20]
 8104af2:	4013      	ands	r3, r2
 8104af4:	2b00      	cmp	r3, #0
 8104af6:	f000 80c5 	beq.w	8104c84 <HAL_DMA_IRQHandler+0xce8>
 8104afa:	693b      	ldr	r3, [r7, #16]
 8104afc:	f003 0302 	and.w	r3, r3, #2
 8104b00:	2b00      	cmp	r3, #0
 8104b02:	f000 80bf 	beq.w	8104c84 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104b0a:	f003 031f 	and.w	r3, r3, #31
 8104b0e:	2202      	movs	r2, #2
 8104b10:	409a      	lsls	r2, r3
 8104b12:	69fb      	ldr	r3, [r7, #28]
 8104b14:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104b16:	693b      	ldr	r3, [r7, #16]
 8104b18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8104b1c:	2b00      	cmp	r3, #0
 8104b1e:	d018      	beq.n	8104b52 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8104b20:	693b      	ldr	r3, [r7, #16]
 8104b22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8104b26:	2b00      	cmp	r3, #0
 8104b28:	d109      	bne.n	8104b3e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8104b2a:	687b      	ldr	r3, [r7, #4]
 8104b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104b2e:	2b00      	cmp	r3, #0
 8104b30:	f000 813a 	beq.w	8104da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8104b34:	687b      	ldr	r3, [r7, #4]
 8104b36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104b38:	6878      	ldr	r0, [r7, #4]
 8104b3a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104b3c:	e134      	b.n	8104da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8104b3e:	687b      	ldr	r3, [r7, #4]
 8104b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104b42:	2b00      	cmp	r3, #0
 8104b44:	f000 8130 	beq.w	8104da8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8104b48:	687b      	ldr	r3, [r7, #4]
 8104b4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104b4c:	6878      	ldr	r0, [r7, #4]
 8104b4e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104b50:	e12a      	b.n	8104da8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8104b52:	693b      	ldr	r3, [r7, #16]
 8104b54:	f003 0320 	and.w	r3, r3, #32
 8104b58:	2b00      	cmp	r3, #0
 8104b5a:	f040 8089 	bne.w	8104c70 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8104b5e:	687b      	ldr	r3, [r7, #4]
 8104b60:	681b      	ldr	r3, [r3, #0]
 8104b62:	4a2b      	ldr	r2, [pc, #172]	@ (8104c10 <HAL_DMA_IRQHandler+0xc74>)
 8104b64:	4293      	cmp	r3, r2
 8104b66:	d04a      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b68:	687b      	ldr	r3, [r7, #4]
 8104b6a:	681b      	ldr	r3, [r3, #0]
 8104b6c:	4a29      	ldr	r2, [pc, #164]	@ (8104c14 <HAL_DMA_IRQHandler+0xc78>)
 8104b6e:	4293      	cmp	r3, r2
 8104b70:	d045      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b72:	687b      	ldr	r3, [r7, #4]
 8104b74:	681b      	ldr	r3, [r3, #0]
 8104b76:	4a28      	ldr	r2, [pc, #160]	@ (8104c18 <HAL_DMA_IRQHandler+0xc7c>)
 8104b78:	4293      	cmp	r3, r2
 8104b7a:	d040      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b7c:	687b      	ldr	r3, [r7, #4]
 8104b7e:	681b      	ldr	r3, [r3, #0]
 8104b80:	4a26      	ldr	r2, [pc, #152]	@ (8104c1c <HAL_DMA_IRQHandler+0xc80>)
 8104b82:	4293      	cmp	r3, r2
 8104b84:	d03b      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b86:	687b      	ldr	r3, [r7, #4]
 8104b88:	681b      	ldr	r3, [r3, #0]
 8104b8a:	4a25      	ldr	r2, [pc, #148]	@ (8104c20 <HAL_DMA_IRQHandler+0xc84>)
 8104b8c:	4293      	cmp	r3, r2
 8104b8e:	d036      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b90:	687b      	ldr	r3, [r7, #4]
 8104b92:	681b      	ldr	r3, [r3, #0]
 8104b94:	4a23      	ldr	r2, [pc, #140]	@ (8104c24 <HAL_DMA_IRQHandler+0xc88>)
 8104b96:	4293      	cmp	r3, r2
 8104b98:	d031      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104b9a:	687b      	ldr	r3, [r7, #4]
 8104b9c:	681b      	ldr	r3, [r3, #0]
 8104b9e:	4a22      	ldr	r2, [pc, #136]	@ (8104c28 <HAL_DMA_IRQHandler+0xc8c>)
 8104ba0:	4293      	cmp	r3, r2
 8104ba2:	d02c      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104ba4:	687b      	ldr	r3, [r7, #4]
 8104ba6:	681b      	ldr	r3, [r3, #0]
 8104ba8:	4a20      	ldr	r2, [pc, #128]	@ (8104c2c <HAL_DMA_IRQHandler+0xc90>)
 8104baa:	4293      	cmp	r3, r2
 8104bac:	d027      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bae:	687b      	ldr	r3, [r7, #4]
 8104bb0:	681b      	ldr	r3, [r3, #0]
 8104bb2:	4a1f      	ldr	r2, [pc, #124]	@ (8104c30 <HAL_DMA_IRQHandler+0xc94>)
 8104bb4:	4293      	cmp	r3, r2
 8104bb6:	d022      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bb8:	687b      	ldr	r3, [r7, #4]
 8104bba:	681b      	ldr	r3, [r3, #0]
 8104bbc:	4a1d      	ldr	r2, [pc, #116]	@ (8104c34 <HAL_DMA_IRQHandler+0xc98>)
 8104bbe:	4293      	cmp	r3, r2
 8104bc0:	d01d      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bc2:	687b      	ldr	r3, [r7, #4]
 8104bc4:	681b      	ldr	r3, [r3, #0]
 8104bc6:	4a1c      	ldr	r2, [pc, #112]	@ (8104c38 <HAL_DMA_IRQHandler+0xc9c>)
 8104bc8:	4293      	cmp	r3, r2
 8104bca:	d018      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bcc:	687b      	ldr	r3, [r7, #4]
 8104bce:	681b      	ldr	r3, [r3, #0]
 8104bd0:	4a1a      	ldr	r2, [pc, #104]	@ (8104c3c <HAL_DMA_IRQHandler+0xca0>)
 8104bd2:	4293      	cmp	r3, r2
 8104bd4:	d013      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bd6:	687b      	ldr	r3, [r7, #4]
 8104bd8:	681b      	ldr	r3, [r3, #0]
 8104bda:	4a19      	ldr	r2, [pc, #100]	@ (8104c40 <HAL_DMA_IRQHandler+0xca4>)
 8104bdc:	4293      	cmp	r3, r2
 8104bde:	d00e      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104be0:	687b      	ldr	r3, [r7, #4]
 8104be2:	681b      	ldr	r3, [r3, #0]
 8104be4:	4a17      	ldr	r2, [pc, #92]	@ (8104c44 <HAL_DMA_IRQHandler+0xca8>)
 8104be6:	4293      	cmp	r3, r2
 8104be8:	d009      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bea:	687b      	ldr	r3, [r7, #4]
 8104bec:	681b      	ldr	r3, [r3, #0]
 8104bee:	4a16      	ldr	r2, [pc, #88]	@ (8104c48 <HAL_DMA_IRQHandler+0xcac>)
 8104bf0:	4293      	cmp	r3, r2
 8104bf2:	d004      	beq.n	8104bfe <HAL_DMA_IRQHandler+0xc62>
 8104bf4:	687b      	ldr	r3, [r7, #4]
 8104bf6:	681b      	ldr	r3, [r3, #0]
 8104bf8:	4a14      	ldr	r2, [pc, #80]	@ (8104c4c <HAL_DMA_IRQHandler+0xcb0>)
 8104bfa:	4293      	cmp	r3, r2
 8104bfc:	d128      	bne.n	8104c50 <HAL_DMA_IRQHandler+0xcb4>
 8104bfe:	687b      	ldr	r3, [r7, #4]
 8104c00:	681b      	ldr	r3, [r3, #0]
 8104c02:	681a      	ldr	r2, [r3, #0]
 8104c04:	687b      	ldr	r3, [r7, #4]
 8104c06:	681b      	ldr	r3, [r3, #0]
 8104c08:	f022 0214 	bic.w	r2, r2, #20
 8104c0c:	601a      	str	r2, [r3, #0]
 8104c0e:	e027      	b.n	8104c60 <HAL_DMA_IRQHandler+0xcc4>
 8104c10:	40020010 	.word	0x40020010
 8104c14:	40020028 	.word	0x40020028
 8104c18:	40020040 	.word	0x40020040
 8104c1c:	40020058 	.word	0x40020058
 8104c20:	40020070 	.word	0x40020070
 8104c24:	40020088 	.word	0x40020088
 8104c28:	400200a0 	.word	0x400200a0
 8104c2c:	400200b8 	.word	0x400200b8
 8104c30:	40020410 	.word	0x40020410
 8104c34:	40020428 	.word	0x40020428
 8104c38:	40020440 	.word	0x40020440
 8104c3c:	40020458 	.word	0x40020458
 8104c40:	40020470 	.word	0x40020470
 8104c44:	40020488 	.word	0x40020488
 8104c48:	400204a0 	.word	0x400204a0
 8104c4c:	400204b8 	.word	0x400204b8
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	681a      	ldr	r2, [r3, #0]
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	f022 020a 	bic.w	r2, r2, #10
 8104c5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	2201      	movs	r2, #1
 8104c64:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8104c68:	687b      	ldr	r3, [r7, #4]
 8104c6a:	2200      	movs	r2, #0
 8104c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8104c70:	687b      	ldr	r3, [r7, #4]
 8104c72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104c74:	2b00      	cmp	r3, #0
 8104c76:	f000 8097 	beq.w	8104da8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8104c7a:	687b      	ldr	r3, [r7, #4]
 8104c7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104c7e:	6878      	ldr	r0, [r7, #4]
 8104c80:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104c82:	e091      	b.n	8104da8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8104c84:	687b      	ldr	r3, [r7, #4]
 8104c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104c88:	f003 031f 	and.w	r3, r3, #31
 8104c8c:	2208      	movs	r2, #8
 8104c8e:	409a      	lsls	r2, r3
 8104c90:	697b      	ldr	r3, [r7, #20]
 8104c92:	4013      	ands	r3, r2
 8104c94:	2b00      	cmp	r3, #0
 8104c96:	f000 8088 	beq.w	8104daa <HAL_DMA_IRQHandler+0xe0e>
 8104c9a:	693b      	ldr	r3, [r7, #16]
 8104c9c:	f003 0308 	and.w	r3, r3, #8
 8104ca0:	2b00      	cmp	r3, #0
 8104ca2:	f000 8082 	beq.w	8104daa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8104ca6:	687b      	ldr	r3, [r7, #4]
 8104ca8:	681b      	ldr	r3, [r3, #0]
 8104caa:	4a41      	ldr	r2, [pc, #260]	@ (8104db0 <HAL_DMA_IRQHandler+0xe14>)
 8104cac:	4293      	cmp	r3, r2
 8104cae:	d04a      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cb0:	687b      	ldr	r3, [r7, #4]
 8104cb2:	681b      	ldr	r3, [r3, #0]
 8104cb4:	4a3f      	ldr	r2, [pc, #252]	@ (8104db4 <HAL_DMA_IRQHandler+0xe18>)
 8104cb6:	4293      	cmp	r3, r2
 8104cb8:	d045      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cba:	687b      	ldr	r3, [r7, #4]
 8104cbc:	681b      	ldr	r3, [r3, #0]
 8104cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8104db8 <HAL_DMA_IRQHandler+0xe1c>)
 8104cc0:	4293      	cmp	r3, r2
 8104cc2:	d040      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cc4:	687b      	ldr	r3, [r7, #4]
 8104cc6:	681b      	ldr	r3, [r3, #0]
 8104cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8104dbc <HAL_DMA_IRQHandler+0xe20>)
 8104cca:	4293      	cmp	r3, r2
 8104ccc:	d03b      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cce:	687b      	ldr	r3, [r7, #4]
 8104cd0:	681b      	ldr	r3, [r3, #0]
 8104cd2:	4a3b      	ldr	r2, [pc, #236]	@ (8104dc0 <HAL_DMA_IRQHandler+0xe24>)
 8104cd4:	4293      	cmp	r3, r2
 8104cd6:	d036      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	4a39      	ldr	r2, [pc, #228]	@ (8104dc4 <HAL_DMA_IRQHandler+0xe28>)
 8104cde:	4293      	cmp	r3, r2
 8104ce0:	d031      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104ce2:	687b      	ldr	r3, [r7, #4]
 8104ce4:	681b      	ldr	r3, [r3, #0]
 8104ce6:	4a38      	ldr	r2, [pc, #224]	@ (8104dc8 <HAL_DMA_IRQHandler+0xe2c>)
 8104ce8:	4293      	cmp	r3, r2
 8104cea:	d02c      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cec:	687b      	ldr	r3, [r7, #4]
 8104cee:	681b      	ldr	r3, [r3, #0]
 8104cf0:	4a36      	ldr	r2, [pc, #216]	@ (8104dcc <HAL_DMA_IRQHandler+0xe30>)
 8104cf2:	4293      	cmp	r3, r2
 8104cf4:	d027      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104cf6:	687b      	ldr	r3, [r7, #4]
 8104cf8:	681b      	ldr	r3, [r3, #0]
 8104cfa:	4a35      	ldr	r2, [pc, #212]	@ (8104dd0 <HAL_DMA_IRQHandler+0xe34>)
 8104cfc:	4293      	cmp	r3, r2
 8104cfe:	d022      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d00:	687b      	ldr	r3, [r7, #4]
 8104d02:	681b      	ldr	r3, [r3, #0]
 8104d04:	4a33      	ldr	r2, [pc, #204]	@ (8104dd4 <HAL_DMA_IRQHandler+0xe38>)
 8104d06:	4293      	cmp	r3, r2
 8104d08:	d01d      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d0a:	687b      	ldr	r3, [r7, #4]
 8104d0c:	681b      	ldr	r3, [r3, #0]
 8104d0e:	4a32      	ldr	r2, [pc, #200]	@ (8104dd8 <HAL_DMA_IRQHandler+0xe3c>)
 8104d10:	4293      	cmp	r3, r2
 8104d12:	d018      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d14:	687b      	ldr	r3, [r7, #4]
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	4a30      	ldr	r2, [pc, #192]	@ (8104ddc <HAL_DMA_IRQHandler+0xe40>)
 8104d1a:	4293      	cmp	r3, r2
 8104d1c:	d013      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d1e:	687b      	ldr	r3, [r7, #4]
 8104d20:	681b      	ldr	r3, [r3, #0]
 8104d22:	4a2f      	ldr	r2, [pc, #188]	@ (8104de0 <HAL_DMA_IRQHandler+0xe44>)
 8104d24:	4293      	cmp	r3, r2
 8104d26:	d00e      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d28:	687b      	ldr	r3, [r7, #4]
 8104d2a:	681b      	ldr	r3, [r3, #0]
 8104d2c:	4a2d      	ldr	r2, [pc, #180]	@ (8104de4 <HAL_DMA_IRQHandler+0xe48>)
 8104d2e:	4293      	cmp	r3, r2
 8104d30:	d009      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d32:	687b      	ldr	r3, [r7, #4]
 8104d34:	681b      	ldr	r3, [r3, #0]
 8104d36:	4a2c      	ldr	r2, [pc, #176]	@ (8104de8 <HAL_DMA_IRQHandler+0xe4c>)
 8104d38:	4293      	cmp	r3, r2
 8104d3a:	d004      	beq.n	8104d46 <HAL_DMA_IRQHandler+0xdaa>
 8104d3c:	687b      	ldr	r3, [r7, #4]
 8104d3e:	681b      	ldr	r3, [r3, #0]
 8104d40:	4a2a      	ldr	r2, [pc, #168]	@ (8104dec <HAL_DMA_IRQHandler+0xe50>)
 8104d42:	4293      	cmp	r3, r2
 8104d44:	d108      	bne.n	8104d58 <HAL_DMA_IRQHandler+0xdbc>
 8104d46:	687b      	ldr	r3, [r7, #4]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	681a      	ldr	r2, [r3, #0]
 8104d4c:	687b      	ldr	r3, [r7, #4]
 8104d4e:	681b      	ldr	r3, [r3, #0]
 8104d50:	f022 021c 	bic.w	r2, r2, #28
 8104d54:	601a      	str	r2, [r3, #0]
 8104d56:	e007      	b.n	8104d68 <HAL_DMA_IRQHandler+0xdcc>
 8104d58:	687b      	ldr	r3, [r7, #4]
 8104d5a:	681b      	ldr	r3, [r3, #0]
 8104d5c:	681a      	ldr	r2, [r3, #0]
 8104d5e:	687b      	ldr	r3, [r7, #4]
 8104d60:	681b      	ldr	r3, [r3, #0]
 8104d62:	f022 020e 	bic.w	r2, r2, #14
 8104d66:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8104d68:	687b      	ldr	r3, [r7, #4]
 8104d6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104d6c:	f003 031f 	and.w	r3, r3, #31
 8104d70:	2201      	movs	r2, #1
 8104d72:	409a      	lsls	r2, r3
 8104d74:	69fb      	ldr	r3, [r7, #28]
 8104d76:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8104d78:	687b      	ldr	r3, [r7, #4]
 8104d7a:	2201      	movs	r2, #1
 8104d7c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8104d7e:	687b      	ldr	r3, [r7, #4]
 8104d80:	2201      	movs	r2, #1
 8104d82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8104d86:	687b      	ldr	r3, [r7, #4]
 8104d88:	2200      	movs	r2, #0
 8104d8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8104d8e:	687b      	ldr	r3, [r7, #4]
 8104d90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d92:	2b00      	cmp	r3, #0
 8104d94:	d009      	beq.n	8104daa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8104d96:	687b      	ldr	r3, [r7, #4]
 8104d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104d9a:	6878      	ldr	r0, [r7, #4]
 8104d9c:	4798      	blx	r3
 8104d9e:	e004      	b.n	8104daa <HAL_DMA_IRQHandler+0xe0e>
          return;
 8104da0:	bf00      	nop
 8104da2:	e002      	b.n	8104daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104da4:	bf00      	nop
 8104da6:	e000      	b.n	8104daa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8104da8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8104daa:	3728      	adds	r7, #40	@ 0x28
 8104dac:	46bd      	mov	sp, r7
 8104dae:	bd80      	pop	{r7, pc}
 8104db0:	40020010 	.word	0x40020010
 8104db4:	40020028 	.word	0x40020028
 8104db8:	40020040 	.word	0x40020040
 8104dbc:	40020058 	.word	0x40020058
 8104dc0:	40020070 	.word	0x40020070
 8104dc4:	40020088 	.word	0x40020088
 8104dc8:	400200a0 	.word	0x400200a0
 8104dcc:	400200b8 	.word	0x400200b8
 8104dd0:	40020410 	.word	0x40020410
 8104dd4:	40020428 	.word	0x40020428
 8104dd8:	40020440 	.word	0x40020440
 8104ddc:	40020458 	.word	0x40020458
 8104de0:	40020470 	.word	0x40020470
 8104de4:	40020488 	.word	0x40020488
 8104de8:	400204a0 	.word	0x400204a0
 8104dec:	400204b8 	.word	0x400204b8

08104df0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8104df0:	b480      	push	{r7}
 8104df2:	b083      	sub	sp, #12
 8104df4:	af00      	add	r7, sp, #0
 8104df6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8104df8:	687b      	ldr	r3, [r7, #4]
 8104dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8104dfc:	4618      	mov	r0, r3
 8104dfe:	370c      	adds	r7, #12
 8104e00:	46bd      	mov	sp, r7
 8104e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104e06:	4770      	bx	lr

08104e08 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8104e08:	b480      	push	{r7}
 8104e0a:	b087      	sub	sp, #28
 8104e0c:	af00      	add	r7, sp, #0
 8104e0e:	60f8      	str	r0, [r7, #12]
 8104e10:	60b9      	str	r1, [r7, #8]
 8104e12:	607a      	str	r2, [r7, #4]
 8104e14:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8104e16:	68fb      	ldr	r3, [r7, #12]
 8104e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104e1a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8104e1c:	68fb      	ldr	r3, [r7, #12]
 8104e1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104e20:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8104e22:	68fb      	ldr	r3, [r7, #12]
 8104e24:	681b      	ldr	r3, [r3, #0]
 8104e26:	4a7f      	ldr	r2, [pc, #508]	@ (8105024 <DMA_SetConfig+0x21c>)
 8104e28:	4293      	cmp	r3, r2
 8104e2a:	d072      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e2c:	68fb      	ldr	r3, [r7, #12]
 8104e2e:	681b      	ldr	r3, [r3, #0]
 8104e30:	4a7d      	ldr	r2, [pc, #500]	@ (8105028 <DMA_SetConfig+0x220>)
 8104e32:	4293      	cmp	r3, r2
 8104e34:	d06d      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e36:	68fb      	ldr	r3, [r7, #12]
 8104e38:	681b      	ldr	r3, [r3, #0]
 8104e3a:	4a7c      	ldr	r2, [pc, #496]	@ (810502c <DMA_SetConfig+0x224>)
 8104e3c:	4293      	cmp	r3, r2
 8104e3e:	d068      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e40:	68fb      	ldr	r3, [r7, #12]
 8104e42:	681b      	ldr	r3, [r3, #0]
 8104e44:	4a7a      	ldr	r2, [pc, #488]	@ (8105030 <DMA_SetConfig+0x228>)
 8104e46:	4293      	cmp	r3, r2
 8104e48:	d063      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e4a:	68fb      	ldr	r3, [r7, #12]
 8104e4c:	681b      	ldr	r3, [r3, #0]
 8104e4e:	4a79      	ldr	r2, [pc, #484]	@ (8105034 <DMA_SetConfig+0x22c>)
 8104e50:	4293      	cmp	r3, r2
 8104e52:	d05e      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e54:	68fb      	ldr	r3, [r7, #12]
 8104e56:	681b      	ldr	r3, [r3, #0]
 8104e58:	4a77      	ldr	r2, [pc, #476]	@ (8105038 <DMA_SetConfig+0x230>)
 8104e5a:	4293      	cmp	r3, r2
 8104e5c:	d059      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e5e:	68fb      	ldr	r3, [r7, #12]
 8104e60:	681b      	ldr	r3, [r3, #0]
 8104e62:	4a76      	ldr	r2, [pc, #472]	@ (810503c <DMA_SetConfig+0x234>)
 8104e64:	4293      	cmp	r3, r2
 8104e66:	d054      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e68:	68fb      	ldr	r3, [r7, #12]
 8104e6a:	681b      	ldr	r3, [r3, #0]
 8104e6c:	4a74      	ldr	r2, [pc, #464]	@ (8105040 <DMA_SetConfig+0x238>)
 8104e6e:	4293      	cmp	r3, r2
 8104e70:	d04f      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e72:	68fb      	ldr	r3, [r7, #12]
 8104e74:	681b      	ldr	r3, [r3, #0]
 8104e76:	4a73      	ldr	r2, [pc, #460]	@ (8105044 <DMA_SetConfig+0x23c>)
 8104e78:	4293      	cmp	r3, r2
 8104e7a:	d04a      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e7c:	68fb      	ldr	r3, [r7, #12]
 8104e7e:	681b      	ldr	r3, [r3, #0]
 8104e80:	4a71      	ldr	r2, [pc, #452]	@ (8105048 <DMA_SetConfig+0x240>)
 8104e82:	4293      	cmp	r3, r2
 8104e84:	d045      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e86:	68fb      	ldr	r3, [r7, #12]
 8104e88:	681b      	ldr	r3, [r3, #0]
 8104e8a:	4a70      	ldr	r2, [pc, #448]	@ (810504c <DMA_SetConfig+0x244>)
 8104e8c:	4293      	cmp	r3, r2
 8104e8e:	d040      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e90:	68fb      	ldr	r3, [r7, #12]
 8104e92:	681b      	ldr	r3, [r3, #0]
 8104e94:	4a6e      	ldr	r2, [pc, #440]	@ (8105050 <DMA_SetConfig+0x248>)
 8104e96:	4293      	cmp	r3, r2
 8104e98:	d03b      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104e9a:	68fb      	ldr	r3, [r7, #12]
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	4a6d      	ldr	r2, [pc, #436]	@ (8105054 <DMA_SetConfig+0x24c>)
 8104ea0:	4293      	cmp	r3, r2
 8104ea2:	d036      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ea4:	68fb      	ldr	r3, [r7, #12]
 8104ea6:	681b      	ldr	r3, [r3, #0]
 8104ea8:	4a6b      	ldr	r2, [pc, #428]	@ (8105058 <DMA_SetConfig+0x250>)
 8104eaa:	4293      	cmp	r3, r2
 8104eac:	d031      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104eae:	68fb      	ldr	r3, [r7, #12]
 8104eb0:	681b      	ldr	r3, [r3, #0]
 8104eb2:	4a6a      	ldr	r2, [pc, #424]	@ (810505c <DMA_SetConfig+0x254>)
 8104eb4:	4293      	cmp	r3, r2
 8104eb6:	d02c      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104eb8:	68fb      	ldr	r3, [r7, #12]
 8104eba:	681b      	ldr	r3, [r3, #0]
 8104ebc:	4a68      	ldr	r2, [pc, #416]	@ (8105060 <DMA_SetConfig+0x258>)
 8104ebe:	4293      	cmp	r3, r2
 8104ec0:	d027      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ec2:	68fb      	ldr	r3, [r7, #12]
 8104ec4:	681b      	ldr	r3, [r3, #0]
 8104ec6:	4a67      	ldr	r2, [pc, #412]	@ (8105064 <DMA_SetConfig+0x25c>)
 8104ec8:	4293      	cmp	r3, r2
 8104eca:	d022      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ecc:	68fb      	ldr	r3, [r7, #12]
 8104ece:	681b      	ldr	r3, [r3, #0]
 8104ed0:	4a65      	ldr	r2, [pc, #404]	@ (8105068 <DMA_SetConfig+0x260>)
 8104ed2:	4293      	cmp	r3, r2
 8104ed4:	d01d      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ed6:	68fb      	ldr	r3, [r7, #12]
 8104ed8:	681b      	ldr	r3, [r3, #0]
 8104eda:	4a64      	ldr	r2, [pc, #400]	@ (810506c <DMA_SetConfig+0x264>)
 8104edc:	4293      	cmp	r3, r2
 8104ede:	d018      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ee0:	68fb      	ldr	r3, [r7, #12]
 8104ee2:	681b      	ldr	r3, [r3, #0]
 8104ee4:	4a62      	ldr	r2, [pc, #392]	@ (8105070 <DMA_SetConfig+0x268>)
 8104ee6:	4293      	cmp	r3, r2
 8104ee8:	d013      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104eea:	68fb      	ldr	r3, [r7, #12]
 8104eec:	681b      	ldr	r3, [r3, #0]
 8104eee:	4a61      	ldr	r2, [pc, #388]	@ (8105074 <DMA_SetConfig+0x26c>)
 8104ef0:	4293      	cmp	r3, r2
 8104ef2:	d00e      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	681b      	ldr	r3, [r3, #0]
 8104ef8:	4a5f      	ldr	r2, [pc, #380]	@ (8105078 <DMA_SetConfig+0x270>)
 8104efa:	4293      	cmp	r3, r2
 8104efc:	d009      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104efe:	68fb      	ldr	r3, [r7, #12]
 8104f00:	681b      	ldr	r3, [r3, #0]
 8104f02:	4a5e      	ldr	r2, [pc, #376]	@ (810507c <DMA_SetConfig+0x274>)
 8104f04:	4293      	cmp	r3, r2
 8104f06:	d004      	beq.n	8104f12 <DMA_SetConfig+0x10a>
 8104f08:	68fb      	ldr	r3, [r7, #12]
 8104f0a:	681b      	ldr	r3, [r3, #0]
 8104f0c:	4a5c      	ldr	r2, [pc, #368]	@ (8105080 <DMA_SetConfig+0x278>)
 8104f0e:	4293      	cmp	r3, r2
 8104f10:	d101      	bne.n	8104f16 <DMA_SetConfig+0x10e>
 8104f12:	2301      	movs	r3, #1
 8104f14:	e000      	b.n	8104f18 <DMA_SetConfig+0x110>
 8104f16:	2300      	movs	r3, #0
 8104f18:	2b00      	cmp	r3, #0
 8104f1a:	d00d      	beq.n	8104f38 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8104f1c:	68fb      	ldr	r3, [r7, #12]
 8104f1e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8104f20:	68fa      	ldr	r2, [r7, #12]
 8104f22:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8104f24:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8104f26:	68fb      	ldr	r3, [r7, #12]
 8104f28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8104f2a:	2b00      	cmp	r3, #0
 8104f2c:	d004      	beq.n	8104f38 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8104f2e:	68fb      	ldr	r3, [r7, #12]
 8104f30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104f32:	68fa      	ldr	r2, [r7, #12]
 8104f34:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8104f36:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8104f38:	68fb      	ldr	r3, [r7, #12]
 8104f3a:	681b      	ldr	r3, [r3, #0]
 8104f3c:	4a39      	ldr	r2, [pc, #228]	@ (8105024 <DMA_SetConfig+0x21c>)
 8104f3e:	4293      	cmp	r3, r2
 8104f40:	d04a      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f42:	68fb      	ldr	r3, [r7, #12]
 8104f44:	681b      	ldr	r3, [r3, #0]
 8104f46:	4a38      	ldr	r2, [pc, #224]	@ (8105028 <DMA_SetConfig+0x220>)
 8104f48:	4293      	cmp	r3, r2
 8104f4a:	d045      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f4c:	68fb      	ldr	r3, [r7, #12]
 8104f4e:	681b      	ldr	r3, [r3, #0]
 8104f50:	4a36      	ldr	r2, [pc, #216]	@ (810502c <DMA_SetConfig+0x224>)
 8104f52:	4293      	cmp	r3, r2
 8104f54:	d040      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f56:	68fb      	ldr	r3, [r7, #12]
 8104f58:	681b      	ldr	r3, [r3, #0]
 8104f5a:	4a35      	ldr	r2, [pc, #212]	@ (8105030 <DMA_SetConfig+0x228>)
 8104f5c:	4293      	cmp	r3, r2
 8104f5e:	d03b      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f60:	68fb      	ldr	r3, [r7, #12]
 8104f62:	681b      	ldr	r3, [r3, #0]
 8104f64:	4a33      	ldr	r2, [pc, #204]	@ (8105034 <DMA_SetConfig+0x22c>)
 8104f66:	4293      	cmp	r3, r2
 8104f68:	d036      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f6a:	68fb      	ldr	r3, [r7, #12]
 8104f6c:	681b      	ldr	r3, [r3, #0]
 8104f6e:	4a32      	ldr	r2, [pc, #200]	@ (8105038 <DMA_SetConfig+0x230>)
 8104f70:	4293      	cmp	r3, r2
 8104f72:	d031      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f74:	68fb      	ldr	r3, [r7, #12]
 8104f76:	681b      	ldr	r3, [r3, #0]
 8104f78:	4a30      	ldr	r2, [pc, #192]	@ (810503c <DMA_SetConfig+0x234>)
 8104f7a:	4293      	cmp	r3, r2
 8104f7c:	d02c      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f7e:	68fb      	ldr	r3, [r7, #12]
 8104f80:	681b      	ldr	r3, [r3, #0]
 8104f82:	4a2f      	ldr	r2, [pc, #188]	@ (8105040 <DMA_SetConfig+0x238>)
 8104f84:	4293      	cmp	r3, r2
 8104f86:	d027      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	4a2d      	ldr	r2, [pc, #180]	@ (8105044 <DMA_SetConfig+0x23c>)
 8104f8e:	4293      	cmp	r3, r2
 8104f90:	d022      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f92:	68fb      	ldr	r3, [r7, #12]
 8104f94:	681b      	ldr	r3, [r3, #0]
 8104f96:	4a2c      	ldr	r2, [pc, #176]	@ (8105048 <DMA_SetConfig+0x240>)
 8104f98:	4293      	cmp	r3, r2
 8104f9a:	d01d      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104f9c:	68fb      	ldr	r3, [r7, #12]
 8104f9e:	681b      	ldr	r3, [r3, #0]
 8104fa0:	4a2a      	ldr	r2, [pc, #168]	@ (810504c <DMA_SetConfig+0x244>)
 8104fa2:	4293      	cmp	r3, r2
 8104fa4:	d018      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104fa6:	68fb      	ldr	r3, [r7, #12]
 8104fa8:	681b      	ldr	r3, [r3, #0]
 8104faa:	4a29      	ldr	r2, [pc, #164]	@ (8105050 <DMA_SetConfig+0x248>)
 8104fac:	4293      	cmp	r3, r2
 8104fae:	d013      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104fb0:	68fb      	ldr	r3, [r7, #12]
 8104fb2:	681b      	ldr	r3, [r3, #0]
 8104fb4:	4a27      	ldr	r2, [pc, #156]	@ (8105054 <DMA_SetConfig+0x24c>)
 8104fb6:	4293      	cmp	r3, r2
 8104fb8:	d00e      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104fba:	68fb      	ldr	r3, [r7, #12]
 8104fbc:	681b      	ldr	r3, [r3, #0]
 8104fbe:	4a26      	ldr	r2, [pc, #152]	@ (8105058 <DMA_SetConfig+0x250>)
 8104fc0:	4293      	cmp	r3, r2
 8104fc2:	d009      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104fc4:	68fb      	ldr	r3, [r7, #12]
 8104fc6:	681b      	ldr	r3, [r3, #0]
 8104fc8:	4a24      	ldr	r2, [pc, #144]	@ (810505c <DMA_SetConfig+0x254>)
 8104fca:	4293      	cmp	r3, r2
 8104fcc:	d004      	beq.n	8104fd8 <DMA_SetConfig+0x1d0>
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	681b      	ldr	r3, [r3, #0]
 8104fd2:	4a23      	ldr	r2, [pc, #140]	@ (8105060 <DMA_SetConfig+0x258>)
 8104fd4:	4293      	cmp	r3, r2
 8104fd6:	d101      	bne.n	8104fdc <DMA_SetConfig+0x1d4>
 8104fd8:	2301      	movs	r3, #1
 8104fda:	e000      	b.n	8104fde <DMA_SetConfig+0x1d6>
 8104fdc:	2300      	movs	r3, #0
 8104fde:	2b00      	cmp	r3, #0
 8104fe0:	d059      	beq.n	8105096 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8104fe6:	f003 031f 	and.w	r3, r3, #31
 8104fea:	223f      	movs	r2, #63	@ 0x3f
 8104fec:	409a      	lsls	r2, r3
 8104fee:	697b      	ldr	r3, [r7, #20]
 8104ff0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8104ff2:	68fb      	ldr	r3, [r7, #12]
 8104ff4:	681b      	ldr	r3, [r3, #0]
 8104ff6:	681a      	ldr	r2, [r3, #0]
 8104ff8:	68fb      	ldr	r3, [r7, #12]
 8104ffa:	681b      	ldr	r3, [r3, #0]
 8104ffc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8105000:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8105002:	68fb      	ldr	r3, [r7, #12]
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	683a      	ldr	r2, [r7, #0]
 8105008:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 810500a:	68fb      	ldr	r3, [r7, #12]
 810500c:	689b      	ldr	r3, [r3, #8]
 810500e:	2b40      	cmp	r3, #64	@ 0x40
 8105010:	d138      	bne.n	8105084 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8105012:	68fb      	ldr	r3, [r7, #12]
 8105014:	681b      	ldr	r3, [r3, #0]
 8105016:	687a      	ldr	r2, [r7, #4]
 8105018:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 810501a:	68fb      	ldr	r3, [r7, #12]
 810501c:	681b      	ldr	r3, [r3, #0]
 810501e:	68ba      	ldr	r2, [r7, #8]
 8105020:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8105022:	e086      	b.n	8105132 <DMA_SetConfig+0x32a>
 8105024:	40020010 	.word	0x40020010
 8105028:	40020028 	.word	0x40020028
 810502c:	40020040 	.word	0x40020040
 8105030:	40020058 	.word	0x40020058
 8105034:	40020070 	.word	0x40020070
 8105038:	40020088 	.word	0x40020088
 810503c:	400200a0 	.word	0x400200a0
 8105040:	400200b8 	.word	0x400200b8
 8105044:	40020410 	.word	0x40020410
 8105048:	40020428 	.word	0x40020428
 810504c:	40020440 	.word	0x40020440
 8105050:	40020458 	.word	0x40020458
 8105054:	40020470 	.word	0x40020470
 8105058:	40020488 	.word	0x40020488
 810505c:	400204a0 	.word	0x400204a0
 8105060:	400204b8 	.word	0x400204b8
 8105064:	58025408 	.word	0x58025408
 8105068:	5802541c 	.word	0x5802541c
 810506c:	58025430 	.word	0x58025430
 8105070:	58025444 	.word	0x58025444
 8105074:	58025458 	.word	0x58025458
 8105078:	5802546c 	.word	0x5802546c
 810507c:	58025480 	.word	0x58025480
 8105080:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8105084:	68fb      	ldr	r3, [r7, #12]
 8105086:	681b      	ldr	r3, [r3, #0]
 8105088:	68ba      	ldr	r2, [r7, #8]
 810508a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 810508c:	68fb      	ldr	r3, [r7, #12]
 810508e:	681b      	ldr	r3, [r3, #0]
 8105090:	687a      	ldr	r2, [r7, #4]
 8105092:	60da      	str	r2, [r3, #12]
}
 8105094:	e04d      	b.n	8105132 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8105096:	68fb      	ldr	r3, [r7, #12]
 8105098:	681b      	ldr	r3, [r3, #0]
 810509a:	4a29      	ldr	r2, [pc, #164]	@ (8105140 <DMA_SetConfig+0x338>)
 810509c:	4293      	cmp	r3, r2
 810509e:	d022      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050a0:	68fb      	ldr	r3, [r7, #12]
 81050a2:	681b      	ldr	r3, [r3, #0]
 81050a4:	4a27      	ldr	r2, [pc, #156]	@ (8105144 <DMA_SetConfig+0x33c>)
 81050a6:	4293      	cmp	r3, r2
 81050a8:	d01d      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050aa:	68fb      	ldr	r3, [r7, #12]
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	4a26      	ldr	r2, [pc, #152]	@ (8105148 <DMA_SetConfig+0x340>)
 81050b0:	4293      	cmp	r3, r2
 81050b2:	d018      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050b4:	68fb      	ldr	r3, [r7, #12]
 81050b6:	681b      	ldr	r3, [r3, #0]
 81050b8:	4a24      	ldr	r2, [pc, #144]	@ (810514c <DMA_SetConfig+0x344>)
 81050ba:	4293      	cmp	r3, r2
 81050bc:	d013      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050be:	68fb      	ldr	r3, [r7, #12]
 81050c0:	681b      	ldr	r3, [r3, #0]
 81050c2:	4a23      	ldr	r2, [pc, #140]	@ (8105150 <DMA_SetConfig+0x348>)
 81050c4:	4293      	cmp	r3, r2
 81050c6:	d00e      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050c8:	68fb      	ldr	r3, [r7, #12]
 81050ca:	681b      	ldr	r3, [r3, #0]
 81050cc:	4a21      	ldr	r2, [pc, #132]	@ (8105154 <DMA_SetConfig+0x34c>)
 81050ce:	4293      	cmp	r3, r2
 81050d0:	d009      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050d2:	68fb      	ldr	r3, [r7, #12]
 81050d4:	681b      	ldr	r3, [r3, #0]
 81050d6:	4a20      	ldr	r2, [pc, #128]	@ (8105158 <DMA_SetConfig+0x350>)
 81050d8:	4293      	cmp	r3, r2
 81050da:	d004      	beq.n	81050e6 <DMA_SetConfig+0x2de>
 81050dc:	68fb      	ldr	r3, [r7, #12]
 81050de:	681b      	ldr	r3, [r3, #0]
 81050e0:	4a1e      	ldr	r2, [pc, #120]	@ (810515c <DMA_SetConfig+0x354>)
 81050e2:	4293      	cmp	r3, r2
 81050e4:	d101      	bne.n	81050ea <DMA_SetConfig+0x2e2>
 81050e6:	2301      	movs	r3, #1
 81050e8:	e000      	b.n	81050ec <DMA_SetConfig+0x2e4>
 81050ea:	2300      	movs	r3, #0
 81050ec:	2b00      	cmp	r3, #0
 81050ee:	d020      	beq.n	8105132 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 81050f0:	68fb      	ldr	r3, [r7, #12]
 81050f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81050f4:	f003 031f 	and.w	r3, r3, #31
 81050f8:	2201      	movs	r2, #1
 81050fa:	409a      	lsls	r2, r3
 81050fc:	693b      	ldr	r3, [r7, #16]
 81050fe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8105100:	68fb      	ldr	r3, [r7, #12]
 8105102:	681b      	ldr	r3, [r3, #0]
 8105104:	683a      	ldr	r2, [r7, #0]
 8105106:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	689b      	ldr	r3, [r3, #8]
 810510c:	2b40      	cmp	r3, #64	@ 0x40
 810510e:	d108      	bne.n	8105122 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8105110:	68fb      	ldr	r3, [r7, #12]
 8105112:	681b      	ldr	r3, [r3, #0]
 8105114:	687a      	ldr	r2, [r7, #4]
 8105116:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8105118:	68fb      	ldr	r3, [r7, #12]
 810511a:	681b      	ldr	r3, [r3, #0]
 810511c:	68ba      	ldr	r2, [r7, #8]
 810511e:	60da      	str	r2, [r3, #12]
}
 8105120:	e007      	b.n	8105132 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8105122:	68fb      	ldr	r3, [r7, #12]
 8105124:	681b      	ldr	r3, [r3, #0]
 8105126:	68ba      	ldr	r2, [r7, #8]
 8105128:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 810512a:	68fb      	ldr	r3, [r7, #12]
 810512c:	681b      	ldr	r3, [r3, #0]
 810512e:	687a      	ldr	r2, [r7, #4]
 8105130:	60da      	str	r2, [r3, #12]
}
 8105132:	bf00      	nop
 8105134:	371c      	adds	r7, #28
 8105136:	46bd      	mov	sp, r7
 8105138:	f85d 7b04 	ldr.w	r7, [sp], #4
 810513c:	4770      	bx	lr
 810513e:	bf00      	nop
 8105140:	58025408 	.word	0x58025408
 8105144:	5802541c 	.word	0x5802541c
 8105148:	58025430 	.word	0x58025430
 810514c:	58025444 	.word	0x58025444
 8105150:	58025458 	.word	0x58025458
 8105154:	5802546c 	.word	0x5802546c
 8105158:	58025480 	.word	0x58025480
 810515c:	58025494 	.word	0x58025494

08105160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8105160:	b480      	push	{r7}
 8105162:	b085      	sub	sp, #20
 8105164:	af00      	add	r7, sp, #0
 8105166:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8105168:	687b      	ldr	r3, [r7, #4]
 810516a:	681b      	ldr	r3, [r3, #0]
 810516c:	4a43      	ldr	r2, [pc, #268]	@ (810527c <DMA_CalcBaseAndBitshift+0x11c>)
 810516e:	4293      	cmp	r3, r2
 8105170:	d04a      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 8105172:	687b      	ldr	r3, [r7, #4]
 8105174:	681b      	ldr	r3, [r3, #0]
 8105176:	4a42      	ldr	r2, [pc, #264]	@ (8105280 <DMA_CalcBaseAndBitshift+0x120>)
 8105178:	4293      	cmp	r3, r2
 810517a:	d045      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 810517c:	687b      	ldr	r3, [r7, #4]
 810517e:	681b      	ldr	r3, [r3, #0]
 8105180:	4a40      	ldr	r2, [pc, #256]	@ (8105284 <DMA_CalcBaseAndBitshift+0x124>)
 8105182:	4293      	cmp	r3, r2
 8105184:	d040      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	681b      	ldr	r3, [r3, #0]
 810518a:	4a3f      	ldr	r2, [pc, #252]	@ (8105288 <DMA_CalcBaseAndBitshift+0x128>)
 810518c:	4293      	cmp	r3, r2
 810518e:	d03b      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 8105190:	687b      	ldr	r3, [r7, #4]
 8105192:	681b      	ldr	r3, [r3, #0]
 8105194:	4a3d      	ldr	r2, [pc, #244]	@ (810528c <DMA_CalcBaseAndBitshift+0x12c>)
 8105196:	4293      	cmp	r3, r2
 8105198:	d036      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 810519a:	687b      	ldr	r3, [r7, #4]
 810519c:	681b      	ldr	r3, [r3, #0]
 810519e:	4a3c      	ldr	r2, [pc, #240]	@ (8105290 <DMA_CalcBaseAndBitshift+0x130>)
 81051a0:	4293      	cmp	r3, r2
 81051a2:	d031      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051a4:	687b      	ldr	r3, [r7, #4]
 81051a6:	681b      	ldr	r3, [r3, #0]
 81051a8:	4a3a      	ldr	r2, [pc, #232]	@ (8105294 <DMA_CalcBaseAndBitshift+0x134>)
 81051aa:	4293      	cmp	r3, r2
 81051ac:	d02c      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051ae:	687b      	ldr	r3, [r7, #4]
 81051b0:	681b      	ldr	r3, [r3, #0]
 81051b2:	4a39      	ldr	r2, [pc, #228]	@ (8105298 <DMA_CalcBaseAndBitshift+0x138>)
 81051b4:	4293      	cmp	r3, r2
 81051b6:	d027      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051b8:	687b      	ldr	r3, [r7, #4]
 81051ba:	681b      	ldr	r3, [r3, #0]
 81051bc:	4a37      	ldr	r2, [pc, #220]	@ (810529c <DMA_CalcBaseAndBitshift+0x13c>)
 81051be:	4293      	cmp	r3, r2
 81051c0:	d022      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051c2:	687b      	ldr	r3, [r7, #4]
 81051c4:	681b      	ldr	r3, [r3, #0]
 81051c6:	4a36      	ldr	r2, [pc, #216]	@ (81052a0 <DMA_CalcBaseAndBitshift+0x140>)
 81051c8:	4293      	cmp	r3, r2
 81051ca:	d01d      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051cc:	687b      	ldr	r3, [r7, #4]
 81051ce:	681b      	ldr	r3, [r3, #0]
 81051d0:	4a34      	ldr	r2, [pc, #208]	@ (81052a4 <DMA_CalcBaseAndBitshift+0x144>)
 81051d2:	4293      	cmp	r3, r2
 81051d4:	d018      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051d6:	687b      	ldr	r3, [r7, #4]
 81051d8:	681b      	ldr	r3, [r3, #0]
 81051da:	4a33      	ldr	r2, [pc, #204]	@ (81052a8 <DMA_CalcBaseAndBitshift+0x148>)
 81051dc:	4293      	cmp	r3, r2
 81051de:	d013      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051e0:	687b      	ldr	r3, [r7, #4]
 81051e2:	681b      	ldr	r3, [r3, #0]
 81051e4:	4a31      	ldr	r2, [pc, #196]	@ (81052ac <DMA_CalcBaseAndBitshift+0x14c>)
 81051e6:	4293      	cmp	r3, r2
 81051e8:	d00e      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051ea:	687b      	ldr	r3, [r7, #4]
 81051ec:	681b      	ldr	r3, [r3, #0]
 81051ee:	4a30      	ldr	r2, [pc, #192]	@ (81052b0 <DMA_CalcBaseAndBitshift+0x150>)
 81051f0:	4293      	cmp	r3, r2
 81051f2:	d009      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051f4:	687b      	ldr	r3, [r7, #4]
 81051f6:	681b      	ldr	r3, [r3, #0]
 81051f8:	4a2e      	ldr	r2, [pc, #184]	@ (81052b4 <DMA_CalcBaseAndBitshift+0x154>)
 81051fa:	4293      	cmp	r3, r2
 81051fc:	d004      	beq.n	8105208 <DMA_CalcBaseAndBitshift+0xa8>
 81051fe:	687b      	ldr	r3, [r7, #4]
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	4a2d      	ldr	r2, [pc, #180]	@ (81052b8 <DMA_CalcBaseAndBitshift+0x158>)
 8105204:	4293      	cmp	r3, r2
 8105206:	d101      	bne.n	810520c <DMA_CalcBaseAndBitshift+0xac>
 8105208:	2301      	movs	r3, #1
 810520a:	e000      	b.n	810520e <DMA_CalcBaseAndBitshift+0xae>
 810520c:	2300      	movs	r3, #0
 810520e:	2b00      	cmp	r3, #0
 8105210:	d026      	beq.n	8105260 <DMA_CalcBaseAndBitshift+0x100>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8105212:	687b      	ldr	r3, [r7, #4]
 8105214:	681b      	ldr	r3, [r3, #0]
 8105216:	b2db      	uxtb	r3, r3
 8105218:	3b10      	subs	r3, #16
 810521a:	4a28      	ldr	r2, [pc, #160]	@ (81052bc <DMA_CalcBaseAndBitshift+0x15c>)
 810521c:	fba2 2303 	umull	r2, r3, r2, r3
 8105220:	091b      	lsrs	r3, r3, #4
 8105222:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8105224:	68fb      	ldr	r3, [r7, #12]
 8105226:	f003 0307 	and.w	r3, r3, #7
 810522a:	4a25      	ldr	r2, [pc, #148]	@ (81052c0 <DMA_CalcBaseAndBitshift+0x160>)
 810522c:	5cd3      	ldrb	r3, [r2, r3]
 810522e:	461a      	mov	r2, r3
 8105230:	687b      	ldr	r3, [r7, #4]
 8105232:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8105234:	68fb      	ldr	r3, [r7, #12]
 8105236:	2b03      	cmp	r3, #3
 8105238:	d909      	bls.n	810524e <DMA_CalcBaseAndBitshift+0xee>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 810523a:	687b      	ldr	r3, [r7, #4]
 810523c:	681b      	ldr	r3, [r3, #0]
 810523e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8105242:	f023 0303 	bic.w	r3, r3, #3
 8105246:	1d1a      	adds	r2, r3, #4
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	659a      	str	r2, [r3, #88]	@ 0x58
 810524c:	e00e      	b.n	810526c <DMA_CalcBaseAndBitshift+0x10c>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 810524e:	687b      	ldr	r3, [r7, #4]
 8105250:	681b      	ldr	r3, [r3, #0]
 8105252:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8105256:	f023 0303 	bic.w	r3, r3, #3
 810525a:	687a      	ldr	r2, [r7, #4]
 810525c:	6593      	str	r3, [r2, #88]	@ 0x58
 810525e:	e005      	b.n	810526c <DMA_CalcBaseAndBitshift+0x10c>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8105260:	687b      	ldr	r3, [r7, #4]
 8105262:	681b      	ldr	r3, [r3, #0]
 8105264:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8105268:	687b      	ldr	r3, [r7, #4]
 810526a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 810526c:	687b      	ldr	r3, [r7, #4]
 810526e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8105270:	4618      	mov	r0, r3
 8105272:	3714      	adds	r7, #20
 8105274:	46bd      	mov	sp, r7
 8105276:	f85d 7b04 	ldr.w	r7, [sp], #4
 810527a:	4770      	bx	lr
 810527c:	40020010 	.word	0x40020010
 8105280:	40020028 	.word	0x40020028
 8105284:	40020040 	.word	0x40020040
 8105288:	40020058 	.word	0x40020058
 810528c:	40020070 	.word	0x40020070
 8105290:	40020088 	.word	0x40020088
 8105294:	400200a0 	.word	0x400200a0
 8105298:	400200b8 	.word	0x400200b8
 810529c:	40020410 	.word	0x40020410
 81052a0:	40020428 	.word	0x40020428
 81052a4:	40020440 	.word	0x40020440
 81052a8:	40020458 	.word	0x40020458
 81052ac:	40020470 	.word	0x40020470
 81052b0:	40020488 	.word	0x40020488
 81052b4:	400204a0 	.word	0x400204a0
 81052b8:	400204b8 	.word	0x400204b8
 81052bc:	aaaaaaab 	.word	0xaaaaaaab
 81052c0:	0810fe58 	.word	0x0810fe58

081052c4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 81052c4:	b480      	push	{r7}
 81052c6:	b085      	sub	sp, #20
 81052c8:	af00      	add	r7, sp, #0
 81052ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81052cc:	2300      	movs	r3, #0
 81052ce:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 81052d0:	687b      	ldr	r3, [r7, #4]
 81052d2:	699b      	ldr	r3, [r3, #24]
 81052d4:	2b00      	cmp	r3, #0
 81052d6:	d120      	bne.n	810531a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 81052d8:	687b      	ldr	r3, [r7, #4]
 81052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81052dc:	2b03      	cmp	r3, #3
 81052de:	d858      	bhi.n	8105392 <DMA_CheckFifoParam+0xce>
 81052e0:	a201      	add	r2, pc, #4	@ (adr r2, 81052e8 <DMA_CheckFifoParam+0x24>)
 81052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81052e6:	bf00      	nop
 81052e8:	081052f9 	.word	0x081052f9
 81052ec:	0810530b 	.word	0x0810530b
 81052f0:	081052f9 	.word	0x081052f9
 81052f4:	08105393 	.word	0x08105393
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81052fc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105300:	2b00      	cmp	r3, #0
 8105302:	d048      	beq.n	8105396 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8105304:	2301      	movs	r3, #1
 8105306:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105308:	e045      	b.n	8105396 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810530a:	687b      	ldr	r3, [r7, #4]
 810530c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810530e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8105312:	d142      	bne.n	810539a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8105314:	2301      	movs	r3, #1
 8105316:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8105318:	e03f      	b.n	810539a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	699b      	ldr	r3, [r3, #24]
 810531e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8105322:	d123      	bne.n	810536c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8105324:	687b      	ldr	r3, [r7, #4]
 8105326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105328:	2b03      	cmp	r3, #3
 810532a:	d838      	bhi.n	810539e <DMA_CheckFifoParam+0xda>
 810532c:	a201      	add	r2, pc, #4	@ (adr r2, 8105334 <DMA_CheckFifoParam+0x70>)
 810532e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105332:	bf00      	nop
 8105334:	08105345 	.word	0x08105345
 8105338:	0810534b 	.word	0x0810534b
 810533c:	08105345 	.word	0x08105345
 8105340:	0810535d 	.word	0x0810535d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8105344:	2301      	movs	r3, #1
 8105346:	73fb      	strb	r3, [r7, #15]
        break;
 8105348:	e030      	b.n	81053ac <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 810534a:	687b      	ldr	r3, [r7, #4]
 810534c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810534e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105352:	2b00      	cmp	r3, #0
 8105354:	d025      	beq.n	81053a2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8105356:	2301      	movs	r3, #1
 8105358:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810535a:	e022      	b.n	81053a2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 810535c:	687b      	ldr	r3, [r7, #4]
 810535e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105360:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8105364:	d11f      	bne.n	81053a6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8105366:	2301      	movs	r3, #1
 8105368:	73fb      	strb	r3, [r7, #15]
        }
        break;
 810536a:	e01c      	b.n	81053a6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 810536c:	687b      	ldr	r3, [r7, #4]
 810536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105370:	2b02      	cmp	r3, #2
 8105372:	d902      	bls.n	810537a <DMA_CheckFifoParam+0xb6>
 8105374:	2b03      	cmp	r3, #3
 8105376:	d003      	beq.n	8105380 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8105378:	e018      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 810537a:	2301      	movs	r3, #1
 810537c:	73fb      	strb	r3, [r7, #15]
        break;
 810537e:	e015      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8105380:	687b      	ldr	r3, [r7, #4]
 8105382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105384:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8105388:	2b00      	cmp	r3, #0
 810538a:	d00e      	beq.n	81053aa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 810538c:	2301      	movs	r3, #1
 810538e:	73fb      	strb	r3, [r7, #15]
    break;
 8105390:	e00b      	b.n	81053aa <DMA_CheckFifoParam+0xe6>
        break;
 8105392:	bf00      	nop
 8105394:	e00a      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        break;
 8105396:	bf00      	nop
 8105398:	e008      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        break;
 810539a:	bf00      	nop
 810539c:	e006      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        break;
 810539e:	bf00      	nop
 81053a0:	e004      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        break;
 81053a2:	bf00      	nop
 81053a4:	e002      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
        break;
 81053a6:	bf00      	nop
 81053a8:	e000      	b.n	81053ac <DMA_CheckFifoParam+0xe8>
    break;
 81053aa:	bf00      	nop
    }
  }

  return status;
 81053ac:	7bfb      	ldrb	r3, [r7, #15]
}
 81053ae:	4618      	mov	r0, r3
 81053b0:	3714      	adds	r7, #20
 81053b2:	46bd      	mov	sp, r7
 81053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b8:	4770      	bx	lr
 81053ba:	bf00      	nop

081053bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81053bc:	b480      	push	{r7}
 81053be:	b085      	sub	sp, #20
 81053c0:	af00      	add	r7, sp, #0
 81053c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 81053c4:	687b      	ldr	r3, [r7, #4]
 81053c6:	681b      	ldr	r3, [r3, #0]
 81053c8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	4a3a      	ldr	r2, [pc, #232]	@ (81054b8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 81053d0:	4293      	cmp	r3, r2
 81053d2:	d022      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81053d4:	687b      	ldr	r3, [r7, #4]
 81053d6:	681b      	ldr	r3, [r3, #0]
 81053d8:	4a38      	ldr	r2, [pc, #224]	@ (81054bc <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 81053da:	4293      	cmp	r3, r2
 81053dc:	d01d      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81053de:	687b      	ldr	r3, [r7, #4]
 81053e0:	681b      	ldr	r3, [r3, #0]
 81053e2:	4a37      	ldr	r2, [pc, #220]	@ (81054c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 81053e4:	4293      	cmp	r3, r2
 81053e6:	d018      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81053e8:	687b      	ldr	r3, [r7, #4]
 81053ea:	681b      	ldr	r3, [r3, #0]
 81053ec:	4a35      	ldr	r2, [pc, #212]	@ (81054c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 81053ee:	4293      	cmp	r3, r2
 81053f0:	d013      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	4a34      	ldr	r2, [pc, #208]	@ (81054c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 81053f8:	4293      	cmp	r3, r2
 81053fa:	d00e      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 81053fc:	687b      	ldr	r3, [r7, #4]
 81053fe:	681b      	ldr	r3, [r3, #0]
 8105400:	4a32      	ldr	r2, [pc, #200]	@ (81054cc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8105402:	4293      	cmp	r3, r2
 8105404:	d009      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105406:	687b      	ldr	r3, [r7, #4]
 8105408:	681b      	ldr	r3, [r3, #0]
 810540a:	4a31      	ldr	r2, [pc, #196]	@ (81054d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 810540c:	4293      	cmp	r3, r2
 810540e:	d004      	beq.n	810541a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8105410:	687b      	ldr	r3, [r7, #4]
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	4a2f      	ldr	r2, [pc, #188]	@ (81054d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8105416:	4293      	cmp	r3, r2
 8105418:	d101      	bne.n	810541e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 810541a:	2301      	movs	r3, #1
 810541c:	e000      	b.n	8105420 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 810541e:	2300      	movs	r3, #0
 8105420:	2b00      	cmp	r3, #0
 8105422:	d01c      	beq.n	810545e <DMA_CalcDMAMUXChannelBaseAndMask+0xa2>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	681b      	ldr	r3, [r3, #0]
 8105428:	b2db      	uxtb	r3, r3
 810542a:	3b08      	subs	r3, #8
 810542c:	4a2a      	ldr	r2, [pc, #168]	@ (81054d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 810542e:	fba2 2303 	umull	r2, r3, r2, r3
 8105432:	091b      	lsrs	r3, r3, #4
 8105434:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8105436:	68fb      	ldr	r3, [r7, #12]
 8105438:	f103 53b0 	add.w	r3, r3, #369098752	@ 0x16000000
 810543c:	f503 4316 	add.w	r3, r3, #38400	@ 0x9600
 8105440:	009b      	lsls	r3, r3, #2
 8105442:	461a      	mov	r2, r3
 8105444:	687b      	ldr	r3, [r7, #4]
 8105446:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8105448:	687b      	ldr	r3, [r7, #4]
 810544a:	4a24      	ldr	r2, [pc, #144]	@ (81054dc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 810544c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810544e:	68fb      	ldr	r3, [r7, #12]
 8105450:	f003 031f 	and.w	r3, r3, #31
 8105454:	2201      	movs	r2, #1
 8105456:	409a      	lsls	r2, r3
 8105458:	687b      	ldr	r3, [r7, #4]
 810545a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 810545c:	e026      	b.n	81054ac <DMA_CalcDMAMUXChannelBaseAndMask+0xf0>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 810545e:	687b      	ldr	r3, [r7, #4]
 8105460:	681b      	ldr	r3, [r3, #0]
 8105462:	b2db      	uxtb	r3, r3
 8105464:	3b10      	subs	r3, #16
 8105466:	4a1e      	ldr	r2, [pc, #120]	@ (81054e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8105468:	fba2 2303 	umull	r2, r3, r2, r3
 810546c:	091b      	lsrs	r3, r3, #4
 810546e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8105470:	68bb      	ldr	r3, [r7, #8]
 8105472:	4a1c      	ldr	r2, [pc, #112]	@ (81054e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8105474:	4293      	cmp	r3, r2
 8105476:	d806      	bhi.n	8105486 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
 8105478:	68bb      	ldr	r3, [r7, #8]
 810547a:	4a1b      	ldr	r2, [pc, #108]	@ (81054e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 810547c:	4293      	cmp	r3, r2
 810547e:	d902      	bls.n	8105486 <DMA_CalcDMAMUXChannelBaseAndMask+0xca>
      stream_number += 8U;
 8105480:	68fb      	ldr	r3, [r7, #12]
 8105482:	3308      	adds	r3, #8
 8105484:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8105486:	68fb      	ldr	r3, [r7, #12]
 8105488:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 810548c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8105490:	009b      	lsls	r3, r3, #2
 8105492:	461a      	mov	r2, r3
 8105494:	687b      	ldr	r3, [r7, #4]
 8105496:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8105498:	687b      	ldr	r3, [r7, #4]
 810549a:	4a14      	ldr	r2, [pc, #80]	@ (81054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 810549c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 810549e:	68fb      	ldr	r3, [r7, #12]
 81054a0:	f003 031f 	and.w	r3, r3, #31
 81054a4:	2201      	movs	r2, #1
 81054a6:	409a      	lsls	r2, r3
 81054a8:	687b      	ldr	r3, [r7, #4]
 81054aa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 81054ac:	bf00      	nop
 81054ae:	3714      	adds	r7, #20
 81054b0:	46bd      	mov	sp, r7
 81054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81054b6:	4770      	bx	lr
 81054b8:	58025408 	.word	0x58025408
 81054bc:	5802541c 	.word	0x5802541c
 81054c0:	58025430 	.word	0x58025430
 81054c4:	58025444 	.word	0x58025444
 81054c8:	58025458 	.word	0x58025458
 81054cc:	5802546c 	.word	0x5802546c
 81054d0:	58025480 	.word	0x58025480
 81054d4:	58025494 	.word	0x58025494
 81054d8:	cccccccd 	.word	0xcccccccd
 81054dc:	58025880 	.word	0x58025880
 81054e0:	aaaaaaab 	.word	0xaaaaaaab
 81054e4:	400204b8 	.word	0x400204b8
 81054e8:	4002040f 	.word	0x4002040f
 81054ec:	40020880 	.word	0x40020880

081054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 81054f0:	b480      	push	{r7}
 81054f2:	b085      	sub	sp, #20
 81054f4:	af00      	add	r7, sp, #0
 81054f6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 81054f8:	687b      	ldr	r3, [r7, #4]
 81054fa:	685b      	ldr	r3, [r3, #4]
 81054fc:	b2db      	uxtb	r3, r3
 81054fe:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8105500:	68fb      	ldr	r3, [r7, #12]
 8105502:	2b00      	cmp	r3, #0
 8105504:	d04a      	beq.n	810559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8105506:	68fb      	ldr	r3, [r7, #12]
 8105508:	2b08      	cmp	r3, #8
 810550a:	d847      	bhi.n	810559c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 810550c:	687b      	ldr	r3, [r7, #4]
 810550e:	681b      	ldr	r3, [r3, #0]
 8105510:	4a25      	ldr	r2, [pc, #148]	@ (81055a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8105512:	4293      	cmp	r3, r2
 8105514:	d022      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105516:	687b      	ldr	r3, [r7, #4]
 8105518:	681b      	ldr	r3, [r3, #0]
 810551a:	4a24      	ldr	r2, [pc, #144]	@ (81055ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 810551c:	4293      	cmp	r3, r2
 810551e:	d01d      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105520:	687b      	ldr	r3, [r7, #4]
 8105522:	681b      	ldr	r3, [r3, #0]
 8105524:	4a22      	ldr	r2, [pc, #136]	@ (81055b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8105526:	4293      	cmp	r3, r2
 8105528:	d018      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810552a:	687b      	ldr	r3, [r7, #4]
 810552c:	681b      	ldr	r3, [r3, #0]
 810552e:	4a21      	ldr	r2, [pc, #132]	@ (81055b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8105530:	4293      	cmp	r3, r2
 8105532:	d013      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105534:	687b      	ldr	r3, [r7, #4]
 8105536:	681b      	ldr	r3, [r3, #0]
 8105538:	4a1f      	ldr	r2, [pc, #124]	@ (81055b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 810553a:	4293      	cmp	r3, r2
 810553c:	d00e      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 810553e:	687b      	ldr	r3, [r7, #4]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	4a1e      	ldr	r2, [pc, #120]	@ (81055bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8105544:	4293      	cmp	r3, r2
 8105546:	d009      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105548:	687b      	ldr	r3, [r7, #4]
 810554a:	681b      	ldr	r3, [r3, #0]
 810554c:	4a1c      	ldr	r2, [pc, #112]	@ (81055c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 810554e:	4293      	cmp	r3, r2
 8105550:	d004      	beq.n	810555c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8105552:	687b      	ldr	r3, [r7, #4]
 8105554:	681b      	ldr	r3, [r3, #0]
 8105556:	4a1b      	ldr	r2, [pc, #108]	@ (81055c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8105558:	4293      	cmp	r3, r2
 810555a:	d101      	bne.n	8105560 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 810555c:	2301      	movs	r3, #1
 810555e:	e000      	b.n	8105562 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8105560:	2300      	movs	r3, #0
 8105562:	2b00      	cmp	r3, #0
 8105564:	d00a      	beq.n	810557c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8105566:	68fa      	ldr	r2, [r7, #12]
 8105568:	4b17      	ldr	r3, [pc, #92]	@ (81055c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 810556a:	4413      	add	r3, r2
 810556c:	009b      	lsls	r3, r3, #2
 810556e:	461a      	mov	r2, r3
 8105570:	687b      	ldr	r3, [r7, #4]
 8105572:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8105574:	687b      	ldr	r3, [r7, #4]
 8105576:	4a15      	ldr	r2, [pc, #84]	@ (81055cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8105578:	671a      	str	r2, [r3, #112]	@ 0x70
 810557a:	e009      	b.n	8105590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 810557c:	68fa      	ldr	r2, [r7, #12]
 810557e:	4b14      	ldr	r3, [pc, #80]	@ (81055d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8105580:	4413      	add	r3, r2
 8105582:	009b      	lsls	r3, r3, #2
 8105584:	461a      	mov	r2, r3
 8105586:	687b      	ldr	r3, [r7, #4]
 8105588:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 810558a:	687b      	ldr	r3, [r7, #4]
 810558c:	4a11      	ldr	r2, [pc, #68]	@ (81055d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 810558e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8105590:	68fb      	ldr	r3, [r7, #12]
 8105592:	3b01      	subs	r3, #1
 8105594:	2201      	movs	r2, #1
 8105596:	409a      	lsls	r2, r3
 8105598:	687b      	ldr	r3, [r7, #4]
 810559a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 810559c:	bf00      	nop
 810559e:	3714      	adds	r7, #20
 81055a0:	46bd      	mov	sp, r7
 81055a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81055a6:	4770      	bx	lr
 81055a8:	58025408 	.word	0x58025408
 81055ac:	5802541c 	.word	0x5802541c
 81055b0:	58025430 	.word	0x58025430
 81055b4:	58025444 	.word	0x58025444
 81055b8:	58025458 	.word	0x58025458
 81055bc:	5802546c 	.word	0x5802546c
 81055c0:	58025480 	.word	0x58025480
 81055c4:	58025494 	.word	0x58025494
 81055c8:	1600963f 	.word	0x1600963f
 81055cc:	58025940 	.word	0x58025940
 81055d0:	1000823f 	.word	0x1000823f
 81055d4:	40020940 	.word	0x40020940

081055d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81055d8:	b480      	push	{r7}
 81055da:	b089      	sub	sp, #36	@ 0x24
 81055dc:	af00      	add	r7, sp, #0
 81055de:	6078      	str	r0, [r7, #4]
 81055e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81055e2:	2300      	movs	r3, #0
 81055e4:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81055e6:	4b89      	ldr	r3, [pc, #548]	@ (810580c <HAL_GPIO_Init+0x234>)
 81055e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81055ea:	e194      	b.n	8105916 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81055ec:	683b      	ldr	r3, [r7, #0]
 81055ee:	681a      	ldr	r2, [r3, #0]
 81055f0:	2101      	movs	r1, #1
 81055f2:	69fb      	ldr	r3, [r7, #28]
 81055f4:	fa01 f303 	lsl.w	r3, r1, r3
 81055f8:	4013      	ands	r3, r2
 81055fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81055fc:	693b      	ldr	r3, [r7, #16]
 81055fe:	2b00      	cmp	r3, #0
 8105600:	f000 8186 	beq.w	8105910 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8105604:	683b      	ldr	r3, [r7, #0]
 8105606:	685b      	ldr	r3, [r3, #4]
 8105608:	f003 0303 	and.w	r3, r3, #3
 810560c:	2b01      	cmp	r3, #1
 810560e:	d005      	beq.n	810561c <HAL_GPIO_Init+0x44>
 8105610:	683b      	ldr	r3, [r7, #0]
 8105612:	685b      	ldr	r3, [r3, #4]
 8105614:	f003 0303 	and.w	r3, r3, #3
 8105618:	2b02      	cmp	r3, #2
 810561a:	d130      	bne.n	810567e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 810561c:	687b      	ldr	r3, [r7, #4]
 810561e:	689b      	ldr	r3, [r3, #8]
 8105620:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8105622:	69fb      	ldr	r3, [r7, #28]
 8105624:	005b      	lsls	r3, r3, #1
 8105626:	2203      	movs	r2, #3
 8105628:	fa02 f303 	lsl.w	r3, r2, r3
 810562c:	43db      	mvns	r3, r3
 810562e:	69ba      	ldr	r2, [r7, #24]
 8105630:	4013      	ands	r3, r2
 8105632:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8105634:	683b      	ldr	r3, [r7, #0]
 8105636:	68da      	ldr	r2, [r3, #12]
 8105638:	69fb      	ldr	r3, [r7, #28]
 810563a:	005b      	lsls	r3, r3, #1
 810563c:	fa02 f303 	lsl.w	r3, r2, r3
 8105640:	69ba      	ldr	r2, [r7, #24]
 8105642:	4313      	orrs	r3, r2
 8105644:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8105646:	687b      	ldr	r3, [r7, #4]
 8105648:	69ba      	ldr	r2, [r7, #24]
 810564a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 810564c:	687b      	ldr	r3, [r7, #4]
 810564e:	685b      	ldr	r3, [r3, #4]
 8105650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8105652:	2201      	movs	r2, #1
 8105654:	69fb      	ldr	r3, [r7, #28]
 8105656:	fa02 f303 	lsl.w	r3, r2, r3
 810565a:	43db      	mvns	r3, r3
 810565c:	69ba      	ldr	r2, [r7, #24]
 810565e:	4013      	ands	r3, r2
 8105660:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8105662:	683b      	ldr	r3, [r7, #0]
 8105664:	685b      	ldr	r3, [r3, #4]
 8105666:	091b      	lsrs	r3, r3, #4
 8105668:	f003 0201 	and.w	r2, r3, #1
 810566c:	69fb      	ldr	r3, [r7, #28]
 810566e:	fa02 f303 	lsl.w	r3, r2, r3
 8105672:	69ba      	ldr	r2, [r7, #24]
 8105674:	4313      	orrs	r3, r2
 8105676:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8105678:	687b      	ldr	r3, [r7, #4]
 810567a:	69ba      	ldr	r2, [r7, #24]
 810567c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 810567e:	683b      	ldr	r3, [r7, #0]
 8105680:	685b      	ldr	r3, [r3, #4]
 8105682:	f003 0303 	and.w	r3, r3, #3
 8105686:	2b03      	cmp	r3, #3
 8105688:	d017      	beq.n	81056ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 810568a:	687b      	ldr	r3, [r7, #4]
 810568c:	68db      	ldr	r3, [r3, #12]
 810568e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8105690:	69fb      	ldr	r3, [r7, #28]
 8105692:	005b      	lsls	r3, r3, #1
 8105694:	2203      	movs	r2, #3
 8105696:	fa02 f303 	lsl.w	r3, r2, r3
 810569a:	43db      	mvns	r3, r3
 810569c:	69ba      	ldr	r2, [r7, #24]
 810569e:	4013      	ands	r3, r2
 81056a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81056a2:	683b      	ldr	r3, [r7, #0]
 81056a4:	689a      	ldr	r2, [r3, #8]
 81056a6:	69fb      	ldr	r3, [r7, #28]
 81056a8:	005b      	lsls	r3, r3, #1
 81056aa:	fa02 f303 	lsl.w	r3, r2, r3
 81056ae:	69ba      	ldr	r2, [r7, #24]
 81056b0:	4313      	orrs	r3, r2
 81056b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81056b4:	687b      	ldr	r3, [r7, #4]
 81056b6:	69ba      	ldr	r2, [r7, #24]
 81056b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81056ba:	683b      	ldr	r3, [r7, #0]
 81056bc:	685b      	ldr	r3, [r3, #4]
 81056be:	f003 0303 	and.w	r3, r3, #3
 81056c2:	2b02      	cmp	r3, #2
 81056c4:	d123      	bne.n	810570e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81056c6:	69fb      	ldr	r3, [r7, #28]
 81056c8:	08da      	lsrs	r2, r3, #3
 81056ca:	687b      	ldr	r3, [r7, #4]
 81056cc:	3208      	adds	r2, #8
 81056ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 81056d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81056d4:	69fb      	ldr	r3, [r7, #28]
 81056d6:	f003 0307 	and.w	r3, r3, #7
 81056da:	009b      	lsls	r3, r3, #2
 81056dc:	220f      	movs	r2, #15
 81056de:	fa02 f303 	lsl.w	r3, r2, r3
 81056e2:	43db      	mvns	r3, r3
 81056e4:	69ba      	ldr	r2, [r7, #24]
 81056e6:	4013      	ands	r3, r2
 81056e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81056ea:	683b      	ldr	r3, [r7, #0]
 81056ec:	691a      	ldr	r2, [r3, #16]
 81056ee:	69fb      	ldr	r3, [r7, #28]
 81056f0:	f003 0307 	and.w	r3, r3, #7
 81056f4:	009b      	lsls	r3, r3, #2
 81056f6:	fa02 f303 	lsl.w	r3, r2, r3
 81056fa:	69ba      	ldr	r2, [r7, #24]
 81056fc:	4313      	orrs	r3, r2
 81056fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8105700:	69fb      	ldr	r3, [r7, #28]
 8105702:	08da      	lsrs	r2, r3, #3
 8105704:	687b      	ldr	r3, [r7, #4]
 8105706:	3208      	adds	r2, #8
 8105708:	69b9      	ldr	r1, [r7, #24]
 810570a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 810570e:	687b      	ldr	r3, [r7, #4]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8105714:	69fb      	ldr	r3, [r7, #28]
 8105716:	005b      	lsls	r3, r3, #1
 8105718:	2203      	movs	r2, #3
 810571a:	fa02 f303 	lsl.w	r3, r2, r3
 810571e:	43db      	mvns	r3, r3
 8105720:	69ba      	ldr	r2, [r7, #24]
 8105722:	4013      	ands	r3, r2
 8105724:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8105726:	683b      	ldr	r3, [r7, #0]
 8105728:	685b      	ldr	r3, [r3, #4]
 810572a:	f003 0203 	and.w	r2, r3, #3
 810572e:	69fb      	ldr	r3, [r7, #28]
 8105730:	005b      	lsls	r3, r3, #1
 8105732:	fa02 f303 	lsl.w	r3, r2, r3
 8105736:	69ba      	ldr	r2, [r7, #24]
 8105738:	4313      	orrs	r3, r2
 810573a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 810573c:	687b      	ldr	r3, [r7, #4]
 810573e:	69ba      	ldr	r2, [r7, #24]
 8105740:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8105742:	683b      	ldr	r3, [r7, #0]
 8105744:	685b      	ldr	r3, [r3, #4]
 8105746:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 810574a:	2b00      	cmp	r3, #0
 810574c:	f000 80e0 	beq.w	8105910 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8105750:	4b2f      	ldr	r3, [pc, #188]	@ (8105810 <HAL_GPIO_Init+0x238>)
 8105752:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105756:	4a2e      	ldr	r2, [pc, #184]	@ (8105810 <HAL_GPIO_Init+0x238>)
 8105758:	f043 0302 	orr.w	r3, r3, #2
 810575c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8105760:	4b2b      	ldr	r3, [pc, #172]	@ (8105810 <HAL_GPIO_Init+0x238>)
 8105762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8105766:	f003 0302 	and.w	r3, r3, #2
 810576a:	60fb      	str	r3, [r7, #12]
 810576c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810576e:	4a29      	ldr	r2, [pc, #164]	@ (8105814 <HAL_GPIO_Init+0x23c>)
 8105770:	69fb      	ldr	r3, [r7, #28]
 8105772:	089b      	lsrs	r3, r3, #2
 8105774:	3302      	adds	r3, #2
 8105776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 810577a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 810577c:	69fb      	ldr	r3, [r7, #28]
 810577e:	f003 0303 	and.w	r3, r3, #3
 8105782:	009b      	lsls	r3, r3, #2
 8105784:	220f      	movs	r2, #15
 8105786:	fa02 f303 	lsl.w	r3, r2, r3
 810578a:	43db      	mvns	r3, r3
 810578c:	69ba      	ldr	r2, [r7, #24]
 810578e:	4013      	ands	r3, r2
 8105790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8105792:	687b      	ldr	r3, [r7, #4]
 8105794:	4a20      	ldr	r2, [pc, #128]	@ (8105818 <HAL_GPIO_Init+0x240>)
 8105796:	4293      	cmp	r3, r2
 8105798:	d052      	beq.n	8105840 <HAL_GPIO_Init+0x268>
 810579a:	687b      	ldr	r3, [r7, #4]
 810579c:	4a1f      	ldr	r2, [pc, #124]	@ (810581c <HAL_GPIO_Init+0x244>)
 810579e:	4293      	cmp	r3, r2
 81057a0:	d031      	beq.n	8105806 <HAL_GPIO_Init+0x22e>
 81057a2:	687b      	ldr	r3, [r7, #4]
 81057a4:	4a1e      	ldr	r2, [pc, #120]	@ (8105820 <HAL_GPIO_Init+0x248>)
 81057a6:	4293      	cmp	r3, r2
 81057a8:	d02b      	beq.n	8105802 <HAL_GPIO_Init+0x22a>
 81057aa:	687b      	ldr	r3, [r7, #4]
 81057ac:	4a1d      	ldr	r2, [pc, #116]	@ (8105824 <HAL_GPIO_Init+0x24c>)
 81057ae:	4293      	cmp	r3, r2
 81057b0:	d025      	beq.n	81057fe <HAL_GPIO_Init+0x226>
 81057b2:	687b      	ldr	r3, [r7, #4]
 81057b4:	4a1c      	ldr	r2, [pc, #112]	@ (8105828 <HAL_GPIO_Init+0x250>)
 81057b6:	4293      	cmp	r3, r2
 81057b8:	d01f      	beq.n	81057fa <HAL_GPIO_Init+0x222>
 81057ba:	687b      	ldr	r3, [r7, #4]
 81057bc:	4a1b      	ldr	r2, [pc, #108]	@ (810582c <HAL_GPIO_Init+0x254>)
 81057be:	4293      	cmp	r3, r2
 81057c0:	d019      	beq.n	81057f6 <HAL_GPIO_Init+0x21e>
 81057c2:	687b      	ldr	r3, [r7, #4]
 81057c4:	4a1a      	ldr	r2, [pc, #104]	@ (8105830 <HAL_GPIO_Init+0x258>)
 81057c6:	4293      	cmp	r3, r2
 81057c8:	d013      	beq.n	81057f2 <HAL_GPIO_Init+0x21a>
 81057ca:	687b      	ldr	r3, [r7, #4]
 81057cc:	4a19      	ldr	r2, [pc, #100]	@ (8105834 <HAL_GPIO_Init+0x25c>)
 81057ce:	4293      	cmp	r3, r2
 81057d0:	d00d      	beq.n	81057ee <HAL_GPIO_Init+0x216>
 81057d2:	687b      	ldr	r3, [r7, #4]
 81057d4:	4a18      	ldr	r2, [pc, #96]	@ (8105838 <HAL_GPIO_Init+0x260>)
 81057d6:	4293      	cmp	r3, r2
 81057d8:	d007      	beq.n	81057ea <HAL_GPIO_Init+0x212>
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	4a17      	ldr	r2, [pc, #92]	@ (810583c <HAL_GPIO_Init+0x264>)
 81057de:	4293      	cmp	r3, r2
 81057e0:	d101      	bne.n	81057e6 <HAL_GPIO_Init+0x20e>
 81057e2:	2309      	movs	r3, #9
 81057e4:	e02d      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057e6:	230a      	movs	r3, #10
 81057e8:	e02b      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057ea:	2308      	movs	r3, #8
 81057ec:	e029      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057ee:	2307      	movs	r3, #7
 81057f0:	e027      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057f2:	2306      	movs	r3, #6
 81057f4:	e025      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057f6:	2305      	movs	r3, #5
 81057f8:	e023      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057fa:	2304      	movs	r3, #4
 81057fc:	e021      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 81057fe:	2303      	movs	r3, #3
 8105800:	e01f      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 8105802:	2302      	movs	r3, #2
 8105804:	e01d      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 8105806:	2301      	movs	r3, #1
 8105808:	e01b      	b.n	8105842 <HAL_GPIO_Init+0x26a>
 810580a:	bf00      	nop
 810580c:	580000c0 	.word	0x580000c0
 8105810:	58024400 	.word	0x58024400
 8105814:	58000400 	.word	0x58000400
 8105818:	58020000 	.word	0x58020000
 810581c:	58020400 	.word	0x58020400
 8105820:	58020800 	.word	0x58020800
 8105824:	58020c00 	.word	0x58020c00
 8105828:	58021000 	.word	0x58021000
 810582c:	58021400 	.word	0x58021400
 8105830:	58021800 	.word	0x58021800
 8105834:	58021c00 	.word	0x58021c00
 8105838:	58022000 	.word	0x58022000
 810583c:	58022400 	.word	0x58022400
 8105840:	2300      	movs	r3, #0
 8105842:	69fa      	ldr	r2, [r7, #28]
 8105844:	f002 0203 	and.w	r2, r2, #3
 8105848:	0092      	lsls	r2, r2, #2
 810584a:	4093      	lsls	r3, r2
 810584c:	69ba      	ldr	r2, [r7, #24]
 810584e:	4313      	orrs	r3, r2
 8105850:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8105852:	4938      	ldr	r1, [pc, #224]	@ (8105934 <HAL_GPIO_Init+0x35c>)
 8105854:	69fb      	ldr	r3, [r7, #28]
 8105856:	089b      	lsrs	r3, r3, #2
 8105858:	3302      	adds	r3, #2
 810585a:	69ba      	ldr	r2, [r7, #24]
 810585c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8105860:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105868:	693b      	ldr	r3, [r7, #16]
 810586a:	43db      	mvns	r3, r3
 810586c:	69ba      	ldr	r2, [r7, #24]
 810586e:	4013      	ands	r3, r2
 8105870:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8105872:	683b      	ldr	r3, [r7, #0]
 8105874:	685b      	ldr	r3, [r3, #4]
 8105876:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810587a:	2b00      	cmp	r3, #0
 810587c:	d003      	beq.n	8105886 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 810587e:	69ba      	ldr	r2, [r7, #24]
 8105880:	693b      	ldr	r3, [r7, #16]
 8105882:	4313      	orrs	r3, r2
 8105884:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8105886:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 810588a:	69bb      	ldr	r3, [r7, #24]
 810588c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 810588e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8105892:	685b      	ldr	r3, [r3, #4]
 8105894:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8105896:	693b      	ldr	r3, [r7, #16]
 8105898:	43db      	mvns	r3, r3
 810589a:	69ba      	ldr	r2, [r7, #24]
 810589c:	4013      	ands	r3, r2
 810589e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81058a0:	683b      	ldr	r3, [r7, #0]
 81058a2:	685b      	ldr	r3, [r3, #4]
 81058a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81058a8:	2b00      	cmp	r3, #0
 81058aa:	d003      	beq.n	81058b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 81058ac:	69ba      	ldr	r2, [r7, #24]
 81058ae:	693b      	ldr	r3, [r7, #16]
 81058b0:	4313      	orrs	r3, r2
 81058b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81058b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81058b8:	69bb      	ldr	r3, [r7, #24]
 81058ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 81058bc:	697b      	ldr	r3, [r7, #20]
 81058be:	685b      	ldr	r3, [r3, #4]
 81058c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058c2:	693b      	ldr	r3, [r7, #16]
 81058c4:	43db      	mvns	r3, r3
 81058c6:	69ba      	ldr	r2, [r7, #24]
 81058c8:	4013      	ands	r3, r2
 81058ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 81058cc:	683b      	ldr	r3, [r7, #0]
 81058ce:	685b      	ldr	r3, [r3, #4]
 81058d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81058d4:	2b00      	cmp	r3, #0
 81058d6:	d003      	beq.n	81058e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 81058d8:	69ba      	ldr	r2, [r7, #24]
 81058da:	693b      	ldr	r3, [r7, #16]
 81058dc:	4313      	orrs	r3, r2
 81058de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 81058e0:	697b      	ldr	r3, [r7, #20]
 81058e2:	69ba      	ldr	r2, [r7, #24]
 81058e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 81058e6:	697b      	ldr	r3, [r7, #20]
 81058e8:	681b      	ldr	r3, [r3, #0]
 81058ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81058ec:	693b      	ldr	r3, [r7, #16]
 81058ee:	43db      	mvns	r3, r3
 81058f0:	69ba      	ldr	r2, [r7, #24]
 81058f2:	4013      	ands	r3, r2
 81058f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 81058f6:	683b      	ldr	r3, [r7, #0]
 81058f8:	685b      	ldr	r3, [r3, #4]
 81058fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 81058fe:	2b00      	cmp	r3, #0
 8105900:	d003      	beq.n	810590a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8105902:	69ba      	ldr	r2, [r7, #24]
 8105904:	693b      	ldr	r3, [r7, #16]
 8105906:	4313      	orrs	r3, r2
 8105908:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810590a:	697b      	ldr	r3, [r7, #20]
 810590c:	69ba      	ldr	r2, [r7, #24]
 810590e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8105910:	69fb      	ldr	r3, [r7, #28]
 8105912:	3301      	adds	r3, #1
 8105914:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8105916:	683b      	ldr	r3, [r7, #0]
 8105918:	681a      	ldr	r2, [r3, #0]
 810591a:	69fb      	ldr	r3, [r7, #28]
 810591c:	fa22 f303 	lsr.w	r3, r2, r3
 8105920:	2b00      	cmp	r3, #0
 8105922:	f47f ae63 	bne.w	81055ec <HAL_GPIO_Init+0x14>
  }
}
 8105926:	bf00      	nop
 8105928:	bf00      	nop
 810592a:	3724      	adds	r7, #36	@ 0x24
 810592c:	46bd      	mov	sp, r7
 810592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105932:	4770      	bx	lr
 8105934:	58000400 	.word	0x58000400

08105938 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8105938:	b480      	push	{r7}
 810593a:	b083      	sub	sp, #12
 810593c:	af00      	add	r7, sp, #0
 810593e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8105940:	4b05      	ldr	r3, [pc, #20]	@ (8105958 <HAL_HSEM_ActivateNotification+0x20>)
 8105942:	681a      	ldr	r2, [r3, #0]
 8105944:	4904      	ldr	r1, [pc, #16]	@ (8105958 <HAL_HSEM_ActivateNotification+0x20>)
 8105946:	687b      	ldr	r3, [r7, #4]
 8105948:	4313      	orrs	r3, r2
 810594a:	600b      	str	r3, [r1, #0]
#endif
}
 810594c:	bf00      	nop
 810594e:	370c      	adds	r7, #12
 8105950:	46bd      	mov	sp, r7
 8105952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105956:	4770      	bx	lr
 8105958:	58026510 	.word	0x58026510

0810595c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810595c:	b580      	push	{r7, lr}
 810595e:	b084      	sub	sp, #16
 8105960:	af00      	add	r7, sp, #0
 8105962:	60f8      	str	r0, [r7, #12]
 8105964:	460b      	mov	r3, r1
 8105966:	607a      	str	r2, [r7, #4]
 8105968:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810596a:	4b37      	ldr	r3, [pc, #220]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 810596c:	681b      	ldr	r3, [r3, #0]
 810596e:	f023 0201 	bic.w	r2, r3, #1
 8105972:	4935      	ldr	r1, [pc, #212]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105974:	68fb      	ldr	r3, [r7, #12]
 8105976:	4313      	orrs	r3, r2
 8105978:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810597a:	687b      	ldr	r3, [r7, #4]
 810597c:	2b00      	cmp	r3, #0
 810597e:	d123      	bne.n	81059c8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105980:	f7fc ffd0 	bl	8102924 <HAL_GetCurrentCPUID>
 8105984:	4603      	mov	r3, r0
 8105986:	2b03      	cmp	r3, #3
 8105988:	d158      	bne.n	8105a3c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810598a:	4b2f      	ldr	r3, [pc, #188]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 810598c:	691b      	ldr	r3, [r3, #16]
 810598e:	4a2e      	ldr	r2, [pc, #184]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105990:	f023 0301 	bic.w	r3, r3, #1
 8105994:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105996:	4b2d      	ldr	r3, [pc, #180]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105998:	691b      	ldr	r3, [r3, #16]
 810599a:	4a2c      	ldr	r2, [pc, #176]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810599c:	f043 0304 	orr.w	r3, r3, #4
 81059a0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81059a2:	f3bf 8f4f 	dsb	sy
}
 81059a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81059a8:	f3bf 8f6f 	isb	sy
}
 81059ac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81059ae:	7afb      	ldrb	r3, [r7, #11]
 81059b0:	2b01      	cmp	r3, #1
 81059b2:	d101      	bne.n	81059b8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81059b4:	bf30      	wfi
 81059b6:	e000      	b.n	81059ba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81059b8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81059ba:	4b24      	ldr	r3, [pc, #144]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81059bc:	691b      	ldr	r3, [r3, #16]
 81059be:	4a23      	ldr	r2, [pc, #140]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81059c0:	f023 0304 	bic.w	r3, r3, #4
 81059c4:	6113      	str	r3, [r2, #16]
 81059c6:	e03c      	b.n	8105a42 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81059c8:	687b      	ldr	r3, [r7, #4]
 81059ca:	2b01      	cmp	r3, #1
 81059cc:	d123      	bne.n	8105a16 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81059ce:	f7fc ffa9 	bl	8102924 <HAL_GetCurrentCPUID>
 81059d2:	4603      	mov	r3, r0
 81059d4:	2b01      	cmp	r3, #1
 81059d6:	d133      	bne.n	8105a40 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81059d8:	4b1b      	ldr	r3, [pc, #108]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 81059da:	695b      	ldr	r3, [r3, #20]
 81059dc:	4a1a      	ldr	r2, [pc, #104]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 81059de:	f023 0302 	bic.w	r3, r3, #2
 81059e2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81059e4:	4b19      	ldr	r3, [pc, #100]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81059e6:	691b      	ldr	r3, [r3, #16]
 81059e8:	4a18      	ldr	r2, [pc, #96]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81059ea:	f043 0304 	orr.w	r3, r3, #4
 81059ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81059f0:	f3bf 8f4f 	dsb	sy
}
 81059f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81059f6:	f3bf 8f6f 	isb	sy
}
 81059fa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81059fc:	7afb      	ldrb	r3, [r7, #11]
 81059fe:	2b01      	cmp	r3, #1
 8105a00:	d101      	bne.n	8105a06 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105a02:	bf30      	wfi
 8105a04:	e000      	b.n	8105a08 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105a06:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105a08:	4b10      	ldr	r3, [pc, #64]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105a0a:	691b      	ldr	r3, [r3, #16]
 8105a0c:	4a0f      	ldr	r2, [pc, #60]	@ (8105a4c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105a0e:	f023 0304 	bic.w	r3, r3, #4
 8105a12:	6113      	str	r3, [r2, #16]
 8105a14:	e015      	b.n	8105a42 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105a16:	f7fc ff85 	bl	8102924 <HAL_GetCurrentCPUID>
 8105a1a:	4603      	mov	r3, r0
 8105a1c:	2b03      	cmp	r3, #3
 8105a1e:	d106      	bne.n	8105a2e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8105a20:	4b09      	ldr	r3, [pc, #36]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105a22:	691b      	ldr	r3, [r3, #16]
 8105a24:	4a08      	ldr	r2, [pc, #32]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105a26:	f023 0304 	bic.w	r3, r3, #4
 8105a2a:	6113      	str	r3, [r2, #16]
 8105a2c:	e009      	b.n	8105a42 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8105a2e:	4b06      	ldr	r3, [pc, #24]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105a30:	695b      	ldr	r3, [r3, #20]
 8105a32:	4a05      	ldr	r2, [pc, #20]	@ (8105a48 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105a34:	f023 0304 	bic.w	r3, r3, #4
 8105a38:	6153      	str	r3, [r2, #20]
 8105a3a:	e002      	b.n	8105a42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105a3c:	bf00      	nop
 8105a3e:	e000      	b.n	8105a42 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105a40:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105a42:	3710      	adds	r7, #16
 8105a44:	46bd      	mov	sp, r7
 8105a46:	bd80      	pop	{r7, pc}
 8105a48:	58024800 	.word	0x58024800
 8105a4c:	e000ed00 	.word	0xe000ed00

08105a50 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105a50:	b580      	push	{r7, lr}
 8105a52:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105a54:	f7fc ff66 	bl	8102924 <HAL_GetCurrentCPUID>
 8105a58:	4603      	mov	r3, r0
 8105a5a:	2b03      	cmp	r3, #3
 8105a5c:	d101      	bne.n	8105a62 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8105a5e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105a60:	e001      	b.n	8105a66 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105a62:	bf40      	sev
    __WFE ();
 8105a64:	bf20      	wfe
}
 8105a66:	bf00      	nop
 8105a68:	bd80      	pop	{r7, pc}
	...

08105a6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8105a6c:	b480      	push	{r7}
 8105a6e:	b089      	sub	sp, #36	@ 0x24
 8105a70:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105a72:	4bb3      	ldr	r3, [pc, #716]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a74:	691b      	ldr	r3, [r3, #16]
 8105a76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8105a7a:	2b18      	cmp	r3, #24
 8105a7c:	f200 8155 	bhi.w	8105d2a <HAL_RCC_GetSysClockFreq+0x2be>
 8105a80:	a201      	add	r2, pc, #4	@ (adr r2, 8105a88 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105a86:	bf00      	nop
 8105a88:	08105aed 	.word	0x08105aed
 8105a8c:	08105d2b 	.word	0x08105d2b
 8105a90:	08105d2b 	.word	0x08105d2b
 8105a94:	08105d2b 	.word	0x08105d2b
 8105a98:	08105d2b 	.word	0x08105d2b
 8105a9c:	08105d2b 	.word	0x08105d2b
 8105aa0:	08105d2b 	.word	0x08105d2b
 8105aa4:	08105d2b 	.word	0x08105d2b
 8105aa8:	08105b13 	.word	0x08105b13
 8105aac:	08105d2b 	.word	0x08105d2b
 8105ab0:	08105d2b 	.word	0x08105d2b
 8105ab4:	08105d2b 	.word	0x08105d2b
 8105ab8:	08105d2b 	.word	0x08105d2b
 8105abc:	08105d2b 	.word	0x08105d2b
 8105ac0:	08105d2b 	.word	0x08105d2b
 8105ac4:	08105d2b 	.word	0x08105d2b
 8105ac8:	08105b19 	.word	0x08105b19
 8105acc:	08105d2b 	.word	0x08105d2b
 8105ad0:	08105d2b 	.word	0x08105d2b
 8105ad4:	08105d2b 	.word	0x08105d2b
 8105ad8:	08105d2b 	.word	0x08105d2b
 8105adc:	08105d2b 	.word	0x08105d2b
 8105ae0:	08105d2b 	.word	0x08105d2b
 8105ae4:	08105d2b 	.word	0x08105d2b
 8105ae8:	08105b1f 	.word	0x08105b1f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105aec:	4b94      	ldr	r3, [pc, #592]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105aee:	681b      	ldr	r3, [r3, #0]
 8105af0:	f003 0320 	and.w	r3, r3, #32
 8105af4:	2b00      	cmp	r3, #0
 8105af6:	d009      	beq.n	8105b0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105af8:	4b91      	ldr	r3, [pc, #580]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105afa:	681b      	ldr	r3, [r3, #0]
 8105afc:	08db      	lsrs	r3, r3, #3
 8105afe:	f003 0303 	and.w	r3, r3, #3
 8105b02:	4a90      	ldr	r2, [pc, #576]	@ (8105d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105b04:	fa22 f303 	lsr.w	r3, r2, r3
 8105b08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8105b0a:	e111      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8105b0c:	4b8d      	ldr	r3, [pc, #564]	@ (8105d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105b0e:	61bb      	str	r3, [r7, #24]
      break;
 8105b10:	e10e      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105b12:	4b8d      	ldr	r3, [pc, #564]	@ (8105d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105b14:	61bb      	str	r3, [r7, #24]
      break;
 8105b16:	e10b      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105b18:	4b8c      	ldr	r3, [pc, #560]	@ (8105d4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105b1a:	61bb      	str	r3, [r7, #24]
      break;
 8105b1c:	e108      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105b1e:	4b88      	ldr	r3, [pc, #544]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b22:	f003 0303 	and.w	r3, r3, #3
 8105b26:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105b28:	4b85      	ldr	r3, [pc, #532]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105b2c:	091b      	lsrs	r3, r3, #4
 8105b2e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105b32:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105b34:	4b82      	ldr	r3, [pc, #520]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105b38:	f003 0301 	and.w	r3, r3, #1
 8105b3c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105b3e:	4b80      	ldr	r3, [pc, #512]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105b42:	08db      	lsrs	r3, r3, #3
 8105b44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105b48:	68fa      	ldr	r2, [r7, #12]
 8105b4a:	fb02 f303 	mul.w	r3, r2, r3
 8105b4e:	ee07 3a90 	vmov	s15, r3
 8105b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b56:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105b5a:	693b      	ldr	r3, [r7, #16]
 8105b5c:	2b00      	cmp	r3, #0
 8105b5e:	f000 80e1 	beq.w	8105d24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8105b62:	697b      	ldr	r3, [r7, #20]
 8105b64:	2b02      	cmp	r3, #2
 8105b66:	f000 8083 	beq.w	8105c70 <HAL_RCC_GetSysClockFreq+0x204>
 8105b6a:	697b      	ldr	r3, [r7, #20]
 8105b6c:	2b02      	cmp	r3, #2
 8105b6e:	f200 80a1 	bhi.w	8105cb4 <HAL_RCC_GetSysClockFreq+0x248>
 8105b72:	697b      	ldr	r3, [r7, #20]
 8105b74:	2b00      	cmp	r3, #0
 8105b76:	d003      	beq.n	8105b80 <HAL_RCC_GetSysClockFreq+0x114>
 8105b78:	697b      	ldr	r3, [r7, #20]
 8105b7a:	2b01      	cmp	r3, #1
 8105b7c:	d056      	beq.n	8105c2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8105b7e:	e099      	b.n	8105cb4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105b80:	4b6f      	ldr	r3, [pc, #444]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b82:	681b      	ldr	r3, [r3, #0]
 8105b84:	f003 0320 	and.w	r3, r3, #32
 8105b88:	2b00      	cmp	r3, #0
 8105b8a:	d02d      	beq.n	8105be8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b8e:	681b      	ldr	r3, [r3, #0]
 8105b90:	08db      	lsrs	r3, r3, #3
 8105b92:	f003 0303 	and.w	r3, r3, #3
 8105b96:	4a6b      	ldr	r2, [pc, #428]	@ (8105d44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105b98:	fa22 f303 	lsr.w	r3, r2, r3
 8105b9c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b9e:	687b      	ldr	r3, [r7, #4]
 8105ba0:	ee07 3a90 	vmov	s15, r3
 8105ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ba8:	693b      	ldr	r3, [r7, #16]
 8105baa:	ee07 3a90 	vmov	s15, r3
 8105bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bb6:	4b62      	ldr	r3, [pc, #392]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bbe:	ee07 3a90 	vmov	s15, r3
 8105bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105bca:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8105d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105be2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105be6:	e087      	b.n	8105cf8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105be8:	693b      	ldr	r3, [r7, #16]
 8105bea:	ee07 3a90 	vmov	s15, r3
 8105bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bf2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8105d54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bfa:	4b51      	ldr	r3, [pc, #324]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c02:	ee07 3a90 	vmov	s15, r3
 8105c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8105c0e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8105d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105c2a:	e065      	b.n	8105cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c2c:	693b      	ldr	r3, [r7, #16]
 8105c2e:	ee07 3a90 	vmov	s15, r3
 8105c32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c36:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8105d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105c3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c3e:	4b40      	ldr	r3, [pc, #256]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105c42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c46:	ee07 3a90 	vmov	s15, r3
 8105c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105c52:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8105d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105c56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105c62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105c6e:	e043      	b.n	8105cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105c70:	693b      	ldr	r3, [r7, #16]
 8105c72:	ee07 3a90 	vmov	s15, r3
 8105c76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c7a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8105d5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8105c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c82:	4b2f      	ldr	r3, [pc, #188]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c8a:	ee07 3a90 	vmov	s15, r3
 8105c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c92:	ed97 6a02 	vldr	s12, [r7, #8]
 8105c96:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8105d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ca2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105cb2:	e021      	b.n	8105cf8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105cb4:	693b      	ldr	r3, [r7, #16]
 8105cb6:	ee07 3a90 	vmov	s15, r3
 8105cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cbe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8105d58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105cce:	ee07 3a90 	vmov	s15, r3
 8105cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105cd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105cda:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8105d50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ce6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105cf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105cf6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105cf8:	4b11      	ldr	r3, [pc, #68]	@ (8105d40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105cfc:	0a5b      	lsrs	r3, r3, #9
 8105cfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105d02:	3301      	adds	r3, #1
 8105d04:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105d06:	683b      	ldr	r3, [r7, #0]
 8105d08:	ee07 3a90 	vmov	s15, r3
 8105d0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105d10:	edd7 6a07 	vldr	s13, [r7, #28]
 8105d14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105d18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105d1c:	ee17 3a90 	vmov	r3, s15
 8105d20:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8105d22:	e005      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105d24:	2300      	movs	r3, #0
 8105d26:	61bb      	str	r3, [r7, #24]
      break;
 8105d28:	e002      	b.n	8105d30 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105d2a:	4b07      	ldr	r3, [pc, #28]	@ (8105d48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105d2c:	61bb      	str	r3, [r7, #24]
      break;
 8105d2e:	bf00      	nop
  }

  return sysclockfreq;
 8105d30:	69bb      	ldr	r3, [r7, #24]
}
 8105d32:	4618      	mov	r0, r3
 8105d34:	3724      	adds	r7, #36	@ 0x24
 8105d36:	46bd      	mov	sp, r7
 8105d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d3c:	4770      	bx	lr
 8105d3e:	bf00      	nop
 8105d40:	58024400 	.word	0x58024400
 8105d44:	03d09000 	.word	0x03d09000
 8105d48:	003d0900 	.word	0x003d0900
 8105d4c:	017d7840 	.word	0x017d7840
 8105d50:	46000000 	.word	0x46000000
 8105d54:	4c742400 	.word	0x4c742400
 8105d58:	4a742400 	.word	0x4a742400
 8105d5c:	4bbebc20 	.word	0x4bbebc20

08105d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105d60:	b580      	push	{r7, lr}
 8105d62:	b082      	sub	sp, #8
 8105d64:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105d66:	f7ff fe81 	bl	8105a6c <HAL_RCC_GetSysClockFreq>
 8105d6a:	4602      	mov	r2, r0
 8105d6c:	4b11      	ldr	r3, [pc, #68]	@ (8105db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105d6e:	699b      	ldr	r3, [r3, #24]
 8105d70:	0a1b      	lsrs	r3, r3, #8
 8105d72:	f003 030f 	and.w	r3, r3, #15
 8105d76:	4910      	ldr	r1, [pc, #64]	@ (8105db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105d78:	5ccb      	ldrb	r3, [r1, r3]
 8105d7a:	f003 031f 	and.w	r3, r3, #31
 8105d7e:	fa22 f303 	lsr.w	r3, r2, r3
 8105d82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105d84:	4b0b      	ldr	r3, [pc, #44]	@ (8105db4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105d86:	699b      	ldr	r3, [r3, #24]
 8105d88:	f003 030f 	and.w	r3, r3, #15
 8105d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8105db8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105d8e:	5cd3      	ldrb	r3, [r2, r3]
 8105d90:	f003 031f 	and.w	r3, r3, #31
 8105d94:	687a      	ldr	r2, [r7, #4]
 8105d96:	fa22 f303 	lsr.w	r3, r2, r3
 8105d9a:	4a08      	ldr	r2, [pc, #32]	@ (8105dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105d9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105d9e:	4b07      	ldr	r3, [pc, #28]	@ (8105dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105da0:	681b      	ldr	r3, [r3, #0]
 8105da2:	4a07      	ldr	r2, [pc, #28]	@ (8105dc0 <HAL_RCC_GetHCLKFreq+0x60>)
 8105da4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105da6:	4b05      	ldr	r3, [pc, #20]	@ (8105dbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8105da8:	681b      	ldr	r3, [r3, #0]
}
 8105daa:	4618      	mov	r0, r3
 8105dac:	3708      	adds	r7, #8
 8105dae:	46bd      	mov	sp, r7
 8105db0:	bd80      	pop	{r7, pc}
 8105db2:	bf00      	nop
 8105db4:	58024400 	.word	0x58024400
 8105db8:	0810fe48 	.word	0x0810fe48
 8105dbc:	10000128 	.word	0x10000128
 8105dc0:	10000124 	.word	0x10000124

08105dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105dc4:	b580      	push	{r7, lr}
 8105dc6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105dc8:	f7ff ffca 	bl	8105d60 <HAL_RCC_GetHCLKFreq>
 8105dcc:	4602      	mov	r2, r0
 8105dce:	4b06      	ldr	r3, [pc, #24]	@ (8105de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105dd0:	69db      	ldr	r3, [r3, #28]
 8105dd2:	091b      	lsrs	r3, r3, #4
 8105dd4:	f003 0307 	and.w	r3, r3, #7
 8105dd8:	4904      	ldr	r1, [pc, #16]	@ (8105dec <HAL_RCC_GetPCLK1Freq+0x28>)
 8105dda:	5ccb      	ldrb	r3, [r1, r3]
 8105ddc:	f003 031f 	and.w	r3, r3, #31
 8105de0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105de4:	4618      	mov	r0, r3
 8105de6:	bd80      	pop	{r7, pc}
 8105de8:	58024400 	.word	0x58024400
 8105dec:	0810fe48 	.word	0x0810fe48

08105df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8105df0:	b580      	push	{r7, lr}
 8105df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8105df4:	f7ff ffb4 	bl	8105d60 <HAL_RCC_GetHCLKFreq>
 8105df8:	4602      	mov	r2, r0
 8105dfa:	4b06      	ldr	r3, [pc, #24]	@ (8105e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8105dfc:	69db      	ldr	r3, [r3, #28]
 8105dfe:	0a1b      	lsrs	r3, r3, #8
 8105e00:	f003 0307 	and.w	r3, r3, #7
 8105e04:	4904      	ldr	r1, [pc, #16]	@ (8105e18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8105e06:	5ccb      	ldrb	r3, [r1, r3]
 8105e08:	f003 031f 	and.w	r3, r3, #31
 8105e0c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8105e10:	4618      	mov	r0, r3
 8105e12:	bd80      	pop	{r7, pc}
 8105e14:	58024400 	.word	0x58024400
 8105e18:	0810fe48 	.word	0x0810fe48

08105e1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105e1c:	b480      	push	{r7}
 8105e1e:	b083      	sub	sp, #12
 8105e20:	af00      	add	r7, sp, #0
 8105e22:	6078      	str	r0, [r7, #4]
 8105e24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8105e26:	687b      	ldr	r3, [r7, #4]
 8105e28:	223f      	movs	r2, #63	@ 0x3f
 8105e2a:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e2e:	691b      	ldr	r3, [r3, #16]
 8105e30:	f003 0207 	and.w	r2, r3, #7
 8105e34:	687b      	ldr	r3, [r7, #4]
 8105e36:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8105e38:	4b17      	ldr	r3, [pc, #92]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e3a:	699b      	ldr	r3, [r3, #24]
 8105e3c:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8105e40:	687b      	ldr	r3, [r7, #4]
 8105e42:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105e44:	4b14      	ldr	r3, [pc, #80]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e46:	699b      	ldr	r3, [r3, #24]
 8105e48:	f003 020f 	and.w	r2, r3, #15
 8105e4c:	687b      	ldr	r3, [r7, #4]
 8105e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8105e50:	4b11      	ldr	r3, [pc, #68]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e52:	699b      	ldr	r3, [r3, #24]
 8105e54:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105e58:	687b      	ldr	r3, [r7, #4]
 8105e5a:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e5e:	69db      	ldr	r3, [r3, #28]
 8105e60:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105e64:	687b      	ldr	r3, [r7, #4]
 8105e66:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105e68:	4b0b      	ldr	r3, [pc, #44]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e6a:	69db      	ldr	r3, [r3, #28]
 8105e6c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8105e70:	687b      	ldr	r3, [r7, #4]
 8105e72:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105e74:	4b08      	ldr	r3, [pc, #32]	@ (8105e98 <HAL_RCC_GetClockConfig+0x7c>)
 8105e76:	6a1b      	ldr	r3, [r3, #32]
 8105e78:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105e7c:	687b      	ldr	r3, [r7, #4]
 8105e7e:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105e80:	4b06      	ldr	r3, [pc, #24]	@ (8105e9c <HAL_RCC_GetClockConfig+0x80>)
 8105e82:	681b      	ldr	r3, [r3, #0]
 8105e84:	f003 020f 	and.w	r2, r3, #15
 8105e88:	683b      	ldr	r3, [r7, #0]
 8105e8a:	601a      	str	r2, [r3, #0]
}
 8105e8c:	bf00      	nop
 8105e8e:	370c      	adds	r7, #12
 8105e90:	46bd      	mov	sp, r7
 8105e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105e96:	4770      	bx	lr
 8105e98:	58024400 	.word	0x58024400
 8105e9c:	52002000 	.word	0x52002000

08105ea0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105ea4:	b0cc      	sub	sp, #304	@ 0x130
 8105ea6:	af00      	add	r7, sp, #0
 8105ea8:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105eac:	2300      	movs	r3, #0
 8105eae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105eb2:	2300      	movs	r3, #0
 8105eb4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ec0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8105ec4:	2500      	movs	r5, #0
 8105ec6:	ea54 0305 	orrs.w	r3, r4, r5
 8105eca:	d049      	beq.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105ecc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ed0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105ed2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105ed6:	d02f      	beq.n	8105f38 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105ed8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105edc:	d828      	bhi.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105ede:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105ee2:	d01a      	beq.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105ee4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105ee8:	d822      	bhi.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105eea:	2b00      	cmp	r3, #0
 8105eec:	d003      	beq.n	8105ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105eee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105ef2:	d007      	beq.n	8105f04 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105ef4:	e01c      	b.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105ef6:	4bb8      	ldr	r3, [pc, #736]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105efa:	4ab7      	ldr	r2, [pc, #732]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105f00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105f02:	e01a      	b.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105f04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f08:	3308      	adds	r3, #8
 8105f0a:	2102      	movs	r1, #2
 8105f0c:	4618      	mov	r0, r3
 8105f0e:	f001 fccf 	bl	81078b0 <RCCEx_PLL2_Config>
 8105f12:	4603      	mov	r3, r0
 8105f14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105f18:	e00f      	b.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105f1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f1e:	3328      	adds	r3, #40	@ 0x28
 8105f20:	2102      	movs	r1, #2
 8105f22:	4618      	mov	r0, r3
 8105f24:	f001 fd76 	bl	8107a14 <RCCEx_PLL3_Config>
 8105f28:	4603      	mov	r3, r0
 8105f2a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105f2e:	e004      	b.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f30:	2301      	movs	r3, #1
 8105f32:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105f36:	e000      	b.n	8105f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105f38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f3e:	2b00      	cmp	r3, #0
 8105f40:	d10a      	bne.n	8105f58 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105f42:	4ba5      	ldr	r3, [pc, #660]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105f4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f4e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105f50:	4aa1      	ldr	r2, [pc, #644]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f52:	430b      	orrs	r3, r1
 8105f54:	6513      	str	r3, [r2, #80]	@ 0x50
 8105f56:	e003      	b.n	8105f60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105f5c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105f60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f68:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105f6c:	f04f 0900 	mov.w	r9, #0
 8105f70:	ea58 0309 	orrs.w	r3, r8, r9
 8105f74:	d047      	beq.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105f7c:	2b04      	cmp	r3, #4
 8105f7e:	d82a      	bhi.n	8105fd6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105f80:	a201      	add	r2, pc, #4	@ (adr r2, 8105f88 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105f86:	bf00      	nop
 8105f88:	08105f9d 	.word	0x08105f9d
 8105f8c:	08105fab 	.word	0x08105fab
 8105f90:	08105fc1 	.word	0x08105fc1
 8105f94:	08105fdf 	.word	0x08105fdf
 8105f98:	08105fdf 	.word	0x08105fdf
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f9c:	4b8e      	ldr	r3, [pc, #568]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105fa0:	4a8d      	ldr	r2, [pc, #564]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105fa6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fa8:	e01a      	b.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fae:	3308      	adds	r3, #8
 8105fb0:	2100      	movs	r1, #0
 8105fb2:	4618      	mov	r0, r3
 8105fb4:	f001 fc7c 	bl	81078b0 <RCCEx_PLL2_Config>
 8105fb8:	4603      	mov	r3, r0
 8105fba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fbe:	e00f      	b.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105fc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105fc4:	3328      	adds	r3, #40	@ 0x28
 8105fc6:	2100      	movs	r1, #0
 8105fc8:	4618      	mov	r0, r3
 8105fca:	f001 fd23 	bl	8107a14 <RCCEx_PLL3_Config>
 8105fce:	4603      	mov	r3, r0
 8105fd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fd4:	e004      	b.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105fd6:	2301      	movs	r3, #1
 8105fd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8105fdc:	e000      	b.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105fde:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105fe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8105fe4:	2b00      	cmp	r3, #0
 8105fe6:	d10a      	bne.n	8105ffe <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105fe8:	4b7b      	ldr	r3, [pc, #492]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105fec:	f023 0107 	bic.w	r1, r3, #7
 8105ff0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8105ff4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ff6:	4a78      	ldr	r2, [pc, #480]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ff8:	430b      	orrs	r3, r1
 8105ffa:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ffc:	e003      	b.n	8106006 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ffe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106002:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8106006:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810600a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810600e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8106012:	f04f 0b00 	mov.w	fp, #0
 8106016:	ea5a 030b 	orrs.w	r3, sl, fp
 810601a:	d04c      	beq.n	81060b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 810601c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106020:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8106022:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106026:	d030      	beq.n	810608a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8106028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810602c:	d829      	bhi.n	8106082 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810602e:	2bc0      	cmp	r3, #192	@ 0xc0
 8106030:	d02d      	beq.n	810608e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8106032:	2bc0      	cmp	r3, #192	@ 0xc0
 8106034:	d825      	bhi.n	8106082 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8106036:	2b80      	cmp	r3, #128	@ 0x80
 8106038:	d018      	beq.n	810606c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 810603a:	2b80      	cmp	r3, #128	@ 0x80
 810603c:	d821      	bhi.n	8106082 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810603e:	2b00      	cmp	r3, #0
 8106040:	d002      	beq.n	8106048 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8106042:	2b40      	cmp	r3, #64	@ 0x40
 8106044:	d007      	beq.n	8106056 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8106046:	e01c      	b.n	8106082 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106048:	4b63      	ldr	r3, [pc, #396]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810604a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810604c:	4a62      	ldr	r2, [pc, #392]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810604e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106052:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106054:	e01c      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810605a:	3308      	adds	r3, #8
 810605c:	2100      	movs	r1, #0
 810605e:	4618      	mov	r0, r3
 8106060:	f001 fc26 	bl	81078b0 <RCCEx_PLL2_Config>
 8106064:	4603      	mov	r3, r0
 8106066:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810606a:	e011      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810606c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106070:	3328      	adds	r3, #40	@ 0x28
 8106072:	2100      	movs	r1, #0
 8106074:	4618      	mov	r0, r3
 8106076:	f001 fccd 	bl	8107a14 <RCCEx_PLL3_Config>
 810607a:	4603      	mov	r3, r0
 810607c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8106080:	e006      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106082:	2301      	movs	r3, #1
 8106084:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106088:	e002      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810608a:	bf00      	nop
 810608c:	e000      	b.n	8106090 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810608e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106090:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106094:	2b00      	cmp	r3, #0
 8106096:	d10a      	bne.n	81060ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8106098:	4b4f      	ldr	r3, [pc, #316]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810609a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810609c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 81060a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81060a6:	4a4c      	ldr	r2, [pc, #304]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81060a8:	430b      	orrs	r3, r1
 81060aa:	6513      	str	r3, [r2, #80]	@ 0x50
 81060ac:	e003      	b.n	81060b6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81060ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81060b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 81060b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81060be:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 81060c2:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 81060c6:	2300      	movs	r3, #0
 81060c8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 81060cc:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 81060d0:	460b      	mov	r3, r1
 81060d2:	4313      	orrs	r3, r2
 81060d4:	d053      	beq.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 81060d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81060da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81060de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81060e2:	d035      	beq.n	8106150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81060e4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81060e8:	d82e      	bhi.n	8106148 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81060ea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81060ee:	d031      	beq.n	8106154 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81060f0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81060f4:	d828      	bhi.n	8106148 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81060f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81060fa:	d01a      	beq.n	8106132 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81060fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8106100:	d822      	bhi.n	8106148 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8106102:	2b00      	cmp	r3, #0
 8106104:	d003      	beq.n	810610e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8106106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810610a:	d007      	beq.n	810611c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 810610c:	e01c      	b.n	8106148 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810610e:	4b32      	ldr	r3, [pc, #200]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106112:	4a31      	ldr	r2, [pc, #196]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106118:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810611a:	e01c      	b.n	8106156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810611c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106120:	3308      	adds	r3, #8
 8106122:	2100      	movs	r1, #0
 8106124:	4618      	mov	r0, r3
 8106126:	f001 fbc3 	bl	81078b0 <RCCEx_PLL2_Config>
 810612a:	4603      	mov	r3, r0
 810612c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8106130:	e011      	b.n	8106156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106132:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106136:	3328      	adds	r3, #40	@ 0x28
 8106138:	2100      	movs	r1, #0
 810613a:	4618      	mov	r0, r3
 810613c:	f001 fc6a 	bl	8107a14 <RCCEx_PLL3_Config>
 8106140:	4603      	mov	r3, r0
 8106142:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106146:	e006      	b.n	8106156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106148:	2301      	movs	r3, #1
 810614a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810614e:	e002      	b.n	8106156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106150:	bf00      	nop
 8106152:	e000      	b.n	8106156 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106156:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810615a:	2b00      	cmp	r3, #0
 810615c:	d10b      	bne.n	8106176 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810615e:	4b1e      	ldr	r3, [pc, #120]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106162:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8106166:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810616a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810616e:	4a1a      	ldr	r2, [pc, #104]	@ (81061d8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106170:	430b      	orrs	r3, r1
 8106172:	6593      	str	r3, [r2, #88]	@ 0x58
 8106174:	e003      	b.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106176:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810617a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810617e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106186:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810618a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 810618e:	2300      	movs	r3, #0
 8106190:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8106194:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8106198:	460b      	mov	r3, r1
 810619a:	4313      	orrs	r3, r2
 810619c:	d056      	beq.n	810624c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810619e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81061a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81061aa:	d038      	beq.n	810621e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 81061ac:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 81061b0:	d831      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81061b2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81061b6:	d034      	beq.n	8106222 <HAL_RCCEx_PeriphCLKConfig+0x382>
 81061b8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81061bc:	d82b      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81061be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81061c2:	d01d      	beq.n	8106200 <HAL_RCCEx_PeriphCLKConfig+0x360>
 81061c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81061c8:	d825      	bhi.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81061ca:	2b00      	cmp	r3, #0
 81061cc:	d006      	beq.n	81061dc <HAL_RCCEx_PeriphCLKConfig+0x33c>
 81061ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81061d2:	d00a      	beq.n	81061ea <HAL_RCCEx_PeriphCLKConfig+0x34a>
 81061d4:	e01f      	b.n	8106216 <HAL_RCCEx_PeriphCLKConfig+0x376>
 81061d6:	bf00      	nop
 81061d8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061dc:	4ba2      	ldr	r3, [pc, #648]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81061de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81061e0:	4aa1      	ldr	r2, [pc, #644]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81061e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81061e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81061e8:	e01c      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81061ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81061ee:	3308      	adds	r3, #8
 81061f0:	2100      	movs	r1, #0
 81061f2:	4618      	mov	r0, r3
 81061f4:	f001 fb5c 	bl	81078b0 <RCCEx_PLL2_Config>
 81061f8:	4603      	mov	r3, r0
 81061fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81061fe:	e011      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106200:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106204:	3328      	adds	r3, #40	@ 0x28
 8106206:	2100      	movs	r1, #0
 8106208:	4618      	mov	r0, r3
 810620a:	f001 fc03 	bl	8107a14 <RCCEx_PLL3_Config>
 810620e:	4603      	mov	r3, r0
 8106210:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8106214:	e006      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8106216:	2301      	movs	r3, #1
 8106218:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810621c:	e002      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 810621e:	bf00      	nop
 8106220:	e000      	b.n	8106224 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8106222:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106224:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106228:	2b00      	cmp	r3, #0
 810622a:	d10b      	bne.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 810622c:	4b8e      	ldr	r3, [pc, #568]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810622e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106230:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8106234:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106238:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 810623c:	4a8a      	ldr	r2, [pc, #552]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810623e:	430b      	orrs	r3, r1
 8106240:	6593      	str	r3, [r2, #88]	@ 0x58
 8106242:	e003      	b.n	810624c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106244:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106248:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 810624c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106254:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8106258:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810625c:	2300      	movs	r3, #0
 810625e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8106262:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8106266:	460b      	mov	r3, r1
 8106268:	4313      	orrs	r3, r2
 810626a:	d03a      	beq.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 810626c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106272:	2b30      	cmp	r3, #48	@ 0x30
 8106274:	d01f      	beq.n	81062b6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8106276:	2b30      	cmp	r3, #48	@ 0x30
 8106278:	d819      	bhi.n	81062ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810627a:	2b20      	cmp	r3, #32
 810627c:	d00c      	beq.n	8106298 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810627e:	2b20      	cmp	r3, #32
 8106280:	d815      	bhi.n	81062ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106282:	2b00      	cmp	r3, #0
 8106284:	d019      	beq.n	81062ba <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8106286:	2b10      	cmp	r3, #16
 8106288:	d111      	bne.n	81062ae <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810628a:	4b77      	ldr	r3, [pc, #476]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810628e:	4a76      	ldr	r2, [pc, #472]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106290:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106296:	e011      	b.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810629c:	3308      	adds	r3, #8
 810629e:	2102      	movs	r1, #2
 81062a0:	4618      	mov	r0, r3
 81062a2:	f001 fb05 	bl	81078b0 <RCCEx_PLL2_Config>
 81062a6:	4603      	mov	r3, r0
 81062a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 81062ac:	e006      	b.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81062ae:	2301      	movs	r3, #1
 81062b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81062b4:	e002      	b.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81062b6:	bf00      	nop
 81062b8:	e000      	b.n	81062bc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 81062ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 81062bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062c0:	2b00      	cmp	r3, #0
 81062c2:	d10a      	bne.n	81062da <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 81062c4:	4b68      	ldr	r3, [pc, #416]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81062c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81062c8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 81062cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81062d2:	4a65      	ldr	r2, [pc, #404]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81062d4:	430b      	orrs	r3, r1
 81062d6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81062d8:	e003      	b.n	81062e2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81062da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81062de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81062e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81062e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81062ea:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81062ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 81062f2:	2300      	movs	r3, #0
 81062f4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 81062f8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 81062fc:	460b      	mov	r3, r1
 81062fe:	4313      	orrs	r3, r2
 8106300:	d051      	beq.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8106302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106306:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106308:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810630c:	d035      	beq.n	810637a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 810630e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106312:	d82e      	bhi.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106314:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8106318:	d031      	beq.n	810637e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 810631a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 810631e:	d828      	bhi.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8106320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106324:	d01a      	beq.n	810635c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8106326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810632a:	d822      	bhi.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 810632c:	2b00      	cmp	r3, #0
 810632e:	d003      	beq.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8106330:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106334:	d007      	beq.n	8106346 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8106336:	e01c      	b.n	8106372 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106338:	4b4b      	ldr	r3, [pc, #300]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810633a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810633c:	4a4a      	ldr	r2, [pc, #296]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810633e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106342:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106344:	e01c      	b.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810634a:	3308      	adds	r3, #8
 810634c:	2100      	movs	r1, #0
 810634e:	4618      	mov	r0, r3
 8106350:	f001 faae 	bl	81078b0 <RCCEx_PLL2_Config>
 8106354:	4603      	mov	r3, r0
 8106356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810635a:	e011      	b.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810635c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106360:	3328      	adds	r3, #40	@ 0x28
 8106362:	2100      	movs	r1, #0
 8106364:	4618      	mov	r0, r3
 8106366:	f001 fb55 	bl	8107a14 <RCCEx_PLL3_Config>
 810636a:	4603      	mov	r3, r0
 810636c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106370:	e006      	b.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106372:	2301      	movs	r3, #1
 8106374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106378:	e002      	b.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810637a:	bf00      	nop
 810637c:	e000      	b.n	8106380 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810637e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106380:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106384:	2b00      	cmp	r3, #0
 8106386:	d10a      	bne.n	810639e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8106388:	4b37      	ldr	r3, [pc, #220]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810638a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810638c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106390:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106394:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106396:	4a34      	ldr	r2, [pc, #208]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106398:	430b      	orrs	r3, r1
 810639a:	6513      	str	r3, [r2, #80]	@ 0x50
 810639c:	e003      	b.n	81063a6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810639e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81063a2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81063a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81063ae:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 81063b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81063b6:	2300      	movs	r3, #0
 81063b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81063bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81063c0:	460b      	mov	r3, r1
 81063c2:	4313      	orrs	r3, r2
 81063c4:	d056      	beq.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 81063c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81063ca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81063cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81063d0:	d033      	beq.n	810643a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 81063d2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 81063d6:	d82c      	bhi.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81063d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81063dc:	d02f      	beq.n	810643e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81063de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81063e2:	d826      	bhi.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81063e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81063e8:	d02b      	beq.n	8106442 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81063ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81063ee:	d820      	bhi.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81063f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063f4:	d012      	beq.n	810641c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81063f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81063fa:	d81a      	bhi.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81063fc:	2b00      	cmp	r3, #0
 81063fe:	d022      	beq.n	8106446 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8106400:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106404:	d115      	bne.n	8106432 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106406:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810640a:	3308      	adds	r3, #8
 810640c:	2101      	movs	r1, #1
 810640e:	4618      	mov	r0, r3
 8106410:	f001 fa4e 	bl	81078b0 <RCCEx_PLL2_Config>
 8106414:	4603      	mov	r3, r0
 8106416:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 810641a:	e015      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810641c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106420:	3328      	adds	r3, #40	@ 0x28
 8106422:	2101      	movs	r1, #1
 8106424:	4618      	mov	r0, r3
 8106426:	f001 faf5 	bl	8107a14 <RCCEx_PLL3_Config>
 810642a:	4603      	mov	r3, r0
 810642c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8106430:	e00a      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106432:	2301      	movs	r3, #1
 8106434:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106438:	e006      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810643a:	bf00      	nop
 810643c:	e004      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810643e:	bf00      	nop
 8106440:	e002      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106442:	bf00      	nop
 8106444:	e000      	b.n	8106448 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106446:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106448:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810644c:	2b00      	cmp	r3, #0
 810644e:	d10d      	bne.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106450:	4b05      	ldr	r3, [pc, #20]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106452:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106454:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8106458:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810645c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810645e:	4a02      	ldr	r2, [pc, #8]	@ (8106468 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106460:	430b      	orrs	r3, r1
 8106462:	6513      	str	r3, [r2, #80]	@ 0x50
 8106464:	e006      	b.n	8106474 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8106466:	bf00      	nop
 8106468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 810646c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106470:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106474:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106478:	e9d3 2300 	ldrd	r2, r3, [r3]
 810647c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106480:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8106484:	2300      	movs	r3, #0
 8106486:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 810648a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810648e:	460b      	mov	r3, r1
 8106490:	4313      	orrs	r3, r2
 8106492:	d055      	beq.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106498:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810649c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81064a0:	d033      	beq.n	810650a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 81064a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81064a6:	d82c      	bhi.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81064ac:	d02f      	beq.n	810650e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 81064ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81064b2:	d826      	bhi.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81064b4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81064b8:	d02b      	beq.n	8106512 <HAL_RCCEx_PeriphCLKConfig+0x672>
 81064ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81064be:	d820      	bhi.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81064c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81064c4:	d012      	beq.n	81064ec <HAL_RCCEx_PeriphCLKConfig+0x64c>
 81064c6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81064ca:	d81a      	bhi.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x662>
 81064cc:	2b00      	cmp	r3, #0
 81064ce:	d022      	beq.n	8106516 <HAL_RCCEx_PeriphCLKConfig+0x676>
 81064d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81064d4:	d115      	bne.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81064d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064da:	3308      	adds	r3, #8
 81064dc:	2101      	movs	r1, #1
 81064de:	4618      	mov	r0, r3
 81064e0:	f001 f9e6 	bl	81078b0 <RCCEx_PLL2_Config>
 81064e4:	4603      	mov	r3, r0
 81064e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81064ea:	e015      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81064ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81064f0:	3328      	adds	r3, #40	@ 0x28
 81064f2:	2101      	movs	r1, #1
 81064f4:	4618      	mov	r0, r3
 81064f6:	f001 fa8d 	bl	8107a14 <RCCEx_PLL3_Config>
 81064fa:	4603      	mov	r3, r0
 81064fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8106500:	e00a      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8106502:	2301      	movs	r3, #1
 8106504:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106508:	e006      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810650a:	bf00      	nop
 810650c:	e004      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 810650e:	bf00      	nop
 8106510:	e002      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106512:	bf00      	nop
 8106514:	e000      	b.n	8106518 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8106516:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106518:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810651c:	2b00      	cmp	r3, #0
 810651e:	d10b      	bne.n	8106538 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8106520:	4bb7      	ldr	r3, [pc, #732]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106524:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810652c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106530:	4ab3      	ldr	r2, [pc, #716]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106532:	430b      	orrs	r3, r1
 8106534:	6593      	str	r3, [r2, #88]	@ 0x58
 8106536:	e003      	b.n	8106540 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810653c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8106540:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106548:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 810654c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106550:	2300      	movs	r3, #0
 8106552:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8106556:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810655a:	460b      	mov	r3, r1
 810655c:	4313      	orrs	r3, r2
 810655e:	d02a      	beq.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8106560:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106566:	2b00      	cmp	r3, #0
 8106568:	d011      	beq.n	810658e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 810656a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810656e:	d10a      	bne.n	8106586 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106574:	3308      	adds	r3, #8
 8106576:	2101      	movs	r1, #1
 8106578:	4618      	mov	r0, r3
 810657a:	f001 f999 	bl	81078b0 <RCCEx_PLL2_Config>
 810657e:	4603      	mov	r3, r0
 8106580:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8106584:	e004      	b.n	8106590 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106586:	2301      	movs	r3, #1
 8106588:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810658c:	e000      	b.n	8106590 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 810658e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106590:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106594:	2b00      	cmp	r3, #0
 8106596:	d10a      	bne.n	81065ae <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8106598:	4b99      	ldr	r3, [pc, #612]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810659a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810659c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 81065a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81065a6:	4a96      	ldr	r2, [pc, #600]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81065a8:	430b      	orrs	r3, r1
 81065aa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81065ac:	e003      	b.n	81065b6 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81065ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81065b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81065b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81065be:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 81065c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 81065c6:	2300      	movs	r3, #0
 81065c8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 81065cc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 81065d0:	460b      	mov	r3, r1
 81065d2:	4313      	orrs	r3, r2
 81065d4:	d037      	beq.n	8106646 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 81065d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81065dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81065e0:	d00e      	beq.n	8106600 <HAL_RCCEx_PeriphCLKConfig+0x760>
 81065e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81065e6:	d816      	bhi.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x776>
 81065e8:	2b00      	cmp	r3, #0
 81065ea:	d018      	beq.n	810661e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 81065ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81065f0:	d111      	bne.n	8106616 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81065f2:	4b83      	ldr	r3, [pc, #524]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81065f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81065f6:	4a82      	ldr	r2, [pc, #520]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81065f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81065fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 81065fe:	e00f      	b.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106600:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106604:	3308      	adds	r3, #8
 8106606:	2101      	movs	r1, #1
 8106608:	4618      	mov	r0, r3
 810660a:	f001 f951 	bl	81078b0 <RCCEx_PLL2_Config>
 810660e:	4603      	mov	r3, r0
 8106610:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106614:	e004      	b.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106616:	2301      	movs	r3, #1
 8106618:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810661c:	e000      	b.n	8106620 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 810661e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106620:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106624:	2b00      	cmp	r3, #0
 8106626:	d10a      	bne.n	810663e <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106628:	4b75      	ldr	r3, [pc, #468]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810662a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810662c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106630:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106634:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106636:	4a72      	ldr	r2, [pc, #456]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106638:	430b      	orrs	r3, r1
 810663a:	6513      	str	r3, [r2, #80]	@ 0x50
 810663c:	e003      	b.n	8106646 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810663e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106642:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106646:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810664a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810664e:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8106652:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8106656:	2300      	movs	r3, #0
 8106658:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 810665c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8106660:	460b      	mov	r3, r1
 8106662:	4313      	orrs	r3, r2
 8106664:	d03a      	beq.n	81066dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8106666:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810666a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810666c:	2b03      	cmp	r3, #3
 810666e:	d81d      	bhi.n	81066ac <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8106670:	a201      	add	r2, pc, #4	@ (adr r2, 8106678 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8106672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106676:	bf00      	nop
 8106678:	081066b5 	.word	0x081066b5
 810667c:	08106689 	.word	0x08106689
 8106680:	08106697 	.word	0x08106697
 8106684:	081066b5 	.word	0x081066b5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106688:	4b5d      	ldr	r3, [pc, #372]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810668a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810668c:	4a5c      	ldr	r2, [pc, #368]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810668e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106692:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8106694:	e00f      	b.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106696:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810669a:	3308      	adds	r3, #8
 810669c:	2102      	movs	r1, #2
 810669e:	4618      	mov	r0, r3
 81066a0:	f001 f906 	bl	81078b0 <RCCEx_PLL2_Config>
 81066a4:	4603      	mov	r3, r0
 81066a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 81066aa:	e004      	b.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81066ac:	2301      	movs	r3, #1
 81066ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81066b2:	e000      	b.n	81066b6 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 81066b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81066b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066ba:	2b00      	cmp	r3, #0
 81066bc:	d10a      	bne.n	81066d4 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81066be:	4b50      	ldr	r3, [pc, #320]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81066c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81066c2:	f023 0103 	bic.w	r1, r3, #3
 81066c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81066cc:	4a4c      	ldr	r2, [pc, #304]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81066ce:	430b      	orrs	r3, r1
 81066d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81066d2:	e003      	b.n	81066dc <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81066d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81066d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81066dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81066e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81066e4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 81066e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 81066ec:	2300      	movs	r3, #0
 81066ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 81066f2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 81066f6:	460b      	mov	r3, r1
 81066f8:	4313      	orrs	r3, r2
 81066fa:	f000 80a0 	beq.w	810683e <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 81066fe:	4b41      	ldr	r3, [pc, #260]	@ (8106804 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	4a40      	ldr	r2, [pc, #256]	@ (8106804 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8106704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106708:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810670a:	f7fc f81f 	bl	810274c <HAL_GetTick>
 810670e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106712:	e00b      	b.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106714:	f7fc f81a 	bl	810274c <HAL_GetTick>
 8106718:	4602      	mov	r2, r0
 810671a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 810671e:	1ad3      	subs	r3, r2, r3
 8106720:	2b64      	cmp	r3, #100	@ 0x64
 8106722:	d903      	bls.n	810672c <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8106724:	2303      	movs	r3, #3
 8106726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810672a:	e005      	b.n	8106738 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810672c:	4b35      	ldr	r3, [pc, #212]	@ (8106804 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 810672e:	681b      	ldr	r3, [r3, #0]
 8106730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106734:	2b00      	cmp	r3, #0
 8106736:	d0ed      	beq.n	8106714 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8106738:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810673c:	2b00      	cmp	r3, #0
 810673e:	d17a      	bne.n	8106836 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8106740:	4b2f      	ldr	r3, [pc, #188]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106742:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106744:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106748:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810674c:	4053      	eors	r3, r2
 810674e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106752:	2b00      	cmp	r3, #0
 8106754:	d015      	beq.n	8106782 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8106756:	4b2a      	ldr	r3, [pc, #168]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810675a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810675e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8106762:	4b27      	ldr	r3, [pc, #156]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106764:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106766:	4a26      	ldr	r2, [pc, #152]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810676c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810676e:	4b24      	ldr	r3, [pc, #144]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106772:	4a23      	ldr	r2, [pc, #140]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8106774:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8106778:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810677a:	4a21      	ldr	r2, [pc, #132]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 810677c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8106780:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8106782:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106786:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 810678a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810678e:	d118      	bne.n	81067c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8106790:	f7fb ffdc 	bl	810274c <HAL_GetTick>
 8106794:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106798:	e00d      	b.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810679a:	f7fb ffd7 	bl	810274c <HAL_GetTick>
 810679e:	4602      	mov	r2, r0
 81067a0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 81067a4:	1ad2      	subs	r2, r2, r3
 81067a6:	f241 3388 	movw	r3, #5000	@ 0x1388
 81067aa:	429a      	cmp	r2, r3
 81067ac:	d903      	bls.n	81067b6 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 81067ae:	2303      	movs	r3, #3
 81067b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 81067b4:	e005      	b.n	81067c2 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81067b6:	4b12      	ldr	r3, [pc, #72]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81067b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81067ba:	f003 0302 	and.w	r3, r3, #2
 81067be:	2b00      	cmp	r3, #0
 81067c0:	d0eb      	beq.n	810679a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 81067c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81067c6:	2b00      	cmp	r3, #0
 81067c8:	d130      	bne.n	810682c <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81067ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81067d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81067d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81067da:	d115      	bne.n	8106808 <HAL_RCCEx_PeriphCLKConfig+0x968>
 81067dc:	4b08      	ldr	r3, [pc, #32]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81067de:	691b      	ldr	r3, [r3, #16]
 81067e0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81067e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81067e8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81067ec:	091b      	lsrs	r3, r3, #4
 81067ee:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81067f2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81067f6:	4a02      	ldr	r2, [pc, #8]	@ (8106800 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 81067f8:	430b      	orrs	r3, r1
 81067fa:	6113      	str	r3, [r2, #16]
 81067fc:	e00a      	b.n	8106814 <HAL_RCCEx_PeriphCLKConfig+0x974>
 81067fe:	bf00      	nop
 8106800:	58024400 	.word	0x58024400
 8106804:	58024800 	.word	0x58024800
 8106808:	4bd4      	ldr	r3, [pc, #848]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810680a:	691b      	ldr	r3, [r3, #16]
 810680c:	4ad3      	ldr	r2, [pc, #844]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 810680e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106812:	6113      	str	r3, [r2, #16]
 8106814:	4bd1      	ldr	r3, [pc, #836]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106816:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8106818:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810681c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106824:	4acd      	ldr	r2, [pc, #820]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106826:	430b      	orrs	r3, r1
 8106828:	6713      	str	r3, [r2, #112]	@ 0x70
 810682a:	e008      	b.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810682c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106830:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8106834:	e003      	b.n	810683e <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106836:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810683a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810683e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106846:	f002 0301 	and.w	r3, r2, #1
 810684a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810684e:	2300      	movs	r3, #0
 8106850:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8106854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8106858:	460b      	mov	r3, r1
 810685a:	4313      	orrs	r3, r2
 810685c:	f000 808b 	beq.w	8106976 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8106860:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106868:	2b28      	cmp	r3, #40	@ 0x28
 810686a:	d86b      	bhi.n	8106944 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 810686c:	a201      	add	r2, pc, #4	@ (adr r2, 8106874 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 810686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106872:	bf00      	nop
 8106874:	0810694d 	.word	0x0810694d
 8106878:	08106945 	.word	0x08106945
 810687c:	08106945 	.word	0x08106945
 8106880:	08106945 	.word	0x08106945
 8106884:	08106945 	.word	0x08106945
 8106888:	08106945 	.word	0x08106945
 810688c:	08106945 	.word	0x08106945
 8106890:	08106945 	.word	0x08106945
 8106894:	08106919 	.word	0x08106919
 8106898:	08106945 	.word	0x08106945
 810689c:	08106945 	.word	0x08106945
 81068a0:	08106945 	.word	0x08106945
 81068a4:	08106945 	.word	0x08106945
 81068a8:	08106945 	.word	0x08106945
 81068ac:	08106945 	.word	0x08106945
 81068b0:	08106945 	.word	0x08106945
 81068b4:	0810692f 	.word	0x0810692f
 81068b8:	08106945 	.word	0x08106945
 81068bc:	08106945 	.word	0x08106945
 81068c0:	08106945 	.word	0x08106945
 81068c4:	08106945 	.word	0x08106945
 81068c8:	08106945 	.word	0x08106945
 81068cc:	08106945 	.word	0x08106945
 81068d0:	08106945 	.word	0x08106945
 81068d4:	0810694d 	.word	0x0810694d
 81068d8:	08106945 	.word	0x08106945
 81068dc:	08106945 	.word	0x08106945
 81068e0:	08106945 	.word	0x08106945
 81068e4:	08106945 	.word	0x08106945
 81068e8:	08106945 	.word	0x08106945
 81068ec:	08106945 	.word	0x08106945
 81068f0:	08106945 	.word	0x08106945
 81068f4:	0810694d 	.word	0x0810694d
 81068f8:	08106945 	.word	0x08106945
 81068fc:	08106945 	.word	0x08106945
 8106900:	08106945 	.word	0x08106945
 8106904:	08106945 	.word	0x08106945
 8106908:	08106945 	.word	0x08106945
 810690c:	08106945 	.word	0x08106945
 8106910:	08106945 	.word	0x08106945
 8106914:	0810694d 	.word	0x0810694d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106918:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810691c:	3308      	adds	r3, #8
 810691e:	2101      	movs	r1, #1
 8106920:	4618      	mov	r0, r3
 8106922:	f000 ffc5 	bl	81078b0 <RCCEx_PLL2_Config>
 8106926:	4603      	mov	r3, r0
 8106928:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810692c:	e00f      	b.n	810694e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810692e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106932:	3328      	adds	r3, #40	@ 0x28
 8106934:	2101      	movs	r1, #1
 8106936:	4618      	mov	r0, r3
 8106938:	f001 f86c 	bl	8107a14 <RCCEx_PLL3_Config>
 810693c:	4603      	mov	r3, r0
 810693e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106942:	e004      	b.n	810694e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106944:	2301      	movs	r3, #1
 8106946:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 810694a:	e000      	b.n	810694e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 810694c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810694e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106952:	2b00      	cmp	r3, #0
 8106954:	d10b      	bne.n	810696e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8106956:	4b81      	ldr	r3, [pc, #516]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810695a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810695e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106962:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106966:	4a7d      	ldr	r2, [pc, #500]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106968:	430b      	orrs	r3, r1
 810696a:	6553      	str	r3, [r2, #84]	@ 0x54
 810696c:	e003      	b.n	8106976 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810696e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106972:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8106976:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810697a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810697e:	f002 0302 	and.w	r3, r2, #2
 8106982:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8106986:	2300      	movs	r3, #0
 8106988:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 810698c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8106990:	460b      	mov	r3, r1
 8106992:	4313      	orrs	r3, r2
 8106994:	d042      	beq.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8106996:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810699a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 810699c:	2b05      	cmp	r3, #5
 810699e:	d825      	bhi.n	81069ec <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 81069a0:	a201      	add	r2, pc, #4	@ (adr r2, 81069a8 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 81069a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81069a6:	bf00      	nop
 81069a8:	081069f5 	.word	0x081069f5
 81069ac:	081069c1 	.word	0x081069c1
 81069b0:	081069d7 	.word	0x081069d7
 81069b4:	081069f5 	.word	0x081069f5
 81069b8:	081069f5 	.word	0x081069f5
 81069bc:	081069f5 	.word	0x081069f5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81069c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069c4:	3308      	adds	r3, #8
 81069c6:	2101      	movs	r1, #1
 81069c8:	4618      	mov	r0, r3
 81069ca:	f000 ff71 	bl	81078b0 <RCCEx_PLL2_Config>
 81069ce:	4603      	mov	r3, r0
 81069d0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81069d4:	e00f      	b.n	81069f6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81069d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81069da:	3328      	adds	r3, #40	@ 0x28
 81069dc:	2101      	movs	r1, #1
 81069de:	4618      	mov	r0, r3
 81069e0:	f001 f818 	bl	8107a14 <RCCEx_PLL3_Config>
 81069e4:	4603      	mov	r3, r0
 81069e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81069ea:	e004      	b.n	81069f6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81069ec:	2301      	movs	r3, #1
 81069ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 81069f2:	e000      	b.n	81069f6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 81069f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81069fa:	2b00      	cmp	r3, #0
 81069fc:	d10a      	bne.n	8106a14 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81069fe:	4b57      	ldr	r3, [pc, #348]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106a00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106a02:	f023 0107 	bic.w	r1, r3, #7
 8106a06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a0a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8106a0c:	4a53      	ldr	r2, [pc, #332]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106a0e:	430b      	orrs	r3, r1
 8106a10:	6553      	str	r3, [r2, #84]	@ 0x54
 8106a12:	e003      	b.n	8106a1c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106a14:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106a18:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106a1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106a24:	f002 0304 	and.w	r3, r2, #4
 8106a28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106a2c:	2300      	movs	r3, #0
 8106a2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106a32:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8106a36:	460b      	mov	r3, r1
 8106a38:	4313      	orrs	r3, r2
 8106a3a:	d044      	beq.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106a3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a40:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106a44:	2b05      	cmp	r3, #5
 8106a46:	d825      	bhi.n	8106a94 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8106a48:	a201      	add	r2, pc, #4	@ (adr r2, 8106a50 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8106a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106a4e:	bf00      	nop
 8106a50:	08106a9d 	.word	0x08106a9d
 8106a54:	08106a69 	.word	0x08106a69
 8106a58:	08106a7f 	.word	0x08106a7f
 8106a5c:	08106a9d 	.word	0x08106a9d
 8106a60:	08106a9d 	.word	0x08106a9d
 8106a64:	08106a9d 	.word	0x08106a9d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106a68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a6c:	3308      	adds	r3, #8
 8106a6e:	2101      	movs	r1, #1
 8106a70:	4618      	mov	r0, r3
 8106a72:	f000 ff1d 	bl	81078b0 <RCCEx_PLL2_Config>
 8106a76:	4603      	mov	r3, r0
 8106a78:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106a7c:	e00f      	b.n	8106a9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106a82:	3328      	adds	r3, #40	@ 0x28
 8106a84:	2101      	movs	r1, #1
 8106a86:	4618      	mov	r0, r3
 8106a88:	f000 ffc4 	bl	8107a14 <RCCEx_PLL3_Config>
 8106a8c:	4603      	mov	r3, r0
 8106a8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8106a92:	e004      	b.n	8106a9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a94:	2301      	movs	r3, #1
 8106a96:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106a9a:	e000      	b.n	8106a9e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8106a9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a9e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106aa2:	2b00      	cmp	r3, #0
 8106aa4:	d10b      	bne.n	8106abe <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8106aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106aa8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106aaa:	f023 0107 	bic.w	r1, r3, #7
 8106aae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ab2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106ab6:	4a29      	ldr	r2, [pc, #164]	@ (8106b5c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8106ab8:	430b      	orrs	r3, r1
 8106aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8106abc:	e003      	b.n	8106ac6 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106abe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106ac2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8106ac6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ace:	f002 0320 	and.w	r3, r2, #32
 8106ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8106ad6:	2300      	movs	r3, #0
 8106ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106adc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106ae0:	460b      	mov	r3, r1
 8106ae2:	4313      	orrs	r3, r2
 8106ae4:	d057      	beq.n	8106b96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8106ae6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106af2:	d035      	beq.n	8106b60 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8106af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106af8:	d82c      	bhi.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106afa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106afe:	d031      	beq.n	8106b64 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8106b00:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106b04:	d826      	bhi.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106b06:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b0a:	d02d      	beq.n	8106b68 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8106b0c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106b10:	d820      	bhi.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106b12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b16:	d012      	beq.n	8106b3e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8106b18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106b1c:	d81a      	bhi.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8106b1e:	2b00      	cmp	r3, #0
 8106b20:	d024      	beq.n	8106b6c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8106b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106b26:	d115      	bne.n	8106b54 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106b28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b2c:	3308      	adds	r3, #8
 8106b2e:	2100      	movs	r1, #0
 8106b30:	4618      	mov	r0, r3
 8106b32:	f000 febd 	bl	81078b0 <RCCEx_PLL2_Config>
 8106b36:	4603      	mov	r3, r0
 8106b38:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106b3c:	e017      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b42:	3328      	adds	r3, #40	@ 0x28
 8106b44:	2102      	movs	r1, #2
 8106b46:	4618      	mov	r0, r3
 8106b48:	f000 ff64 	bl	8107a14 <RCCEx_PLL3_Config>
 8106b4c:	4603      	mov	r3, r0
 8106b4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106b52:	e00c      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b54:	2301      	movs	r3, #1
 8106b56:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106b5a:	e008      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8106b5c:	58024400 	.word	0x58024400
        break;
 8106b60:	bf00      	nop
 8106b62:	e004      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106b64:	bf00      	nop
 8106b66:	e002      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106b68:	bf00      	nop
 8106b6a:	e000      	b.n	8106b6e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8106b6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b72:	2b00      	cmp	r3, #0
 8106b74:	d10b      	bne.n	8106b8e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8106b76:	4bc2      	ldr	r3, [pc, #776]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106b7a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8106b7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b82:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106b86:	4abe      	ldr	r2, [pc, #760]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106b88:	430b      	orrs	r3, r1
 8106b8a:	6553      	str	r3, [r2, #84]	@ 0x54
 8106b8c:	e003      	b.n	8106b96 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106b92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8106b96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b9e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8106ba2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8106ba6:	2300      	movs	r3, #0
 8106ba8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8106bac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8106bb0:	460b      	mov	r3, r1
 8106bb2:	4313      	orrs	r3, r2
 8106bb4:	d055      	beq.n	8106c62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8106bb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106bbe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106bc2:	d033      	beq.n	8106c2c <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8106bc4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106bc8:	d82c      	bhi.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106bca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106bce:	d02f      	beq.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8106bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106bd4:	d826      	bhi.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106bd6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106bda:	d02b      	beq.n	8106c34 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8106bdc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106be0:	d820      	bhi.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106be2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106be6:	d012      	beq.n	8106c0e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8106be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106bec:	d81a      	bhi.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8106bee:	2b00      	cmp	r3, #0
 8106bf0:	d022      	beq.n	8106c38 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8106bf2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106bf6:	d115      	bne.n	8106c24 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106bf8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106bfc:	3308      	adds	r3, #8
 8106bfe:	2100      	movs	r1, #0
 8106c00:	4618      	mov	r0, r3
 8106c02:	f000 fe55 	bl	81078b0 <RCCEx_PLL2_Config>
 8106c06:	4603      	mov	r3, r0
 8106c08:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106c0c:	e015      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c12:	3328      	adds	r3, #40	@ 0x28
 8106c14:	2102      	movs	r1, #2
 8106c16:	4618      	mov	r0, r3
 8106c18:	f000 fefc 	bl	8107a14 <RCCEx_PLL3_Config>
 8106c1c:	4603      	mov	r3, r0
 8106c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106c22:	e00a      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c24:	2301      	movs	r3, #1
 8106c26:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106c2a:	e006      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106c2c:	bf00      	nop
 8106c2e:	e004      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106c30:	bf00      	nop
 8106c32:	e002      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106c34:	bf00      	nop
 8106c36:	e000      	b.n	8106c3a <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8106c38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106c3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106c3e:	2b00      	cmp	r3, #0
 8106c40:	d10b      	bne.n	8106c5a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106c42:	4b8f      	ldr	r3, [pc, #572]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106c44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c46:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106c4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106c52:	4a8b      	ldr	r2, [pc, #556]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106c54:	430b      	orrs	r3, r1
 8106c56:	6593      	str	r3, [r2, #88]	@ 0x58
 8106c58:	e003      	b.n	8106c62 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106c5a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106c5e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106c62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c6a:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106c6e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106c72:	2300      	movs	r3, #0
 8106c74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106c78:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106c7c:	460b      	mov	r3, r1
 8106c7e:	4313      	orrs	r3, r2
 8106c80:	d055      	beq.n	8106d2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106c82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106c86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106c8a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106c8e:	d033      	beq.n	8106cf8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8106c90:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106c94:	d82c      	bhi.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106c9a:	d02f      	beq.n	8106cfc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8106c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ca0:	d826      	bhi.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106ca2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106ca6:	d02b      	beq.n	8106d00 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8106ca8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106cac:	d820      	bhi.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106cae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106cb2:	d012      	beq.n	8106cda <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8106cb4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106cb8:	d81a      	bhi.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8106cba:	2b00      	cmp	r3, #0
 8106cbc:	d022      	beq.n	8106d04 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8106cbe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106cc2:	d115      	bne.n	8106cf0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106cc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cc8:	3308      	adds	r3, #8
 8106cca:	2100      	movs	r1, #0
 8106ccc:	4618      	mov	r0, r3
 8106cce:	f000 fdef 	bl	81078b0 <RCCEx_PLL2_Config>
 8106cd2:	4603      	mov	r3, r0
 8106cd4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106cd8:	e015      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106cda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106cde:	3328      	adds	r3, #40	@ 0x28
 8106ce0:	2102      	movs	r1, #2
 8106ce2:	4618      	mov	r0, r3
 8106ce4:	f000 fe96 	bl	8107a14 <RCCEx_PLL3_Config>
 8106ce8:	4603      	mov	r3, r0
 8106cea:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106cee:	e00a      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106cf0:	2301      	movs	r3, #1
 8106cf2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106cf6:	e006      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106cf8:	bf00      	nop
 8106cfa:	e004      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106cfc:	bf00      	nop
 8106cfe:	e002      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106d00:	bf00      	nop
 8106d02:	e000      	b.n	8106d06 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8106d04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d0a:	2b00      	cmp	r3, #0
 8106d0c:	d10b      	bne.n	8106d26 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106d0e:	4b5c      	ldr	r3, [pc, #368]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106d12:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8106d16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106d1e:	4a58      	ldr	r2, [pc, #352]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106d20:	430b      	orrs	r3, r1
 8106d22:	6593      	str	r3, [r2, #88]	@ 0x58
 8106d24:	e003      	b.n	8106d2e <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d26:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106d2a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106d2e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d36:	f002 0308 	and.w	r3, r2, #8
 8106d3a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8106d3e:	2300      	movs	r3, #0
 8106d40:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8106d44:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8106d48:	460b      	mov	r3, r1
 8106d4a:	4313      	orrs	r3, r2
 8106d4c:	d01e      	beq.n	8106d8c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106d4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106d56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106d5a:	d10c      	bne.n	8106d76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106d5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d60:	3328      	adds	r3, #40	@ 0x28
 8106d62:	2102      	movs	r1, #2
 8106d64:	4618      	mov	r0, r3
 8106d66:	f000 fe55 	bl	8107a14 <RCCEx_PLL3_Config>
 8106d6a:	4603      	mov	r3, r0
 8106d6c:	2b00      	cmp	r3, #0
 8106d6e:	d002      	beq.n	8106d76 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8106d70:	2301      	movs	r3, #1
 8106d72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106d76:	4b42      	ldr	r3, [pc, #264]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106d7a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8106d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106d86:	4a3e      	ldr	r2, [pc, #248]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106d88:	430b      	orrs	r3, r1
 8106d8a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106d8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d94:	f002 0310 	and.w	r3, r2, #16
 8106d98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8106d9c:	2300      	movs	r3, #0
 8106d9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8106da2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106da6:	460b      	mov	r3, r1
 8106da8:	4313      	orrs	r3, r2
 8106daa:	d01e      	beq.n	8106dea <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106dac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106db0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106db4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106db8:	d10c      	bne.n	8106dd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106dba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dbe:	3328      	adds	r3, #40	@ 0x28
 8106dc0:	2102      	movs	r1, #2
 8106dc2:	4618      	mov	r0, r3
 8106dc4:	f000 fe26 	bl	8107a14 <RCCEx_PLL3_Config>
 8106dc8:	4603      	mov	r3, r0
 8106dca:	2b00      	cmp	r3, #0
 8106dcc:	d002      	beq.n	8106dd4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8106dce:	2301      	movs	r3, #1
 8106dd0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106dd4:	4b2a      	ldr	r3, [pc, #168]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106dd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106dd8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106ddc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106de4:	4a26      	ldr	r2, [pc, #152]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106de6:	430b      	orrs	r3, r1
 8106de8:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106dea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106df2:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106df6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8106dfa:	2300      	movs	r3, #0
 8106dfc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8106e00:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8106e04:	460b      	mov	r3, r1
 8106e06:	4313      	orrs	r3, r2
 8106e08:	d040      	beq.n	8106e8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106e0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e0e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106e12:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106e16:	d022      	beq.n	8106e5e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8106e18:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106e1c:	d81b      	bhi.n	8106e56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106e1e:	2b00      	cmp	r3, #0
 8106e20:	d003      	beq.n	8106e2a <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 8106e22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106e26:	d00b      	beq.n	8106e40 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8106e28:	e015      	b.n	8106e56 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106e2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e2e:	3308      	adds	r3, #8
 8106e30:	2100      	movs	r1, #0
 8106e32:	4618      	mov	r0, r3
 8106e34:	f000 fd3c 	bl	81078b0 <RCCEx_PLL2_Config>
 8106e38:	4603      	mov	r3, r0
 8106e3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106e3e:	e00f      	b.n	8106e60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106e40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e44:	3328      	adds	r3, #40	@ 0x28
 8106e46:	2102      	movs	r1, #2
 8106e48:	4618      	mov	r0, r3
 8106e4a:	f000 fde3 	bl	8107a14 <RCCEx_PLL3_Config>
 8106e4e:	4603      	mov	r3, r0
 8106e50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106e54:	e004      	b.n	8106e60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e56:	2301      	movs	r3, #1
 8106e58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106e5c:	e000      	b.n	8106e60 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8106e5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e64:	2b00      	cmp	r3, #0
 8106e66:	d10d      	bne.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106e68:	4b05      	ldr	r3, [pc, #20]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106e6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106e6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8106e70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e74:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106e78:	4a01      	ldr	r2, [pc, #4]	@ (8106e80 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8106e7a:	430b      	orrs	r3, r1
 8106e7c:	6593      	str	r3, [r2, #88]	@ 0x58
 8106e7e:	e005      	b.n	8106e8c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8106e80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106e84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106e88:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106e8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106e90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e94:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8106e98:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106e9a:	2300      	movs	r3, #0
 8106e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8106e9e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8106ea2:	460b      	mov	r3, r1
 8106ea4:	4313      	orrs	r3, r2
 8106ea6:	d03b      	beq.n	8106f20 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106ea8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106eb0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106eb4:	d01f      	beq.n	8106ef6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8106eb6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106eba:	d818      	bhi.n	8106eee <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8106ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106ec0:	d003      	beq.n	8106eca <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8106ec2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106ec6:	d007      	beq.n	8106ed8 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8106ec8:	e011      	b.n	8106eee <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106eca:	4b64      	ldr	r3, [pc, #400]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106ece:	4a63      	ldr	r2, [pc, #396]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106ed0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106ed6:	e00f      	b.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106ed8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106edc:	3328      	adds	r3, #40	@ 0x28
 8106ede:	2101      	movs	r1, #1
 8106ee0:	4618      	mov	r0, r3
 8106ee2:	f000 fd97 	bl	8107a14 <RCCEx_PLL3_Config>
 8106ee6:	4603      	mov	r3, r0
 8106ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8106eec:	e004      	b.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106eee:	2301      	movs	r3, #1
 8106ef0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106ef4:	e000      	b.n	8106ef8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8106ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ef8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106efc:	2b00      	cmp	r3, #0
 8106efe:	d10b      	bne.n	8106f18 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106f00:	4b56      	ldr	r3, [pc, #344]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f04:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106f08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106f10:	4a52      	ldr	r2, [pc, #328]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f12:	430b      	orrs	r3, r1
 8106f14:	6553      	str	r3, [r2, #84]	@ 0x54
 8106f16:	e003      	b.n	8106f20 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106f20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f28:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8106f2c:	673b      	str	r3, [r7, #112]	@ 0x70
 8106f2e:	2300      	movs	r3, #0
 8106f30:	677b      	str	r3, [r7, #116]	@ 0x74
 8106f32:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106f36:	460b      	mov	r3, r1
 8106f38:	4313      	orrs	r3, r2
 8106f3a:	d031      	beq.n	8106fa0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106f3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f42:	2b00      	cmp	r3, #0
 8106f44:	d003      	beq.n	8106f4e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8106f46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106f4a:	d007      	beq.n	8106f5c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8106f4c:	e011      	b.n	8106f72 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106f4e:	4b43      	ldr	r3, [pc, #268]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106f52:	4a42      	ldr	r2, [pc, #264]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106f58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106f5a:	e00e      	b.n	8106f7a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106f5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f60:	3308      	adds	r3, #8
 8106f62:	2102      	movs	r1, #2
 8106f64:	4618      	mov	r0, r3
 8106f66:	f000 fca3 	bl	81078b0 <RCCEx_PLL2_Config>
 8106f6a:	4603      	mov	r3, r0
 8106f6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106f70:	e003      	b.n	8106f7a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8106f72:	2301      	movs	r3, #1
 8106f74:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8106f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106f7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f7e:	2b00      	cmp	r3, #0
 8106f80:	d10a      	bne.n	8106f98 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106f82:	4b36      	ldr	r3, [pc, #216]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f86:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106f8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106f90:	4a32      	ldr	r2, [pc, #200]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8106f92:	430b      	orrs	r3, r1
 8106f94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106f96:	e003      	b.n	8106fa0 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106f98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8106f9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106fa0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fa8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106fac:	66bb      	str	r3, [r7, #104]	@ 0x68
 8106fae:	2300      	movs	r3, #0
 8106fb0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106fb2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106fb6:	460b      	mov	r3, r1
 8106fb8:	4313      	orrs	r3, r2
 8106fba:	d00c      	beq.n	8106fd6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106fbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fc0:	3328      	adds	r3, #40	@ 0x28
 8106fc2:	2102      	movs	r1, #2
 8106fc4:	4618      	mov	r0, r3
 8106fc6:	f000 fd25 	bl	8107a14 <RCCEx_PLL3_Config>
 8106fca:	4603      	mov	r3, r0
 8106fcc:	2b00      	cmp	r3, #0
 8106fce:	d002      	beq.n	8106fd6 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8106fd0:	2301      	movs	r3, #1
 8106fd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fde:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106fe2:	663b      	str	r3, [r7, #96]	@ 0x60
 8106fe4:	2300      	movs	r3, #0
 8106fe6:	667b      	str	r3, [r7, #100]	@ 0x64
 8106fe8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106fec:	460b      	mov	r3, r1
 8106fee:	4313      	orrs	r3, r2
 8106ff0:	d03a      	beq.n	8107068 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106ff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8106ff6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106ffa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106ffe:	d018      	beq.n	8107032 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8107000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8107004:	d811      	bhi.n	810702a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8107006:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810700a:	d014      	beq.n	8107036 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 810700c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8107010:	d80b      	bhi.n	810702a <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8107012:	2b00      	cmp	r3, #0
 8107014:	d011      	beq.n	810703a <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8107016:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810701a:	d106      	bne.n	810702a <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810701c:	4b0f      	ldr	r3, [pc, #60]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 810701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107020:	4a0e      	ldr	r2, [pc, #56]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107022:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8107026:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8107028:	e008      	b.n	810703c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810702a:	2301      	movs	r3, #1
 810702c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8107030:	e004      	b.n	810703c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8107032:	bf00      	nop
 8107034:	e002      	b.n	810703c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8107036:	bf00      	nop
 8107038:	e000      	b.n	810703c <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 810703a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810703c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107040:	2b00      	cmp	r3, #0
 8107042:	d10d      	bne.n	8107060 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8107044:	4b05      	ldr	r3, [pc, #20]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107048:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810704c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107050:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8107054:	4a01      	ldr	r2, [pc, #4]	@ (810705c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8107056:	430b      	orrs	r3, r1
 8107058:	6553      	str	r3, [r2, #84]	@ 0x54
 810705a:	e005      	b.n	8107068 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 810705c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107060:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107064:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8107068:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810706c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107070:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8107074:	65bb      	str	r3, [r7, #88]	@ 0x58
 8107076:	2300      	movs	r3, #0
 8107078:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810707a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 810707e:	460b      	mov	r3, r1
 8107080:	4313      	orrs	r3, r2
 8107082:	d009      	beq.n	8107098 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8107084:	4baa      	ldr	r3, [pc, #680]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107088:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 810708c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107090:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8107092:	4aa7      	ldr	r2, [pc, #668]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107094:	430b      	orrs	r3, r1
 8107096:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8107098:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070a0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81070a4:	653b      	str	r3, [r7, #80]	@ 0x50
 81070a6:	2300      	movs	r3, #0
 81070a8:	657b      	str	r3, [r7, #84]	@ 0x54
 81070aa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81070ae:	460b      	mov	r3, r1
 81070b0:	4313      	orrs	r3, r2
 81070b2:	d00a      	beq.n	81070ca <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81070b4:	4b9e      	ldr	r3, [pc, #632]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81070b6:	691b      	ldr	r3, [r3, #16]
 81070b8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81070bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070c0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 81070c4:	4a9a      	ldr	r2, [pc, #616]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81070c6:	430b      	orrs	r3, r1
 81070c8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81070ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070d2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81070d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 81070d8:	2300      	movs	r3, #0
 81070da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81070dc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81070e0:	460b      	mov	r3, r1
 81070e2:	4313      	orrs	r3, r2
 81070e4:	d009      	beq.n	81070fa <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81070e6:	4b92      	ldr	r3, [pc, #584]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81070e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81070ea:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81070ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81070f4:	4a8e      	ldr	r2, [pc, #568]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 81070f6:	430b      	orrs	r3, r1
 81070f8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81070fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107102:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8107106:	643b      	str	r3, [r7, #64]	@ 0x40
 8107108:	2300      	movs	r3, #0
 810710a:	647b      	str	r3, [r7, #68]	@ 0x44
 810710c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8107110:	460b      	mov	r3, r1
 8107112:	4313      	orrs	r3, r2
 8107114:	d00e      	beq.n	8107134 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8107116:	4b86      	ldr	r3, [pc, #536]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107118:	691b      	ldr	r3, [r3, #16]
 810711a:	4a85      	ldr	r2, [pc, #532]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 810711c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8107120:	6113      	str	r3, [r2, #16]
 8107122:	4b83      	ldr	r3, [pc, #524]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107124:	6919      	ldr	r1, [r3, #16]
 8107126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810712a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 810712e:	4a80      	ldr	r2, [pc, #512]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107130:	430b      	orrs	r3, r1
 8107132:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8107134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107138:	e9d3 2300 	ldrd	r2, r3, [r3]
 810713c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8107140:	63bb      	str	r3, [r7, #56]	@ 0x38
 8107142:	2300      	movs	r3, #0
 8107144:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107146:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 810714a:	460b      	mov	r3, r1
 810714c:	4313      	orrs	r3, r2
 810714e:	d009      	beq.n	8107164 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8107150:	4b77      	ldr	r3, [pc, #476]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107154:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8107158:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810715c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810715e:	4a74      	ldr	r2, [pc, #464]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107160:	430b      	orrs	r3, r1
 8107162:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8107164:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107168:	e9d3 2300 	ldrd	r2, r3, [r3]
 810716c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8107170:	633b      	str	r3, [r7, #48]	@ 0x30
 8107172:	2300      	movs	r3, #0
 8107174:	637b      	str	r3, [r7, #52]	@ 0x34
 8107176:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 810717a:	460b      	mov	r3, r1
 810717c:	4313      	orrs	r3, r2
 810717e:	d00a      	beq.n	8107196 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8107180:	4b6b      	ldr	r3, [pc, #428]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107182:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8107184:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8107188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810718c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8107190:	4a67      	ldr	r2, [pc, #412]	@ (8107330 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8107192:	430b      	orrs	r3, r1
 8107194:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8107196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810719a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810719e:	2100      	movs	r1, #0
 81071a0:	62b9      	str	r1, [r7, #40]	@ 0x28
 81071a2:	f003 0301 	and.w	r3, r3, #1
 81071a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81071a8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81071ac:	460b      	mov	r3, r1
 81071ae:	4313      	orrs	r3, r2
 81071b0:	d011      	beq.n	81071d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81071b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071b6:	3308      	adds	r3, #8
 81071b8:	2100      	movs	r1, #0
 81071ba:	4618      	mov	r0, r3
 81071bc:	f000 fb78 	bl	81078b0 <RCCEx_PLL2_Config>
 81071c0:	4603      	mov	r3, r0
 81071c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81071c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071ca:	2b00      	cmp	r3, #0
 81071cc:	d003      	beq.n	81071d6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81071ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81071d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 81071d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81071de:	2100      	movs	r1, #0
 81071e0:	6239      	str	r1, [r7, #32]
 81071e2:	f003 0302 	and.w	r3, r3, #2
 81071e6:	627b      	str	r3, [r7, #36]	@ 0x24
 81071e8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 81071ec:	460b      	mov	r3, r1
 81071ee:	4313      	orrs	r3, r2
 81071f0:	d011      	beq.n	8107216 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81071f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81071f6:	3308      	adds	r3, #8
 81071f8:	2101      	movs	r1, #1
 81071fa:	4618      	mov	r0, r3
 81071fc:	f000 fb58 	bl	81078b0 <RCCEx_PLL2_Config>
 8107200:	4603      	mov	r3, r0
 8107202:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107206:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810720a:	2b00      	cmp	r3, #0
 810720c:	d003      	beq.n	8107216 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810720e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107212:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8107216:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810721e:	2100      	movs	r1, #0
 8107220:	61b9      	str	r1, [r7, #24]
 8107222:	f003 0304 	and.w	r3, r3, #4
 8107226:	61fb      	str	r3, [r7, #28]
 8107228:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 810722c:	460b      	mov	r3, r1
 810722e:	4313      	orrs	r3, r2
 8107230:	d011      	beq.n	8107256 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107236:	3308      	adds	r3, #8
 8107238:	2102      	movs	r1, #2
 810723a:	4618      	mov	r0, r3
 810723c:	f000 fb38 	bl	81078b0 <RCCEx_PLL2_Config>
 8107240:	4603      	mov	r3, r0
 8107242:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107246:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810724a:	2b00      	cmp	r3, #0
 810724c:	d003      	beq.n	8107256 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810724e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107252:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8107256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810725a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810725e:	2100      	movs	r1, #0
 8107260:	6139      	str	r1, [r7, #16]
 8107262:	f003 0308 	and.w	r3, r3, #8
 8107266:	617b      	str	r3, [r7, #20]
 8107268:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 810726c:	460b      	mov	r3, r1
 810726e:	4313      	orrs	r3, r2
 8107270:	d011      	beq.n	8107296 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8107272:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8107276:	3328      	adds	r3, #40	@ 0x28
 8107278:	2100      	movs	r1, #0
 810727a:	4618      	mov	r0, r3
 810727c:	f000 fbca 	bl	8107a14 <RCCEx_PLL3_Config>
 8107280:	4603      	mov	r3, r0
 8107282:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 8107286:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810728a:	2b00      	cmp	r3, #0
 810728c:	d003      	beq.n	8107296 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810728e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107292:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8107296:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 810729a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810729e:	2100      	movs	r1, #0
 81072a0:	60b9      	str	r1, [r7, #8]
 81072a2:	f003 0310 	and.w	r3, r3, #16
 81072a6:	60fb      	str	r3, [r7, #12]
 81072a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81072ac:	460b      	mov	r3, r1
 81072ae:	4313      	orrs	r3, r2
 81072b0:	d011      	beq.n	81072d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81072b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072b6:	3328      	adds	r3, #40	@ 0x28
 81072b8:	2101      	movs	r1, #1
 81072ba:	4618      	mov	r0, r3
 81072bc:	f000 fbaa 	bl	8107a14 <RCCEx_PLL3_Config>
 81072c0:	4603      	mov	r3, r0
 81072c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 81072c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d003      	beq.n	81072d6 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81072ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 81072d2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 81072d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072de:	2100      	movs	r1, #0
 81072e0:	6039      	str	r1, [r7, #0]
 81072e2:	f003 0320 	and.w	r3, r3, #32
 81072e6:	607b      	str	r3, [r7, #4]
 81072e8:	e9d7 1200 	ldrd	r1, r2, [r7]
 81072ec:	460b      	mov	r3, r1
 81072ee:	4313      	orrs	r3, r2
 81072f0:	d011      	beq.n	8107316 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81072f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81072f6:	3328      	adds	r3, #40	@ 0x28
 81072f8:	2102      	movs	r1, #2
 81072fa:	4618      	mov	r0, r3
 81072fc:	f000 fb8a 	bl	8107a14 <RCCEx_PLL3_Config>
 8107300:	4603      	mov	r3, r0
 8107302:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8107306:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 810730a:	2b00      	cmp	r3, #0
 810730c:	d003      	beq.n	8107316 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810730e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8107312:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8107316:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 810731a:	2b00      	cmp	r3, #0
 810731c:	d101      	bne.n	8107322 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 810731e:	2300      	movs	r3, #0
 8107320:	e000      	b.n	8107324 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8107322:	2301      	movs	r3, #1
}
 8107324:	4618      	mov	r0, r3
 8107326:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 810732a:	46bd      	mov	sp, r7
 810732c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107330:	58024400 	.word	0x58024400

08107334 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107334:	b580      	push	{r7, lr}
 8107336:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107338:	f7fe fd12 	bl	8105d60 <HAL_RCC_GetHCLKFreq>
 810733c:	4602      	mov	r2, r0
 810733e:	4b06      	ldr	r3, [pc, #24]	@ (8107358 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107340:	6a1b      	ldr	r3, [r3, #32]
 8107342:	091b      	lsrs	r3, r3, #4
 8107344:	f003 0307 	and.w	r3, r3, #7
 8107348:	4904      	ldr	r1, [pc, #16]	@ (810735c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810734a:	5ccb      	ldrb	r3, [r1, r3]
 810734c:	f003 031f 	and.w	r3, r3, #31
 8107350:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107354:	4618      	mov	r0, r3
 8107356:	bd80      	pop	{r7, pc}
 8107358:	58024400 	.word	0x58024400
 810735c:	0810fe48 	.word	0x0810fe48

08107360 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107360:	b480      	push	{r7}
 8107362:	b089      	sub	sp, #36	@ 0x24
 8107364:	af00      	add	r7, sp, #0
 8107366:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107368:	4ba1      	ldr	r3, [pc, #644]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810736a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810736c:	f003 0303 	and.w	r3, r3, #3
 8107370:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107372:	4b9f      	ldr	r3, [pc, #636]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107376:	0b1b      	lsrs	r3, r3, #12
 8107378:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810737c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 810737e:	4b9c      	ldr	r3, [pc, #624]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107382:	091b      	lsrs	r3, r3, #4
 8107384:	f003 0301 	and.w	r3, r3, #1
 8107388:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 810738a:	4b99      	ldr	r3, [pc, #612]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810738c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810738e:	08db      	lsrs	r3, r3, #3
 8107390:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107394:	693a      	ldr	r2, [r7, #16]
 8107396:	fb02 f303 	mul.w	r3, r2, r3
 810739a:	ee07 3a90 	vmov	s15, r3
 810739e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81073a6:	697b      	ldr	r3, [r7, #20]
 81073a8:	2b00      	cmp	r3, #0
 81073aa:	f000 8111 	beq.w	81075d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81073ae:	69bb      	ldr	r3, [r7, #24]
 81073b0:	2b02      	cmp	r3, #2
 81073b2:	f000 8083 	beq.w	81074bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81073b6:	69bb      	ldr	r3, [r7, #24]
 81073b8:	2b02      	cmp	r3, #2
 81073ba:	f200 80a1 	bhi.w	8107500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81073be:	69bb      	ldr	r3, [r7, #24]
 81073c0:	2b00      	cmp	r3, #0
 81073c2:	d003      	beq.n	81073cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81073c4:	69bb      	ldr	r3, [r7, #24]
 81073c6:	2b01      	cmp	r3, #1
 81073c8:	d056      	beq.n	8107478 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81073ca:	e099      	b.n	8107500 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81073cc:	4b88      	ldr	r3, [pc, #544]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073ce:	681b      	ldr	r3, [r3, #0]
 81073d0:	f003 0320 	and.w	r3, r3, #32
 81073d4:	2b00      	cmp	r3, #0
 81073d6:	d02d      	beq.n	8107434 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81073d8:	4b85      	ldr	r3, [pc, #532]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81073da:	681b      	ldr	r3, [r3, #0]
 81073dc:	08db      	lsrs	r3, r3, #3
 81073de:	f003 0303 	and.w	r3, r3, #3
 81073e2:	4a84      	ldr	r2, [pc, #528]	@ (81075f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 81073e4:	fa22 f303 	lsr.w	r3, r2, r3
 81073e8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81073ea:	68bb      	ldr	r3, [r7, #8]
 81073ec:	ee07 3a90 	vmov	s15, r3
 81073f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81073f4:	697b      	ldr	r3, [r7, #20]
 81073f6:	ee07 3a90 	vmov	s15, r3
 81073fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81073fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107402:	4b7b      	ldr	r3, [pc, #492]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107406:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810740a:	ee07 3a90 	vmov	s15, r3
 810740e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107412:	ed97 6a03 	vldr	s12, [r7, #12]
 8107416:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810741a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810741e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107422:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107426:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810742a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810742e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107432:	e087      	b.n	8107544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107434:	697b      	ldr	r3, [r7, #20]
 8107436:	ee07 3a90 	vmov	s15, r3
 810743a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810743e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81075fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107442:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107446:	4b6a      	ldr	r3, [pc, #424]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810744a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810744e:	ee07 3a90 	vmov	s15, r3
 8107452:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107456:	ed97 6a03 	vldr	s12, [r7, #12]
 810745a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810745e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107462:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107466:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810746a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810746e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107472:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107476:	e065      	b.n	8107544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107478:	697b      	ldr	r3, [r7, #20]
 810747a:	ee07 3a90 	vmov	s15, r3
 810747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107482:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107486:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810748a:	4b59      	ldr	r3, [pc, #356]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810748c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810748e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107492:	ee07 3a90 	vmov	s15, r3
 8107496:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810749a:	ed97 6a03 	vldr	s12, [r7, #12]
 810749e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81074ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81074ba:	e043      	b.n	8107544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81074bc:	697b      	ldr	r3, [r7, #20]
 81074be:	ee07 3a90 	vmov	s15, r3
 81074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81074c6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107604 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81074ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81074ce:	4b48      	ldr	r3, [pc, #288]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81074d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81074d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81074d6:	ee07 3a90 	vmov	s15, r3
 81074da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81074de:	ed97 6a03 	vldr	s12, [r7, #12]
 81074e2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81074e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81074ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81074ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81074f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81074f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81074fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81074fe:	e021      	b.n	8107544 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107500:	697b      	ldr	r3, [r7, #20]
 8107502:	ee07 3a90 	vmov	s15, r3
 8107506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810750a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107600 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810750e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107512:	4b37      	ldr	r3, [pc, #220]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107516:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810751a:	ee07 3a90 	vmov	s15, r3
 810751e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107522:	ed97 6a03 	vldr	s12, [r7, #12]
 8107526:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81075f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810752a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810752e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107532:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107536:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810753a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810753e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107542:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107544:	4b2a      	ldr	r3, [pc, #168]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107548:	0a5b      	lsrs	r3, r3, #9
 810754a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810754e:	ee07 3a90 	vmov	s15, r3
 8107552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107556:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810755a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810755e:	edd7 6a07 	vldr	s13, [r7, #28]
 8107562:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810756a:	ee17 2a90 	vmov	r2, s15
 810756e:	687b      	ldr	r3, [r7, #4]
 8107570:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107572:	4b1f      	ldr	r3, [pc, #124]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107576:	0c1b      	lsrs	r3, r3, #16
 8107578:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810757c:	ee07 3a90 	vmov	s15, r3
 8107580:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107584:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107588:	ee37 7a87 	vadd.f32	s14, s15, s14
 810758c:	edd7 6a07 	vldr	s13, [r7, #28]
 8107590:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107594:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107598:	ee17 2a90 	vmov	r2, s15
 810759c:	687b      	ldr	r3, [r7, #4]
 810759e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81075a0:	4b13      	ldr	r3, [pc, #76]	@ (81075f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81075a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81075a4:	0e1b      	lsrs	r3, r3, #24
 81075a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81075aa:	ee07 3a90 	vmov	s15, r3
 81075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81075b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81075b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81075ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81075be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81075c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81075c6:	ee17 2a90 	vmov	r2, s15
 81075ca:	687b      	ldr	r3, [r7, #4]
 81075cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 81075ce:	e008      	b.n	81075e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 81075d0:	687b      	ldr	r3, [r7, #4]
 81075d2:	2200      	movs	r2, #0
 81075d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	2200      	movs	r2, #0
 81075da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 81075dc:	687b      	ldr	r3, [r7, #4]
 81075de:	2200      	movs	r2, #0
 81075e0:	609a      	str	r2, [r3, #8]
}
 81075e2:	bf00      	nop
 81075e4:	3724      	adds	r7, #36	@ 0x24
 81075e6:	46bd      	mov	sp, r7
 81075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075ec:	4770      	bx	lr
 81075ee:	bf00      	nop
 81075f0:	58024400 	.word	0x58024400
 81075f4:	03d09000 	.word	0x03d09000
 81075f8:	46000000 	.word	0x46000000
 81075fc:	4c742400 	.word	0x4c742400
 8107600:	4a742400 	.word	0x4a742400
 8107604:	4bbebc20 	.word	0x4bbebc20

08107608 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107608:	b480      	push	{r7}
 810760a:	b089      	sub	sp, #36	@ 0x24
 810760c:	af00      	add	r7, sp, #0
 810760e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107610:	4ba1      	ldr	r3, [pc, #644]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107614:	f003 0303 	and.w	r3, r3, #3
 8107618:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810761a:	4b9f      	ldr	r3, [pc, #636]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810761c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810761e:	0d1b      	lsrs	r3, r3, #20
 8107620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107624:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107626:	4b9c      	ldr	r3, [pc, #624]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810762a:	0a1b      	lsrs	r3, r3, #8
 810762c:	f003 0301 	and.w	r3, r3, #1
 8107630:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107632:	4b99      	ldr	r3, [pc, #612]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107636:	08db      	lsrs	r3, r3, #3
 8107638:	f3c3 030c 	ubfx	r3, r3, #0, #13
 810763c:	693a      	ldr	r2, [r7, #16]
 810763e:	fb02 f303 	mul.w	r3, r2, r3
 8107642:	ee07 3a90 	vmov	s15, r3
 8107646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810764a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 810764e:	697b      	ldr	r3, [r7, #20]
 8107650:	2b00      	cmp	r3, #0
 8107652:	f000 8111 	beq.w	8107878 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107656:	69bb      	ldr	r3, [r7, #24]
 8107658:	2b02      	cmp	r3, #2
 810765a:	f000 8083 	beq.w	8107764 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 810765e:	69bb      	ldr	r3, [r7, #24]
 8107660:	2b02      	cmp	r3, #2
 8107662:	f200 80a1 	bhi.w	81077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107666:	69bb      	ldr	r3, [r7, #24]
 8107668:	2b00      	cmp	r3, #0
 810766a:	d003      	beq.n	8107674 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 810766c:	69bb      	ldr	r3, [r7, #24]
 810766e:	2b01      	cmp	r3, #1
 8107670:	d056      	beq.n	8107720 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107672:	e099      	b.n	81077a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107674:	4b88      	ldr	r3, [pc, #544]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107676:	681b      	ldr	r3, [r3, #0]
 8107678:	f003 0320 	and.w	r3, r3, #32
 810767c:	2b00      	cmp	r3, #0
 810767e:	d02d      	beq.n	81076dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107680:	4b85      	ldr	r3, [pc, #532]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107682:	681b      	ldr	r3, [r3, #0]
 8107684:	08db      	lsrs	r3, r3, #3
 8107686:	f003 0303 	and.w	r3, r3, #3
 810768a:	4a84      	ldr	r2, [pc, #528]	@ (810789c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 810768c:	fa22 f303 	lsr.w	r3, r2, r3
 8107690:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107692:	68bb      	ldr	r3, [r7, #8]
 8107694:	ee07 3a90 	vmov	s15, r3
 8107698:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810769c:	697b      	ldr	r3, [r7, #20]
 810769e:	ee07 3a90 	vmov	s15, r3
 81076a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076aa:	4b7b      	ldr	r3, [pc, #492]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076b2:	ee07 3a90 	vmov	s15, r3
 81076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81076be:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81076ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81076d6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81076da:	e087      	b.n	81077ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81076dc:	697b      	ldr	r3, [r7, #20]
 81076de:	ee07 3a90 	vmov	s15, r3
 81076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81076e6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81078a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 81076ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81076ee:	4b6a      	ldr	r3, [pc, #424]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81076f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81076f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81076f6:	ee07 3a90 	vmov	s15, r3
 81076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81076fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8107702:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8107706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810770a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810770e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107716:	ee67 7a27 	vmul.f32	s15, s14, s15
 810771a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810771e:	e065      	b.n	81077ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107720:	697b      	ldr	r3, [r7, #20]
 8107722:	ee07 3a90 	vmov	s15, r3
 8107726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810772a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810772e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107732:	4b59      	ldr	r3, [pc, #356]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810773a:	ee07 3a90 	vmov	s15, r3
 810773e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107742:	ed97 6a03 	vldr	s12, [r7, #12]
 8107746:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810774a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810774e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107752:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107756:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810775a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810775e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107762:	e043      	b.n	81077ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107764:	697b      	ldr	r3, [r7, #20]
 8107766:	ee07 3a90 	vmov	s15, r3
 810776a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810776e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81078ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8107772:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107776:	4b48      	ldr	r3, [pc, #288]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810777a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810777e:	ee07 3a90 	vmov	s15, r3
 8107782:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107786:	ed97 6a03 	vldr	s12, [r7, #12]
 810778a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810778e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107792:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107796:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810779a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810779e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81077a6:	e021      	b.n	81077ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81077a8:	697b      	ldr	r3, [r7, #20]
 81077aa:	ee07 3a90 	vmov	s15, r3
 81077ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077b2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81078a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81077b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81077ba:	4b37      	ldr	r3, [pc, #220]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81077be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81077c2:	ee07 3a90 	vmov	s15, r3
 81077c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81077ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81077ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81078a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81077d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81077d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81077da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81077de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81077e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81077e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81077ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 81077ec:	4b2a      	ldr	r3, [pc, #168]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81077ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81077f0:	0a5b      	lsrs	r3, r3, #9
 81077f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81077f6:	ee07 3a90 	vmov	s15, r3
 81077fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81077fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107802:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107806:	edd7 6a07 	vldr	s13, [r7, #28]
 810780a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810780e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107812:	ee17 2a90 	vmov	r2, s15
 8107816:	687b      	ldr	r3, [r7, #4]
 8107818:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810781a:	4b1f      	ldr	r3, [pc, #124]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810781c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810781e:	0c1b      	lsrs	r3, r3, #16
 8107820:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107824:	ee07 3a90 	vmov	s15, r3
 8107828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810782c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107830:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107834:	edd7 6a07 	vldr	s13, [r7, #28]
 8107838:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810783c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107840:	ee17 2a90 	vmov	r2, s15
 8107844:	687b      	ldr	r3, [r7, #4]
 8107846:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8107848:	4b13      	ldr	r3, [pc, #76]	@ (8107898 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810784a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810784c:	0e1b      	lsrs	r3, r3, #24
 810784e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107852:	ee07 3a90 	vmov	s15, r3
 8107856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810785a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810785e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107862:	edd7 6a07 	vldr	s13, [r7, #28]
 8107866:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810786a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810786e:	ee17 2a90 	vmov	r2, s15
 8107872:	687b      	ldr	r3, [r7, #4]
 8107874:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8107876:	e008      	b.n	810788a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8107878:	687b      	ldr	r3, [r7, #4]
 810787a:	2200      	movs	r2, #0
 810787c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 810787e:	687b      	ldr	r3, [r7, #4]
 8107880:	2200      	movs	r2, #0
 8107882:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8107884:	687b      	ldr	r3, [r7, #4]
 8107886:	2200      	movs	r2, #0
 8107888:	609a      	str	r2, [r3, #8]
}
 810788a:	bf00      	nop
 810788c:	3724      	adds	r7, #36	@ 0x24
 810788e:	46bd      	mov	sp, r7
 8107890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107894:	4770      	bx	lr
 8107896:	bf00      	nop
 8107898:	58024400 	.word	0x58024400
 810789c:	03d09000 	.word	0x03d09000
 81078a0:	46000000 	.word	0x46000000
 81078a4:	4c742400 	.word	0x4c742400
 81078a8:	4a742400 	.word	0x4a742400
 81078ac:	4bbebc20 	.word	0x4bbebc20

081078b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 81078b0:	b580      	push	{r7, lr}
 81078b2:	b084      	sub	sp, #16
 81078b4:	af00      	add	r7, sp, #0
 81078b6:	6078      	str	r0, [r7, #4]
 81078b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81078ba:	2300      	movs	r3, #0
 81078bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81078be:	4b54      	ldr	r3, [pc, #336]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81078c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81078c2:	f003 0303 	and.w	r3, r3, #3
 81078c6:	2b03      	cmp	r3, #3
 81078c8:	d101      	bne.n	81078ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81078ca:	2301      	movs	r3, #1
 81078cc:	e09b      	b.n	8107a06 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81078ce:	4b50      	ldr	r3, [pc, #320]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81078d0:	681b      	ldr	r3, [r3, #0]
 81078d2:	4a4f      	ldr	r2, [pc, #316]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81078d4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81078d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81078da:	f7fa ff37 	bl	810274c <HAL_GetTick>
 81078de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81078e0:	e008      	b.n	81078f4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81078e2:	f7fa ff33 	bl	810274c <HAL_GetTick>
 81078e6:	4602      	mov	r2, r0
 81078e8:	68bb      	ldr	r3, [r7, #8]
 81078ea:	1ad3      	subs	r3, r2, r3
 81078ec:	2b02      	cmp	r3, #2
 81078ee:	d901      	bls.n	81078f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81078f0:	2303      	movs	r3, #3
 81078f2:	e088      	b.n	8107a06 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81078f4:	4b46      	ldr	r3, [pc, #280]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81078f6:	681b      	ldr	r3, [r3, #0]
 81078f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81078fc:	2b00      	cmp	r3, #0
 81078fe:	d1f0      	bne.n	81078e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8107900:	4b43      	ldr	r3, [pc, #268]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107902:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107904:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8107908:	687b      	ldr	r3, [r7, #4]
 810790a:	681b      	ldr	r3, [r3, #0]
 810790c:	031b      	lsls	r3, r3, #12
 810790e:	4940      	ldr	r1, [pc, #256]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107910:	4313      	orrs	r3, r2
 8107912:	628b      	str	r3, [r1, #40]	@ 0x28
 8107914:	687b      	ldr	r3, [r7, #4]
 8107916:	685b      	ldr	r3, [r3, #4]
 8107918:	3b01      	subs	r3, #1
 810791a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810791e:	687b      	ldr	r3, [r7, #4]
 8107920:	689b      	ldr	r3, [r3, #8]
 8107922:	3b01      	subs	r3, #1
 8107924:	025b      	lsls	r3, r3, #9
 8107926:	b29b      	uxth	r3, r3
 8107928:	431a      	orrs	r2, r3
 810792a:	687b      	ldr	r3, [r7, #4]
 810792c:	68db      	ldr	r3, [r3, #12]
 810792e:	3b01      	subs	r3, #1
 8107930:	041b      	lsls	r3, r3, #16
 8107932:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107936:	431a      	orrs	r2, r3
 8107938:	687b      	ldr	r3, [r7, #4]
 810793a:	691b      	ldr	r3, [r3, #16]
 810793c:	3b01      	subs	r3, #1
 810793e:	061b      	lsls	r3, r3, #24
 8107940:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107944:	4932      	ldr	r1, [pc, #200]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107946:	4313      	orrs	r3, r2
 8107948:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810794a:	4b31      	ldr	r3, [pc, #196]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 810794c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810794e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8107952:	687b      	ldr	r3, [r7, #4]
 8107954:	695b      	ldr	r3, [r3, #20]
 8107956:	492e      	ldr	r1, [pc, #184]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107958:	4313      	orrs	r3, r2
 810795a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810795c:	4b2c      	ldr	r3, [pc, #176]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 810795e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107960:	f023 0220 	bic.w	r2, r3, #32
 8107964:	687b      	ldr	r3, [r7, #4]
 8107966:	699b      	ldr	r3, [r3, #24]
 8107968:	4929      	ldr	r1, [pc, #164]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 810796a:	4313      	orrs	r3, r2
 810796c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810796e:	4b28      	ldr	r3, [pc, #160]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107972:	4a27      	ldr	r2, [pc, #156]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107974:	f023 0310 	bic.w	r3, r3, #16
 8107978:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810797a:	4b25      	ldr	r3, [pc, #148]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 810797c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810797e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107982:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107986:	687a      	ldr	r2, [r7, #4]
 8107988:	69d2      	ldr	r2, [r2, #28]
 810798a:	00d2      	lsls	r2, r2, #3
 810798c:	4920      	ldr	r1, [pc, #128]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 810798e:	4313      	orrs	r3, r2
 8107990:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8107992:	4b1f      	ldr	r3, [pc, #124]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107996:	4a1e      	ldr	r2, [pc, #120]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 8107998:	f043 0310 	orr.w	r3, r3, #16
 810799c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810799e:	683b      	ldr	r3, [r7, #0]
 81079a0:	2b00      	cmp	r3, #0
 81079a2:	d106      	bne.n	81079b2 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 81079a4:	4b1a      	ldr	r3, [pc, #104]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079a8:	4a19      	ldr	r2, [pc, #100]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 81079ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81079b0:	e00f      	b.n	81079d2 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81079b2:	683b      	ldr	r3, [r7, #0]
 81079b4:	2b01      	cmp	r3, #1
 81079b6:	d106      	bne.n	81079c6 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81079b8:	4b15      	ldr	r3, [pc, #84]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079bc:	4a14      	ldr	r2, [pc, #80]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81079c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81079c4:	e005      	b.n	81079d2 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81079c6:	4b12      	ldr	r3, [pc, #72]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81079ca:	4a11      	ldr	r2, [pc, #68]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81079d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81079d2:	4b0f      	ldr	r3, [pc, #60]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079d4:	681b      	ldr	r3, [r3, #0]
 81079d6:	4a0e      	ldr	r2, [pc, #56]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079d8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81079dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81079de:	f7fa feb5 	bl	810274c <HAL_GetTick>
 81079e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81079e4:	e008      	b.n	81079f8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81079e6:	f7fa feb1 	bl	810274c <HAL_GetTick>
 81079ea:	4602      	mov	r2, r0
 81079ec:	68bb      	ldr	r3, [r7, #8]
 81079ee:	1ad3      	subs	r3, r2, r3
 81079f0:	2b02      	cmp	r3, #2
 81079f2:	d901      	bls.n	81079f8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81079f4:	2303      	movs	r3, #3
 81079f6:	e006      	b.n	8107a06 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81079f8:	4b05      	ldr	r3, [pc, #20]	@ (8107a10 <RCCEx_PLL2_Config+0x160>)
 81079fa:	681b      	ldr	r3, [r3, #0]
 81079fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a00:	2b00      	cmp	r3, #0
 8107a02:	d0f0      	beq.n	81079e6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8107a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8107a06:	4618      	mov	r0, r3
 8107a08:	3710      	adds	r7, #16
 8107a0a:	46bd      	mov	sp, r7
 8107a0c:	bd80      	pop	{r7, pc}
 8107a0e:	bf00      	nop
 8107a10:	58024400 	.word	0x58024400

08107a14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8107a14:	b580      	push	{r7, lr}
 8107a16:	b084      	sub	sp, #16
 8107a18:	af00      	add	r7, sp, #0
 8107a1a:	6078      	str	r0, [r7, #4]
 8107a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8107a1e:	2300      	movs	r3, #0
 8107a20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8107a22:	4b54      	ldr	r3, [pc, #336]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107a26:	f003 0303 	and.w	r3, r3, #3
 8107a2a:	2b03      	cmp	r3, #3
 8107a2c:	d101      	bne.n	8107a32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8107a2e:	2301      	movs	r3, #1
 8107a30:	e09b      	b.n	8107b6a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8107a32:	4b50      	ldr	r3, [pc, #320]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a34:	681b      	ldr	r3, [r3, #0]
 8107a36:	4a4f      	ldr	r2, [pc, #316]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a38:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8107a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107a3e:	f7fa fe85 	bl	810274c <HAL_GetTick>
 8107a42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107a44:	e008      	b.n	8107a58 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107a46:	f7fa fe81 	bl	810274c <HAL_GetTick>
 8107a4a:	4602      	mov	r2, r0
 8107a4c:	68bb      	ldr	r3, [r7, #8]
 8107a4e:	1ad3      	subs	r3, r2, r3
 8107a50:	2b02      	cmp	r3, #2
 8107a52:	d901      	bls.n	8107a58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8107a54:	2303      	movs	r3, #3
 8107a56:	e088      	b.n	8107b6a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8107a58:	4b46      	ldr	r3, [pc, #280]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a5a:	681b      	ldr	r3, [r3, #0]
 8107a5c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107a60:	2b00      	cmp	r3, #0
 8107a62:	d1f0      	bne.n	8107a46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8107a64:	4b43      	ldr	r3, [pc, #268]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107a68:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8107a6c:	687b      	ldr	r3, [r7, #4]
 8107a6e:	681b      	ldr	r3, [r3, #0]
 8107a70:	051b      	lsls	r3, r3, #20
 8107a72:	4940      	ldr	r1, [pc, #256]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107a74:	4313      	orrs	r3, r2
 8107a76:	628b      	str	r3, [r1, #40]	@ 0x28
 8107a78:	687b      	ldr	r3, [r7, #4]
 8107a7a:	685b      	ldr	r3, [r3, #4]
 8107a7c:	3b01      	subs	r3, #1
 8107a7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8107a82:	687b      	ldr	r3, [r7, #4]
 8107a84:	689b      	ldr	r3, [r3, #8]
 8107a86:	3b01      	subs	r3, #1
 8107a88:	025b      	lsls	r3, r3, #9
 8107a8a:	b29b      	uxth	r3, r3
 8107a8c:	431a      	orrs	r2, r3
 8107a8e:	687b      	ldr	r3, [r7, #4]
 8107a90:	68db      	ldr	r3, [r3, #12]
 8107a92:	3b01      	subs	r3, #1
 8107a94:	041b      	lsls	r3, r3, #16
 8107a96:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8107a9a:	431a      	orrs	r2, r3
 8107a9c:	687b      	ldr	r3, [r7, #4]
 8107a9e:	691b      	ldr	r3, [r3, #16]
 8107aa0:	3b01      	subs	r3, #1
 8107aa2:	061b      	lsls	r3, r3, #24
 8107aa4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8107aa8:	4932      	ldr	r1, [pc, #200]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107aaa:	4313      	orrs	r3, r2
 8107aac:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8107aae:	4b31      	ldr	r3, [pc, #196]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ab2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8107ab6:	687b      	ldr	r3, [r7, #4]
 8107ab8:	695b      	ldr	r3, [r3, #20]
 8107aba:	492e      	ldr	r1, [pc, #184]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107abc:	4313      	orrs	r3, r2
 8107abe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8107ac0:	4b2c      	ldr	r3, [pc, #176]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ac4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8107ac8:	687b      	ldr	r3, [r7, #4]
 8107aca:	699b      	ldr	r3, [r3, #24]
 8107acc:	4929      	ldr	r1, [pc, #164]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ace:	4313      	orrs	r3, r2
 8107ad0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8107ad2:	4b28      	ldr	r3, [pc, #160]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ad4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107ad6:	4a27      	ldr	r2, [pc, #156]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ad8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8107adc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8107ade:	4b25      	ldr	r3, [pc, #148]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107ae2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8107ae6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8107aea:	687a      	ldr	r2, [r7, #4]
 8107aec:	69d2      	ldr	r2, [r2, #28]
 8107aee:	00d2      	lsls	r2, r2, #3
 8107af0:	4920      	ldr	r1, [pc, #128]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107af2:	4313      	orrs	r3, r2
 8107af4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8107af6:	4b1f      	ldr	r3, [pc, #124]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107afa:	4a1e      	ldr	r2, [pc, #120]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8107b00:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8107b02:	683b      	ldr	r3, [r7, #0]
 8107b04:	2b00      	cmp	r3, #0
 8107b06:	d106      	bne.n	8107b16 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8107b08:	4b1a      	ldr	r3, [pc, #104]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b0c:	4a19      	ldr	r2, [pc, #100]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b0e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8107b12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107b14:	e00f      	b.n	8107b36 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8107b16:	683b      	ldr	r3, [r7, #0]
 8107b18:	2b01      	cmp	r3, #1
 8107b1a:	d106      	bne.n	8107b2a <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8107b1c:	4b15      	ldr	r3, [pc, #84]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b20:	4a14      	ldr	r2, [pc, #80]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b22:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8107b26:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8107b28:	e005      	b.n	8107b36 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8107b2a:	4b12      	ldr	r3, [pc, #72]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107b2e:	4a11      	ldr	r2, [pc, #68]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b30:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8107b34:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8107b36:	4b0f      	ldr	r3, [pc, #60]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b38:	681b      	ldr	r3, [r3, #0]
 8107b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8107b40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8107b42:	f7fa fe03 	bl	810274c <HAL_GetTick>
 8107b46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107b48:	e008      	b.n	8107b5c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8107b4a:	f7fa fdff 	bl	810274c <HAL_GetTick>
 8107b4e:	4602      	mov	r2, r0
 8107b50:	68bb      	ldr	r3, [r7, #8]
 8107b52:	1ad3      	subs	r3, r2, r3
 8107b54:	2b02      	cmp	r3, #2
 8107b56:	d901      	bls.n	8107b5c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8107b58:	2303      	movs	r3, #3
 8107b5a:	e006      	b.n	8107b6a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8107b5c:	4b05      	ldr	r3, [pc, #20]	@ (8107b74 <RCCEx_PLL3_Config+0x160>)
 8107b5e:	681b      	ldr	r3, [r3, #0]
 8107b60:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b64:	2b00      	cmp	r3, #0
 8107b66:	d0f0      	beq.n	8107b4a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8107b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8107b6a:	4618      	mov	r0, r3
 8107b6c:	3710      	adds	r7, #16
 8107b6e:	46bd      	mov	sp, r7
 8107b70:	bd80      	pop	{r7, pc}
 8107b72:	bf00      	nop
 8107b74:	58024400 	.word	0x58024400

08107b78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8107b78:	b580      	push	{r7, lr}
 8107b7a:	b082      	sub	sp, #8
 8107b7c:	af00      	add	r7, sp, #0
 8107b7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107b80:	687b      	ldr	r3, [r7, #4]
 8107b82:	2b00      	cmp	r3, #0
 8107b84:	d101      	bne.n	8107b8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8107b86:	2301      	movs	r3, #1
 8107b88:	e049      	b.n	8107c1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107b8a:	687b      	ldr	r3, [r7, #4]
 8107b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107b90:	b2db      	uxtb	r3, r3
 8107b92:	2b00      	cmp	r3, #0
 8107b94:	d106      	bne.n	8107ba4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107b96:	687b      	ldr	r3, [r7, #4]
 8107b98:	2200      	movs	r2, #0
 8107b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8107b9e:	6878      	ldr	r0, [r7, #4]
 8107ba0:	f7fa faf6 	bl	8102190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107ba4:	687b      	ldr	r3, [r7, #4]
 8107ba6:	2202      	movs	r2, #2
 8107ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107bac:	687b      	ldr	r3, [r7, #4]
 8107bae:	681a      	ldr	r2, [r3, #0]
 8107bb0:	687b      	ldr	r3, [r7, #4]
 8107bb2:	3304      	adds	r3, #4
 8107bb4:	4619      	mov	r1, r3
 8107bb6:	4610      	mov	r0, r2
 8107bb8:	f000 feca 	bl	8108950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107bbc:	687b      	ldr	r3, [r7, #4]
 8107bbe:	2201      	movs	r2, #1
 8107bc0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107bc4:	687b      	ldr	r3, [r7, #4]
 8107bc6:	2201      	movs	r2, #1
 8107bc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107bcc:	687b      	ldr	r3, [r7, #4]
 8107bce:	2201      	movs	r2, #1
 8107bd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107bd4:	687b      	ldr	r3, [r7, #4]
 8107bd6:	2201      	movs	r2, #1
 8107bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107bdc:	687b      	ldr	r3, [r7, #4]
 8107bde:	2201      	movs	r2, #1
 8107be0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107be4:	687b      	ldr	r3, [r7, #4]
 8107be6:	2201      	movs	r2, #1
 8107be8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107bec:	687b      	ldr	r3, [r7, #4]
 8107bee:	2201      	movs	r2, #1
 8107bf0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107bf4:	687b      	ldr	r3, [r7, #4]
 8107bf6:	2201      	movs	r2, #1
 8107bf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107bfc:	687b      	ldr	r3, [r7, #4]
 8107bfe:	2201      	movs	r2, #1
 8107c00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107c04:	687b      	ldr	r3, [r7, #4]
 8107c06:	2201      	movs	r2, #1
 8107c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107c0c:	687b      	ldr	r3, [r7, #4]
 8107c0e:	2201      	movs	r2, #1
 8107c10:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107c14:	687b      	ldr	r3, [r7, #4]
 8107c16:	2201      	movs	r2, #1
 8107c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107c1c:	2300      	movs	r3, #0
}
 8107c1e:	4618      	mov	r0, r3
 8107c20:	3708      	adds	r7, #8
 8107c22:	46bd      	mov	sp, r7
 8107c24:	bd80      	pop	{r7, pc}
	...

08107c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8107c28:	b480      	push	{r7}
 8107c2a:	b085      	sub	sp, #20
 8107c2c:	af00      	add	r7, sp, #0
 8107c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8107c30:	687b      	ldr	r3, [r7, #4]
 8107c32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107c36:	b2db      	uxtb	r3, r3
 8107c38:	2b01      	cmp	r3, #1
 8107c3a:	d001      	beq.n	8107c40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8107c3c:	2301      	movs	r3, #1
 8107c3e:	e054      	b.n	8107cea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107c40:	687b      	ldr	r3, [r7, #4]
 8107c42:	2202      	movs	r2, #2
 8107c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8107c48:	687b      	ldr	r3, [r7, #4]
 8107c4a:	681b      	ldr	r3, [r3, #0]
 8107c4c:	68da      	ldr	r2, [r3, #12]
 8107c4e:	687b      	ldr	r3, [r7, #4]
 8107c50:	681b      	ldr	r3, [r3, #0]
 8107c52:	f042 0201 	orr.w	r2, r2, #1
 8107c56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107c58:	687b      	ldr	r3, [r7, #4]
 8107c5a:	681b      	ldr	r3, [r3, #0]
 8107c5c:	4a26      	ldr	r2, [pc, #152]	@ (8107cf8 <HAL_TIM_Base_Start_IT+0xd0>)
 8107c5e:	4293      	cmp	r3, r2
 8107c60:	d022      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c62:	687b      	ldr	r3, [r7, #4]
 8107c64:	681b      	ldr	r3, [r3, #0]
 8107c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107c6a:	d01d      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c6c:	687b      	ldr	r3, [r7, #4]
 8107c6e:	681b      	ldr	r3, [r3, #0]
 8107c70:	4a22      	ldr	r2, [pc, #136]	@ (8107cfc <HAL_TIM_Base_Start_IT+0xd4>)
 8107c72:	4293      	cmp	r3, r2
 8107c74:	d018      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c76:	687b      	ldr	r3, [r7, #4]
 8107c78:	681b      	ldr	r3, [r3, #0]
 8107c7a:	4a21      	ldr	r2, [pc, #132]	@ (8107d00 <HAL_TIM_Base_Start_IT+0xd8>)
 8107c7c:	4293      	cmp	r3, r2
 8107c7e:	d013      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c80:	687b      	ldr	r3, [r7, #4]
 8107c82:	681b      	ldr	r3, [r3, #0]
 8107c84:	4a1f      	ldr	r2, [pc, #124]	@ (8107d04 <HAL_TIM_Base_Start_IT+0xdc>)
 8107c86:	4293      	cmp	r3, r2
 8107c88:	d00e      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c8a:	687b      	ldr	r3, [r7, #4]
 8107c8c:	681b      	ldr	r3, [r3, #0]
 8107c8e:	4a1e      	ldr	r2, [pc, #120]	@ (8107d08 <HAL_TIM_Base_Start_IT+0xe0>)
 8107c90:	4293      	cmp	r3, r2
 8107c92:	d009      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c94:	687b      	ldr	r3, [r7, #4]
 8107c96:	681b      	ldr	r3, [r3, #0]
 8107c98:	4a1c      	ldr	r2, [pc, #112]	@ (8107d0c <HAL_TIM_Base_Start_IT+0xe4>)
 8107c9a:	4293      	cmp	r3, r2
 8107c9c:	d004      	beq.n	8107ca8 <HAL_TIM_Base_Start_IT+0x80>
 8107c9e:	687b      	ldr	r3, [r7, #4]
 8107ca0:	681b      	ldr	r3, [r3, #0]
 8107ca2:	4a1b      	ldr	r2, [pc, #108]	@ (8107d10 <HAL_TIM_Base_Start_IT+0xe8>)
 8107ca4:	4293      	cmp	r3, r2
 8107ca6:	d115      	bne.n	8107cd4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8107ca8:	687b      	ldr	r3, [r7, #4]
 8107caa:	681b      	ldr	r3, [r3, #0]
 8107cac:	689a      	ldr	r2, [r3, #8]
 8107cae:	4b19      	ldr	r3, [pc, #100]	@ (8107d14 <HAL_TIM_Base_Start_IT+0xec>)
 8107cb0:	4013      	ands	r3, r2
 8107cb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107cb4:	68fb      	ldr	r3, [r7, #12]
 8107cb6:	2b06      	cmp	r3, #6
 8107cb8:	d015      	beq.n	8107ce6 <HAL_TIM_Base_Start_IT+0xbe>
 8107cba:	68fb      	ldr	r3, [r7, #12]
 8107cbc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107cc0:	d011      	beq.n	8107ce6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8107cc2:	687b      	ldr	r3, [r7, #4]
 8107cc4:	681b      	ldr	r3, [r3, #0]
 8107cc6:	681a      	ldr	r2, [r3, #0]
 8107cc8:	687b      	ldr	r3, [r7, #4]
 8107cca:	681b      	ldr	r3, [r3, #0]
 8107ccc:	f042 0201 	orr.w	r2, r2, #1
 8107cd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107cd2:	e008      	b.n	8107ce6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8107cd4:	687b      	ldr	r3, [r7, #4]
 8107cd6:	681b      	ldr	r3, [r3, #0]
 8107cd8:	681a      	ldr	r2, [r3, #0]
 8107cda:	687b      	ldr	r3, [r7, #4]
 8107cdc:	681b      	ldr	r3, [r3, #0]
 8107cde:	f042 0201 	orr.w	r2, r2, #1
 8107ce2:	601a      	str	r2, [r3, #0]
 8107ce4:	e000      	b.n	8107ce8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8107ce6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8107ce8:	2300      	movs	r3, #0
}
 8107cea:	4618      	mov	r0, r3
 8107cec:	3714      	adds	r7, #20
 8107cee:	46bd      	mov	sp, r7
 8107cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107cf4:	4770      	bx	lr
 8107cf6:	bf00      	nop
 8107cf8:	40010000 	.word	0x40010000
 8107cfc:	40000400 	.word	0x40000400
 8107d00:	40000800 	.word	0x40000800
 8107d04:	40000c00 	.word	0x40000c00
 8107d08:	40010400 	.word	0x40010400
 8107d0c:	40001800 	.word	0x40001800
 8107d10:	40014000 	.word	0x40014000
 8107d14:	00010007 	.word	0x00010007

08107d18 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8107d18:	b580      	push	{r7, lr}
 8107d1a:	b082      	sub	sp, #8
 8107d1c:	af00      	add	r7, sp, #0
 8107d1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107d20:	687b      	ldr	r3, [r7, #4]
 8107d22:	2b00      	cmp	r3, #0
 8107d24:	d101      	bne.n	8107d2a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8107d26:	2301      	movs	r3, #1
 8107d28:	e049      	b.n	8107dbe <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107d2a:	687b      	ldr	r3, [r7, #4]
 8107d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107d30:	b2db      	uxtb	r3, r3
 8107d32:	2b00      	cmp	r3, #0
 8107d34:	d106      	bne.n	8107d44 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107d36:	687b      	ldr	r3, [r7, #4]
 8107d38:	2200      	movs	r2, #0
 8107d3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8107d3e:	6878      	ldr	r0, [r7, #4]
 8107d40:	f000 f841 	bl	8107dc6 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107d44:	687b      	ldr	r3, [r7, #4]
 8107d46:	2202      	movs	r2, #2
 8107d48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8107d4c:	687b      	ldr	r3, [r7, #4]
 8107d4e:	681a      	ldr	r2, [r3, #0]
 8107d50:	687b      	ldr	r3, [r7, #4]
 8107d52:	3304      	adds	r3, #4
 8107d54:	4619      	mov	r1, r3
 8107d56:	4610      	mov	r0, r2
 8107d58:	f000 fdfa 	bl	8108950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107d5c:	687b      	ldr	r3, [r7, #4]
 8107d5e:	2201      	movs	r2, #1
 8107d60:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107d64:	687b      	ldr	r3, [r7, #4]
 8107d66:	2201      	movs	r2, #1
 8107d68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107d6c:	687b      	ldr	r3, [r7, #4]
 8107d6e:	2201      	movs	r2, #1
 8107d70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107d74:	687b      	ldr	r3, [r7, #4]
 8107d76:	2201      	movs	r2, #1
 8107d78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107d7c:	687b      	ldr	r3, [r7, #4]
 8107d7e:	2201      	movs	r2, #1
 8107d80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107d84:	687b      	ldr	r3, [r7, #4]
 8107d86:	2201      	movs	r2, #1
 8107d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107d8c:	687b      	ldr	r3, [r7, #4]
 8107d8e:	2201      	movs	r2, #1
 8107d90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107d94:	687b      	ldr	r3, [r7, #4]
 8107d96:	2201      	movs	r2, #1
 8107d98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107d9c:	687b      	ldr	r3, [r7, #4]
 8107d9e:	2201      	movs	r2, #1
 8107da0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107da4:	687b      	ldr	r3, [r7, #4]
 8107da6:	2201      	movs	r2, #1
 8107da8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107dac:	687b      	ldr	r3, [r7, #4]
 8107dae:	2201      	movs	r2, #1
 8107db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107db4:	687b      	ldr	r3, [r7, #4]
 8107db6:	2201      	movs	r2, #1
 8107db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107dbc:	2300      	movs	r3, #0
}
 8107dbe:	4618      	mov	r0, r3
 8107dc0:	3708      	adds	r7, #8
 8107dc2:	46bd      	mov	sp, r7
 8107dc4:	bd80      	pop	{r7, pc}

08107dc6 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8107dc6:	b480      	push	{r7}
 8107dc8:	b083      	sub	sp, #12
 8107dca:	af00      	add	r7, sp, #0
 8107dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8107dce:	bf00      	nop
 8107dd0:	370c      	adds	r7, #12
 8107dd2:	46bd      	mov	sp, r7
 8107dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107dd8:	4770      	bx	lr

08107dda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8107dda:	b580      	push	{r7, lr}
 8107ddc:	b082      	sub	sp, #8
 8107dde:	af00      	add	r7, sp, #0
 8107de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8107de2:	687b      	ldr	r3, [r7, #4]
 8107de4:	2b00      	cmp	r3, #0
 8107de6:	d101      	bne.n	8107dec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8107de8:	2301      	movs	r3, #1
 8107dea:	e049      	b.n	8107e80 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8107dec:	687b      	ldr	r3, [r7, #4]
 8107dee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8107df2:	b2db      	uxtb	r3, r3
 8107df4:	2b00      	cmp	r3, #0
 8107df6:	d106      	bne.n	8107e06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8107df8:	687b      	ldr	r3, [r7, #4]
 8107dfa:	2200      	movs	r2, #0
 8107dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8107e00:	6878      	ldr	r0, [r7, #4]
 8107e02:	f000 f841 	bl	8107e88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107e06:	687b      	ldr	r3, [r7, #4]
 8107e08:	2202      	movs	r2, #2
 8107e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8107e0e:	687b      	ldr	r3, [r7, #4]
 8107e10:	681a      	ldr	r2, [r3, #0]
 8107e12:	687b      	ldr	r3, [r7, #4]
 8107e14:	3304      	adds	r3, #4
 8107e16:	4619      	mov	r1, r3
 8107e18:	4610      	mov	r0, r2
 8107e1a:	f000 fd99 	bl	8108950 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8107e1e:	687b      	ldr	r3, [r7, #4]
 8107e20:	2201      	movs	r2, #1
 8107e22:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107e26:	687b      	ldr	r3, [r7, #4]
 8107e28:	2201      	movs	r2, #1
 8107e2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107e2e:	687b      	ldr	r3, [r7, #4]
 8107e30:	2201      	movs	r2, #1
 8107e32:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107e36:	687b      	ldr	r3, [r7, #4]
 8107e38:	2201      	movs	r2, #1
 8107e3a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107e3e:	687b      	ldr	r3, [r7, #4]
 8107e40:	2201      	movs	r2, #1
 8107e42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107e46:	687b      	ldr	r3, [r7, #4]
 8107e48:	2201      	movs	r2, #1
 8107e4a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107e4e:	687b      	ldr	r3, [r7, #4]
 8107e50:	2201      	movs	r2, #1
 8107e52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8107e56:	687b      	ldr	r3, [r7, #4]
 8107e58:	2201      	movs	r2, #1
 8107e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8107e5e:	687b      	ldr	r3, [r7, #4]
 8107e60:	2201      	movs	r2, #1
 8107e62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8107e66:	687b      	ldr	r3, [r7, #4]
 8107e68:	2201      	movs	r2, #1
 8107e6a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8107e6e:	687b      	ldr	r3, [r7, #4]
 8107e70:	2201      	movs	r2, #1
 8107e72:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8107e76:	687b      	ldr	r3, [r7, #4]
 8107e78:	2201      	movs	r2, #1
 8107e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8107e7e:	2300      	movs	r3, #0
}
 8107e80:	4618      	mov	r0, r3
 8107e82:	3708      	adds	r7, #8
 8107e84:	46bd      	mov	sp, r7
 8107e86:	bd80      	pop	{r7, pc}

08107e88 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8107e88:	b480      	push	{r7}
 8107e8a:	b083      	sub	sp, #12
 8107e8c:	af00      	add	r7, sp, #0
 8107e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8107e90:	bf00      	nop
 8107e92:	370c      	adds	r7, #12
 8107e94:	46bd      	mov	sp, r7
 8107e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107e9a:	4770      	bx	lr

08107e9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8107e9c:	b580      	push	{r7, lr}
 8107e9e:	b084      	sub	sp, #16
 8107ea0:	af00      	add	r7, sp, #0
 8107ea2:	6078      	str	r0, [r7, #4]
 8107ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8107ea6:	683b      	ldr	r3, [r7, #0]
 8107ea8:	2b00      	cmp	r3, #0
 8107eaa:	d109      	bne.n	8107ec0 <HAL_TIM_PWM_Start+0x24>
 8107eac:	687b      	ldr	r3, [r7, #4]
 8107eae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8107eb2:	b2db      	uxtb	r3, r3
 8107eb4:	2b01      	cmp	r3, #1
 8107eb6:	bf14      	ite	ne
 8107eb8:	2301      	movne	r3, #1
 8107eba:	2300      	moveq	r3, #0
 8107ebc:	b2db      	uxtb	r3, r3
 8107ebe:	e03c      	b.n	8107f3a <HAL_TIM_PWM_Start+0x9e>
 8107ec0:	683b      	ldr	r3, [r7, #0]
 8107ec2:	2b04      	cmp	r3, #4
 8107ec4:	d109      	bne.n	8107eda <HAL_TIM_PWM_Start+0x3e>
 8107ec6:	687b      	ldr	r3, [r7, #4]
 8107ec8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8107ecc:	b2db      	uxtb	r3, r3
 8107ece:	2b01      	cmp	r3, #1
 8107ed0:	bf14      	ite	ne
 8107ed2:	2301      	movne	r3, #1
 8107ed4:	2300      	moveq	r3, #0
 8107ed6:	b2db      	uxtb	r3, r3
 8107ed8:	e02f      	b.n	8107f3a <HAL_TIM_PWM_Start+0x9e>
 8107eda:	683b      	ldr	r3, [r7, #0]
 8107edc:	2b08      	cmp	r3, #8
 8107ede:	d109      	bne.n	8107ef4 <HAL_TIM_PWM_Start+0x58>
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8107ee6:	b2db      	uxtb	r3, r3
 8107ee8:	2b01      	cmp	r3, #1
 8107eea:	bf14      	ite	ne
 8107eec:	2301      	movne	r3, #1
 8107eee:	2300      	moveq	r3, #0
 8107ef0:	b2db      	uxtb	r3, r3
 8107ef2:	e022      	b.n	8107f3a <HAL_TIM_PWM_Start+0x9e>
 8107ef4:	683b      	ldr	r3, [r7, #0]
 8107ef6:	2b0c      	cmp	r3, #12
 8107ef8:	d109      	bne.n	8107f0e <HAL_TIM_PWM_Start+0x72>
 8107efa:	687b      	ldr	r3, [r7, #4]
 8107efc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8107f00:	b2db      	uxtb	r3, r3
 8107f02:	2b01      	cmp	r3, #1
 8107f04:	bf14      	ite	ne
 8107f06:	2301      	movne	r3, #1
 8107f08:	2300      	moveq	r3, #0
 8107f0a:	b2db      	uxtb	r3, r3
 8107f0c:	e015      	b.n	8107f3a <HAL_TIM_PWM_Start+0x9e>
 8107f0e:	683b      	ldr	r3, [r7, #0]
 8107f10:	2b10      	cmp	r3, #16
 8107f12:	d109      	bne.n	8107f28 <HAL_TIM_PWM_Start+0x8c>
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8107f1a:	b2db      	uxtb	r3, r3
 8107f1c:	2b01      	cmp	r3, #1
 8107f1e:	bf14      	ite	ne
 8107f20:	2301      	movne	r3, #1
 8107f22:	2300      	moveq	r3, #0
 8107f24:	b2db      	uxtb	r3, r3
 8107f26:	e008      	b.n	8107f3a <HAL_TIM_PWM_Start+0x9e>
 8107f28:	687b      	ldr	r3, [r7, #4]
 8107f2a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8107f2e:	b2db      	uxtb	r3, r3
 8107f30:	2b01      	cmp	r3, #1
 8107f32:	bf14      	ite	ne
 8107f34:	2301      	movne	r3, #1
 8107f36:	2300      	moveq	r3, #0
 8107f38:	b2db      	uxtb	r3, r3
 8107f3a:	2b00      	cmp	r3, #0
 8107f3c:	d001      	beq.n	8107f42 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8107f3e:	2301      	movs	r3, #1
 8107f40:	e0a1      	b.n	8108086 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8107f42:	683b      	ldr	r3, [r7, #0]
 8107f44:	2b00      	cmp	r3, #0
 8107f46:	d104      	bne.n	8107f52 <HAL_TIM_PWM_Start+0xb6>
 8107f48:	687b      	ldr	r3, [r7, #4]
 8107f4a:	2202      	movs	r2, #2
 8107f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8107f50:	e023      	b.n	8107f9a <HAL_TIM_PWM_Start+0xfe>
 8107f52:	683b      	ldr	r3, [r7, #0]
 8107f54:	2b04      	cmp	r3, #4
 8107f56:	d104      	bne.n	8107f62 <HAL_TIM_PWM_Start+0xc6>
 8107f58:	687b      	ldr	r3, [r7, #4]
 8107f5a:	2202      	movs	r2, #2
 8107f5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8107f60:	e01b      	b.n	8107f9a <HAL_TIM_PWM_Start+0xfe>
 8107f62:	683b      	ldr	r3, [r7, #0]
 8107f64:	2b08      	cmp	r3, #8
 8107f66:	d104      	bne.n	8107f72 <HAL_TIM_PWM_Start+0xd6>
 8107f68:	687b      	ldr	r3, [r7, #4]
 8107f6a:	2202      	movs	r2, #2
 8107f6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8107f70:	e013      	b.n	8107f9a <HAL_TIM_PWM_Start+0xfe>
 8107f72:	683b      	ldr	r3, [r7, #0]
 8107f74:	2b0c      	cmp	r3, #12
 8107f76:	d104      	bne.n	8107f82 <HAL_TIM_PWM_Start+0xe6>
 8107f78:	687b      	ldr	r3, [r7, #4]
 8107f7a:	2202      	movs	r2, #2
 8107f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8107f80:	e00b      	b.n	8107f9a <HAL_TIM_PWM_Start+0xfe>
 8107f82:	683b      	ldr	r3, [r7, #0]
 8107f84:	2b10      	cmp	r3, #16
 8107f86:	d104      	bne.n	8107f92 <HAL_TIM_PWM_Start+0xf6>
 8107f88:	687b      	ldr	r3, [r7, #4]
 8107f8a:	2202      	movs	r2, #2
 8107f8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8107f90:	e003      	b.n	8107f9a <HAL_TIM_PWM_Start+0xfe>
 8107f92:	687b      	ldr	r3, [r7, #4]
 8107f94:	2202      	movs	r2, #2
 8107f96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8107f9a:	687b      	ldr	r3, [r7, #4]
 8107f9c:	681b      	ldr	r3, [r3, #0]
 8107f9e:	2201      	movs	r2, #1
 8107fa0:	6839      	ldr	r1, [r7, #0]
 8107fa2:	4618      	mov	r0, r3
 8107fa4:	f001 f8ec 	bl	8109180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8107fa8:	687b      	ldr	r3, [r7, #4]
 8107faa:	681b      	ldr	r3, [r3, #0]
 8107fac:	4a38      	ldr	r2, [pc, #224]	@ (8108090 <HAL_TIM_PWM_Start+0x1f4>)
 8107fae:	4293      	cmp	r3, r2
 8107fb0:	d013      	beq.n	8107fda <HAL_TIM_PWM_Start+0x13e>
 8107fb2:	687b      	ldr	r3, [r7, #4]
 8107fb4:	681b      	ldr	r3, [r3, #0]
 8107fb6:	4a37      	ldr	r2, [pc, #220]	@ (8108094 <HAL_TIM_PWM_Start+0x1f8>)
 8107fb8:	4293      	cmp	r3, r2
 8107fba:	d00e      	beq.n	8107fda <HAL_TIM_PWM_Start+0x13e>
 8107fbc:	687b      	ldr	r3, [r7, #4]
 8107fbe:	681b      	ldr	r3, [r3, #0]
 8107fc0:	4a35      	ldr	r2, [pc, #212]	@ (8108098 <HAL_TIM_PWM_Start+0x1fc>)
 8107fc2:	4293      	cmp	r3, r2
 8107fc4:	d009      	beq.n	8107fda <HAL_TIM_PWM_Start+0x13e>
 8107fc6:	687b      	ldr	r3, [r7, #4]
 8107fc8:	681b      	ldr	r3, [r3, #0]
 8107fca:	4a34      	ldr	r2, [pc, #208]	@ (810809c <HAL_TIM_PWM_Start+0x200>)
 8107fcc:	4293      	cmp	r3, r2
 8107fce:	d004      	beq.n	8107fda <HAL_TIM_PWM_Start+0x13e>
 8107fd0:	687b      	ldr	r3, [r7, #4]
 8107fd2:	681b      	ldr	r3, [r3, #0]
 8107fd4:	4a32      	ldr	r2, [pc, #200]	@ (81080a0 <HAL_TIM_PWM_Start+0x204>)
 8107fd6:	4293      	cmp	r3, r2
 8107fd8:	d101      	bne.n	8107fde <HAL_TIM_PWM_Start+0x142>
 8107fda:	2301      	movs	r3, #1
 8107fdc:	e000      	b.n	8107fe0 <HAL_TIM_PWM_Start+0x144>
 8107fde:	2300      	movs	r3, #0
 8107fe0:	2b00      	cmp	r3, #0
 8107fe2:	d007      	beq.n	8107ff4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8107fe4:	687b      	ldr	r3, [r7, #4]
 8107fe6:	681b      	ldr	r3, [r3, #0]
 8107fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8107fea:	687b      	ldr	r3, [r7, #4]
 8107fec:	681b      	ldr	r3, [r3, #0]
 8107fee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8107ff2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107ff4:	687b      	ldr	r3, [r7, #4]
 8107ff6:	681b      	ldr	r3, [r3, #0]
 8107ff8:	4a25      	ldr	r2, [pc, #148]	@ (8108090 <HAL_TIM_PWM_Start+0x1f4>)
 8107ffa:	4293      	cmp	r3, r2
 8107ffc:	d022      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 8107ffe:	687b      	ldr	r3, [r7, #4]
 8108000:	681b      	ldr	r3, [r3, #0]
 8108002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108006:	d01d      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 8108008:	687b      	ldr	r3, [r7, #4]
 810800a:	681b      	ldr	r3, [r3, #0]
 810800c:	4a25      	ldr	r2, [pc, #148]	@ (81080a4 <HAL_TIM_PWM_Start+0x208>)
 810800e:	4293      	cmp	r3, r2
 8108010:	d018      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 8108012:	687b      	ldr	r3, [r7, #4]
 8108014:	681b      	ldr	r3, [r3, #0]
 8108016:	4a24      	ldr	r2, [pc, #144]	@ (81080a8 <HAL_TIM_PWM_Start+0x20c>)
 8108018:	4293      	cmp	r3, r2
 810801a:	d013      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 810801c:	687b      	ldr	r3, [r7, #4]
 810801e:	681b      	ldr	r3, [r3, #0]
 8108020:	4a22      	ldr	r2, [pc, #136]	@ (81080ac <HAL_TIM_PWM_Start+0x210>)
 8108022:	4293      	cmp	r3, r2
 8108024:	d00e      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 8108026:	687b      	ldr	r3, [r7, #4]
 8108028:	681b      	ldr	r3, [r3, #0]
 810802a:	4a1a      	ldr	r2, [pc, #104]	@ (8108094 <HAL_TIM_PWM_Start+0x1f8>)
 810802c:	4293      	cmp	r3, r2
 810802e:	d009      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 8108030:	687b      	ldr	r3, [r7, #4]
 8108032:	681b      	ldr	r3, [r3, #0]
 8108034:	4a1e      	ldr	r2, [pc, #120]	@ (81080b0 <HAL_TIM_PWM_Start+0x214>)
 8108036:	4293      	cmp	r3, r2
 8108038:	d004      	beq.n	8108044 <HAL_TIM_PWM_Start+0x1a8>
 810803a:	687b      	ldr	r3, [r7, #4]
 810803c:	681b      	ldr	r3, [r3, #0]
 810803e:	4a16      	ldr	r2, [pc, #88]	@ (8108098 <HAL_TIM_PWM_Start+0x1fc>)
 8108040:	4293      	cmp	r3, r2
 8108042:	d115      	bne.n	8108070 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8108044:	687b      	ldr	r3, [r7, #4]
 8108046:	681b      	ldr	r3, [r3, #0]
 8108048:	689a      	ldr	r2, [r3, #8]
 810804a:	4b1a      	ldr	r3, [pc, #104]	@ (81080b4 <HAL_TIM_PWM_Start+0x218>)
 810804c:	4013      	ands	r3, r2
 810804e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108050:	68fb      	ldr	r3, [r7, #12]
 8108052:	2b06      	cmp	r3, #6
 8108054:	d015      	beq.n	8108082 <HAL_TIM_PWM_Start+0x1e6>
 8108056:	68fb      	ldr	r3, [r7, #12]
 8108058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810805c:	d011      	beq.n	8108082 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 810805e:	687b      	ldr	r3, [r7, #4]
 8108060:	681b      	ldr	r3, [r3, #0]
 8108062:	681a      	ldr	r2, [r3, #0]
 8108064:	687b      	ldr	r3, [r7, #4]
 8108066:	681b      	ldr	r3, [r3, #0]
 8108068:	f042 0201 	orr.w	r2, r2, #1
 810806c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810806e:	e008      	b.n	8108082 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8108070:	687b      	ldr	r3, [r7, #4]
 8108072:	681b      	ldr	r3, [r3, #0]
 8108074:	681a      	ldr	r2, [r3, #0]
 8108076:	687b      	ldr	r3, [r7, #4]
 8108078:	681b      	ldr	r3, [r3, #0]
 810807a:	f042 0201 	orr.w	r2, r2, #1
 810807e:	601a      	str	r2, [r3, #0]
 8108080:	e000      	b.n	8108084 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8108082:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8108084:	2300      	movs	r3, #0
}
 8108086:	4618      	mov	r0, r3
 8108088:	3710      	adds	r7, #16
 810808a:	46bd      	mov	sp, r7
 810808c:	bd80      	pop	{r7, pc}
 810808e:	bf00      	nop
 8108090:	40010000 	.word	0x40010000
 8108094:	40010400 	.word	0x40010400
 8108098:	40014000 	.word	0x40014000
 810809c:	40014400 	.word	0x40014400
 81080a0:	40014800 	.word	0x40014800
 81080a4:	40000400 	.word	0x40000400
 81080a8:	40000800 	.word	0x40000800
 81080ac:	40000c00 	.word	0x40000c00
 81080b0:	40001800 	.word	0x40001800
 81080b4:	00010007 	.word	0x00010007

081080b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81080b8:	b580      	push	{r7, lr}
 81080ba:	b082      	sub	sp, #8
 81080bc:	af00      	add	r7, sp, #0
 81080be:	6078      	str	r0, [r7, #4]
 81080c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 81080c2:	687b      	ldr	r3, [r7, #4]
 81080c4:	681b      	ldr	r3, [r3, #0]
 81080c6:	2200      	movs	r2, #0
 81080c8:	6839      	ldr	r1, [r7, #0]
 81080ca:	4618      	mov	r0, r3
 81080cc:	f001 f858 	bl	8109180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 81080d0:	687b      	ldr	r3, [r7, #4]
 81080d2:	681b      	ldr	r3, [r3, #0]
 81080d4:	4a3e      	ldr	r2, [pc, #248]	@ (81081d0 <HAL_TIM_PWM_Stop+0x118>)
 81080d6:	4293      	cmp	r3, r2
 81080d8:	d013      	beq.n	8108102 <HAL_TIM_PWM_Stop+0x4a>
 81080da:	687b      	ldr	r3, [r7, #4]
 81080dc:	681b      	ldr	r3, [r3, #0]
 81080de:	4a3d      	ldr	r2, [pc, #244]	@ (81081d4 <HAL_TIM_PWM_Stop+0x11c>)
 81080e0:	4293      	cmp	r3, r2
 81080e2:	d00e      	beq.n	8108102 <HAL_TIM_PWM_Stop+0x4a>
 81080e4:	687b      	ldr	r3, [r7, #4]
 81080e6:	681b      	ldr	r3, [r3, #0]
 81080e8:	4a3b      	ldr	r2, [pc, #236]	@ (81081d8 <HAL_TIM_PWM_Stop+0x120>)
 81080ea:	4293      	cmp	r3, r2
 81080ec:	d009      	beq.n	8108102 <HAL_TIM_PWM_Stop+0x4a>
 81080ee:	687b      	ldr	r3, [r7, #4]
 81080f0:	681b      	ldr	r3, [r3, #0]
 81080f2:	4a3a      	ldr	r2, [pc, #232]	@ (81081dc <HAL_TIM_PWM_Stop+0x124>)
 81080f4:	4293      	cmp	r3, r2
 81080f6:	d004      	beq.n	8108102 <HAL_TIM_PWM_Stop+0x4a>
 81080f8:	687b      	ldr	r3, [r7, #4]
 81080fa:	681b      	ldr	r3, [r3, #0]
 81080fc:	4a38      	ldr	r2, [pc, #224]	@ (81081e0 <HAL_TIM_PWM_Stop+0x128>)
 81080fe:	4293      	cmp	r3, r2
 8108100:	d101      	bne.n	8108106 <HAL_TIM_PWM_Stop+0x4e>
 8108102:	2301      	movs	r3, #1
 8108104:	e000      	b.n	8108108 <HAL_TIM_PWM_Stop+0x50>
 8108106:	2300      	movs	r3, #0
 8108108:	2b00      	cmp	r3, #0
 810810a:	d017      	beq.n	810813c <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 810810c:	687b      	ldr	r3, [r7, #4]
 810810e:	681b      	ldr	r3, [r3, #0]
 8108110:	6a1a      	ldr	r2, [r3, #32]
 8108112:	f241 1311 	movw	r3, #4369	@ 0x1111
 8108116:	4013      	ands	r3, r2
 8108118:	2b00      	cmp	r3, #0
 810811a:	d10f      	bne.n	810813c <HAL_TIM_PWM_Stop+0x84>
 810811c:	687b      	ldr	r3, [r7, #4]
 810811e:	681b      	ldr	r3, [r3, #0]
 8108120:	6a1a      	ldr	r2, [r3, #32]
 8108122:	f240 4344 	movw	r3, #1092	@ 0x444
 8108126:	4013      	ands	r3, r2
 8108128:	2b00      	cmp	r3, #0
 810812a:	d107      	bne.n	810813c <HAL_TIM_PWM_Stop+0x84>
 810812c:	687b      	ldr	r3, [r7, #4]
 810812e:	681b      	ldr	r3, [r3, #0]
 8108130:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8108132:	687b      	ldr	r3, [r7, #4]
 8108134:	681b      	ldr	r3, [r3, #0]
 8108136:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 810813a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 810813c:	687b      	ldr	r3, [r7, #4]
 810813e:	681b      	ldr	r3, [r3, #0]
 8108140:	6a1a      	ldr	r2, [r3, #32]
 8108142:	f241 1311 	movw	r3, #4369	@ 0x1111
 8108146:	4013      	ands	r3, r2
 8108148:	2b00      	cmp	r3, #0
 810814a:	d10f      	bne.n	810816c <HAL_TIM_PWM_Stop+0xb4>
 810814c:	687b      	ldr	r3, [r7, #4]
 810814e:	681b      	ldr	r3, [r3, #0]
 8108150:	6a1a      	ldr	r2, [r3, #32]
 8108152:	f240 4344 	movw	r3, #1092	@ 0x444
 8108156:	4013      	ands	r3, r2
 8108158:	2b00      	cmp	r3, #0
 810815a:	d107      	bne.n	810816c <HAL_TIM_PWM_Stop+0xb4>
 810815c:	687b      	ldr	r3, [r7, #4]
 810815e:	681b      	ldr	r3, [r3, #0]
 8108160:	681a      	ldr	r2, [r3, #0]
 8108162:	687b      	ldr	r3, [r7, #4]
 8108164:	681b      	ldr	r3, [r3, #0]
 8108166:	f022 0201 	bic.w	r2, r2, #1
 810816a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 810816c:	683b      	ldr	r3, [r7, #0]
 810816e:	2b00      	cmp	r3, #0
 8108170:	d104      	bne.n	810817c <HAL_TIM_PWM_Stop+0xc4>
 8108172:	687b      	ldr	r3, [r7, #4]
 8108174:	2201      	movs	r2, #1
 8108176:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 810817a:	e023      	b.n	81081c4 <HAL_TIM_PWM_Stop+0x10c>
 810817c:	683b      	ldr	r3, [r7, #0]
 810817e:	2b04      	cmp	r3, #4
 8108180:	d104      	bne.n	810818c <HAL_TIM_PWM_Stop+0xd4>
 8108182:	687b      	ldr	r3, [r7, #4]
 8108184:	2201      	movs	r2, #1
 8108186:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 810818a:	e01b      	b.n	81081c4 <HAL_TIM_PWM_Stop+0x10c>
 810818c:	683b      	ldr	r3, [r7, #0]
 810818e:	2b08      	cmp	r3, #8
 8108190:	d104      	bne.n	810819c <HAL_TIM_PWM_Stop+0xe4>
 8108192:	687b      	ldr	r3, [r7, #4]
 8108194:	2201      	movs	r2, #1
 8108196:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 810819a:	e013      	b.n	81081c4 <HAL_TIM_PWM_Stop+0x10c>
 810819c:	683b      	ldr	r3, [r7, #0]
 810819e:	2b0c      	cmp	r3, #12
 81081a0:	d104      	bne.n	81081ac <HAL_TIM_PWM_Stop+0xf4>
 81081a2:	687b      	ldr	r3, [r7, #4]
 81081a4:	2201      	movs	r2, #1
 81081a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81081aa:	e00b      	b.n	81081c4 <HAL_TIM_PWM_Stop+0x10c>
 81081ac:	683b      	ldr	r3, [r7, #0]
 81081ae:	2b10      	cmp	r3, #16
 81081b0:	d104      	bne.n	81081bc <HAL_TIM_PWM_Stop+0x104>
 81081b2:	687b      	ldr	r3, [r7, #4]
 81081b4:	2201      	movs	r2, #1
 81081b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81081ba:	e003      	b.n	81081c4 <HAL_TIM_PWM_Stop+0x10c>
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	2201      	movs	r2, #1
 81081c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 81081c4:	2300      	movs	r3, #0
}
 81081c6:	4618      	mov	r0, r3
 81081c8:	3708      	adds	r7, #8
 81081ca:	46bd      	mov	sp, r7
 81081cc:	bd80      	pop	{r7, pc}
 81081ce:	bf00      	nop
 81081d0:	40010000 	.word	0x40010000
 81081d4:	40010400 	.word	0x40010400
 81081d8:	40014000 	.word	0x40014000
 81081dc:	40014400 	.word	0x40014400
 81081e0:	40014800 	.word	0x40014800

081081e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 81081e4:	b580      	push	{r7, lr}
 81081e6:	b084      	sub	sp, #16
 81081e8:	af00      	add	r7, sp, #0
 81081ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 81081ec:	687b      	ldr	r3, [r7, #4]
 81081ee:	681b      	ldr	r3, [r3, #0]
 81081f0:	68db      	ldr	r3, [r3, #12]
 81081f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 81081f4:	687b      	ldr	r3, [r7, #4]
 81081f6:	681b      	ldr	r3, [r3, #0]
 81081f8:	691b      	ldr	r3, [r3, #16]
 81081fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 81081fc:	68bb      	ldr	r3, [r7, #8]
 81081fe:	f003 0302 	and.w	r3, r3, #2
 8108202:	2b00      	cmp	r3, #0
 8108204:	d020      	beq.n	8108248 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8108206:	68fb      	ldr	r3, [r7, #12]
 8108208:	f003 0302 	and.w	r3, r3, #2
 810820c:	2b00      	cmp	r3, #0
 810820e:	d01b      	beq.n	8108248 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8108210:	687b      	ldr	r3, [r7, #4]
 8108212:	681b      	ldr	r3, [r3, #0]
 8108214:	f06f 0202 	mvn.w	r2, #2
 8108218:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810821a:	687b      	ldr	r3, [r7, #4]
 810821c:	2201      	movs	r2, #1
 810821e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108220:	687b      	ldr	r3, [r7, #4]
 8108222:	681b      	ldr	r3, [r3, #0]
 8108224:	699b      	ldr	r3, [r3, #24]
 8108226:	f003 0303 	and.w	r3, r3, #3
 810822a:	2b00      	cmp	r3, #0
 810822c:	d003      	beq.n	8108236 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810822e:	6878      	ldr	r0, [r7, #4]
 8108230:	f000 fb70 	bl	8108914 <HAL_TIM_IC_CaptureCallback>
 8108234:	e005      	b.n	8108242 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108236:	6878      	ldr	r0, [r7, #4]
 8108238:	f000 fb62 	bl	8108900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810823c:	6878      	ldr	r0, [r7, #4]
 810823e:	f000 fb73 	bl	8108928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108242:	687b      	ldr	r3, [r7, #4]
 8108244:	2200      	movs	r2, #0
 8108246:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8108248:	68bb      	ldr	r3, [r7, #8]
 810824a:	f003 0304 	and.w	r3, r3, #4
 810824e:	2b00      	cmp	r3, #0
 8108250:	d020      	beq.n	8108294 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8108252:	68fb      	ldr	r3, [r7, #12]
 8108254:	f003 0304 	and.w	r3, r3, #4
 8108258:	2b00      	cmp	r3, #0
 810825a:	d01b      	beq.n	8108294 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810825c:	687b      	ldr	r3, [r7, #4]
 810825e:	681b      	ldr	r3, [r3, #0]
 8108260:	f06f 0204 	mvn.w	r2, #4
 8108264:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108266:	687b      	ldr	r3, [r7, #4]
 8108268:	2202      	movs	r2, #2
 810826a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810826c:	687b      	ldr	r3, [r7, #4]
 810826e:	681b      	ldr	r3, [r3, #0]
 8108270:	699b      	ldr	r3, [r3, #24]
 8108272:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108276:	2b00      	cmp	r3, #0
 8108278:	d003      	beq.n	8108282 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810827a:	6878      	ldr	r0, [r7, #4]
 810827c:	f000 fb4a 	bl	8108914 <HAL_TIM_IC_CaptureCallback>
 8108280:	e005      	b.n	810828e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108282:	6878      	ldr	r0, [r7, #4]
 8108284:	f000 fb3c 	bl	8108900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108288:	6878      	ldr	r0, [r7, #4]
 810828a:	f000 fb4d 	bl	8108928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810828e:	687b      	ldr	r3, [r7, #4]
 8108290:	2200      	movs	r2, #0
 8108292:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8108294:	68bb      	ldr	r3, [r7, #8]
 8108296:	f003 0308 	and.w	r3, r3, #8
 810829a:	2b00      	cmp	r3, #0
 810829c:	d020      	beq.n	81082e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 810829e:	68fb      	ldr	r3, [r7, #12]
 81082a0:	f003 0308 	and.w	r3, r3, #8
 81082a4:	2b00      	cmp	r3, #0
 81082a6:	d01b      	beq.n	81082e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81082a8:	687b      	ldr	r3, [r7, #4]
 81082aa:	681b      	ldr	r3, [r3, #0]
 81082ac:	f06f 0208 	mvn.w	r2, #8
 81082b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81082b2:	687b      	ldr	r3, [r7, #4]
 81082b4:	2204      	movs	r2, #4
 81082b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81082b8:	687b      	ldr	r3, [r7, #4]
 81082ba:	681b      	ldr	r3, [r3, #0]
 81082bc:	69db      	ldr	r3, [r3, #28]
 81082be:	f003 0303 	and.w	r3, r3, #3
 81082c2:	2b00      	cmp	r3, #0
 81082c4:	d003      	beq.n	81082ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81082c6:	6878      	ldr	r0, [r7, #4]
 81082c8:	f000 fb24 	bl	8108914 <HAL_TIM_IC_CaptureCallback>
 81082cc:	e005      	b.n	81082da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81082ce:	6878      	ldr	r0, [r7, #4]
 81082d0:	f000 fb16 	bl	8108900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81082d4:	6878      	ldr	r0, [r7, #4]
 81082d6:	f000 fb27 	bl	8108928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81082da:	687b      	ldr	r3, [r7, #4]
 81082dc:	2200      	movs	r2, #0
 81082de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 81082e0:	68bb      	ldr	r3, [r7, #8]
 81082e2:	f003 0310 	and.w	r3, r3, #16
 81082e6:	2b00      	cmp	r3, #0
 81082e8:	d020      	beq.n	810832c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 81082ea:	68fb      	ldr	r3, [r7, #12]
 81082ec:	f003 0310 	and.w	r3, r3, #16
 81082f0:	2b00      	cmp	r3, #0
 81082f2:	d01b      	beq.n	810832c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 81082f4:	687b      	ldr	r3, [r7, #4]
 81082f6:	681b      	ldr	r3, [r3, #0]
 81082f8:	f06f 0210 	mvn.w	r2, #16
 81082fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 81082fe:	687b      	ldr	r3, [r7, #4]
 8108300:	2208      	movs	r2, #8
 8108302:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108304:	687b      	ldr	r3, [r7, #4]
 8108306:	681b      	ldr	r3, [r3, #0]
 8108308:	69db      	ldr	r3, [r3, #28]
 810830a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810830e:	2b00      	cmp	r3, #0
 8108310:	d003      	beq.n	810831a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108312:	6878      	ldr	r0, [r7, #4]
 8108314:	f000 fafe 	bl	8108914 <HAL_TIM_IC_CaptureCallback>
 8108318:	e005      	b.n	8108326 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810831a:	6878      	ldr	r0, [r7, #4]
 810831c:	f000 faf0 	bl	8108900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108320:	6878      	ldr	r0, [r7, #4]
 8108322:	f000 fb01 	bl	8108928 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108326:	687b      	ldr	r3, [r7, #4]
 8108328:	2200      	movs	r2, #0
 810832a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 810832c:	68bb      	ldr	r3, [r7, #8]
 810832e:	f003 0301 	and.w	r3, r3, #1
 8108332:	2b00      	cmp	r3, #0
 8108334:	d00c      	beq.n	8108350 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8108336:	68fb      	ldr	r3, [r7, #12]
 8108338:	f003 0301 	and.w	r3, r3, #1
 810833c:	2b00      	cmp	r3, #0
 810833e:	d007      	beq.n	8108350 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8108340:	687b      	ldr	r3, [r7, #4]
 8108342:	681b      	ldr	r3, [r3, #0]
 8108344:	f06f 0201 	mvn.w	r2, #1
 8108348:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 810834a:	6878      	ldr	r0, [r7, #4]
 810834c:	f7f8 f998 	bl	8100680 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108350:	68bb      	ldr	r3, [r7, #8]
 8108352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108356:	2b00      	cmp	r3, #0
 8108358:	d104      	bne.n	8108364 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 810835a:	68bb      	ldr	r3, [r7, #8]
 810835c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108360:	2b00      	cmp	r3, #0
 8108362:	d00c      	beq.n	810837e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108364:	68fb      	ldr	r3, [r7, #12]
 8108366:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810836a:	2b00      	cmp	r3, #0
 810836c:	d007      	beq.n	810837e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 810836e:	687b      	ldr	r3, [r7, #4]
 8108370:	681b      	ldr	r3, [r3, #0]
 8108372:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8108376:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108378:	6878      	ldr	r0, [r7, #4]
 810837a:	f001 f95d 	bl	8109638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 810837e:	68bb      	ldr	r3, [r7, #8]
 8108380:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108384:	2b00      	cmp	r3, #0
 8108386:	d00c      	beq.n	81083a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108388:	68fb      	ldr	r3, [r7, #12]
 810838a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810838e:	2b00      	cmp	r3, #0
 8108390:	d007      	beq.n	81083a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108392:	687b      	ldr	r3, [r7, #4]
 8108394:	681b      	ldr	r3, [r3, #0]
 8108396:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 810839a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 810839c:	6878      	ldr	r0, [r7, #4]
 810839e:	f001 f955 	bl	810964c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 81083a2:	68bb      	ldr	r3, [r7, #8]
 81083a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81083a8:	2b00      	cmp	r3, #0
 81083aa:	d00c      	beq.n	81083c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 81083ac:	68fb      	ldr	r3, [r7, #12]
 81083ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 81083b2:	2b00      	cmp	r3, #0
 81083b4:	d007      	beq.n	81083c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 81083b6:	687b      	ldr	r3, [r7, #4]
 81083b8:	681b      	ldr	r3, [r3, #0]
 81083ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 81083be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 81083c0:	6878      	ldr	r0, [r7, #4]
 81083c2:	f000 fabb 	bl	810893c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 81083c6:	68bb      	ldr	r3, [r7, #8]
 81083c8:	f003 0320 	and.w	r3, r3, #32
 81083cc:	2b00      	cmp	r3, #0
 81083ce:	d00c      	beq.n	81083ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 81083d0:	68fb      	ldr	r3, [r7, #12]
 81083d2:	f003 0320 	and.w	r3, r3, #32
 81083d6:	2b00      	cmp	r3, #0
 81083d8:	d007      	beq.n	81083ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 81083da:	687b      	ldr	r3, [r7, #4]
 81083dc:	681b      	ldr	r3, [r3, #0]
 81083de:	f06f 0220 	mvn.w	r2, #32
 81083e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 81083e4:	6878      	ldr	r0, [r7, #4]
 81083e6:	f001 f91d 	bl	8109624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 81083ea:	bf00      	nop
 81083ec:	3710      	adds	r7, #16
 81083ee:	46bd      	mov	sp, r7
 81083f0:	bd80      	pop	{r7, pc}
	...

081083f4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 81083f4:	b580      	push	{r7, lr}
 81083f6:	b086      	sub	sp, #24
 81083f8:	af00      	add	r7, sp, #0
 81083fa:	60f8      	str	r0, [r7, #12]
 81083fc:	60b9      	str	r1, [r7, #8]
 81083fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8108400:	2300      	movs	r3, #0
 8108402:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8108404:	68fb      	ldr	r3, [r7, #12]
 8108406:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810840a:	2b01      	cmp	r3, #1
 810840c:	d101      	bne.n	8108412 <HAL_TIM_OC_ConfigChannel+0x1e>
 810840e:	2302      	movs	r3, #2
 8108410:	e066      	b.n	81084e0 <HAL_TIM_OC_ConfigChannel+0xec>
 8108412:	68fb      	ldr	r3, [r7, #12]
 8108414:	2201      	movs	r2, #1
 8108416:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810841a:	687b      	ldr	r3, [r7, #4]
 810841c:	2b14      	cmp	r3, #20
 810841e:	d857      	bhi.n	81084d0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8108420:	a201      	add	r2, pc, #4	@ (adr r2, 8108428 <HAL_TIM_OC_ConfigChannel+0x34>)
 8108422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8108426:	bf00      	nop
 8108428:	0810847d 	.word	0x0810847d
 810842c:	081084d1 	.word	0x081084d1
 8108430:	081084d1 	.word	0x081084d1
 8108434:	081084d1 	.word	0x081084d1
 8108438:	0810848b 	.word	0x0810848b
 810843c:	081084d1 	.word	0x081084d1
 8108440:	081084d1 	.word	0x081084d1
 8108444:	081084d1 	.word	0x081084d1
 8108448:	08108499 	.word	0x08108499
 810844c:	081084d1 	.word	0x081084d1
 8108450:	081084d1 	.word	0x081084d1
 8108454:	081084d1 	.word	0x081084d1
 8108458:	081084a7 	.word	0x081084a7
 810845c:	081084d1 	.word	0x081084d1
 8108460:	081084d1 	.word	0x081084d1
 8108464:	081084d1 	.word	0x081084d1
 8108468:	081084b5 	.word	0x081084b5
 810846c:	081084d1 	.word	0x081084d1
 8108470:	081084d1 	.word	0x081084d1
 8108474:	081084d1 	.word	0x081084d1
 8108478:	081084c3 	.word	0x081084c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 810847c:	68fb      	ldr	r3, [r7, #12]
 810847e:	681b      	ldr	r3, [r3, #0]
 8108480:	68b9      	ldr	r1, [r7, #8]
 8108482:	4618      	mov	r0, r3
 8108484:	f000 fb0a 	bl	8108a9c <TIM_OC1_SetConfig>
      break;
 8108488:	e025      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 810848a:	68fb      	ldr	r3, [r7, #12]
 810848c:	681b      	ldr	r3, [r3, #0]
 810848e:	68b9      	ldr	r1, [r7, #8]
 8108490:	4618      	mov	r0, r3
 8108492:	f000 fb93 	bl	8108bbc <TIM_OC2_SetConfig>
      break;
 8108496:	e01e      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8108498:	68fb      	ldr	r3, [r7, #12]
 810849a:	681b      	ldr	r3, [r3, #0]
 810849c:	68b9      	ldr	r1, [r7, #8]
 810849e:	4618      	mov	r0, r3
 81084a0:	f000 fc16 	bl	8108cd0 <TIM_OC3_SetConfig>
      break;
 81084a4:	e017      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 81084a6:	68fb      	ldr	r3, [r7, #12]
 81084a8:	681b      	ldr	r3, [r3, #0]
 81084aa:	68b9      	ldr	r1, [r7, #8]
 81084ac:	4618      	mov	r0, r3
 81084ae:	f000 fc97 	bl	8108de0 <TIM_OC4_SetConfig>
      break;
 81084b2:	e010      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81084b4:	68fb      	ldr	r3, [r7, #12]
 81084b6:	681b      	ldr	r3, [r3, #0]
 81084b8:	68b9      	ldr	r1, [r7, #8]
 81084ba:	4618      	mov	r0, r3
 81084bc:	f000 fcfa 	bl	8108eb4 <TIM_OC5_SetConfig>
      break;
 81084c0:	e009      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81084c2:	68fb      	ldr	r3, [r7, #12]
 81084c4:	681b      	ldr	r3, [r3, #0]
 81084c6:	68b9      	ldr	r1, [r7, #8]
 81084c8:	4618      	mov	r0, r3
 81084ca:	f000 fd57 	bl	8108f7c <TIM_OC6_SetConfig>
      break;
 81084ce:	e002      	b.n	81084d6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 81084d0:	2301      	movs	r3, #1
 81084d2:	75fb      	strb	r3, [r7, #23]
      break;
 81084d4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81084d6:	68fb      	ldr	r3, [r7, #12]
 81084d8:	2200      	movs	r2, #0
 81084da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81084de:	7dfb      	ldrb	r3, [r7, #23]
}
 81084e0:	4618      	mov	r0, r3
 81084e2:	3718      	adds	r7, #24
 81084e4:	46bd      	mov	sp, r7
 81084e6:	bd80      	pop	{r7, pc}

081084e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 81084e8:	b580      	push	{r7, lr}
 81084ea:	b086      	sub	sp, #24
 81084ec:	af00      	add	r7, sp, #0
 81084ee:	60f8      	str	r0, [r7, #12]
 81084f0:	60b9      	str	r1, [r7, #8]
 81084f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81084f4:	2300      	movs	r3, #0
 81084f6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 81084f8:	68fb      	ldr	r3, [r7, #12]
 81084fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 81084fe:	2b01      	cmp	r3, #1
 8108500:	d101      	bne.n	8108506 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8108502:	2302      	movs	r3, #2
 8108504:	e0ff      	b.n	8108706 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8108506:	68fb      	ldr	r3, [r7, #12]
 8108508:	2201      	movs	r2, #1
 810850a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 810850e:	687b      	ldr	r3, [r7, #4]
 8108510:	2b14      	cmp	r3, #20
 8108512:	f200 80f0 	bhi.w	81086f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8108516:	a201      	add	r2, pc, #4	@ (adr r2, 810851c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8108518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810851c:	08108571 	.word	0x08108571
 8108520:	081086f7 	.word	0x081086f7
 8108524:	081086f7 	.word	0x081086f7
 8108528:	081086f7 	.word	0x081086f7
 810852c:	081085b1 	.word	0x081085b1
 8108530:	081086f7 	.word	0x081086f7
 8108534:	081086f7 	.word	0x081086f7
 8108538:	081086f7 	.word	0x081086f7
 810853c:	081085f3 	.word	0x081085f3
 8108540:	081086f7 	.word	0x081086f7
 8108544:	081086f7 	.word	0x081086f7
 8108548:	081086f7 	.word	0x081086f7
 810854c:	08108633 	.word	0x08108633
 8108550:	081086f7 	.word	0x081086f7
 8108554:	081086f7 	.word	0x081086f7
 8108558:	081086f7 	.word	0x081086f7
 810855c:	08108675 	.word	0x08108675
 8108560:	081086f7 	.word	0x081086f7
 8108564:	081086f7 	.word	0x081086f7
 8108568:	081086f7 	.word	0x081086f7
 810856c:	081086b5 	.word	0x081086b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8108570:	68fb      	ldr	r3, [r7, #12]
 8108572:	681b      	ldr	r3, [r3, #0]
 8108574:	68b9      	ldr	r1, [r7, #8]
 8108576:	4618      	mov	r0, r3
 8108578:	f000 fa90 	bl	8108a9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 810857c:	68fb      	ldr	r3, [r7, #12]
 810857e:	681b      	ldr	r3, [r3, #0]
 8108580:	699a      	ldr	r2, [r3, #24]
 8108582:	68fb      	ldr	r3, [r7, #12]
 8108584:	681b      	ldr	r3, [r3, #0]
 8108586:	f042 0208 	orr.w	r2, r2, #8
 810858a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 810858c:	68fb      	ldr	r3, [r7, #12]
 810858e:	681b      	ldr	r3, [r3, #0]
 8108590:	699a      	ldr	r2, [r3, #24]
 8108592:	68fb      	ldr	r3, [r7, #12]
 8108594:	681b      	ldr	r3, [r3, #0]
 8108596:	f022 0204 	bic.w	r2, r2, #4
 810859a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 810859c:	68fb      	ldr	r3, [r7, #12]
 810859e:	681b      	ldr	r3, [r3, #0]
 81085a0:	6999      	ldr	r1, [r3, #24]
 81085a2:	68bb      	ldr	r3, [r7, #8]
 81085a4:	691a      	ldr	r2, [r3, #16]
 81085a6:	68fb      	ldr	r3, [r7, #12]
 81085a8:	681b      	ldr	r3, [r3, #0]
 81085aa:	430a      	orrs	r2, r1
 81085ac:	619a      	str	r2, [r3, #24]
      break;
 81085ae:	e0a5      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 81085b0:	68fb      	ldr	r3, [r7, #12]
 81085b2:	681b      	ldr	r3, [r3, #0]
 81085b4:	68b9      	ldr	r1, [r7, #8]
 81085b6:	4618      	mov	r0, r3
 81085b8:	f000 fb00 	bl	8108bbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 81085bc:	68fb      	ldr	r3, [r7, #12]
 81085be:	681b      	ldr	r3, [r3, #0]
 81085c0:	699a      	ldr	r2, [r3, #24]
 81085c2:	68fb      	ldr	r3, [r7, #12]
 81085c4:	681b      	ldr	r3, [r3, #0]
 81085c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81085ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 81085cc:	68fb      	ldr	r3, [r7, #12]
 81085ce:	681b      	ldr	r3, [r3, #0]
 81085d0:	699a      	ldr	r2, [r3, #24]
 81085d2:	68fb      	ldr	r3, [r7, #12]
 81085d4:	681b      	ldr	r3, [r3, #0]
 81085d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81085da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 81085dc:	68fb      	ldr	r3, [r7, #12]
 81085de:	681b      	ldr	r3, [r3, #0]
 81085e0:	6999      	ldr	r1, [r3, #24]
 81085e2:	68bb      	ldr	r3, [r7, #8]
 81085e4:	691b      	ldr	r3, [r3, #16]
 81085e6:	021a      	lsls	r2, r3, #8
 81085e8:	68fb      	ldr	r3, [r7, #12]
 81085ea:	681b      	ldr	r3, [r3, #0]
 81085ec:	430a      	orrs	r2, r1
 81085ee:	619a      	str	r2, [r3, #24]
      break;
 81085f0:	e084      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 81085f2:	68fb      	ldr	r3, [r7, #12]
 81085f4:	681b      	ldr	r3, [r3, #0]
 81085f6:	68b9      	ldr	r1, [r7, #8]
 81085f8:	4618      	mov	r0, r3
 81085fa:	f000 fb69 	bl	8108cd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 81085fe:	68fb      	ldr	r3, [r7, #12]
 8108600:	681b      	ldr	r3, [r3, #0]
 8108602:	69da      	ldr	r2, [r3, #28]
 8108604:	68fb      	ldr	r3, [r7, #12]
 8108606:	681b      	ldr	r3, [r3, #0]
 8108608:	f042 0208 	orr.w	r2, r2, #8
 810860c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 810860e:	68fb      	ldr	r3, [r7, #12]
 8108610:	681b      	ldr	r3, [r3, #0]
 8108612:	69da      	ldr	r2, [r3, #28]
 8108614:	68fb      	ldr	r3, [r7, #12]
 8108616:	681b      	ldr	r3, [r3, #0]
 8108618:	f022 0204 	bic.w	r2, r2, #4
 810861c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 810861e:	68fb      	ldr	r3, [r7, #12]
 8108620:	681b      	ldr	r3, [r3, #0]
 8108622:	69d9      	ldr	r1, [r3, #28]
 8108624:	68bb      	ldr	r3, [r7, #8]
 8108626:	691a      	ldr	r2, [r3, #16]
 8108628:	68fb      	ldr	r3, [r7, #12]
 810862a:	681b      	ldr	r3, [r3, #0]
 810862c:	430a      	orrs	r2, r1
 810862e:	61da      	str	r2, [r3, #28]
      break;
 8108630:	e064      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8108632:	68fb      	ldr	r3, [r7, #12]
 8108634:	681b      	ldr	r3, [r3, #0]
 8108636:	68b9      	ldr	r1, [r7, #8]
 8108638:	4618      	mov	r0, r3
 810863a:	f000 fbd1 	bl	8108de0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 810863e:	68fb      	ldr	r3, [r7, #12]
 8108640:	681b      	ldr	r3, [r3, #0]
 8108642:	69da      	ldr	r2, [r3, #28]
 8108644:	68fb      	ldr	r3, [r7, #12]
 8108646:	681b      	ldr	r3, [r3, #0]
 8108648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 810864c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 810864e:	68fb      	ldr	r3, [r7, #12]
 8108650:	681b      	ldr	r3, [r3, #0]
 8108652:	69da      	ldr	r2, [r3, #28]
 8108654:	68fb      	ldr	r3, [r7, #12]
 8108656:	681b      	ldr	r3, [r3, #0]
 8108658:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 810865c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 810865e:	68fb      	ldr	r3, [r7, #12]
 8108660:	681b      	ldr	r3, [r3, #0]
 8108662:	69d9      	ldr	r1, [r3, #28]
 8108664:	68bb      	ldr	r3, [r7, #8]
 8108666:	691b      	ldr	r3, [r3, #16]
 8108668:	021a      	lsls	r2, r3, #8
 810866a:	68fb      	ldr	r3, [r7, #12]
 810866c:	681b      	ldr	r3, [r3, #0]
 810866e:	430a      	orrs	r2, r1
 8108670:	61da      	str	r2, [r3, #28]
      break;
 8108672:	e043      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8108674:	68fb      	ldr	r3, [r7, #12]
 8108676:	681b      	ldr	r3, [r3, #0]
 8108678:	68b9      	ldr	r1, [r7, #8]
 810867a:	4618      	mov	r0, r3
 810867c:	f000 fc1a 	bl	8108eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8108680:	68fb      	ldr	r3, [r7, #12]
 8108682:	681b      	ldr	r3, [r3, #0]
 8108684:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8108686:	68fb      	ldr	r3, [r7, #12]
 8108688:	681b      	ldr	r3, [r3, #0]
 810868a:	f042 0208 	orr.w	r2, r2, #8
 810868e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8108690:	68fb      	ldr	r3, [r7, #12]
 8108692:	681b      	ldr	r3, [r3, #0]
 8108694:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8108696:	68fb      	ldr	r3, [r7, #12]
 8108698:	681b      	ldr	r3, [r3, #0]
 810869a:	f022 0204 	bic.w	r2, r2, #4
 810869e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81086a0:	68fb      	ldr	r3, [r7, #12]
 81086a2:	681b      	ldr	r3, [r3, #0]
 81086a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81086a6:	68bb      	ldr	r3, [r7, #8]
 81086a8:	691a      	ldr	r2, [r3, #16]
 81086aa:	68fb      	ldr	r3, [r7, #12]
 81086ac:	681b      	ldr	r3, [r3, #0]
 81086ae:	430a      	orrs	r2, r1
 81086b0:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81086b2:	e023      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 81086b4:	68fb      	ldr	r3, [r7, #12]
 81086b6:	681b      	ldr	r3, [r3, #0]
 81086b8:	68b9      	ldr	r1, [r7, #8]
 81086ba:	4618      	mov	r0, r3
 81086bc:	f000 fc5e 	bl	8108f7c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 81086c0:	68fb      	ldr	r3, [r7, #12]
 81086c2:	681b      	ldr	r3, [r3, #0]
 81086c4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81086c6:	68fb      	ldr	r3, [r7, #12]
 81086c8:	681b      	ldr	r3, [r3, #0]
 81086ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 81086ce:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 81086d0:	68fb      	ldr	r3, [r7, #12]
 81086d2:	681b      	ldr	r3, [r3, #0]
 81086d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 81086d6:	68fb      	ldr	r3, [r7, #12]
 81086d8:	681b      	ldr	r3, [r3, #0]
 81086da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 81086de:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 81086e0:	68fb      	ldr	r3, [r7, #12]
 81086e2:	681b      	ldr	r3, [r3, #0]
 81086e4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 81086e6:	68bb      	ldr	r3, [r7, #8]
 81086e8:	691b      	ldr	r3, [r3, #16]
 81086ea:	021a      	lsls	r2, r3, #8
 81086ec:	68fb      	ldr	r3, [r7, #12]
 81086ee:	681b      	ldr	r3, [r3, #0]
 81086f0:	430a      	orrs	r2, r1
 81086f2:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 81086f4:	e002      	b.n	81086fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 81086f6:	2301      	movs	r3, #1
 81086f8:	75fb      	strb	r3, [r7, #23]
      break;
 81086fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 81086fc:	68fb      	ldr	r3, [r7, #12]
 81086fe:	2200      	movs	r2, #0
 8108700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8108704:	7dfb      	ldrb	r3, [r7, #23]
}
 8108706:	4618      	mov	r0, r3
 8108708:	3718      	adds	r7, #24
 810870a:	46bd      	mov	sp, r7
 810870c:	bd80      	pop	{r7, pc}
 810870e:	bf00      	nop

08108710 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8108710:	b580      	push	{r7, lr}
 8108712:	b084      	sub	sp, #16
 8108714:	af00      	add	r7, sp, #0
 8108716:	6078      	str	r0, [r7, #4]
 8108718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 810871a:	2300      	movs	r3, #0
 810871c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810871e:	687b      	ldr	r3, [r7, #4]
 8108720:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8108724:	2b01      	cmp	r3, #1
 8108726:	d101      	bne.n	810872c <HAL_TIM_ConfigClockSource+0x1c>
 8108728:	2302      	movs	r3, #2
 810872a:	e0de      	b.n	81088ea <HAL_TIM_ConfigClockSource+0x1da>
 810872c:	687b      	ldr	r3, [r7, #4]
 810872e:	2201      	movs	r2, #1
 8108730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8108734:	687b      	ldr	r3, [r7, #4]
 8108736:	2202      	movs	r2, #2
 8108738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810873c:	687b      	ldr	r3, [r7, #4]
 810873e:	681b      	ldr	r3, [r3, #0]
 8108740:	689b      	ldr	r3, [r3, #8]
 8108742:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8108744:	68bb      	ldr	r3, [r7, #8]
 8108746:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 810874a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 810874e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8108750:	68bb      	ldr	r3, [r7, #8]
 8108752:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8108756:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8108758:	687b      	ldr	r3, [r7, #4]
 810875a:	681b      	ldr	r3, [r3, #0]
 810875c:	68ba      	ldr	r2, [r7, #8]
 810875e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8108760:	683b      	ldr	r3, [r7, #0]
 8108762:	681b      	ldr	r3, [r3, #0]
 8108764:	4a63      	ldr	r2, [pc, #396]	@ (81088f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8108766:	4293      	cmp	r3, r2
 8108768:	f000 80a9 	beq.w	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 810876c:	4a61      	ldr	r2, [pc, #388]	@ (81088f4 <HAL_TIM_ConfigClockSource+0x1e4>)
 810876e:	4293      	cmp	r3, r2
 8108770:	f200 80ae 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8108774:	4a60      	ldr	r2, [pc, #384]	@ (81088f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8108776:	4293      	cmp	r3, r2
 8108778:	f000 80a1 	beq.w	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 810877c:	4a5e      	ldr	r2, [pc, #376]	@ (81088f8 <HAL_TIM_ConfigClockSource+0x1e8>)
 810877e:	4293      	cmp	r3, r2
 8108780:	f200 80a6 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8108784:	4a5d      	ldr	r2, [pc, #372]	@ (81088fc <HAL_TIM_ConfigClockSource+0x1ec>)
 8108786:	4293      	cmp	r3, r2
 8108788:	f000 8099 	beq.w	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 810878c:	4a5b      	ldr	r2, [pc, #364]	@ (81088fc <HAL_TIM_ConfigClockSource+0x1ec>)
 810878e:	4293      	cmp	r3, r2
 8108790:	f200 809e 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8108794:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8108798:	f000 8091 	beq.w	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 810879c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 81087a0:	f200 8096 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81087a8:	f000 8089 	beq.w	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 81087ac:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81087b0:	f200 808e 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087b8:	d03e      	beq.n	8108838 <HAL_TIM_ConfigClockSource+0x128>
 81087ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81087be:	f200 8087 	bhi.w	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81087c6:	f000 8086 	beq.w	81088d6 <HAL_TIM_ConfigClockSource+0x1c6>
 81087ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81087ce:	d87f      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087d0:	2b70      	cmp	r3, #112	@ 0x70
 81087d2:	d01a      	beq.n	810880a <HAL_TIM_ConfigClockSource+0xfa>
 81087d4:	2b70      	cmp	r3, #112	@ 0x70
 81087d6:	d87b      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087d8:	2b60      	cmp	r3, #96	@ 0x60
 81087da:	d050      	beq.n	810887e <HAL_TIM_ConfigClockSource+0x16e>
 81087dc:	2b60      	cmp	r3, #96	@ 0x60
 81087de:	d877      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087e0:	2b50      	cmp	r3, #80	@ 0x50
 81087e2:	d03c      	beq.n	810885e <HAL_TIM_ConfigClockSource+0x14e>
 81087e4:	2b50      	cmp	r3, #80	@ 0x50
 81087e6:	d873      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087e8:	2b40      	cmp	r3, #64	@ 0x40
 81087ea:	d058      	beq.n	810889e <HAL_TIM_ConfigClockSource+0x18e>
 81087ec:	2b40      	cmp	r3, #64	@ 0x40
 81087ee:	d86f      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087f0:	2b30      	cmp	r3, #48	@ 0x30
 81087f2:	d064      	beq.n	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 81087f4:	2b30      	cmp	r3, #48	@ 0x30
 81087f6:	d86b      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 81087f8:	2b20      	cmp	r3, #32
 81087fa:	d060      	beq.n	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 81087fc:	2b20      	cmp	r3, #32
 81087fe:	d867      	bhi.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
 8108800:	2b00      	cmp	r3, #0
 8108802:	d05c      	beq.n	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 8108804:	2b10      	cmp	r3, #16
 8108806:	d05a      	beq.n	81088be <HAL_TIM_ConfigClockSource+0x1ae>
 8108808:	e062      	b.n	81088d0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 810880a:	687b      	ldr	r3, [r7, #4]
 810880c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810880e:	683b      	ldr	r3, [r7, #0]
 8108810:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8108812:	683b      	ldr	r3, [r7, #0]
 8108814:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8108816:	683b      	ldr	r3, [r7, #0]
 8108818:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 810881a:	f000 fc91 	bl	8109140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 810881e:	687b      	ldr	r3, [r7, #4]
 8108820:	681b      	ldr	r3, [r3, #0]
 8108822:	689b      	ldr	r3, [r3, #8]
 8108824:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8108826:	68bb      	ldr	r3, [r7, #8]
 8108828:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 810882c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 810882e:	687b      	ldr	r3, [r7, #4]
 8108830:	681b      	ldr	r3, [r3, #0]
 8108832:	68ba      	ldr	r2, [r7, #8]
 8108834:	609a      	str	r2, [r3, #8]
      break;
 8108836:	e04f      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8108838:	687b      	ldr	r3, [r7, #4]
 810883a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 810883c:	683b      	ldr	r3, [r7, #0]
 810883e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8108840:	683b      	ldr	r3, [r7, #0]
 8108842:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8108844:	683b      	ldr	r3, [r7, #0]
 8108846:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8108848:	f000 fc7a 	bl	8109140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 810884c:	687b      	ldr	r3, [r7, #4]
 810884e:	681b      	ldr	r3, [r3, #0]
 8108850:	689a      	ldr	r2, [r3, #8]
 8108852:	687b      	ldr	r3, [r7, #4]
 8108854:	681b      	ldr	r3, [r3, #0]
 8108856:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 810885a:	609a      	str	r2, [r3, #8]
      break;
 810885c:	e03c      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8108862:	683b      	ldr	r3, [r7, #0]
 8108864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8108866:	683b      	ldr	r3, [r7, #0]
 8108868:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 810886a:	461a      	mov	r2, r3
 810886c:	f000 fbec 	bl	8109048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8108870:	687b      	ldr	r3, [r7, #4]
 8108872:	681b      	ldr	r3, [r3, #0]
 8108874:	2150      	movs	r1, #80	@ 0x50
 8108876:	4618      	mov	r0, r3
 8108878:	f000 fc45 	bl	8109106 <TIM_ITRx_SetConfig>
      break;
 810887c:	e02c      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 810887e:	687b      	ldr	r3, [r7, #4]
 8108880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8108882:	683b      	ldr	r3, [r7, #0]
 8108884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8108886:	683b      	ldr	r3, [r7, #0]
 8108888:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 810888a:	461a      	mov	r2, r3
 810888c:	f000 fc0b 	bl	81090a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8108890:	687b      	ldr	r3, [r7, #4]
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	2160      	movs	r1, #96	@ 0x60
 8108896:	4618      	mov	r0, r3
 8108898:	f000 fc35 	bl	8109106 <TIM_ITRx_SetConfig>
      break;
 810889c:	e01c      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 810889e:	687b      	ldr	r3, [r7, #4]
 81088a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 81088a2:	683b      	ldr	r3, [r7, #0]
 81088a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 81088a6:	683b      	ldr	r3, [r7, #0]
 81088a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 81088aa:	461a      	mov	r2, r3
 81088ac:	f000 fbcc 	bl	8109048 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 81088b0:	687b      	ldr	r3, [r7, #4]
 81088b2:	681b      	ldr	r3, [r3, #0]
 81088b4:	2140      	movs	r1, #64	@ 0x40
 81088b6:	4618      	mov	r0, r3
 81088b8:	f000 fc25 	bl	8109106 <TIM_ITRx_SetConfig>
      break;
 81088bc:	e00c      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	681a      	ldr	r2, [r3, #0]
 81088c2:	683b      	ldr	r3, [r7, #0]
 81088c4:	681b      	ldr	r3, [r3, #0]
 81088c6:	4619      	mov	r1, r3
 81088c8:	4610      	mov	r0, r2
 81088ca:	f000 fc1c 	bl	8109106 <TIM_ITRx_SetConfig>
      break;
 81088ce:	e003      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 81088d0:	2301      	movs	r3, #1
 81088d2:	73fb      	strb	r3, [r7, #15]
      break;
 81088d4:	e000      	b.n	81088d8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 81088d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 81088d8:	687b      	ldr	r3, [r7, #4]
 81088da:	2201      	movs	r2, #1
 81088dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81088e0:	687b      	ldr	r3, [r7, #4]
 81088e2:	2200      	movs	r2, #0
 81088e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 81088e8:	7bfb      	ldrb	r3, [r7, #15]
}
 81088ea:	4618      	mov	r0, r3
 81088ec:	3710      	adds	r7, #16
 81088ee:	46bd      	mov	sp, r7
 81088f0:	bd80      	pop	{r7, pc}
 81088f2:	bf00      	nop
 81088f4:	00100040 	.word	0x00100040
 81088f8:	00100030 	.word	0x00100030
 81088fc:	00100020 	.word	0x00100020

08108900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108900:	b480      	push	{r7}
 8108902:	b083      	sub	sp, #12
 8108904:	af00      	add	r7, sp, #0
 8108906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108908:	bf00      	nop
 810890a:	370c      	adds	r7, #12
 810890c:	46bd      	mov	sp, r7
 810890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108912:	4770      	bx	lr

08108914 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108914:	b480      	push	{r7}
 8108916:	b083      	sub	sp, #12
 8108918:	af00      	add	r7, sp, #0
 810891a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 810891c:	bf00      	nop
 810891e:	370c      	adds	r7, #12
 8108920:	46bd      	mov	sp, r7
 8108922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108926:	4770      	bx	lr

08108928 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108928:	b480      	push	{r7}
 810892a:	b083      	sub	sp, #12
 810892c:	af00      	add	r7, sp, #0
 810892e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108930:	bf00      	nop
 8108932:	370c      	adds	r7, #12
 8108934:	46bd      	mov	sp, r7
 8108936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810893a:	4770      	bx	lr

0810893c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 810893c:	b480      	push	{r7}
 810893e:	b083      	sub	sp, #12
 8108940:	af00      	add	r7, sp, #0
 8108942:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108944:	bf00      	nop
 8108946:	370c      	adds	r7, #12
 8108948:	46bd      	mov	sp, r7
 810894a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810894e:	4770      	bx	lr

08108950 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108950:	b480      	push	{r7}
 8108952:	b085      	sub	sp, #20
 8108954:	af00      	add	r7, sp, #0
 8108956:	6078      	str	r0, [r7, #4]
 8108958:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 810895a:	687b      	ldr	r3, [r7, #4]
 810895c:	681b      	ldr	r3, [r3, #0]
 810895e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108960:	687b      	ldr	r3, [r7, #4]
 8108962:	4a46      	ldr	r2, [pc, #280]	@ (8108a7c <TIM_Base_SetConfig+0x12c>)
 8108964:	4293      	cmp	r3, r2
 8108966:	d013      	beq.n	8108990 <TIM_Base_SetConfig+0x40>
 8108968:	687b      	ldr	r3, [r7, #4]
 810896a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810896e:	d00f      	beq.n	8108990 <TIM_Base_SetConfig+0x40>
 8108970:	687b      	ldr	r3, [r7, #4]
 8108972:	4a43      	ldr	r2, [pc, #268]	@ (8108a80 <TIM_Base_SetConfig+0x130>)
 8108974:	4293      	cmp	r3, r2
 8108976:	d00b      	beq.n	8108990 <TIM_Base_SetConfig+0x40>
 8108978:	687b      	ldr	r3, [r7, #4]
 810897a:	4a42      	ldr	r2, [pc, #264]	@ (8108a84 <TIM_Base_SetConfig+0x134>)
 810897c:	4293      	cmp	r3, r2
 810897e:	d007      	beq.n	8108990 <TIM_Base_SetConfig+0x40>
 8108980:	687b      	ldr	r3, [r7, #4]
 8108982:	4a41      	ldr	r2, [pc, #260]	@ (8108a88 <TIM_Base_SetConfig+0x138>)
 8108984:	4293      	cmp	r3, r2
 8108986:	d003      	beq.n	8108990 <TIM_Base_SetConfig+0x40>
 8108988:	687b      	ldr	r3, [r7, #4]
 810898a:	4a40      	ldr	r2, [pc, #256]	@ (8108a8c <TIM_Base_SetConfig+0x13c>)
 810898c:	4293      	cmp	r3, r2
 810898e:	d108      	bne.n	81089a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108990:	68fb      	ldr	r3, [r7, #12]
 8108992:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108996:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108998:	683b      	ldr	r3, [r7, #0]
 810899a:	685b      	ldr	r3, [r3, #4]
 810899c:	68fa      	ldr	r2, [r7, #12]
 810899e:	4313      	orrs	r3, r2
 81089a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 81089a2:	687b      	ldr	r3, [r7, #4]
 81089a4:	4a35      	ldr	r2, [pc, #212]	@ (8108a7c <TIM_Base_SetConfig+0x12c>)
 81089a6:	4293      	cmp	r3, r2
 81089a8:	d01f      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089aa:	687b      	ldr	r3, [r7, #4]
 81089ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81089b0:	d01b      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089b2:	687b      	ldr	r3, [r7, #4]
 81089b4:	4a32      	ldr	r2, [pc, #200]	@ (8108a80 <TIM_Base_SetConfig+0x130>)
 81089b6:	4293      	cmp	r3, r2
 81089b8:	d017      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089ba:	687b      	ldr	r3, [r7, #4]
 81089bc:	4a31      	ldr	r2, [pc, #196]	@ (8108a84 <TIM_Base_SetConfig+0x134>)
 81089be:	4293      	cmp	r3, r2
 81089c0:	d013      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089c2:	687b      	ldr	r3, [r7, #4]
 81089c4:	4a30      	ldr	r2, [pc, #192]	@ (8108a88 <TIM_Base_SetConfig+0x138>)
 81089c6:	4293      	cmp	r3, r2
 81089c8:	d00f      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089ca:	687b      	ldr	r3, [r7, #4]
 81089cc:	4a2f      	ldr	r2, [pc, #188]	@ (8108a8c <TIM_Base_SetConfig+0x13c>)
 81089ce:	4293      	cmp	r3, r2
 81089d0:	d00b      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089d2:	687b      	ldr	r3, [r7, #4]
 81089d4:	4a2e      	ldr	r2, [pc, #184]	@ (8108a90 <TIM_Base_SetConfig+0x140>)
 81089d6:	4293      	cmp	r3, r2
 81089d8:	d007      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089da:	687b      	ldr	r3, [r7, #4]
 81089dc:	4a2d      	ldr	r2, [pc, #180]	@ (8108a94 <TIM_Base_SetConfig+0x144>)
 81089de:	4293      	cmp	r3, r2
 81089e0:	d003      	beq.n	81089ea <TIM_Base_SetConfig+0x9a>
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	4a2c      	ldr	r2, [pc, #176]	@ (8108a98 <TIM_Base_SetConfig+0x148>)
 81089e6:	4293      	cmp	r3, r2
 81089e8:	d108      	bne.n	81089fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 81089ea:	68fb      	ldr	r3, [r7, #12]
 81089ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81089f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 81089f2:	683b      	ldr	r3, [r7, #0]
 81089f4:	68db      	ldr	r3, [r3, #12]
 81089f6:	68fa      	ldr	r2, [r7, #12]
 81089f8:	4313      	orrs	r3, r2
 81089fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 81089fc:	68fb      	ldr	r3, [r7, #12]
 81089fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8108a02:	683b      	ldr	r3, [r7, #0]
 8108a04:	695b      	ldr	r3, [r3, #20]
 8108a06:	4313      	orrs	r3, r2
 8108a08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	68fa      	ldr	r2, [r7, #12]
 8108a0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108a10:	683b      	ldr	r3, [r7, #0]
 8108a12:	689a      	ldr	r2, [r3, #8]
 8108a14:	687b      	ldr	r3, [r7, #4]
 8108a16:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108a18:	683b      	ldr	r3, [r7, #0]
 8108a1a:	681a      	ldr	r2, [r3, #0]
 8108a1c:	687b      	ldr	r3, [r7, #4]
 8108a1e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108a20:	687b      	ldr	r3, [r7, #4]
 8108a22:	4a16      	ldr	r2, [pc, #88]	@ (8108a7c <TIM_Base_SetConfig+0x12c>)
 8108a24:	4293      	cmp	r3, r2
 8108a26:	d00f      	beq.n	8108a48 <TIM_Base_SetConfig+0xf8>
 8108a28:	687b      	ldr	r3, [r7, #4]
 8108a2a:	4a18      	ldr	r2, [pc, #96]	@ (8108a8c <TIM_Base_SetConfig+0x13c>)
 8108a2c:	4293      	cmp	r3, r2
 8108a2e:	d00b      	beq.n	8108a48 <TIM_Base_SetConfig+0xf8>
 8108a30:	687b      	ldr	r3, [r7, #4]
 8108a32:	4a17      	ldr	r2, [pc, #92]	@ (8108a90 <TIM_Base_SetConfig+0x140>)
 8108a34:	4293      	cmp	r3, r2
 8108a36:	d007      	beq.n	8108a48 <TIM_Base_SetConfig+0xf8>
 8108a38:	687b      	ldr	r3, [r7, #4]
 8108a3a:	4a16      	ldr	r2, [pc, #88]	@ (8108a94 <TIM_Base_SetConfig+0x144>)
 8108a3c:	4293      	cmp	r3, r2
 8108a3e:	d003      	beq.n	8108a48 <TIM_Base_SetConfig+0xf8>
 8108a40:	687b      	ldr	r3, [r7, #4]
 8108a42:	4a15      	ldr	r2, [pc, #84]	@ (8108a98 <TIM_Base_SetConfig+0x148>)
 8108a44:	4293      	cmp	r3, r2
 8108a46:	d103      	bne.n	8108a50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108a48:	683b      	ldr	r3, [r7, #0]
 8108a4a:	691a      	ldr	r2, [r3, #16]
 8108a4c:	687b      	ldr	r3, [r7, #4]
 8108a4e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108a50:	687b      	ldr	r3, [r7, #4]
 8108a52:	2201      	movs	r2, #1
 8108a54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	691b      	ldr	r3, [r3, #16]
 8108a5a:	f003 0301 	and.w	r3, r3, #1
 8108a5e:	2b01      	cmp	r3, #1
 8108a60:	d105      	bne.n	8108a6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8108a62:	687b      	ldr	r3, [r7, #4]
 8108a64:	691b      	ldr	r3, [r3, #16]
 8108a66:	f023 0201 	bic.w	r2, r3, #1
 8108a6a:	687b      	ldr	r3, [r7, #4]
 8108a6c:	611a      	str	r2, [r3, #16]
  }
}
 8108a6e:	bf00      	nop
 8108a70:	3714      	adds	r7, #20
 8108a72:	46bd      	mov	sp, r7
 8108a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108a78:	4770      	bx	lr
 8108a7a:	bf00      	nop
 8108a7c:	40010000 	.word	0x40010000
 8108a80:	40000400 	.word	0x40000400
 8108a84:	40000800 	.word	0x40000800
 8108a88:	40000c00 	.word	0x40000c00
 8108a8c:	40010400 	.word	0x40010400
 8108a90:	40014000 	.word	0x40014000
 8108a94:	40014400 	.word	0x40014400
 8108a98:	40014800 	.word	0x40014800

08108a9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108a9c:	b480      	push	{r7}
 8108a9e:	b087      	sub	sp, #28
 8108aa0:	af00      	add	r7, sp, #0
 8108aa2:	6078      	str	r0, [r7, #4]
 8108aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108aa6:	687b      	ldr	r3, [r7, #4]
 8108aa8:	6a1b      	ldr	r3, [r3, #32]
 8108aaa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8108aac:	687b      	ldr	r3, [r7, #4]
 8108aae:	6a1b      	ldr	r3, [r3, #32]
 8108ab0:	f023 0201 	bic.w	r2, r3, #1
 8108ab4:	687b      	ldr	r3, [r7, #4]
 8108ab6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108ab8:	687b      	ldr	r3, [r7, #4]
 8108aba:	685b      	ldr	r3, [r3, #4]
 8108abc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108abe:	687b      	ldr	r3, [r7, #4]
 8108ac0:	699b      	ldr	r3, [r3, #24]
 8108ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8108ac4:	68fb      	ldr	r3, [r7, #12]
 8108ac6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108aca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8108ad0:	68fb      	ldr	r3, [r7, #12]
 8108ad2:	f023 0303 	bic.w	r3, r3, #3
 8108ad6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108ad8:	683b      	ldr	r3, [r7, #0]
 8108ada:	681b      	ldr	r3, [r3, #0]
 8108adc:	68fa      	ldr	r2, [r7, #12]
 8108ade:	4313      	orrs	r3, r2
 8108ae0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8108ae2:	697b      	ldr	r3, [r7, #20]
 8108ae4:	f023 0302 	bic.w	r3, r3, #2
 8108ae8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8108aea:	683b      	ldr	r3, [r7, #0]
 8108aec:	689b      	ldr	r3, [r3, #8]
 8108aee:	697a      	ldr	r2, [r7, #20]
 8108af0:	4313      	orrs	r3, r2
 8108af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8108af4:	687b      	ldr	r3, [r7, #4]
 8108af6:	4a2c      	ldr	r2, [pc, #176]	@ (8108ba8 <TIM_OC1_SetConfig+0x10c>)
 8108af8:	4293      	cmp	r3, r2
 8108afa:	d00f      	beq.n	8108b1c <TIM_OC1_SetConfig+0x80>
 8108afc:	687b      	ldr	r3, [r7, #4]
 8108afe:	4a2b      	ldr	r2, [pc, #172]	@ (8108bac <TIM_OC1_SetConfig+0x110>)
 8108b00:	4293      	cmp	r3, r2
 8108b02:	d00b      	beq.n	8108b1c <TIM_OC1_SetConfig+0x80>
 8108b04:	687b      	ldr	r3, [r7, #4]
 8108b06:	4a2a      	ldr	r2, [pc, #168]	@ (8108bb0 <TIM_OC1_SetConfig+0x114>)
 8108b08:	4293      	cmp	r3, r2
 8108b0a:	d007      	beq.n	8108b1c <TIM_OC1_SetConfig+0x80>
 8108b0c:	687b      	ldr	r3, [r7, #4]
 8108b0e:	4a29      	ldr	r2, [pc, #164]	@ (8108bb4 <TIM_OC1_SetConfig+0x118>)
 8108b10:	4293      	cmp	r3, r2
 8108b12:	d003      	beq.n	8108b1c <TIM_OC1_SetConfig+0x80>
 8108b14:	687b      	ldr	r3, [r7, #4]
 8108b16:	4a28      	ldr	r2, [pc, #160]	@ (8108bb8 <TIM_OC1_SetConfig+0x11c>)
 8108b18:	4293      	cmp	r3, r2
 8108b1a:	d10c      	bne.n	8108b36 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8108b1c:	697b      	ldr	r3, [r7, #20]
 8108b1e:	f023 0308 	bic.w	r3, r3, #8
 8108b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8108b24:	683b      	ldr	r3, [r7, #0]
 8108b26:	68db      	ldr	r3, [r3, #12]
 8108b28:	697a      	ldr	r2, [r7, #20]
 8108b2a:	4313      	orrs	r3, r2
 8108b2c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8108b2e:	697b      	ldr	r3, [r7, #20]
 8108b30:	f023 0304 	bic.w	r3, r3, #4
 8108b34:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108b36:	687b      	ldr	r3, [r7, #4]
 8108b38:	4a1b      	ldr	r2, [pc, #108]	@ (8108ba8 <TIM_OC1_SetConfig+0x10c>)
 8108b3a:	4293      	cmp	r3, r2
 8108b3c:	d00f      	beq.n	8108b5e <TIM_OC1_SetConfig+0xc2>
 8108b3e:	687b      	ldr	r3, [r7, #4]
 8108b40:	4a1a      	ldr	r2, [pc, #104]	@ (8108bac <TIM_OC1_SetConfig+0x110>)
 8108b42:	4293      	cmp	r3, r2
 8108b44:	d00b      	beq.n	8108b5e <TIM_OC1_SetConfig+0xc2>
 8108b46:	687b      	ldr	r3, [r7, #4]
 8108b48:	4a19      	ldr	r2, [pc, #100]	@ (8108bb0 <TIM_OC1_SetConfig+0x114>)
 8108b4a:	4293      	cmp	r3, r2
 8108b4c:	d007      	beq.n	8108b5e <TIM_OC1_SetConfig+0xc2>
 8108b4e:	687b      	ldr	r3, [r7, #4]
 8108b50:	4a18      	ldr	r2, [pc, #96]	@ (8108bb4 <TIM_OC1_SetConfig+0x118>)
 8108b52:	4293      	cmp	r3, r2
 8108b54:	d003      	beq.n	8108b5e <TIM_OC1_SetConfig+0xc2>
 8108b56:	687b      	ldr	r3, [r7, #4]
 8108b58:	4a17      	ldr	r2, [pc, #92]	@ (8108bb8 <TIM_OC1_SetConfig+0x11c>)
 8108b5a:	4293      	cmp	r3, r2
 8108b5c:	d111      	bne.n	8108b82 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8108b5e:	693b      	ldr	r3, [r7, #16]
 8108b60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8108b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8108b66:	693b      	ldr	r3, [r7, #16]
 8108b68:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8108b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8108b6e:	683b      	ldr	r3, [r7, #0]
 8108b70:	695b      	ldr	r3, [r3, #20]
 8108b72:	693a      	ldr	r2, [r7, #16]
 8108b74:	4313      	orrs	r3, r2
 8108b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8108b78:	683b      	ldr	r3, [r7, #0]
 8108b7a:	699b      	ldr	r3, [r3, #24]
 8108b7c:	693a      	ldr	r2, [r7, #16]
 8108b7e:	4313      	orrs	r3, r2
 8108b80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108b82:	687b      	ldr	r3, [r7, #4]
 8108b84:	693a      	ldr	r2, [r7, #16]
 8108b86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108b88:	687b      	ldr	r3, [r7, #4]
 8108b8a:	68fa      	ldr	r2, [r7, #12]
 8108b8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8108b8e:	683b      	ldr	r3, [r7, #0]
 8108b90:	685a      	ldr	r2, [r3, #4]
 8108b92:	687b      	ldr	r3, [r7, #4]
 8108b94:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108b96:	687b      	ldr	r3, [r7, #4]
 8108b98:	697a      	ldr	r2, [r7, #20]
 8108b9a:	621a      	str	r2, [r3, #32]
}
 8108b9c:	bf00      	nop
 8108b9e:	371c      	adds	r7, #28
 8108ba0:	46bd      	mov	sp, r7
 8108ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ba6:	4770      	bx	lr
 8108ba8:	40010000 	.word	0x40010000
 8108bac:	40010400 	.word	0x40010400
 8108bb0:	40014000 	.word	0x40014000
 8108bb4:	40014400 	.word	0x40014400
 8108bb8:	40014800 	.word	0x40014800

08108bbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108bbc:	b480      	push	{r7}
 8108bbe:	b087      	sub	sp, #28
 8108bc0:	af00      	add	r7, sp, #0
 8108bc2:	6078      	str	r0, [r7, #4]
 8108bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	6a1b      	ldr	r3, [r3, #32]
 8108bca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8108bcc:	687b      	ldr	r3, [r7, #4]
 8108bce:	6a1b      	ldr	r3, [r3, #32]
 8108bd0:	f023 0210 	bic.w	r2, r3, #16
 8108bd4:	687b      	ldr	r3, [r7, #4]
 8108bd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108bd8:	687b      	ldr	r3, [r7, #4]
 8108bda:	685b      	ldr	r3, [r3, #4]
 8108bdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	699b      	ldr	r3, [r3, #24]
 8108be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8108be4:	68fb      	ldr	r3, [r7, #12]
 8108be6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108bea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8108bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8108bf0:	68fb      	ldr	r3, [r7, #12]
 8108bf2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108bf8:	683b      	ldr	r3, [r7, #0]
 8108bfa:	681b      	ldr	r3, [r3, #0]
 8108bfc:	021b      	lsls	r3, r3, #8
 8108bfe:	68fa      	ldr	r2, [r7, #12]
 8108c00:	4313      	orrs	r3, r2
 8108c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8108c04:	697b      	ldr	r3, [r7, #20]
 8108c06:	f023 0320 	bic.w	r3, r3, #32
 8108c0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8108c0c:	683b      	ldr	r3, [r7, #0]
 8108c0e:	689b      	ldr	r3, [r3, #8]
 8108c10:	011b      	lsls	r3, r3, #4
 8108c12:	697a      	ldr	r2, [r7, #20]
 8108c14:	4313      	orrs	r3, r2
 8108c16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8108c18:	687b      	ldr	r3, [r7, #4]
 8108c1a:	4a28      	ldr	r2, [pc, #160]	@ (8108cbc <TIM_OC2_SetConfig+0x100>)
 8108c1c:	4293      	cmp	r3, r2
 8108c1e:	d003      	beq.n	8108c28 <TIM_OC2_SetConfig+0x6c>
 8108c20:	687b      	ldr	r3, [r7, #4]
 8108c22:	4a27      	ldr	r2, [pc, #156]	@ (8108cc0 <TIM_OC2_SetConfig+0x104>)
 8108c24:	4293      	cmp	r3, r2
 8108c26:	d10d      	bne.n	8108c44 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8108c28:	697b      	ldr	r3, [r7, #20]
 8108c2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8108c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8108c30:	683b      	ldr	r3, [r7, #0]
 8108c32:	68db      	ldr	r3, [r3, #12]
 8108c34:	011b      	lsls	r3, r3, #4
 8108c36:	697a      	ldr	r2, [r7, #20]
 8108c38:	4313      	orrs	r3, r2
 8108c3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8108c3c:	697b      	ldr	r3, [r7, #20]
 8108c3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8108c42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108c44:	687b      	ldr	r3, [r7, #4]
 8108c46:	4a1d      	ldr	r2, [pc, #116]	@ (8108cbc <TIM_OC2_SetConfig+0x100>)
 8108c48:	4293      	cmp	r3, r2
 8108c4a:	d00f      	beq.n	8108c6c <TIM_OC2_SetConfig+0xb0>
 8108c4c:	687b      	ldr	r3, [r7, #4]
 8108c4e:	4a1c      	ldr	r2, [pc, #112]	@ (8108cc0 <TIM_OC2_SetConfig+0x104>)
 8108c50:	4293      	cmp	r3, r2
 8108c52:	d00b      	beq.n	8108c6c <TIM_OC2_SetConfig+0xb0>
 8108c54:	687b      	ldr	r3, [r7, #4]
 8108c56:	4a1b      	ldr	r2, [pc, #108]	@ (8108cc4 <TIM_OC2_SetConfig+0x108>)
 8108c58:	4293      	cmp	r3, r2
 8108c5a:	d007      	beq.n	8108c6c <TIM_OC2_SetConfig+0xb0>
 8108c5c:	687b      	ldr	r3, [r7, #4]
 8108c5e:	4a1a      	ldr	r2, [pc, #104]	@ (8108cc8 <TIM_OC2_SetConfig+0x10c>)
 8108c60:	4293      	cmp	r3, r2
 8108c62:	d003      	beq.n	8108c6c <TIM_OC2_SetConfig+0xb0>
 8108c64:	687b      	ldr	r3, [r7, #4]
 8108c66:	4a19      	ldr	r2, [pc, #100]	@ (8108ccc <TIM_OC2_SetConfig+0x110>)
 8108c68:	4293      	cmp	r3, r2
 8108c6a:	d113      	bne.n	8108c94 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8108c6c:	693b      	ldr	r3, [r7, #16]
 8108c6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8108c72:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8108c74:	693b      	ldr	r3, [r7, #16]
 8108c76:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8108c7a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8108c7c:	683b      	ldr	r3, [r7, #0]
 8108c7e:	695b      	ldr	r3, [r3, #20]
 8108c80:	009b      	lsls	r3, r3, #2
 8108c82:	693a      	ldr	r2, [r7, #16]
 8108c84:	4313      	orrs	r3, r2
 8108c86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8108c88:	683b      	ldr	r3, [r7, #0]
 8108c8a:	699b      	ldr	r3, [r3, #24]
 8108c8c:	009b      	lsls	r3, r3, #2
 8108c8e:	693a      	ldr	r2, [r7, #16]
 8108c90:	4313      	orrs	r3, r2
 8108c92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108c94:	687b      	ldr	r3, [r7, #4]
 8108c96:	693a      	ldr	r2, [r7, #16]
 8108c98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8108c9a:	687b      	ldr	r3, [r7, #4]
 8108c9c:	68fa      	ldr	r2, [r7, #12]
 8108c9e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8108ca0:	683b      	ldr	r3, [r7, #0]
 8108ca2:	685a      	ldr	r2, [r3, #4]
 8108ca4:	687b      	ldr	r3, [r7, #4]
 8108ca6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108ca8:	687b      	ldr	r3, [r7, #4]
 8108caa:	697a      	ldr	r2, [r7, #20]
 8108cac:	621a      	str	r2, [r3, #32]
}
 8108cae:	bf00      	nop
 8108cb0:	371c      	adds	r7, #28
 8108cb2:	46bd      	mov	sp, r7
 8108cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cb8:	4770      	bx	lr
 8108cba:	bf00      	nop
 8108cbc:	40010000 	.word	0x40010000
 8108cc0:	40010400 	.word	0x40010400
 8108cc4:	40014000 	.word	0x40014000
 8108cc8:	40014400 	.word	0x40014400
 8108ccc:	40014800 	.word	0x40014800

08108cd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108cd0:	b480      	push	{r7}
 8108cd2:	b087      	sub	sp, #28
 8108cd4:	af00      	add	r7, sp, #0
 8108cd6:	6078      	str	r0, [r7, #4]
 8108cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108cda:	687b      	ldr	r3, [r7, #4]
 8108cdc:	6a1b      	ldr	r3, [r3, #32]
 8108cde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8108ce0:	687b      	ldr	r3, [r7, #4]
 8108ce2:	6a1b      	ldr	r3, [r3, #32]
 8108ce4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8108ce8:	687b      	ldr	r3, [r7, #4]
 8108cea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108cec:	687b      	ldr	r3, [r7, #4]
 8108cee:	685b      	ldr	r3, [r3, #4]
 8108cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108cf2:	687b      	ldr	r3, [r7, #4]
 8108cf4:	69db      	ldr	r3, [r3, #28]
 8108cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8108cf8:	68fb      	ldr	r3, [r7, #12]
 8108cfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108cfe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8108d04:	68fb      	ldr	r3, [r7, #12]
 8108d06:	f023 0303 	bic.w	r3, r3, #3
 8108d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108d0c:	683b      	ldr	r3, [r7, #0]
 8108d0e:	681b      	ldr	r3, [r3, #0]
 8108d10:	68fa      	ldr	r2, [r7, #12]
 8108d12:	4313      	orrs	r3, r2
 8108d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8108d16:	697b      	ldr	r3, [r7, #20]
 8108d18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8108d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8108d1e:	683b      	ldr	r3, [r7, #0]
 8108d20:	689b      	ldr	r3, [r3, #8]
 8108d22:	021b      	lsls	r3, r3, #8
 8108d24:	697a      	ldr	r2, [r7, #20]
 8108d26:	4313      	orrs	r3, r2
 8108d28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8108d2a:	687b      	ldr	r3, [r7, #4]
 8108d2c:	4a27      	ldr	r2, [pc, #156]	@ (8108dcc <TIM_OC3_SetConfig+0xfc>)
 8108d2e:	4293      	cmp	r3, r2
 8108d30:	d003      	beq.n	8108d3a <TIM_OC3_SetConfig+0x6a>
 8108d32:	687b      	ldr	r3, [r7, #4]
 8108d34:	4a26      	ldr	r2, [pc, #152]	@ (8108dd0 <TIM_OC3_SetConfig+0x100>)
 8108d36:	4293      	cmp	r3, r2
 8108d38:	d10d      	bne.n	8108d56 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8108d3a:	697b      	ldr	r3, [r7, #20]
 8108d3c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8108d40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8108d42:	683b      	ldr	r3, [r7, #0]
 8108d44:	68db      	ldr	r3, [r3, #12]
 8108d46:	021b      	lsls	r3, r3, #8
 8108d48:	697a      	ldr	r2, [r7, #20]
 8108d4a:	4313      	orrs	r3, r2
 8108d4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8108d4e:	697b      	ldr	r3, [r7, #20]
 8108d50:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8108d54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108d56:	687b      	ldr	r3, [r7, #4]
 8108d58:	4a1c      	ldr	r2, [pc, #112]	@ (8108dcc <TIM_OC3_SetConfig+0xfc>)
 8108d5a:	4293      	cmp	r3, r2
 8108d5c:	d00f      	beq.n	8108d7e <TIM_OC3_SetConfig+0xae>
 8108d5e:	687b      	ldr	r3, [r7, #4]
 8108d60:	4a1b      	ldr	r2, [pc, #108]	@ (8108dd0 <TIM_OC3_SetConfig+0x100>)
 8108d62:	4293      	cmp	r3, r2
 8108d64:	d00b      	beq.n	8108d7e <TIM_OC3_SetConfig+0xae>
 8108d66:	687b      	ldr	r3, [r7, #4]
 8108d68:	4a1a      	ldr	r2, [pc, #104]	@ (8108dd4 <TIM_OC3_SetConfig+0x104>)
 8108d6a:	4293      	cmp	r3, r2
 8108d6c:	d007      	beq.n	8108d7e <TIM_OC3_SetConfig+0xae>
 8108d6e:	687b      	ldr	r3, [r7, #4]
 8108d70:	4a19      	ldr	r2, [pc, #100]	@ (8108dd8 <TIM_OC3_SetConfig+0x108>)
 8108d72:	4293      	cmp	r3, r2
 8108d74:	d003      	beq.n	8108d7e <TIM_OC3_SetConfig+0xae>
 8108d76:	687b      	ldr	r3, [r7, #4]
 8108d78:	4a18      	ldr	r2, [pc, #96]	@ (8108ddc <TIM_OC3_SetConfig+0x10c>)
 8108d7a:	4293      	cmp	r3, r2
 8108d7c:	d113      	bne.n	8108da6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8108d7e:	693b      	ldr	r3, [r7, #16]
 8108d80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8108d84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8108d86:	693b      	ldr	r3, [r7, #16]
 8108d88:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8108d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8108d8e:	683b      	ldr	r3, [r7, #0]
 8108d90:	695b      	ldr	r3, [r3, #20]
 8108d92:	011b      	lsls	r3, r3, #4
 8108d94:	693a      	ldr	r2, [r7, #16]
 8108d96:	4313      	orrs	r3, r2
 8108d98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8108d9a:	683b      	ldr	r3, [r7, #0]
 8108d9c:	699b      	ldr	r3, [r3, #24]
 8108d9e:	011b      	lsls	r3, r3, #4
 8108da0:	693a      	ldr	r2, [r7, #16]
 8108da2:	4313      	orrs	r3, r2
 8108da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108da6:	687b      	ldr	r3, [r7, #4]
 8108da8:	693a      	ldr	r2, [r7, #16]
 8108daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108dac:	687b      	ldr	r3, [r7, #4]
 8108dae:	68fa      	ldr	r2, [r7, #12]
 8108db0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8108db2:	683b      	ldr	r3, [r7, #0]
 8108db4:	685a      	ldr	r2, [r3, #4]
 8108db6:	687b      	ldr	r3, [r7, #4]
 8108db8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108dba:	687b      	ldr	r3, [r7, #4]
 8108dbc:	697a      	ldr	r2, [r7, #20]
 8108dbe:	621a      	str	r2, [r3, #32]
}
 8108dc0:	bf00      	nop
 8108dc2:	371c      	adds	r7, #28
 8108dc4:	46bd      	mov	sp, r7
 8108dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dca:	4770      	bx	lr
 8108dcc:	40010000 	.word	0x40010000
 8108dd0:	40010400 	.word	0x40010400
 8108dd4:	40014000 	.word	0x40014000
 8108dd8:	40014400 	.word	0x40014400
 8108ddc:	40014800 	.word	0x40014800

08108de0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8108de0:	b480      	push	{r7}
 8108de2:	b087      	sub	sp, #28
 8108de4:	af00      	add	r7, sp, #0
 8108de6:	6078      	str	r0, [r7, #4]
 8108de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108dea:	687b      	ldr	r3, [r7, #4]
 8108dec:	6a1b      	ldr	r3, [r3, #32]
 8108dee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8108df0:	687b      	ldr	r3, [r7, #4]
 8108df2:	6a1b      	ldr	r3, [r3, #32]
 8108df4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8108df8:	687b      	ldr	r3, [r7, #4]
 8108dfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108dfc:	687b      	ldr	r3, [r7, #4]
 8108dfe:	685b      	ldr	r3, [r3, #4]
 8108e00:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8108e02:	687b      	ldr	r3, [r7, #4]
 8108e04:	69db      	ldr	r3, [r3, #28]
 8108e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8108e08:	68fb      	ldr	r3, [r7, #12]
 8108e0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108e0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8108e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8108e14:	68fb      	ldr	r3, [r7, #12]
 8108e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108e1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108e1c:	683b      	ldr	r3, [r7, #0]
 8108e1e:	681b      	ldr	r3, [r3, #0]
 8108e20:	021b      	lsls	r3, r3, #8
 8108e22:	68fa      	ldr	r2, [r7, #12]
 8108e24:	4313      	orrs	r3, r2
 8108e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8108e28:	693b      	ldr	r3, [r7, #16]
 8108e2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8108e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8108e30:	683b      	ldr	r3, [r7, #0]
 8108e32:	689b      	ldr	r3, [r3, #8]
 8108e34:	031b      	lsls	r3, r3, #12
 8108e36:	693a      	ldr	r2, [r7, #16]
 8108e38:	4313      	orrs	r3, r2
 8108e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108e3c:	687b      	ldr	r3, [r7, #4]
 8108e3e:	4a18      	ldr	r2, [pc, #96]	@ (8108ea0 <TIM_OC4_SetConfig+0xc0>)
 8108e40:	4293      	cmp	r3, r2
 8108e42:	d00f      	beq.n	8108e64 <TIM_OC4_SetConfig+0x84>
 8108e44:	687b      	ldr	r3, [r7, #4]
 8108e46:	4a17      	ldr	r2, [pc, #92]	@ (8108ea4 <TIM_OC4_SetConfig+0xc4>)
 8108e48:	4293      	cmp	r3, r2
 8108e4a:	d00b      	beq.n	8108e64 <TIM_OC4_SetConfig+0x84>
 8108e4c:	687b      	ldr	r3, [r7, #4]
 8108e4e:	4a16      	ldr	r2, [pc, #88]	@ (8108ea8 <TIM_OC4_SetConfig+0xc8>)
 8108e50:	4293      	cmp	r3, r2
 8108e52:	d007      	beq.n	8108e64 <TIM_OC4_SetConfig+0x84>
 8108e54:	687b      	ldr	r3, [r7, #4]
 8108e56:	4a15      	ldr	r2, [pc, #84]	@ (8108eac <TIM_OC4_SetConfig+0xcc>)
 8108e58:	4293      	cmp	r3, r2
 8108e5a:	d003      	beq.n	8108e64 <TIM_OC4_SetConfig+0x84>
 8108e5c:	687b      	ldr	r3, [r7, #4]
 8108e5e:	4a14      	ldr	r2, [pc, #80]	@ (8108eb0 <TIM_OC4_SetConfig+0xd0>)
 8108e60:	4293      	cmp	r3, r2
 8108e62:	d109      	bne.n	8108e78 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8108e64:	697b      	ldr	r3, [r7, #20]
 8108e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8108e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8108e6c:	683b      	ldr	r3, [r7, #0]
 8108e6e:	695b      	ldr	r3, [r3, #20]
 8108e70:	019b      	lsls	r3, r3, #6
 8108e72:	697a      	ldr	r2, [r7, #20]
 8108e74:	4313      	orrs	r3, r2
 8108e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108e78:	687b      	ldr	r3, [r7, #4]
 8108e7a:	697a      	ldr	r2, [r7, #20]
 8108e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8108e7e:	687b      	ldr	r3, [r7, #4]
 8108e80:	68fa      	ldr	r2, [r7, #12]
 8108e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8108e84:	683b      	ldr	r3, [r7, #0]
 8108e86:	685a      	ldr	r2, [r3, #4]
 8108e88:	687b      	ldr	r3, [r7, #4]
 8108e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108e8c:	687b      	ldr	r3, [r7, #4]
 8108e8e:	693a      	ldr	r2, [r7, #16]
 8108e90:	621a      	str	r2, [r3, #32]
}
 8108e92:	bf00      	nop
 8108e94:	371c      	adds	r7, #28
 8108e96:	46bd      	mov	sp, r7
 8108e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e9c:	4770      	bx	lr
 8108e9e:	bf00      	nop
 8108ea0:	40010000 	.word	0x40010000
 8108ea4:	40010400 	.word	0x40010400
 8108ea8:	40014000 	.word	0x40014000
 8108eac:	40014400 	.word	0x40014400
 8108eb0:	40014800 	.word	0x40014800

08108eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8108eb4:	b480      	push	{r7}
 8108eb6:	b087      	sub	sp, #28
 8108eb8:	af00      	add	r7, sp, #0
 8108eba:	6078      	str	r0, [r7, #4]
 8108ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108ebe:	687b      	ldr	r3, [r7, #4]
 8108ec0:	6a1b      	ldr	r3, [r3, #32]
 8108ec2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8108ec4:	687b      	ldr	r3, [r7, #4]
 8108ec6:	6a1b      	ldr	r3, [r3, #32]
 8108ec8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8108ecc:	687b      	ldr	r3, [r7, #4]
 8108ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108ed0:	687b      	ldr	r3, [r7, #4]
 8108ed2:	685b      	ldr	r3, [r3, #4]
 8108ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108ed6:	687b      	ldr	r3, [r7, #4]
 8108ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8108edc:	68fb      	ldr	r3, [r7, #12]
 8108ede:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108ee2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8108ee8:	683b      	ldr	r3, [r7, #0]
 8108eea:	681b      	ldr	r3, [r3, #0]
 8108eec:	68fa      	ldr	r2, [r7, #12]
 8108eee:	4313      	orrs	r3, r2
 8108ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8108ef2:	693b      	ldr	r3, [r7, #16]
 8108ef4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8108ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8108efa:	683b      	ldr	r3, [r7, #0]
 8108efc:	689b      	ldr	r3, [r3, #8]
 8108efe:	041b      	lsls	r3, r3, #16
 8108f00:	693a      	ldr	r2, [r7, #16]
 8108f02:	4313      	orrs	r3, r2
 8108f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108f06:	687b      	ldr	r3, [r7, #4]
 8108f08:	4a17      	ldr	r2, [pc, #92]	@ (8108f68 <TIM_OC5_SetConfig+0xb4>)
 8108f0a:	4293      	cmp	r3, r2
 8108f0c:	d00f      	beq.n	8108f2e <TIM_OC5_SetConfig+0x7a>
 8108f0e:	687b      	ldr	r3, [r7, #4]
 8108f10:	4a16      	ldr	r2, [pc, #88]	@ (8108f6c <TIM_OC5_SetConfig+0xb8>)
 8108f12:	4293      	cmp	r3, r2
 8108f14:	d00b      	beq.n	8108f2e <TIM_OC5_SetConfig+0x7a>
 8108f16:	687b      	ldr	r3, [r7, #4]
 8108f18:	4a15      	ldr	r2, [pc, #84]	@ (8108f70 <TIM_OC5_SetConfig+0xbc>)
 8108f1a:	4293      	cmp	r3, r2
 8108f1c:	d007      	beq.n	8108f2e <TIM_OC5_SetConfig+0x7a>
 8108f1e:	687b      	ldr	r3, [r7, #4]
 8108f20:	4a14      	ldr	r2, [pc, #80]	@ (8108f74 <TIM_OC5_SetConfig+0xc0>)
 8108f22:	4293      	cmp	r3, r2
 8108f24:	d003      	beq.n	8108f2e <TIM_OC5_SetConfig+0x7a>
 8108f26:	687b      	ldr	r3, [r7, #4]
 8108f28:	4a13      	ldr	r2, [pc, #76]	@ (8108f78 <TIM_OC5_SetConfig+0xc4>)
 8108f2a:	4293      	cmp	r3, r2
 8108f2c:	d109      	bne.n	8108f42 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8108f2e:	697b      	ldr	r3, [r7, #20]
 8108f30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8108f34:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8108f36:	683b      	ldr	r3, [r7, #0]
 8108f38:	695b      	ldr	r3, [r3, #20]
 8108f3a:	021b      	lsls	r3, r3, #8
 8108f3c:	697a      	ldr	r2, [r7, #20]
 8108f3e:	4313      	orrs	r3, r2
 8108f40:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8108f42:	687b      	ldr	r3, [r7, #4]
 8108f44:	697a      	ldr	r2, [r7, #20]
 8108f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8108f48:	687b      	ldr	r3, [r7, #4]
 8108f4a:	68fa      	ldr	r2, [r7, #12]
 8108f4c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8108f4e:	683b      	ldr	r3, [r7, #0]
 8108f50:	685a      	ldr	r2, [r3, #4]
 8108f52:	687b      	ldr	r3, [r7, #4]
 8108f54:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8108f56:	687b      	ldr	r3, [r7, #4]
 8108f58:	693a      	ldr	r2, [r7, #16]
 8108f5a:	621a      	str	r2, [r3, #32]
}
 8108f5c:	bf00      	nop
 8108f5e:	371c      	adds	r7, #28
 8108f60:	46bd      	mov	sp, r7
 8108f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108f66:	4770      	bx	lr
 8108f68:	40010000 	.word	0x40010000
 8108f6c:	40010400 	.word	0x40010400
 8108f70:	40014000 	.word	0x40014000
 8108f74:	40014400 	.word	0x40014400
 8108f78:	40014800 	.word	0x40014800

08108f7c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8108f7c:	b480      	push	{r7}
 8108f7e:	b087      	sub	sp, #28
 8108f80:	af00      	add	r7, sp, #0
 8108f82:	6078      	str	r0, [r7, #4]
 8108f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8108f86:	687b      	ldr	r3, [r7, #4]
 8108f88:	6a1b      	ldr	r3, [r3, #32]
 8108f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8108f8c:	687b      	ldr	r3, [r7, #4]
 8108f8e:	6a1b      	ldr	r3, [r3, #32]
 8108f90:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8108f94:	687b      	ldr	r3, [r7, #4]
 8108f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8108f98:	687b      	ldr	r3, [r7, #4]
 8108f9a:	685b      	ldr	r3, [r3, #4]
 8108f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8108f9e:	687b      	ldr	r3, [r7, #4]
 8108fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8108fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8108fa4:	68fb      	ldr	r3, [r7, #12]
 8108fa6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8108faa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8108fae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8108fb0:	683b      	ldr	r3, [r7, #0]
 8108fb2:	681b      	ldr	r3, [r3, #0]
 8108fb4:	021b      	lsls	r3, r3, #8
 8108fb6:	68fa      	ldr	r2, [r7, #12]
 8108fb8:	4313      	orrs	r3, r2
 8108fba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8108fbc:	693b      	ldr	r3, [r7, #16]
 8108fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8108fc2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8108fc4:	683b      	ldr	r3, [r7, #0]
 8108fc6:	689b      	ldr	r3, [r3, #8]
 8108fc8:	051b      	lsls	r3, r3, #20
 8108fca:	693a      	ldr	r2, [r7, #16]
 8108fcc:	4313      	orrs	r3, r2
 8108fce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8108fd0:	687b      	ldr	r3, [r7, #4]
 8108fd2:	4a18      	ldr	r2, [pc, #96]	@ (8109034 <TIM_OC6_SetConfig+0xb8>)
 8108fd4:	4293      	cmp	r3, r2
 8108fd6:	d00f      	beq.n	8108ff8 <TIM_OC6_SetConfig+0x7c>
 8108fd8:	687b      	ldr	r3, [r7, #4]
 8108fda:	4a17      	ldr	r2, [pc, #92]	@ (8109038 <TIM_OC6_SetConfig+0xbc>)
 8108fdc:	4293      	cmp	r3, r2
 8108fde:	d00b      	beq.n	8108ff8 <TIM_OC6_SetConfig+0x7c>
 8108fe0:	687b      	ldr	r3, [r7, #4]
 8108fe2:	4a16      	ldr	r2, [pc, #88]	@ (810903c <TIM_OC6_SetConfig+0xc0>)
 8108fe4:	4293      	cmp	r3, r2
 8108fe6:	d007      	beq.n	8108ff8 <TIM_OC6_SetConfig+0x7c>
 8108fe8:	687b      	ldr	r3, [r7, #4]
 8108fea:	4a15      	ldr	r2, [pc, #84]	@ (8109040 <TIM_OC6_SetConfig+0xc4>)
 8108fec:	4293      	cmp	r3, r2
 8108fee:	d003      	beq.n	8108ff8 <TIM_OC6_SetConfig+0x7c>
 8108ff0:	687b      	ldr	r3, [r7, #4]
 8108ff2:	4a14      	ldr	r2, [pc, #80]	@ (8109044 <TIM_OC6_SetConfig+0xc8>)
 8108ff4:	4293      	cmp	r3, r2
 8108ff6:	d109      	bne.n	810900c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8108ff8:	697b      	ldr	r3, [r7, #20]
 8108ffa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8108ffe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8109000:	683b      	ldr	r3, [r7, #0]
 8109002:	695b      	ldr	r3, [r3, #20]
 8109004:	029b      	lsls	r3, r3, #10
 8109006:	697a      	ldr	r2, [r7, #20]
 8109008:	4313      	orrs	r3, r2
 810900a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810900c:	687b      	ldr	r3, [r7, #4]
 810900e:	697a      	ldr	r2, [r7, #20]
 8109010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8109012:	687b      	ldr	r3, [r7, #4]
 8109014:	68fa      	ldr	r2, [r7, #12]
 8109016:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8109018:	683b      	ldr	r3, [r7, #0]
 810901a:	685a      	ldr	r2, [r3, #4]
 810901c:	687b      	ldr	r3, [r7, #4]
 810901e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8109020:	687b      	ldr	r3, [r7, #4]
 8109022:	693a      	ldr	r2, [r7, #16]
 8109024:	621a      	str	r2, [r3, #32]
}
 8109026:	bf00      	nop
 8109028:	371c      	adds	r7, #28
 810902a:	46bd      	mov	sp, r7
 810902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109030:	4770      	bx	lr
 8109032:	bf00      	nop
 8109034:	40010000 	.word	0x40010000
 8109038:	40010400 	.word	0x40010400
 810903c:	40014000 	.word	0x40014000
 8109040:	40014400 	.word	0x40014400
 8109044:	40014800 	.word	0x40014800

08109048 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8109048:	b480      	push	{r7}
 810904a:	b087      	sub	sp, #28
 810904c:	af00      	add	r7, sp, #0
 810904e:	60f8      	str	r0, [r7, #12]
 8109050:	60b9      	str	r1, [r7, #8]
 8109052:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8109054:	68fb      	ldr	r3, [r7, #12]
 8109056:	6a1b      	ldr	r3, [r3, #32]
 8109058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810905a:	68fb      	ldr	r3, [r7, #12]
 810905c:	6a1b      	ldr	r3, [r3, #32]
 810905e:	f023 0201 	bic.w	r2, r3, #1
 8109062:	68fb      	ldr	r3, [r7, #12]
 8109064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8109066:	68fb      	ldr	r3, [r7, #12]
 8109068:	699b      	ldr	r3, [r3, #24]
 810906a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 810906c:	693b      	ldr	r3, [r7, #16]
 810906e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8109072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8109074:	687b      	ldr	r3, [r7, #4]
 8109076:	011b      	lsls	r3, r3, #4
 8109078:	693a      	ldr	r2, [r7, #16]
 810907a:	4313      	orrs	r3, r2
 810907c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 810907e:	697b      	ldr	r3, [r7, #20]
 8109080:	f023 030a 	bic.w	r3, r3, #10
 8109084:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8109086:	697a      	ldr	r2, [r7, #20]
 8109088:	68bb      	ldr	r3, [r7, #8]
 810908a:	4313      	orrs	r3, r2
 810908c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 810908e:	68fb      	ldr	r3, [r7, #12]
 8109090:	693a      	ldr	r2, [r7, #16]
 8109092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8109094:	68fb      	ldr	r3, [r7, #12]
 8109096:	697a      	ldr	r2, [r7, #20]
 8109098:	621a      	str	r2, [r3, #32]
}
 810909a:	bf00      	nop
 810909c:	371c      	adds	r7, #28
 810909e:	46bd      	mov	sp, r7
 81090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090a4:	4770      	bx	lr

081090a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81090a6:	b480      	push	{r7}
 81090a8:	b087      	sub	sp, #28
 81090aa:	af00      	add	r7, sp, #0
 81090ac:	60f8      	str	r0, [r7, #12]
 81090ae:	60b9      	str	r1, [r7, #8]
 81090b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 81090b2:	68fb      	ldr	r3, [r7, #12]
 81090b4:	6a1b      	ldr	r3, [r3, #32]
 81090b6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81090b8:	68fb      	ldr	r3, [r7, #12]
 81090ba:	6a1b      	ldr	r3, [r3, #32]
 81090bc:	f023 0210 	bic.w	r2, r3, #16
 81090c0:	68fb      	ldr	r3, [r7, #12]
 81090c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81090c4:	68fb      	ldr	r3, [r7, #12]
 81090c6:	699b      	ldr	r3, [r3, #24]
 81090c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81090ca:	693b      	ldr	r3, [r7, #16]
 81090cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 81090d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81090d2:	687b      	ldr	r3, [r7, #4]
 81090d4:	031b      	lsls	r3, r3, #12
 81090d6:	693a      	ldr	r2, [r7, #16]
 81090d8:	4313      	orrs	r3, r2
 81090da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 81090dc:	697b      	ldr	r3, [r7, #20]
 81090de:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 81090e2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 81090e4:	68bb      	ldr	r3, [r7, #8]
 81090e6:	011b      	lsls	r3, r3, #4
 81090e8:	697a      	ldr	r2, [r7, #20]
 81090ea:	4313      	orrs	r3, r2
 81090ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 81090ee:	68fb      	ldr	r3, [r7, #12]
 81090f0:	693a      	ldr	r2, [r7, #16]
 81090f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81090f4:	68fb      	ldr	r3, [r7, #12]
 81090f6:	697a      	ldr	r2, [r7, #20]
 81090f8:	621a      	str	r2, [r3, #32]
}
 81090fa:	bf00      	nop
 81090fc:	371c      	adds	r7, #28
 81090fe:	46bd      	mov	sp, r7
 8109100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109104:	4770      	bx	lr

08109106 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8109106:	b480      	push	{r7}
 8109108:	b085      	sub	sp, #20
 810910a:	af00      	add	r7, sp, #0
 810910c:	6078      	str	r0, [r7, #4]
 810910e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8109110:	687b      	ldr	r3, [r7, #4]
 8109112:	689b      	ldr	r3, [r3, #8]
 8109114:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8109116:	68fb      	ldr	r3, [r7, #12]
 8109118:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 810911c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8109122:	683a      	ldr	r2, [r7, #0]
 8109124:	68fb      	ldr	r3, [r7, #12]
 8109126:	4313      	orrs	r3, r2
 8109128:	f043 0307 	orr.w	r3, r3, #7
 810912c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810912e:	687b      	ldr	r3, [r7, #4]
 8109130:	68fa      	ldr	r2, [r7, #12]
 8109132:	609a      	str	r2, [r3, #8]
}
 8109134:	bf00      	nop
 8109136:	3714      	adds	r7, #20
 8109138:	46bd      	mov	sp, r7
 810913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810913e:	4770      	bx	lr

08109140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8109140:	b480      	push	{r7}
 8109142:	b087      	sub	sp, #28
 8109144:	af00      	add	r7, sp, #0
 8109146:	60f8      	str	r0, [r7, #12]
 8109148:	60b9      	str	r1, [r7, #8]
 810914a:	607a      	str	r2, [r7, #4]
 810914c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 810914e:	68fb      	ldr	r3, [r7, #12]
 8109150:	689b      	ldr	r3, [r3, #8]
 8109152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8109154:	697b      	ldr	r3, [r7, #20]
 8109156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810915a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 810915c:	683b      	ldr	r3, [r7, #0]
 810915e:	021a      	lsls	r2, r3, #8
 8109160:	687b      	ldr	r3, [r7, #4]
 8109162:	431a      	orrs	r2, r3
 8109164:	68bb      	ldr	r3, [r7, #8]
 8109166:	4313      	orrs	r3, r2
 8109168:	697a      	ldr	r2, [r7, #20]
 810916a:	4313      	orrs	r3, r2
 810916c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 810916e:	68fb      	ldr	r3, [r7, #12]
 8109170:	697a      	ldr	r2, [r7, #20]
 8109172:	609a      	str	r2, [r3, #8]
}
 8109174:	bf00      	nop
 8109176:	371c      	adds	r7, #28
 8109178:	46bd      	mov	sp, r7
 810917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810917e:	4770      	bx	lr

08109180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8109180:	b480      	push	{r7}
 8109182:	b087      	sub	sp, #28
 8109184:	af00      	add	r7, sp, #0
 8109186:	60f8      	str	r0, [r7, #12]
 8109188:	60b9      	str	r1, [r7, #8]
 810918a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 810918c:	68bb      	ldr	r3, [r7, #8]
 810918e:	f003 031f 	and.w	r3, r3, #31
 8109192:	2201      	movs	r2, #1
 8109194:	fa02 f303 	lsl.w	r3, r2, r3
 8109198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 810919a:	68fb      	ldr	r3, [r7, #12]
 810919c:	6a1a      	ldr	r2, [r3, #32]
 810919e:	697b      	ldr	r3, [r7, #20]
 81091a0:	43db      	mvns	r3, r3
 81091a2:	401a      	ands	r2, r3
 81091a4:	68fb      	ldr	r3, [r7, #12]
 81091a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81091a8:	68fb      	ldr	r3, [r7, #12]
 81091aa:	6a1a      	ldr	r2, [r3, #32]
 81091ac:	68bb      	ldr	r3, [r7, #8]
 81091ae:	f003 031f 	and.w	r3, r3, #31
 81091b2:	6879      	ldr	r1, [r7, #4]
 81091b4:	fa01 f303 	lsl.w	r3, r1, r3
 81091b8:	431a      	orrs	r2, r3
 81091ba:	68fb      	ldr	r3, [r7, #12]
 81091bc:	621a      	str	r2, [r3, #32]
}
 81091be:	bf00      	nop
 81091c0:	371c      	adds	r7, #28
 81091c2:	46bd      	mov	sp, r7
 81091c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091c8:	4770      	bx	lr
	...

081091cc <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81091cc:	b580      	push	{r7, lr}
 81091ce:	b084      	sub	sp, #16
 81091d0:	af00      	add	r7, sp, #0
 81091d2:	6078      	str	r0, [r7, #4]
 81091d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81091d6:	683b      	ldr	r3, [r7, #0]
 81091d8:	2b00      	cmp	r3, #0
 81091da:	d109      	bne.n	81091f0 <HAL_TIMEx_PWMN_Start+0x24>
 81091dc:	687b      	ldr	r3, [r7, #4]
 81091de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 81091e2:	b2db      	uxtb	r3, r3
 81091e4:	2b01      	cmp	r3, #1
 81091e6:	bf14      	ite	ne
 81091e8:	2301      	movne	r3, #1
 81091ea:	2300      	moveq	r3, #0
 81091ec:	b2db      	uxtb	r3, r3
 81091ee:	e022      	b.n	8109236 <HAL_TIMEx_PWMN_Start+0x6a>
 81091f0:	683b      	ldr	r3, [r7, #0]
 81091f2:	2b04      	cmp	r3, #4
 81091f4:	d109      	bne.n	810920a <HAL_TIMEx_PWMN_Start+0x3e>
 81091f6:	687b      	ldr	r3, [r7, #4]
 81091f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 81091fc:	b2db      	uxtb	r3, r3
 81091fe:	2b01      	cmp	r3, #1
 8109200:	bf14      	ite	ne
 8109202:	2301      	movne	r3, #1
 8109204:	2300      	moveq	r3, #0
 8109206:	b2db      	uxtb	r3, r3
 8109208:	e015      	b.n	8109236 <HAL_TIMEx_PWMN_Start+0x6a>
 810920a:	683b      	ldr	r3, [r7, #0]
 810920c:	2b08      	cmp	r3, #8
 810920e:	d109      	bne.n	8109224 <HAL_TIMEx_PWMN_Start+0x58>
 8109210:	687b      	ldr	r3, [r7, #4]
 8109212:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8109216:	b2db      	uxtb	r3, r3
 8109218:	2b01      	cmp	r3, #1
 810921a:	bf14      	ite	ne
 810921c:	2301      	movne	r3, #1
 810921e:	2300      	moveq	r3, #0
 8109220:	b2db      	uxtb	r3, r3
 8109222:	e008      	b.n	8109236 <HAL_TIMEx_PWMN_Start+0x6a>
 8109224:	687b      	ldr	r3, [r7, #4]
 8109226:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 810922a:	b2db      	uxtb	r3, r3
 810922c:	2b01      	cmp	r3, #1
 810922e:	bf14      	ite	ne
 8109230:	2301      	movne	r3, #1
 8109232:	2300      	moveq	r3, #0
 8109234:	b2db      	uxtb	r3, r3
 8109236:	2b00      	cmp	r3, #0
 8109238:	d001      	beq.n	810923e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 810923a:	2301      	movs	r3, #1
 810923c:	e073      	b.n	8109326 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810923e:	683b      	ldr	r3, [r7, #0]
 8109240:	2b00      	cmp	r3, #0
 8109242:	d104      	bne.n	810924e <HAL_TIMEx_PWMN_Start+0x82>
 8109244:	687b      	ldr	r3, [r7, #4]
 8109246:	2202      	movs	r2, #2
 8109248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810924c:	e013      	b.n	8109276 <HAL_TIMEx_PWMN_Start+0xaa>
 810924e:	683b      	ldr	r3, [r7, #0]
 8109250:	2b04      	cmp	r3, #4
 8109252:	d104      	bne.n	810925e <HAL_TIMEx_PWMN_Start+0x92>
 8109254:	687b      	ldr	r3, [r7, #4]
 8109256:	2202      	movs	r2, #2
 8109258:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810925c:	e00b      	b.n	8109276 <HAL_TIMEx_PWMN_Start+0xaa>
 810925e:	683b      	ldr	r3, [r7, #0]
 8109260:	2b08      	cmp	r3, #8
 8109262:	d104      	bne.n	810926e <HAL_TIMEx_PWMN_Start+0xa2>
 8109264:	687b      	ldr	r3, [r7, #4]
 8109266:	2202      	movs	r2, #2
 8109268:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 810926c:	e003      	b.n	8109276 <HAL_TIMEx_PWMN_Start+0xaa>
 810926e:	687b      	ldr	r3, [r7, #4]
 8109270:	2202      	movs	r2, #2
 8109272:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8109276:	687b      	ldr	r3, [r7, #4]
 8109278:	681b      	ldr	r3, [r3, #0]
 810927a:	2204      	movs	r2, #4
 810927c:	6839      	ldr	r1, [r7, #0]
 810927e:	4618      	mov	r0, r3
 8109280:	f000 f9ee 	bl	8109660 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8109284:	687b      	ldr	r3, [r7, #4]
 8109286:	681b      	ldr	r3, [r3, #0]
 8109288:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810928a:	687b      	ldr	r3, [r7, #4]
 810928c:	681b      	ldr	r3, [r3, #0]
 810928e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8109292:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109294:	687b      	ldr	r3, [r7, #4]
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	4a25      	ldr	r2, [pc, #148]	@ (8109330 <HAL_TIMEx_PWMN_Start+0x164>)
 810929a:	4293      	cmp	r3, r2
 810929c:	d022      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 810929e:	687b      	ldr	r3, [r7, #4]
 81092a0:	681b      	ldr	r3, [r3, #0]
 81092a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81092a6:	d01d      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092a8:	687b      	ldr	r3, [r7, #4]
 81092aa:	681b      	ldr	r3, [r3, #0]
 81092ac:	4a21      	ldr	r2, [pc, #132]	@ (8109334 <HAL_TIMEx_PWMN_Start+0x168>)
 81092ae:	4293      	cmp	r3, r2
 81092b0:	d018      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092b2:	687b      	ldr	r3, [r7, #4]
 81092b4:	681b      	ldr	r3, [r3, #0]
 81092b6:	4a20      	ldr	r2, [pc, #128]	@ (8109338 <HAL_TIMEx_PWMN_Start+0x16c>)
 81092b8:	4293      	cmp	r3, r2
 81092ba:	d013      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092bc:	687b      	ldr	r3, [r7, #4]
 81092be:	681b      	ldr	r3, [r3, #0]
 81092c0:	4a1e      	ldr	r2, [pc, #120]	@ (810933c <HAL_TIMEx_PWMN_Start+0x170>)
 81092c2:	4293      	cmp	r3, r2
 81092c4:	d00e      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092c6:	687b      	ldr	r3, [r7, #4]
 81092c8:	681b      	ldr	r3, [r3, #0]
 81092ca:	4a1d      	ldr	r2, [pc, #116]	@ (8109340 <HAL_TIMEx_PWMN_Start+0x174>)
 81092cc:	4293      	cmp	r3, r2
 81092ce:	d009      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092d0:	687b      	ldr	r3, [r7, #4]
 81092d2:	681b      	ldr	r3, [r3, #0]
 81092d4:	4a1b      	ldr	r2, [pc, #108]	@ (8109344 <HAL_TIMEx_PWMN_Start+0x178>)
 81092d6:	4293      	cmp	r3, r2
 81092d8:	d004      	beq.n	81092e4 <HAL_TIMEx_PWMN_Start+0x118>
 81092da:	687b      	ldr	r3, [r7, #4]
 81092dc:	681b      	ldr	r3, [r3, #0]
 81092de:	4a1a      	ldr	r2, [pc, #104]	@ (8109348 <HAL_TIMEx_PWMN_Start+0x17c>)
 81092e0:	4293      	cmp	r3, r2
 81092e2:	d115      	bne.n	8109310 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81092e4:	687b      	ldr	r3, [r7, #4]
 81092e6:	681b      	ldr	r3, [r3, #0]
 81092e8:	689a      	ldr	r2, [r3, #8]
 81092ea:	4b18      	ldr	r3, [pc, #96]	@ (810934c <HAL_TIMEx_PWMN_Start+0x180>)
 81092ec:	4013      	ands	r3, r2
 81092ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81092f0:	68fb      	ldr	r3, [r7, #12]
 81092f2:	2b06      	cmp	r3, #6
 81092f4:	d015      	beq.n	8109322 <HAL_TIMEx_PWMN_Start+0x156>
 81092f6:	68fb      	ldr	r3, [r7, #12]
 81092f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81092fc:	d011      	beq.n	8109322 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 81092fe:	687b      	ldr	r3, [r7, #4]
 8109300:	681b      	ldr	r3, [r3, #0]
 8109302:	681a      	ldr	r2, [r3, #0]
 8109304:	687b      	ldr	r3, [r7, #4]
 8109306:	681b      	ldr	r3, [r3, #0]
 8109308:	f042 0201 	orr.w	r2, r2, #1
 810930c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810930e:	e008      	b.n	8109322 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8109310:	687b      	ldr	r3, [r7, #4]
 8109312:	681b      	ldr	r3, [r3, #0]
 8109314:	681a      	ldr	r2, [r3, #0]
 8109316:	687b      	ldr	r3, [r7, #4]
 8109318:	681b      	ldr	r3, [r3, #0]
 810931a:	f042 0201 	orr.w	r2, r2, #1
 810931e:	601a      	str	r2, [r3, #0]
 8109320:	e000      	b.n	8109324 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8109322:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8109324:	2300      	movs	r3, #0
}
 8109326:	4618      	mov	r0, r3
 8109328:	3710      	adds	r7, #16
 810932a:	46bd      	mov	sp, r7
 810932c:	bd80      	pop	{r7, pc}
 810932e:	bf00      	nop
 8109330:	40010000 	.word	0x40010000
 8109334:	40000400 	.word	0x40000400
 8109338:	40000800 	.word	0x40000800
 810933c:	40000c00 	.word	0x40000c00
 8109340:	40010400 	.word	0x40010400
 8109344:	40001800 	.word	0x40001800
 8109348:	40014000 	.word	0x40014000
 810934c:	00010007 	.word	0x00010007

08109350 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8109350:	b580      	push	{r7, lr}
 8109352:	b082      	sub	sp, #8
 8109354:	af00      	add	r7, sp, #0
 8109356:	6078      	str	r0, [r7, #4]
 8109358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 810935a:	687b      	ldr	r3, [r7, #4]
 810935c:	681b      	ldr	r3, [r3, #0]
 810935e:	2200      	movs	r2, #0
 8109360:	6839      	ldr	r1, [r7, #0]
 8109362:	4618      	mov	r0, r3
 8109364:	f000 f97c 	bl	8109660 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8109368:	687b      	ldr	r3, [r7, #4]
 810936a:	681b      	ldr	r3, [r3, #0]
 810936c:	6a1a      	ldr	r2, [r3, #32]
 810936e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8109372:	4013      	ands	r3, r2
 8109374:	2b00      	cmp	r3, #0
 8109376:	d10f      	bne.n	8109398 <HAL_TIMEx_PWMN_Stop+0x48>
 8109378:	687b      	ldr	r3, [r7, #4]
 810937a:	681b      	ldr	r3, [r3, #0]
 810937c:	6a1a      	ldr	r2, [r3, #32]
 810937e:	f240 4344 	movw	r3, #1092	@ 0x444
 8109382:	4013      	ands	r3, r2
 8109384:	2b00      	cmp	r3, #0
 8109386:	d107      	bne.n	8109398 <HAL_TIMEx_PWMN_Stop+0x48>
 8109388:	687b      	ldr	r3, [r7, #4]
 810938a:	681b      	ldr	r3, [r3, #0]
 810938c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810938e:	687b      	ldr	r3, [r7, #4]
 8109390:	681b      	ldr	r3, [r3, #0]
 8109392:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8109396:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8109398:	687b      	ldr	r3, [r7, #4]
 810939a:	681b      	ldr	r3, [r3, #0]
 810939c:	6a1a      	ldr	r2, [r3, #32]
 810939e:	f241 1311 	movw	r3, #4369	@ 0x1111
 81093a2:	4013      	ands	r3, r2
 81093a4:	2b00      	cmp	r3, #0
 81093a6:	d10f      	bne.n	81093c8 <HAL_TIMEx_PWMN_Stop+0x78>
 81093a8:	687b      	ldr	r3, [r7, #4]
 81093aa:	681b      	ldr	r3, [r3, #0]
 81093ac:	6a1a      	ldr	r2, [r3, #32]
 81093ae:	f240 4344 	movw	r3, #1092	@ 0x444
 81093b2:	4013      	ands	r3, r2
 81093b4:	2b00      	cmp	r3, #0
 81093b6:	d107      	bne.n	81093c8 <HAL_TIMEx_PWMN_Stop+0x78>
 81093b8:	687b      	ldr	r3, [r7, #4]
 81093ba:	681b      	ldr	r3, [r3, #0]
 81093bc:	681a      	ldr	r2, [r3, #0]
 81093be:	687b      	ldr	r3, [r7, #4]
 81093c0:	681b      	ldr	r3, [r3, #0]
 81093c2:	f022 0201 	bic.w	r2, r2, #1
 81093c6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 81093c8:	683b      	ldr	r3, [r7, #0]
 81093ca:	2b00      	cmp	r3, #0
 81093cc:	d104      	bne.n	81093d8 <HAL_TIMEx_PWMN_Stop+0x88>
 81093ce:	687b      	ldr	r3, [r7, #4]
 81093d0:	2201      	movs	r2, #1
 81093d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81093d6:	e013      	b.n	8109400 <HAL_TIMEx_PWMN_Stop+0xb0>
 81093d8:	683b      	ldr	r3, [r7, #0]
 81093da:	2b04      	cmp	r3, #4
 81093dc:	d104      	bne.n	81093e8 <HAL_TIMEx_PWMN_Stop+0x98>
 81093de:	687b      	ldr	r3, [r7, #4]
 81093e0:	2201      	movs	r2, #1
 81093e2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81093e6:	e00b      	b.n	8109400 <HAL_TIMEx_PWMN_Stop+0xb0>
 81093e8:	683b      	ldr	r3, [r7, #0]
 81093ea:	2b08      	cmp	r3, #8
 81093ec:	d104      	bne.n	81093f8 <HAL_TIMEx_PWMN_Stop+0xa8>
 81093ee:	687b      	ldr	r3, [r7, #4]
 81093f0:	2201      	movs	r2, #1
 81093f2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81093f6:	e003      	b.n	8109400 <HAL_TIMEx_PWMN_Stop+0xb0>
 81093f8:	687b      	ldr	r3, [r7, #4]
 81093fa:	2201      	movs	r2, #1
 81093fc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Return function status */
  return HAL_OK;
 8109400:	2300      	movs	r3, #0
}
 8109402:	4618      	mov	r0, r3
 8109404:	3708      	adds	r7, #8
 8109406:	46bd      	mov	sp, r7
 8109408:	bd80      	pop	{r7, pc}
	...

0810940c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 810940c:	b480      	push	{r7}
 810940e:	b085      	sub	sp, #20
 8109410:	af00      	add	r7, sp, #0
 8109412:	6078      	str	r0, [r7, #4]
 8109414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8109416:	687b      	ldr	r3, [r7, #4]
 8109418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810941c:	2b01      	cmp	r3, #1
 810941e:	d101      	bne.n	8109424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8109420:	2302      	movs	r3, #2
 8109422:	e06d      	b.n	8109500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8109424:	687b      	ldr	r3, [r7, #4]
 8109426:	2201      	movs	r2, #1
 8109428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 810942c:	687b      	ldr	r3, [r7, #4]
 810942e:	2202      	movs	r2, #2
 8109430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8109434:	687b      	ldr	r3, [r7, #4]
 8109436:	681b      	ldr	r3, [r3, #0]
 8109438:	685b      	ldr	r3, [r3, #4]
 810943a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 810943c:	687b      	ldr	r3, [r7, #4]
 810943e:	681b      	ldr	r3, [r3, #0]
 8109440:	689b      	ldr	r3, [r3, #8]
 8109442:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8109444:	687b      	ldr	r3, [r7, #4]
 8109446:	681b      	ldr	r3, [r3, #0]
 8109448:	4a30      	ldr	r2, [pc, #192]	@ (810950c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810944a:	4293      	cmp	r3, r2
 810944c:	d004      	beq.n	8109458 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 810944e:	687b      	ldr	r3, [r7, #4]
 8109450:	681b      	ldr	r3, [r3, #0]
 8109452:	4a2f      	ldr	r2, [pc, #188]	@ (8109510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8109454:	4293      	cmp	r3, r2
 8109456:	d108      	bne.n	810946a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8109458:	68fb      	ldr	r3, [r7, #12]
 810945a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 810945e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8109460:	683b      	ldr	r3, [r7, #0]
 8109462:	685b      	ldr	r3, [r3, #4]
 8109464:	68fa      	ldr	r2, [r7, #12]
 8109466:	4313      	orrs	r3, r2
 8109468:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810946a:	68fb      	ldr	r3, [r7, #12]
 810946c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8109470:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8109472:	683b      	ldr	r3, [r7, #0]
 8109474:	681b      	ldr	r3, [r3, #0]
 8109476:	68fa      	ldr	r2, [r7, #12]
 8109478:	4313      	orrs	r3, r2
 810947a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 810947c:	687b      	ldr	r3, [r7, #4]
 810947e:	681b      	ldr	r3, [r3, #0]
 8109480:	68fa      	ldr	r2, [r7, #12]
 8109482:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8109484:	687b      	ldr	r3, [r7, #4]
 8109486:	681b      	ldr	r3, [r3, #0]
 8109488:	4a20      	ldr	r2, [pc, #128]	@ (810950c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 810948a:	4293      	cmp	r3, r2
 810948c:	d022      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 810948e:	687b      	ldr	r3, [r7, #4]
 8109490:	681b      	ldr	r3, [r3, #0]
 8109492:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8109496:	d01d      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8109498:	687b      	ldr	r3, [r7, #4]
 810949a:	681b      	ldr	r3, [r3, #0]
 810949c:	4a1d      	ldr	r2, [pc, #116]	@ (8109514 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 810949e:	4293      	cmp	r3, r2
 81094a0:	d018      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81094a2:	687b      	ldr	r3, [r7, #4]
 81094a4:	681b      	ldr	r3, [r3, #0]
 81094a6:	4a1c      	ldr	r2, [pc, #112]	@ (8109518 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81094a8:	4293      	cmp	r3, r2
 81094aa:	d013      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81094ac:	687b      	ldr	r3, [r7, #4]
 81094ae:	681b      	ldr	r3, [r3, #0]
 81094b0:	4a1a      	ldr	r2, [pc, #104]	@ (810951c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 81094b2:	4293      	cmp	r3, r2
 81094b4:	d00e      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81094b6:	687b      	ldr	r3, [r7, #4]
 81094b8:	681b      	ldr	r3, [r3, #0]
 81094ba:	4a15      	ldr	r2, [pc, #84]	@ (8109510 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 81094bc:	4293      	cmp	r3, r2
 81094be:	d009      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81094c0:	687b      	ldr	r3, [r7, #4]
 81094c2:	681b      	ldr	r3, [r3, #0]
 81094c4:	4a16      	ldr	r2, [pc, #88]	@ (8109520 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 81094c6:	4293      	cmp	r3, r2
 81094c8:	d004      	beq.n	81094d4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 81094ca:	687b      	ldr	r3, [r7, #4]
 81094cc:	681b      	ldr	r3, [r3, #0]
 81094ce:	4a15      	ldr	r2, [pc, #84]	@ (8109524 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 81094d0:	4293      	cmp	r3, r2
 81094d2:	d10c      	bne.n	81094ee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81094d4:	68bb      	ldr	r3, [r7, #8]
 81094d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 81094da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81094dc:	683b      	ldr	r3, [r7, #0]
 81094de:	689b      	ldr	r3, [r3, #8]
 81094e0:	68ba      	ldr	r2, [r7, #8]
 81094e2:	4313      	orrs	r3, r2
 81094e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81094e6:	687b      	ldr	r3, [r7, #4]
 81094e8:	681b      	ldr	r3, [r3, #0]
 81094ea:	68ba      	ldr	r2, [r7, #8]
 81094ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81094ee:	687b      	ldr	r3, [r7, #4]
 81094f0:	2201      	movs	r2, #1
 81094f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 81094f6:	687b      	ldr	r3, [r7, #4]
 81094f8:	2200      	movs	r2, #0
 81094fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 81094fe:	2300      	movs	r3, #0
}
 8109500:	4618      	mov	r0, r3
 8109502:	3714      	adds	r7, #20
 8109504:	46bd      	mov	sp, r7
 8109506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810950a:	4770      	bx	lr
 810950c:	40010000 	.word	0x40010000
 8109510:	40010400 	.word	0x40010400
 8109514:	40000400 	.word	0x40000400
 8109518:	40000800 	.word	0x40000800
 810951c:	40000c00 	.word	0x40000c00
 8109520:	40001800 	.word	0x40001800
 8109524:	40014000 	.word	0x40014000

08109528 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8109528:	b480      	push	{r7}
 810952a:	b085      	sub	sp, #20
 810952c:	af00      	add	r7, sp, #0
 810952e:	6078      	str	r0, [r7, #4]
 8109530:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8109532:	2300      	movs	r3, #0
 8109534:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8109536:	687b      	ldr	r3, [r7, #4]
 8109538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 810953c:	2b01      	cmp	r3, #1
 810953e:	d101      	bne.n	8109544 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8109540:	2302      	movs	r3, #2
 8109542:	e065      	b.n	8109610 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8109544:	687b      	ldr	r3, [r7, #4]
 8109546:	2201      	movs	r2, #1
 8109548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 810954c:	68fb      	ldr	r3, [r7, #12]
 810954e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8109552:	683b      	ldr	r3, [r7, #0]
 8109554:	68db      	ldr	r3, [r3, #12]
 8109556:	4313      	orrs	r3, r2
 8109558:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 810955a:	68fb      	ldr	r3, [r7, #12]
 810955c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8109560:	683b      	ldr	r3, [r7, #0]
 8109562:	689b      	ldr	r3, [r3, #8]
 8109564:	4313      	orrs	r3, r2
 8109566:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8109568:	68fb      	ldr	r3, [r7, #12]
 810956a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 810956e:	683b      	ldr	r3, [r7, #0]
 8109570:	685b      	ldr	r3, [r3, #4]
 8109572:	4313      	orrs	r3, r2
 8109574:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8109576:	68fb      	ldr	r3, [r7, #12]
 8109578:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 810957c:	683b      	ldr	r3, [r7, #0]
 810957e:	681b      	ldr	r3, [r3, #0]
 8109580:	4313      	orrs	r3, r2
 8109582:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8109584:	68fb      	ldr	r3, [r7, #12]
 8109586:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 810958a:	683b      	ldr	r3, [r7, #0]
 810958c:	691b      	ldr	r3, [r3, #16]
 810958e:	4313      	orrs	r3, r2
 8109590:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8109592:	68fb      	ldr	r3, [r7, #12]
 8109594:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8109598:	683b      	ldr	r3, [r7, #0]
 810959a:	695b      	ldr	r3, [r3, #20]
 810959c:	4313      	orrs	r3, r2
 810959e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 81095a0:	68fb      	ldr	r3, [r7, #12]
 81095a2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 81095a6:	683b      	ldr	r3, [r7, #0]
 81095a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81095aa:	4313      	orrs	r3, r2
 81095ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 81095ae:	68fb      	ldr	r3, [r7, #12]
 81095b0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 81095b4:	683b      	ldr	r3, [r7, #0]
 81095b6:	699b      	ldr	r3, [r3, #24]
 81095b8:	041b      	lsls	r3, r3, #16
 81095ba:	4313      	orrs	r3, r2
 81095bc:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 81095be:	687b      	ldr	r3, [r7, #4]
 81095c0:	681b      	ldr	r3, [r3, #0]
 81095c2:	4a16      	ldr	r2, [pc, #88]	@ (810961c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 81095c4:	4293      	cmp	r3, r2
 81095c6:	d004      	beq.n	81095d2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81095c8:	687b      	ldr	r3, [r7, #4]
 81095ca:	681b      	ldr	r3, [r3, #0]
 81095cc:	4a14      	ldr	r2, [pc, #80]	@ (8109620 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81095ce:	4293      	cmp	r3, r2
 81095d0:	d115      	bne.n	81095fe <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81095d2:	68fb      	ldr	r3, [r7, #12]
 81095d4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 81095d8:	683b      	ldr	r3, [r7, #0]
 81095da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81095dc:	051b      	lsls	r3, r3, #20
 81095de:	4313      	orrs	r3, r2
 81095e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81095e2:	68fb      	ldr	r3, [r7, #12]
 81095e4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 81095e8:	683b      	ldr	r3, [r7, #0]
 81095ea:	69db      	ldr	r3, [r3, #28]
 81095ec:	4313      	orrs	r3, r2
 81095ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81095f0:	68fb      	ldr	r3, [r7, #12]
 81095f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 81095f6:	683b      	ldr	r3, [r7, #0]
 81095f8:	6a1b      	ldr	r3, [r3, #32]
 81095fa:	4313      	orrs	r3, r2
 81095fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	681b      	ldr	r3, [r3, #0]
 8109602:	68fa      	ldr	r2, [r7, #12]
 8109604:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8109606:	687b      	ldr	r3, [r7, #4]
 8109608:	2200      	movs	r2, #0
 810960a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 810960e:	2300      	movs	r3, #0
}
 8109610:	4618      	mov	r0, r3
 8109612:	3714      	adds	r7, #20
 8109614:	46bd      	mov	sp, r7
 8109616:	f85d 7b04 	ldr.w	r7, [sp], #4
 810961a:	4770      	bx	lr
 810961c:	40010000 	.word	0x40010000
 8109620:	40010400 	.word	0x40010400

08109624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8109624:	b480      	push	{r7}
 8109626:	b083      	sub	sp, #12
 8109628:	af00      	add	r7, sp, #0
 810962a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 810962c:	bf00      	nop
 810962e:	370c      	adds	r7, #12
 8109630:	46bd      	mov	sp, r7
 8109632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109636:	4770      	bx	lr

08109638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8109638:	b480      	push	{r7}
 810963a:	b083      	sub	sp, #12
 810963c:	af00      	add	r7, sp, #0
 810963e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8109640:	bf00      	nop
 8109642:	370c      	adds	r7, #12
 8109644:	46bd      	mov	sp, r7
 8109646:	f85d 7b04 	ldr.w	r7, [sp], #4
 810964a:	4770      	bx	lr

0810964c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 810964c:	b480      	push	{r7}
 810964e:	b083      	sub	sp, #12
 8109650:	af00      	add	r7, sp, #0
 8109652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8109654:	bf00      	nop
 8109656:	370c      	adds	r7, #12
 8109658:	46bd      	mov	sp, r7
 810965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810965e:	4770      	bx	lr

08109660 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8109660:	b480      	push	{r7}
 8109662:	b087      	sub	sp, #28
 8109664:	af00      	add	r7, sp, #0
 8109666:	60f8      	str	r0, [r7, #12]
 8109668:	60b9      	str	r1, [r7, #8]
 810966a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 810966c:	68bb      	ldr	r3, [r7, #8]
 810966e:	f003 030f 	and.w	r3, r3, #15
 8109672:	2204      	movs	r2, #4
 8109674:	fa02 f303 	lsl.w	r3, r2, r3
 8109678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 810967a:	68fb      	ldr	r3, [r7, #12]
 810967c:	6a1a      	ldr	r2, [r3, #32]
 810967e:	697b      	ldr	r3, [r7, #20]
 8109680:	43db      	mvns	r3, r3
 8109682:	401a      	ands	r2, r3
 8109684:	68fb      	ldr	r3, [r7, #12]
 8109686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8109688:	68fb      	ldr	r3, [r7, #12]
 810968a:	6a1a      	ldr	r2, [r3, #32]
 810968c:	68bb      	ldr	r3, [r7, #8]
 810968e:	f003 030f 	and.w	r3, r3, #15
 8109692:	6879      	ldr	r1, [r7, #4]
 8109694:	fa01 f303 	lsl.w	r3, r1, r3
 8109698:	431a      	orrs	r2, r3
 810969a:	68fb      	ldr	r3, [r7, #12]
 810969c:	621a      	str	r2, [r3, #32]
}
 810969e:	bf00      	nop
 81096a0:	371c      	adds	r7, #28
 81096a2:	46bd      	mov	sp, r7
 81096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81096a8:	4770      	bx	lr

081096aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81096aa:	b580      	push	{r7, lr}
 81096ac:	b082      	sub	sp, #8
 81096ae:	af00      	add	r7, sp, #0
 81096b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81096b2:	687b      	ldr	r3, [r7, #4]
 81096b4:	2b00      	cmp	r3, #0
 81096b6:	d101      	bne.n	81096bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81096b8:	2301      	movs	r3, #1
 81096ba:	e042      	b.n	8109742 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81096bc:	687b      	ldr	r3, [r7, #4]
 81096be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81096c2:	2b00      	cmp	r3, #0
 81096c4:	d106      	bne.n	81096d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81096c6:	687b      	ldr	r3, [r7, #4]
 81096c8:	2200      	movs	r2, #0
 81096ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81096ce:	6878      	ldr	r0, [r7, #4]
 81096d0:	f7f8 fdfa 	bl	81022c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81096d4:	687b      	ldr	r3, [r7, #4]
 81096d6:	2224      	movs	r2, #36	@ 0x24
 81096d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81096dc:	687b      	ldr	r3, [r7, #4]
 81096de:	681b      	ldr	r3, [r3, #0]
 81096e0:	681a      	ldr	r2, [r3, #0]
 81096e2:	687b      	ldr	r3, [r7, #4]
 81096e4:	681b      	ldr	r3, [r3, #0]
 81096e6:	f022 0201 	bic.w	r2, r2, #1
 81096ea:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81096ec:	687b      	ldr	r3, [r7, #4]
 81096ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81096f0:	2b00      	cmp	r3, #0
 81096f2:	d002      	beq.n	81096fa <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81096f4:	6878      	ldr	r0, [r7, #4]
 81096f6:	f001 fb0d 	bl	810ad14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81096fa:	6878      	ldr	r0, [r7, #4]
 81096fc:	f000 fda2 	bl	810a244 <UART_SetConfig>
 8109700:	4603      	mov	r3, r0
 8109702:	2b01      	cmp	r3, #1
 8109704:	d101      	bne.n	810970a <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8109706:	2301      	movs	r3, #1
 8109708:	e01b      	b.n	8109742 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810970a:	687b      	ldr	r3, [r7, #4]
 810970c:	681b      	ldr	r3, [r3, #0]
 810970e:	685a      	ldr	r2, [r3, #4]
 8109710:	687b      	ldr	r3, [r7, #4]
 8109712:	681b      	ldr	r3, [r3, #0]
 8109714:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8109718:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 810971a:	687b      	ldr	r3, [r7, #4]
 810971c:	681b      	ldr	r3, [r3, #0]
 810971e:	689a      	ldr	r2, [r3, #8]
 8109720:	687b      	ldr	r3, [r7, #4]
 8109722:	681b      	ldr	r3, [r3, #0]
 8109724:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8109728:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 810972a:	687b      	ldr	r3, [r7, #4]
 810972c:	681b      	ldr	r3, [r3, #0]
 810972e:	681a      	ldr	r2, [r3, #0]
 8109730:	687b      	ldr	r3, [r7, #4]
 8109732:	681b      	ldr	r3, [r3, #0]
 8109734:	f042 0201 	orr.w	r2, r2, #1
 8109738:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 810973a:	6878      	ldr	r0, [r7, #4]
 810973c:	f001 fb8c 	bl	810ae58 <UART_CheckIdleState>
 8109740:	4603      	mov	r3, r0
}
 8109742:	4618      	mov	r0, r3
 8109744:	3708      	adds	r7, #8
 8109746:	46bd      	mov	sp, r7
 8109748:	bd80      	pop	{r7, pc}

0810974a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810974a:	b580      	push	{r7, lr}
 810974c:	b08a      	sub	sp, #40	@ 0x28
 810974e:	af02      	add	r7, sp, #8
 8109750:	60f8      	str	r0, [r7, #12]
 8109752:	60b9      	str	r1, [r7, #8]
 8109754:	603b      	str	r3, [r7, #0]
 8109756:	4613      	mov	r3, r2
 8109758:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 810975a:	68fb      	ldr	r3, [r7, #12]
 810975c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8109760:	2b20      	cmp	r3, #32
 8109762:	d17b      	bne.n	810985c <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8109764:	68bb      	ldr	r3, [r7, #8]
 8109766:	2b00      	cmp	r3, #0
 8109768:	d002      	beq.n	8109770 <HAL_UART_Transmit+0x26>
 810976a:	88fb      	ldrh	r3, [r7, #6]
 810976c:	2b00      	cmp	r3, #0
 810976e:	d101      	bne.n	8109774 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8109770:	2301      	movs	r3, #1
 8109772:	e074      	b.n	810985e <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109774:	68fb      	ldr	r3, [r7, #12]
 8109776:	2200      	movs	r2, #0
 8109778:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810977c:	68fb      	ldr	r3, [r7, #12]
 810977e:	2221      	movs	r2, #33	@ 0x21
 8109780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8109784:	f7f8 ffe2 	bl	810274c <HAL_GetTick>
 8109788:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 810978a:	68fb      	ldr	r3, [r7, #12]
 810978c:	88fa      	ldrh	r2, [r7, #6]
 810978e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8109792:	68fb      	ldr	r3, [r7, #12]
 8109794:	88fa      	ldrh	r2, [r7, #6]
 8109796:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810979a:	68fb      	ldr	r3, [r7, #12]
 810979c:	689b      	ldr	r3, [r3, #8]
 810979e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81097a2:	d108      	bne.n	81097b6 <HAL_UART_Transmit+0x6c>
 81097a4:	68fb      	ldr	r3, [r7, #12]
 81097a6:	691b      	ldr	r3, [r3, #16]
 81097a8:	2b00      	cmp	r3, #0
 81097aa:	d104      	bne.n	81097b6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 81097ac:	2300      	movs	r3, #0
 81097ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 81097b0:	68bb      	ldr	r3, [r7, #8]
 81097b2:	61bb      	str	r3, [r7, #24]
 81097b4:	e003      	b.n	81097be <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81097b6:	68bb      	ldr	r3, [r7, #8]
 81097b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81097ba:	2300      	movs	r3, #0
 81097bc:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81097be:	e030      	b.n	8109822 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81097c0:	683b      	ldr	r3, [r7, #0]
 81097c2:	9300      	str	r3, [sp, #0]
 81097c4:	697b      	ldr	r3, [r7, #20]
 81097c6:	2200      	movs	r2, #0
 81097c8:	2180      	movs	r1, #128	@ 0x80
 81097ca:	68f8      	ldr	r0, [r7, #12]
 81097cc:	f001 fbee 	bl	810afac <UART_WaitOnFlagUntilTimeout>
 81097d0:	4603      	mov	r3, r0
 81097d2:	2b00      	cmp	r3, #0
 81097d4:	d005      	beq.n	81097e2 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81097d6:	68fb      	ldr	r3, [r7, #12]
 81097d8:	2220      	movs	r2, #32
 81097da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81097de:	2303      	movs	r3, #3
 81097e0:	e03d      	b.n	810985e <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81097e2:	69fb      	ldr	r3, [r7, #28]
 81097e4:	2b00      	cmp	r3, #0
 81097e6:	d10b      	bne.n	8109800 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81097e8:	69bb      	ldr	r3, [r7, #24]
 81097ea:	881b      	ldrh	r3, [r3, #0]
 81097ec:	461a      	mov	r2, r3
 81097ee:	68fb      	ldr	r3, [r7, #12]
 81097f0:	681b      	ldr	r3, [r3, #0]
 81097f2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81097f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81097f8:	69bb      	ldr	r3, [r7, #24]
 81097fa:	3302      	adds	r3, #2
 81097fc:	61bb      	str	r3, [r7, #24]
 81097fe:	e007      	b.n	8109810 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8109800:	69fb      	ldr	r3, [r7, #28]
 8109802:	781a      	ldrb	r2, [r3, #0]
 8109804:	68fb      	ldr	r3, [r7, #12]
 8109806:	681b      	ldr	r3, [r3, #0]
 8109808:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 810980a:	69fb      	ldr	r3, [r7, #28]
 810980c:	3301      	adds	r3, #1
 810980e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8109810:	68fb      	ldr	r3, [r7, #12]
 8109812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8109816:	b29b      	uxth	r3, r3
 8109818:	3b01      	subs	r3, #1
 810981a:	b29a      	uxth	r2, r3
 810981c:	68fb      	ldr	r3, [r7, #12]
 810981e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8109822:	68fb      	ldr	r3, [r7, #12]
 8109824:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8109828:	b29b      	uxth	r3, r3
 810982a:	2b00      	cmp	r3, #0
 810982c:	d1c8      	bne.n	81097c0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 810982e:	683b      	ldr	r3, [r7, #0]
 8109830:	9300      	str	r3, [sp, #0]
 8109832:	697b      	ldr	r3, [r7, #20]
 8109834:	2200      	movs	r2, #0
 8109836:	2140      	movs	r1, #64	@ 0x40
 8109838:	68f8      	ldr	r0, [r7, #12]
 810983a:	f001 fbb7 	bl	810afac <UART_WaitOnFlagUntilTimeout>
 810983e:	4603      	mov	r3, r0
 8109840:	2b00      	cmp	r3, #0
 8109842:	d005      	beq.n	8109850 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8109844:	68fb      	ldr	r3, [r7, #12]
 8109846:	2220      	movs	r2, #32
 8109848:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 810984c:	2303      	movs	r3, #3
 810984e:	e006      	b.n	810985e <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8109850:	68fb      	ldr	r3, [r7, #12]
 8109852:	2220      	movs	r2, #32
 8109854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8109858:	2300      	movs	r3, #0
 810985a:	e000      	b.n	810985e <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 810985c:	2302      	movs	r3, #2
  }
}
 810985e:	4618      	mov	r0, r3
 8109860:	3720      	adds	r7, #32
 8109862:	46bd      	mov	sp, r7
 8109864:	bd80      	pop	{r7, pc}

08109866 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 8109866:	b580      	push	{r7, lr}
 8109868:	b0a0      	sub	sp, #128	@ 0x80
 810986a:	af00      	add	r7, sp, #0
 810986c:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 810986e:	687b      	ldr	r3, [r7, #4]
 8109870:	681b      	ldr	r3, [r3, #0]
 8109872:	65fb      	str	r3, [r7, #92]	@ 0x5c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109874:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8109876:	e853 3f00 	ldrex	r3, [r3]
 810987a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 810987c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 810987e:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 8109882:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8109884:	687b      	ldr	r3, [r7, #4]
 8109886:	681b      	ldr	r3, [r3, #0]
 8109888:	461a      	mov	r2, r3
 810988a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 810988c:	66bb      	str	r3, [r7, #104]	@ 0x68
 810988e:	667a      	str	r2, [r7, #100]	@ 0x64
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109890:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8109892:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8109894:	e841 2300 	strex	r3, r2, [r1]
 8109898:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 810989a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 810989c:	2b00      	cmp	r3, #0
 810989e:	d1e6      	bne.n	810986e <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 81098a0:	687b      	ldr	r3, [r7, #4]
 81098a2:	681b      	ldr	r3, [r3, #0]
 81098a4:	3308      	adds	r3, #8
 81098a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81098a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 81098aa:	e853 3f00 	ldrex	r3, [r3]
 81098ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 81098b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 81098b2:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 81098b6:	f023 0301 	bic.w	r3, r3, #1
 81098ba:	67bb      	str	r3, [r7, #120]	@ 0x78
 81098bc:	687b      	ldr	r3, [r7, #4]
 81098be:	681b      	ldr	r3, [r3, #0]
 81098c0:	3308      	adds	r3, #8
 81098c2:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 81098c4:	657a      	str	r2, [r7, #84]	@ 0x54
 81098c6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81098c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 81098ca:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 81098cc:	e841 2300 	strex	r3, r2, [r1]
 81098d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 81098d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81098d4:	2b00      	cmp	r3, #0
 81098d6:	d1e3      	bne.n	81098a0 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81098d8:	687b      	ldr	r3, [r7, #4]
 81098da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81098dc:	2b01      	cmp	r3, #1
 81098de:	d118      	bne.n	8109912 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 81098e0:	687b      	ldr	r3, [r7, #4]
 81098e2:	681b      	ldr	r3, [r3, #0]
 81098e4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81098e8:	e853 3f00 	ldrex	r3, [r3]
 81098ec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81098ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81098f0:	f023 0310 	bic.w	r3, r3, #16
 81098f4:	677b      	str	r3, [r7, #116]	@ 0x74
 81098f6:	687b      	ldr	r3, [r7, #4]
 81098f8:	681b      	ldr	r3, [r3, #0]
 81098fa:	461a      	mov	r2, r3
 81098fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 81098fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8109900:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109902:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8109904:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8109906:	e841 2300 	strex	r3, r2, [r1]
 810990a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810990c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810990e:	2b00      	cmp	r3, #0
 8109910:	d1e6      	bne.n	81098e0 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8109912:	687b      	ldr	r3, [r7, #4]
 8109914:	681b      	ldr	r3, [r3, #0]
 8109916:	689b      	ldr	r3, [r3, #8]
 8109918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810991c:	2b80      	cmp	r3, #128	@ 0x80
 810991e:	d137      	bne.n	8109990 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8109920:	687b      	ldr	r3, [r7, #4]
 8109922:	681b      	ldr	r3, [r3, #0]
 8109924:	3308      	adds	r3, #8
 8109926:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109928:	6a3b      	ldr	r3, [r7, #32]
 810992a:	e853 3f00 	ldrex	r3, [r3]
 810992e:	61fb      	str	r3, [r7, #28]
   return(result);
 8109930:	69fb      	ldr	r3, [r7, #28]
 8109932:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8109936:	673b      	str	r3, [r7, #112]	@ 0x70
 8109938:	687b      	ldr	r3, [r7, #4]
 810993a:	681b      	ldr	r3, [r3, #0]
 810993c:	3308      	adds	r3, #8
 810993e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8109940:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8109942:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109944:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8109946:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8109948:	e841 2300 	strex	r3, r2, [r1]
 810994c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8109950:	2b00      	cmp	r3, #0
 8109952:	d1e5      	bne.n	8109920 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8109954:	687b      	ldr	r3, [r7, #4]
 8109956:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109958:	2b00      	cmp	r3, #0
 810995a:	d019      	beq.n	8109990 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 810995c:	687b      	ldr	r3, [r7, #4]
 810995e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109960:	2200      	movs	r2, #0
 8109962:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8109964:	687b      	ldr	r3, [r7, #4]
 8109966:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109968:	4618      	mov	r0, r3
 810996a:	f7f9 fdb3 	bl	81034d4 <HAL_DMA_Abort>
 810996e:	4603      	mov	r3, r0
 8109970:	2b00      	cmp	r3, #0
 8109972:	d00d      	beq.n	8109990 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8109974:	687b      	ldr	r3, [r7, #4]
 8109976:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8109978:	4618      	mov	r0, r3
 810997a:	f7fb fa39 	bl	8104df0 <HAL_DMA_GetError>
 810997e:	4603      	mov	r3, r0
 8109980:	2b20      	cmp	r3, #32
 8109982:	d105      	bne.n	8109990 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8109984:	687b      	ldr	r3, [r7, #4]
 8109986:	2210      	movs	r2, #16
 8109988:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 810998c:	2303      	movs	r3, #3
 810998e:	e073      	b.n	8109a78 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109990:	687b      	ldr	r3, [r7, #4]
 8109992:	681b      	ldr	r3, [r3, #0]
 8109994:	689b      	ldr	r3, [r3, #8]
 8109996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810999a:	2b40      	cmp	r3, #64	@ 0x40
 810999c:	d13b      	bne.n	8109a16 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810999e:	687b      	ldr	r3, [r7, #4]
 81099a0:	681b      	ldr	r3, [r3, #0]
 81099a2:	3308      	adds	r3, #8
 81099a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81099a6:	68fb      	ldr	r3, [r7, #12]
 81099a8:	e853 3f00 	ldrex	r3, [r3]
 81099ac:	60bb      	str	r3, [r7, #8]
   return(result);
 81099ae:	68bb      	ldr	r3, [r7, #8]
 81099b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 81099b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81099b6:	687b      	ldr	r3, [r7, #4]
 81099b8:	681b      	ldr	r3, [r3, #0]
 81099ba:	3308      	adds	r3, #8
 81099bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 81099be:	61ba      	str	r2, [r7, #24]
 81099c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81099c2:	6979      	ldr	r1, [r7, #20]
 81099c4:	69ba      	ldr	r2, [r7, #24]
 81099c6:	e841 2300 	strex	r3, r2, [r1]
 81099ca:	613b      	str	r3, [r7, #16]
   return(result);
 81099cc:	693b      	ldr	r3, [r7, #16]
 81099ce:	2b00      	cmp	r3, #0
 81099d0:	d1e5      	bne.n	810999e <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 81099d2:	687b      	ldr	r3, [r7, #4]
 81099d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81099d8:	2b00      	cmp	r3, #0
 81099da:	d01c      	beq.n	8109a16 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 81099dc:	687b      	ldr	r3, [r7, #4]
 81099de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81099e2:	2200      	movs	r2, #0
 81099e4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 81099e6:	687b      	ldr	r3, [r7, #4]
 81099e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81099ec:	4618      	mov	r0, r3
 81099ee:	f7f9 fd71 	bl	81034d4 <HAL_DMA_Abort>
 81099f2:	4603      	mov	r3, r0
 81099f4:	2b00      	cmp	r3, #0
 81099f6:	d00e      	beq.n	8109a16 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 81099f8:	687b      	ldr	r3, [r7, #4]
 81099fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81099fe:	4618      	mov	r0, r3
 8109a00:	f7fb f9f6 	bl	8104df0 <HAL_DMA_GetError>
 8109a04:	4603      	mov	r3, r0
 8109a06:	2b20      	cmp	r3, #32
 8109a08:	d105      	bne.n	8109a16 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8109a0a:	687b      	ldr	r3, [r7, #4]
 8109a0c:	2210      	movs	r2, #16
 8109a0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8109a12:	2303      	movs	r3, #3
 8109a14:	e030      	b.n	8109a78 <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8109a16:	687b      	ldr	r3, [r7, #4]
 8109a18:	2200      	movs	r2, #0
 8109a1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8109a1e:	687b      	ldr	r3, [r7, #4]
 8109a20:	2200      	movs	r2, #0
 8109a22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8109a26:	687b      	ldr	r3, [r7, #4]
 8109a28:	681b      	ldr	r3, [r3, #0]
 8109a2a:	220f      	movs	r2, #15
 8109a2c:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8109a2e:	687b      	ldr	r3, [r7, #4]
 8109a30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8109a32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109a36:	d107      	bne.n	8109a48 <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8109a38:	687b      	ldr	r3, [r7, #4]
 8109a3a:	681b      	ldr	r3, [r3, #0]
 8109a3c:	699a      	ldr	r2, [r3, #24]
 8109a3e:	687b      	ldr	r3, [r7, #4]
 8109a40:	681b      	ldr	r3, [r3, #0]
 8109a42:	f042 0210 	orr.w	r2, r2, #16
 8109a46:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8109a48:	687b      	ldr	r3, [r7, #4]
 8109a4a:	681b      	ldr	r3, [r3, #0]
 8109a4c:	699a      	ldr	r2, [r3, #24]
 8109a4e:	687b      	ldr	r3, [r7, #4]
 8109a50:	681b      	ldr	r3, [r3, #0]
 8109a52:	f042 0208 	orr.w	r2, r2, #8
 8109a56:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8109a58:	687b      	ldr	r3, [r7, #4]
 8109a5a:	2220      	movs	r2, #32
 8109a5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8109a60:	687b      	ldr	r3, [r7, #4]
 8109a62:	2220      	movs	r2, #32
 8109a64:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109a68:	687b      	ldr	r3, [r7, #4]
 8109a6a:	2200      	movs	r2, #0
 8109a6c:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109a6e:	687b      	ldr	r3, [r7, #4]
 8109a70:	2200      	movs	r2, #0
 8109a72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8109a76:	2300      	movs	r3, #0
}
 8109a78:	4618      	mov	r0, r3
 8109a7a:	3780      	adds	r7, #128	@ 0x80
 8109a7c:	46bd      	mov	sp, r7
 8109a7e:	bd80      	pop	{r7, pc}

08109a80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8109a80:	b580      	push	{r7, lr}
 8109a82:	b0ba      	sub	sp, #232	@ 0xe8
 8109a84:	af00      	add	r7, sp, #0
 8109a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8109a88:	687b      	ldr	r3, [r7, #4]
 8109a8a:	681b      	ldr	r3, [r3, #0]
 8109a8c:	69db      	ldr	r3, [r3, #28]
 8109a8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8109a92:	687b      	ldr	r3, [r7, #4]
 8109a94:	681b      	ldr	r3, [r3, #0]
 8109a96:	681b      	ldr	r3, [r3, #0]
 8109a98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8109a9c:	687b      	ldr	r3, [r7, #4]
 8109a9e:	681b      	ldr	r3, [r3, #0]
 8109aa0:	689b      	ldr	r3, [r3, #8]
 8109aa2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8109aa6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8109aaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8109aae:	4013      	ands	r3, r2
 8109ab0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8109ab4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109ab8:	2b00      	cmp	r3, #0
 8109aba:	d11b      	bne.n	8109af4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109ac0:	f003 0320 	and.w	r3, r3, #32
 8109ac4:	2b00      	cmp	r3, #0
 8109ac6:	d015      	beq.n	8109af4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109acc:	f003 0320 	and.w	r3, r3, #32
 8109ad0:	2b00      	cmp	r3, #0
 8109ad2:	d105      	bne.n	8109ae0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109adc:	2b00      	cmp	r3, #0
 8109ade:	d009      	beq.n	8109af4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8109ae0:	687b      	ldr	r3, [r7, #4]
 8109ae2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109ae4:	2b00      	cmp	r3, #0
 8109ae6:	f000 8379 	beq.w	810a1dc <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 8109aea:	687b      	ldr	r3, [r7, #4]
 8109aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109aee:	6878      	ldr	r0, [r7, #4]
 8109af0:	4798      	blx	r3
      }
      return;
 8109af2:	e373      	b.n	810a1dc <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8109af4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8109af8:	2b00      	cmp	r3, #0
 8109afa:	f000 8123 	beq.w	8109d44 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8109afe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8109b02:	4b8d      	ldr	r3, [pc, #564]	@ (8109d38 <HAL_UART_IRQHandler+0x2b8>)
 8109b04:	4013      	ands	r3, r2
 8109b06:	2b00      	cmp	r3, #0
 8109b08:	d106      	bne.n	8109b18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8109b0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8109b0e:	4b8b      	ldr	r3, [pc, #556]	@ (8109d3c <HAL_UART_IRQHandler+0x2bc>)
 8109b10:	4013      	ands	r3, r2
 8109b12:	2b00      	cmp	r3, #0
 8109b14:	f000 8116 	beq.w	8109d44 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8109b18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109b1c:	f003 0301 	and.w	r3, r3, #1
 8109b20:	2b00      	cmp	r3, #0
 8109b22:	d011      	beq.n	8109b48 <HAL_UART_IRQHandler+0xc8>
 8109b24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8109b2c:	2b00      	cmp	r3, #0
 8109b2e:	d00b      	beq.n	8109b48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8109b30:	687b      	ldr	r3, [r7, #4]
 8109b32:	681b      	ldr	r3, [r3, #0]
 8109b34:	2201      	movs	r2, #1
 8109b36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8109b38:	687b      	ldr	r3, [r7, #4]
 8109b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109b3e:	f043 0201 	orr.w	r2, r3, #1
 8109b42:	687b      	ldr	r3, [r7, #4]
 8109b44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109b48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109b4c:	f003 0302 	and.w	r3, r3, #2
 8109b50:	2b00      	cmp	r3, #0
 8109b52:	d011      	beq.n	8109b78 <HAL_UART_IRQHandler+0xf8>
 8109b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109b58:	f003 0301 	and.w	r3, r3, #1
 8109b5c:	2b00      	cmp	r3, #0
 8109b5e:	d00b      	beq.n	8109b78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8109b60:	687b      	ldr	r3, [r7, #4]
 8109b62:	681b      	ldr	r3, [r3, #0]
 8109b64:	2202      	movs	r2, #2
 8109b66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8109b68:	687b      	ldr	r3, [r7, #4]
 8109b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109b6e:	f043 0204 	orr.w	r2, r3, #4
 8109b72:	687b      	ldr	r3, [r7, #4]
 8109b74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8109b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109b7c:	f003 0304 	and.w	r3, r3, #4
 8109b80:	2b00      	cmp	r3, #0
 8109b82:	d011      	beq.n	8109ba8 <HAL_UART_IRQHandler+0x128>
 8109b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109b88:	f003 0301 	and.w	r3, r3, #1
 8109b8c:	2b00      	cmp	r3, #0
 8109b8e:	d00b      	beq.n	8109ba8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8109b90:	687b      	ldr	r3, [r7, #4]
 8109b92:	681b      	ldr	r3, [r3, #0]
 8109b94:	2204      	movs	r2, #4
 8109b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8109b98:	687b      	ldr	r3, [r7, #4]
 8109b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109b9e:	f043 0202 	orr.w	r2, r3, #2
 8109ba2:	687b      	ldr	r3, [r7, #4]
 8109ba4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8109ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109bac:	f003 0308 	and.w	r3, r3, #8
 8109bb0:	2b00      	cmp	r3, #0
 8109bb2:	d017      	beq.n	8109be4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109bb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109bb8:	f003 0320 	and.w	r3, r3, #32
 8109bbc:	2b00      	cmp	r3, #0
 8109bbe:	d105      	bne.n	8109bcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8109bc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8109bc4:	4b5c      	ldr	r3, [pc, #368]	@ (8109d38 <HAL_UART_IRQHandler+0x2b8>)
 8109bc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8109bc8:	2b00      	cmp	r3, #0
 8109bca:	d00b      	beq.n	8109be4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8109bcc:	687b      	ldr	r3, [r7, #4]
 8109bce:	681b      	ldr	r3, [r3, #0]
 8109bd0:	2208      	movs	r2, #8
 8109bd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8109bd4:	687b      	ldr	r3, [r7, #4]
 8109bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109bda:	f043 0208 	orr.w	r2, r3, #8
 8109bde:	687b      	ldr	r3, [r7, #4]
 8109be0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8109be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109be8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8109bec:	2b00      	cmp	r3, #0
 8109bee:	d012      	beq.n	8109c16 <HAL_UART_IRQHandler+0x196>
 8109bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109bf4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8109bf8:	2b00      	cmp	r3, #0
 8109bfa:	d00c      	beq.n	8109c16 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8109bfc:	687b      	ldr	r3, [r7, #4]
 8109bfe:	681b      	ldr	r3, [r3, #0]
 8109c00:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8109c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8109c06:	687b      	ldr	r3, [r7, #4]
 8109c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109c0c:	f043 0220 	orr.w	r2, r3, #32
 8109c10:	687b      	ldr	r3, [r7, #4]
 8109c12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8109c16:	687b      	ldr	r3, [r7, #4]
 8109c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109c1c:	2b00      	cmp	r3, #0
 8109c1e:	f000 82df 	beq.w	810a1e0 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8109c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109c26:	f003 0320 	and.w	r3, r3, #32
 8109c2a:	2b00      	cmp	r3, #0
 8109c2c:	d013      	beq.n	8109c56 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8109c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109c32:	f003 0320 	and.w	r3, r3, #32
 8109c36:	2b00      	cmp	r3, #0
 8109c38:	d105      	bne.n	8109c46 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8109c3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8109c3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8109c42:	2b00      	cmp	r3, #0
 8109c44:	d007      	beq.n	8109c56 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8109c46:	687b      	ldr	r3, [r7, #4]
 8109c48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109c4a:	2b00      	cmp	r3, #0
 8109c4c:	d003      	beq.n	8109c56 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8109c4e:	687b      	ldr	r3, [r7, #4]
 8109c50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8109c52:	6878      	ldr	r0, [r7, #4]
 8109c54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8109c56:	687b      	ldr	r3, [r7, #4]
 8109c58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8109c5c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109c60:	687b      	ldr	r3, [r7, #4]
 8109c62:	681b      	ldr	r3, [r3, #0]
 8109c64:	689b      	ldr	r3, [r3, #8]
 8109c66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c6a:	2b40      	cmp	r3, #64	@ 0x40
 8109c6c:	d005      	beq.n	8109c7a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8109c6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8109c72:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8109c76:	2b00      	cmp	r3, #0
 8109c78:	d054      	beq.n	8109d24 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8109c7a:	6878      	ldr	r0, [r7, #4]
 8109c7c:	f001 faeb 	bl	810b256 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109c80:	687b      	ldr	r3, [r7, #4]
 8109c82:	681b      	ldr	r3, [r3, #0]
 8109c84:	689b      	ldr	r3, [r3, #8]
 8109c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109c8a:	2b40      	cmp	r3, #64	@ 0x40
 8109c8c:	d146      	bne.n	8109d1c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109c8e:	687b      	ldr	r3, [r7, #4]
 8109c90:	681b      	ldr	r3, [r3, #0]
 8109c92:	3308      	adds	r3, #8
 8109c94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109c98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8109c9c:	e853 3f00 	ldrex	r3, [r3]
 8109ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8109ca4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8109ca8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109cac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8109cb0:	687b      	ldr	r3, [r7, #4]
 8109cb2:	681b      	ldr	r3, [r3, #0]
 8109cb4:	3308      	adds	r3, #8
 8109cb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8109cba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8109cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109cc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8109cc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8109cca:	e841 2300 	strex	r3, r2, [r1]
 8109cce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8109cd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8109cd6:	2b00      	cmp	r3, #0
 8109cd8:	d1d9      	bne.n	8109c8e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8109cda:	687b      	ldr	r3, [r7, #4]
 8109cdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109ce0:	2b00      	cmp	r3, #0
 8109ce2:	d017      	beq.n	8109d14 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8109ce4:	687b      	ldr	r3, [r7, #4]
 8109ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109cea:	4a15      	ldr	r2, [pc, #84]	@ (8109d40 <HAL_UART_IRQHandler+0x2c0>)
 8109cec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8109cee:	687b      	ldr	r3, [r7, #4]
 8109cf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109cf4:	4618      	mov	r0, r3
 8109cf6:	f7f9 ff0b 	bl	8103b10 <HAL_DMA_Abort_IT>
 8109cfa:	4603      	mov	r3, r0
 8109cfc:	2b00      	cmp	r3, #0
 8109cfe:	d019      	beq.n	8109d34 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8109d00:	687b      	ldr	r3, [r7, #4]
 8109d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8109d08:	687a      	ldr	r2, [r7, #4]
 8109d0a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8109d0e:	4610      	mov	r0, r2
 8109d10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109d12:	e00f      	b.n	8109d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8109d14:	6878      	ldr	r0, [r7, #4]
 8109d16:	f000 fa8b 	bl	810a230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109d1a:	e00b      	b.n	8109d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8109d1c:	6878      	ldr	r0, [r7, #4]
 8109d1e:	f000 fa87 	bl	810a230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109d22:	e007      	b.n	8109d34 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8109d24:	6878      	ldr	r0, [r7, #4]
 8109d26:	f000 fa83 	bl	810a230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8109d2a:	687b      	ldr	r3, [r7, #4]
 8109d2c:	2200      	movs	r2, #0
 8109d2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8109d32:	e255      	b.n	810a1e0 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109d34:	bf00      	nop
    return;
 8109d36:	e253      	b.n	810a1e0 <HAL_UART_IRQHandler+0x760>
 8109d38:	10000001 	.word	0x10000001
 8109d3c:	04000120 	.word	0x04000120
 8109d40:	0810b509 	.word	0x0810b509

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8109d44:	687b      	ldr	r3, [r7, #4]
 8109d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8109d48:	2b01      	cmp	r3, #1
 8109d4a:	f040 81e9 	bne.w	810a120 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8109d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8109d52:	f003 0310 	and.w	r3, r3, #16
 8109d56:	2b00      	cmp	r3, #0
 8109d58:	f000 81e2 	beq.w	810a120 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8109d5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8109d60:	f003 0310 	and.w	r3, r3, #16
 8109d64:	2b00      	cmp	r3, #0
 8109d66:	f000 81db 	beq.w	810a120 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8109d6a:	687b      	ldr	r3, [r7, #4]
 8109d6c:	681b      	ldr	r3, [r3, #0]
 8109d6e:	2210      	movs	r2, #16
 8109d70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8109d72:	687b      	ldr	r3, [r7, #4]
 8109d74:	681b      	ldr	r3, [r3, #0]
 8109d76:	689b      	ldr	r3, [r3, #8]
 8109d78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8109d7c:	2b40      	cmp	r3, #64	@ 0x40
 8109d7e:	f040 8151 	bne.w	810a024 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8109d82:	687b      	ldr	r3, [r7, #4]
 8109d84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109d88:	681b      	ldr	r3, [r3, #0]
 8109d8a:	4a96      	ldr	r2, [pc, #600]	@ (8109fe4 <HAL_UART_IRQHandler+0x564>)
 8109d8c:	4293      	cmp	r3, r2
 8109d8e:	d068      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109d90:	687b      	ldr	r3, [r7, #4]
 8109d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109d96:	681b      	ldr	r3, [r3, #0]
 8109d98:	4a93      	ldr	r2, [pc, #588]	@ (8109fe8 <HAL_UART_IRQHandler+0x568>)
 8109d9a:	4293      	cmp	r3, r2
 8109d9c:	d061      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109d9e:	687b      	ldr	r3, [r7, #4]
 8109da0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109da4:	681b      	ldr	r3, [r3, #0]
 8109da6:	4a91      	ldr	r2, [pc, #580]	@ (8109fec <HAL_UART_IRQHandler+0x56c>)
 8109da8:	4293      	cmp	r3, r2
 8109daa:	d05a      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109dac:	687b      	ldr	r3, [r7, #4]
 8109dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109db2:	681b      	ldr	r3, [r3, #0]
 8109db4:	4a8e      	ldr	r2, [pc, #568]	@ (8109ff0 <HAL_UART_IRQHandler+0x570>)
 8109db6:	4293      	cmp	r3, r2
 8109db8:	d053      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109dba:	687b      	ldr	r3, [r7, #4]
 8109dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109dc0:	681b      	ldr	r3, [r3, #0]
 8109dc2:	4a8c      	ldr	r2, [pc, #560]	@ (8109ff4 <HAL_UART_IRQHandler+0x574>)
 8109dc4:	4293      	cmp	r3, r2
 8109dc6:	d04c      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109dc8:	687b      	ldr	r3, [r7, #4]
 8109dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109dce:	681b      	ldr	r3, [r3, #0]
 8109dd0:	4a89      	ldr	r2, [pc, #548]	@ (8109ff8 <HAL_UART_IRQHandler+0x578>)
 8109dd2:	4293      	cmp	r3, r2
 8109dd4:	d045      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109dd6:	687b      	ldr	r3, [r7, #4]
 8109dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109ddc:	681b      	ldr	r3, [r3, #0]
 8109dde:	4a87      	ldr	r2, [pc, #540]	@ (8109ffc <HAL_UART_IRQHandler+0x57c>)
 8109de0:	4293      	cmp	r3, r2
 8109de2:	d03e      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109de4:	687b      	ldr	r3, [r7, #4]
 8109de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109dea:	681b      	ldr	r3, [r3, #0]
 8109dec:	4a84      	ldr	r2, [pc, #528]	@ (810a000 <HAL_UART_IRQHandler+0x580>)
 8109dee:	4293      	cmp	r3, r2
 8109df0:	d037      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109df2:	687b      	ldr	r3, [r7, #4]
 8109df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109df8:	681b      	ldr	r3, [r3, #0]
 8109dfa:	4a82      	ldr	r2, [pc, #520]	@ (810a004 <HAL_UART_IRQHandler+0x584>)
 8109dfc:	4293      	cmp	r3, r2
 8109dfe:	d030      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e00:	687b      	ldr	r3, [r7, #4]
 8109e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e06:	681b      	ldr	r3, [r3, #0]
 8109e08:	4a7f      	ldr	r2, [pc, #508]	@ (810a008 <HAL_UART_IRQHandler+0x588>)
 8109e0a:	4293      	cmp	r3, r2
 8109e0c:	d029      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e0e:	687b      	ldr	r3, [r7, #4]
 8109e10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e14:	681b      	ldr	r3, [r3, #0]
 8109e16:	4a7d      	ldr	r2, [pc, #500]	@ (810a00c <HAL_UART_IRQHandler+0x58c>)
 8109e18:	4293      	cmp	r3, r2
 8109e1a:	d022      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e1c:	687b      	ldr	r3, [r7, #4]
 8109e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e22:	681b      	ldr	r3, [r3, #0]
 8109e24:	4a7a      	ldr	r2, [pc, #488]	@ (810a010 <HAL_UART_IRQHandler+0x590>)
 8109e26:	4293      	cmp	r3, r2
 8109e28:	d01b      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e2a:	687b      	ldr	r3, [r7, #4]
 8109e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e30:	681b      	ldr	r3, [r3, #0]
 8109e32:	4a78      	ldr	r2, [pc, #480]	@ (810a014 <HAL_UART_IRQHandler+0x594>)
 8109e34:	4293      	cmp	r3, r2
 8109e36:	d014      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e38:	687b      	ldr	r3, [r7, #4]
 8109e3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e3e:	681b      	ldr	r3, [r3, #0]
 8109e40:	4a75      	ldr	r2, [pc, #468]	@ (810a018 <HAL_UART_IRQHandler+0x598>)
 8109e42:	4293      	cmp	r3, r2
 8109e44:	d00d      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e46:	687b      	ldr	r3, [r7, #4]
 8109e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e4c:	681b      	ldr	r3, [r3, #0]
 8109e4e:	4a73      	ldr	r2, [pc, #460]	@ (810a01c <HAL_UART_IRQHandler+0x59c>)
 8109e50:	4293      	cmp	r3, r2
 8109e52:	d006      	beq.n	8109e62 <HAL_UART_IRQHandler+0x3e2>
 8109e54:	687b      	ldr	r3, [r7, #4]
 8109e56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e5a:	681b      	ldr	r3, [r3, #0]
 8109e5c:	4a70      	ldr	r2, [pc, #448]	@ (810a020 <HAL_UART_IRQHandler+0x5a0>)
 8109e5e:	4293      	cmp	r3, r2
 8109e60:	d106      	bne.n	8109e70 <HAL_UART_IRQHandler+0x3f0>
 8109e62:	687b      	ldr	r3, [r7, #4]
 8109e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e68:	681b      	ldr	r3, [r3, #0]
 8109e6a:	685b      	ldr	r3, [r3, #4]
 8109e6c:	b29b      	uxth	r3, r3
 8109e6e:	e005      	b.n	8109e7c <HAL_UART_IRQHandler+0x3fc>
 8109e70:	687b      	ldr	r3, [r7, #4]
 8109e72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109e76:	681b      	ldr	r3, [r3, #0]
 8109e78:	685b      	ldr	r3, [r3, #4]
 8109e7a:	b29b      	uxth	r3, r3
 8109e7c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8109e80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8109e84:	2b00      	cmp	r3, #0
 8109e86:	f000 81ad 	beq.w	810a1e4 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8109e8a:	687b      	ldr	r3, [r7, #4]
 8109e8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8109e90:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109e94:	429a      	cmp	r2, r3
 8109e96:	f080 81a5 	bcs.w	810a1e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8109e9a:	687b      	ldr	r3, [r7, #4]
 8109e9c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8109ea0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8109ea4:	687b      	ldr	r3, [r7, #4]
 8109ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109eaa:	69db      	ldr	r3, [r3, #28]
 8109eac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8109eb0:	f000 8087 	beq.w	8109fc2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8109eb4:	687b      	ldr	r3, [r7, #4]
 8109eb6:	681b      	ldr	r3, [r3, #0]
 8109eb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109ebc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8109ec0:	e853 3f00 	ldrex	r3, [r3]
 8109ec4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8109ec8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8109ecc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8109ed0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8109ed4:	687b      	ldr	r3, [r7, #4]
 8109ed6:	681b      	ldr	r3, [r3, #0]
 8109ed8:	461a      	mov	r2, r3
 8109eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8109ede:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8109ee2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109ee6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8109eea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8109eee:	e841 2300 	strex	r3, r2, [r1]
 8109ef2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8109ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8109efa:	2b00      	cmp	r3, #0
 8109efc:	d1da      	bne.n	8109eb4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8109efe:	687b      	ldr	r3, [r7, #4]
 8109f00:	681b      	ldr	r3, [r3, #0]
 8109f02:	3308      	adds	r3, #8
 8109f04:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f06:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8109f08:	e853 3f00 	ldrex	r3, [r3]
 8109f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8109f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8109f10:	f023 0301 	bic.w	r3, r3, #1
 8109f14:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8109f18:	687b      	ldr	r3, [r7, #4]
 8109f1a:	681b      	ldr	r3, [r3, #0]
 8109f1c:	3308      	adds	r3, #8
 8109f1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8109f22:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8109f26:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109f28:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8109f2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8109f2e:	e841 2300 	strex	r3, r2, [r1]
 8109f32:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8109f34:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8109f36:	2b00      	cmp	r3, #0
 8109f38:	d1e1      	bne.n	8109efe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8109f3a:	687b      	ldr	r3, [r7, #4]
 8109f3c:	681b      	ldr	r3, [r3, #0]
 8109f3e:	3308      	adds	r3, #8
 8109f40:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8109f44:	e853 3f00 	ldrex	r3, [r3]
 8109f48:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8109f4a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8109f4c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8109f50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8109f54:	687b      	ldr	r3, [r7, #4]
 8109f56:	681b      	ldr	r3, [r3, #0]
 8109f58:	3308      	adds	r3, #8
 8109f5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8109f5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8109f60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109f62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8109f64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8109f66:	e841 2300 	strex	r3, r2, [r1]
 8109f6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8109f6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8109f6e:	2b00      	cmp	r3, #0
 8109f70:	d1e3      	bne.n	8109f3a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8109f72:	687b      	ldr	r3, [r7, #4]
 8109f74:	2220      	movs	r2, #32
 8109f76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8109f7a:	687b      	ldr	r3, [r7, #4]
 8109f7c:	2200      	movs	r2, #0
 8109f7e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8109f80:	687b      	ldr	r3, [r7, #4]
 8109f82:	681b      	ldr	r3, [r3, #0]
 8109f84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8109f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8109f88:	e853 3f00 	ldrex	r3, [r3]
 8109f8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8109f8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8109f90:	f023 0310 	bic.w	r3, r3, #16
 8109f94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8109f98:	687b      	ldr	r3, [r7, #4]
 8109f9a:	681b      	ldr	r3, [r3, #0]
 8109f9c:	461a      	mov	r2, r3
 8109f9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8109fa2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8109fa4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8109fa6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8109fa8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8109faa:	e841 2300 	strex	r3, r2, [r1]
 8109fae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8109fb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8109fb2:	2b00      	cmp	r3, #0
 8109fb4:	d1e4      	bne.n	8109f80 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8109fb6:	687b      	ldr	r3, [r7, #4]
 8109fb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8109fbc:	4618      	mov	r0, r3
 8109fbe:	f7f9 fa89 	bl	81034d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8109fc2:	687b      	ldr	r3, [r7, #4]
 8109fc4:	2202      	movs	r2, #2
 8109fc6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8109fc8:	687b      	ldr	r3, [r7, #4]
 8109fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8109fce:	687b      	ldr	r3, [r7, #4]
 8109fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8109fd4:	b29b      	uxth	r3, r3
 8109fd6:	1ad3      	subs	r3, r2, r3
 8109fd8:	b29b      	uxth	r3, r3
 8109fda:	4619      	mov	r1, r3
 8109fdc:	6878      	ldr	r0, [r7, #4]
 8109fde:	f7f7 fb4d 	bl	810167c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8109fe2:	e0ff      	b.n	810a1e4 <HAL_UART_IRQHandler+0x764>
 8109fe4:	40020010 	.word	0x40020010
 8109fe8:	40020028 	.word	0x40020028
 8109fec:	40020040 	.word	0x40020040
 8109ff0:	40020058 	.word	0x40020058
 8109ff4:	40020070 	.word	0x40020070
 8109ff8:	40020088 	.word	0x40020088
 8109ffc:	400200a0 	.word	0x400200a0
 810a000:	400200b8 	.word	0x400200b8
 810a004:	40020410 	.word	0x40020410
 810a008:	40020428 	.word	0x40020428
 810a00c:	40020440 	.word	0x40020440
 810a010:	40020458 	.word	0x40020458
 810a014:	40020470 	.word	0x40020470
 810a018:	40020488 	.word	0x40020488
 810a01c:	400204a0 	.word	0x400204a0
 810a020:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 810a024:	687b      	ldr	r3, [r7, #4]
 810a026:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810a02a:	687b      	ldr	r3, [r7, #4]
 810a02c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a030:	b29b      	uxth	r3, r3
 810a032:	1ad3      	subs	r3, r2, r3
 810a034:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 810a038:	687b      	ldr	r3, [r7, #4]
 810a03a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810a03e:	b29b      	uxth	r3, r3
 810a040:	2b00      	cmp	r3, #0
 810a042:	f000 80d1 	beq.w	810a1e8 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 810a046:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810a04a:	2b00      	cmp	r3, #0
 810a04c:	f000 80cc 	beq.w	810a1e8 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810a050:	687b      	ldr	r3, [r7, #4]
 810a052:	681b      	ldr	r3, [r3, #0]
 810a054:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a058:	e853 3f00 	ldrex	r3, [r3]
 810a05c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810a05e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810a060:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810a064:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 810a068:	687b      	ldr	r3, [r7, #4]
 810a06a:	681b      	ldr	r3, [r3, #0]
 810a06c:	461a      	mov	r2, r3
 810a06e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 810a072:	647b      	str	r3, [r7, #68]	@ 0x44
 810a074:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a076:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810a078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a07a:	e841 2300 	strex	r3, r2, [r1]
 810a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810a080:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a082:	2b00      	cmp	r3, #0
 810a084:	d1e4      	bne.n	810a050 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810a086:	687b      	ldr	r3, [r7, #4]
 810a088:	681b      	ldr	r3, [r3, #0]
 810a08a:	3308      	adds	r3, #8
 810a08c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a08e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810a090:	e853 3f00 	ldrex	r3, [r3]
 810a094:	623b      	str	r3, [r7, #32]
   return(result);
 810a096:	6a3b      	ldr	r3, [r7, #32]
 810a098:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810a09c:	f023 0301 	bic.w	r3, r3, #1
 810a0a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810a0a4:	687b      	ldr	r3, [r7, #4]
 810a0a6:	681b      	ldr	r3, [r3, #0]
 810a0a8:	3308      	adds	r3, #8
 810a0aa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 810a0ae:	633a      	str	r2, [r7, #48]	@ 0x30
 810a0b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a0b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810a0b4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a0b6:	e841 2300 	strex	r3, r2, [r1]
 810a0ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810a0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a0be:	2b00      	cmp	r3, #0
 810a0c0:	d1e1      	bne.n	810a086 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 810a0c2:	687b      	ldr	r3, [r7, #4]
 810a0c4:	2220      	movs	r2, #32
 810a0c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810a0ca:	687b      	ldr	r3, [r7, #4]
 810a0cc:	2200      	movs	r2, #0
 810a0ce:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810a0d0:	687b      	ldr	r3, [r7, #4]
 810a0d2:	2200      	movs	r2, #0
 810a0d4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810a0d6:	687b      	ldr	r3, [r7, #4]
 810a0d8:	681b      	ldr	r3, [r3, #0]
 810a0da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810a0dc:	693b      	ldr	r3, [r7, #16]
 810a0de:	e853 3f00 	ldrex	r3, [r3]
 810a0e2:	60fb      	str	r3, [r7, #12]
   return(result);
 810a0e4:	68fb      	ldr	r3, [r7, #12]
 810a0e6:	f023 0310 	bic.w	r3, r3, #16
 810a0ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810a0ee:	687b      	ldr	r3, [r7, #4]
 810a0f0:	681b      	ldr	r3, [r3, #0]
 810a0f2:	461a      	mov	r2, r3
 810a0f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 810a0f8:	61fb      	str	r3, [r7, #28]
 810a0fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810a0fc:	69b9      	ldr	r1, [r7, #24]
 810a0fe:	69fa      	ldr	r2, [r7, #28]
 810a100:	e841 2300 	strex	r3, r2, [r1]
 810a104:	617b      	str	r3, [r7, #20]
   return(result);
 810a106:	697b      	ldr	r3, [r7, #20]
 810a108:	2b00      	cmp	r3, #0
 810a10a:	d1e4      	bne.n	810a0d6 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810a10c:	687b      	ldr	r3, [r7, #4]
 810a10e:	2202      	movs	r2, #2
 810a110:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 810a112:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 810a116:	4619      	mov	r1, r3
 810a118:	6878      	ldr	r0, [r7, #4]
 810a11a:	f7f7 faaf 	bl	810167c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810a11e:	e063      	b.n	810a1e8 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 810a120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810a124:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810a128:	2b00      	cmp	r3, #0
 810a12a:	d00e      	beq.n	810a14a <HAL_UART_IRQHandler+0x6ca>
 810a12c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810a130:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a134:	2b00      	cmp	r3, #0
 810a136:	d008      	beq.n	810a14a <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 810a138:	687b      	ldr	r3, [r7, #4]
 810a13a:	681b      	ldr	r3, [r3, #0]
 810a13c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 810a140:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 810a142:	6878      	ldr	r0, [r7, #4]
 810a144:	f001 fa21 	bl	810b58a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a148:	e051      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 810a14a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810a14e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a152:	2b00      	cmp	r3, #0
 810a154:	d014      	beq.n	810a180 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 810a156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810a15a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a15e:	2b00      	cmp	r3, #0
 810a160:	d105      	bne.n	810a16e <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 810a162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 810a166:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a16a:	2b00      	cmp	r3, #0
 810a16c:	d008      	beq.n	810a180 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 810a16e:	687b      	ldr	r3, [r7, #4]
 810a170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810a172:	2b00      	cmp	r3, #0
 810a174:	d03a      	beq.n	810a1ec <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 810a176:	687b      	ldr	r3, [r7, #4]
 810a178:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 810a17a:	6878      	ldr	r0, [r7, #4]
 810a17c:	4798      	blx	r3
    }
    return;
 810a17e:	e035      	b.n	810a1ec <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 810a180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810a184:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a188:	2b00      	cmp	r3, #0
 810a18a:	d009      	beq.n	810a1a0 <HAL_UART_IRQHandler+0x720>
 810a18c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810a190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810a194:	2b00      	cmp	r3, #0
 810a196:	d003      	beq.n	810a1a0 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 810a198:	6878      	ldr	r0, [r7, #4]
 810a19a:	f001 f9cb 	bl	810b534 <UART_EndTransmit_IT>
    return;
 810a19e:	e026      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 810a1a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810a1a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a1a8:	2b00      	cmp	r3, #0
 810a1aa:	d009      	beq.n	810a1c0 <HAL_UART_IRQHandler+0x740>
 810a1ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810a1b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810a1b4:	2b00      	cmp	r3, #0
 810a1b6:	d003      	beq.n	810a1c0 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 810a1b8:	6878      	ldr	r0, [r7, #4]
 810a1ba:	f001 f9fa 	bl	810b5b2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a1be:	e016      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 810a1c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 810a1c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810a1c8:	2b00      	cmp	r3, #0
 810a1ca:	d010      	beq.n	810a1ee <HAL_UART_IRQHandler+0x76e>
 810a1cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 810a1d0:	2b00      	cmp	r3, #0
 810a1d2:	da0c      	bge.n	810a1ee <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 810a1d4:	6878      	ldr	r0, [r7, #4]
 810a1d6:	f001 f9e2 	bl	810b59e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810a1da:	e008      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
      return;
 810a1dc:	bf00      	nop
 810a1de:	e006      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
    return;
 810a1e0:	bf00      	nop
 810a1e2:	e004      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
      return;
 810a1e4:	bf00      	nop
 810a1e6:	e002      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
      return;
 810a1e8:	bf00      	nop
 810a1ea:	e000      	b.n	810a1ee <HAL_UART_IRQHandler+0x76e>
    return;
 810a1ec:	bf00      	nop
  }
}
 810a1ee:	37e8      	adds	r7, #232	@ 0xe8
 810a1f0:	46bd      	mov	sp, r7
 810a1f2:	bd80      	pop	{r7, pc}

0810a1f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 810a1f4:	b480      	push	{r7}
 810a1f6:	b083      	sub	sp, #12
 810a1f8:	af00      	add	r7, sp, #0
 810a1fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810a1fc:	bf00      	nop
 810a1fe:	370c      	adds	r7, #12
 810a200:	46bd      	mov	sp, r7
 810a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a206:	4770      	bx	lr

0810a208 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 810a208:	b480      	push	{r7}
 810a20a:	b083      	sub	sp, #12
 810a20c:	af00      	add	r7, sp, #0
 810a20e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 810a210:	bf00      	nop
 810a212:	370c      	adds	r7, #12
 810a214:	46bd      	mov	sp, r7
 810a216:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a21a:	4770      	bx	lr

0810a21c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 810a21c:	b480      	push	{r7}
 810a21e:	b083      	sub	sp, #12
 810a220:	af00      	add	r7, sp, #0
 810a222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 810a224:	bf00      	nop
 810a226:	370c      	adds	r7, #12
 810a228:	46bd      	mov	sp, r7
 810a22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a22e:	4770      	bx	lr

0810a230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 810a230:	b480      	push	{r7}
 810a232:	b083      	sub	sp, #12
 810a234:	af00      	add	r7, sp, #0
 810a236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 810a238:	bf00      	nop
 810a23a:	370c      	adds	r7, #12
 810a23c:	46bd      	mov	sp, r7
 810a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a242:	4770      	bx	lr

0810a244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 810a244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810a248:	b092      	sub	sp, #72	@ 0x48
 810a24a:	af00      	add	r7, sp, #0
 810a24c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810a24e:	2300      	movs	r3, #0
 810a250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 810a254:	697b      	ldr	r3, [r7, #20]
 810a256:	689a      	ldr	r2, [r3, #8]
 810a258:	697b      	ldr	r3, [r7, #20]
 810a25a:	691b      	ldr	r3, [r3, #16]
 810a25c:	431a      	orrs	r2, r3
 810a25e:	697b      	ldr	r3, [r7, #20]
 810a260:	695b      	ldr	r3, [r3, #20]
 810a262:	431a      	orrs	r2, r3
 810a264:	697b      	ldr	r3, [r7, #20]
 810a266:	69db      	ldr	r3, [r3, #28]
 810a268:	4313      	orrs	r3, r2
 810a26a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810a26c:	697b      	ldr	r3, [r7, #20]
 810a26e:	681b      	ldr	r3, [r3, #0]
 810a270:	681a      	ldr	r2, [r3, #0]
 810a272:	4bbd      	ldr	r3, [pc, #756]	@ (810a568 <UART_SetConfig+0x324>)
 810a274:	4013      	ands	r3, r2
 810a276:	697a      	ldr	r2, [r7, #20]
 810a278:	6812      	ldr	r2, [r2, #0]
 810a27a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a27c:	430b      	orrs	r3, r1
 810a27e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 810a280:	697b      	ldr	r3, [r7, #20]
 810a282:	681b      	ldr	r3, [r3, #0]
 810a284:	685b      	ldr	r3, [r3, #4]
 810a286:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810a28a:	697b      	ldr	r3, [r7, #20]
 810a28c:	68da      	ldr	r2, [r3, #12]
 810a28e:	697b      	ldr	r3, [r7, #20]
 810a290:	681b      	ldr	r3, [r3, #0]
 810a292:	430a      	orrs	r2, r1
 810a294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 810a296:	697b      	ldr	r3, [r7, #20]
 810a298:	699b      	ldr	r3, [r3, #24]
 810a29a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810a29c:	697b      	ldr	r3, [r7, #20]
 810a29e:	681b      	ldr	r3, [r3, #0]
 810a2a0:	4ab2      	ldr	r2, [pc, #712]	@ (810a56c <UART_SetConfig+0x328>)
 810a2a2:	4293      	cmp	r3, r2
 810a2a4:	d004      	beq.n	810a2b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 810a2a6:	697b      	ldr	r3, [r7, #20]
 810a2a8:	6a1b      	ldr	r3, [r3, #32]
 810a2aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810a2ac:	4313      	orrs	r3, r2
 810a2ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810a2b0:	697b      	ldr	r3, [r7, #20]
 810a2b2:	681b      	ldr	r3, [r3, #0]
 810a2b4:	689b      	ldr	r3, [r3, #8]
 810a2b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 810a2ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 810a2be:	697a      	ldr	r2, [r7, #20]
 810a2c0:	6812      	ldr	r2, [r2, #0]
 810a2c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810a2c4:	430b      	orrs	r3, r1
 810a2c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 810a2c8:	697b      	ldr	r3, [r7, #20]
 810a2ca:	681b      	ldr	r3, [r3, #0]
 810a2cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a2ce:	f023 010f 	bic.w	r1, r3, #15
 810a2d2:	697b      	ldr	r3, [r7, #20]
 810a2d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 810a2d6:	697b      	ldr	r3, [r7, #20]
 810a2d8:	681b      	ldr	r3, [r3, #0]
 810a2da:	430a      	orrs	r2, r1
 810a2dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810a2de:	697b      	ldr	r3, [r7, #20]
 810a2e0:	681b      	ldr	r3, [r3, #0]
 810a2e2:	4aa3      	ldr	r2, [pc, #652]	@ (810a570 <UART_SetConfig+0x32c>)
 810a2e4:	4293      	cmp	r3, r2
 810a2e6:	d177      	bne.n	810a3d8 <UART_SetConfig+0x194>
 810a2e8:	4ba2      	ldr	r3, [pc, #648]	@ (810a574 <UART_SetConfig+0x330>)
 810a2ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a2ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a2f0:	2b28      	cmp	r3, #40	@ 0x28
 810a2f2:	d86d      	bhi.n	810a3d0 <UART_SetConfig+0x18c>
 810a2f4:	a201      	add	r2, pc, #4	@ (adr r2, 810a2fc <UART_SetConfig+0xb8>)
 810a2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a2fa:	bf00      	nop
 810a2fc:	0810a3a1 	.word	0x0810a3a1
 810a300:	0810a3d1 	.word	0x0810a3d1
 810a304:	0810a3d1 	.word	0x0810a3d1
 810a308:	0810a3d1 	.word	0x0810a3d1
 810a30c:	0810a3d1 	.word	0x0810a3d1
 810a310:	0810a3d1 	.word	0x0810a3d1
 810a314:	0810a3d1 	.word	0x0810a3d1
 810a318:	0810a3d1 	.word	0x0810a3d1
 810a31c:	0810a3a9 	.word	0x0810a3a9
 810a320:	0810a3d1 	.word	0x0810a3d1
 810a324:	0810a3d1 	.word	0x0810a3d1
 810a328:	0810a3d1 	.word	0x0810a3d1
 810a32c:	0810a3d1 	.word	0x0810a3d1
 810a330:	0810a3d1 	.word	0x0810a3d1
 810a334:	0810a3d1 	.word	0x0810a3d1
 810a338:	0810a3d1 	.word	0x0810a3d1
 810a33c:	0810a3b1 	.word	0x0810a3b1
 810a340:	0810a3d1 	.word	0x0810a3d1
 810a344:	0810a3d1 	.word	0x0810a3d1
 810a348:	0810a3d1 	.word	0x0810a3d1
 810a34c:	0810a3d1 	.word	0x0810a3d1
 810a350:	0810a3d1 	.word	0x0810a3d1
 810a354:	0810a3d1 	.word	0x0810a3d1
 810a358:	0810a3d1 	.word	0x0810a3d1
 810a35c:	0810a3b9 	.word	0x0810a3b9
 810a360:	0810a3d1 	.word	0x0810a3d1
 810a364:	0810a3d1 	.word	0x0810a3d1
 810a368:	0810a3d1 	.word	0x0810a3d1
 810a36c:	0810a3d1 	.word	0x0810a3d1
 810a370:	0810a3d1 	.word	0x0810a3d1
 810a374:	0810a3d1 	.word	0x0810a3d1
 810a378:	0810a3d1 	.word	0x0810a3d1
 810a37c:	0810a3c1 	.word	0x0810a3c1
 810a380:	0810a3d1 	.word	0x0810a3d1
 810a384:	0810a3d1 	.word	0x0810a3d1
 810a388:	0810a3d1 	.word	0x0810a3d1
 810a38c:	0810a3d1 	.word	0x0810a3d1
 810a390:	0810a3d1 	.word	0x0810a3d1
 810a394:	0810a3d1 	.word	0x0810a3d1
 810a398:	0810a3d1 	.word	0x0810a3d1
 810a39c:	0810a3c9 	.word	0x0810a3c9
 810a3a0:	2301      	movs	r3, #1
 810a3a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3a6:	e220      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3a8:	2304      	movs	r3, #4
 810a3aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3ae:	e21c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3b0:	2308      	movs	r3, #8
 810a3b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3b6:	e218      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3b8:	2310      	movs	r3, #16
 810a3ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3be:	e214      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3c0:	2320      	movs	r3, #32
 810a3c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3c6:	e210      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3c8:	2340      	movs	r3, #64	@ 0x40
 810a3ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3ce:	e20c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3d0:	2380      	movs	r3, #128	@ 0x80
 810a3d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a3d6:	e208      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a3d8:	697b      	ldr	r3, [r7, #20]
 810a3da:	681b      	ldr	r3, [r3, #0]
 810a3dc:	4a66      	ldr	r2, [pc, #408]	@ (810a578 <UART_SetConfig+0x334>)
 810a3de:	4293      	cmp	r3, r2
 810a3e0:	d130      	bne.n	810a444 <UART_SetConfig+0x200>
 810a3e2:	4b64      	ldr	r3, [pc, #400]	@ (810a574 <UART_SetConfig+0x330>)
 810a3e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a3e6:	f003 0307 	and.w	r3, r3, #7
 810a3ea:	2b05      	cmp	r3, #5
 810a3ec:	d826      	bhi.n	810a43c <UART_SetConfig+0x1f8>
 810a3ee:	a201      	add	r2, pc, #4	@ (adr r2, 810a3f4 <UART_SetConfig+0x1b0>)
 810a3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a3f4:	0810a40d 	.word	0x0810a40d
 810a3f8:	0810a415 	.word	0x0810a415
 810a3fc:	0810a41d 	.word	0x0810a41d
 810a400:	0810a425 	.word	0x0810a425
 810a404:	0810a42d 	.word	0x0810a42d
 810a408:	0810a435 	.word	0x0810a435
 810a40c:	2300      	movs	r3, #0
 810a40e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a412:	e1ea      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a414:	2304      	movs	r3, #4
 810a416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a41a:	e1e6      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a41c:	2308      	movs	r3, #8
 810a41e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a422:	e1e2      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a424:	2310      	movs	r3, #16
 810a426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a42a:	e1de      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a42c:	2320      	movs	r3, #32
 810a42e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a432:	e1da      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a434:	2340      	movs	r3, #64	@ 0x40
 810a436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a43a:	e1d6      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a43c:	2380      	movs	r3, #128	@ 0x80
 810a43e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a442:	e1d2      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a444:	697b      	ldr	r3, [r7, #20]
 810a446:	681b      	ldr	r3, [r3, #0]
 810a448:	4a4c      	ldr	r2, [pc, #304]	@ (810a57c <UART_SetConfig+0x338>)
 810a44a:	4293      	cmp	r3, r2
 810a44c:	d130      	bne.n	810a4b0 <UART_SetConfig+0x26c>
 810a44e:	4b49      	ldr	r3, [pc, #292]	@ (810a574 <UART_SetConfig+0x330>)
 810a450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a452:	f003 0307 	and.w	r3, r3, #7
 810a456:	2b05      	cmp	r3, #5
 810a458:	d826      	bhi.n	810a4a8 <UART_SetConfig+0x264>
 810a45a:	a201      	add	r2, pc, #4	@ (adr r2, 810a460 <UART_SetConfig+0x21c>)
 810a45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a460:	0810a479 	.word	0x0810a479
 810a464:	0810a481 	.word	0x0810a481
 810a468:	0810a489 	.word	0x0810a489
 810a46c:	0810a491 	.word	0x0810a491
 810a470:	0810a499 	.word	0x0810a499
 810a474:	0810a4a1 	.word	0x0810a4a1
 810a478:	2300      	movs	r3, #0
 810a47a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a47e:	e1b4      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a480:	2304      	movs	r3, #4
 810a482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a486:	e1b0      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a488:	2308      	movs	r3, #8
 810a48a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a48e:	e1ac      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a490:	2310      	movs	r3, #16
 810a492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a496:	e1a8      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a498:	2320      	movs	r3, #32
 810a49a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a49e:	e1a4      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4a0:	2340      	movs	r3, #64	@ 0x40
 810a4a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4a6:	e1a0      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4a8:	2380      	movs	r3, #128	@ 0x80
 810a4aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ae:	e19c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4b0:	697b      	ldr	r3, [r7, #20]
 810a4b2:	681b      	ldr	r3, [r3, #0]
 810a4b4:	4a32      	ldr	r2, [pc, #200]	@ (810a580 <UART_SetConfig+0x33c>)
 810a4b6:	4293      	cmp	r3, r2
 810a4b8:	d130      	bne.n	810a51c <UART_SetConfig+0x2d8>
 810a4ba:	4b2e      	ldr	r3, [pc, #184]	@ (810a574 <UART_SetConfig+0x330>)
 810a4bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a4be:	f003 0307 	and.w	r3, r3, #7
 810a4c2:	2b05      	cmp	r3, #5
 810a4c4:	d826      	bhi.n	810a514 <UART_SetConfig+0x2d0>
 810a4c6:	a201      	add	r2, pc, #4	@ (adr r2, 810a4cc <UART_SetConfig+0x288>)
 810a4c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a4cc:	0810a4e5 	.word	0x0810a4e5
 810a4d0:	0810a4ed 	.word	0x0810a4ed
 810a4d4:	0810a4f5 	.word	0x0810a4f5
 810a4d8:	0810a4fd 	.word	0x0810a4fd
 810a4dc:	0810a505 	.word	0x0810a505
 810a4e0:	0810a50d 	.word	0x0810a50d
 810a4e4:	2300      	movs	r3, #0
 810a4e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4ea:	e17e      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4ec:	2304      	movs	r3, #4
 810a4ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4f2:	e17a      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4f4:	2308      	movs	r3, #8
 810a4f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a4fa:	e176      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a4fc:	2310      	movs	r3, #16
 810a4fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a502:	e172      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a504:	2320      	movs	r3, #32
 810a506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a50a:	e16e      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a50c:	2340      	movs	r3, #64	@ 0x40
 810a50e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a512:	e16a      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a514:	2380      	movs	r3, #128	@ 0x80
 810a516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a51a:	e166      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a51c:	697b      	ldr	r3, [r7, #20]
 810a51e:	681b      	ldr	r3, [r3, #0]
 810a520:	4a18      	ldr	r2, [pc, #96]	@ (810a584 <UART_SetConfig+0x340>)
 810a522:	4293      	cmp	r3, r2
 810a524:	d140      	bne.n	810a5a8 <UART_SetConfig+0x364>
 810a526:	4b13      	ldr	r3, [pc, #76]	@ (810a574 <UART_SetConfig+0x330>)
 810a528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a52a:	f003 0307 	and.w	r3, r3, #7
 810a52e:	2b05      	cmp	r3, #5
 810a530:	d836      	bhi.n	810a5a0 <UART_SetConfig+0x35c>
 810a532:	a201      	add	r2, pc, #4	@ (adr r2, 810a538 <UART_SetConfig+0x2f4>)
 810a534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a538:	0810a551 	.word	0x0810a551
 810a53c:	0810a559 	.word	0x0810a559
 810a540:	0810a561 	.word	0x0810a561
 810a544:	0810a589 	.word	0x0810a589
 810a548:	0810a591 	.word	0x0810a591
 810a54c:	0810a599 	.word	0x0810a599
 810a550:	2300      	movs	r3, #0
 810a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a556:	e148      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a558:	2304      	movs	r3, #4
 810a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a55e:	e144      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a560:	2308      	movs	r3, #8
 810a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a566:	e140      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a568:	cfff69f3 	.word	0xcfff69f3
 810a56c:	58000c00 	.word	0x58000c00
 810a570:	40011000 	.word	0x40011000
 810a574:	58024400 	.word	0x58024400
 810a578:	40004400 	.word	0x40004400
 810a57c:	40004800 	.word	0x40004800
 810a580:	40004c00 	.word	0x40004c00
 810a584:	40005000 	.word	0x40005000
 810a588:	2310      	movs	r3, #16
 810a58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a58e:	e12c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a590:	2320      	movs	r3, #32
 810a592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a596:	e128      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a598:	2340      	movs	r3, #64	@ 0x40
 810a59a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a59e:	e124      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a5a0:	2380      	movs	r3, #128	@ 0x80
 810a5a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a5a6:	e120      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a5a8:	697b      	ldr	r3, [r7, #20]
 810a5aa:	681b      	ldr	r3, [r3, #0]
 810a5ac:	4acb      	ldr	r2, [pc, #812]	@ (810a8dc <UART_SetConfig+0x698>)
 810a5ae:	4293      	cmp	r3, r2
 810a5b0:	d176      	bne.n	810a6a0 <UART_SetConfig+0x45c>
 810a5b2:	4bcb      	ldr	r3, [pc, #812]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a5b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a5b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810a5ba:	2b28      	cmp	r3, #40	@ 0x28
 810a5bc:	d86c      	bhi.n	810a698 <UART_SetConfig+0x454>
 810a5be:	a201      	add	r2, pc, #4	@ (adr r2, 810a5c4 <UART_SetConfig+0x380>)
 810a5c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a5c4:	0810a669 	.word	0x0810a669
 810a5c8:	0810a699 	.word	0x0810a699
 810a5cc:	0810a699 	.word	0x0810a699
 810a5d0:	0810a699 	.word	0x0810a699
 810a5d4:	0810a699 	.word	0x0810a699
 810a5d8:	0810a699 	.word	0x0810a699
 810a5dc:	0810a699 	.word	0x0810a699
 810a5e0:	0810a699 	.word	0x0810a699
 810a5e4:	0810a671 	.word	0x0810a671
 810a5e8:	0810a699 	.word	0x0810a699
 810a5ec:	0810a699 	.word	0x0810a699
 810a5f0:	0810a699 	.word	0x0810a699
 810a5f4:	0810a699 	.word	0x0810a699
 810a5f8:	0810a699 	.word	0x0810a699
 810a5fc:	0810a699 	.word	0x0810a699
 810a600:	0810a699 	.word	0x0810a699
 810a604:	0810a679 	.word	0x0810a679
 810a608:	0810a699 	.word	0x0810a699
 810a60c:	0810a699 	.word	0x0810a699
 810a610:	0810a699 	.word	0x0810a699
 810a614:	0810a699 	.word	0x0810a699
 810a618:	0810a699 	.word	0x0810a699
 810a61c:	0810a699 	.word	0x0810a699
 810a620:	0810a699 	.word	0x0810a699
 810a624:	0810a681 	.word	0x0810a681
 810a628:	0810a699 	.word	0x0810a699
 810a62c:	0810a699 	.word	0x0810a699
 810a630:	0810a699 	.word	0x0810a699
 810a634:	0810a699 	.word	0x0810a699
 810a638:	0810a699 	.word	0x0810a699
 810a63c:	0810a699 	.word	0x0810a699
 810a640:	0810a699 	.word	0x0810a699
 810a644:	0810a689 	.word	0x0810a689
 810a648:	0810a699 	.word	0x0810a699
 810a64c:	0810a699 	.word	0x0810a699
 810a650:	0810a699 	.word	0x0810a699
 810a654:	0810a699 	.word	0x0810a699
 810a658:	0810a699 	.word	0x0810a699
 810a65c:	0810a699 	.word	0x0810a699
 810a660:	0810a699 	.word	0x0810a699
 810a664:	0810a691 	.word	0x0810a691
 810a668:	2301      	movs	r3, #1
 810a66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a66e:	e0bc      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a670:	2304      	movs	r3, #4
 810a672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a676:	e0b8      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a678:	2308      	movs	r3, #8
 810a67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a67e:	e0b4      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a680:	2310      	movs	r3, #16
 810a682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a686:	e0b0      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a688:	2320      	movs	r3, #32
 810a68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a68e:	e0ac      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a690:	2340      	movs	r3, #64	@ 0x40
 810a692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a696:	e0a8      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a698:	2380      	movs	r3, #128	@ 0x80
 810a69a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a69e:	e0a4      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6a0:	697b      	ldr	r3, [r7, #20]
 810a6a2:	681b      	ldr	r3, [r3, #0]
 810a6a4:	4a8f      	ldr	r2, [pc, #572]	@ (810a8e4 <UART_SetConfig+0x6a0>)
 810a6a6:	4293      	cmp	r3, r2
 810a6a8:	d130      	bne.n	810a70c <UART_SetConfig+0x4c8>
 810a6aa:	4b8d      	ldr	r3, [pc, #564]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a6ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a6ae:	f003 0307 	and.w	r3, r3, #7
 810a6b2:	2b05      	cmp	r3, #5
 810a6b4:	d826      	bhi.n	810a704 <UART_SetConfig+0x4c0>
 810a6b6:	a201      	add	r2, pc, #4	@ (adr r2, 810a6bc <UART_SetConfig+0x478>)
 810a6b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a6bc:	0810a6d5 	.word	0x0810a6d5
 810a6c0:	0810a6dd 	.word	0x0810a6dd
 810a6c4:	0810a6e5 	.word	0x0810a6e5
 810a6c8:	0810a6ed 	.word	0x0810a6ed
 810a6cc:	0810a6f5 	.word	0x0810a6f5
 810a6d0:	0810a6fd 	.word	0x0810a6fd
 810a6d4:	2300      	movs	r3, #0
 810a6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6da:	e086      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6dc:	2304      	movs	r3, #4
 810a6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6e2:	e082      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6e4:	2308      	movs	r3, #8
 810a6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6ea:	e07e      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6ec:	2310      	movs	r3, #16
 810a6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6f2:	e07a      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6f4:	2320      	movs	r3, #32
 810a6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a6fa:	e076      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a6fc:	2340      	movs	r3, #64	@ 0x40
 810a6fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a702:	e072      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a704:	2380      	movs	r3, #128	@ 0x80
 810a706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a70a:	e06e      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a70c:	697b      	ldr	r3, [r7, #20]
 810a70e:	681b      	ldr	r3, [r3, #0]
 810a710:	4a75      	ldr	r2, [pc, #468]	@ (810a8e8 <UART_SetConfig+0x6a4>)
 810a712:	4293      	cmp	r3, r2
 810a714:	d130      	bne.n	810a778 <UART_SetConfig+0x534>
 810a716:	4b72      	ldr	r3, [pc, #456]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810a71a:	f003 0307 	and.w	r3, r3, #7
 810a71e:	2b05      	cmp	r3, #5
 810a720:	d826      	bhi.n	810a770 <UART_SetConfig+0x52c>
 810a722:	a201      	add	r2, pc, #4	@ (adr r2, 810a728 <UART_SetConfig+0x4e4>)
 810a724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a728:	0810a741 	.word	0x0810a741
 810a72c:	0810a749 	.word	0x0810a749
 810a730:	0810a751 	.word	0x0810a751
 810a734:	0810a759 	.word	0x0810a759
 810a738:	0810a761 	.word	0x0810a761
 810a73c:	0810a769 	.word	0x0810a769
 810a740:	2300      	movs	r3, #0
 810a742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a746:	e050      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a748:	2304      	movs	r3, #4
 810a74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a74e:	e04c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a750:	2308      	movs	r3, #8
 810a752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a756:	e048      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a758:	2310      	movs	r3, #16
 810a75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a75e:	e044      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a760:	2320      	movs	r3, #32
 810a762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a766:	e040      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a768:	2340      	movs	r3, #64	@ 0x40
 810a76a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a76e:	e03c      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a770:	2380      	movs	r3, #128	@ 0x80
 810a772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a776:	e038      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a778:	697b      	ldr	r3, [r7, #20]
 810a77a:	681b      	ldr	r3, [r3, #0]
 810a77c:	4a5b      	ldr	r2, [pc, #364]	@ (810a8ec <UART_SetConfig+0x6a8>)
 810a77e:	4293      	cmp	r3, r2
 810a780:	d130      	bne.n	810a7e4 <UART_SetConfig+0x5a0>
 810a782:	4b57      	ldr	r3, [pc, #348]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810a786:	f003 0307 	and.w	r3, r3, #7
 810a78a:	2b05      	cmp	r3, #5
 810a78c:	d826      	bhi.n	810a7dc <UART_SetConfig+0x598>
 810a78e:	a201      	add	r2, pc, #4	@ (adr r2, 810a794 <UART_SetConfig+0x550>)
 810a790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a794:	0810a7ad 	.word	0x0810a7ad
 810a798:	0810a7b5 	.word	0x0810a7b5
 810a79c:	0810a7bd 	.word	0x0810a7bd
 810a7a0:	0810a7c5 	.word	0x0810a7c5
 810a7a4:	0810a7cd 	.word	0x0810a7cd
 810a7a8:	0810a7d5 	.word	0x0810a7d5
 810a7ac:	2302      	movs	r3, #2
 810a7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7b2:	e01a      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7b4:	2304      	movs	r3, #4
 810a7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ba:	e016      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7bc:	2308      	movs	r3, #8
 810a7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7c2:	e012      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7c4:	2310      	movs	r3, #16
 810a7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7ca:	e00e      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7cc:	2320      	movs	r3, #32
 810a7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7d2:	e00a      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7d4:	2340      	movs	r3, #64	@ 0x40
 810a7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7da:	e006      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7dc:	2380      	movs	r3, #128	@ 0x80
 810a7de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810a7e2:	e002      	b.n	810a7ea <UART_SetConfig+0x5a6>
 810a7e4:	2380      	movs	r3, #128	@ 0x80
 810a7e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 810a7ea:	697b      	ldr	r3, [r7, #20]
 810a7ec:	681b      	ldr	r3, [r3, #0]
 810a7ee:	4a3f      	ldr	r2, [pc, #252]	@ (810a8ec <UART_SetConfig+0x6a8>)
 810a7f0:	4293      	cmp	r3, r2
 810a7f2:	f040 80f8 	bne.w	810a9e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 810a7f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a7fa:	2b20      	cmp	r3, #32
 810a7fc:	dc46      	bgt.n	810a88c <UART_SetConfig+0x648>
 810a7fe:	2b02      	cmp	r3, #2
 810a800:	f2c0 8082 	blt.w	810a908 <UART_SetConfig+0x6c4>
 810a804:	3b02      	subs	r3, #2
 810a806:	2b1e      	cmp	r3, #30
 810a808:	d87e      	bhi.n	810a908 <UART_SetConfig+0x6c4>
 810a80a:	a201      	add	r2, pc, #4	@ (adr r2, 810a810 <UART_SetConfig+0x5cc>)
 810a80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810a810:	0810a893 	.word	0x0810a893
 810a814:	0810a909 	.word	0x0810a909
 810a818:	0810a89b 	.word	0x0810a89b
 810a81c:	0810a909 	.word	0x0810a909
 810a820:	0810a909 	.word	0x0810a909
 810a824:	0810a909 	.word	0x0810a909
 810a828:	0810a8ab 	.word	0x0810a8ab
 810a82c:	0810a909 	.word	0x0810a909
 810a830:	0810a909 	.word	0x0810a909
 810a834:	0810a909 	.word	0x0810a909
 810a838:	0810a909 	.word	0x0810a909
 810a83c:	0810a909 	.word	0x0810a909
 810a840:	0810a909 	.word	0x0810a909
 810a844:	0810a909 	.word	0x0810a909
 810a848:	0810a8bb 	.word	0x0810a8bb
 810a84c:	0810a909 	.word	0x0810a909
 810a850:	0810a909 	.word	0x0810a909
 810a854:	0810a909 	.word	0x0810a909
 810a858:	0810a909 	.word	0x0810a909
 810a85c:	0810a909 	.word	0x0810a909
 810a860:	0810a909 	.word	0x0810a909
 810a864:	0810a909 	.word	0x0810a909
 810a868:	0810a909 	.word	0x0810a909
 810a86c:	0810a909 	.word	0x0810a909
 810a870:	0810a909 	.word	0x0810a909
 810a874:	0810a909 	.word	0x0810a909
 810a878:	0810a909 	.word	0x0810a909
 810a87c:	0810a909 	.word	0x0810a909
 810a880:	0810a909 	.word	0x0810a909
 810a884:	0810a909 	.word	0x0810a909
 810a888:	0810a8fb 	.word	0x0810a8fb
 810a88c:	2b40      	cmp	r3, #64	@ 0x40
 810a88e:	d037      	beq.n	810a900 <UART_SetConfig+0x6bc>
 810a890:	e03a      	b.n	810a908 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 810a892:	f7fc fd4f 	bl	8107334 <HAL_RCCEx_GetD3PCLK1Freq>
 810a896:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810a898:	e03c      	b.n	810a914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810a89a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810a89e:	4618      	mov	r0, r3
 810a8a0:	f7fc fd5e 	bl	8107360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810a8a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810a8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8a8:	e034      	b.n	810a914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810a8aa:	f107 0318 	add.w	r3, r7, #24
 810a8ae:	4618      	mov	r0, r3
 810a8b0:	f7fc feaa 	bl	8107608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810a8b4:	69fb      	ldr	r3, [r7, #28]
 810a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8b8:	e02c      	b.n	810a914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810a8ba:	4b09      	ldr	r3, [pc, #36]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a8bc:	681b      	ldr	r3, [r3, #0]
 810a8be:	f003 0320 	and.w	r3, r3, #32
 810a8c2:	2b00      	cmp	r3, #0
 810a8c4:	d016      	beq.n	810a8f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810a8c6:	4b06      	ldr	r3, [pc, #24]	@ (810a8e0 <UART_SetConfig+0x69c>)
 810a8c8:	681b      	ldr	r3, [r3, #0]
 810a8ca:	08db      	lsrs	r3, r3, #3
 810a8cc:	f003 0303 	and.w	r3, r3, #3
 810a8d0:	4a07      	ldr	r2, [pc, #28]	@ (810a8f0 <UART_SetConfig+0x6ac>)
 810a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 810a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810a8d8:	e01c      	b.n	810a914 <UART_SetConfig+0x6d0>
 810a8da:	bf00      	nop
 810a8dc:	40011400 	.word	0x40011400
 810a8e0:	58024400 	.word	0x58024400
 810a8e4:	40007800 	.word	0x40007800
 810a8e8:	40007c00 	.word	0x40007c00
 810a8ec:	58000c00 	.word	0x58000c00
 810a8f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 810a8f4:	4b9d      	ldr	r3, [pc, #628]	@ (810ab6c <UART_SetConfig+0x928>)
 810a8f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8f8:	e00c      	b.n	810a914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810a8fa:	4b9d      	ldr	r3, [pc, #628]	@ (810ab70 <UART_SetConfig+0x92c>)
 810a8fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a8fe:	e009      	b.n	810a914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810a900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810a906:	e005      	b.n	810a914 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 810a908:	2300      	movs	r3, #0
 810a90a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810a90c:	2301      	movs	r3, #1
 810a90e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810a912:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 810a914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a916:	2b00      	cmp	r3, #0
 810a918:	f000 81de 	beq.w	810acd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810a91c:	697b      	ldr	r3, [r7, #20]
 810a91e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a920:	4a94      	ldr	r2, [pc, #592]	@ (810ab74 <UART_SetConfig+0x930>)
 810a922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a926:	461a      	mov	r2, r3
 810a928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a92a:	fbb3 f3f2 	udiv	r3, r3, r2
 810a92e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a930:	697b      	ldr	r3, [r7, #20]
 810a932:	685a      	ldr	r2, [r3, #4]
 810a934:	4613      	mov	r3, r2
 810a936:	005b      	lsls	r3, r3, #1
 810a938:	4413      	add	r3, r2
 810a93a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a93c:	429a      	cmp	r2, r3
 810a93e:	d305      	bcc.n	810a94c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 810a940:	697b      	ldr	r3, [r7, #20]
 810a942:	685b      	ldr	r3, [r3, #4]
 810a944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 810a946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810a948:	429a      	cmp	r2, r3
 810a94a:	d903      	bls.n	810a954 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810a94c:	2301      	movs	r3, #1
 810a94e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a952:	e1c1      	b.n	810acd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810a954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810a956:	2200      	movs	r2, #0
 810a958:	60bb      	str	r3, [r7, #8]
 810a95a:	60fa      	str	r2, [r7, #12]
 810a95c:	697b      	ldr	r3, [r7, #20]
 810a95e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810a960:	4a84      	ldr	r2, [pc, #528]	@ (810ab74 <UART_SetConfig+0x930>)
 810a962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810a966:	b29b      	uxth	r3, r3
 810a968:	2200      	movs	r2, #0
 810a96a:	603b      	str	r3, [r7, #0]
 810a96c:	607a      	str	r2, [r7, #4]
 810a96e:	e9d7 2300 	ldrd	r2, r3, [r7]
 810a972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 810a976:	f7f5 fd0b 	bl	8100390 <__aeabi_uldivmod>
 810a97a:	4602      	mov	r2, r0
 810a97c:	460b      	mov	r3, r1
 810a97e:	4610      	mov	r0, r2
 810a980:	4619      	mov	r1, r3
 810a982:	f04f 0200 	mov.w	r2, #0
 810a986:	f04f 0300 	mov.w	r3, #0
 810a98a:	020b      	lsls	r3, r1, #8
 810a98c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 810a990:	0202      	lsls	r2, r0, #8
 810a992:	6979      	ldr	r1, [r7, #20]
 810a994:	6849      	ldr	r1, [r1, #4]
 810a996:	0849      	lsrs	r1, r1, #1
 810a998:	2000      	movs	r0, #0
 810a99a:	460c      	mov	r4, r1
 810a99c:	4605      	mov	r5, r0
 810a99e:	eb12 0804 	adds.w	r8, r2, r4
 810a9a2:	eb43 0905 	adc.w	r9, r3, r5
 810a9a6:	697b      	ldr	r3, [r7, #20]
 810a9a8:	685b      	ldr	r3, [r3, #4]
 810a9aa:	2200      	movs	r2, #0
 810a9ac:	469a      	mov	sl, r3
 810a9ae:	4693      	mov	fp, r2
 810a9b0:	4652      	mov	r2, sl
 810a9b2:	465b      	mov	r3, fp
 810a9b4:	4640      	mov	r0, r8
 810a9b6:	4649      	mov	r1, r9
 810a9b8:	f7f5 fcea 	bl	8100390 <__aeabi_uldivmod>
 810a9bc:	4602      	mov	r2, r0
 810a9be:	460b      	mov	r3, r1
 810a9c0:	4613      	mov	r3, r2
 810a9c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 810a9c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a9c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810a9ca:	d308      	bcc.n	810a9de <UART_SetConfig+0x79a>
 810a9cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810a9ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810a9d2:	d204      	bcs.n	810a9de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 810a9d4:	697b      	ldr	r3, [r7, #20]
 810a9d6:	681b      	ldr	r3, [r3, #0]
 810a9d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 810a9da:	60da      	str	r2, [r3, #12]
 810a9dc:	e17c      	b.n	810acd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 810a9de:	2301      	movs	r3, #1
 810a9e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810a9e4:	e178      	b.n	810acd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 810a9e6:	697b      	ldr	r3, [r7, #20]
 810a9e8:	69db      	ldr	r3, [r3, #28]
 810a9ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a9ee:	f040 80c5 	bne.w	810ab7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 810a9f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810a9f6:	2b20      	cmp	r3, #32
 810a9f8:	dc48      	bgt.n	810aa8c <UART_SetConfig+0x848>
 810a9fa:	2b00      	cmp	r3, #0
 810a9fc:	db7b      	blt.n	810aaf6 <UART_SetConfig+0x8b2>
 810a9fe:	2b20      	cmp	r3, #32
 810aa00:	d879      	bhi.n	810aaf6 <UART_SetConfig+0x8b2>
 810aa02:	a201      	add	r2, pc, #4	@ (adr r2, 810aa08 <UART_SetConfig+0x7c4>)
 810aa04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810aa08:	0810aa93 	.word	0x0810aa93
 810aa0c:	0810aa9b 	.word	0x0810aa9b
 810aa10:	0810aaf7 	.word	0x0810aaf7
 810aa14:	0810aaf7 	.word	0x0810aaf7
 810aa18:	0810aaa3 	.word	0x0810aaa3
 810aa1c:	0810aaf7 	.word	0x0810aaf7
 810aa20:	0810aaf7 	.word	0x0810aaf7
 810aa24:	0810aaf7 	.word	0x0810aaf7
 810aa28:	0810aab3 	.word	0x0810aab3
 810aa2c:	0810aaf7 	.word	0x0810aaf7
 810aa30:	0810aaf7 	.word	0x0810aaf7
 810aa34:	0810aaf7 	.word	0x0810aaf7
 810aa38:	0810aaf7 	.word	0x0810aaf7
 810aa3c:	0810aaf7 	.word	0x0810aaf7
 810aa40:	0810aaf7 	.word	0x0810aaf7
 810aa44:	0810aaf7 	.word	0x0810aaf7
 810aa48:	0810aac3 	.word	0x0810aac3
 810aa4c:	0810aaf7 	.word	0x0810aaf7
 810aa50:	0810aaf7 	.word	0x0810aaf7
 810aa54:	0810aaf7 	.word	0x0810aaf7
 810aa58:	0810aaf7 	.word	0x0810aaf7
 810aa5c:	0810aaf7 	.word	0x0810aaf7
 810aa60:	0810aaf7 	.word	0x0810aaf7
 810aa64:	0810aaf7 	.word	0x0810aaf7
 810aa68:	0810aaf7 	.word	0x0810aaf7
 810aa6c:	0810aaf7 	.word	0x0810aaf7
 810aa70:	0810aaf7 	.word	0x0810aaf7
 810aa74:	0810aaf7 	.word	0x0810aaf7
 810aa78:	0810aaf7 	.word	0x0810aaf7
 810aa7c:	0810aaf7 	.word	0x0810aaf7
 810aa80:	0810aaf7 	.word	0x0810aaf7
 810aa84:	0810aaf7 	.word	0x0810aaf7
 810aa88:	0810aae9 	.word	0x0810aae9
 810aa8c:	2b40      	cmp	r3, #64	@ 0x40
 810aa8e:	d02e      	beq.n	810aaee <UART_SetConfig+0x8aa>
 810aa90:	e031      	b.n	810aaf6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810aa92:	f7fb f997 	bl	8105dc4 <HAL_RCC_GetPCLK1Freq>
 810aa96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aa98:	e033      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810aa9a:	f7fb f9a9 	bl	8105df0 <HAL_RCC_GetPCLK2Freq>
 810aa9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810aaa0:	e02f      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810aaa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810aaa6:	4618      	mov	r0, r3
 810aaa8:	f7fc fc5a 	bl	8107360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810aaae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aab0:	e027      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810aab2:	f107 0318 	add.w	r3, r7, #24
 810aab6:	4618      	mov	r0, r3
 810aab8:	f7fc fda6 	bl	8107608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810aabc:	69fb      	ldr	r3, [r7, #28]
 810aabe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aac0:	e01f      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810aac2:	4b2d      	ldr	r3, [pc, #180]	@ (810ab78 <UART_SetConfig+0x934>)
 810aac4:	681b      	ldr	r3, [r3, #0]
 810aac6:	f003 0320 	and.w	r3, r3, #32
 810aaca:	2b00      	cmp	r3, #0
 810aacc:	d009      	beq.n	810aae2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810aace:	4b2a      	ldr	r3, [pc, #168]	@ (810ab78 <UART_SetConfig+0x934>)
 810aad0:	681b      	ldr	r3, [r3, #0]
 810aad2:	08db      	lsrs	r3, r3, #3
 810aad4:	f003 0303 	and.w	r3, r3, #3
 810aad8:	4a24      	ldr	r2, [pc, #144]	@ (810ab6c <UART_SetConfig+0x928>)
 810aada:	fa22 f303 	lsr.w	r3, r2, r3
 810aade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810aae0:	e00f      	b.n	810ab02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810aae2:	4b22      	ldr	r3, [pc, #136]	@ (810ab6c <UART_SetConfig+0x928>)
 810aae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aae6:	e00c      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810aae8:	4b21      	ldr	r3, [pc, #132]	@ (810ab70 <UART_SetConfig+0x92c>)
 810aaea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aaec:	e009      	b.n	810ab02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810aaee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810aaf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810aaf4:	e005      	b.n	810ab02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 810aaf6:	2300      	movs	r3, #0
 810aaf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810aafa:	2301      	movs	r3, #1
 810aafc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ab00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810ab02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab04:	2b00      	cmp	r3, #0
 810ab06:	f000 80e7 	beq.w	810acd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ab0a:	697b      	ldr	r3, [r7, #20]
 810ab0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ab0e:	4a19      	ldr	r2, [pc, #100]	@ (810ab74 <UART_SetConfig+0x930>)
 810ab10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ab14:	461a      	mov	r2, r3
 810ab16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ab18:	fbb3 f3f2 	udiv	r3, r3, r2
 810ab1c:	005a      	lsls	r2, r3, #1
 810ab1e:	697b      	ldr	r3, [r7, #20]
 810ab20:	685b      	ldr	r3, [r3, #4]
 810ab22:	085b      	lsrs	r3, r3, #1
 810ab24:	441a      	add	r2, r3
 810ab26:	697b      	ldr	r3, [r7, #20]
 810ab28:	685b      	ldr	r3, [r3, #4]
 810ab2a:	fbb2 f3f3 	udiv	r3, r2, r3
 810ab2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810ab30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab32:	2b0f      	cmp	r3, #15
 810ab34:	d916      	bls.n	810ab64 <UART_SetConfig+0x920>
 810ab36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810ab3c:	d212      	bcs.n	810ab64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810ab3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab40:	b29b      	uxth	r3, r3
 810ab42:	f023 030f 	bic.w	r3, r3, #15
 810ab46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810ab48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ab4a:	085b      	lsrs	r3, r3, #1
 810ab4c:	b29b      	uxth	r3, r3
 810ab4e:	f003 0307 	and.w	r3, r3, #7
 810ab52:	b29a      	uxth	r2, r3
 810ab54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 810ab56:	4313      	orrs	r3, r2
 810ab58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 810ab5a:	697b      	ldr	r3, [r7, #20]
 810ab5c:	681b      	ldr	r3, [r3, #0]
 810ab5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 810ab60:	60da      	str	r2, [r3, #12]
 810ab62:	e0b9      	b.n	810acd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810ab64:	2301      	movs	r3, #1
 810ab66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 810ab6a:	e0b5      	b.n	810acd8 <UART_SetConfig+0xa94>
 810ab6c:	03d09000 	.word	0x03d09000
 810ab70:	003d0900 	.word	0x003d0900
 810ab74:	0810fe60 	.word	0x0810fe60
 810ab78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 810ab7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 810ab80:	2b20      	cmp	r3, #32
 810ab82:	dc49      	bgt.n	810ac18 <UART_SetConfig+0x9d4>
 810ab84:	2b00      	cmp	r3, #0
 810ab86:	db7c      	blt.n	810ac82 <UART_SetConfig+0xa3e>
 810ab88:	2b20      	cmp	r3, #32
 810ab8a:	d87a      	bhi.n	810ac82 <UART_SetConfig+0xa3e>
 810ab8c:	a201      	add	r2, pc, #4	@ (adr r2, 810ab94 <UART_SetConfig+0x950>)
 810ab8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810ab92:	bf00      	nop
 810ab94:	0810ac1f 	.word	0x0810ac1f
 810ab98:	0810ac27 	.word	0x0810ac27
 810ab9c:	0810ac83 	.word	0x0810ac83
 810aba0:	0810ac83 	.word	0x0810ac83
 810aba4:	0810ac2f 	.word	0x0810ac2f
 810aba8:	0810ac83 	.word	0x0810ac83
 810abac:	0810ac83 	.word	0x0810ac83
 810abb0:	0810ac83 	.word	0x0810ac83
 810abb4:	0810ac3f 	.word	0x0810ac3f
 810abb8:	0810ac83 	.word	0x0810ac83
 810abbc:	0810ac83 	.word	0x0810ac83
 810abc0:	0810ac83 	.word	0x0810ac83
 810abc4:	0810ac83 	.word	0x0810ac83
 810abc8:	0810ac83 	.word	0x0810ac83
 810abcc:	0810ac83 	.word	0x0810ac83
 810abd0:	0810ac83 	.word	0x0810ac83
 810abd4:	0810ac4f 	.word	0x0810ac4f
 810abd8:	0810ac83 	.word	0x0810ac83
 810abdc:	0810ac83 	.word	0x0810ac83
 810abe0:	0810ac83 	.word	0x0810ac83
 810abe4:	0810ac83 	.word	0x0810ac83
 810abe8:	0810ac83 	.word	0x0810ac83
 810abec:	0810ac83 	.word	0x0810ac83
 810abf0:	0810ac83 	.word	0x0810ac83
 810abf4:	0810ac83 	.word	0x0810ac83
 810abf8:	0810ac83 	.word	0x0810ac83
 810abfc:	0810ac83 	.word	0x0810ac83
 810ac00:	0810ac83 	.word	0x0810ac83
 810ac04:	0810ac83 	.word	0x0810ac83
 810ac08:	0810ac83 	.word	0x0810ac83
 810ac0c:	0810ac83 	.word	0x0810ac83
 810ac10:	0810ac83 	.word	0x0810ac83
 810ac14:	0810ac75 	.word	0x0810ac75
 810ac18:	2b40      	cmp	r3, #64	@ 0x40
 810ac1a:	d02e      	beq.n	810ac7a <UART_SetConfig+0xa36>
 810ac1c:	e031      	b.n	810ac82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810ac1e:	f7fb f8d1 	bl	8105dc4 <HAL_RCC_GetPCLK1Freq>
 810ac22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ac24:	e033      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 810ac26:	f7fb f8e3 	bl	8105df0 <HAL_RCC_GetPCLK2Freq>
 810ac2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 810ac2c:	e02f      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810ac2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810ac32:	4618      	mov	r0, r3
 810ac34:	f7fc fb94 	bl	8107360 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 810ac38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ac3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac3c:	e027      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810ac3e:	f107 0318 	add.w	r3, r7, #24
 810ac42:	4618      	mov	r0, r3
 810ac44:	f7fc fce0 	bl	8107608 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 810ac48:	69fb      	ldr	r3, [r7, #28]
 810ac4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac4c:	e01f      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810ac4e:	4b2d      	ldr	r3, [pc, #180]	@ (810ad04 <UART_SetConfig+0xac0>)
 810ac50:	681b      	ldr	r3, [r3, #0]
 810ac52:	f003 0320 	and.w	r3, r3, #32
 810ac56:	2b00      	cmp	r3, #0
 810ac58:	d009      	beq.n	810ac6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810ac5a:	4b2a      	ldr	r3, [pc, #168]	@ (810ad04 <UART_SetConfig+0xac0>)
 810ac5c:	681b      	ldr	r3, [r3, #0]
 810ac5e:	08db      	lsrs	r3, r3, #3
 810ac60:	f003 0303 	and.w	r3, r3, #3
 810ac64:	4a28      	ldr	r2, [pc, #160]	@ (810ad08 <UART_SetConfig+0xac4>)
 810ac66:	fa22 f303 	lsr.w	r3, r2, r3
 810ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810ac6c:	e00f      	b.n	810ac8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 810ac6e:	4b26      	ldr	r3, [pc, #152]	@ (810ad08 <UART_SetConfig+0xac4>)
 810ac70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac72:	e00c      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 810ac74:	4b25      	ldr	r3, [pc, #148]	@ (810ad0c <UART_SetConfig+0xac8>)
 810ac76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac78:	e009      	b.n	810ac8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810ac7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810ac7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810ac80:	e005      	b.n	810ac8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 810ac82:	2300      	movs	r3, #0
 810ac84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810ac86:	2301      	movs	r3, #1
 810ac88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 810ac8c:	bf00      	nop
    }

    if (pclk != 0U)
 810ac8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810ac90:	2b00      	cmp	r3, #0
 810ac92:	d021      	beq.n	810acd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 810ac94:	697b      	ldr	r3, [r7, #20]
 810ac96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810ac98:	4a1d      	ldr	r2, [pc, #116]	@ (810ad10 <UART_SetConfig+0xacc>)
 810ac9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 810ac9e:	461a      	mov	r2, r3
 810aca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aca2:	fbb3 f2f2 	udiv	r2, r3, r2
 810aca6:	697b      	ldr	r3, [r7, #20]
 810aca8:	685b      	ldr	r3, [r3, #4]
 810acaa:	085b      	lsrs	r3, r3, #1
 810acac:	441a      	add	r2, r3
 810acae:	697b      	ldr	r3, [r7, #20]
 810acb0:	685b      	ldr	r3, [r3, #4]
 810acb2:	fbb2 f3f3 	udiv	r3, r2, r3
 810acb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810acb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acba:	2b0f      	cmp	r3, #15
 810acbc:	d909      	bls.n	810acd2 <UART_SetConfig+0xa8e>
 810acbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810acc4:	d205      	bcs.n	810acd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 810acc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810acc8:	b29a      	uxth	r2, r3
 810acca:	697b      	ldr	r3, [r7, #20]
 810accc:	681b      	ldr	r3, [r3, #0]
 810acce:	60da      	str	r2, [r3, #12]
 810acd0:	e002      	b.n	810acd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810acd2:	2301      	movs	r3, #1
 810acd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 810acd8:	697b      	ldr	r3, [r7, #20]
 810acda:	2201      	movs	r2, #1
 810acdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 810ace0:	697b      	ldr	r3, [r7, #20]
 810ace2:	2201      	movs	r2, #1
 810ace4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 810ace8:	697b      	ldr	r3, [r7, #20]
 810acea:	2200      	movs	r2, #0
 810acec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 810acee:	697b      	ldr	r3, [r7, #20]
 810acf0:	2200      	movs	r2, #0
 810acf2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 810acf4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 810acf8:	4618      	mov	r0, r3
 810acfa:	3748      	adds	r7, #72	@ 0x48
 810acfc:	46bd      	mov	sp, r7
 810acfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810ad02:	bf00      	nop
 810ad04:	58024400 	.word	0x58024400
 810ad08:	03d09000 	.word	0x03d09000
 810ad0c:	003d0900 	.word	0x003d0900
 810ad10:	0810fe60 	.word	0x0810fe60

0810ad14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 810ad14:	b480      	push	{r7}
 810ad16:	b083      	sub	sp, #12
 810ad18:	af00      	add	r7, sp, #0
 810ad1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 810ad1c:	687b      	ldr	r3, [r7, #4]
 810ad1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad20:	f003 0308 	and.w	r3, r3, #8
 810ad24:	2b00      	cmp	r3, #0
 810ad26:	d00a      	beq.n	810ad3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 810ad28:	687b      	ldr	r3, [r7, #4]
 810ad2a:	681b      	ldr	r3, [r3, #0]
 810ad2c:	685b      	ldr	r3, [r3, #4]
 810ad2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 810ad32:	687b      	ldr	r3, [r7, #4]
 810ad34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810ad36:	687b      	ldr	r3, [r7, #4]
 810ad38:	681b      	ldr	r3, [r3, #0]
 810ad3a:	430a      	orrs	r2, r1
 810ad3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810ad3e:	687b      	ldr	r3, [r7, #4]
 810ad40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad42:	f003 0301 	and.w	r3, r3, #1
 810ad46:	2b00      	cmp	r3, #0
 810ad48:	d00a      	beq.n	810ad60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 810ad4a:	687b      	ldr	r3, [r7, #4]
 810ad4c:	681b      	ldr	r3, [r3, #0]
 810ad4e:	685b      	ldr	r3, [r3, #4]
 810ad50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 810ad54:	687b      	ldr	r3, [r7, #4]
 810ad56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810ad58:	687b      	ldr	r3, [r7, #4]
 810ad5a:	681b      	ldr	r3, [r3, #0]
 810ad5c:	430a      	orrs	r2, r1
 810ad5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 810ad60:	687b      	ldr	r3, [r7, #4]
 810ad62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad64:	f003 0302 	and.w	r3, r3, #2
 810ad68:	2b00      	cmp	r3, #0
 810ad6a:	d00a      	beq.n	810ad82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 810ad6c:	687b      	ldr	r3, [r7, #4]
 810ad6e:	681b      	ldr	r3, [r3, #0]
 810ad70:	685b      	ldr	r3, [r3, #4]
 810ad72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 810ad76:	687b      	ldr	r3, [r7, #4]
 810ad78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810ad7a:	687b      	ldr	r3, [r7, #4]
 810ad7c:	681b      	ldr	r3, [r3, #0]
 810ad7e:	430a      	orrs	r2, r1
 810ad80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 810ad82:	687b      	ldr	r3, [r7, #4]
 810ad84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ad86:	f003 0304 	and.w	r3, r3, #4
 810ad8a:	2b00      	cmp	r3, #0
 810ad8c:	d00a      	beq.n	810ada4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 810ad8e:	687b      	ldr	r3, [r7, #4]
 810ad90:	681b      	ldr	r3, [r3, #0]
 810ad92:	685b      	ldr	r3, [r3, #4]
 810ad94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 810ad98:	687b      	ldr	r3, [r7, #4]
 810ad9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810ad9c:	687b      	ldr	r3, [r7, #4]
 810ad9e:	681b      	ldr	r3, [r3, #0]
 810ada0:	430a      	orrs	r2, r1
 810ada2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 810ada4:	687b      	ldr	r3, [r7, #4]
 810ada6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ada8:	f003 0310 	and.w	r3, r3, #16
 810adac:	2b00      	cmp	r3, #0
 810adae:	d00a      	beq.n	810adc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810adb0:	687b      	ldr	r3, [r7, #4]
 810adb2:	681b      	ldr	r3, [r3, #0]
 810adb4:	689b      	ldr	r3, [r3, #8]
 810adb6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 810adba:	687b      	ldr	r3, [r7, #4]
 810adbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810adbe:	687b      	ldr	r3, [r7, #4]
 810adc0:	681b      	ldr	r3, [r3, #0]
 810adc2:	430a      	orrs	r2, r1
 810adc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 810adc6:	687b      	ldr	r3, [r7, #4]
 810adc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810adca:	f003 0320 	and.w	r3, r3, #32
 810adce:	2b00      	cmp	r3, #0
 810add0:	d00a      	beq.n	810ade8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810add2:	687b      	ldr	r3, [r7, #4]
 810add4:	681b      	ldr	r3, [r3, #0]
 810add6:	689b      	ldr	r3, [r3, #8]
 810add8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 810addc:	687b      	ldr	r3, [r7, #4]
 810adde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 810ade0:	687b      	ldr	r3, [r7, #4]
 810ade2:	681b      	ldr	r3, [r3, #0]
 810ade4:	430a      	orrs	r2, r1
 810ade6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 810ade8:	687b      	ldr	r3, [r7, #4]
 810adea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810adec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810adf0:	2b00      	cmp	r3, #0
 810adf2:	d01a      	beq.n	810ae2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 810adf4:	687b      	ldr	r3, [r7, #4]
 810adf6:	681b      	ldr	r3, [r3, #0]
 810adf8:	685b      	ldr	r3, [r3, #4]
 810adfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 810adfe:	687b      	ldr	r3, [r7, #4]
 810ae00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810ae02:	687b      	ldr	r3, [r7, #4]
 810ae04:	681b      	ldr	r3, [r3, #0]
 810ae06:	430a      	orrs	r2, r1
 810ae08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 810ae0a:	687b      	ldr	r3, [r7, #4]
 810ae0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810ae0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810ae12:	d10a      	bne.n	810ae2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 810ae14:	687b      	ldr	r3, [r7, #4]
 810ae16:	681b      	ldr	r3, [r3, #0]
 810ae18:	685b      	ldr	r3, [r3, #4]
 810ae1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 810ae1e:	687b      	ldr	r3, [r7, #4]
 810ae20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 810ae22:	687b      	ldr	r3, [r7, #4]
 810ae24:	681b      	ldr	r3, [r3, #0]
 810ae26:	430a      	orrs	r2, r1
 810ae28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 810ae2a:	687b      	ldr	r3, [r7, #4]
 810ae2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810ae2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810ae32:	2b00      	cmp	r3, #0
 810ae34:	d00a      	beq.n	810ae4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 810ae36:	687b      	ldr	r3, [r7, #4]
 810ae38:	681b      	ldr	r3, [r3, #0]
 810ae3a:	685b      	ldr	r3, [r3, #4]
 810ae3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 810ae40:	687b      	ldr	r3, [r7, #4]
 810ae42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810ae44:	687b      	ldr	r3, [r7, #4]
 810ae46:	681b      	ldr	r3, [r3, #0]
 810ae48:	430a      	orrs	r2, r1
 810ae4a:	605a      	str	r2, [r3, #4]
  }
}
 810ae4c:	bf00      	nop
 810ae4e:	370c      	adds	r7, #12
 810ae50:	46bd      	mov	sp, r7
 810ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ae56:	4770      	bx	lr

0810ae58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 810ae58:	b580      	push	{r7, lr}
 810ae5a:	b098      	sub	sp, #96	@ 0x60
 810ae5c:	af02      	add	r7, sp, #8
 810ae5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810ae60:	687b      	ldr	r3, [r7, #4]
 810ae62:	2200      	movs	r2, #0
 810ae64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 810ae68:	f7f7 fc70 	bl	810274c <HAL_GetTick>
 810ae6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 810ae6e:	687b      	ldr	r3, [r7, #4]
 810ae70:	681b      	ldr	r3, [r3, #0]
 810ae72:	681b      	ldr	r3, [r3, #0]
 810ae74:	f003 0308 	and.w	r3, r3, #8
 810ae78:	2b08      	cmp	r3, #8
 810ae7a:	d12f      	bne.n	810aedc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810ae7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810ae80:	9300      	str	r3, [sp, #0]
 810ae82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810ae84:	2200      	movs	r2, #0
 810ae86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 810ae8a:	6878      	ldr	r0, [r7, #4]
 810ae8c:	f000 f88e 	bl	810afac <UART_WaitOnFlagUntilTimeout>
 810ae90:	4603      	mov	r3, r0
 810ae92:	2b00      	cmp	r3, #0
 810ae94:	d022      	beq.n	810aedc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 810ae96:	687b      	ldr	r3, [r7, #4]
 810ae98:	681b      	ldr	r3, [r3, #0]
 810ae9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810ae9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810ae9e:	e853 3f00 	ldrex	r3, [r3]
 810aea2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810aea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810aea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 810aeaa:	653b      	str	r3, [r7, #80]	@ 0x50
 810aeac:	687b      	ldr	r3, [r7, #4]
 810aeae:	681b      	ldr	r3, [r3, #0]
 810aeb0:	461a      	mov	r2, r3
 810aeb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810aeb4:	647b      	str	r3, [r7, #68]	@ 0x44
 810aeb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810aeb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810aeba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810aebc:	e841 2300 	strex	r3, r2, [r1]
 810aec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810aec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810aec4:	2b00      	cmp	r3, #0
 810aec6:	d1e6      	bne.n	810ae96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 810aec8:	687b      	ldr	r3, [r7, #4]
 810aeca:	2220      	movs	r2, #32
 810aecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 810aed0:	687b      	ldr	r3, [r7, #4]
 810aed2:	2200      	movs	r2, #0
 810aed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810aed8:	2303      	movs	r3, #3
 810aeda:	e063      	b.n	810afa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 810aedc:	687b      	ldr	r3, [r7, #4]
 810aede:	681b      	ldr	r3, [r3, #0]
 810aee0:	681b      	ldr	r3, [r3, #0]
 810aee2:	f003 0304 	and.w	r3, r3, #4
 810aee6:	2b04      	cmp	r3, #4
 810aee8:	d149      	bne.n	810af7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 810aeea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 810aeee:	9300      	str	r3, [sp, #0]
 810aef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810aef2:	2200      	movs	r2, #0
 810aef4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 810aef8:	6878      	ldr	r0, [r7, #4]
 810aefa:	f000 f857 	bl	810afac <UART_WaitOnFlagUntilTimeout>
 810aefe:	4603      	mov	r3, r0
 810af00:	2b00      	cmp	r3, #0
 810af02:	d03c      	beq.n	810af7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810af04:	687b      	ldr	r3, [r7, #4]
 810af06:	681b      	ldr	r3, [r3, #0]
 810af08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810af0c:	e853 3f00 	ldrex	r3, [r3]
 810af10:	623b      	str	r3, [r7, #32]
   return(result);
 810af12:	6a3b      	ldr	r3, [r7, #32]
 810af14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810af18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810af1a:	687b      	ldr	r3, [r7, #4]
 810af1c:	681b      	ldr	r3, [r3, #0]
 810af1e:	461a      	mov	r2, r3
 810af20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810af22:	633b      	str	r3, [r7, #48]	@ 0x30
 810af24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810af28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810af2a:	e841 2300 	strex	r3, r2, [r1]
 810af2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810af30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810af32:	2b00      	cmp	r3, #0
 810af34:	d1e6      	bne.n	810af04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810af36:	687b      	ldr	r3, [r7, #4]
 810af38:	681b      	ldr	r3, [r3, #0]
 810af3a:	3308      	adds	r3, #8
 810af3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810af3e:	693b      	ldr	r3, [r7, #16]
 810af40:	e853 3f00 	ldrex	r3, [r3]
 810af44:	60fb      	str	r3, [r7, #12]
   return(result);
 810af46:	68fb      	ldr	r3, [r7, #12]
 810af48:	f023 0301 	bic.w	r3, r3, #1
 810af4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 810af4e:	687b      	ldr	r3, [r7, #4]
 810af50:	681b      	ldr	r3, [r3, #0]
 810af52:	3308      	adds	r3, #8
 810af54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810af56:	61fa      	str	r2, [r7, #28]
 810af58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810af5a:	69b9      	ldr	r1, [r7, #24]
 810af5c:	69fa      	ldr	r2, [r7, #28]
 810af5e:	e841 2300 	strex	r3, r2, [r1]
 810af62:	617b      	str	r3, [r7, #20]
   return(result);
 810af64:	697b      	ldr	r3, [r7, #20]
 810af66:	2b00      	cmp	r3, #0
 810af68:	d1e5      	bne.n	810af36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 810af6a:	687b      	ldr	r3, [r7, #4]
 810af6c:	2220      	movs	r2, #32
 810af6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 810af72:	687b      	ldr	r3, [r7, #4]
 810af74:	2200      	movs	r2, #0
 810af76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 810af7a:	2303      	movs	r3, #3
 810af7c:	e012      	b.n	810afa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 810af7e:	687b      	ldr	r3, [r7, #4]
 810af80:	2220      	movs	r2, #32
 810af82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 810af86:	687b      	ldr	r3, [r7, #4]
 810af88:	2220      	movs	r2, #32
 810af8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810af8e:	687b      	ldr	r3, [r7, #4]
 810af90:	2200      	movs	r2, #0
 810af92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810af94:	687b      	ldr	r3, [r7, #4]
 810af96:	2200      	movs	r2, #0
 810af98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 810af9a:	687b      	ldr	r3, [r7, #4]
 810af9c:	2200      	movs	r2, #0
 810af9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810afa2:	2300      	movs	r3, #0
}
 810afa4:	4618      	mov	r0, r3
 810afa6:	3758      	adds	r7, #88	@ 0x58
 810afa8:	46bd      	mov	sp, r7
 810afaa:	bd80      	pop	{r7, pc}

0810afac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 810afac:	b580      	push	{r7, lr}
 810afae:	b084      	sub	sp, #16
 810afb0:	af00      	add	r7, sp, #0
 810afb2:	60f8      	str	r0, [r7, #12]
 810afb4:	60b9      	str	r1, [r7, #8]
 810afb6:	603b      	str	r3, [r7, #0]
 810afb8:	4613      	mov	r3, r2
 810afba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810afbc:	e04f      	b.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810afbe:	69bb      	ldr	r3, [r7, #24]
 810afc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 810afc4:	d04b      	beq.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810afc6:	f7f7 fbc1 	bl	810274c <HAL_GetTick>
 810afca:	4602      	mov	r2, r0
 810afcc:	683b      	ldr	r3, [r7, #0]
 810afce:	1ad3      	subs	r3, r2, r3
 810afd0:	69ba      	ldr	r2, [r7, #24]
 810afd2:	429a      	cmp	r2, r3
 810afd4:	d302      	bcc.n	810afdc <UART_WaitOnFlagUntilTimeout+0x30>
 810afd6:	69bb      	ldr	r3, [r7, #24]
 810afd8:	2b00      	cmp	r3, #0
 810afda:	d101      	bne.n	810afe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 810afdc:	2303      	movs	r3, #3
 810afde:	e04e      	b.n	810b07e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810afe0:	68fb      	ldr	r3, [r7, #12]
 810afe2:	681b      	ldr	r3, [r3, #0]
 810afe4:	681b      	ldr	r3, [r3, #0]
 810afe6:	f003 0304 	and.w	r3, r3, #4
 810afea:	2b00      	cmp	r3, #0
 810afec:	d037      	beq.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
 810afee:	68bb      	ldr	r3, [r7, #8]
 810aff0:	2b80      	cmp	r3, #128	@ 0x80
 810aff2:	d034      	beq.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
 810aff4:	68bb      	ldr	r3, [r7, #8]
 810aff6:	2b40      	cmp	r3, #64	@ 0x40
 810aff8:	d031      	beq.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810affa:	68fb      	ldr	r3, [r7, #12]
 810affc:	681b      	ldr	r3, [r3, #0]
 810affe:	69db      	ldr	r3, [r3, #28]
 810b000:	f003 0308 	and.w	r3, r3, #8
 810b004:	2b08      	cmp	r3, #8
 810b006:	d110      	bne.n	810b02a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810b008:	68fb      	ldr	r3, [r7, #12]
 810b00a:	681b      	ldr	r3, [r3, #0]
 810b00c:	2208      	movs	r2, #8
 810b00e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b010:	68f8      	ldr	r0, [r7, #12]
 810b012:	f000 f920 	bl	810b256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810b016:	68fb      	ldr	r3, [r7, #12]
 810b018:	2208      	movs	r2, #8
 810b01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b01e:	68fb      	ldr	r3, [r7, #12]
 810b020:	2200      	movs	r2, #0
 810b022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810b026:	2301      	movs	r3, #1
 810b028:	e029      	b.n	810b07e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810b02a:	68fb      	ldr	r3, [r7, #12]
 810b02c:	681b      	ldr	r3, [r3, #0]
 810b02e:	69db      	ldr	r3, [r3, #28]
 810b030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 810b034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810b038:	d111      	bne.n	810b05e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810b03a:	68fb      	ldr	r3, [r7, #12]
 810b03c:	681b      	ldr	r3, [r3, #0]
 810b03e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 810b042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810b044:	68f8      	ldr	r0, [r7, #12]
 810b046:	f000 f906 	bl	810b256 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810b04a:	68fb      	ldr	r3, [r7, #12]
 810b04c:	2220      	movs	r2, #32
 810b04e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810b052:	68fb      	ldr	r3, [r7, #12]
 810b054:	2200      	movs	r2, #0
 810b056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810b05a:	2303      	movs	r3, #3
 810b05c:	e00f      	b.n	810b07e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810b05e:	68fb      	ldr	r3, [r7, #12]
 810b060:	681b      	ldr	r3, [r3, #0]
 810b062:	69da      	ldr	r2, [r3, #28]
 810b064:	68bb      	ldr	r3, [r7, #8]
 810b066:	4013      	ands	r3, r2
 810b068:	68ba      	ldr	r2, [r7, #8]
 810b06a:	429a      	cmp	r2, r3
 810b06c:	bf0c      	ite	eq
 810b06e:	2301      	moveq	r3, #1
 810b070:	2300      	movne	r3, #0
 810b072:	b2db      	uxtb	r3, r3
 810b074:	461a      	mov	r2, r3
 810b076:	79fb      	ldrb	r3, [r7, #7]
 810b078:	429a      	cmp	r2, r3
 810b07a:	d0a0      	beq.n	810afbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810b07c:	2300      	movs	r3, #0
}
 810b07e:	4618      	mov	r0, r3
 810b080:	3710      	adds	r7, #16
 810b082:	46bd      	mov	sp, r7
 810b084:	bd80      	pop	{r7, pc}
	...

0810b088 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b088:	b580      	push	{r7, lr}
 810b08a:	b096      	sub	sp, #88	@ 0x58
 810b08c:	af00      	add	r7, sp, #0
 810b08e:	60f8      	str	r0, [r7, #12]
 810b090:	60b9      	str	r1, [r7, #8]
 810b092:	4613      	mov	r3, r2
 810b094:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 810b096:	68fb      	ldr	r3, [r7, #12]
 810b098:	68ba      	ldr	r2, [r7, #8]
 810b09a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 810b09c:	68fb      	ldr	r3, [r7, #12]
 810b09e:	88fa      	ldrh	r2, [r7, #6]
 810b0a0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b0a4:	68fb      	ldr	r3, [r7, #12]
 810b0a6:	2200      	movs	r2, #0
 810b0a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 810b0ac:	68fb      	ldr	r3, [r7, #12]
 810b0ae:	2222      	movs	r2, #34	@ 0x22
 810b0b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 810b0b4:	68fb      	ldr	r3, [r7, #12]
 810b0b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b0ba:	2b00      	cmp	r3, #0
 810b0bc:	d02d      	beq.n	810b11a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 810b0be:	68fb      	ldr	r3, [r7, #12]
 810b0c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b0c4:	4a40      	ldr	r2, [pc, #256]	@ (810b1c8 <UART_Start_Receive_DMA+0x140>)
 810b0c6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 810b0c8:	68fb      	ldr	r3, [r7, #12]
 810b0ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b0ce:	4a3f      	ldr	r2, [pc, #252]	@ (810b1cc <UART_Start_Receive_DMA+0x144>)
 810b0d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 810b0d2:	68fb      	ldr	r3, [r7, #12]
 810b0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b0d8:	4a3d      	ldr	r2, [pc, #244]	@ (810b1d0 <UART_Start_Receive_DMA+0x148>)
 810b0da:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 810b0dc:	68fb      	ldr	r3, [r7, #12]
 810b0de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810b0e2:	2200      	movs	r2, #0
 810b0e4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 810b0e6:	68fb      	ldr	r3, [r7, #12]
 810b0e8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 810b0ec:	68fb      	ldr	r3, [r7, #12]
 810b0ee:	681b      	ldr	r3, [r3, #0]
 810b0f0:	3324      	adds	r3, #36	@ 0x24
 810b0f2:	4619      	mov	r1, r3
 810b0f4:	68fb      	ldr	r3, [r7, #12]
 810b0f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810b0f8:	461a      	mov	r2, r3
 810b0fa:	88fb      	ldrh	r3, [r7, #6]
 810b0fc:	f7f7 ff80 	bl	8103000 <HAL_DMA_Start_IT>
 810b100:	4603      	mov	r3, r0
 810b102:	2b00      	cmp	r3, #0
 810b104:	d009      	beq.n	810b11a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 810b106:	68fb      	ldr	r3, [r7, #12]
 810b108:	2210      	movs	r2, #16
 810b10a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 810b10e:	68fb      	ldr	r3, [r7, #12]
 810b110:	2220      	movs	r2, #32
 810b112:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 810b116:	2301      	movs	r3, #1
 810b118:	e051      	b.n	810b1be <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 810b11a:	68fb      	ldr	r3, [r7, #12]
 810b11c:	691b      	ldr	r3, [r3, #16]
 810b11e:	2b00      	cmp	r3, #0
 810b120:	d018      	beq.n	810b154 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b122:	68fb      	ldr	r3, [r7, #12]
 810b124:	681b      	ldr	r3, [r3, #0]
 810b126:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b128:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b12a:	e853 3f00 	ldrex	r3, [r3]
 810b12e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b130:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b132:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810b136:	657b      	str	r3, [r7, #84]	@ 0x54
 810b138:	68fb      	ldr	r3, [r7, #12]
 810b13a:	681b      	ldr	r3, [r3, #0]
 810b13c:	461a      	mov	r2, r3
 810b13e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 810b140:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b142:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b144:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810b146:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b148:	e841 2300 	strex	r3, r2, [r1]
 810b14c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 810b14e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 810b150:	2b00      	cmp	r3, #0
 810b152:	d1e6      	bne.n	810b122 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b154:	68fb      	ldr	r3, [r7, #12]
 810b156:	681b      	ldr	r3, [r3, #0]
 810b158:	3308      	adds	r3, #8
 810b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b15e:	e853 3f00 	ldrex	r3, [r3]
 810b162:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b166:	f043 0301 	orr.w	r3, r3, #1
 810b16a:	653b      	str	r3, [r7, #80]	@ 0x50
 810b16c:	68fb      	ldr	r3, [r7, #12]
 810b16e:	681b      	ldr	r3, [r3, #0]
 810b170:	3308      	adds	r3, #8
 810b172:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 810b174:	637a      	str	r2, [r7, #52]	@ 0x34
 810b176:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b178:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 810b17a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810b17c:	e841 2300 	strex	r3, r2, [r1]
 810b180:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 810b182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810b184:	2b00      	cmp	r3, #0
 810b186:	d1e5      	bne.n	810b154 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b188:	68fb      	ldr	r3, [r7, #12]
 810b18a:	681b      	ldr	r3, [r3, #0]
 810b18c:	3308      	adds	r3, #8
 810b18e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b190:	697b      	ldr	r3, [r7, #20]
 810b192:	e853 3f00 	ldrex	r3, [r3]
 810b196:	613b      	str	r3, [r7, #16]
   return(result);
 810b198:	693b      	ldr	r3, [r7, #16]
 810b19a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810b19e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b1a0:	68fb      	ldr	r3, [r7, #12]
 810b1a2:	681b      	ldr	r3, [r3, #0]
 810b1a4:	3308      	adds	r3, #8
 810b1a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 810b1a8:	623a      	str	r2, [r7, #32]
 810b1aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1ac:	69f9      	ldr	r1, [r7, #28]
 810b1ae:	6a3a      	ldr	r2, [r7, #32]
 810b1b0:	e841 2300 	strex	r3, r2, [r1]
 810b1b4:	61bb      	str	r3, [r7, #24]
   return(result);
 810b1b6:	69bb      	ldr	r3, [r7, #24]
 810b1b8:	2b00      	cmp	r3, #0
 810b1ba:	d1e5      	bne.n	810b188 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 810b1bc:	2300      	movs	r3, #0
}
 810b1be:	4618      	mov	r0, r3
 810b1c0:	3758      	adds	r7, #88	@ 0x58
 810b1c2:	46bd      	mov	sp, r7
 810b1c4:	bd80      	pop	{r7, pc}
 810b1c6:	bf00      	nop
 810b1c8:	0810b323 	.word	0x0810b323
 810b1cc:	0810b44b 	.word	0x0810b44b
 810b1d0:	0810b489 	.word	0x0810b489

0810b1d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 810b1d4:	b480      	push	{r7}
 810b1d6:	b08f      	sub	sp, #60	@ 0x3c
 810b1d8:	af00      	add	r7, sp, #0
 810b1da:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 810b1dc:	687b      	ldr	r3, [r7, #4]
 810b1de:	681b      	ldr	r3, [r3, #0]
 810b1e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b1e2:	6a3b      	ldr	r3, [r7, #32]
 810b1e4:	e853 3f00 	ldrex	r3, [r3]
 810b1e8:	61fb      	str	r3, [r7, #28]
   return(result);
 810b1ea:	69fb      	ldr	r3, [r7, #28]
 810b1ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 810b1f0:	637b      	str	r3, [r7, #52]	@ 0x34
 810b1f2:	687b      	ldr	r3, [r7, #4]
 810b1f4:	681b      	ldr	r3, [r3, #0]
 810b1f6:	461a      	mov	r2, r3
 810b1f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b1fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 810b1fc:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b1fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b202:	e841 2300 	strex	r3, r2, [r1]
 810b206:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b20a:	2b00      	cmp	r3, #0
 810b20c:	d1e6      	bne.n	810b1dc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 810b20e:	687b      	ldr	r3, [r7, #4]
 810b210:	681b      	ldr	r3, [r3, #0]
 810b212:	3308      	adds	r3, #8
 810b214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b216:	68fb      	ldr	r3, [r7, #12]
 810b218:	e853 3f00 	ldrex	r3, [r3]
 810b21c:	60bb      	str	r3, [r7, #8]
   return(result);
 810b21e:	68bb      	ldr	r3, [r7, #8]
 810b220:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 810b224:	633b      	str	r3, [r7, #48]	@ 0x30
 810b226:	687b      	ldr	r3, [r7, #4]
 810b228:	681b      	ldr	r3, [r3, #0]
 810b22a:	3308      	adds	r3, #8
 810b22c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b22e:	61ba      	str	r2, [r7, #24]
 810b230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b232:	6979      	ldr	r1, [r7, #20]
 810b234:	69ba      	ldr	r2, [r7, #24]
 810b236:	e841 2300 	strex	r3, r2, [r1]
 810b23a:	613b      	str	r3, [r7, #16]
   return(result);
 810b23c:	693b      	ldr	r3, [r7, #16]
 810b23e:	2b00      	cmp	r3, #0
 810b240:	d1e5      	bne.n	810b20e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b242:	687b      	ldr	r3, [r7, #4]
 810b244:	2220      	movs	r2, #32
 810b246:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 810b24a:	bf00      	nop
 810b24c:	373c      	adds	r7, #60	@ 0x3c
 810b24e:	46bd      	mov	sp, r7
 810b250:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b254:	4770      	bx	lr

0810b256 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 810b256:	b480      	push	{r7}
 810b258:	b095      	sub	sp, #84	@ 0x54
 810b25a:	af00      	add	r7, sp, #0
 810b25c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810b25e:	687b      	ldr	r3, [r7, #4]
 810b260:	681b      	ldr	r3, [r3, #0]
 810b262:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b264:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b266:	e853 3f00 	ldrex	r3, [r3]
 810b26a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810b26c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810b26e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 810b272:	64fb      	str	r3, [r7, #76]	@ 0x4c
 810b274:	687b      	ldr	r3, [r7, #4]
 810b276:	681b      	ldr	r3, [r3, #0]
 810b278:	461a      	mov	r2, r3
 810b27a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b27c:	643b      	str	r3, [r7, #64]	@ 0x40
 810b27e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b280:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 810b282:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 810b284:	e841 2300 	strex	r3, r2, [r1]
 810b288:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810b28a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b28c:	2b00      	cmp	r3, #0
 810b28e:	d1e6      	bne.n	810b25e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 810b290:	687b      	ldr	r3, [r7, #4]
 810b292:	681b      	ldr	r3, [r3, #0]
 810b294:	3308      	adds	r3, #8
 810b296:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b298:	6a3b      	ldr	r3, [r7, #32]
 810b29a:	e853 3f00 	ldrex	r3, [r3]
 810b29e:	61fb      	str	r3, [r7, #28]
   return(result);
 810b2a0:	69fb      	ldr	r3, [r7, #28]
 810b2a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810b2a6:	f023 0301 	bic.w	r3, r3, #1
 810b2aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 810b2ac:	687b      	ldr	r3, [r7, #4]
 810b2ae:	681b      	ldr	r3, [r3, #0]
 810b2b0:	3308      	adds	r3, #8
 810b2b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 810b2b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810b2b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810b2ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810b2bc:	e841 2300 	strex	r3, r2, [r1]
 810b2c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 810b2c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b2c4:	2b00      	cmp	r3, #0
 810b2c6:	d1e3      	bne.n	810b290 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b2c8:	687b      	ldr	r3, [r7, #4]
 810b2ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b2cc:	2b01      	cmp	r3, #1
 810b2ce:	d118      	bne.n	810b302 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b2d0:	687b      	ldr	r3, [r7, #4]
 810b2d2:	681b      	ldr	r3, [r3, #0]
 810b2d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b2d6:	68fb      	ldr	r3, [r7, #12]
 810b2d8:	e853 3f00 	ldrex	r3, [r3]
 810b2dc:	60bb      	str	r3, [r7, #8]
   return(result);
 810b2de:	68bb      	ldr	r3, [r7, #8]
 810b2e0:	f023 0310 	bic.w	r3, r3, #16
 810b2e4:	647b      	str	r3, [r7, #68]	@ 0x44
 810b2e6:	687b      	ldr	r3, [r7, #4]
 810b2e8:	681b      	ldr	r3, [r3, #0]
 810b2ea:	461a      	mov	r2, r3
 810b2ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810b2ee:	61bb      	str	r3, [r7, #24]
 810b2f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b2f2:	6979      	ldr	r1, [r7, #20]
 810b2f4:	69ba      	ldr	r2, [r7, #24]
 810b2f6:	e841 2300 	strex	r3, r2, [r1]
 810b2fa:	613b      	str	r3, [r7, #16]
   return(result);
 810b2fc:	693b      	ldr	r3, [r7, #16]
 810b2fe:	2b00      	cmp	r3, #0
 810b300:	d1e6      	bne.n	810b2d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 810b302:	687b      	ldr	r3, [r7, #4]
 810b304:	2220      	movs	r2, #32
 810b306:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810b30a:	687b      	ldr	r3, [r7, #4]
 810b30c:	2200      	movs	r2, #0
 810b30e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 810b310:	687b      	ldr	r3, [r7, #4]
 810b312:	2200      	movs	r2, #0
 810b314:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810b316:	bf00      	nop
 810b318:	3754      	adds	r7, #84	@ 0x54
 810b31a:	46bd      	mov	sp, r7
 810b31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b320:	4770      	bx	lr

0810b322 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 810b322:	b580      	push	{r7, lr}
 810b324:	b09c      	sub	sp, #112	@ 0x70
 810b326:	af00      	add	r7, sp, #0
 810b328:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b32a:	687b      	ldr	r3, [r7, #4]
 810b32c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b32e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 810b330:	687b      	ldr	r3, [r7, #4]
 810b332:	69db      	ldr	r3, [r3, #28]
 810b334:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810b338:	d071      	beq.n	810b41e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 810b33a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b33c:	2200      	movs	r2, #0
 810b33e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810b342:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b344:	681b      	ldr	r3, [r3, #0]
 810b346:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b348:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 810b34a:	e853 3f00 	ldrex	r3, [r3]
 810b34e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 810b350:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 810b352:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810b356:	66bb      	str	r3, [r7, #104]	@ 0x68
 810b358:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b35a:	681b      	ldr	r3, [r3, #0]
 810b35c:	461a      	mov	r2, r3
 810b35e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 810b360:	65bb      	str	r3, [r7, #88]	@ 0x58
 810b362:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b364:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 810b366:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 810b368:	e841 2300 	strex	r3, r2, [r1]
 810b36c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 810b36e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 810b370:	2b00      	cmp	r3, #0
 810b372:	d1e6      	bne.n	810b342 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810b374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b376:	681b      	ldr	r3, [r3, #0]
 810b378:	3308      	adds	r3, #8
 810b37a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b37c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810b37e:	e853 3f00 	ldrex	r3, [r3]
 810b382:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 810b384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810b386:	f023 0301 	bic.w	r3, r3, #1
 810b38a:	667b      	str	r3, [r7, #100]	@ 0x64
 810b38c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b38e:	681b      	ldr	r3, [r3, #0]
 810b390:	3308      	adds	r3, #8
 810b392:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 810b394:	647a      	str	r2, [r7, #68]	@ 0x44
 810b396:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b398:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 810b39a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 810b39c:	e841 2300 	strex	r3, r2, [r1]
 810b3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 810b3a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810b3a4:	2b00      	cmp	r3, #0
 810b3a6:	d1e5      	bne.n	810b374 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810b3a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b3aa:	681b      	ldr	r3, [r3, #0]
 810b3ac:	3308      	adds	r3, #8
 810b3ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810b3b2:	e853 3f00 	ldrex	r3, [r3]
 810b3b6:	623b      	str	r3, [r7, #32]
   return(result);
 810b3b8:	6a3b      	ldr	r3, [r7, #32]
 810b3ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b3be:	663b      	str	r3, [r7, #96]	@ 0x60
 810b3c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b3c2:	681b      	ldr	r3, [r3, #0]
 810b3c4:	3308      	adds	r3, #8
 810b3c6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 810b3c8:	633a      	str	r2, [r7, #48]	@ 0x30
 810b3ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b3cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 810b3ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810b3d0:	e841 2300 	strex	r3, r2, [r1]
 810b3d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 810b3d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b3d8:	2b00      	cmp	r3, #0
 810b3da:	d1e5      	bne.n	810b3a8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810b3dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b3de:	2220      	movs	r2, #32
 810b3e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b3e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b3e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b3e8:	2b01      	cmp	r3, #1
 810b3ea:	d118      	bne.n	810b41e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b3ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b3ee:	681b      	ldr	r3, [r3, #0]
 810b3f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b3f2:	693b      	ldr	r3, [r7, #16]
 810b3f4:	e853 3f00 	ldrex	r3, [r3]
 810b3f8:	60fb      	str	r3, [r7, #12]
   return(result);
 810b3fa:	68fb      	ldr	r3, [r7, #12]
 810b3fc:	f023 0310 	bic.w	r3, r3, #16
 810b400:	65fb      	str	r3, [r7, #92]	@ 0x5c
 810b402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b404:	681b      	ldr	r3, [r3, #0]
 810b406:	461a      	mov	r2, r3
 810b408:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 810b40a:	61fb      	str	r3, [r7, #28]
 810b40c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b40e:	69b9      	ldr	r1, [r7, #24]
 810b410:	69fa      	ldr	r2, [r7, #28]
 810b412:	e841 2300 	strex	r3, r2, [r1]
 810b416:	617b      	str	r3, [r7, #20]
   return(result);
 810b418:	697b      	ldr	r3, [r7, #20]
 810b41a:	2b00      	cmp	r3, #0
 810b41c:	d1e6      	bne.n	810b3ec <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b41e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b420:	2200      	movs	r2, #0
 810b422:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b424:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b426:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b428:	2b01      	cmp	r3, #1
 810b42a:	d107      	bne.n	810b43c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 810b42c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 810b42e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b432:	4619      	mov	r1, r3
 810b434:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810b436:	f7f6 f921 	bl	810167c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810b43a:	e002      	b.n	810b442 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 810b43c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 810b43e:	f7fe fee3 	bl	810a208 <HAL_UART_RxCpltCallback>
}
 810b442:	bf00      	nop
 810b444:	3770      	adds	r7, #112	@ 0x70
 810b446:	46bd      	mov	sp, r7
 810b448:	bd80      	pop	{r7, pc}

0810b44a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 810b44a:	b580      	push	{r7, lr}
 810b44c:	b084      	sub	sp, #16
 810b44e:	af00      	add	r7, sp, #0
 810b450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b452:	687b      	ldr	r3, [r7, #4]
 810b454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b456:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 810b458:	68fb      	ldr	r3, [r7, #12]
 810b45a:	2201      	movs	r2, #1
 810b45c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b45e:	68fb      	ldr	r3, [r7, #12]
 810b460:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b462:	2b01      	cmp	r3, #1
 810b464:	d109      	bne.n	810b47a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 810b466:	68fb      	ldr	r3, [r7, #12]
 810b468:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 810b46c:	085b      	lsrs	r3, r3, #1
 810b46e:	b29b      	uxth	r3, r3
 810b470:	4619      	mov	r1, r3
 810b472:	68f8      	ldr	r0, [r7, #12]
 810b474:	f7f6 f902 	bl	810167c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 810b478:	e002      	b.n	810b480 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 810b47a:	68f8      	ldr	r0, [r7, #12]
 810b47c:	f7fe fece 	bl	810a21c <HAL_UART_RxHalfCpltCallback>
}
 810b480:	bf00      	nop
 810b482:	3710      	adds	r7, #16
 810b484:	46bd      	mov	sp, r7
 810b486:	bd80      	pop	{r7, pc}

0810b488 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 810b488:	b580      	push	{r7, lr}
 810b48a:	b086      	sub	sp, #24
 810b48c:	af00      	add	r7, sp, #0
 810b48e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b490:	687b      	ldr	r3, [r7, #4]
 810b492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b494:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 810b496:	697b      	ldr	r3, [r7, #20]
 810b498:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810b49c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 810b49e:	697b      	ldr	r3, [r7, #20]
 810b4a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b4a4:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 810b4a6:	697b      	ldr	r3, [r7, #20]
 810b4a8:	681b      	ldr	r3, [r3, #0]
 810b4aa:	689b      	ldr	r3, [r3, #8]
 810b4ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810b4b0:	2b80      	cmp	r3, #128	@ 0x80
 810b4b2:	d109      	bne.n	810b4c8 <UART_DMAError+0x40>
 810b4b4:	693b      	ldr	r3, [r7, #16]
 810b4b6:	2b21      	cmp	r3, #33	@ 0x21
 810b4b8:	d106      	bne.n	810b4c8 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 810b4ba:	697b      	ldr	r3, [r7, #20]
 810b4bc:	2200      	movs	r2, #0
 810b4be:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 810b4c2:	6978      	ldr	r0, [r7, #20]
 810b4c4:	f7ff fe86 	bl	810b1d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 810b4c8:	697b      	ldr	r3, [r7, #20]
 810b4ca:	681b      	ldr	r3, [r3, #0]
 810b4cc:	689b      	ldr	r3, [r3, #8]
 810b4ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810b4d2:	2b40      	cmp	r3, #64	@ 0x40
 810b4d4:	d109      	bne.n	810b4ea <UART_DMAError+0x62>
 810b4d6:	68fb      	ldr	r3, [r7, #12]
 810b4d8:	2b22      	cmp	r3, #34	@ 0x22
 810b4da:	d106      	bne.n	810b4ea <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 810b4dc:	697b      	ldr	r3, [r7, #20]
 810b4de:	2200      	movs	r2, #0
 810b4e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 810b4e4:	6978      	ldr	r0, [r7, #20]
 810b4e6:	f7ff feb6 	bl	810b256 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 810b4ea:	697b      	ldr	r3, [r7, #20]
 810b4ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810b4f0:	f043 0210 	orr.w	r2, r3, #16
 810b4f4:	697b      	ldr	r3, [r7, #20]
 810b4f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b4fa:	6978      	ldr	r0, [r7, #20]
 810b4fc:	f7fe fe98 	bl	810a230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b500:	bf00      	nop
 810b502:	3718      	adds	r7, #24
 810b504:	46bd      	mov	sp, r7
 810b506:	bd80      	pop	{r7, pc}

0810b508 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 810b508:	b580      	push	{r7, lr}
 810b50a:	b084      	sub	sp, #16
 810b50c:	af00      	add	r7, sp, #0
 810b50e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 810b510:	687b      	ldr	r3, [r7, #4]
 810b512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810b514:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 810b516:	68fb      	ldr	r3, [r7, #12]
 810b518:	2200      	movs	r2, #0
 810b51a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 810b51e:	68fb      	ldr	r3, [r7, #12]
 810b520:	2200      	movs	r2, #0
 810b522:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 810b526:	68f8      	ldr	r0, [r7, #12]
 810b528:	f7fe fe82 	bl	810a230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b52c:	bf00      	nop
 810b52e:	3710      	adds	r7, #16
 810b530:	46bd      	mov	sp, r7
 810b532:	bd80      	pop	{r7, pc}

0810b534 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 810b534:	b580      	push	{r7, lr}
 810b536:	b088      	sub	sp, #32
 810b538:	af00      	add	r7, sp, #0
 810b53a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 810b53c:	687b      	ldr	r3, [r7, #4]
 810b53e:	681b      	ldr	r3, [r3, #0]
 810b540:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b542:	68fb      	ldr	r3, [r7, #12]
 810b544:	e853 3f00 	ldrex	r3, [r3]
 810b548:	60bb      	str	r3, [r7, #8]
   return(result);
 810b54a:	68bb      	ldr	r3, [r7, #8]
 810b54c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810b550:	61fb      	str	r3, [r7, #28]
 810b552:	687b      	ldr	r3, [r7, #4]
 810b554:	681b      	ldr	r3, [r3, #0]
 810b556:	461a      	mov	r2, r3
 810b558:	69fb      	ldr	r3, [r7, #28]
 810b55a:	61bb      	str	r3, [r7, #24]
 810b55c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b55e:	6979      	ldr	r1, [r7, #20]
 810b560:	69ba      	ldr	r2, [r7, #24]
 810b562:	e841 2300 	strex	r3, r2, [r1]
 810b566:	613b      	str	r3, [r7, #16]
   return(result);
 810b568:	693b      	ldr	r3, [r7, #16]
 810b56a:	2b00      	cmp	r3, #0
 810b56c:	d1e6      	bne.n	810b53c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810b56e:	687b      	ldr	r3, [r7, #4]
 810b570:	2220      	movs	r2, #32
 810b572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 810b576:	687b      	ldr	r3, [r7, #4]
 810b578:	2200      	movs	r2, #0
 810b57a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 810b57c:	6878      	ldr	r0, [r7, #4]
 810b57e:	f7fe fe39 	bl	810a1f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810b582:	bf00      	nop
 810b584:	3720      	adds	r7, #32
 810b586:	46bd      	mov	sp, r7
 810b588:	bd80      	pop	{r7, pc}

0810b58a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 810b58a:	b480      	push	{r7}
 810b58c:	b083      	sub	sp, #12
 810b58e:	af00      	add	r7, sp, #0
 810b590:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 810b592:	bf00      	nop
 810b594:	370c      	adds	r7, #12
 810b596:	46bd      	mov	sp, r7
 810b598:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b59c:	4770      	bx	lr

0810b59e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 810b59e:	b480      	push	{r7}
 810b5a0:	b083      	sub	sp, #12
 810b5a2:	af00      	add	r7, sp, #0
 810b5a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 810b5a6:	bf00      	nop
 810b5a8:	370c      	adds	r7, #12
 810b5aa:	46bd      	mov	sp, r7
 810b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5b0:	4770      	bx	lr

0810b5b2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 810b5b2:	b480      	push	{r7}
 810b5b4:	b083      	sub	sp, #12
 810b5b6:	af00      	add	r7, sp, #0
 810b5b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 810b5ba:	bf00      	nop
 810b5bc:	370c      	adds	r7, #12
 810b5be:	46bd      	mov	sp, r7
 810b5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b5c4:	4770      	bx	lr

0810b5c6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 810b5c6:	b480      	push	{r7}
 810b5c8:	b085      	sub	sp, #20
 810b5ca:	af00      	add	r7, sp, #0
 810b5cc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b5ce:	687b      	ldr	r3, [r7, #4]
 810b5d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b5d4:	2b01      	cmp	r3, #1
 810b5d6:	d101      	bne.n	810b5dc <HAL_UARTEx_DisableFifoMode+0x16>
 810b5d8:	2302      	movs	r3, #2
 810b5da:	e027      	b.n	810b62c <HAL_UARTEx_DisableFifoMode+0x66>
 810b5dc:	687b      	ldr	r3, [r7, #4]
 810b5de:	2201      	movs	r2, #1
 810b5e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b5e4:	687b      	ldr	r3, [r7, #4]
 810b5e6:	2224      	movs	r2, #36	@ 0x24
 810b5e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b5ec:	687b      	ldr	r3, [r7, #4]
 810b5ee:	681b      	ldr	r3, [r3, #0]
 810b5f0:	681b      	ldr	r3, [r3, #0]
 810b5f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b5f4:	687b      	ldr	r3, [r7, #4]
 810b5f6:	681b      	ldr	r3, [r3, #0]
 810b5f8:	681a      	ldr	r2, [r3, #0]
 810b5fa:	687b      	ldr	r3, [r7, #4]
 810b5fc:	681b      	ldr	r3, [r3, #0]
 810b5fe:	f022 0201 	bic.w	r2, r2, #1
 810b602:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810b604:	68fb      	ldr	r3, [r7, #12]
 810b606:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 810b60a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 810b60c:	687b      	ldr	r3, [r7, #4]
 810b60e:	2200      	movs	r2, #0
 810b610:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b612:	687b      	ldr	r3, [r7, #4]
 810b614:	681b      	ldr	r3, [r3, #0]
 810b616:	68fa      	ldr	r2, [r7, #12]
 810b618:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b61a:	687b      	ldr	r3, [r7, #4]
 810b61c:	2220      	movs	r2, #32
 810b61e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b622:	687b      	ldr	r3, [r7, #4]
 810b624:	2200      	movs	r2, #0
 810b626:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b62a:	2300      	movs	r3, #0
}
 810b62c:	4618      	mov	r0, r3
 810b62e:	3714      	adds	r7, #20
 810b630:	46bd      	mov	sp, r7
 810b632:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b636:	4770      	bx	lr

0810b638 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b638:	b580      	push	{r7, lr}
 810b63a:	b084      	sub	sp, #16
 810b63c:	af00      	add	r7, sp, #0
 810b63e:	6078      	str	r0, [r7, #4]
 810b640:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b642:	687b      	ldr	r3, [r7, #4]
 810b644:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b648:	2b01      	cmp	r3, #1
 810b64a:	d101      	bne.n	810b650 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 810b64c:	2302      	movs	r3, #2
 810b64e:	e02d      	b.n	810b6ac <HAL_UARTEx_SetTxFifoThreshold+0x74>
 810b650:	687b      	ldr	r3, [r7, #4]
 810b652:	2201      	movs	r2, #1
 810b654:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b658:	687b      	ldr	r3, [r7, #4]
 810b65a:	2224      	movs	r2, #36	@ 0x24
 810b65c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b660:	687b      	ldr	r3, [r7, #4]
 810b662:	681b      	ldr	r3, [r3, #0]
 810b664:	681b      	ldr	r3, [r3, #0]
 810b666:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b668:	687b      	ldr	r3, [r7, #4]
 810b66a:	681b      	ldr	r3, [r3, #0]
 810b66c:	681a      	ldr	r2, [r3, #0]
 810b66e:	687b      	ldr	r3, [r7, #4]
 810b670:	681b      	ldr	r3, [r3, #0]
 810b672:	f022 0201 	bic.w	r2, r2, #1
 810b676:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810b678:	687b      	ldr	r3, [r7, #4]
 810b67a:	681b      	ldr	r3, [r3, #0]
 810b67c:	689b      	ldr	r3, [r3, #8]
 810b67e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810b682:	687b      	ldr	r3, [r7, #4]
 810b684:	681b      	ldr	r3, [r3, #0]
 810b686:	683a      	ldr	r2, [r7, #0]
 810b688:	430a      	orrs	r2, r1
 810b68a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b68c:	6878      	ldr	r0, [r7, #4]
 810b68e:	f000 f9a5 	bl	810b9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b692:	687b      	ldr	r3, [r7, #4]
 810b694:	681b      	ldr	r3, [r3, #0]
 810b696:	68fa      	ldr	r2, [r7, #12]
 810b698:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b69a:	687b      	ldr	r3, [r7, #4]
 810b69c:	2220      	movs	r2, #32
 810b69e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b6a2:	687b      	ldr	r3, [r7, #4]
 810b6a4:	2200      	movs	r2, #0
 810b6a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b6aa:	2300      	movs	r3, #0
}
 810b6ac:	4618      	mov	r0, r3
 810b6ae:	3710      	adds	r7, #16
 810b6b0:	46bd      	mov	sp, r7
 810b6b2:	bd80      	pop	{r7, pc}

0810b6b4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810b6b4:	b580      	push	{r7, lr}
 810b6b6:	b084      	sub	sp, #16
 810b6b8:	af00      	add	r7, sp, #0
 810b6ba:	6078      	str	r0, [r7, #4]
 810b6bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810b6be:	687b      	ldr	r3, [r7, #4]
 810b6c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 810b6c4:	2b01      	cmp	r3, #1
 810b6c6:	d101      	bne.n	810b6cc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 810b6c8:	2302      	movs	r3, #2
 810b6ca:	e02d      	b.n	810b728 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 810b6cc:	687b      	ldr	r3, [r7, #4]
 810b6ce:	2201      	movs	r2, #1
 810b6d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810b6d4:	687b      	ldr	r3, [r7, #4]
 810b6d6:	2224      	movs	r2, #36	@ 0x24
 810b6d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 810b6dc:	687b      	ldr	r3, [r7, #4]
 810b6de:	681b      	ldr	r3, [r3, #0]
 810b6e0:	681b      	ldr	r3, [r3, #0]
 810b6e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810b6e4:	687b      	ldr	r3, [r7, #4]
 810b6e6:	681b      	ldr	r3, [r3, #0]
 810b6e8:	681a      	ldr	r2, [r3, #0]
 810b6ea:	687b      	ldr	r3, [r7, #4]
 810b6ec:	681b      	ldr	r3, [r3, #0]
 810b6ee:	f022 0201 	bic.w	r2, r2, #1
 810b6f2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810b6f4:	687b      	ldr	r3, [r7, #4]
 810b6f6:	681b      	ldr	r3, [r3, #0]
 810b6f8:	689b      	ldr	r3, [r3, #8]
 810b6fa:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810b6fe:	687b      	ldr	r3, [r7, #4]
 810b700:	681b      	ldr	r3, [r3, #0]
 810b702:	683a      	ldr	r2, [r7, #0]
 810b704:	430a      	orrs	r2, r1
 810b706:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810b708:	6878      	ldr	r0, [r7, #4]
 810b70a:	f000 f967 	bl	810b9dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810b70e:	687b      	ldr	r3, [r7, #4]
 810b710:	681b      	ldr	r3, [r3, #0]
 810b712:	68fa      	ldr	r2, [r7, #12]
 810b714:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810b716:	687b      	ldr	r3, [r7, #4]
 810b718:	2220      	movs	r2, #32
 810b71a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810b71e:	687b      	ldr	r3, [r7, #4]
 810b720:	2200      	movs	r2, #0
 810b722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 810b726:	2300      	movs	r3, #0
}
 810b728:	4618      	mov	r0, r3
 810b72a:	3710      	adds	r7, #16
 810b72c:	46bd      	mov	sp, r7
 810b72e:	bd80      	pop	{r7, pc}

0810b730 <HAL_UARTEx_ReceiveToIdle>:
  * @param Timeout Timeout duration expressed in ms (covers the whole reception sequence).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint16_t *RxLen,
                                           uint32_t Timeout)
{
 810b730:	b580      	push	{r7, lr}
 810b732:	b088      	sub	sp, #32
 810b734:	af00      	add	r7, sp, #0
 810b736:	60f8      	str	r0, [r7, #12]
 810b738:	60b9      	str	r1, [r7, #8]
 810b73a:	603b      	str	r3, [r7, #0]
 810b73c:	4613      	mov	r3, r2
 810b73e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b740:	68fb      	ldr	r3, [r7, #12]
 810b742:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b746:	2b20      	cmp	r3, #32
 810b748:	f040 80ef 	bne.w	810b92a <HAL_UARTEx_ReceiveToIdle+0x1fa>
  {
    if ((pData == NULL) || (Size == 0U))
 810b74c:	68bb      	ldr	r3, [r7, #8]
 810b74e:	2b00      	cmp	r3, #0
 810b750:	d002      	beq.n	810b758 <HAL_UARTEx_ReceiveToIdle+0x28>
 810b752:	88fb      	ldrh	r3, [r7, #6]
 810b754:	2b00      	cmp	r3, #0
 810b756:	d101      	bne.n	810b75c <HAL_UARTEx_ReceiveToIdle+0x2c>
    {
      return  HAL_ERROR;
 810b758:	2301      	movs	r3, #1
 810b75a:	e0e7      	b.n	810b92c <HAL_UARTEx_ReceiveToIdle+0x1fc>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 810b75c:	68fb      	ldr	r3, [r7, #12]
 810b75e:	2200      	movs	r2, #0
 810b760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 810b764:	68fb      	ldr	r3, [r7, #12]
 810b766:	2222      	movs	r2, #34	@ 0x22
 810b768:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 810b76c:	68fb      	ldr	r3, [r7, #12]
 810b76e:	2201      	movs	r2, #1
 810b770:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b772:	68fb      	ldr	r3, [r7, #12]
 810b774:	2200      	movs	r2, #0
 810b776:	671a      	str	r2, [r3, #112]	@ 0x70

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 810b778:	f7f6 ffe8 	bl	810274c <HAL_GetTick>
 810b77c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 810b77e:	68fb      	ldr	r3, [r7, #12]
 810b780:	88fa      	ldrh	r2, [r7, #6]
 810b782:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 810b786:	68fb      	ldr	r3, [r7, #12]
 810b788:	88fa      	ldrh	r2, [r7, #6]
 810b78a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 810b78e:	68fb      	ldr	r3, [r7, #12]
 810b790:	689b      	ldr	r3, [r3, #8]
 810b792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b796:	d10e      	bne.n	810b7b6 <HAL_UARTEx_ReceiveToIdle+0x86>
 810b798:	68fb      	ldr	r3, [r7, #12]
 810b79a:	691b      	ldr	r3, [r3, #16]
 810b79c:	2b00      	cmp	r3, #0
 810b79e:	d105      	bne.n	810b7ac <HAL_UARTEx_ReceiveToIdle+0x7c>
 810b7a0:	68fb      	ldr	r3, [r7, #12]
 810b7a2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 810b7a6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7aa:	e02d      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b7ac:	68fb      	ldr	r3, [r7, #12]
 810b7ae:	22ff      	movs	r2, #255	@ 0xff
 810b7b0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7b4:	e028      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b7b6:	68fb      	ldr	r3, [r7, #12]
 810b7b8:	689b      	ldr	r3, [r3, #8]
 810b7ba:	2b00      	cmp	r3, #0
 810b7bc:	d10d      	bne.n	810b7da <HAL_UARTEx_ReceiveToIdle+0xaa>
 810b7be:	68fb      	ldr	r3, [r7, #12]
 810b7c0:	691b      	ldr	r3, [r3, #16]
 810b7c2:	2b00      	cmp	r3, #0
 810b7c4:	d104      	bne.n	810b7d0 <HAL_UARTEx_ReceiveToIdle+0xa0>
 810b7c6:	68fb      	ldr	r3, [r7, #12]
 810b7c8:	22ff      	movs	r2, #255	@ 0xff
 810b7ca:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7ce:	e01b      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b7d0:	68fb      	ldr	r3, [r7, #12]
 810b7d2:	227f      	movs	r2, #127	@ 0x7f
 810b7d4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7d8:	e016      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b7da:	68fb      	ldr	r3, [r7, #12]
 810b7dc:	689b      	ldr	r3, [r3, #8]
 810b7de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810b7e2:	d10d      	bne.n	810b800 <HAL_UARTEx_ReceiveToIdle+0xd0>
 810b7e4:	68fb      	ldr	r3, [r7, #12]
 810b7e6:	691b      	ldr	r3, [r3, #16]
 810b7e8:	2b00      	cmp	r3, #0
 810b7ea:	d104      	bne.n	810b7f6 <HAL_UARTEx_ReceiveToIdle+0xc6>
 810b7ec:	68fb      	ldr	r3, [r7, #12]
 810b7ee:	227f      	movs	r2, #127	@ 0x7f
 810b7f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7f4:	e008      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b7f6:	68fb      	ldr	r3, [r7, #12]
 810b7f8:	223f      	movs	r2, #63	@ 0x3f
 810b7fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 810b7fe:	e003      	b.n	810b808 <HAL_UARTEx_ReceiveToIdle+0xd8>
 810b800:	68fb      	ldr	r3, [r7, #12]
 810b802:	2200      	movs	r2, #0
 810b804:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 810b808:	68fb      	ldr	r3, [r7, #12]
 810b80a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 810b80e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810b810:	68fb      	ldr	r3, [r7, #12]
 810b812:	689b      	ldr	r3, [r3, #8]
 810b814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810b818:	d108      	bne.n	810b82c <HAL_UARTEx_ReceiveToIdle+0xfc>
 810b81a:	68fb      	ldr	r3, [r7, #12]
 810b81c:	691b      	ldr	r3, [r3, #16]
 810b81e:	2b00      	cmp	r3, #0
 810b820:	d104      	bne.n	810b82c <HAL_UARTEx_ReceiveToIdle+0xfc>
    {
      pdata8bits  = NULL;
 810b822:	2300      	movs	r3, #0
 810b824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 810b826:	68bb      	ldr	r3, [r7, #8]
 810b828:	61bb      	str	r3, [r7, #24]
 810b82a:	e003      	b.n	810b834 <HAL_UARTEx_ReceiveToIdle+0x104>
    }
    else
    {
      pdata8bits  = pData;
 810b82c:	68bb      	ldr	r3, [r7, #8]
 810b82e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 810b830:	2300      	movs	r3, #0
 810b832:	61bb      	str	r3, [r7, #24]
    }

    /* Initialize output number of received elements */
    *RxLen = 0U;
 810b834:	683b      	ldr	r3, [r7, #0]
 810b836:	2200      	movs	r2, #0
 810b838:	801a      	strh	r2, [r3, #0]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 810b83a:	e05f      	b.n	810b8fc <HAL_UARTEx_ReceiveToIdle+0x1cc>
    {
      /* Check if IDLE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 810b83c:	68fb      	ldr	r3, [r7, #12]
 810b83e:	681b      	ldr	r3, [r3, #0]
 810b840:	69db      	ldr	r3, [r3, #28]
 810b842:	f003 0310 	and.w	r3, r3, #16
 810b846:	2b10      	cmp	r3, #16
 810b848:	d110      	bne.n	810b86c <HAL_UARTEx_ReceiveToIdle+0x13c>
      {
        /* Clear IDLE flag in ISR */
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b84a:	68fb      	ldr	r3, [r7, #12]
 810b84c:	681b      	ldr	r3, [r3, #0]
 810b84e:	2210      	movs	r2, #16
 810b850:	621a      	str	r2, [r3, #32]

        /* If Set, but no data ever received, clear flag without exiting loop */
        /* If Set, and data has already been received, this means Idle Event is valid : End reception */
        if (*RxLen > 0U)
 810b852:	683b      	ldr	r3, [r7, #0]
 810b854:	881b      	ldrh	r3, [r3, #0]
 810b856:	2b00      	cmp	r3, #0
 810b858:	d008      	beq.n	810b86c <HAL_UARTEx_ReceiveToIdle+0x13c>
        {
          huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810b85a:	68fb      	ldr	r3, [r7, #12]
 810b85c:	2202      	movs	r2, #2
 810b85e:	671a      	str	r2, [r3, #112]	@ 0x70
          huart->RxState = HAL_UART_STATE_READY;
 810b860:	68fb      	ldr	r3, [r7, #12]
 810b862:	2220      	movs	r2, #32
 810b864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          return HAL_OK;
 810b868:	2300      	movs	r3, #0
 810b86a:	e05f      	b.n	810b92c <HAL_UARTEx_ReceiveToIdle+0x1fc>
        }
      }

      /* Check if RXNE flag is set */
      if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RXNE))
 810b86c:	68fb      	ldr	r3, [r7, #12]
 810b86e:	681b      	ldr	r3, [r3, #0]
 810b870:	69db      	ldr	r3, [r3, #28]
 810b872:	f003 0320 	and.w	r3, r3, #32
 810b876:	2b20      	cmp	r3, #32
 810b878:	d12b      	bne.n	810b8d2 <HAL_UARTEx_ReceiveToIdle+0x1a2>
      {
        if (pdata8bits == NULL)
 810b87a:	69fb      	ldr	r3, [r7, #28]
 810b87c:	2b00      	cmp	r3, #0
 810b87e:	d10c      	bne.n	810b89a <HAL_UARTEx_ReceiveToIdle+0x16a>
        {
          *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 810b880:	68fb      	ldr	r3, [r7, #12]
 810b882:	681b      	ldr	r3, [r3, #0]
 810b884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b886:	b29a      	uxth	r2, r3
 810b888:	8a7b      	ldrh	r3, [r7, #18]
 810b88a:	4013      	ands	r3, r2
 810b88c:	b29a      	uxth	r2, r3
 810b88e:	69bb      	ldr	r3, [r7, #24]
 810b890:	801a      	strh	r2, [r3, #0]
          pdata16bits++;
 810b892:	69bb      	ldr	r3, [r7, #24]
 810b894:	3302      	adds	r3, #2
 810b896:	61bb      	str	r3, [r7, #24]
 810b898:	e00c      	b.n	810b8b4 <HAL_UARTEx_ReceiveToIdle+0x184>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 810b89a:	68fb      	ldr	r3, [r7, #12]
 810b89c:	681b      	ldr	r3, [r3, #0]
 810b89e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810b8a0:	b2da      	uxtb	r2, r3
 810b8a2:	8a7b      	ldrh	r3, [r7, #18]
 810b8a4:	b2db      	uxtb	r3, r3
 810b8a6:	4013      	ands	r3, r2
 810b8a8:	b2da      	uxtb	r2, r3
 810b8aa:	69fb      	ldr	r3, [r7, #28]
 810b8ac:	701a      	strb	r2, [r3, #0]
          pdata8bits++;
 810b8ae:	69fb      	ldr	r3, [r7, #28]
 810b8b0:	3301      	adds	r3, #1
 810b8b2:	61fb      	str	r3, [r7, #28]
        }
        /* Increment number of received elements */
        *RxLen += 1U;
 810b8b4:	683b      	ldr	r3, [r7, #0]
 810b8b6:	881b      	ldrh	r3, [r3, #0]
 810b8b8:	3301      	adds	r3, #1
 810b8ba:	b29a      	uxth	r2, r3
 810b8bc:	683b      	ldr	r3, [r7, #0]
 810b8be:	801a      	strh	r2, [r3, #0]
        huart->RxXferCount--;
 810b8c0:	68fb      	ldr	r3, [r7, #12]
 810b8c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b8c6:	b29b      	uxth	r3, r3
 810b8c8:	3b01      	subs	r3, #1
 810b8ca:	b29a      	uxth	r2, r3
 810b8cc:	68fb      	ldr	r3, [r7, #12]
 810b8ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 810b8d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b8d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 810b8d8:	d010      	beq.n	810b8fc <HAL_UARTEx_ReceiveToIdle+0x1cc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 810b8da:	f7f6 ff37 	bl	810274c <HAL_GetTick>
 810b8de:	4602      	mov	r2, r0
 810b8e0:	697b      	ldr	r3, [r7, #20]
 810b8e2:	1ad3      	subs	r3, r2, r3
 810b8e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810b8e6:	429a      	cmp	r2, r3
 810b8e8:	d302      	bcc.n	810b8f0 <HAL_UARTEx_ReceiveToIdle+0x1c0>
 810b8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b8ec:	2b00      	cmp	r3, #0
 810b8ee:	d105      	bne.n	810b8fc <HAL_UARTEx_ReceiveToIdle+0x1cc>
        {
          huart->RxState = HAL_UART_STATE_READY;
 810b8f0:	68fb      	ldr	r3, [r7, #12]
 810b8f2:	2220      	movs	r2, #32
 810b8f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          return HAL_TIMEOUT;
 810b8f8:	2303      	movs	r3, #3
 810b8fa:	e017      	b.n	810b92c <HAL_UARTEx_ReceiveToIdle+0x1fc>
    while (huart->RxXferCount > 0U)
 810b8fc:	68fb      	ldr	r3, [r7, #12]
 810b8fe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b902:	b29b      	uxth	r3, r3
 810b904:	2b00      	cmp	r3, #0
 810b906:	d199      	bne.n	810b83c <HAL_UARTEx_ReceiveToIdle+0x10c>
        }
      }
    }

    /* Set number of received elements in output parameter : RxLen */
    *RxLen = huart->RxXferSize - huart->RxXferCount;
 810b908:	68fb      	ldr	r3, [r7, #12]
 810b90a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 810b90e:	68fb      	ldr	r3, [r7, #12]
 810b910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 810b914:	b29b      	uxth	r3, r3
 810b916:	1ad3      	subs	r3, r2, r3
 810b918:	b29a      	uxth	r2, r3
 810b91a:	683b      	ldr	r3, [r7, #0]
 810b91c:	801a      	strh	r2, [r3, #0]
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 810b91e:	68fb      	ldr	r3, [r7, #12]
 810b920:	2220      	movs	r2, #32
 810b922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 810b926:	2300      	movs	r3, #0
 810b928:	e000      	b.n	810b92c <HAL_UARTEx_ReceiveToIdle+0x1fc>
  }
  else
  {
    return HAL_BUSY;
 810b92a:	2302      	movs	r3, #2
  }
}
 810b92c:	4618      	mov	r0, r3
 810b92e:	3720      	adds	r7, #32
 810b930:	46bd      	mov	sp, r7
 810b932:	bd80      	pop	{r7, pc}

0810b934 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 810b934:	b580      	push	{r7, lr}
 810b936:	b08c      	sub	sp, #48	@ 0x30
 810b938:	af00      	add	r7, sp, #0
 810b93a:	60f8      	str	r0, [r7, #12]
 810b93c:	60b9      	str	r1, [r7, #8]
 810b93e:	4613      	mov	r3, r2
 810b940:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 810b942:	68fb      	ldr	r3, [r7, #12]
 810b944:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 810b948:	2b20      	cmp	r3, #32
 810b94a:	d142      	bne.n	810b9d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 810b94c:	68bb      	ldr	r3, [r7, #8]
 810b94e:	2b00      	cmp	r3, #0
 810b950:	d002      	beq.n	810b958 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 810b952:	88fb      	ldrh	r3, [r7, #6]
 810b954:	2b00      	cmp	r3, #0
 810b956:	d101      	bne.n	810b95c <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 810b958:	2301      	movs	r3, #1
 810b95a:	e03b      	b.n	810b9d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 810b95c:	68fb      	ldr	r3, [r7, #12]
 810b95e:	2201      	movs	r2, #1
 810b960:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 810b962:	68fb      	ldr	r3, [r7, #12]
 810b964:	2200      	movs	r2, #0
 810b966:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 810b968:	88fb      	ldrh	r3, [r7, #6]
 810b96a:	461a      	mov	r2, r3
 810b96c:	68b9      	ldr	r1, [r7, #8]
 810b96e:	68f8      	ldr	r0, [r7, #12]
 810b970:	f7ff fb8a 	bl	810b088 <UART_Start_Receive_DMA>
 810b974:	4603      	mov	r3, r0
 810b976:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 810b97a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 810b97e:	2b00      	cmp	r3, #0
 810b980:	d124      	bne.n	810b9cc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810b982:	68fb      	ldr	r3, [r7, #12]
 810b984:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 810b986:	2b01      	cmp	r3, #1
 810b988:	d11d      	bne.n	810b9c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 810b98a:	68fb      	ldr	r3, [r7, #12]
 810b98c:	681b      	ldr	r3, [r3, #0]
 810b98e:	2210      	movs	r2, #16
 810b990:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 810b992:	68fb      	ldr	r3, [r7, #12]
 810b994:	681b      	ldr	r3, [r3, #0]
 810b996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810b998:	69bb      	ldr	r3, [r7, #24]
 810b99a:	e853 3f00 	ldrex	r3, [r3]
 810b99e:	617b      	str	r3, [r7, #20]
   return(result);
 810b9a0:	697b      	ldr	r3, [r7, #20]
 810b9a2:	f043 0310 	orr.w	r3, r3, #16
 810b9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 810b9a8:	68fb      	ldr	r3, [r7, #12]
 810b9aa:	681b      	ldr	r3, [r3, #0]
 810b9ac:	461a      	mov	r2, r3
 810b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810b9b0:	627b      	str	r3, [r7, #36]	@ 0x24
 810b9b2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810b9b4:	6a39      	ldr	r1, [r7, #32]
 810b9b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810b9b8:	e841 2300 	strex	r3, r2, [r1]
 810b9bc:	61fb      	str	r3, [r7, #28]
   return(result);
 810b9be:	69fb      	ldr	r3, [r7, #28]
 810b9c0:	2b00      	cmp	r3, #0
 810b9c2:	d1e6      	bne.n	810b992 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 810b9c4:	e002      	b.n	810b9cc <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 810b9c6:	2301      	movs	r3, #1
 810b9c8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 810b9cc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 810b9d0:	e000      	b.n	810b9d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 810b9d2:	2302      	movs	r3, #2
  }
}
 810b9d4:	4618      	mov	r0, r3
 810b9d6:	3730      	adds	r7, #48	@ 0x30
 810b9d8:	46bd      	mov	sp, r7
 810b9da:	bd80      	pop	{r7, pc}

0810b9dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 810b9dc:	b480      	push	{r7}
 810b9de:	b085      	sub	sp, #20
 810b9e0:	af00      	add	r7, sp, #0
 810b9e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 810b9e4:	687b      	ldr	r3, [r7, #4]
 810b9e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810b9e8:	2b00      	cmp	r3, #0
 810b9ea:	d108      	bne.n	810b9fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 810b9ec:	687b      	ldr	r3, [r7, #4]
 810b9ee:	2201      	movs	r2, #1
 810b9f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 810b9f4:	687b      	ldr	r3, [r7, #4]
 810b9f6:	2201      	movs	r2, #1
 810b9f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 810b9fc:	e031      	b.n	810ba62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810b9fe:	2310      	movs	r3, #16
 810ba00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810ba02:	2310      	movs	r3, #16
 810ba04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 810ba06:	687b      	ldr	r3, [r7, #4]
 810ba08:	681b      	ldr	r3, [r3, #0]
 810ba0a:	689b      	ldr	r3, [r3, #8]
 810ba0c:	0e5b      	lsrs	r3, r3, #25
 810ba0e:	b2db      	uxtb	r3, r3
 810ba10:	f003 0307 	and.w	r3, r3, #7
 810ba14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 810ba16:	687b      	ldr	r3, [r7, #4]
 810ba18:	681b      	ldr	r3, [r3, #0]
 810ba1a:	689b      	ldr	r3, [r3, #8]
 810ba1c:	0f5b      	lsrs	r3, r3, #29
 810ba1e:	b2db      	uxtb	r3, r3
 810ba20:	f003 0307 	and.w	r3, r3, #7
 810ba24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba26:	7bbb      	ldrb	r3, [r7, #14]
 810ba28:	7b3a      	ldrb	r2, [r7, #12]
 810ba2a:	4911      	ldr	r1, [pc, #68]	@ (810ba70 <UARTEx_SetNbDataToProcess+0x94>)
 810ba2c:	5c8a      	ldrb	r2, [r1, r2]
 810ba2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 810ba32:	7b3a      	ldrb	r2, [r7, #12]
 810ba34:	490f      	ldr	r1, [pc, #60]	@ (810ba74 <UARTEx_SetNbDataToProcess+0x98>)
 810ba36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 810ba38:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba3c:	b29a      	uxth	r2, r3
 810ba3e:	687b      	ldr	r3, [r7, #4]
 810ba40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ba44:	7bfb      	ldrb	r3, [r7, #15]
 810ba46:	7b7a      	ldrb	r2, [r7, #13]
 810ba48:	4909      	ldr	r1, [pc, #36]	@ (810ba70 <UARTEx_SetNbDataToProcess+0x94>)
 810ba4a:	5c8a      	ldrb	r2, [r1, r2]
 810ba4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 810ba50:	7b7a      	ldrb	r2, [r7, #13]
 810ba52:	4908      	ldr	r1, [pc, #32]	@ (810ba74 <UARTEx_SetNbDataToProcess+0x98>)
 810ba54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 810ba56:	fb93 f3f2 	sdiv	r3, r3, r2
 810ba5a:	b29a      	uxth	r2, r3
 810ba5c:	687b      	ldr	r3, [r7, #4]
 810ba5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 810ba62:	bf00      	nop
 810ba64:	3714      	adds	r7, #20
 810ba66:	46bd      	mov	sp, r7
 810ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba6c:	4770      	bx	lr
 810ba6e:	bf00      	nop
 810ba70:	0810fe78 	.word	0x0810fe78
 810ba74:	0810fe80 	.word	0x0810fe80

0810ba78 <__NVIC_SetPriority>:
{
 810ba78:	b480      	push	{r7}
 810ba7a:	b083      	sub	sp, #12
 810ba7c:	af00      	add	r7, sp, #0
 810ba7e:	4603      	mov	r3, r0
 810ba80:	6039      	str	r1, [r7, #0]
 810ba82:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810ba84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ba88:	2b00      	cmp	r3, #0
 810ba8a:	db0a      	blt.n	810baa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810ba8c:	683b      	ldr	r3, [r7, #0]
 810ba8e:	b2da      	uxtb	r2, r3
 810ba90:	490c      	ldr	r1, [pc, #48]	@ (810bac4 <__NVIC_SetPriority+0x4c>)
 810ba92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810ba96:	0112      	lsls	r2, r2, #4
 810ba98:	b2d2      	uxtb	r2, r2
 810ba9a:	440b      	add	r3, r1
 810ba9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 810baa0:	e00a      	b.n	810bab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810baa2:	683b      	ldr	r3, [r7, #0]
 810baa4:	b2da      	uxtb	r2, r3
 810baa6:	4908      	ldr	r1, [pc, #32]	@ (810bac8 <__NVIC_SetPriority+0x50>)
 810baa8:	88fb      	ldrh	r3, [r7, #6]
 810baaa:	f003 030f 	and.w	r3, r3, #15
 810baae:	3b04      	subs	r3, #4
 810bab0:	0112      	lsls	r2, r2, #4
 810bab2:	b2d2      	uxtb	r2, r2
 810bab4:	440b      	add	r3, r1
 810bab6:	761a      	strb	r2, [r3, #24]
}
 810bab8:	bf00      	nop
 810baba:	370c      	adds	r7, #12
 810babc:	46bd      	mov	sp, r7
 810babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bac2:	4770      	bx	lr
 810bac4:	e000e100 	.word	0xe000e100
 810bac8:	e000ed00 	.word	0xe000ed00

0810bacc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 810bacc:	b580      	push	{r7, lr}
 810bace:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 810bad0:	4b05      	ldr	r3, [pc, #20]	@ (810bae8 <SysTick_Handler+0x1c>)
 810bad2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 810bad4:	f002 fd92 	bl	810e5fc <xTaskGetSchedulerState>
 810bad8:	4603      	mov	r3, r0
 810bada:	2b01      	cmp	r3, #1
 810badc:	d001      	beq.n	810bae2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 810bade:	f000 feeb 	bl	810c8b8 <xPortSysTickHandler>
  }
}
 810bae2:	bf00      	nop
 810bae4:	bd80      	pop	{r7, pc}
 810bae6:	bf00      	nop
 810bae8:	e000e010 	.word	0xe000e010

0810baec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 810baec:	b580      	push	{r7, lr}
 810baee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 810baf0:	2100      	movs	r1, #0
 810baf2:	f06f 0004 	mvn.w	r0, #4
 810baf6:	f7ff ffbf 	bl	810ba78 <__NVIC_SetPriority>
#endif
}
 810bafa:	bf00      	nop
 810bafc:	bd80      	pop	{r7, pc}
	...

0810bb00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 810bb00:	b480      	push	{r7}
 810bb02:	b083      	sub	sp, #12
 810bb04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bb06:	f3ef 8305 	mrs	r3, IPSR
 810bb0a:	603b      	str	r3, [r7, #0]
  return(result);
 810bb0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bb0e:	2b00      	cmp	r3, #0
 810bb10:	d003      	beq.n	810bb1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 810bb12:	f06f 0305 	mvn.w	r3, #5
 810bb16:	607b      	str	r3, [r7, #4]
 810bb18:	e00c      	b.n	810bb34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 810bb1a:	4b0a      	ldr	r3, [pc, #40]	@ (810bb44 <osKernelInitialize+0x44>)
 810bb1c:	681b      	ldr	r3, [r3, #0]
 810bb1e:	2b00      	cmp	r3, #0
 810bb20:	d105      	bne.n	810bb2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 810bb22:	4b08      	ldr	r3, [pc, #32]	@ (810bb44 <osKernelInitialize+0x44>)
 810bb24:	2201      	movs	r2, #1
 810bb26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 810bb28:	2300      	movs	r3, #0
 810bb2a:	607b      	str	r3, [r7, #4]
 810bb2c:	e002      	b.n	810bb34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 810bb2e:	f04f 33ff 	mov.w	r3, #4294967295
 810bb32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810bb34:	687b      	ldr	r3, [r7, #4]
}
 810bb36:	4618      	mov	r0, r3
 810bb38:	370c      	adds	r7, #12
 810bb3a:	46bd      	mov	sp, r7
 810bb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb40:	4770      	bx	lr
 810bb42:	bf00      	nop
 810bb44:	100006f0 	.word	0x100006f0

0810bb48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 810bb48:	b580      	push	{r7, lr}
 810bb4a:	b082      	sub	sp, #8
 810bb4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bb4e:	f3ef 8305 	mrs	r3, IPSR
 810bb52:	603b      	str	r3, [r7, #0]
  return(result);
 810bb54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bb56:	2b00      	cmp	r3, #0
 810bb58:	d003      	beq.n	810bb62 <osKernelStart+0x1a>
    stat = osErrorISR;
 810bb5a:	f06f 0305 	mvn.w	r3, #5
 810bb5e:	607b      	str	r3, [r7, #4]
 810bb60:	e010      	b.n	810bb84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 810bb62:	4b0b      	ldr	r3, [pc, #44]	@ (810bb90 <osKernelStart+0x48>)
 810bb64:	681b      	ldr	r3, [r3, #0]
 810bb66:	2b01      	cmp	r3, #1
 810bb68:	d109      	bne.n	810bb7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 810bb6a:	f7ff ffbf 	bl	810baec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 810bb6e:	4b08      	ldr	r3, [pc, #32]	@ (810bb90 <osKernelStart+0x48>)
 810bb70:	2202      	movs	r2, #2
 810bb72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 810bb74:	f002 f8bc 	bl	810dcf0 <vTaskStartScheduler>
      stat = osOK;
 810bb78:	2300      	movs	r3, #0
 810bb7a:	607b      	str	r3, [r7, #4]
 810bb7c:	e002      	b.n	810bb84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 810bb7e:	f04f 33ff 	mov.w	r3, #4294967295
 810bb82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 810bb84:	687b      	ldr	r3, [r7, #4]
}
 810bb86:	4618      	mov	r0, r3
 810bb88:	3708      	adds	r7, #8
 810bb8a:	46bd      	mov	sp, r7
 810bb8c:	bd80      	pop	{r7, pc}
 810bb8e:	bf00      	nop
 810bb90:	100006f0 	.word	0x100006f0

0810bb94 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 810bb94:	b580      	push	{r7, lr}
 810bb96:	b082      	sub	sp, #8
 810bb98:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bb9a:	f3ef 8305 	mrs	r3, IPSR
 810bb9e:	603b      	str	r3, [r7, #0]
  return(result);
 810bba0:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 810bba2:	2b00      	cmp	r3, #0
 810bba4:	d003      	beq.n	810bbae <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 810bba6:	f002 f9cf 	bl	810df48 <xTaskGetTickCountFromISR>
 810bbaa:	6078      	str	r0, [r7, #4]
 810bbac:	e002      	b.n	810bbb4 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 810bbae:	f002 f9bb 	bl	810df28 <xTaskGetTickCount>
 810bbb2:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 810bbb4:	687b      	ldr	r3, [r7, #4]
}
 810bbb6:	4618      	mov	r0, r3
 810bbb8:	3708      	adds	r7, #8
 810bbba:	46bd      	mov	sp, r7
 810bbbc:	bd80      	pop	{r7, pc}

0810bbbe <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 810bbbe:	b580      	push	{r7, lr}
 810bbc0:	b08e      	sub	sp, #56	@ 0x38
 810bbc2:	af04      	add	r7, sp, #16
 810bbc4:	60f8      	str	r0, [r7, #12]
 810bbc6:	60b9      	str	r1, [r7, #8]
 810bbc8:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 810bbca:	2300      	movs	r3, #0
 810bbcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bbce:	f3ef 8305 	mrs	r3, IPSR
 810bbd2:	617b      	str	r3, [r7, #20]
  return(result);
 810bbd4:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 810bbd6:	2b00      	cmp	r3, #0
 810bbd8:	d17e      	bne.n	810bcd8 <osThreadNew+0x11a>
 810bbda:	68fb      	ldr	r3, [r7, #12]
 810bbdc:	2b00      	cmp	r3, #0
 810bbde:	d07b      	beq.n	810bcd8 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 810bbe0:	2380      	movs	r3, #128	@ 0x80
 810bbe2:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 810bbe4:	2318      	movs	r3, #24
 810bbe6:	61fb      	str	r3, [r7, #28]

    name = NULL;
 810bbe8:	2300      	movs	r3, #0
 810bbea:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 810bbec:	f04f 33ff 	mov.w	r3, #4294967295
 810bbf0:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 810bbf2:	687b      	ldr	r3, [r7, #4]
 810bbf4:	2b00      	cmp	r3, #0
 810bbf6:	d045      	beq.n	810bc84 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 810bbf8:	687b      	ldr	r3, [r7, #4]
 810bbfa:	681b      	ldr	r3, [r3, #0]
 810bbfc:	2b00      	cmp	r3, #0
 810bbfe:	d002      	beq.n	810bc06 <osThreadNew+0x48>
        name = attr->name;
 810bc00:	687b      	ldr	r3, [r7, #4]
 810bc02:	681b      	ldr	r3, [r3, #0]
 810bc04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 810bc06:	687b      	ldr	r3, [r7, #4]
 810bc08:	699b      	ldr	r3, [r3, #24]
 810bc0a:	2b00      	cmp	r3, #0
 810bc0c:	d002      	beq.n	810bc14 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 810bc0e:	687b      	ldr	r3, [r7, #4]
 810bc10:	699b      	ldr	r3, [r3, #24]
 810bc12:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 810bc14:	69fb      	ldr	r3, [r7, #28]
 810bc16:	2b00      	cmp	r3, #0
 810bc18:	d008      	beq.n	810bc2c <osThreadNew+0x6e>
 810bc1a:	69fb      	ldr	r3, [r7, #28]
 810bc1c:	2b38      	cmp	r3, #56	@ 0x38
 810bc1e:	d805      	bhi.n	810bc2c <osThreadNew+0x6e>
 810bc20:	687b      	ldr	r3, [r7, #4]
 810bc22:	685b      	ldr	r3, [r3, #4]
 810bc24:	f003 0301 	and.w	r3, r3, #1
 810bc28:	2b00      	cmp	r3, #0
 810bc2a:	d001      	beq.n	810bc30 <osThreadNew+0x72>
        return (NULL);
 810bc2c:	2300      	movs	r3, #0
 810bc2e:	e054      	b.n	810bcda <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 810bc30:	687b      	ldr	r3, [r7, #4]
 810bc32:	695b      	ldr	r3, [r3, #20]
 810bc34:	2b00      	cmp	r3, #0
 810bc36:	d003      	beq.n	810bc40 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 810bc38:	687b      	ldr	r3, [r7, #4]
 810bc3a:	695b      	ldr	r3, [r3, #20]
 810bc3c:	089b      	lsrs	r3, r3, #2
 810bc3e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810bc40:	687b      	ldr	r3, [r7, #4]
 810bc42:	689b      	ldr	r3, [r3, #8]
 810bc44:	2b00      	cmp	r3, #0
 810bc46:	d00e      	beq.n	810bc66 <osThreadNew+0xa8>
 810bc48:	687b      	ldr	r3, [r7, #4]
 810bc4a:	68db      	ldr	r3, [r3, #12]
 810bc4c:	2ba7      	cmp	r3, #167	@ 0xa7
 810bc4e:	d90a      	bls.n	810bc66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810bc50:	687b      	ldr	r3, [r7, #4]
 810bc52:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 810bc54:	2b00      	cmp	r3, #0
 810bc56:	d006      	beq.n	810bc66 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 810bc58:	687b      	ldr	r3, [r7, #4]
 810bc5a:	695b      	ldr	r3, [r3, #20]
 810bc5c:	2b00      	cmp	r3, #0
 810bc5e:	d002      	beq.n	810bc66 <osThreadNew+0xa8>
        mem = 1;
 810bc60:	2301      	movs	r3, #1
 810bc62:	61bb      	str	r3, [r7, #24]
 810bc64:	e010      	b.n	810bc88 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 810bc66:	687b      	ldr	r3, [r7, #4]
 810bc68:	689b      	ldr	r3, [r3, #8]
 810bc6a:	2b00      	cmp	r3, #0
 810bc6c:	d10c      	bne.n	810bc88 <osThreadNew+0xca>
 810bc6e:	687b      	ldr	r3, [r7, #4]
 810bc70:	68db      	ldr	r3, [r3, #12]
 810bc72:	2b00      	cmp	r3, #0
 810bc74:	d108      	bne.n	810bc88 <osThreadNew+0xca>
 810bc76:	687b      	ldr	r3, [r7, #4]
 810bc78:	691b      	ldr	r3, [r3, #16]
 810bc7a:	2b00      	cmp	r3, #0
 810bc7c:	d104      	bne.n	810bc88 <osThreadNew+0xca>
          mem = 0;
 810bc7e:	2300      	movs	r3, #0
 810bc80:	61bb      	str	r3, [r7, #24]
 810bc82:	e001      	b.n	810bc88 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 810bc84:	2300      	movs	r3, #0
 810bc86:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 810bc88:	69bb      	ldr	r3, [r7, #24]
 810bc8a:	2b01      	cmp	r3, #1
 810bc8c:	d110      	bne.n	810bcb0 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810bc8e:	687b      	ldr	r3, [r7, #4]
 810bc90:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 810bc92:	687a      	ldr	r2, [r7, #4]
 810bc94:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 810bc96:	9202      	str	r2, [sp, #8]
 810bc98:	9301      	str	r3, [sp, #4]
 810bc9a:	69fb      	ldr	r3, [r7, #28]
 810bc9c:	9300      	str	r3, [sp, #0]
 810bc9e:	68bb      	ldr	r3, [r7, #8]
 810bca0:	6a3a      	ldr	r2, [r7, #32]
 810bca2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bca4:	68f8      	ldr	r0, [r7, #12]
 810bca6:	f001 fdaf 	bl	810d808 <xTaskCreateStatic>
 810bcaa:	4603      	mov	r3, r0
 810bcac:	613b      	str	r3, [r7, #16]
 810bcae:	e013      	b.n	810bcd8 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 810bcb0:	69bb      	ldr	r3, [r7, #24]
 810bcb2:	2b00      	cmp	r3, #0
 810bcb4:	d110      	bne.n	810bcd8 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 810bcb6:	6a3b      	ldr	r3, [r7, #32]
 810bcb8:	b29a      	uxth	r2, r3
 810bcba:	f107 0310 	add.w	r3, r7, #16
 810bcbe:	9301      	str	r3, [sp, #4]
 810bcc0:	69fb      	ldr	r3, [r7, #28]
 810bcc2:	9300      	str	r3, [sp, #0]
 810bcc4:	68bb      	ldr	r3, [r7, #8]
 810bcc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810bcc8:	68f8      	ldr	r0, [r7, #12]
 810bcca:	f001 fdfd 	bl	810d8c8 <xTaskCreate>
 810bcce:	4603      	mov	r3, r0
 810bcd0:	2b01      	cmp	r3, #1
 810bcd2:	d001      	beq.n	810bcd8 <osThreadNew+0x11a>
            hTask = NULL;
 810bcd4:	2300      	movs	r3, #0
 810bcd6:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 810bcd8:	693b      	ldr	r3, [r7, #16]
}
 810bcda:	4618      	mov	r0, r3
 810bcdc:	3728      	adds	r7, #40	@ 0x28
 810bcde:	46bd      	mov	sp, r7
 810bce0:	bd80      	pop	{r7, pc}

0810bce2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 810bce2:	b580      	push	{r7, lr}
 810bce4:	b084      	sub	sp, #16
 810bce6:	af00      	add	r7, sp, #0
 810bce8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bcea:	f3ef 8305 	mrs	r3, IPSR
 810bcee:	60bb      	str	r3, [r7, #8]
  return(result);
 810bcf0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 810bcf2:	2b00      	cmp	r3, #0
 810bcf4:	d003      	beq.n	810bcfe <osDelay+0x1c>
    stat = osErrorISR;
 810bcf6:	f06f 0305 	mvn.w	r3, #5
 810bcfa:	60fb      	str	r3, [r7, #12]
 810bcfc:	e007      	b.n	810bd0e <osDelay+0x2c>
  }
  else {
    stat = osOK;
 810bcfe:	2300      	movs	r3, #0
 810bd00:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 810bd02:	687b      	ldr	r3, [r7, #4]
 810bd04:	2b00      	cmp	r3, #0
 810bd06:	d002      	beq.n	810bd0e <osDelay+0x2c>
      vTaskDelay(ticks);
 810bd08:	6878      	ldr	r0, [r7, #4]
 810bd0a:	f001 ffbb 	bl	810dc84 <vTaskDelay>
    }
  }

  return (stat);
 810bd0e:	68fb      	ldr	r3, [r7, #12]
}
 810bd10:	4618      	mov	r0, r3
 810bd12:	3710      	adds	r7, #16
 810bd14:	46bd      	mov	sp, r7
 810bd16:	bd80      	pop	{r7, pc}

0810bd18 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 810bd18:	b580      	push	{r7, lr}
 810bd1a:	b086      	sub	sp, #24
 810bd1c:	af00      	add	r7, sp, #0
 810bd1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bd20:	f3ef 8305 	mrs	r3, IPSR
 810bd24:	60fb      	str	r3, [r7, #12]
  return(result);
 810bd26:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 810bd28:	2b00      	cmp	r3, #0
 810bd2a:	d003      	beq.n	810bd34 <osDelayUntil+0x1c>
    stat = osErrorISR;
 810bd2c:	f06f 0305 	mvn.w	r3, #5
 810bd30:	617b      	str	r3, [r7, #20]
 810bd32:	e019      	b.n	810bd68 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 810bd34:	2300      	movs	r3, #0
 810bd36:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 810bd38:	f002 f8f6 	bl	810df28 <xTaskGetTickCount>
 810bd3c:	4603      	mov	r3, r0
 810bd3e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 810bd40:	68bb      	ldr	r3, [r7, #8]
 810bd42:	687a      	ldr	r2, [r7, #4]
 810bd44:	1ad3      	subs	r3, r2, r3
 810bd46:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 810bd48:	693b      	ldr	r3, [r7, #16]
 810bd4a:	2b00      	cmp	r3, #0
 810bd4c:	d009      	beq.n	810bd62 <osDelayUntil+0x4a>
 810bd4e:	693b      	ldr	r3, [r7, #16]
 810bd50:	2b00      	cmp	r3, #0
 810bd52:	db06      	blt.n	810bd62 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 810bd54:	f107 0308 	add.w	r3, r7, #8
 810bd58:	6939      	ldr	r1, [r7, #16]
 810bd5a:	4618      	mov	r0, r3
 810bd5c:	f001 ff12 	bl	810db84 <vTaskDelayUntil>
 810bd60:	e002      	b.n	810bd68 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 810bd62:	f06f 0303 	mvn.w	r3, #3
 810bd66:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 810bd68:	697b      	ldr	r3, [r7, #20]
}
 810bd6a:	4618      	mov	r0, r3
 810bd6c:	3718      	adds	r7, #24
 810bd6e:	46bd      	mov	sp, r7
 810bd70:	bd80      	pop	{r7, pc}

0810bd72 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 810bd72:	b580      	push	{r7, lr}
 810bd74:	b088      	sub	sp, #32
 810bd76:	af00      	add	r7, sp, #0
 810bd78:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 810bd7a:	2300      	movs	r3, #0
 810bd7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bd7e:	f3ef 8305 	mrs	r3, IPSR
 810bd82:	60bb      	str	r3, [r7, #8]
  return(result);
 810bd84:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 810bd86:	2b00      	cmp	r3, #0
 810bd88:	d174      	bne.n	810be74 <osMutexNew+0x102>
    if (attr != NULL) {
 810bd8a:	687b      	ldr	r3, [r7, #4]
 810bd8c:	2b00      	cmp	r3, #0
 810bd8e:	d003      	beq.n	810bd98 <osMutexNew+0x26>
      type = attr->attr_bits;
 810bd90:	687b      	ldr	r3, [r7, #4]
 810bd92:	685b      	ldr	r3, [r3, #4]
 810bd94:	61bb      	str	r3, [r7, #24]
 810bd96:	e001      	b.n	810bd9c <osMutexNew+0x2a>
    } else {
      type = 0U;
 810bd98:	2300      	movs	r3, #0
 810bd9a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 810bd9c:	69bb      	ldr	r3, [r7, #24]
 810bd9e:	f003 0301 	and.w	r3, r3, #1
 810bda2:	2b00      	cmp	r3, #0
 810bda4:	d002      	beq.n	810bdac <osMutexNew+0x3a>
      rmtx = 1U;
 810bda6:	2301      	movs	r3, #1
 810bda8:	617b      	str	r3, [r7, #20]
 810bdaa:	e001      	b.n	810bdb0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 810bdac:	2300      	movs	r3, #0
 810bdae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 810bdb0:	69bb      	ldr	r3, [r7, #24]
 810bdb2:	f003 0308 	and.w	r3, r3, #8
 810bdb6:	2b00      	cmp	r3, #0
 810bdb8:	d15c      	bne.n	810be74 <osMutexNew+0x102>
      mem = -1;
 810bdba:	f04f 33ff 	mov.w	r3, #4294967295
 810bdbe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 810bdc0:	687b      	ldr	r3, [r7, #4]
 810bdc2:	2b00      	cmp	r3, #0
 810bdc4:	d015      	beq.n	810bdf2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 810bdc6:	687b      	ldr	r3, [r7, #4]
 810bdc8:	689b      	ldr	r3, [r3, #8]
 810bdca:	2b00      	cmp	r3, #0
 810bdcc:	d006      	beq.n	810bddc <osMutexNew+0x6a>
 810bdce:	687b      	ldr	r3, [r7, #4]
 810bdd0:	68db      	ldr	r3, [r3, #12]
 810bdd2:	2b4f      	cmp	r3, #79	@ 0x4f
 810bdd4:	d902      	bls.n	810bddc <osMutexNew+0x6a>
          mem = 1;
 810bdd6:	2301      	movs	r3, #1
 810bdd8:	613b      	str	r3, [r7, #16]
 810bdda:	e00c      	b.n	810bdf6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 810bddc:	687b      	ldr	r3, [r7, #4]
 810bdde:	689b      	ldr	r3, [r3, #8]
 810bde0:	2b00      	cmp	r3, #0
 810bde2:	d108      	bne.n	810bdf6 <osMutexNew+0x84>
 810bde4:	687b      	ldr	r3, [r7, #4]
 810bde6:	68db      	ldr	r3, [r3, #12]
 810bde8:	2b00      	cmp	r3, #0
 810bdea:	d104      	bne.n	810bdf6 <osMutexNew+0x84>
            mem = 0;
 810bdec:	2300      	movs	r3, #0
 810bdee:	613b      	str	r3, [r7, #16]
 810bdf0:	e001      	b.n	810bdf6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 810bdf2:	2300      	movs	r3, #0
 810bdf4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 810bdf6:	693b      	ldr	r3, [r7, #16]
 810bdf8:	2b01      	cmp	r3, #1
 810bdfa:	d112      	bne.n	810be22 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 810bdfc:	697b      	ldr	r3, [r7, #20]
 810bdfe:	2b00      	cmp	r3, #0
 810be00:	d007      	beq.n	810be12 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 810be02:	687b      	ldr	r3, [r7, #4]
 810be04:	689b      	ldr	r3, [r3, #8]
 810be06:	4619      	mov	r1, r3
 810be08:	2004      	movs	r0, #4
 810be0a:	f000 ff5e 	bl	810ccca <xQueueCreateMutexStatic>
 810be0e:	61f8      	str	r0, [r7, #28]
 810be10:	e016      	b.n	810be40 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 810be12:	687b      	ldr	r3, [r7, #4]
 810be14:	689b      	ldr	r3, [r3, #8]
 810be16:	4619      	mov	r1, r3
 810be18:	2001      	movs	r0, #1
 810be1a:	f000 ff56 	bl	810ccca <xQueueCreateMutexStatic>
 810be1e:	61f8      	str	r0, [r7, #28]
 810be20:	e00e      	b.n	810be40 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 810be22:	693b      	ldr	r3, [r7, #16]
 810be24:	2b00      	cmp	r3, #0
 810be26:	d10b      	bne.n	810be40 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 810be28:	697b      	ldr	r3, [r7, #20]
 810be2a:	2b00      	cmp	r3, #0
 810be2c:	d004      	beq.n	810be38 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 810be2e:	2004      	movs	r0, #4
 810be30:	f000 ff33 	bl	810cc9a <xQueueCreateMutex>
 810be34:	61f8      	str	r0, [r7, #28]
 810be36:	e003      	b.n	810be40 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 810be38:	2001      	movs	r0, #1
 810be3a:	f000 ff2e 	bl	810cc9a <xQueueCreateMutex>
 810be3e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 810be40:	69fb      	ldr	r3, [r7, #28]
 810be42:	2b00      	cmp	r3, #0
 810be44:	d00c      	beq.n	810be60 <osMutexNew+0xee>
        if (attr != NULL) {
 810be46:	687b      	ldr	r3, [r7, #4]
 810be48:	2b00      	cmp	r3, #0
 810be4a:	d003      	beq.n	810be54 <osMutexNew+0xe2>
          name = attr->name;
 810be4c:	687b      	ldr	r3, [r7, #4]
 810be4e:	681b      	ldr	r3, [r3, #0]
 810be50:	60fb      	str	r3, [r7, #12]
 810be52:	e001      	b.n	810be58 <osMutexNew+0xe6>
        } else {
          name = NULL;
 810be54:	2300      	movs	r3, #0
 810be56:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 810be58:	68f9      	ldr	r1, [r7, #12]
 810be5a:	69f8      	ldr	r0, [r7, #28]
 810be5c:	f001 fc76 	bl	810d74c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 810be60:	69fb      	ldr	r3, [r7, #28]
 810be62:	2b00      	cmp	r3, #0
 810be64:	d006      	beq.n	810be74 <osMutexNew+0x102>
 810be66:	697b      	ldr	r3, [r7, #20]
 810be68:	2b00      	cmp	r3, #0
 810be6a:	d003      	beq.n	810be74 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 810be6c:	69fb      	ldr	r3, [r7, #28]
 810be6e:	f043 0301 	orr.w	r3, r3, #1
 810be72:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 810be74:	69fb      	ldr	r3, [r7, #28]
}
 810be76:	4618      	mov	r0, r3
 810be78:	3720      	adds	r7, #32
 810be7a:	46bd      	mov	sp, r7
 810be7c:	bd80      	pop	{r7, pc}

0810be7e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 810be7e:	b580      	push	{r7, lr}
 810be80:	b086      	sub	sp, #24
 810be82:	af00      	add	r7, sp, #0
 810be84:	6078      	str	r0, [r7, #4]
 810be86:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810be88:	687b      	ldr	r3, [r7, #4]
 810be8a:	f023 0301 	bic.w	r3, r3, #1
 810be8e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810be90:	687b      	ldr	r3, [r7, #4]
 810be92:	f003 0301 	and.w	r3, r3, #1
 810be96:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810be98:	2300      	movs	r3, #0
 810be9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810be9c:	f3ef 8305 	mrs	r3, IPSR
 810bea0:	60bb      	str	r3, [r7, #8]
  return(result);
 810bea2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810bea4:	2b00      	cmp	r3, #0
 810bea6:	d003      	beq.n	810beb0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 810bea8:	f06f 0305 	mvn.w	r3, #5
 810beac:	617b      	str	r3, [r7, #20]
 810beae:	e02c      	b.n	810bf0a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 810beb0:	693b      	ldr	r3, [r7, #16]
 810beb2:	2b00      	cmp	r3, #0
 810beb4:	d103      	bne.n	810bebe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 810beb6:	f06f 0303 	mvn.w	r3, #3
 810beba:	617b      	str	r3, [r7, #20]
 810bebc:	e025      	b.n	810bf0a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 810bebe:	68fb      	ldr	r3, [r7, #12]
 810bec0:	2b00      	cmp	r3, #0
 810bec2:	d011      	beq.n	810bee8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 810bec4:	6839      	ldr	r1, [r7, #0]
 810bec6:	6938      	ldr	r0, [r7, #16]
 810bec8:	f000 ff4f 	bl	810cd6a <xQueueTakeMutexRecursive>
 810becc:	4603      	mov	r3, r0
 810bece:	2b01      	cmp	r3, #1
 810bed0:	d01b      	beq.n	810bf0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810bed2:	683b      	ldr	r3, [r7, #0]
 810bed4:	2b00      	cmp	r3, #0
 810bed6:	d003      	beq.n	810bee0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 810bed8:	f06f 0301 	mvn.w	r3, #1
 810bedc:	617b      	str	r3, [r7, #20]
 810bede:	e014      	b.n	810bf0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810bee0:	f06f 0302 	mvn.w	r3, #2
 810bee4:	617b      	str	r3, [r7, #20]
 810bee6:	e010      	b.n	810bf0a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 810bee8:	6839      	ldr	r1, [r7, #0]
 810beea:	6938      	ldr	r0, [r7, #16]
 810beec:	f001 f9f6 	bl	810d2dc <xQueueSemaphoreTake>
 810bef0:	4603      	mov	r3, r0
 810bef2:	2b01      	cmp	r3, #1
 810bef4:	d009      	beq.n	810bf0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 810bef6:	683b      	ldr	r3, [r7, #0]
 810bef8:	2b00      	cmp	r3, #0
 810befa:	d003      	beq.n	810bf04 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 810befc:	f06f 0301 	mvn.w	r3, #1
 810bf00:	617b      	str	r3, [r7, #20]
 810bf02:	e002      	b.n	810bf0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 810bf04:	f06f 0302 	mvn.w	r3, #2
 810bf08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 810bf0a:	697b      	ldr	r3, [r7, #20]
}
 810bf0c:	4618      	mov	r0, r3
 810bf0e:	3718      	adds	r7, #24
 810bf10:	46bd      	mov	sp, r7
 810bf12:	bd80      	pop	{r7, pc}

0810bf14 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 810bf14:	b580      	push	{r7, lr}
 810bf16:	b086      	sub	sp, #24
 810bf18:	af00      	add	r7, sp, #0
 810bf1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 810bf1c:	687b      	ldr	r3, [r7, #4]
 810bf1e:	f023 0301 	bic.w	r3, r3, #1
 810bf22:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 810bf24:	687b      	ldr	r3, [r7, #4]
 810bf26:	f003 0301 	and.w	r3, r3, #1
 810bf2a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 810bf2c:	2300      	movs	r3, #0
 810bf2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 810bf30:	f3ef 8305 	mrs	r3, IPSR
 810bf34:	60bb      	str	r3, [r7, #8]
  return(result);
 810bf36:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 810bf38:	2b00      	cmp	r3, #0
 810bf3a:	d003      	beq.n	810bf44 <osMutexRelease+0x30>
    stat = osErrorISR;
 810bf3c:	f06f 0305 	mvn.w	r3, #5
 810bf40:	617b      	str	r3, [r7, #20]
 810bf42:	e01f      	b.n	810bf84 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 810bf44:	693b      	ldr	r3, [r7, #16]
 810bf46:	2b00      	cmp	r3, #0
 810bf48:	d103      	bne.n	810bf52 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 810bf4a:	f06f 0303 	mvn.w	r3, #3
 810bf4e:	617b      	str	r3, [r7, #20]
 810bf50:	e018      	b.n	810bf84 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 810bf52:	68fb      	ldr	r3, [r7, #12]
 810bf54:	2b00      	cmp	r3, #0
 810bf56:	d009      	beq.n	810bf6c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 810bf58:	6938      	ldr	r0, [r7, #16]
 810bf5a:	f000 fed1 	bl	810cd00 <xQueueGiveMutexRecursive>
 810bf5e:	4603      	mov	r3, r0
 810bf60:	2b01      	cmp	r3, #1
 810bf62:	d00f      	beq.n	810bf84 <osMutexRelease+0x70>
        stat = osErrorResource;
 810bf64:	f06f 0302 	mvn.w	r3, #2
 810bf68:	617b      	str	r3, [r7, #20]
 810bf6a:	e00b      	b.n	810bf84 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 810bf6c:	2300      	movs	r3, #0
 810bf6e:	2200      	movs	r2, #0
 810bf70:	2100      	movs	r1, #0
 810bf72:	6938      	ldr	r0, [r7, #16]
 810bf74:	f000 ff30 	bl	810cdd8 <xQueueGenericSend>
 810bf78:	4603      	mov	r3, r0
 810bf7a:	2b01      	cmp	r3, #1
 810bf7c:	d002      	beq.n	810bf84 <osMutexRelease+0x70>
        stat = osErrorResource;
 810bf7e:	f06f 0302 	mvn.w	r3, #2
 810bf82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 810bf84:	697b      	ldr	r3, [r7, #20]
}
 810bf86:	4618      	mov	r0, r3
 810bf88:	3718      	adds	r7, #24
 810bf8a:	46bd      	mov	sp, r7
 810bf8c:	bd80      	pop	{r7, pc}
	...

0810bf90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 810bf90:	b480      	push	{r7}
 810bf92:	b085      	sub	sp, #20
 810bf94:	af00      	add	r7, sp, #0
 810bf96:	60f8      	str	r0, [r7, #12]
 810bf98:	60b9      	str	r1, [r7, #8]
 810bf9a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 810bf9c:	68fb      	ldr	r3, [r7, #12]
 810bf9e:	4a07      	ldr	r2, [pc, #28]	@ (810bfbc <vApplicationGetIdleTaskMemory+0x2c>)
 810bfa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 810bfa2:	68bb      	ldr	r3, [r7, #8]
 810bfa4:	4a06      	ldr	r2, [pc, #24]	@ (810bfc0 <vApplicationGetIdleTaskMemory+0x30>)
 810bfa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 810bfa8:	687b      	ldr	r3, [r7, #4]
 810bfaa:	2280      	movs	r2, #128	@ 0x80
 810bfac:	601a      	str	r2, [r3, #0]
}
 810bfae:	bf00      	nop
 810bfb0:	3714      	adds	r7, #20
 810bfb2:	46bd      	mov	sp, r7
 810bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfb8:	4770      	bx	lr
 810bfba:	bf00      	nop
 810bfbc:	100006f4 	.word	0x100006f4
 810bfc0:	1000079c 	.word	0x1000079c

0810bfc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 810bfc4:	b480      	push	{r7}
 810bfc6:	b085      	sub	sp, #20
 810bfc8:	af00      	add	r7, sp, #0
 810bfca:	60f8      	str	r0, [r7, #12]
 810bfcc:	60b9      	str	r1, [r7, #8]
 810bfce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 810bfd0:	68fb      	ldr	r3, [r7, #12]
 810bfd2:	4a07      	ldr	r2, [pc, #28]	@ (810bff0 <vApplicationGetTimerTaskMemory+0x2c>)
 810bfd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 810bfd6:	68bb      	ldr	r3, [r7, #8]
 810bfd8:	4a06      	ldr	r2, [pc, #24]	@ (810bff4 <vApplicationGetTimerTaskMemory+0x30>)
 810bfda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 810bfdc:	687b      	ldr	r3, [r7, #4]
 810bfde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810bfe2:	601a      	str	r2, [r3, #0]
}
 810bfe4:	bf00      	nop
 810bfe6:	3714      	adds	r7, #20
 810bfe8:	46bd      	mov	sp, r7
 810bfea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfee:	4770      	bx	lr
 810bff0:	1000099c 	.word	0x1000099c
 810bff4:	10000a44 	.word	0x10000a44

0810bff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 810bff8:	b580      	push	{r7, lr}
 810bffa:	b08a      	sub	sp, #40	@ 0x28
 810bffc:	af00      	add	r7, sp, #0
 810bffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 810c000:	2300      	movs	r3, #0
 810c002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 810c004:	f001 fee4 	bl	810ddd0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 810c008:	4b5c      	ldr	r3, [pc, #368]	@ (810c17c <pvPortMalloc+0x184>)
 810c00a:	681b      	ldr	r3, [r3, #0]
 810c00c:	2b00      	cmp	r3, #0
 810c00e:	d101      	bne.n	810c014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 810c010:	f000 f924 	bl	810c25c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 810c014:	4b5a      	ldr	r3, [pc, #360]	@ (810c180 <pvPortMalloc+0x188>)
 810c016:	681a      	ldr	r2, [r3, #0]
 810c018:	687b      	ldr	r3, [r7, #4]
 810c01a:	4013      	ands	r3, r2
 810c01c:	2b00      	cmp	r3, #0
 810c01e:	f040 8095 	bne.w	810c14c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 810c022:	687b      	ldr	r3, [r7, #4]
 810c024:	2b00      	cmp	r3, #0
 810c026:	d01e      	beq.n	810c066 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 810c028:	2208      	movs	r2, #8
 810c02a:	687b      	ldr	r3, [r7, #4]
 810c02c:	4413      	add	r3, r2
 810c02e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 810c030:	687b      	ldr	r3, [r7, #4]
 810c032:	f003 0307 	and.w	r3, r3, #7
 810c036:	2b00      	cmp	r3, #0
 810c038:	d015      	beq.n	810c066 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 810c03a:	687b      	ldr	r3, [r7, #4]
 810c03c:	f023 0307 	bic.w	r3, r3, #7
 810c040:	3308      	adds	r3, #8
 810c042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c044:	687b      	ldr	r3, [r7, #4]
 810c046:	f003 0307 	and.w	r3, r3, #7
 810c04a:	2b00      	cmp	r3, #0
 810c04c:	d00b      	beq.n	810c066 <pvPortMalloc+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 810c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c052:	f383 8811 	msr	BASEPRI, r3
 810c056:	f3bf 8f6f 	isb	sy
 810c05a:	f3bf 8f4f 	dsb	sy
 810c05e:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 810c060:	bf00      	nop
 810c062:	bf00      	nop
 810c064:	e7fd      	b.n	810c062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 810c066:	687b      	ldr	r3, [r7, #4]
 810c068:	2b00      	cmp	r3, #0
 810c06a:	d06f      	beq.n	810c14c <pvPortMalloc+0x154>
 810c06c:	4b45      	ldr	r3, [pc, #276]	@ (810c184 <pvPortMalloc+0x18c>)
 810c06e:	681b      	ldr	r3, [r3, #0]
 810c070:	687a      	ldr	r2, [r7, #4]
 810c072:	429a      	cmp	r2, r3
 810c074:	d86a      	bhi.n	810c14c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 810c076:	4b44      	ldr	r3, [pc, #272]	@ (810c188 <pvPortMalloc+0x190>)
 810c078:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 810c07a:	4b43      	ldr	r3, [pc, #268]	@ (810c188 <pvPortMalloc+0x190>)
 810c07c:	681b      	ldr	r3, [r3, #0]
 810c07e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c080:	e004      	b.n	810c08c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 810c082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c084:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 810c086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c088:	681b      	ldr	r3, [r3, #0]
 810c08a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 810c08c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c08e:	685b      	ldr	r3, [r3, #4]
 810c090:	687a      	ldr	r2, [r7, #4]
 810c092:	429a      	cmp	r2, r3
 810c094:	d903      	bls.n	810c09e <pvPortMalloc+0xa6>
 810c096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c098:	681b      	ldr	r3, [r3, #0]
 810c09a:	2b00      	cmp	r3, #0
 810c09c:	d1f1      	bne.n	810c082 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 810c09e:	4b37      	ldr	r3, [pc, #220]	@ (810c17c <pvPortMalloc+0x184>)
 810c0a0:	681b      	ldr	r3, [r3, #0]
 810c0a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810c0a4:	429a      	cmp	r2, r3
 810c0a6:	d051      	beq.n	810c14c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 810c0a8:	6a3b      	ldr	r3, [r7, #32]
 810c0aa:	681b      	ldr	r3, [r3, #0]
 810c0ac:	2208      	movs	r2, #8
 810c0ae:	4413      	add	r3, r2
 810c0b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 810c0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c0b4:	681a      	ldr	r2, [r3, #0]
 810c0b6:	6a3b      	ldr	r3, [r7, #32]
 810c0b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 810c0ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c0bc:	685a      	ldr	r2, [r3, #4]
 810c0be:	687b      	ldr	r3, [r7, #4]
 810c0c0:	1ad2      	subs	r2, r2, r3
 810c0c2:	2308      	movs	r3, #8
 810c0c4:	005b      	lsls	r3, r3, #1
 810c0c6:	429a      	cmp	r2, r3
 810c0c8:	d920      	bls.n	810c10c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 810c0ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810c0cc:	687b      	ldr	r3, [r7, #4]
 810c0ce:	4413      	add	r3, r2
 810c0d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 810c0d2:	69bb      	ldr	r3, [r7, #24]
 810c0d4:	f003 0307 	and.w	r3, r3, #7
 810c0d8:	2b00      	cmp	r3, #0
 810c0da:	d00b      	beq.n	810c0f4 <pvPortMalloc+0xfc>
	__asm volatile
 810c0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c0e0:	f383 8811 	msr	BASEPRI, r3
 810c0e4:	f3bf 8f6f 	isb	sy
 810c0e8:	f3bf 8f4f 	dsb	sy
 810c0ec:	613b      	str	r3, [r7, #16]
}
 810c0ee:	bf00      	nop
 810c0f0:	bf00      	nop
 810c0f2:	e7fd      	b.n	810c0f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 810c0f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c0f6:	685a      	ldr	r2, [r3, #4]
 810c0f8:	687b      	ldr	r3, [r7, #4]
 810c0fa:	1ad2      	subs	r2, r2, r3
 810c0fc:	69bb      	ldr	r3, [r7, #24]
 810c0fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 810c100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c102:	687a      	ldr	r2, [r7, #4]
 810c104:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 810c106:	69b8      	ldr	r0, [r7, #24]
 810c108:	f000 f90a 	bl	810c320 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 810c10c:	4b1d      	ldr	r3, [pc, #116]	@ (810c184 <pvPortMalloc+0x18c>)
 810c10e:	681a      	ldr	r2, [r3, #0]
 810c110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c112:	685b      	ldr	r3, [r3, #4]
 810c114:	1ad3      	subs	r3, r2, r3
 810c116:	4a1b      	ldr	r2, [pc, #108]	@ (810c184 <pvPortMalloc+0x18c>)
 810c118:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 810c11a:	4b1a      	ldr	r3, [pc, #104]	@ (810c184 <pvPortMalloc+0x18c>)
 810c11c:	681a      	ldr	r2, [r3, #0]
 810c11e:	4b1b      	ldr	r3, [pc, #108]	@ (810c18c <pvPortMalloc+0x194>)
 810c120:	681b      	ldr	r3, [r3, #0]
 810c122:	429a      	cmp	r2, r3
 810c124:	d203      	bcs.n	810c12e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 810c126:	4b17      	ldr	r3, [pc, #92]	@ (810c184 <pvPortMalloc+0x18c>)
 810c128:	681b      	ldr	r3, [r3, #0]
 810c12a:	4a18      	ldr	r2, [pc, #96]	@ (810c18c <pvPortMalloc+0x194>)
 810c12c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 810c12e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c130:	685a      	ldr	r2, [r3, #4]
 810c132:	4b13      	ldr	r3, [pc, #76]	@ (810c180 <pvPortMalloc+0x188>)
 810c134:	681b      	ldr	r3, [r3, #0]
 810c136:	431a      	orrs	r2, r3
 810c138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c13a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 810c13c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810c13e:	2200      	movs	r2, #0
 810c140:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 810c142:	4b13      	ldr	r3, [pc, #76]	@ (810c190 <pvPortMalloc+0x198>)
 810c144:	681b      	ldr	r3, [r3, #0]
 810c146:	3301      	adds	r3, #1
 810c148:	4a11      	ldr	r2, [pc, #68]	@ (810c190 <pvPortMalloc+0x198>)
 810c14a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 810c14c:	f001 fe4e 	bl	810ddec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 810c150:	69fb      	ldr	r3, [r7, #28]
 810c152:	f003 0307 	and.w	r3, r3, #7
 810c156:	2b00      	cmp	r3, #0
 810c158:	d00b      	beq.n	810c172 <pvPortMalloc+0x17a>
	__asm volatile
 810c15a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c15e:	f383 8811 	msr	BASEPRI, r3
 810c162:	f3bf 8f6f 	isb	sy
 810c166:	f3bf 8f4f 	dsb	sy
 810c16a:	60fb      	str	r3, [r7, #12]
}
 810c16c:	bf00      	nop
 810c16e:	bf00      	nop
 810c170:	e7fd      	b.n	810c16e <pvPortMalloc+0x176>
	return pvReturn;
 810c172:	69fb      	ldr	r3, [r7, #28]
}
 810c174:	4618      	mov	r0, r3
 810c176:	3728      	adds	r7, #40	@ 0x28
 810c178:	46bd      	mov	sp, r7
 810c17a:	bd80      	pop	{r7, pc}
 810c17c:	10004a4c 	.word	0x10004a4c
 810c180:	10004a60 	.word	0x10004a60
 810c184:	10004a50 	.word	0x10004a50
 810c188:	10004a44 	.word	0x10004a44
 810c18c:	10004a54 	.word	0x10004a54
 810c190:	10004a58 	.word	0x10004a58

0810c194 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 810c194:	b580      	push	{r7, lr}
 810c196:	b086      	sub	sp, #24
 810c198:	af00      	add	r7, sp, #0
 810c19a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 810c19c:	687b      	ldr	r3, [r7, #4]
 810c19e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 810c1a0:	687b      	ldr	r3, [r7, #4]
 810c1a2:	2b00      	cmp	r3, #0
 810c1a4:	d04f      	beq.n	810c246 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 810c1a6:	2308      	movs	r3, #8
 810c1a8:	425b      	negs	r3, r3
 810c1aa:	697a      	ldr	r2, [r7, #20]
 810c1ac:	4413      	add	r3, r2
 810c1ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 810c1b0:	697b      	ldr	r3, [r7, #20]
 810c1b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 810c1b4:	693b      	ldr	r3, [r7, #16]
 810c1b6:	685a      	ldr	r2, [r3, #4]
 810c1b8:	4b25      	ldr	r3, [pc, #148]	@ (810c250 <vPortFree+0xbc>)
 810c1ba:	681b      	ldr	r3, [r3, #0]
 810c1bc:	4013      	ands	r3, r2
 810c1be:	2b00      	cmp	r3, #0
 810c1c0:	d10b      	bne.n	810c1da <vPortFree+0x46>
	__asm volatile
 810c1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c1c6:	f383 8811 	msr	BASEPRI, r3
 810c1ca:	f3bf 8f6f 	isb	sy
 810c1ce:	f3bf 8f4f 	dsb	sy
 810c1d2:	60fb      	str	r3, [r7, #12]
}
 810c1d4:	bf00      	nop
 810c1d6:	bf00      	nop
 810c1d8:	e7fd      	b.n	810c1d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 810c1da:	693b      	ldr	r3, [r7, #16]
 810c1dc:	681b      	ldr	r3, [r3, #0]
 810c1de:	2b00      	cmp	r3, #0
 810c1e0:	d00b      	beq.n	810c1fa <vPortFree+0x66>
	__asm volatile
 810c1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c1e6:	f383 8811 	msr	BASEPRI, r3
 810c1ea:	f3bf 8f6f 	isb	sy
 810c1ee:	f3bf 8f4f 	dsb	sy
 810c1f2:	60bb      	str	r3, [r7, #8]
}
 810c1f4:	bf00      	nop
 810c1f6:	bf00      	nop
 810c1f8:	e7fd      	b.n	810c1f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 810c1fa:	693b      	ldr	r3, [r7, #16]
 810c1fc:	685a      	ldr	r2, [r3, #4]
 810c1fe:	4b14      	ldr	r3, [pc, #80]	@ (810c250 <vPortFree+0xbc>)
 810c200:	681b      	ldr	r3, [r3, #0]
 810c202:	4013      	ands	r3, r2
 810c204:	2b00      	cmp	r3, #0
 810c206:	d01e      	beq.n	810c246 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 810c208:	693b      	ldr	r3, [r7, #16]
 810c20a:	681b      	ldr	r3, [r3, #0]
 810c20c:	2b00      	cmp	r3, #0
 810c20e:	d11a      	bne.n	810c246 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 810c210:	693b      	ldr	r3, [r7, #16]
 810c212:	685a      	ldr	r2, [r3, #4]
 810c214:	4b0e      	ldr	r3, [pc, #56]	@ (810c250 <vPortFree+0xbc>)
 810c216:	681b      	ldr	r3, [r3, #0]
 810c218:	43db      	mvns	r3, r3
 810c21a:	401a      	ands	r2, r3
 810c21c:	693b      	ldr	r3, [r7, #16]
 810c21e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 810c220:	f001 fdd6 	bl	810ddd0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 810c224:	693b      	ldr	r3, [r7, #16]
 810c226:	685a      	ldr	r2, [r3, #4]
 810c228:	4b0a      	ldr	r3, [pc, #40]	@ (810c254 <vPortFree+0xc0>)
 810c22a:	681b      	ldr	r3, [r3, #0]
 810c22c:	4413      	add	r3, r2
 810c22e:	4a09      	ldr	r2, [pc, #36]	@ (810c254 <vPortFree+0xc0>)
 810c230:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 810c232:	6938      	ldr	r0, [r7, #16]
 810c234:	f000 f874 	bl	810c320 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 810c238:	4b07      	ldr	r3, [pc, #28]	@ (810c258 <vPortFree+0xc4>)
 810c23a:	681b      	ldr	r3, [r3, #0]
 810c23c:	3301      	adds	r3, #1
 810c23e:	4a06      	ldr	r2, [pc, #24]	@ (810c258 <vPortFree+0xc4>)
 810c240:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 810c242:	f001 fdd3 	bl	810ddec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 810c246:	bf00      	nop
 810c248:	3718      	adds	r7, #24
 810c24a:	46bd      	mov	sp, r7
 810c24c:	bd80      	pop	{r7, pc}
 810c24e:	bf00      	nop
 810c250:	10004a60 	.word	0x10004a60
 810c254:	10004a50 	.word	0x10004a50
 810c258:	10004a5c 	.word	0x10004a5c

0810c25c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 810c25c:	b480      	push	{r7}
 810c25e:	b085      	sub	sp, #20
 810c260:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 810c262:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 810c266:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 810c268:	4b27      	ldr	r3, [pc, #156]	@ (810c308 <prvHeapInit+0xac>)
 810c26a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 810c26c:	68fb      	ldr	r3, [r7, #12]
 810c26e:	f003 0307 	and.w	r3, r3, #7
 810c272:	2b00      	cmp	r3, #0
 810c274:	d00c      	beq.n	810c290 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 810c276:	68fb      	ldr	r3, [r7, #12]
 810c278:	3307      	adds	r3, #7
 810c27a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c27c:	68fb      	ldr	r3, [r7, #12]
 810c27e:	f023 0307 	bic.w	r3, r3, #7
 810c282:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 810c284:	68ba      	ldr	r2, [r7, #8]
 810c286:	68fb      	ldr	r3, [r7, #12]
 810c288:	1ad3      	subs	r3, r2, r3
 810c28a:	4a1f      	ldr	r2, [pc, #124]	@ (810c308 <prvHeapInit+0xac>)
 810c28c:	4413      	add	r3, r2
 810c28e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 810c290:	68fb      	ldr	r3, [r7, #12]
 810c292:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 810c294:	4a1d      	ldr	r2, [pc, #116]	@ (810c30c <prvHeapInit+0xb0>)
 810c296:	687b      	ldr	r3, [r7, #4]
 810c298:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 810c29a:	4b1c      	ldr	r3, [pc, #112]	@ (810c30c <prvHeapInit+0xb0>)
 810c29c:	2200      	movs	r2, #0
 810c29e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 810c2a0:	687b      	ldr	r3, [r7, #4]
 810c2a2:	68ba      	ldr	r2, [r7, #8]
 810c2a4:	4413      	add	r3, r2
 810c2a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 810c2a8:	2208      	movs	r2, #8
 810c2aa:	68fb      	ldr	r3, [r7, #12]
 810c2ac:	1a9b      	subs	r3, r3, r2
 810c2ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 810c2b0:	68fb      	ldr	r3, [r7, #12]
 810c2b2:	f023 0307 	bic.w	r3, r3, #7
 810c2b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 810c2b8:	68fb      	ldr	r3, [r7, #12]
 810c2ba:	4a15      	ldr	r2, [pc, #84]	@ (810c310 <prvHeapInit+0xb4>)
 810c2bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 810c2be:	4b14      	ldr	r3, [pc, #80]	@ (810c310 <prvHeapInit+0xb4>)
 810c2c0:	681b      	ldr	r3, [r3, #0]
 810c2c2:	2200      	movs	r2, #0
 810c2c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 810c2c6:	4b12      	ldr	r3, [pc, #72]	@ (810c310 <prvHeapInit+0xb4>)
 810c2c8:	681b      	ldr	r3, [r3, #0]
 810c2ca:	2200      	movs	r2, #0
 810c2cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 810c2ce:	687b      	ldr	r3, [r7, #4]
 810c2d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 810c2d2:	683b      	ldr	r3, [r7, #0]
 810c2d4:	68fa      	ldr	r2, [r7, #12]
 810c2d6:	1ad2      	subs	r2, r2, r3
 810c2d8:	683b      	ldr	r3, [r7, #0]
 810c2da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 810c2dc:	4b0c      	ldr	r3, [pc, #48]	@ (810c310 <prvHeapInit+0xb4>)
 810c2de:	681a      	ldr	r2, [r3, #0]
 810c2e0:	683b      	ldr	r3, [r7, #0]
 810c2e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c2e4:	683b      	ldr	r3, [r7, #0]
 810c2e6:	685b      	ldr	r3, [r3, #4]
 810c2e8:	4a0a      	ldr	r2, [pc, #40]	@ (810c314 <prvHeapInit+0xb8>)
 810c2ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 810c2ec:	683b      	ldr	r3, [r7, #0]
 810c2ee:	685b      	ldr	r3, [r3, #4]
 810c2f0:	4a09      	ldr	r2, [pc, #36]	@ (810c318 <prvHeapInit+0xbc>)
 810c2f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 810c2f4:	4b09      	ldr	r3, [pc, #36]	@ (810c31c <prvHeapInit+0xc0>)
 810c2f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 810c2fa:	601a      	str	r2, [r3, #0]
}
 810c2fc:	bf00      	nop
 810c2fe:	3714      	adds	r7, #20
 810c300:	46bd      	mov	sp, r7
 810c302:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c306:	4770      	bx	lr
 810c308:	10000e44 	.word	0x10000e44
 810c30c:	10004a44 	.word	0x10004a44
 810c310:	10004a4c 	.word	0x10004a4c
 810c314:	10004a54 	.word	0x10004a54
 810c318:	10004a50 	.word	0x10004a50
 810c31c:	10004a60 	.word	0x10004a60

0810c320 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 810c320:	b480      	push	{r7}
 810c322:	b085      	sub	sp, #20
 810c324:	af00      	add	r7, sp, #0
 810c326:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 810c328:	4b28      	ldr	r3, [pc, #160]	@ (810c3cc <prvInsertBlockIntoFreeList+0xac>)
 810c32a:	60fb      	str	r3, [r7, #12]
 810c32c:	e002      	b.n	810c334 <prvInsertBlockIntoFreeList+0x14>
 810c32e:	68fb      	ldr	r3, [r7, #12]
 810c330:	681b      	ldr	r3, [r3, #0]
 810c332:	60fb      	str	r3, [r7, #12]
 810c334:	68fb      	ldr	r3, [r7, #12]
 810c336:	681b      	ldr	r3, [r3, #0]
 810c338:	687a      	ldr	r2, [r7, #4]
 810c33a:	429a      	cmp	r2, r3
 810c33c:	d8f7      	bhi.n	810c32e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 810c33e:	68fb      	ldr	r3, [r7, #12]
 810c340:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 810c342:	68fb      	ldr	r3, [r7, #12]
 810c344:	685b      	ldr	r3, [r3, #4]
 810c346:	68ba      	ldr	r2, [r7, #8]
 810c348:	4413      	add	r3, r2
 810c34a:	687a      	ldr	r2, [r7, #4]
 810c34c:	429a      	cmp	r2, r3
 810c34e:	d108      	bne.n	810c362 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 810c350:	68fb      	ldr	r3, [r7, #12]
 810c352:	685a      	ldr	r2, [r3, #4]
 810c354:	687b      	ldr	r3, [r7, #4]
 810c356:	685b      	ldr	r3, [r3, #4]
 810c358:	441a      	add	r2, r3
 810c35a:	68fb      	ldr	r3, [r7, #12]
 810c35c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 810c35e:	68fb      	ldr	r3, [r7, #12]
 810c360:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 810c362:	687b      	ldr	r3, [r7, #4]
 810c364:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 810c366:	687b      	ldr	r3, [r7, #4]
 810c368:	685b      	ldr	r3, [r3, #4]
 810c36a:	68ba      	ldr	r2, [r7, #8]
 810c36c:	441a      	add	r2, r3
 810c36e:	68fb      	ldr	r3, [r7, #12]
 810c370:	681b      	ldr	r3, [r3, #0]
 810c372:	429a      	cmp	r2, r3
 810c374:	d118      	bne.n	810c3a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 810c376:	68fb      	ldr	r3, [r7, #12]
 810c378:	681a      	ldr	r2, [r3, #0]
 810c37a:	4b15      	ldr	r3, [pc, #84]	@ (810c3d0 <prvInsertBlockIntoFreeList+0xb0>)
 810c37c:	681b      	ldr	r3, [r3, #0]
 810c37e:	429a      	cmp	r2, r3
 810c380:	d00d      	beq.n	810c39e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 810c382:	687b      	ldr	r3, [r7, #4]
 810c384:	685a      	ldr	r2, [r3, #4]
 810c386:	68fb      	ldr	r3, [r7, #12]
 810c388:	681b      	ldr	r3, [r3, #0]
 810c38a:	685b      	ldr	r3, [r3, #4]
 810c38c:	441a      	add	r2, r3
 810c38e:	687b      	ldr	r3, [r7, #4]
 810c390:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 810c392:	68fb      	ldr	r3, [r7, #12]
 810c394:	681b      	ldr	r3, [r3, #0]
 810c396:	681a      	ldr	r2, [r3, #0]
 810c398:	687b      	ldr	r3, [r7, #4]
 810c39a:	601a      	str	r2, [r3, #0]
 810c39c:	e008      	b.n	810c3b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 810c39e:	4b0c      	ldr	r3, [pc, #48]	@ (810c3d0 <prvInsertBlockIntoFreeList+0xb0>)
 810c3a0:	681a      	ldr	r2, [r3, #0]
 810c3a2:	687b      	ldr	r3, [r7, #4]
 810c3a4:	601a      	str	r2, [r3, #0]
 810c3a6:	e003      	b.n	810c3b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 810c3a8:	68fb      	ldr	r3, [r7, #12]
 810c3aa:	681a      	ldr	r2, [r3, #0]
 810c3ac:	687b      	ldr	r3, [r7, #4]
 810c3ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 810c3b0:	68fa      	ldr	r2, [r7, #12]
 810c3b2:	687b      	ldr	r3, [r7, #4]
 810c3b4:	429a      	cmp	r2, r3
 810c3b6:	d002      	beq.n	810c3be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 810c3b8:	68fb      	ldr	r3, [r7, #12]
 810c3ba:	687a      	ldr	r2, [r7, #4]
 810c3bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810c3be:	bf00      	nop
 810c3c0:	3714      	adds	r7, #20
 810c3c2:	46bd      	mov	sp, r7
 810c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c3c8:	4770      	bx	lr
 810c3ca:	bf00      	nop
 810c3cc:	10004a44 	.word	0x10004a44
 810c3d0:	10004a4c 	.word	0x10004a4c

0810c3d4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 810c3d4:	b480      	push	{r7}
 810c3d6:	b083      	sub	sp, #12
 810c3d8:	af00      	add	r7, sp, #0
 810c3da:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c3dc:	687b      	ldr	r3, [r7, #4]
 810c3de:	f103 0208 	add.w	r2, r3, #8
 810c3e2:	687b      	ldr	r3, [r7, #4]
 810c3e4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 810c3e6:	687b      	ldr	r3, [r7, #4]
 810c3e8:	f04f 32ff 	mov.w	r2, #4294967295
 810c3ec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c3ee:	687b      	ldr	r3, [r7, #4]
 810c3f0:	f103 0208 	add.w	r2, r3, #8
 810c3f4:	687b      	ldr	r3, [r7, #4]
 810c3f6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 810c3f8:	687b      	ldr	r3, [r7, #4]
 810c3fa:	f103 0208 	add.w	r2, r3, #8
 810c3fe:	687b      	ldr	r3, [r7, #4]
 810c400:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 810c402:	687b      	ldr	r3, [r7, #4]
 810c404:	2200      	movs	r2, #0
 810c406:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 810c408:	bf00      	nop
 810c40a:	370c      	adds	r7, #12
 810c40c:	46bd      	mov	sp, r7
 810c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c412:	4770      	bx	lr

0810c414 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 810c414:	b480      	push	{r7}
 810c416:	b083      	sub	sp, #12
 810c418:	af00      	add	r7, sp, #0
 810c41a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 810c41c:	687b      	ldr	r3, [r7, #4]
 810c41e:	2200      	movs	r2, #0
 810c420:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 810c422:	bf00      	nop
 810c424:	370c      	adds	r7, #12
 810c426:	46bd      	mov	sp, r7
 810c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c42c:	4770      	bx	lr

0810c42e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c42e:	b480      	push	{r7}
 810c430:	b085      	sub	sp, #20
 810c432:	af00      	add	r7, sp, #0
 810c434:	6078      	str	r0, [r7, #4]
 810c436:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 810c438:	687b      	ldr	r3, [r7, #4]
 810c43a:	685b      	ldr	r3, [r3, #4]
 810c43c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 810c43e:	683b      	ldr	r3, [r7, #0]
 810c440:	68fa      	ldr	r2, [r7, #12]
 810c442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 810c444:	68fb      	ldr	r3, [r7, #12]
 810c446:	689a      	ldr	r2, [r3, #8]
 810c448:	683b      	ldr	r3, [r7, #0]
 810c44a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 810c44c:	68fb      	ldr	r3, [r7, #12]
 810c44e:	689b      	ldr	r3, [r3, #8]
 810c450:	683a      	ldr	r2, [r7, #0]
 810c452:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 810c454:	68fb      	ldr	r3, [r7, #12]
 810c456:	683a      	ldr	r2, [r7, #0]
 810c458:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 810c45a:	683b      	ldr	r3, [r7, #0]
 810c45c:	687a      	ldr	r2, [r7, #4]
 810c45e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c460:	687b      	ldr	r3, [r7, #4]
 810c462:	681b      	ldr	r3, [r3, #0]
 810c464:	1c5a      	adds	r2, r3, #1
 810c466:	687b      	ldr	r3, [r7, #4]
 810c468:	601a      	str	r2, [r3, #0]
}
 810c46a:	bf00      	nop
 810c46c:	3714      	adds	r7, #20
 810c46e:	46bd      	mov	sp, r7
 810c470:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c474:	4770      	bx	lr

0810c476 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 810c476:	b480      	push	{r7}
 810c478:	b085      	sub	sp, #20
 810c47a:	af00      	add	r7, sp, #0
 810c47c:	6078      	str	r0, [r7, #4]
 810c47e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 810c480:	683b      	ldr	r3, [r7, #0]
 810c482:	681b      	ldr	r3, [r3, #0]
 810c484:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 810c486:	68bb      	ldr	r3, [r7, #8]
 810c488:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c48c:	d103      	bne.n	810c496 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 810c48e:	687b      	ldr	r3, [r7, #4]
 810c490:	691b      	ldr	r3, [r3, #16]
 810c492:	60fb      	str	r3, [r7, #12]
 810c494:	e00c      	b.n	810c4b0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 810c496:	687b      	ldr	r3, [r7, #4]
 810c498:	3308      	adds	r3, #8
 810c49a:	60fb      	str	r3, [r7, #12]
 810c49c:	e002      	b.n	810c4a4 <vListInsert+0x2e>
 810c49e:	68fb      	ldr	r3, [r7, #12]
 810c4a0:	685b      	ldr	r3, [r3, #4]
 810c4a2:	60fb      	str	r3, [r7, #12]
 810c4a4:	68fb      	ldr	r3, [r7, #12]
 810c4a6:	685b      	ldr	r3, [r3, #4]
 810c4a8:	681b      	ldr	r3, [r3, #0]
 810c4aa:	68ba      	ldr	r2, [r7, #8]
 810c4ac:	429a      	cmp	r2, r3
 810c4ae:	d2f6      	bcs.n	810c49e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 810c4b0:	68fb      	ldr	r3, [r7, #12]
 810c4b2:	685a      	ldr	r2, [r3, #4]
 810c4b4:	683b      	ldr	r3, [r7, #0]
 810c4b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 810c4b8:	683b      	ldr	r3, [r7, #0]
 810c4ba:	685b      	ldr	r3, [r3, #4]
 810c4bc:	683a      	ldr	r2, [r7, #0]
 810c4be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 810c4c0:	683b      	ldr	r3, [r7, #0]
 810c4c2:	68fa      	ldr	r2, [r7, #12]
 810c4c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 810c4c6:	68fb      	ldr	r3, [r7, #12]
 810c4c8:	683a      	ldr	r2, [r7, #0]
 810c4ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 810c4cc:	683b      	ldr	r3, [r7, #0]
 810c4ce:	687a      	ldr	r2, [r7, #4]
 810c4d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 810c4d2:	687b      	ldr	r3, [r7, #4]
 810c4d4:	681b      	ldr	r3, [r3, #0]
 810c4d6:	1c5a      	adds	r2, r3, #1
 810c4d8:	687b      	ldr	r3, [r7, #4]
 810c4da:	601a      	str	r2, [r3, #0]
}
 810c4dc:	bf00      	nop
 810c4de:	3714      	adds	r7, #20
 810c4e0:	46bd      	mov	sp, r7
 810c4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c4e6:	4770      	bx	lr

0810c4e8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 810c4e8:	b480      	push	{r7}
 810c4ea:	b085      	sub	sp, #20
 810c4ec:	af00      	add	r7, sp, #0
 810c4ee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 810c4f0:	687b      	ldr	r3, [r7, #4]
 810c4f2:	691b      	ldr	r3, [r3, #16]
 810c4f4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 810c4f6:	687b      	ldr	r3, [r7, #4]
 810c4f8:	685b      	ldr	r3, [r3, #4]
 810c4fa:	687a      	ldr	r2, [r7, #4]
 810c4fc:	6892      	ldr	r2, [r2, #8]
 810c4fe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 810c500:	687b      	ldr	r3, [r7, #4]
 810c502:	689b      	ldr	r3, [r3, #8]
 810c504:	687a      	ldr	r2, [r7, #4]
 810c506:	6852      	ldr	r2, [r2, #4]
 810c508:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 810c50a:	68fb      	ldr	r3, [r7, #12]
 810c50c:	685b      	ldr	r3, [r3, #4]
 810c50e:	687a      	ldr	r2, [r7, #4]
 810c510:	429a      	cmp	r2, r3
 810c512:	d103      	bne.n	810c51c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 810c514:	687b      	ldr	r3, [r7, #4]
 810c516:	689a      	ldr	r2, [r3, #8]
 810c518:	68fb      	ldr	r3, [r7, #12]
 810c51a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 810c51c:	687b      	ldr	r3, [r7, #4]
 810c51e:	2200      	movs	r2, #0
 810c520:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 810c522:	68fb      	ldr	r3, [r7, #12]
 810c524:	681b      	ldr	r3, [r3, #0]
 810c526:	1e5a      	subs	r2, r3, #1
 810c528:	68fb      	ldr	r3, [r7, #12]
 810c52a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 810c52c:	68fb      	ldr	r3, [r7, #12]
 810c52e:	681b      	ldr	r3, [r3, #0]
}
 810c530:	4618      	mov	r0, r3
 810c532:	3714      	adds	r7, #20
 810c534:	46bd      	mov	sp, r7
 810c536:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c53a:	4770      	bx	lr

0810c53c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 810c53c:	b480      	push	{r7}
 810c53e:	b085      	sub	sp, #20
 810c540:	af00      	add	r7, sp, #0
 810c542:	60f8      	str	r0, [r7, #12]
 810c544:	60b9      	str	r1, [r7, #8]
 810c546:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 810c548:	68fb      	ldr	r3, [r7, #12]
 810c54a:	3b04      	subs	r3, #4
 810c54c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 810c54e:	68fb      	ldr	r3, [r7, #12]
 810c550:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 810c554:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c556:	68fb      	ldr	r3, [r7, #12]
 810c558:	3b04      	subs	r3, #4
 810c55a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 810c55c:	68bb      	ldr	r3, [r7, #8]
 810c55e:	f023 0201 	bic.w	r2, r3, #1
 810c562:	68fb      	ldr	r3, [r7, #12]
 810c564:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 810c566:	68fb      	ldr	r3, [r7, #12]
 810c568:	3b04      	subs	r3, #4
 810c56a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 810c56c:	4a0c      	ldr	r2, [pc, #48]	@ (810c5a0 <pxPortInitialiseStack+0x64>)
 810c56e:	68fb      	ldr	r3, [r7, #12]
 810c570:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 810c572:	68fb      	ldr	r3, [r7, #12]
 810c574:	3b14      	subs	r3, #20
 810c576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 810c578:	687a      	ldr	r2, [r7, #4]
 810c57a:	68fb      	ldr	r3, [r7, #12]
 810c57c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 810c57e:	68fb      	ldr	r3, [r7, #12]
 810c580:	3b04      	subs	r3, #4
 810c582:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 810c584:	68fb      	ldr	r3, [r7, #12]
 810c586:	f06f 0202 	mvn.w	r2, #2
 810c58a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 810c58c:	68fb      	ldr	r3, [r7, #12]
 810c58e:	3b20      	subs	r3, #32
 810c590:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 810c592:	68fb      	ldr	r3, [r7, #12]
}
 810c594:	4618      	mov	r0, r3
 810c596:	3714      	adds	r7, #20
 810c598:	46bd      	mov	sp, r7
 810c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c59e:	4770      	bx	lr
 810c5a0:	0810c5a5 	.word	0x0810c5a5

0810c5a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 810c5a4:	b480      	push	{r7}
 810c5a6:	b085      	sub	sp, #20
 810c5a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 810c5aa:	2300      	movs	r3, #0
 810c5ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 810c5ae:	4b13      	ldr	r3, [pc, #76]	@ (810c5fc <prvTaskExitError+0x58>)
 810c5b0:	681b      	ldr	r3, [r3, #0]
 810c5b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810c5b6:	d00b      	beq.n	810c5d0 <prvTaskExitError+0x2c>
	__asm volatile
 810c5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5bc:	f383 8811 	msr	BASEPRI, r3
 810c5c0:	f3bf 8f6f 	isb	sy
 810c5c4:	f3bf 8f4f 	dsb	sy
 810c5c8:	60fb      	str	r3, [r7, #12]
}
 810c5ca:	bf00      	nop
 810c5cc:	bf00      	nop
 810c5ce:	e7fd      	b.n	810c5cc <prvTaskExitError+0x28>
	__asm volatile
 810c5d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c5d4:	f383 8811 	msr	BASEPRI, r3
 810c5d8:	f3bf 8f6f 	isb	sy
 810c5dc:	f3bf 8f4f 	dsb	sy
 810c5e0:	60bb      	str	r3, [r7, #8]
}
 810c5e2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 810c5e4:	bf00      	nop
 810c5e6:	687b      	ldr	r3, [r7, #4]
 810c5e8:	2b00      	cmp	r3, #0
 810c5ea:	d0fc      	beq.n	810c5e6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 810c5ec:	bf00      	nop
 810c5ee:	bf00      	nop
 810c5f0:	3714      	adds	r7, #20
 810c5f2:	46bd      	mov	sp, r7
 810c5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c5f8:	4770      	bx	lr
 810c5fa:	bf00      	nop
 810c5fc:	10000134 	.word	0x10000134

0810c600 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 810c600:	4b07      	ldr	r3, [pc, #28]	@ (810c620 <pxCurrentTCBConst2>)
 810c602:	6819      	ldr	r1, [r3, #0]
 810c604:	6808      	ldr	r0, [r1, #0]
 810c606:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c60a:	f380 8809 	msr	PSP, r0
 810c60e:	f3bf 8f6f 	isb	sy
 810c612:	f04f 0000 	mov.w	r0, #0
 810c616:	f380 8811 	msr	BASEPRI, r0
 810c61a:	4770      	bx	lr
 810c61c:	f3af 8000 	nop.w

0810c620 <pxCurrentTCBConst2>:
 810c620:	10004aac 	.word	0x10004aac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 810c624:	bf00      	nop
 810c626:	bf00      	nop

0810c628 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 810c628:	4808      	ldr	r0, [pc, #32]	@ (810c64c <prvPortStartFirstTask+0x24>)
 810c62a:	6800      	ldr	r0, [r0, #0]
 810c62c:	6800      	ldr	r0, [r0, #0]
 810c62e:	f380 8808 	msr	MSP, r0
 810c632:	f04f 0000 	mov.w	r0, #0
 810c636:	f380 8814 	msr	CONTROL, r0
 810c63a:	b662      	cpsie	i
 810c63c:	b661      	cpsie	f
 810c63e:	f3bf 8f4f 	dsb	sy
 810c642:	f3bf 8f6f 	isb	sy
 810c646:	df00      	svc	0
 810c648:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 810c64a:	bf00      	nop
 810c64c:	e000ed08 	.word	0xe000ed08

0810c650 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 810c650:	b580      	push	{r7, lr}
 810c652:	b086      	sub	sp, #24
 810c654:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 810c656:	4b47      	ldr	r3, [pc, #284]	@ (810c774 <xPortStartScheduler+0x124>)
 810c658:	681b      	ldr	r3, [r3, #0]
 810c65a:	4a47      	ldr	r2, [pc, #284]	@ (810c778 <xPortStartScheduler+0x128>)
 810c65c:	4293      	cmp	r3, r2
 810c65e:	d10b      	bne.n	810c678 <xPortStartScheduler+0x28>
	__asm volatile
 810c660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c664:	f383 8811 	msr	BASEPRI, r3
 810c668:	f3bf 8f6f 	isb	sy
 810c66c:	f3bf 8f4f 	dsb	sy
 810c670:	613b      	str	r3, [r7, #16]
}
 810c672:	bf00      	nop
 810c674:	bf00      	nop
 810c676:	e7fd      	b.n	810c674 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 810c678:	4b3e      	ldr	r3, [pc, #248]	@ (810c774 <xPortStartScheduler+0x124>)
 810c67a:	681b      	ldr	r3, [r3, #0]
 810c67c:	4a3f      	ldr	r2, [pc, #252]	@ (810c77c <xPortStartScheduler+0x12c>)
 810c67e:	4293      	cmp	r3, r2
 810c680:	d10b      	bne.n	810c69a <xPortStartScheduler+0x4a>
	__asm volatile
 810c682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c686:	f383 8811 	msr	BASEPRI, r3
 810c68a:	f3bf 8f6f 	isb	sy
 810c68e:	f3bf 8f4f 	dsb	sy
 810c692:	60fb      	str	r3, [r7, #12]
}
 810c694:	bf00      	nop
 810c696:	bf00      	nop
 810c698:	e7fd      	b.n	810c696 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 810c69a:	4b39      	ldr	r3, [pc, #228]	@ (810c780 <xPortStartScheduler+0x130>)
 810c69c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 810c69e:	697b      	ldr	r3, [r7, #20]
 810c6a0:	781b      	ldrb	r3, [r3, #0]
 810c6a2:	b2db      	uxtb	r3, r3
 810c6a4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 810c6a6:	697b      	ldr	r3, [r7, #20]
 810c6a8:	22ff      	movs	r2, #255	@ 0xff
 810c6aa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 810c6ac:	697b      	ldr	r3, [r7, #20]
 810c6ae:	781b      	ldrb	r3, [r3, #0]
 810c6b0:	b2db      	uxtb	r3, r3
 810c6b2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 810c6b4:	78fb      	ldrb	r3, [r7, #3]
 810c6b6:	b2db      	uxtb	r3, r3
 810c6b8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 810c6bc:	b2da      	uxtb	r2, r3
 810c6be:	4b31      	ldr	r3, [pc, #196]	@ (810c784 <xPortStartScheduler+0x134>)
 810c6c0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 810c6c2:	4b31      	ldr	r3, [pc, #196]	@ (810c788 <xPortStartScheduler+0x138>)
 810c6c4:	2207      	movs	r2, #7
 810c6c6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c6c8:	e009      	b.n	810c6de <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 810c6ca:	4b2f      	ldr	r3, [pc, #188]	@ (810c788 <xPortStartScheduler+0x138>)
 810c6cc:	681b      	ldr	r3, [r3, #0]
 810c6ce:	3b01      	subs	r3, #1
 810c6d0:	4a2d      	ldr	r2, [pc, #180]	@ (810c788 <xPortStartScheduler+0x138>)
 810c6d2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 810c6d4:	78fb      	ldrb	r3, [r7, #3]
 810c6d6:	b2db      	uxtb	r3, r3
 810c6d8:	005b      	lsls	r3, r3, #1
 810c6da:	b2db      	uxtb	r3, r3
 810c6dc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 810c6de:	78fb      	ldrb	r3, [r7, #3]
 810c6e0:	b2db      	uxtb	r3, r3
 810c6e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810c6e6:	2b80      	cmp	r3, #128	@ 0x80
 810c6e8:	d0ef      	beq.n	810c6ca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 810c6ea:	4b27      	ldr	r3, [pc, #156]	@ (810c788 <xPortStartScheduler+0x138>)
 810c6ec:	681b      	ldr	r3, [r3, #0]
 810c6ee:	f1c3 0307 	rsb	r3, r3, #7
 810c6f2:	2b04      	cmp	r3, #4
 810c6f4:	d00b      	beq.n	810c70e <xPortStartScheduler+0xbe>
	__asm volatile
 810c6f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c6fa:	f383 8811 	msr	BASEPRI, r3
 810c6fe:	f3bf 8f6f 	isb	sy
 810c702:	f3bf 8f4f 	dsb	sy
 810c706:	60bb      	str	r3, [r7, #8]
}
 810c708:	bf00      	nop
 810c70a:	bf00      	nop
 810c70c:	e7fd      	b.n	810c70a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 810c70e:	4b1e      	ldr	r3, [pc, #120]	@ (810c788 <xPortStartScheduler+0x138>)
 810c710:	681b      	ldr	r3, [r3, #0]
 810c712:	021b      	lsls	r3, r3, #8
 810c714:	4a1c      	ldr	r2, [pc, #112]	@ (810c788 <xPortStartScheduler+0x138>)
 810c716:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 810c718:	4b1b      	ldr	r3, [pc, #108]	@ (810c788 <xPortStartScheduler+0x138>)
 810c71a:	681b      	ldr	r3, [r3, #0]
 810c71c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 810c720:	4a19      	ldr	r2, [pc, #100]	@ (810c788 <xPortStartScheduler+0x138>)
 810c722:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 810c724:	687b      	ldr	r3, [r7, #4]
 810c726:	b2da      	uxtb	r2, r3
 810c728:	697b      	ldr	r3, [r7, #20]
 810c72a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 810c72c:	4b17      	ldr	r3, [pc, #92]	@ (810c78c <xPortStartScheduler+0x13c>)
 810c72e:	681b      	ldr	r3, [r3, #0]
 810c730:	4a16      	ldr	r2, [pc, #88]	@ (810c78c <xPortStartScheduler+0x13c>)
 810c732:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 810c736:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 810c738:	4b14      	ldr	r3, [pc, #80]	@ (810c78c <xPortStartScheduler+0x13c>)
 810c73a:	681b      	ldr	r3, [r3, #0]
 810c73c:	4a13      	ldr	r2, [pc, #76]	@ (810c78c <xPortStartScheduler+0x13c>)
 810c73e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 810c742:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 810c744:	f000 f8da 	bl	810c8fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 810c748:	4b11      	ldr	r3, [pc, #68]	@ (810c790 <xPortStartScheduler+0x140>)
 810c74a:	2200      	movs	r2, #0
 810c74c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 810c74e:	f000 f8f9 	bl	810c944 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 810c752:	4b10      	ldr	r3, [pc, #64]	@ (810c794 <xPortStartScheduler+0x144>)
 810c754:	681b      	ldr	r3, [r3, #0]
 810c756:	4a0f      	ldr	r2, [pc, #60]	@ (810c794 <xPortStartScheduler+0x144>)
 810c758:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 810c75c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 810c75e:	f7ff ff63 	bl	810c628 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 810c762:	f001 fcbd 	bl	810e0e0 <vTaskSwitchContext>
	prvTaskExitError();
 810c766:	f7ff ff1d 	bl	810c5a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 810c76a:	2300      	movs	r3, #0
}
 810c76c:	4618      	mov	r0, r3
 810c76e:	3718      	adds	r7, #24
 810c770:	46bd      	mov	sp, r7
 810c772:	bd80      	pop	{r7, pc}
 810c774:	e000ed00 	.word	0xe000ed00
 810c778:	410fc271 	.word	0x410fc271
 810c77c:	410fc270 	.word	0x410fc270
 810c780:	e000e400 	.word	0xe000e400
 810c784:	10004a64 	.word	0x10004a64
 810c788:	10004a68 	.word	0x10004a68
 810c78c:	e000ed20 	.word	0xe000ed20
 810c790:	10000134 	.word	0x10000134
 810c794:	e000ef34 	.word	0xe000ef34

0810c798 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 810c798:	b480      	push	{r7}
 810c79a:	b083      	sub	sp, #12
 810c79c:	af00      	add	r7, sp, #0
	__asm volatile
 810c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7a2:	f383 8811 	msr	BASEPRI, r3
 810c7a6:	f3bf 8f6f 	isb	sy
 810c7aa:	f3bf 8f4f 	dsb	sy
 810c7ae:	607b      	str	r3, [r7, #4]
}
 810c7b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 810c7b2:	4b10      	ldr	r3, [pc, #64]	@ (810c7f4 <vPortEnterCritical+0x5c>)
 810c7b4:	681b      	ldr	r3, [r3, #0]
 810c7b6:	3301      	adds	r3, #1
 810c7b8:	4a0e      	ldr	r2, [pc, #56]	@ (810c7f4 <vPortEnterCritical+0x5c>)
 810c7ba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 810c7bc:	4b0d      	ldr	r3, [pc, #52]	@ (810c7f4 <vPortEnterCritical+0x5c>)
 810c7be:	681b      	ldr	r3, [r3, #0]
 810c7c0:	2b01      	cmp	r3, #1
 810c7c2:	d110      	bne.n	810c7e6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 810c7c4:	4b0c      	ldr	r3, [pc, #48]	@ (810c7f8 <vPortEnterCritical+0x60>)
 810c7c6:	681b      	ldr	r3, [r3, #0]
 810c7c8:	b2db      	uxtb	r3, r3
 810c7ca:	2b00      	cmp	r3, #0
 810c7cc:	d00b      	beq.n	810c7e6 <vPortEnterCritical+0x4e>
	__asm volatile
 810c7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c7d2:	f383 8811 	msr	BASEPRI, r3
 810c7d6:	f3bf 8f6f 	isb	sy
 810c7da:	f3bf 8f4f 	dsb	sy
 810c7de:	603b      	str	r3, [r7, #0]
}
 810c7e0:	bf00      	nop
 810c7e2:	bf00      	nop
 810c7e4:	e7fd      	b.n	810c7e2 <vPortEnterCritical+0x4a>
	}
}
 810c7e6:	bf00      	nop
 810c7e8:	370c      	adds	r7, #12
 810c7ea:	46bd      	mov	sp, r7
 810c7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7f0:	4770      	bx	lr
 810c7f2:	bf00      	nop
 810c7f4:	10000134 	.word	0x10000134
 810c7f8:	e000ed04 	.word	0xe000ed04

0810c7fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 810c7fc:	b480      	push	{r7}
 810c7fe:	b083      	sub	sp, #12
 810c800:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 810c802:	4b12      	ldr	r3, [pc, #72]	@ (810c84c <vPortExitCritical+0x50>)
 810c804:	681b      	ldr	r3, [r3, #0]
 810c806:	2b00      	cmp	r3, #0
 810c808:	d10b      	bne.n	810c822 <vPortExitCritical+0x26>
	__asm volatile
 810c80a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c80e:	f383 8811 	msr	BASEPRI, r3
 810c812:	f3bf 8f6f 	isb	sy
 810c816:	f3bf 8f4f 	dsb	sy
 810c81a:	607b      	str	r3, [r7, #4]
}
 810c81c:	bf00      	nop
 810c81e:	bf00      	nop
 810c820:	e7fd      	b.n	810c81e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 810c822:	4b0a      	ldr	r3, [pc, #40]	@ (810c84c <vPortExitCritical+0x50>)
 810c824:	681b      	ldr	r3, [r3, #0]
 810c826:	3b01      	subs	r3, #1
 810c828:	4a08      	ldr	r2, [pc, #32]	@ (810c84c <vPortExitCritical+0x50>)
 810c82a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 810c82c:	4b07      	ldr	r3, [pc, #28]	@ (810c84c <vPortExitCritical+0x50>)
 810c82e:	681b      	ldr	r3, [r3, #0]
 810c830:	2b00      	cmp	r3, #0
 810c832:	d105      	bne.n	810c840 <vPortExitCritical+0x44>
 810c834:	2300      	movs	r3, #0
 810c836:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 810c838:	683b      	ldr	r3, [r7, #0]
 810c83a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 810c83e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 810c840:	bf00      	nop
 810c842:	370c      	adds	r7, #12
 810c844:	46bd      	mov	sp, r7
 810c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c84a:	4770      	bx	lr
 810c84c:	10000134 	.word	0x10000134

0810c850 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 810c850:	f3ef 8009 	mrs	r0, PSP
 810c854:	f3bf 8f6f 	isb	sy
 810c858:	4b15      	ldr	r3, [pc, #84]	@ (810c8b0 <pxCurrentTCBConst>)
 810c85a:	681a      	ldr	r2, [r3, #0]
 810c85c:	f01e 0f10 	tst.w	lr, #16
 810c860:	bf08      	it	eq
 810c862:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 810c866:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c86a:	6010      	str	r0, [r2, #0]
 810c86c:	e92d 0009 	stmdb	sp!, {r0, r3}
 810c870:	f04f 0050 	mov.w	r0, #80	@ 0x50
 810c874:	f380 8811 	msr	BASEPRI, r0
 810c878:	f3bf 8f4f 	dsb	sy
 810c87c:	f3bf 8f6f 	isb	sy
 810c880:	f001 fc2e 	bl	810e0e0 <vTaskSwitchContext>
 810c884:	f04f 0000 	mov.w	r0, #0
 810c888:	f380 8811 	msr	BASEPRI, r0
 810c88c:	bc09      	pop	{r0, r3}
 810c88e:	6819      	ldr	r1, [r3, #0]
 810c890:	6808      	ldr	r0, [r1, #0]
 810c892:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810c896:	f01e 0f10 	tst.w	lr, #16
 810c89a:	bf08      	it	eq
 810c89c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 810c8a0:	f380 8809 	msr	PSP, r0
 810c8a4:	f3bf 8f6f 	isb	sy
 810c8a8:	4770      	bx	lr
 810c8aa:	bf00      	nop
 810c8ac:	f3af 8000 	nop.w

0810c8b0 <pxCurrentTCBConst>:
 810c8b0:	10004aac 	.word	0x10004aac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 810c8b4:	bf00      	nop
 810c8b6:	bf00      	nop

0810c8b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 810c8b8:	b580      	push	{r7, lr}
 810c8ba:	b082      	sub	sp, #8
 810c8bc:	af00      	add	r7, sp, #0
	__asm volatile
 810c8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c8c2:	f383 8811 	msr	BASEPRI, r3
 810c8c6:	f3bf 8f6f 	isb	sy
 810c8ca:	f3bf 8f4f 	dsb	sy
 810c8ce:	607b      	str	r3, [r7, #4]
}
 810c8d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 810c8d2:	f001 fb4b 	bl	810df6c <xTaskIncrementTick>
 810c8d6:	4603      	mov	r3, r0
 810c8d8:	2b00      	cmp	r3, #0
 810c8da:	d003      	beq.n	810c8e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 810c8dc:	4b06      	ldr	r3, [pc, #24]	@ (810c8f8 <xPortSysTickHandler+0x40>)
 810c8de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810c8e2:	601a      	str	r2, [r3, #0]
 810c8e4:	2300      	movs	r3, #0
 810c8e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 810c8e8:	683b      	ldr	r3, [r7, #0]
 810c8ea:	f383 8811 	msr	BASEPRI, r3
}
 810c8ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 810c8f0:	bf00      	nop
 810c8f2:	3708      	adds	r7, #8
 810c8f4:	46bd      	mov	sp, r7
 810c8f6:	bd80      	pop	{r7, pc}
 810c8f8:	e000ed04 	.word	0xe000ed04

0810c8fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 810c8fc:	b480      	push	{r7}
 810c8fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 810c900:	4b0b      	ldr	r3, [pc, #44]	@ (810c930 <vPortSetupTimerInterrupt+0x34>)
 810c902:	2200      	movs	r2, #0
 810c904:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 810c906:	4b0b      	ldr	r3, [pc, #44]	@ (810c934 <vPortSetupTimerInterrupt+0x38>)
 810c908:	2200      	movs	r2, #0
 810c90a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 810c90c:	4b0a      	ldr	r3, [pc, #40]	@ (810c938 <vPortSetupTimerInterrupt+0x3c>)
 810c90e:	681b      	ldr	r3, [r3, #0]
 810c910:	4a0a      	ldr	r2, [pc, #40]	@ (810c93c <vPortSetupTimerInterrupt+0x40>)
 810c912:	fba2 2303 	umull	r2, r3, r2, r3
 810c916:	099b      	lsrs	r3, r3, #6
 810c918:	4a09      	ldr	r2, [pc, #36]	@ (810c940 <vPortSetupTimerInterrupt+0x44>)
 810c91a:	3b01      	subs	r3, #1
 810c91c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 810c91e:	4b04      	ldr	r3, [pc, #16]	@ (810c930 <vPortSetupTimerInterrupt+0x34>)
 810c920:	2207      	movs	r2, #7
 810c922:	601a      	str	r2, [r3, #0]
}
 810c924:	bf00      	nop
 810c926:	46bd      	mov	sp, r7
 810c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c92c:	4770      	bx	lr
 810c92e:	bf00      	nop
 810c930:	e000e010 	.word	0xe000e010
 810c934:	e000e018 	.word	0xe000e018
 810c938:	10000128 	.word	0x10000128
 810c93c:	10624dd3 	.word	0x10624dd3
 810c940:	e000e014 	.word	0xe000e014

0810c944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 810c944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 810c954 <vPortEnableVFP+0x10>
 810c948:	6801      	ldr	r1, [r0, #0]
 810c94a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810c94e:	6001      	str	r1, [r0, #0]
 810c950:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 810c952:	bf00      	nop
 810c954:	e000ed88 	.word	0xe000ed88

0810c958 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 810c958:	b480      	push	{r7}
 810c95a:	b085      	sub	sp, #20
 810c95c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 810c95e:	f3ef 8305 	mrs	r3, IPSR
 810c962:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 810c964:	68fb      	ldr	r3, [r7, #12]
 810c966:	2b0f      	cmp	r3, #15
 810c968:	d915      	bls.n	810c996 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 810c96a:	4a18      	ldr	r2, [pc, #96]	@ (810c9cc <vPortValidateInterruptPriority+0x74>)
 810c96c:	68fb      	ldr	r3, [r7, #12]
 810c96e:	4413      	add	r3, r2
 810c970:	781b      	ldrb	r3, [r3, #0]
 810c972:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 810c974:	4b16      	ldr	r3, [pc, #88]	@ (810c9d0 <vPortValidateInterruptPriority+0x78>)
 810c976:	781b      	ldrb	r3, [r3, #0]
 810c978:	7afa      	ldrb	r2, [r7, #11]
 810c97a:	429a      	cmp	r2, r3
 810c97c:	d20b      	bcs.n	810c996 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 810c97e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c982:	f383 8811 	msr	BASEPRI, r3
 810c986:	f3bf 8f6f 	isb	sy
 810c98a:	f3bf 8f4f 	dsb	sy
 810c98e:	607b      	str	r3, [r7, #4]
}
 810c990:	bf00      	nop
 810c992:	bf00      	nop
 810c994:	e7fd      	b.n	810c992 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 810c996:	4b0f      	ldr	r3, [pc, #60]	@ (810c9d4 <vPortValidateInterruptPriority+0x7c>)
 810c998:	681b      	ldr	r3, [r3, #0]
 810c99a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 810c99e:	4b0e      	ldr	r3, [pc, #56]	@ (810c9d8 <vPortValidateInterruptPriority+0x80>)
 810c9a0:	681b      	ldr	r3, [r3, #0]
 810c9a2:	429a      	cmp	r2, r3
 810c9a4:	d90b      	bls.n	810c9be <vPortValidateInterruptPriority+0x66>
	__asm volatile
 810c9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9aa:	f383 8811 	msr	BASEPRI, r3
 810c9ae:	f3bf 8f6f 	isb	sy
 810c9b2:	f3bf 8f4f 	dsb	sy
 810c9b6:	603b      	str	r3, [r7, #0]
}
 810c9b8:	bf00      	nop
 810c9ba:	bf00      	nop
 810c9bc:	e7fd      	b.n	810c9ba <vPortValidateInterruptPriority+0x62>
	}
 810c9be:	bf00      	nop
 810c9c0:	3714      	adds	r7, #20
 810c9c2:	46bd      	mov	sp, r7
 810c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c9c8:	4770      	bx	lr
 810c9ca:	bf00      	nop
 810c9cc:	e000e3f0 	.word	0xe000e3f0
 810c9d0:	10004a64 	.word	0x10004a64
 810c9d4:	e000ed0c 	.word	0xe000ed0c
 810c9d8:	10004a68 	.word	0x10004a68

0810c9dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 810c9dc:	b580      	push	{r7, lr}
 810c9de:	b084      	sub	sp, #16
 810c9e0:	af00      	add	r7, sp, #0
 810c9e2:	6078      	str	r0, [r7, #4]
 810c9e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 810c9e6:	687b      	ldr	r3, [r7, #4]
 810c9e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 810c9ea:	68fb      	ldr	r3, [r7, #12]
 810c9ec:	2b00      	cmp	r3, #0
 810c9ee:	d10b      	bne.n	810ca08 <xQueueGenericReset+0x2c>
	__asm volatile
 810c9f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810c9f4:	f383 8811 	msr	BASEPRI, r3
 810c9f8:	f3bf 8f6f 	isb	sy
 810c9fc:	f3bf 8f4f 	dsb	sy
 810ca00:	60bb      	str	r3, [r7, #8]
}
 810ca02:	bf00      	nop
 810ca04:	bf00      	nop
 810ca06:	e7fd      	b.n	810ca04 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 810ca08:	f7ff fec6 	bl	810c798 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ca0c:	68fb      	ldr	r3, [r7, #12]
 810ca0e:	681a      	ldr	r2, [r3, #0]
 810ca10:	68fb      	ldr	r3, [r7, #12]
 810ca12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ca14:	68f9      	ldr	r1, [r7, #12]
 810ca16:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ca18:	fb01 f303 	mul.w	r3, r1, r3
 810ca1c:	441a      	add	r2, r3
 810ca1e:	68fb      	ldr	r3, [r7, #12]
 810ca20:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 810ca22:	68fb      	ldr	r3, [r7, #12]
 810ca24:	2200      	movs	r2, #0
 810ca26:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 810ca28:	68fb      	ldr	r3, [r7, #12]
 810ca2a:	681a      	ldr	r2, [r3, #0]
 810ca2c:	68fb      	ldr	r3, [r7, #12]
 810ca2e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810ca30:	68fb      	ldr	r3, [r7, #12]
 810ca32:	681a      	ldr	r2, [r3, #0]
 810ca34:	68fb      	ldr	r3, [r7, #12]
 810ca36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ca38:	3b01      	subs	r3, #1
 810ca3a:	68f9      	ldr	r1, [r7, #12]
 810ca3c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 810ca3e:	fb01 f303 	mul.w	r3, r1, r3
 810ca42:	441a      	add	r2, r3
 810ca44:	68fb      	ldr	r3, [r7, #12]
 810ca46:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 810ca48:	68fb      	ldr	r3, [r7, #12]
 810ca4a:	22ff      	movs	r2, #255	@ 0xff
 810ca4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 810ca50:	68fb      	ldr	r3, [r7, #12]
 810ca52:	22ff      	movs	r2, #255	@ 0xff
 810ca54:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 810ca58:	683b      	ldr	r3, [r7, #0]
 810ca5a:	2b00      	cmp	r3, #0
 810ca5c:	d114      	bne.n	810ca88 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810ca5e:	68fb      	ldr	r3, [r7, #12]
 810ca60:	691b      	ldr	r3, [r3, #16]
 810ca62:	2b00      	cmp	r3, #0
 810ca64:	d01a      	beq.n	810ca9c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810ca66:	68fb      	ldr	r3, [r7, #12]
 810ca68:	3310      	adds	r3, #16
 810ca6a:	4618      	mov	r0, r3
 810ca6c:	f001 fbf0 	bl	810e250 <xTaskRemoveFromEventList>
 810ca70:	4603      	mov	r3, r0
 810ca72:	2b00      	cmp	r3, #0
 810ca74:	d012      	beq.n	810ca9c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 810ca76:	4b0d      	ldr	r3, [pc, #52]	@ (810caac <xQueueGenericReset+0xd0>)
 810ca78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ca7c:	601a      	str	r2, [r3, #0]
 810ca7e:	f3bf 8f4f 	dsb	sy
 810ca82:	f3bf 8f6f 	isb	sy
 810ca86:	e009      	b.n	810ca9c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 810ca88:	68fb      	ldr	r3, [r7, #12]
 810ca8a:	3310      	adds	r3, #16
 810ca8c:	4618      	mov	r0, r3
 810ca8e:	f7ff fca1 	bl	810c3d4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 810ca92:	68fb      	ldr	r3, [r7, #12]
 810ca94:	3324      	adds	r3, #36	@ 0x24
 810ca96:	4618      	mov	r0, r3
 810ca98:	f7ff fc9c 	bl	810c3d4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 810ca9c:	f7ff feae 	bl	810c7fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 810caa0:	2301      	movs	r3, #1
}
 810caa2:	4618      	mov	r0, r3
 810caa4:	3710      	adds	r7, #16
 810caa6:	46bd      	mov	sp, r7
 810caa8:	bd80      	pop	{r7, pc}
 810caaa:	bf00      	nop
 810caac:	e000ed04 	.word	0xe000ed04

0810cab0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 810cab0:	b580      	push	{r7, lr}
 810cab2:	b08e      	sub	sp, #56	@ 0x38
 810cab4:	af02      	add	r7, sp, #8
 810cab6:	60f8      	str	r0, [r7, #12]
 810cab8:	60b9      	str	r1, [r7, #8]
 810caba:	607a      	str	r2, [r7, #4]
 810cabc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810cabe:	68fb      	ldr	r3, [r7, #12]
 810cac0:	2b00      	cmp	r3, #0
 810cac2:	d10b      	bne.n	810cadc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 810cac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cac8:	f383 8811 	msr	BASEPRI, r3
 810cacc:	f3bf 8f6f 	isb	sy
 810cad0:	f3bf 8f4f 	dsb	sy
 810cad4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810cad6:	bf00      	nop
 810cad8:	bf00      	nop
 810cada:	e7fd      	b.n	810cad8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 810cadc:	683b      	ldr	r3, [r7, #0]
 810cade:	2b00      	cmp	r3, #0
 810cae0:	d10b      	bne.n	810cafa <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 810cae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cae6:	f383 8811 	msr	BASEPRI, r3
 810caea:	f3bf 8f6f 	isb	sy
 810caee:	f3bf 8f4f 	dsb	sy
 810caf2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810caf4:	bf00      	nop
 810caf6:	bf00      	nop
 810caf8:	e7fd      	b.n	810caf6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 810cafa:	687b      	ldr	r3, [r7, #4]
 810cafc:	2b00      	cmp	r3, #0
 810cafe:	d002      	beq.n	810cb06 <xQueueGenericCreateStatic+0x56>
 810cb00:	68bb      	ldr	r3, [r7, #8]
 810cb02:	2b00      	cmp	r3, #0
 810cb04:	d001      	beq.n	810cb0a <xQueueGenericCreateStatic+0x5a>
 810cb06:	2301      	movs	r3, #1
 810cb08:	e000      	b.n	810cb0c <xQueueGenericCreateStatic+0x5c>
 810cb0a:	2300      	movs	r3, #0
 810cb0c:	2b00      	cmp	r3, #0
 810cb0e:	d10b      	bne.n	810cb28 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 810cb10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb14:	f383 8811 	msr	BASEPRI, r3
 810cb18:	f3bf 8f6f 	isb	sy
 810cb1c:	f3bf 8f4f 	dsb	sy
 810cb20:	623b      	str	r3, [r7, #32]
}
 810cb22:	bf00      	nop
 810cb24:	bf00      	nop
 810cb26:	e7fd      	b.n	810cb24 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 810cb28:	687b      	ldr	r3, [r7, #4]
 810cb2a:	2b00      	cmp	r3, #0
 810cb2c:	d102      	bne.n	810cb34 <xQueueGenericCreateStatic+0x84>
 810cb2e:	68bb      	ldr	r3, [r7, #8]
 810cb30:	2b00      	cmp	r3, #0
 810cb32:	d101      	bne.n	810cb38 <xQueueGenericCreateStatic+0x88>
 810cb34:	2301      	movs	r3, #1
 810cb36:	e000      	b.n	810cb3a <xQueueGenericCreateStatic+0x8a>
 810cb38:	2300      	movs	r3, #0
 810cb3a:	2b00      	cmp	r3, #0
 810cb3c:	d10b      	bne.n	810cb56 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 810cb3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb42:	f383 8811 	msr	BASEPRI, r3
 810cb46:	f3bf 8f6f 	isb	sy
 810cb4a:	f3bf 8f4f 	dsb	sy
 810cb4e:	61fb      	str	r3, [r7, #28]
}
 810cb50:	bf00      	nop
 810cb52:	bf00      	nop
 810cb54:	e7fd      	b.n	810cb52 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 810cb56:	2350      	movs	r3, #80	@ 0x50
 810cb58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 810cb5a:	697b      	ldr	r3, [r7, #20]
 810cb5c:	2b50      	cmp	r3, #80	@ 0x50
 810cb5e:	d00b      	beq.n	810cb78 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 810cb60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cb64:	f383 8811 	msr	BASEPRI, r3
 810cb68:	f3bf 8f6f 	isb	sy
 810cb6c:	f3bf 8f4f 	dsb	sy
 810cb70:	61bb      	str	r3, [r7, #24]
}
 810cb72:	bf00      	nop
 810cb74:	bf00      	nop
 810cb76:	e7fd      	b.n	810cb74 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 810cb78:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810cb7a:	683b      	ldr	r3, [r7, #0]
 810cb7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 810cb7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cb80:	2b00      	cmp	r3, #0
 810cb82:	d00d      	beq.n	810cba0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 810cb84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cb86:	2201      	movs	r2, #1
 810cb88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cb8c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 810cb90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810cb92:	9300      	str	r3, [sp, #0]
 810cb94:	4613      	mov	r3, r2
 810cb96:	687a      	ldr	r2, [r7, #4]
 810cb98:	68b9      	ldr	r1, [r7, #8]
 810cb9a:	68f8      	ldr	r0, [r7, #12]
 810cb9c:	f000 f840 	bl	810cc20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 810cba2:	4618      	mov	r0, r3
 810cba4:	3730      	adds	r7, #48	@ 0x30
 810cba6:	46bd      	mov	sp, r7
 810cba8:	bd80      	pop	{r7, pc}

0810cbaa <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 810cbaa:	b580      	push	{r7, lr}
 810cbac:	b08a      	sub	sp, #40	@ 0x28
 810cbae:	af02      	add	r7, sp, #8
 810cbb0:	60f8      	str	r0, [r7, #12]
 810cbb2:	60b9      	str	r1, [r7, #8]
 810cbb4:	4613      	mov	r3, r2
 810cbb6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 810cbb8:	68fb      	ldr	r3, [r7, #12]
 810cbba:	2b00      	cmp	r3, #0
 810cbbc:	d10b      	bne.n	810cbd6 <xQueueGenericCreate+0x2c>
	__asm volatile
 810cbbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cbc2:	f383 8811 	msr	BASEPRI, r3
 810cbc6:	f3bf 8f6f 	isb	sy
 810cbca:	f3bf 8f4f 	dsb	sy
 810cbce:	613b      	str	r3, [r7, #16]
}
 810cbd0:	bf00      	nop
 810cbd2:	bf00      	nop
 810cbd4:	e7fd      	b.n	810cbd2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810cbd6:	68fb      	ldr	r3, [r7, #12]
 810cbd8:	68ba      	ldr	r2, [r7, #8]
 810cbda:	fb02 f303 	mul.w	r3, r2, r3
 810cbde:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 810cbe0:	69fb      	ldr	r3, [r7, #28]
 810cbe2:	3350      	adds	r3, #80	@ 0x50
 810cbe4:	4618      	mov	r0, r3
 810cbe6:	f7ff fa07 	bl	810bff8 <pvPortMalloc>
 810cbea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 810cbec:	69bb      	ldr	r3, [r7, #24]
 810cbee:	2b00      	cmp	r3, #0
 810cbf0:	d011      	beq.n	810cc16 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 810cbf2:	69bb      	ldr	r3, [r7, #24]
 810cbf4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 810cbf6:	697b      	ldr	r3, [r7, #20]
 810cbf8:	3350      	adds	r3, #80	@ 0x50
 810cbfa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 810cbfc:	69bb      	ldr	r3, [r7, #24]
 810cbfe:	2200      	movs	r2, #0
 810cc00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 810cc04:	79fa      	ldrb	r2, [r7, #7]
 810cc06:	69bb      	ldr	r3, [r7, #24]
 810cc08:	9300      	str	r3, [sp, #0]
 810cc0a:	4613      	mov	r3, r2
 810cc0c:	697a      	ldr	r2, [r7, #20]
 810cc0e:	68b9      	ldr	r1, [r7, #8]
 810cc10:	68f8      	ldr	r0, [r7, #12]
 810cc12:	f000 f805 	bl	810cc20 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 810cc16:	69bb      	ldr	r3, [r7, #24]
	}
 810cc18:	4618      	mov	r0, r3
 810cc1a:	3720      	adds	r7, #32
 810cc1c:	46bd      	mov	sp, r7
 810cc1e:	bd80      	pop	{r7, pc}

0810cc20 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 810cc20:	b580      	push	{r7, lr}
 810cc22:	b084      	sub	sp, #16
 810cc24:	af00      	add	r7, sp, #0
 810cc26:	60f8      	str	r0, [r7, #12]
 810cc28:	60b9      	str	r1, [r7, #8]
 810cc2a:	607a      	str	r2, [r7, #4]
 810cc2c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 810cc2e:	68bb      	ldr	r3, [r7, #8]
 810cc30:	2b00      	cmp	r3, #0
 810cc32:	d103      	bne.n	810cc3c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 810cc34:	69bb      	ldr	r3, [r7, #24]
 810cc36:	69ba      	ldr	r2, [r7, #24]
 810cc38:	601a      	str	r2, [r3, #0]
 810cc3a:	e002      	b.n	810cc42 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 810cc3c:	69bb      	ldr	r3, [r7, #24]
 810cc3e:	687a      	ldr	r2, [r7, #4]
 810cc40:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 810cc42:	69bb      	ldr	r3, [r7, #24]
 810cc44:	68fa      	ldr	r2, [r7, #12]
 810cc46:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 810cc48:	69bb      	ldr	r3, [r7, #24]
 810cc4a:	68ba      	ldr	r2, [r7, #8]
 810cc4c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 810cc4e:	2101      	movs	r1, #1
 810cc50:	69b8      	ldr	r0, [r7, #24]
 810cc52:	f7ff fec3 	bl	810c9dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 810cc56:	69bb      	ldr	r3, [r7, #24]
 810cc58:	78fa      	ldrb	r2, [r7, #3]
 810cc5a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 810cc5e:	bf00      	nop
 810cc60:	3710      	adds	r7, #16
 810cc62:	46bd      	mov	sp, r7
 810cc64:	bd80      	pop	{r7, pc}

0810cc66 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 810cc66:	b580      	push	{r7, lr}
 810cc68:	b082      	sub	sp, #8
 810cc6a:	af00      	add	r7, sp, #0
 810cc6c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 810cc6e:	687b      	ldr	r3, [r7, #4]
 810cc70:	2b00      	cmp	r3, #0
 810cc72:	d00e      	beq.n	810cc92 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 810cc74:	687b      	ldr	r3, [r7, #4]
 810cc76:	2200      	movs	r2, #0
 810cc78:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 810cc7a:	687b      	ldr	r3, [r7, #4]
 810cc7c:	2200      	movs	r2, #0
 810cc7e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 810cc80:	687b      	ldr	r3, [r7, #4]
 810cc82:	2200      	movs	r2, #0
 810cc84:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 810cc86:	2300      	movs	r3, #0
 810cc88:	2200      	movs	r2, #0
 810cc8a:	2100      	movs	r1, #0
 810cc8c:	6878      	ldr	r0, [r7, #4]
 810cc8e:	f000 f8a3 	bl	810cdd8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 810cc92:	bf00      	nop
 810cc94:	3708      	adds	r7, #8
 810cc96:	46bd      	mov	sp, r7
 810cc98:	bd80      	pop	{r7, pc}

0810cc9a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 810cc9a:	b580      	push	{r7, lr}
 810cc9c:	b086      	sub	sp, #24
 810cc9e:	af00      	add	r7, sp, #0
 810cca0:	4603      	mov	r3, r0
 810cca2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810cca4:	2301      	movs	r3, #1
 810cca6:	617b      	str	r3, [r7, #20]
 810cca8:	2300      	movs	r3, #0
 810ccaa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 810ccac:	79fb      	ldrb	r3, [r7, #7]
 810ccae:	461a      	mov	r2, r3
 810ccb0:	6939      	ldr	r1, [r7, #16]
 810ccb2:	6978      	ldr	r0, [r7, #20]
 810ccb4:	f7ff ff79 	bl	810cbaa <xQueueGenericCreate>
 810ccb8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810ccba:	68f8      	ldr	r0, [r7, #12]
 810ccbc:	f7ff ffd3 	bl	810cc66 <prvInitialiseMutex>

		return xNewQueue;
 810ccc0:	68fb      	ldr	r3, [r7, #12]
	}
 810ccc2:	4618      	mov	r0, r3
 810ccc4:	3718      	adds	r7, #24
 810ccc6:	46bd      	mov	sp, r7
 810ccc8:	bd80      	pop	{r7, pc}

0810ccca <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 810ccca:	b580      	push	{r7, lr}
 810cccc:	b088      	sub	sp, #32
 810ccce:	af02      	add	r7, sp, #8
 810ccd0:	4603      	mov	r3, r0
 810ccd2:	6039      	str	r1, [r7, #0]
 810ccd4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 810ccd6:	2301      	movs	r3, #1
 810ccd8:	617b      	str	r3, [r7, #20]
 810ccda:	2300      	movs	r3, #0
 810ccdc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 810ccde:	79fb      	ldrb	r3, [r7, #7]
 810cce0:	9300      	str	r3, [sp, #0]
 810cce2:	683b      	ldr	r3, [r7, #0]
 810cce4:	2200      	movs	r2, #0
 810cce6:	6939      	ldr	r1, [r7, #16]
 810cce8:	6978      	ldr	r0, [r7, #20]
 810ccea:	f7ff fee1 	bl	810cab0 <xQueueGenericCreateStatic>
 810ccee:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 810ccf0:	68f8      	ldr	r0, [r7, #12]
 810ccf2:	f7ff ffb8 	bl	810cc66 <prvInitialiseMutex>

		return xNewQueue;
 810ccf6:	68fb      	ldr	r3, [r7, #12]
	}
 810ccf8:	4618      	mov	r0, r3
 810ccfa:	3718      	adds	r7, #24
 810ccfc:	46bd      	mov	sp, r7
 810ccfe:	bd80      	pop	{r7, pc}

0810cd00 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 810cd00:	b590      	push	{r4, r7, lr}
 810cd02:	b087      	sub	sp, #28
 810cd04:	af00      	add	r7, sp, #0
 810cd06:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810cd08:	687b      	ldr	r3, [r7, #4]
 810cd0a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810cd0c:	693b      	ldr	r3, [r7, #16]
 810cd0e:	2b00      	cmp	r3, #0
 810cd10:	d10b      	bne.n	810cd2a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 810cd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd16:	f383 8811 	msr	BASEPRI, r3
 810cd1a:	f3bf 8f6f 	isb	sy
 810cd1e:	f3bf 8f4f 	dsb	sy
 810cd22:	60fb      	str	r3, [r7, #12]
}
 810cd24:	bf00      	nop
 810cd26:	bf00      	nop
 810cd28:	e7fd      	b.n	810cd26 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810cd2a:	693b      	ldr	r3, [r7, #16]
 810cd2c:	689c      	ldr	r4, [r3, #8]
 810cd2e:	f001 fc55 	bl	810e5dc <xTaskGetCurrentTaskHandle>
 810cd32:	4603      	mov	r3, r0
 810cd34:	429c      	cmp	r4, r3
 810cd36:	d111      	bne.n	810cd5c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 810cd38:	693b      	ldr	r3, [r7, #16]
 810cd3a:	68db      	ldr	r3, [r3, #12]
 810cd3c:	1e5a      	subs	r2, r3, #1
 810cd3e:	693b      	ldr	r3, [r7, #16]
 810cd40:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 810cd42:	693b      	ldr	r3, [r7, #16]
 810cd44:	68db      	ldr	r3, [r3, #12]
 810cd46:	2b00      	cmp	r3, #0
 810cd48:	d105      	bne.n	810cd56 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 810cd4a:	2300      	movs	r3, #0
 810cd4c:	2200      	movs	r2, #0
 810cd4e:	2100      	movs	r1, #0
 810cd50:	6938      	ldr	r0, [r7, #16]
 810cd52:	f000 f841 	bl	810cdd8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 810cd56:	2301      	movs	r3, #1
 810cd58:	617b      	str	r3, [r7, #20]
 810cd5a:	e001      	b.n	810cd60 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 810cd5c:	2300      	movs	r3, #0
 810cd5e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 810cd60:	697b      	ldr	r3, [r7, #20]
	}
 810cd62:	4618      	mov	r0, r3
 810cd64:	371c      	adds	r7, #28
 810cd66:	46bd      	mov	sp, r7
 810cd68:	bd90      	pop	{r4, r7, pc}

0810cd6a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 810cd6a:	b590      	push	{r4, r7, lr}
 810cd6c:	b087      	sub	sp, #28
 810cd6e:	af00      	add	r7, sp, #0
 810cd70:	6078      	str	r0, [r7, #4]
 810cd72:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 810cd74:	687b      	ldr	r3, [r7, #4]
 810cd76:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 810cd78:	693b      	ldr	r3, [r7, #16]
 810cd7a:	2b00      	cmp	r3, #0
 810cd7c:	d10b      	bne.n	810cd96 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 810cd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cd82:	f383 8811 	msr	BASEPRI, r3
 810cd86:	f3bf 8f6f 	isb	sy
 810cd8a:	f3bf 8f4f 	dsb	sy
 810cd8e:	60fb      	str	r3, [r7, #12]
}
 810cd90:	bf00      	nop
 810cd92:	bf00      	nop
 810cd94:	e7fd      	b.n	810cd92 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 810cd96:	693b      	ldr	r3, [r7, #16]
 810cd98:	689c      	ldr	r4, [r3, #8]
 810cd9a:	f001 fc1f 	bl	810e5dc <xTaskGetCurrentTaskHandle>
 810cd9e:	4603      	mov	r3, r0
 810cda0:	429c      	cmp	r4, r3
 810cda2:	d107      	bne.n	810cdb4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810cda4:	693b      	ldr	r3, [r7, #16]
 810cda6:	68db      	ldr	r3, [r3, #12]
 810cda8:	1c5a      	adds	r2, r3, #1
 810cdaa:	693b      	ldr	r3, [r7, #16]
 810cdac:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 810cdae:	2301      	movs	r3, #1
 810cdb0:	617b      	str	r3, [r7, #20]
 810cdb2:	e00c      	b.n	810cdce <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 810cdb4:	6839      	ldr	r1, [r7, #0]
 810cdb6:	6938      	ldr	r0, [r7, #16]
 810cdb8:	f000 fa90 	bl	810d2dc <xQueueSemaphoreTake>
 810cdbc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 810cdbe:	697b      	ldr	r3, [r7, #20]
 810cdc0:	2b00      	cmp	r3, #0
 810cdc2:	d004      	beq.n	810cdce <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 810cdc4:	693b      	ldr	r3, [r7, #16]
 810cdc6:	68db      	ldr	r3, [r3, #12]
 810cdc8:	1c5a      	adds	r2, r3, #1
 810cdca:	693b      	ldr	r3, [r7, #16]
 810cdcc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 810cdce:	697b      	ldr	r3, [r7, #20]
	}
 810cdd0:	4618      	mov	r0, r3
 810cdd2:	371c      	adds	r7, #28
 810cdd4:	46bd      	mov	sp, r7
 810cdd6:	bd90      	pop	{r4, r7, pc}

0810cdd8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 810cdd8:	b580      	push	{r7, lr}
 810cdda:	b08e      	sub	sp, #56	@ 0x38
 810cddc:	af00      	add	r7, sp, #0
 810cdde:	60f8      	str	r0, [r7, #12]
 810cde0:	60b9      	str	r1, [r7, #8]
 810cde2:	607a      	str	r2, [r7, #4]
 810cde4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 810cde6:	2300      	movs	r3, #0
 810cde8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810cdea:	68fb      	ldr	r3, [r7, #12]
 810cdec:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 810cdee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cdf0:	2b00      	cmp	r3, #0
 810cdf2:	d10b      	bne.n	810ce0c <xQueueGenericSend+0x34>
	__asm volatile
 810cdf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cdf8:	f383 8811 	msr	BASEPRI, r3
 810cdfc:	f3bf 8f6f 	isb	sy
 810ce00:	f3bf 8f4f 	dsb	sy
 810ce04:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810ce06:	bf00      	nop
 810ce08:	bf00      	nop
 810ce0a:	e7fd      	b.n	810ce08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810ce0c:	68bb      	ldr	r3, [r7, #8]
 810ce0e:	2b00      	cmp	r3, #0
 810ce10:	d103      	bne.n	810ce1a <xQueueGenericSend+0x42>
 810ce12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ce14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810ce16:	2b00      	cmp	r3, #0
 810ce18:	d101      	bne.n	810ce1e <xQueueGenericSend+0x46>
 810ce1a:	2301      	movs	r3, #1
 810ce1c:	e000      	b.n	810ce20 <xQueueGenericSend+0x48>
 810ce1e:	2300      	movs	r3, #0
 810ce20:	2b00      	cmp	r3, #0
 810ce22:	d10b      	bne.n	810ce3c <xQueueGenericSend+0x64>
	__asm volatile
 810ce24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ce28:	f383 8811 	msr	BASEPRI, r3
 810ce2c:	f3bf 8f6f 	isb	sy
 810ce30:	f3bf 8f4f 	dsb	sy
 810ce34:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810ce36:	bf00      	nop
 810ce38:	bf00      	nop
 810ce3a:	e7fd      	b.n	810ce38 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810ce3c:	683b      	ldr	r3, [r7, #0]
 810ce3e:	2b02      	cmp	r3, #2
 810ce40:	d103      	bne.n	810ce4a <xQueueGenericSend+0x72>
 810ce42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ce44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ce46:	2b01      	cmp	r3, #1
 810ce48:	d101      	bne.n	810ce4e <xQueueGenericSend+0x76>
 810ce4a:	2301      	movs	r3, #1
 810ce4c:	e000      	b.n	810ce50 <xQueueGenericSend+0x78>
 810ce4e:	2300      	movs	r3, #0
 810ce50:	2b00      	cmp	r3, #0
 810ce52:	d10b      	bne.n	810ce6c <xQueueGenericSend+0x94>
	__asm volatile
 810ce54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ce58:	f383 8811 	msr	BASEPRI, r3
 810ce5c:	f3bf 8f6f 	isb	sy
 810ce60:	f3bf 8f4f 	dsb	sy
 810ce64:	623b      	str	r3, [r7, #32]
}
 810ce66:	bf00      	nop
 810ce68:	bf00      	nop
 810ce6a:	e7fd      	b.n	810ce68 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810ce6c:	f001 fbc6 	bl	810e5fc <xTaskGetSchedulerState>
 810ce70:	4603      	mov	r3, r0
 810ce72:	2b00      	cmp	r3, #0
 810ce74:	d102      	bne.n	810ce7c <xQueueGenericSend+0xa4>
 810ce76:	687b      	ldr	r3, [r7, #4]
 810ce78:	2b00      	cmp	r3, #0
 810ce7a:	d101      	bne.n	810ce80 <xQueueGenericSend+0xa8>
 810ce7c:	2301      	movs	r3, #1
 810ce7e:	e000      	b.n	810ce82 <xQueueGenericSend+0xaa>
 810ce80:	2300      	movs	r3, #0
 810ce82:	2b00      	cmp	r3, #0
 810ce84:	d10b      	bne.n	810ce9e <xQueueGenericSend+0xc6>
	__asm volatile
 810ce86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ce8a:	f383 8811 	msr	BASEPRI, r3
 810ce8e:	f3bf 8f6f 	isb	sy
 810ce92:	f3bf 8f4f 	dsb	sy
 810ce96:	61fb      	str	r3, [r7, #28]
}
 810ce98:	bf00      	nop
 810ce9a:	bf00      	nop
 810ce9c:	e7fd      	b.n	810ce9a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810ce9e:	f7ff fc7b 	bl	810c798 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810cea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cea4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810cea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cea8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810ceaa:	429a      	cmp	r2, r3
 810ceac:	d302      	bcc.n	810ceb4 <xQueueGenericSend+0xdc>
 810ceae:	683b      	ldr	r3, [r7, #0]
 810ceb0:	2b02      	cmp	r3, #2
 810ceb2:	d129      	bne.n	810cf08 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810ceb4:	683a      	ldr	r2, [r7, #0]
 810ceb6:	68b9      	ldr	r1, [r7, #8]
 810ceb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810ceba:	f000 fb37 	bl	810d52c <prvCopyDataToQueue>
 810cebe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810cec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810cec4:	2b00      	cmp	r3, #0
 810cec6:	d010      	beq.n	810ceea <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810cec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810ceca:	3324      	adds	r3, #36	@ 0x24
 810cecc:	4618      	mov	r0, r3
 810cece:	f001 f9bf 	bl	810e250 <xTaskRemoveFromEventList>
 810ced2:	4603      	mov	r3, r0
 810ced4:	2b00      	cmp	r3, #0
 810ced6:	d013      	beq.n	810cf00 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 810ced8:	4b3f      	ldr	r3, [pc, #252]	@ (810cfd8 <xQueueGenericSend+0x200>)
 810ceda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cede:	601a      	str	r2, [r3, #0]
 810cee0:	f3bf 8f4f 	dsb	sy
 810cee4:	f3bf 8f6f 	isb	sy
 810cee8:	e00a      	b.n	810cf00 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 810ceea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ceec:	2b00      	cmp	r3, #0
 810ceee:	d007      	beq.n	810cf00 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 810cef0:	4b39      	ldr	r3, [pc, #228]	@ (810cfd8 <xQueueGenericSend+0x200>)
 810cef2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cef6:	601a      	str	r2, [r3, #0]
 810cef8:	f3bf 8f4f 	dsb	sy
 810cefc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 810cf00:	f7ff fc7c 	bl	810c7fc <vPortExitCritical>
				return pdPASS;
 810cf04:	2301      	movs	r3, #1
 810cf06:	e063      	b.n	810cfd0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810cf08:	687b      	ldr	r3, [r7, #4]
 810cf0a:	2b00      	cmp	r3, #0
 810cf0c:	d103      	bne.n	810cf16 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810cf0e:	f7ff fc75 	bl	810c7fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 810cf12:	2300      	movs	r3, #0
 810cf14:	e05c      	b.n	810cfd0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810cf16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810cf18:	2b00      	cmp	r3, #0
 810cf1a:	d106      	bne.n	810cf2a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810cf1c:	f107 0314 	add.w	r3, r7, #20
 810cf20:	4618      	mov	r0, r3
 810cf22:	f001 f9f9 	bl	810e318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810cf26:	2301      	movs	r3, #1
 810cf28:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810cf2a:	f7ff fc67 	bl	810c7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810cf2e:	f000 ff4f 	bl	810ddd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810cf32:	f7ff fc31 	bl	810c798 <vPortEnterCritical>
 810cf36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810cf3c:	b25b      	sxtb	r3, r3
 810cf3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf42:	d103      	bne.n	810cf4c <xQueueGenericSend+0x174>
 810cf44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf46:	2200      	movs	r2, #0
 810cf48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810cf4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf4e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810cf52:	b25b      	sxtb	r3, r3
 810cf54:	f1b3 3fff 	cmp.w	r3, #4294967295
 810cf58:	d103      	bne.n	810cf62 <xQueueGenericSend+0x18a>
 810cf5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf5c:	2200      	movs	r2, #0
 810cf5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810cf62:	f7ff fc4b 	bl	810c7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810cf66:	1d3a      	adds	r2, r7, #4
 810cf68:	f107 0314 	add.w	r3, r7, #20
 810cf6c:	4611      	mov	r1, r2
 810cf6e:	4618      	mov	r0, r3
 810cf70:	f001 f9e8 	bl	810e344 <xTaskCheckForTimeOut>
 810cf74:	4603      	mov	r3, r0
 810cf76:	2b00      	cmp	r3, #0
 810cf78:	d124      	bne.n	810cfc4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 810cf7a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cf7c:	f000 fbce 	bl	810d71c <prvIsQueueFull>
 810cf80:	4603      	mov	r3, r0
 810cf82:	2b00      	cmp	r3, #0
 810cf84:	d018      	beq.n	810cfb8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 810cf86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810cf88:	3310      	adds	r3, #16
 810cf8a:	687a      	ldr	r2, [r7, #4]
 810cf8c:	4611      	mov	r1, r2
 810cf8e:	4618      	mov	r0, r3
 810cf90:	f001 f90c 	bl	810e1ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 810cf94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cf96:	f000 fb59 	bl	810d64c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 810cf9a:	f000 ff27 	bl	810ddec <xTaskResumeAll>
 810cf9e:	4603      	mov	r3, r0
 810cfa0:	2b00      	cmp	r3, #0
 810cfa2:	f47f af7c 	bne.w	810ce9e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 810cfa6:	4b0c      	ldr	r3, [pc, #48]	@ (810cfd8 <xQueueGenericSend+0x200>)
 810cfa8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810cfac:	601a      	str	r2, [r3, #0]
 810cfae:	f3bf 8f4f 	dsb	sy
 810cfb2:	f3bf 8f6f 	isb	sy
 810cfb6:	e772      	b.n	810ce9e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 810cfb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cfba:	f000 fb47 	bl	810d64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810cfbe:	f000 ff15 	bl	810ddec <xTaskResumeAll>
 810cfc2:	e76c      	b.n	810ce9e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 810cfc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 810cfc6:	f000 fb41 	bl	810d64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810cfca:	f000 ff0f 	bl	810ddec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 810cfce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 810cfd0:	4618      	mov	r0, r3
 810cfd2:	3738      	adds	r7, #56	@ 0x38
 810cfd4:	46bd      	mov	sp, r7
 810cfd6:	bd80      	pop	{r7, pc}
 810cfd8:	e000ed04 	.word	0xe000ed04

0810cfdc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 810cfdc:	b580      	push	{r7, lr}
 810cfde:	b090      	sub	sp, #64	@ 0x40
 810cfe0:	af00      	add	r7, sp, #0
 810cfe2:	60f8      	str	r0, [r7, #12]
 810cfe4:	60b9      	str	r1, [r7, #8]
 810cfe6:	607a      	str	r2, [r7, #4]
 810cfe8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 810cfea:	68fb      	ldr	r3, [r7, #12]
 810cfec:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 810cfee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810cff0:	2b00      	cmp	r3, #0
 810cff2:	d10b      	bne.n	810d00c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 810cff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810cff8:	f383 8811 	msr	BASEPRI, r3
 810cffc:	f3bf 8f6f 	isb	sy
 810d000:	f3bf 8f4f 	dsb	sy
 810d004:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 810d006:	bf00      	nop
 810d008:	bf00      	nop
 810d00a:	e7fd      	b.n	810d008 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d00c:	68bb      	ldr	r3, [r7, #8]
 810d00e:	2b00      	cmp	r3, #0
 810d010:	d103      	bne.n	810d01a <xQueueGenericSendFromISR+0x3e>
 810d012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d016:	2b00      	cmp	r3, #0
 810d018:	d101      	bne.n	810d01e <xQueueGenericSendFromISR+0x42>
 810d01a:	2301      	movs	r3, #1
 810d01c:	e000      	b.n	810d020 <xQueueGenericSendFromISR+0x44>
 810d01e:	2300      	movs	r3, #0
 810d020:	2b00      	cmp	r3, #0
 810d022:	d10b      	bne.n	810d03c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 810d024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d028:	f383 8811 	msr	BASEPRI, r3
 810d02c:	f3bf 8f6f 	isb	sy
 810d030:	f3bf 8f4f 	dsb	sy
 810d034:	627b      	str	r3, [r7, #36]	@ 0x24
}
 810d036:	bf00      	nop
 810d038:	bf00      	nop
 810d03a:	e7fd      	b.n	810d038 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 810d03c:	683b      	ldr	r3, [r7, #0]
 810d03e:	2b02      	cmp	r3, #2
 810d040:	d103      	bne.n	810d04a <xQueueGenericSendFromISR+0x6e>
 810d042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d044:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d046:	2b01      	cmp	r3, #1
 810d048:	d101      	bne.n	810d04e <xQueueGenericSendFromISR+0x72>
 810d04a:	2301      	movs	r3, #1
 810d04c:	e000      	b.n	810d050 <xQueueGenericSendFromISR+0x74>
 810d04e:	2300      	movs	r3, #0
 810d050:	2b00      	cmp	r3, #0
 810d052:	d10b      	bne.n	810d06c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 810d054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d058:	f383 8811 	msr	BASEPRI, r3
 810d05c:	f3bf 8f6f 	isb	sy
 810d060:	f3bf 8f4f 	dsb	sy
 810d064:	623b      	str	r3, [r7, #32]
}
 810d066:	bf00      	nop
 810d068:	bf00      	nop
 810d06a:	e7fd      	b.n	810d068 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810d06c:	f7ff fc74 	bl	810c958 <vPortValidateInterruptPriority>
	__asm volatile
 810d070:	f3ef 8211 	mrs	r2, BASEPRI
 810d074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d078:	f383 8811 	msr	BASEPRI, r3
 810d07c:	f3bf 8f6f 	isb	sy
 810d080:	f3bf 8f4f 	dsb	sy
 810d084:	61fa      	str	r2, [r7, #28]
 810d086:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 810d088:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 810d08a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 810d08c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d08e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d094:	429a      	cmp	r2, r3
 810d096:	d302      	bcc.n	810d09e <xQueueGenericSendFromISR+0xc2>
 810d098:	683b      	ldr	r3, [r7, #0]
 810d09a:	2b02      	cmp	r3, #2
 810d09c:	d12f      	bne.n	810d0fe <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 810d09e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d0a0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d0a4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d0a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d0aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d0ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 810d0ae:	683a      	ldr	r2, [r7, #0]
 810d0b0:	68b9      	ldr	r1, [r7, #8]
 810d0b2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 810d0b4:	f000 fa3a 	bl	810d52c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 810d0b8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 810d0bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d0c0:	d112      	bne.n	810d0e8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d0c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d0c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d0c6:	2b00      	cmp	r3, #0
 810d0c8:	d016      	beq.n	810d0f8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d0ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d0cc:	3324      	adds	r3, #36	@ 0x24
 810d0ce:	4618      	mov	r0, r3
 810d0d0:	f001 f8be 	bl	810e250 <xTaskRemoveFromEventList>
 810d0d4:	4603      	mov	r3, r0
 810d0d6:	2b00      	cmp	r3, #0
 810d0d8:	d00e      	beq.n	810d0f8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 810d0da:	687b      	ldr	r3, [r7, #4]
 810d0dc:	2b00      	cmp	r3, #0
 810d0de:	d00b      	beq.n	810d0f8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 810d0e0:	687b      	ldr	r3, [r7, #4]
 810d0e2:	2201      	movs	r2, #1
 810d0e4:	601a      	str	r2, [r3, #0]
 810d0e6:	e007      	b.n	810d0f8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 810d0e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 810d0ec:	3301      	adds	r3, #1
 810d0ee:	b2db      	uxtb	r3, r3
 810d0f0:	b25a      	sxtb	r2, r3
 810d0f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d0f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 810d0f8:	2301      	movs	r3, #1
 810d0fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 810d0fc:	e001      	b.n	810d102 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 810d0fe:	2300      	movs	r3, #0
 810d100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810d102:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d104:	617b      	str	r3, [r7, #20]
	__asm volatile
 810d106:	697b      	ldr	r3, [r7, #20]
 810d108:	f383 8811 	msr	BASEPRI, r3
}
 810d10c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810d10e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 810d110:	4618      	mov	r0, r3
 810d112:	3740      	adds	r7, #64	@ 0x40
 810d114:	46bd      	mov	sp, r7
 810d116:	bd80      	pop	{r7, pc}

0810d118 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 810d118:	b580      	push	{r7, lr}
 810d11a:	b08c      	sub	sp, #48	@ 0x30
 810d11c:	af00      	add	r7, sp, #0
 810d11e:	60f8      	str	r0, [r7, #12]
 810d120:	60b9      	str	r1, [r7, #8]
 810d122:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 810d124:	2300      	movs	r3, #0
 810d126:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d128:	68fb      	ldr	r3, [r7, #12]
 810d12a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d12e:	2b00      	cmp	r3, #0
 810d130:	d10b      	bne.n	810d14a <xQueueReceive+0x32>
	__asm volatile
 810d132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d136:	f383 8811 	msr	BASEPRI, r3
 810d13a:	f3bf 8f6f 	isb	sy
 810d13e:	f3bf 8f4f 	dsb	sy
 810d142:	623b      	str	r3, [r7, #32]
}
 810d144:	bf00      	nop
 810d146:	bf00      	nop
 810d148:	e7fd      	b.n	810d146 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 810d14a:	68bb      	ldr	r3, [r7, #8]
 810d14c:	2b00      	cmp	r3, #0
 810d14e:	d103      	bne.n	810d158 <xQueueReceive+0x40>
 810d150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d154:	2b00      	cmp	r3, #0
 810d156:	d101      	bne.n	810d15c <xQueueReceive+0x44>
 810d158:	2301      	movs	r3, #1
 810d15a:	e000      	b.n	810d15e <xQueueReceive+0x46>
 810d15c:	2300      	movs	r3, #0
 810d15e:	2b00      	cmp	r3, #0
 810d160:	d10b      	bne.n	810d17a <xQueueReceive+0x62>
	__asm volatile
 810d162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d166:	f383 8811 	msr	BASEPRI, r3
 810d16a:	f3bf 8f6f 	isb	sy
 810d16e:	f3bf 8f4f 	dsb	sy
 810d172:	61fb      	str	r3, [r7, #28]
}
 810d174:	bf00      	nop
 810d176:	bf00      	nop
 810d178:	e7fd      	b.n	810d176 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d17a:	f001 fa3f 	bl	810e5fc <xTaskGetSchedulerState>
 810d17e:	4603      	mov	r3, r0
 810d180:	2b00      	cmp	r3, #0
 810d182:	d102      	bne.n	810d18a <xQueueReceive+0x72>
 810d184:	687b      	ldr	r3, [r7, #4]
 810d186:	2b00      	cmp	r3, #0
 810d188:	d101      	bne.n	810d18e <xQueueReceive+0x76>
 810d18a:	2301      	movs	r3, #1
 810d18c:	e000      	b.n	810d190 <xQueueReceive+0x78>
 810d18e:	2300      	movs	r3, #0
 810d190:	2b00      	cmp	r3, #0
 810d192:	d10b      	bne.n	810d1ac <xQueueReceive+0x94>
	__asm volatile
 810d194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d198:	f383 8811 	msr	BASEPRI, r3
 810d19c:	f3bf 8f6f 	isb	sy
 810d1a0:	f3bf 8f4f 	dsb	sy
 810d1a4:	61bb      	str	r3, [r7, #24]
}
 810d1a6:	bf00      	nop
 810d1a8:	bf00      	nop
 810d1aa:	e7fd      	b.n	810d1a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d1ac:	f7ff faf4 	bl	810c798 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d1b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d1b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d1b8:	2b00      	cmp	r3, #0
 810d1ba:	d01f      	beq.n	810d1fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 810d1bc:	68b9      	ldr	r1, [r7, #8]
 810d1be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d1c0:	f000 fa1e 	bl	810d600 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 810d1c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d1c6:	1e5a      	subs	r2, r3, #1
 810d1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d1cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1ce:	691b      	ldr	r3, [r3, #16]
 810d1d0:	2b00      	cmp	r3, #0
 810d1d2:	d00f      	beq.n	810d1f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d1d6:	3310      	adds	r3, #16
 810d1d8:	4618      	mov	r0, r3
 810d1da:	f001 f839 	bl	810e250 <xTaskRemoveFromEventList>
 810d1de:	4603      	mov	r3, r0
 810d1e0:	2b00      	cmp	r3, #0
 810d1e2:	d007      	beq.n	810d1f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d1e4:	4b3c      	ldr	r3, [pc, #240]	@ (810d2d8 <xQueueReceive+0x1c0>)
 810d1e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d1ea:	601a      	str	r2, [r3, #0]
 810d1ec:	f3bf 8f4f 	dsb	sy
 810d1f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d1f4:	f7ff fb02 	bl	810c7fc <vPortExitCritical>
				return pdPASS;
 810d1f8:	2301      	movs	r3, #1
 810d1fa:	e069      	b.n	810d2d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d1fc:	687b      	ldr	r3, [r7, #4]
 810d1fe:	2b00      	cmp	r3, #0
 810d200:	d103      	bne.n	810d20a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 810d202:	f7ff fafb 	bl	810c7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d206:	2300      	movs	r3, #0
 810d208:	e062      	b.n	810d2d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d20a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d20c:	2b00      	cmp	r3, #0
 810d20e:	d106      	bne.n	810d21e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d210:	f107 0310 	add.w	r3, r7, #16
 810d214:	4618      	mov	r0, r3
 810d216:	f001 f87f 	bl	810e318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d21a:	2301      	movs	r3, #1
 810d21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d21e:	f7ff faed 	bl	810c7fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d222:	f000 fdd5 	bl	810ddd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d226:	f7ff fab7 	bl	810c798 <vPortEnterCritical>
 810d22a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d22c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d230:	b25b      	sxtb	r3, r3
 810d232:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d236:	d103      	bne.n	810d240 <xQueueReceive+0x128>
 810d238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d23a:	2200      	movs	r2, #0
 810d23c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d242:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d246:	b25b      	sxtb	r3, r3
 810d248:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d24c:	d103      	bne.n	810d256 <xQueueReceive+0x13e>
 810d24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d250:	2200      	movs	r2, #0
 810d252:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d256:	f7ff fad1 	bl	810c7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d25a:	1d3a      	adds	r2, r7, #4
 810d25c:	f107 0310 	add.w	r3, r7, #16
 810d260:	4611      	mov	r1, r2
 810d262:	4618      	mov	r0, r3
 810d264:	f001 f86e 	bl	810e344 <xTaskCheckForTimeOut>
 810d268:	4603      	mov	r3, r0
 810d26a:	2b00      	cmp	r3, #0
 810d26c:	d123      	bne.n	810d2b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d26e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d270:	f000 fa3e 	bl	810d6f0 <prvIsQueueEmpty>
 810d274:	4603      	mov	r3, r0
 810d276:	2b00      	cmp	r3, #0
 810d278:	d017      	beq.n	810d2aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d27c:	3324      	adds	r3, #36	@ 0x24
 810d27e:	687a      	ldr	r2, [r7, #4]
 810d280:	4611      	mov	r1, r2
 810d282:	4618      	mov	r0, r3
 810d284:	f000 ff92 	bl	810e1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d28a:	f000 f9df 	bl	810d64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d28e:	f000 fdad 	bl	810ddec <xTaskResumeAll>
 810d292:	4603      	mov	r3, r0
 810d294:	2b00      	cmp	r3, #0
 810d296:	d189      	bne.n	810d1ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 810d298:	4b0f      	ldr	r3, [pc, #60]	@ (810d2d8 <xQueueReceive+0x1c0>)
 810d29a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d29e:	601a      	str	r2, [r3, #0]
 810d2a0:	f3bf 8f4f 	dsb	sy
 810d2a4:	f3bf 8f6f 	isb	sy
 810d2a8:	e780      	b.n	810d1ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 810d2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d2ac:	f000 f9ce 	bl	810d64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d2b0:	f000 fd9c 	bl	810ddec <xTaskResumeAll>
 810d2b4:	e77a      	b.n	810d1ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 810d2b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d2b8:	f000 f9c8 	bl	810d64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d2bc:	f000 fd96 	bl	810ddec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d2c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810d2c2:	f000 fa15 	bl	810d6f0 <prvIsQueueEmpty>
 810d2c6:	4603      	mov	r3, r0
 810d2c8:	2b00      	cmp	r3, #0
 810d2ca:	f43f af6f 	beq.w	810d1ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d2ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d2d0:	4618      	mov	r0, r3
 810d2d2:	3730      	adds	r7, #48	@ 0x30
 810d2d4:	46bd      	mov	sp, r7
 810d2d6:	bd80      	pop	{r7, pc}
 810d2d8:	e000ed04 	.word	0xe000ed04

0810d2dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 810d2dc:	b580      	push	{r7, lr}
 810d2de:	b08e      	sub	sp, #56	@ 0x38
 810d2e0:	af00      	add	r7, sp, #0
 810d2e2:	6078      	str	r0, [r7, #4]
 810d2e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 810d2e6:	2300      	movs	r3, #0
 810d2e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 810d2ea:	687b      	ldr	r3, [r7, #4]
 810d2ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 810d2ee:	2300      	movs	r3, #0
 810d2f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 810d2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d2f4:	2b00      	cmp	r3, #0
 810d2f6:	d10b      	bne.n	810d310 <xQueueSemaphoreTake+0x34>
	__asm volatile
 810d2f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d2fc:	f383 8811 	msr	BASEPRI, r3
 810d300:	f3bf 8f6f 	isb	sy
 810d304:	f3bf 8f4f 	dsb	sy
 810d308:	623b      	str	r3, [r7, #32]
}
 810d30a:	bf00      	nop
 810d30c:	bf00      	nop
 810d30e:	e7fd      	b.n	810d30c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 810d310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d314:	2b00      	cmp	r3, #0
 810d316:	d00b      	beq.n	810d330 <xQueueSemaphoreTake+0x54>
	__asm volatile
 810d318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d31c:	f383 8811 	msr	BASEPRI, r3
 810d320:	f3bf 8f6f 	isb	sy
 810d324:	f3bf 8f4f 	dsb	sy
 810d328:	61fb      	str	r3, [r7, #28]
}
 810d32a:	bf00      	nop
 810d32c:	bf00      	nop
 810d32e:	e7fd      	b.n	810d32c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 810d330:	f001 f964 	bl	810e5fc <xTaskGetSchedulerState>
 810d334:	4603      	mov	r3, r0
 810d336:	2b00      	cmp	r3, #0
 810d338:	d102      	bne.n	810d340 <xQueueSemaphoreTake+0x64>
 810d33a:	683b      	ldr	r3, [r7, #0]
 810d33c:	2b00      	cmp	r3, #0
 810d33e:	d101      	bne.n	810d344 <xQueueSemaphoreTake+0x68>
 810d340:	2301      	movs	r3, #1
 810d342:	e000      	b.n	810d346 <xQueueSemaphoreTake+0x6a>
 810d344:	2300      	movs	r3, #0
 810d346:	2b00      	cmp	r3, #0
 810d348:	d10b      	bne.n	810d362 <xQueueSemaphoreTake+0x86>
	__asm volatile
 810d34a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d34e:	f383 8811 	msr	BASEPRI, r3
 810d352:	f3bf 8f6f 	isb	sy
 810d356:	f3bf 8f4f 	dsb	sy
 810d35a:	61bb      	str	r3, [r7, #24]
}
 810d35c:	bf00      	nop
 810d35e:	bf00      	nop
 810d360:	e7fd      	b.n	810d35e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 810d362:	f7ff fa19 	bl	810c798 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 810d366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d36a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 810d36c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d36e:	2b00      	cmp	r3, #0
 810d370:	d024      	beq.n	810d3bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 810d372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d374:	1e5a      	subs	r2, r3, #1
 810d376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d378:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d37a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d37c:	681b      	ldr	r3, [r3, #0]
 810d37e:	2b00      	cmp	r3, #0
 810d380:	d104      	bne.n	810d38c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 810d382:	f001 fab5 	bl	810e8f0 <pvTaskIncrementMutexHeldCount>
 810d386:	4602      	mov	r2, r0
 810d388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d38a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d38e:	691b      	ldr	r3, [r3, #16]
 810d390:	2b00      	cmp	r3, #0
 810d392:	d00f      	beq.n	810d3b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d396:	3310      	adds	r3, #16
 810d398:	4618      	mov	r0, r3
 810d39a:	f000 ff59 	bl	810e250 <xTaskRemoveFromEventList>
 810d39e:	4603      	mov	r3, r0
 810d3a0:	2b00      	cmp	r3, #0
 810d3a2:	d007      	beq.n	810d3b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 810d3a4:	4b54      	ldr	r3, [pc, #336]	@ (810d4f8 <xQueueSemaphoreTake+0x21c>)
 810d3a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d3aa:	601a      	str	r2, [r3, #0]
 810d3ac:	f3bf 8f4f 	dsb	sy
 810d3b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 810d3b4:	f7ff fa22 	bl	810c7fc <vPortExitCritical>
				return pdPASS;
 810d3b8:	2301      	movs	r3, #1
 810d3ba:	e098      	b.n	810d4ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 810d3bc:	683b      	ldr	r3, [r7, #0]
 810d3be:	2b00      	cmp	r3, #0
 810d3c0:	d112      	bne.n	810d3e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 810d3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d3c4:	2b00      	cmp	r3, #0
 810d3c6:	d00b      	beq.n	810d3e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 810d3c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d3cc:	f383 8811 	msr	BASEPRI, r3
 810d3d0:	f3bf 8f6f 	isb	sy
 810d3d4:	f3bf 8f4f 	dsb	sy
 810d3d8:	617b      	str	r3, [r7, #20]
}
 810d3da:	bf00      	nop
 810d3dc:	bf00      	nop
 810d3de:	e7fd      	b.n	810d3dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 810d3e0:	f7ff fa0c 	bl	810c7fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 810d3e4:	2300      	movs	r3, #0
 810d3e6:	e082      	b.n	810d4ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 810d3e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d3ea:	2b00      	cmp	r3, #0
 810d3ec:	d106      	bne.n	810d3fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 810d3ee:	f107 030c 	add.w	r3, r7, #12
 810d3f2:	4618      	mov	r0, r3
 810d3f4:	f000 ff90 	bl	810e318 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 810d3f8:	2301      	movs	r3, #1
 810d3fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 810d3fc:	f7ff f9fe 	bl	810c7fc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 810d400:	f000 fce6 	bl	810ddd0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 810d404:	f7ff f9c8 	bl	810c798 <vPortEnterCritical>
 810d408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d40a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d40e:	b25b      	sxtb	r3, r3
 810d410:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d414:	d103      	bne.n	810d41e <xQueueSemaphoreTake+0x142>
 810d416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d418:	2200      	movs	r2, #0
 810d41a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d41e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d420:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d424:	b25b      	sxtb	r3, r3
 810d426:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d42a:	d103      	bne.n	810d434 <xQueueSemaphoreTake+0x158>
 810d42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d42e:	2200      	movs	r2, #0
 810d430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d434:	f7ff f9e2 	bl	810c7fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 810d438:	463a      	mov	r2, r7
 810d43a:	f107 030c 	add.w	r3, r7, #12
 810d43e:	4611      	mov	r1, r2
 810d440:	4618      	mov	r0, r3
 810d442:	f000 ff7f 	bl	810e344 <xTaskCheckForTimeOut>
 810d446:	4603      	mov	r3, r0
 810d448:	2b00      	cmp	r3, #0
 810d44a:	d132      	bne.n	810d4b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d44c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d44e:	f000 f94f 	bl	810d6f0 <prvIsQueueEmpty>
 810d452:	4603      	mov	r3, r0
 810d454:	2b00      	cmp	r3, #0
 810d456:	d026      	beq.n	810d4a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d45a:	681b      	ldr	r3, [r3, #0]
 810d45c:	2b00      	cmp	r3, #0
 810d45e:	d109      	bne.n	810d474 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 810d460:	f7ff f99a 	bl	810c798 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d464:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d466:	689b      	ldr	r3, [r3, #8]
 810d468:	4618      	mov	r0, r3
 810d46a:	f001 f8e5 	bl	810e638 <xTaskPriorityInherit>
 810d46e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 810d470:	f7ff f9c4 	bl	810c7fc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 810d474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d476:	3324      	adds	r3, #36	@ 0x24
 810d478:	683a      	ldr	r2, [r7, #0]
 810d47a:	4611      	mov	r1, r2
 810d47c:	4618      	mov	r0, r3
 810d47e:	f000 fe95 	bl	810e1ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 810d482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d484:	f000 f8e2 	bl	810d64c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 810d488:	f000 fcb0 	bl	810ddec <xTaskResumeAll>
 810d48c:	4603      	mov	r3, r0
 810d48e:	2b00      	cmp	r3, #0
 810d490:	f47f af67 	bne.w	810d362 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 810d494:	4b18      	ldr	r3, [pc, #96]	@ (810d4f8 <xQueueSemaphoreTake+0x21c>)
 810d496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810d49a:	601a      	str	r2, [r3, #0]
 810d49c:	f3bf 8f4f 	dsb	sy
 810d4a0:	f3bf 8f6f 	isb	sy
 810d4a4:	e75d      	b.n	810d362 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 810d4a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d4a8:	f000 f8d0 	bl	810d64c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 810d4ac:	f000 fc9e 	bl	810ddec <xTaskResumeAll>
 810d4b0:	e757      	b.n	810d362 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 810d4b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d4b4:	f000 f8ca 	bl	810d64c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 810d4b8:	f000 fc98 	bl	810ddec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 810d4bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d4be:	f000 f917 	bl	810d6f0 <prvIsQueueEmpty>
 810d4c2:	4603      	mov	r3, r0
 810d4c4:	2b00      	cmp	r3, #0
 810d4c6:	f43f af4c 	beq.w	810d362 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 810d4ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d4cc:	2b00      	cmp	r3, #0
 810d4ce:	d00d      	beq.n	810d4ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 810d4d0:	f7ff f962 	bl	810c798 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 810d4d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 810d4d6:	f000 f811 	bl	810d4fc <prvGetDisinheritPriorityAfterTimeout>
 810d4da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 810d4dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d4de:	689b      	ldr	r3, [r3, #8]
 810d4e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810d4e2:	4618      	mov	r0, r3
 810d4e4:	f001 f980 	bl	810e7e8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 810d4e8:	f7ff f988 	bl	810c7fc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 810d4ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 810d4ee:	4618      	mov	r0, r3
 810d4f0:	3738      	adds	r7, #56	@ 0x38
 810d4f2:	46bd      	mov	sp, r7
 810d4f4:	bd80      	pop	{r7, pc}
 810d4f6:	bf00      	nop
 810d4f8:	e000ed04 	.word	0xe000ed04

0810d4fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 810d4fc:	b480      	push	{r7}
 810d4fe:	b085      	sub	sp, #20
 810d500:	af00      	add	r7, sp, #0
 810d502:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 810d504:	687b      	ldr	r3, [r7, #4]
 810d506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d508:	2b00      	cmp	r3, #0
 810d50a:	d006      	beq.n	810d51a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 810d50c:	687b      	ldr	r3, [r7, #4]
 810d50e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d510:	681b      	ldr	r3, [r3, #0]
 810d512:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 810d516:	60fb      	str	r3, [r7, #12]
 810d518:	e001      	b.n	810d51e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 810d51a:	2300      	movs	r3, #0
 810d51c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 810d51e:	68fb      	ldr	r3, [r7, #12]
	}
 810d520:	4618      	mov	r0, r3
 810d522:	3714      	adds	r7, #20
 810d524:	46bd      	mov	sp, r7
 810d526:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d52a:	4770      	bx	lr

0810d52c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 810d52c:	b580      	push	{r7, lr}
 810d52e:	b086      	sub	sp, #24
 810d530:	af00      	add	r7, sp, #0
 810d532:	60f8      	str	r0, [r7, #12]
 810d534:	60b9      	str	r1, [r7, #8]
 810d536:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 810d538:	2300      	movs	r3, #0
 810d53a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 810d53c:	68fb      	ldr	r3, [r7, #12]
 810d53e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d540:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 810d542:	68fb      	ldr	r3, [r7, #12]
 810d544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d546:	2b00      	cmp	r3, #0
 810d548:	d10d      	bne.n	810d566 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 810d54a:	68fb      	ldr	r3, [r7, #12]
 810d54c:	681b      	ldr	r3, [r3, #0]
 810d54e:	2b00      	cmp	r3, #0
 810d550:	d14d      	bne.n	810d5ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 810d552:	68fb      	ldr	r3, [r7, #12]
 810d554:	689b      	ldr	r3, [r3, #8]
 810d556:	4618      	mov	r0, r3
 810d558:	f001 f8d6 	bl	810e708 <xTaskPriorityDisinherit>
 810d55c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 810d55e:	68fb      	ldr	r3, [r7, #12]
 810d560:	2200      	movs	r2, #0
 810d562:	609a      	str	r2, [r3, #8]
 810d564:	e043      	b.n	810d5ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 810d566:	687b      	ldr	r3, [r7, #4]
 810d568:	2b00      	cmp	r3, #0
 810d56a:	d119      	bne.n	810d5a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d56c:	68fb      	ldr	r3, [r7, #12]
 810d56e:	6858      	ldr	r0, [r3, #4]
 810d570:	68fb      	ldr	r3, [r7, #12]
 810d572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d574:	461a      	mov	r2, r3
 810d576:	68b9      	ldr	r1, [r7, #8]
 810d578:	f001 fe76 	bl	810f268 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d57c:	68fb      	ldr	r3, [r7, #12]
 810d57e:	685a      	ldr	r2, [r3, #4]
 810d580:	68fb      	ldr	r3, [r7, #12]
 810d582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d584:	441a      	add	r2, r3
 810d586:	68fb      	ldr	r3, [r7, #12]
 810d588:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d58a:	68fb      	ldr	r3, [r7, #12]
 810d58c:	685a      	ldr	r2, [r3, #4]
 810d58e:	68fb      	ldr	r3, [r7, #12]
 810d590:	689b      	ldr	r3, [r3, #8]
 810d592:	429a      	cmp	r2, r3
 810d594:	d32b      	bcc.n	810d5ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 810d596:	68fb      	ldr	r3, [r7, #12]
 810d598:	681a      	ldr	r2, [r3, #0]
 810d59a:	68fb      	ldr	r3, [r7, #12]
 810d59c:	605a      	str	r2, [r3, #4]
 810d59e:	e026      	b.n	810d5ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 810d5a0:	68fb      	ldr	r3, [r7, #12]
 810d5a2:	68d8      	ldr	r0, [r3, #12]
 810d5a4:	68fb      	ldr	r3, [r7, #12]
 810d5a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d5a8:	461a      	mov	r2, r3
 810d5aa:	68b9      	ldr	r1, [r7, #8]
 810d5ac:	f001 fe5c 	bl	810f268 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 810d5b0:	68fb      	ldr	r3, [r7, #12]
 810d5b2:	68da      	ldr	r2, [r3, #12]
 810d5b4:	68fb      	ldr	r3, [r7, #12]
 810d5b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d5b8:	425b      	negs	r3, r3
 810d5ba:	441a      	add	r2, r3
 810d5bc:	68fb      	ldr	r3, [r7, #12]
 810d5be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 810d5c0:	68fb      	ldr	r3, [r7, #12]
 810d5c2:	68da      	ldr	r2, [r3, #12]
 810d5c4:	68fb      	ldr	r3, [r7, #12]
 810d5c6:	681b      	ldr	r3, [r3, #0]
 810d5c8:	429a      	cmp	r2, r3
 810d5ca:	d207      	bcs.n	810d5dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 810d5cc:	68fb      	ldr	r3, [r7, #12]
 810d5ce:	689a      	ldr	r2, [r3, #8]
 810d5d0:	68fb      	ldr	r3, [r7, #12]
 810d5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d5d4:	425b      	negs	r3, r3
 810d5d6:	441a      	add	r2, r3
 810d5d8:	68fb      	ldr	r3, [r7, #12]
 810d5da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 810d5dc:	687b      	ldr	r3, [r7, #4]
 810d5de:	2b02      	cmp	r3, #2
 810d5e0:	d105      	bne.n	810d5ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 810d5e2:	693b      	ldr	r3, [r7, #16]
 810d5e4:	2b00      	cmp	r3, #0
 810d5e6:	d002      	beq.n	810d5ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 810d5e8:	693b      	ldr	r3, [r7, #16]
 810d5ea:	3b01      	subs	r3, #1
 810d5ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 810d5ee:	693b      	ldr	r3, [r7, #16]
 810d5f0:	1c5a      	adds	r2, r3, #1
 810d5f2:	68fb      	ldr	r3, [r7, #12]
 810d5f4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 810d5f6:	697b      	ldr	r3, [r7, #20]
}
 810d5f8:	4618      	mov	r0, r3
 810d5fa:	3718      	adds	r7, #24
 810d5fc:	46bd      	mov	sp, r7
 810d5fe:	bd80      	pop	{r7, pc}

0810d600 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 810d600:	b580      	push	{r7, lr}
 810d602:	b082      	sub	sp, #8
 810d604:	af00      	add	r7, sp, #0
 810d606:	6078      	str	r0, [r7, #4]
 810d608:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 810d60a:	687b      	ldr	r3, [r7, #4]
 810d60c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d60e:	2b00      	cmp	r3, #0
 810d610:	d018      	beq.n	810d644 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 810d612:	687b      	ldr	r3, [r7, #4]
 810d614:	68da      	ldr	r2, [r3, #12]
 810d616:	687b      	ldr	r3, [r7, #4]
 810d618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d61a:	441a      	add	r2, r3
 810d61c:	687b      	ldr	r3, [r7, #4]
 810d61e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 810d620:	687b      	ldr	r3, [r7, #4]
 810d622:	68da      	ldr	r2, [r3, #12]
 810d624:	687b      	ldr	r3, [r7, #4]
 810d626:	689b      	ldr	r3, [r3, #8]
 810d628:	429a      	cmp	r2, r3
 810d62a:	d303      	bcc.n	810d634 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 810d62c:	687b      	ldr	r3, [r7, #4]
 810d62e:	681a      	ldr	r2, [r3, #0]
 810d630:	687b      	ldr	r3, [r7, #4]
 810d632:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 810d634:	687b      	ldr	r3, [r7, #4]
 810d636:	68d9      	ldr	r1, [r3, #12]
 810d638:	687b      	ldr	r3, [r7, #4]
 810d63a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810d63c:	461a      	mov	r2, r3
 810d63e:	6838      	ldr	r0, [r7, #0]
 810d640:	f001 fe12 	bl	810f268 <memcpy>
	}
}
 810d644:	bf00      	nop
 810d646:	3708      	adds	r7, #8
 810d648:	46bd      	mov	sp, r7
 810d64a:	bd80      	pop	{r7, pc}

0810d64c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 810d64c:	b580      	push	{r7, lr}
 810d64e:	b084      	sub	sp, #16
 810d650:	af00      	add	r7, sp, #0
 810d652:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 810d654:	f7ff f8a0 	bl	810c798 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 810d658:	687b      	ldr	r3, [r7, #4]
 810d65a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d65e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d660:	e011      	b.n	810d686 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 810d662:	687b      	ldr	r3, [r7, #4]
 810d664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d666:	2b00      	cmp	r3, #0
 810d668:	d012      	beq.n	810d690 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 810d66a:	687b      	ldr	r3, [r7, #4]
 810d66c:	3324      	adds	r3, #36	@ 0x24
 810d66e:	4618      	mov	r0, r3
 810d670:	f000 fdee 	bl	810e250 <xTaskRemoveFromEventList>
 810d674:	4603      	mov	r3, r0
 810d676:	2b00      	cmp	r3, #0
 810d678:	d001      	beq.n	810d67e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 810d67a:	f000 fec7 	bl	810e40c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 810d67e:	7bfb      	ldrb	r3, [r7, #15]
 810d680:	3b01      	subs	r3, #1
 810d682:	b2db      	uxtb	r3, r3
 810d684:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 810d686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 810d68a:	2b00      	cmp	r3, #0
 810d68c:	dce9      	bgt.n	810d662 <prvUnlockQueue+0x16>
 810d68e:	e000      	b.n	810d692 <prvUnlockQueue+0x46>
					break;
 810d690:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 810d692:	687b      	ldr	r3, [r7, #4]
 810d694:	22ff      	movs	r2, #255	@ 0xff
 810d696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 810d69a:	f7ff f8af 	bl	810c7fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 810d69e:	f7ff f87b 	bl	810c798 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 810d6a2:	687b      	ldr	r3, [r7, #4]
 810d6a4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d6a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d6aa:	e011      	b.n	810d6d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 810d6ac:	687b      	ldr	r3, [r7, #4]
 810d6ae:	691b      	ldr	r3, [r3, #16]
 810d6b0:	2b00      	cmp	r3, #0
 810d6b2:	d012      	beq.n	810d6da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 810d6b4:	687b      	ldr	r3, [r7, #4]
 810d6b6:	3310      	adds	r3, #16
 810d6b8:	4618      	mov	r0, r3
 810d6ba:	f000 fdc9 	bl	810e250 <xTaskRemoveFromEventList>
 810d6be:	4603      	mov	r3, r0
 810d6c0:	2b00      	cmp	r3, #0
 810d6c2:	d001      	beq.n	810d6c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 810d6c4:	f000 fea2 	bl	810e40c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 810d6c8:	7bbb      	ldrb	r3, [r7, #14]
 810d6ca:	3b01      	subs	r3, #1
 810d6cc:	b2db      	uxtb	r3, r3
 810d6ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 810d6d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d6d4:	2b00      	cmp	r3, #0
 810d6d6:	dce9      	bgt.n	810d6ac <prvUnlockQueue+0x60>
 810d6d8:	e000      	b.n	810d6dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 810d6da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 810d6dc:	687b      	ldr	r3, [r7, #4]
 810d6de:	22ff      	movs	r2, #255	@ 0xff
 810d6e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 810d6e4:	f7ff f88a 	bl	810c7fc <vPortExitCritical>
}
 810d6e8:	bf00      	nop
 810d6ea:	3710      	adds	r7, #16
 810d6ec:	46bd      	mov	sp, r7
 810d6ee:	bd80      	pop	{r7, pc}

0810d6f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 810d6f0:	b580      	push	{r7, lr}
 810d6f2:	b084      	sub	sp, #16
 810d6f4:	af00      	add	r7, sp, #0
 810d6f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d6f8:	f7ff f84e 	bl	810c798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 810d6fc:	687b      	ldr	r3, [r7, #4]
 810d6fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d700:	2b00      	cmp	r3, #0
 810d702:	d102      	bne.n	810d70a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 810d704:	2301      	movs	r3, #1
 810d706:	60fb      	str	r3, [r7, #12]
 810d708:	e001      	b.n	810d70e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 810d70a:	2300      	movs	r3, #0
 810d70c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d70e:	f7ff f875 	bl	810c7fc <vPortExitCritical>

	return xReturn;
 810d712:	68fb      	ldr	r3, [r7, #12]
}
 810d714:	4618      	mov	r0, r3
 810d716:	3710      	adds	r7, #16
 810d718:	46bd      	mov	sp, r7
 810d71a:	bd80      	pop	{r7, pc}

0810d71c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 810d71c:	b580      	push	{r7, lr}
 810d71e:	b084      	sub	sp, #16
 810d720:	af00      	add	r7, sp, #0
 810d722:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 810d724:	f7ff f838 	bl	810c798 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 810d728:	687b      	ldr	r3, [r7, #4]
 810d72a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 810d72c:	687b      	ldr	r3, [r7, #4]
 810d72e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810d730:	429a      	cmp	r2, r3
 810d732:	d102      	bne.n	810d73a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 810d734:	2301      	movs	r3, #1
 810d736:	60fb      	str	r3, [r7, #12]
 810d738:	e001      	b.n	810d73e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 810d73a:	2300      	movs	r3, #0
 810d73c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 810d73e:	f7ff f85d 	bl	810c7fc <vPortExitCritical>

	return xReturn;
 810d742:	68fb      	ldr	r3, [r7, #12]
}
 810d744:	4618      	mov	r0, r3
 810d746:	3710      	adds	r7, #16
 810d748:	46bd      	mov	sp, r7
 810d74a:	bd80      	pop	{r7, pc}

0810d74c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 810d74c:	b480      	push	{r7}
 810d74e:	b085      	sub	sp, #20
 810d750:	af00      	add	r7, sp, #0
 810d752:	6078      	str	r0, [r7, #4]
 810d754:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d756:	2300      	movs	r3, #0
 810d758:	60fb      	str	r3, [r7, #12]
 810d75a:	e014      	b.n	810d786 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 810d75c:	4a0f      	ldr	r2, [pc, #60]	@ (810d79c <vQueueAddToRegistry+0x50>)
 810d75e:	68fb      	ldr	r3, [r7, #12]
 810d760:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 810d764:	2b00      	cmp	r3, #0
 810d766:	d10b      	bne.n	810d780 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 810d768:	490c      	ldr	r1, [pc, #48]	@ (810d79c <vQueueAddToRegistry+0x50>)
 810d76a:	68fb      	ldr	r3, [r7, #12]
 810d76c:	683a      	ldr	r2, [r7, #0]
 810d76e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 810d772:	4a0a      	ldr	r2, [pc, #40]	@ (810d79c <vQueueAddToRegistry+0x50>)
 810d774:	68fb      	ldr	r3, [r7, #12]
 810d776:	00db      	lsls	r3, r3, #3
 810d778:	4413      	add	r3, r2
 810d77a:	687a      	ldr	r2, [r7, #4]
 810d77c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 810d77e:	e006      	b.n	810d78e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 810d780:	68fb      	ldr	r3, [r7, #12]
 810d782:	3301      	adds	r3, #1
 810d784:	60fb      	str	r3, [r7, #12]
 810d786:	68fb      	ldr	r3, [r7, #12]
 810d788:	2b07      	cmp	r3, #7
 810d78a:	d9e7      	bls.n	810d75c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 810d78c:	bf00      	nop
 810d78e:	bf00      	nop
 810d790:	3714      	adds	r7, #20
 810d792:	46bd      	mov	sp, r7
 810d794:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d798:	4770      	bx	lr
 810d79a:	bf00      	nop
 810d79c:	10004a6c 	.word	0x10004a6c

0810d7a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810d7a0:	b580      	push	{r7, lr}
 810d7a2:	b086      	sub	sp, #24
 810d7a4:	af00      	add	r7, sp, #0
 810d7a6:	60f8      	str	r0, [r7, #12]
 810d7a8:	60b9      	str	r1, [r7, #8]
 810d7aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 810d7ac:	68fb      	ldr	r3, [r7, #12]
 810d7ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 810d7b0:	f7fe fff2 	bl	810c798 <vPortEnterCritical>
 810d7b4:	697b      	ldr	r3, [r7, #20]
 810d7b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 810d7ba:	b25b      	sxtb	r3, r3
 810d7bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d7c0:	d103      	bne.n	810d7ca <vQueueWaitForMessageRestricted+0x2a>
 810d7c2:	697b      	ldr	r3, [r7, #20]
 810d7c4:	2200      	movs	r2, #0
 810d7c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 810d7ca:	697b      	ldr	r3, [r7, #20]
 810d7cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 810d7d0:	b25b      	sxtb	r3, r3
 810d7d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810d7d6:	d103      	bne.n	810d7e0 <vQueueWaitForMessageRestricted+0x40>
 810d7d8:	697b      	ldr	r3, [r7, #20]
 810d7da:	2200      	movs	r2, #0
 810d7dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 810d7e0:	f7ff f80c 	bl	810c7fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 810d7e4:	697b      	ldr	r3, [r7, #20]
 810d7e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810d7e8:	2b00      	cmp	r3, #0
 810d7ea:	d106      	bne.n	810d7fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 810d7ec:	697b      	ldr	r3, [r7, #20]
 810d7ee:	3324      	adds	r3, #36	@ 0x24
 810d7f0:	687a      	ldr	r2, [r7, #4]
 810d7f2:	68b9      	ldr	r1, [r7, #8]
 810d7f4:	4618      	mov	r0, r3
 810d7f6:	f000 fcff 	bl	810e1f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 810d7fa:	6978      	ldr	r0, [r7, #20]
 810d7fc:	f7ff ff26 	bl	810d64c <prvUnlockQueue>
	}
 810d800:	bf00      	nop
 810d802:	3718      	adds	r7, #24
 810d804:	46bd      	mov	sp, r7
 810d806:	bd80      	pop	{r7, pc}

0810d808 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 810d808:	b580      	push	{r7, lr}
 810d80a:	b08e      	sub	sp, #56	@ 0x38
 810d80c:	af04      	add	r7, sp, #16
 810d80e:	60f8      	str	r0, [r7, #12]
 810d810:	60b9      	str	r1, [r7, #8]
 810d812:	607a      	str	r2, [r7, #4]
 810d814:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 810d816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d818:	2b00      	cmp	r3, #0
 810d81a:	d10b      	bne.n	810d834 <xTaskCreateStatic+0x2c>
	__asm volatile
 810d81c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d820:	f383 8811 	msr	BASEPRI, r3
 810d824:	f3bf 8f6f 	isb	sy
 810d828:	f3bf 8f4f 	dsb	sy
 810d82c:	623b      	str	r3, [r7, #32]
}
 810d82e:	bf00      	nop
 810d830:	bf00      	nop
 810d832:	e7fd      	b.n	810d830 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 810d834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d836:	2b00      	cmp	r3, #0
 810d838:	d10b      	bne.n	810d852 <xTaskCreateStatic+0x4a>
	__asm volatile
 810d83a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d83e:	f383 8811 	msr	BASEPRI, r3
 810d842:	f3bf 8f6f 	isb	sy
 810d846:	f3bf 8f4f 	dsb	sy
 810d84a:	61fb      	str	r3, [r7, #28]
}
 810d84c:	bf00      	nop
 810d84e:	bf00      	nop
 810d850:	e7fd      	b.n	810d84e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 810d852:	23a8      	movs	r3, #168	@ 0xa8
 810d854:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 810d856:	693b      	ldr	r3, [r7, #16]
 810d858:	2ba8      	cmp	r3, #168	@ 0xa8
 810d85a:	d00b      	beq.n	810d874 <xTaskCreateStatic+0x6c>
	__asm volatile
 810d85c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d860:	f383 8811 	msr	BASEPRI, r3
 810d864:	f3bf 8f6f 	isb	sy
 810d868:	f3bf 8f4f 	dsb	sy
 810d86c:	61bb      	str	r3, [r7, #24]
}
 810d86e:	bf00      	nop
 810d870:	bf00      	nop
 810d872:	e7fd      	b.n	810d870 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 810d874:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 810d876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d878:	2b00      	cmp	r3, #0
 810d87a:	d01e      	beq.n	810d8ba <xTaskCreateStatic+0xb2>
 810d87c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810d87e:	2b00      	cmp	r3, #0
 810d880:	d01b      	beq.n	810d8ba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 810d882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810d884:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 810d886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d888:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 810d88a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 810d88c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d88e:	2202      	movs	r2, #2
 810d890:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 810d894:	2300      	movs	r3, #0
 810d896:	9303      	str	r3, [sp, #12]
 810d898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810d89a:	9302      	str	r3, [sp, #8]
 810d89c:	f107 0314 	add.w	r3, r7, #20
 810d8a0:	9301      	str	r3, [sp, #4]
 810d8a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d8a4:	9300      	str	r3, [sp, #0]
 810d8a6:	683b      	ldr	r3, [r7, #0]
 810d8a8:	687a      	ldr	r2, [r7, #4]
 810d8aa:	68b9      	ldr	r1, [r7, #8]
 810d8ac:	68f8      	ldr	r0, [r7, #12]
 810d8ae:	f000 f851 	bl	810d954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810d8b2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 810d8b4:	f000 f8f6 	bl	810daa4 <prvAddNewTaskToReadyList>
 810d8b8:	e001      	b.n	810d8be <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 810d8ba:	2300      	movs	r3, #0
 810d8bc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 810d8be:	697b      	ldr	r3, [r7, #20]
	}
 810d8c0:	4618      	mov	r0, r3
 810d8c2:	3728      	adds	r7, #40	@ 0x28
 810d8c4:	46bd      	mov	sp, r7
 810d8c6:	bd80      	pop	{r7, pc}

0810d8c8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 810d8c8:	b580      	push	{r7, lr}
 810d8ca:	b08c      	sub	sp, #48	@ 0x30
 810d8cc:	af04      	add	r7, sp, #16
 810d8ce:	60f8      	str	r0, [r7, #12]
 810d8d0:	60b9      	str	r1, [r7, #8]
 810d8d2:	603b      	str	r3, [r7, #0]
 810d8d4:	4613      	mov	r3, r2
 810d8d6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 810d8d8:	88fb      	ldrh	r3, [r7, #6]
 810d8da:	009b      	lsls	r3, r3, #2
 810d8dc:	4618      	mov	r0, r3
 810d8de:	f7fe fb8b 	bl	810bff8 <pvPortMalloc>
 810d8e2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 810d8e4:	697b      	ldr	r3, [r7, #20]
 810d8e6:	2b00      	cmp	r3, #0
 810d8e8:	d00e      	beq.n	810d908 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 810d8ea:	20a8      	movs	r0, #168	@ 0xa8
 810d8ec:	f7fe fb84 	bl	810bff8 <pvPortMalloc>
 810d8f0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 810d8f2:	69fb      	ldr	r3, [r7, #28]
 810d8f4:	2b00      	cmp	r3, #0
 810d8f6:	d003      	beq.n	810d900 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 810d8f8:	69fb      	ldr	r3, [r7, #28]
 810d8fa:	697a      	ldr	r2, [r7, #20]
 810d8fc:	631a      	str	r2, [r3, #48]	@ 0x30
 810d8fe:	e005      	b.n	810d90c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 810d900:	6978      	ldr	r0, [r7, #20]
 810d902:	f7fe fc47 	bl	810c194 <vPortFree>
 810d906:	e001      	b.n	810d90c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 810d908:	2300      	movs	r3, #0
 810d90a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 810d90c:	69fb      	ldr	r3, [r7, #28]
 810d90e:	2b00      	cmp	r3, #0
 810d910:	d017      	beq.n	810d942 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 810d912:	69fb      	ldr	r3, [r7, #28]
 810d914:	2200      	movs	r2, #0
 810d916:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 810d91a:	88fa      	ldrh	r2, [r7, #6]
 810d91c:	2300      	movs	r3, #0
 810d91e:	9303      	str	r3, [sp, #12]
 810d920:	69fb      	ldr	r3, [r7, #28]
 810d922:	9302      	str	r3, [sp, #8]
 810d924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810d926:	9301      	str	r3, [sp, #4]
 810d928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d92a:	9300      	str	r3, [sp, #0]
 810d92c:	683b      	ldr	r3, [r7, #0]
 810d92e:	68b9      	ldr	r1, [r7, #8]
 810d930:	68f8      	ldr	r0, [r7, #12]
 810d932:	f000 f80f 	bl	810d954 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 810d936:	69f8      	ldr	r0, [r7, #28]
 810d938:	f000 f8b4 	bl	810daa4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 810d93c:	2301      	movs	r3, #1
 810d93e:	61bb      	str	r3, [r7, #24]
 810d940:	e002      	b.n	810d948 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 810d942:	f04f 33ff 	mov.w	r3, #4294967295
 810d946:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 810d948:	69bb      	ldr	r3, [r7, #24]
	}
 810d94a:	4618      	mov	r0, r3
 810d94c:	3720      	adds	r7, #32
 810d94e:	46bd      	mov	sp, r7
 810d950:	bd80      	pop	{r7, pc}
	...

0810d954 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 810d954:	b580      	push	{r7, lr}
 810d956:	b088      	sub	sp, #32
 810d958:	af00      	add	r7, sp, #0
 810d95a:	60f8      	str	r0, [r7, #12]
 810d95c:	60b9      	str	r1, [r7, #8]
 810d95e:	607a      	str	r2, [r7, #4]
 810d960:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 810d962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d964:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 810d966:	687b      	ldr	r3, [r7, #4]
 810d968:	009b      	lsls	r3, r3, #2
 810d96a:	461a      	mov	r2, r3
 810d96c:	21a5      	movs	r1, #165	@ 0xa5
 810d96e:	f001 fbbb 	bl	810f0e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 810d972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 810d976:	687b      	ldr	r3, [r7, #4]
 810d978:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 810d97c:	3b01      	subs	r3, #1
 810d97e:	009b      	lsls	r3, r3, #2
 810d980:	4413      	add	r3, r2
 810d982:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 810d984:	69bb      	ldr	r3, [r7, #24]
 810d986:	f023 0307 	bic.w	r3, r3, #7
 810d98a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 810d98c:	69bb      	ldr	r3, [r7, #24]
 810d98e:	f003 0307 	and.w	r3, r3, #7
 810d992:	2b00      	cmp	r3, #0
 810d994:	d00b      	beq.n	810d9ae <prvInitialiseNewTask+0x5a>
	__asm volatile
 810d996:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810d99a:	f383 8811 	msr	BASEPRI, r3
 810d99e:	f3bf 8f6f 	isb	sy
 810d9a2:	f3bf 8f4f 	dsb	sy
 810d9a6:	617b      	str	r3, [r7, #20]
}
 810d9a8:	bf00      	nop
 810d9aa:	bf00      	nop
 810d9ac:	e7fd      	b.n	810d9aa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 810d9ae:	68bb      	ldr	r3, [r7, #8]
 810d9b0:	2b00      	cmp	r3, #0
 810d9b2:	d01f      	beq.n	810d9f4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810d9b4:	2300      	movs	r3, #0
 810d9b6:	61fb      	str	r3, [r7, #28]
 810d9b8:	e012      	b.n	810d9e0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 810d9ba:	68ba      	ldr	r2, [r7, #8]
 810d9bc:	69fb      	ldr	r3, [r7, #28]
 810d9be:	4413      	add	r3, r2
 810d9c0:	7819      	ldrb	r1, [r3, #0]
 810d9c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810d9c4:	69fb      	ldr	r3, [r7, #28]
 810d9c6:	4413      	add	r3, r2
 810d9c8:	3334      	adds	r3, #52	@ 0x34
 810d9ca:	460a      	mov	r2, r1
 810d9cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 810d9ce:	68ba      	ldr	r2, [r7, #8]
 810d9d0:	69fb      	ldr	r3, [r7, #28]
 810d9d2:	4413      	add	r3, r2
 810d9d4:	781b      	ldrb	r3, [r3, #0]
 810d9d6:	2b00      	cmp	r3, #0
 810d9d8:	d006      	beq.n	810d9e8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 810d9da:	69fb      	ldr	r3, [r7, #28]
 810d9dc:	3301      	adds	r3, #1
 810d9de:	61fb      	str	r3, [r7, #28]
 810d9e0:	69fb      	ldr	r3, [r7, #28]
 810d9e2:	2b0f      	cmp	r3, #15
 810d9e4:	d9e9      	bls.n	810d9ba <prvInitialiseNewTask+0x66>
 810d9e6:	e000      	b.n	810d9ea <prvInitialiseNewTask+0x96>
			{
				break;
 810d9e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 810d9ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9ec:	2200      	movs	r2, #0
 810d9ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 810d9f2:	e003      	b.n	810d9fc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 810d9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810d9f6:	2200      	movs	r2, #0
 810d9f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 810d9fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810d9fe:	2b37      	cmp	r3, #55	@ 0x37
 810da00:	d901      	bls.n	810da06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 810da02:	2337      	movs	r3, #55	@ 0x37
 810da04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 810da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810da0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 810da0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 810da10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 810da12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da14:	2200      	movs	r2, #0
 810da16:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 810da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da1a:	3304      	adds	r3, #4
 810da1c:	4618      	mov	r0, r3
 810da1e:	f7fe fcf9 	bl	810c414 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 810da22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da24:	3318      	adds	r3, #24
 810da26:	4618      	mov	r0, r3
 810da28:	f7fe fcf4 	bl	810c414 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 810da2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810da30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810da32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810da34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810da38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 810da3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810da40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 810da42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da44:	2200      	movs	r2, #0
 810da46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 810da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da4c:	2200      	movs	r2, #0
 810da4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 810da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da54:	3354      	adds	r3, #84	@ 0x54
 810da56:	224c      	movs	r2, #76	@ 0x4c
 810da58:	2100      	movs	r1, #0
 810da5a:	4618      	mov	r0, r3
 810da5c:	f001 fb44 	bl	810f0e8 <memset>
 810da60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da62:	4a0d      	ldr	r2, [pc, #52]	@ (810da98 <prvInitialiseNewTask+0x144>)
 810da64:	659a      	str	r2, [r3, #88]	@ 0x58
 810da66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da68:	4a0c      	ldr	r2, [pc, #48]	@ (810da9c <prvInitialiseNewTask+0x148>)
 810da6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 810da6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da6e:	4a0c      	ldr	r2, [pc, #48]	@ (810daa0 <prvInitialiseNewTask+0x14c>)
 810da70:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 810da72:	683a      	ldr	r2, [r7, #0]
 810da74:	68f9      	ldr	r1, [r7, #12]
 810da76:	69b8      	ldr	r0, [r7, #24]
 810da78:	f7fe fd60 	bl	810c53c <pxPortInitialiseStack>
 810da7c:	4602      	mov	r2, r0
 810da7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810da80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 810da82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da84:	2b00      	cmp	r3, #0
 810da86:	d002      	beq.n	810da8e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 810da88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810da8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810da8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810da8e:	bf00      	nop
 810da90:	3720      	adds	r7, #32
 810da92:	46bd      	mov	sp, r7
 810da94:	bd80      	pop	{r7, pc}
 810da96:	bf00      	nop
 810da98:	100050d8 	.word	0x100050d8
 810da9c:	10005140 	.word	0x10005140
 810daa0:	100051a8 	.word	0x100051a8

0810daa4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 810daa4:	b580      	push	{r7, lr}
 810daa6:	b082      	sub	sp, #8
 810daa8:	af00      	add	r7, sp, #0
 810daaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 810daac:	f7fe fe74 	bl	810c798 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 810dab0:	4b2d      	ldr	r3, [pc, #180]	@ (810db68 <prvAddNewTaskToReadyList+0xc4>)
 810dab2:	681b      	ldr	r3, [r3, #0]
 810dab4:	3301      	adds	r3, #1
 810dab6:	4a2c      	ldr	r2, [pc, #176]	@ (810db68 <prvAddNewTaskToReadyList+0xc4>)
 810dab8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 810daba:	4b2c      	ldr	r3, [pc, #176]	@ (810db6c <prvAddNewTaskToReadyList+0xc8>)
 810dabc:	681b      	ldr	r3, [r3, #0]
 810dabe:	2b00      	cmp	r3, #0
 810dac0:	d109      	bne.n	810dad6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 810dac2:	4a2a      	ldr	r2, [pc, #168]	@ (810db6c <prvAddNewTaskToReadyList+0xc8>)
 810dac4:	687b      	ldr	r3, [r7, #4]
 810dac6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 810dac8:	4b27      	ldr	r3, [pc, #156]	@ (810db68 <prvAddNewTaskToReadyList+0xc4>)
 810daca:	681b      	ldr	r3, [r3, #0]
 810dacc:	2b01      	cmp	r3, #1
 810dace:	d110      	bne.n	810daf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 810dad0:	f000 fcc0 	bl	810e454 <prvInitialiseTaskLists>
 810dad4:	e00d      	b.n	810daf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 810dad6:	4b26      	ldr	r3, [pc, #152]	@ (810db70 <prvAddNewTaskToReadyList+0xcc>)
 810dad8:	681b      	ldr	r3, [r3, #0]
 810dada:	2b00      	cmp	r3, #0
 810dadc:	d109      	bne.n	810daf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 810dade:	4b23      	ldr	r3, [pc, #140]	@ (810db6c <prvAddNewTaskToReadyList+0xc8>)
 810dae0:	681b      	ldr	r3, [r3, #0]
 810dae2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810dae4:	687b      	ldr	r3, [r7, #4]
 810dae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810dae8:	429a      	cmp	r2, r3
 810daea:	d802      	bhi.n	810daf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 810daec:	4a1f      	ldr	r2, [pc, #124]	@ (810db6c <prvAddNewTaskToReadyList+0xc8>)
 810daee:	687b      	ldr	r3, [r7, #4]
 810daf0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 810daf2:	4b20      	ldr	r3, [pc, #128]	@ (810db74 <prvAddNewTaskToReadyList+0xd0>)
 810daf4:	681b      	ldr	r3, [r3, #0]
 810daf6:	3301      	adds	r3, #1
 810daf8:	4a1e      	ldr	r2, [pc, #120]	@ (810db74 <prvAddNewTaskToReadyList+0xd0>)
 810dafa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 810dafc:	4b1d      	ldr	r3, [pc, #116]	@ (810db74 <prvAddNewTaskToReadyList+0xd0>)
 810dafe:	681a      	ldr	r2, [r3, #0]
 810db00:	687b      	ldr	r3, [r7, #4]
 810db02:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 810db04:	687b      	ldr	r3, [r7, #4]
 810db06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810db08:	4b1b      	ldr	r3, [pc, #108]	@ (810db78 <prvAddNewTaskToReadyList+0xd4>)
 810db0a:	681b      	ldr	r3, [r3, #0]
 810db0c:	429a      	cmp	r2, r3
 810db0e:	d903      	bls.n	810db18 <prvAddNewTaskToReadyList+0x74>
 810db10:	687b      	ldr	r3, [r7, #4]
 810db12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810db14:	4a18      	ldr	r2, [pc, #96]	@ (810db78 <prvAddNewTaskToReadyList+0xd4>)
 810db16:	6013      	str	r3, [r2, #0]
 810db18:	687b      	ldr	r3, [r7, #4]
 810db1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810db1c:	4613      	mov	r3, r2
 810db1e:	009b      	lsls	r3, r3, #2
 810db20:	4413      	add	r3, r2
 810db22:	009b      	lsls	r3, r3, #2
 810db24:	4a15      	ldr	r2, [pc, #84]	@ (810db7c <prvAddNewTaskToReadyList+0xd8>)
 810db26:	441a      	add	r2, r3
 810db28:	687b      	ldr	r3, [r7, #4]
 810db2a:	3304      	adds	r3, #4
 810db2c:	4619      	mov	r1, r3
 810db2e:	4610      	mov	r0, r2
 810db30:	f7fe fc7d 	bl	810c42e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 810db34:	f7fe fe62 	bl	810c7fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 810db38:	4b0d      	ldr	r3, [pc, #52]	@ (810db70 <prvAddNewTaskToReadyList+0xcc>)
 810db3a:	681b      	ldr	r3, [r3, #0]
 810db3c:	2b00      	cmp	r3, #0
 810db3e:	d00e      	beq.n	810db5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 810db40:	4b0a      	ldr	r3, [pc, #40]	@ (810db6c <prvAddNewTaskToReadyList+0xc8>)
 810db42:	681b      	ldr	r3, [r3, #0]
 810db44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810db46:	687b      	ldr	r3, [r7, #4]
 810db48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810db4a:	429a      	cmp	r2, r3
 810db4c:	d207      	bcs.n	810db5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 810db4e:	4b0c      	ldr	r3, [pc, #48]	@ (810db80 <prvAddNewTaskToReadyList+0xdc>)
 810db50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810db54:	601a      	str	r2, [r3, #0]
 810db56:	f3bf 8f4f 	dsb	sy
 810db5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 810db5e:	bf00      	nop
 810db60:	3708      	adds	r7, #8
 810db62:	46bd      	mov	sp, r7
 810db64:	bd80      	pop	{r7, pc}
 810db66:	bf00      	nop
 810db68:	10004f80 	.word	0x10004f80
 810db6c:	10004aac 	.word	0x10004aac
 810db70:	10004f8c 	.word	0x10004f8c
 810db74:	10004f9c 	.word	0x10004f9c
 810db78:	10004f88 	.word	0x10004f88
 810db7c:	10004ab0 	.word	0x10004ab0
 810db80:	e000ed04 	.word	0xe000ed04

0810db84 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 810db84:	b580      	push	{r7, lr}
 810db86:	b08a      	sub	sp, #40	@ 0x28
 810db88:	af00      	add	r7, sp, #0
 810db8a:	6078      	str	r0, [r7, #4]
 810db8c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 810db8e:	2300      	movs	r3, #0
 810db90:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 810db92:	687b      	ldr	r3, [r7, #4]
 810db94:	2b00      	cmp	r3, #0
 810db96:	d10b      	bne.n	810dbb0 <vTaskDelayUntil+0x2c>
	__asm volatile
 810db98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810db9c:	f383 8811 	msr	BASEPRI, r3
 810dba0:	f3bf 8f6f 	isb	sy
 810dba4:	f3bf 8f4f 	dsb	sy
 810dba8:	617b      	str	r3, [r7, #20]
}
 810dbaa:	bf00      	nop
 810dbac:	bf00      	nop
 810dbae:	e7fd      	b.n	810dbac <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 810dbb0:	683b      	ldr	r3, [r7, #0]
 810dbb2:	2b00      	cmp	r3, #0
 810dbb4:	d10b      	bne.n	810dbce <vTaskDelayUntil+0x4a>
	__asm volatile
 810dbb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dbba:	f383 8811 	msr	BASEPRI, r3
 810dbbe:	f3bf 8f6f 	isb	sy
 810dbc2:	f3bf 8f4f 	dsb	sy
 810dbc6:	613b      	str	r3, [r7, #16]
}
 810dbc8:	bf00      	nop
 810dbca:	bf00      	nop
 810dbcc:	e7fd      	b.n	810dbca <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 810dbce:	4b2a      	ldr	r3, [pc, #168]	@ (810dc78 <vTaskDelayUntil+0xf4>)
 810dbd0:	681b      	ldr	r3, [r3, #0]
 810dbd2:	2b00      	cmp	r3, #0
 810dbd4:	d00b      	beq.n	810dbee <vTaskDelayUntil+0x6a>
	__asm volatile
 810dbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dbda:	f383 8811 	msr	BASEPRI, r3
 810dbde:	f3bf 8f6f 	isb	sy
 810dbe2:	f3bf 8f4f 	dsb	sy
 810dbe6:	60fb      	str	r3, [r7, #12]
}
 810dbe8:	bf00      	nop
 810dbea:	bf00      	nop
 810dbec:	e7fd      	b.n	810dbea <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 810dbee:	f000 f8ef 	bl	810ddd0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 810dbf2:	4b22      	ldr	r3, [pc, #136]	@ (810dc7c <vTaskDelayUntil+0xf8>)
 810dbf4:	681b      	ldr	r3, [r3, #0]
 810dbf6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 810dbf8:	687b      	ldr	r3, [r7, #4]
 810dbfa:	681b      	ldr	r3, [r3, #0]
 810dbfc:	683a      	ldr	r2, [r7, #0]
 810dbfe:	4413      	add	r3, r2
 810dc00:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 810dc02:	687b      	ldr	r3, [r7, #4]
 810dc04:	681b      	ldr	r3, [r3, #0]
 810dc06:	6a3a      	ldr	r2, [r7, #32]
 810dc08:	429a      	cmp	r2, r3
 810dc0a:	d20b      	bcs.n	810dc24 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 810dc0c:	687b      	ldr	r3, [r7, #4]
 810dc0e:	681b      	ldr	r3, [r3, #0]
 810dc10:	69fa      	ldr	r2, [r7, #28]
 810dc12:	429a      	cmp	r2, r3
 810dc14:	d211      	bcs.n	810dc3a <vTaskDelayUntil+0xb6>
 810dc16:	69fa      	ldr	r2, [r7, #28]
 810dc18:	6a3b      	ldr	r3, [r7, #32]
 810dc1a:	429a      	cmp	r2, r3
 810dc1c:	d90d      	bls.n	810dc3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 810dc1e:	2301      	movs	r3, #1
 810dc20:	627b      	str	r3, [r7, #36]	@ 0x24
 810dc22:	e00a      	b.n	810dc3a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 810dc24:	687b      	ldr	r3, [r7, #4]
 810dc26:	681b      	ldr	r3, [r3, #0]
 810dc28:	69fa      	ldr	r2, [r7, #28]
 810dc2a:	429a      	cmp	r2, r3
 810dc2c:	d303      	bcc.n	810dc36 <vTaskDelayUntil+0xb2>
 810dc2e:	69fa      	ldr	r2, [r7, #28]
 810dc30:	6a3b      	ldr	r3, [r7, #32]
 810dc32:	429a      	cmp	r2, r3
 810dc34:	d901      	bls.n	810dc3a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 810dc36:	2301      	movs	r3, #1
 810dc38:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 810dc3a:	687b      	ldr	r3, [r7, #4]
 810dc3c:	69fa      	ldr	r2, [r7, #28]
 810dc3e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 810dc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810dc42:	2b00      	cmp	r3, #0
 810dc44:	d006      	beq.n	810dc54 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 810dc46:	69fa      	ldr	r2, [r7, #28]
 810dc48:	6a3b      	ldr	r3, [r7, #32]
 810dc4a:	1ad3      	subs	r3, r2, r3
 810dc4c:	2100      	movs	r1, #0
 810dc4e:	4618      	mov	r0, r3
 810dc50:	f000 fe62 	bl	810e918 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 810dc54:	f000 f8ca 	bl	810ddec <xTaskResumeAll>
 810dc58:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810dc5a:	69bb      	ldr	r3, [r7, #24]
 810dc5c:	2b00      	cmp	r3, #0
 810dc5e:	d107      	bne.n	810dc70 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 810dc60:	4b07      	ldr	r3, [pc, #28]	@ (810dc80 <vTaskDelayUntil+0xfc>)
 810dc62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dc66:	601a      	str	r2, [r3, #0]
 810dc68:	f3bf 8f4f 	dsb	sy
 810dc6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810dc70:	bf00      	nop
 810dc72:	3728      	adds	r7, #40	@ 0x28
 810dc74:	46bd      	mov	sp, r7
 810dc76:	bd80      	pop	{r7, pc}
 810dc78:	10004fa8 	.word	0x10004fa8
 810dc7c:	10004f84 	.word	0x10004f84
 810dc80:	e000ed04 	.word	0xe000ed04

0810dc84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 810dc84:	b580      	push	{r7, lr}
 810dc86:	b084      	sub	sp, #16
 810dc88:	af00      	add	r7, sp, #0
 810dc8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 810dc8c:	2300      	movs	r3, #0
 810dc8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 810dc90:	687b      	ldr	r3, [r7, #4]
 810dc92:	2b00      	cmp	r3, #0
 810dc94:	d018      	beq.n	810dcc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 810dc96:	4b14      	ldr	r3, [pc, #80]	@ (810dce8 <vTaskDelay+0x64>)
 810dc98:	681b      	ldr	r3, [r3, #0]
 810dc9a:	2b00      	cmp	r3, #0
 810dc9c:	d00b      	beq.n	810dcb6 <vTaskDelay+0x32>
	__asm volatile
 810dc9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dca2:	f383 8811 	msr	BASEPRI, r3
 810dca6:	f3bf 8f6f 	isb	sy
 810dcaa:	f3bf 8f4f 	dsb	sy
 810dcae:	60bb      	str	r3, [r7, #8]
}
 810dcb0:	bf00      	nop
 810dcb2:	bf00      	nop
 810dcb4:	e7fd      	b.n	810dcb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 810dcb6:	f000 f88b 	bl	810ddd0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 810dcba:	2100      	movs	r1, #0
 810dcbc:	6878      	ldr	r0, [r7, #4]
 810dcbe:	f000 fe2b 	bl	810e918 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 810dcc2:	f000 f893 	bl	810ddec <xTaskResumeAll>
 810dcc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 810dcc8:	68fb      	ldr	r3, [r7, #12]
 810dcca:	2b00      	cmp	r3, #0
 810dccc:	d107      	bne.n	810dcde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 810dcce:	4b07      	ldr	r3, [pc, #28]	@ (810dcec <vTaskDelay+0x68>)
 810dcd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810dcd4:	601a      	str	r2, [r3, #0]
 810dcd6:	f3bf 8f4f 	dsb	sy
 810dcda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810dcde:	bf00      	nop
 810dce0:	3710      	adds	r7, #16
 810dce2:	46bd      	mov	sp, r7
 810dce4:	bd80      	pop	{r7, pc}
 810dce6:	bf00      	nop
 810dce8:	10004fa8 	.word	0x10004fa8
 810dcec:	e000ed04 	.word	0xe000ed04

0810dcf0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 810dcf0:	b580      	push	{r7, lr}
 810dcf2:	b08a      	sub	sp, #40	@ 0x28
 810dcf4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 810dcf6:	2300      	movs	r3, #0
 810dcf8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 810dcfa:	2300      	movs	r3, #0
 810dcfc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 810dcfe:	463a      	mov	r2, r7
 810dd00:	1d39      	adds	r1, r7, #4
 810dd02:	f107 0308 	add.w	r3, r7, #8
 810dd06:	4618      	mov	r0, r3
 810dd08:	f7fe f942 	bl	810bf90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 810dd0c:	6839      	ldr	r1, [r7, #0]
 810dd0e:	687b      	ldr	r3, [r7, #4]
 810dd10:	68ba      	ldr	r2, [r7, #8]
 810dd12:	9202      	str	r2, [sp, #8]
 810dd14:	9301      	str	r3, [sp, #4]
 810dd16:	2300      	movs	r3, #0
 810dd18:	9300      	str	r3, [sp, #0]
 810dd1a:	2300      	movs	r3, #0
 810dd1c:	460a      	mov	r2, r1
 810dd1e:	4924      	ldr	r1, [pc, #144]	@ (810ddb0 <vTaskStartScheduler+0xc0>)
 810dd20:	4824      	ldr	r0, [pc, #144]	@ (810ddb4 <vTaskStartScheduler+0xc4>)
 810dd22:	f7ff fd71 	bl	810d808 <xTaskCreateStatic>
 810dd26:	4603      	mov	r3, r0
 810dd28:	4a23      	ldr	r2, [pc, #140]	@ (810ddb8 <vTaskStartScheduler+0xc8>)
 810dd2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 810dd2c:	4b22      	ldr	r3, [pc, #136]	@ (810ddb8 <vTaskStartScheduler+0xc8>)
 810dd2e:	681b      	ldr	r3, [r3, #0]
 810dd30:	2b00      	cmp	r3, #0
 810dd32:	d002      	beq.n	810dd3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 810dd34:	2301      	movs	r3, #1
 810dd36:	617b      	str	r3, [r7, #20]
 810dd38:	e001      	b.n	810dd3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 810dd3a:	2300      	movs	r3, #0
 810dd3c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 810dd3e:	697b      	ldr	r3, [r7, #20]
 810dd40:	2b01      	cmp	r3, #1
 810dd42:	d102      	bne.n	810dd4a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 810dd44:	f000 fe3c 	bl	810e9c0 <xTimerCreateTimerTask>
 810dd48:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 810dd4a:	697b      	ldr	r3, [r7, #20]
 810dd4c:	2b01      	cmp	r3, #1
 810dd4e:	d11b      	bne.n	810dd88 <vTaskStartScheduler+0x98>
	__asm volatile
 810dd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd54:	f383 8811 	msr	BASEPRI, r3
 810dd58:	f3bf 8f6f 	isb	sy
 810dd5c:	f3bf 8f4f 	dsb	sy
 810dd60:	613b      	str	r3, [r7, #16]
}
 810dd62:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810dd64:	4b15      	ldr	r3, [pc, #84]	@ (810ddbc <vTaskStartScheduler+0xcc>)
 810dd66:	681b      	ldr	r3, [r3, #0]
 810dd68:	3354      	adds	r3, #84	@ 0x54
 810dd6a:	4a15      	ldr	r2, [pc, #84]	@ (810ddc0 <vTaskStartScheduler+0xd0>)
 810dd6c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 810dd6e:	4b15      	ldr	r3, [pc, #84]	@ (810ddc4 <vTaskStartScheduler+0xd4>)
 810dd70:	f04f 32ff 	mov.w	r2, #4294967295
 810dd74:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 810dd76:	4b14      	ldr	r3, [pc, #80]	@ (810ddc8 <vTaskStartScheduler+0xd8>)
 810dd78:	2201      	movs	r2, #1
 810dd7a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 810dd7c:	4b13      	ldr	r3, [pc, #76]	@ (810ddcc <vTaskStartScheduler+0xdc>)
 810dd7e:	2200      	movs	r2, #0
 810dd80:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 810dd82:	f7fe fc65 	bl	810c650 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 810dd86:	e00f      	b.n	810dda8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 810dd88:	697b      	ldr	r3, [r7, #20]
 810dd8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 810dd8e:	d10b      	bne.n	810dda8 <vTaskStartScheduler+0xb8>
	__asm volatile
 810dd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dd94:	f383 8811 	msr	BASEPRI, r3
 810dd98:	f3bf 8f6f 	isb	sy
 810dd9c:	f3bf 8f4f 	dsb	sy
 810dda0:	60fb      	str	r3, [r7, #12]
}
 810dda2:	bf00      	nop
 810dda4:	bf00      	nop
 810dda6:	e7fd      	b.n	810dda4 <vTaskStartScheduler+0xb4>
}
 810dda8:	bf00      	nop
 810ddaa:	3718      	adds	r7, #24
 810ddac:	46bd      	mov	sp, r7
 810ddae:	bd80      	pop	{r7, pc}
 810ddb0:	0810fd90 	.word	0x0810fd90
 810ddb4:	0810e425 	.word	0x0810e425
 810ddb8:	10004fa4 	.word	0x10004fa4
 810ddbc:	10004aac 	.word	0x10004aac
 810ddc0:	10000138 	.word	0x10000138
 810ddc4:	10004fa0 	.word	0x10004fa0
 810ddc8:	10004f8c 	.word	0x10004f8c
 810ddcc:	10004f84 	.word	0x10004f84

0810ddd0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 810ddd0:	b480      	push	{r7}
 810ddd2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 810ddd4:	4b04      	ldr	r3, [pc, #16]	@ (810dde8 <vTaskSuspendAll+0x18>)
 810ddd6:	681b      	ldr	r3, [r3, #0]
 810ddd8:	3301      	adds	r3, #1
 810ddda:	4a03      	ldr	r2, [pc, #12]	@ (810dde8 <vTaskSuspendAll+0x18>)
 810dddc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 810ddde:	bf00      	nop
 810dde0:	46bd      	mov	sp, r7
 810dde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810dde6:	4770      	bx	lr
 810dde8:	10004fa8 	.word	0x10004fa8

0810ddec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 810ddec:	b580      	push	{r7, lr}
 810ddee:	b084      	sub	sp, #16
 810ddf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 810ddf2:	2300      	movs	r3, #0
 810ddf4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 810ddf6:	2300      	movs	r3, #0
 810ddf8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 810ddfa:	4b42      	ldr	r3, [pc, #264]	@ (810df04 <xTaskResumeAll+0x118>)
 810ddfc:	681b      	ldr	r3, [r3, #0]
 810ddfe:	2b00      	cmp	r3, #0
 810de00:	d10b      	bne.n	810de1a <xTaskResumeAll+0x2e>
	__asm volatile
 810de02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810de06:	f383 8811 	msr	BASEPRI, r3
 810de0a:	f3bf 8f6f 	isb	sy
 810de0e:	f3bf 8f4f 	dsb	sy
 810de12:	603b      	str	r3, [r7, #0]
}
 810de14:	bf00      	nop
 810de16:	bf00      	nop
 810de18:	e7fd      	b.n	810de16 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 810de1a:	f7fe fcbd 	bl	810c798 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 810de1e:	4b39      	ldr	r3, [pc, #228]	@ (810df04 <xTaskResumeAll+0x118>)
 810de20:	681b      	ldr	r3, [r3, #0]
 810de22:	3b01      	subs	r3, #1
 810de24:	4a37      	ldr	r2, [pc, #220]	@ (810df04 <xTaskResumeAll+0x118>)
 810de26:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810de28:	4b36      	ldr	r3, [pc, #216]	@ (810df04 <xTaskResumeAll+0x118>)
 810de2a:	681b      	ldr	r3, [r3, #0]
 810de2c:	2b00      	cmp	r3, #0
 810de2e:	d162      	bne.n	810def6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 810de30:	4b35      	ldr	r3, [pc, #212]	@ (810df08 <xTaskResumeAll+0x11c>)
 810de32:	681b      	ldr	r3, [r3, #0]
 810de34:	2b00      	cmp	r3, #0
 810de36:	d05e      	beq.n	810def6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810de38:	e02f      	b.n	810de9a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810de3a:	4b34      	ldr	r3, [pc, #208]	@ (810df0c <xTaskResumeAll+0x120>)
 810de3c:	68db      	ldr	r3, [r3, #12]
 810de3e:	68db      	ldr	r3, [r3, #12]
 810de40:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810de42:	68fb      	ldr	r3, [r7, #12]
 810de44:	3318      	adds	r3, #24
 810de46:	4618      	mov	r0, r3
 810de48:	f7fe fb4e 	bl	810c4e8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810de4c:	68fb      	ldr	r3, [r7, #12]
 810de4e:	3304      	adds	r3, #4
 810de50:	4618      	mov	r0, r3
 810de52:	f7fe fb49 	bl	810c4e8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 810de56:	68fb      	ldr	r3, [r7, #12]
 810de58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de5a:	4b2d      	ldr	r3, [pc, #180]	@ (810df10 <xTaskResumeAll+0x124>)
 810de5c:	681b      	ldr	r3, [r3, #0]
 810de5e:	429a      	cmp	r2, r3
 810de60:	d903      	bls.n	810de6a <xTaskResumeAll+0x7e>
 810de62:	68fb      	ldr	r3, [r7, #12]
 810de64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810de66:	4a2a      	ldr	r2, [pc, #168]	@ (810df10 <xTaskResumeAll+0x124>)
 810de68:	6013      	str	r3, [r2, #0]
 810de6a:	68fb      	ldr	r3, [r7, #12]
 810de6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de6e:	4613      	mov	r3, r2
 810de70:	009b      	lsls	r3, r3, #2
 810de72:	4413      	add	r3, r2
 810de74:	009b      	lsls	r3, r3, #2
 810de76:	4a27      	ldr	r2, [pc, #156]	@ (810df14 <xTaskResumeAll+0x128>)
 810de78:	441a      	add	r2, r3
 810de7a:	68fb      	ldr	r3, [r7, #12]
 810de7c:	3304      	adds	r3, #4
 810de7e:	4619      	mov	r1, r3
 810de80:	4610      	mov	r0, r2
 810de82:	f7fe fad4 	bl	810c42e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810de86:	68fb      	ldr	r3, [r7, #12]
 810de88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810de8a:	4b23      	ldr	r3, [pc, #140]	@ (810df18 <xTaskResumeAll+0x12c>)
 810de8c:	681b      	ldr	r3, [r3, #0]
 810de8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810de90:	429a      	cmp	r2, r3
 810de92:	d302      	bcc.n	810de9a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 810de94:	4b21      	ldr	r3, [pc, #132]	@ (810df1c <xTaskResumeAll+0x130>)
 810de96:	2201      	movs	r2, #1
 810de98:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 810de9a:	4b1c      	ldr	r3, [pc, #112]	@ (810df0c <xTaskResumeAll+0x120>)
 810de9c:	681b      	ldr	r3, [r3, #0]
 810de9e:	2b00      	cmp	r3, #0
 810dea0:	d1cb      	bne.n	810de3a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 810dea2:	68fb      	ldr	r3, [r7, #12]
 810dea4:	2b00      	cmp	r3, #0
 810dea6:	d001      	beq.n	810deac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 810dea8:	f000 fb78 	bl	810e59c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 810deac:	4b1c      	ldr	r3, [pc, #112]	@ (810df20 <xTaskResumeAll+0x134>)
 810deae:	681b      	ldr	r3, [r3, #0]
 810deb0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 810deb2:	687b      	ldr	r3, [r7, #4]
 810deb4:	2b00      	cmp	r3, #0
 810deb6:	d010      	beq.n	810deda <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 810deb8:	f000 f858 	bl	810df6c <xTaskIncrementTick>
 810debc:	4603      	mov	r3, r0
 810debe:	2b00      	cmp	r3, #0
 810dec0:	d002      	beq.n	810dec8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 810dec2:	4b16      	ldr	r3, [pc, #88]	@ (810df1c <xTaskResumeAll+0x130>)
 810dec4:	2201      	movs	r2, #1
 810dec6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 810dec8:	687b      	ldr	r3, [r7, #4]
 810deca:	3b01      	subs	r3, #1
 810decc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 810dece:	687b      	ldr	r3, [r7, #4]
 810ded0:	2b00      	cmp	r3, #0
 810ded2:	d1f1      	bne.n	810deb8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 810ded4:	4b12      	ldr	r3, [pc, #72]	@ (810df20 <xTaskResumeAll+0x134>)
 810ded6:	2200      	movs	r2, #0
 810ded8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 810deda:	4b10      	ldr	r3, [pc, #64]	@ (810df1c <xTaskResumeAll+0x130>)
 810dedc:	681b      	ldr	r3, [r3, #0]
 810dede:	2b00      	cmp	r3, #0
 810dee0:	d009      	beq.n	810def6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 810dee2:	2301      	movs	r3, #1
 810dee4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 810dee6:	4b0f      	ldr	r3, [pc, #60]	@ (810df24 <xTaskResumeAll+0x138>)
 810dee8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810deec:	601a      	str	r2, [r3, #0]
 810deee:	f3bf 8f4f 	dsb	sy
 810def2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810def6:	f7fe fc81 	bl	810c7fc <vPortExitCritical>

	return xAlreadyYielded;
 810defa:	68bb      	ldr	r3, [r7, #8]
}
 810defc:	4618      	mov	r0, r3
 810defe:	3710      	adds	r7, #16
 810df00:	46bd      	mov	sp, r7
 810df02:	bd80      	pop	{r7, pc}
 810df04:	10004fa8 	.word	0x10004fa8
 810df08:	10004f80 	.word	0x10004f80
 810df0c:	10004f40 	.word	0x10004f40
 810df10:	10004f88 	.word	0x10004f88
 810df14:	10004ab0 	.word	0x10004ab0
 810df18:	10004aac 	.word	0x10004aac
 810df1c:	10004f94 	.word	0x10004f94
 810df20:	10004f90 	.word	0x10004f90
 810df24:	e000ed04 	.word	0xe000ed04

0810df28 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 810df28:	b480      	push	{r7}
 810df2a:	b083      	sub	sp, #12
 810df2c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 810df2e:	4b05      	ldr	r3, [pc, #20]	@ (810df44 <xTaskGetTickCount+0x1c>)
 810df30:	681b      	ldr	r3, [r3, #0]
 810df32:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 810df34:	687b      	ldr	r3, [r7, #4]
}
 810df36:	4618      	mov	r0, r3
 810df38:	370c      	adds	r7, #12
 810df3a:	46bd      	mov	sp, r7
 810df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810df40:	4770      	bx	lr
 810df42:	bf00      	nop
 810df44:	10004f84 	.word	0x10004f84

0810df48 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 810df48:	b580      	push	{r7, lr}
 810df4a:	b082      	sub	sp, #8
 810df4c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 810df4e:	f7fe fd03 	bl	810c958 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 810df52:	2300      	movs	r3, #0
 810df54:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 810df56:	4b04      	ldr	r3, [pc, #16]	@ (810df68 <xTaskGetTickCountFromISR+0x20>)
 810df58:	681b      	ldr	r3, [r3, #0]
 810df5a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 810df5c:	683b      	ldr	r3, [r7, #0]
}
 810df5e:	4618      	mov	r0, r3
 810df60:	3708      	adds	r7, #8
 810df62:	46bd      	mov	sp, r7
 810df64:	bd80      	pop	{r7, pc}
 810df66:	bf00      	nop
 810df68:	10004f84 	.word	0x10004f84

0810df6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 810df6c:	b580      	push	{r7, lr}
 810df6e:	b086      	sub	sp, #24
 810df70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 810df72:	2300      	movs	r3, #0
 810df74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810df76:	4b4f      	ldr	r3, [pc, #316]	@ (810e0b4 <xTaskIncrementTick+0x148>)
 810df78:	681b      	ldr	r3, [r3, #0]
 810df7a:	2b00      	cmp	r3, #0
 810df7c:	f040 8090 	bne.w	810e0a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 810df80:	4b4d      	ldr	r3, [pc, #308]	@ (810e0b8 <xTaskIncrementTick+0x14c>)
 810df82:	681b      	ldr	r3, [r3, #0]
 810df84:	3301      	adds	r3, #1
 810df86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 810df88:	4a4b      	ldr	r2, [pc, #300]	@ (810e0b8 <xTaskIncrementTick+0x14c>)
 810df8a:	693b      	ldr	r3, [r7, #16]
 810df8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 810df8e:	693b      	ldr	r3, [r7, #16]
 810df90:	2b00      	cmp	r3, #0
 810df92:	d121      	bne.n	810dfd8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 810df94:	4b49      	ldr	r3, [pc, #292]	@ (810e0bc <xTaskIncrementTick+0x150>)
 810df96:	681b      	ldr	r3, [r3, #0]
 810df98:	681b      	ldr	r3, [r3, #0]
 810df9a:	2b00      	cmp	r3, #0
 810df9c:	d00b      	beq.n	810dfb6 <xTaskIncrementTick+0x4a>
	__asm volatile
 810df9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810dfa2:	f383 8811 	msr	BASEPRI, r3
 810dfa6:	f3bf 8f6f 	isb	sy
 810dfaa:	f3bf 8f4f 	dsb	sy
 810dfae:	603b      	str	r3, [r7, #0]
}
 810dfb0:	bf00      	nop
 810dfb2:	bf00      	nop
 810dfb4:	e7fd      	b.n	810dfb2 <xTaskIncrementTick+0x46>
 810dfb6:	4b41      	ldr	r3, [pc, #260]	@ (810e0bc <xTaskIncrementTick+0x150>)
 810dfb8:	681b      	ldr	r3, [r3, #0]
 810dfba:	60fb      	str	r3, [r7, #12]
 810dfbc:	4b40      	ldr	r3, [pc, #256]	@ (810e0c0 <xTaskIncrementTick+0x154>)
 810dfbe:	681b      	ldr	r3, [r3, #0]
 810dfc0:	4a3e      	ldr	r2, [pc, #248]	@ (810e0bc <xTaskIncrementTick+0x150>)
 810dfc2:	6013      	str	r3, [r2, #0]
 810dfc4:	4a3e      	ldr	r2, [pc, #248]	@ (810e0c0 <xTaskIncrementTick+0x154>)
 810dfc6:	68fb      	ldr	r3, [r7, #12]
 810dfc8:	6013      	str	r3, [r2, #0]
 810dfca:	4b3e      	ldr	r3, [pc, #248]	@ (810e0c4 <xTaskIncrementTick+0x158>)
 810dfcc:	681b      	ldr	r3, [r3, #0]
 810dfce:	3301      	adds	r3, #1
 810dfd0:	4a3c      	ldr	r2, [pc, #240]	@ (810e0c4 <xTaskIncrementTick+0x158>)
 810dfd2:	6013      	str	r3, [r2, #0]
 810dfd4:	f000 fae2 	bl	810e59c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 810dfd8:	4b3b      	ldr	r3, [pc, #236]	@ (810e0c8 <xTaskIncrementTick+0x15c>)
 810dfda:	681b      	ldr	r3, [r3, #0]
 810dfdc:	693a      	ldr	r2, [r7, #16]
 810dfde:	429a      	cmp	r2, r3
 810dfe0:	d349      	bcc.n	810e076 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810dfe2:	4b36      	ldr	r3, [pc, #216]	@ (810e0bc <xTaskIncrementTick+0x150>)
 810dfe4:	681b      	ldr	r3, [r3, #0]
 810dfe6:	681b      	ldr	r3, [r3, #0]
 810dfe8:	2b00      	cmp	r3, #0
 810dfea:	d104      	bne.n	810dff6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810dfec:	4b36      	ldr	r3, [pc, #216]	@ (810e0c8 <xTaskIncrementTick+0x15c>)
 810dfee:	f04f 32ff 	mov.w	r2, #4294967295
 810dff2:	601a      	str	r2, [r3, #0]
					break;
 810dff4:	e03f      	b.n	810e076 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810dff6:	4b31      	ldr	r3, [pc, #196]	@ (810e0bc <xTaskIncrementTick+0x150>)
 810dff8:	681b      	ldr	r3, [r3, #0]
 810dffa:	68db      	ldr	r3, [r3, #12]
 810dffc:	68db      	ldr	r3, [r3, #12]
 810dffe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 810e000:	68bb      	ldr	r3, [r7, #8]
 810e002:	685b      	ldr	r3, [r3, #4]
 810e004:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 810e006:	693a      	ldr	r2, [r7, #16]
 810e008:	687b      	ldr	r3, [r7, #4]
 810e00a:	429a      	cmp	r2, r3
 810e00c:	d203      	bcs.n	810e016 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 810e00e:	4a2e      	ldr	r2, [pc, #184]	@ (810e0c8 <xTaskIncrementTick+0x15c>)
 810e010:	687b      	ldr	r3, [r7, #4]
 810e012:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 810e014:	e02f      	b.n	810e076 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e016:	68bb      	ldr	r3, [r7, #8]
 810e018:	3304      	adds	r3, #4
 810e01a:	4618      	mov	r0, r3
 810e01c:	f7fe fa64 	bl	810c4e8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 810e020:	68bb      	ldr	r3, [r7, #8]
 810e022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810e024:	2b00      	cmp	r3, #0
 810e026:	d004      	beq.n	810e032 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 810e028:	68bb      	ldr	r3, [r7, #8]
 810e02a:	3318      	adds	r3, #24
 810e02c:	4618      	mov	r0, r3
 810e02e:	f7fe fa5b 	bl	810c4e8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 810e032:	68bb      	ldr	r3, [r7, #8]
 810e034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e036:	4b25      	ldr	r3, [pc, #148]	@ (810e0cc <xTaskIncrementTick+0x160>)
 810e038:	681b      	ldr	r3, [r3, #0]
 810e03a:	429a      	cmp	r2, r3
 810e03c:	d903      	bls.n	810e046 <xTaskIncrementTick+0xda>
 810e03e:	68bb      	ldr	r3, [r7, #8]
 810e040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e042:	4a22      	ldr	r2, [pc, #136]	@ (810e0cc <xTaskIncrementTick+0x160>)
 810e044:	6013      	str	r3, [r2, #0]
 810e046:	68bb      	ldr	r3, [r7, #8]
 810e048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e04a:	4613      	mov	r3, r2
 810e04c:	009b      	lsls	r3, r3, #2
 810e04e:	4413      	add	r3, r2
 810e050:	009b      	lsls	r3, r3, #2
 810e052:	4a1f      	ldr	r2, [pc, #124]	@ (810e0d0 <xTaskIncrementTick+0x164>)
 810e054:	441a      	add	r2, r3
 810e056:	68bb      	ldr	r3, [r7, #8]
 810e058:	3304      	adds	r3, #4
 810e05a:	4619      	mov	r1, r3
 810e05c:	4610      	mov	r0, r2
 810e05e:	f7fe f9e6 	bl	810c42e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 810e062:	68bb      	ldr	r3, [r7, #8]
 810e064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e066:	4b1b      	ldr	r3, [pc, #108]	@ (810e0d4 <xTaskIncrementTick+0x168>)
 810e068:	681b      	ldr	r3, [r3, #0]
 810e06a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e06c:	429a      	cmp	r2, r3
 810e06e:	d3b8      	bcc.n	810dfe2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 810e070:	2301      	movs	r3, #1
 810e072:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e074:	e7b5      	b.n	810dfe2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 810e076:	4b17      	ldr	r3, [pc, #92]	@ (810e0d4 <xTaskIncrementTick+0x168>)
 810e078:	681b      	ldr	r3, [r3, #0]
 810e07a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e07c:	4914      	ldr	r1, [pc, #80]	@ (810e0d0 <xTaskIncrementTick+0x164>)
 810e07e:	4613      	mov	r3, r2
 810e080:	009b      	lsls	r3, r3, #2
 810e082:	4413      	add	r3, r2
 810e084:	009b      	lsls	r3, r3, #2
 810e086:	440b      	add	r3, r1
 810e088:	681b      	ldr	r3, [r3, #0]
 810e08a:	2b01      	cmp	r3, #1
 810e08c:	d901      	bls.n	810e092 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 810e08e:	2301      	movs	r3, #1
 810e090:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 810e092:	4b11      	ldr	r3, [pc, #68]	@ (810e0d8 <xTaskIncrementTick+0x16c>)
 810e094:	681b      	ldr	r3, [r3, #0]
 810e096:	2b00      	cmp	r3, #0
 810e098:	d007      	beq.n	810e0aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 810e09a:	2301      	movs	r3, #1
 810e09c:	617b      	str	r3, [r7, #20]
 810e09e:	e004      	b.n	810e0aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 810e0a0:	4b0e      	ldr	r3, [pc, #56]	@ (810e0dc <xTaskIncrementTick+0x170>)
 810e0a2:	681b      	ldr	r3, [r3, #0]
 810e0a4:	3301      	adds	r3, #1
 810e0a6:	4a0d      	ldr	r2, [pc, #52]	@ (810e0dc <xTaskIncrementTick+0x170>)
 810e0a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 810e0aa:	697b      	ldr	r3, [r7, #20]
}
 810e0ac:	4618      	mov	r0, r3
 810e0ae:	3718      	adds	r7, #24
 810e0b0:	46bd      	mov	sp, r7
 810e0b2:	bd80      	pop	{r7, pc}
 810e0b4:	10004fa8 	.word	0x10004fa8
 810e0b8:	10004f84 	.word	0x10004f84
 810e0bc:	10004f38 	.word	0x10004f38
 810e0c0:	10004f3c 	.word	0x10004f3c
 810e0c4:	10004f98 	.word	0x10004f98
 810e0c8:	10004fa0 	.word	0x10004fa0
 810e0cc:	10004f88 	.word	0x10004f88
 810e0d0:	10004ab0 	.word	0x10004ab0
 810e0d4:	10004aac 	.word	0x10004aac
 810e0d8:	10004f94 	.word	0x10004f94
 810e0dc:	10004f90 	.word	0x10004f90

0810e0e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 810e0e0:	b480      	push	{r7}
 810e0e2:	b085      	sub	sp, #20
 810e0e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 810e0e6:	4b2b      	ldr	r3, [pc, #172]	@ (810e194 <vTaskSwitchContext+0xb4>)
 810e0e8:	681b      	ldr	r3, [r3, #0]
 810e0ea:	2b00      	cmp	r3, #0
 810e0ec:	d003      	beq.n	810e0f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 810e0ee:	4b2a      	ldr	r3, [pc, #168]	@ (810e198 <vTaskSwitchContext+0xb8>)
 810e0f0:	2201      	movs	r2, #1
 810e0f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 810e0f4:	e047      	b.n	810e186 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 810e0f6:	4b28      	ldr	r3, [pc, #160]	@ (810e198 <vTaskSwitchContext+0xb8>)
 810e0f8:	2200      	movs	r2, #0
 810e0fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e0fc:	4b27      	ldr	r3, [pc, #156]	@ (810e19c <vTaskSwitchContext+0xbc>)
 810e0fe:	681b      	ldr	r3, [r3, #0]
 810e100:	60fb      	str	r3, [r7, #12]
 810e102:	e011      	b.n	810e128 <vTaskSwitchContext+0x48>
 810e104:	68fb      	ldr	r3, [r7, #12]
 810e106:	2b00      	cmp	r3, #0
 810e108:	d10b      	bne.n	810e122 <vTaskSwitchContext+0x42>
	__asm volatile
 810e10a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e10e:	f383 8811 	msr	BASEPRI, r3
 810e112:	f3bf 8f6f 	isb	sy
 810e116:	f3bf 8f4f 	dsb	sy
 810e11a:	607b      	str	r3, [r7, #4]
}
 810e11c:	bf00      	nop
 810e11e:	bf00      	nop
 810e120:	e7fd      	b.n	810e11e <vTaskSwitchContext+0x3e>
 810e122:	68fb      	ldr	r3, [r7, #12]
 810e124:	3b01      	subs	r3, #1
 810e126:	60fb      	str	r3, [r7, #12]
 810e128:	491d      	ldr	r1, [pc, #116]	@ (810e1a0 <vTaskSwitchContext+0xc0>)
 810e12a:	68fa      	ldr	r2, [r7, #12]
 810e12c:	4613      	mov	r3, r2
 810e12e:	009b      	lsls	r3, r3, #2
 810e130:	4413      	add	r3, r2
 810e132:	009b      	lsls	r3, r3, #2
 810e134:	440b      	add	r3, r1
 810e136:	681b      	ldr	r3, [r3, #0]
 810e138:	2b00      	cmp	r3, #0
 810e13a:	d0e3      	beq.n	810e104 <vTaskSwitchContext+0x24>
 810e13c:	68fa      	ldr	r2, [r7, #12]
 810e13e:	4613      	mov	r3, r2
 810e140:	009b      	lsls	r3, r3, #2
 810e142:	4413      	add	r3, r2
 810e144:	009b      	lsls	r3, r3, #2
 810e146:	4a16      	ldr	r2, [pc, #88]	@ (810e1a0 <vTaskSwitchContext+0xc0>)
 810e148:	4413      	add	r3, r2
 810e14a:	60bb      	str	r3, [r7, #8]
 810e14c:	68bb      	ldr	r3, [r7, #8]
 810e14e:	685b      	ldr	r3, [r3, #4]
 810e150:	685a      	ldr	r2, [r3, #4]
 810e152:	68bb      	ldr	r3, [r7, #8]
 810e154:	605a      	str	r2, [r3, #4]
 810e156:	68bb      	ldr	r3, [r7, #8]
 810e158:	685a      	ldr	r2, [r3, #4]
 810e15a:	68bb      	ldr	r3, [r7, #8]
 810e15c:	3308      	adds	r3, #8
 810e15e:	429a      	cmp	r2, r3
 810e160:	d104      	bne.n	810e16c <vTaskSwitchContext+0x8c>
 810e162:	68bb      	ldr	r3, [r7, #8]
 810e164:	685b      	ldr	r3, [r3, #4]
 810e166:	685a      	ldr	r2, [r3, #4]
 810e168:	68bb      	ldr	r3, [r7, #8]
 810e16a:	605a      	str	r2, [r3, #4]
 810e16c:	68bb      	ldr	r3, [r7, #8]
 810e16e:	685b      	ldr	r3, [r3, #4]
 810e170:	68db      	ldr	r3, [r3, #12]
 810e172:	4a0c      	ldr	r2, [pc, #48]	@ (810e1a4 <vTaskSwitchContext+0xc4>)
 810e174:	6013      	str	r3, [r2, #0]
 810e176:	4a09      	ldr	r2, [pc, #36]	@ (810e19c <vTaskSwitchContext+0xbc>)
 810e178:	68fb      	ldr	r3, [r7, #12]
 810e17a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 810e17c:	4b09      	ldr	r3, [pc, #36]	@ (810e1a4 <vTaskSwitchContext+0xc4>)
 810e17e:	681b      	ldr	r3, [r3, #0]
 810e180:	3354      	adds	r3, #84	@ 0x54
 810e182:	4a09      	ldr	r2, [pc, #36]	@ (810e1a8 <vTaskSwitchContext+0xc8>)
 810e184:	6013      	str	r3, [r2, #0]
}
 810e186:	bf00      	nop
 810e188:	3714      	adds	r7, #20
 810e18a:	46bd      	mov	sp, r7
 810e18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e190:	4770      	bx	lr
 810e192:	bf00      	nop
 810e194:	10004fa8 	.word	0x10004fa8
 810e198:	10004f94 	.word	0x10004f94
 810e19c:	10004f88 	.word	0x10004f88
 810e1a0:	10004ab0 	.word	0x10004ab0
 810e1a4:	10004aac 	.word	0x10004aac
 810e1a8:	10000138 	.word	0x10000138

0810e1ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 810e1ac:	b580      	push	{r7, lr}
 810e1ae:	b084      	sub	sp, #16
 810e1b0:	af00      	add	r7, sp, #0
 810e1b2:	6078      	str	r0, [r7, #4]
 810e1b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 810e1b6:	687b      	ldr	r3, [r7, #4]
 810e1b8:	2b00      	cmp	r3, #0
 810e1ba:	d10b      	bne.n	810e1d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 810e1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e1c0:	f383 8811 	msr	BASEPRI, r3
 810e1c4:	f3bf 8f6f 	isb	sy
 810e1c8:	f3bf 8f4f 	dsb	sy
 810e1cc:	60fb      	str	r3, [r7, #12]
}
 810e1ce:	bf00      	nop
 810e1d0:	bf00      	nop
 810e1d2:	e7fd      	b.n	810e1d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e1d4:	4b07      	ldr	r3, [pc, #28]	@ (810e1f4 <vTaskPlaceOnEventList+0x48>)
 810e1d6:	681b      	ldr	r3, [r3, #0]
 810e1d8:	3318      	adds	r3, #24
 810e1da:	4619      	mov	r1, r3
 810e1dc:	6878      	ldr	r0, [r7, #4]
 810e1de:	f7fe f94a 	bl	810c476 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 810e1e2:	2101      	movs	r1, #1
 810e1e4:	6838      	ldr	r0, [r7, #0]
 810e1e6:	f000 fb97 	bl	810e918 <prvAddCurrentTaskToDelayedList>
}
 810e1ea:	bf00      	nop
 810e1ec:	3710      	adds	r7, #16
 810e1ee:	46bd      	mov	sp, r7
 810e1f0:	bd80      	pop	{r7, pc}
 810e1f2:	bf00      	nop
 810e1f4:	10004aac 	.word	0x10004aac

0810e1f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 810e1f8:	b580      	push	{r7, lr}
 810e1fa:	b086      	sub	sp, #24
 810e1fc:	af00      	add	r7, sp, #0
 810e1fe:	60f8      	str	r0, [r7, #12]
 810e200:	60b9      	str	r1, [r7, #8]
 810e202:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 810e204:	68fb      	ldr	r3, [r7, #12]
 810e206:	2b00      	cmp	r3, #0
 810e208:	d10b      	bne.n	810e222 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 810e20a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e20e:	f383 8811 	msr	BASEPRI, r3
 810e212:	f3bf 8f6f 	isb	sy
 810e216:	f3bf 8f4f 	dsb	sy
 810e21a:	617b      	str	r3, [r7, #20]
}
 810e21c:	bf00      	nop
 810e21e:	bf00      	nop
 810e220:	e7fd      	b.n	810e21e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 810e222:	4b0a      	ldr	r3, [pc, #40]	@ (810e24c <vTaskPlaceOnEventListRestricted+0x54>)
 810e224:	681b      	ldr	r3, [r3, #0]
 810e226:	3318      	adds	r3, #24
 810e228:	4619      	mov	r1, r3
 810e22a:	68f8      	ldr	r0, [r7, #12]
 810e22c:	f7fe f8ff 	bl	810c42e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 810e230:	687b      	ldr	r3, [r7, #4]
 810e232:	2b00      	cmp	r3, #0
 810e234:	d002      	beq.n	810e23c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 810e236:	f04f 33ff 	mov.w	r3, #4294967295
 810e23a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 810e23c:	6879      	ldr	r1, [r7, #4]
 810e23e:	68b8      	ldr	r0, [r7, #8]
 810e240:	f000 fb6a 	bl	810e918 <prvAddCurrentTaskToDelayedList>
	}
 810e244:	bf00      	nop
 810e246:	3718      	adds	r7, #24
 810e248:	46bd      	mov	sp, r7
 810e24a:	bd80      	pop	{r7, pc}
 810e24c:	10004aac 	.word	0x10004aac

0810e250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 810e250:	b580      	push	{r7, lr}
 810e252:	b086      	sub	sp, #24
 810e254:	af00      	add	r7, sp, #0
 810e256:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e258:	687b      	ldr	r3, [r7, #4]
 810e25a:	68db      	ldr	r3, [r3, #12]
 810e25c:	68db      	ldr	r3, [r3, #12]
 810e25e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 810e260:	693b      	ldr	r3, [r7, #16]
 810e262:	2b00      	cmp	r3, #0
 810e264:	d10b      	bne.n	810e27e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 810e266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e26a:	f383 8811 	msr	BASEPRI, r3
 810e26e:	f3bf 8f6f 	isb	sy
 810e272:	f3bf 8f4f 	dsb	sy
 810e276:	60fb      	str	r3, [r7, #12]
}
 810e278:	bf00      	nop
 810e27a:	bf00      	nop
 810e27c:	e7fd      	b.n	810e27a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 810e27e:	693b      	ldr	r3, [r7, #16]
 810e280:	3318      	adds	r3, #24
 810e282:	4618      	mov	r0, r3
 810e284:	f7fe f930 	bl	810c4e8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e288:	4b1d      	ldr	r3, [pc, #116]	@ (810e300 <xTaskRemoveFromEventList+0xb0>)
 810e28a:	681b      	ldr	r3, [r3, #0]
 810e28c:	2b00      	cmp	r3, #0
 810e28e:	d11d      	bne.n	810e2cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 810e290:	693b      	ldr	r3, [r7, #16]
 810e292:	3304      	adds	r3, #4
 810e294:	4618      	mov	r0, r3
 810e296:	f7fe f927 	bl	810c4e8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 810e29a:	693b      	ldr	r3, [r7, #16]
 810e29c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e29e:	4b19      	ldr	r3, [pc, #100]	@ (810e304 <xTaskRemoveFromEventList+0xb4>)
 810e2a0:	681b      	ldr	r3, [r3, #0]
 810e2a2:	429a      	cmp	r2, r3
 810e2a4:	d903      	bls.n	810e2ae <xTaskRemoveFromEventList+0x5e>
 810e2a6:	693b      	ldr	r3, [r7, #16]
 810e2a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e2aa:	4a16      	ldr	r2, [pc, #88]	@ (810e304 <xTaskRemoveFromEventList+0xb4>)
 810e2ac:	6013      	str	r3, [r2, #0]
 810e2ae:	693b      	ldr	r3, [r7, #16]
 810e2b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e2b2:	4613      	mov	r3, r2
 810e2b4:	009b      	lsls	r3, r3, #2
 810e2b6:	4413      	add	r3, r2
 810e2b8:	009b      	lsls	r3, r3, #2
 810e2ba:	4a13      	ldr	r2, [pc, #76]	@ (810e308 <xTaskRemoveFromEventList+0xb8>)
 810e2bc:	441a      	add	r2, r3
 810e2be:	693b      	ldr	r3, [r7, #16]
 810e2c0:	3304      	adds	r3, #4
 810e2c2:	4619      	mov	r1, r3
 810e2c4:	4610      	mov	r0, r2
 810e2c6:	f7fe f8b2 	bl	810c42e <vListInsertEnd>
 810e2ca:	e005      	b.n	810e2d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 810e2cc:	693b      	ldr	r3, [r7, #16]
 810e2ce:	3318      	adds	r3, #24
 810e2d0:	4619      	mov	r1, r3
 810e2d2:	480e      	ldr	r0, [pc, #56]	@ (810e30c <xTaskRemoveFromEventList+0xbc>)
 810e2d4:	f7fe f8ab 	bl	810c42e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 810e2d8:	693b      	ldr	r3, [r7, #16]
 810e2da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e2dc:	4b0c      	ldr	r3, [pc, #48]	@ (810e310 <xTaskRemoveFromEventList+0xc0>)
 810e2de:	681b      	ldr	r3, [r3, #0]
 810e2e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e2e2:	429a      	cmp	r2, r3
 810e2e4:	d905      	bls.n	810e2f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 810e2e6:	2301      	movs	r3, #1
 810e2e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 810e2ea:	4b0a      	ldr	r3, [pc, #40]	@ (810e314 <xTaskRemoveFromEventList+0xc4>)
 810e2ec:	2201      	movs	r2, #1
 810e2ee:	601a      	str	r2, [r3, #0]
 810e2f0:	e001      	b.n	810e2f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 810e2f2:	2300      	movs	r3, #0
 810e2f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 810e2f6:	697b      	ldr	r3, [r7, #20]
}
 810e2f8:	4618      	mov	r0, r3
 810e2fa:	3718      	adds	r7, #24
 810e2fc:	46bd      	mov	sp, r7
 810e2fe:	bd80      	pop	{r7, pc}
 810e300:	10004fa8 	.word	0x10004fa8
 810e304:	10004f88 	.word	0x10004f88
 810e308:	10004ab0 	.word	0x10004ab0
 810e30c:	10004f40 	.word	0x10004f40
 810e310:	10004aac 	.word	0x10004aac
 810e314:	10004f94 	.word	0x10004f94

0810e318 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 810e318:	b480      	push	{r7}
 810e31a:	b083      	sub	sp, #12
 810e31c:	af00      	add	r7, sp, #0
 810e31e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 810e320:	4b06      	ldr	r3, [pc, #24]	@ (810e33c <vTaskInternalSetTimeOutState+0x24>)
 810e322:	681a      	ldr	r2, [r3, #0]
 810e324:	687b      	ldr	r3, [r7, #4]
 810e326:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 810e328:	4b05      	ldr	r3, [pc, #20]	@ (810e340 <vTaskInternalSetTimeOutState+0x28>)
 810e32a:	681a      	ldr	r2, [r3, #0]
 810e32c:	687b      	ldr	r3, [r7, #4]
 810e32e:	605a      	str	r2, [r3, #4]
}
 810e330:	bf00      	nop
 810e332:	370c      	adds	r7, #12
 810e334:	46bd      	mov	sp, r7
 810e336:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e33a:	4770      	bx	lr
 810e33c:	10004f98 	.word	0x10004f98
 810e340:	10004f84 	.word	0x10004f84

0810e344 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 810e344:	b580      	push	{r7, lr}
 810e346:	b088      	sub	sp, #32
 810e348:	af00      	add	r7, sp, #0
 810e34a:	6078      	str	r0, [r7, #4]
 810e34c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 810e34e:	687b      	ldr	r3, [r7, #4]
 810e350:	2b00      	cmp	r3, #0
 810e352:	d10b      	bne.n	810e36c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 810e354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e358:	f383 8811 	msr	BASEPRI, r3
 810e35c:	f3bf 8f6f 	isb	sy
 810e360:	f3bf 8f4f 	dsb	sy
 810e364:	613b      	str	r3, [r7, #16]
}
 810e366:	bf00      	nop
 810e368:	bf00      	nop
 810e36a:	e7fd      	b.n	810e368 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 810e36c:	683b      	ldr	r3, [r7, #0]
 810e36e:	2b00      	cmp	r3, #0
 810e370:	d10b      	bne.n	810e38a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 810e372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e376:	f383 8811 	msr	BASEPRI, r3
 810e37a:	f3bf 8f6f 	isb	sy
 810e37e:	f3bf 8f4f 	dsb	sy
 810e382:	60fb      	str	r3, [r7, #12]
}
 810e384:	bf00      	nop
 810e386:	bf00      	nop
 810e388:	e7fd      	b.n	810e386 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 810e38a:	f7fe fa05 	bl	810c798 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 810e38e:	4b1d      	ldr	r3, [pc, #116]	@ (810e404 <xTaskCheckForTimeOut+0xc0>)
 810e390:	681b      	ldr	r3, [r3, #0]
 810e392:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 810e394:	687b      	ldr	r3, [r7, #4]
 810e396:	685b      	ldr	r3, [r3, #4]
 810e398:	69ba      	ldr	r2, [r7, #24]
 810e39a:	1ad3      	subs	r3, r2, r3
 810e39c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 810e39e:	683b      	ldr	r3, [r7, #0]
 810e3a0:	681b      	ldr	r3, [r3, #0]
 810e3a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e3a6:	d102      	bne.n	810e3ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 810e3a8:	2300      	movs	r3, #0
 810e3aa:	61fb      	str	r3, [r7, #28]
 810e3ac:	e023      	b.n	810e3f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 810e3ae:	687b      	ldr	r3, [r7, #4]
 810e3b0:	681a      	ldr	r2, [r3, #0]
 810e3b2:	4b15      	ldr	r3, [pc, #84]	@ (810e408 <xTaskCheckForTimeOut+0xc4>)
 810e3b4:	681b      	ldr	r3, [r3, #0]
 810e3b6:	429a      	cmp	r2, r3
 810e3b8:	d007      	beq.n	810e3ca <xTaskCheckForTimeOut+0x86>
 810e3ba:	687b      	ldr	r3, [r7, #4]
 810e3bc:	685b      	ldr	r3, [r3, #4]
 810e3be:	69ba      	ldr	r2, [r7, #24]
 810e3c0:	429a      	cmp	r2, r3
 810e3c2:	d302      	bcc.n	810e3ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 810e3c4:	2301      	movs	r3, #1
 810e3c6:	61fb      	str	r3, [r7, #28]
 810e3c8:	e015      	b.n	810e3f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 810e3ca:	683b      	ldr	r3, [r7, #0]
 810e3cc:	681b      	ldr	r3, [r3, #0]
 810e3ce:	697a      	ldr	r2, [r7, #20]
 810e3d0:	429a      	cmp	r2, r3
 810e3d2:	d20b      	bcs.n	810e3ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 810e3d4:	683b      	ldr	r3, [r7, #0]
 810e3d6:	681a      	ldr	r2, [r3, #0]
 810e3d8:	697b      	ldr	r3, [r7, #20]
 810e3da:	1ad2      	subs	r2, r2, r3
 810e3dc:	683b      	ldr	r3, [r7, #0]
 810e3de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 810e3e0:	6878      	ldr	r0, [r7, #4]
 810e3e2:	f7ff ff99 	bl	810e318 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 810e3e6:	2300      	movs	r3, #0
 810e3e8:	61fb      	str	r3, [r7, #28]
 810e3ea:	e004      	b.n	810e3f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 810e3ec:	683b      	ldr	r3, [r7, #0]
 810e3ee:	2200      	movs	r2, #0
 810e3f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 810e3f2:	2301      	movs	r3, #1
 810e3f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 810e3f6:	f7fe fa01 	bl	810c7fc <vPortExitCritical>

	return xReturn;
 810e3fa:	69fb      	ldr	r3, [r7, #28]
}
 810e3fc:	4618      	mov	r0, r3
 810e3fe:	3720      	adds	r7, #32
 810e400:	46bd      	mov	sp, r7
 810e402:	bd80      	pop	{r7, pc}
 810e404:	10004f84 	.word	0x10004f84
 810e408:	10004f98 	.word	0x10004f98

0810e40c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 810e40c:	b480      	push	{r7}
 810e40e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 810e410:	4b03      	ldr	r3, [pc, #12]	@ (810e420 <vTaskMissedYield+0x14>)
 810e412:	2201      	movs	r2, #1
 810e414:	601a      	str	r2, [r3, #0]
}
 810e416:	bf00      	nop
 810e418:	46bd      	mov	sp, r7
 810e41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e41e:	4770      	bx	lr
 810e420:	10004f94 	.word	0x10004f94

0810e424 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 810e424:	b580      	push	{r7, lr}
 810e426:	b082      	sub	sp, #8
 810e428:	af00      	add	r7, sp, #0
 810e42a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 810e42c:	f000 f852 	bl	810e4d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 810e430:	4b06      	ldr	r3, [pc, #24]	@ (810e44c <prvIdleTask+0x28>)
 810e432:	681b      	ldr	r3, [r3, #0]
 810e434:	2b01      	cmp	r3, #1
 810e436:	d9f9      	bls.n	810e42c <prvIdleTask+0x8>
			{
				taskYIELD();
 810e438:	4b05      	ldr	r3, [pc, #20]	@ (810e450 <prvIdleTask+0x2c>)
 810e43a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810e43e:	601a      	str	r2, [r3, #0]
 810e440:	f3bf 8f4f 	dsb	sy
 810e444:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 810e448:	e7f0      	b.n	810e42c <prvIdleTask+0x8>
 810e44a:	bf00      	nop
 810e44c:	10004ab0 	.word	0x10004ab0
 810e450:	e000ed04 	.word	0xe000ed04

0810e454 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 810e454:	b580      	push	{r7, lr}
 810e456:	b082      	sub	sp, #8
 810e458:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e45a:	2300      	movs	r3, #0
 810e45c:	607b      	str	r3, [r7, #4]
 810e45e:	e00c      	b.n	810e47a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 810e460:	687a      	ldr	r2, [r7, #4]
 810e462:	4613      	mov	r3, r2
 810e464:	009b      	lsls	r3, r3, #2
 810e466:	4413      	add	r3, r2
 810e468:	009b      	lsls	r3, r3, #2
 810e46a:	4a12      	ldr	r2, [pc, #72]	@ (810e4b4 <prvInitialiseTaskLists+0x60>)
 810e46c:	4413      	add	r3, r2
 810e46e:	4618      	mov	r0, r3
 810e470:	f7fd ffb0 	bl	810c3d4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 810e474:	687b      	ldr	r3, [r7, #4]
 810e476:	3301      	adds	r3, #1
 810e478:	607b      	str	r3, [r7, #4]
 810e47a:	687b      	ldr	r3, [r7, #4]
 810e47c:	2b37      	cmp	r3, #55	@ 0x37
 810e47e:	d9ef      	bls.n	810e460 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 810e480:	480d      	ldr	r0, [pc, #52]	@ (810e4b8 <prvInitialiseTaskLists+0x64>)
 810e482:	f7fd ffa7 	bl	810c3d4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 810e486:	480d      	ldr	r0, [pc, #52]	@ (810e4bc <prvInitialiseTaskLists+0x68>)
 810e488:	f7fd ffa4 	bl	810c3d4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 810e48c:	480c      	ldr	r0, [pc, #48]	@ (810e4c0 <prvInitialiseTaskLists+0x6c>)
 810e48e:	f7fd ffa1 	bl	810c3d4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 810e492:	480c      	ldr	r0, [pc, #48]	@ (810e4c4 <prvInitialiseTaskLists+0x70>)
 810e494:	f7fd ff9e 	bl	810c3d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 810e498:	480b      	ldr	r0, [pc, #44]	@ (810e4c8 <prvInitialiseTaskLists+0x74>)
 810e49a:	f7fd ff9b 	bl	810c3d4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 810e49e:	4b0b      	ldr	r3, [pc, #44]	@ (810e4cc <prvInitialiseTaskLists+0x78>)
 810e4a0:	4a05      	ldr	r2, [pc, #20]	@ (810e4b8 <prvInitialiseTaskLists+0x64>)
 810e4a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 810e4a4:	4b0a      	ldr	r3, [pc, #40]	@ (810e4d0 <prvInitialiseTaskLists+0x7c>)
 810e4a6:	4a05      	ldr	r2, [pc, #20]	@ (810e4bc <prvInitialiseTaskLists+0x68>)
 810e4a8:	601a      	str	r2, [r3, #0]
}
 810e4aa:	bf00      	nop
 810e4ac:	3708      	adds	r7, #8
 810e4ae:	46bd      	mov	sp, r7
 810e4b0:	bd80      	pop	{r7, pc}
 810e4b2:	bf00      	nop
 810e4b4:	10004ab0 	.word	0x10004ab0
 810e4b8:	10004f10 	.word	0x10004f10
 810e4bc:	10004f24 	.word	0x10004f24
 810e4c0:	10004f40 	.word	0x10004f40
 810e4c4:	10004f54 	.word	0x10004f54
 810e4c8:	10004f6c 	.word	0x10004f6c
 810e4cc:	10004f38 	.word	0x10004f38
 810e4d0:	10004f3c 	.word	0x10004f3c

0810e4d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 810e4d4:	b580      	push	{r7, lr}
 810e4d6:	b082      	sub	sp, #8
 810e4d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e4da:	e019      	b.n	810e510 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 810e4dc:	f7fe f95c 	bl	810c798 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e4e0:	4b10      	ldr	r3, [pc, #64]	@ (810e524 <prvCheckTasksWaitingTermination+0x50>)
 810e4e2:	68db      	ldr	r3, [r3, #12]
 810e4e4:	68db      	ldr	r3, [r3, #12]
 810e4e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 810e4e8:	687b      	ldr	r3, [r7, #4]
 810e4ea:	3304      	adds	r3, #4
 810e4ec:	4618      	mov	r0, r3
 810e4ee:	f7fd fffb 	bl	810c4e8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 810e4f2:	4b0d      	ldr	r3, [pc, #52]	@ (810e528 <prvCheckTasksWaitingTermination+0x54>)
 810e4f4:	681b      	ldr	r3, [r3, #0]
 810e4f6:	3b01      	subs	r3, #1
 810e4f8:	4a0b      	ldr	r2, [pc, #44]	@ (810e528 <prvCheckTasksWaitingTermination+0x54>)
 810e4fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 810e4fc:	4b0b      	ldr	r3, [pc, #44]	@ (810e52c <prvCheckTasksWaitingTermination+0x58>)
 810e4fe:	681b      	ldr	r3, [r3, #0]
 810e500:	3b01      	subs	r3, #1
 810e502:	4a0a      	ldr	r2, [pc, #40]	@ (810e52c <prvCheckTasksWaitingTermination+0x58>)
 810e504:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 810e506:	f7fe f979 	bl	810c7fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 810e50a:	6878      	ldr	r0, [r7, #4]
 810e50c:	f000 f810 	bl	810e530 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 810e510:	4b06      	ldr	r3, [pc, #24]	@ (810e52c <prvCheckTasksWaitingTermination+0x58>)
 810e512:	681b      	ldr	r3, [r3, #0]
 810e514:	2b00      	cmp	r3, #0
 810e516:	d1e1      	bne.n	810e4dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 810e518:	bf00      	nop
 810e51a:	bf00      	nop
 810e51c:	3708      	adds	r7, #8
 810e51e:	46bd      	mov	sp, r7
 810e520:	bd80      	pop	{r7, pc}
 810e522:	bf00      	nop
 810e524:	10004f54 	.word	0x10004f54
 810e528:	10004f80 	.word	0x10004f80
 810e52c:	10004f68 	.word	0x10004f68

0810e530 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 810e530:	b580      	push	{r7, lr}
 810e532:	b084      	sub	sp, #16
 810e534:	af00      	add	r7, sp, #0
 810e536:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 810e538:	687b      	ldr	r3, [r7, #4]
 810e53a:	3354      	adds	r3, #84	@ 0x54
 810e53c:	4618      	mov	r0, r3
 810e53e:	f000 fe11 	bl	810f164 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 810e542:	687b      	ldr	r3, [r7, #4]
 810e544:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810e548:	2b00      	cmp	r3, #0
 810e54a:	d108      	bne.n	810e55e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 810e54c:	687b      	ldr	r3, [r7, #4]
 810e54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810e550:	4618      	mov	r0, r3
 810e552:	f7fd fe1f 	bl	810c194 <vPortFree>
				vPortFree( pxTCB );
 810e556:	6878      	ldr	r0, [r7, #4]
 810e558:	f7fd fe1c 	bl	810c194 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 810e55c:	e019      	b.n	810e592 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 810e55e:	687b      	ldr	r3, [r7, #4]
 810e560:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810e564:	2b01      	cmp	r3, #1
 810e566:	d103      	bne.n	810e570 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 810e568:	6878      	ldr	r0, [r7, #4]
 810e56a:	f7fd fe13 	bl	810c194 <vPortFree>
	}
 810e56e:	e010      	b.n	810e592 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 810e570:	687b      	ldr	r3, [r7, #4]
 810e572:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 810e576:	2b02      	cmp	r3, #2
 810e578:	d00b      	beq.n	810e592 <prvDeleteTCB+0x62>
	__asm volatile
 810e57a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e57e:	f383 8811 	msr	BASEPRI, r3
 810e582:	f3bf 8f6f 	isb	sy
 810e586:	f3bf 8f4f 	dsb	sy
 810e58a:	60fb      	str	r3, [r7, #12]
}
 810e58c:	bf00      	nop
 810e58e:	bf00      	nop
 810e590:	e7fd      	b.n	810e58e <prvDeleteTCB+0x5e>
	}
 810e592:	bf00      	nop
 810e594:	3710      	adds	r7, #16
 810e596:	46bd      	mov	sp, r7
 810e598:	bd80      	pop	{r7, pc}
	...

0810e59c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 810e59c:	b480      	push	{r7}
 810e59e:	b083      	sub	sp, #12
 810e5a0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 810e5a2:	4b0c      	ldr	r3, [pc, #48]	@ (810e5d4 <prvResetNextTaskUnblockTime+0x38>)
 810e5a4:	681b      	ldr	r3, [r3, #0]
 810e5a6:	681b      	ldr	r3, [r3, #0]
 810e5a8:	2b00      	cmp	r3, #0
 810e5aa:	d104      	bne.n	810e5b6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 810e5ac:	4b0a      	ldr	r3, [pc, #40]	@ (810e5d8 <prvResetNextTaskUnblockTime+0x3c>)
 810e5ae:	f04f 32ff 	mov.w	r2, #4294967295
 810e5b2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 810e5b4:	e008      	b.n	810e5c8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810e5b6:	4b07      	ldr	r3, [pc, #28]	@ (810e5d4 <prvResetNextTaskUnblockTime+0x38>)
 810e5b8:	681b      	ldr	r3, [r3, #0]
 810e5ba:	68db      	ldr	r3, [r3, #12]
 810e5bc:	68db      	ldr	r3, [r3, #12]
 810e5be:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 810e5c0:	687b      	ldr	r3, [r7, #4]
 810e5c2:	685b      	ldr	r3, [r3, #4]
 810e5c4:	4a04      	ldr	r2, [pc, #16]	@ (810e5d8 <prvResetNextTaskUnblockTime+0x3c>)
 810e5c6:	6013      	str	r3, [r2, #0]
}
 810e5c8:	bf00      	nop
 810e5ca:	370c      	adds	r7, #12
 810e5cc:	46bd      	mov	sp, r7
 810e5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5d2:	4770      	bx	lr
 810e5d4:	10004f38 	.word	0x10004f38
 810e5d8:	10004fa0 	.word	0x10004fa0

0810e5dc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 810e5dc:	b480      	push	{r7}
 810e5de:	b083      	sub	sp, #12
 810e5e0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 810e5e2:	4b05      	ldr	r3, [pc, #20]	@ (810e5f8 <xTaskGetCurrentTaskHandle+0x1c>)
 810e5e4:	681b      	ldr	r3, [r3, #0]
 810e5e6:	607b      	str	r3, [r7, #4]

		return xReturn;
 810e5e8:	687b      	ldr	r3, [r7, #4]
	}
 810e5ea:	4618      	mov	r0, r3
 810e5ec:	370c      	adds	r7, #12
 810e5ee:	46bd      	mov	sp, r7
 810e5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e5f4:	4770      	bx	lr
 810e5f6:	bf00      	nop
 810e5f8:	10004aac 	.word	0x10004aac

0810e5fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 810e5fc:	b480      	push	{r7}
 810e5fe:	b083      	sub	sp, #12
 810e600:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 810e602:	4b0b      	ldr	r3, [pc, #44]	@ (810e630 <xTaskGetSchedulerState+0x34>)
 810e604:	681b      	ldr	r3, [r3, #0]
 810e606:	2b00      	cmp	r3, #0
 810e608:	d102      	bne.n	810e610 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 810e60a:	2301      	movs	r3, #1
 810e60c:	607b      	str	r3, [r7, #4]
 810e60e:	e008      	b.n	810e622 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 810e610:	4b08      	ldr	r3, [pc, #32]	@ (810e634 <xTaskGetSchedulerState+0x38>)
 810e612:	681b      	ldr	r3, [r3, #0]
 810e614:	2b00      	cmp	r3, #0
 810e616:	d102      	bne.n	810e61e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 810e618:	2302      	movs	r3, #2
 810e61a:	607b      	str	r3, [r7, #4]
 810e61c:	e001      	b.n	810e622 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 810e61e:	2300      	movs	r3, #0
 810e620:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 810e622:	687b      	ldr	r3, [r7, #4]
	}
 810e624:	4618      	mov	r0, r3
 810e626:	370c      	adds	r7, #12
 810e628:	46bd      	mov	sp, r7
 810e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e62e:	4770      	bx	lr
 810e630:	10004f8c 	.word	0x10004f8c
 810e634:	10004fa8 	.word	0x10004fa8

0810e638 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 810e638:	b580      	push	{r7, lr}
 810e63a:	b084      	sub	sp, #16
 810e63c:	af00      	add	r7, sp, #0
 810e63e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 810e640:	687b      	ldr	r3, [r7, #4]
 810e642:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 810e644:	2300      	movs	r3, #0
 810e646:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 810e648:	687b      	ldr	r3, [r7, #4]
 810e64a:	2b00      	cmp	r3, #0
 810e64c:	d051      	beq.n	810e6f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 810e64e:	68bb      	ldr	r3, [r7, #8]
 810e650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e652:	4b2a      	ldr	r3, [pc, #168]	@ (810e6fc <xTaskPriorityInherit+0xc4>)
 810e654:	681b      	ldr	r3, [r3, #0]
 810e656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e658:	429a      	cmp	r2, r3
 810e65a:	d241      	bcs.n	810e6e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e65c:	68bb      	ldr	r3, [r7, #8]
 810e65e:	699b      	ldr	r3, [r3, #24]
 810e660:	2b00      	cmp	r3, #0
 810e662:	db06      	blt.n	810e672 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e664:	4b25      	ldr	r3, [pc, #148]	@ (810e6fc <xTaskPriorityInherit+0xc4>)
 810e666:	681b      	ldr	r3, [r3, #0]
 810e668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e66a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e66e:	68bb      	ldr	r3, [r7, #8]
 810e670:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 810e672:	68bb      	ldr	r3, [r7, #8]
 810e674:	6959      	ldr	r1, [r3, #20]
 810e676:	68bb      	ldr	r3, [r7, #8]
 810e678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e67a:	4613      	mov	r3, r2
 810e67c:	009b      	lsls	r3, r3, #2
 810e67e:	4413      	add	r3, r2
 810e680:	009b      	lsls	r3, r3, #2
 810e682:	4a1f      	ldr	r2, [pc, #124]	@ (810e700 <xTaskPriorityInherit+0xc8>)
 810e684:	4413      	add	r3, r2
 810e686:	4299      	cmp	r1, r3
 810e688:	d122      	bne.n	810e6d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e68a:	68bb      	ldr	r3, [r7, #8]
 810e68c:	3304      	adds	r3, #4
 810e68e:	4618      	mov	r0, r3
 810e690:	f7fd ff2a 	bl	810c4e8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e694:	4b19      	ldr	r3, [pc, #100]	@ (810e6fc <xTaskPriorityInherit+0xc4>)
 810e696:	681b      	ldr	r3, [r3, #0]
 810e698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e69a:	68bb      	ldr	r3, [r7, #8]
 810e69c:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 810e69e:	68bb      	ldr	r3, [r7, #8]
 810e6a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e6a2:	4b18      	ldr	r3, [pc, #96]	@ (810e704 <xTaskPriorityInherit+0xcc>)
 810e6a4:	681b      	ldr	r3, [r3, #0]
 810e6a6:	429a      	cmp	r2, r3
 810e6a8:	d903      	bls.n	810e6b2 <xTaskPriorityInherit+0x7a>
 810e6aa:	68bb      	ldr	r3, [r7, #8]
 810e6ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e6ae:	4a15      	ldr	r2, [pc, #84]	@ (810e704 <xTaskPriorityInherit+0xcc>)
 810e6b0:	6013      	str	r3, [r2, #0]
 810e6b2:	68bb      	ldr	r3, [r7, #8]
 810e6b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e6b6:	4613      	mov	r3, r2
 810e6b8:	009b      	lsls	r3, r3, #2
 810e6ba:	4413      	add	r3, r2
 810e6bc:	009b      	lsls	r3, r3, #2
 810e6be:	4a10      	ldr	r2, [pc, #64]	@ (810e700 <xTaskPriorityInherit+0xc8>)
 810e6c0:	441a      	add	r2, r3
 810e6c2:	68bb      	ldr	r3, [r7, #8]
 810e6c4:	3304      	adds	r3, #4
 810e6c6:	4619      	mov	r1, r3
 810e6c8:	4610      	mov	r0, r2
 810e6ca:	f7fd feb0 	bl	810c42e <vListInsertEnd>
 810e6ce:	e004      	b.n	810e6da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 810e6d0:	4b0a      	ldr	r3, [pc, #40]	@ (810e6fc <xTaskPriorityInherit+0xc4>)
 810e6d2:	681b      	ldr	r3, [r3, #0]
 810e6d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e6d6:	68bb      	ldr	r3, [r7, #8]
 810e6d8:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 810e6da:	2301      	movs	r3, #1
 810e6dc:	60fb      	str	r3, [r7, #12]
 810e6de:	e008      	b.n	810e6f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 810e6e0:	68bb      	ldr	r3, [r7, #8]
 810e6e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810e6e4:	4b05      	ldr	r3, [pc, #20]	@ (810e6fc <xTaskPriorityInherit+0xc4>)
 810e6e6:	681b      	ldr	r3, [r3, #0]
 810e6e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e6ea:	429a      	cmp	r2, r3
 810e6ec:	d201      	bcs.n	810e6f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 810e6ee:	2301      	movs	r3, #1
 810e6f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e6f2:	68fb      	ldr	r3, [r7, #12]
	}
 810e6f4:	4618      	mov	r0, r3
 810e6f6:	3710      	adds	r7, #16
 810e6f8:	46bd      	mov	sp, r7
 810e6fa:	bd80      	pop	{r7, pc}
 810e6fc:	10004aac 	.word	0x10004aac
 810e700:	10004ab0 	.word	0x10004ab0
 810e704:	10004f88 	.word	0x10004f88

0810e708 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 810e708:	b580      	push	{r7, lr}
 810e70a:	b086      	sub	sp, #24
 810e70c:	af00      	add	r7, sp, #0
 810e70e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 810e710:	687b      	ldr	r3, [r7, #4]
 810e712:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 810e714:	2300      	movs	r3, #0
 810e716:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e718:	687b      	ldr	r3, [r7, #4]
 810e71a:	2b00      	cmp	r3, #0
 810e71c:	d058      	beq.n	810e7d0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 810e71e:	4b2f      	ldr	r3, [pc, #188]	@ (810e7dc <xTaskPriorityDisinherit+0xd4>)
 810e720:	681b      	ldr	r3, [r3, #0]
 810e722:	693a      	ldr	r2, [r7, #16]
 810e724:	429a      	cmp	r2, r3
 810e726:	d00b      	beq.n	810e740 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 810e728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e72c:	f383 8811 	msr	BASEPRI, r3
 810e730:	f3bf 8f6f 	isb	sy
 810e734:	f3bf 8f4f 	dsb	sy
 810e738:	60fb      	str	r3, [r7, #12]
}
 810e73a:	bf00      	nop
 810e73c:	bf00      	nop
 810e73e:	e7fd      	b.n	810e73c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 810e740:	693b      	ldr	r3, [r7, #16]
 810e742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e744:	2b00      	cmp	r3, #0
 810e746:	d10b      	bne.n	810e760 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 810e748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e74c:	f383 8811 	msr	BASEPRI, r3
 810e750:	f3bf 8f6f 	isb	sy
 810e754:	f3bf 8f4f 	dsb	sy
 810e758:	60bb      	str	r3, [r7, #8]
}
 810e75a:	bf00      	nop
 810e75c:	bf00      	nop
 810e75e:	e7fd      	b.n	810e75c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 810e760:	693b      	ldr	r3, [r7, #16]
 810e762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e764:	1e5a      	subs	r2, r3, #1
 810e766:	693b      	ldr	r3, [r7, #16]
 810e768:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 810e76a:	693b      	ldr	r3, [r7, #16]
 810e76c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e76e:	693b      	ldr	r3, [r7, #16]
 810e770:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e772:	429a      	cmp	r2, r3
 810e774:	d02c      	beq.n	810e7d0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 810e776:	693b      	ldr	r3, [r7, #16]
 810e778:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e77a:	2b00      	cmp	r3, #0
 810e77c:	d128      	bne.n	810e7d0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e77e:	693b      	ldr	r3, [r7, #16]
 810e780:	3304      	adds	r3, #4
 810e782:	4618      	mov	r0, r3
 810e784:	f7fd feb0 	bl	810c4e8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 810e788:	693b      	ldr	r3, [r7, #16]
 810e78a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 810e78c:	693b      	ldr	r3, [r7, #16]
 810e78e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e790:	693b      	ldr	r3, [r7, #16]
 810e792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e794:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e798:	693b      	ldr	r3, [r7, #16]
 810e79a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 810e79c:	693b      	ldr	r3, [r7, #16]
 810e79e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e7a0:	4b0f      	ldr	r3, [pc, #60]	@ (810e7e0 <xTaskPriorityDisinherit+0xd8>)
 810e7a2:	681b      	ldr	r3, [r3, #0]
 810e7a4:	429a      	cmp	r2, r3
 810e7a6:	d903      	bls.n	810e7b0 <xTaskPriorityDisinherit+0xa8>
 810e7a8:	693b      	ldr	r3, [r7, #16]
 810e7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e7ac:	4a0c      	ldr	r2, [pc, #48]	@ (810e7e0 <xTaskPriorityDisinherit+0xd8>)
 810e7ae:	6013      	str	r3, [r2, #0]
 810e7b0:	693b      	ldr	r3, [r7, #16]
 810e7b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e7b4:	4613      	mov	r3, r2
 810e7b6:	009b      	lsls	r3, r3, #2
 810e7b8:	4413      	add	r3, r2
 810e7ba:	009b      	lsls	r3, r3, #2
 810e7bc:	4a09      	ldr	r2, [pc, #36]	@ (810e7e4 <xTaskPriorityDisinherit+0xdc>)
 810e7be:	441a      	add	r2, r3
 810e7c0:	693b      	ldr	r3, [r7, #16]
 810e7c2:	3304      	adds	r3, #4
 810e7c4:	4619      	mov	r1, r3
 810e7c6:	4610      	mov	r0, r2
 810e7c8:	f7fd fe31 	bl	810c42e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 810e7cc:	2301      	movs	r3, #1
 810e7ce:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 810e7d0:	697b      	ldr	r3, [r7, #20]
	}
 810e7d2:	4618      	mov	r0, r3
 810e7d4:	3718      	adds	r7, #24
 810e7d6:	46bd      	mov	sp, r7
 810e7d8:	bd80      	pop	{r7, pc}
 810e7da:	bf00      	nop
 810e7dc:	10004aac 	.word	0x10004aac
 810e7e0:	10004f88 	.word	0x10004f88
 810e7e4:	10004ab0 	.word	0x10004ab0

0810e7e8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 810e7e8:	b580      	push	{r7, lr}
 810e7ea:	b088      	sub	sp, #32
 810e7ec:	af00      	add	r7, sp, #0
 810e7ee:	6078      	str	r0, [r7, #4]
 810e7f0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 810e7f2:	687b      	ldr	r3, [r7, #4]
 810e7f4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 810e7f6:	2301      	movs	r3, #1
 810e7f8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 810e7fa:	687b      	ldr	r3, [r7, #4]
 810e7fc:	2b00      	cmp	r3, #0
 810e7fe:	d06c      	beq.n	810e8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 810e800:	69bb      	ldr	r3, [r7, #24]
 810e802:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e804:	2b00      	cmp	r3, #0
 810e806:	d10b      	bne.n	810e820 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 810e808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e80c:	f383 8811 	msr	BASEPRI, r3
 810e810:	f3bf 8f6f 	isb	sy
 810e814:	f3bf 8f4f 	dsb	sy
 810e818:	60fb      	str	r3, [r7, #12]
}
 810e81a:	bf00      	nop
 810e81c:	bf00      	nop
 810e81e:	e7fd      	b.n	810e81c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 810e820:	69bb      	ldr	r3, [r7, #24]
 810e822:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e824:	683a      	ldr	r2, [r7, #0]
 810e826:	429a      	cmp	r2, r3
 810e828:	d902      	bls.n	810e830 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 810e82a:	683b      	ldr	r3, [r7, #0]
 810e82c:	61fb      	str	r3, [r7, #28]
 810e82e:	e002      	b.n	810e836 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 810e830:	69bb      	ldr	r3, [r7, #24]
 810e832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810e834:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 810e836:	69bb      	ldr	r3, [r7, #24]
 810e838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e83a:	69fa      	ldr	r2, [r7, #28]
 810e83c:	429a      	cmp	r2, r3
 810e83e:	d04c      	beq.n	810e8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 810e840:	69bb      	ldr	r3, [r7, #24]
 810e842:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810e844:	697a      	ldr	r2, [r7, #20]
 810e846:	429a      	cmp	r2, r3
 810e848:	d147      	bne.n	810e8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 810e84a:	4b26      	ldr	r3, [pc, #152]	@ (810e8e4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 810e84c:	681b      	ldr	r3, [r3, #0]
 810e84e:	69ba      	ldr	r2, [r7, #24]
 810e850:	429a      	cmp	r2, r3
 810e852:	d10b      	bne.n	810e86c <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 810e854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810e858:	f383 8811 	msr	BASEPRI, r3
 810e85c:	f3bf 8f6f 	isb	sy
 810e860:	f3bf 8f4f 	dsb	sy
 810e864:	60bb      	str	r3, [r7, #8]
}
 810e866:	bf00      	nop
 810e868:	bf00      	nop
 810e86a:	e7fd      	b.n	810e868 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 810e86c:	69bb      	ldr	r3, [r7, #24]
 810e86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e870:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 810e872:	69bb      	ldr	r3, [r7, #24]
 810e874:	69fa      	ldr	r2, [r7, #28]
 810e876:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 810e878:	69bb      	ldr	r3, [r7, #24]
 810e87a:	699b      	ldr	r3, [r3, #24]
 810e87c:	2b00      	cmp	r3, #0
 810e87e:	db04      	blt.n	810e88a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810e880:	69fb      	ldr	r3, [r7, #28]
 810e882:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 810e886:	69bb      	ldr	r3, [r7, #24]
 810e888:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 810e88a:	69bb      	ldr	r3, [r7, #24]
 810e88c:	6959      	ldr	r1, [r3, #20]
 810e88e:	693a      	ldr	r2, [r7, #16]
 810e890:	4613      	mov	r3, r2
 810e892:	009b      	lsls	r3, r3, #2
 810e894:	4413      	add	r3, r2
 810e896:	009b      	lsls	r3, r3, #2
 810e898:	4a13      	ldr	r2, [pc, #76]	@ (810e8e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e89a:	4413      	add	r3, r2
 810e89c:	4299      	cmp	r1, r3
 810e89e:	d11c      	bne.n	810e8da <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e8a0:	69bb      	ldr	r3, [r7, #24]
 810e8a2:	3304      	adds	r3, #4
 810e8a4:	4618      	mov	r0, r3
 810e8a6:	f7fd fe1f 	bl	810c4e8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 810e8aa:	69bb      	ldr	r3, [r7, #24]
 810e8ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e8ae:	4b0f      	ldr	r3, [pc, #60]	@ (810e8ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810e8b0:	681b      	ldr	r3, [r3, #0]
 810e8b2:	429a      	cmp	r2, r3
 810e8b4:	d903      	bls.n	810e8be <vTaskPriorityDisinheritAfterTimeout+0xd6>
 810e8b6:	69bb      	ldr	r3, [r7, #24]
 810e8b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810e8ba:	4a0c      	ldr	r2, [pc, #48]	@ (810e8ec <vTaskPriorityDisinheritAfterTimeout+0x104>)
 810e8bc:	6013      	str	r3, [r2, #0]
 810e8be:	69bb      	ldr	r3, [r7, #24]
 810e8c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 810e8c2:	4613      	mov	r3, r2
 810e8c4:	009b      	lsls	r3, r3, #2
 810e8c6:	4413      	add	r3, r2
 810e8c8:	009b      	lsls	r3, r3, #2
 810e8ca:	4a07      	ldr	r2, [pc, #28]	@ (810e8e8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 810e8cc:	441a      	add	r2, r3
 810e8ce:	69bb      	ldr	r3, [r7, #24]
 810e8d0:	3304      	adds	r3, #4
 810e8d2:	4619      	mov	r1, r3
 810e8d4:	4610      	mov	r0, r2
 810e8d6:	f7fd fdaa 	bl	810c42e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 810e8da:	bf00      	nop
 810e8dc:	3720      	adds	r7, #32
 810e8de:	46bd      	mov	sp, r7
 810e8e0:	bd80      	pop	{r7, pc}
 810e8e2:	bf00      	nop
 810e8e4:	10004aac 	.word	0x10004aac
 810e8e8:	10004ab0 	.word	0x10004ab0
 810e8ec:	10004f88 	.word	0x10004f88

0810e8f0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 810e8f0:	b480      	push	{r7}
 810e8f2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 810e8f4:	4b07      	ldr	r3, [pc, #28]	@ (810e914 <pvTaskIncrementMutexHeldCount+0x24>)
 810e8f6:	681b      	ldr	r3, [r3, #0]
 810e8f8:	2b00      	cmp	r3, #0
 810e8fa:	d004      	beq.n	810e906 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 810e8fc:	4b05      	ldr	r3, [pc, #20]	@ (810e914 <pvTaskIncrementMutexHeldCount+0x24>)
 810e8fe:	681b      	ldr	r3, [r3, #0]
 810e900:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 810e902:	3201      	adds	r2, #1
 810e904:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 810e906:	4b03      	ldr	r3, [pc, #12]	@ (810e914 <pvTaskIncrementMutexHeldCount+0x24>)
 810e908:	681b      	ldr	r3, [r3, #0]
	}
 810e90a:	4618      	mov	r0, r3
 810e90c:	46bd      	mov	sp, r7
 810e90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e912:	4770      	bx	lr
 810e914:	10004aac 	.word	0x10004aac

0810e918 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 810e918:	b580      	push	{r7, lr}
 810e91a:	b084      	sub	sp, #16
 810e91c:	af00      	add	r7, sp, #0
 810e91e:	6078      	str	r0, [r7, #4]
 810e920:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 810e922:	4b21      	ldr	r3, [pc, #132]	@ (810e9a8 <prvAddCurrentTaskToDelayedList+0x90>)
 810e924:	681b      	ldr	r3, [r3, #0]
 810e926:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 810e928:	4b20      	ldr	r3, [pc, #128]	@ (810e9ac <prvAddCurrentTaskToDelayedList+0x94>)
 810e92a:	681b      	ldr	r3, [r3, #0]
 810e92c:	3304      	adds	r3, #4
 810e92e:	4618      	mov	r0, r3
 810e930:	f7fd fdda 	bl	810c4e8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 810e934:	687b      	ldr	r3, [r7, #4]
 810e936:	f1b3 3fff 	cmp.w	r3, #4294967295
 810e93a:	d10a      	bne.n	810e952 <prvAddCurrentTaskToDelayedList+0x3a>
 810e93c:	683b      	ldr	r3, [r7, #0]
 810e93e:	2b00      	cmp	r3, #0
 810e940:	d007      	beq.n	810e952 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810e942:	4b1a      	ldr	r3, [pc, #104]	@ (810e9ac <prvAddCurrentTaskToDelayedList+0x94>)
 810e944:	681b      	ldr	r3, [r3, #0]
 810e946:	3304      	adds	r3, #4
 810e948:	4619      	mov	r1, r3
 810e94a:	4819      	ldr	r0, [pc, #100]	@ (810e9b0 <prvAddCurrentTaskToDelayedList+0x98>)
 810e94c:	f7fd fd6f 	bl	810c42e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 810e950:	e026      	b.n	810e9a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 810e952:	68fa      	ldr	r2, [r7, #12]
 810e954:	687b      	ldr	r3, [r7, #4]
 810e956:	4413      	add	r3, r2
 810e958:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 810e95a:	4b14      	ldr	r3, [pc, #80]	@ (810e9ac <prvAddCurrentTaskToDelayedList+0x94>)
 810e95c:	681b      	ldr	r3, [r3, #0]
 810e95e:	68ba      	ldr	r2, [r7, #8]
 810e960:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 810e962:	68ba      	ldr	r2, [r7, #8]
 810e964:	68fb      	ldr	r3, [r7, #12]
 810e966:	429a      	cmp	r2, r3
 810e968:	d209      	bcs.n	810e97e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810e96a:	4b12      	ldr	r3, [pc, #72]	@ (810e9b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 810e96c:	681a      	ldr	r2, [r3, #0]
 810e96e:	4b0f      	ldr	r3, [pc, #60]	@ (810e9ac <prvAddCurrentTaskToDelayedList+0x94>)
 810e970:	681b      	ldr	r3, [r3, #0]
 810e972:	3304      	adds	r3, #4
 810e974:	4619      	mov	r1, r3
 810e976:	4610      	mov	r0, r2
 810e978:	f7fd fd7d 	bl	810c476 <vListInsert>
}
 810e97c:	e010      	b.n	810e9a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 810e97e:	4b0e      	ldr	r3, [pc, #56]	@ (810e9b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 810e980:	681a      	ldr	r2, [r3, #0]
 810e982:	4b0a      	ldr	r3, [pc, #40]	@ (810e9ac <prvAddCurrentTaskToDelayedList+0x94>)
 810e984:	681b      	ldr	r3, [r3, #0]
 810e986:	3304      	adds	r3, #4
 810e988:	4619      	mov	r1, r3
 810e98a:	4610      	mov	r0, r2
 810e98c:	f7fd fd73 	bl	810c476 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 810e990:	4b0a      	ldr	r3, [pc, #40]	@ (810e9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 810e992:	681b      	ldr	r3, [r3, #0]
 810e994:	68ba      	ldr	r2, [r7, #8]
 810e996:	429a      	cmp	r2, r3
 810e998:	d202      	bcs.n	810e9a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 810e99a:	4a08      	ldr	r2, [pc, #32]	@ (810e9bc <prvAddCurrentTaskToDelayedList+0xa4>)
 810e99c:	68bb      	ldr	r3, [r7, #8]
 810e99e:	6013      	str	r3, [r2, #0]
}
 810e9a0:	bf00      	nop
 810e9a2:	3710      	adds	r7, #16
 810e9a4:	46bd      	mov	sp, r7
 810e9a6:	bd80      	pop	{r7, pc}
 810e9a8:	10004f84 	.word	0x10004f84
 810e9ac:	10004aac 	.word	0x10004aac
 810e9b0:	10004f6c 	.word	0x10004f6c
 810e9b4:	10004f3c 	.word	0x10004f3c
 810e9b8:	10004f38 	.word	0x10004f38
 810e9bc:	10004fa0 	.word	0x10004fa0

0810e9c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 810e9c0:	b580      	push	{r7, lr}
 810e9c2:	b08a      	sub	sp, #40	@ 0x28
 810e9c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 810e9c6:	2300      	movs	r3, #0
 810e9c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 810e9ca:	f000 fb13 	bl	810eff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 810e9ce:	4b1d      	ldr	r3, [pc, #116]	@ (810ea44 <xTimerCreateTimerTask+0x84>)
 810e9d0:	681b      	ldr	r3, [r3, #0]
 810e9d2:	2b00      	cmp	r3, #0
 810e9d4:	d021      	beq.n	810ea1a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 810e9d6:	2300      	movs	r3, #0
 810e9d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 810e9da:	2300      	movs	r3, #0
 810e9dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 810e9de:	1d3a      	adds	r2, r7, #4
 810e9e0:	f107 0108 	add.w	r1, r7, #8
 810e9e4:	f107 030c 	add.w	r3, r7, #12
 810e9e8:	4618      	mov	r0, r3
 810e9ea:	f7fd faeb 	bl	810bfc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 810e9ee:	6879      	ldr	r1, [r7, #4]
 810e9f0:	68bb      	ldr	r3, [r7, #8]
 810e9f2:	68fa      	ldr	r2, [r7, #12]
 810e9f4:	9202      	str	r2, [sp, #8]
 810e9f6:	9301      	str	r3, [sp, #4]
 810e9f8:	2302      	movs	r3, #2
 810e9fa:	9300      	str	r3, [sp, #0]
 810e9fc:	2300      	movs	r3, #0
 810e9fe:	460a      	mov	r2, r1
 810ea00:	4911      	ldr	r1, [pc, #68]	@ (810ea48 <xTimerCreateTimerTask+0x88>)
 810ea02:	4812      	ldr	r0, [pc, #72]	@ (810ea4c <xTimerCreateTimerTask+0x8c>)
 810ea04:	f7fe ff00 	bl	810d808 <xTaskCreateStatic>
 810ea08:	4603      	mov	r3, r0
 810ea0a:	4a11      	ldr	r2, [pc, #68]	@ (810ea50 <xTimerCreateTimerTask+0x90>)
 810ea0c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 810ea0e:	4b10      	ldr	r3, [pc, #64]	@ (810ea50 <xTimerCreateTimerTask+0x90>)
 810ea10:	681b      	ldr	r3, [r3, #0]
 810ea12:	2b00      	cmp	r3, #0
 810ea14:	d001      	beq.n	810ea1a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 810ea16:	2301      	movs	r3, #1
 810ea18:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 810ea1a:	697b      	ldr	r3, [r7, #20]
 810ea1c:	2b00      	cmp	r3, #0
 810ea1e:	d10b      	bne.n	810ea38 <xTimerCreateTimerTask+0x78>
	__asm volatile
 810ea20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea24:	f383 8811 	msr	BASEPRI, r3
 810ea28:	f3bf 8f6f 	isb	sy
 810ea2c:	f3bf 8f4f 	dsb	sy
 810ea30:	613b      	str	r3, [r7, #16]
}
 810ea32:	bf00      	nop
 810ea34:	bf00      	nop
 810ea36:	e7fd      	b.n	810ea34 <xTimerCreateTimerTask+0x74>
	return xReturn;
 810ea38:	697b      	ldr	r3, [r7, #20]
}
 810ea3a:	4618      	mov	r0, r3
 810ea3c:	3718      	adds	r7, #24
 810ea3e:	46bd      	mov	sp, r7
 810ea40:	bd80      	pop	{r7, pc}
 810ea42:	bf00      	nop
 810ea44:	10004fdc 	.word	0x10004fdc
 810ea48:	0810fd98 	.word	0x0810fd98
 810ea4c:	0810eb8d 	.word	0x0810eb8d
 810ea50:	10004fe0 	.word	0x10004fe0

0810ea54 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 810ea54:	b580      	push	{r7, lr}
 810ea56:	b08a      	sub	sp, #40	@ 0x28
 810ea58:	af00      	add	r7, sp, #0
 810ea5a:	60f8      	str	r0, [r7, #12]
 810ea5c:	60b9      	str	r1, [r7, #8]
 810ea5e:	607a      	str	r2, [r7, #4]
 810ea60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 810ea62:	2300      	movs	r3, #0
 810ea64:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 810ea66:	68fb      	ldr	r3, [r7, #12]
 810ea68:	2b00      	cmp	r3, #0
 810ea6a:	d10b      	bne.n	810ea84 <xTimerGenericCommand+0x30>
	__asm volatile
 810ea6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ea70:	f383 8811 	msr	BASEPRI, r3
 810ea74:	f3bf 8f6f 	isb	sy
 810ea78:	f3bf 8f4f 	dsb	sy
 810ea7c:	623b      	str	r3, [r7, #32]
}
 810ea7e:	bf00      	nop
 810ea80:	bf00      	nop
 810ea82:	e7fd      	b.n	810ea80 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 810ea84:	4b19      	ldr	r3, [pc, #100]	@ (810eaec <xTimerGenericCommand+0x98>)
 810ea86:	681b      	ldr	r3, [r3, #0]
 810ea88:	2b00      	cmp	r3, #0
 810ea8a:	d02a      	beq.n	810eae2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 810ea8c:	68bb      	ldr	r3, [r7, #8]
 810ea8e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 810ea90:	687b      	ldr	r3, [r7, #4]
 810ea92:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 810ea94:	68fb      	ldr	r3, [r7, #12]
 810ea96:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 810ea98:	68bb      	ldr	r3, [r7, #8]
 810ea9a:	2b05      	cmp	r3, #5
 810ea9c:	dc18      	bgt.n	810ead0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 810ea9e:	f7ff fdad 	bl	810e5fc <xTaskGetSchedulerState>
 810eaa2:	4603      	mov	r3, r0
 810eaa4:	2b02      	cmp	r3, #2
 810eaa6:	d109      	bne.n	810eabc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 810eaa8:	4b10      	ldr	r3, [pc, #64]	@ (810eaec <xTimerGenericCommand+0x98>)
 810eaaa:	6818      	ldr	r0, [r3, #0]
 810eaac:	f107 0110 	add.w	r1, r7, #16
 810eab0:	2300      	movs	r3, #0
 810eab2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810eab4:	f7fe f990 	bl	810cdd8 <xQueueGenericSend>
 810eab8:	6278      	str	r0, [r7, #36]	@ 0x24
 810eaba:	e012      	b.n	810eae2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 810eabc:	4b0b      	ldr	r3, [pc, #44]	@ (810eaec <xTimerGenericCommand+0x98>)
 810eabe:	6818      	ldr	r0, [r3, #0]
 810eac0:	f107 0110 	add.w	r1, r7, #16
 810eac4:	2300      	movs	r3, #0
 810eac6:	2200      	movs	r2, #0
 810eac8:	f7fe f986 	bl	810cdd8 <xQueueGenericSend>
 810eacc:	6278      	str	r0, [r7, #36]	@ 0x24
 810eace:	e008      	b.n	810eae2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 810ead0:	4b06      	ldr	r3, [pc, #24]	@ (810eaec <xTimerGenericCommand+0x98>)
 810ead2:	6818      	ldr	r0, [r3, #0]
 810ead4:	f107 0110 	add.w	r1, r7, #16
 810ead8:	2300      	movs	r3, #0
 810eada:	683a      	ldr	r2, [r7, #0]
 810eadc:	f7fe fa7e 	bl	810cfdc <xQueueGenericSendFromISR>
 810eae0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 810eae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810eae4:	4618      	mov	r0, r3
 810eae6:	3728      	adds	r7, #40	@ 0x28
 810eae8:	46bd      	mov	sp, r7
 810eaea:	bd80      	pop	{r7, pc}
 810eaec:	10004fdc 	.word	0x10004fdc

0810eaf0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 810eaf0:	b580      	push	{r7, lr}
 810eaf2:	b088      	sub	sp, #32
 810eaf4:	af02      	add	r7, sp, #8
 810eaf6:	6078      	str	r0, [r7, #4]
 810eaf8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810eafa:	4b23      	ldr	r3, [pc, #140]	@ (810eb88 <prvProcessExpiredTimer+0x98>)
 810eafc:	681b      	ldr	r3, [r3, #0]
 810eafe:	68db      	ldr	r3, [r3, #12]
 810eb00:	68db      	ldr	r3, [r3, #12]
 810eb02:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810eb04:	697b      	ldr	r3, [r7, #20]
 810eb06:	3304      	adds	r3, #4
 810eb08:	4618      	mov	r0, r3
 810eb0a:	f7fd fced 	bl	810c4e8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810eb0e:	697b      	ldr	r3, [r7, #20]
 810eb10:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810eb14:	f003 0304 	and.w	r3, r3, #4
 810eb18:	2b00      	cmp	r3, #0
 810eb1a:	d023      	beq.n	810eb64 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 810eb1c:	697b      	ldr	r3, [r7, #20]
 810eb1e:	699a      	ldr	r2, [r3, #24]
 810eb20:	687b      	ldr	r3, [r7, #4]
 810eb22:	18d1      	adds	r1, r2, r3
 810eb24:	687b      	ldr	r3, [r7, #4]
 810eb26:	683a      	ldr	r2, [r7, #0]
 810eb28:	6978      	ldr	r0, [r7, #20]
 810eb2a:	f000 f8d5 	bl	810ecd8 <prvInsertTimerInActiveList>
 810eb2e:	4603      	mov	r3, r0
 810eb30:	2b00      	cmp	r3, #0
 810eb32:	d020      	beq.n	810eb76 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810eb34:	2300      	movs	r3, #0
 810eb36:	9300      	str	r3, [sp, #0]
 810eb38:	2300      	movs	r3, #0
 810eb3a:	687a      	ldr	r2, [r7, #4]
 810eb3c:	2100      	movs	r1, #0
 810eb3e:	6978      	ldr	r0, [r7, #20]
 810eb40:	f7ff ff88 	bl	810ea54 <xTimerGenericCommand>
 810eb44:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 810eb46:	693b      	ldr	r3, [r7, #16]
 810eb48:	2b00      	cmp	r3, #0
 810eb4a:	d114      	bne.n	810eb76 <prvProcessExpiredTimer+0x86>
	__asm volatile
 810eb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eb50:	f383 8811 	msr	BASEPRI, r3
 810eb54:	f3bf 8f6f 	isb	sy
 810eb58:	f3bf 8f4f 	dsb	sy
 810eb5c:	60fb      	str	r3, [r7, #12]
}
 810eb5e:	bf00      	nop
 810eb60:	bf00      	nop
 810eb62:	e7fd      	b.n	810eb60 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810eb64:	697b      	ldr	r3, [r7, #20]
 810eb66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810eb6a:	f023 0301 	bic.w	r3, r3, #1
 810eb6e:	b2da      	uxtb	r2, r3
 810eb70:	697b      	ldr	r3, [r7, #20]
 810eb72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810eb76:	697b      	ldr	r3, [r7, #20]
 810eb78:	6a1b      	ldr	r3, [r3, #32]
 810eb7a:	6978      	ldr	r0, [r7, #20]
 810eb7c:	4798      	blx	r3
}
 810eb7e:	bf00      	nop
 810eb80:	3718      	adds	r7, #24
 810eb82:	46bd      	mov	sp, r7
 810eb84:	bd80      	pop	{r7, pc}
 810eb86:	bf00      	nop
 810eb88:	10004fd4 	.word	0x10004fd4

0810eb8c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 810eb8c:	b580      	push	{r7, lr}
 810eb8e:	b084      	sub	sp, #16
 810eb90:	af00      	add	r7, sp, #0
 810eb92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810eb94:	f107 0308 	add.w	r3, r7, #8
 810eb98:	4618      	mov	r0, r3
 810eb9a:	f000 f859 	bl	810ec50 <prvGetNextExpireTime>
 810eb9e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 810eba0:	68bb      	ldr	r3, [r7, #8]
 810eba2:	4619      	mov	r1, r3
 810eba4:	68f8      	ldr	r0, [r7, #12]
 810eba6:	f000 f805 	bl	810ebb4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 810ebaa:	f000 f8d7 	bl	810ed5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 810ebae:	bf00      	nop
 810ebb0:	e7f0      	b.n	810eb94 <prvTimerTask+0x8>
	...

0810ebb4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 810ebb4:	b580      	push	{r7, lr}
 810ebb6:	b084      	sub	sp, #16
 810ebb8:	af00      	add	r7, sp, #0
 810ebba:	6078      	str	r0, [r7, #4]
 810ebbc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 810ebbe:	f7ff f907 	bl	810ddd0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810ebc2:	f107 0308 	add.w	r3, r7, #8
 810ebc6:	4618      	mov	r0, r3
 810ebc8:	f000 f866 	bl	810ec98 <prvSampleTimeNow>
 810ebcc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 810ebce:	68bb      	ldr	r3, [r7, #8]
 810ebd0:	2b00      	cmp	r3, #0
 810ebd2:	d130      	bne.n	810ec36 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 810ebd4:	683b      	ldr	r3, [r7, #0]
 810ebd6:	2b00      	cmp	r3, #0
 810ebd8:	d10a      	bne.n	810ebf0 <prvProcessTimerOrBlockTask+0x3c>
 810ebda:	687a      	ldr	r2, [r7, #4]
 810ebdc:	68fb      	ldr	r3, [r7, #12]
 810ebde:	429a      	cmp	r2, r3
 810ebe0:	d806      	bhi.n	810ebf0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 810ebe2:	f7ff f903 	bl	810ddec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 810ebe6:	68f9      	ldr	r1, [r7, #12]
 810ebe8:	6878      	ldr	r0, [r7, #4]
 810ebea:	f7ff ff81 	bl	810eaf0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 810ebee:	e024      	b.n	810ec3a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 810ebf0:	683b      	ldr	r3, [r7, #0]
 810ebf2:	2b00      	cmp	r3, #0
 810ebf4:	d008      	beq.n	810ec08 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 810ebf6:	4b13      	ldr	r3, [pc, #76]	@ (810ec44 <prvProcessTimerOrBlockTask+0x90>)
 810ebf8:	681b      	ldr	r3, [r3, #0]
 810ebfa:	681b      	ldr	r3, [r3, #0]
 810ebfc:	2b00      	cmp	r3, #0
 810ebfe:	d101      	bne.n	810ec04 <prvProcessTimerOrBlockTask+0x50>
 810ec00:	2301      	movs	r3, #1
 810ec02:	e000      	b.n	810ec06 <prvProcessTimerOrBlockTask+0x52>
 810ec04:	2300      	movs	r3, #0
 810ec06:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 810ec08:	4b0f      	ldr	r3, [pc, #60]	@ (810ec48 <prvProcessTimerOrBlockTask+0x94>)
 810ec0a:	6818      	ldr	r0, [r3, #0]
 810ec0c:	687a      	ldr	r2, [r7, #4]
 810ec0e:	68fb      	ldr	r3, [r7, #12]
 810ec10:	1ad3      	subs	r3, r2, r3
 810ec12:	683a      	ldr	r2, [r7, #0]
 810ec14:	4619      	mov	r1, r3
 810ec16:	f7fe fdc3 	bl	810d7a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 810ec1a:	f7ff f8e7 	bl	810ddec <xTaskResumeAll>
 810ec1e:	4603      	mov	r3, r0
 810ec20:	2b00      	cmp	r3, #0
 810ec22:	d10a      	bne.n	810ec3a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 810ec24:	4b09      	ldr	r3, [pc, #36]	@ (810ec4c <prvProcessTimerOrBlockTask+0x98>)
 810ec26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 810ec2a:	601a      	str	r2, [r3, #0]
 810ec2c:	f3bf 8f4f 	dsb	sy
 810ec30:	f3bf 8f6f 	isb	sy
}
 810ec34:	e001      	b.n	810ec3a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 810ec36:	f7ff f8d9 	bl	810ddec <xTaskResumeAll>
}
 810ec3a:	bf00      	nop
 810ec3c:	3710      	adds	r7, #16
 810ec3e:	46bd      	mov	sp, r7
 810ec40:	bd80      	pop	{r7, pc}
 810ec42:	bf00      	nop
 810ec44:	10004fd8 	.word	0x10004fd8
 810ec48:	10004fdc 	.word	0x10004fdc
 810ec4c:	e000ed04 	.word	0xe000ed04

0810ec50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 810ec50:	b480      	push	{r7}
 810ec52:	b085      	sub	sp, #20
 810ec54:	af00      	add	r7, sp, #0
 810ec56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 810ec58:	4b0e      	ldr	r3, [pc, #56]	@ (810ec94 <prvGetNextExpireTime+0x44>)
 810ec5a:	681b      	ldr	r3, [r3, #0]
 810ec5c:	681b      	ldr	r3, [r3, #0]
 810ec5e:	2b00      	cmp	r3, #0
 810ec60:	d101      	bne.n	810ec66 <prvGetNextExpireTime+0x16>
 810ec62:	2201      	movs	r2, #1
 810ec64:	e000      	b.n	810ec68 <prvGetNextExpireTime+0x18>
 810ec66:	2200      	movs	r2, #0
 810ec68:	687b      	ldr	r3, [r7, #4]
 810ec6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 810ec6c:	687b      	ldr	r3, [r7, #4]
 810ec6e:	681b      	ldr	r3, [r3, #0]
 810ec70:	2b00      	cmp	r3, #0
 810ec72:	d105      	bne.n	810ec80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810ec74:	4b07      	ldr	r3, [pc, #28]	@ (810ec94 <prvGetNextExpireTime+0x44>)
 810ec76:	681b      	ldr	r3, [r3, #0]
 810ec78:	68db      	ldr	r3, [r3, #12]
 810ec7a:	681b      	ldr	r3, [r3, #0]
 810ec7c:	60fb      	str	r3, [r7, #12]
 810ec7e:	e001      	b.n	810ec84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 810ec80:	2300      	movs	r3, #0
 810ec82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 810ec84:	68fb      	ldr	r3, [r7, #12]
}
 810ec86:	4618      	mov	r0, r3
 810ec88:	3714      	adds	r7, #20
 810ec8a:	46bd      	mov	sp, r7
 810ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ec90:	4770      	bx	lr
 810ec92:	bf00      	nop
 810ec94:	10004fd4 	.word	0x10004fd4

0810ec98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 810ec98:	b580      	push	{r7, lr}
 810ec9a:	b084      	sub	sp, #16
 810ec9c:	af00      	add	r7, sp, #0
 810ec9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 810eca0:	f7ff f942 	bl	810df28 <xTaskGetTickCount>
 810eca4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 810eca6:	4b0b      	ldr	r3, [pc, #44]	@ (810ecd4 <prvSampleTimeNow+0x3c>)
 810eca8:	681b      	ldr	r3, [r3, #0]
 810ecaa:	68fa      	ldr	r2, [r7, #12]
 810ecac:	429a      	cmp	r2, r3
 810ecae:	d205      	bcs.n	810ecbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 810ecb0:	f000 f93a 	bl	810ef28 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 810ecb4:	687b      	ldr	r3, [r7, #4]
 810ecb6:	2201      	movs	r2, #1
 810ecb8:	601a      	str	r2, [r3, #0]
 810ecba:	e002      	b.n	810ecc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 810ecbc:	687b      	ldr	r3, [r7, #4]
 810ecbe:	2200      	movs	r2, #0
 810ecc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 810ecc2:	4a04      	ldr	r2, [pc, #16]	@ (810ecd4 <prvSampleTimeNow+0x3c>)
 810ecc4:	68fb      	ldr	r3, [r7, #12]
 810ecc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 810ecc8:	68fb      	ldr	r3, [r7, #12]
}
 810ecca:	4618      	mov	r0, r3
 810eccc:	3710      	adds	r7, #16
 810ecce:	46bd      	mov	sp, r7
 810ecd0:	bd80      	pop	{r7, pc}
 810ecd2:	bf00      	nop
 810ecd4:	10004fe4 	.word	0x10004fe4

0810ecd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 810ecd8:	b580      	push	{r7, lr}
 810ecda:	b086      	sub	sp, #24
 810ecdc:	af00      	add	r7, sp, #0
 810ecde:	60f8      	str	r0, [r7, #12]
 810ece0:	60b9      	str	r1, [r7, #8]
 810ece2:	607a      	str	r2, [r7, #4]
 810ece4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 810ece6:	2300      	movs	r3, #0
 810ece8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 810ecea:	68fb      	ldr	r3, [r7, #12]
 810ecec:	68ba      	ldr	r2, [r7, #8]
 810ecee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810ecf0:	68fb      	ldr	r3, [r7, #12]
 810ecf2:	68fa      	ldr	r2, [r7, #12]
 810ecf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 810ecf6:	68ba      	ldr	r2, [r7, #8]
 810ecf8:	687b      	ldr	r3, [r7, #4]
 810ecfa:	429a      	cmp	r2, r3
 810ecfc:	d812      	bhi.n	810ed24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 810ecfe:	687a      	ldr	r2, [r7, #4]
 810ed00:	683b      	ldr	r3, [r7, #0]
 810ed02:	1ad2      	subs	r2, r2, r3
 810ed04:	68fb      	ldr	r3, [r7, #12]
 810ed06:	699b      	ldr	r3, [r3, #24]
 810ed08:	429a      	cmp	r2, r3
 810ed0a:	d302      	bcc.n	810ed12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 810ed0c:	2301      	movs	r3, #1
 810ed0e:	617b      	str	r3, [r7, #20]
 810ed10:	e01b      	b.n	810ed4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 810ed12:	4b10      	ldr	r3, [pc, #64]	@ (810ed54 <prvInsertTimerInActiveList+0x7c>)
 810ed14:	681a      	ldr	r2, [r3, #0]
 810ed16:	68fb      	ldr	r3, [r7, #12]
 810ed18:	3304      	adds	r3, #4
 810ed1a:	4619      	mov	r1, r3
 810ed1c:	4610      	mov	r0, r2
 810ed1e:	f7fd fbaa 	bl	810c476 <vListInsert>
 810ed22:	e012      	b.n	810ed4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 810ed24:	687a      	ldr	r2, [r7, #4]
 810ed26:	683b      	ldr	r3, [r7, #0]
 810ed28:	429a      	cmp	r2, r3
 810ed2a:	d206      	bcs.n	810ed3a <prvInsertTimerInActiveList+0x62>
 810ed2c:	68ba      	ldr	r2, [r7, #8]
 810ed2e:	683b      	ldr	r3, [r7, #0]
 810ed30:	429a      	cmp	r2, r3
 810ed32:	d302      	bcc.n	810ed3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 810ed34:	2301      	movs	r3, #1
 810ed36:	617b      	str	r3, [r7, #20]
 810ed38:	e007      	b.n	810ed4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810ed3a:	4b07      	ldr	r3, [pc, #28]	@ (810ed58 <prvInsertTimerInActiveList+0x80>)
 810ed3c:	681a      	ldr	r2, [r3, #0]
 810ed3e:	68fb      	ldr	r3, [r7, #12]
 810ed40:	3304      	adds	r3, #4
 810ed42:	4619      	mov	r1, r3
 810ed44:	4610      	mov	r0, r2
 810ed46:	f7fd fb96 	bl	810c476 <vListInsert>
		}
	}

	return xProcessTimerNow;
 810ed4a:	697b      	ldr	r3, [r7, #20]
}
 810ed4c:	4618      	mov	r0, r3
 810ed4e:	3718      	adds	r7, #24
 810ed50:	46bd      	mov	sp, r7
 810ed52:	bd80      	pop	{r7, pc}
 810ed54:	10004fd8 	.word	0x10004fd8
 810ed58:	10004fd4 	.word	0x10004fd4

0810ed5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 810ed5c:	b580      	push	{r7, lr}
 810ed5e:	b08e      	sub	sp, #56	@ 0x38
 810ed60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810ed62:	e0ce      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 810ed64:	687b      	ldr	r3, [r7, #4]
 810ed66:	2b00      	cmp	r3, #0
 810ed68:	da19      	bge.n	810ed9e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 810ed6a:	1d3b      	adds	r3, r7, #4
 810ed6c:	3304      	adds	r3, #4
 810ed6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 810ed70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed72:	2b00      	cmp	r3, #0
 810ed74:	d10b      	bne.n	810ed8e <prvProcessReceivedCommands+0x32>
	__asm volatile
 810ed76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ed7a:	f383 8811 	msr	BASEPRI, r3
 810ed7e:	f3bf 8f6f 	isb	sy
 810ed82:	f3bf 8f4f 	dsb	sy
 810ed86:	61fb      	str	r3, [r7, #28]
}
 810ed88:	bf00      	nop
 810ed8a:	bf00      	nop
 810ed8c:	e7fd      	b.n	810ed8a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 810ed8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 810ed90:	681b      	ldr	r3, [r3, #0]
 810ed92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ed94:	6850      	ldr	r0, [r2, #4]
 810ed96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 810ed98:	6892      	ldr	r2, [r2, #8]
 810ed9a:	4611      	mov	r1, r2
 810ed9c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 810ed9e:	687b      	ldr	r3, [r7, #4]
 810eda0:	2b00      	cmp	r3, #0
 810eda2:	f2c0 80ae 	blt.w	810ef02 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 810eda6:	68fb      	ldr	r3, [r7, #12]
 810eda8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 810edaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810edac:	695b      	ldr	r3, [r3, #20]
 810edae:	2b00      	cmp	r3, #0
 810edb0:	d004      	beq.n	810edbc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810edb4:	3304      	adds	r3, #4
 810edb6:	4618      	mov	r0, r3
 810edb8:	f7fd fb96 	bl	810c4e8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 810edbc:	463b      	mov	r3, r7
 810edbe:	4618      	mov	r0, r3
 810edc0:	f7ff ff6a 	bl	810ec98 <prvSampleTimeNow>
 810edc4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 810edc6:	687b      	ldr	r3, [r7, #4]
 810edc8:	2b09      	cmp	r3, #9
 810edca:	f200 8097 	bhi.w	810eefc <prvProcessReceivedCommands+0x1a0>
 810edce:	a201      	add	r2, pc, #4	@ (adr r2, 810edd4 <prvProcessReceivedCommands+0x78>)
 810edd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810edd4:	0810edfd 	.word	0x0810edfd
 810edd8:	0810edfd 	.word	0x0810edfd
 810eddc:	0810edfd 	.word	0x0810edfd
 810ede0:	0810ee73 	.word	0x0810ee73
 810ede4:	0810ee87 	.word	0x0810ee87
 810ede8:	0810eed3 	.word	0x0810eed3
 810edec:	0810edfd 	.word	0x0810edfd
 810edf0:	0810edfd 	.word	0x0810edfd
 810edf4:	0810ee73 	.word	0x0810ee73
 810edf8:	0810ee87 	.word	0x0810ee87
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810edfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810edfe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ee02:	f043 0301 	orr.w	r3, r3, #1
 810ee06:	b2da      	uxtb	r2, r3
 810ee08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee0a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 810ee0e:	68ba      	ldr	r2, [r7, #8]
 810ee10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee12:	699b      	ldr	r3, [r3, #24]
 810ee14:	18d1      	adds	r1, r2, r3
 810ee16:	68bb      	ldr	r3, [r7, #8]
 810ee18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810ee1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ee1c:	f7ff ff5c 	bl	810ecd8 <prvInsertTimerInActiveList>
 810ee20:	4603      	mov	r3, r0
 810ee22:	2b00      	cmp	r3, #0
 810ee24:	d06c      	beq.n	810ef00 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ee26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee28:	6a1b      	ldr	r3, [r3, #32]
 810ee2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ee2c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ee2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ee34:	f003 0304 	and.w	r3, r3, #4
 810ee38:	2b00      	cmp	r3, #0
 810ee3a:	d061      	beq.n	810ef00 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 810ee3c:	68ba      	ldr	r2, [r7, #8]
 810ee3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee40:	699b      	ldr	r3, [r3, #24]
 810ee42:	441a      	add	r2, r3
 810ee44:	2300      	movs	r3, #0
 810ee46:	9300      	str	r3, [sp, #0]
 810ee48:	2300      	movs	r3, #0
 810ee4a:	2100      	movs	r1, #0
 810ee4c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810ee4e:	f7ff fe01 	bl	810ea54 <xTimerGenericCommand>
 810ee52:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 810ee54:	6a3b      	ldr	r3, [r7, #32]
 810ee56:	2b00      	cmp	r3, #0
 810ee58:	d152      	bne.n	810ef00 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 810ee5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810ee5e:	f383 8811 	msr	BASEPRI, r3
 810ee62:	f3bf 8f6f 	isb	sy
 810ee66:	f3bf 8f4f 	dsb	sy
 810ee6a:	61bb      	str	r3, [r7, #24]
}
 810ee6c:	bf00      	nop
 810ee6e:	bf00      	nop
 810ee70:	e7fd      	b.n	810ee6e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810ee72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ee78:	f023 0301 	bic.w	r3, r3, #1
 810ee7c:	b2da      	uxtb	r2, r3
 810ee7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee80:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810ee84:	e03d      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 810ee86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ee8c:	f043 0301 	orr.w	r3, r3, #1
 810ee90:	b2da      	uxtb	r2, r3
 810ee92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee94:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 810ee98:	68ba      	ldr	r2, [r7, #8]
 810ee9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810ee9c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 810ee9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eea0:	699b      	ldr	r3, [r3, #24]
 810eea2:	2b00      	cmp	r3, #0
 810eea4:	d10b      	bne.n	810eebe <prvProcessReceivedCommands+0x162>
	__asm volatile
 810eea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810eeaa:	f383 8811 	msr	BASEPRI, r3
 810eeae:	f3bf 8f6f 	isb	sy
 810eeb2:	f3bf 8f4f 	dsb	sy
 810eeb6:	617b      	str	r3, [r7, #20]
}
 810eeb8:	bf00      	nop
 810eeba:	bf00      	nop
 810eebc:	e7fd      	b.n	810eeba <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 810eebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eec0:	699a      	ldr	r2, [r3, #24]
 810eec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eec4:	18d1      	adds	r1, r2, r3
 810eec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810eec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810eeca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810eecc:	f7ff ff04 	bl	810ecd8 <prvInsertTimerInActiveList>
					break;
 810eed0:	e017      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 810eed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eed4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810eed8:	f003 0302 	and.w	r3, r3, #2
 810eedc:	2b00      	cmp	r3, #0
 810eede:	d103      	bne.n	810eee8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 810eee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 810eee2:	f7fd f957 	bl	810c194 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 810eee6:	e00c      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 810eee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eeea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810eeee:	f023 0301 	bic.w	r3, r3, #1
 810eef2:	b2da      	uxtb	r2, r3
 810eef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810eef6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 810eefa:	e002      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 810eefc:	bf00      	nop
 810eefe:	e000      	b.n	810ef02 <prvProcessReceivedCommands+0x1a6>
					break;
 810ef00:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 810ef02:	4b08      	ldr	r3, [pc, #32]	@ (810ef24 <prvProcessReceivedCommands+0x1c8>)
 810ef04:	681b      	ldr	r3, [r3, #0]
 810ef06:	1d39      	adds	r1, r7, #4
 810ef08:	2200      	movs	r2, #0
 810ef0a:	4618      	mov	r0, r3
 810ef0c:	f7fe f904 	bl	810d118 <xQueueReceive>
 810ef10:	4603      	mov	r3, r0
 810ef12:	2b00      	cmp	r3, #0
 810ef14:	f47f af26 	bne.w	810ed64 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 810ef18:	bf00      	nop
 810ef1a:	bf00      	nop
 810ef1c:	3730      	adds	r7, #48	@ 0x30
 810ef1e:	46bd      	mov	sp, r7
 810ef20:	bd80      	pop	{r7, pc}
 810ef22:	bf00      	nop
 810ef24:	10004fdc 	.word	0x10004fdc

0810ef28 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 810ef28:	b580      	push	{r7, lr}
 810ef2a:	b088      	sub	sp, #32
 810ef2c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810ef2e:	e049      	b.n	810efc4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 810ef30:	4b2e      	ldr	r3, [pc, #184]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810ef32:	681b      	ldr	r3, [r3, #0]
 810ef34:	68db      	ldr	r3, [r3, #12]
 810ef36:	681b      	ldr	r3, [r3, #0]
 810ef38:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 810ef3a:	4b2c      	ldr	r3, [pc, #176]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810ef3c:	681b      	ldr	r3, [r3, #0]
 810ef3e:	68db      	ldr	r3, [r3, #12]
 810ef40:	68db      	ldr	r3, [r3, #12]
 810ef42:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 810ef44:	68fb      	ldr	r3, [r7, #12]
 810ef46:	3304      	adds	r3, #4
 810ef48:	4618      	mov	r0, r3
 810ef4a:	f7fd facd 	bl	810c4e8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 810ef4e:	68fb      	ldr	r3, [r7, #12]
 810ef50:	6a1b      	ldr	r3, [r3, #32]
 810ef52:	68f8      	ldr	r0, [r7, #12]
 810ef54:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 810ef56:	68fb      	ldr	r3, [r7, #12]
 810ef58:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 810ef5c:	f003 0304 	and.w	r3, r3, #4
 810ef60:	2b00      	cmp	r3, #0
 810ef62:	d02f      	beq.n	810efc4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 810ef64:	68fb      	ldr	r3, [r7, #12]
 810ef66:	699b      	ldr	r3, [r3, #24]
 810ef68:	693a      	ldr	r2, [r7, #16]
 810ef6a:	4413      	add	r3, r2
 810ef6c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 810ef6e:	68ba      	ldr	r2, [r7, #8]
 810ef70:	693b      	ldr	r3, [r7, #16]
 810ef72:	429a      	cmp	r2, r3
 810ef74:	d90e      	bls.n	810ef94 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 810ef76:	68fb      	ldr	r3, [r7, #12]
 810ef78:	68ba      	ldr	r2, [r7, #8]
 810ef7a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 810ef7c:	68fb      	ldr	r3, [r7, #12]
 810ef7e:	68fa      	ldr	r2, [r7, #12]
 810ef80:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 810ef82:	4b1a      	ldr	r3, [pc, #104]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810ef84:	681a      	ldr	r2, [r3, #0]
 810ef86:	68fb      	ldr	r3, [r7, #12]
 810ef88:	3304      	adds	r3, #4
 810ef8a:	4619      	mov	r1, r3
 810ef8c:	4610      	mov	r0, r2
 810ef8e:	f7fd fa72 	bl	810c476 <vListInsert>
 810ef92:	e017      	b.n	810efc4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 810ef94:	2300      	movs	r3, #0
 810ef96:	9300      	str	r3, [sp, #0]
 810ef98:	2300      	movs	r3, #0
 810ef9a:	693a      	ldr	r2, [r7, #16]
 810ef9c:	2100      	movs	r1, #0
 810ef9e:	68f8      	ldr	r0, [r7, #12]
 810efa0:	f7ff fd58 	bl	810ea54 <xTimerGenericCommand>
 810efa4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 810efa6:	687b      	ldr	r3, [r7, #4]
 810efa8:	2b00      	cmp	r3, #0
 810efaa:	d10b      	bne.n	810efc4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 810efac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 810efb0:	f383 8811 	msr	BASEPRI, r3
 810efb4:	f3bf 8f6f 	isb	sy
 810efb8:	f3bf 8f4f 	dsb	sy
 810efbc:	603b      	str	r3, [r7, #0]
}
 810efbe:	bf00      	nop
 810efc0:	bf00      	nop
 810efc2:	e7fd      	b.n	810efc0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 810efc4:	4b09      	ldr	r3, [pc, #36]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810efc6:	681b      	ldr	r3, [r3, #0]
 810efc8:	681b      	ldr	r3, [r3, #0]
 810efca:	2b00      	cmp	r3, #0
 810efcc:	d1b0      	bne.n	810ef30 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 810efce:	4b07      	ldr	r3, [pc, #28]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810efd0:	681b      	ldr	r3, [r3, #0]
 810efd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 810efd4:	4b06      	ldr	r3, [pc, #24]	@ (810eff0 <prvSwitchTimerLists+0xc8>)
 810efd6:	681b      	ldr	r3, [r3, #0]
 810efd8:	4a04      	ldr	r2, [pc, #16]	@ (810efec <prvSwitchTimerLists+0xc4>)
 810efda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 810efdc:	4a04      	ldr	r2, [pc, #16]	@ (810eff0 <prvSwitchTimerLists+0xc8>)
 810efde:	697b      	ldr	r3, [r7, #20]
 810efe0:	6013      	str	r3, [r2, #0]
}
 810efe2:	bf00      	nop
 810efe4:	3718      	adds	r7, #24
 810efe6:	46bd      	mov	sp, r7
 810efe8:	bd80      	pop	{r7, pc}
 810efea:	bf00      	nop
 810efec:	10004fd4 	.word	0x10004fd4
 810eff0:	10004fd8 	.word	0x10004fd8

0810eff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 810eff4:	b580      	push	{r7, lr}
 810eff6:	b082      	sub	sp, #8
 810eff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 810effa:	f7fd fbcd 	bl	810c798 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 810effe:	4b15      	ldr	r3, [pc, #84]	@ (810f054 <prvCheckForValidListAndQueue+0x60>)
 810f000:	681b      	ldr	r3, [r3, #0]
 810f002:	2b00      	cmp	r3, #0
 810f004:	d120      	bne.n	810f048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 810f006:	4814      	ldr	r0, [pc, #80]	@ (810f058 <prvCheckForValidListAndQueue+0x64>)
 810f008:	f7fd f9e4 	bl	810c3d4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 810f00c:	4813      	ldr	r0, [pc, #76]	@ (810f05c <prvCheckForValidListAndQueue+0x68>)
 810f00e:	f7fd f9e1 	bl	810c3d4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 810f012:	4b13      	ldr	r3, [pc, #76]	@ (810f060 <prvCheckForValidListAndQueue+0x6c>)
 810f014:	4a10      	ldr	r2, [pc, #64]	@ (810f058 <prvCheckForValidListAndQueue+0x64>)
 810f016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 810f018:	4b12      	ldr	r3, [pc, #72]	@ (810f064 <prvCheckForValidListAndQueue+0x70>)
 810f01a:	4a10      	ldr	r2, [pc, #64]	@ (810f05c <prvCheckForValidListAndQueue+0x68>)
 810f01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 810f01e:	2300      	movs	r3, #0
 810f020:	9300      	str	r3, [sp, #0]
 810f022:	4b11      	ldr	r3, [pc, #68]	@ (810f068 <prvCheckForValidListAndQueue+0x74>)
 810f024:	4a11      	ldr	r2, [pc, #68]	@ (810f06c <prvCheckForValidListAndQueue+0x78>)
 810f026:	2110      	movs	r1, #16
 810f028:	200a      	movs	r0, #10
 810f02a:	f7fd fd41 	bl	810cab0 <xQueueGenericCreateStatic>
 810f02e:	4603      	mov	r3, r0
 810f030:	4a08      	ldr	r2, [pc, #32]	@ (810f054 <prvCheckForValidListAndQueue+0x60>)
 810f032:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 810f034:	4b07      	ldr	r3, [pc, #28]	@ (810f054 <prvCheckForValidListAndQueue+0x60>)
 810f036:	681b      	ldr	r3, [r3, #0]
 810f038:	2b00      	cmp	r3, #0
 810f03a:	d005      	beq.n	810f048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 810f03c:	4b05      	ldr	r3, [pc, #20]	@ (810f054 <prvCheckForValidListAndQueue+0x60>)
 810f03e:	681b      	ldr	r3, [r3, #0]
 810f040:	490b      	ldr	r1, [pc, #44]	@ (810f070 <prvCheckForValidListAndQueue+0x7c>)
 810f042:	4618      	mov	r0, r3
 810f044:	f7fe fb82 	bl	810d74c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 810f048:	f7fd fbd8 	bl	810c7fc <vPortExitCritical>
}
 810f04c:	bf00      	nop
 810f04e:	46bd      	mov	sp, r7
 810f050:	bd80      	pop	{r7, pc}
 810f052:	bf00      	nop
 810f054:	10004fdc 	.word	0x10004fdc
 810f058:	10004fac 	.word	0x10004fac
 810f05c:	10004fc0 	.word	0x10004fc0
 810f060:	10004fd4 	.word	0x10004fd4
 810f064:	10004fd8 	.word	0x10004fd8
 810f068:	10005088 	.word	0x10005088
 810f06c:	10004fe8 	.word	0x10004fe8
 810f070:	0810fda0 	.word	0x0810fda0

0810f074 <siprintf>:
 810f074:	b40e      	push	{r1, r2, r3}
 810f076:	b500      	push	{lr}
 810f078:	b09c      	sub	sp, #112	@ 0x70
 810f07a:	ab1d      	add	r3, sp, #116	@ 0x74
 810f07c:	9002      	str	r0, [sp, #8]
 810f07e:	9006      	str	r0, [sp, #24]
 810f080:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 810f084:	4809      	ldr	r0, [pc, #36]	@ (810f0ac <siprintf+0x38>)
 810f086:	9107      	str	r1, [sp, #28]
 810f088:	9104      	str	r1, [sp, #16]
 810f08a:	4909      	ldr	r1, [pc, #36]	@ (810f0b0 <siprintf+0x3c>)
 810f08c:	f853 2b04 	ldr.w	r2, [r3], #4
 810f090:	9105      	str	r1, [sp, #20]
 810f092:	6800      	ldr	r0, [r0, #0]
 810f094:	9301      	str	r3, [sp, #4]
 810f096:	a902      	add	r1, sp, #8
 810f098:	f000 fa48 	bl	810f52c <_svfiprintf_r>
 810f09c:	9b02      	ldr	r3, [sp, #8]
 810f09e:	2200      	movs	r2, #0
 810f0a0:	701a      	strb	r2, [r3, #0]
 810f0a2:	b01c      	add	sp, #112	@ 0x70
 810f0a4:	f85d eb04 	ldr.w	lr, [sp], #4
 810f0a8:	b003      	add	sp, #12
 810f0aa:	4770      	bx	lr
 810f0ac:	10000138 	.word	0x10000138
 810f0b0:	ffff0208 	.word	0xffff0208

0810f0b4 <memmove>:
 810f0b4:	4288      	cmp	r0, r1
 810f0b6:	b510      	push	{r4, lr}
 810f0b8:	eb01 0402 	add.w	r4, r1, r2
 810f0bc:	d902      	bls.n	810f0c4 <memmove+0x10>
 810f0be:	4284      	cmp	r4, r0
 810f0c0:	4623      	mov	r3, r4
 810f0c2:	d807      	bhi.n	810f0d4 <memmove+0x20>
 810f0c4:	1e43      	subs	r3, r0, #1
 810f0c6:	42a1      	cmp	r1, r4
 810f0c8:	d008      	beq.n	810f0dc <memmove+0x28>
 810f0ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 810f0ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 810f0d2:	e7f8      	b.n	810f0c6 <memmove+0x12>
 810f0d4:	4402      	add	r2, r0
 810f0d6:	4601      	mov	r1, r0
 810f0d8:	428a      	cmp	r2, r1
 810f0da:	d100      	bne.n	810f0de <memmove+0x2a>
 810f0dc:	bd10      	pop	{r4, pc}
 810f0de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810f0e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 810f0e6:	e7f7      	b.n	810f0d8 <memmove+0x24>

0810f0e8 <memset>:
 810f0e8:	4402      	add	r2, r0
 810f0ea:	4603      	mov	r3, r0
 810f0ec:	4293      	cmp	r3, r2
 810f0ee:	d100      	bne.n	810f0f2 <memset+0xa>
 810f0f0:	4770      	bx	lr
 810f0f2:	f803 1b01 	strb.w	r1, [r3], #1
 810f0f6:	e7f9      	b.n	810f0ec <memset+0x4>

0810f0f8 <strchr>:
 810f0f8:	b2c9      	uxtb	r1, r1
 810f0fa:	4603      	mov	r3, r0
 810f0fc:	4618      	mov	r0, r3
 810f0fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f102:	b112      	cbz	r2, 810f10a <strchr+0x12>
 810f104:	428a      	cmp	r2, r1
 810f106:	d1f9      	bne.n	810f0fc <strchr+0x4>
 810f108:	4770      	bx	lr
 810f10a:	2900      	cmp	r1, #0
 810f10c:	bf18      	it	ne
 810f10e:	2000      	movne	r0, #0
 810f110:	4770      	bx	lr

0810f112 <strncpy>:
 810f112:	b510      	push	{r4, lr}
 810f114:	3901      	subs	r1, #1
 810f116:	4603      	mov	r3, r0
 810f118:	b132      	cbz	r2, 810f128 <strncpy+0x16>
 810f11a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810f11e:	f803 4b01 	strb.w	r4, [r3], #1
 810f122:	3a01      	subs	r2, #1
 810f124:	2c00      	cmp	r4, #0
 810f126:	d1f7      	bne.n	810f118 <strncpy+0x6>
 810f128:	441a      	add	r2, r3
 810f12a:	2100      	movs	r1, #0
 810f12c:	4293      	cmp	r3, r2
 810f12e:	d100      	bne.n	810f132 <strncpy+0x20>
 810f130:	bd10      	pop	{r4, pc}
 810f132:	f803 1b01 	strb.w	r1, [r3], #1
 810f136:	e7f9      	b.n	810f12c <strncpy+0x1a>

0810f138 <strstr>:
 810f138:	780a      	ldrb	r2, [r1, #0]
 810f13a:	b570      	push	{r4, r5, r6, lr}
 810f13c:	b96a      	cbnz	r2, 810f15a <strstr+0x22>
 810f13e:	bd70      	pop	{r4, r5, r6, pc}
 810f140:	429a      	cmp	r2, r3
 810f142:	d109      	bne.n	810f158 <strstr+0x20>
 810f144:	460c      	mov	r4, r1
 810f146:	4605      	mov	r5, r0
 810f148:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 810f14c:	2b00      	cmp	r3, #0
 810f14e:	d0f6      	beq.n	810f13e <strstr+0x6>
 810f150:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 810f154:	429e      	cmp	r6, r3
 810f156:	d0f7      	beq.n	810f148 <strstr+0x10>
 810f158:	3001      	adds	r0, #1
 810f15a:	7803      	ldrb	r3, [r0, #0]
 810f15c:	2b00      	cmp	r3, #0
 810f15e:	d1ef      	bne.n	810f140 <strstr+0x8>
 810f160:	4618      	mov	r0, r3
 810f162:	e7ec      	b.n	810f13e <strstr+0x6>

0810f164 <_reclaim_reent>:
 810f164:	4b29      	ldr	r3, [pc, #164]	@ (810f20c <_reclaim_reent+0xa8>)
 810f166:	681b      	ldr	r3, [r3, #0]
 810f168:	4283      	cmp	r3, r0
 810f16a:	b570      	push	{r4, r5, r6, lr}
 810f16c:	4604      	mov	r4, r0
 810f16e:	d04b      	beq.n	810f208 <_reclaim_reent+0xa4>
 810f170:	69c3      	ldr	r3, [r0, #28]
 810f172:	b1ab      	cbz	r3, 810f1a0 <_reclaim_reent+0x3c>
 810f174:	68db      	ldr	r3, [r3, #12]
 810f176:	b16b      	cbz	r3, 810f194 <_reclaim_reent+0x30>
 810f178:	2500      	movs	r5, #0
 810f17a:	69e3      	ldr	r3, [r4, #28]
 810f17c:	68db      	ldr	r3, [r3, #12]
 810f17e:	5959      	ldr	r1, [r3, r5]
 810f180:	2900      	cmp	r1, #0
 810f182:	d13b      	bne.n	810f1fc <_reclaim_reent+0x98>
 810f184:	3504      	adds	r5, #4
 810f186:	2d80      	cmp	r5, #128	@ 0x80
 810f188:	d1f7      	bne.n	810f17a <_reclaim_reent+0x16>
 810f18a:	69e3      	ldr	r3, [r4, #28]
 810f18c:	4620      	mov	r0, r4
 810f18e:	68d9      	ldr	r1, [r3, #12]
 810f190:	f000 f878 	bl	810f284 <_free_r>
 810f194:	69e3      	ldr	r3, [r4, #28]
 810f196:	6819      	ldr	r1, [r3, #0]
 810f198:	b111      	cbz	r1, 810f1a0 <_reclaim_reent+0x3c>
 810f19a:	4620      	mov	r0, r4
 810f19c:	f000 f872 	bl	810f284 <_free_r>
 810f1a0:	6961      	ldr	r1, [r4, #20]
 810f1a2:	b111      	cbz	r1, 810f1aa <_reclaim_reent+0x46>
 810f1a4:	4620      	mov	r0, r4
 810f1a6:	f000 f86d 	bl	810f284 <_free_r>
 810f1aa:	69e1      	ldr	r1, [r4, #28]
 810f1ac:	b111      	cbz	r1, 810f1b4 <_reclaim_reent+0x50>
 810f1ae:	4620      	mov	r0, r4
 810f1b0:	f000 f868 	bl	810f284 <_free_r>
 810f1b4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 810f1b6:	b111      	cbz	r1, 810f1be <_reclaim_reent+0x5a>
 810f1b8:	4620      	mov	r0, r4
 810f1ba:	f000 f863 	bl	810f284 <_free_r>
 810f1be:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810f1c0:	b111      	cbz	r1, 810f1c8 <_reclaim_reent+0x64>
 810f1c2:	4620      	mov	r0, r4
 810f1c4:	f000 f85e 	bl	810f284 <_free_r>
 810f1c8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 810f1ca:	b111      	cbz	r1, 810f1d2 <_reclaim_reent+0x6e>
 810f1cc:	4620      	mov	r0, r4
 810f1ce:	f000 f859 	bl	810f284 <_free_r>
 810f1d2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 810f1d4:	b111      	cbz	r1, 810f1dc <_reclaim_reent+0x78>
 810f1d6:	4620      	mov	r0, r4
 810f1d8:	f000 f854 	bl	810f284 <_free_r>
 810f1dc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 810f1de:	b111      	cbz	r1, 810f1e6 <_reclaim_reent+0x82>
 810f1e0:	4620      	mov	r0, r4
 810f1e2:	f000 f84f 	bl	810f284 <_free_r>
 810f1e6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 810f1e8:	b111      	cbz	r1, 810f1f0 <_reclaim_reent+0x8c>
 810f1ea:	4620      	mov	r0, r4
 810f1ec:	f000 f84a 	bl	810f284 <_free_r>
 810f1f0:	6a23      	ldr	r3, [r4, #32]
 810f1f2:	b14b      	cbz	r3, 810f208 <_reclaim_reent+0xa4>
 810f1f4:	4620      	mov	r0, r4
 810f1f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 810f1fa:	4718      	bx	r3
 810f1fc:	680e      	ldr	r6, [r1, #0]
 810f1fe:	4620      	mov	r0, r4
 810f200:	f000 f840 	bl	810f284 <_free_r>
 810f204:	4631      	mov	r1, r6
 810f206:	e7bb      	b.n	810f180 <_reclaim_reent+0x1c>
 810f208:	bd70      	pop	{r4, r5, r6, pc}
 810f20a:	bf00      	nop
 810f20c:	10000138 	.word	0x10000138

0810f210 <__errno>:
 810f210:	4b01      	ldr	r3, [pc, #4]	@ (810f218 <__errno+0x8>)
 810f212:	6818      	ldr	r0, [r3, #0]
 810f214:	4770      	bx	lr
 810f216:	bf00      	nop
 810f218:	10000138 	.word	0x10000138

0810f21c <__libc_init_array>:
 810f21c:	b570      	push	{r4, r5, r6, lr}
 810f21e:	4d0d      	ldr	r5, [pc, #52]	@ (810f254 <__libc_init_array+0x38>)
 810f220:	4c0d      	ldr	r4, [pc, #52]	@ (810f258 <__libc_init_array+0x3c>)
 810f222:	1b64      	subs	r4, r4, r5
 810f224:	10a4      	asrs	r4, r4, #2
 810f226:	2600      	movs	r6, #0
 810f228:	42a6      	cmp	r6, r4
 810f22a:	d109      	bne.n	810f240 <__libc_init_array+0x24>
 810f22c:	4d0b      	ldr	r5, [pc, #44]	@ (810f25c <__libc_init_array+0x40>)
 810f22e:	4c0c      	ldr	r4, [pc, #48]	@ (810f260 <__libc_init_array+0x44>)
 810f230:	f000 fc4c 	bl	810facc <_init>
 810f234:	1b64      	subs	r4, r4, r5
 810f236:	10a4      	asrs	r4, r4, #2
 810f238:	2600      	movs	r6, #0
 810f23a:	42a6      	cmp	r6, r4
 810f23c:	d105      	bne.n	810f24a <__libc_init_array+0x2e>
 810f23e:	bd70      	pop	{r4, r5, r6, pc}
 810f240:	f855 3b04 	ldr.w	r3, [r5], #4
 810f244:	4798      	blx	r3
 810f246:	3601      	adds	r6, #1
 810f248:	e7ee      	b.n	810f228 <__libc_init_array+0xc>
 810f24a:	f855 3b04 	ldr.w	r3, [r5], #4
 810f24e:	4798      	blx	r3
 810f250:	3601      	adds	r6, #1
 810f252:	e7f2      	b.n	810f23a <__libc_init_array+0x1e>
 810f254:	0810fec4 	.word	0x0810fec4
 810f258:	0810fec4 	.word	0x0810fec4
 810f25c:	0810fec4 	.word	0x0810fec4
 810f260:	0810fec8 	.word	0x0810fec8

0810f264 <__retarget_lock_acquire_recursive>:
 810f264:	4770      	bx	lr

0810f266 <__retarget_lock_release_recursive>:
 810f266:	4770      	bx	lr

0810f268 <memcpy>:
 810f268:	440a      	add	r2, r1
 810f26a:	4291      	cmp	r1, r2
 810f26c:	f100 33ff 	add.w	r3, r0, #4294967295
 810f270:	d100      	bne.n	810f274 <memcpy+0xc>
 810f272:	4770      	bx	lr
 810f274:	b510      	push	{r4, lr}
 810f276:	f811 4b01 	ldrb.w	r4, [r1], #1
 810f27a:	f803 4f01 	strb.w	r4, [r3, #1]!
 810f27e:	4291      	cmp	r1, r2
 810f280:	d1f9      	bne.n	810f276 <memcpy+0xe>
 810f282:	bd10      	pop	{r4, pc}

0810f284 <_free_r>:
 810f284:	b538      	push	{r3, r4, r5, lr}
 810f286:	4605      	mov	r5, r0
 810f288:	2900      	cmp	r1, #0
 810f28a:	d041      	beq.n	810f310 <_free_r+0x8c>
 810f28c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810f290:	1f0c      	subs	r4, r1, #4
 810f292:	2b00      	cmp	r3, #0
 810f294:	bfb8      	it	lt
 810f296:	18e4      	addlt	r4, r4, r3
 810f298:	f000 f8e0 	bl	810f45c <__malloc_lock>
 810f29c:	4a1d      	ldr	r2, [pc, #116]	@ (810f314 <_free_r+0x90>)
 810f29e:	6813      	ldr	r3, [r2, #0]
 810f2a0:	b933      	cbnz	r3, 810f2b0 <_free_r+0x2c>
 810f2a2:	6063      	str	r3, [r4, #4]
 810f2a4:	6014      	str	r4, [r2, #0]
 810f2a6:	4628      	mov	r0, r5
 810f2a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810f2ac:	f000 b8dc 	b.w	810f468 <__malloc_unlock>
 810f2b0:	42a3      	cmp	r3, r4
 810f2b2:	d908      	bls.n	810f2c6 <_free_r+0x42>
 810f2b4:	6820      	ldr	r0, [r4, #0]
 810f2b6:	1821      	adds	r1, r4, r0
 810f2b8:	428b      	cmp	r3, r1
 810f2ba:	bf01      	itttt	eq
 810f2bc:	6819      	ldreq	r1, [r3, #0]
 810f2be:	685b      	ldreq	r3, [r3, #4]
 810f2c0:	1809      	addeq	r1, r1, r0
 810f2c2:	6021      	streq	r1, [r4, #0]
 810f2c4:	e7ed      	b.n	810f2a2 <_free_r+0x1e>
 810f2c6:	461a      	mov	r2, r3
 810f2c8:	685b      	ldr	r3, [r3, #4]
 810f2ca:	b10b      	cbz	r3, 810f2d0 <_free_r+0x4c>
 810f2cc:	42a3      	cmp	r3, r4
 810f2ce:	d9fa      	bls.n	810f2c6 <_free_r+0x42>
 810f2d0:	6811      	ldr	r1, [r2, #0]
 810f2d2:	1850      	adds	r0, r2, r1
 810f2d4:	42a0      	cmp	r0, r4
 810f2d6:	d10b      	bne.n	810f2f0 <_free_r+0x6c>
 810f2d8:	6820      	ldr	r0, [r4, #0]
 810f2da:	4401      	add	r1, r0
 810f2dc:	1850      	adds	r0, r2, r1
 810f2de:	4283      	cmp	r3, r0
 810f2e0:	6011      	str	r1, [r2, #0]
 810f2e2:	d1e0      	bne.n	810f2a6 <_free_r+0x22>
 810f2e4:	6818      	ldr	r0, [r3, #0]
 810f2e6:	685b      	ldr	r3, [r3, #4]
 810f2e8:	6053      	str	r3, [r2, #4]
 810f2ea:	4408      	add	r0, r1
 810f2ec:	6010      	str	r0, [r2, #0]
 810f2ee:	e7da      	b.n	810f2a6 <_free_r+0x22>
 810f2f0:	d902      	bls.n	810f2f8 <_free_r+0x74>
 810f2f2:	230c      	movs	r3, #12
 810f2f4:	602b      	str	r3, [r5, #0]
 810f2f6:	e7d6      	b.n	810f2a6 <_free_r+0x22>
 810f2f8:	6820      	ldr	r0, [r4, #0]
 810f2fa:	1821      	adds	r1, r4, r0
 810f2fc:	428b      	cmp	r3, r1
 810f2fe:	bf04      	itt	eq
 810f300:	6819      	ldreq	r1, [r3, #0]
 810f302:	685b      	ldreq	r3, [r3, #4]
 810f304:	6063      	str	r3, [r4, #4]
 810f306:	bf04      	itt	eq
 810f308:	1809      	addeq	r1, r1, r0
 810f30a:	6021      	streq	r1, [r4, #0]
 810f30c:	6054      	str	r4, [r2, #4]
 810f30e:	e7ca      	b.n	810f2a6 <_free_r+0x22>
 810f310:	bd38      	pop	{r3, r4, r5, pc}
 810f312:	bf00      	nop
 810f314:	1000521c 	.word	0x1000521c

0810f318 <sbrk_aligned>:
 810f318:	b570      	push	{r4, r5, r6, lr}
 810f31a:	4e0f      	ldr	r6, [pc, #60]	@ (810f358 <sbrk_aligned+0x40>)
 810f31c:	460c      	mov	r4, r1
 810f31e:	6831      	ldr	r1, [r6, #0]
 810f320:	4605      	mov	r5, r0
 810f322:	b911      	cbnz	r1, 810f32a <sbrk_aligned+0x12>
 810f324:	f000 fb8c 	bl	810fa40 <_sbrk_r>
 810f328:	6030      	str	r0, [r6, #0]
 810f32a:	4621      	mov	r1, r4
 810f32c:	4628      	mov	r0, r5
 810f32e:	f000 fb87 	bl	810fa40 <_sbrk_r>
 810f332:	1c43      	adds	r3, r0, #1
 810f334:	d103      	bne.n	810f33e <sbrk_aligned+0x26>
 810f336:	f04f 34ff 	mov.w	r4, #4294967295
 810f33a:	4620      	mov	r0, r4
 810f33c:	bd70      	pop	{r4, r5, r6, pc}
 810f33e:	1cc4      	adds	r4, r0, #3
 810f340:	f024 0403 	bic.w	r4, r4, #3
 810f344:	42a0      	cmp	r0, r4
 810f346:	d0f8      	beq.n	810f33a <sbrk_aligned+0x22>
 810f348:	1a21      	subs	r1, r4, r0
 810f34a:	4628      	mov	r0, r5
 810f34c:	f000 fb78 	bl	810fa40 <_sbrk_r>
 810f350:	3001      	adds	r0, #1
 810f352:	d1f2      	bne.n	810f33a <sbrk_aligned+0x22>
 810f354:	e7ef      	b.n	810f336 <sbrk_aligned+0x1e>
 810f356:	bf00      	nop
 810f358:	10005218 	.word	0x10005218

0810f35c <_malloc_r>:
 810f35c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810f360:	1ccd      	adds	r5, r1, #3
 810f362:	f025 0503 	bic.w	r5, r5, #3
 810f366:	3508      	adds	r5, #8
 810f368:	2d0c      	cmp	r5, #12
 810f36a:	bf38      	it	cc
 810f36c:	250c      	movcc	r5, #12
 810f36e:	2d00      	cmp	r5, #0
 810f370:	4606      	mov	r6, r0
 810f372:	db01      	blt.n	810f378 <_malloc_r+0x1c>
 810f374:	42a9      	cmp	r1, r5
 810f376:	d904      	bls.n	810f382 <_malloc_r+0x26>
 810f378:	230c      	movs	r3, #12
 810f37a:	6033      	str	r3, [r6, #0]
 810f37c:	2000      	movs	r0, #0
 810f37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 810f382:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 810f458 <_malloc_r+0xfc>
 810f386:	f000 f869 	bl	810f45c <__malloc_lock>
 810f38a:	f8d8 3000 	ldr.w	r3, [r8]
 810f38e:	461c      	mov	r4, r3
 810f390:	bb44      	cbnz	r4, 810f3e4 <_malloc_r+0x88>
 810f392:	4629      	mov	r1, r5
 810f394:	4630      	mov	r0, r6
 810f396:	f7ff ffbf 	bl	810f318 <sbrk_aligned>
 810f39a:	1c43      	adds	r3, r0, #1
 810f39c:	4604      	mov	r4, r0
 810f39e:	d158      	bne.n	810f452 <_malloc_r+0xf6>
 810f3a0:	f8d8 4000 	ldr.w	r4, [r8]
 810f3a4:	4627      	mov	r7, r4
 810f3a6:	2f00      	cmp	r7, #0
 810f3a8:	d143      	bne.n	810f432 <_malloc_r+0xd6>
 810f3aa:	2c00      	cmp	r4, #0
 810f3ac:	d04b      	beq.n	810f446 <_malloc_r+0xea>
 810f3ae:	6823      	ldr	r3, [r4, #0]
 810f3b0:	4639      	mov	r1, r7
 810f3b2:	4630      	mov	r0, r6
 810f3b4:	eb04 0903 	add.w	r9, r4, r3
 810f3b8:	f000 fb42 	bl	810fa40 <_sbrk_r>
 810f3bc:	4581      	cmp	r9, r0
 810f3be:	d142      	bne.n	810f446 <_malloc_r+0xea>
 810f3c0:	6821      	ldr	r1, [r4, #0]
 810f3c2:	1a6d      	subs	r5, r5, r1
 810f3c4:	4629      	mov	r1, r5
 810f3c6:	4630      	mov	r0, r6
 810f3c8:	f7ff ffa6 	bl	810f318 <sbrk_aligned>
 810f3cc:	3001      	adds	r0, #1
 810f3ce:	d03a      	beq.n	810f446 <_malloc_r+0xea>
 810f3d0:	6823      	ldr	r3, [r4, #0]
 810f3d2:	442b      	add	r3, r5
 810f3d4:	6023      	str	r3, [r4, #0]
 810f3d6:	f8d8 3000 	ldr.w	r3, [r8]
 810f3da:	685a      	ldr	r2, [r3, #4]
 810f3dc:	bb62      	cbnz	r2, 810f438 <_malloc_r+0xdc>
 810f3de:	f8c8 7000 	str.w	r7, [r8]
 810f3e2:	e00f      	b.n	810f404 <_malloc_r+0xa8>
 810f3e4:	6822      	ldr	r2, [r4, #0]
 810f3e6:	1b52      	subs	r2, r2, r5
 810f3e8:	d420      	bmi.n	810f42c <_malloc_r+0xd0>
 810f3ea:	2a0b      	cmp	r2, #11
 810f3ec:	d917      	bls.n	810f41e <_malloc_r+0xc2>
 810f3ee:	1961      	adds	r1, r4, r5
 810f3f0:	42a3      	cmp	r3, r4
 810f3f2:	6025      	str	r5, [r4, #0]
 810f3f4:	bf18      	it	ne
 810f3f6:	6059      	strne	r1, [r3, #4]
 810f3f8:	6863      	ldr	r3, [r4, #4]
 810f3fa:	bf08      	it	eq
 810f3fc:	f8c8 1000 	streq.w	r1, [r8]
 810f400:	5162      	str	r2, [r4, r5]
 810f402:	604b      	str	r3, [r1, #4]
 810f404:	4630      	mov	r0, r6
 810f406:	f000 f82f 	bl	810f468 <__malloc_unlock>
 810f40a:	f104 000b 	add.w	r0, r4, #11
 810f40e:	1d23      	adds	r3, r4, #4
 810f410:	f020 0007 	bic.w	r0, r0, #7
 810f414:	1ac2      	subs	r2, r0, r3
 810f416:	bf1c      	itt	ne
 810f418:	1a1b      	subne	r3, r3, r0
 810f41a:	50a3      	strne	r3, [r4, r2]
 810f41c:	e7af      	b.n	810f37e <_malloc_r+0x22>
 810f41e:	6862      	ldr	r2, [r4, #4]
 810f420:	42a3      	cmp	r3, r4
 810f422:	bf0c      	ite	eq
 810f424:	f8c8 2000 	streq.w	r2, [r8]
 810f428:	605a      	strne	r2, [r3, #4]
 810f42a:	e7eb      	b.n	810f404 <_malloc_r+0xa8>
 810f42c:	4623      	mov	r3, r4
 810f42e:	6864      	ldr	r4, [r4, #4]
 810f430:	e7ae      	b.n	810f390 <_malloc_r+0x34>
 810f432:	463c      	mov	r4, r7
 810f434:	687f      	ldr	r7, [r7, #4]
 810f436:	e7b6      	b.n	810f3a6 <_malloc_r+0x4a>
 810f438:	461a      	mov	r2, r3
 810f43a:	685b      	ldr	r3, [r3, #4]
 810f43c:	42a3      	cmp	r3, r4
 810f43e:	d1fb      	bne.n	810f438 <_malloc_r+0xdc>
 810f440:	2300      	movs	r3, #0
 810f442:	6053      	str	r3, [r2, #4]
 810f444:	e7de      	b.n	810f404 <_malloc_r+0xa8>
 810f446:	230c      	movs	r3, #12
 810f448:	6033      	str	r3, [r6, #0]
 810f44a:	4630      	mov	r0, r6
 810f44c:	f000 f80c 	bl	810f468 <__malloc_unlock>
 810f450:	e794      	b.n	810f37c <_malloc_r+0x20>
 810f452:	6005      	str	r5, [r0, #0]
 810f454:	e7d6      	b.n	810f404 <_malloc_r+0xa8>
 810f456:	bf00      	nop
 810f458:	1000521c 	.word	0x1000521c

0810f45c <__malloc_lock>:
 810f45c:	4801      	ldr	r0, [pc, #4]	@ (810f464 <__malloc_lock+0x8>)
 810f45e:	f7ff bf01 	b.w	810f264 <__retarget_lock_acquire_recursive>
 810f462:	bf00      	nop
 810f464:	10005214 	.word	0x10005214

0810f468 <__malloc_unlock>:
 810f468:	4801      	ldr	r0, [pc, #4]	@ (810f470 <__malloc_unlock+0x8>)
 810f46a:	f7ff befc 	b.w	810f266 <__retarget_lock_release_recursive>
 810f46e:	bf00      	nop
 810f470:	10005214 	.word	0x10005214

0810f474 <__ssputs_r>:
 810f474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f478:	688e      	ldr	r6, [r1, #8]
 810f47a:	461f      	mov	r7, r3
 810f47c:	42be      	cmp	r6, r7
 810f47e:	680b      	ldr	r3, [r1, #0]
 810f480:	4682      	mov	sl, r0
 810f482:	460c      	mov	r4, r1
 810f484:	4690      	mov	r8, r2
 810f486:	d82d      	bhi.n	810f4e4 <__ssputs_r+0x70>
 810f488:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 810f48c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 810f490:	d026      	beq.n	810f4e0 <__ssputs_r+0x6c>
 810f492:	6965      	ldr	r5, [r4, #20]
 810f494:	6909      	ldr	r1, [r1, #16]
 810f496:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 810f49a:	eba3 0901 	sub.w	r9, r3, r1
 810f49e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 810f4a2:	1c7b      	adds	r3, r7, #1
 810f4a4:	444b      	add	r3, r9
 810f4a6:	106d      	asrs	r5, r5, #1
 810f4a8:	429d      	cmp	r5, r3
 810f4aa:	bf38      	it	cc
 810f4ac:	461d      	movcc	r5, r3
 810f4ae:	0553      	lsls	r3, r2, #21
 810f4b0:	d527      	bpl.n	810f502 <__ssputs_r+0x8e>
 810f4b2:	4629      	mov	r1, r5
 810f4b4:	f7ff ff52 	bl	810f35c <_malloc_r>
 810f4b8:	4606      	mov	r6, r0
 810f4ba:	b360      	cbz	r0, 810f516 <__ssputs_r+0xa2>
 810f4bc:	6921      	ldr	r1, [r4, #16]
 810f4be:	464a      	mov	r2, r9
 810f4c0:	f7ff fed2 	bl	810f268 <memcpy>
 810f4c4:	89a3      	ldrh	r3, [r4, #12]
 810f4c6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 810f4ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810f4ce:	81a3      	strh	r3, [r4, #12]
 810f4d0:	6126      	str	r6, [r4, #16]
 810f4d2:	6165      	str	r5, [r4, #20]
 810f4d4:	444e      	add	r6, r9
 810f4d6:	eba5 0509 	sub.w	r5, r5, r9
 810f4da:	6026      	str	r6, [r4, #0]
 810f4dc:	60a5      	str	r5, [r4, #8]
 810f4de:	463e      	mov	r6, r7
 810f4e0:	42be      	cmp	r6, r7
 810f4e2:	d900      	bls.n	810f4e6 <__ssputs_r+0x72>
 810f4e4:	463e      	mov	r6, r7
 810f4e6:	6820      	ldr	r0, [r4, #0]
 810f4e8:	4632      	mov	r2, r6
 810f4ea:	4641      	mov	r1, r8
 810f4ec:	f7ff fde2 	bl	810f0b4 <memmove>
 810f4f0:	68a3      	ldr	r3, [r4, #8]
 810f4f2:	1b9b      	subs	r3, r3, r6
 810f4f4:	60a3      	str	r3, [r4, #8]
 810f4f6:	6823      	ldr	r3, [r4, #0]
 810f4f8:	4433      	add	r3, r6
 810f4fa:	6023      	str	r3, [r4, #0]
 810f4fc:	2000      	movs	r0, #0
 810f4fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f502:	462a      	mov	r2, r5
 810f504:	f000 faac 	bl	810fa60 <_realloc_r>
 810f508:	4606      	mov	r6, r0
 810f50a:	2800      	cmp	r0, #0
 810f50c:	d1e0      	bne.n	810f4d0 <__ssputs_r+0x5c>
 810f50e:	6921      	ldr	r1, [r4, #16]
 810f510:	4650      	mov	r0, sl
 810f512:	f7ff feb7 	bl	810f284 <_free_r>
 810f516:	230c      	movs	r3, #12
 810f518:	f8ca 3000 	str.w	r3, [sl]
 810f51c:	89a3      	ldrh	r3, [r4, #12]
 810f51e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810f522:	81a3      	strh	r3, [r4, #12]
 810f524:	f04f 30ff 	mov.w	r0, #4294967295
 810f528:	e7e9      	b.n	810f4fe <__ssputs_r+0x8a>
	...

0810f52c <_svfiprintf_r>:
 810f52c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810f530:	4698      	mov	r8, r3
 810f532:	898b      	ldrh	r3, [r1, #12]
 810f534:	061b      	lsls	r3, r3, #24
 810f536:	b09d      	sub	sp, #116	@ 0x74
 810f538:	4607      	mov	r7, r0
 810f53a:	460d      	mov	r5, r1
 810f53c:	4614      	mov	r4, r2
 810f53e:	d510      	bpl.n	810f562 <_svfiprintf_r+0x36>
 810f540:	690b      	ldr	r3, [r1, #16]
 810f542:	b973      	cbnz	r3, 810f562 <_svfiprintf_r+0x36>
 810f544:	2140      	movs	r1, #64	@ 0x40
 810f546:	f7ff ff09 	bl	810f35c <_malloc_r>
 810f54a:	6028      	str	r0, [r5, #0]
 810f54c:	6128      	str	r0, [r5, #16]
 810f54e:	b930      	cbnz	r0, 810f55e <_svfiprintf_r+0x32>
 810f550:	230c      	movs	r3, #12
 810f552:	603b      	str	r3, [r7, #0]
 810f554:	f04f 30ff 	mov.w	r0, #4294967295
 810f558:	b01d      	add	sp, #116	@ 0x74
 810f55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810f55e:	2340      	movs	r3, #64	@ 0x40
 810f560:	616b      	str	r3, [r5, #20]
 810f562:	2300      	movs	r3, #0
 810f564:	9309      	str	r3, [sp, #36]	@ 0x24
 810f566:	2320      	movs	r3, #32
 810f568:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 810f56c:	f8cd 800c 	str.w	r8, [sp, #12]
 810f570:	2330      	movs	r3, #48	@ 0x30
 810f572:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 810f710 <_svfiprintf_r+0x1e4>
 810f576:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810f57a:	f04f 0901 	mov.w	r9, #1
 810f57e:	4623      	mov	r3, r4
 810f580:	469a      	mov	sl, r3
 810f582:	f813 2b01 	ldrb.w	r2, [r3], #1
 810f586:	b10a      	cbz	r2, 810f58c <_svfiprintf_r+0x60>
 810f588:	2a25      	cmp	r2, #37	@ 0x25
 810f58a:	d1f9      	bne.n	810f580 <_svfiprintf_r+0x54>
 810f58c:	ebba 0b04 	subs.w	fp, sl, r4
 810f590:	d00b      	beq.n	810f5aa <_svfiprintf_r+0x7e>
 810f592:	465b      	mov	r3, fp
 810f594:	4622      	mov	r2, r4
 810f596:	4629      	mov	r1, r5
 810f598:	4638      	mov	r0, r7
 810f59a:	f7ff ff6b 	bl	810f474 <__ssputs_r>
 810f59e:	3001      	adds	r0, #1
 810f5a0:	f000 80a7 	beq.w	810f6f2 <_svfiprintf_r+0x1c6>
 810f5a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810f5a6:	445a      	add	r2, fp
 810f5a8:	9209      	str	r2, [sp, #36]	@ 0x24
 810f5aa:	f89a 3000 	ldrb.w	r3, [sl]
 810f5ae:	2b00      	cmp	r3, #0
 810f5b0:	f000 809f 	beq.w	810f6f2 <_svfiprintf_r+0x1c6>
 810f5b4:	2300      	movs	r3, #0
 810f5b6:	f04f 32ff 	mov.w	r2, #4294967295
 810f5ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 810f5be:	f10a 0a01 	add.w	sl, sl, #1
 810f5c2:	9304      	str	r3, [sp, #16]
 810f5c4:	9307      	str	r3, [sp, #28]
 810f5c6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810f5ca:	931a      	str	r3, [sp, #104]	@ 0x68
 810f5cc:	4654      	mov	r4, sl
 810f5ce:	2205      	movs	r2, #5
 810f5d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f5d4:	484e      	ldr	r0, [pc, #312]	@ (810f710 <_svfiprintf_r+0x1e4>)
 810f5d6:	f7f0 fe8b 	bl	81002f0 <memchr>
 810f5da:	9a04      	ldr	r2, [sp, #16]
 810f5dc:	b9d8      	cbnz	r0, 810f616 <_svfiprintf_r+0xea>
 810f5de:	06d0      	lsls	r0, r2, #27
 810f5e0:	bf44      	itt	mi
 810f5e2:	2320      	movmi	r3, #32
 810f5e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810f5e8:	0711      	lsls	r1, r2, #28
 810f5ea:	bf44      	itt	mi
 810f5ec:	232b      	movmi	r3, #43	@ 0x2b
 810f5ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810f5f2:	f89a 3000 	ldrb.w	r3, [sl]
 810f5f6:	2b2a      	cmp	r3, #42	@ 0x2a
 810f5f8:	d015      	beq.n	810f626 <_svfiprintf_r+0xfa>
 810f5fa:	9a07      	ldr	r2, [sp, #28]
 810f5fc:	4654      	mov	r4, sl
 810f5fe:	2000      	movs	r0, #0
 810f600:	f04f 0c0a 	mov.w	ip, #10
 810f604:	4621      	mov	r1, r4
 810f606:	f811 3b01 	ldrb.w	r3, [r1], #1
 810f60a:	3b30      	subs	r3, #48	@ 0x30
 810f60c:	2b09      	cmp	r3, #9
 810f60e:	d94b      	bls.n	810f6a8 <_svfiprintf_r+0x17c>
 810f610:	b1b0      	cbz	r0, 810f640 <_svfiprintf_r+0x114>
 810f612:	9207      	str	r2, [sp, #28]
 810f614:	e014      	b.n	810f640 <_svfiprintf_r+0x114>
 810f616:	eba0 0308 	sub.w	r3, r0, r8
 810f61a:	fa09 f303 	lsl.w	r3, r9, r3
 810f61e:	4313      	orrs	r3, r2
 810f620:	9304      	str	r3, [sp, #16]
 810f622:	46a2      	mov	sl, r4
 810f624:	e7d2      	b.n	810f5cc <_svfiprintf_r+0xa0>
 810f626:	9b03      	ldr	r3, [sp, #12]
 810f628:	1d19      	adds	r1, r3, #4
 810f62a:	681b      	ldr	r3, [r3, #0]
 810f62c:	9103      	str	r1, [sp, #12]
 810f62e:	2b00      	cmp	r3, #0
 810f630:	bfbb      	ittet	lt
 810f632:	425b      	neglt	r3, r3
 810f634:	f042 0202 	orrlt.w	r2, r2, #2
 810f638:	9307      	strge	r3, [sp, #28]
 810f63a:	9307      	strlt	r3, [sp, #28]
 810f63c:	bfb8      	it	lt
 810f63e:	9204      	strlt	r2, [sp, #16]
 810f640:	7823      	ldrb	r3, [r4, #0]
 810f642:	2b2e      	cmp	r3, #46	@ 0x2e
 810f644:	d10a      	bne.n	810f65c <_svfiprintf_r+0x130>
 810f646:	7863      	ldrb	r3, [r4, #1]
 810f648:	2b2a      	cmp	r3, #42	@ 0x2a
 810f64a:	d132      	bne.n	810f6b2 <_svfiprintf_r+0x186>
 810f64c:	9b03      	ldr	r3, [sp, #12]
 810f64e:	1d1a      	adds	r2, r3, #4
 810f650:	681b      	ldr	r3, [r3, #0]
 810f652:	9203      	str	r2, [sp, #12]
 810f654:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810f658:	3402      	adds	r4, #2
 810f65a:	9305      	str	r3, [sp, #20]
 810f65c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 810f720 <_svfiprintf_r+0x1f4>
 810f660:	7821      	ldrb	r1, [r4, #0]
 810f662:	2203      	movs	r2, #3
 810f664:	4650      	mov	r0, sl
 810f666:	f7f0 fe43 	bl	81002f0 <memchr>
 810f66a:	b138      	cbz	r0, 810f67c <_svfiprintf_r+0x150>
 810f66c:	9b04      	ldr	r3, [sp, #16]
 810f66e:	eba0 000a 	sub.w	r0, r0, sl
 810f672:	2240      	movs	r2, #64	@ 0x40
 810f674:	4082      	lsls	r2, r0
 810f676:	4313      	orrs	r3, r2
 810f678:	3401      	adds	r4, #1
 810f67a:	9304      	str	r3, [sp, #16]
 810f67c:	f814 1b01 	ldrb.w	r1, [r4], #1
 810f680:	4824      	ldr	r0, [pc, #144]	@ (810f714 <_svfiprintf_r+0x1e8>)
 810f682:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810f686:	2206      	movs	r2, #6
 810f688:	f7f0 fe32 	bl	81002f0 <memchr>
 810f68c:	2800      	cmp	r0, #0
 810f68e:	d036      	beq.n	810f6fe <_svfiprintf_r+0x1d2>
 810f690:	4b21      	ldr	r3, [pc, #132]	@ (810f718 <_svfiprintf_r+0x1ec>)
 810f692:	bb1b      	cbnz	r3, 810f6dc <_svfiprintf_r+0x1b0>
 810f694:	9b03      	ldr	r3, [sp, #12]
 810f696:	3307      	adds	r3, #7
 810f698:	f023 0307 	bic.w	r3, r3, #7
 810f69c:	3308      	adds	r3, #8
 810f69e:	9303      	str	r3, [sp, #12]
 810f6a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810f6a2:	4433      	add	r3, r6
 810f6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 810f6a6:	e76a      	b.n	810f57e <_svfiprintf_r+0x52>
 810f6a8:	fb0c 3202 	mla	r2, ip, r2, r3
 810f6ac:	460c      	mov	r4, r1
 810f6ae:	2001      	movs	r0, #1
 810f6b0:	e7a8      	b.n	810f604 <_svfiprintf_r+0xd8>
 810f6b2:	2300      	movs	r3, #0
 810f6b4:	3401      	adds	r4, #1
 810f6b6:	9305      	str	r3, [sp, #20]
 810f6b8:	4619      	mov	r1, r3
 810f6ba:	f04f 0c0a 	mov.w	ip, #10
 810f6be:	4620      	mov	r0, r4
 810f6c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 810f6c4:	3a30      	subs	r2, #48	@ 0x30
 810f6c6:	2a09      	cmp	r2, #9
 810f6c8:	d903      	bls.n	810f6d2 <_svfiprintf_r+0x1a6>
 810f6ca:	2b00      	cmp	r3, #0
 810f6cc:	d0c6      	beq.n	810f65c <_svfiprintf_r+0x130>
 810f6ce:	9105      	str	r1, [sp, #20]
 810f6d0:	e7c4      	b.n	810f65c <_svfiprintf_r+0x130>
 810f6d2:	fb0c 2101 	mla	r1, ip, r1, r2
 810f6d6:	4604      	mov	r4, r0
 810f6d8:	2301      	movs	r3, #1
 810f6da:	e7f0      	b.n	810f6be <_svfiprintf_r+0x192>
 810f6dc:	ab03      	add	r3, sp, #12
 810f6de:	9300      	str	r3, [sp, #0]
 810f6e0:	462a      	mov	r2, r5
 810f6e2:	4b0e      	ldr	r3, [pc, #56]	@ (810f71c <_svfiprintf_r+0x1f0>)
 810f6e4:	a904      	add	r1, sp, #16
 810f6e6:	4638      	mov	r0, r7
 810f6e8:	f3af 8000 	nop.w
 810f6ec:	1c42      	adds	r2, r0, #1
 810f6ee:	4606      	mov	r6, r0
 810f6f0:	d1d6      	bne.n	810f6a0 <_svfiprintf_r+0x174>
 810f6f2:	89ab      	ldrh	r3, [r5, #12]
 810f6f4:	065b      	lsls	r3, r3, #25
 810f6f6:	f53f af2d 	bmi.w	810f554 <_svfiprintf_r+0x28>
 810f6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 810f6fc:	e72c      	b.n	810f558 <_svfiprintf_r+0x2c>
 810f6fe:	ab03      	add	r3, sp, #12
 810f700:	9300      	str	r3, [sp, #0]
 810f702:	462a      	mov	r2, r5
 810f704:	4b05      	ldr	r3, [pc, #20]	@ (810f71c <_svfiprintf_r+0x1f0>)
 810f706:	a904      	add	r1, sp, #16
 810f708:	4638      	mov	r0, r7
 810f70a:	f000 f879 	bl	810f800 <_printf_i>
 810f70e:	e7ed      	b.n	810f6ec <_svfiprintf_r+0x1c0>
 810f710:	0810fe88 	.word	0x0810fe88
 810f714:	0810fe92 	.word	0x0810fe92
 810f718:	00000000 	.word	0x00000000
 810f71c:	0810f475 	.word	0x0810f475
 810f720:	0810fe8e 	.word	0x0810fe8e

0810f724 <_printf_common>:
 810f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810f728:	4616      	mov	r6, r2
 810f72a:	4698      	mov	r8, r3
 810f72c:	688a      	ldr	r2, [r1, #8]
 810f72e:	690b      	ldr	r3, [r1, #16]
 810f730:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810f734:	4293      	cmp	r3, r2
 810f736:	bfb8      	it	lt
 810f738:	4613      	movlt	r3, r2
 810f73a:	6033      	str	r3, [r6, #0]
 810f73c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 810f740:	4607      	mov	r7, r0
 810f742:	460c      	mov	r4, r1
 810f744:	b10a      	cbz	r2, 810f74a <_printf_common+0x26>
 810f746:	3301      	adds	r3, #1
 810f748:	6033      	str	r3, [r6, #0]
 810f74a:	6823      	ldr	r3, [r4, #0]
 810f74c:	0699      	lsls	r1, r3, #26
 810f74e:	bf42      	ittt	mi
 810f750:	6833      	ldrmi	r3, [r6, #0]
 810f752:	3302      	addmi	r3, #2
 810f754:	6033      	strmi	r3, [r6, #0]
 810f756:	6825      	ldr	r5, [r4, #0]
 810f758:	f015 0506 	ands.w	r5, r5, #6
 810f75c:	d106      	bne.n	810f76c <_printf_common+0x48>
 810f75e:	f104 0a19 	add.w	sl, r4, #25
 810f762:	68e3      	ldr	r3, [r4, #12]
 810f764:	6832      	ldr	r2, [r6, #0]
 810f766:	1a9b      	subs	r3, r3, r2
 810f768:	42ab      	cmp	r3, r5
 810f76a:	dc26      	bgt.n	810f7ba <_printf_common+0x96>
 810f76c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 810f770:	6822      	ldr	r2, [r4, #0]
 810f772:	3b00      	subs	r3, #0
 810f774:	bf18      	it	ne
 810f776:	2301      	movne	r3, #1
 810f778:	0692      	lsls	r2, r2, #26
 810f77a:	d42b      	bmi.n	810f7d4 <_printf_common+0xb0>
 810f77c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 810f780:	4641      	mov	r1, r8
 810f782:	4638      	mov	r0, r7
 810f784:	47c8      	blx	r9
 810f786:	3001      	adds	r0, #1
 810f788:	d01e      	beq.n	810f7c8 <_printf_common+0xa4>
 810f78a:	6823      	ldr	r3, [r4, #0]
 810f78c:	6922      	ldr	r2, [r4, #16]
 810f78e:	f003 0306 	and.w	r3, r3, #6
 810f792:	2b04      	cmp	r3, #4
 810f794:	bf02      	ittt	eq
 810f796:	68e5      	ldreq	r5, [r4, #12]
 810f798:	6833      	ldreq	r3, [r6, #0]
 810f79a:	1aed      	subeq	r5, r5, r3
 810f79c:	68a3      	ldr	r3, [r4, #8]
 810f79e:	bf0c      	ite	eq
 810f7a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810f7a4:	2500      	movne	r5, #0
 810f7a6:	4293      	cmp	r3, r2
 810f7a8:	bfc4      	itt	gt
 810f7aa:	1a9b      	subgt	r3, r3, r2
 810f7ac:	18ed      	addgt	r5, r5, r3
 810f7ae:	2600      	movs	r6, #0
 810f7b0:	341a      	adds	r4, #26
 810f7b2:	42b5      	cmp	r5, r6
 810f7b4:	d11a      	bne.n	810f7ec <_printf_common+0xc8>
 810f7b6:	2000      	movs	r0, #0
 810f7b8:	e008      	b.n	810f7cc <_printf_common+0xa8>
 810f7ba:	2301      	movs	r3, #1
 810f7bc:	4652      	mov	r2, sl
 810f7be:	4641      	mov	r1, r8
 810f7c0:	4638      	mov	r0, r7
 810f7c2:	47c8      	blx	r9
 810f7c4:	3001      	adds	r0, #1
 810f7c6:	d103      	bne.n	810f7d0 <_printf_common+0xac>
 810f7c8:	f04f 30ff 	mov.w	r0, #4294967295
 810f7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f7d0:	3501      	adds	r5, #1
 810f7d2:	e7c6      	b.n	810f762 <_printf_common+0x3e>
 810f7d4:	18e1      	adds	r1, r4, r3
 810f7d6:	1c5a      	adds	r2, r3, #1
 810f7d8:	2030      	movs	r0, #48	@ 0x30
 810f7da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 810f7de:	4422      	add	r2, r4
 810f7e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810f7e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 810f7e8:	3302      	adds	r3, #2
 810f7ea:	e7c7      	b.n	810f77c <_printf_common+0x58>
 810f7ec:	2301      	movs	r3, #1
 810f7ee:	4622      	mov	r2, r4
 810f7f0:	4641      	mov	r1, r8
 810f7f2:	4638      	mov	r0, r7
 810f7f4:	47c8      	blx	r9
 810f7f6:	3001      	adds	r0, #1
 810f7f8:	d0e6      	beq.n	810f7c8 <_printf_common+0xa4>
 810f7fa:	3601      	adds	r6, #1
 810f7fc:	e7d9      	b.n	810f7b2 <_printf_common+0x8e>
	...

0810f800 <_printf_i>:
 810f800:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810f804:	7e0f      	ldrb	r7, [r1, #24]
 810f806:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810f808:	2f78      	cmp	r7, #120	@ 0x78
 810f80a:	4691      	mov	r9, r2
 810f80c:	4680      	mov	r8, r0
 810f80e:	460c      	mov	r4, r1
 810f810:	469a      	mov	sl, r3
 810f812:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810f816:	d807      	bhi.n	810f828 <_printf_i+0x28>
 810f818:	2f62      	cmp	r7, #98	@ 0x62
 810f81a:	d80a      	bhi.n	810f832 <_printf_i+0x32>
 810f81c:	2f00      	cmp	r7, #0
 810f81e:	f000 80d2 	beq.w	810f9c6 <_printf_i+0x1c6>
 810f822:	2f58      	cmp	r7, #88	@ 0x58
 810f824:	f000 80b9 	beq.w	810f99a <_printf_i+0x19a>
 810f828:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f82c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 810f830:	e03a      	b.n	810f8a8 <_printf_i+0xa8>
 810f832:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810f836:	2b15      	cmp	r3, #21
 810f838:	d8f6      	bhi.n	810f828 <_printf_i+0x28>
 810f83a:	a101      	add	r1, pc, #4	@ (adr r1, 810f840 <_printf_i+0x40>)
 810f83c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 810f840:	0810f899 	.word	0x0810f899
 810f844:	0810f8ad 	.word	0x0810f8ad
 810f848:	0810f829 	.word	0x0810f829
 810f84c:	0810f829 	.word	0x0810f829
 810f850:	0810f829 	.word	0x0810f829
 810f854:	0810f829 	.word	0x0810f829
 810f858:	0810f8ad 	.word	0x0810f8ad
 810f85c:	0810f829 	.word	0x0810f829
 810f860:	0810f829 	.word	0x0810f829
 810f864:	0810f829 	.word	0x0810f829
 810f868:	0810f829 	.word	0x0810f829
 810f86c:	0810f9ad 	.word	0x0810f9ad
 810f870:	0810f8d7 	.word	0x0810f8d7
 810f874:	0810f967 	.word	0x0810f967
 810f878:	0810f829 	.word	0x0810f829
 810f87c:	0810f829 	.word	0x0810f829
 810f880:	0810f9cf 	.word	0x0810f9cf
 810f884:	0810f829 	.word	0x0810f829
 810f888:	0810f8d7 	.word	0x0810f8d7
 810f88c:	0810f829 	.word	0x0810f829
 810f890:	0810f829 	.word	0x0810f829
 810f894:	0810f96f 	.word	0x0810f96f
 810f898:	6833      	ldr	r3, [r6, #0]
 810f89a:	1d1a      	adds	r2, r3, #4
 810f89c:	681b      	ldr	r3, [r3, #0]
 810f89e:	6032      	str	r2, [r6, #0]
 810f8a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810f8a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 810f8a8:	2301      	movs	r3, #1
 810f8aa:	e09d      	b.n	810f9e8 <_printf_i+0x1e8>
 810f8ac:	6833      	ldr	r3, [r6, #0]
 810f8ae:	6820      	ldr	r0, [r4, #0]
 810f8b0:	1d19      	adds	r1, r3, #4
 810f8b2:	6031      	str	r1, [r6, #0]
 810f8b4:	0606      	lsls	r6, r0, #24
 810f8b6:	d501      	bpl.n	810f8bc <_printf_i+0xbc>
 810f8b8:	681d      	ldr	r5, [r3, #0]
 810f8ba:	e003      	b.n	810f8c4 <_printf_i+0xc4>
 810f8bc:	0645      	lsls	r5, r0, #25
 810f8be:	d5fb      	bpl.n	810f8b8 <_printf_i+0xb8>
 810f8c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 810f8c4:	2d00      	cmp	r5, #0
 810f8c6:	da03      	bge.n	810f8d0 <_printf_i+0xd0>
 810f8c8:	232d      	movs	r3, #45	@ 0x2d
 810f8ca:	426d      	negs	r5, r5
 810f8cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f8d0:	4859      	ldr	r0, [pc, #356]	@ (810fa38 <_printf_i+0x238>)
 810f8d2:	230a      	movs	r3, #10
 810f8d4:	e011      	b.n	810f8fa <_printf_i+0xfa>
 810f8d6:	6821      	ldr	r1, [r4, #0]
 810f8d8:	6833      	ldr	r3, [r6, #0]
 810f8da:	0608      	lsls	r0, r1, #24
 810f8dc:	f853 5b04 	ldr.w	r5, [r3], #4
 810f8e0:	d402      	bmi.n	810f8e8 <_printf_i+0xe8>
 810f8e2:	0649      	lsls	r1, r1, #25
 810f8e4:	bf48      	it	mi
 810f8e6:	b2ad      	uxthmi	r5, r5
 810f8e8:	2f6f      	cmp	r7, #111	@ 0x6f
 810f8ea:	4853      	ldr	r0, [pc, #332]	@ (810fa38 <_printf_i+0x238>)
 810f8ec:	6033      	str	r3, [r6, #0]
 810f8ee:	bf14      	ite	ne
 810f8f0:	230a      	movne	r3, #10
 810f8f2:	2308      	moveq	r3, #8
 810f8f4:	2100      	movs	r1, #0
 810f8f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810f8fa:	6866      	ldr	r6, [r4, #4]
 810f8fc:	60a6      	str	r6, [r4, #8]
 810f8fe:	2e00      	cmp	r6, #0
 810f900:	bfa2      	ittt	ge
 810f902:	6821      	ldrge	r1, [r4, #0]
 810f904:	f021 0104 	bicge.w	r1, r1, #4
 810f908:	6021      	strge	r1, [r4, #0]
 810f90a:	b90d      	cbnz	r5, 810f910 <_printf_i+0x110>
 810f90c:	2e00      	cmp	r6, #0
 810f90e:	d04b      	beq.n	810f9a8 <_printf_i+0x1a8>
 810f910:	4616      	mov	r6, r2
 810f912:	fbb5 f1f3 	udiv	r1, r5, r3
 810f916:	fb03 5711 	mls	r7, r3, r1, r5
 810f91a:	5dc7      	ldrb	r7, [r0, r7]
 810f91c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 810f920:	462f      	mov	r7, r5
 810f922:	42bb      	cmp	r3, r7
 810f924:	460d      	mov	r5, r1
 810f926:	d9f4      	bls.n	810f912 <_printf_i+0x112>
 810f928:	2b08      	cmp	r3, #8
 810f92a:	d10b      	bne.n	810f944 <_printf_i+0x144>
 810f92c:	6823      	ldr	r3, [r4, #0]
 810f92e:	07df      	lsls	r7, r3, #31
 810f930:	d508      	bpl.n	810f944 <_printf_i+0x144>
 810f932:	6923      	ldr	r3, [r4, #16]
 810f934:	6861      	ldr	r1, [r4, #4]
 810f936:	4299      	cmp	r1, r3
 810f938:	bfde      	ittt	le
 810f93a:	2330      	movle	r3, #48	@ 0x30
 810f93c:	f806 3c01 	strble.w	r3, [r6, #-1]
 810f940:	f106 36ff 	addle.w	r6, r6, #4294967295
 810f944:	1b92      	subs	r2, r2, r6
 810f946:	6122      	str	r2, [r4, #16]
 810f948:	f8cd a000 	str.w	sl, [sp]
 810f94c:	464b      	mov	r3, r9
 810f94e:	aa03      	add	r2, sp, #12
 810f950:	4621      	mov	r1, r4
 810f952:	4640      	mov	r0, r8
 810f954:	f7ff fee6 	bl	810f724 <_printf_common>
 810f958:	3001      	adds	r0, #1
 810f95a:	d14a      	bne.n	810f9f2 <_printf_i+0x1f2>
 810f95c:	f04f 30ff 	mov.w	r0, #4294967295
 810f960:	b004      	add	sp, #16
 810f962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810f966:	6823      	ldr	r3, [r4, #0]
 810f968:	f043 0320 	orr.w	r3, r3, #32
 810f96c:	6023      	str	r3, [r4, #0]
 810f96e:	4833      	ldr	r0, [pc, #204]	@ (810fa3c <_printf_i+0x23c>)
 810f970:	2778      	movs	r7, #120	@ 0x78
 810f972:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810f976:	6823      	ldr	r3, [r4, #0]
 810f978:	6831      	ldr	r1, [r6, #0]
 810f97a:	061f      	lsls	r7, r3, #24
 810f97c:	f851 5b04 	ldr.w	r5, [r1], #4
 810f980:	d402      	bmi.n	810f988 <_printf_i+0x188>
 810f982:	065f      	lsls	r7, r3, #25
 810f984:	bf48      	it	mi
 810f986:	b2ad      	uxthmi	r5, r5
 810f988:	6031      	str	r1, [r6, #0]
 810f98a:	07d9      	lsls	r1, r3, #31
 810f98c:	bf44      	itt	mi
 810f98e:	f043 0320 	orrmi.w	r3, r3, #32
 810f992:	6023      	strmi	r3, [r4, #0]
 810f994:	b11d      	cbz	r5, 810f99e <_printf_i+0x19e>
 810f996:	2310      	movs	r3, #16
 810f998:	e7ac      	b.n	810f8f4 <_printf_i+0xf4>
 810f99a:	4827      	ldr	r0, [pc, #156]	@ (810fa38 <_printf_i+0x238>)
 810f99c:	e7e9      	b.n	810f972 <_printf_i+0x172>
 810f99e:	6823      	ldr	r3, [r4, #0]
 810f9a0:	f023 0320 	bic.w	r3, r3, #32
 810f9a4:	6023      	str	r3, [r4, #0]
 810f9a6:	e7f6      	b.n	810f996 <_printf_i+0x196>
 810f9a8:	4616      	mov	r6, r2
 810f9aa:	e7bd      	b.n	810f928 <_printf_i+0x128>
 810f9ac:	6833      	ldr	r3, [r6, #0]
 810f9ae:	6825      	ldr	r5, [r4, #0]
 810f9b0:	6961      	ldr	r1, [r4, #20]
 810f9b2:	1d18      	adds	r0, r3, #4
 810f9b4:	6030      	str	r0, [r6, #0]
 810f9b6:	062e      	lsls	r6, r5, #24
 810f9b8:	681b      	ldr	r3, [r3, #0]
 810f9ba:	d501      	bpl.n	810f9c0 <_printf_i+0x1c0>
 810f9bc:	6019      	str	r1, [r3, #0]
 810f9be:	e002      	b.n	810f9c6 <_printf_i+0x1c6>
 810f9c0:	0668      	lsls	r0, r5, #25
 810f9c2:	d5fb      	bpl.n	810f9bc <_printf_i+0x1bc>
 810f9c4:	8019      	strh	r1, [r3, #0]
 810f9c6:	2300      	movs	r3, #0
 810f9c8:	6123      	str	r3, [r4, #16]
 810f9ca:	4616      	mov	r6, r2
 810f9cc:	e7bc      	b.n	810f948 <_printf_i+0x148>
 810f9ce:	6833      	ldr	r3, [r6, #0]
 810f9d0:	1d1a      	adds	r2, r3, #4
 810f9d2:	6032      	str	r2, [r6, #0]
 810f9d4:	681e      	ldr	r6, [r3, #0]
 810f9d6:	6862      	ldr	r2, [r4, #4]
 810f9d8:	2100      	movs	r1, #0
 810f9da:	4630      	mov	r0, r6
 810f9dc:	f7f0 fc88 	bl	81002f0 <memchr>
 810f9e0:	b108      	cbz	r0, 810f9e6 <_printf_i+0x1e6>
 810f9e2:	1b80      	subs	r0, r0, r6
 810f9e4:	6060      	str	r0, [r4, #4]
 810f9e6:	6863      	ldr	r3, [r4, #4]
 810f9e8:	6123      	str	r3, [r4, #16]
 810f9ea:	2300      	movs	r3, #0
 810f9ec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810f9f0:	e7aa      	b.n	810f948 <_printf_i+0x148>
 810f9f2:	6923      	ldr	r3, [r4, #16]
 810f9f4:	4632      	mov	r2, r6
 810f9f6:	4649      	mov	r1, r9
 810f9f8:	4640      	mov	r0, r8
 810f9fa:	47d0      	blx	sl
 810f9fc:	3001      	adds	r0, #1
 810f9fe:	d0ad      	beq.n	810f95c <_printf_i+0x15c>
 810fa00:	6823      	ldr	r3, [r4, #0]
 810fa02:	079b      	lsls	r3, r3, #30
 810fa04:	d413      	bmi.n	810fa2e <_printf_i+0x22e>
 810fa06:	68e0      	ldr	r0, [r4, #12]
 810fa08:	9b03      	ldr	r3, [sp, #12]
 810fa0a:	4298      	cmp	r0, r3
 810fa0c:	bfb8      	it	lt
 810fa0e:	4618      	movlt	r0, r3
 810fa10:	e7a6      	b.n	810f960 <_printf_i+0x160>
 810fa12:	2301      	movs	r3, #1
 810fa14:	4632      	mov	r2, r6
 810fa16:	4649      	mov	r1, r9
 810fa18:	4640      	mov	r0, r8
 810fa1a:	47d0      	blx	sl
 810fa1c:	3001      	adds	r0, #1
 810fa1e:	d09d      	beq.n	810f95c <_printf_i+0x15c>
 810fa20:	3501      	adds	r5, #1
 810fa22:	68e3      	ldr	r3, [r4, #12]
 810fa24:	9903      	ldr	r1, [sp, #12]
 810fa26:	1a5b      	subs	r3, r3, r1
 810fa28:	42ab      	cmp	r3, r5
 810fa2a:	dcf2      	bgt.n	810fa12 <_printf_i+0x212>
 810fa2c:	e7eb      	b.n	810fa06 <_printf_i+0x206>
 810fa2e:	2500      	movs	r5, #0
 810fa30:	f104 0619 	add.w	r6, r4, #25
 810fa34:	e7f5      	b.n	810fa22 <_printf_i+0x222>
 810fa36:	bf00      	nop
 810fa38:	0810fe99 	.word	0x0810fe99
 810fa3c:	0810feaa 	.word	0x0810feaa

0810fa40 <_sbrk_r>:
 810fa40:	b538      	push	{r3, r4, r5, lr}
 810fa42:	4d06      	ldr	r5, [pc, #24]	@ (810fa5c <_sbrk_r+0x1c>)
 810fa44:	2300      	movs	r3, #0
 810fa46:	4604      	mov	r4, r0
 810fa48:	4608      	mov	r0, r1
 810fa4a:	602b      	str	r3, [r5, #0]
 810fa4c:	f7f2 fd90 	bl	8102570 <_sbrk>
 810fa50:	1c43      	adds	r3, r0, #1
 810fa52:	d102      	bne.n	810fa5a <_sbrk_r+0x1a>
 810fa54:	682b      	ldr	r3, [r5, #0]
 810fa56:	b103      	cbz	r3, 810fa5a <_sbrk_r+0x1a>
 810fa58:	6023      	str	r3, [r4, #0]
 810fa5a:	bd38      	pop	{r3, r4, r5, pc}
 810fa5c:	10005210 	.word	0x10005210

0810fa60 <_realloc_r>:
 810fa60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810fa64:	4680      	mov	r8, r0
 810fa66:	4615      	mov	r5, r2
 810fa68:	460c      	mov	r4, r1
 810fa6a:	b921      	cbnz	r1, 810fa76 <_realloc_r+0x16>
 810fa6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810fa70:	4611      	mov	r1, r2
 810fa72:	f7ff bc73 	b.w	810f35c <_malloc_r>
 810fa76:	b92a      	cbnz	r2, 810fa84 <_realloc_r+0x24>
 810fa78:	f7ff fc04 	bl	810f284 <_free_r>
 810fa7c:	2400      	movs	r4, #0
 810fa7e:	4620      	mov	r0, r4
 810fa80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810fa84:	f000 f81a 	bl	810fabc <_malloc_usable_size_r>
 810fa88:	4285      	cmp	r5, r0
 810fa8a:	4606      	mov	r6, r0
 810fa8c:	d802      	bhi.n	810fa94 <_realloc_r+0x34>
 810fa8e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 810fa92:	d8f4      	bhi.n	810fa7e <_realloc_r+0x1e>
 810fa94:	4629      	mov	r1, r5
 810fa96:	4640      	mov	r0, r8
 810fa98:	f7ff fc60 	bl	810f35c <_malloc_r>
 810fa9c:	4607      	mov	r7, r0
 810fa9e:	2800      	cmp	r0, #0
 810faa0:	d0ec      	beq.n	810fa7c <_realloc_r+0x1c>
 810faa2:	42b5      	cmp	r5, r6
 810faa4:	462a      	mov	r2, r5
 810faa6:	4621      	mov	r1, r4
 810faa8:	bf28      	it	cs
 810faaa:	4632      	movcs	r2, r6
 810faac:	f7ff fbdc 	bl	810f268 <memcpy>
 810fab0:	4621      	mov	r1, r4
 810fab2:	4640      	mov	r0, r8
 810fab4:	f7ff fbe6 	bl	810f284 <_free_r>
 810fab8:	463c      	mov	r4, r7
 810faba:	e7e0      	b.n	810fa7e <_realloc_r+0x1e>

0810fabc <_malloc_usable_size_r>:
 810fabc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 810fac0:	1f18      	subs	r0, r3, #4
 810fac2:	2b00      	cmp	r3, #0
 810fac4:	bfbc      	itt	lt
 810fac6:	580b      	ldrlt	r3, [r1, r0]
 810fac8:	18c0      	addlt	r0, r0, r3
 810faca:	4770      	bx	lr

0810facc <_init>:
 810facc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810face:	bf00      	nop
 810fad0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fad2:	bc08      	pop	{r3}
 810fad4:	469e      	mov	lr, r3
 810fad6:	4770      	bx	lr

0810fad8 <_fini>:
 810fad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810fada:	bf00      	nop
 810fadc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810fade:	bc08      	pop	{r3}
 810fae0:	469e      	mov	lr, r3
 810fae2:	4770      	bx	lr
