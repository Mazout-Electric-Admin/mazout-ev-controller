
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022eb4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000033f4  08023158  08023158  00024158  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  0802654c  0802654c  0002754c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  080266f4  080266f4  000276f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 000a0c48  90000000  90000000  00029000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000000e  900a0c48  900a0c48  000c9c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802670c  0802670c  000c9c56  2**0
                  CONTENTS
  8 .ARM          00000008  0802670c  0802670c  0002770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08026714  08026714  000c9c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   0000001c  08026714  08026714  00027714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08026730  08026730  00027730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000013c  24000000  08026738  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000140  08026874  00028140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000240  08026974  00028240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00025c54  24000340  08026a74  00028340  2**2
                  ALLOC
 16 ._user_heap_stack 00002004  24025f94  08026a74  00028f94  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  000c9c56  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  000ca000  2**2
                  ALLOC
 19 .debug_info   000d278f  00000000  00000000  000c9c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 000160a3  00000000  00000000  0019c413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003810  00000000  00000000  001b24b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 0000393b  00000000  00000000  001b5cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00051f43  00000000  00000000  001b9603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   00063abf  00000000  00000000  0020b546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001df66c  00000000  00000000  0026f005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0044e671  2**0
                  CONTENTS, READONLY
 27 .debug_frame  00009f60  00000000  00000000  0044e734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0001f07c  00000000  00000000  00458694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 0000006f  00000000  00000000  00477710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0802313c 	.word	0x0802313c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	0802313c 	.word	0x0802313c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80006f8:	4901      	ldr	r1, [pc, #4]	@ (8000700 <vApplicationIdleHook+0x8>)
 80006fa:	2000      	movs	r0, #0
 80006fc:	f00c b928 	b.w	800c950 <vTaskSetApplicationTaskTag>
 8000700:	08001fad 	.word	0x08001fad

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	b09c      	sub	sp, #112	@ 0x70
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000708:	224c      	movs	r2, #76	@ 0x4c
 800070a:	2100      	movs	r1, #0
 800070c:	a809      	add	r0, sp, #36	@ 0x24
 800070e:	f021 ff7f 	bl	8022610 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000712:	2220      	movs	r2, #32
 8000714:	2100      	movs	r1, #0
 8000716:	a801      	add	r0, sp, #4
 8000718:	f021 ff7a 	bl	8022610 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800071c:	2004      	movs	r0, #4
 800071e:	f008 fabb 	bl	8008c98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000722:	2300      	movs	r3, #0
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	4b26      	ldr	r3, [pc, #152]	@ (80007c0 <SystemClock_Config+0xbc>)
 8000728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800072a:	f022 0201 	bic.w	r2, r2, #1
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	9300      	str	r3, [sp, #0]
 8000738:	4b22      	ldr	r3, [pc, #136]	@ (80007c4 <SystemClock_Config+0xc0>)
 800073a:	699a      	ldr	r2, [r3, #24]
 800073c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000740:	619a      	str	r2, [r3, #24]
 8000742:	699a      	ldr	r2, [r3, #24]
 8000744:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000748:	9200      	str	r2, [sp, #0]
 800074a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800074c:	699a      	ldr	r2, [r3, #24]
 800074e:	0491      	lsls	r1, r2, #18
 8000750:	d5fc      	bpl.n	800074c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000752:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000756:	2603      	movs	r6, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000758:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075a:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLN = 64;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 13;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800075c:	220c      	movs	r2, #12
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000760:	9416      	str	r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000762:	e9cd 6309 	strd	r6, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000766:	2301      	movs	r3, #1
 8000768:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLQ = 13;
 800076c:	230d      	movs	r3, #13
  RCC_OscInitStruct.PLL.PLLR = 2;
 800076e:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000772:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000774:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000778:	e9cd 4514 	strd	r4, r5, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800077c:	e9cd 2319 	strd	r2, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000780:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000782:	f008 fd87 	bl	8009294 <HAL_RCC_OscConfig>
 8000786:	b108      	cbz	r0, 800078c <SystemClock_Config+0x88>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000788:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800078a:	e7fe      	b.n	800078a <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800078c:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800078e:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000790:	9003      	str	r0, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000792:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000794:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000796:	e9cd 3601 	strd	r3, r6, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800079a:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800079c:	e9cd 3504 	strd	r3, r5, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007a8:	f009 f910 	bl	80099cc <HAL_RCC_ClockConfig>
 80007ac:	4601      	mov	r1, r0
 80007ae:	b108      	cbz	r0, 80007b4 <SystemClock_Config+0xb0>
 80007b0:	b672      	cpsid	i
  while (1)
 80007b2:	e7fe      	b.n	80007b2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007b4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007b8:	f009 f818 	bl	80097ec <HAL_RCC_MCOConfig>
}
 80007bc:	b01c      	add	sp, #112	@ 0x70
 80007be:	bd70      	pop	{r4, r5, r6, pc}
 80007c0:	58000400 	.word	0x58000400
 80007c4:	58024800 	.word	0x58024800

080007c8 <main>:
{
 80007c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007cc:	b0bd      	sub	sp, #244	@ 0xf4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007ce:	2210      	movs	r2, #16
 80007d0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007d2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d4:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 80007d6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80007d8:	f021 ff1a 	bl	8022610 <memset>
  HAL_MPU_Disable();
 80007dc:	f005 fc2c 	bl	8006038 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007e0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 80007e4:	4bbd      	ldr	r3, [pc, #756]	@ (8000adc <main+0x314>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007e6:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80007e8:	f8ad 40bc 	strh.w	r4, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80007ec:	9432      	str	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 80007ee:	e9cd 1330 	strd	r1, r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f2:	f005 fc3f 	bl	8006074 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007f6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80007f8:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80007fa:	f88d 40bd 	strb.w	r4, [sp, #189]	@ 0xbd
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80007fe:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000802:	f005 fc37 	bl	8006074 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000806:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000808:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800080a:	f88d 40ca 	strb.w	r4, [sp, #202]	@ 0xca
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800080e:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000812:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000816:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000818:	2318      	movs	r3, #24
 800081a:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800081e:	f005 fc29 	bl	8006074 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000822:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000824:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000826:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x24000000;
 800082a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 800082e:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000830:	2312      	movs	r3, #18
 8000832:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000836:	2300      	movs	r3, #0
 8000838:	f88d 30c8 	strb.w	r3, [sp, #200]	@ 0xc8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800083c:	f005 fc1a 	bl	8006074 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000840:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000844:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000846:	f88d 50bd 	strb.w	r5, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10000000;
 800084a:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800084c:	2311      	movs	r3, #17
 800084e:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000852:	f005 fc0f 	bl	8006074 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000856:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000858:	a82f      	add	r0, sp, #188	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800085a:	f88d 40c8 	strb.w	r4, [sp, #200]	@ 0xc8
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 800085e:	f88d 30bd 	strb.w	r3, [sp, #189]	@ 0xbd
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000862:	4b9f      	ldr	r3, [pc, #636]	@ (8000ae0 <main+0x318>)
 8000864:	9330      	str	r3, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000866:	230e      	movs	r3, #14
 8000868:	f88d 30c4 	strb.w	r3, [sp, #196]	@ 0xc4
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800086c:	f005 fc02 	bl	8006074 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000870:	4628      	mov	r0, r5
 8000872:	f005 fbef 	bl	8006054 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000876:	4b9b      	ldr	r3, [pc, #620]	@ (8000ae4 <main+0x31c>)
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 800087e:	d111      	bne.n	80008a4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000880:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000884:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000888:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800088c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000890:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000894:	695a      	ldr	r2, [r3, #20]
 8000896:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800089a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800089c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008a0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008a4:	4a8f      	ldr	r2, [pc, #572]	@ (8000ae4 <main+0x31c>)
 80008a6:	6953      	ldr	r3, [r2, #20]
 80008a8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 80008ac:	d123      	bne.n	80008f6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80008ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008be:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80008c6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008c8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008cc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008ce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008d2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 80008d8:	d2f9      	bcs.n	80008ce <main+0x106>
    } while(sets-- != 0U);
 80008da:	3b20      	subs	r3, #32
 80008dc:	f113 0f20 	cmn.w	r3, #32
 80008e0:	d1f2      	bne.n	80008c8 <main+0x100>
 80008e2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008e6:	6953      	ldr	r3, [r2, #20]
 80008e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ec:	6153      	str	r3, [r2, #20]
 80008ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008f2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 80008f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008fa:	4d7b      	ldr	r5, [pc, #492]	@ (8000ae8 <main+0x320>)
 80008fc:	682c      	ldr	r4, [r5, #0]
 80008fe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000902:	f000 82eb 	beq.w	8000edc <main+0x714>
 8000906:	3b01      	subs	r3, #1
 8000908:	d2f8      	bcs.n	80008fc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 800090a:	b672      	cpsid	i
  while (1)
 800090c:	e7fe      	b.n	800090c <main+0x144>
 800090e:	b672      	cpsid	i
 8000910:	e7fe      	b.n	8000910 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000912:	4876      	ldr	r0, [pc, #472]	@ (8000aec <main+0x324>)
 8000914:	4a76      	ldr	r2, [pc, #472]	@ (8000af0 <main+0x328>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000916:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000918:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 800091a:	e9c0 2900 	strd	r2, r9, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 800091e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000922:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000926:	f008 fad5 	bl	8008ed4 <HAL_QSPI_Init>
 800092a:	b108      	cbz	r0, 8000930 <main+0x168>
 800092c:	b672      	cpsid	i
  while (1)
 800092e:	e7fe      	b.n	800092e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000930:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000934:	a92f      	add	r1, sp, #188	@ 0xbc
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000936:	f88d 40be 	strb.w	r4, [sp, #190]	@ 0xbe
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800093a:	f8ad 30bc 	strh.w	r3, [sp, #188]	@ 0xbc
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 800093e:	f004 fe5b 	bl	80055f8 <BSP_QSPI_Init>
 8000942:	b108      	cbz	r0, 8000948 <main+0x180>
 8000944:	b672      	cpsid	i
  while (1)
 8000946:	e7fe      	b.n	8000946 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000948:	f004 fe02 	bl	8005550 <BSP_QSPI_EnableMemoryMappedMode>
 800094c:	4603      	mov	r3, r0
 800094e:	b108      	cbz	r0, 8000954 <main+0x18c>
 8000950:	b672      	cpsid	i
  while (1)
 8000952:	e7fe      	b.n	8000952 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000954:	4867      	ldr	r0, [pc, #412]	@ (8000af4 <main+0x32c>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000956:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800095a:	f8df c1a4 	ldr.w	ip, [pc, #420]	@ 8000b00 <main+0x338>
  hdma2d.Init.OutputOffset = 0;
 800095e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000962:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000966:	f005 fc12 	bl	800618e <HAL_DMA2D_Init>
 800096a:	4604      	mov	r4, r0
 800096c:	b108      	cbz	r0, 8000972 <main+0x1aa>
 800096e:	b672      	cpsid	i
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000972:	4602      	mov	r2, r0
 8000974:	4641      	mov	r1, r8
 8000976:	4860      	ldr	r0, [pc, #384]	@ (8000af8 <main+0x330>)
 8000978:	f006 faec 	bl	8006f54 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800097c:	4630      	mov	r0, r6
 800097e:	f005 fadf 	bl	8005f40 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000982:	4641      	mov	r1, r8
 8000984:	462a      	mov	r2, r5
 8000986:	485c      	ldr	r0, [pc, #368]	@ (8000af8 <main+0x330>)
 8000988:	f006 fae4 	bl	8006f54 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800098c:	200a      	movs	r0, #10
 800098e:	f005 fad7 	bl	8005f40 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000992:	2224      	movs	r2, #36	@ 0x24
 8000994:	4621      	mov	r1, r4
 8000996:	a819      	add	r0, sp, #100	@ 0x64
 8000998:	f021 fe3a 	bl	8022610 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 800099c:	2218      	movs	r2, #24
 800099e:	4621      	mov	r1, r4
 80009a0:	a813      	add	r0, sp, #76	@ 0x4c
 80009a2:	f021 fe35 	bl	8022610 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 80009a6:	2234      	movs	r2, #52	@ 0x34
 80009a8:	4621      	mov	r1, r4
 80009aa:	a82f      	add	r0, sp, #188	@ 0xbc
 80009ac:	f021 fe30 	bl	8022610 <memset>
  hdsi.Instance = DSI;
 80009b0:	f8df 8148 	ldr.w	r8, [pc, #328]	@ 8000afc <main+0x334>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 80009b4:	4621      	mov	r1, r4
 80009b6:	222c      	movs	r2, #44	@ 0x2c
 80009b8:	a822      	add	r0, sp, #136	@ 0x88
 80009ba:	f021 fe29 	bl	8022610 <memset>
  hdsi.Instance = DSI;
 80009be:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009c2:	a910      	add	r1, sp, #64	@ 0x40
 80009c4:	4640      	mov	r0, r8
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 80009c6:	9512      	str	r5, [sp, #72]	@ 0x48
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 80009c8:	e9c8 3400 	strd	r3, r4, [r8]
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 80009cc:	e9c8 7502 	strd	r7, r5, [r8, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV1;
 80009d0:	e9cd 6510 	strd	r6, r5, [sp, #64]	@ 0x40
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 80009d4:	f005 fd28 	bl	8006428 <HAL_DSI_Init>
 80009d8:	b108      	cbz	r0, 80009de <main+0x216>
 80009da:	b672      	cpsid	i
  while (1)
 80009dc:	e7fe      	b.n	80009dc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 80009de:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedReadTimeout = 0;
 80009e2:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.HighSpeedWriteTimeout = 0;
 80009e6:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.LowPowerWriteTimeout = 0;
 80009ea:	e9cd 001f 	strd	r0, r0, [sp, #124]	@ 0x7c
  HostTimeouts.BTATimeout = 0;
 80009ee:	9021      	str	r0, [sp, #132]	@ 0x84
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 80009f0:	a919      	add	r1, sp, #100	@ 0x64
 80009f2:	4640      	mov	r0, r8
 80009f4:	f005 ff84 	bl	8006900 <HAL_DSI_ConfigHostTimeouts>
 80009f8:	b108      	cbz	r0, 80009fe <main+0x236>
 80009fa:	b672      	cpsid	i
  while (1)
 80009fc:	e7fe      	b.n	80009fc <main+0x234>
  PhyTimings.DataLaneHS2LPTime = 10;
 80009fe:	230a      	movs	r3, #10
 8000a00:	2412      	movs	r4, #18
  PhyTimings.StopWaitTime = 0;
 8000a02:	9018      	str	r0, [sp, #96]	@ 0x60
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a04:	a913      	add	r1, sp, #76	@ 0x4c
  PhyTimings.ClockLaneHS2LPTime = 20;
 8000a06:	9613      	str	r6, [sp, #76]	@ 0x4c
  PhyTimings.DataLaneHS2LPTime = 10;
 8000a08:	e9cd 4314 	strd	r4, r3, [sp, #80]	@ 0x50
  PhyTimings.DataLaneLP2HSTime = 13;
 8000a0c:	230d      	movs	r3, #13
  PhyTimings.DataLaneMaxReadTime = 0;
 8000a0e:	e9cd 3016 	strd	r3, r0, [sp, #88]	@ 0x58
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000a12:	4640      	mov	r0, r8
 8000a14:	f005 ff37 	bl	8006886 <HAL_DSI_ConfigPhyTimer>
 8000a18:	b108      	cbz	r0, 8000a1e <main+0x256>
 8000a1a:	b672      	cpsid	i
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <main+0x254>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000a1e:	2104      	movs	r1, #4
 8000a20:	4836      	ldr	r0, [pc, #216]	@ (8000afc <main+0x334>)
 8000a22:	f005 ff1f 	bl	8006864 <HAL_DSI_ConfigFlowControl>
 8000a26:	b108      	cbz	r0, 8000a2c <main+0x264>
 8000a28:	b672      	cpsid	i
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <main+0x262>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000a2c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000a30:	4832      	ldr	r0, [pc, #200]	@ (8000afc <main+0x334>)
 8000a32:	f006 f8ee 	bl	8006c12 <HAL_DSI_SetLowPowerRXFilter>
 8000a36:	4601      	mov	r1, r0
 8000a38:	b108      	cbz	r0, 8000a3e <main+0x276>
 8000a3a:	b672      	cpsid	i
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <main+0x274>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000a3e:	482f      	ldr	r0, [pc, #188]	@ (8000afc <main+0x334>)
 8000a40:	f005 fc8f 	bl	8006362 <HAL_DSI_ConfigErrorMonitor>
 8000a44:	b108      	cbz	r0, 8000a4a <main+0x282>
 8000a46:	b672      	cpsid	i
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <main+0x280>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a4e:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a52:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a56:	f44f 5b80 	mov.w	fp, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a5e:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a62:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a66:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000a6a:	e9cd 932f 	strd	r9, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a6e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000a72:	f8cd 80ec 	str.w	r8, [sp, #236]	@ 0xec
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000a76:	e9cd a331 	strd	sl, r3, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000a7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a7e:	e9cd b333 	strd	fp, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a86:	e9cd 2335 	strd	r2, r3, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000a8a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000a8e:	e9cd 1337 	strd	r1, r3, [sp, #220]	@ 0xdc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a92:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a96:	a92f      	add	r1, sp, #188	@ 0xbc
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000a98:	e9cd 0339 	strd	r0, r3, [sp, #228]	@ 0xe4
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000a9c:	4817      	ldr	r0, [pc, #92]	@ (8000afc <main+0x334>)
 8000a9e:	f005 fead 	bl	80067fc <HAL_DSI_ConfigCommand>
 8000aa2:	b108      	cbz	r0, 8000aa8 <main+0x2e0>
 8000aa4:	b672      	cpsid	i
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <main+0x2de>
  CmdCfg.CommandSize = 400;
 8000aa8:	2305      	movs	r3, #5
 8000aaa:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000aae:	2601      	movs	r6, #1
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000ab0:	a922      	add	r1, sp, #136	@ 0x88
  CmdCfg.VirtualChannelID = 0;
 8000ab2:	9022      	str	r0, [sp, #136]	@ 0x88
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000ab4:	9029      	str	r0, [sp, #164]	@ 0xa4
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000ab6:	962c      	str	r6, [sp, #176]	@ 0xb0
  CmdCfg.CommandSize = 400;
 8000ab8:	e9cd 3723 	strd	r3, r7, [sp, #140]	@ 0x8c
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000abc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000abe:	e9cd 3025 	strd	r3, r0, [sp, #148]	@ 0x94
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000ac2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000ac4:	e9cd 0027 	strd	r0, r0, [sp, #156]	@ 0x9c
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000ac8:	e9cd 302a 	strd	r3, r0, [sp, #168]	@ 0xa8
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000acc:	480b      	ldr	r0, [pc, #44]	@ (8000afc <main+0x334>)
 8000ace:	f005 fe23 	bl	8006718 <HAL_DSI_ConfigAdaptedCommandMode>
 8000ad2:	4601      	mov	r1, r0
 8000ad4:	b1b0      	cbz	r0, 8000b04 <main+0x33c>
 8000ad6:	b672      	cpsid	i
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <main+0x310>
 8000ada:	bf00      	nop
 8000adc:	0300001b 	.word	0x0300001b
 8000ae0:	10040000 	.word	0x10040000
 8000ae4:	e000ed00 	.word	0xe000ed00
 8000ae8:	58024400 	.word	0x58024400
 8000aec:	240003c8 	.word	0x240003c8
 8000af0:	52005000 	.word	0x52005000
 8000af4:	24000608 	.word	0x24000608
 8000af8:	58021800 	.word	0x58021800
 8000afc:	240005ec 	.word	0x240005ec
 8000b00:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000b04:	485b      	ldr	r0, [pc, #364]	@ (8000c74 <main+0x4ac>)
 8000b06:	f005 fdf6 	bl	80066f6 <HAL_DSI_SetGenericVCID>
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	b108      	cbz	r0, 8000b12 <main+0x34a>
 8000b0e:	b672      	cpsid	i
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <main+0x348>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b12:	2234      	movs	r2, #52	@ 0x34
 8000b14:	4601      	mov	r1, r0
 8000b16:	a822      	add	r0, sp, #136	@ 0x88
  hltdc.Instance = LTDC;
 8000b18:	4d57      	ldr	r5, [pc, #348]	@ (8000c78 <main+0x4b0>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b1a:	f021 fd79 	bl	8022610 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b1e:	f8df c198 	ldr.w	ip, [pc, #408]	@ 8000cb8 <main+0x4f0>
 8000b22:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000b26:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000b2a:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b2e:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000b30:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000b32:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000b36:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000b3a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b3e:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b42:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000b46:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000b4a:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000b4e:	f240 1893 	movw	r8, #403	@ 0x193
 8000b52:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000b56:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000b5a:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000b5e:	f007 fd6b 	bl	8008638 <HAL_LTDC_Init>
 8000b62:	4602      	mov	r2, r0
 8000b64:	b108      	cbz	r0, 8000b6a <main+0x3a2>
 8000b66:	b672      	cpsid	i
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <main+0x3a0>
  pLayerCfg.Alpha = 255;
 8000b6a:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.WindowY0 = 0;
 8000b6c:	9024      	str	r0, [sp, #144]	@ 0x90
  pLayerCfg.WindowY1 = 480;
 8000b6e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.Backcolor.Blue = 0;
 8000b72:	f8ad 20b8 	strh.w	r2, [sp, #184]	@ 0xb8
  pLayerCfg.Backcolor.Red = 0;
 8000b76:	f88d 20ba 	strb.w	r2, [sp, #186]	@ 0xba
  pLayerCfg.ImageHeight = 480;
 8000b7a:	932d      	str	r3, [sp, #180]	@ 0xb4
  pLayerCfg.Alpha0 = 0;
 8000b7c:	e9cd 1027 	strd	r1, r0, [sp, #156]	@ 0x9c
  pLayerCfg.WindowX1 = 400;
 8000b80:	e9cd 0722 	strd	r0, r7, [sp, #136]	@ 0x88
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000b84:	2107      	movs	r1, #7
 8000b86:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8000b8a:	e9cd 0129 	strd	r0, r1, [sp, #164]	@ 0xa4
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000b8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b92:	4628      	mov	r0, r5
  pLayerCfg.ImageWidth = 400;
 8000b94:	e9cd 172b 	strd	r1, r7, [sp, #172]	@ 0xac
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b98:	a922      	add	r1, sp, #136	@ 0x88
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000b9a:	e9cd 3625 	strd	r3, r6, [sp, #148]	@ 0x94
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b9e:	f007 fe17 	bl	80087d0 <HAL_LTDC_ConfigLayer>
 8000ba2:	4604      	mov	r4, r0
 8000ba4:	b108      	cbz	r0, 8000baa <main+0x3e2>
 8000ba6:	b672      	cpsid	i
  while (1)
 8000ba8:	e7fe      	b.n	8000ba8 <main+0x3e0>
  __HAL_LTDC_DISABLE(&hltdc);
 8000baa:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000bac:	4831      	ldr	r0, [pc, #196]	@ (8000c74 <main+0x4ac>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000bae:	6993      	ldr	r3, [r2, #24]
 8000bb0:	f023 0301 	bic.w	r3, r3, #1
 8000bb4:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000bb6:	f005 ff09 	bl	80069cc <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000bba:	4930      	ldr	r1, [pc, #192]	@ (8000c7c <main+0x4b4>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bbc:	4b30      	ldr	r3, [pc, #192]	@ (8000c80 <main+0x4b8>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bbe:	4831      	ldr	r0, [pc, #196]	@ (8000c84 <main+0x4bc>)
  IOCtx.GetTick     = BSP_GetTick;
 8000bc0:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc2:	4b31      	ldr	r3, [pc, #196]	@ (8000c88 <main+0x4c0>)
  IOCtx.Address     = 0;
 8000bc4:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000bc6:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000bc8:	4b30      	ldr	r3, [pc, #192]	@ (8000c8c <main+0x4c4>)
 8000bca:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000bcc:	f004 fab8 	bl	8005140 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000bd0:	4632      	mov	r2, r6
 8000bd2:	4621      	mov	r1, r4
 8000bd4:	482b      	ldr	r0, [pc, #172]	@ (8000c84 <main+0x4bc>)
 8000bd6:	f003 ff23 	bl	8004a20 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000bda:	2328      	movs	r3, #40	@ 0x28
 8000bdc:	2215      	movs	r2, #21
 8000bde:	4621      	mov	r1, r4
 8000be0:	4824      	ldr	r0, [pc, #144]	@ (8000c74 <main+0x4ac>)
 8000be2:	9400      	str	r4, [sp, #0]
 8000be4:	f005 ff25 	bl	8006a32 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000be8:	a92f      	add	r1, sp, #188	@ 0xbc
 8000bea:	4822      	ldr	r0, [pc, #136]	@ (8000c74 <main+0x4ac>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000bec:	9439      	str	r4, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000bee:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000bf2:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000bf6:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000bfa:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000bfe:	e9cd 4437 	strd	r4, r4, [sp, #220]	@ 0xdc
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000c02:	f005 fdfb 	bl	80067fc <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000c06:	4622      	mov	r2, r4
 8000c08:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000c0c:	4628      	mov	r0, r5
 8000c0e:	f007 fe0d 	bl	800882c <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000c12:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000c14:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <main+0x4c8>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000c16:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000c18:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000c1a:	f043 0301 	orr.w	r3, r3, #1
 8000c1e:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000c20:	4b1c      	ldr	r3, [pc, #112]	@ (8000c94 <main+0x4cc>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000c22:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000c24:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000c26:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c2a:	f005 fa4f 	bl	80060cc <HAL_CRC_Init>
 8000c2e:	b108      	cbz	r0, 8000c34 <main+0x46c>
 8000c30:	b672      	cpsid	i
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <main+0x46a>
  hjpeg.Instance = JPEG;
 8000c34:	4818      	ldr	r0, [pc, #96]	@ (8000c98 <main+0x4d0>)
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <main+0x4d4>)
 8000c38:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000c3a:	f006 fee5 	bl	8007a08 <HAL_JPEG_Init>
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x47c>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x47a>
  MX_TouchGFX_Init();
 8000c44:	f000 fd9a 	bl	800177c <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000c48:	f000 fd97 	bl	800177a <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
 8000c4c:	f00a f922 	bl	800ae94 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c50:	4a13      	ldr	r2, [pc, #76]	@ (8000ca0 <main+0x4d8>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4813      	ldr	r0, [pc, #76]	@ (8000ca4 <main+0x4dc>)
 8000c56:	f00a f949 	bl	800aeec <osThreadNew>
 8000c5a:	4b13      	ldr	r3, [pc, #76]	@ (8000ca8 <main+0x4e0>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c5c:	4a13      	ldr	r2, [pc, #76]	@ (8000cac <main+0x4e4>)
 8000c5e:	2100      	movs	r1, #0
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000c60:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000c62:	4813      	ldr	r0, [pc, #76]	@ (8000cb0 <main+0x4e8>)
 8000c64:	f00a f942 	bl	800aeec <osThreadNew>
 8000c68:	4b12      	ldr	r3, [pc, #72]	@ (8000cb4 <main+0x4ec>)
 8000c6a:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000c6c:	f00a f924 	bl	800aeb8 <osKernelStart>
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x4a8>
 8000c72:	bf00      	nop
 8000c74:	240005ec 	.word	0x240005ec
 8000c78:	24000414 	.word	0x24000414
 8000c7c:	2400035c 	.word	0x2400035c
 8000c80:	08005521 	.word	0x08005521
 8000c84:	2400036c 	.word	0x2400036c
 8000c88:	08001cad 	.word	0x08001cad
 8000c8c:	08001ce5 	.word	0x08001ce5
 8000c90:	24000670 	.word	0x24000670
 8000c94:	58024c00 	.word	0x58024c00
 8000c98:	24000594 	.word	0x24000594
 8000c9c:	52003000 	.word	0x52003000
 8000ca0:	080231d4 	.word	0x080231d4
 8000ca4:	0800178b 	.word	0x0800178b
 8000ca8:	24000390 	.word	0x24000390
 8000cac:	080231b0 	.word	0x080231b0
 8000cb0:	08003849 	.word	0x08003849
 8000cb4:	2400038c 	.word	0x2400038c
 8000cb8:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	2614      	movs	r6, #20
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	a82f      	add	r0, sp, #188	@ 0xbc
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc4:	4632      	mov	r2, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cc6:	f04f 0a00 	mov.w	sl, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cca:	f021 fca1 	bl	8022610 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cce:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f241 0108 	movw	r1, #4104	@ 0x1008
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000cdc:	4890      	ldr	r0, [pc, #576]	@ (8000f20 <main+0x758>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	f04f 0903 	mov.w	r9, #3
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce2:	2702      	movs	r7, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000ce4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	f44f 7b80 	mov.w	fp, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cec:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8000cf0:	f04f 0808 	mov.w	r8, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000cf8:	9306      	str	r3, [sp, #24]
 8000cfa:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d08:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d0c:	f003 0302 	and.w	r3, r3, #2
 8000d10:	9307      	str	r3, [sp, #28]
 8000d12:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d14:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d1c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d20:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d28:	9308      	str	r3, [sp, #32]
 8000d2a:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d2c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d38:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	9309      	str	r3, [sp, #36]	@ 0x24
 8000d42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d44:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d4c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d50:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d58:	930a      	str	r3, [sp, #40]	@ 0x28
 8000d5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d5c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d60:	f043 0304 	orr.w	r3, r3, #4
 8000d64:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d68:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000d72:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000d74:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d78:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d80:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d84:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000d88:	930c      	str	r3, [sp, #48]	@ 0x30
 8000d8a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d90:	f043 0308 	orr.w	r3, r3, #8
 8000d94:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000d98:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000d9c:	f003 0308 	and.w	r3, r3, #8
 8000da0:	930d      	str	r3, [sp, #52]	@ 0x34
 8000da2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000db0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	930e      	str	r3, [sp, #56]	@ 0x38
 8000dba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dbc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dc0:	f043 0320 	orr.w	r3, r3, #32
 8000dc4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8000dc8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8000dcc:	f003 0320 	and.w	r3, r3, #32
 8000dd0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8000dd2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8000dd4:	f006 f8be 	bl	8006f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2108      	movs	r1, #8
 8000ddc:	4851      	ldr	r0, [pc, #324]	@ (8000f24 <main+0x75c>)
 8000dde:	f006 f8b9 	bl	8006f54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000de8:	484f      	ldr	r0, [pc, #316]	@ (8000f28 <main+0x760>)
 8000dea:	f006 f8b3 	bl	8006f54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dee:	f241 0308 	movw	r3, #4104	@ 0x1008
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000df2:	a92f      	add	r1, sp, #188	@ 0xbc
 8000df4:	484a      	ldr	r0, [pc, #296]	@ (8000f20 <main+0x758>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	e9cd 352f 	strd	r3, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfa:	e9cd a931 	strd	sl, r9, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000dfe:	f005 ff1f 	bl	8006c40 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e02:	a92f      	add	r1, sp, #188	@ 0xbc
 8000e04:	4849      	ldr	r0, [pc, #292]	@ (8000f2c <main+0x764>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e06:	f8cd a0cc 	str.w	sl, [sp, #204]	@ 0xcc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	e9cd aa31 	strd	sl, sl, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	e9cd b72f 	strd	fp, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f005 ff15 	bl	8006c40 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e16:	a92f      	add	r1, sp, #188	@ 0xbc
 8000e18:	4842      	ldr	r0, [pc, #264]	@ (8000f24 <main+0x75c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 852f 	strd	r8, r5, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	e9cd 5931 	strd	r5, r9, [sp, #196]	@ 0xc4
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f005 ff0d 	bl	8006c40 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e26:	a92f      	add	r1, sp, #188	@ 0xbc
 8000e28:	483f      	ldr	r0, [pc, #252]	@ (8000f28 <main+0x760>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2a:	e9cd a931 	strd	sl, r9, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	e9cd b52f 	strd	fp, r5, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f005 ff05 	bl	8006c40 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e36:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e3a:	4652      	mov	r2, sl
 8000e3c:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e3e:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e40:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 8000e42:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 8000e46:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
 8000e4a:	402b      	ands	r3, r5
 8000e4c:	9305      	str	r3, [sp, #20]
 8000e4e:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8000e50:	f005 f8a0 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8000e54:	207a      	movs	r0, #122	@ 0x7a
 8000e56:	f005 f8cf 	bl	8005ff8 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e5a:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e5e:	4a34      	ldr	r2, [pc, #208]	@ (8000f30 <main+0x768>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000e60:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e64:	432b      	orrs	r3, r5
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e66:	4833      	ldr	r0, [pc, #204]	@ (8000f34 <main+0x76c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e68:	f8c4 30d8 	str.w	r3, [r4, #216]	@ 0xd8
 8000e6c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e70:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e72:	402b      	ands	r3, r5
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	9b04      	ldr	r3, [sp, #16]
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8000e78:	6813      	ldr	r3, [r2, #0]
 8000e7a:	f023 0301 	bic.w	r3, r3, #1
 8000e7e:	6013      	str	r3, [r2, #0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e80:	2204      	movs	r2, #4
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000e82:	4b2d      	ldr	r3, [pc, #180]	@ (8000f38 <main+0x770>)
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000e84:	f8c0 a01c 	str.w	sl, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000e88:	f8c0 a028 	str.w	sl, [r0, #40]	@ 0x28
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8000e8c:	6085      	str	r5, [r0, #8]
  SdramTiming.LoadToActiveDelay = 2;
 8000e8e:	972f      	str	r7, [sp, #188]	@ 0xbc
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000e90:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8000e94:	2320      	movs	r3, #32
 8000e96:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000e9a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000e9e:	e9c0 4305 	strd	r4, r3, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8000ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ea6:	e9c0 1308 	strd	r1, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000eaa:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eac:	a92f      	add	r1, sp, #188	@ 0xbc
  SdramTiming.SelfRefreshTime = 4;
 8000eae:	e9cd 3230 	strd	r3, r2, [sp, #192]	@ 0xc0
  SdramTiming.WriteRecoveryTime = 3;
 8000eb2:	e9cd 3932 	strd	r3, r9, [sp, #200]	@ 0xc8
  SdramTiming.RCDDelay = 2;
 8000eb6:	e9cd 7734 	strd	r7, r7, [sp, #208]	@ 0xd0
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000eba:	f009 fd1b 	bl	800a8f4 <HAL_SDRAM_Init>
 8000ebe:	4682      	mov	sl, r0
 8000ec0:	2800      	cmp	r0, #0
 8000ec2:	f47f ad24 	bne.w	800090e <main+0x146>
  BSP_SDRAM_DeInit(0);
 8000ec6:	f004 fd51 	bl	800596c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8000eca:	4650      	mov	r0, sl
 8000ecc:	f004 fd9c 	bl	8005a08 <BSP_SDRAM_Init>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2800      	cmp	r0, #0
 8000ed4:	f43f ad1d 	beq.w	8000912 <main+0x14a>
 8000ed8:	b672      	cpsid	i
  while (1)
 8000eda:	e7fe      	b.n	8000eda <main+0x712>
  HAL_Init();
 8000edc:	f004 fff0 	bl	8005ec0 <HAL_Init>
  SystemClock_Config();
 8000ee0:	f7ff fc10 	bl	8000704 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ee4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ee8:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8000eea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000eee:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8000ef2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8000ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	9303      	str	r3, [sp, #12]
 8000efc:	9b03      	ldr	r3, [sp, #12]
HAL_HSEM_FastTake(HSEM_ID_0);
 8000efe:	f006 f837 	bl	8006f70 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f02:	4621      	mov	r1, r4
 8000f04:	4620      	mov	r0, r4
 8000f06:	f006 f841 	bl	8006f8c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000f3c <main+0x774>)
timeout = 0xFFFF;
 8000f0c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f10:	6822      	ldr	r2, [r4, #0]
 8000f12:	0412      	lsls	r2, r2, #16
 8000f14:	f53f aed2 	bmi.w	8000cbc <main+0x4f4>
 8000f18:	3b01      	subs	r3, #1
 8000f1a:	d2f9      	bcs.n	8000f10 <main+0x748>
 8000f1c:	b672      	cpsid	i
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <main+0x756>
 8000f20:	58022400 	.word	0x58022400
 8000f24:	58021800 	.word	0x58021800
 8000f28:	58021400 	.word	0x58021400
 8000f2c:	58020000 	.word	0x58020000
 8000f30:	52004000 	.word	0x52004000
 8000f34:	24000394 	.word	0x24000394
 8000f38:	52004140 	.word	0x52004140
 8000f3c:	58024400 	.word	0x58024400

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	4b03      	ldr	r3, [pc, #12]	@ (8000f50 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d101      	bne.n	8000f4c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8000f48:	f004 bfe8 	b.w	8005f1c <HAL_IncTick>
}
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000

08000f54 <Error_Handler>:
 8000f54:	b672      	cpsid	i
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <Error_Handler+0x2>

08000f58 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f58:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <HAL_MspInit+0x2c>)
{
 8000f5a:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f5c:	210f      	movs	r1, #15
 8000f5e:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8000f66:	f042 0202 	orr.w	r2, r2, #2
 8000f6a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f6e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f7e:	f005 b809 	b.w	8005f94 <HAL_NVIC_SetPriority>
 8000f82:	bf00      	nop
 8000f84:	58024400 	.word	0x58024400

08000f88 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8000f88:	6802      	ldr	r2, [r0, #0]
{
 8000f8a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8000f8c:	4b09      	ldr	r3, [pc, #36]	@ (8000fb4 <HAL_CRC_MspInit+0x2c>)
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d10d      	bne.n	8000fae <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f92:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f96:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8000f9a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8000f9e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8000fa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fa6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000faa:	9301      	str	r3, [sp, #4]
 8000fac:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fae:	b002      	add	sp, #8
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	58024c00 	.word	0x58024c00

08000fb8 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8000fb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff8 <HAL_DMA2D_MspInit+0x40>)
{
 8000fba:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8000fbc:	6802      	ldr	r2, [r0, #0]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d117      	bne.n	8000ff2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8000ffc <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fc8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8000fcc:	f042 0210 	orr.w	r2, r2, #16
 8000fd0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fd4:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fd6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000fda:	f003 0310 	and.w	r3, r3, #16
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8000fe2:	f004 ffd7 	bl	8005f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fe6:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000fe8:	b003      	add	sp, #12
 8000fea:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fee:	f005 b803 	b.w	8005ff8 <HAL_NVIC_EnableIRQ>
}
 8000ff2:	b003      	add	sp, #12
 8000ff4:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ff8:	52001000 	.word	0x52001000
 8000ffc:	58024400 	.word	0x58024400

08001000 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001000:	b510      	push	{r4, lr}
 8001002:	b0ba      	sub	sp, #232	@ 0xe8
 8001004:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001006:	2214      	movs	r2, #20
 8001008:	2100      	movs	r1, #0
 800100a:	a803      	add	r0, sp, #12
 800100c:	f021 fb00 	bl	8022610 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001010:	22c8      	movs	r2, #200	@ 0xc8
 8001012:	2100      	movs	r1, #0
 8001014:	a808      	add	r0, sp, #32
 8001016:	f021 fafb 	bl	8022610 <memset>
  if(hdsi->Instance==DSI)
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001020:	d138      	bne.n	8001094 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 8001022:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001026:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001028:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 800102a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800102e:	f008 ff53 	bl	8009ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001032:	b108      	cbz	r0, 8001038 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 8001034:	f7ff ff8e 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800103c:	a903      	add	r1, sp, #12
 800103e:	4817      	ldr	r0, [pc, #92]	@ (800109c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 8001040:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001044:	f042 0210 	orr.w	r2, r2, #16
 8001048:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 800104c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001050:	f002 0210 	and.w	r2, r2, #16
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001058:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800105c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001060:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001064:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800106a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800106e:	9302      	str	r3, [sp, #8]
 8001070:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001078:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800107e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001080:	f005 fdde 	bl	8006c40 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001084:	207b      	movs	r0, #123	@ 0x7b
 8001086:	4622      	mov	r2, r4
 8001088:	2107      	movs	r1, #7
 800108a:	f004 ff83 	bl	8005f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800108e:	207b      	movs	r0, #123	@ 0x7b
 8001090:	f004 ffb2 	bl	8005ff8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001094:	b03a      	add	sp, #232	@ 0xe8
 8001096:	bd10      	pop	{r4, pc}
 8001098:	58024400 	.word	0x58024400
 800109c:	58022400 	.word	0x58022400

080010a0 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 80010a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <HAL_JPEG_MspInit+0xf4>)
{
 80010a4:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 80010a6:	6802      	ldr	r2, [r0, #0]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d170      	bne.n	800118e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001198 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 80010ae:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 80010b0:	4c3a      	ldr	r4, [pc, #232]	@ (800119c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010b2:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010ba:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 80011a8 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80010be:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010c0:	f042 0220 	orr.w	r2, r2, #32
 80010c4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010c8:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 80010ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ce:	f003 0320 	and.w	r3, r3, #32
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 80010d6:	2311      	movs	r3, #17
 80010d8:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 80010dc:	2300      	movs	r3, #0
 80010de:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 80010e2:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010e6:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80010e8:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 80010ea:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 80010ee:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010f2:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 80010f6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 80010fa:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 80010fe:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001102:	f007 fbfe 	bl	8008902 <HAL_MDMA_Init>
 8001106:	b108      	cbz	r0, 800110c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001108:	f7ff ff24 	bl	8000f54 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800110c:	2200      	movs	r2, #0
 800110e:	4823      	ldr	r0, [pc, #140]	@ (800119c <HAL_JPEG_MspInit+0xfc>)
 8001110:	4611      	mov	r1, r2
 8001112:	f007 fc84 	bl	8008a1e <HAL_MDMA_ConfigPostRequestMask>
 8001116:	b108      	cbz	r0, 800111c <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 8001118:	f7ff ff1c 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 800111c:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800111e:	2313      	movs	r3, #19
 8001120:	4a1f      	ldr	r2, [pc, #124]	@ (80011a0 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001122:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 8001124:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001126:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 800112a:	4c1e      	ldr	r4, [pc, #120]	@ (80011a4 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 800112c:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 8001130:	2300      	movs	r3, #0
 8001132:	22c0      	movs	r2, #192	@ 0xc0
 8001134:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 8001138:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 800113a:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 800113c:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 8001140:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 8001144:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 8001148:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 800114c:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 8001150:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 8001152:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 8001156:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 800115a:	f007 fbd2 	bl	8008902 <HAL_MDMA_Init>
 800115e:	b108      	cbz	r0, 8001164 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001160:	f7ff fef8 	bl	8000f54 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001164:	2200      	movs	r2, #0
 8001166:	480f      	ldr	r0, [pc, #60]	@ (80011a4 <HAL_JPEG_MspInit+0x104>)
 8001168:	4611      	mov	r1, r2
 800116a:	f007 fc58 	bl	8008a1e <HAL_MDMA_ConfigPostRequestMask>
 800116e:	b108      	cbz	r0, 8001174 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001170:	f7ff fef0 	bl	8000f54 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001174:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001176:	2200      	movs	r2, #0
 8001178:	2105      	movs	r1, #5
 800117a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800117c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800117e:	f004 ff09 	bl	8005f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001182:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001184:	b003      	add	sp, #12
 8001186:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800118a:	f004 bf35 	b.w	8005ff8 <HAL_NVIC_EnableIRQ>
}
 800118e:	b003      	add	sp, #12
 8001190:	bd30      	pop	{r4, r5, pc}
 8001192:	bf00      	nop
 8001194:	52003000 	.word	0x52003000
 8001198:	58024400 	.word	0x58024400
 800119c:	24000528 	.word	0x24000528
 80011a0:	520001c0 	.word	0x520001c0
 80011a4:	240004bc 	.word	0x240004bc
 80011a8:	52000200 	.word	0x52000200

080011ac <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	b0b4      	sub	sp, #208	@ 0xd0
 80011b0:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011b2:	22c8      	movs	r2, #200	@ 0xc8
 80011b4:	2100      	movs	r1, #0
 80011b6:	a802      	add	r0, sp, #8
 80011b8:	f021 fa2a 	bl	8022610 <memset>
  if(hltdc->Instance==LTDC)
 80011bc:	6822      	ldr	r2, [r4, #0]
 80011be:	4b19      	ldr	r3, [pc, #100]	@ (8001224 <HAL_LTDC_MspInit+0x78>)
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d12d      	bne.n	8001220 <HAL_LTDC_MspInit+0x74>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011c4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80011c8:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3N = 192;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 2;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80011ca:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ce:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 80011d4:	23c0      	movs	r3, #192	@ 0xc0
 80011d6:	2220      	movs	r2, #32
 80011d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 80011dc:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 80011de:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 80011e2:	9310      	str	r3, [sp, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 80011e4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011e8:	e9cd 1311 	strd	r1, r3, [sp, #68]	@ 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ec:	f008 fe74 	bl	8009ed8 <HAL_RCCEx_PeriphCLKConfig>
 80011f0:	b108      	cbz	r0, 80011f6 <HAL_LTDC_MspInit+0x4a>
    {
      Error_Handler();
 80011f2:	f7ff feaf 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <HAL_LTDC_MspInit+0x7c>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80011f8:	2058      	movs	r0, #88	@ 0x58
 80011fa:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011fc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001200:	f042 0208 	orr.w	r2, r2, #8
 8001204:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001208:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800120a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	9301      	str	r3, [sp, #4]
 8001214:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001216:	f004 febd 	bl	8005f94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800121a:	2058      	movs	r0, #88	@ 0x58
 800121c:	f004 feec 	bl	8005ff8 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001220:	b034      	add	sp, #208	@ 0xd0
 8001222:	bd10      	pop	{r4, pc}
 8001224:	50001000 	.word	0x50001000
 8001228:	58024400 	.word	0x58024400

0800122c <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 800122c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800122e:	b0bf      	sub	sp, #252	@ 0xfc
 8001230:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001232:	2214      	movs	r2, #20
 8001234:	2100      	movs	r1, #0
 8001236:	a807      	add	r0, sp, #28
 8001238:	f021 f9ea 	bl	8022610 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	22c8      	movs	r2, #200	@ 0xc8
 800123e:	2100      	movs	r1, #0
 8001240:	a80c      	add	r0, sp, #48	@ 0x30
 8001242:	f021 f9e5 	bl	8022610 <memset>
  if(hqspi->Instance==QUADSPI)
 8001246:	6822      	ldr	r2, [r4, #0]
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_QSPI_MspInit+0x16c>)
 800124a:	429a      	cmp	r2, r3
 800124c:	f040 80a1 	bne.w	8001392 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001250:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001254:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001256:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001258:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800125c:	f008 fe3c 	bl	8009ed8 <HAL_RCCEx_PeriphCLKConfig>
 8001260:	b108      	cbz	r0, 8001266 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 8001262:	f7ff fe77 	bl	8000f54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001266:	4b4d      	ldr	r3, [pc, #308]	@ (800139c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001268:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800126c:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800126e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001272:	a907      	add	r1, sp, #28
 8001274:	484a      	ldr	r0, [pc, #296]	@ (80013a0 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001276:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001278:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800127c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001280:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001284:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001288:	9201      	str	r2, [sp, #4]
 800128a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800128c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001290:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001294:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001298:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800129c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80012a0:	9202      	str	r2, [sp, #8]
 80012a2:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012a8:	f042 0220 	orr.w	r2, r2, #32
 80012ac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012b4:	f002 0220 	and.w	r2, r2, #32
 80012b8:	9203      	str	r2, [sp, #12]
 80012ba:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80012bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012c0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80012c4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012cc:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 80012d0:	9204      	str	r2, [sp, #16]
 80012d2:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012d8:	f042 0202 	orr.w	r2, r2, #2
 80012dc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012e4:	f002 0202 	and.w	r2, r2, #2
 80012e8:	9205      	str	r2, [sp, #20]
 80012ea:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80012f0:	f042 0208 	orr.w	r2, r2, #8
 80012f4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80012f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fc:	f003 0308 	and.w	r3, r3, #8
 8001300:	9306      	str	r3, [sp, #24]
 8001302:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001304:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001308:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001310:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001312:	f005 fc95 	bl	8006c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001316:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001318:	a907      	add	r1, sp, #28
 800131a:	4821      	ldr	r0, [pc, #132]	@ (80013a0 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800131c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001326:	f005 fc8b 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800132a:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800132c:	a907      	add	r1, sp, #28
 800132e:	481d      	ldr	r0, [pc, #116]	@ (80013a4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001330:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800133a:	f005 fc81 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800133e:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001342:	a907      	add	r1, sp, #28
 8001344:	4817      	ldr	r0, [pc, #92]	@ (80013a4 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001346:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001348:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001350:	f005 fc76 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001354:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001356:	a907      	add	r1, sp, #28
 8001358:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800135a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001364:	f005 fc6c 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001368:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800136a:	a907      	add	r1, sp, #28
 800136c:	480f      	ldr	r0, [pc, #60]	@ (80013ac <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800136e:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f005 fc62 	bl	8006c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800137c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001380:	a907      	add	r1, sp, #28
 8001382:	480b      	ldr	r0, [pc, #44]	@ (80013b0 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001384:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001386:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f005 fc57 	bl	8006c40 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001392:	b03f      	add	sp, #252	@ 0xfc
 8001394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001396:	bf00      	nop
 8001398:	52005000 	.word	0x52005000
 800139c:	58024400 	.word	0x58024400
 80013a0:	58021800 	.word	0x58021800
 80013a4:	58021400 	.word	0x58021400
 80013a8:	58021c00 	.word	0x58021c00
 80013ac:	58020400 	.word	0x58020400
 80013b0:	58020c00 	.word	0x58020c00

080013b4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80013b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013b6:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80013b8:	2100      	movs	r1, #0
 80013ba:	2214      	movs	r2, #20
 80013bc:	a801      	add	r0, sp, #4
 80013be:	f021 f927 	bl	8022610 <memset>
  if (FMC_Initialized) {
 80013c2:	4b3f      	ldr	r3, [pc, #252]	@ (80014c0 <HAL_SDRAM_MspInit+0x10c>)
 80013c4:	6819      	ldr	r1, [r3, #0]
 80013c6:	2900      	cmp	r1, #0
 80013c8:	d177      	bne.n	80014ba <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80013ca:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013cc:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80013ce:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013d0:	22c0      	movs	r2, #192	@ 0xc0
 80013d2:	f021 f91d 	bl	8022610 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013d6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80013da:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013dc:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80013de:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013e2:	f008 fd79 	bl	8009ed8 <HAL_RCCEx_PeriphCLKConfig>
 80013e6:	b108      	cbz	r0, 80013ec <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 80013e8:	f7ff fdb4 	bl	8000f54 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2600      	movs	r6, #0
 80013f2:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80013f4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013f8:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80013fa:	a901      	add	r1, sp, #4
 80013fc:	4832      	ldr	r0, [pc, #200]	@ (80014c8 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013fe:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001402:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001406:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800140a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800140c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001414:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001420:	f005 fc0e 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001424:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	a901      	add	r1, sp, #4
 8001428:	4828      	ldr	r0, [pc, #160]	@ (80014cc <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800142a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001430:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001434:	f005 fc04 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001438:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800143c:	a901      	add	r1, sp, #4
 800143e:	4824      	ldr	r0, [pc, #144]	@ (80014d0 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001440:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800144a:	f005 fbf9 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800144e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001452:	a901      	add	r1, sp, #4
 8001454:	481f      	ldr	r0, [pc, #124]	@ (80014d4 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001456:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001460:	f005 fbee 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001464:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001468:	a901      	add	r1, sp, #4
 800146a:	481b      	ldr	r0, [pc, #108]	@ (80014d8 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001472:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001476:	f005 fbe3 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800147a:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	a901      	add	r1, sp, #4
 8001480:	4816      	ldr	r0, [pc, #88]	@ (80014dc <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001482:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148c:	f005 fbd8 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001490:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001494:	a901      	add	r1, sp, #4
 8001496:	4812      	ldr	r0, [pc, #72]	@ (80014e0 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001498:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149a:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149e:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a2:	f005 fbcd 	bl	8006c40 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014a6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014a8:	a901      	add	r1, sp, #4
 80014aa:	480e      	ldr	r0, [pc, #56]	@ (80014e4 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014b6:	f005 fbc3 	bl	8006c40 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80014ba:	b039      	add	sp, #228	@ 0xe4
 80014bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014be:	bf00      	nop
 80014c0:	24000698 	.word	0x24000698
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58022000 	.word	0x58022000
 80014cc:	58020400 	.word	0x58020400
 80014d0:	58021000 	.word	0x58021000
 80014d4:	58021c00 	.word	0x58021c00
 80014d8:	58021800 	.word	0x58021800
 80014dc:	58020c00 	.word	0x58020c00
 80014e0:	58021400 	.word	0x58021400
 80014e4:	58020800 	.word	0x58020800

080014e8 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 80014e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_SDRAM_MspDeInit+0x6c>)
 80014ea:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 80014ec:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 80014ee:	bb82      	cbnz	r2, 8001552 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 80014f0:	4a19      	ldr	r2, [pc, #100]	@ (8001558 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 80014f2:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 80014f4:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 80014f8:	4818      	ldr	r0, [pc, #96]	@ (800155c <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 80014fa:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 80014fc:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001500:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001504:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001508:	f005 fc82 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800150c:	2160      	movs	r1, #96	@ 0x60
 800150e:	4814      	ldr	r0, [pc, #80]	@ (8001560 <HAL_SDRAM_MspDeInit+0x78>)
 8001510:	f005 fc7e 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001514:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001518:	4812      	ldr	r0, [pc, #72]	@ (8001564 <HAL_SDRAM_MspDeInit+0x7c>)
 800151a:	f005 fc79 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800151e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001522:	4811      	ldr	r0, [pc, #68]	@ (8001568 <HAL_SDRAM_MspDeInit+0x80>)
 8001524:	f005 fc74 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001528:	f248 1133 	movw	r1, #33075	@ 0x8133
 800152c:	480f      	ldr	r0, [pc, #60]	@ (800156c <HAL_SDRAM_MspDeInit+0x84>)
 800152e:	f005 fc6f 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001532:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001536:	480e      	ldr	r0, [pc, #56]	@ (8001570 <HAL_SDRAM_MspDeInit+0x88>)
 8001538:	f005 fc6a 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800153c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <HAL_SDRAM_MspDeInit+0x8c>)
 8001542:	f005 fc65 	bl	8006e10 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001546:	4621      	mov	r1, r4
 8001548:	480b      	ldr	r0, [pc, #44]	@ (8001578 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800154a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800154e:	f005 bc5f 	b.w	8006e10 <HAL_GPIO_DeInit>
}
 8001552:	bd10      	pop	{r4, pc}
 8001554:	24000694 	.word	0x24000694
 8001558:	58024400 	.word	0x58024400
 800155c:	58022000 	.word	0x58022000
 8001560:	58020400 	.word	0x58020400
 8001564:	58021000 	.word	0x58021000
 8001568:	58021c00 	.word	0x58021c00
 800156c:	58021800 	.word	0x58021800
 8001570:	58020c00 	.word	0x58020c00
 8001574:	58021400 	.word	0x58021400
 8001578:	58020800 	.word	0x58020800

0800157c <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800157c:	280f      	cmp	r0, #15
{
 800157e:	b510      	push	{r4, lr}
 8001580:	4604      	mov	r4, r0
 8001582:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001584:	d902      	bls.n	800158c <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001588:	b00a      	add	sp, #40	@ 0x28
 800158a:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800158c:	4601      	mov	r1, r0
 800158e:	2200      	movs	r2, #0
 8001590:	2036      	movs	r0, #54	@ 0x36
 8001592:	f004 fcff 	bl	8005f94 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001596:	2036      	movs	r0, #54	@ 0x36
 8001598:	f004 fd2e 	bl	8005ff8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 800159c:	4b18      	ldr	r3, [pc, #96]	@ (8001600 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800159e:	4669      	mov	r1, sp
 80015a0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80015a2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015a4:	4b17      	ldr	r3, [pc, #92]	@ (8001604 <HAL_InitTick+0x88>)
 80015a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80015aa:	f042 0210 	orr.w	r2, r2, #16
 80015ae:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80015b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	9301      	str	r3, [sp, #4]
 80015bc:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015be:	f008 fb71 	bl	8009ca4 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015c2:	9b07      	ldr	r3, [sp, #28]
 80015c4:	b9c3      	cbnz	r3, 80015f8 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015c6:	f008 fb49 	bl	8009c5c <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80015ca:	4c0f      	ldr	r4, [pc, #60]	@ (8001608 <HAL_InitTick+0x8c>)
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <HAL_InitTick+0x90>)
 80015ce:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015d0:	f240 33e7 	movw	r3, #999	@ 0x3e7
 80015d4:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001610 <HAL_InitTick+0x94>)
 80015d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80015dc:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 80015de:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 80015e0:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015e2:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 80015e4:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e6:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015e8:	f009 fb7a 	bl	800ace0 <HAL_TIM_Base_Init>
 80015ec:	2800      	cmp	r0, #0
 80015ee:	d1ca      	bne.n	8001586 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 80015f0:	4620      	mov	r0, r4
 80015f2:	f009 fa27 	bl	800aa44 <HAL_TIM_Base_Start_IT>
 80015f6:	e7c7      	b.n	8001588 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015f8:	f008 fb30 	bl	8009c5c <HAL_RCC_GetPCLK1Freq>
 80015fc:	0040      	lsls	r0, r0, #1
 80015fe:	e7e4      	b.n	80015ca <HAL_InitTick+0x4e>
 8001600:	24000074 	.word	0x24000074
 8001604:	58024400 	.word	0x58024400
 8001608:	2400069c 	.word	0x2400069c
 800160c:	40001000 	.word	0x40001000
 8001610:	000f4240 	.word	0x000f4240

08001614 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler>

08001616 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001616:	e7fe      	b.n	8001616 <HardFault_Handler>

08001618 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <MemManage_Handler>

0800161a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <BusFault_Handler>

0800161c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800161c:	e7fe      	b.n	800161c <UsageFault_Handler>

0800161e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	4770      	bx	lr

08001620 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001620:	4801      	ldr	r0, [pc, #4]	@ (8001628 <TIM6_DAC_IRQHandler+0x8>)
 8001622:	f009 ba51 	b.w	800aac8 <HAL_TIM_IRQHandler>
 8001626:	bf00      	nop
 8001628:	2400069c 	.word	0x2400069c

0800162c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 800162c:	4801      	ldr	r0, [pc, #4]	@ (8001634 <LTDC_IRQHandler+0x8>)
 800162e:	f007 b872 	b.w	8008716 <HAL_LTDC_IRQHandler>
 8001632:	bf00      	nop
 8001634:	24000414 	.word	0x24000414

08001638 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001638:	4801      	ldr	r0, [pc, #4]	@ (8001640 <DMA2D_IRQHandler+0x8>)
 800163a:	f004 bde7 	b.w	800620c <HAL_DMA2D_IRQHandler>
 800163e:	bf00      	nop
 8001640:	24000608 	.word	0x24000608

08001644 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001644:	4801      	ldr	r0, [pc, #4]	@ (800164c <JPEG_IRQHandler+0x8>)
 8001646:	f006 bf17 	b.w	8008478 <HAL_JPEG_IRQHandler>
 800164a:	bf00      	nop
 800164c:	24000594 	.word	0x24000594

08001650 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001650:	4804      	ldr	r0, [pc, #16]	@ (8001664 <MDMA_IRQHandler+0x14>)
{
 8001652:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001654:	f007 fa68 	bl	8008b28 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001658:	4803      	ldr	r0, [pc, #12]	@ (8001668 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 800165a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 800165e:	f007 ba63 	b.w	8008b28 <HAL_MDMA_IRQHandler>
 8001662:	bf00      	nop
 8001664:	240004bc 	.word	0x240004bc
 8001668:	24000528 	.word	0x24000528

0800166c <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 800166c:	4801      	ldr	r0, [pc, #4]	@ (8001674 <DSI_IRQHandler+0x8>)
 800166e:	f004 bfd0 	b.w	8006612 <HAL_DSI_IRQHandler>
 8001672:	bf00      	nop
 8001674:	240005ec 	.word	0x240005ec

08001678 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001678:	2001      	movs	r0, #1
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800167e:	f021 f87b 	bl	8022778 <__errno>
 8001682:	2316      	movs	r3, #22
 8001684:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001686:	f04f 30ff 	mov.w	r0, #4294967295
 800168a:	bd08      	pop	{r3, pc}

0800168c <_exit>:

void _exit (int status)
{
 800168c:	b508      	push	{r3, lr}
	errno = EINVAL;
 800168e:	f021 f873 	bl	8022778 <__errno>
 8001692:	2316      	movs	r3, #22
 8001694:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001696:	e7fe      	b.n	8001696 <_exit+0xa>

08001698 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	460d      	mov	r5, r1
 800169c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	460e      	mov	r6, r1
 80016a0:	1b73      	subs	r3, r6, r5
 80016a2:	429c      	cmp	r4, r3
 80016a4:	dc01      	bgt.n	80016aa <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80016a6:	4620      	mov	r0, r4
 80016a8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80016aa:	f3af 8000 	nop.w
 80016ae:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	e7f5      	b.n	80016a0 <_read+0x8>

080016b4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016b4:	b570      	push	{r4, r5, r6, lr}
 80016b6:	460d      	mov	r5, r1
 80016b8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ba:	460e      	mov	r6, r1
 80016bc:	1b73      	subs	r3, r6, r5
 80016be:	429c      	cmp	r4, r3
 80016c0:	dc01      	bgt.n	80016c6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80016c2:	4620      	mov	r0, r4
 80016c4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80016c6:	f816 0b01 	ldrb.w	r0, [r6], #1
 80016ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016ce:	e7f5      	b.n	80016bc <_write+0x8>

080016d0 <_close>:

int _close(int file)
{
	return -1;
}
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	4770      	bx	lr

080016d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80016d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 80016da:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 80016dc:	604b      	str	r3, [r1, #4]
}
 80016de:	4770      	bx	lr

080016e0 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80016e0:	2001      	movs	r0, #1
 80016e2:	4770      	bx	lr

080016e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80016e4:	2000      	movs	r0, #0
 80016e6:	4770      	bx	lr

080016e8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001718 <_sbrk+0x30>)
{
 80016ea:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80016ec:	6811      	ldr	r1, [r2, #0]
{
 80016ee:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80016f0:	b909      	cbnz	r1, 80016f6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80016f2:	490a      	ldr	r1, [pc, #40]	@ (800171c <_sbrk+0x34>)
 80016f4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016f6:	6810      	ldr	r0, [r2, #0]
 80016f8:	4909      	ldr	r1, [pc, #36]	@ (8001720 <_sbrk+0x38>)
 80016fa:	4c0a      	ldr	r4, [pc, #40]	@ (8001724 <_sbrk+0x3c>)
 80016fc:	4403      	add	r3, r0
 80016fe:	1b09      	subs	r1, r1, r4
 8001700:	428b      	cmp	r3, r1
 8001702:	d906      	bls.n	8001712 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001704:	f021 f838 	bl	8022778 <__errno>
 8001708:	230c      	movs	r3, #12
 800170a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800170c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001710:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001712:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001714:	e7fc      	b.n	8001710 <_sbrk+0x28>
 8001716:	bf00      	nop
 8001718:	240006e8 	.word	0x240006e8
 800171c:	24025f98 	.word	0x24025f98
 8001720:	24080000 	.word	0x24080000
 8001724:	00001000 	.word	0x00001000

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001760 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800172c:	f004 fb58 	bl	8005de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001730:	480c      	ldr	r0, [pc, #48]	@ (8001764 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001732:	490d      	ldr	r1, [pc, #52]	@ (8001768 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001734:	4a0d      	ldr	r2, [pc, #52]	@ (800176c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001738:	e002      	b.n	8001740 <LoopCopyDataInit>

0800173a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800173a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800173c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173e:	3304      	adds	r3, #4

08001740 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001740:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001742:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001744:	d3f9      	bcc.n	800173a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001746:	4a0a      	ldr	r2, [pc, #40]	@ (8001770 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001748:	4c0a      	ldr	r4, [pc, #40]	@ (8001774 <LoopFillZerobss+0x22>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800174c:	e001      	b.n	8001752 <LoopFillZerobss>

0800174e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001750:	3204      	adds	r2, #4

08001752 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001752:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001754:	d3fb      	bcc.n	800174e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001756:	f021 f815 	bl	8022784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff f835 	bl	80007c8 <main>
  bx  lr
 800175e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001760:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001764:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001768:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 800176c:	08026738 	.word	0x08026738
  ldr r2, =_sbss
 8001770:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001774:	24025f94 	.word	0x24025f94

08001778 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC3_IRQHandler>

0800177a <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 800177a:	4770      	bx	lr

0800177c <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800177c:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 800177e:	f001 fcd9 	bl	8003134 <touchgfx_components_init>
    touchgfx_init();
}
 8001782:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001786:	f001 bc5d 	b.w	8003044 <touchgfx_init>

0800178a <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 800178a:	f001 bcd5 	b.w	8003138 <touchgfx_taskEntry>

0800178e <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 800178e:	6840      	ldr	r0, [r0, #4]
    }
 8001790:	4770      	bx	lr

08001792 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001792:	6041      	str	r1, [r0, #4]
    }
 8001794:	4770      	bx	lr

08001796 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001796:	1a52      	subs	r2, r2, r1
 8001798:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 800179c:	fbb2 f0f3 	udiv	r0, r2, r3
 80017a0:	4770      	bx	lr
	...

080017a4 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 80017a4:	4b02      	ldr	r3, [pc, #8]	@ (80017b0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 80017a6:	68c0      	ldr	r0, [r0, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80017ac:	4358      	muls	r0, r3
 80017ae:	4770      	bx	lr
 80017b0:	240006ec 	.word	0x240006ec

080017b4 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 80017b4:	4770      	bx	lr
	...

080017b8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 80017b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001834 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 80017bc:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 80017c0:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 80017c2:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017c6:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017ca:	f043 0301 	orr.w	r3, r3, #1
 80017ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80017d2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	9301      	str	r3, [sp, #4]
 80017dc:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 80017e0:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e2:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 80017e4:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e6:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e8:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 80017ea:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 80017ec:	2101      	movs	r1, #1
 80017ee:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 80017f0:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f2:	2210      	movs	r2, #16
 80017f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80017f8:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80017fc:	fab2 f282 	clz	r2, r2
 8001800:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001802:	4a0e      	ldr	r2, [pc, #56]	@ (800183c <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001804:	5cd3      	ldrb	r3, [r2, r3]
 8001806:	b983      	cbnz	r3, 800182a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001808:	f008 fa06 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 800180c:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 800180e:	f008 f83b 	bl	8009888 <HAL_RCC_GetSysClockFreq>
 8001812:	fbb0 f0f4 	udiv	r0, r0, r4
 8001816:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001818:	4807      	ldr	r0, [pc, #28]	@ (8001838 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 800181a:	f009 fa61 	bl	800ace0 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 800181e:	4806      	ldr	r0, [pc, #24]	@ (8001838 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001820:	b003      	add	sp, #12
 8001822:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001826:	f009 b8d3 	b.w	800a9d0 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 800182a:	f008 fa17 	bl	8009c5c <HAL_RCC_GetPCLK1Freq>
 800182e:	0044      	lsls	r4, r0, #1
 8001830:	e7ed      	b.n	800180e <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001832:	bf00      	nop
 8001834:	58024400 	.word	0x58024400
 8001838:	240006ec 	.word	0x240006ec
 800183c:	080255d0 	.word	0x080255d0

08001840 <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001840:	b510      	push	{r4, lr}
 8001842:	4604      	mov	r4, r0
 8001844:	2110      	movs	r1, #16
 8001846:	f020 f8d0 	bl	80219ea <_ZdlPvj>
 800184a:	4620      	mov	r0, r4
 800184c:	bd10      	pop	{r4, pc}

0800184e <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 800184e:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001850:	6803      	ldr	r3, [r0, #0]
{
 8001852:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001854:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001856:	b131      	cbz	r1, 8001866 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001858:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 800185a:	4798      	blx	r3
 800185c:	6863      	ldr	r3, [r4, #4]
 800185e:	1b5b      	subs	r3, r3, r5
 8001860:	4403      	add	r3, r0
 8001862:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001864:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001866:	4798      	blx	r3
 8001868:	60a0      	str	r0, [r4, #8]
}
 800186a:	e7fb      	b.n	8001864 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

0800186c <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800186c:	4770      	bx	lr
	...

08001870 <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001872:	4b0a      	ldr	r3, [pc, #40]	@ (800189c <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001874:	460f      	mov	r7, r1
 8001876:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001878:	781d      	ldrb	r5, [r3, #0]
 800187a:	b915      	cbnz	r5, 8001882 <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 800187c:	2500      	movs	r5, #0
}
 800187e:	4628      	mov	r0, r5
 8001880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001882:	4c07      	ldr	r4, [pc, #28]	@ (80018a0 <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001884:	2000      	movs	r0, #0
 8001886:	4621      	mov	r1, r4
 8001888:	f004 fa4e 	bl	8005d28 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 800188c:	6823      	ldr	r3, [r4, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d0f4      	beq.n	800187c <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001892:	6863      	ldr	r3, [r4, #4]
 8001894:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001896:	68a3      	ldr	r3, [r4, #8]
 8001898:	6033      	str	r3, [r6, #0]
            return true;
 800189a:	e7f0      	b.n	800187e <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 800189c:	24000748 	.word	0x24000748
 80018a0:	24000738 	.word	0x24000738

080018a4 <_ZN20STM32TouchControllerD0Ev>:
 80018a4:	b510      	push	{r4, lr}
 80018a6:	4604      	mov	r4, r0
 80018a8:	2104      	movs	r1, #4
 80018aa:	f020 f89e 	bl	80219ea <_ZdlPvj>
 80018ae:	4620      	mov	r0, r4
 80018b0:	bd10      	pop	{r4, pc}
	...

080018b4 <_ZN20STM32TouchController4initEv>:
{
 80018b4:	b508      	push	{r3, lr}
    hTS->Width = 800;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	@ (80018f0 <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 80018b8:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 80018bc:	2000      	movs	r0, #0
    hTS->Width = 800;
 80018be:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 80018c0:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80018c4:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 80018c8:	230c      	movs	r3, #12
 80018ca:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 80018ce:	f004 f99b 	bl	8005c08 <BSP_TS_Init>
 80018d2:	4b08      	ldr	r3, [pc, #32]	@ (80018f4 <_ZN20STM32TouchController4initEv+0x40>)
 80018d4:	b910      	cbnz	r0, 80018dc <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 80018d6:	2201      	movs	r2, #1
 80018d8:	701a      	strb	r2, [r3, #0]
}
 80018da:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d1fb      	bne.n	80018da <_ZN20STM32TouchController4initEv+0x26>
 80018e2:	4b05      	ldr	r3, [pc, #20]	@ (80018f8 <_ZN20STM32TouchController4initEv+0x44>)
 80018e4:	212e      	movs	r1, #46	@ 0x2e
 80018e6:	4a05      	ldr	r2, [pc, #20]	@ (80018fc <_ZN20STM32TouchController4initEv+0x48>)
 80018e8:	4805      	ldr	r0, [pc, #20]	@ (8001900 <_ZN20STM32TouchController4initEv+0x4c>)
 80018ea:	f020 fbf5 	bl	80220d8 <__assert_func>
 80018ee:	bf00      	nop
 80018f0:	24000744 	.word	0x24000744
 80018f4:	24000748 	.word	0x24000748
 80018f8:	08023220 	.word	0x08023220
 80018fc:	08023233 	.word	0x08023233
 8001900:	0802325d 	.word	0x0802325d

08001904 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001904:	b110      	cbz	r0, 800190c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x8>
 8001906:	2803      	cmp	r0, #3
 8001908:	d009      	beq.n	800191e <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
 800190a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 800190e:	2108      	movs	r1, #8
 8001910:	4808      	ldr	r0, [pc, #32]	@ (8001934 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	fab2 f282 	clz	r2, r2
 8001918:	0952      	lsrs	r2, r2, #5
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 800191a:	f005 bb1b 	b.w	8006f54 <HAL_GPIO_WritePin>
 800191e:	4b04      	ldr	r3, [pc, #16]	@ (8001930 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2c>)
 8001920:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001924:	4804      	ldr	r0, [pc, #16]	@ (8001938 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x34>)
 8001926:	68da      	ldr	r2, [r3, #12]
 8001928:	fab2 f282 	clz	r2, r2
 800192c:	0952      	lsrs	r2, r2, #5
 800192e:	e7f4      	b.n	800191a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x16>
 8001930:	2400074c 	.word	0x2400074c
 8001934:	58022400 	.word	0x58022400
 8001938:	58021400 	.word	0x58021400

0800193c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 800193c:	b110      	cbz	r0, 8001944 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x8>
 800193e:	2803      	cmp	r0, #3
 8001940:	d009      	beq.n	8001956 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
 8001942:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001944:	4b08      	ldr	r3, [pc, #32]	@ (8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001946:	2108      	movs	r1, #8
 8001948:	4808      	ldr	r0, [pc, #32]	@ (800196c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>)
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	3a00      	subs	r2, #0
 800194e:	bf18      	it	ne
 8001950:	2201      	movne	r2, #1
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001952:	f005 baff 	b.w	8006f54 <HAL_GPIO_WritePin>
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2c>)
 8001958:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195c:	4804      	ldr	r0, [pc, #16]	@ (8001970 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x34>)
 800195e:	68da      	ldr	r2, [r3, #12]
 8001960:	3a00      	subs	r2, #0
 8001962:	bf18      	it	ne
 8001964:	2201      	movne	r2, #1
 8001966:	e7f4      	b.n	8001952 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x16>
 8001968:	2400074c 	.word	0x2400074c
 800196c:	58022400 	.word	0x58022400
 8001970:	58021400 	.word	0x58021400

08001974 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001974:	b110      	cbz	r0, 800197c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x8>
 8001976:	2803      	cmp	r0, #3
 8001978:	d004      	beq.n	8001984 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
 800197a:	4770      	bx	lr
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 800197c:	2108      	movs	r1, #8
 800197e:	4803      	ldr	r0, [pc, #12]	@ (800198c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001980:	f005 baed 	b.w	8006f5e <HAL_GPIO_TogglePin>
 8001984:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001988:	4801      	ldr	r0, [pc, #4]	@ (8001990 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>)
 800198a:	e7f9      	b.n	8001980 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xc>
 800198c:	58022400 	.word	0x58022400
 8001990:	58021400 	.word	0x58021400

08001994 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001994:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001996:	b130      	cbz	r0, 80019a6 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
 8001998:	2803      	cmp	r0, #3
 800199a:	d009      	beq.n	80019b0 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x1c>
 800199c:	2000      	movs	r0, #0
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 800199e:	1e43      	subs	r3, r0, #1
 80019a0:	4258      	negs	r0, r3
 80019a2:	4158      	adcs	r0, r3
 80019a4:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 80019a6:	2108      	movs	r1, #8
 80019a8:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x24>)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019aa:	f005 facd 	bl	8006f48 <HAL_GPIO_ReadPin>
        break;
 80019ae:	e7f6      	b.n	800199e <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0xa>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 80019b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80019b4:	4801      	ldr	r0, [pc, #4]	@ (80019bc <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x28>)
 80019b6:	e7f8      	b.n	80019aa <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 80019b8:	58022400 	.word	0x58022400
 80019bc:	58021400 	.word	0x58021400

080019c0 <_ZN8touchgfx4GPIO4initEv>:
{
 80019c0:	b570      	push	{r4, r5, r6, lr}
 80019c2:	4d08      	ldr	r5, [pc, #32]	@ (80019e4 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 80019c4:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 80019c6:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 80019c8:	b2e0      	uxtb	r0, r4
 80019ca:	f7ff ffe3 	bl	8001994 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 80019ce:	b118      	cbz	r0, 80019d8 <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 80019d0:	682b      	ldr	r3, [r5, #0]
 80019d2:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 80019d4:	bf18      	it	ne
 80019d6:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 80019d8:	3401      	adds	r4, #1
 80019da:	3504      	adds	r5, #4
 80019dc:	2c05      	cmp	r4, #5
 80019de:	d1f3      	bne.n	80019c8 <_ZN8touchgfx4GPIO4initEv+0x8>
}
 80019e0:	bd70      	pop	{r4, r5, r6, pc}
 80019e2:	bf00      	nop
 80019e4:	2400074c 	.word	0x2400074c

080019e8 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 80019e8:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 80019ea:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 80019ee:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 80019f2:	4770      	bx	lr

080019f4 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 80019f4:	2000      	movs	r0, #0
 80019f6:	4770      	bx	lr

080019f8 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80019f8:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 80019fa:	3900      	subs	r1, #0
 80019fc:	4b02      	ldr	r3, [pc, #8]	@ (8001a08 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 80019fe:	bf18      	it	ne
 8001a00:	2101      	movne	r1, #1
 8001a02:	7019      	strb	r1, [r3, #0]
    }
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	24025273 	.word	0x24025273

08001a0c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	4770      	bx	lr

08001a10 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001a10:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001a12:	b10b      	cbz	r3, 8001a18 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001a14:	4608      	mov	r0, r1
 8001a16:	4718      	bx	r3
        }
    }
 8001a18:	4770      	bx	lr

08001a1a <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001a1a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001a1e:	4770      	bx	lr

08001a20 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001a20:	6840      	ldr	r0, [r0, #4]
 8001a22:	6803      	ldr	r3, [r0, #0]
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	4718      	bx	r3

08001a28 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001a28:	4b01      	ldr	r3, [pc, #4]	@ (8001a30 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	24000770 	.word	0x24000770

08001a34 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001a34:	4770      	bx	lr

08001a36 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001a36:	f001 bc7c 	b.w	8003332 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001a3a <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001a3a:	f001 bc0b 	b.w	8003254 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001a3e <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001a3e:	f001 bddd 	b.w	80035fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001a42 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001a42:	f001 bdcf 	b.w	80035e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001a48 <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001a4c:	f001 fd92 	bl	8003574 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001a50:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001a54:	b113      	cbz	r3, 8001a5c <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001a56:	4b02      	ldr	r3, [pc, #8]	@ (8001a60 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
    }
}
 8001a5c:	bd10      	pop	{r4, pc}
 8001a5e:	bf00      	nop
 8001a60:	2400000c 	.word	0x2400000c

08001a64 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001a64:	f001 bbfe 	b.w	8003264 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001a68 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001a68:	b510      	push	{r4, lr}
 8001a6a:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001a6c:	f00c fdf8 	bl	800e660 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001a70:	6823      	ldr	r3, [r4, #0]
 8001a72:	4620      	mov	r0, r4
 8001a74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001a7c:	4718      	bx	r3

08001a7e <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001a7e:	b510      	push	{r4, lr}
 8001a80:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001a82:	f00c f975 	bl	800dd70 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001a86:	6860      	ldr	r0, [r4, #4]
 8001a88:	6803      	ldr	r3, [r0, #0]
    }
 8001a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	4718      	bx	r3

08001a92 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001a92:	f00c b843 	b.w	800db1c <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001a96 <_ZN11TouchGFXHALD0Ev>:
 8001a96:	b510      	push	{r4, lr}
 8001a98:	4604      	mov	r4, r0
 8001a9a:	217c      	movs	r1, #124	@ 0x7c
 8001a9c:	f01f ffa5 	bl	80219ea <_ZdlPvj>
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	bd10      	pop	{r4, pc}

08001aa4 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	@ (8001ab0 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001aaa:	f00c b873 	b.w	800db94 <_ZN8touchgfx3HAL10beginFrameEv>
 8001aae:	bf00      	nop
 8001ab0:	2400000c 	.word	0x2400000c

08001ab4 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001ab4:	b538      	push	{r3, r4, r5, lr}
 8001ab6:	4604      	mov	r4, r0
    mcuInstr.init();
 8001ab8:	4d06      	ldr	r5, [pc, #24]	@ (8001ad4 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001aba:	f001 fbfb 	bl	80032b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001abe:	2300      	movs	r3, #0
    mcuInstr.init();
 8001ac0:	4628      	mov	r0, r5
 8001ac2:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001ac6:	f7ff fe77 	bl	80017b8 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001aca:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001acc:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001ace:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001ad2:	bd38      	pop	{r3, r4, r5, pc}
 8001ad4:	24000760 	.word	0x24000760

08001ad8 <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001ad8:	6803      	ldr	r3, [r0, #0]
{
 8001ada:	4604      	mov	r4, r0
 8001adc:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001ade:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ae2:	4798      	blx	r3
    enableInterrupts();
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001aea:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001aec:	f000 ff5c 	bl	80029a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	4620      	mov	r0, r4
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001af8:	2100      	movs	r1, #0
 8001afa:	2329      	movs	r3, #41	@ 0x29
 8001afc:	2215      	movs	r2, #21
 8001afe:	4805      	ldr	r0, [pc, #20]	@ (8001b14 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001b00:	9100      	str	r1, [sp, #0]
 8001b02:	f004 ff96 	bl	8006a32 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001b06:	f000 ff4f 	bl	80029a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	4620      	mov	r0, r4
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b10:	4798      	blx	r3
    for (;;)
 8001b12:	e7f8      	b.n	8001b06 <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001b14:	240005ec 	.word	0x240005ec

08001b18 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001b18:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001b1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001b54 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001b1e:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001b20:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001b24:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001b26:	428c      	cmp	r4, r1
 8001b28:	d009      	beq.n	8001b3e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001b2a:	b93a      	cbnz	r2, 8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b2c:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001b30:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b32:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001b34:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001b36:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b38:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001b3a:	701a      	strb	r2, [r3, #0]
        }
    }
 8001b3c:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001b3e:	2a00      	cmp	r2, #0
 8001b40:	d0fc      	beq.n	8001b3c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b42:	4a06      	ldr	r2, [pc, #24]	@ (8001b5c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001b44:	4904      	ldr	r1, [pc, #16]	@ (8001b58 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b46:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001b48:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001b4a:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8001b4c:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8001b4e:	2200      	movs	r2, #0
 8001b50:	e7f3      	b.n	8001b3a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8001b52:	bf00      	nop
 8001b54:	2402526c 	.word	0x2402526c
 8001b58:	2402526a 	.word	0x2402526a
 8001b5c:	24025268 	.word	0x24025268

08001b60 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8001b60:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8001b62:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	428b      	cmp	r3, r1
 8001b68:	d803      	bhi.n	8001b72 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 8001b6a:	4b08      	ldr	r3, [pc, #32]	@ (8001b8c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d905      	bls.n	8001b7e <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8001b72:	4b07      	ldr	r3, [pc, #28]	@ (8001b90 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8001b74:	219e      	movs	r1, #158	@ 0x9e
 8001b76:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 8001b78:	4807      	ldr	r0, [pc, #28]	@ (8001b98 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 8001b7a:	f020 faad 	bl	80220d8 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8001b7e:	4b07      	ldr	r3, [pc, #28]	@ (8001b9c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8001b80:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8001b84:	801a      	strh	r2, [r3, #0]
    }
 8001b86:	bd08      	pop	{r3, pc}
 8001b88:	24025268 	.word	0x24025268
 8001b8c:	2402526a 	.word	0x2402526a
 8001b90:	080232c8 	.word	0x080232c8
 8001b94:	0802332b 	.word	0x0802332b
 8001b98:	0802336e 	.word	0x0802336e
 8001b9c:	2402526e 	.word	0x2402526e
 8001ba0:	24025270 	.word	0x24025270

08001ba4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8001ba4:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 8001ba6:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 8001baa:	b118      	cbz	r0, 8001bb4 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8001bac:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8001bae:	6803      	ldr	r3, [r0, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4718      	bx	r3
    }
 8001bb4:	4770      	bx	lr
	...

08001bb8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 8001bb8:	b570      	push	{r4, r5, r6, lr}
 8001bba:	460d      	mov	r5, r1
 8001bbc:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8001bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001bec <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8001bc0:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8001bc2:	b935      	cbnz	r5, 8001bd2 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8001bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8001bf0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 8001bc6:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8001bcc:	480a      	ldr	r0, [pc, #40]	@ (8001bf8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8001bce:	f020 fa83 	bl	80220d8 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8001bd2:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8001bd6:	3a00      	subs	r2, #0
 8001bd8:	4b08      	ldr	r3, [pc, #32]	@ (8001bfc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 8001bda:	bf18      	it	ne
 8001bdc:	2201      	movne	r2, #1
 8001bde:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8001be0:	6803      	ldr	r3, [r0, #0]
}
 8001be2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001be6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bea:	4718      	bx	r3
 8001bec:	24000770 	.word	0x24000770
 8001bf0:	080233c1 	.word	0x080233c1
 8001bf4:	080233f9 	.word	0x080233f9
 8001bf8:	0802336e 	.word	0x0802336e
 8001bfc:	24025272 	.word	0x24025272

08001c00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 8001c00:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 8001c04:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 8001c06:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 8001c0a:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 8001c0c:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 8001c10:	4a1d      	ldr	r2, [pc, #116]	@ (8001c88 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 8001c12:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 8001c14:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 8001c18:	62c3      	str	r3, [r0, #44]	@ 0x2c
 8001c1a:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 8001c1c:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 8001c20:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 8001c22:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 8001c26:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c28:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 8001c2a:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 8001c2e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c32:	4a16      	ldr	r2, [pc, #88]	@ (8001c8c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 8001c34:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 8001c38:	3520      	adds	r5, #32
          buttonController(0),
 8001c3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8001c3e:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8001c42:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 8001c46:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 8001c4a:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8001c4e:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8001c52:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 8001c56:	6782      	str	r2, [r0, #120]	@ 0x78
 8001c58:	b2ad      	uxth	r5, r5
        instance = this;
 8001c5a:	4a0d      	ldr	r2, [pc, #52]	@ (8001c90 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c5c:	42b5      	cmp	r5, r6
        instance = this;
 8001c5e:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8001c60:	4a0c      	ldr	r2, [pc, #48]	@ (8001c94 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8001c62:	8015      	strh	r5, [r2, #0]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	@ (8001c98 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 8001c66:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c68:	bf28      	it	cs
 8001c6a:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8001c9c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c6e:	bf38      	it	cc
 8001c70:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c72:	8016      	strh	r6, [r2, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8001c76:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8001c7a:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8001c7c:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8001c7e:	7013      	strb	r3, [r2, #0]
 8001c80:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8001c82:	6003      	str	r3, [r0, #0]
}
 8001c84:	bd70      	pop	{r4, r5, r6, pc}
 8001c86:	bf00      	nop
 8001c88:	01000001 	.word	0x01000001
 8001c8c:	01010000 	.word	0x01010000
 8001c90:	24025274 	.word	0x24025274
 8001c94:	24025268 	.word	0x24025268
 8001c98:	2402526e 	.word	0x2402526e
 8001c9c:	2402526a 	.word	0x2402526a
 8001ca0:	24025270 	.word	0x24025270
 8001ca4:	2402526c 	.word	0x2402526c
 8001ca8:	08023450 	.word	0x08023450

08001cac <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8001cac:	2b01      	cmp	r3, #1
    {
 8001cae:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8001cb0:	d80e      	bhi.n	8001cd0 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8001cb2:	5cd3      	ldrb	r3, [r2, r3]
 8001cb4:	2215      	movs	r2, #21
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	4601      	mov	r1, r0
 8001cbc:	4808      	ldr	r0, [pc, #32]	@ (8001ce0 <DSI_IO_Write+0x34>)
 8001cbe:	f004 feb8 	bl	8006a32 <HAL_DSI_ShortWrite>
 8001cc2:	b118      	cbz	r0, 8001ccc <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8001cc4:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 8001cc8:	b002      	add	sp, #8
 8001cca:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8001ccc:	2000      	movs	r0, #0
 8001cce:	e7fb      	b.n	8001cc8 <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8001cd0:	e9cd 1200 	strd	r1, r2, [sp]
 8001cd4:	4601      	mov	r1, r0
 8001cd6:	2239      	movs	r2, #57	@ 0x39
 8001cd8:	4801      	ldr	r0, [pc, #4]	@ (8001ce0 <DSI_IO_Write+0x34>)
 8001cda:	f004 febb 	bl	8006a54 <HAL_DSI_LongWrite>
 8001cde:	e7f0      	b.n	8001cc2 <DSI_IO_Write+0x16>
 8001ce0:	240005ec 	.word	0x240005ec

08001ce4 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8001ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8001ce6:	e9cd 1201 	strd	r1, r2, [sp, #4]
 8001cea:	2106      	movs	r1, #6
 8001cec:	9100      	str	r1, [sp, #0]
 8001cee:	4601      	mov	r1, r0
 8001cf0:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <DSI_IO_Read+0x24>)
 8001cf2:	f004 ff0f 	bl	8006b14 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 8001cf6:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 8001cf8:	bf14      	ite	ne
 8001cfa:	f06f 0007 	mvnne.w	r0, #7
 8001cfe:	2000      	moveq	r0, #0
 8001d00:	b005      	add	sp, #20
 8001d02:	f85d fb04 	ldr.w	pc, [sp], #4
 8001d06:	bf00      	nop
 8001d08:	240005ec 	.word	0x240005ec

08001d0c <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 8001d0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 8001d0e:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d12:	4c0b      	ldr	r4, [pc, #44]	@ (8001d40 <LCD_ReqTear+0x34>)
 8001d14:	2239      	movs	r2, #57	@ 0x39
 8001d16:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 8001d18:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 8001d1c:	ab03      	add	r3, sp, #12
 8001d1e:	4620      	mov	r0, r4
 8001d20:	9301      	str	r3, [sp, #4]
 8001d22:	2344      	movs	r3, #68	@ 0x44
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	2302      	movs	r3, #2
 8001d28:	f004 fe94 	bl	8006a54 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2335      	movs	r3, #53	@ 0x35
 8001d30:	2215      	movs	r2, #21
 8001d32:	4620      	mov	r0, r4
 8001d34:	9100      	str	r1, [sp, #0]
 8001d36:	f004 fe7c 	bl	8006a32 <HAL_DSI_ShortWrite>
    }
 8001d3a:	b004      	add	sp, #16
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	bf00      	nop
 8001d40:	240005ec 	.word	0x240005ec

08001d44 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8001d44:	b508      	push	{r3, lr}
    LCD_ReqTear();
 8001d46:	f7ff ffe1 	bl	8001d0c <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8001d54:	2201      	movs	r2, #1
 8001d56:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 8001d5a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 8001d66:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8001d6a:	f042 0202 	orr.w	r2, r2, #2
 8001d6e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8001d72:	2203      	movs	r2, #3
 8001d74:	4b02      	ldr	r3, [pc, #8]	@ (8001d80 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 8001d76:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001d78:	bd08      	pop	{r3, pc}
 8001d7a:	bf00      	nop
 8001d7c:	240005ec 	.word	0x240005ec
 8001d80:	50001000 	.word	0x50001000

08001d84 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8001d84:	4b07      	ldr	r3, [pc, #28]	@ (8001da4 <LCD_ReqEnable+0x20>)
    {
 8001d86:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 8001d88:	7819      	ldrb	r1, [r3, #0]
 8001d8a:	b939      	cbnz	r1, 8001d9c <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8001d8c:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8001d8e:	4806      	ldr	r0, [pc, #24]	@ (8001da8 <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8001d90:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8001d92:	2329      	movs	r3, #41	@ 0x29
 8001d94:	2215      	movs	r2, #21
 8001d96:	9100      	str	r1, [sp, #0]
 8001d98:	f004 fe4b 	bl	8006a32 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8001d9c:	b003      	add	sp, #12
 8001d9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001da2:	bf00      	nop
 8001da4:	2400075c 	.word	0x2400075c
 8001da8:	240005ec 	.word	0x240005ec

08001dac <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001dac:	4b06      	ldr	r3, [pc, #24]	@ (8001dc8 <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8001dae:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8001db0:	9301      	str	r3, [sp, #4]
 8001db2:	232a      	movs	r3, #42	@ 0x2a
 8001db4:	2239      	movs	r2, #57	@ 0x39
 8001db6:	2100      	movs	r1, #0
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2304      	movs	r3, #4
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <LCD_SetUpdateRegionLeft+0x20>)
 8001dbe:	f004 fe49 	bl	8006a54 <HAL_DSI_LongWrite>
    }
 8001dc2:	b003      	add	sp, #12
 8001dc4:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dc8:	24000008 	.word	0x24000008
 8001dcc:	240005ec 	.word	0x240005ec

08001dd0 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001dd0:	4b06      	ldr	r3, [pc, #24]	@ (8001dec <LCD_SetUpdateRegionRight+0x1c>)
    {
 8001dd2:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	232a      	movs	r3, #42	@ 0x2a
 8001dd8:	2239      	movs	r2, #57	@ 0x39
 8001dda:	2100      	movs	r1, #0
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2304      	movs	r3, #4
 8001de0:	4803      	ldr	r0, [pc, #12]	@ (8001df0 <LCD_SetUpdateRegionRight+0x20>)
 8001de2:	f004 fe37 	bl	8006a54 <HAL_DSI_LongWrite>
    }
 8001de6:	b003      	add	sp, #12
 8001de8:	f85d fb04 	ldr.w	pc, [sp], #4
 8001dec:	24000004 	.word	0x24000004
 8001df0:	240005ec 	.word	0x240005ec

08001df4 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8001df4:	b538      	push	{r3, r4, r5, lr}
        return instance;
 8001df6:	4d14      	ldr	r5, [pc, #80]	@ (8001e48 <HAL_DSI_TearingEffectCallback+0x54>)
 8001df8:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f7ff fd82 	bl	8001904 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8001e00:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 8001e02:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8001e06:	3301      	adds	r3, #1
 8001e08:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 8001e0c:	f000 fdc0 	bl	8002990 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 8001e10:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 8001e12:	682a      	ldr	r2, [r5, #0]
 8001e14:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 8001e1c:	b173      	cbz	r3, 8001e3c <HAL_DSI_TearingEffectCallback+0x48>
 8001e1e:	4d0c      	ldr	r5, [pc, #48]	@ (8001e50 <HAL_DSI_TearingEffectCallback+0x5c>)
 8001e20:	782b      	ldrb	r3, [r5, #0]
 8001e22:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001e26:	b94b      	cbnz	r3, 8001e3c <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	@ (8001e54 <HAL_DSI_TearingEffectCallback+0x60>)
 8001e2a:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 8001e2c:	f7ff ffbe 	bl	8001dac <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 8001e30:	4620      	mov	r0, r4
 8001e32:	f004 fdee 	bl	8006a12 <HAL_DSI_Refresh>
            displayRefreshing = true;
 8001e36:	2301      	movs	r3, #1
 8001e38:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 8001e3a:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001e3c:	2000      	movs	r0, #0
    }
 8001e3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8001e42:	f7ff bd7b 	b.w	800193c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8001e46:	bf00      	nop
 8001e48:	24025274 	.word	0x24025274
 8001e4c:	2400000c 	.word	0x2400000c
 8001e50:	24000778 	.word	0x24000778
 8001e54:	24000774 	.word	0x24000774

08001e58 <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 8001e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8001e5c:	4e48      	ldr	r6, [pc, #288]	@ (8001f80 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8001e5e:	b085      	sub	sp, #20
 8001e60:	4604      	mov	r4, r0
        if (displayRefreshing)
 8001e62:	7833      	ldrb	r3, [r6, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	f000 8088 	beq.w	8001f7a <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 8001e6a:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8001fa4 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8001e6e:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 8001fa8 <HAL_DSI_EndOfRefreshCallback+0x150>
 8001e72:	f8d9 5000 	ldr.w	r5, [r9]
 8001e76:	4f43      	ldr	r7, [pc, #268]	@ (8001f84 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 8001e78:	2d00      	cmp	r5, #0
 8001e7a:	d13e      	bne.n	8001efa <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8001e7c:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001e7e:	4e42      	ldr	r6, [pc, #264]	@ (8001f88 <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8001e80:	f004 f85e 	bl	8005f40 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e84:	6823      	ldr	r3, [r4, #0]
 8001e86:	9500      	str	r5, [sp, #0]
 8001e88:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001e8c:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e8e:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001e92:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001e96:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001e9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001e9e:	f002 0208 	and.w	r2, r2, #8
 8001ea2:	9200      	str	r2, [sp, #0]
 8001ea4:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8001ea6:	f8d8 2000 	ldr.w	r2, [r8]
 8001eaa:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8001eae:	4837      	ldr	r0, [pc, #220]	@ (8001f8c <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001eb0:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8001eb2:	4e37      	ldr	r6, [pc, #220]	@ (8001f90 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8001eb4:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 8001eb6:	4837      	ldr	r0, [pc, #220]	@ (8001f94 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001eb8:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8001ebc:	4836      	ldr	r0, [pc, #216]	@ (8001f98 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001ebe:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001ec2:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001ec4:	f041 0101 	orr.w	r1, r1, #1
 8001ec8:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001eca:	9501      	str	r5, [sp, #4]
 8001ecc:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001ed0:	f042 0208 	orr.w	r2, r2, #8
 8001ed4:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001ed8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8001ee4:	f7ff ff74 	bl	8001dd0 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 8001ee8:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 8001eea:	4620      	mov	r0, r4
                updateRegion = 1;
 8001eec:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8001ef0:	b005      	add	sp, #20
 8001ef2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 8001ef6:	f004 bd8c 	b.w	8006a12 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001efa:	6803      	ldr	r3, [r0, #0]
 8001efc:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001efe:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f00:	9502      	str	r5, [sp, #8]
 8001f02:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f06:	4c25      	ldr	r4, [pc, #148]	@ (8001f9c <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8001f08:	f022 0208 	bic.w	r2, r2, #8
 8001f0c:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f10:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f14:	f002 0208 	and.w	r2, r2, #8
 8001f18:	9202      	str	r2, [sp, #8]
 8001f1a:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 8001f1c:	f8d8 2000 	ldr.w	r2, [r8]
 8001f20:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 8001f24:	4819      	ldr	r0, [pc, #100]	@ (8001f8c <HAL_DSI_EndOfRefreshCallback+0x134>)
 8001f26:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 8001f28:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 8001f2c:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 8001f2e:	4819      	ldr	r0, [pc, #100]	@ (8001f94 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 8001f30:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 8001f34:	4818      	ldr	r0, [pc, #96]	@ (8001f98 <HAL_DSI_EndOfRefreshCallback+0x140>)
 8001f36:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f3a:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8001f3c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8001f3e:	f041 0101 	orr.w	r1, r1, #1
 8001f42:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8001f44:	9503      	str	r5, [sp, #12]
 8001f46:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8001f4a:	f042 0208 	orr.w	r2, r2, #8
 8001f4e:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8001f52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	9303      	str	r3, [sp, #12]
 8001f5c:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8001f5e:	f7ff fced 	bl	800193c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8001f62:	f7ff ff0f 	bl	8001d84 <LCD_ReqEnable>
        return instance;
 8001f66:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa0 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 8001f68:	7035      	strb	r5, [r6, #0]
 8001f6a:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8001f6c:	b128      	cbz	r0, 8001f7a <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8001f6e:	6803      	ldr	r3, [r0, #0]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
    }
 8001f72:	b005      	add	sp, #20
 8001f74:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f78:	4718      	bx	r3
 8001f7a:	b005      	add	sp, #20
 8001f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f80:	24000778 	.word	0x24000778
 8001f84:	24000770 	.word	0x24000770
 8001f88:	01b201e2 	.word	0x01b201e2
 8001f8c:	50001000 	.word	0x50001000
 8001f90:	019201e3 	.word	0x019201e3
 8001f94:	01920003 	.word	0x01920003
 8001f98:	09c004b3 	.word	0x09c004b3
 8001f9c:	019201e2 	.word	0x019201e2
 8001fa0:	24025274 	.word	0x24025274
 8001fa4:	24000774 	.word	0x24000774
 8001fa8:	24000414 	.word	0x24000414

08001fac <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8001fac:	4601      	mov	r1, r0
 8001fae:	b508      	push	{r3, lr}
        return instance;
 8001fb0:	4b03      	ldr	r3, [pc, #12]	@ (8001fc0 <IdleTaskHook+0x14>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8001fb4:	b101      	cbz	r1, 8001fb8 <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 8001fb6:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 8001fb8:	f00c fb6c 	bl	800e694 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	bd08      	pop	{r3, pc}
 8001fc0:	24025274 	.word	0x24025274

08001fc4 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8001fc4:	4b03      	ldr	r3, [pc, #12]	@ (8001fd4 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	4a02      	ldr	r2, [pc, #8]	@ (8001fd8 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8001fce:	601a      	str	r2, [r3, #0]

}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	24000760 	.word	0x24000760
 8001fd8:	08023200 	.word	0x08023200

08001fdc <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8001fdc:	6940      	ldr	r0, [r0, #20]
 8001fde:	4770      	bx	lr

08001fe0 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8001fe0:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8001fe4:	4770      	bx	lr

08001fe6 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8001fe6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001fe8:	b923      	cbnz	r3, 8001ff4 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8001fea:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8001fec:	3800      	subs	r0, #0
 8001fee:	bf18      	it	ne
 8001ff0:	2001      	movne	r0, #1
 8001ff2:	4770      	bx	lr
 8001ff4:	2001      	movs	r0, #1
}
 8001ff6:	4770      	bx	lr

08001ff8 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8001ff8:	6880      	ldr	r0, [r0, #8]
 8001ffa:	4770      	bx	lr

08001ffc <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8001ffc:	4770      	bx	lr

08001ffe <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 8001ffe:	3004      	adds	r0, #4
{
 8002000:	b510      	push	{r4, lr}
 8002002:	460c      	mov	r4, r1
    *data = videoInfo;
 8002004:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002006:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800200a:	bd10      	pop	{r4, pc}

0800200c <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 800200c:	4770      	bx	lr
	...

08002010 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 8002010:	b508      	push	{r3, lr}
    assert(0);
 8002012:	4a03      	ldr	r2, [pc, #12]	@ (8002020 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 8002014:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 8002018:	4b02      	ldr	r3, [pc, #8]	@ (8002024 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 800201a:	4803      	ldr	r0, [pc, #12]	@ (8002028 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 800201c:	f020 f85c 	bl	80220d8 <__assert_func>
 8002020:	08023520 	.word	0x08023520
 8002024:	080251eb 	.word	0x080251eb
 8002028:	0802357b 	.word	0x0802357b

0800202c <_ZN20HardwareMJPEGDecoderD0Ev>:
 800202c:	b510      	push	{r4, lr}
 800202e:	4604      	mov	r4, r0
 8002030:	2148      	movs	r1, #72	@ 0x48
 8002032:	f01f fcda 	bl	80219ea <_ZdlPvj>
 8002036:	4620      	mov	r0, r4
 8002038:	bd10      	pop	{r4, pc}
	...

0800203c <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800203c:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800203e:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002040:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 8002042:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002044:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002046:	6003      	str	r3, [r0, #0]
 8002048:	63c2      	str	r2, [r0, #60]	@ 0x3c
 800204a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 800204e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002052:	e9c0 2207 	strd	r2, r2, [r0, #28]
 8002056:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800205a:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 800205e:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002062:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 8002066:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800206a:	2001      	movs	r0, #1
 800206c:	f008 fffc 	bl	800b068 <osSemaphoreNew>
 8002070:	4b02      	ldr	r3, [pc, #8]	@ (800207c <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002072:	6018      	str	r0, [r3, #0]
}
 8002074:	4620      	mov	r0, r4
 8002076:	bd10      	pop	{r4, pc}
 8002078:	080237b0 	.word	0x080237b0
 800207c:	24000798 	.word	0x24000798

08002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002080:	b410      	push	{r4}
 8002082:	460c      	mov	r4, r1
 8002084:	4611      	mov	r1, r2
 8002086:	461a      	mov	r2, r3
    if (reader != 0)
 8002088:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800208a:	b13b      	cbz	r3, 800209c <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 800208c:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800208e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002090:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002092:	4420      	add	r0, r4
}
 8002094:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002098:	f020 bac2 	b.w	8022620 <strncmp>
        src = (const char*)movieData + offset;
 800209c:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800209e:	e7f8      	b.n	8002092 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

080020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 80020a0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 80020a2:	b510      	push	{r4, lr}
    if (reader != 0)
 80020a4:	b173      	cbz	r3, 80020c4 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 80020a6:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80020a8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 80020aa:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 80020ac:	1853      	adds	r3, r2, r1
 80020ae:	5c52      	ldrb	r2, [r2, r1]
 80020b0:	7898      	ldrb	r0, [r3, #2]
 80020b2:	785c      	ldrb	r4, [r3, #1]
 80020b4:	0400      	lsls	r0, r0, #16
 80020b6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 80020ba:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 80020c2:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 80020c4:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80020c6:	1853      	adds	r3, r2, r1
        val |= d[0];
 80020c8:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 80020ca:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 80020cc:	7898      	ldrb	r0, [r3, #2]
 80020ce:	0400      	lsls	r0, r0, #16
 80020d0:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 80020d4:	e7f1      	b.n	80020ba <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

080020d6 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 80020d6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020d8:	b143      	cbz	r3, 80020ec <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 80020da:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80020dc:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80020de:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80020e0:	185a      	adds	r2, r3, r1
 80020e2:	5c58      	ldrb	r0, [r3, r1]
 80020e4:	7852      	ldrb	r2, [r2, #1]
 80020e6:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80020ea:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80020ec:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80020ee:	185a      	adds	r2, r3, r1
        val |= d[0];
 80020f0:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80020f2:	7853      	ldrb	r3, [r2, #1]
 80020f4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80020f8:	4770      	bx	lr
	...

080020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80020fc:	b570      	push	{r4, r5, r6, lr}
 80020fe:	4604      	mov	r4, r0
    if (reader != 0)
 8002100:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 8002102:	460d      	mov	r5, r1
 8002104:	4616      	mov	r6, r2
    if (reader != 0)
 8002106:	b1d8      	cbz	r0, 8002140 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002108:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800210a:	4293      	cmp	r3, r2
 800210c:	d208      	bcs.n	8002120 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800210e:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 8002110:	4a0d      	ldr	r2, [pc, #52]	@ (8002148 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 8002112:	219e      	movs	r1, #158	@ 0x9e
 8002114:	480d      	ldr	r0, [pc, #52]	@ (800214c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 8002116:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 800211c:	f01f ffdc 	bl	80220d8 <__assert_func>
        reader->seek(offset);
 8002120:	6803      	ldr	r3, [r0, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 8002126:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8002128:	4632      	mov	r2, r6
 800212a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800212c:	6803      	ldr	r3, [r0, #0]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4798      	blx	r3
 8002132:	b910      	cbnz	r0, 800213a <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 8002134:	230d      	movs	r3, #13
 8002136:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 800213a:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 800213c:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 800213e:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002140:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002142:	4408      	add	r0, r1
 8002144:	e7fb      	b.n	800213e <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 8002146:	bf00      	nop
 8002148:	080235e9 	.word	0x080235e9
 800214c:	0802357b 	.word	0x0802357b
 8002150:	080235d6 	.word	0x080235d6

08002154 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002158:	6943      	ldr	r3, [r0, #20]
{
 800215a:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800215c:	b92b      	cbnz	r3, 800216a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 800215e:	4b22      	ldr	r3, [pc, #136]	@ (80021e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002160:	21e4      	movs	r1, #228	@ 0xe4
 8002162:	4a22      	ldr	r2, [pc, #136]	@ (80021ec <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002164:	4822      	ldr	r0, [pc, #136]	@ (80021f0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 8002166:	f01f ffb7 	bl	80220d8 <__assert_func>
    readData(currentMovieOffset, 8);
 800216a:	2208      	movs	r2, #8
 800216c:	6981      	ldr	r1, [r0, #24]
 800216e:	f7ff ffc5 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002172:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002174:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002178:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 800217c:	3104      	adds	r1, #4
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff ff8e 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002184:	69a3      	ldr	r3, [r4, #24]
 8002186:	4418      	add	r0, r3
 8002188:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800218a:	f100 0208 	add.w	r2, r0, #8
 800218e:	429a      	cmp	r2, r3
 8002190:	d306      	bcc.n	80021a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002192:	2301      	movs	r3, #1
    return false;
 8002194:	2000      	movs	r0, #0
    frameNumber = 1;
 8002196:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002198:	6a23      	ldr	r3, [r4, #32]
 800219a:	61a3      	str	r3, [r4, #24]
}
 800219c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 80021a0:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80021a2:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 80021a6:	2208      	movs	r2, #8
 80021a8:	4620      	mov	r0, r4
        frameNumber++;
 80021aa:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80021ac:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 80021b0:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80021b2:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 80021b4:	f7ff ffa2 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 80021b8:	f8d4 9018 	ldr.w	r9, [r4, #24]
 80021bc:	4620      	mov	r0, r4
 80021be:	4649      	mov	r1, r9
 80021c0:	f7ff ff89 	bl	80020d6 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80021c4:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 80021c8:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80021ca:	4620      	mov	r0, r4
 80021cc:	f7ff ff83 	bl	80020d6 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 80021d0:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 80021d4:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff ff62 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80021dc:	45b0      	cmp	r8, r6
 80021de:	d1d1      	bne.n	8002184 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80021e0:	42bd      	cmp	r5, r7
 80021e2:	d1cf      	bne.n	8002184 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80021e4:	2001      	movs	r0, #1
 80021e6:	e7d9      	b.n	800219c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80021e8:	0802362b 	.word	0x0802362b
 80021ec:	08023674 	.word	0x08023674
 80021f0:	0802357b 	.word	0x0802357b

080021f4 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80021f4:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80021f6:	6803      	ldr	r3, [r0, #0]
 80021f8:	bf38      	it	cc
 80021fa:	2101      	movcc	r1, #1
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80021fe:	b570      	push	{r4, r5, r6, lr}
 8002200:	460d      	mov	r5, r1
 8002202:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002204:	4798      	blx	r3
 8002206:	42a8      	cmp	r0, r5
 8002208:	d204      	bcs.n	8002214 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	4620      	mov	r0, r4
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	4798      	blx	r3
 8002212:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 8002214:	1e6b      	subs	r3, r5, #1
 8002216:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 8002218:	2210      	movs	r2, #16
 800221a:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 800221c:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 8002220:	f106 0108 	add.w	r1, r6, #8
 8002224:	f7ff ff6a 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 8002228:	f106 0110 	add.w	r1, r6, #16
 800222c:	4620      	mov	r0, r4
 800222e:	f7ff ff37 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002232:	6a23      	ldr	r3, [r4, #32]
 8002234:	3b04      	subs	r3, #4
 8002236:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 8002238:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 800223c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002240 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002240:	2100      	movs	r1, #0
    readData(0, 72);
 8002242:	2248      	movs	r2, #72	@ 0x48
{
 8002244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002248:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800224a:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 800224c:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002250:	f7ff ff54 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002254:	69a6      	ldr	r6, [r4, #24]
 8002256:	2304      	movs	r3, #4
 8002258:	4a63      	ldr	r2, [pc, #396]	@ (80023e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800225a:	4631      	mov	r1, r6
 800225c:	4620      	mov	r0, r4
 800225e:	f7ff ff0f 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002262:	b148      	cbz	r0, 8002278 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002264:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 8002266:	4a61      	ldr	r2, [pc, #388]	@ (80023ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002268:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 800226c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002270:	4b5f      	ldr	r3, [pc, #380]	@ (80023f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002272:	4860      	ldr	r0, [pc, #384]	@ (80023f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002274:	f01f ff30 	bl	80220d8 <__assert_func>
    currentMovieOffset += 8;
 8002278:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 800227c:	2304      	movs	r3, #4
 800227e:	4a5e      	ldr	r2, [pc, #376]	@ (80023f8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002280:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002282:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002284:	f7ff fefc 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002288:	b138      	cbz	r0, 800229a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800228a:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 800228c:	4a57      	ldr	r2, [pc, #348]	@ (80023ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800228e:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002292:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002296:	4b59      	ldr	r3, [pc, #356]	@ (80023fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002298:	e7eb      	b.n	8002272 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800229a:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800229e:	2304      	movs	r3, #4
 80022a0:	4a57      	ldr	r2, [pc, #348]	@ (8002400 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 80022a2:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 80022a4:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 80022a6:	f7ff feeb 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022aa:	4607      	mov	r7, r0
 80022ac:	b138      	cbz	r0, 80022be <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80022ae:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 80022b0:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022b2:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 80022b6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 80022ba:	4b52      	ldr	r3, [pc, #328]	@ (8002404 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 80022bc:	e7d9      	b.n	8002272 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 80022be:	f106 0110 	add.w	r1, r6, #16
 80022c2:	4620      	mov	r0, r4
 80022c4:	f7ff feec 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 80022c8:	4605      	mov	r5, r0
 80022ca:	b920      	cbnz	r0, 80022d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 80022cc:	4b4e      	ldr	r3, [pc, #312]	@ (8002408 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 80022ce:	f240 1141 	movw	r1, #321	@ 0x141
 80022d2:	4a46      	ldr	r2, [pc, #280]	@ (80023ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80022d4:	e7cd      	b.n	8002272 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 80022d6:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 80022da:	2304      	movs	r3, #4
 80022dc:	4a4b      	ldr	r2, [pc, #300]	@ (800240c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80022de:	4620      	mov	r0, r4
 80022e0:	4641      	mov	r1, r8
 80022e2:	f7ff fecd 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022e6:	2800      	cmp	r0, #0
 80022e8:	d049      	beq.n	800237e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80022ea:	2306      	movs	r3, #6
 80022ec:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80022f0:	2304      	movs	r3, #4
 80022f2:	4a47      	ldr	r2, [pc, #284]	@ (8002410 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80022f4:	f106 0118 	add.w	r1, r6, #24
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fec1 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80022fe:	2800      	cmp	r0, #0
 8002300:	d03f      	beq.n	8002382 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 8002302:	2307      	movs	r3, #7
 8002304:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002308:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 800230a:	4f42      	ldr	r7, [pc, #264]	@ (8002414 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 800230c:	220c      	movs	r2, #12
 800230e:	4620      	mov	r0, r4
 8002310:	4629      	mov	r1, r5
 8002312:	f7ff fef3 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002316:	f105 0608 	add.w	r6, r5, #8
 800231a:	2304      	movs	r3, #4
 800231c:	463a      	mov	r2, r7
 800231e:	4620      	mov	r0, r4
 8002320:	4631      	mov	r1, r6
 8002322:	f7ff fead 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002326:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800232a:	2800      	cmp	r0, #0
 800232c:	d048      	beq.n	80023c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 800232e:	2b00      	cmp	r3, #0
 8002330:	d148      	bne.n	80023c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 8002332:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002334:	42ab      	cmp	r3, r5
 8002336:	d849      	bhi.n	80023cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002338:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800233c:	3504      	adds	r5, #4
 800233e:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002340:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002342:	4629      	mov	r1, r5
 8002344:	f7ff feac 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002348:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800234a:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 800234c:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800234e:	4620      	mov	r0, r4
 8002350:	f7ff fea6 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002354:	4406      	add	r6, r0
    readData(listOffset, 4);
 8002356:	2204      	movs	r2, #4
 8002358:	4620      	mov	r0, r4
 800235a:	4631      	mov	r1, r6
 800235c:	f7ff fece 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002360:	2304      	movs	r3, #4
 8002362:	4a2d      	ldr	r2, [pc, #180]	@ (8002418 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002364:	4631      	mov	r1, r6
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff fe8a 	bl	8002080 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800236c:	2800      	cmp	r0, #0
 800236e:	d138      	bne.n	80023e2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002370:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002372:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002374:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002376:	69a3      	ldr	r3, [r4, #24]
 8002378:	6223      	str	r3, [r4, #32]
}
 800237a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800237e:	2701      	movs	r7, #1
 8002380:	e7b6      	b.n	80022f0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002382:	2f00      	cmp	r7, #0
 8002384:	d0c0      	beq.n	8002308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002386:	f106 0120 	add.w	r1, r6, #32
 800238a:	4620      	mov	r0, r4
 800238c:	f7ff fe88 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002394:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002398:	fbb0 f0f3 	udiv	r0, r0, r3
 800239c:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800239e:	4620      	mov	r0, r4
 80023a0:	f7ff fe7e 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 80023a4:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 80023a8:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fe78 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 80023b0:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 80023b4:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 80023b6:	4620      	mov	r0, r4
 80023b8:	f7ff fe72 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80023bc:	6120      	str	r0, [r4, #16]
 80023be:	e7a3      	b.n	8002308 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0b9      	beq.n	8002338 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 80023c4:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80023c6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 80023ca:	e7d6      	b.n	800237a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 80023cc:	1d29      	adds	r1, r5, #4
 80023ce:	4620      	mov	r0, r4
 80023d0:	f7ff fe66 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 80023d4:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 80023d6:	220c      	movs	r2, #12
 80023d8:	4620      	mov	r0, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	f7ff fe8e 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80023e0:	e799      	b.n	8002316 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80023e2:	230b      	movs	r3, #11
 80023e4:	e7ef      	b.n	80023c6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80023e6:	bf00      	nop
 80023e8:	080236a7 	.word	0x080236a7
 80023ec:	080236c5 	.word	0x080236c5
 80023f0:	080236ac 	.word	0x080236ac
 80023f4:	0802357b 	.word	0x0802357b
 80023f8:	080236f2 	.word	0x080236f2
 80023fc:	080236f7 	.word	0x080236f7
 8002400:	0802370f 	.word	0x0802370f
 8002404:	08023714 	.word	0x08023714
 8002408:	0802372a 	.word	0x0802372a
 800240c:	08023736 	.word	0x08023736
 8002410:	0802373b 	.word	0x0802373b
 8002414:	08023740 	.word	0x08023740
 8002418:	08023745 	.word	0x08023745

0800241c <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 800241c:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 8002420:	2200      	movs	r2, #0
 8002422:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 8002424:	f7ff bf0c 	b.w	8002240 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

08002428 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 8002428:	b510      	push	{r4, lr}
    movieData = 0;
 800242a:	2300      	movs	r3, #0
{
 800242c:	4604      	mov	r4, r0
 800242e:	4608      	mov	r0, r1
    movieData = 0;
 8002430:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 8002432:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 8002434:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	4798      	blx	r3
 800243a:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 800243c:	4620      	mov	r0, r4
}
 800243e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002442:	f7ff befd 	b.w	8002240 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

08002448 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 8002448:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 800244a:	4c14      	ldr	r4, [pc, #80]	@ (800249c <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 800244c:	4d14      	ldr	r5, [pc, #80]	@ (80024a0 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 800244e:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002450:	2400      	movs	r4, #0
 8002452:	4b14      	ldr	r3, [pc, #80]	@ (80024a4 <JPEG_Decode_DMA+0x5c>)
 8002454:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 8002456:	4b14      	ldr	r3, [pc, #80]	@ (80024a8 <JPEG_Decode_DMA+0x60>)
 8002458:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800245a:	4b14      	ldr	r3, [pc, #80]	@ (80024ac <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 800245c:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 800245e:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <JPEG_Decode_DMA+0x68>)
 8002462:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002464:	4b13      	ldr	r3, [pc, #76]	@ (80024b4 <JPEG_Decode_DMA+0x6c>)
 8002466:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 8002468:	4b13      	ldr	r3, [pc, #76]	@ (80024b8 <JPEG_Decode_DMA+0x70>)
 800246a:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 800246c:	4b13      	ldr	r3, [pc, #76]	@ (80024bc <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 800246e:	682a      	ldr	r2, [r5, #0]
 8002470:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002474:	701c      	strb	r4, [r3, #0]
 8002476:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002478:	e9c3 4402 	strd	r4, r4, [r3, #8]
 800247c:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002480:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002484:	4a0e      	ldr	r2, [pc, #56]	@ (80024c0 <JPEG_Decode_DMA+0x78>)
 8002486:	68d2      	ldr	r2, [r2, #12]
 8002488:	436a      	muls	r2, r5
 800248a:	9200      	str	r2, [sp, #0]
 800248c:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f005 fc67 	bl	8007d64 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002496:	4620      	mov	r0, r4
 8002498:	b003      	add	sp, #12
 800249a:	bd30      	pop	{r4, r5, pc}
 800249c:	24009dc4 	.word	0x24009dc4
 80024a0:	24009da0 	.word	0x24009da0
 80024a4:	24009db0 	.word	0x24009db0
 80024a8:	24000794 	.word	0x24000794
 80024ac:	24009dc0 	.word	0x24009dc0
 80024b0:	24009db8 	.word	0x24009db8
 80024b4:	24009dbc 	.word	0x24009dbc
 80024b8:	2400079c 	.word	0x2400079c
 80024bc:	24000010 	.word	0x24000010
 80024c0:	2400077c 	.word	0x2400077c

080024c4 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 80024c4:	684b      	ldr	r3, [r1, #4]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 80024ca:	68cb      	ldr	r3, [r1, #12]
 80024cc:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80024ce:	bf1e      	ittt	ne
 80024d0:	f023 030f 	bicne.w	r3, r3, #15
 80024d4:	3310      	addne	r3, #16
 80024d6:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 80024d8:	688b      	ldr	r3, [r1, #8]
 80024da:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80024dc:	bf1e      	ittt	ne
 80024de:	f023 030f 	bicne.w	r3, r3, #15
 80024e2:	3310      	addne	r3, #16
 80024e4:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80024e6:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80024e8:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80024ea:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80024ec:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80024ee:	4353      	muls	r3, r2
 80024f0:	4a0e      	ldr	r2, [pc, #56]	@ (800252c <HAL_JPEG_InfoReadyCallback+0x68>)
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d10e      	bne.n	8002518 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80024fa:	68cb      	ldr	r3, [r1, #12]
 80024fc:	071a      	lsls	r2, r3, #28
 80024fe:	d003      	beq.n	8002508 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002500:	f023 030f 	bic.w	r3, r3, #15
 8002504:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002506:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002508:	688b      	ldr	r3, [r1, #8]
 800250a:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 800250c:	bf1e      	ittt	ne
 800250e:	f023 0307 	bicne.w	r3, r3, #7
 8002512:	3308      	addne	r3, #8
 8002514:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002516:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1fc      	bne.n	8002516 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 800251c:	68cb      	ldr	r3, [r1, #12]
 800251e:	0758      	lsls	r0, r3, #29
 8002520:	d0f2      	beq.n	8002508 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002522:	f023 0307 	bic.w	r3, r3, #7
 8002526:	3308      	adds	r3, #8
 8002528:	e7ed      	b.n	8002506 <HAL_JPEG_InfoReadyCallback+0x42>
 800252a:	bf00      	nop
 800252c:	24009da8 	.word	0x24009da8

08002530 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002530:	4a0b      	ldr	r2, [pc, #44]	@ (8002560 <HAL_JPEG_GetDataCallback+0x30>)
 8002532:	6813      	ldr	r3, [r2, #0]
 8002534:	440b      	add	r3, r1
    {
 8002536:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002538:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 800253a:	4a0a      	ldr	r2, [pc, #40]	@ (8002564 <HAL_JPEG_GetDataCallback+0x34>)
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	4293      	cmp	r3, r2
 8002540:	d20c      	bcs.n	800255c <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002542:	4c09      	ldr	r4, [pc, #36]	@ (8002568 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002544:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002546:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002548:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 800254c:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 800254e:	bf28      	it	cs
 8002550:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002554:	6021      	str	r1, [r4, #0]
        }
    }
 8002556:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002558:	f005 bc66 	b.w	8007e28 <HAL_JPEG_ConfigInputBuffer>
    }
 800255c:	bc30      	pop	{r4, r5}
 800255e:	4770      	bx	lr
 8002560:	24009dc0 	.word	0x24009dc0
 8002564:	24009dbc 	.word	0x24009dbc
 8002568:	24009db8 	.word	0x24009db8

0800256c <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 800256c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800256e:	4c20      	ldr	r4, [pc, #128]	@ (80025f0 <HAL_JPEG_DataReadyCallback+0x84>)
 8002570:	2101      	movs	r1, #1
 8002572:	4d20      	ldr	r5, [pc, #128]	@ (80025f4 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002574:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002576:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002578:	4f1f      	ldr	r7, [pc, #124]	@ (80025f8 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 800257a:	011b      	lsls	r3, r3, #4
 800257c:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 800257e:	6823      	ldr	r3, [r4, #0]
 8002580:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002584:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002586:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <HAL_JPEG_DataReadyCallback+0x90>)
 8002588:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 800258a:	6822      	ldr	r2, [r4, #0]
 800258c:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002590:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68f9      	ldr	r1, [r7, #12]
 8002596:	440a      	add	r2, r1
 8002598:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	3301      	adds	r3, #1
 800259e:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d901      	bls.n	80025aa <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 80025a6:	2300      	movs	r3, #0
 80025a8:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 80025aa:	6823      	ldr	r3, [r4, #0]
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	5ceb      	ldrb	r3, [r5, r3]
 80025b0:	b133      	cbz	r3, 80025c0 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 80025b2:	2102      	movs	r1, #2
 80025b4:	4630      	mov	r0, r6
 80025b6:	f005 fc09 	bl	8007dcc <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 80025ba:	4b11      	ldr	r3, [pc, #68]	@ (8002600 <HAL_JPEG_DataReadyCallback+0x94>)
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80025c0:	6822      	ldr	r2, [r4, #0]
 80025c2:	4630      	mov	r0, r6
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 80025ca:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80025ce:	6869      	ldr	r1, [r5, #4]
 80025d0:	435a      	muls	r2, r3
 80025d2:	f005 fc2c 	bl	8007e2e <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 80025d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_JPEG_DataReadyCallback+0x98>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	7a1a      	ldrb	r2, [r3, #8]
 80025dc:	b93a      	cbnz	r2, 80025ee <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 80025de:	7a9b      	ldrb	r3, [r3, #10]
 80025e0:	b92b      	cbnz	r3, 80025ee <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 80025e2:	4b09      	ldr	r3, [pc, #36]	@ (8002608 <HAL_JPEG_DataReadyCallback+0x9c>)
 80025e4:	6818      	ldr	r0, [r3, #0]
        }
    }
 80025e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 80025ea:	f008 bdb3 	b.w	800b154 <osSemaphoreRelease>
    }
 80025ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80025f0:	24009da0 	.word	0x24009da0
 80025f4:	24000010 	.word	0x24000010
 80025f8:	2400077c 	.word	0x2400077c
 80025fc:	2400079c 	.word	0x2400079c
 8002600:	24009db0 	.word	0x24009db0
 8002604:	24009da4 	.word	0x24009da4
 8002608:	24000798 	.word	0x24000798

0800260c <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 800260c:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 800260e:	e7fe      	b.n	800260e <HAL_JPEG_ErrorCallback+0x2>

08002610 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002610:	4b01      	ldr	r3, [pc, #4]	@ (8002618 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
    }
 8002616:	4770      	bx	lr
 8002618:	24009db4 	.word	0x24009db4

0800261c <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 800261c:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 800261e:	4d16      	ldr	r5, [pc, #88]	@ (8002678 <JPEG_OutputHandler+0x5c>)
{
 8002620:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002622:	682b      	ldr	r3, [r5, #0]
 8002624:	b113      	cbz	r3, 800262c <JPEG_OutputHandler+0x10>
 8002626:	4b15      	ldr	r3, [pc, #84]	@ (800267c <JPEG_OutputHandler+0x60>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	bb1b      	cbnz	r3, 8002674 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 800262c:	4b14      	ldr	r3, [pc, #80]	@ (8002680 <JPEG_OutputHandler+0x64>)
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	7a03      	ldrb	r3, [r0, #8]
 8002632:	b963      	cbnz	r3, 800264e <JPEG_OutputHandler+0x32>
 8002634:	4b13      	ldr	r3, [pc, #76]	@ (8002684 <JPEG_OutputHandler+0x68>)
 8002636:	4a14      	ldr	r2, [pc, #80]	@ (8002688 <JPEG_OutputHandler+0x6c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	011b      	lsls	r3, r3, #4
 800263c:	5cd3      	ldrb	r3, [r2, r3]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d105      	bne.n	800264e <JPEG_OutputHandler+0x32>
 8002642:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <JPEG_OutputHandler+0x60>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b913      	cbnz	r3, 800264e <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002648:	6803      	ldr	r3, [r0, #0]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 800264e:	4a0f      	ldr	r2, [pc, #60]	@ (800268c <JPEG_OutputHandler+0x70>)
 8002650:	6813      	ldr	r3, [r2, #0]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d10c      	bne.n	8002670 <JPEG_OutputHandler+0x54>
 8002656:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <JPEG_OutputHandler+0x74>)
 8002658:	490b      	ldr	r1, [pc, #44]	@ (8002688 <JPEG_OutputHandler+0x6c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	011b      	lsls	r3, r3, #4
 800265e:	5ccb      	ldrb	r3, [r1, r3]
 8002660:	b933      	cbnz	r3, 8002670 <JPEG_OutputHandler+0x54>
 8002662:	682b      	ldr	r3, [r5, #0]
 8002664:	b923      	cbnz	r3, 8002670 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002666:	2102      	movs	r1, #2
 8002668:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 800266a:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 800266c:	f005 fe0d 	bl	800828a <HAL_JPEG_Resume>
        return 1;
 8002670:	2002      	movs	r0, #2
    }

    return 2;
}
 8002672:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002674:	2001      	movs	r0, #1
 8002676:	e7fc      	b.n	8002672 <JPEG_OutputHandler+0x56>
 8002678:	24009db4 	.word	0x24009db4
 800267c:	24000790 	.word	0x24000790
 8002680:	24009da4 	.word	0x24009da4
 8002684:	24000794 	.word	0x24000794
 8002688:	24000010 	.word	0x24000010
 800268c:	24009db0 	.word	0x24009db0
 8002690:	24009da0 	.word	0x24009da0

08002694 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002694:	b570      	push	{r4, r5, r6, lr}
 8002696:	4605      	mov	r5, r0
    if (length == 0)
 8002698:	2a00      	cmp	r2, #0
 800269a:	d035      	beq.n	8002708 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 800269c:	2b00      	cmp	r3, #0
 800269e:	d033      	beq.n	8002708 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 80026a0:	481a      	ldr	r0, [pc, #104]	@ (800270c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 80026a2:	2403      	movs	r4, #3
 80026a4:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80026a6:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 80026a8:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80026aa:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80026ae:	bf18      	it	ne
 80026b0:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 80026b4:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 80026b6:	bf18      	it	ne
 80026b8:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 80026ba:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 80026bc:	0924      	lsrs	r4, r4, #4
 80026be:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 80026c0:	692c      	ldr	r4, [r5, #16]
 80026c2:	f014 040f 	ands.w	r4, r4, #15
 80026c6:	bf18      	it	ne
 80026c8:	f1c4 0410 	rsbne	r4, r4, #16
 80026cc:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 80026ce:	4810      	ldr	r0, [pc, #64]	@ (8002710 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 80026d0:	f7ff feba 	bl	8002448 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80026d4:	4c0f      	ldr	r4, [pc, #60]	@ (8002714 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 80026d6:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 80026d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002718 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80026da:	4d0d      	ldr	r5, [pc, #52]	@ (8002710 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 80026dc:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 80026de:	4628      	mov	r0, r5
 80026e0:	f7ff ff9c 	bl	800261c <JPEG_OutputHandler>
 80026e4:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 80026e6:	6823      	ldr	r3, [r4, #0]
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d105      	bne.n	80026f8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 80026ec:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 80026ee:	f04f 31ff 	mov.w	r1, #4294967295
 80026f2:	6818      	ldr	r0, [r3, #0]
 80026f4:	f008 fd02 	bl	800b0fc <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d1ef      	bne.n	80026de <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 80026fe:	2300      	movs	r3, #0
 8002700:	4a07      	ldr	r2, [pc, #28]	@ (8002720 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002702:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002704:	4a07      	ldr	r2, [pc, #28]	@ (8002724 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002706:	6013      	str	r3, [r2, #0]
}
 8002708:	bd70      	pop	{r4, r5, r6, pc}
 800270a:	bf00      	nop
 800270c:	2400077c 	.word	0x2400077c
 8002710:	24000594 	.word	0x24000594
 8002714:	24009dac 	.word	0x24009dac
 8002718:	24009da4 	.word	0x24009da4
 800271c:	24000798 	.word	0x24000798
 8002720:	24009db4 	.word	0x24009db4
 8002724:	24000790 	.word	0x24000790

08002728 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800272c:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800272e:	6943      	ldr	r3, [r0, #20]
{
 8002730:	b085      	sub	sp, #20
 8002732:	4604      	mov	r4, r0
 8002734:	460f      	mov	r7, r1
 8002736:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002738:	b92b      	cbnz	r3, 8002746 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 800273a:	4b29      	ldr	r3, [pc, #164]	@ (80027e0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 800273c:	21b0      	movs	r1, #176	@ 0xb0
 800273e:	4a29      	ldr	r2, [pc, #164]	@ (80027e4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002740:	4829      	ldr	r0, [pc, #164]	@ (80027e8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002742:	f01f fcc9 	bl	80220d8 <__assert_func>
    readData(currentMovieOffset, 8);
 8002746:	2208      	movs	r2, #8
 8002748:	6981      	ldr	r1, [r0, #24]
 800274a:	f7ff fcd7 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 800274e:	69a6      	ldr	r6, [r4, #24]
 8002750:	4620      	mov	r0, r4
 8002752:	4631      	mov	r1, r6
 8002754:	f7ff fcbf 	bl	80020d6 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002758:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 800275a:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 800275c:	4620      	mov	r0, r4
 800275e:	f7ff fcba 	bl	80020d6 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002762:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002764:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fc9a 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800276c:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002770:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002772:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002774:	1842      	adds	r2, r0, r1
 8002776:	429a      	cmp	r2, r3
 8002778:	d226      	bcs.n	80027c8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 800277a:	f243 0330 	movw	r3, #12336	@ 0x3030
 800277e:	459b      	cmp	fp, r3
 8002780:	d117      	bne.n	80027b2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002782:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002786:	459a      	cmp	sl, r3
 8002788:	d113      	bne.n	80027b2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 800278a:	b190      	cbz	r0, 80027b2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 800278c:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 800278e:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002790:	4620      	mov	r0, r4
 8002792:	f7ff fcb3 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002796:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002798:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 800279a:	462a      	mov	r2, r5
 800279c:	4620      	mov	r0, r4
 800279e:	f8cd 8000 	str.w	r8, [sp]
 80027a2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80027a6:	463b      	mov	r3, r7
 80027a8:	f7ff ff74 	bl	8002694 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 80027ac:	6963      	ldr	r3, [r4, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 80027b2:	69a3      	ldr	r3, [r4, #24]
 80027b4:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 80027b6:	b905      	cbnz	r5, 80027ba <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 80027b8:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80027ba:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80027bc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80027be:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 80027c2:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 80027c4:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 80027c6:	d109      	bne.n	80027dc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 80027c8:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 80027ca:	2001      	movs	r0, #1
        frameNumber = 1;
 80027cc:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 80027ce:	6a23      	ldr	r3, [r4, #32]
 80027d0:	61a3      	str	r3, [r4, #24]
}
 80027d2:	f080 0001 	eor.w	r0, r0, #1
 80027d6:	b005      	add	sp, #20
 80027d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 80027dc:	2000      	movs	r0, #0
 80027de:	e7f8      	b.n	80027d2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 80027e0:	0802362b 	.word	0x0802362b
 80027e4:	0802374a 	.word	0x0802374a
 80027e8:	0802357b 	.word	0x0802357b

080027ec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 80027ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027ee:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 80027f0:	6981      	ldr	r1, [r0, #24]
{
 80027f2:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 80027f4:	2208      	movs	r2, #8
 80027f6:	f7ff fc81 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 80027fa:	69a7      	ldr	r7, [r4, #24]
 80027fc:	4620      	mov	r0, r4
 80027fe:	1d39      	adds	r1, r7, #4
 8002800:	f7ff fc4e 	bl	80020a0 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002804:	f107 0108 	add.w	r1, r7, #8
 8002808:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 800280a:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 800280c:	4620      	mov	r0, r4
 800280e:	f7ff fc75 	bl	80020fc <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002812:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002814:	b16e      	cbz	r6, 8002832 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002816:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002818:	4c07      	ldr	r4, [pc, #28]	@ (8002838 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 800281a:	4d08      	ldr	r5, [pc, #32]	@ (800283c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 800281c:	4633      	mov	r3, r6
 800281e:	4807      	ldr	r0, [pc, #28]	@ (800283c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002820:	f7ff fe12 	bl	8002448 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002824:	4628      	mov	r0, r5
 8002826:	f7ff fef9 	bl	800261c <JPEG_OutputHandler>
 800282a:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 800282c:	6823      	ldr	r3, [r4, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f8      	beq.n	8002824 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002832:	2001      	movs	r0, #1
 8002834:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002836:	bf00      	nop
 8002838:	24009dac 	.word	0x24009dac
 800283c:	24000594 	.word	0x24000594

08002840 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002840:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <DMA2D_CopyBuffer+0x70>)
 8002842:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002846:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002848:	ea4f 130c 	mov.w	r3, ip, lsl #4
 800284c:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 800284e:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002850:	4e18      	ldr	r6, [pc, #96]	@ (80028b4 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002852:	4f19      	ldr	r7, [pc, #100]	@ (80028b8 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002854:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002858:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 800285c:	434d      	muls	r5, r1
 800285e:	6911      	ldr	r1, [r2, #16]
 8002860:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002864:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002866:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002868:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 800286a:	683f      	ldr	r7, [r7, #0]
 800286c:	68d3      	ldr	r3, [r2, #12]
 800286e:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002870:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002872:	45bc      	cmp	ip, r7
 8002874:	d317      	bcc.n	80028a6 <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002876:	6892      	ldr	r2, [r2, #8]
 8002878:	f1c2 0210 	rsb	r2, r2, #16
 800287c:	430a      	orrs	r2, r1
 800287e:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002880:	4a0e      	ldr	r2, [pc, #56]	@ (80028bc <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002882:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002886:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002888:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 800288a:	4a0a      	ldr	r2, [pc, #40]	@ (80028b4 <DMA2D_CopyBuffer+0x74>)
 800288c:	4421      	add	r1, r4
 800288e:	4429      	add	r1, r5
 8002890:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002892:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002894:	2300      	movs	r3, #0
 8002896:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <DMA2D_CopyBuffer+0x80>)
 800289a:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 800289c:	6843      	ldr	r3, [r0, #4]
 800289e:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80028a0:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <DMA2D_CopyBuffer+0x84>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 80028a6:	f041 0110 	orr.w	r1, r1, #16
 80028aa:	6471      	str	r1, [r6, #68]	@ 0x44
 80028ac:	e7e8      	b.n	8002880 <DMA2D_CopyBuffer+0x40>
 80028ae:	bf00      	nop
 80028b0:	2400077c 	.word	0x2400077c
 80028b4:	52001000 	.word	0x52001000
 80028b8:	24009da8 	.word	0x24009da8
 80028bc:	24009dc4 	.word	0x24009dc4
 80028c0:	ff09000b 	.word	0xff09000b
 80028c4:	00012301 	.word	0x00012301

080028c8 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 80028c8:	4b0c      	ldr	r3, [pc, #48]	@ (80028fc <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 80028ca:	2200      	movs	r2, #0
 80028cc:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 80028ce:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 80028d0:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 80028d2:	3101      	adds	r1, #1
 80028d4:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 80028d6:	6819      	ldr	r1, [r3, #0]
 80028d8:	2901      	cmp	r1, #1
 80028da:	d900      	bls.n	80028de <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 80028dc:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <DMA2D_ExternalJobCompleted+0x38>)
 80028e0:	4a08      	ldr	r2, [pc, #32]	@ (8002904 <DMA2D_ExternalJobCompleted+0x3c>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	68d2      	ldr	r2, [r2, #12]
 80028e6:	1a9b      	subs	r3, r3, r2
 80028e8:	68c2      	ldr	r2, [r0, #12]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d302      	bcc.n	80028f4 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 80028ee:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <DMA2D_ExternalJobCompleted+0x40>)
 80028f0:	2201      	movs	r2, #1
 80028f2:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 80028f4:	4b05      	ldr	r3, [pc, #20]	@ (800290c <DMA2D_ExternalJobCompleted+0x44>)
 80028f6:	6818      	ldr	r0, [r3, #0]
 80028f8:	f008 bc2c 	b.w	800b154 <osSemaphoreRelease>
 80028fc:	24000794 	.word	0x24000794
 8002900:	24009da8 	.word	0x24009da8
 8002904:	2400077c 	.word	0x2400077c
 8002908:	24000790 	.word	0x24000790
 800290c:	24000798 	.word	0x24000798

08002910 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002910:	2101      	movs	r1, #1
 8002912:	2200      	movs	r2, #0
{
 8002914:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002916:	4608      	mov	r0, r1
 8002918:	f008 fba6 	bl	800b068 <osSemaphoreNew>
 800291c:	4b0a      	ldr	r3, [pc, #40]	@ (8002948 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 800291e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002920:	b928      	cbnz	r0, 800292e <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002922:	4b0a      	ldr	r3, [pc, #40]	@ (800294c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002924:	2128      	movs	r1, #40	@ 0x28
 8002926:	4a0a      	ldr	r2, [pc, #40]	@ (8002950 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002928:	480a      	ldr	r0, [pc, #40]	@ (8002954 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 800292a:	f01f fbd5 	bl	80220d8 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 800292e:	2200      	movs	r2, #0
 8002930:	2104      	movs	r1, #4
 8002932:	2001      	movs	r0, #1
 8002934:	f008 fc37 	bl	800b1a6 <osMessageQueueNew>
 8002938:	4b07      	ldr	r3, [pc, #28]	@ (8002958 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 800293a:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 800293c:	b918      	cbnz	r0, 8002946 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 800293e:	4b07      	ldr	r3, [pc, #28]	@ (800295c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002940:	212c      	movs	r1, #44	@ 0x2c
 8002942:	4a03      	ldr	r2, [pc, #12]	@ (8002950 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002944:	e7f0      	b.n	8002928 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002946:	bd08      	pop	{r3, pc}
 8002948:	24009dcc 	.word	0x24009dcc
 800294c:	080237ec 	.word	0x080237ec
 8002950:	08023835 	.word	0x08023835
 8002954:	08023864 	.word	0x08023864
 8002958:	24009dc8 	.word	0x24009dc8
 800295c:	080238b5 	.word	0x080238b5

08002960 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002960:	4b02      	ldr	r3, [pc, #8]	@ (800296c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002962:	f04f 31ff 	mov.w	r1, #4294967295
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	f008 bbc8 	b.w	800b0fc <osSemaphoreAcquire>
 800296c:	24009dcc 	.word	0x24009dcc

08002970 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002970:	4b01      	ldr	r3, [pc, #4]	@ (8002978 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f008 bbee 	b.w	800b154 <osSemaphoreRelease>
 8002978:	24009dcc 	.word	0x24009dcc

0800297c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 800297c:	4b02      	ldr	r3, [pc, #8]	@ (8002988 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 800297e:	2100      	movs	r1, #0
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	f008 bbbb 	b.w	800b0fc <osSemaphoreAcquire>
 8002986:	bf00      	nop
 8002988:	24009dcc 	.word	0x24009dcc

0800298c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 800298c:	f7ff bff0 	b.w	8002970 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002990 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002990:	2300      	movs	r3, #0
 8002992:	4803      	ldr	r0, [pc, #12]	@ (80029a0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002994:	4903      	ldr	r1, [pc, #12]	@ (80029a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002996:	461a      	mov	r2, r3
 8002998:	6800      	ldr	r0, [r0, #0]
 800299a:	f008 bc3f 	b.w	800b21c <osMessageQueuePut>
 800299e:	bf00      	nop
 80029a0:	24009dc8 	.word	0x24009dc8
 80029a4:	24000030 	.word	0x24000030

080029a8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80029a8:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80029aa:	2300      	movs	r3, #0
 80029ac:	4c07      	ldr	r4, [pc, #28]	@ (80029cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 80029ae:	a901      	add	r1, sp, #4
 80029b0:	461a      	mov	r2, r3
 80029b2:	6820      	ldr	r0, [r4, #0]
 80029b4:	f008 fc63 	bl	800b27e <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295
 80029bc:	2200      	movs	r2, #0
 80029be:	a901      	add	r1, sp, #4
 80029c0:	6820      	ldr	r0, [r4, #0]
 80029c2:	f008 fc5c 	bl	800b27e <osMessageQueueGet>
}
 80029c6:	b002      	add	sp, #8
 80029c8:	bd10      	pop	{r4, pc}
 80029ca:	bf00      	nop
 80029cc:	24009dc8 	.word	0x24009dc8

080029d0 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 80029d0:	6803      	ldr	r3, [r0, #0]
 80029d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d4:	4718      	bx	r3

080029d6 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 80029d6:	2001      	movs	r0, #1
 80029d8:	4770      	bx	lr

080029da <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 80029da:	e7fe      	b.n	80029da <DMA2D_XferErrorCallback>

080029dc <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 80029dc:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 80029e0:	4770      	bx	lr
	...

080029e4 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 80029e4:	b510      	push	{r4, lr}
 80029e6:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 80029e8:	f04f 31ff 	mov.w	r1, #4294967295
 80029ec:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 80029f0:	f008 faf8 	bl	800afe4 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 80029f4:	6860      	ldr	r0, [r4, #4]
 80029f6:	6803      	ldr	r3, [r0, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4798      	blx	r3
 80029fc:	b978      	cbnz	r0, 8002a1e <_ZN8STM32DMA5startEv+0x3a>
 80029fe:	7a63      	ldrb	r3, [r4, #9]
 8002a00:	b16b      	cbz	r3, 8002a1e <_ZN8STM32DMA5startEv+0x3a>
 8002a02:	7a23      	ldrb	r3, [r4, #8]
 8002a04:	b95b      	cbnz	r3, 8002a1e <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002a06:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002a0a:	4620      	mov	r0, r4
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002a12:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002a1a:	f008 bb06 	b.w	800b02a <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002a1e:	490b      	ldr	r1, [pc, #44]	@ (8002a4c <_ZN8STM32DMA5startEv+0x68>)
 8002a20:	4a0b      	ldr	r2, [pc, #44]	@ (8002a50 <_ZN8STM32DMA5startEv+0x6c>)
 8002a22:	680b      	ldr	r3, [r1, #0]
 8002a24:	011b      	lsls	r3, r3, #4
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d1f2      	bne.n	8002a12 <_ZN8STM32DMA5startEv+0x2e>
 8002a2c:	7a20      	ldrb	r0, [r4, #8]
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d1ef      	bne.n	8002a12 <_ZN8STM32DMA5startEv+0x2e>
 8002a32:	7aa0      	ldrb	r0, [r4, #10]
 8002a34:	2800      	cmp	r0, #0
 8002a36:	d1ec      	bne.n	8002a12 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a38:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002a3a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a3e:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002a42:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002a44:	f7ff fefc 	bl	8002840 <DMA2D_CopyBuffer>
    }
 8002a48:	e7e3      	b.n	8002a12 <_ZN8STM32DMA5startEv+0x2e>
 8002a4a:	bf00      	nop
 8002a4c:	24000794 	.word	0x24000794
 8002a50:	24000010 	.word	0x24000010

08002a54 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002a54:	4b05      	ldr	r3, [pc, #20]	@ (8002a6c <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a56:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002a5a:	6003      	str	r3, [r0, #0]
 8002a5c:	4b04      	ldr	r3, [pc, #16]	@ (8002a70 <_ZN8STM32DMAD1Ev+0x1c>)
 8002a5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002a62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002a66:	f3bf 8f6f 	isb	sy
}
 8002a6a:	4770      	bx	lr
 8002a6c:	08023a58 	.word	0x08023a58
 8002a70:	e000e100 	.word	0xe000e100

08002a74 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002a74:	b510      	push	{r4, lr}
 8002a76:	4604      	mov	r4, r0
}
 8002a78:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002a7c:	f7ff ffea 	bl	8002a54 <_ZN8STM32DMAD1Ev>
 8002a80:	4620      	mov	r0, r4
 8002a82:	f01e ffb2 	bl	80219ea <_ZdlPvj>
 8002a86:	4620      	mov	r0, r4
 8002a88:	bd10      	pop	{r4, pc}
	...

08002a8c <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a8c:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002a8e:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002a90:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002a94:	f042 0210 	orr.w	r2, r2, #16
 8002a98:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002a9c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002aa0:	f002 0210 	and.w	r2, r2, #16
 8002aa4:	9201      	str	r2, [sp, #4]
 8002aa6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002aa8:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002aaa:	f042 0210 	orr.w	r2, r2, #16
 8002aae:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002ab0:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002ab2:	f022 0210 	bic.w	r2, r2, #16
 8002ab6:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002ab8:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <_ZN8STM32DMA10initializeEv+0x48>)
 8002aba:	4a07      	ldr	r2, [pc, #28]	@ (8002ad8 <_ZN8STM32DMA10initializeEv+0x4c>)
 8002abc:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002abe:	4a07      	ldr	r2, [pc, #28]	@ (8002adc <_ZN8STM32DMA10initializeEv+0x50>)
 8002ac0:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ac2:	4b07      	ldr	r3, [pc, #28]	@ (8002ae0 <_ZN8STM32DMA10initializeEv+0x54>)
 8002ac4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002ac8:	609a      	str	r2, [r3, #8]
}
 8002aca:	b002      	add	sp, #8
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	58024400 	.word	0x58024400
 8002ad4:	24000608 	.word	0x24000608
 8002ad8:	08002d29 	.word	0x08002d29
 8002adc:	080029db 	.word	0x080029db
 8002ae0:	e000e100 	.word	0xe000e100

08002ae4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002ae4:	b508      	push	{r3, lr}
    switch (format)
 8002ae6:	280a      	cmp	r0, #10
 8002ae8:	d809      	bhi.n	8002afe <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002aea:	e8df f000 	tbb	[pc, r0]
 8002aee:	1006      	.short	0x1006
 8002af0:	0808080e 	.word	0x0808080e
 8002af4:	10101008 	.word	0x10101008
 8002af8:	10          	.byte	0x10
 8002af9:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002afa:	2002      	movs	r0, #2
}
 8002afc:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002afe:	4b05      	ldr	r3, [pc, #20]	@ (8002b14 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002b00:	2191      	movs	r1, #145	@ 0x91
 8002b02:	4a05      	ldr	r2, [pc, #20]	@ (8002b18 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002b04:	4805      	ldr	r0, [pc, #20]	@ (8002b1c <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002b06:	f01f fae7 	bl	80220d8 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	e7f6      	b.n	8002afc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002b0e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002b10:	e7f4      	b.n	8002afc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002b12:	bf00      	nop
 8002b14:	080238f7 	.word	0x080238f7
 8002b18:	08023912 	.word	0x08023912
 8002b1c:	0802395d 	.word	0x0802395d

08002b20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002b20:	b538      	push	{r3, r4, r5, lr}
 8002b22:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002b24:	7f88      	ldrb	r0, [r1, #30]
 8002b26:	f7ff ffdd 	bl	8002ae4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b2a:	4b12      	ldr	r3, [pc, #72]	@ (8002b74 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b2c:	8aa5      	ldrh	r5, [r4, #20]
 8002b2e:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002b30:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b32:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b36:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002b38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b3a:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b3c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b3e:	1b52      	subs	r2, r2, r5
 8002b40:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002b42:	6825      	ldr	r5, [r4, #0]
 8002b44:	2d08      	cmp	r5, #8
 8002b46:	d10e      	bne.n	8002b66 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b48:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002b4a:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002b4c:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8002b4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8002b50:	7f20      	ldrb	r0, [r4, #28]
 8002b52:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8002b56:	61da      	str	r2, [r3, #28]
        return color;
 8002b58:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002b5a:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8002b5c:	4a07      	ldr	r2, [pc, #28]	@ (8002b7c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b5e:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002b60:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002b62:	601a      	str	r2, [r3, #0]
    }
}
 8002b64:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 8002b66:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002b68:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 8002b6a:	611a      	str	r2, [r3, #16]
 8002b6c:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8002b6e:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8002b70:	4a03      	ldr	r2, [pc, #12]	@ (8002b80 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8002b72:	e7f6      	b.n	8002b62 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8002b74:	52001000 	.word	0x52001000
 8002b78:	00010009 	.word	0x00010009
 8002b7c:	00022301 	.word	0x00022301
 8002b80:	00032301 	.word	0x00032301

08002b84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8002b84:	b508      	push	{r3, lr}
    switch (format)
 8002b86:	280b      	cmp	r0, #11
 8002b88:	d80b      	bhi.n	8002ba2 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8002b8a:	e8df f000 	tbb	[pc, r0]
 8002b8e:	1206      	.short	0x1206
 8002b90:	0a0a0a10 	.word	0x0a0a0a10
 8002b94:	0808080a 	.word	0x0808080a
 8002b98:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8002b9a:	2002      	movs	r0, #2
}
 8002b9c:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8002b9e:	2005      	movs	r0, #5
        break;
 8002ba0:	e7fc      	b.n	8002b9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8002ba2:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002ba4:	2170      	movs	r1, #112	@ 0x70
 8002ba6:	4a05      	ldr	r2, [pc, #20]	@ (8002bbc <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002ba8:	4805      	ldr	r0, [pc, #20]	@ (8002bc0 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8002baa:	f01f fa95 	bl	80220d8 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8002bae:	2000      	movs	r0, #0
 8002bb0:	e7f4      	b.n	8002b9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002bb2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002bb4:	e7f2      	b.n	8002b9c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002bb6:	bf00      	nop
 8002bb8:	080238f7 	.word	0x080238f7
 8002bbc:	080239ac 	.word	0x080239ac
 8002bc0:	0802395d 	.word	0x0802395d

08002bc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8002bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002bc8:	7f4f      	ldrb	r7, [r1, #29]
{
 8002bca:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002bcc:	4638      	mov	r0, r7
 8002bce:	f7ff ffd9 	bl	8002b84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002bd2:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8002bd6:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002bd8:	4628      	mov	r0, r5
 8002bda:	f7ff ffd3 	bl	8002b84 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8002bde:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002be0:	4628      	mov	r0, r5
 8002be2:	f7ff ff7f 	bl	8002ae4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002be6:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8002bea:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002bee:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bf2:	4b45      	ldr	r3, [pc, #276]	@ (8002d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002bf4:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002bf6:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bf8:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002bfa:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8002bfc:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002bfe:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002c02:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c04:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c08:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002c0c:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c0e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c12:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 8002c14:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 8002c16:	f8d9 4000 	ldr.w	r4, [r9]
 8002c1a:	f899 201c 	ldrb.w	r2, [r9, #28]
 8002c1e:	2c80      	cmp	r4, #128	@ 0x80
 8002c20:	d022      	beq.n	8002c68 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 8002c22:	d80f      	bhi.n	8002c44 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 8002c24:	2c20      	cmp	r4, #32
 8002c26:	d066      	beq.n	8002cf6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c28:	2c40      	cmp	r4, #64	@ 0x40
 8002c2a:	d064      	beq.n	8002cf6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 8002c2c:	2c04      	cmp	r4, #4
 8002c2e:	d05c      	beq.n	8002cea <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c30:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 8002c34:	4b34      	ldr	r3, [pc, #208]	@ (8002d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c36:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c38:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002c3c:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8002c3e:	d060      	beq.n	8002d02 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002c40:	4a32      	ldr	r2, [pc, #200]	@ (8002d0c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8002c42:	e03f      	b.n	8002cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8002c44:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 8002c48:	d004      	beq.n	8002c54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 8002c4a:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8002c4e:	d1ef      	bne.n	8002c30 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c50:	482f      	ldr	r0, [pc, #188]	@ (8002d10 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8002c52:	e000      	b.n	8002c56 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c54:	482f      	ldr	r0, [pc, #188]	@ (8002d14 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c56:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 8002c5a:	61da      	str	r2, [r3, #28]
 8002c5c:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8002c60:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c62:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c64:	6159      	str	r1, [r3, #20]
 8002c66:	e02c      	b.n	8002cc2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c68:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8002c6c:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002c70:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8002c74:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002c76:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002c78:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8002c7a:	1d21      	adds	r1, r4, #4
 8002c7c:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8002c7e:	7821      	ldrb	r1, [r4, #0]
 8002c80:	b141      	cbz	r1, 8002c94 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8002c82:	2901      	cmp	r1, #1
 8002c84:	d021      	beq.n	8002cca <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8002c88:	f240 110b 	movw	r1, #267	@ 0x10b
 8002c8c:	4a23      	ldr	r2, [pc, #140]	@ (8002d1c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8002c8e:	4824      	ldr	r0, [pc, #144]	@ (8002d20 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8002c90:	f01f fa22 	bl	80220d8 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002c94:	69da      	ldr	r2, [r3, #28]
 8002c96:	8861      	ldrh	r1, [r4, #2]
 8002c98:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8002c9c:	3901      	subs	r1, #1
 8002c9e:	f022 0210 	bic.w	r2, r2, #16
 8002ca2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002ca6:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8002ca8:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8002caa:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002cac:	69d9      	ldr	r1, [r3, #28]
 8002cae:	f041 0120 	orr.w	r1, r1, #32
 8002cb2:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8002cb4:	69d9      	ldr	r1, [r3, #28]
 8002cb6:	0689      	lsls	r1, r1, #26
 8002cb8:	d4fc      	bmi.n	8002cb4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8002cba:	2110      	movs	r1, #16
 8002cbc:	6099      	str	r1, [r3, #8]
            if (blend)
 8002cbe:	2a00      	cmp	r2, #0
 8002cc0:	d0be      	beq.n	8002c40 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002cc2:	4a18      	ldr	r2, [pc, #96]	@ (8002d24 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002cc4:	601a      	str	r2, [r3, #0]
}
 8002cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cca:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8002ccc:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cce:	8860      	ldrh	r0, [r4, #2]
 8002cd0:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8002cd4:	bf18      	it	ne
 8002cd6:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8002cd8:	3801      	subs	r0, #1
 8002cda:	f021 0110 	bic.w	r1, r1, #16
 8002cde:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8002ce2:	f041 0110 	orr.w	r1, r1, #16
 8002ce6:	61d9      	str	r1, [r3, #28]
                break;
 8002ce8:	e7df      	b.n	8002caa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cea:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002cee:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8002cf2:	61da      	str	r2, [r3, #28]
 8002cf4:	e7b5      	b.n	8002c62 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8002cf6:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8002cfa:	4b03      	ldr	r3, [pc, #12]	@ (8002d08 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8002cfc:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8002d00:	e7f7      	b.n	8002cf2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d02:	f242 3201 	movw	r2, #8961	@ 0x2301
 8002d06:	e7dd      	b.n	8002cc4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8002d08:	52001000 	.word	0x52001000
 8002d0c:	00012301 	.word	0x00012301
 8002d10:	00020009 	.word	0x00020009
 8002d14:	0002000a 	.word	0x0002000a
 8002d18:	080239f6 	.word	0x080239f6
 8002d1c:	08023a10 	.word	0x08023a10
 8002d20:	0802395d 	.word	0x0802395d
 8002d24:	00022301 	.word	0x00022301

08002d28 <DMA2D_XferCpltCallback>:
 8002d28:	4b02      	ldr	r3, [pc, #8]	@ (8002d34 <DMA2D_XferCpltCallback+0xc>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 8002d2e:	6803      	ldr	r3, [r0, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	4718      	bx	r3
 8002d34:	24025274 	.word	0x24025274

08002d38 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 8002d38:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8002d3c:	b510      	push	{r4, lr}
 8002d3e:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8002d40:	b9d3      	cbnz	r3, 8002d78 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8002d42:	6803      	ldr	r3, [r0, #0]
 8002d44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d46:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 8002d48:	4919      	ldr	r1, [pc, #100]	@ (8002db0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002db4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002d4c:	680b      	ldr	r3, [r1, #0]
 8002d4e:	011b      	lsls	r3, r3, #4
 8002d50:	5cd3      	ldrb	r3, [r2, r3]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d12a      	bne.n	8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002d56:	4818      	ldr	r0, [pc, #96]	@ (8002db8 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 8002d58:	6800      	ldr	r0, [r0, #0]
 8002d5a:	bb38      	cbnz	r0, 8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002d5c:	7a20      	ldrb	r0, [r4, #8]
 8002d5e:	bb28      	cbnz	r0, 8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002d60:	7aa0      	ldrb	r0, [r4, #10]
 8002d62:	bb18      	cbnz	r0, 8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d64:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 8002d66:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 8002d6a:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d6c:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8002d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d74:	f7ff bd64 	b.w	8002840 <DMA2D_CopyBuffer>
        if (isRunning)
 8002d78:	7a03      	ldrb	r3, [r0, #8]
 8002d7a:	b143      	cbz	r3, 8002d8e <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8002d82:	6818      	ldr	r0, [r3, #0]
 8002d84:	4b0b      	ldr	r3, [pc, #44]	@ (8002db4 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8002d86:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8002d8a:	f7ff fd9d 	bl	80028c8 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8002d8e:	6860      	ldr	r0, [r4, #4]
 8002d90:	6803      	ldr	r3, [r0, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4798      	blx	r3
 8002d96:	b948      	cbnz	r0, 8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8002d98:	7a63      	ldrb	r3, [r4, #9]
 8002d9a:	b13b      	cbz	r3, 8002dac <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8002d9c:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8002d9e:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8002da2:	4620      	mov	r0, r4
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8002daa:	4718      	bx	r3
    }
 8002dac:	bd10      	pop	{r4, pc}
 8002dae:	bf00      	nop
 8002db0:	24000794 	.word	0x24000794
 8002db4:	24000010 	.word	0x24000010
 8002db8:	24000790 	.word	0x24000790

08002dbc <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8002dbc:	b570      	push	{r4, r5, r6, lr}
 8002dbe:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <_ZN8STM32DMAC1Ev+0x40>)
 8002dc2:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8002dc4:	2600      	movs	r6, #0
 8002dc6:	4625      	mov	r5, r4
 8002dc8:	2260      	movs	r2, #96	@ 0x60
 8002dca:	6060      	str	r0, [r4, #4]
 8002dcc:	7226      	strb	r6, [r4, #8]
 8002dce:	7266      	strb	r6, [r4, #9]
 8002dd0:	f845 3b20 	str.w	r3, [r5], #32
 8002dd4:	4629      	mov	r1, r5
 8002dd6:	f00b fda1 	bl	800e91c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8002dda:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8002dde:	60ee      	str	r6, [r5, #12]
 8002de0:	3524      	adds	r5, #36	@ 0x24
 8002de2:	429d      	cmp	r5, r3
 8002de4:	d1fb      	bne.n	8002dde <_ZN8STM32DMAC1Ev+0x22>
 8002de6:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8002dea:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8002dec:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 8002df0:	f008 f8c3 	bl	800af7a <osMutexNew>
 8002df4:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8002df8:	4620      	mov	r0, r4
 8002dfa:	bd70      	pop	{r4, r5, r6, pc}
 8002dfc:	08023a58 	.word	0x08023a58

08002e00 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e00:	4b03      	ldr	r3, [pc, #12]	@ (8002e10 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	07d2      	lsls	r2, r2, #31
 8002e06:	d4fc      	bmi.n	8002e02 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e08:	2223      	movs	r2, #35	@ 0x23
 8002e0a:	609a      	str	r2, [r3, #8]
}
 8002e0c:	4770      	bx	lr
 8002e0e:	bf00      	nop
 8002e10:	52001000 	.word	0x52001000

08002e14 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8002e14:	4a0b      	ldr	r2, [pc, #44]	@ (8002e44 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 8002e16:	6953      	ldr	r3, [r2, #20]
 8002e18:	03db      	lsls	r3, r3, #15
 8002e1a:	d511      	bpl.n	8002e40 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8002e1c:	2900      	cmp	r1, #0
 8002e1e:	dd0f      	ble.n	8002e40 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002e20:	f000 031f 	and.w	r3, r0, #31
 8002e24:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 8002e26:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 8002e2a:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002e2c:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002e30:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 8002e32:	1a0b      	subs	r3, r1, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	dcf9      	bgt.n	8002e2c <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 8002e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002e3c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	e000ed00 	.word	0xe000ed00

08002e48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 8002e48:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e4a:	4c10      	ldr	r4, [pc, #64]	@ (8002e8c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8002e4c:	6825      	ldr	r5, [r4, #0]
 8002e4e:	07ed      	lsls	r5, r5, #31
 8002e50:	d4fc      	bmi.n	8002e4c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e52:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e54:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 8002e56:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002e58:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e5a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e5e:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002e62:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002e64:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002e66:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 8002e68:	d00c      	beq.n	8002e84 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002e6a:	4909      	ldr	r1, [pc, #36]	@ (8002e90 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e6c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002e70:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002e72:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8002e76:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8002e78:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8002e7a:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8002e7c:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8002e7e:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002e80:	6023      	str	r3, [r4, #0]
    }
}
 8002e82:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8002e84:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002e86:	4b04      	ldr	r3, [pc, #16]	@ (8002e98 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8002e88:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8002e8a:	e7f9      	b.n	8002e80 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8002e8c:	52001000 	.word	0x52001000
 8002e90:	00010009 	.word	0x00010009
 8002e94:	00020001 	.word	0x00020001
 8002e98:	00030001 	.word	0x00030001

08002e9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8002e9c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002e9e:	4c0e      	ldr	r4, [pc, #56]	@ (8002ed8 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8002ea0:	6825      	ldr	r5, [r4, #0]
 8002ea2:	07ed      	lsls	r5, r5, #31
 8002ea4:	d4fc      	bmi.n	8002ea0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ea6:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ea8:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8002eaa:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eac:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002eae:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb2:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002eb6:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002eb8:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002eba:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002ebc:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8002ebe:	d007      	beq.n	8002ed0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ec0:	4a06      	ldr	r2, [pc, #24]	@ (8002edc <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8002ec2:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8002ec6:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002ec8:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002eca:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002ecc:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8002ece:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ed0:	4b03      	ldr	r3, [pc, #12]	@ (8002ee0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8002ed2:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8002ed4:	6025      	str	r5, [r4, #0]
}
 8002ed6:	e7fa      	b.n	8002ece <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8002ed8:	52001000 	.word	0x52001000
 8002edc:	00020001 	.word	0x00020001
 8002ee0:	ff020001 	.word	0xff020001

08002ee4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8002ee4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8002ee6:	4c0b      	ldr	r4, [pc, #44]	@ (8002f14 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8002ee8:	6825      	ldr	r5, [r4, #0]
 8002eea:	07ed      	lsls	r5, r5, #31
 8002eec:	d4fc      	bmi.n	8002ee8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eee:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002ef0:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ef2:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002ef4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ef6:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002ef8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002efc:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002efe:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8002f00:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8002f02:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8002f04:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8002f06:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f08:	4b03      	ldr	r3, [pc, #12]	@ (8002f18 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8002f0a:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8002f0c:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8002f0e:	6023      	str	r3, [r4, #0]
}
 8002f10:	bd30      	pop	{r4, r5, pc}
 8002f12:	bf00      	nop
 8002f14:	52001000 	.word	0x52001000
 8002f18:	00020001 	.word	0x00020001

08002f1c <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 8002f1c:	2001      	movs	r0, #1
 8002f1e:	4770      	bx	lr

08002f20 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 8002f20:	200c      	movs	r0, #12
 8002f22:	4770      	bx	lr

08002f24 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 8002f24:	230c      	movs	r3, #12
 8002f26:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f2a:	3008      	adds	r0, #8
 8002f2c:	4770      	bx	lr

08002f2e <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 8002f2e:	230c      	movs	r3, #12
 8002f30:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f34:	3008      	adds	r0, #8
 8002f36:	4770      	bx	lr

08002f38 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f38:	2001      	movs	r0, #1
 8002f3a:	4770      	bx	lr

08002f3c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002f3c:	f44f 700f 	mov.w	r0, #572	@ 0x23c
 8002f40:	4770      	bx	lr

08002f42 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f42:	f44f 730f 	mov.w	r3, #572	@ 0x23c
 8002f46:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f4a:	3008      	adds	r0, #8
 8002f4c:	4770      	bx	lr

08002f4e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f4e:	f44f 730f 	mov.w	r3, #572	@ 0x23c
 8002f52:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8002f56:	3008      	adds	r0, #8
 8002f58:	4770      	bx	lr

08002f5a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8002f5a:	2001      	movs	r0, #1
 8002f5c:	4770      	bx	lr

08002f5e <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8002f5e:	2010      	movs	r0, #16
 8002f60:	4770      	bx	lr

08002f62 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f62:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f66:	3008      	adds	r0, #8
 8002f68:	4770      	bx	lr

08002f6a <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8002f6a:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8002f6e:	3008      	adds	r0, #8
 8002f70:	4770      	bx	lr

08002f72 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
 8002f72:	4608      	mov	r0, r1
 8002f74:	f000 be38 	b.w	8003be8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>

08002f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8002f78:	4b03      	ldr	r3, [pc, #12]	@ (8002f88 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002f7a:	b510      	push	{r4, lr}
 8002f7c:	4604      	mov	r4, r0
 8002f7e:	6003      	str	r3, [r0, #0]
 8002f80:	f00a f955 	bl	800d22e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002f84:	4620      	mov	r0, r4
 8002f86:	bd10      	pop	{r4, pc}
 8002f88:	08023b10 	.word	0x08023b10

08002f8c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002f8c:	b510      	push	{r4, lr}
 8002f8e:	4604      	mov	r4, r0
 8002f90:	f7ff fff2 	bl	8002f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002f94:	2114      	movs	r1, #20
 8002f96:	4620      	mov	r0, r4
 8002f98:	f01e fd27 	bl	80219ea <_ZdlPvj>
 8002f9c:	4620      	mov	r0, r4
 8002f9e:	bd10      	pop	{r4, pc}

08002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002fa0:	4b03      	ldr	r3, [pc, #12]	@ (8002fb0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002fa2:	b510      	push	{r4, lr}
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	6003      	str	r3, [r0, #0]
 8002fa8:	f00a f941 	bl	800d22e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fac:	4620      	mov	r0, r4
 8002fae:	bd10      	pop	{r4, pc}
 8002fb0:	08023adc 	.word	0x08023adc

08002fb4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002fb4:	b510      	push	{r4, lr}
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	f7ff fff2 	bl	8002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fbc:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002fc0:	4620      	mov	r0, r4
 8002fc2:	f01e fd12 	bl	80219ea <_ZdlPvj>
 8002fc6:	4620      	mov	r0, r4
 8002fc8:	bd10      	pop	{r4, pc}
	...

08002fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8002fce:	b510      	push	{r4, lr}
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	6003      	str	r3, [r0, #0]
 8002fd4:	f00a f92b 	bl	800d22e <_ZN8touchgfx17AbstractPartitionD1Ev>
 8002fd8:	4620      	mov	r0, r4
 8002fda:	bd10      	pop	{r4, pc}
 8002fdc:	08023aa8 	.word	0x08023aa8

08002fe0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8002fe0:	b510      	push	{r4, lr}
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	f7ff fff2 	bl	8002fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8002fe8:	2118      	movs	r1, #24
 8002fea:	4620      	mov	r0, r4
 8002fec:	f01e fcfd 	bl	80219ea <_ZdlPvj>
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	bd10      	pop	{r4, pc}

08002ff4 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8002ff4:	4b08      	ldr	r3, [pc, #32]	@ (8003018 <_ZN12FrontendHeapD1Ev+0x24>)
 8002ff6:	b510      	push	{r4, lr}
 8002ff8:	4604      	mov	r4, r0
 8002ffa:	6003      	str	r3, [r0, #0]
 8002ffc:	f500 701c 	add.w	r0, r0, #624	@ 0x270
 8003000:	f7ff ffba 	bl	8002f78 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003004:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 8003008:	f7ff ffca 	bl	8002fa0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800300c:	f104 0014 	add.w	r0, r4, #20
 8003010:	f7ff ffdc 	bl	8002fcc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003014:	4620      	mov	r0, r4
 8003016:	bd10      	pop	{r4, pc}
 8003018:	08023b44 	.word	0x08023b44

0800301c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 800301c:	b508      	push	{r3, lr}
 800301e:	4802      	ldr	r0, [pc, #8]	@ (8003028 <__tcf_0+0xc>)
 8003020:	f7ff ffe8 	bl	8002ff4 <_ZN12FrontendHeapD1Ev>
 8003024:	bd08      	pop	{r3, pc}
 8003026:	bf00      	nop
 8003028:	2400ac88 	.word	0x2400ac88

0800302c <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 800302c:	b510      	push	{r4, lr}
 800302e:	4604      	mov	r4, r0
 8003030:	f7ff ffe0 	bl	8002ff4 <_ZN12FrontendHeapD1Ev>
 8003034:	f44f 7179 	mov.w	r1, #996	@ 0x3e4
 8003038:	4620      	mov	r0, r4
 800303a:	f01e fcd6 	bl	80219ea <_ZdlPvj>
 800303e:	4620      	mov	r0, r4
 8003040:	bd10      	pop	{r4, pc}
	...

08003044 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8003048:	f000 fc50 	bl	80038ec <_ZN14BitmapDatabase11getInstanceEv>
 800304c:	2400      	movs	r4, #0
 800304e:	4605      	mov	r5, r0
 8003050:	f000 fc50 	bl	80038f4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003054:	4623      	mov	r3, r4
 8003056:	4601      	mov	r1, r0
 8003058:	4622      	mov	r2, r4
 800305a:	4628      	mov	r0, r5
 800305c:	9400      	str	r4, [sp, #0]
 800305e:	f012 fabf 	bl	80155e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003062:	4b27      	ldr	r3, [pc, #156]	@ (8003100 <touchgfx_init+0xbc>)
 8003064:	4a27      	ldr	r2, [pc, #156]	@ (8003104 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003066:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003068:	4d27      	ldr	r5, [pc, #156]	@ (8003108 <touchgfx_init+0xc4>)
 800306a:	601a      	str	r2, [r3, #0]
 800306c:	f001 f804 	bl	8004078 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003070:	4b26      	ldr	r3, [pc, #152]	@ (800310c <touchgfx_init+0xc8>)
 8003072:	4a27      	ldr	r2, [pc, #156]	@ (8003110 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003074:	4827      	ldr	r0, [pc, #156]	@ (8003114 <touchgfx_init+0xd0>)
 8003076:	609a      	str	r2, [r3, #8]
 8003078:	f012 f95e 	bl	8015338 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	f3bf 8f5b 	dmb	ish
 8003082:	07db      	lsls	r3, r3, #31
 8003084:	d435      	bmi.n	80030f2 <touchgfx_init+0xae>
 8003086:	4628      	mov	r0, r5
 8003088:	f01e fcb1 	bl	80219ee <__cxa_guard_acquire>
 800308c:	b388      	cbz	r0, 80030f2 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800308e:	4c22      	ldr	r4, [pc, #136]	@ (8003118 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003090:	4b22      	ldr	r3, [pc, #136]	@ (800311c <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003092:	f504 7622 	add.w	r6, r4, #648	@ 0x288
        : presenterStorage(pres),
 8003096:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800309a:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 800309e:	f504 771c 	add.w	r7, r4, #624	@ 0x270
 80030a2:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 80030a4:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 80030a6:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 80030aa:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 80030ac:	6126      	str	r6, [r4, #16]
 80030ae:	f00a f8bf 	bl	800d230 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80030b2:	4b1b      	ldr	r3, [pc, #108]	@ (8003120 <touchgfx_init+0xdc>)
 80030b4:	4640      	mov	r0, r8
 80030b6:	6163      	str	r3, [r4, #20]
 80030b8:	f00a f8ba 	bl	800d230 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80030bc:	4b19      	ldr	r3, [pc, #100]	@ (8003124 <touchgfx_init+0xe0>)
 80030be:	4638      	mov	r0, r7
 80030c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80030c2:	f00a f8b5 	bl	800d230 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80030c6:	4b18      	ldr	r3, [pc, #96]	@ (8003128 <touchgfx_init+0xe4>)
 80030c8:	f504 7021 	add.w	r0, r4, #644	@ 0x284
 80030cc:	f8c4 3270 	str.w	r3, [r4, #624]	@ 0x270
 80030d0:	f001 f848 	bl	8004164 <_ZN5ModelC1Ev>
 80030d4:	4622      	mov	r2, r4
 80030d6:	f504 7121 	add.w	r1, r4, #644	@ 0x284
 80030da:	4630      	mov	r0, r6
 80030dc:	f001 f838 	bl	8004150 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80030e0:	4630      	mov	r0, r6
 80030e2:	f000 fd81 	bl	8003be8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
 80030e6:	4811      	ldr	r0, [pc, #68]	@ (800312c <touchgfx_init+0xe8>)
 80030e8:	f01f f814 	bl	8022114 <atexit>
 80030ec:	4628      	mov	r0, r5
 80030ee:	f01e fc8a 	bl	8021a06 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80030f2:	480f      	ldr	r0, [pc, #60]	@ (8003130 <touchgfx_init+0xec>)
}
 80030f4:	b002      	add	sp, #8
 80030f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80030fa:	f7fe bcdb 	b.w	8001ab4 <_ZN11TouchGFXHAL10initializeEv>
 80030fe:	bf00      	nop
 8003100:	240252d8 	.word	0x240252d8
 8003104:	24009e4c 	.word	0x24009e4c
 8003108:	2400ac84 	.word	0x2400ac84
 800310c:	24009e6c 	.word	0x24009e6c
 8003110:	24009e50 	.word	0x24009e50
 8003114:	24000034 	.word	0x24000034
 8003118:	2400ac88 	.word	0x2400ac88
 800311c:	08023b44 	.word	0x08023b44
 8003120:	08023aa8 	.word	0x08023aa8
 8003124:	08023adc 	.word	0x08023adc
 8003128:	08023b10 	.word	0x08023b10
 800312c:	0800301d 	.word	0x0800301d
 8003130:	24009dd0 	.word	0x24009dd0

08003134 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003134:	4770      	bx	lr
	...

08003138 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 8003138:	4801      	ldr	r0, [pc, #4]	@ (8003140 <touchgfx_taskEntry+0x8>)
 800313a:	f7fe bccd 	b.w	8001ad8 <_ZN11TouchGFXHAL9taskEntryEv>
 800313e:	bf00      	nop
 8003140:	24009dd0 	.word	0x24009dd0

08003144 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003144:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 8003146:	4c0e      	ldr	r4, [pc, #56]	@ (8003180 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 8003148:	4b0e      	ldr	r3, [pc, #56]	@ (8003184 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800314a:	4e0f      	ldr	r6, [pc, #60]	@ (8003188 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 800314c:	4620      	mov	r0, r4
static LCD24bpp display;
 800314e:	4d0f      	ldr	r5, [pc, #60]	@ (800318c <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003150:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003152:	f7ff fe33 	bl	8002dbc <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003156:	4628      	mov	r0, r5
 8003158:	f016 f8e4 	bl	8019324 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 800315c:	480c      	ldr	r0, [pc, #48]	@ (8003190 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800315e:	f010 fa19 	bl	8013594 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003162:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003166:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800316a:	4621      	mov	r1, r4
 800316c:	4809      	ldr	r0, [pc, #36]	@ (8003194 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800316e:	e9cd 3200 	strd	r3, r2, [sp]
 8003172:	4633      	mov	r3, r6
 8003174:	462a      	mov	r2, r5
 8003176:	f7fe fd43 	bl	8001c00 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800317a:	b002      	add	sp, #8
 800317c:	bd70      	pop	{r4, r5, r6, pc}
 800317e:	bf00      	nop
 8003180:	24009ed8 	.word	0x24009ed8
 8003184:	080232b8 	.word	0x080232b8
 8003188:	2400ac80 	.word	0x2400ac80
 800318c:	24009e6c 	.word	0x24009e6c
 8003190:	24009e50 	.word	0x24009e50
 8003194:	24009dd0 	.word	0x24009dd0

08003198 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003198:	4801      	ldr	r0, [pc, #4]	@ (80031a0 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800319a:	f7ff bc5b 	b.w	8002a54 <_ZN8STM32DMAD1Ev>
 800319e:	bf00      	nop
 80031a0:	24009ed8 	.word	0x24009ed8

080031a4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 80031a4:	2000      	movs	r0, #0
 80031a6:	4770      	bx	lr

080031a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 80031a8:	8081      	strh	r1, [r0, #4]
    }
 80031aa:	4770      	bx	lr

080031ac <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 80031ac:	80c1      	strh	r1, [r0, #6]
    }
 80031ae:	4770      	bx	lr

080031b0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 80031b0:	8101      	strh	r1, [r0, #8]
    }
 80031b2:	4770      	bx	lr

080031b4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 80031b4:	8141      	strh	r1, [r0, #10]
    }
 80031b6:	4770      	bx	lr

080031b8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 80031b8:	4770      	bx	lr

080031ba <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 80031ba:	4770      	bx	lr

080031bc <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 80031bc:	4770      	bx	lr

080031be <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 80031be:	4770      	bx	lr

080031c0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 80031c0:	4770      	bx	lr

080031c2 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 80031c2:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 80031c4:	88c4      	ldrh	r4, [r0, #6]
 80031c6:	6803      	ldr	r3, [r0, #0]
 80031c8:	1b12      	subs	r2, r2, r4
 80031ca:	8884      	ldrh	r4, [r0, #4]
 80031cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ce:	1b09      	subs	r1, r1, r4
 80031d0:	b212      	sxth	r2, r2
    }
 80031d2:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80031d6:	b209      	sxth	r1, r1
 80031d8:	4718      	bx	r3

080031da <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80031da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80031de:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80031e0:	f04f 33ff 	mov.w	r3, #4294967295
 80031e4:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80031e6:	6813      	ldr	r3, [r2, #0]
 80031e8:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80031ea:	6010      	str	r0, [r2, #0]
    }
 80031ec:	4770      	bx	lr

080031ee <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80031ee:	2000      	movs	r0, #0
 80031f0:	4770      	bx	lr

080031f2 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80031f2:	888b      	ldrh	r3, [r1, #4]
 80031f4:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80031f6:	2001      	movs	r0, #1
 80031f8:	4770      	bx	lr

080031fa <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80031fa:	4770      	bx	lr

080031fc <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80031fc:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003200:	4770      	bx	lr

08003202 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 8003202:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 8003206:	4770      	bx	lr

08003208 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003208:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 800320a:	b510      	push	{r4, lr}
        return rect.width;
 800320c:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003210:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8003214:	8002      	strh	r2, [r0, #0]
 8003216:	8042      	strh	r2, [r0, #2]
 8003218:	8084      	strh	r4, [r0, #4]
 800321a:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 800321c:	bd10      	pop	{r4, pc}

0800321e <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 800321e:	2200      	movs	r2, #0
 8003220:	8002      	strh	r2, [r0, #0]
 8003222:	8042      	strh	r2, [r0, #2]
 8003224:	8082      	strh	r2, [r0, #4]
 8003226:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8003228:	4770      	bx	lr

0800322a <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 800322a:	7701      	strb	r1, [r0, #28]
    }
 800322c:	4770      	bx	lr

0800322e <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 800322e:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003232:	4770      	bx	lr

08003234 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003234:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 8003238:	4770      	bx	lr

0800323a <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800323a:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 800323e:	4770      	bx	lr

08003240 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003240:	2001      	movs	r0, #1
 8003242:	4770      	bx	lr

08003244 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003244:	3098      	adds	r0, #152	@ 0x98
 8003246:	4770      	bx	lr

08003248 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 8003248:	308c      	adds	r0, #140	@ 0x8c
 800324a:	4770      	bx	lr

0800324c <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 800324c:	3084      	adds	r0, #132	@ 0x84
 800324e:	4770      	bx	lr

08003250 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003250:	4770      	bx	lr
	...

08003254 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003254:	4b02      	ldr	r3, [pc, #8]	@ (8003260 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003256:	2290      	movs	r2, #144	@ 0x90
 8003258:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	e000e100 	.word	0xe000e100

08003264 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003264:	4770      	bx	lr

08003266 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003266:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003268:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 800326c:	4770      	bx	lr

0800326e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800326e:	4770      	bx	lr

08003270 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003270:	4770      	bx	lr

08003272 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003272:	4770      	bx	lr

08003274 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003274:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003278:	4611      	mov	r1, r2
 800327a:	6840      	ldr	r0, [r0, #4]
 800327c:	6803      	ldr	r3, [r0, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	4718      	bx	r3

08003282 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003282:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003286:	4770      	bx	lr

08003288 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003288:	b510      	push	{r4, lr}
 800328a:	4604      	mov	r4, r0
 800328c:	2148      	movs	r1, #72	@ 0x48
 800328e:	f01e fbac 	bl	80219ea <_ZdlPvj>
 8003292:	4620      	mov	r0, r4
 8003294:	bd10      	pop	{r4, pc}

08003296 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003296:	b510      	push	{r4, lr}
 8003298:	4604      	mov	r4, r0
 800329a:	212c      	movs	r1, #44	@ 0x2c
 800329c:	f01e fba5 	bl	80219ea <_ZdlPvj>
 80032a0:	4620      	mov	r0, r4
 80032a2:	bd10      	pop	{r4, pc}

080032a4 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	21bc      	movs	r1, #188	@ 0xbc
 80032aa:	f01e fb9e 	bl	80219ea <_ZdlPvj>
 80032ae:	4620      	mov	r0, r4
 80032b0:	bd10      	pop	{r4, pc}
	...

080032b4 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 80032b4:	b538      	push	{r3, r4, r5, lr}
 80032b6:	4604      	mov	r4, r0
    HAL::initialize();
 80032b8:	f00a fc85 	bl	800dbc6 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 80032bc:	6823      	ldr	r3, [r4, #0]
 80032be:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80032c0:	f00e fff0 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 80032c4:	4601      	mov	r1, r0
 80032c6:	4620      	mov	r0, r4
 80032c8:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	4908      	ldr	r1, [pc, #32]	@ (80032f0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80032ce:	4620      	mov	r0, r4
 80032d0:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80032d4:	2300      	movs	r3, #0
 80032d6:	461a      	mov	r2, r3
 80032d8:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80032da:	6863      	ldr	r3, [r4, #4]
 80032dc:	4a05      	ldr	r2, [pc, #20]	@ (80032f4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80032de:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80032e0:	4b05      	ldr	r3, [pc, #20]	@ (80032f8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80032e2:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80032e4:	4a05      	ldr	r2, [pc, #20]	@ (80032fc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80032e6:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80032e8:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80032ea:	4a05      	ldr	r2, [pc, #20]	@ (8003300 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80032ec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	d0119400 	.word	0xd0119400
 80032f4:	2400b174 	.word	0x2400b174
 80032f8:	2400b12c 	.word	0x2400b12c
 80032fc:	d0000000 	.word	0xd0000000
 8003300:	00119400 	.word	0x00119400

08003304 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 8003304:	b538      	push	{r3, r4, r5, lr}
 8003306:	4604      	mov	r4, r0
 8003308:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 800330a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 800330c:	f04f 31ff 	mov.w	r1, #4294967295
 8003310:	f007 fe68 	bl	800afe4 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 8003314:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003316:	f007 fe88 	bl	800b02a <osMutexRelease>
        streams[handle].isActive = false;
 800331a:	2324      	movs	r3, #36	@ 0x24
 800331c:	fb03 4505 	mla	r5, r3, r5, r4
 8003320:	2300      	movs	r3, #0
 8003322:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 8003326:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800332a:	b90b      	cbnz	r3, 8003330 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 800332c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800332e:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003330:	bd38      	pop	{r3, r4, r5, pc}

08003332 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003332:	f00a bbf9 	b.w	800db28 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

08003336 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 8003336:	f00a bd5a 	b.w	800ddee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800333a <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800333a:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 800333e:	b112      	cbz	r2, 8003346 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003340:	6803      	ldr	r3, [r0, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4718      	bx	r3
    }
 8003346:	4770      	bx	lr

08003348 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003348:	4a12      	ldr	r2, [pc, #72]	@ (8003394 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800334a:	6953      	ldr	r3, [r2, #20]
 800334c:	03db      	lsls	r3, r3, #15
{
 800334e:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003350:	d51e      	bpl.n	8003390 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003352:	2300      	movs	r3, #0
 8003354:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003358:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800335c:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003360:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003364:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003368:	f3c3 334e 	ubfx	r3, r3, #13, #15
 800336c:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800336e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003372:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003374:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003378:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800337a:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800337e:	d2f9      	bcs.n	8003374 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003380:	3b20      	subs	r3, #32
 8003382:	f113 0f20 	cmn.w	r3, #32
 8003386:	d1f2      	bne.n	800336e <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003388:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800338c:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	bf00      	nop
 8003394:	e000ed00 	.word	0xe000ed00

08003398 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003398:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800339a:	b131      	cbz	r1, 80033aa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800339e:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 80033a2:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 80033a4:	4804      	ldr	r0, [pc, #16]	@ (80033b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 80033a6:	f01e fe97 	bl	80220d8 <__assert_func>
    }
 80033aa:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 80033ae:	bd08      	pop	{r3, pc}
 80033b0:	08023b50 	.word	0x08023b50
 80033b4:	08023b64 	.word	0x08023b64
 80033b8:	08023cee 	.word	0x08023cee

080033bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 80033bc:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 80033be:	b131      	cbz	r1, 80033ce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 80033c2:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80033c6:	4a06      	ldr	r2, [pc, #24]	@ (80033e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 80033c8:	4806      	ldr	r0, [pc, #24]	@ (80033e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 80033ca:	f01e fe85 	bl	80220d8 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80033ce:	6840      	ldr	r0, [r0, #4]
 80033d0:	4611      	mov	r1, r2
 80033d2:	6803      	ldr	r3, [r0, #0]
    }
 80033d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80033d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033da:	4718      	bx	r3
 80033dc:	08023b50 	.word	0x08023b50
 80033e0:	08023d38 	.word	0x08023d38
 80033e4:	08023cee 	.word	0x08023cee

080033e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80033e8:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80033ea:	b129      	cbz	r1, 80033f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80033ec:	4b03      	ldr	r3, [pc, #12]	@ (80033fc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80033ee:	2179      	movs	r1, #121	@ 0x79
 80033f0:	4a03      	ldr	r2, [pc, #12]	@ (8003400 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80033f2:	4804      	ldr	r0, [pc, #16]	@ (8003404 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80033f4:	f01e fe70 	bl	80220d8 <__assert_func>
    }
 80033f8:	68c0      	ldr	r0, [r0, #12]
 80033fa:	bd08      	pop	{r3, pc}
 80033fc:	08023b50 	.word	0x08023b50
 8003400:	08023ee6 	.word	0x08023ee6
 8003404:	08023cee 	.word	0x08023cee

08003408 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003408:	b510      	push	{r4, lr}
 800340a:	4604      	mov	r4, r0
        assert(handle < no_streams);
 800340c:	b129      	cbz	r1, 800341a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 800340e:	4b19      	ldr	r3, [pc, #100]	@ (8003474 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003410:	21a2      	movs	r1, #162	@ 0xa2
 8003412:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 8003414:	4819      	ldr	r0, [pc, #100]	@ (800347c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 8003416:	f01e fe5f 	bl	80220d8 <__assert_func>
        switch (cmd)
 800341a:	2a05      	cmp	r2, #5
 800341c:	d815      	bhi.n	800344a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800341e:	e8df f002 	tbb	[pc, r2]
 8003422:	1103      	.short	0x1103
 8003424:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 8003428:	6840      	ldr	r0, [r0, #4]
 800342a:	6803      	ldr	r3, [r0, #0]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	4798      	blx	r3
 8003430:	b158      	cbz	r0, 800344a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003432:	2301      	movs	r3, #1
 8003434:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 8003438:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 800343c:	2300      	movs	r3, #0
            stream.tickCount = 0;
 800343e:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003442:	e002      	b.n	800344a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003444:	2300      	movs	r3, #0
 8003446:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800344a:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 800344c:	6203      	str	r3, [r0, #32]
 800344e:	e7f5      	b.n	800343c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003450:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003452:	2301      	movs	r3, #1
 8003454:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003458:	e7f0      	b.n	800343c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800345a:	2300      	movs	r3, #0
 800345c:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003460:	2301      	movs	r3, #1
 8003462:	6203      	str	r3, [r0, #32]
            break;
 8003464:	e7f1      	b.n	800344a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003466:	3b00      	subs	r3, #0
 8003468:	bf18      	it	ne
 800346a:	2301      	movne	r3, #1
 800346c:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003470:	e7eb      	b.n	800344a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003472:	bf00      	nop
 8003474:	08023b50 	.word	0x08023b50
 8003478:	0802409b 	.word	0x0802409b
 800347c:	08023cee 	.word	0x08023cee

08003480 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003480:	b510      	push	{r4, lr}
 8003482:	460c      	mov	r4, r1
 8003484:	4611      	mov	r1, r2
 8003486:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003488:	b12c      	cbz	r4, 8003496 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800348a:	4b06      	ldr	r3, [pc, #24]	@ (80034a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 800348c:	2190      	movs	r1, #144	@ 0x90
 800348e:	4a06      	ldr	r2, [pc, #24]	@ (80034a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003490:	4806      	ldr	r0, [pc, #24]	@ (80034ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003492:	f01e fe21 	bl	80220d8 <__assert_func>
        stream.frameNumber = 0;
 8003496:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003498:	6840      	ldr	r0, [r0, #4]
 800349a:	6803      	ldr	r3, [r0, #0]
    }
 800349c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	4718      	bx	r3
 80034a4:	08023b50 	.word	0x08023b50
 80034a8:	0802426f 	.word	0x0802426f
 80034ac:	08023cee 	.word	0x08023cee

080034b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 80034b0:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80034b2:	b129      	cbz	r1, 80034c0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 80034b4:	4b05      	ldr	r3, [pc, #20]	@ (80034cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 80034b6:	2182      	movs	r1, #130	@ 0x82
 80034b8:	4a05      	ldr	r2, [pc, #20]	@ (80034d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 80034ba:	4806      	ldr	r0, [pc, #24]	@ (80034d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 80034bc:	f01e fe0c 	bl	80220d8 <__assert_func>
        stream.tickCount = 0;
 80034c0:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 80034c4:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 80034c8:	bd08      	pop	{r3, pc}
 80034ca:	bf00      	nop
 80034cc:	08023b50 	.word	0x08023b50
 80034d0:	0802444a 	.word	0x0802444a
 80034d4:	08023cee 	.word	0x08023cee

080034d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80034d8:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80034dc:	b510      	push	{r4, lr}
 80034de:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80034e0:	b153      	cbz	r3, 80034f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80034e2:	f04f 31ff 	mov.w	r1, #4294967295
 80034e6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80034e8:	f007 fd7c 	bl	800afe4 <osMutexAcquire>
            firstDrawThisFrame = false;
 80034ec:	2300      	movs	r3, #0
 80034ee:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80034f2:	2301      	movs	r3, #1
 80034f4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80034f8:	bd10      	pop	{r4, pc}

080034fa <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80034fa:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80034fe:	b11a      	cbz	r2, 8003508 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003500:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003504:	b102      	cbz	r2, 8003508 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003506:	6018      	str	r0, [r3, #0]
        }
    }
 8003508:	4770      	bx	lr
	...

0800350c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 800350c:	b510      	push	{r4, lr}
 800350e:	4604      	mov	r4, r0
 8003510:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003512:	b129      	cbz	r1, 8003520 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003514:	4b13      	ldr	r3, [pc, #76]	@ (8003564 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003516:	21d0      	movs	r1, #208	@ 0xd0
 8003518:	4a13      	ldr	r2, [pc, #76]	@ (8003568 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 800351a:	4814      	ldr	r0, [pc, #80]	@ (800356c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 800351c:	f01e fddc 	bl	80220d8 <__assert_func>
        if (stream.isPlaying)
 8003520:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003524:	b133      	cbz	r3, 8003534 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003526:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 800352e:	6963      	ldr	r3, [r4, #20]
 8003530:	4413      	add	r3, r2
 8003532:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003534:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003538:	b90b      	cbnz	r3, 800353e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 800353a:	2001      	movs	r0, #1
    }
 800353c:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 800353e:	68a3      	ldr	r3, [r4, #8]
 8003540:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003542:	6803      	ldr	r3, [r0, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003548:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 800354a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 800354e:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003552:	2800      	cmp	r0, #0
 8003554:	d1f1      	bne.n	800353a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003556:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1ee      	bne.n	800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 800355e:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003562:	e7eb      	b.n	800353c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003564:	08023b50 	.word	0x08023b50
 8003568:	08024606 	.word	0x08024606
 800356c:	08023cee 	.word	0x08023cee
 8003570:	24025274 	.word	0x24025274

08003574 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003574:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003576:	4c1a      	ldr	r4, [pc, #104]	@ (80035e0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003578:	4605      	mov	r5, r0
    HAL::endFrame();
 800357a:	f00a fb17 	bl	800dbac <_ZN8touchgfx3HAL8endFrameEv>
 800357e:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003582:	b913      	cbnz	r3, 800358a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003584:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003588:	b1ab      	cbz	r3, 80035b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 800358a:	69e1      	ldr	r1, [r4, #28]
 800358c:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003590:	4353      	muls	r3, r2
 8003592:	6922      	ldr	r2, [r4, #16]
 8003594:	434a      	muls	r2, r1
 8003596:	4293      	cmp	r3, r2
 8003598:	d30d      	bcc.n	80035b6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 800359a:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 800359e:	b138      	cbz	r0, 80035b0 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 80035a6:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 80035a8:	bf98      	it	ls
 80035aa:	f102 32ff 	addls.w	r2, r2, #4294967295
 80035ae:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 80035b0:	2301      	movs	r3, #1
 80035b2:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 80035b6:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 80035b8:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 80035ba:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 80035be:	f007 fdc9 	bl	800b154 <osSemaphoreRelease>
        if (uiHasMutex)
 80035c2:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 80035c6:	b12b      	cbz	r3, 80035d4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 80035c8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80035ca:	f007 fd2e 	bl	800b02a <osMutexRelease>
            uiHasMutex = false;
 80035ce:	2300      	movs	r3, #0
 80035d0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 80035d4:	6868      	ldr	r0, [r5, #4]
 80035d6:	6803      	ldr	r3, [r0, #0]
}
 80035d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 80035dc:	691b      	ldr	r3, [r3, #16]
 80035de:	4718      	bx	r3
 80035e0:	2400b12c 	.word	0x2400b12c

080035e4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035e4:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 80035e6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80035ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 80035ee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80035f2:	f3bf 8f6f 	isb	sy
}
 80035f6:	4770      	bx	lr
 80035f8:	e000e100 	.word	0xe000e100

080035fc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035fc:	4b02      	ldr	r3, [pc, #8]	@ (8003608 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 80035fe:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003602:	609a      	str	r2, [r3, #8]
}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	e000e100 	.word	0xe000e100

0800360c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 800360c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800360e:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003610:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003614:	b9d8      	cbnz	r0, 800364e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003616:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800361a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 800361c:	2501      	movs	r5, #1
                streams[i] = Stream();
 800361e:	60d8      	str	r0, [r3, #12]
 8003620:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003622:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003626:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003628:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 800362c:	6158      	str	r0, [r3, #20]
 800362e:	6198      	str	r0, [r3, #24]
 8003630:	61d8      	str	r0, [r3, #28]
 8003632:	6218      	str	r0, [r3, #32]
 8003634:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003636:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003638:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 800363c:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003640:	443c      	add	r4, r7
 8003642:	42a2      	cmp	r2, r4
 8003644:	d90a      	bls.n	800365c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003646:	4b0b      	ldr	r3, [pc, #44]	@ (8003674 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003648:	2152      	movs	r1, #82	@ 0x52
 800364a:	4a0b      	ldr	r2, [pc, #44]	@ (8003678 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 800364c:	e003      	b.n	8003656 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 800364e:	4b0b      	ldr	r3, [pc, #44]	@ (800367c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003650:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003654:	4a0a      	ldr	r2, [pc, #40]	@ (8003680 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003656:	480b      	ldr	r0, [pc, #44]	@ (8003684 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003658:	f01e fd3e 	bl	80220d8 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 800365c:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003660:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003664:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003668:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 800366a:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 800366e:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003670:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003674:	0802495e 	.word	0x0802495e
 8003678:	08024999 	.word	0x08024999
 800367c:	080247a7 	.word	0x080247a7
 8003680:	080247d7 	.word	0x080247d7
 8003684:	08023cee 	.word	0x08023cee

08003688 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003688:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 800368a:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800368c:	4e12      	ldr	r6, [pc, #72]	@ (80036d8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 800368e:	4604      	mov	r4, r0
 8003690:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003692:	4b12      	ldr	r3, [pc, #72]	@ (80036dc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003694:	6003      	str	r3, [r0, #0]
 8003696:	6833      	ldr	r3, [r6, #0]
 8003698:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 800369c:	b10a      	cbz	r2, 80036a2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 800369e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80036a0:	b900      	cbnz	r0, 80036a4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 80036a2:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 80036a4:	6803      	ldr	r3, [r0, #0]
 80036a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a8:	4798      	blx	r3
 80036aa:	1e43      	subs	r3, r0, #1
 80036ac:	425d      	negs	r5, r3
 80036ae:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 80036b0:	6833      	ldr	r3, [r6, #0]
 80036b2:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 80036b4:	b130      	cbz	r0, 80036c4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 80036b6:	6803      	ldr	r3, [r0, #0]
 80036b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ba:	4798      	blx	r3
 80036bc:	2801      	cmp	r0, #1
 80036be:	bf08      	it	eq
 80036c0:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 80036c4:	b92d      	cbnz	r5, 80036d2 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 80036c6:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 80036c8:	2127      	movs	r1, #39	@ 0x27
 80036ca:	4a06      	ldr	r2, [pc, #24]	@ (80036e4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 80036cc:	4806      	ldr	r0, [pc, #24]	@ (80036e8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 80036ce:	f01e fd03 	bl	80220d8 <__assert_func>
    }
 80036d2:	4620      	mov	r0, r4
 80036d4:	bd70      	pop	{r4, r5, r6, pc}
 80036d6:	bf00      	nop
 80036d8:	24025274 	.word	0x24025274
 80036dc:	08024c4c 	.word	0x08024c4c
 80036e0:	08024b3c 	.word	0x08024b3c
 80036e4:	08024b9a 	.word	0x08024b9a
 80036e8:	08024bd3 	.word	0x08024bd3

080036ec <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 80036ec:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 80036ee:	4e24      	ldr	r6, [pc, #144]	@ (8003780 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 80036f0:	6835      	ldr	r5, [r6, #0]
 80036f2:	f3bf 8f5b 	dmb	ish
 80036f6:	f015 0501 	ands.w	r5, r5, #1
 80036fa:	d13f      	bne.n	800377c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 80036fc:	4630      	mov	r0, r6
 80036fe:	f01e f976 	bl	80219ee <__cxa_guard_acquire>
 8003702:	2800      	cmp	r0, #0
 8003704:	d03a      	beq.n	800377c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003706:	4c1f      	ldr	r4, [pc, #124]	@ (8003784 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003708:	4b1f      	ldr	r3, [pc, #124]	@ (8003788 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 800370a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800370e:	6125      	str	r5, [r4, #16]
 8003710:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003712:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003714:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003716:	e9c4 3500 	strd	r3, r5, [r4]
 800371a:	e9c4 5502 	strd	r5, r5, [r4, #8]
 800371e:	f010 f998 	bl	8013a52 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003722:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003726:	f00c fc7f 	bl	8010028 <_ZN8touchgfx12CanvasWidgetC1Ev>
 800372a:	4b18      	ldr	r3, [pc, #96]	@ (800378c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800372c:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 800372e:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003730:	4b17      	ldr	r3, [pc, #92]	@ (8003790 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003732:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003736:	f7ff ffa7 	bl	8003688 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 800373a:	4b16      	ldr	r3, [pc, #88]	@ (8003794 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 800373c:	4816      	ldr	r0, [pc, #88]	@ (8003798 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 800373e:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003742:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003744:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003748:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 800374c:	2364      	movs	r3, #100	@ 0x64
 800374e:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003752:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003756:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 800375a:	2300      	movs	r3, #0
 800375c:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003760:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003764:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003768:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 800376c:	4b0b      	ldr	r3, [pc, #44]	@ (800379c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 800376e:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003772:	f01e fccf 	bl	8022114 <atexit>
 8003776:	4630      	mov	r0, r6
 8003778:	f01e f945 	bl	8021a06 <__cxa_guard_release>
}
 800377c:	4801      	ldr	r0, [pc, #4]	@ (8003784 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 800377e:	bd70      	pop	{r4, r5, r6, pc}
 8003780:	2400b06c 	.word	0x2400b06c
 8003784:	2400b070 	.word	0x2400b070
 8003788:	08025a34 	.word	0x08025a34
 800378c:	08024c6c 	.word	0x08024c6c
 8003790:	08024ce4 	.word	0x08024ce4
 8003794:	08025a80 	.word	0x08025a80
 8003798:	08003251 	.word	0x08003251
 800379c:	08025ab8 	.word	0x08025ab8

080037a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 80037a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037a4:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 80037a6:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80037a8:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 80037ac:	f04f 31ff 	mov.w	r1, #4294967295
 80037b0:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 80037b2:	f007 fca3 	bl	800b0fc <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 80037b6:	f04f 31ff 	mov.w	r1, #4294967295
 80037ba:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037bc:	f007 fc12 	bl	800afe4 <osMutexAcquire>
                if (stream.doDecode)
 80037c0:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80037c4:	b343      	cbz	r3, 8003818 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 80037c6:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 80037c8:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 80037cc:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 80037ce:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 80037d2:	f1b8 0f00 	cmp.w	r8, #0
 80037d6:	d023      	beq.n	8003820 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	4641      	mov	r1, r8
 80037dc:	4628      	mov	r0, r5
 80037de:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 80037e0:	2300      	movs	r3, #0
 80037e2:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80037ea:	9700      	str	r7, [sp, #0]
 80037ec:	4628      	mov	r0, r5
 80037ee:	f8d3 8014 	ldr.w	r8, [r3, #20]
 80037f2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80037f6:	68a1      	ldr	r1, [r4, #8]
 80037f8:	47c0      	blx	r8
                    stream.frameCount++;
 80037fa:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 80037fc:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003800:	3301      	adds	r3, #1
 8003802:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003804:	b1f0      	cbz	r0, 8003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	4628      	mov	r0, r5
 800380a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380c:	4798      	blx	r3
 800380e:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003810:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003812:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003814:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003818:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800381a:	f007 fc06 	bl	800b02a <osMutexRelease>
        while (1)
 800381e:	e7c5      	b.n	80037ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003820:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003822:	2a00      	cmp	r2, #0
 8003824:	d0de      	beq.n	80037e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003826:	4628      	mov	r0, r5
 8003828:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 800382c:	4798      	blx	r3
 800382e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003830:	4401      	add	r1, r0
 8003832:	4628      	mov	r0, r5
 8003834:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003836:	6923      	ldr	r3, [r4, #16]
 8003838:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 800383a:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 800383e:	4413      	add	r3, r2
 8003840:	6123      	str	r3, [r4, #16]
 8003842:	e7cf      	b.n	80037e4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003844:	2001      	movs	r0, #1
 8003846:	e7e3      	b.n	8003810 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003848 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003848:	4801      	ldr	r0, [pc, #4]	@ (8003850 <videoTaskFunc+0x8>)
{
 800384a:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 800384c:	f7ff ffa8 	bl	80037a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003850:	2400b12c 	.word	0x2400b12c

08003854 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003854:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003856:	4814      	ldr	r0, [pc, #80]	@ (80038a8 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003858:	2500      	movs	r5, #0
 800385a:	f7fe fbef 	bl	800203c <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 800385e:	4c13      	ldr	r4, [pc, #76]	@ (80038ac <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003860:	4b13      	ldr	r3, [pc, #76]	@ (80038b0 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003862:	462a      	mov	r2, r5
 8003864:	4629      	mov	r1, r5
 8003866:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003868:	6023      	str	r3, [r4, #0]
 800386a:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800386e:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003870:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003872:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003874:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003878:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 800387c:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003880:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003884:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003888:	e9c4 5503 	strd	r5, r5, [r4, #12]
 800388c:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003890:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003894:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003898:	f007 fbe6 	bl	800b068 <osSemaphoreNew>
 800389c:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 800389e:	4628      	mov	r0, r5
 80038a0:	f007 fb6b 	bl	800af7a <osMutexNew>
 80038a4:	6460      	str	r0, [r4, #68]	@ 0x44
}
 80038a6:	bd38      	pop	{r3, r4, r5, pc}
 80038a8:	2400b174 	.word	0x2400b174
 80038ac:	2400b12c 	.word	0x2400b12c
 80038b0:	08024d30 	.word	0x08024d30

080038b4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80038b4:	4770      	bx	lr

080038b6 <_ZN23ApplicationFontProviderD0Ev>:
 80038b6:	b510      	push	{r4, lr}
 80038b8:	4604      	mov	r4, r0
 80038ba:	2104      	movs	r1, #4
 80038bc:	f01e f895 	bl	80219ea <_ZdlPvj>
 80038c0:	4620      	mov	r0, r4
 80038c2:	bd10      	pop	{r4, pc}

080038c4 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 80038c4:	2901      	cmp	r1, #1
{
 80038c6:	b508      	push	{r3, lr}
    switch (typography)
 80038c8:	d006      	beq.n	80038d8 <_ZN23ApplicationFontProvider7getFontEt+0x14>
 80038ca:	2902      	cmp	r1, #2
 80038cc:	d008      	beq.n	80038e0 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 80038ce:	b959      	cbnz	r1, 80038e8 <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 80038d0:	f000 fc10 	bl	80040f4 <_ZN17TypedTextDatabase8getFontsEv>
 80038d4:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 80038d6:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 80038d8:	f000 fc0c 	bl	80040f4 <_ZN17TypedTextDatabase8getFontsEv>
 80038dc:	6840      	ldr	r0, [r0, #4]
 80038de:	e7fa      	b.n	80038d6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 80038e0:	f000 fc08 	bl	80040f4 <_ZN17TypedTextDatabase8getFontsEv>
 80038e4:	6880      	ldr	r0, [r0, #8]
 80038e6:	e7f6      	b.n	80038d6 <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 80038e8:	2000      	movs	r0, #0
 80038ea:	e7f4      	b.n	80038d6 <_ZN23ApplicationFontProvider7getFontEt+0x12>

080038ec <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 80038ec:	4800      	ldr	r0, [pc, #0]	@ (80038f0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 80038ee:	4770      	bx	lr
 80038f0:	08024d80 	.word	0x08024d80

080038f4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 80038f4:	2003      	movs	r0, #3
 80038f6:	4770      	bx	lr

080038f8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 80038f8:	b513      	push	{r0, r1, r4, lr}
 80038fa:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 80038fc:	b151      	cbz	r1, 8003914 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003902:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003904:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003908:	689c      	ldr	r4, [r3, #8]
 800390a:	f10d 0303 	add.w	r3, sp, #3
 800390e:	47a0      	blx	r4
        return glyph;
    }
 8003910:	b002      	add	sp, #8
 8003912:	bd10      	pop	{r4, pc}
            return 0;
 8003914:	4608      	mov	r0, r1
 8003916:	e7fb      	b.n	8003910 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003918 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003918:	89c0      	ldrh	r0, [r0, #14]
 800391a:	4770      	bx	lr

0800391c <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 800391c:	8a00      	ldrh	r0, [r0, #16]
 800391e:	4770      	bx	lr

08003920 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003920:	88c0      	ldrh	r0, [r0, #6]
 8003922:	4770      	bx	lr

08003924 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003924:	8880      	ldrh	r0, [r0, #4]
 8003926:	4770      	bx	lr

08003928 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003928:	7a80      	ldrb	r0, [r0, #10]
    }
 800392a:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 800392e:	4770      	bx	lr

08003930 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003930:	7a80      	ldrb	r0, [r0, #10]
    }
 8003932:	09c0      	lsrs	r0, r0, #7
 8003934:	4770      	bx	lr

08003936 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003936:	2000      	movs	r0, #0
 8003938:	4770      	bx	lr
	...

0800393c <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 800393c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003944 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	00000000 	.word	0x00000000

08003948 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003948:	4770      	bx	lr

0800394a <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 800394a:	4770      	bx	lr

0800394c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 800394c:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003950:	6808      	ldr	r0, [r1, #0]
 8003952:	6849      	ldr	r1, [r1, #4]
 8003954:	c303      	stmia	r3!, {r0, r1}
    }
 8003956:	4770      	bx	lr

08003958 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003958:	4770      	bx	lr

0800395a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 800395a:	4770      	bx	lr

0800395c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 800395c:	6041      	str	r1, [r0, #4]
    }
 800395e:	4770      	bx	lr

08003960 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003960:	4770      	bx	lr
	...

08003964 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003964:	4b06      	ldr	r3, [pc, #24]	@ (8003980 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003966:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 800396a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 800396e:	2300      	movs	r3, #0
 8003970:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003974:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003978:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	08003a25 	.word	0x08003a25

08003984 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003984:	2301      	movs	r3, #1
 8003986:	7203      	strb	r3, [r0, #8]
    }
 8003988:	4770      	bx	lr

0800398a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 800398a:	4770      	bx	lr

0800398c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 800398c:	4770      	bx	lr

0800398e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800398e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003990:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003992:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003994:	68c2      	ldr	r2, [r0, #12]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	1054      	asrs	r4, r2, #1
 800399a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 800399e:	07d2      	lsls	r2, r2, #31
 80039a0:	bf48      	it	mi
 80039a2:	590a      	ldrmi	r2, [r1, r4]
    }
 80039a4:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80039a8:	bf48      	it	mi
 80039aa:	58d3      	ldrmi	r3, [r2, r3]
 80039ac:	4718      	bx	r3

080039ae <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80039ae:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 80039b0:	6840      	ldr	r0, [r0, #4]
 80039b2:	b130      	cbz	r0, 80039c2 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 80039b4:	689a      	ldr	r2, [r3, #8]
 80039b6:	b91a      	cbnz	r2, 80039c0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 80039b8:	68d8      	ldr	r0, [r3, #12]
 80039ba:	f000 0001 	and.w	r0, r0, #1
 80039be:	4770      	bx	lr
 80039c0:	2001      	movs	r0, #1
    }
 80039c2:	4770      	bx	lr

080039c4 <_ZN8touchgfx12NoTransitionD0Ev>:
 80039c4:	b510      	push	{r4, lr}
 80039c6:	4604      	mov	r4, r0
 80039c8:	210c      	movs	r1, #12
 80039ca:	f01e f80e 	bl	80219ea <_ZdlPvj>
 80039ce:	4620      	mov	r0, r4
 80039d0:	bd10      	pop	{r4, pc}

080039d2 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80039d2:	b510      	push	{r4, lr}
 80039d4:	4604      	mov	r4, r0
 80039d6:	2110      	movs	r1, #16
 80039d8:	f01e f807 	bl	80219ea <_ZdlPvj>
 80039dc:	4620      	mov	r0, r4
 80039de:	bd10      	pop	{r4, pc}

080039e0 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80039e8:	f01d ffff 	bl	80219ea <_ZdlPvj>
 80039ec:	4620      	mov	r0, r4
 80039ee:	bd10      	pop	{r4, pc}

080039f0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 80039f0:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 80039f2:	f00e fc57 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 80039f6:	6803      	ldr	r3, [r0, #0]
    }
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 80039fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039fe:	4718      	bx	r3

08003a00 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003a00:	b510      	push	{r4, lr}
 8003a02:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003a04:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003a08:	b158      	cbz	r0, 8003a22 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003a0a:	6803      	ldr	r3, [r0, #0]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	4798      	blx	r3
 8003a10:	b138      	cbz	r0, 8003a22 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003a12:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003a22:	bd10      	pop	{r4, pc}

08003a24 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 8003a24:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003a28:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003a2c:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003a2e:	68b0      	ldr	r0, [r6, #8]
 8003a30:	6803      	ldr	r3, [r0, #0]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	4798      	blx	r3
 8003a36:	f5b0 7f0f 	cmp.w	r0, #572	@ 0x23c
 8003a3a:	d205      	bcs.n	8003a48 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x24>
 8003a3c:	4b44      	ldr	r3, [pc, #272]	@ (8003b50 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>)
 8003a3e:	21a3      	movs	r1, #163	@ 0xa3
 8003a40:	4a44      	ldr	r2, [pc, #272]	@ (8003b54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003a42:	4845      	ldr	r0, [pc, #276]	@ (8003b58 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x134>)
 8003a44:	f01e fb48 	bl	80220d8 <__assert_func>
 8003a48:	6870      	ldr	r0, [r6, #4]
 8003a4a:	6803      	ldr	r3, [r0, #0]
 8003a4c:	6a1b      	ldr	r3, [r3, #32]
 8003a4e:	4798      	blx	r3
 8003a50:	280f      	cmp	r0, #15
 8003a52:	d803      	bhi.n	8003a5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x38>
 8003a54:	4b41      	ldr	r3, [pc, #260]	@ (8003b5c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x138>)
 8003a56:	21a4      	movs	r1, #164	@ 0xa4
 8003a58:	4a3e      	ldr	r2, [pc, #248]	@ (8003b54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a5a:	e7f2      	b.n	8003a42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003a5c:	68f0      	ldr	r0, [r6, #12]
 8003a5e:	6803      	ldr	r3, [r0, #0]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	4798      	blx	r3
 8003a64:	280b      	cmp	r0, #11
 8003a66:	d803      	bhi.n	8003a70 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x4c>
 8003a68:	4b3d      	ldr	r3, [pc, #244]	@ (8003b60 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13c>)
 8003a6a:	21a5      	movs	r1, #165	@ 0xa5
 8003a6c:	4a39      	ldr	r2, [pc, #228]	@ (8003b54 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x130>)
 8003a6e:	e7e8      	b.n	8003a42 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1e>
    if (*currentTrans)
 8003a70:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8003b68 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003a74:	f00e fc16 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003a78:	3004      	adds	r0, #4
 8003a7a:	f00e fc51 	bl	8012320 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003a7e:	f8d9 0000 	ldr.w	r0, [r9]
 8003a82:	b110      	cbz	r0, 8003a8a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x66>
        (*currentTrans)->tearDown();
 8003a84:	6803      	ldr	r3, [r0, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	4798      	blx	r3
    if (*currentTrans)
 8003a8a:	f8d9 0000 	ldr.w	r0, [r9]
 8003a8e:	b110      	cbz	r0, 8003a96 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x72>
        (*currentTrans)->~Transition();
 8003a90:	6803      	ldr	r3, [r0, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4798      	blx	r3
    if (*currentScreen)
 8003a96:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003b6c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
 8003a9a:	f8d8 0000 	ldr.w	r0, [r8]
 8003a9e:	b110      	cbz	r0, 8003aa6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
        (*currentScreen)->tearDownScreen();
 8003aa0:	6803      	ldr	r3, [r0, #0]
 8003aa2:	695b      	ldr	r3, [r3, #20]
 8003aa4:	4798      	blx	r3
    if (*currentPresenter)
 8003aa6:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003aaa:	b110      	cbz	r0, 8003ab2 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x8e>
        (*currentPresenter)->deactivate();
 8003aac:	6803      	ldr	r3, [r0, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4798      	blx	r3
    if (*currentScreen)
 8003ab2:	f8d8 0000 	ldr.w	r0, [r8]
 8003ab6:	b110      	cbz	r0, 8003abe <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x9a>
        (*currentScreen)->~Screen();
 8003ab8:	6803      	ldr	r3, [r0, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4798      	blx	r3
    if (*currentPresenter)
 8003abe:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003ac2:	b110      	cbz	r0, 8003aca <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xa6>
        (*currentPresenter)->~Presenter();
 8003ac4:	6803      	ldr	r3, [r0, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003aca:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003acc:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003ace:	f04f 0b00 	mov.w	fp, #0
 8003ad2:	6803      	ldr	r3, [r0, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ad6:	4798      	blx	r3
 8003ad8:	4b22      	ldr	r3, [pc, #136]	@ (8003b64 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x140>)
 8003ada:	4604      	mov	r4, r0
 8003adc:	f8c0 b004 	str.w	fp, [r0, #4]
 8003ae0:	f880 b008 	strb.w	fp, [r0, #8]
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003ae8:	68b0      	ldr	r0, [r6, #8]
 8003aea:	6803      	ldr	r3, [r0, #0]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	4798      	blx	r3
 8003af0:	4605      	mov	r5, r0
 8003af2:	f000 fb6b 	bl	80041cc <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003af6:	6870      	ldr	r0, [r6, #4]
 8003af8:	4659      	mov	r1, fp
 8003afa:	6803      	ldr	r3, [r0, #0]
 8003afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afe:	4798      	blx	r3
 8003b00:	4606      	mov	r6, r0
 8003b02:	4629      	mov	r1, r5
 8003b04:	f000 fb40 	bl	8004188 <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003b08:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003b0a:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003b0e:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003b10:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003b14:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003b18:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003b1c:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003b1e:	f8c6 a008 	str.w	sl, [r6, #8]
 8003b22:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003b24:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003b26:	4798      	blx	r3
    newPresenter->activate();
 8003b28:	6833      	ldr	r3, [r6, #0]
 8003b2a:	4630      	mov	r0, r6
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003b30:	4621      	mov	r1, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	f010 fc9e 	bl	8014474 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003b38:	6823      	ldr	r3, [r4, #0]
 8003b3a:	4620      	mov	r0, r4
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	4798      	blx	r3
    newTransition->invalidate();
 8003b40:	6823      	ldr	r3, [r4, #0]
 8003b42:	4620      	mov	r0, r4
 8003b44:	695b      	ldr	r3, [r3, #20]
}
 8003b46:	b001      	add	sp, #4
 8003b48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b4c:	4718      	bx	r3
 8003b4e:	bf00      	nop
 8003b50:	08024dbc 	.word	0x08024dbc
 8003b54:	08024e4a 	.word	0x08024e4a
 8003b58:	08024f1c 	.word	0x08024f1c
 8003b5c:	08024f71 	.word	0x08024f71
 8003b60:	08025014 	.word	0x08025014
 8003b64:	0802512c 	.word	0x0802512c
 8003b68:	240252bc 	.word	0x240252bc
 8003b6c:	240252b8 	.word	0x240252b8

08003b70 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b70:	4b04      	ldr	r3, [pc, #16]	@ (8003b84 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b78:	b10a      	cbz	r2, 8003b7e <_ZN8touchgfx3HAL3lcdEv+0xe>
 8003b7a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b7c:	b900      	cbnz	r0, 8003b80 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8003b7e:	6898      	ldr	r0, [r3, #8]
    }
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	24025274 	.word	0x24025274

08003b88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8003b88:	b570      	push	{r4, r5, r6, lr}
 8003b8a:	4616      	mov	r6, r2
 8003b8c:	4604      	mov	r4, r0
 8003b8e:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 8003b90:	f00e fc98 	bl	80124c4 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8003b94:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8003b96:	2100      	movs	r1, #0
        instance = this;
 8003b98:	601c      	str	r4, [r3, #0]
      model(m)
 8003b9a:	4b10      	ldr	r3, [pc, #64]	@ (8003bdc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 8003b9c:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8003b9e:	4b10      	ldr	r3, [pc, #64]	@ (8003be0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8003ba0:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 8003ba4:	4b0f      	ldr	r3, [pc, #60]	@ (8003be4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8003ba6:	6818      	ldr	r0, [r3, #0]
 8003ba8:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003bac:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8003bae:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 8003bb2:	689b      	ldr	r3, [r3, #8]
      model(m)
 8003bb4:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8003bb8:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 8003bba:	f7ff ffd9 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 8003bbe:	f016 fcb2 	bl	801a526 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8003bc2:	f7ff ffd5 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 8003bc6:	f016 fd25 	bl	801a614 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 8003bca:	f7ff ffd1 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 8003bce:	f016 fd2d 	bl	801a62c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8003bd2:	4620      	mov	r0, r4
 8003bd4:	bd70      	pop	{r4, r5, r6, pc}
 8003bd6:	bf00      	nop
 8003bd8:	240252c8 	.word	0x240252c8
 8003bdc:	080250d8 	.word	0x080250d8
 8003be0:	080250c0 	.word	0x080250c0
 8003be4:	24025274 	.word	0x24025274

08003be8 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003be8:	4b06      	ldr	r3, [pc, #24]	@ (8003c04 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x1c>)
 8003bea:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003bee:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 8003bf8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003bfc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	08003a25 	.word	0x08003a25

08003c08 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 8003c08:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8003c0a:	4770      	bx	lr

08003c0c <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 8003c0c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003c0e:	4770      	bx	lr

08003c10 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 8003c10:	4770      	bx	lr

08003c12 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 8003c12:	888b      	ldrh	r3, [r1, #4]
 8003c14:	69c0      	ldr	r0, [r0, #28]
 8003c16:	0adb      	lsrs	r3, r3, #11
 8003c18:	680a      	ldr	r2, [r1, #0]
 8003c1a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 8003c1e:	4410      	add	r0, r2
 8003c20:	4770      	bx	lr

08003c22 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8003c22:	b510      	push	{r4, lr}
 8003c24:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8003c26:	b1ba      	cbz	r2, 8003c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8003c28:	7b10      	ldrb	r0, [r2, #12]
 8003c2a:	b168      	cbz	r0, 8003c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 8003c2c:	7b53      	ldrb	r3, [r2, #13]
 8003c2e:	7ad2      	ldrb	r2, [r2, #11]
 8003c30:	021b      	lsls	r3, r3, #8
 8003c32:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8003c36:	431a      	orrs	r2, r3
 8003c38:	6a23      	ldr	r3, [r4, #32]
 8003c3a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	428a      	cmp	r2, r1
 8003c42:	d102      	bne.n	8003c4a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8003c44:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8003c48:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 8003c4a:	d805      	bhi.n	8003c58 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8003c4c:	3801      	subs	r0, #1
 8003c4e:	3304      	adds	r3, #4
 8003c50:	b280      	uxth	r0, r0
 8003c52:	2800      	cmp	r0, #0
 8003c54:	d1f3      	bne.n	8003c3e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8003c56:	e7f7      	b.n	8003c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8003c58:	2000      	movs	r0, #0
 8003c5a:	e7f5      	b.n	8003c48 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08003c5c <_ZN8touchgfx13GeneratedFontD0Ev>:
 8003c5c:	b510      	push	{r4, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	212c      	movs	r1, #44	@ 0x2c
 8003c62:	f01d fec2 	bl	80219ea <_ZdlPvj>
 8003c66:	4620      	mov	r0, r4
 8003c68:	bd10      	pop	{r4, pc}
	...

08003c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8003c6c:	b530      	push	{r4, r5, lr}
 8003c6e:	b08b      	sub	sp, #44	@ 0x2c
 8003c70:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8003c72:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8003c76:	9508      	str	r5, [sp, #32]
 8003c78:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8003c7c:	9507      	str	r5, [sp, #28]
 8003c7e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8003c82:	9506      	str	r5, [sp, #24]
 8003c84:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8003c88:	9505      	str	r5, [sp, #20]
 8003c8a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8003c8e:	9504      	str	r5, [sp, #16]
 8003c90:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8003c94:	9503      	str	r5, [sp, #12]
 8003c96:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 8003c9a:	9502      	str	r5, [sp, #8]
 8003c9c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8003ca0:	9501      	str	r5, [sp, #4]
 8003ca2:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8003ca6:	9500      	str	r5, [sp, #0]
 8003ca8:	f00f ff90 	bl	8013bcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8003cac:	4b06      	ldr	r3, [pc, #24]	@ (8003cc8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8003cae:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8003cb0:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8003cb2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8003cb4:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8003cb6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8003cb8:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 8003cba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8003cbc:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8003cbe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8003cc0:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8003cc2:	b00b      	add	sp, #44	@ 0x2c
 8003cc4:	bd30      	pop	{r4, r5, pc}
 8003cc6:	bf00      	nop
 8003cc8:	08025150 	.word	0x08025150

08003ccc <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8003ccc:	4770      	bx	lr

08003cce <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8003cce:	4770      	bx	lr

08003cd0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8003cd0:	4770      	bx	lr

08003cd2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8003cd2:	4770      	bx	lr

08003cd4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8003cd4:	4770      	bx	lr

08003cd6 <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
 8003cd6:	4770      	bx	lr

08003cd8 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
 8003cd8:	4770      	bx	lr

08003cda <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
 8003cda:	b510      	push	{r4, lr}
 8003cdc:	4604      	mov	r4, r0
}
 8003cde:	f44f 710e 	mov.w	r1, #568	@ 0x238
 8003ce2:	f01d fe82 	bl	80219ea <_ZdlPvj>
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	bd10      	pop	{r4, pc}

08003cea <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cee:	461d      	mov	r5, r3
        setX(x);
 8003cf0:	6803      	ldr	r3, [r0, #0]
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4616      	mov	r6, r2
        setX(x);
 8003cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 8003cf8:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
        setX(x);
 8003cfc:	4798      	blx	r3
        setY(y);
 8003cfe:	6823      	ldr	r3, [r4, #0]
 8003d00:	4631      	mov	r1, r6
 8003d02:	4620      	mov	r0, r4
 8003d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d06:	4798      	blx	r3
        setWidth(width);
 8003d08:	6823      	ldr	r3, [r4, #0]
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	4620      	mov	r0, r4
 8003d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d10:	4798      	blx	r3
        setHeight(height);
 8003d12:	6823      	ldr	r3, [r4, #0]
 8003d14:	4639      	mov	r1, r7
 8003d16:	4620      	mov	r0, r4
 8003d18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 8003d1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setHeight(height);
 8003d1e:	4718      	bx	r3

08003d20 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase()
 8003d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4604      	mov	r4, r0
        : presenter(0)
 8003d26:	2500      	movs	r5, #0
 8003d28:	f010 f9f8 	bl	801411c <_ZN8touchgfx6ScreenC1Ev>
 8003d2c:	4b43      	ldr	r3, [pc, #268]	@ (8003e3c <_ZN15Screen1ViewBaseC1Ev+0x11c>)
 8003d2e:	4627      	mov	r7, r4
 8003d30:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8003d32:	f104 0698 	add.w	r6, r4, #152	@ 0x98
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 8003d36:	22ff      	movs	r2, #255	@ 0xff
 8003d38:	f847 3b40 	str.w	r3, [r7], #64
    __background.setPosition(0, 0, 800, 480);
 8003d3c:	f44f 7af0 	mov.w	sl, #480	@ 0x1e0
 8003d40:	4b3f      	ldr	r3, [pc, #252]	@ (8003e40 <_ZN15Screen1ViewBaseC1Ev+0x120>)
Screen1ViewBase::Screen1ViewBase()
 8003d42:	4630      	mov	r0, r6
 8003d44:	f884 2066 	strb.w	r2, [r4, #102]	@ 0x66
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8003d48:	f104 0904 	add.w	r9, r4, #4
          cachedAbsX(0),
 8003d4c:	6625      	str	r5, [r4, #96]	@ 0x60
 8003d4e:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
        : color(col)
 8003d52:	66a5      	str	r5, [r4, #104]	@ 0x68
class Container : public Drawable
{
public:
    Container()
        : Drawable(),
          firstChild(0)
 8003d54:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
        : x(0), y(0), width(0), height(0)
 8003d58:	e9c4 3510 	strd	r3, r5, [r4, #64]	@ 0x40
          touchable(false),
 8003d5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003d60:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 8003d64:	f8a4 3090 	strh.w	r3, [r4, #144]	@ 0x90
 8003d68:	4b36      	ldr	r3, [pc, #216]	@ (8003e44 <_ZN15Screen1ViewBaseC1Ev+0x124>)
 8003d6a:	e9c4 5512 	strd	r5, r5, [r4, #72]	@ 0x48
 8003d6e:	66e3      	str	r3, [r4, #108]	@ 0x6c
          parent(0),
 8003d70:	e9c4 5514 	strd	r5, r5, [r4, #80]	@ 0x50
          nextDrawChainElement(0),
 8003d74:	e9c4 5516 	strd	r5, r5, [r4, #88]	@ 0x58
 8003d78:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 8003d7c:	e9c4 551e 	strd	r5, r5, [r4, #120]	@ 0x78
          nextSibling(0),
 8003d80:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
          cachedAbsX(0),
 8003d84:	e9c4 5522 	strd	r5, r5, [r4, #136]	@ 0x88
 8003d88:	f00c f9ec 	bl	8010164 <_ZN8touchgfx5GaugeC1Ev>
    __background.setPosition(0, 0, 800, 480);
 8003d8c:	462a      	mov	r2, r5
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4638      	mov	r0, r7
 8003d92:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003d96:	f8cd a000 	str.w	sl, [sp]
 8003d9a:	f7ff ffa6 	bl	8003cea <_ZN8touchgfx8Drawable11setPositionEssss>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 8003d9e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8003da2:	4639      	mov	r1, r7
 8003da4:	4648      	mov	r0, r9
 8003da6:	66a3      	str	r3, [r4, #104]	@ 0x68
 8003da8:	f009 fc24 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    container1.setPosition(0, 0, 800, 480);
 8003dac:	462a      	mov	r2, r5
 8003dae:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003db2:	4629      	mov	r1, r5
 8003db4:	4640      	mov	r0, r8
 8003db6:	f8cd a000 	str.w	sl, [sp]
 8003dba:	f7ff ff96 	bl	8003cea <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setBackground(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_LARGE_BACKGROUNDS_DARK_PRECISION_ID));
 8003dbe:	a903      	add	r1, sp, #12
 8003dc0:	4630      	mov	r0, r6
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8003dc2:	f8ad 500c 	strh.w	r5, [sp, #12]
 8003dc6:	f009 fba7 	bl	800d518 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>
    gauge1.setPosition(232, 72, 336, 336);
 8003dca:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003dce:	4630      	mov	r0, r6
 8003dd0:	2248      	movs	r2, #72	@ 0x48
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	21e8      	movs	r1, #232	@ 0xe8
 8003dd6:	f7ff ff88 	bl	8003cea <_ZN8touchgfx8Drawable11setPositionEssss>
    gauge1.setCenter(168, 168);
 8003dda:	22a8      	movs	r2, #168	@ 0xa8
 8003ddc:	4630      	mov	r0, r6
 8003dde:	4611      	mov	r1, r2
 8003de0:	f00c fa6b 	bl	80102ba <_ZN8touchgfx5Gauge9setCenterEii>
    gauge1.setStartEndAngle(-113, 112);
 8003de4:	4630      	mov	r0, r6
 8003de6:	2270      	movs	r2, #112	@ 0x70
 8003de8:	f06f 0170 	mvn.w	r1, #112	@ 0x70
 8003dec:	f00c faea 	bl	80103c4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>
    gauge1.setRange(0, 100);
 8003df0:	462b      	mov	r3, r5
 8003df2:	2264      	movs	r2, #100	@ 0x64
 8003df4:	4629      	mov	r1, r5
 8003df6:	4630      	mov	r0, r6
 8003df8:	9500      	str	r5, [sp, #0]
 8003dfa:	f009 fa3a 	bl	800d272 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>
    gauge1.setValue(0);
 8003dfe:	4629      	mov	r1, r5
 8003e00:	4630      	mov	r0, r6
 8003e02:	f00c fa89 	bl	8010318 <_ZN8touchgfx5Gauge8setValueEi>
    gauge1.setNeedle(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_GAUGE_LARGE_NEEDLES_ROUGH_ID, 15, 96);
 8003e06:	2360      	movs	r3, #96	@ 0x60
 8003e08:	220f      	movs	r2, #15
 8003e0a:	4630      	mov	r0, r6
 8003e0c:	2101      	movs	r1, #1
 8003e0e:	f00c fa3f 	bl	8010290 <_ZN8touchgfx5Gauge9setNeedleEtss>
    gauge1.setMovingNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8003e12:	4630      	mov	r0, r6
 8003e14:	2101      	movs	r1, #1
 8003e16:	f00c f9dd 	bl	80101d4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    gauge1.setSteadyNeedleRenderingAlgorithm(touchgfx::TextureMapper::BILINEAR_INTERPOLATION);
 8003e1a:	4630      	mov	r0, r6
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	f00c f9dc 	bl	80101da <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>
    container1.add(gauge1);
 8003e22:	4631      	mov	r1, r6
 8003e24:	4640      	mov	r0, r8
 8003e26:	f009 fbe5 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8003e2a:	4648      	mov	r0, r9
 8003e2c:	4641      	mov	r1, r8
 8003e2e:	f009 fbe1 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8003e32:	4620      	mov	r0, r4
 8003e34:	b004      	add	sp, #16
 8003e36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e3a:	bf00      	nop
 8003e3c:	080251b8 	.word	0x080251b8
 8003e40:	08025b50 	.word	0x08025b50
 8003e44:	08025960 	.word	0x08025960

08003e48 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e48:	4770      	bx	lr
	...

08003e4c <_Z23getFont_verdana_10_4bppv>:
{
 8003e4c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e4e:	4d16      	ldr	r5, [pc, #88]	@ (8003ea8 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 8003e50:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8003e52:	682c      	ldr	r4, [r5, #0]
 8003e54:	f3bf 8f5b 	dmb	ish
 8003e58:	f014 0401 	ands.w	r4, r4, #1
 8003e5c:	d120      	bne.n	8003ea0 <_Z23getFont_verdana_10_4bppv+0x54>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	f01d fdc5 	bl	80219ee <__cxa_guard_acquire>
 8003e64:	b1e0      	cbz	r0, 8003ea0 <_Z23getFont_verdana_10_4bppv+0x54>
 8003e66:	233f      	movs	r3, #63	@ 0x3f
 8003e68:	2201      	movs	r2, #1
 8003e6a:	4910      	ldr	r1, [pc, #64]	@ (8003eac <_Z23getFont_verdana_10_4bppv+0x60>)
 8003e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e6e:	4b10      	ldr	r3, [pc, #64]	@ (8003eb0 <_Z23getFont_verdana_10_4bppv+0x64>)
 8003e70:	4810      	ldr	r0, [pc, #64]	@ (8003eb4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003e72:	9308      	str	r3, [sp, #32]
 8003e74:	4b10      	ldr	r3, [pc, #64]	@ (8003eb8 <_Z23getFont_verdana_10_4bppv+0x6c>)
 8003e76:	940a      	str	r4, [sp, #40]	@ 0x28
 8003e78:	9405      	str	r4, [sp, #20]
 8003e7a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003e7e:	2304      	movs	r3, #4
 8003e80:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003e84:	230a      	movs	r3, #10
 8003e86:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003e90:	f7ff feec 	bl	8003c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003e94:	4809      	ldr	r0, [pc, #36]	@ (8003ebc <_Z23getFont_verdana_10_4bppv+0x70>)
 8003e96:	f01e f93d 	bl	8022114 <atexit>
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f01d fdb3 	bl	8021a06 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 8003ea0:	4804      	ldr	r0, [pc, #16]	@ (8003eb4 <_Z23getFont_verdana_10_4bppv+0x68>)
 8003ea2:	b00f      	add	sp, #60	@ 0x3c
 8003ea4:	bd30      	pop	{r4, r5, pc}
 8003ea6:	bf00      	nop
 8003ea8:	2400b1bc 	.word	0x2400b1bc
 8003eac:	080266c4 	.word	0x080266c4
 8003eb0:	080266f4 	.word	0x080266f4
 8003eb4:	2400b1c0 	.word	0x2400b1c0
 8003eb8:	08026700 	.word	0x08026700
 8003ebc:	08003e49 	.word	0x08003e49

08003ec0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ec0:	4770      	bx	lr
	...

08003ec4 <_Z23getFont_verdana_20_4bppv>:
{
 8003ec4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003ec6:	4d16      	ldr	r5, [pc, #88]	@ (8003f20 <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8003ec8:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8003eca:	682c      	ldr	r4, [r5, #0]
 8003ecc:	f3bf 8f5b 	dmb	ish
 8003ed0:	f014 0401 	ands.w	r4, r4, #1
 8003ed4:	d120      	bne.n	8003f18 <_Z23getFont_verdana_20_4bppv+0x54>
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	f01d fd89 	bl	80219ee <__cxa_guard_acquire>
 8003edc:	b1e0      	cbz	r0, 8003f18 <_Z23getFont_verdana_20_4bppv+0x54>
 8003ede:	233f      	movs	r3, #63	@ 0x3f
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	4910      	ldr	r1, [pc, #64]	@ (8003f24 <_Z23getFont_verdana_20_4bppv+0x60>)
 8003ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ee6:	4b10      	ldr	r3, [pc, #64]	@ (8003f28 <_Z23getFont_verdana_20_4bppv+0x64>)
 8003ee8:	4810      	ldr	r0, [pc, #64]	@ (8003f2c <_Z23getFont_verdana_20_4bppv+0x68>)
 8003eea:	9308      	str	r3, [sp, #32]
 8003eec:	4b10      	ldr	r3, [pc, #64]	@ (8003f30 <_Z23getFont_verdana_20_4bppv+0x6c>)
 8003eee:	940a      	str	r4, [sp, #40]	@ 0x28
 8003ef0:	9405      	str	r4, [sp, #20]
 8003ef2:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003efc:	2314      	movs	r3, #20
 8003efe:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f08:	f7ff feb0 	bl	8003c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f0c:	4809      	ldr	r0, [pc, #36]	@ (8003f34 <_Z23getFont_verdana_20_4bppv+0x70>)
 8003f0e:	f01e f901 	bl	8022114 <atexit>
 8003f12:	4628      	mov	r0, r5
 8003f14:	f01d fd77 	bl	8021a06 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8003f18:	4804      	ldr	r0, [pc, #16]	@ (8003f2c <_Z23getFont_verdana_20_4bppv+0x68>)
 8003f1a:	b00f      	add	sp, #60	@ 0x3c
 8003f1c:	bd30      	pop	{r4, r5, pc}
 8003f1e:	bf00      	nop
 8003f20:	2400b1ec 	.word	0x2400b1ec
 8003f24:	080266d4 	.word	0x080266d4
 8003f28:	080266f8 	.word	0x080266f8
 8003f2c:	2400b1f0 	.word	0x2400b1f0
 8003f30:	08026704 	.word	0x08026704
 8003f34:	08003ec1 	.word	0x08003ec1

08003f38 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f38:	4770      	bx	lr
	...

08003f3c <_Z23getFont_verdana_40_4bppv>:
{
 8003f3c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f3e:	4d16      	ldr	r5, [pc, #88]	@ (8003f98 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8003f40:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8003f42:	682c      	ldr	r4, [r5, #0]
 8003f44:	f3bf 8f5b 	dmb	ish
 8003f48:	f014 0401 	ands.w	r4, r4, #1
 8003f4c:	d120      	bne.n	8003f90 <_Z23getFont_verdana_40_4bppv+0x54>
 8003f4e:	4628      	mov	r0, r5
 8003f50:	f01d fd4d 	bl	80219ee <__cxa_guard_acquire>
 8003f54:	b1e0      	cbz	r0, 8003f90 <_Z23getFont_verdana_40_4bppv+0x54>
 8003f56:	233f      	movs	r3, #63	@ 0x3f
 8003f58:	2201      	movs	r2, #1
 8003f5a:	4910      	ldr	r1, [pc, #64]	@ (8003f9c <_Z23getFont_verdana_40_4bppv+0x60>)
 8003f5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f5e:	4b10      	ldr	r3, [pc, #64]	@ (8003fa0 <_Z23getFont_verdana_40_4bppv+0x64>)
 8003f60:	4810      	ldr	r0, [pc, #64]	@ (8003fa4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f62:	9308      	str	r3, [sp, #32]
 8003f64:	4b10      	ldr	r3, [pc, #64]	@ (8003fa8 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8003f66:	940a      	str	r4, [sp, #40]	@ 0x28
 8003f68:	9405      	str	r4, [sp, #20]
 8003f6a:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8003f6e:	2304      	movs	r3, #4
 8003f70:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8003f74:	2328      	movs	r3, #40	@ 0x28
 8003f76:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8003f80:	f7ff fe74 	bl	8003c6c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8003f84:	4809      	ldr	r0, [pc, #36]	@ (8003fac <_Z23getFont_verdana_40_4bppv+0x70>)
 8003f86:	f01e f8c5 	bl	8022114 <atexit>
 8003f8a:	4628      	mov	r0, r5
 8003f8c:	f01d fd3b 	bl	8021a06 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8003f90:	4804      	ldr	r0, [pc, #16]	@ (8003fa4 <_Z23getFont_verdana_40_4bppv+0x68>)
 8003f92:	b00f      	add	sp, #60	@ 0x3c
 8003f94:	bd30      	pop	{r4, r5, pc}
 8003f96:	bf00      	nop
 8003f98:	2400b21c 	.word	0x2400b21c
 8003f9c:	080266e4 	.word	0x080266e4
 8003fa0:	080266fc 	.word	0x080266fc
 8003fa4:	2400b220 	.word	0x2400b220
 8003fa8:	08026708 	.word	0x08026708
 8003fac:	08003f39 	.word	0x08003f39

08003fb0 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	4770      	bx	lr

08003fb4 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8003fb4:	2000      	movs	r0, #0
 8003fb6:	4770      	bx	lr

08003fb8 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fb8:	b40e      	push	{r1, r2, r3}
 8003fba:	b503      	push	{r0, r1, lr}
 8003fbc:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fbe:	2100      	movs	r1, #0
{
 8003fc0:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8003fc4:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8003fc6:	f00f f905 	bl	80131d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003fca:	b002      	add	sp, #8
 8003fcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fd0:	b003      	add	sp, #12
 8003fd2:	4770      	bx	lr

08003fd4 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8003fd4:	b40c      	push	{r2, r3}
 8003fd6:	b507      	push	{r0, r1, r2, lr}
 8003fd8:	ab04      	add	r3, sp, #16
 8003fda:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8003fde:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8003fe0:	f00f f8f8 	bl	80131d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8003fe4:	b003      	add	sp, #12
 8003fe6:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fea:	b002      	add	sp, #8
 8003fec:	4770      	bx	lr
	...

08003ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8003ff0:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8003ff2:	b510      	push	{r4, lr}
 8003ff4:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8003ff6:	b373      	cbz	r3, 8004056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8003ff8:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8003ffa:	b92b      	cbnz	r3, 8004008 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8003ffc:	4b18      	ldr	r3, [pc, #96]	@ (8004060 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8003ffe:	21c5      	movs	r1, #197	@ 0xc5
 8004000:	4a18      	ldr	r2, [pc, #96]	@ (8004064 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004002:	4819      	ldr	r0, [pc, #100]	@ (8004068 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004004:	f01e f868 	bl	80220d8 <__assert_func>
            return buffer[pos];
 8004008:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800400a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800400e:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004010:	b30b      	cbz	r3, 8004056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004012:	f010 ff55 	bl	8014ec0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004016:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004018:	2b01      	cmp	r3, #1
 800401a:	d803      	bhi.n	8004024 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 800401c:	4b13      	ldr	r3, [pc, #76]	@ (800406c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800401e:	21cb      	movs	r1, #203	@ 0xcb
 8004020:	4a13      	ldr	r2, [pc, #76]	@ (8004070 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004022:	e7ee      	b.n	8004002 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004024:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004026:	f640 103f 	movw	r0, #2367	@ 0x93f
 800402a:	1c53      	adds	r3, r2, #1
 800402c:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800402e:	2b09      	cmp	r3, #9
 8004030:	4619      	mov	r1, r3
 8004032:	bf88      	it	hi
 8004034:	f1a3 010a 	subhi.w	r1, r3, #10
 8004038:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800403c:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800403e:	4281      	cmp	r1, r0
 8004040:	d109      	bne.n	8004056 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8004042:	2b0a      	cmp	r3, #10
 8004044:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004048:	bf28      	it	cs
 800404a:	2300      	movcs	r3, #0
            return buffer[pos];
 800404c:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800404e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8004052:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 8004054:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 8004056:	4620      	mov	r0, r4
}
 8004058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 800405c:	f010 be32 	b.w	8014cc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8004060:	080251e4 	.word	0x080251e4
 8004064:	080251ed 	.word	0x080251ed
 8004068:	08025298 	.word	0x08025298
 800406c:	080252f0 	.word	0x080252f0
 8004070:	080252fe 	.word	0x080252fe

08004074 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 8004074:	f010 bdef 	b.w	8014c56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08004078 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004078:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 800407a:	bb18      	cbnz	r0, 80040c4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 800407c:	4b12      	ldr	r3, [pc, #72]	@ (80040c8 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 800407e:	4813      	ldr	r0, [pc, #76]	@ (80040cc <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004080:	681c      	ldr	r4, [r3, #0]
 8004082:	4913      	ldr	r1, [pc, #76]	@ (80040d0 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 8004084:	b1b4      	cbz	r4, 80040b4 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 8004086:	6822      	ldr	r2, [r4, #0]
 8004088:	4422      	add	r2, r4
 800408a:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800408c:	6862      	ldr	r2, [r4, #4]
 800408e:	4422      	add	r2, r4
 8004090:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 8004092:	68a2      	ldr	r2, [r4, #8]
 8004094:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 8004096:	4b0f      	ldr	r3, [pc, #60]	@ (80040d4 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004098:	2200      	movs	r2, #0
 800409a:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800409c:	f000 f82a 	bl	80040f4 <_ZN17TypedTextDatabase8getFontsEv>
 80040a0:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80040a2:	f000 f825 	bl	80040f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80040a6:	4b0c      	ldr	r3, [pc, #48]	@ (80040d8 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80040a8:	601c      	str	r4, [r3, #0]
        fonts = f;
 80040aa:	4b0c      	ldr	r3, [pc, #48]	@ (80040dc <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80040ac:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80040ae:	4b0c      	ldr	r3, [pc, #48]	@ (80040e0 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80040b0:	8018      	strh	r0, [r3, #0]
    }
}
 80040b2:	e007      	b.n	80040c4 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 80040b6:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 80040b8:	4b0b      	ldr	r3, [pc, #44]	@ (80040e8 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 80040ba:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 80040bc:	4b0b      	ldr	r3, [pc, #44]	@ (80040ec <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 80040be:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 80040c0:	2c00      	cmp	r4, #0
 80040c2:	d1e8      	bne.n	8004096 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 80040c4:	bd38      	pop	{r3, r4, r5, pc}
 80040c6:	bf00      	nop
 80040c8:	2400b258 	.word	0x2400b258
 80040cc:	2400b250 	.word	0x2400b250
 80040d0:	2400b24c 	.word	0x2400b24c
 80040d4:	2400b254 	.word	0x2400b254
 80040d8:	240252cc 	.word	0x240252cc
 80040dc:	240252d4 	.word	0x240252d4
 80040e0:	240252d0 	.word	0x240252d0
 80040e4:	900a0c4c 	.word	0x900a0c4c
 80040e8:	900a0c48 	.word	0x900a0c48
 80040ec:	900a0c50 	.word	0x900a0c50

080040f0 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 80040f0:	2000      	movs	r0, #0
 80040f2:	4770      	bx	lr

080040f4 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80040f4:	4800      	ldr	r0, [pc, #0]	@ (80040f8 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80040f6:	4770      	bx	lr
 80040f8:	2400b25c 	.word	0x2400b25c

080040fc <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80040fc:	b510      	push	{r4, lr}
};
 80040fe:	4c05      	ldr	r4, [pc, #20]	@ (8004114 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004100:	f7ff fee0 	bl	8003ec4 <_Z23getFont_verdana_20_4bppv>
};
 8004104:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004106:	f7ff ff19 	bl	8003f3c <_Z23getFont_verdana_40_4bppv>
};
 800410a:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 800410c:	f7ff fe9e 	bl	8003e4c <_Z23getFont_verdana_10_4bppv>
};
 8004110:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004112:	bd10      	pop	{r4, pc}
 8004114:	2400b25c 	.word	0x2400b25c

08004118 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004118:	b510      	push	{r4, lr}
    pointArray = 0;
 800411a:	2400      	movs	r4, #0
 800411c:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800411e:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004120:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004122:	601c      	str	r4, [r3, #0]
}
 8004124:	bd10      	pop	{r4, pc}

08004126 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8004126:	4770      	bx	lr

08004128 <_ZN19FrontendApplicationD0Ev>:
 8004128:	b510      	push	{r4, lr}
 800412a:	4604      	mov	r4, r0
 800412c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004130:	f01d fc5b 	bl	80219ea <_ZdlPvj>
 8004134:	4620      	mov	r0, r4
 8004136:	bd10      	pop	{r4, pc}

08004138 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8004138:	b510      	push	{r4, lr}
 800413a:	4604      	mov	r4, r0
    {
        model.tick();
 800413c:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004140:	f000 f813 	bl	800416a <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8004144:	4620      	mov	r0, r4
    }
 8004146:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 800414a:	f00e b947 	b.w	80123dc <_ZN8touchgfx11Application15handleTickEventEv>
	...

08004150 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004150:	b510      	push	{r4, lr}
 8004152:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004154:	f7ff fd18 	bl	8003b88 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8004158:	4b01      	ldr	r3, [pc, #4]	@ (8004160 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800415a:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 800415c:	6023      	str	r3, [r4, #0]
}
 800415e:	bd10      	pop	{r4, pc}
 8004160:	080253d8 	.word	0x080253d8

08004164 <_ZN5ModelC1Ev>:
//}
extern volatile int RPM_;

//#endif

Model::Model() : modelListener(0)
 8004164:	2200      	movs	r2, #0
 8004166:	6002      	str	r2, [r0, #0]
{

}
 8004168:	4770      	bx	lr

0800416a <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800416a:	4770      	bx	lr

0800416c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {}
 800416c:	4770      	bx	lr

0800416e <_ZThn4_N16Screen1PresenterD1Ev>:
 800416e:	3804      	subs	r0, #4
 8004170:	4770      	bx	lr

08004172 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
 8004172:	4770      	bx	lr

08004174 <_ZN16Screen1PresenterD0Ev>:
 8004174:	b510      	push	{r4, lr}
 8004176:	4604      	mov	r4, r0
 8004178:	2110      	movs	r1, #16
 800417a:	f01d fc36 	bl	80219ea <_ZdlPvj>
 800417e:	4620      	mov	r0, r4
 8004180:	bd10      	pop	{r4, pc}

08004182 <_ZThn4_N16Screen1PresenterD0Ev>:
 8004182:	f1a0 0004 	sub.w	r0, r0, #4
 8004186:	e7f5      	b.n	8004174 <_ZN16Screen1PresenterD0Ev>

08004188 <_ZN16Screen1PresenterC1ER11Screen1View>:
    ModelListener() : model(0) {}
 8004188:	2200      	movs	r2, #0
    : view(v)
 800418a:	60c1      	str	r1, [r0, #12]
 800418c:	6082      	str	r2, [r0, #8]
 800418e:	4a02      	ldr	r2, [pc, #8]	@ (8004198 <_ZN16Screen1PresenterC1ER11Screen1View+0x10>)
 8004190:	6002      	str	r2, [r0, #0]
 8004192:	3218      	adds	r2, #24
 8004194:	6042      	str	r2, [r0, #4]
}
 8004196:	4770      	bx	lr
 8004198:	0802542c 	.word	0x0802542c

0800419c <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
 800419c:	4770      	bx	lr
	...

080041a0 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <_ZN11Screen1ViewD1Ev+0x10>)
 80041a2:	b510      	push	{r4, lr}
 80041a4:	4604      	mov	r4, r0
 80041a6:	6003      	str	r3, [r0, #0]
 80041a8:	f7ff fd95 	bl	8003cd6 <_ZN15Screen1ViewBaseD1Ev>
 80041ac:	4620      	mov	r0, r4
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	08025454 	.word	0x08025454

080041b4 <_ZN11Screen1ViewD0Ev>:
 80041b4:	b510      	push	{r4, lr}
 80041b6:	4604      	mov	r4, r0
 80041b8:	f7ff fff2 	bl	80041a0 <_ZN11Screen1ViewD1Ev>
 80041bc:	f44f 710f 	mov.w	r1, #572	@ 0x23c
 80041c0:	4620      	mov	r0, r4
 80041c2:	f01d fc12 	bl	80219ea <_ZdlPvj>
 80041c6:	4620      	mov	r0, r4
 80041c8:	bd10      	pop	{r4, pc}
	...

080041cc <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View()
 80041cc:	b510      	push	{r4, lr}
 80041ce:	4604      	mov	r4, r0
 80041d0:	f7ff fda6 	bl	8003d20 <_ZN15Screen1ViewBaseC1Ev>
 80041d4:	4b03      	ldr	r3, [pc, #12]	@ (80041e4 <_ZN11Screen1ViewC1Ev+0x18>)
}
 80041d6:	4620      	mov	r0, r4
Screen1View::Screen1View()
 80041d8:	6023      	str	r3, [r4, #0]
	RPM = 1;
 80041da:	2301      	movs	r3, #1
 80041dc:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
}
 80041e0:	bd10      	pop	{r4, pc}
 80041e2:	bf00      	nop
 80041e4:	08025454 	.word	0x08025454

080041e8 <_ZN11Screen1View11setupScreenEv>:
    Screen1ViewBase::setupScreen();
 80041e8:	f7ff bd76 	b.w	8003cd8 <_ZN15Screen1ViewBase11setupScreenEv>

080041ec <_ZN11Screen1View15handleTickEventEv>:
 //   gauge1.setValue(rpm);   // Set the gauge value to the new RPM
    //gauge1.invalidate();    // Refresh the gauge display
//}

void Screen1View::handleTickEvent()
{
 80041ec:	b538      	push	{r3, r4, r5, lr}
	if(gauge1.getValue() == 0 || gauge1.getValue() == 100)
 80041ee:	f100 0598 	add.w	r5, r0, #152	@ 0x98
{
 80041f2:	4604      	mov	r4, r0
	if(gauge1.getValue() == 0 || gauge1.getValue() == 100)
 80041f4:	4628      	mov	r0, r5
 80041f6:	f009 f879 	bl	800d2ec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 80041fa:	b980      	cbnz	r0, 800421e <_ZN11Screen1View15handleTickEventEv+0x32>
	{
		RPM *= -1;
 80041fc:	f8d4 3238 	ldr.w	r3, [r4, #568]	@ 0x238
 8004200:	425b      	negs	r3, r3
 8004202:	f8c4 3238 	str.w	r3, [r4, #568]	@ 0x238
	}
	gauge1.updateValue(gauge1.getValue() + RPM, 0);
 8004206:	4628      	mov	r0, r5
 8004208:	f009 f870 	bl	800d2ec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 800420c:	f8d4 1238 	ldr.w	r1, [r4, #568]	@ 0x238
 8004210:	2200      	movs	r2, #0
 8004212:	4401      	add	r1, r0
 8004214:	4628      	mov	r0, r5
}
 8004216:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	gauge1.updateValue(gauge1.getValue() + RPM, 0);
 800421a:	f009 b878 	b.w	800d30e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>
	if(gauge1.getValue() == 0 || gauge1.getValue() == 100)
 800421e:	4628      	mov	r0, r5
 8004220:	f009 f864 	bl	800d2ec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 8004224:	2864      	cmp	r0, #100	@ 0x64
 8004226:	d1ee      	bne.n	8004206 <_ZN11Screen1View15handleTickEventEv+0x1a>
 8004228:	e7e8      	b.n	80041fc <_ZN11Screen1View15handleTickEventEv+0x10>

0800422a <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 800422a:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800422c:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8004230:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004232:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8004234:	2302      	movs	r3, #2
 8004236:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004238:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800423c:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004240:	4770      	bx	lr

08004242 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004242:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8004246:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 8004248:	bf04      	itt	eq
 800424a:	2300      	moveq	r3, #0
 800424c:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004250:	2000      	movs	r0, #0
 8004252:	4770      	bx	lr

08004254 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 8004254:	2000      	movs	r0, #0
 8004256:	4770      	bx	lr

08004258 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004258:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800425a:	6904      	ldr	r4, [r0, #16]
 800425c:	8900      	ldrh	r0, [r0, #8]
 800425e:	46a4      	mov	ip, r4
}
 8004260:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004264:	4760      	bx	ip

08004266 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8004266:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004268:	68c4      	ldr	r4, [r0, #12]
 800426a:	8900      	ldrh	r0, [r0, #8]
 800426c:	46a4      	mov	ip, r4
}
 800426e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004272:	4760      	bx	ip

08004274 <FT6X06_GestureConfig>:
{
 8004274:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8004276:	f100 0518 	add.w	r5, r0, #24
{
 800427a:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 800427c:	7809      	ldrb	r1, [r1, #0]
 800427e:	4628      	mov	r0, r5
 8004280:	f000 f912 	bl	80044a8 <ft6x06_radian_value>
 8004284:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004286:	7931      	ldrb	r1, [r6, #4]
 8004288:	4628      	mov	r0, r5
 800428a:	f000 f919 	bl	80044c0 <ft6x06_offset_left_right>
 800428e:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8004290:	7a31      	ldrb	r1, [r6, #8]
 8004292:	4628      	mov	r0, r5
 8004294:	f000 f920 	bl	80044d8 <ft6x06_offset_up_down>
 8004298:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 800429a:	7b31      	ldrb	r1, [r6, #12]
 800429c:	4628      	mov	r0, r5
 800429e:	f000 f927 	bl	80044f0 <ft6x06_disatnce_left_right>
 80042a2:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80042a4:	7c31      	ldrb	r1, [r6, #16]
 80042a6:	4628      	mov	r0, r5
 80042a8:	f000 f92e 	bl	8004508 <ft6x06_distance_up_down>
 80042ac:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80042ae:	7d31      	ldrb	r1, [r6, #20]
 80042b0:	4628      	mov	r0, r5
 80042b2:	f000 f935 	bl	8004520 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80042b6:	42c4      	cmn	r4, r0
}
 80042b8:	bf14      	ite	ne
 80042ba:	f04f 30ff 	movne.w	r0, #4294967295
 80042be:	2000      	moveq	r0, #0
 80042c0:	bd70      	pop	{r4, r5, r6, pc}

080042c2 <FT6X06_ReadID>:
{
 80042c2:	b513      	push	{r0, r1, r4, lr}
 80042c4:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 80042c6:	3018      	adds	r0, #24
 80042c8:	f10d 0107 	add.w	r1, sp, #7
 80042cc:	f000 f940 	bl	8004550 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 80042d0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80042d4:	6023      	str	r3, [r4, #0]
}
 80042d6:	b002      	add	sp, #8
 80042d8:	bd10      	pop	{r4, pc}

080042da <FT6X06_GetState>:
{
 80042da:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80042dc:	f100 0518 	add.w	r5, r0, #24
{
 80042e0:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80042e2:	a901      	add	r1, sp, #4
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f8d2 	bl	800448e <ft6x06_td_status>
 80042ea:	bb08      	cbnz	r0, 8004330 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 80042ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	bf98      	it	ls
 80042f4:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80042f6:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80042f8:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80042fa:	2103      	movs	r1, #3
 80042fc:	4628      	mov	r0, r5
 80042fe:	eb0d 0203 	add.w	r2, sp, r3
 8004302:	f000 f8b1 	bl	8004468 <ft6x06_read_reg>
 8004306:	b9b0      	cbnz	r0, 8004336 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004308:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800430c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004316:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004318:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800431c:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800431e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004328:	4313      	orrs	r3, r2
 800432a:	60a3      	str	r3, [r4, #8]
}
 800432c:	b003      	add	sp, #12
 800432e:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004330:	f04f 30ff 	mov.w	r0, #4294967295
 8004334:	e7df      	b.n	80042f6 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004336:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800433a:	e7f7      	b.n	800432c <FT6X06_GetState+0x52>

0800433c <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 800433c:	3018      	adds	r0, #24
 800433e:	f000 b8a1 	b.w	8004484 <ft6x06_gest_id>

08004342 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004342:	2101      	movs	r1, #1
 8004344:	3018      	adds	r0, #24
 8004346:	f000 b8f7 	b.w	8004538 <ft6x06_g_mode>

0800434a <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 800434a:	2100      	movs	r1, #0
 800434c:	3018      	adds	r0, #24
 800434e:	f000 b8f3 	b.w	8004538 <ft6x06_g_mode>

08004352 <FT6X06_Init>:
{
 8004352:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004354:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004358:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 800435a:	b96b      	cbnz	r3, 8004378 <FT6X06_Init+0x26>
    pObj->IO.Init();
 800435c:	6803      	ldr	r3, [r0, #0]
 800435e:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004360:	4620      	mov	r0, r4
 8004362:	f7ff fff2 	bl	800434a <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004366:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004368:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 800436c:	bf18      	it	ne
 800436e:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004370:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004374:	4240      	negs	r0, r0
}
 8004376:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8004378:	2000      	movs	r0, #0
  return ret;
 800437a:	e7fc      	b.n	8004376 <FT6X06_Init+0x24>

0800437c <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 800437c:	2000      	movs	r0, #0
 800437e:	4770      	bx	lr

08004380 <FT6X06_GetMultiTouchState>:
{
 8004380:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004382:	f100 0518 	add.w	r5, r0, #24
{
 8004386:	b085      	sub	sp, #20
 8004388:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800438a:	4628      	mov	r0, r5
 800438c:	a901      	add	r1, sp, #4
 800438e:	f000 f87e 	bl	800448e <ft6x06_td_status>
 8004392:	2800      	cmp	r0, #0
 8004394:	d145      	bne.n	8004422 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004396:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800439a:	2b02      	cmp	r3, #2
 800439c:	bf98      	it	ls
 800439e:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80043a0:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80043a2:	230c      	movs	r3, #12
 80043a4:	aa01      	add	r2, sp, #4
 80043a6:	2103      	movs	r1, #3
 80043a8:	4628      	mov	r0, r5
 80043aa:	f000 f85d 	bl	8004468 <ft6x06_read_reg>
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d13a      	bne.n	8004428 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80043b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80043b6:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80043ba:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80043bc:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80043be:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 80043c2:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80043c4:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80043c6:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043ca:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80043ce:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80043d0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80043da:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043dc:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80043e0:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 80043e2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80043e6:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 80043e8:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80043ec:	091b      	lsrs	r3, r3, #4
 80043ee:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043f0:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80043f2:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 80043f8:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 80043fa:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 80043fc:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004400:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004402:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800440c:	430b      	orrs	r3, r1
 800440e:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004410:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004414:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004416:	f89d 300f 	ldrb.w	r3, [sp, #15]
 800441a:	091b      	lsrs	r3, r3, #4
 800441c:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 800441e:	b005      	add	sp, #20
 8004420:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004422:	f04f 30ff 	mov.w	r0, #4294967295
 8004426:	e7bb      	b.n	80043a0 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 800442c:	e7f7      	b.n	800441e <FT6X06_GetMultiTouchState+0x9e>
	...

08004430 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004430:	b190      	cbz	r0, 8004458 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004432:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004434:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004436:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004438:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 800443a:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 800443c:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800443e:	68ca      	ldr	r2, [r1, #12]
 8004440:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004442:	690a      	ldr	r2, [r1, #16]
 8004444:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004446:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004448:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 800444a:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 800444c:	4a04      	ldr	r2, [pc, #16]	@ (8004460 <FT6X06_RegisterBusIO+0x30>)
 800444e:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004450:	4a04      	ldr	r2, [pc, #16]	@ (8004464 <FT6X06_RegisterBusIO+0x34>)
 8004452:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004454:	b103      	cbz	r3, 8004458 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004456:	4718      	bx	r3
}
 8004458:	f04f 30ff 	mov.w	r0, #4294967295
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	08004259 	.word	0x08004259
 8004464:	08004267 	.word	0x08004267

08004468 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004468:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800446a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 800446e:	46a4      	mov	ip, r4
}
 8004470:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004474:	4760      	bx	ip

08004476 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004476:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004478:	6804      	ldr	r4, [r0, #0]
 800447a:	6880      	ldr	r0, [r0, #8]
 800447c:	46a4      	mov	ip, r4
}
 800447e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004482:	4760      	bx	ip

08004484 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004484:	2301      	movs	r3, #1
{
 8004486:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004488:	4619      	mov	r1, r3
 800448a:	f7ff bfed 	b.w	8004468 <ft6x06_read_reg>

0800448e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 800448e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004490:	460a      	mov	r2, r1
{
 8004492:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004494:	2301      	movs	r3, #1
 8004496:	2102      	movs	r1, #2
 8004498:	f7ff ffe6 	bl	8004468 <ft6x06_read_reg>
  
  if(ret == 0)
 800449c:	b918      	cbnz	r0, 80044a6 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 800449e:	7823      	ldrb	r3, [r4, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 80044a6:	bd10      	pop	{r4, pc}

080044a8 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044a8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80044aa:	2301      	movs	r3, #1
{
 80044ac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80044b0:	f10d 0207 	add.w	r2, sp, #7
 80044b4:	2191      	movs	r1, #145	@ 0x91
 80044b6:	f7ff ffde 	bl	8004476 <ft6x06_write_reg>
}
 80044ba:	b003      	add	sp, #12
 80044bc:	f85d fb04 	ldr.w	pc, [sp], #4

080044c0 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044c0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80044c2:	2301      	movs	r3, #1
{
 80044c4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80044c8:	f10d 0207 	add.w	r2, sp, #7
 80044cc:	2192      	movs	r1, #146	@ 0x92
 80044ce:	f7ff ffd2 	bl	8004476 <ft6x06_write_reg>
}
 80044d2:	b003      	add	sp, #12
 80044d4:	f85d fb04 	ldr.w	pc, [sp], #4

080044d8 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044d8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80044da:	2301      	movs	r3, #1
{
 80044dc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80044e0:	f10d 0207 	add.w	r2, sp, #7
 80044e4:	2193      	movs	r1, #147	@ 0x93
 80044e6:	f7ff ffc6 	bl	8004476 <ft6x06_write_reg>
}
 80044ea:	b003      	add	sp, #12
 80044ec:	f85d fb04 	ldr.w	pc, [sp], #4

080044f0 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80044f0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80044f2:	2301      	movs	r3, #1
{
 80044f4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 80044f8:	f10d 0207 	add.w	r2, sp, #7
 80044fc:	2194      	movs	r1, #148	@ 0x94
 80044fe:	f7ff ffba 	bl	8004476 <ft6x06_write_reg>
}
 8004502:	b003      	add	sp, #12
 8004504:	f85d fb04 	ldr.w	pc, [sp], #4

08004508 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004508:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 800450a:	2301      	movs	r3, #1
{
 800450c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004510:	f10d 0207 	add.w	r2, sp, #7
 8004514:	2195      	movs	r1, #149	@ 0x95
 8004516:	f7ff ffae 	bl	8004476 <ft6x06_write_reg>
}
 800451a:	b003      	add	sp, #12
 800451c:	f85d fb04 	ldr.w	pc, [sp], #4

08004520 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004520:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004522:	2301      	movs	r3, #1
{
 8004524:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004528:	f10d 0207 	add.w	r2, sp, #7
 800452c:	2196      	movs	r1, #150	@ 0x96
 800452e:	f7ff ffa2 	bl	8004476 <ft6x06_write_reg>
}
 8004532:	b003      	add	sp, #12
 8004534:	f85d fb04 	ldr.w	pc, [sp], #4

08004538 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004538:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 800453a:	2301      	movs	r3, #1
{
 800453c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004540:	f10d 0207 	add.w	r2, sp, #7
 8004544:	21a4      	movs	r1, #164	@ 0xa4
 8004546:	f7ff ff96 	bl	8004476 <ft6x06_write_reg>
}
 800454a:	b003      	add	sp, #12
 800454c:	f85d fb04 	ldr.w	pc, [sp], #4

08004550 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004550:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004552:	2301      	movs	r3, #1
 8004554:	21a8      	movs	r1, #168	@ 0xa8
 8004556:	f7ff bf87 	b.w	8004468 <ft6x06_read_reg>
	...

0800455c <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 800455c:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 800455e:	2201      	movs	r2, #1
 8004560:	4b07      	ldr	r3, [pc, #28]	@ (8004580 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004562:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004566:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004568:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800456a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 800456c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800456e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004572:	f006 f9f5 	bl	800a960 <HAL_SDRAM_SendCommand>
 8004576:	3800      	subs	r0, #0
 8004578:	bf18      	it	ne
 800457a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800457c:	4240      	negs	r0, r0
 800457e:	bd08      	pop	{r3, pc}
 8004580:	2400b268 	.word	0x2400b268

08004584 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004584:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004586:	2202      	movs	r2, #2
 8004588:	4b08      	ldr	r3, [pc, #32]	@ (80045ac <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 800458a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 800458e:	2101      	movs	r1, #1
 8004590:	2200      	movs	r2, #0
 8004592:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004596:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800459a:	4619      	mov	r1, r3
 800459c:	f006 f9e0 	bl	800a960 <HAL_SDRAM_SendCommand>
 80045a0:	3800      	subs	r0, #0
 80045a2:	bf18      	it	ne
 80045a4:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80045a6:	4240      	negs	r0, r0
 80045a8:	bd08      	pop	{r3, pc}
 80045aa:	bf00      	nop
 80045ac:	2400b268 	.word	0x2400b268

080045b0 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 80045b0:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80045b2:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 80045b6:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80045b8:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 80045ba:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80045bc:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 80045be:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 80045c0:	6991      	ldr	r1, [r2, #24]
 80045c2:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80045c4:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 80045c6:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 80045c8:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80045ca:	4907      	ldr	r1, [pc, #28]	@ (80045e8 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 80045cc:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 80045ce:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 80045d0:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 80045d2:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80045d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80045da:	f006 f9c1 	bl	800a960 <HAL_SDRAM_SendCommand>
 80045de:	3800      	subs	r0, #0
 80045e0:	bf18      	it	ne
 80045e2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80045e4:	4240      	negs	r0, r0
 80045e6:	bd10      	pop	{r4, pc}
 80045e8:	2400b268 	.word	0x2400b268

080045ec <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 80045ec:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 80045ee:	4b08      	ldr	r3, [pc, #32]	@ (8004610 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 80045f0:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 80045f4:	2108      	movs	r1, #8
 80045f6:	2200      	movs	r2, #0
 80045f8:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80045fc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004600:	4619      	mov	r1, r3
 8004602:	f006 f9ad 	bl	800a960 <HAL_SDRAM_SendCommand>
 8004606:	3800      	subs	r0, #0
 8004608:	bf18      	it	ne
 800460a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800460c:	4240      	negs	r0, r0
 800460e:	bd08      	pop	{r3, pc}
 8004610:	2400b268 	.word	0x2400b268

08004614 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004614:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004616:	f006 f9c2 	bl	800a99e <HAL_SDRAM_ProgramRefreshRate>
 800461a:	3800      	subs	r0, #0
 800461c:	bf18      	it	ne
 800461e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004620:	4240      	negs	r0, r0
 8004622:	bd08      	pop	{r3, pc}

08004624 <IS42S32800J_Init>:
{
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004628:	6809      	ldr	r1, [r1, #0]
{
 800462a:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 800462c:	f7ff ff96 	bl	800455c <IS42S32800J_ClockEnable>
 8004630:	b110      	cbz	r0, 8004638 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004632:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004636:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004638:	f001 fc7c 	bl	8005f34 <HAL_GetTick>
 800463c:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 800463e:	f001 fc79 	bl	8005f34 <HAL_GetTick>
 8004642:	4286      	cmp	r6, r0
 8004644:	d0fb      	beq.n	800463e <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004646:	6821      	ldr	r1, [r4, #0]
 8004648:	4628      	mov	r0, r5
 800464a:	f7ff ff9b 	bl	8004584 <IS42S32800J_Precharge>
 800464e:	2800      	cmp	r0, #0
 8004650:	d1ef      	bne.n	8004632 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004652:	4628      	mov	r0, r5
 8004654:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004658:	f7ff ffc8 	bl	80045ec <IS42S32800J_RefreshMode>
 800465c:	2800      	cmp	r0, #0
 800465e:	d1e8      	bne.n	8004632 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004660:	4621      	mov	r1, r4
 8004662:	4628      	mov	r0, r5
 8004664:	f7ff ffa4 	bl	80045b0 <IS42S32800J_ModeRegConfig>
 8004668:	2800      	cmp	r0, #0
 800466a:	d1e2      	bne.n	8004632 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 800466c:	68a1      	ldr	r1, [r4, #8]
 800466e:	4628      	mov	r0, r5
 8004670:	f7ff ffd0 	bl	8004614 <IS42S32800J_RefreshRate>
 8004674:	3800      	subs	r0, #0
 8004676:	bf18      	it	ne
 8004678:	2001      	movne	r0, #1
 800467a:	4240      	negs	r0, r0
  return ret;
 800467c:	e7db      	b.n	8004636 <IS42S32800J_Init+0x12>

0800467e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800467e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004686:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 800468a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 800468e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004692:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004696:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800469a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 800469c:	2000      	movs	r0, #0
 800469e:	4770      	bx	lr

080046a0 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80046a0:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 80046a6:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046a8:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80046ac:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80046ae:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80046b0:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 80046b2:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 80046b4:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80046b6:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 80046b8:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046ba:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80046bc:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 80046be:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 80046c0:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 80046c2:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046c4:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80046c6:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80046ca:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 80046ce:	2310      	movs	r3, #16
 80046d0:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 80046d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80046d6:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 80046d8:	f240 1301 	movw	r3, #257	@ 0x101
 80046dc:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046de:	f241 3388 	movw	r3, #5000	@ 0x1388
 80046e2:	f004 fd44 	bl	800916e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 80046e6:	2800      	cmp	r0, #0

}
 80046e8:	bf14      	ite	ne
 80046ea:	f06f 0004 	mvnne.w	r0, #4
 80046ee:	2000      	moveq	r0, #0
 80046f0:	b015      	add	sp, #84	@ 0x54
 80046f2:	f85d fb04 	ldr.w	pc, [sp], #4

080046f6 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046f6:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80046f8:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80046fc:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80046fe:	bf08      	it	eq
 8004700:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004704:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004706:	bf18      	it	ne
 8004708:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 800470c:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800470e:	a906      	add	r1, sp, #24
{
 8004710:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004712:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004714:	2306      	movs	r3, #6
 8004716:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004718:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800471a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 800471e:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004720:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004722:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004724:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004728:	f004 fc20 	bl	8008f6c <HAL_QSPI_Command>
 800472c:	bb20      	cbnz	r0, 8004778 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800472e:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004732:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004734:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004736:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 800473a:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800473c:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 800473e:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004742:	f04f 0310 	mov.w	r3, #16
 8004746:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 800474a:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800474e:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004750:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004754:	bf14      	ite	ne
 8004756:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 800475a:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800475e:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004760:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004762:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004766:	f004 fd02 	bl	800916e <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 800476a:	2800      	cmp	r0, #0
 800476c:	bf14      	ite	ne
 800476e:	f06f 0004 	mvnne.w	r0, #4
 8004772:	2000      	moveq	r0, #0
}
 8004774:	b015      	add	sp, #84	@ 0x54
 8004776:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004778:	f06f 0001 	mvn.w	r0, #1
 800477c:	e7fa      	b.n	8004774 <MT25TL01G_WriteEnable+0x7e>

0800477e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800477e:	2903      	cmp	r1, #3
{
 8004780:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004782:	bf08      	it	eq
 8004784:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004788:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800478a:	bf18      	it	ne
 800478c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004790:	4604      	mov	r4, r0
 8004792:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004794:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004796:	23b7      	movs	r3, #183	@ 0xb7
 8004798:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800479a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800479c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80047a0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80047a2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047a4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047a6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 80047aa:	f7ff ffa4 	bl	80046f6 <MT25TL01G_WriteEnable>
 80047ae:	b118      	cbz	r0, 80047b8 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 80047b0:	f06f 0001 	mvn.w	r0, #1
}
 80047b4:	b00f      	add	sp, #60	@ 0x3c
 80047b6:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047bc:	4669      	mov	r1, sp
 80047be:	4620      	mov	r0, r4
 80047c0:	f004 fbd4 	bl	8008f6c <HAL_QSPI_Command>
 80047c4:	2800      	cmp	r0, #0
 80047c6:	d1f3      	bne.n	80047b0 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 80047c8:	4629      	mov	r1, r5
 80047ca:	4620      	mov	r0, r4
 80047cc:	f7ff ff68 	bl	80046a0 <MT25TL01G_AutoPollingMemReady>
 80047d0:	2800      	cmp	r0, #0
 80047d2:	d0ef      	beq.n	80047b4 <MT25TL01G_Enter4BytesAddressMode+0x36>
 80047d4:	e7ec      	b.n	80047b0 <MT25TL01G_Enter4BytesAddressMode+0x32>

080047d6 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80047d6:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 80047dc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047de:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80047e2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80047e4:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047e6:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80047e8:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80047ea:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80047ec:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80047f0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80047f2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80047f4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80047f6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80047fa:	f004 fbb7 	bl	8008f6c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80047fe:	2800      	cmp	r0, #0
}
 8004800:	bf14      	ite	ne
 8004802:	f06f 0001 	mvnne.w	r0, #1
 8004806:	2000      	moveq	r0, #0
 8004808:	b00f      	add	sp, #60	@ 0x3c
 800480a:	f85d fb04 	ldr.w	pc, [sp], #4

0800480e <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 800480e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004810:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004814:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004816:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800481a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 800481c:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800481e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004820:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004822:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004824:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004828:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800482a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800482c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800482e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004832:	f004 fb9b 	bl	8008f6c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004836:	2800      	cmp	r0, #0
}
 8004838:	bf14      	ite	ne
 800483a:	f06f 0001 	mvnne.w	r0, #1
 800483e:	2000      	moveq	r0, #0
 8004840:	b00f      	add	sp, #60	@ 0x3c
 8004842:	f85d fb04 	ldr.w	pc, [sp], #4

08004846 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004846:	b500      	push	{lr}
 8004848:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800484a:	2903      	cmp	r1, #3
 800484c:	d80e      	bhi.n	800486c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 800484e:	e8df f001 	tbb	[pc, r1]
 8004852:	2902      	.short	0x2902
 8004854:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004856:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800485a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 800485c:	230e      	movs	r3, #14
 800485e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004860:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004864:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004866:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800486a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800486c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800486e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004872:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004876:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004878:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800487a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800487e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004880:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004882:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004886:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004888:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800488a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800488c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004890:	f004 fcbe 	bl	8009210 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004894:	2800      	cmp	r0, #0
}
 8004896:	bf14      	ite	ne
 8004898:	f06f 0005 	mvnne.w	r0, #5
 800489c:	2000      	moveq	r0, #0
 800489e:	b011      	add	sp, #68	@ 0x44
 80048a0:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048a8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80048aa:	233d      	movs	r3, #61	@ 0x3d
 80048ac:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80048ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048b2:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80048b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80048b8:	e7d7      	b.n	800486a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048be:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80048c0:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80048c2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80048c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80048c8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80048ca:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80048ce:	e7cc      	b.n	800486a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80048d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80048d4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80048d6:	23ed      	movs	r3, #237	@ 0xed
 80048d8:	e7f3      	b.n	80048c2 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

080048da <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 80048da:	b500      	push	{lr}
 80048dc:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 80048de:	2903      	cmp	r1, #3
 80048e0:	d80e      	bhi.n	8004900 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 80048e2:	e8df f001 	tbb	[pc, r1]
 80048e6:	2502      	.short	0x2502
 80048e8:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80048ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80048ee:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80048f0:	230c      	movs	r3, #12
 80048f2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80048f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048f8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80048fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80048fe:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004900:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004902:	466a      	mov	r2, sp
 8004904:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004906:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004908:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800490c:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800490e:	2300      	movs	r3, #0
 8004910:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004912:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004914:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004918:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 800491c:	f004 fc78 	bl	8009210 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004920:	2800      	cmp	r0, #0
}
 8004922:	bf14      	ite	ne
 8004924:	f06f 0005 	mvnne.w	r0, #5
 8004928:	2000      	moveq	r0, #0
 800492a:	b011      	add	sp, #68	@ 0x44
 800492c:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004930:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004934:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004936:	23bc      	movs	r3, #188	@ 0xbc
 8004938:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800493a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800493e:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004940:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004944:	e7db      	b.n	80048fe <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004946:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800494a:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800494c:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800494e:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004950:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004954:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004956:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800495a:	e7d0      	b.n	80048fe <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800495c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004960:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004962:	23eb      	movs	r3, #235	@ 0xeb
 8004964:	e7f3      	b.n	800494e <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004966 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004966:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004968:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800496c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800496e:	bf18      	it	ne
 8004970:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004974:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004976:	bf08      	it	eq
 8004978:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800497c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800497e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004980:	2366      	movs	r3, #102	@ 0x66
 8004982:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004984:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004986:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800498a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800498c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800498e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004990:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004994:	f004 faea 	bl	8008f6c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004998:	2800      	cmp	r0, #0
}
 800499a:	bf14      	ite	ne
 800499c:	f06f 0001 	mvnne.w	r0, #1
 80049a0:	2000      	moveq	r0, #0
 80049a2:	b00f      	add	sp, #60	@ 0x3c
 80049a4:	f85d fb04 	ldr.w	pc, [sp], #4

080049a8 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049a8:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049aa:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80049ae:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049b0:	bf18      	it	ne
 80049b2:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80049b6:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049b8:	bf08      	it	eq
 80049ba:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049be:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80049c0:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 80049c2:	2399      	movs	r3, #153	@ 0x99
 80049c4:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80049c6:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80049c8:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80049cc:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80049ce:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80049d0:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80049d2:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80049d6:	f004 fac9 	bl	8008f6c <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80049da:	2800      	cmp	r0, #0
}
 80049dc:	bf14      	ite	ne
 80049de:	f06f 0001 	mvnne.w	r0, #1
 80049e2:	2000      	moveq	r0, #0
 80049e4:	b00f      	add	sp, #60	@ 0x3c
 80049e6:	f85d fb04 	ldr.w	pc, [sp], #4

080049ea <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80049ea:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049ec:	6884      	ldr	r4, [r0, #8]
 80049ee:	8800      	ldrh	r0, [r0, #0]
 80049f0:	46a4      	mov	ip, r4
}
 80049f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049f6:	4760      	bx	ip

080049f8 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80049f8:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049fa:	6844      	ldr	r4, [r0, #4]
 80049fc:	8800      	ldrh	r0, [r0, #0]
 80049fe:	46a4      	mov	ip, r4
}
 8004a00:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004a04:	4760      	bx	ip

08004a06 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004a06:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004a08:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004a0a:	4604      	mov	r4, r0
 8004a0c:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004a0e:	4798      	blx	r3
 8004a10:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004a12:	68e3      	ldr	r3, [r4, #12]
 8004a14:	4798      	blx	r3
 8004a16:	1b83      	subs	r3, r0, r6
 8004a18:	42ab      	cmp	r3, r5
 8004a1a:	d3fa      	bcc.n	8004a12 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004a1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004a20 <OTM8009A_Init>:
{
 8004a20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a24:	2300      	movs	r3, #0
 8004a26:	f100 0510 	add.w	r5, r0, #16
{
 8004a2a:	4607      	mov	r7, r0
 8004a2c:	460e      	mov	r6, r1
 8004a2e:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a30:	4619      	mov	r1, r3
 8004a32:	4ade      	ldr	r2, [pc, #888]	@ (8004dac <OTM8009A_Init+0x38c>)
 8004a34:	4628      	mov	r0, r5
 8004a36:	f000 fb99 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004a3a:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004a3c:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004a3e:	4adc      	ldr	r2, [pc, #880]	@ (8004db0 <OTM8009A_Init+0x390>)
 8004a40:	21ff      	movs	r1, #255	@ 0xff
 8004a42:	4628      	mov	r0, r5
 8004a44:	f000 fb92 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a48:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004a4a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a4c:	4ad9      	ldr	r2, [pc, #868]	@ (8004db4 <OTM8009A_Init+0x394>)
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fb8b 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a56:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a58:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a5a:	4ad7      	ldr	r2, [pc, #860]	@ (8004db8 <OTM8009A_Init+0x398>)
 8004a5c:	21ff      	movs	r1, #255	@ 0xff
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fb84 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a64:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004a66:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004a68:	4ad2      	ldr	r2, [pc, #840]	@ (8004db4 <OTM8009A_Init+0x394>)
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	f000 fb7d 	bl	800516c <otm8009a_write_reg>
 8004a72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004a74:	2300      	movs	r3, #0
 8004a76:	4ad1      	ldr	r2, [pc, #836]	@ (8004dbc <OTM8009A_Init+0x39c>)
 8004a78:	21c4      	movs	r1, #196	@ 0xc4
 8004a7a:	4628      	mov	r0, r5
 8004a7c:	f000 fb76 	bl	800516c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a80:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004a82:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004a84:	4638      	mov	r0, r7
 8004a86:	f7ff ffbe 	bl	8004a06 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	4acc      	ldr	r2, [pc, #816]	@ (8004dc0 <OTM8009A_Init+0x3a0>)
 8004a8e:	4628      	mov	r0, r5
 8004a90:	4619      	mov	r1, r3
 8004a92:	f000 fb6b 	bl	800516c <otm8009a_write_reg>
 8004a96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004a98:	2300      	movs	r3, #0
 8004a9a:	4aca      	ldr	r2, [pc, #808]	@ (8004dc4 <OTM8009A_Init+0x3a4>)
 8004a9c:	21c4      	movs	r1, #196	@ 0xc4
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	f000 fb64 	bl	800516c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004aa4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004aa6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004aa8:	4638      	mov	r0, r7
 8004aaa:	f7ff ffac 	bl	8004a06 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4ac5      	ldr	r2, [pc, #788]	@ (8004dc8 <OTM8009A_Init+0x3a8>)
 8004ab2:	4628      	mov	r0, r5
 8004ab4:	4619      	mov	r1, r3
 8004ab6:	f000 fb59 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004aba:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004abc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004abe:	4ac3      	ldr	r2, [pc, #780]	@ (8004dcc <OTM8009A_Init+0x3ac>)
 8004ac0:	21c5      	movs	r1, #197	@ 0xc5
 8004ac2:	4628      	mov	r0, r5
 8004ac4:	f000 fb52 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ac8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004aca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004acc:	4ac0      	ldr	r2, [pc, #768]	@ (8004dd0 <OTM8009A_Init+0x3b0>)
 8004ace:	4619      	mov	r1, r3
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 fb4b 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ad6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004ad8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ada:	4abe      	ldr	r2, [pc, #760]	@ (8004dd4 <OTM8009A_Init+0x3b4>)
 8004adc:	21c5      	movs	r1, #197	@ 0xc5
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 fb44 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ae4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ae6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004ae8:	4abb      	ldr	r2, [pc, #748]	@ (8004dd8 <OTM8009A_Init+0x3b8>)
 8004aea:	4619      	mov	r1, r3
 8004aec:	4628      	mov	r0, r5
 8004aee:	f000 fb3d 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004af2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004af4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004af6:	4ab9      	ldr	r2, [pc, #740]	@ (8004ddc <OTM8009A_Init+0x3bc>)
 8004af8:	21c0      	movs	r1, #192	@ 0xc0
 8004afa:	4628      	mov	r0, r5
 8004afc:	f000 fb36 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b00:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004b02:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b04:	4aa9      	ldr	r2, [pc, #676]	@ (8004dac <OTM8009A_Init+0x38c>)
 8004b06:	4619      	mov	r1, r3
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 fb2f 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004b0e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b10:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004b12:	4ab3      	ldr	r2, [pc, #716]	@ (8004de0 <OTM8009A_Init+0x3c0>)
 8004b14:	21d9      	movs	r1, #217	@ 0xd9
 8004b16:	4628      	mov	r0, r5
 8004b18:	f000 fb28 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b1c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004b1e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b20:	4ab0      	ldr	r2, [pc, #704]	@ (8004de4 <OTM8009A_Init+0x3c4>)
 8004b22:	4619      	mov	r1, r3
 8004b24:	4628      	mov	r0, r5
 8004b26:	f000 fb21 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004b2a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004b2c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004b2e:	4aae      	ldr	r2, [pc, #696]	@ (8004de8 <OTM8009A_Init+0x3c8>)
 8004b30:	21c1      	movs	r1, #193	@ 0xc1
 8004b32:	4628      	mov	r0, r5
 8004b34:	f000 fb1a 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004b38:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004b3a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004b3c:	4aab      	ldr	r2, [pc, #684]	@ (8004dec <OTM8009A_Init+0x3cc>)
 8004b3e:	4619      	mov	r1, r3
 8004b40:	4628      	mov	r0, r5
 8004b42:	f000 fb13 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b46:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004b48:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b4a:	4aa9      	ldr	r2, [pc, #676]	@ (8004df0 <OTM8009A_Init+0x3d0>)
 8004b4c:	21c5      	movs	r1, #197	@ 0xc5
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f000 fb0c 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b54:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004b56:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b58:	4aa6      	ldr	r2, [pc, #664]	@ (8004df4 <OTM8009A_Init+0x3d4>)
 8004b5a:	4619      	mov	r1, r3
 8004b5c:	4628      	mov	r0, r5
 8004b5e:	f000 fb05 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b62:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004b64:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b66:	4a9b      	ldr	r2, [pc, #620]	@ (8004dd4 <OTM8009A_Init+0x3b4>)
 8004b68:	21c5      	movs	r1, #197	@ 0xc5
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	f000 fafe 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b70:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004b72:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b74:	4a8d      	ldr	r2, [pc, #564]	@ (8004dac <OTM8009A_Init+0x38c>)
 8004b76:	4619      	mov	r1, r3
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f000 faf7 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b7e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004b80:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b82:	4a9d      	ldr	r2, [pc, #628]	@ (8004df8 <OTM8009A_Init+0x3d8>)
 8004b84:	21d8      	movs	r1, #216	@ 0xd8
 8004b86:	4628      	mov	r0, r5
 8004b88:	f000 faf0 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b8c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004b8e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b90:	4a9a      	ldr	r2, [pc, #616]	@ (8004dfc <OTM8009A_Init+0x3dc>)
 8004b92:	4619      	mov	r1, r3
 8004b94:	4628      	mov	r0, r5
 8004b96:	f000 fae9 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b9a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004b9c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004b9e:	4a98      	ldr	r2, [pc, #608]	@ (8004e00 <OTM8009A_Init+0x3e0>)
 8004ba0:	21c5      	movs	r1, #197	@ 0xc5
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	f000 fae2 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004ba8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004baa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004bac:	4a95      	ldr	r2, [pc, #596]	@ (8004e04 <OTM8009A_Init+0x3e4>)
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4628      	mov	r0, r5
 8004bb2:	f000 fadb 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004bb6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004bb8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004bba:	4a93      	ldr	r2, [pc, #588]	@ (8004e08 <OTM8009A_Init+0x3e8>)
 8004bbc:	21c0      	movs	r1, #192	@ 0xc0
 8004bbe:	4628      	mov	r0, r5
 8004bc0:	f000 fad4 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004bc4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004bc6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004bc8:	4a90      	ldr	r2, [pc, #576]	@ (8004e0c <OTM8009A_Init+0x3ec>)
 8004bca:	4619      	mov	r1, r3
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 facd 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004bd2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004bd4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004bd6:	4a8e      	ldr	r2, [pc, #568]	@ (8004e10 <OTM8009A_Init+0x3f0>)
 8004bd8:	21c5      	movs	r1, #197	@ 0xc5
 8004bda:	4628      	mov	r0, r5
 8004bdc:	f000 fac6 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004be0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004be2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004be4:	4a8b      	ldr	r2, [pc, #556]	@ (8004e14 <OTM8009A_Init+0x3f4>)
 8004be6:	4619      	mov	r1, r3
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fabf 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004bee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004bf0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004bf2:	4a89      	ldr	r2, [pc, #548]	@ (8004e18 <OTM8009A_Init+0x3f8>)
 8004bf4:	21c4      	movs	r1, #196	@ 0xc4
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	f000 fab8 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004bfc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004bfe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c00:	4a78      	ldr	r2, [pc, #480]	@ (8004de4 <OTM8009A_Init+0x3c4>)
 8004c02:	4619      	mov	r1, r3
 8004c04:	4628      	mov	r0, r5
 8004c06:	f000 fab1 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004c0a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004c0c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004c0e:	4a83      	ldr	r2, [pc, #524]	@ (8004e1c <OTM8009A_Init+0x3fc>)
 8004c10:	21c1      	movs	r1, #193	@ 0xc1
 8004c12:	4628      	mov	r0, r5
 8004c14:	f000 faaa 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004c18:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004c1a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004c1c:	4a80      	ldr	r2, [pc, #512]	@ (8004e20 <OTM8009A_Init+0x400>)
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4628      	mov	r0, r5
 8004c22:	f000 faa3 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004c26:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004c28:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004c2a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e24 <OTM8009A_Init+0x404>)
 8004c2c:	21b3      	movs	r1, #179	@ 0xb3
 8004c2e:	4628      	mov	r0, r5
 8004c30:	f000 fa9c 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c34:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004c36:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c38:	4a5e      	ldr	r2, [pc, #376]	@ (8004db4 <OTM8009A_Init+0x394>)
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	4628      	mov	r0, r5
 8004c3e:	f000 fa95 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004c42:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004c44:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004c46:	4a78      	ldr	r2, [pc, #480]	@ (8004e28 <OTM8009A_Init+0x408>)
 8004c48:	21ce      	movs	r1, #206	@ 0xce
 8004c4a:	4628      	mov	r0, r5
 8004c4c:	f000 fa8e 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c50:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004c52:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c54:	4a75      	ldr	r2, [pc, #468]	@ (8004e2c <OTM8009A_Init+0x40c>)
 8004c56:	4619      	mov	r1, r3
 8004c58:	4628      	mov	r0, r5
 8004c5a:	f000 fa87 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c5e:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004c60:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c62:	4a73      	ldr	r2, [pc, #460]	@ (8004e30 <OTM8009A_Init+0x410>)
 8004c64:	21ce      	movs	r1, #206	@ 0xce
 8004c66:	4628      	mov	r0, r5
 8004c68:	f000 fa80 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c6c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004c6e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c70:	4a70      	ldr	r2, [pc, #448]	@ (8004e34 <OTM8009A_Init+0x414>)
 8004c72:	4619      	mov	r1, r3
 8004c74:	4628      	mov	r0, r5
 8004c76:	f000 fa79 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c7a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004c7c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8004e38 <OTM8009A_Init+0x418>)
 8004c80:	21ce      	movs	r1, #206	@ 0xce
 8004c82:	4628      	mov	r0, r5
 8004c84:	f000 fa72 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c88:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004c8a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c8c:	4a6b      	ldr	r2, [pc, #428]	@ (8004e3c <OTM8009A_Init+0x41c>)
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4628      	mov	r0, r5
 8004c92:	f000 fa6b 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c96:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004c98:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004c9a:	4a69      	ldr	r2, [pc, #420]	@ (8004e40 <OTM8009A_Init+0x420>)
 8004c9c:	21cf      	movs	r1, #207	@ 0xcf
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 fa64 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ca4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8004ca6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004ca8:	4a66      	ldr	r2, [pc, #408]	@ (8004e44 <OTM8009A_Init+0x424>)
 8004caa:	4619      	mov	r1, r3
 8004cac:	4628      	mov	r0, r5
 8004cae:	f000 fa5d 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004cb2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004cb4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004cb6:	4a64      	ldr	r2, [pc, #400]	@ (8004e48 <OTM8009A_Init+0x428>)
 8004cb8:	21cf      	movs	r1, #207	@ 0xcf
 8004cba:	4628      	mov	r0, r5
 8004cbc:	f000 fa56 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004cc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8004cc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004cc4:	4a3b      	ldr	r2, [pc, #236]	@ (8004db4 <OTM8009A_Init+0x394>)
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	4628      	mov	r0, r5
 8004cca:	f000 fa4f 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004cce:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004cd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e4c <OTM8009A_Init+0x42c>)
 8004cd4:	21cb      	movs	r1, #203	@ 0xcb
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f000 fa48 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004cdc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8004cde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004ce0:	4a5b      	ldr	r2, [pc, #364]	@ (8004e50 <OTM8009A_Init+0x430>)
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f000 fa41 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004cea:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004cec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004cee:	4a59      	ldr	r2, [pc, #356]	@ (8004e54 <OTM8009A_Init+0x434>)
 8004cf0:	21cb      	movs	r1, #203	@ 0xcb
 8004cf2:	4628      	mov	r0, r5
 8004cf4:	f000 fa3a 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004cf8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8004cfa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8004e2c <OTM8009A_Init+0x40c>)
 8004cfe:	4619      	mov	r1, r3
 8004d00:	4628      	mov	r0, r5
 8004d02:	f000 fa33 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004d06:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004d08:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004d0a:	4a53      	ldr	r2, [pc, #332]	@ (8004e58 <OTM8009A_Init+0x438>)
 8004d0c:	21cb      	movs	r1, #203	@ 0xcb
 8004d0e:	4628      	mov	r0, r5
 8004d10:	f000 fa2c 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d14:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8004d16:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d18:	4a46      	ldr	r2, [pc, #280]	@ (8004e34 <OTM8009A_Init+0x414>)
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	4628      	mov	r0, r5
 8004d1e:	f000 fa25 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d22:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004d24:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d26:	4a4d      	ldr	r2, [pc, #308]	@ (8004e5c <OTM8009A_Init+0x43c>)
 8004d28:	21cb      	movs	r1, #203	@ 0xcb
 8004d2a:	4628      	mov	r0, r5
 8004d2c:	f000 fa1e 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d30:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8004d32:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d34:	4a41      	ldr	r2, [pc, #260]	@ (8004e3c <OTM8009A_Init+0x41c>)
 8004d36:	4619      	mov	r1, r3
 8004d38:	4628      	mov	r0, r5
 8004d3a:	f000 fa17 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d3e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004d40:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d42:	4a47      	ldr	r2, [pc, #284]	@ (8004e60 <OTM8009A_Init+0x440>)
 8004d44:	21cb      	movs	r1, #203	@ 0xcb
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 fa10 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d4c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8004d4e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d50:	4a3c      	ldr	r2, [pc, #240]	@ (8004e44 <OTM8009A_Init+0x424>)
 8004d52:	4619      	mov	r1, r3
 8004d54:	4628      	mov	r0, r5
 8004d56:	f000 fa09 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d5a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004d5c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d5e:	4a41      	ldr	r2, [pc, #260]	@ (8004e64 <OTM8009A_Init+0x444>)
 8004d60:	21cb      	movs	r1, #203	@ 0xcb
 8004d62:	4628      	mov	r0, r5
 8004d64:	f000 fa02 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d68:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8004d6a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8004e68 <OTM8009A_Init+0x448>)
 8004d6e:	4619      	mov	r1, r3
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 f9fb 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d76:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8004d78:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d7a:	4a3c      	ldr	r2, [pc, #240]	@ (8004e6c <OTM8009A_Init+0x44c>)
 8004d7c:	21cb      	movs	r1, #203	@ 0xcb
 8004d7e:	4628      	mov	r0, r5
 8004d80:	f000 f9f4 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d84:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8004d86:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d88:	4a39      	ldr	r2, [pc, #228]	@ (8004e70 <OTM8009A_Init+0x450>)
 8004d8a:	4619      	mov	r1, r3
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f000 f9ed 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d92:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8004d94:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004d96:	4a37      	ldr	r2, [pc, #220]	@ (8004e74 <OTM8009A_Init+0x454>)
 8004d98:	21cb      	movs	r1, #203	@ 0xcb
 8004d9a:	4628      	mov	r0, r5
 8004d9c:	f000 f9e6 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004da0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8004da2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004da4:	4a03      	ldr	r2, [pc, #12]	@ (8004db4 <OTM8009A_Init+0x394>)
 8004da6:	4619      	mov	r1, r3
 8004da8:	4628      	mov	r0, r5
 8004daa:	e065      	b.n	8004e78 <OTM8009A_Init+0x458>
 8004dac:	0802558d 	.word	0x0802558d
 8004db0:	08025589 	.word	0x08025589
 8004db4:	0802558e 	.word	0x0802558e
 8004db8:	08025587 	.word	0x08025587
 8004dbc:	0802558f 	.word	0x0802558f
 8004dc0:	08025590 	.word	0x08025590
 8004dc4:	08025591 	.word	0x08025591
 8004dc8:	08025592 	.word	0x08025592
 8004dcc:	08025593 	.word	0x08025593
 8004dd0:	08025594 	.word	0x08025594
 8004dd4:	08025595 	.word	0x08025595
 8004dd8:	08025596 	.word	0x08025596
 8004ddc:	08025597 	.word	0x08025597
 8004de0:	08025598 	.word	0x08025598
 8004de4:	0802559b 	.word	0x0802559b
 8004de8:	0802559c 	.word	0x0802559c
 8004dec:	0802559d 	.word	0x0802559d
 8004df0:	0802559e 	.word	0x0802559e
 8004df4:	0802559f 	.word	0x0802559f
 8004df8:	08025585 	.word	0x08025585
 8004dfc:	080255a0 	.word	0x080255a0
 8004e00:	080255a1 	.word	0x080255a1
 8004e04:	080255a2 	.word	0x080255a2
 8004e08:	080255a3 	.word	0x080255a3
 8004e0c:	080255a4 	.word	0x080255a4
 8004e10:	080255a5 	.word	0x080255a5
 8004e14:	08025599 	.word	0x08025599
 8004e18:	080255a6 	.word	0x080255a6
 8004e1c:	080255a7 	.word	0x080255a7
 8004e20:	080255a8 	.word	0x080255a8
 8004e24:	08025583 	.word	0x08025583
 8004e28:	0802557d 	.word	0x0802557d
 8004e2c:	080255a9 	.word	0x080255a9
 8004e30:	0802556f 	.word	0x0802556f
 8004e34:	080255aa 	.word	0x080255aa
 8004e38:	08025561 	.word	0x08025561
 8004e3c:	080255ab 	.word	0x080255ab
 8004e40:	08025557 	.word	0x08025557
 8004e44:	080255ac 	.word	0x080255ac
 8004e48:	080255b9 	.word	0x080255b9
 8004e4c:	0802554d 	.word	0x0802554d
 8004e50:	080255ad 	.word	0x080255ad
 8004e54:	0802553e 	.word	0x0802553e
 8004e58:	0802552f 	.word	0x0802552f
 8004e5c:	08025525 	.word	0x08025525
 8004e60:	08025516 	.word	0x08025516
 8004e64:	08025507 	.word	0x08025507
 8004e68:	080255ae 	.word	0x080255ae
 8004e6c:	080254fd 	.word	0x080254fd
 8004e70:	080255af 	.word	0x080255af
 8004e74:	080254f3 	.word	0x080254f3
 8004e78:	f000 f978 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e7c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004e7e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e80:	4a8e      	ldr	r2, [pc, #568]	@ (80050bc <OTM8009A_Init+0x69c>)
 8004e82:	21cc      	movs	r1, #204	@ 0xcc
 8004e84:	4628      	mov	r0, r5
 8004e86:	f000 f971 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e8a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8004e8c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e8e:	4a8c      	ldr	r2, [pc, #560]	@ (80050c0 <OTM8009A_Init+0x6a0>)
 8004e90:	4619      	mov	r1, r3
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f96a 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e98:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8004e9a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004e9c:	4a89      	ldr	r2, [pc, #548]	@ (80050c4 <OTM8009A_Init+0x6a4>)
 8004e9e:	21cc      	movs	r1, #204	@ 0xcc
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 f963 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004ea6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8004ea8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004eaa:	4a87      	ldr	r2, [pc, #540]	@ (80050c8 <OTM8009A_Init+0x6a8>)
 8004eac:	4619      	mov	r1, r3
 8004eae:	4628      	mov	r0, r5
 8004eb0:	f000 f95c 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004eb4:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004eb6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004eb8:	4a84      	ldr	r2, [pc, #528]	@ (80050cc <OTM8009A_Init+0x6ac>)
 8004eba:	21cc      	movs	r1, #204	@ 0xcc
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	f000 f955 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ec2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8004ec4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ec6:	4a82      	ldr	r2, [pc, #520]	@ (80050d0 <OTM8009A_Init+0x6b0>)
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4628      	mov	r0, r5
 8004ecc:	f000 f94e 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004ed0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ed2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004ed4:	4a7f      	ldr	r2, [pc, #508]	@ (80050d4 <OTM8009A_Init+0x6b4>)
 8004ed6:	21cc      	movs	r1, #204	@ 0xcc
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f000 f947 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ede:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8004ee0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004ee2:	4a7d      	ldr	r2, [pc, #500]	@ (80050d8 <OTM8009A_Init+0x6b8>)
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 f940 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004eec:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8004eee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004ef0:	4a7a      	ldr	r2, [pc, #488]	@ (80050dc <OTM8009A_Init+0x6bc>)
 8004ef2:	21cc      	movs	r1, #204	@ 0xcc
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	f000 f939 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004efa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8004efc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004efe:	4a78      	ldr	r2, [pc, #480]	@ (80050e0 <OTM8009A_Init+0x6c0>)
 8004f00:	4619      	mov	r1, r3
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 f932 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004f08:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8004f0a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004f0c:	4a75      	ldr	r2, [pc, #468]	@ (80050e4 <OTM8009A_Init+0x6c4>)
 8004f0e:	21cc      	movs	r1, #204	@ 0xcc
 8004f10:	4628      	mov	r0, r5
 8004f12:	f000 f92b 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f16:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8004f18:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f1a:	4a73      	ldr	r2, [pc, #460]	@ (80050e8 <OTM8009A_Init+0x6c8>)
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 f924 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004f24:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f26:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004f28:	4a70      	ldr	r2, [pc, #448]	@ (80050ec <OTM8009A_Init+0x6cc>)
 8004f2a:	21c5      	movs	r1, #197	@ 0xc5
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f000 f91d 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004f32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8004f34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004f36:	4a6e      	ldr	r2, [pc, #440]	@ (80050f0 <OTM8009A_Init+0x6d0>)
 8004f38:	4619      	mov	r1, r3
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f916 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004f40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8004f42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004f44:	4a6b      	ldr	r2, [pc, #428]	@ (80050f4 <OTM8009A_Init+0x6d4>)
 8004f46:	21f5      	movs	r1, #245	@ 0xf5
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 f90f 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8004f50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f52:	4a69      	ldr	r2, [pc, #420]	@ (80050f8 <OTM8009A_Init+0x6d8>)
 8004f54:	4619      	mov	r1, r3
 8004f56:	4628      	mov	r0, r5
 8004f58:	f000 f908 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8004f5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f60:	4a66      	ldr	r2, [pc, #408]	@ (80050fc <OTM8009A_Init+0x6dc>)
 8004f62:	21c6      	movs	r1, #198	@ 0xc6
 8004f64:	4628      	mov	r0, r5
 8004f66:	f000 f901 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8004f6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f6e:	4a64      	ldr	r2, [pc, #400]	@ (8005100 <OTM8009A_Init+0x6e0>)
 8004f70:	4619      	mov	r1, r3
 8004f72:	4628      	mov	r0, r5
 8004f74:	f000 f8fa 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f78:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f7c:	4a61      	ldr	r2, [pc, #388]	@ (8005104 <OTM8009A_Init+0x6e4>)
 8004f7e:	21ff      	movs	r1, #255	@ 0xff
 8004f80:	4628      	mov	r0, r5
 8004f82:	f000 f8f3 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8004f88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f8a:	4a5d      	ldr	r2, [pc, #372]	@ (8005100 <OTM8009A_Init+0x6e0>)
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4628      	mov	r0, r5
 8004f90:	f000 f8ec 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004f98:	4a59      	ldr	r2, [pc, #356]	@ (8005100 <OTM8009A_Init+0x6e0>)
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	4628      	mov	r0, r5
 8004f9e:	f000 f8e5 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004fa2:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fa4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004fa6:	4a58      	ldr	r2, [pc, #352]	@ (8005108 <OTM8009A_Init+0x6e8>)
 8004fa8:	21e1      	movs	r1, #225	@ 0xe1
 8004faa:	4628      	mov	r0, r5
 8004fac:	f000 f8de 	bl	800516c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8004fb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004fb4:	4a52      	ldr	r2, [pc, #328]	@ (8005100 <OTM8009A_Init+0x6e0>)
 8004fb6:	4619      	mov	r1, r3
 8004fb8:	4628      	mov	r0, r5
 8004fba:	f000 f8d7 	bl	800516c <otm8009a_write_reg>
 8004fbe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8004fc0:	2310      	movs	r3, #16
 8004fc2:	4a52      	ldr	r2, [pc, #328]	@ (800510c <OTM8009A_Init+0x6ec>)
 8004fc4:	21e2      	movs	r1, #226	@ 0xe2
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	f000 f8d0 	bl	800516c <otm8009a_write_reg>
 8004fcc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004fce:	2300      	movs	r3, #0
 8004fd0:	4a4f      	ldr	r2, [pc, #316]	@ (8005110 <OTM8009A_Init+0x6f0>)
 8004fd2:	2111      	movs	r1, #17
 8004fd4:	4628      	mov	r0, r5
 8004fd6:	f000 f8c9 	bl	800516c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004fda:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8004fdc:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8004fde:	4638      	mov	r0, r7
 8004fe0:	f7ff fd11 	bl	8004a06 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8004fe4:	4f4b      	ldr	r7, [pc, #300]	@ (8005114 <OTM8009A_Init+0x6f4>)
 8004fe6:	2e00      	cmp	r6, #0
 8004fe8:	d061      	beq.n	80050ae <OTM8009A_Init+0x68e>
 8004fea:	2e02      	cmp	r6, #2
 8004fec:	d107      	bne.n	8004ffe <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8004fee:	2300      	movs	r3, #0
 8004ff0:	4a49      	ldr	r2, [pc, #292]	@ (8005118 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8004ff2:	213a      	movs	r1, #58	@ 0x3a
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 f8b9 	bl	800516c <otm8009a_write_reg>
 8004ffa:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8004ffc:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8004ffe:	f1b8 0f01 	cmp.w	r8, #1
 8005002:	d157      	bne.n	80050b4 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005004:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005006:	f10d 0207 	add.w	r2, sp, #7
 800500a:	2136      	movs	r1, #54	@ 0x36
 800500c:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800500e:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005012:	2300      	movs	r3, #0
 8005014:	f000 f8aa 	bl	800516c <otm8009a_write_reg>
 8005018:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800501a:	2304      	movs	r3, #4
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <OTM8009A_Init+0x6fc>)
 800501e:	212a      	movs	r1, #42	@ 0x2a
 8005020:	4628      	mov	r0, r5
 8005022:	f000 f8a3 	bl	800516c <otm8009a_write_reg>
 8005026:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8005028:	2304      	movs	r3, #4
 800502a:	4a3d      	ldr	r2, [pc, #244]	@ (8005120 <OTM8009A_Init+0x700>)
 800502c:	212b      	movs	r1, #43	@ 0x2b
 800502e:	4628      	mov	r0, r5
 8005030:	f000 f89c 	bl	800516c <otm8009a_write_reg>
 8005034:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8005036:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800503a:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 800503c:	2300      	movs	r3, #0
 800503e:	4a39      	ldr	r2, [pc, #228]	@ (8005124 <OTM8009A_Init+0x704>)
 8005040:	2151      	movs	r1, #81	@ 0x51
 8005042:	4628      	mov	r0, r5
 8005044:	f000 f892 	bl	800516c <otm8009a_write_reg>
 8005048:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800504a:	4633      	mov	r3, r6
 800504c:	4a36      	ldr	r2, [pc, #216]	@ (8005128 <OTM8009A_Init+0x708>)
 800504e:	2153      	movs	r1, #83	@ 0x53
 8005050:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005052:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005054:	f000 f88a 	bl	800516c <otm8009a_write_reg>
 8005058:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800505a:	4633      	mov	r3, r6
 800505c:	4a33      	ldr	r2, [pc, #204]	@ (800512c <OTM8009A_Init+0x70c>)
 800505e:	2155      	movs	r1, #85	@ 0x55
 8005060:	4628      	mov	r0, r5
 8005062:	f000 f883 	bl	800516c <otm8009a_write_reg>
 8005066:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8005068:	4633      	mov	r3, r6
 800506a:	4a31      	ldr	r2, [pc, #196]	@ (8005130 <OTM8009A_Init+0x710>)
 800506c:	215e      	movs	r1, #94	@ 0x5e
 800506e:	4628      	mov	r0, r5
 8005070:	f000 f87c 	bl	800516c <otm8009a_write_reg>
 8005074:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8005076:	4633      	mov	r3, r6
 8005078:	4a2e      	ldr	r2, [pc, #184]	@ (8005134 <OTM8009A_Init+0x714>)
 800507a:	2129      	movs	r1, #41	@ 0x29
 800507c:	4628      	mov	r0, r5
 800507e:	f000 f875 	bl	800516c <otm8009a_write_reg>
 8005082:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005084:	4633      	mov	r3, r6
 8005086:	4631      	mov	r1, r6
 8005088:	4a1d      	ldr	r2, [pc, #116]	@ (8005100 <OTM8009A_Init+0x6e0>)
 800508a:	4628      	mov	r0, r5
 800508c:	f000 f86e 	bl	800516c <otm8009a_write_reg>
 8005090:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8005092:	4633      	mov	r3, r6
 8005094:	4a28      	ldr	r2, [pc, #160]	@ (8005138 <OTM8009A_Init+0x718>)
 8005096:	212c      	movs	r1, #44	@ 0x2c
 8005098:	4628      	mov	r0, r5
 800509a:	f000 f867 	bl	800516c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800509e:	42c4      	cmn	r4, r0
}
 80050a0:	bf14      	ite	ne
 80050a2:	f04f 30ff 	movne.w	r0, #4294967295
 80050a6:	4630      	moveq	r0, r6
 80050a8:	b002      	add	sp, #8
 80050aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80050ae:	4633      	mov	r3, r6
 80050b0:	4a22      	ldr	r2, [pc, #136]	@ (800513c <OTM8009A_Init+0x71c>)
 80050b2:	e79e      	b.n	8004ff2 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80050b4:	2300      	movs	r3, #0
 80050b6:	603b      	str	r3, [r7, #0]
 80050b8:	e7bf      	b.n	800503a <OTM8009A_Init+0x61a>
 80050ba:	bf00      	nop
 80050bc:	080254e9 	.word	0x080254e9
 80050c0:	080255ad 	.word	0x080255ad
 80050c4:	080254da 	.word	0x080254da
 80050c8:	080255a9 	.word	0x080255a9
 80050cc:	080254cb 	.word	0x080254cb
 80050d0:	080255aa 	.word	0x080255aa
 80050d4:	080254c1 	.word	0x080254c1
 80050d8:	080255ab 	.word	0x080255ab
 80050dc:	080254b2 	.word	0x080254b2
 80050e0:	080255ac 	.word	0x080255ac
 80050e4:	080254a3 	.word	0x080254a3
 80050e8:	08025599 	.word	0x08025599
 80050ec:	080255ba 	.word	0x080255ba
 80050f0:	080255bb 	.word	0x080255bb
 80050f4:	080255bc 	.word	0x080255bc
 80050f8:	080255bd 	.word	0x080255bd
 80050fc:	080255be 	.word	0x080255be
 8005100:	0802558d 	.word	0x0802558d
 8005104:	080254a0 	.word	0x080254a0
 8005108:	08025490 	.word	0x08025490
 800510c:	08025480 	.word	0x08025480
 8005110:	080255b0 	.word	0x080255b0
 8005114:	2400b278 	.word	0x2400b278
 8005118:	080255b1 	.word	0x080255b1
 800511c:	080255c3 	.word	0x080255c3
 8005120:	080255bf 	.word	0x080255bf
 8005124:	080255b3 	.word	0x080255b3
 8005128:	080255b4 	.word	0x080255b4
 800512c:	080255b5 	.word	0x080255b5
 8005130:	080255b6 	.word	0x080255b6
 8005134:	080255b7 	.word	0x080255b7
 8005138:	080255b8 	.word	0x080255b8
 800513c:	080255b2 	.word	0x080255b2

08005140 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005140:	b160      	cbz	r0, 800515c <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005142:	684b      	ldr	r3, [r1, #4]
 8005144:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005146:	688b      	ldr	r3, [r1, #8]
 8005148:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800514a:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 800514c:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 800514e:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005150:	4b04      	ldr	r3, [pc, #16]	@ (8005164 <OTM8009A_RegisterBusIO+0x24>)
 8005152:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005154:	4b04      	ldr	r3, [pc, #16]	@ (8005168 <OTM8009A_RegisterBusIO+0x28>)
 8005156:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 8005158:	2000      	movs	r0, #0
 800515a:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	080049eb 	.word	0x080049eb
 8005168:	080049f9 	.word	0x080049f9

0800516c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800516c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800516e:	6804      	ldr	r4, [r0, #0]
 8005170:	6880      	ldr	r0, [r0, #8]
 8005172:	46a4      	mov	ip, r4
}
 8005174:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8005178:	4760      	bx	ip
	...

0800517c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800517c:	4a10      	ldr	r2, [pc, #64]	@ (80051c0 <BSP_I2C4_DeInit+0x44>)
{
 800517e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8005186:	b10b      	cbz	r3, 800518c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005188:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800518a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800518c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005190:	480c      	ldr	r0, [pc, #48]	@ (80051c4 <BSP_I2C4_DeInit+0x48>)
 8005192:	f001 fe3d 	bl	8006e10 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8005196:	480b      	ldr	r0, [pc, #44]	@ (80051c4 <BSP_I2C4_DeInit+0x48>)
 8005198:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800519c:	f001 fe38 	bl	8006e10 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80051a0:	4a09      	ldr	r2, [pc, #36]	@ (80051c8 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80051a2:	480a      	ldr	r0, [pc, #40]	@ (80051cc <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80051a4:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80051a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ac:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80051b0:	f002 f87e 	bl	80072b0 <HAL_I2C_DeInit>
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0e7      	beq.n	8005188 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80051b8:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80051bc:	e7e5      	b.n	800518a <BSP_I2C4_DeInit+0xe>
 80051be:	bf00      	nop
 80051c0:	2400bcdc 	.word	0x2400bcdc
 80051c4:	58020c00 	.word	0x58020c00
 80051c8:	58024400 	.word	0x58024400
 80051cc:	2400b284 	.word	0x2400b284

080051d0 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80051d0:	2300      	movs	r3, #0
 80051d2:	2201      	movs	r2, #1
{
 80051d4:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 80051d6:	6041      	str	r1, [r0, #4]
{
 80051d8:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80051da:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80051dc:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 80051e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80051e4:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 80051e8:	f002 f80c 	bl	8007204 <HAL_I2C_Init>
 80051ec:	4601      	mov	r1, r0
 80051ee:	b108      	cbz	r0, 80051f4 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 80051f0:	2001      	movs	r0, #1
}
 80051f2:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 80051f4:	4620      	mov	r0, r4
 80051f6:	f002 fa32 	bl	800765e <HAL_I2CEx_ConfigAnalogFilter>
 80051fa:	4601      	mov	r1, r0
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d1f7      	bne.n	80051f0 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005200:	4620      	mov	r0, r4
 8005202:	f002 fa52 	bl	80076aa <HAL_I2CEx_ConfigDigitalFilter>
 8005206:	3800      	subs	r0, #0
 8005208:	bf18      	it	ne
 800520a:	2001      	movne	r0, #1
 800520c:	e7f1      	b.n	80051f2 <MX_I2C4_Init+0x22>
	...

08005210 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005210:	4ba1      	ldr	r3, [pc, #644]	@ (8005498 <BSP_I2C4_Init+0x288>)
 8005212:	48a2      	ldr	r0, [pc, #648]	@ (800549c <BSP_I2C4_Init+0x28c>)
{
 8005214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005218:	6003      	str	r3, [r0, #0]
{
 800521a:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 800521c:	4ba0      	ldr	r3, [pc, #640]	@ (80054a0 <BSP_I2C4_Init+0x290>)
 800521e:	681c      	ldr	r4, [r3, #0]
 8005220:	b11c      	cbz	r4, 800522a <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005222:	2000      	movs	r0, #0
}
 8005224:	b013      	add	sp, #76	@ 0x4c
 8005226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800522e:	f002 fa11 	bl	8007654 <HAL_I2C_GetState>
 8005232:	2800      	cmp	r0, #0
 8005234:	d1f5      	bne.n	8005222 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005236:	4d9b      	ldr	r5, [pc, #620]	@ (80054a4 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005238:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800523c:	2702      	movs	r7, #2
 800523e:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005240:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005244:	a90d      	add	r1, sp, #52	@ 0x34
 8005246:	4898      	ldr	r0, [pc, #608]	@ (80054a8 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005248:	f043 0308 	orr.w	r3, r3, #8
 800524c:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005250:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	930a      	str	r3, [sp, #40]	@ 0x28
 800525a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800525c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005260:	f043 0308 	orr.w	r3, r3, #8
 8005264:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005268:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800526c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005274:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005276:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800527a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800527e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005282:	f001 fcdd 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005286:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800528a:	a90d      	add	r1, sp, #52	@ 0x34
 800528c:	4886      	ldr	r0, [pc, #536]	@ (80054a8 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800528e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005290:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005294:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005298:	f001 fcd2 	bl	8006c40 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 800529c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80052a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052a4:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80052a8:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80052ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80052b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80052b4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80052b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80052bc:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 80052c0:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80052c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052c8:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80052cc:	f004 fcd8 	bl	8009c80 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 80052d0:	2800      	cmp	r0, #0
 80052d2:	d06f      	beq.n	80053b4 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80052d4:	4b75      	ldr	r3, [pc, #468]	@ (80054ac <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 80052d6:	4622      	mov	r2, r4
 80052d8:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 80052da:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80052de:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80052e2:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 80054b4 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 80052e6:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80052ea:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80052ee:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 80052f2:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80052f4:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80052f8:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 80052fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005300:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005304:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005306:	4b6a      	ldr	r3, [pc, #424]	@ (80054b0 <BSP_I2C4_Init+0x2a0>)
 8005308:	681b      	ldr	r3, [r3, #0]
{
 800530a:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800530c:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005310:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005314:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005318:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 800531c:	d35d      	bcc.n	80053da <BSP_I2C4_Init+0x1ca>
 800531e:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005320:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005322:	9d00      	ldr	r5, [sp, #0]
 8005324:	42bd      	cmp	r5, r7
 8005326:	d852      	bhi.n	80053ce <BSP_I2C4_Init+0x1be>
 8005328:	42be      	cmp	r6, r7
 800532a:	d350      	bcc.n	80053ce <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 800532c:	4591      	cmp	r9, r2
 800532e:	d04e      	beq.n	80053ce <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005330:	2514      	movs	r5, #20
 8005332:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005336:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005338:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800533a:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800533e:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005340:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005344:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005348:	d93e      	bls.n	80053c8 <BSP_I2C4_Init+0x1b8>
 800534a:	4a59      	ldr	r2, [pc, #356]	@ (80054b0 <BSP_I2C4_Init+0x2a0>)
 800534c:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800534e:	4b58      	ldr	r3, [pc, #352]	@ (80054b0 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005350:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	4956      	ldr	r1, [pc, #344]	@ (80054b4 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800535a:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800535c:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800535e:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005360:	0043      	lsls	r3, r0, #1
 8005362:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8005366:	e9cd 2501 	strd	r2, r5, [sp, #4]
 800536a:	f10b 0b01 	add.w	fp, fp, #1
 800536e:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8005372:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8005376:	9508      	str	r5, [sp, #32]
 8005378:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800537a:	9b05      	ldr	r3, [sp, #20]
 800537c:	429f      	cmp	r7, r3
 800537e:	d138      	bne.n	80053f2 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8005380:	9b01      	ldr	r3, [sp, #4]
 8005382:	2b7f      	cmp	r3, #127	@ 0x7f
 8005384:	d816      	bhi.n	80053b4 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005386:	2114      	movs	r1, #20
 8005388:	9a01      	ldr	r2, [sp, #4]
 800538a:	4b4a      	ldr	r3, [pc, #296]	@ (80054b4 <BSP_I2C4_Init+0x2a4>)
 800538c:	434a      	muls	r2, r1
 800538e:	1899      	adds	r1, r3, r2
 8005390:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005392:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005394:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005398:	684b      	ldr	r3, [r1, #4]
 800539a:	051b      	lsls	r3, r3, #20
 800539c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80053a0:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80053a2:	688b      	ldr	r3, [r1, #8]
 80053a4:	041b      	lsls	r3, r3, #16
 80053a6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80053aa:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 80053ac:	68cb      	ldr	r3, [r1, #12]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80053b2:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 80053b4:	4621      	mov	r1, r4
 80053b6:	4839      	ldr	r0, [pc, #228]	@ (800549c <BSP_I2C4_Init+0x28c>)
 80053b8:	f7ff ff0a 	bl	80051d0 <MX_I2C4_Init>
 80053bc:	2800      	cmp	r0, #0
 80053be:	f43f af30 	beq.w	8005222 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 80053c2:	f06f 0007 	mvn.w	r0, #7
  return ret;
 80053c6:	e72d      	b.n	8005224 <BSP_I2C4_Init+0x14>
 80053c8:	4691      	mov	r9, r2
 80053ca:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 80053ce:	f10e 0e01 	add.w	lr, lr, #1
 80053d2:	440f      	add	r7, r1
 80053d4:	f1be 0f10 	cmp.w	lr, #16
 80053d8:	d1a3      	bne.n	8005322 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 80053da:	f1bc 0f10 	cmp.w	ip, #16
 80053de:	4488      	add	r8, r1
 80053e0:	d196      	bne.n	8005310 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 80053e2:	3201      	adds	r2, #1
 80053e4:	4401      	add	r1, r0
 80053e6:	2a10      	cmp	r2, #16
 80053e8:	d18f      	bne.n	800530a <BSP_I2C4_Init+0xfa>
 80053ea:	f1ba 0f00 	cmp.w	sl, #0
 80053ee:	d1ac      	bne.n	800534a <BSP_I2C4_Init+0x13a>
 80053f0:	e7ad      	b.n	800534e <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80053f2:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80053f4:	f04f 0c00 	mov.w	ip, #0
 80053f8:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80053fa:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80053fe:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005400:	441d      	add	r5, r3
 8005402:	441e      	add	r6, r3
 8005404:	9503      	str	r5, [sp, #12]
 8005406:	ebab 0503 	sub.w	r5, fp, r3
 800540a:	9607      	str	r6, [sp, #28]
 800540c:	006d      	lsls	r5, r5, #1
 800540e:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005410:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005412:	f240 5214 	movw	r2, #1300	@ 0x514
 8005416:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800541a:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800541e:	4295      	cmp	r5, r2
 8005420:	d92f      	bls.n	8005482 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005422:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005426:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 800542a:	d22a      	bcs.n	8005482 <BSP_I2C4_Init+0x272>
 800542c:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800542e:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005432:	f8dd 9000 	ldr.w	r9, [sp]
 8005436:	442e      	add	r6, r5
 8005438:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800543c:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005440:	f240 4212 	movw	r2, #1042	@ 0x412
 8005444:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005448:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800544c:	4592      	cmp	sl, r2
 800544e:	d811      	bhi.n	8005474 <BSP_I2C4_Init+0x264>
 8005450:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005454:	d30e      	bcc.n	8005474 <BSP_I2C4_Init+0x264>
 8005456:	4580      	cmp	r8, r0
 8005458:	d90c      	bls.n	8005474 <BSP_I2C4_Init+0x264>
              error = -error;
 800545a:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 800545e:	bf28      	it	cs
 8005460:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005462:	9a02      	ldr	r2, [sp, #8]
 8005464:	4592      	cmp	sl, r2
 8005466:	d205      	bcs.n	8005474 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8005468:	9a04      	ldr	r2, [sp, #16]
 800546a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 800546c:	9a06      	ldr	r2, [sp, #24]
 800546e:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8005472:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005474:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005478:	4498      	add	r8, r3
 800547a:	441e      	add	r6, r3
 800547c:	eba9 0903 	sub.w	r9, r9, r3
 8005480:	d1dc      	bne.n	800543c <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005482:	9a00      	ldr	r2, [sp, #0]
 8005484:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005488:	441d      	add	r5, r3
 800548a:	eba2 0203 	sub.w	r2, r2, r3
 800548e:	9200      	str	r2, [sp, #0]
 8005490:	d1bf      	bne.n	8005412 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005492:	3701      	adds	r7, #1
 8005494:	3114      	adds	r1, #20
 8005496:	e770      	b.n	800537a <BSP_I2C4_Init+0x16a>
 8005498:	58001c00 	.word	0x58001c00
 800549c:	2400b284 	.word	0x2400b284
 80054a0:	2400bcdc 	.word	0x2400bcdc
 80054a4:	58024400 	.word	0x58024400
 80054a8:	58020c00 	.word	0x58020c00
 80054ac:	3b9aca00 	.word	0x3b9aca00
 80054b0:	2400b2d8 	.word	0x2400b2d8
 80054b4:	2400b2dc 	.word	0x2400b2dc

080054b8 <BSP_I2C4_WriteReg>:
{
 80054b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80054ba:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80054be:	9200      	str	r2, [sp, #0]
 80054c0:	460a      	mov	r2, r1
 80054c2:	4601      	mov	r1, r0
 80054c4:	4808      	ldr	r0, [pc, #32]	@ (80054e8 <BSP_I2C4_WriteReg+0x30>)
 80054c6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054ca:	2301      	movs	r3, #1
 80054cc:	f001 ff0a 	bl	80072e4 <HAL_I2C_Mem_Write>
 80054d0:	b140      	cbz	r0, 80054e4 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80054d2:	4805      	ldr	r0, [pc, #20]	@ (80054e8 <BSP_I2C4_WriteReg+0x30>)
 80054d4:	f002 f8c1 	bl	800765a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80054d8:	2804      	cmp	r0, #4
 80054da:	bf14      	ite	ne
 80054dc:	f06f 0003 	mvnne.w	r0, #3
 80054e0:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 80054e4:	b004      	add	sp, #16
 80054e6:	bd10      	pop	{r4, pc}
 80054e8:	2400b284 	.word	0x2400b284

080054ec <BSP_I2C4_ReadReg>:
{
 80054ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80054ee:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 80054f2:	9200      	str	r2, [sp, #0]
 80054f4:	460a      	mov	r2, r1
 80054f6:	4601      	mov	r1, r0
 80054f8:	4808      	ldr	r0, [pc, #32]	@ (800551c <BSP_I2C4_ReadReg+0x30>)
 80054fa:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80054fe:	2301      	movs	r3, #1
 8005500:	f001 ffca 	bl	8007498 <HAL_I2C_Mem_Read>
 8005504:	b140      	cbz	r0, 8005518 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005506:	4805      	ldr	r0, [pc, #20]	@ (800551c <BSP_I2C4_ReadReg+0x30>)
 8005508:	f002 f8a7 	bl	800765a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800550c:	2804      	cmp	r0, #4
 800550e:	bf14      	ite	ne
 8005510:	f06f 0003 	mvnne.w	r0, #3
 8005514:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005518:	b004      	add	sp, #16
 800551a:	bd10      	pop	{r4, pc}
 800551c:	2400b284 	.word	0x2400b284

08005520 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005520:	f000 bd08 	b.w	8005f34 <HAL_GetTick>

08005524 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005524:	4a09      	ldr	r2, [pc, #36]	@ (800554c <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005526:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 800552a:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 800552c:	684a      	ldr	r2, [r1, #4]
 800552e:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005530:	2201      	movs	r2, #1
 8005532:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005534:	688a      	ldr	r2, [r1, #8]
 8005536:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005538:	680a      	ldr	r2, [r1, #0]
 800553a:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800553c:	2200      	movs	r2, #0
 800553e:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005542:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005544:	68ca      	ldr	r2, [r1, #12]
 8005546:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005548:	f003 bcc4 	b.w	8008ed4 <HAL_QSPI_Init>
 800554c:	52005000 	.word	0x52005000

08005550 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005550:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005552:	b988      	cbnz	r0, 8005578 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005554:	4c0a      	ldr	r4, [pc, #40]	@ (8005580 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005556:	480b      	ldr	r0, [pc, #44]	@ (8005584 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005558:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800555a:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 800555c:	b94b      	cbnz	r3, 8005572 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800555e:	f7ff f9bc 	bl	80048da <MT25TL01G_EnableMemoryMappedModeSTR>
 8005562:	b110      	cbz	r0, 800556a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005564:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005568:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800556a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 800556c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 800556e:	7023      	strb	r3, [r4, #0]
 8005570:	e7fa      	b.n	8005568 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005572:	f7ff f968 	bl	8004846 <MT25TL01G_EnableMemoryMappedModeDTR>
 8005576:	e7f4      	b.n	8005562 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005578:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800557c:	e7f4      	b.n	8005568 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 800557e:	bf00      	nop
 8005580:	2400bce0 	.word	0x2400bce0
 8005584:	240003c8 	.word	0x240003c8

08005588 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800558a:	460c      	mov	r4, r1
 800558c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800558e:	bb30      	cbnz	r0, 80055de <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005590:	4d17      	ldr	r5, [pc, #92]	@ (80055f0 <BSP_QSPI_ConfigFlash+0x68>)
 8005592:	782b      	ldrb	r3, [r5, #0]
 8005594:	2b02      	cmp	r3, #2
 8005596:	d025      	beq.n	80055e4 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005598:	fab2 f382 	clz	r3, r2
 800559c:	4e15      	ldr	r6, [pc, #84]	@ (80055f4 <BSP_QSPI_ConfigFlash+0x6c>)
 800559e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80055a0:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80055a6:	f003 fc95 	bl	8008ed4 <HAL_QSPI_Init>
 80055aa:	b9f0      	cbnz	r0, 80055ea <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80055ac:	786b      	ldrb	r3, [r5, #1]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d10f      	bne.n	80055d2 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 80055b2:	2c03      	cmp	r4, #3
 80055b4:	d105      	bne.n	80055c2 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80055b6:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80055b8:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 80055ba:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 80055bc:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 80055be:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 80055c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 80055c2:	4630      	mov	r0, r6
 80055c4:	f7ff f923 	bl	800480e <MT25TL01G_ExitQPIMode>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0f4      	beq.n	80055b6 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80055cc:	f06f 0004 	mvn.w	r0, #4
 80055d0:	e7f6      	b.n	80055c0 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 80055d2:	2c03      	cmp	r4, #3
 80055d4:	d1ef      	bne.n	80055b6 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 80055d6:	4630      	mov	r0, r6
 80055d8:	f7ff f8fd 	bl	80047d6 <MT25TL01G_EnterQPIMode>
 80055dc:	e7f4      	b.n	80055c8 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 80055de:	f06f 0001 	mvn.w	r0, #1
 80055e2:	e7ed      	b.n	80055c0 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80055e4:	f06f 0019 	mvn.w	r0, #25
 80055e8:	e7ea      	b.n	80055c0 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 80055ea:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80055ee:	e7e7      	b.n	80055c0 <BSP_QSPI_ConfigFlash+0x38>
 80055f0:	2400bce0 	.word	0x2400bce0
 80055f4:	240003c8 	.word	0x240003c8

080055f8 <BSP_QSPI_Init>:
{
 80055f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055fc:	460c      	mov	r4, r1
 80055fe:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005600:	2800      	cmp	r0, #0
 8005602:	f040 81ac 	bne.w	800595e <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005606:	4d03      	ldr	r5, [pc, #12]	@ (8005614 <BSP_QSPI_Init+0x1c>)
 8005608:	782f      	ldrb	r7, [r5, #0]
 800560a:	b12f      	cbz	r7, 8005618 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 800560c:	2000      	movs	r0, #0
}
 800560e:	b024      	add	sp, #144	@ 0x90
 8005610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005614:	2400bce0 	.word	0x2400bce0
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005618:	4bc3      	ldr	r3, [pc, #780]	@ (8005928 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800561a:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800561e:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005620:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005622:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005626:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800562a:	48c0      	ldr	r0, [pc, #768]	@ (800592c <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800562c:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005634:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005638:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800563c:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005640:	9201      	str	r2, [sp, #4]
 8005642:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005644:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005646:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800564a:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 800564c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800564e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005652:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005658:	f042 0202 	orr.w	r2, r2, #2
 800565c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005664:	f002 0202 	and.w	r2, r2, #2
 8005668:	9202      	str	r2, [sp, #8]
 800566a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 800566c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005670:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005674:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800567c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005680:	9203      	str	r2, [sp, #12]
 8005682:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005684:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005688:	f042 0208 	orr.w	r2, r2, #8
 800568c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005690:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005694:	f002 0208 	and.w	r2, r2, #8
 8005698:	9204      	str	r2, [sp, #16]
 800569a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 800569c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056a0:	f042 0220 	orr.w	r2, r2, #32
 80056a4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056a8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056ac:	f002 0220 	and.w	r2, r2, #32
 80056b0:	9205      	str	r2, [sp, #20]
 80056b2:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 80056b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056b8:	f042 0220 	orr.w	r2, r2, #32
 80056bc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056c4:	f002 0220 	and.w	r2, r2, #32
 80056c8:	9206      	str	r2, [sp, #24]
 80056ca:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 80056cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056d0:	f042 0220 	orr.w	r2, r2, #32
 80056d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056dc:	f002 0220 	and.w	r2, r2, #32
 80056e0:	9207      	str	r2, [sp, #28]
 80056e2:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 80056e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80056ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80056f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80056f4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80056f8:	9208      	str	r2, [sp, #32]
 80056fa:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 80056fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005700:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005704:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800570c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005710:	9209      	str	r2, [sp, #36]	@ 0x24
 8005712:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005714:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005718:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800571c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005720:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005724:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005728:	920a      	str	r2, [sp, #40]	@ 0x28
 800572a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 800572c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005734:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005738:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800573c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005740:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005742:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005744:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005748:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800574c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005758:	930c      	str	r3, [sp, #48]	@ 0x30
 800575a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800575c:	2302      	movs	r3, #2
 800575e:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005762:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005764:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005766:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 800576a:	f001 fa69 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800576e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005770:	a916      	add	r1, sp, #88	@ 0x58
 8005772:	486f      	ldr	r0, [pc, #444]	@ (8005930 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005774:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005776:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 800577a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 800577e:	f001 fa5f 	bl	8006c40 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005782:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005786:	a916      	add	r1, sp, #88	@ 0x58
 8005788:	486a      	ldr	r0, [pc, #424]	@ (8005934 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 800578a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800578c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 800578e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005790:	f001 fa56 	bl	8006c40 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005794:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005796:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 800579a:	4867      	ldr	r0, [pc, #412]	@ (8005938 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 800579c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057a0:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 80057a2:	f001 fa4d 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80057a6:	a916      	add	r1, sp, #88	@ 0x58
 80057a8:	4864      	ldr	r0, [pc, #400]	@ (800593c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 80057aa:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80057ae:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 80057b2:	f001 fa45 	bl	8006c40 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80057b6:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80057b8:	a916      	add	r1, sp, #88	@ 0x58
 80057ba:	485f      	ldr	r0, [pc, #380]	@ (8005938 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 80057bc:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057be:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 80057c0:	f001 fa3e 	bl	8006c40 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80057c4:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80057c6:	a916      	add	r1, sp, #88	@ 0x58
 80057c8:	485c      	ldr	r0, [pc, #368]	@ (800593c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80057ca:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80057cc:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80057ce:	f001 fa37 	bl	8006c40 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80057d2:	a916      	add	r1, sp, #88	@ 0x58
 80057d4:	4856      	ldr	r0, [pc, #344]	@ (8005930 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80057d6:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80057da:	f001 fa31 	bl	8006c40 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80057de:	a916      	add	r1, sp, #88	@ 0x58
 80057e0:	4856      	ldr	r0, [pc, #344]	@ (800593c <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80057e2:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80057e6:	f001 fa2b 	bl	8006c40 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80057ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80057ee:	a916      	add	r1, sp, #88	@ 0x58
 80057f0:	484f      	ldr	r0, [pc, #316]	@ (8005930 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80057f2:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80057f4:	f001 fa24 	bl	8006c40 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80057f8:	463a      	mov	r2, r7
 80057fa:	210f      	movs	r1, #15
 80057fc:	205c      	movs	r0, #92	@ 0x5c
 80057fe:	f000 fbc9 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005802:	205c      	movs	r0, #92	@ 0x5c
 8005804:	f000 fbf8 	bl	8005ff8 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005808:	a811      	add	r0, sp, #68	@ 0x44
 800580a:	f7fe ff38 	bl	800467e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800580e:	7863      	ldrb	r3, [r4, #1]
 8005810:	4a4b      	ldr	r2, [pc, #300]	@ (8005940 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005812:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005816:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800581a:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800581c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800581e:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005822:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005826:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800582a:	a90d      	add	r1, sp, #52	@ 0x34
 800582c:	4845      	ldr	r0, [pc, #276]	@ (8005944 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800582e:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005830:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005832:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005834:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005836:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005838:	f7ff fe74 	bl	8005524 <MX_QSPI_Init>
 800583c:	2800      	cmp	r0, #0
 800583e:	f040 8091 	bne.w	8005964 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005842:	2103      	movs	r1, #3
 8005844:	483f      	ldr	r0, [pc, #252]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005846:	f7ff f88e 	bl	8004966 <MT25TL01G_ResetEnable>
 800584a:	2800      	cmp	r0, #0
 800584c:	f040 8084 	bne.w	8005958 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005850:	2103      	movs	r1, #3
 8005852:	483c      	ldr	r0, [pc, #240]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005854:	f7ff f8a8 	bl	80049a8 <MT25TL01G_ResetMemory>
 8005858:	2800      	cmp	r0, #0
 800585a:	d17d      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800585c:	7869      	ldrb	r1, [r5, #1]
 800585e:	4839      	ldr	r0, [pc, #228]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005860:	f7fe ff1e 	bl	80046a0 <MT25TL01G_AutoPollingMemReady>
 8005864:	4601      	mov	r1, r0
 8005866:	2800      	cmp	r0, #0
 8005868:	d176      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800586a:	4836      	ldr	r0, [pc, #216]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 800586c:	f7ff f87b 	bl	8004966 <MT25TL01G_ResetEnable>
 8005870:	4601      	mov	r1, r0
 8005872:	2800      	cmp	r0, #0
 8005874:	d170      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005876:	4833      	ldr	r0, [pc, #204]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005878:	f7ff f896 	bl	80049a8 <MT25TL01G_ResetMemory>
 800587c:	4601      	mov	r1, r0
 800587e:	2800      	cmp	r0, #0
 8005880:	d16a      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005882:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005884:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005886:	482f      	ldr	r0, [pc, #188]	@ (8005944 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005888:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800588a:	f7fe ff09 	bl	80046a0 <MT25TL01G_AutoPollingMemReady>
 800588e:	2800      	cmp	r0, #0
 8005890:	d162      	bne.n	8005958 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005892:	7869      	ldrb	r1, [r5, #1]
 8005894:	482b      	ldr	r0, [pc, #172]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005896:	f7fe ff72 	bl	800477e <MT25TL01G_Enter4BytesAddressMode>
 800589a:	2800      	cmp	r0, #0
 800589c:	d15c      	bne.n	8005958 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800589e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 80058a2:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 80058a6:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058a8:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80058ac:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80058ae:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058b0:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 80058b2:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 80058b4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80058b8:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 80058ba:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80058bc:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80058c0:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80058c4:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058c8:	481e      	ldr	r0, [pc, #120]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 80058ca:	f003 fb4f 	bl	8008f6c <HAL_QSPI_Command>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	d142      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058d6:	f10d 0102 	add.w	r1, sp, #2
 80058da:	481a      	ldr	r0, [pc, #104]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 80058dc:	f003 fbe7 	bl	80090ae <HAL_QSPI_Receive>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d139      	bne.n	8005958 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058e4:	7869      	ldrb	r1, [r5, #1]
 80058e6:	4817      	ldr	r0, [pc, #92]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 80058e8:	f7fe ff05 	bl	80046f6 <MT25TL01G_WriteEnable>
 80058ec:	bba0      	cbnz	r0, 8005958 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80058ee:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80058f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80058f4:	a916      	add	r1, sp, #88	@ 0x58
 80058f6:	4813      	ldr	r0, [pc, #76]	@ (8005944 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 80058f8:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 80058fa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80058fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005902:	051b      	lsls	r3, r3, #20
 8005904:	0d1b      	lsrs	r3, r3, #20
 8005906:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800590a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800590e:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005912:	f003 fb2b 	bl	8008f6c <HAL_QSPI_Command>
 8005916:	b9f8      	cbnz	r0, 8005958 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800591c:	f10d 0102 	add.w	r1, sp, #2
 8005920:	4808      	ldr	r0, [pc, #32]	@ (8005944 <BSP_QSPI_Init+0x34c>)
 8005922:	f003 fb68 	bl	8008ff6 <HAL_QSPI_Transmit>
 8005926:	e00f      	b.n	8005948 <BSP_QSPI_Init+0x350>
 8005928:	58024400 	.word	0x58024400
 800592c:	58020400 	.word	0x58020400
 8005930:	58021800 	.word	0x58021800
 8005934:	58020c00 	.word	0x58020c00
 8005938:	58021c00 	.word	0x58021c00
 800593c:	58021400 	.word	0x58021400
 8005940:	080255c8 	.word	0x080255c8
 8005944:	240003c8 	.word	0x240003c8
 8005948:	b930      	cbnz	r0, 8005958 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800594a:	7862      	ldrb	r2, [r4, #1]
 800594c:	7821      	ldrb	r1, [r4, #0]
 800594e:	f7ff fe1b 	bl	8005588 <BSP_QSPI_ConfigFlash>
 8005952:	2800      	cmp	r0, #0
 8005954:	f43f ae5a 	beq.w	800560c <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005958:	f06f 0004 	mvn.w	r0, #4
 800595c:	e657      	b.n	800560e <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 800595e:	f06f 0001 	mvn.w	r0, #1
 8005962:	e654      	b.n	800560e <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005964:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005968:	e651      	b.n	800560e <BSP_QSPI_Init+0x16>
 800596a:	bf00      	nop

0800596c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800596c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800596e:	4604      	mov	r4, r0
 8005970:	b970      	cbnz	r0, 8005990 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005972:	4b09      	ldr	r3, [pc, #36]	@ (8005998 <BSP_SDRAM_DeInit+0x2c>)
 8005974:	4809      	ldr	r0, [pc, #36]	@ (800599c <BSP_SDRAM_DeInit+0x30>)
 8005976:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005978:	f004 ffe4 	bl	800a944 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800597c:	207a      	movs	r0, #122	@ 0x7a
 800597e:	f000 fb49 	bl	8006014 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005982:	4807      	ldr	r0, [pc, #28]	@ (80059a0 <BSP_SDRAM_DeInit+0x34>)
 8005984:	4b07      	ldr	r3, [pc, #28]	@ (80059a4 <BSP_SDRAM_DeInit+0x38>)
 8005986:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005988:	f003 f82a 	bl	80089e0 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800598c:	4620      	mov	r0, r4
}
 800598e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005990:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005994:	e7fb      	b.n	800598e <BSP_SDRAM_DeInit+0x22>
 8005996:	bf00      	nop
 8005998:	52004140 	.word	0x52004140
 800599c:	2400bde4 	.word	0x2400bde4
 80059a0:	2400bcec 	.word	0x2400bcec
 80059a4:	52000040 	.word	0x52000040

080059a8 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80059a8:	2201      	movs	r2, #1
 80059aa:	4915      	ldr	r1, [pc, #84]	@ (8005a00 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80059ac:	4b15      	ldr	r3, [pc, #84]	@ (8005a04 <MX_SDRAM_Init+0x5c>)
{
 80059ae:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80059b0:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80059b4:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80059b6:	2104      	movs	r1, #4
 80059b8:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80059ba:	2440      	movs	r4, #64	@ 0x40
{
 80059bc:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80059be:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80059c2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80059c6:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80059ca:	2200      	movs	r2, #0
 80059cc:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 80059d0:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80059d4:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 80059d8:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80059da:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 80059dc:	2207      	movs	r2, #7
 80059de:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 80059e0:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80059e4:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 80059e6:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80059e8:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 80059ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80059f0:	f004 ff80 	bl	800a8f4 <HAL_SDRAM_Init>
}
 80059f4:	3800      	subs	r0, #0
 80059f6:	bf18      	it	ne
 80059f8:	2001      	movne	r0, #1
 80059fa:	b008      	add	sp, #32
 80059fc:	bd10      	pop	{r4, pc}
 80059fe:	bf00      	nop
 8005a00:	52004140 	.word	0x52004140
 8005a04:	2400bde4 	.word	0x2400bde4

08005a08 <BSP_SDRAM_Init>:
{
 8005a08:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005a0a:	4605      	mov	r5, r0
{
 8005a0c:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f040 80dd 	bne.w	8005bce <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a14:	4b71      	ldr	r3, [pc, #452]	@ (8005bdc <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005a16:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005a18:	a909      	add	r1, sp, #36	@ 0x24
 8005a1a:	4871      	ldr	r0, [pc, #452]	@ (8005be0 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a1c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005a20:	4c70      	ldr	r4, [pc, #448]	@ (8005be4 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a22:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005a26:	4e70      	ldr	r6, [pc, #448]	@ (8005be8 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005a28:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005a2c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005a30:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a34:	9201      	str	r2, [sp, #4]
 8005a36:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005a38:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005a3c:	f042 0201 	orr.w	r2, r2, #1
 8005a40:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005a44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005a48:	f002 0201 	and.w	r2, r2, #1
 8005a4c:	9202      	str	r2, [sp, #8]
 8005a4e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a54:	f042 0208 	orr.w	r2, r2, #8
 8005a58:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a60:	f002 0208 	and.w	r2, r2, #8
 8005a64:	9203      	str	r2, [sp, #12]
 8005a66:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005a68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a6c:	f042 0210 	orr.w	r2, r2, #16
 8005a70:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a78:	f002 0210 	and.w	r2, r2, #16
 8005a7c:	9204      	str	r2, [sp, #16]
 8005a7e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005a80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a84:	f042 0220 	orr.w	r2, r2, #32
 8005a88:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a90:	f002 0220 	and.w	r2, r2, #32
 8005a94:	9205      	str	r2, [sp, #20]
 8005a96:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a9c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aa0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005aa8:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005aac:	9206      	str	r2, [sp, #24]
 8005aae:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ab4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ac0:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005ac4:	9207      	str	r2, [sp, #28]
 8005ac6:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005ac8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005acc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ad0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ad4:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005ada:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ade:	9308      	str	r3, [sp, #32]
 8005ae0:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005ae8:	230c      	movs	r3, #12
 8005aea:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005aee:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005af2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005af4:	f001 f8a4 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005af8:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005afc:	a909      	add	r1, sp, #36	@ 0x24
 8005afe:	483b      	ldr	r0, [pc, #236]	@ (8005bec <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005b00:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005b02:	f001 f89d 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005b06:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005b0a:	a909      	add	r1, sp, #36	@ 0x24
 8005b0c:	4838      	ldr	r0, [pc, #224]	@ (8005bf0 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005b0e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005b10:	f001 f896 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005b14:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005b18:	a909      	add	r1, sp, #36	@ 0x24
 8005b1a:	4836      	ldr	r0, [pc, #216]	@ (8005bf4 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005b1c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005b1e:	f001 f88f 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005b22:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005b26:	a909      	add	r1, sp, #36	@ 0x24
 8005b28:	4833      	ldr	r0, [pc, #204]	@ (8005bf8 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005b2a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005b2c:	f001 f888 	bl	8006c40 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005b30:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005b34:	a909      	add	r1, sp, #36	@ 0x24
 8005b36:	4831      	ldr	r0, [pc, #196]	@ (8005bfc <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005b38:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005b3a:	f001 f881 	bl	8006c40 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005b3e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005b42:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005b46:	f240 2002 	movw	r0, #514	@ 0x202
 8005b4a:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005b4e:	6334      	str	r4, [r6, #48]	@ 0x30
 8005b50:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005b52:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005b56:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005b5a:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005b5c:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005b5e:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005b60:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005b62:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005b66:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005b6a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005b6e:	4b24      	ldr	r3, [pc, #144]	@ (8005c00 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005b70:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005b72:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005b74:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005b78:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005b7c:	f002 ff30 	bl	80089e0 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005b80:	4620      	mov	r0, r4
 8005b82:	f002 febe 	bl	8008902 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005b86:	462a      	mov	r2, r5
 8005b88:	210f      	movs	r1, #15
 8005b8a:	207a      	movs	r0, #122	@ 0x7a
 8005b8c:	f000 fa02 	bl	8005f94 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005b90:	207a      	movs	r0, #122	@ 0x7a
 8005b92:	f000 fa31 	bl	8005ff8 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005b96:	4630      	mov	r0, r6
 8005b98:	f7ff ff06 	bl	80059a8 <MX_SDRAM_Init>
 8005b9c:	b9d0      	cbnz	r0, 8005bd4 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005b9e:	4919      	ldr	r1, [pc, #100]	@ (8005c04 <BSP_SDRAM_Init+0x1fc>)
 8005ba0:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005ba2:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005ba6:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005baa:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005bac:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005bb0:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005bb2:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005bb6:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005bba:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005bbc:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005bbe:	f7fe fd31 	bl	8004624 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	bf18      	it	ne
 8005bc6:	f06f 0004 	mvnne.w	r0, #4
}
 8005bca:	b00f      	add	sp, #60	@ 0x3c
 8005bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005bce:	f06f 0001 	mvn.w	r0, #1
 8005bd2:	e7fa      	b.n	8005bca <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005bd4:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005bd8:	e7f7      	b.n	8005bca <BSP_SDRAM_Init+0x1c2>
 8005bda:	bf00      	nop
 8005bdc:	58024400 	.word	0x58024400
 8005be0:	58020c00 	.word	0x58020c00
 8005be4:	2400bd58 	.word	0x2400bd58
 8005be8:	2400bde4 	.word	0x2400bde4
 8005bec:	58021000 	.word	0x58021000
 8005bf0:	58021400 	.word	0x58021400
 8005bf4:	58021800 	.word	0x58021800
 8005bf8:	58021c00 	.word	0x58021c00
 8005bfc:	58022000 	.word	0x58022000
 8005c00:	52000040 	.word	0x52000040
 8005c04:	2400bdc4 	.word	0x2400bdc4

08005c08 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c0c:	460c      	mov	r4, r1
 8005c0e:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005c10:	4606      	mov	r6, r0
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d15c      	bne.n	8005cd0 <BSP_TS_Init+0xc8>
 8005c16:	680b      	ldr	r3, [r1, #0]
 8005c18:	1e5a      	subs	r2, r3, #1
 8005c1a:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005c1e:	d257      	bcs.n	8005cd0 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005c20:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005c22:	1e51      	subs	r1, r2, #1
 8005c24:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005c28:	d252      	bcs.n	8005cd0 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bf28      	it	cs
 8005c2e:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005c30:	68e2      	ldr	r2, [r4, #12]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d84c      	bhi.n	8005cd0 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005c36:	2370      	movs	r3, #112	@ 0x70
 8005c38:	2254      	movs	r2, #84	@ 0x54
 8005c3a:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005c3e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d14 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005c42:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005c46:	4b2e      	ldr	r3, [pc, #184]	@ (8005d00 <BSP_TS_Init+0xf8>)
 8005c48:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005c4a:	4b2e      	ldr	r3, [pc, #184]	@ (8005d04 <BSP_TS_Init+0xfc>)
 8005c4c:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005c4e:	4b2e      	ldr	r3, [pc, #184]	@ (8005d08 <BSP_TS_Init+0x100>)
 8005c50:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005c52:	4b2e      	ldr	r3, [pc, #184]	@ (8005d0c <BSP_TS_Init+0x104>)
 8005c54:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005c56:	4b2e      	ldr	r3, [pc, #184]	@ (8005d10 <BSP_TS_Init+0x108>)
 8005c58:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005c5a:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005c5e:	a906      	add	r1, sp, #24
 8005c60:	482c      	ldr	r0, [pc, #176]	@ (8005d14 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005c62:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005c66:	f7fe fbe3 	bl	8004430 <FT6X06_RegisterBusIO>
 8005c6a:	b9c0      	cbnz	r0, 8005c9e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005c6c:	4669      	mov	r1, sp
 8005c6e:	4829      	ldr	r0, [pc, #164]	@ (8005d14 <BSP_TS_Init+0x10c>)
 8005c70:	f7fe fb27 	bl	80042c2 <FT6X06_ReadID>
 8005c74:	b998      	cbnz	r0, 8005c9e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005c76:	9b00      	ldr	r3, [sp, #0]
 8005c78:	2b11      	cmp	r3, #17
 8005c7a:	d110      	bne.n	8005c9e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005c7c:	a903      	add	r1, sp, #12
 8005c7e:	4825      	ldr	r0, [pc, #148]	@ (8005d14 <BSP_TS_Init+0x10c>)
 8005c80:	f7fe fad3 	bl	800422a <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005c84:	4f24      	ldr	r7, [pc, #144]	@ (8005d18 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005c86:	4b25      	ldr	r3, [pc, #148]	@ (8005d1c <BSP_TS_Init+0x114>)
 8005c88:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8005d24 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005c8c:	4821      	ldr	r0, [pc, #132]	@ (8005d14 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005c8e:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005c92:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4798      	blx	r3
 8005c9a:	4605      	mov	r5, r0
 8005c9c:	b1d8      	cbz	r0, 8005cd6 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8005c9e:	b116      	cbz	r6, 8005ca6 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8005ca0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ca4:	e010      	b.n	8005cc8 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8005ca6:	2601      	movs	r6, #1
 8005ca8:	e7d7      	b.n	8005c5a <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005caa:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005cac:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8005cae:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005cb0:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005cb2:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8005cb4:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005cba:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005cbc:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005cbe:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005cc0:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8005cc2:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8005cc4:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8005cc8:	4628      	mov	r0, r5
 8005cca:	b00c      	add	sp, #48	@ 0x30
 8005ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8005cd0:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8005cd4:	e7f8      	b.n	8005cc8 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005cd6:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005cd8:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005cda:	4e11      	ldr	r6, [pc, #68]	@ (8005d20 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005cdc:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8005cde:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8005ce0:	6863      	ldr	r3, [r4, #4]
 8005ce2:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8005ce4:	68a3      	ldr	r3, [r4, #8]
 8005ce6:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8005ce8:	68e3      	ldr	r3, [r4, #12]
 8005cea:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8005cec:	f8d8 3000 	ldr.w	r3, [r8]
 8005cf0:	69db      	ldr	r3, [r3, #28]
 8005cf2:	4798      	blx	r3
 8005cf4:	2800      	cmp	r0, #0
 8005cf6:	dad8      	bge.n	8005caa <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cf8:	f06f 0504 	mvn.w	r5, #4
 8005cfc:	e7e4      	b.n	8005cc8 <BSP_TS_Init+0xc0>
 8005cfe:	bf00      	nop
 8005d00:	08005211 	.word	0x08005211
 8005d04:	0800517d 	.word	0x0800517d
 8005d08:	080054ed 	.word	0x080054ed
 8005d0c:	080054b9 	.word	0x080054b9
 8005d10:	08005521 	.word	0x08005521
 8005d14:	2400be18 	.word	0x2400be18
 8005d18:	2400be40 	.word	0x2400be40
 8005d1c:	24000038 	.word	0x24000038
 8005d20:	2400be44 	.word	0x2400be44
 8005d24:	2400be6c 	.word	0x2400be6c

08005d28 <BSP_TS_GetState>:
{
 8005d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d2a:	460c      	mov	r4, r1
 8005d2c:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8005d2e:	2800      	cmp	r0, #0
 8005d30:	d14d      	bne.n	8005dce <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8005d32:	4b28      	ldr	r3, [pc, #160]	@ (8005dd4 <BSP_TS_GetState+0xac>)
 8005d34:	a901      	add	r1, sp, #4
 8005d36:	4a28      	ldr	r2, [pc, #160]	@ (8005dd8 <BSP_TS_GetState+0xb0>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6810      	ldr	r0, [r2, #0]
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	4798      	blx	r3
 8005d40:	2800      	cmp	r0, #0
 8005d42:	db41      	blt.n	8005dc8 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005d44:	4925      	ldr	r1, [pc, #148]	@ (8005ddc <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 8005d46:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8005d48:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8005d4a:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8005d4c:	2e00      	cmp	r6, #0
 8005d4e:	d037      	beq.n	8005dc0 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d50:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005d52:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d56:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 8005d5a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8005d5e:	bf1e      	ittt	ne
 8005d60:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8005d62:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8005d64:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8005d66:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8005d6a:	bf1c      	itt	ne
 8005d6c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8005d70:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005d74:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8005d78:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8005d7a:	bf44      	itt	mi
 8005d7c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8005d80:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d82:	680f      	ldr	r7, [r1, #0]
 8005d84:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d86:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8005d88:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d8a:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005d8c:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d8e:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d92:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005d96:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8005d98:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8005d9a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8005d9c:	bf8c      	ite	hi
 8005d9e:	eba2 0c05 	subhi.w	ip, r2, r5
 8005da2:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8005da6:	4283      	cmp	r3, r0
 8005da8:	bf8c      	ite	hi
 8005daa:	1a1e      	subhi	r6, r3, r0
 8005dac:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8005dae:	4567      	cmp	r7, ip
 8005db0:	d301      	bcc.n	8005db6 <BSP_TS_GetState+0x8e>
 8005db2:	42b7      	cmp	r7, r6
 8005db4:	d205      	bcs.n	8005dc2 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8005db6:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8005db8:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8005dba:	2000      	movs	r0, #0
}
 8005dbc:	b005      	add	sp, #20
 8005dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8005dc0:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8005dc2:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8005dc6:	e7f8      	b.n	8005dba <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005dc8:	f06f 0004 	mvn.w	r0, #4
 8005dcc:	e7f6      	b.n	8005dbc <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8005dce:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005dd2:	e7f3      	b.n	8005dbc <BSP_TS_GetState+0x94>
 8005dd4:	2400be6c 	.word	0x2400be6c
 8005dd8:	2400be40 	.word	0x2400be40
 8005ddc:	2400be44 	.word	0x2400be44

08005de0 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005de0:	4b2d      	ldr	r3, [pc, #180]	@ (8005e98 <SystemInit+0xb8>)
 8005de2:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005de6:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8005dea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	f042 0210 	orr.w	r2, r2, #16
 8005df4:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005df6:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <SystemInit+0xbc>)
 8005df8:	6813      	ldr	r3, [r2, #0]
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	2b06      	cmp	r3, #6
 8005e00:	d805      	bhi.n	8005e0e <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005e02:	6813      	ldr	r3, [r2, #0]
 8005e04:	f023 030f 	bic.w	r3, r3, #15
 8005e08:	f043 0307 	orr.w	r3, r3, #7
 8005e0c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005e0e:	4b24      	ldr	r3, [pc, #144]	@ (8005ea0 <SystemInit+0xc0>)
 8005e10:	681a      	ldr	r2, [r3, #0]
 8005e12:	f042 0201 	orr.w	r2, r2, #1
 8005e16:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e18:	2200      	movs	r2, #0
 8005e1a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005e1c:	4a21      	ldr	r2, [pc, #132]	@ (8005ea4 <SystemInit+0xc4>)
 8005e1e:	6819      	ldr	r1, [r3, #0]
 8005e20:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005e22:	491e      	ldr	r1, [pc, #120]	@ (8005e9c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8005e24:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005e26:	680a      	ldr	r2, [r1, #0]
 8005e28:	0712      	lsls	r2, r2, #28
 8005e2a:	d505      	bpl.n	8005e38 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005e2c:	680a      	ldr	r2, [r1, #0]
 8005e2e:	f022 020f 	bic.w	r2, r2, #15
 8005e32:	f042 0207 	orr.w	r2, r2, #7
 8005e36:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005e38:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005e3a:	491b      	ldr	r1, [pc, #108]	@ (8005ea8 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8005e3c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8005e3e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8005e40:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8005e42:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005e44:	4919      	ldr	r1, [pc, #100]	@ (8005eac <SystemInit+0xcc>)
 8005e46:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005e48:	4919      	ldr	r1, [pc, #100]	@ (8005eb0 <SystemInit+0xd0>)
 8005e4a:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005e4c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005e4e:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005e50:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005e52:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005e54:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005e56:	6819      	ldr	r1, [r3, #0]
 8005e58:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 8005e5c:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005e5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005e60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005e64:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8005e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005e70:	4b10      	ldr	r3, [pc, #64]	@ (8005eb4 <SystemInit+0xd4>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	0c1b      	lsrs	r3, r3, #16
 8005e76:	041b      	lsls	r3, r3, #16
 8005e78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005e7c:	d203      	bcs.n	8005e86 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8005eb8 <SystemInit+0xd8>)
 8005e80:	2201      	movs	r2, #1
 8005e82:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005e86:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <SystemInit+0xdc>)
 8005e88:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8005e8c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8005e8e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005e92:	4b01      	ldr	r3, [pc, #4]	@ (8005e98 <SystemInit+0xb8>)
 8005e94:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00
 8005e9c:	52002000 	.word	0x52002000
 8005ea0:	58024400 	.word	0x58024400
 8005ea4:	eaf6ed7f 	.word	0xeaf6ed7f
 8005ea8:	02020200 	.word	0x02020200
 8005eac:	01ff0000 	.word	0x01ff0000
 8005eb0:	01010280 	.word	0x01010280
 8005eb4:	5c001000 	.word	0x5c001000
 8005eb8:	51008000 	.word	0x51008000
 8005ebc:	52004000 	.word	0x52004000

08005ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ec0:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ec2:	2003      	movs	r0, #3
 8005ec4:	f000 f854 	bl	8005f70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005ec8:	f003 fcde 	bl	8009888 <HAL_RCC_GetSysClockFreq>
 8005ecc:	490f      	ldr	r1, [pc, #60]	@ (8005f0c <HAL_Init+0x4c>)
 8005ece:	4a10      	ldr	r2, [pc, #64]	@ (8005f10 <HAL_Init+0x50>)
 8005ed0:	698b      	ldr	r3, [r1, #24]
 8005ed2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	f003 031f 	and.w	r3, r3, #31
 8005edc:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ede:	698b      	ldr	r3, [r1, #24]
 8005ee0:	f003 030f 	and.w	r3, r3, #15
 8005ee4:	5cd3      	ldrb	r3, [r2, r3]
 8005ee6:	4a0b      	ldr	r2, [pc, #44]	@ (8005f14 <HAL_Init+0x54>)
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa20 f303 	lsr.w	r3, r0, r3
 8005ef0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ef2:	4b09      	ldr	r3, [pc, #36]	@ (8005f18 <HAL_Init+0x58>)
 8005ef4:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005ef6:	2000      	movs	r0, #0
 8005ef8:	f7fb fb40 	bl	800157c <HAL_InitTick>
 8005efc:	4604      	mov	r4, r0
 8005efe:	b918      	cbnz	r0, 8005f08 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005f00:	f7fb f82a 	bl	8000f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8005f04:	4620      	mov	r0, r4
 8005f06:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005f08:	2401      	movs	r4, #1
 8005f0a:	e7fb      	b.n	8005f04 <HAL_Init+0x44>
 8005f0c:	58024400 	.word	0x58024400
 8005f10:	080255d0 	.word	0x080255d0
 8005f14:	24000068 	.word	0x24000068
 8005f18:	2400006c 	.word	0x2400006c

08005f1c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8005f1c:	4a03      	ldr	r2, [pc, #12]	@ (8005f2c <HAL_IncTick+0x10>)
 8005f1e:	4b04      	ldr	r3, [pc, #16]	@ (8005f30 <HAL_IncTick+0x14>)
 8005f20:	6811      	ldr	r1, [r2, #0]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	440b      	add	r3, r1
 8005f26:	6013      	str	r3, [r2, #0]
}
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	2400be70 	.word	0x2400be70
 8005f30:	24000070 	.word	0x24000070

08005f34 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005f34:	4b01      	ldr	r3, [pc, #4]	@ (8005f3c <HAL_GetTick+0x8>)
 8005f36:	6818      	ldr	r0, [r3, #0]
}
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	2400be70 	.word	0x2400be70

08005f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005f44:	f7ff fff6 	bl	8005f34 <HAL_GetTick>
 8005f48:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005f4a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8005f4c:	bf1e      	ittt	ne
 8005f4e:	4b04      	ldrne	r3, [pc, #16]	@ (8005f60 <HAL_Delay+0x20>)
 8005f50:	781b      	ldrbne	r3, [r3, #0]
 8005f52:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005f54:	f7ff ffee 	bl	8005f34 <HAL_GetTick>
 8005f58:	1b43      	subs	r3, r0, r5
 8005f5a:	42a3      	cmp	r3, r4
 8005f5c:	d3fa      	bcc.n	8005f54 <HAL_Delay+0x14>
  {
  }
}
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	24000070 	.word	0x24000070

08005f64 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8005f64:	4b01      	ldr	r3, [pc, #4]	@ (8005f6c <HAL_GetREVID+0x8>)
 8005f66:	6818      	ldr	r0, [r3, #0]
}
 8005f68:	0c00      	lsrs	r0, r0, #16
 8005f6a:	4770      	bx	lr
 8005f6c:	5c001000 	.word	0x5c001000

08005f70 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f70:	4907      	ldr	r1, [pc, #28]	@ (8005f90 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f72:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f74:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f76:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f7a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f7e:	0412      	lsls	r2, r2, #16
 8005f80:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8005f8c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005f8e:	4770      	bx	lr
 8005f90:	e000ed00 	.word	0xe000ed00

08005f94 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f94:	4b16      	ldr	r3, [pc, #88]	@ (8005ff0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f96:	b530      	push	{r4, r5, lr}
 8005f98:	68dc      	ldr	r4, [r3, #12]
 8005f9a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f9e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fa2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	bf28      	it	cs
 8005fa8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005faa:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fac:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005fb0:	bf8c      	ite	hi
 8005fb2:	3c03      	subhi	r4, #3
 8005fb4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fb6:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8005fba:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fbc:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005fc4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005fc8:	fa03 f304 	lsl.w	r3, r3, r4
 8005fcc:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8005fd4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8005fd6:	db06      	blt.n	8005fe6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fd8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8005fdc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8005fe0:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005fe4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe6:	f000 000f 	and.w	r0, r0, #15
 8005fea:	4a02      	ldr	r2, [pc, #8]	@ (8005ff4 <HAL_NVIC_SetPriority+0x60>)
 8005fec:	5413      	strb	r3, [r2, r0]
 8005fee:	e7f9      	b.n	8005fe4 <HAL_NVIC_SetPriority+0x50>
 8005ff0:	e000ed00 	.word	0xe000ed00
 8005ff4:	e000ed14 	.word	0xe000ed14

08005ff8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	db07      	blt.n	800600c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	0941      	lsrs	r1, r0, #5
 8006000:	f000 001f 	and.w	r0, r0, #31
 8006004:	4a02      	ldr	r2, [pc, #8]	@ (8006010 <HAL_NVIC_EnableIRQ+0x18>)
 8006006:	4083      	lsls	r3, r0
 8006008:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	e000e100 	.word	0xe000e100

08006014 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006014:	2800      	cmp	r0, #0
 8006016:	db0c      	blt.n	8006032 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006018:	0943      	lsrs	r3, r0, #5
 800601a:	2201      	movs	r2, #1
 800601c:	f000 001f 	and.w	r0, r0, #31
 8006020:	4904      	ldr	r1, [pc, #16]	@ (8006034 <HAL_NVIC_DisableIRQ+0x20>)
 8006022:	3320      	adds	r3, #32
 8006024:	4082      	lsls	r2, r0
 8006026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800602a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800602e:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006032:	4770      	bx	lr
 8006034:	e000e100 	.word	0xe000e100

08006038 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 8006038:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800603c:	4b04      	ldr	r3, [pc, #16]	@ (8006050 <HAL_MPU_Disable+0x18>)
 800603e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006040:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006044:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006046:	2200      	movs	r2, #0
 8006048:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 800604c:	4770      	bx	lr
 800604e:	bf00      	nop
 8006050:	e000ed00 	.word	0xe000ed00

08006054 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006054:	4b06      	ldr	r3, [pc, #24]	@ (8006070 <HAL_MPU_Enable+0x1c>)
 8006056:	f040 0001 	orr.w	r0, r0, #1
 800605a:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800605e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006060:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006064:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8006066:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800606a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800606e:	4770      	bx	lr
 8006070:	e000ed00 	.word	0xe000ed00

08006074 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8006074:	7843      	ldrb	r3, [r0, #1]
 8006076:	4a14      	ldr	r2, [pc, #80]	@ (80060c8 <HAL_MPU_ConfigRegion+0x54>)
 8006078:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800607c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006088:	6843      	ldr	r3, [r0, #4]
 800608a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800608e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006090:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006092:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006094:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006098:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800609a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800609c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800609e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80060a2:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060a4:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80060a8:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060aa:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80060ae:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80060b4:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80060b6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80060ba:	7a01      	ldrb	r1, [r0, #8]
 80060bc:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80060c0:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 80060c4:	4770      	bx	lr
 80060c6:	bf00      	nop
 80060c8:	e000ed00 	.word	0xe000ed00

080060cc <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80060cc:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80060ce:	4604      	mov	r4, r0
 80060d0:	b908      	cbnz	r0, 80060d6 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 80060d2:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80060d4:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 80060d6:	7f43      	ldrb	r3, [r0, #29]
 80060d8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80060dc:	b913      	cbnz	r3, 80060e4 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 80060de:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 80060e0:	f7fa ff52 	bl	8000f88 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 80060e4:	2302      	movs	r3, #2
 80060e6:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80060e8:	7923      	ldrb	r3, [r4, #4]
 80060ea:	b9e3      	cbnz	r3, 8006126 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80060ec:	6823      	ldr	r3, [r4, #0]
 80060ee:	4a13      	ldr	r2, [pc, #76]	@ (800613c <HAL_CRC_Init+0x70>)
 80060f0:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80060f2:	689a      	ldr	r2, [r3, #8]
 80060f4:	f022 0218 	bic.w	r2, r2, #24
 80060f8:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060fa:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80060fc:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80060fe:	b9d2      	cbnz	r2, 8006136 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006100:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006104:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8006106:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	6961      	ldr	r1, [r4, #20]
 800610c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006110:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006112:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006114:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006116:	689a      	ldr	r2, [r3, #8]
 8006118:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800611c:	430a      	orrs	r2, r1
 800611e:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006120:	2301      	movs	r3, #1
 8006122:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006124:	e7d6      	b.n	80060d4 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8006126:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800612a:	4620      	mov	r0, r4
 800612c:	f000 f808 	bl	8006140 <HAL_CRCEx_Polynomial_Set>
 8006130:	2800      	cmp	r0, #0
 8006132:	d0e2      	beq.n	80060fa <HAL_CRC_Init+0x2e>
 8006134:	e7cd      	b.n	80060d2 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006136:	6922      	ldr	r2, [r4, #16]
 8006138:	e7e4      	b.n	8006104 <HAL_CRC_Init+0x38>
 800613a:	bf00      	nop
 800613c:	04c11db7 	.word	0x04c11db7

08006140 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006140:	07cb      	lsls	r3, r1, #31
{
 8006142:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006144:	d50d      	bpl.n	8006162 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8006146:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8006148:	3b01      	subs	r3, #1
 800614a:	d31d      	bcc.n	8006188 <HAL_CRCEx_Polynomial_Set+0x48>
 800614c:	fa21 f403 	lsr.w	r4, r1, r3
 8006150:	07e4      	lsls	r4, r4, #31
 8006152:	d5f9      	bpl.n	8006148 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006154:	2a10      	cmp	r2, #16
 8006156:	d013      	beq.n	8006180 <HAL_CRCEx_Polynomial_Set+0x40>
 8006158:	2a10      	cmp	r2, #16
 800615a:	d804      	bhi.n	8006166 <HAL_CRCEx_Polynomial_Set+0x26>
 800615c:	b13a      	cbz	r2, 800616e <HAL_CRCEx_Polynomial_Set+0x2e>
 800615e:	2a08      	cmp	r2, #8
 8006160:	d010      	beq.n	8006184 <HAL_CRCEx_Polynomial_Set+0x44>
 8006162:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8006164:	e00b      	b.n	800617e <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8006166:	2a18      	cmp	r2, #24
 8006168:	d1fb      	bne.n	8006162 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800616a:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800616c:	d8f9      	bhi.n	8006162 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800616e:	6800      	ldr	r0, [r0, #0]
 8006170:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8006172:	6883      	ldr	r3, [r0, #8]
 8006174:	f023 0318 	bic.w	r3, r3, #24
 8006178:	4313      	orrs	r3, r2
 800617a:	6083      	str	r3, [r0, #8]
 800617c:	2000      	movs	r0, #0
}
 800617e:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8006180:	2b07      	cmp	r3, #7
 8006182:	e7f3      	b.n	800616c <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8006184:	2b0f      	cmp	r3, #15
 8006186:	e7f1      	b.n	800616c <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8006188:	2a10      	cmp	r2, #16
 800618a:	d1e5      	bne.n	8006158 <HAL_CRCEx_Polynomial_Set+0x18>
 800618c:	e7e9      	b.n	8006162 <HAL_CRCEx_Polynomial_Set+0x22>

0800618e <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800618e:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006190:	4604      	mov	r4, r0
 8006192:	2800      	cmp	r0, #0
 8006194:	d036      	beq.n	8006204 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006196:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800619a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800619e:	b91b      	cbnz	r3, 80061a8 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80061a0:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80061a4:	f7fa ff08 	bl	8000fb8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061a8:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061aa:	69e0      	ldr	r0, [r4, #28]
 80061ac:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80061ae:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061b2:	6823      	ldr	r3, [r4, #0]
 80061b4:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061b6:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 80061b8:	6819      	ldr	r1, [r3, #0]
 80061ba:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80061be:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80061c2:	430a      	orrs	r2, r1
 80061c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061c6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80061c8:	68a2      	ldr	r2, [r4, #8]
 80061ca:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80061ce:	4302      	orrs	r2, r0
 80061d0:	f021 0101 	bic.w	r1, r1, #1
 80061d4:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061d6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80061d8:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80061da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80061dc:	0c12      	lsrs	r2, r2, #16
 80061de:	0412      	lsls	r2, r2, #16
 80061e0:	430a      	orrs	r2, r1
 80061e2:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061e4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80061e6:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80061ea:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80061ee:	0552      	lsls	r2, r2, #21
 80061f0:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061f4:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80061f6:	430a      	orrs	r2, r1
 80061f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061fa:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80061fc:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80061fe:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8006202:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006204:	2001      	movs	r0, #1
 8006206:	e7fc      	b.n	8006202 <HAL_DMA2D_Init+0x74>

08006208 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006208:	4770      	bx	lr

0800620a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 800620a:	4770      	bx	lr

0800620c <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800620c:	6803      	ldr	r3, [r0, #0]
{
 800620e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006210:	685e      	ldr	r6, [r3, #4]
{
 8006212:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006214:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006216:	07f2      	lsls	r2, r6, #31
 8006218:	d514      	bpl.n	8006244 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 800621a:	05e9      	lsls	r1, r5, #23
 800621c:	d512      	bpl.n	8006244 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006224:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006226:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006228:	f042 0201 	orr.w	r2, r2, #1
 800622c:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800622e:	2201      	movs	r2, #1
 8006230:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006232:	2304      	movs	r3, #4
 8006234:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006238:	2300      	movs	r3, #0
 800623a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800623e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006240:	b103      	cbz	r3, 8006244 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006242:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006244:	06b2      	lsls	r2, r6, #26
 8006246:	d516      	bpl.n	8006276 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006248:	04ab      	lsls	r3, r5, #18
 800624a:	d514      	bpl.n	8006276 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 800624c:	6823      	ldr	r3, [r4, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006254:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006256:	2220      	movs	r2, #32
 8006258:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800625a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800625c:	f043 0302 	orr.w	r3, r3, #2
 8006260:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006262:	2304      	movs	r3, #4
 8006264:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006268:	2300      	movs	r3, #0
 800626a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 800626e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006270:	b10b      	cbz	r3, 8006276 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8006272:	4620      	mov	r0, r4
 8006274:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006276:	0730      	lsls	r0, r6, #28
 8006278:	d516      	bpl.n	80062a8 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 800627a:	0529      	lsls	r1, r5, #20
 800627c:	d514      	bpl.n	80062a8 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006286:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006288:	2208      	movs	r2, #8
 800628a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800628c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800628e:	f043 0304 	orr.w	r3, r3, #4
 8006292:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006294:	2304      	movs	r3, #4
 8006296:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 800629a:	2300      	movs	r3, #0
 800629c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 80062a0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80062a2:	b10b      	cbz	r3, 80062a8 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 80062a4:	4620      	mov	r0, r4
 80062a6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80062a8:	0772      	lsls	r2, r6, #29
 80062aa:	d50b      	bpl.n	80062c4 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 80062ac:	056b      	lsls	r3, r5, #21
 80062ae:	d509      	bpl.n	80062c4 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80062b0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80062b2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80062ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80062bc:	2204      	movs	r2, #4
 80062be:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 80062c0:	f7ff ffa2 	bl	8006208 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80062c4:	07b0      	lsls	r0, r6, #30
 80062c6:	d514      	bpl.n	80062f2 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 80062c8:	05a9      	lsls	r1, r5, #22
 80062ca:	d512      	bpl.n	80062f2 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80062d4:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80062d6:	2202      	movs	r2, #2
 80062d8:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80062da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80062dc:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80062de:	2301      	movs	r3, #1
 80062e0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 80062e4:	2300      	movs	r3, #0
 80062e6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 80062ea:	6a23      	ldr	r3, [r4, #32]
 80062ec:	b10b      	cbz	r3, 80062f2 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 80062ee:	4620      	mov	r0, r4
 80062f0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80062f2:	06f2      	lsls	r2, r6, #27
 80062f4:	d513      	bpl.n	800631e <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 80062f6:	04eb      	lsls	r3, r5, #19
 80062f8:	d511      	bpl.n	800631e <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80062fa:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80062fc:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006304:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006306:	2210      	movs	r2, #16
 8006308:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 800630a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800630c:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800630e:	2301      	movs	r3, #1
 8006310:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006314:	2300      	movs	r3, #0
 8006316:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800631a:	f7ff ff76 	bl	800620a <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 800631e:	bd70      	pop	{r4, r5, r6, pc}

08006320 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	4607      	mov	r7, r0
 8006326:	460d      	mov	r5, r1
 8006328:	4614      	mov	r4, r2
 800632a:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800632c:	f7ff fe02 	bl	8005f34 <HAL_GetTick>
 8006330:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006336:	07d2      	lsls	r2, r2, #31
 8006338:	d50a      	bpl.n	8006350 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800633a:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 800633e:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006340:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006342:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006346:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 800634a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006350:	f7ff fdf0 	bl	8005f34 <HAL_GetTick>
 8006354:	eba0 0008 	sub.w	r0, r0, r8
 8006358:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800635c:	d9e9      	bls.n	8006332 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 800635e:	2003      	movs	r0, #3
 8006360:	e7f4      	b.n	800634c <DSI_ShortWrite.constprop.0+0x2c>

08006362 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006362:	7c03      	ldrb	r3, [r0, #16]
{
 8006364:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006366:	2b01      	cmp	r3, #1
 8006368:	d05b      	beq.n	8006422 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 800636a:	6803      	ldr	r3, [r0, #0]
 800636c:	2000      	movs	r0, #0
 800636e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006372:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006376:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006378:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 800637a:	d507      	bpl.n	800638c <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 800637c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006380:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006384:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006388:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 800638c:	0788      	lsls	r0, r1, #30
 800638e:	d505      	bpl.n	800639c <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006390:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006394:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006398:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 800639c:	0748      	lsls	r0, r1, #29
 800639e:	d505      	bpl.n	80063ac <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 80063a0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063a4:	f040 0001 	orr.w	r0, r0, #1
 80063a8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 80063ac:	0708      	lsls	r0, r1, #28
 80063ae:	d505      	bpl.n	80063bc <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 80063b0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063b4:	f040 0002 	orr.w	r0, r0, #2
 80063b8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 80063bc:	06c8      	lsls	r0, r1, #27
 80063be:	d505      	bpl.n	80063cc <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 80063c0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063c4:	f040 000c 	orr.w	r0, r0, #12
 80063c8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 80063cc:	0688      	lsls	r0, r1, #26
 80063ce:	d505      	bpl.n	80063dc <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 80063d0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063d4:	f040 0010 	orr.w	r0, r0, #16
 80063d8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 80063dc:	0648      	lsls	r0, r1, #25
 80063de:	d505      	bpl.n	80063ec <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 80063e0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063e4:	f040 0020 	orr.w	r0, r0, #32
 80063e8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 80063ec:	0608      	lsls	r0, r1, #24
 80063ee:	d505      	bpl.n	80063fc <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 80063f0:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 80063f4:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 80063f8:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 80063fc:	05c8      	lsls	r0, r1, #23
 80063fe:	d505      	bpl.n	800640c <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006400:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006404:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006408:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800640c:	0589      	lsls	r1, r1, #22
 800640e:	d505      	bpl.n	800641c <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006410:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006414:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006418:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800641c:	2000      	movs	r0, #0
 800641e:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006420:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006422:	2002      	movs	r0, #2
}
 8006424:	4770      	bx	lr
	...

08006428 <HAL_DSI_Init>:
{
 8006428:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800642a:	460d      	mov	r5, r1
  if (hdsi == NULL)
 800642c:	4604      	mov	r4, r0
 800642e:	2800      	cmp	r0, #0
 8006430:	f000 80ea 	beq.w	8006608 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006434:	7c43      	ldrb	r3, [r0, #17]
 8006436:	b90b      	cbnz	r3, 800643c <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006438:	f7fa fde2 	bl	8001000 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 800643c:	2303      	movs	r3, #3
 800643e:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006440:	2300      	movs	r3, #0
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	6823      	ldr	r3, [r4, #0]
 8006446:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800644a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800644e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006452:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006456:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800645e:	f7ff fd69 	bl	8005f34 <HAL_GetTick>
 8006462:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006464:	6822      	ldr	r2, [r4, #0]
 8006466:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800646a:	04d9      	lsls	r1, r3, #19
 800646c:	d56e      	bpl.n	800654c <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800646e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006472:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006476:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800647a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800647e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006482:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006486:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006488:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800648c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800648e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006492:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006494:	430b      	orrs	r3, r1
 8006496:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800649a:	2300      	movs	r3, #0
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80064aa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80064ae:	f003 0301 	and.w	r3, r3, #1
 80064b2:	9301      	str	r3, [sp, #4]
 80064b4:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80064b6:	f7ff fd43 	bl	8005f40 <HAL_Delay>
  tickstart = HAL_GetTick();
 80064ba:	f7ff fd3b 	bl	8005f34 <HAL_GetTick>
 80064be:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80064c0:	6823      	ldr	r3, [r4, #0]
 80064c2:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80064c6:	05d2      	lsls	r2, r2, #23
 80064c8:	d548      	bpl.n	800655c <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 80064ca:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064cc:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 80064ce:	9202      	str	r2, [sp, #8]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	f042 0201 	orr.w	r2, r2, #1
 80064d6:	605a      	str	r2, [r3, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	f002 0201 	and.w	r2, r2, #1
 80064de:	9202      	str	r2, [sp, #8]
 80064e0:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80064e2:	689a      	ldr	r2, [r3, #8]
 80064e4:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80064e8:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064ea:	689a      	ldr	r2, [r3, #8]
 80064ec:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80064ee:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80064f0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80064f2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80064f6:	f042 0202 	orr.w	r2, r2, #2
 80064fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80064fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006502:	f042 0204 	orr.w	r2, r2, #4
 8006506:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800650a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800650e:	f022 0203 	bic.w	r2, r2, #3
 8006512:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006516:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800651a:	430a      	orrs	r2, r1
 800651c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8006520:	f7ff fd08 	bl	8005f34 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006524:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006526:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800652c:	079b      	lsls	r3, r3, #30
 800652e:	d025      	beq.n	800657c <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006536:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800653a:	2b94      	cmp	r3, #148	@ 0x94
 800653c:	d025      	beq.n	800658a <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800653e:	f7ff fcf9 	bl	8005f34 <HAL_GetTick>
 8006542:	1b80      	subs	r0, r0, r6
 8006544:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006548:	d9f2      	bls.n	8006530 <HAL_DSI_Init+0x108>
 800654a:	e014      	b.n	8006576 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800654c:	f7ff fcf2 	bl	8005f34 <HAL_GetTick>
 8006550:	1b80      	subs	r0, r0, r6
 8006552:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006556:	d985      	bls.n	8006464 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006558:	2003      	movs	r0, #3
 800655a:	e053      	b.n	8006604 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800655c:	f7ff fcea 	bl	8005f34 <HAL_GetTick>
 8006560:	1b80      	subs	r0, r0, r6
 8006562:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006566:	d9ab      	bls.n	80064c0 <HAL_DSI_Init+0x98>
 8006568:	e7f6      	b.n	8006558 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800656a:	f7ff fce3 	bl	8005f34 <HAL_GetTick>
 800656e:	1b80      	subs	r0, r0, r6
 8006570:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006574:	d902      	bls.n	800657c <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8006576:	2300      	movs	r3, #0
 8006578:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800657a:	e7ed      	b.n	8006558 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800657c:	6823      	ldr	r3, [r4, #0]
 800657e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006582:	f003 0314 	and.w	r3, r3, #20
 8006586:	2b14      	cmp	r3, #20
 8006588:	d1ef      	bne.n	800656a <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800658a:	686b      	ldr	r3, [r5, #4]
 800658c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8006590:	4a1e      	ldr	r2, [pc, #120]	@ (800660c <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8006592:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf38      	it	cc
 8006598:	2301      	movcc	r3, #1
 800659a:	435a      	muls	r2, r3
 800659c:	68ab      	ldr	r3, [r5, #8]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	409a      	lsls	r2, r3
 80065a4:	682b      	ldr	r3, [r5, #0]
 80065a6:	434b      	muls	r3, r1
 80065a8:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80065ac:	6823      	ldr	r3, [r4, #0]
 80065ae:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80065b2:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80065b6:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80065ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80065be:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80065c0:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80065c2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80065c6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80065ca:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80065ce:	9003      	str	r0, [sp, #12]
 80065d0:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80065d2:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80065d4:	f022 0201 	bic.w	r2, r2, #1
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	f002 0201 	and.w	r2, r2, #1
 80065e0:	9203      	str	r2, [sp, #12]
 80065e2:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80065e4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80065e8:	f022 0203 	bic.w	r2, r2, #3
 80065ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80065f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80065f4:	430a      	orrs	r2, r1
 80065f6:	f042 0201 	orr.w	r2, r2, #1
 80065fa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80065fe:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006600:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8006602:	7463      	strb	r3, [r4, #17]
}
 8006604:	b004      	add	sp, #16
 8006606:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006608:	2001      	movs	r0, #1
 800660a:	e7fb      	b.n	8006604 <HAL_DSI_Init+0x1dc>
 800660c:	003d0900 	.word	0x003d0900

08006610 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8006610:	4770      	bx	lr

08006612 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006612:	6803      	ldr	r3, [r0, #0]
 8006614:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006618:	07d1      	lsls	r1, r2, #31
{
 800661a:	b510      	push	{r4, lr}
 800661c:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800661e:	d508      	bpl.n	8006632 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006620:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006624:	07d2      	lsls	r2, r2, #31
 8006626:	d504      	bpl.n	8006632 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006628:	2201      	movs	r2, #1
 800662a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800662e:	f7fb fbe1 	bl	8001df4 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006632:	6823      	ldr	r3, [r4, #0]
 8006634:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006638:	0791      	lsls	r1, r2, #30
 800663a:	d509      	bpl.n	8006650 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 800663c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006640:	0792      	lsls	r2, r2, #30
 8006642:	d505      	bpl.n	8006650 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006644:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006646:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006648:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 800664c:	f7fb fc04 	bl	8001e58 <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8006650:	69a3      	ldr	r3, [r4, #24]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d04e      	beq.n	80066f4 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006656:	6821      	ldr	r1, [r4, #0]
 8006658:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800665c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8006660:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006662:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006666:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800666a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800666c:	b291      	uxth	r1, r2
 800666e:	b119      	cbz	r1, 8006678 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006670:	6961      	ldr	r1, [r4, #20]
 8006672:	f041 0101 	orr.w	r1, r1, #1
 8006676:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006678:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800667c:	d003      	beq.n	8006686 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800667e:	6962      	ldr	r2, [r4, #20]
 8006680:	f042 0202 	orr.w	r2, r2, #2
 8006684:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006686:	07d8      	lsls	r0, r3, #31
 8006688:	d503      	bpl.n	8006692 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800668a:	6962      	ldr	r2, [r4, #20]
 800668c:	f042 0204 	orr.w	r2, r2, #4
 8006690:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006692:	0799      	lsls	r1, r3, #30
 8006694:	d503      	bpl.n	800669e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006696:	6962      	ldr	r2, [r4, #20]
 8006698:	f042 0208 	orr.w	r2, r2, #8
 800669c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800669e:	f013 0f0c 	tst.w	r3, #12
 80066a2:	d003      	beq.n	80066ac <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80066a4:	6962      	ldr	r2, [r4, #20]
 80066a6:	f042 0210 	orr.w	r2, r2, #16
 80066aa:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80066ac:	06da      	lsls	r2, r3, #27
 80066ae:	d503      	bpl.n	80066b8 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80066b0:	6962      	ldr	r2, [r4, #20]
 80066b2:	f042 0220 	orr.w	r2, r2, #32
 80066b6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80066b8:	0698      	lsls	r0, r3, #26
 80066ba:	d503      	bpl.n	80066c4 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80066bc:	6962      	ldr	r2, [r4, #20]
 80066be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066c2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80066c4:	0659      	lsls	r1, r3, #25
 80066c6:	d503      	bpl.n	80066d0 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80066c8:	6962      	ldr	r2, [r4, #20]
 80066ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80066ce:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80066d0:	061a      	lsls	r2, r3, #24
 80066d2:	d503      	bpl.n	80066dc <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80066d4:	6962      	ldr	r2, [r4, #20]
 80066d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80066da:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80066dc:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80066e0:	d003      	beq.n	80066ea <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80066e2:	6963      	ldr	r3, [r4, #20]
 80066e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80066e8:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80066ea:	6963      	ldr	r3, [r4, #20]
 80066ec:	b113      	cbz	r3, 80066f4 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80066ee:	4620      	mov	r0, r4
 80066f0:	f7ff ff8e 	bl	8006610 <HAL_DSI_ErrorCallback>
}
 80066f4:	bd10      	pop	{r4, pc}

080066f6 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80066f6:	7c02      	ldrb	r2, [r0, #16]
{
 80066f8:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80066fa:	2a01      	cmp	r2, #1
 80066fc:	d00a      	beq.n	8006714 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80066fe:	6802      	ldr	r2, [r0, #0]
 8006700:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006702:	f020 0003 	bic.w	r0, r0, #3
 8006706:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006708:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800670a:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800670c:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800670e:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8006710:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006712:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006714:	2002      	movs	r0, #2
}
 8006716:	4770      	bx	lr

08006718 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006718:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800671a:	7c03      	ldrb	r3, [r0, #16]
{
 800671c:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800671e:	2b01      	cmp	r3, #1
 8006720:	d069      	beq.n	80067f6 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006722:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006724:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006726:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006728:	f042 0201 	orr.w	r2, r2, #1
 800672c:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800672e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006732:	f022 0201 	bic.w	r2, r2, #1
 8006736:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 800673a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800673e:	f042 0201 	orr.w	r2, r2, #1
 8006742:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006746:	68da      	ldr	r2, [r3, #12]
 8006748:	f022 0203 	bic.w	r2, r2, #3
 800674c:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800674e:	68da      	ldr	r2, [r3, #12]
 8006750:	4302      	orrs	r2, r0
 8006752:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	f022 0207 	bic.w	r2, r2, #7
 800675a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800675c:	6958      	ldr	r0, [r3, #20]
 800675e:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006762:	432a      	orrs	r2, r5
 8006764:	694d      	ldr	r5, [r1, #20]
 8006766:	432a      	orrs	r2, r5
 8006768:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800676a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800676c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800676e:	691a      	ldr	r2, [r3, #16]
 8006770:	f022 020f 	bic.w	r2, r2, #15
 8006774:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006776:	691a      	ldr	r2, [r3, #16]
 8006778:	4302      	orrs	r2, r0
 800677a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800677c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006780:	f022 020e 	bic.w	r2, r2, #14
 8006784:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006788:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800678c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006790:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006792:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006796:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006798:	0c12      	lsrs	r2, r2, #16
 800679a:	0412      	lsls	r2, r2, #16
 800679c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800679e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80067a0:	4302      	orrs	r2, r0
 80067a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80067a4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80067a8:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80067ac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80067b0:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80067b4:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80067b8:	432a      	orrs	r2, r5
 80067ba:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80067bc:	432a      	orrs	r2, r5
 80067be:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80067c0:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80067c2:	432a      	orrs	r2, r5
 80067c4:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80067c6:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80067c8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80067cc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80067ce:	f022 0201 	bic.w	r2, r2, #1
 80067d2:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80067d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80067d6:	430a      	orrs	r2, r1
 80067d8:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80067da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80067e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80067ea:	f042 0202 	orr.w	r2, r2, #2
 80067ee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80067f2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80067f4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80067f6:	2002      	movs	r0, #2
 80067f8:	e7fc      	b.n	80067f4 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080067fc <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80067fc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80067fe:	7c03      	ldrb	r3, [r0, #16]
{
 8006800:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006802:	2b01      	cmp	r3, #1
 8006804:	d029      	beq.n	800685a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006806:	6800      	ldr	r0, [r0, #0]
 8006808:	4b15      	ldr	r3, [pc, #84]	@ (8006860 <HAL_DSI_ConfigCommand+0x64>)
 800680a:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800680c:	4023      	ands	r3, r4
 800680e:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006810:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006812:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006816:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006818:	688d      	ldr	r5, [r1, #8]
 800681a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 800681c:	68cd      	ldr	r5, [r1, #12]
 800681e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8006820:	690d      	ldr	r5, [r1, #16]
 8006822:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8006824:	694d      	ldr	r5, [r1, #20]
 8006826:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8006828:	698d      	ldr	r5, [r1, #24]
 800682a:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 800682c:	69cd      	ldr	r5, [r1, #28]
 800682e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8006830:	6a0d      	ldr	r5, [r1, #32]
 8006832:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8006834:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006836:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8006838:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800683a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 800683c:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800683e:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8006840:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006842:	4323      	orrs	r3, r4
 8006844:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8006846:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006848:	f023 0302 	bic.w	r3, r3, #2
 800684c:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800684e:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8006850:	430b      	orrs	r3, r1
 8006852:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006854:	2000      	movs	r0, #0
 8006856:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8006858:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800685a:	2002      	movs	r0, #2
 800685c:	e7fc      	b.n	8006858 <HAL_DSI_ConfigCommand+0x5c>
 800685e:	bf00      	nop
 8006860:	fef080ff 	.word	0xfef080ff

08006864 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006864:	7c02      	ldrb	r2, [r0, #16]
{
 8006866:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006868:	2a01      	cmp	r2, #1
 800686a:	d00a      	beq.n	8006882 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800686c:	6802      	ldr	r2, [r0, #0]
 800686e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006870:	f020 001f 	bic.w	r0, r0, #31
 8006874:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8006876:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8006878:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800687a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800687c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800687e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006880:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006882:	2002      	movs	r0, #2
}
 8006884:	4770      	bx	lr

08006886 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8006886:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006888:	7c03      	ldrb	r3, [r0, #16]
{
 800688a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800688c:	2b01      	cmp	r3, #1
 800688e:	d034      	beq.n	80068fa <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8006890:	e9d1 0300 	ldrd	r0, r3, [r1]
 8006894:	4298      	cmp	r0, r3
 8006896:	bf38      	it	cc
 8006898:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80068a0:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80068a4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80068a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80068ac:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80068b0:	4302      	orrs	r2, r0
 80068b2:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80068b6:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80068ba:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80068be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80068c2:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80068c6:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80068ca:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80068cc:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80068d0:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80068d2:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80068d4:	432a      	orrs	r2, r5
 80068d6:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80068d8:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80068da:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80068de:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80068e2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80068e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80068ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80068ee:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80068f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80068f6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80068f8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80068fa:	2002      	movs	r0, #2
 80068fc:	e7fc      	b.n	80068f8 <HAL_DSI_ConfigPhyTimer+0x72>
	...

08006900 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 8006900:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006902:	7c03      	ldrb	r3, [r0, #16]
{
 8006904:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006906:	2b01      	cmp	r3, #1
 8006908:	d05b      	beq.n	80069c2 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800690a:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800690c:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800690e:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006910:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8006912:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8006916:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006918:	689a      	ldr	r2, [r3, #8]
 800691a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800691e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8006920:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8006922:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8006924:	b292      	uxth	r2, r2
 8006926:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8006928:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800692a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800692e:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8006930:	4a25      	ldr	r2, [pc, #148]	@ (80069c8 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8006932:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8006934:	4010      	ands	r0, r2
 8006936:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8006938:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800693a:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800693c:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800693e:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8006940:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006942:	4010      	ands	r0, r2
 8006944:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8006946:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8006948:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800694a:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800694c:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800694e:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006952:	4010      	ands	r0, r2
 8006954:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006958:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800695c:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800695e:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8006960:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8006964:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006968:	4010      	ands	r0, r2
 800696a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800696e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006972:	4328      	orrs	r0, r5
 8006974:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8006978:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800697c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006980:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006984:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8006988:	698d      	ldr	r5, [r1, #24]
 800698a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800698c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800698e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8006990:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8006994:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8006998:	4010      	ands	r0, r2
 800699a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800699e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80069a2:	4328      	orrs	r0, r5
 80069a4:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80069a8:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80069ac:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069ae:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80069b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80069b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80069b8:	430a      	orrs	r2, r1
 80069ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80069be:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80069c0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80069c2:	2002      	movs	r0, #2
 80069c4:	e7fc      	b.n	80069c0 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80069c6:	bf00      	nop
 80069c8:	ffff0000 	.word	0xffff0000

080069cc <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80069cc:	7c03      	ldrb	r3, [r0, #16]
{
 80069ce:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d01c      	beq.n	8006a0e <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80069d4:	6802      	ldr	r2, [r0, #0]
 80069d6:	2300      	movs	r3, #0
 80069d8:	9300      	str	r3, [sp, #0]
 80069da:	6851      	ldr	r1, [r2, #4]
 80069dc:	f041 0101 	orr.w	r1, r1, #1
 80069e0:	6051      	str	r1, [r2, #4]
 80069e2:	6851      	ldr	r1, [r2, #4]
 80069e4:	f001 0101 	and.w	r1, r1, #1
 80069e8:	9100      	str	r1, [sp, #0]
 80069ea:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80069ec:	9301      	str	r3, [sp, #4]
 80069ee:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80069f2:	f041 0108 	orr.w	r1, r1, #8
 80069f6:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80069fa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80069fe:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 8006a00:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8006a02:	f002 0208 	and.w	r2, r2, #8
 8006a06:	9201      	str	r2, [sp, #4]
 8006a08:	9a01      	ldr	r2, [sp, #4]
}
 8006a0a:	b002      	add	sp, #8
 8006a0c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a0e:	2002      	movs	r0, #2
 8006a10:	e7fb      	b.n	8006a0a <HAL_DSI_Start+0x3e>

08006a12 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a12:	7c02      	ldrb	r2, [r0, #16]
{
 8006a14:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006a16:	2a01      	cmp	r2, #1
 8006a18:	d009      	beq.n	8006a2e <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006a1a:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a1c:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8006a1e:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8006a22:	f042 0204 	orr.w	r2, r2, #4
 8006a26:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8006a2a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006a2c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006a2e:	2002      	movs	r0, #2
}
 8006a30:	4770      	bx	lr

08006a32 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8006a32:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a34:	7c05      	ldrb	r5, [r0, #16]
{
 8006a36:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006a38:	2d01      	cmp	r5, #1
 8006a3a:	d009      	beq.n	8006a50 <HAL_DSI_ShortWrite+0x1e>
 8006a3c:	2501      	movs	r5, #1
 8006a3e:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8006a40:	9d06      	ldr	r5, [sp, #24]
 8006a42:	9500      	str	r5, [sp, #0]
 8006a44:	f7ff fc6c 	bl	8006320 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	7423      	strb	r3, [r4, #16]

  return status;
}
 8006a4c:	b003      	add	sp, #12
 8006a4e:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006a50:	2002      	movs	r0, #2
 8006a52:	e7fb      	b.n	8006a4c <HAL_DSI_ShortWrite+0x1a>

08006a54 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8006a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a58:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006a5a:	7c03      	ldrb	r3, [r0, #16]
{
 8006a5c:	4606      	mov	r6, r0
 8006a5e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8006a60:	2b01      	cmp	r3, #1
{
 8006a62:	4615      	mov	r5, r2
 8006a64:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8006a68:	d052      	beq.n	8006b10 <HAL_DSI_LongWrite+0xbc>
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a6e:	f7ff fa61 	bl	8005f34 <HAL_GetTick>
 8006a72:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006a74:	6832      	ldr	r2, [r6, #0]
 8006a76:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006a78:	f013 0a01 	ands.w	sl, r3, #1
 8006a7c:	d019      	beq.n	8006ab2 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006a7e:	2c03      	cmp	r4, #3
 8006a80:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8006a82:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8006a86:	bf28      	it	cs
 8006a88:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8006a8a:	4283      	cmp	r3, r0
 8006a8c:	d11d      	bne.n	8006aca <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8006a8e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8006a90:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8006a92:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8006a96:	bb10      	cbnz	r0, 8006ade <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8006a98:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006a9a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8006a9e:	0223      	lsls	r3, r4, #8
 8006aa0:	0224      	lsls	r4, r4, #8
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8006aa8:	431d      	orrs	r5, r3
 8006aaa:	4325      	orrs	r5, r4
 8006aac:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006aae:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8006ab0:	e009      	b.n	8006ac6 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006ab2:	f7ff fa3f 	bl	8005f34 <HAL_GetTick>
 8006ab6:	eba0 000b 	sub.w	r0, r0, fp
 8006aba:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006abe:	d9d9      	bls.n	8006a74 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8006ac0:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006ac2:	f886 a010 	strb.w	sl, [r6, #16]
}
 8006ac6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 8006aca:	f818 1003 	ldrb.w	r1, [r8, r3]
 8006ace:	3301      	adds	r3, #1
 8006ad0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8006ad4:	fa01 f10c 	lsl.w	r1, r1, ip
 8006ad8:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 8006adc:	e7d5      	b.n	8006a8a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ade:	2804      	cmp	r0, #4
    fifoword = 0U;
 8006ae0:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ae4:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8006ae6:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8006ae8:	bf28      	it	cs
 8006aea:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006aee:	f813 8001 	ldrb.w	r8, [r3, r1]
 8006af2:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8006af6:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006af8:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8006afc:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8006afe:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 8006b02:	d1f4      	bne.n	8006aee <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8006b04:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8006b08:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8006b0a:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 8006b0e:	e7c2      	b.n	8006a96 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 8006b10:	2002      	movs	r0, #2
 8006b12:	e7d8      	b.n	8006ac6 <HAL_DSI_LongWrite+0x72>

08006b14 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8006b14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b18:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b1a:	7c03      	ldrb	r3, [r0, #16]
{
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8006b20:	2b01      	cmp	r3, #1
{
 8006b22:	4617      	mov	r7, r2
 8006b24:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006b28:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8006b2c:	d06f      	beq.n	8006c0e <HAL_DSI_Read+0xfa>
 8006b2e:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8006b30:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8006b32:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8006b34:	d90d      	bls.n	8006b52 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8006b36:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8006b3a:	2237      	movs	r2, #55	@ 0x37
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	b2f3      	uxtb	r3, r6
 8006b40:	f7ff fbee 	bl	8006320 <DSI_ShortWrite.constprop.0>
 8006b44:	b128      	cbz	r0, 8006b52 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8006b46:	2300      	movs	r3, #0

      return HAL_ERROR;
 8006b48:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8006b4a:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8006b4c:	b003      	add	sp, #12
 8006b4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8006b52:	f1b9 0f06 	cmp.w	r9, #6
 8006b56:	d10f      	bne.n	8006b78 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8006b5a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b5c:	021b      	lsls	r3, r3, #8
 8006b5e:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8006b62:	f043 0306 	orr.w	r3, r3, #6
 8006b66:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8006b68:	f7ff f9e4 	bl	8005f34 <HAL_GetTick>
 8006b6c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8006b6e:	2e00      	cmp	r6, #0
 8006b70:	dc27      	bgt.n	8006bc2 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8006b72:	2000      	movs	r0, #0
 8006b74:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8006b76:	e7e9      	b.n	8006b4c <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8006b78:	f1b9 0f04 	cmp.w	r9, #4
 8006b7c:	d105      	bne.n	8006b8a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b7e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8006b80:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b82:	f044 0404 	orr.w	r4, r4, #4
 8006b86:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006b88:	e7ee      	b.n	8006b68 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8006b8a:	f1b9 0f14 	cmp.w	r9, #20
 8006b8e:	d108      	bne.n	8006ba2 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006b90:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b94:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8006b96:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006b98:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006b9c:	f044 0414 	orr.w	r4, r4, #20
 8006ba0:	e7f1      	b.n	8006b86 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8006ba2:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8006ba6:	d1ce      	bne.n	8006b46 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006ba8:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006bac:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006bae:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006bb0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8006bb4:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8006bb8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8006bbc:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8006bc0:	e7e1      	b.n	8006b86 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8006bc2:	682a      	ldr	r2, [r5, #0]
 8006bc4:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8006bc6:	f013 0310 	ands.w	r3, r3, #16
 8006bca:	d10d      	bne.n	8006be8 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006bcc:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 8006bce:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8006bd0:	4632      	mov	r2, r6
 8006bd2:	bf28      	it	cs
 8006bd4:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8006bd6:	00d9      	lsls	r1, r3, #3
 8006bd8:	fa20 f101 	lsr.w	r1, r0, r1
 8006bdc:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 8006bde:	3301      	adds	r3, #1
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d1f8      	bne.n	8006bd6 <HAL_DSI_Read+0xc2>
        pdata++;
 8006be4:	4417      	add	r7, r2
        datasize--;
 8006be6:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006be8:	f7ff f9a4 	bl	8005f34 <HAL_GetTick>
 8006bec:	1b00      	subs	r0, r0, r4
 8006bee:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006bf2:	d903      	bls.n	8006bfc <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8006bf4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8006bf6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8006bf8:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8006bfa:	e7a7      	b.n	8006b4c <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8006bfc:	682b      	ldr	r3, [r5, #0]
 8006bfe:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006c00:	0652      	lsls	r2, r2, #25
 8006c02:	d4b4      	bmi.n	8006b6e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8006c04:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006c08:	069b      	lsls	r3, r3, #26
 8006c0a:	d49c      	bmi.n	8006b46 <HAL_DSI_Read+0x32>
 8006c0c:	e7af      	b.n	8006b6e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 8006c0e:	2002      	movs	r0, #2
 8006c10:	e79c      	b.n	8006b4c <HAL_DSI_Read+0x38>

08006c12 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006c12:	7c02      	ldrb	r2, [r0, #16]
{
 8006c14:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006c16:	2a01      	cmp	r2, #1
 8006c18:	d00f      	beq.n	8006c3a <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8006c1a:	6802      	ldr	r2, [r0, #0]
 8006c1c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006c20:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8006c24:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006c28:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8006c2c:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006c30:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8006c32:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8006c36:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006c38:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c3a:	2002      	movs	r0, #2
}
 8006c3c:	4770      	bx	lr
	...

08006c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006c44:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c46:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8006e0c <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006c4a:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006c4e:	680a      	ldr	r2, [r1, #0]
 8006c50:	fa32 f503 	lsrs.w	r5, r2, r3
 8006c54:	d102      	bne.n	8006c5c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8006c56:	b003      	add	sp, #12
 8006c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006c5c:	2501      	movs	r5, #1
 8006c5e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8006c62:	ea18 0202 	ands.w	r2, r8, r2
 8006c66:	f000 80bb 	beq.w	8006de0 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c6a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c6c:	2703      	movs	r7, #3
 8006c6e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c72:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c76:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c7a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c7c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c80:	2f01      	cmp	r7, #1
 8006c82:	d834      	bhi.n	8006cee <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8006c84:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006c86:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c8a:	68cf      	ldr	r7, [r1, #12]
 8006c8c:	fa07 f70e 	lsl.w	r7, r7, lr
 8006c90:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8006c94:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8006c96:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006c98:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006c9c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8006ca0:	409f      	lsls	r7, r3
 8006ca2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8006ca6:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8006ca8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006caa:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006cac:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cb0:	688f      	ldr	r7, [r1, #8]
 8006cb2:	fa07 f70e 	lsl.w	r7, r7, lr
 8006cb6:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 8006cba:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cbc:	d119      	bne.n	8006cf2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 8006cbe:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cc2:	f003 0a07 	and.w	sl, r3, #7
 8006cc6:	f04f 0b0f 	mov.w	fp, #15
 8006cca:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8006cce:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8006cd2:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006cd6:	fa0b fb0a 	lsl.w	fp, fp, sl
 8006cda:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006cde:	690f      	ldr	r7, [r1, #16]
 8006ce0:	fa07 f70a 	lsl.w	r7, r7, sl
 8006ce4:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8006ce8:	f8c8 7020 	str.w	r7, [r8, #32]
 8006cec:	e001      	b.n	8006cf2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cee:	2d03      	cmp	r5, #3
 8006cf0:	d1da      	bne.n	8006ca8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8006cf2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006cf4:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006cf8:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006cfc:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d00:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8006d04:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d06:	d06b      	beq.n	8006de0 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d08:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8006d0c:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d10:	f003 0c03 	and.w	ip, r3, #3
 8006d14:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d18:	f045 0502 	orr.w	r5, r5, #2
 8006d1c:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d20:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d24:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8006d28:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006d2c:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d30:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d34:	f005 0502 	and.w	r5, r5, #2
 8006d38:	9501      	str	r5, [sp, #4]
 8006d3a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006d3c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006d3e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d42:	4d31      	ldr	r5, [pc, #196]	@ (8006e08 <HAL_GPIO_Init+0x1c8>)
 8006d44:	42a8      	cmp	r0, r5
 8006d46:	d04d      	beq.n	8006de4 <HAL_GPIO_Init+0x1a4>
 8006d48:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d4c:	42a8      	cmp	r0, r5
 8006d4e:	d04b      	beq.n	8006de8 <HAL_GPIO_Init+0x1a8>
 8006d50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d54:	42a8      	cmp	r0, r5
 8006d56:	d049      	beq.n	8006dec <HAL_GPIO_Init+0x1ac>
 8006d58:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d5c:	42a8      	cmp	r0, r5
 8006d5e:	d047      	beq.n	8006df0 <HAL_GPIO_Init+0x1b0>
 8006d60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d64:	42a8      	cmp	r0, r5
 8006d66:	d045      	beq.n	8006df4 <HAL_GPIO_Init+0x1b4>
 8006d68:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d6c:	42a8      	cmp	r0, r5
 8006d6e:	d043      	beq.n	8006df8 <HAL_GPIO_Init+0x1b8>
 8006d70:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d74:	42a8      	cmp	r0, r5
 8006d76:	d041      	beq.n	8006dfc <HAL_GPIO_Init+0x1bc>
 8006d78:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d7c:	42a8      	cmp	r0, r5
 8006d7e:	d03f      	beq.n	8006e00 <HAL_GPIO_Init+0x1c0>
 8006d80:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d84:	42a8      	cmp	r0, r5
 8006d86:	d03d      	beq.n	8006e04 <HAL_GPIO_Init+0x1c4>
 8006d88:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006d8c:	42a8      	cmp	r0, r5
 8006d8e:	bf14      	ite	ne
 8006d90:	250a      	movne	r5, #10
 8006d92:	2509      	moveq	r5, #9
 8006d94:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006d98:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006d9c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006da0:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8006da2:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8006da6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8006da8:	bf0c      	ite	eq
 8006daa:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006dac:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006dae:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8006db2:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8006db4:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8006db6:	bf0c      	ite	eq
 8006db8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006dba:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006dbc:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8006dc0:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8006dc2:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8006dc6:	bf0c      	ite	eq
 8006dc8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8006dca:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006dcc:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 8006dce:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8006dd2:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8006dd6:	bf54      	ite	pl
 8006dd8:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8006dda:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 8006ddc:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8006de0:	3301      	adds	r3, #1
 8006de2:	e734      	b.n	8006c4e <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006de4:	2500      	movs	r5, #0
 8006de6:	e7d5      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006de8:	2501      	movs	r5, #1
 8006dea:	e7d3      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006dec:	2502      	movs	r5, #2
 8006dee:	e7d1      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006df0:	2503      	movs	r5, #3
 8006df2:	e7cf      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006df4:	2504      	movs	r5, #4
 8006df6:	e7cd      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006df8:	2505      	movs	r5, #5
 8006dfa:	e7cb      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006dfc:	2506      	movs	r5, #6
 8006dfe:	e7c9      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006e00:	2507      	movs	r5, #7
 8006e02:	e7c7      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006e04:	2508      	movs	r5, #8
 8006e06:	e7c5      	b.n	8006d94 <HAL_GPIO_Init+0x154>
 8006e08:	58020000 	.word	0x58020000
 8006e0c:	58024400 	.word	0x58024400

08006e10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8006e14:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006e16:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006e1a:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006e1e:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006e22:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8006e26:	fa31 f302 	lsrs.w	r3, r1, r2
 8006e2a:	d101      	bne.n	8006e30 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8006e30:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8006e34:	ea1c 0601 	ands.w	r6, ip, r1
 8006e38:	d070      	beq.n	8006f1c <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e3a:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006e3e:	f002 0703 	and.w	r7, r2, #3
 8006e42:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8006e46:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8006e48:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8006e4c:	fa08 f907 	lsl.w	r9, r8, r7
 8006e50:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006e54:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006e58:	4b3a      	ldr	r3, [pc, #232]	@ (8006f44 <HAL_GPIO_DeInit+0x134>)
 8006e5a:	4298      	cmp	r0, r3
 8006e5c:	d060      	beq.n	8006f20 <HAL_GPIO_DeInit+0x110>
 8006e5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e62:	4298      	cmp	r0, r3
 8006e64:	d05e      	beq.n	8006f24 <HAL_GPIO_DeInit+0x114>
 8006e66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e6a:	4298      	cmp	r0, r3
 8006e6c:	d05c      	beq.n	8006f28 <HAL_GPIO_DeInit+0x118>
 8006e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e72:	4298      	cmp	r0, r3
 8006e74:	d05a      	beq.n	8006f2c <HAL_GPIO_DeInit+0x11c>
 8006e76:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e7a:	4298      	cmp	r0, r3
 8006e7c:	d058      	beq.n	8006f30 <HAL_GPIO_DeInit+0x120>
 8006e7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e82:	4298      	cmp	r0, r3
 8006e84:	d056      	beq.n	8006f34 <HAL_GPIO_DeInit+0x124>
 8006e86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e8a:	4298      	cmp	r0, r3
 8006e8c:	d054      	beq.n	8006f38 <HAL_GPIO_DeInit+0x128>
 8006e8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e92:	4298      	cmp	r0, r3
 8006e94:	d052      	beq.n	8006f3c <HAL_GPIO_DeInit+0x12c>
 8006e96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e9a:	4298      	cmp	r0, r3
 8006e9c:	d050      	beq.n	8006f40 <HAL_GPIO_DeInit+0x130>
 8006e9e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006ea2:	4298      	cmp	r0, r3
 8006ea4:	bf0c      	ite	eq
 8006ea6:	2309      	moveq	r3, #9
 8006ea8:	230a      	movne	r3, #10
 8006eaa:	40bb      	lsls	r3, r7
 8006eac:	4573      	cmp	r3, lr
 8006eae:	d117      	bne.n	8006ee0 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8006eb0:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8006eb4:	ea23 0306 	bic.w	r3, r3, r6
 8006eb8:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8006ebc:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8006ec0:	ea23 0306 	bic.w	r3, r3, r6
 8006ec4:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	ea23 0306 	bic.w	r3, r3, r6
 8006ece:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8006ed0:	6823      	ldr	r3, [r4, #0]
 8006ed2:	ea23 0306 	bic.w	r3, r3, r6
 8006ed6:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8006ed8:	68ab      	ldr	r3, [r5, #8]
 8006eda:	ea23 0309 	bic.w	r3, r3, r9
 8006ede:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006ee0:	0053      	lsls	r3, r2, #1
 8006ee2:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006ee4:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8006ee6:	fa0b f303 	lsl.w	r3, fp, r3
 8006eea:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8006eee:	431d      	orrs	r5, r3
 8006ef0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8006ef2:	f002 0507 	and.w	r5, r2, #7
 8006ef6:	6a37      	ldr	r7, [r6, #32]
 8006ef8:	00ad      	lsls	r5, r5, #2
 8006efa:	fa08 f505 	lsl.w	r5, r8, r5
 8006efe:	ea27 0705 	bic.w	r7, r7, r5
 8006f02:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006f04:	68c5      	ldr	r5, [r0, #12]
 8006f06:	ea25 0503 	bic.w	r5, r5, r3
 8006f0a:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8006f0c:	6845      	ldr	r5, [r0, #4]
 8006f0e:	ea25 050c 	bic.w	r5, r5, ip
 8006f12:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f14:	6885      	ldr	r5, [r0, #8]
 8006f16:	ea25 0303 	bic.w	r3, r5, r3
 8006f1a:	6083      	str	r3, [r0, #8]
    position++;
 8006f1c:	3201      	adds	r2, #1
 8006f1e:	e782      	b.n	8006e26 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8006f20:	2300      	movs	r3, #0
 8006f22:	e7c2      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f24:	2301      	movs	r3, #1
 8006f26:	e7c0      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f28:	2302      	movs	r3, #2
 8006f2a:	e7be      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e7bc      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f30:	2304      	movs	r3, #4
 8006f32:	e7ba      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f34:	2305      	movs	r3, #5
 8006f36:	e7b8      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f38:	2306      	movs	r3, #6
 8006f3a:	e7b6      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f3c:	2307      	movs	r3, #7
 8006f3e:	e7b4      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f40:	2308      	movs	r3, #8
 8006f42:	e7b2      	b.n	8006eaa <HAL_GPIO_DeInit+0x9a>
 8006f44:	58020000 	.word	0x58020000

08006f48 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006f48:	6903      	ldr	r3, [r0, #16]
 8006f4a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006f4c:	bf14      	ite	ne
 8006f4e:	2001      	movne	r0, #1
 8006f50:	2000      	moveq	r0, #0
 8006f52:	4770      	bx	lr

08006f54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006f54:	b10a      	cbz	r2, 8006f5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f56:	6181      	str	r1, [r0, #24]
  }
}
 8006f58:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006f5a:	0409      	lsls	r1, r1, #16
 8006f5c:	e7fb      	b.n	8006f56 <HAL_GPIO_WritePin+0x2>

08006f5e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f5e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f60:	ea01 0203 	and.w	r2, r1, r3
 8006f64:	ea21 0103 	bic.w	r1, r1, r3
 8006f68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006f6c:	6181      	str	r1, [r0, #24]
}
 8006f6e:	4770      	bx	lr

08006f70 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006f70:	4b04      	ldr	r3, [pc, #16]	@ (8006f84 <HAL_HSEM_FastTake+0x14>)
 8006f72:	3020      	adds	r0, #32
 8006f74:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8006f78:	4b03      	ldr	r3, [pc, #12]	@ (8006f88 <HAL_HSEM_FastTake+0x18>)
 8006f7a:	1ac0      	subs	r0, r0, r3
 8006f7c:	bf18      	it	ne
 8006f7e:	2001      	movne	r0, #1
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	58026400 	.word	0x58026400
 8006f88:	80000300 	.word	0x80000300

08006f8c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006f8c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8006f90:	4b01      	ldr	r3, [pc, #4]	@ (8006f98 <HAL_HSEM_Release+0xc>)
 8006f92:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8006f96:	4770      	bx	lr
 8006f98:	58026400 	.word	0x58026400

08006f9c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006f9c:	6803      	ldr	r3, [r0, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	0791      	lsls	r1, r2, #30
 8006fa2:	d501      	bpl.n	8006fa8 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fa8:	699a      	ldr	r2, [r3, #24]
 8006faa:	07d2      	lsls	r2, r2, #31
 8006fac:	d403      	bmi.n	8006fb6 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	f042 0201 	orr.w	r2, r2, #1
 8006fb4:	619a      	str	r2, [r3, #24]
  }
}
 8006fb6:	4770      	bx	lr

08006fb8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006fb8:	b530      	push	{r4, r5, lr}
 8006fba:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fbc:	f3c1 0109 	ubfx	r1, r1, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fc0:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fc2:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fc4:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fca:	4a05      	ldr	r2, [pc, #20]	@ (8006fe0 <I2C_TransferConfig+0x28>)
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fcc:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fce:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006fd2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8006fd6:	ea20 0002 	bic.w	r0, r0, r2
 8006fda:	4303      	orrs	r3, r0
 8006fdc:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006fde:	bd30      	pop	{r4, r5, pc}
 8006fe0:	03ff63ff 	.word	0x03ff63ff

08006fe4 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fe4:	6803      	ldr	r3, [r0, #0]
{
 8006fe6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8006fea:	699c      	ldr	r4, [r3, #24]
{
 8006fec:	4605      	mov	r5, r0
 8006fee:	460f      	mov	r7, r1
 8006ff0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006ff2:	f014 0410 	ands.w	r4, r4, #16
 8006ff6:	d06f      	beq.n	80070d8 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8006ff8:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ffa:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ffe:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007000:	682b      	ldr	r3, [r5, #0]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	0690      	lsls	r0, r2, #26
 8007006:	d461      	bmi.n	80070cc <I2C_IsErrorOccurred+0xe8>
 8007008:	f1b8 0f00 	cmp.w	r8, #0
 800700c:	d035      	beq.n	800707a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 800700e:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8007012:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007014:	682e      	ldr	r6, [r5, #0]
 8007016:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007018:	05d9      	lsls	r1, r3, #23
 800701a:	d505      	bpl.n	8007028 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800701c:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007020:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007024:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007026:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007028:	055a      	lsls	r2, r3, #21
 800702a:	d505      	bpl.n	8007038 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800702c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007030:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007034:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007036:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007038:	059b      	lsls	r3, r3, #22
 800703a:	d54f      	bpl.n	80070dc <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800703c:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007040:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007044:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007046:	4628      	mov	r0, r5
 8007048:	f7ff ffa8 	bl	8006f9c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 800704c:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 800704e:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007050:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007054:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007058:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 800705c:	f023 0301 	bic.w	r3, r3, #1
 8007060:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007062:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007064:	4323      	orrs	r3, r4
 8007066:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007068:	2320      	movs	r3, #32
 800706a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800706e:	2300      	movs	r3, #0
 8007070:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007074:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007078:	e032      	b.n	80070e0 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800707a:	1c7a      	adds	r2, r7, #1
 800707c:	d0c1      	beq.n	8007002 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800707e:	f7fe ff59 	bl	8005f34 <HAL_GetTick>
 8007082:	1b80      	subs	r0, r0, r6
 8007084:	42b8      	cmp	r0, r7
 8007086:	d801      	bhi.n	800708c <I2C_IsErrorOccurred+0xa8>
 8007088:	2f00      	cmp	r7, #0
 800708a:	d1b9      	bne.n	8007000 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007090:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007094:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007096:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007098:	0400      	lsls	r0, r0, #16
 800709a:	d50a      	bpl.n	80070b2 <I2C_IsErrorOccurred+0xce>
 800709c:	0449      	lsls	r1, r1, #17
 800709e:	d408      	bmi.n	80070b2 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 80070a0:	2a20      	cmp	r2, #32
 80070a2:	d006      	beq.n	80070b2 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070aa:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 80070ac:	f7fe ff42 	bl	8005f34 <HAL_GetTick>
 80070b0:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070b2:	682b      	ldr	r3, [r5, #0]
 80070b4:	699b      	ldr	r3, [r3, #24]
 80070b6:	069b      	lsls	r3, r3, #26
 80070b8:	d4a2      	bmi.n	8007000 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80070ba:	f7fe ff3b 	bl	8005f34 <HAL_GetTick>
 80070be:	1b80      	subs	r0, r0, r6
 80070c0:	2819      	cmp	r0, #25
 80070c2:	d9f6      	bls.n	80070b2 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80070c4:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80070c6:	f04f 0801 	mov.w	r8, #1
 80070ca:	e799      	b.n	8007000 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80070cc:	f1b8 0f00 	cmp.w	r8, #0
 80070d0:	d19d      	bne.n	800700e <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070d2:	2220      	movs	r2, #32
 80070d4:	61da      	str	r2, [r3, #28]
 80070d6:	e79a      	b.n	800700e <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80070d8:	4620      	mov	r0, r4
 80070da:	e79b      	b.n	8007014 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80070dc:	2800      	cmp	r0, #0
 80070de:	d1b2      	bne.n	8007046 <I2C_IsErrorOccurred+0x62>
}
 80070e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080070e4 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4604      	mov	r4, r0
 80070e8:	460d      	mov	r5, r1
 80070ea:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80070ec:	6823      	ldr	r3, [r4, #0]
 80070ee:	699b      	ldr	r3, [r3, #24]
 80070f0:	079b      	lsls	r3, r3, #30
 80070f2:	d501      	bpl.n	80070f8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80070f4:	2000      	movs	r0, #0
 80070f6:	e01f      	b.n	8007138 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80070f8:	4632      	mov	r2, r6
 80070fa:	4629      	mov	r1, r5
 80070fc:	4620      	mov	r0, r4
 80070fe:	f7ff ff71 	bl	8006fe4 <I2C_IsErrorOccurred>
 8007102:	b9c0      	cbnz	r0, 8007136 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007104:	1c6a      	adds	r2, r5, #1
 8007106:	d0f1      	beq.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007108:	f7fe ff14 	bl	8005f34 <HAL_GetTick>
 800710c:	1b80      	subs	r0, r0, r6
 800710e:	42a8      	cmp	r0, r5
 8007110:	d801      	bhi.n	8007116 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007112:	2d00      	cmp	r5, #0
 8007114:	d1ea      	bne.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007116:	6823      	ldr	r3, [r4, #0]
 8007118:	699b      	ldr	r3, [r3, #24]
 800711a:	f013 0302 	ands.w	r3, r3, #2
 800711e:	d1e5      	bne.n	80070ec <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007120:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8007122:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007126:	f042 0220 	orr.w	r2, r2, #32
 800712a:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800712c:	2220      	movs	r2, #32
 800712e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007132:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007136:	2001      	movs	r0, #1
}
 8007138:	bd70      	pop	{r4, r5, r6, pc}

0800713a <I2C_WaitOnFlagUntilTimeout>:
{
 800713a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800713e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007142:	4604      	mov	r4, r0
 8007144:	460f      	mov	r7, r1
 8007146:	4616      	mov	r6, r2
 8007148:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800714a:	6823      	ldr	r3, [r4, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	ea37 0303 	bics.w	r3, r7, r3
 8007152:	bf0c      	ite	eq
 8007154:	2301      	moveq	r3, #1
 8007156:	2300      	movne	r3, #0
 8007158:	42b3      	cmp	r3, r6
 800715a:	d001      	beq.n	8007160 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800715c:	2000      	movs	r0, #0
 800715e:	e025      	b.n	80071ac <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007160:	4642      	mov	r2, r8
 8007162:	4629      	mov	r1, r5
 8007164:	4620      	mov	r0, r4
 8007166:	f7ff ff3d 	bl	8006fe4 <I2C_IsErrorOccurred>
 800716a:	b9f0      	cbnz	r0, 80071aa <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 800716c:	1c6b      	adds	r3, r5, #1
 800716e:	d0ec      	beq.n	800714a <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007170:	f7fe fee0 	bl	8005f34 <HAL_GetTick>
 8007174:	eba0 0008 	sub.w	r0, r0, r8
 8007178:	42a8      	cmp	r0, r5
 800717a:	d801      	bhi.n	8007180 <I2C_WaitOnFlagUntilTimeout+0x46>
 800717c:	2d00      	cmp	r5, #0
 800717e:	d1e4      	bne.n	800714a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007180:	6823      	ldr	r3, [r4, #0]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	ea37 0303 	bics.w	r3, r7, r3
 8007188:	bf0c      	ite	eq
 800718a:	2301      	moveq	r3, #1
 800718c:	2300      	movne	r3, #0
 800718e:	42b3      	cmp	r3, r6
 8007190:	d1db      	bne.n	800714a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007192:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800719a:	2320      	movs	r3, #32
 800719c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a0:	2300      	movs	r3, #0
 80071a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 80071a6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80071aa:	2001      	movs	r0, #1
}
 80071ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080071b0 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 80071b0:	b570      	push	{r4, r5, r6, lr}
 80071b2:	4604      	mov	r4, r0
 80071b4:	460d      	mov	r5, r1
 80071b6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	069b      	lsls	r3, r3, #26
 80071be:	d501      	bpl.n	80071c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80071c0:	2000      	movs	r0, #0
 80071c2:	e01d      	b.n	8007200 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80071c4:	4632      	mov	r2, r6
 80071c6:	4629      	mov	r1, r5
 80071c8:	4620      	mov	r0, r4
 80071ca:	f7ff ff0b 	bl	8006fe4 <I2C_IsErrorOccurred>
 80071ce:	b9b0      	cbnz	r0, 80071fe <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071d0:	f7fe feb0 	bl	8005f34 <HAL_GetTick>
 80071d4:	1b80      	subs	r0, r0, r6
 80071d6:	42a8      	cmp	r0, r5
 80071d8:	d801      	bhi.n	80071de <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80071da:	2d00      	cmp	r5, #0
 80071dc:	d1ec      	bne.n	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80071de:	6823      	ldr	r3, [r4, #0]
 80071e0:	699b      	ldr	r3, [r3, #24]
 80071e2:	f013 0320 	ands.w	r3, r3, #32
 80071e6:	d1e7      	bne.n	80071b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071e8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80071ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80071ee:	f042 0220 	orr.w	r2, r2, #32
 80071f2:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80071f4:	2220      	movs	r2, #32
 80071f6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80071fe:	2001      	movs	r0, #1
}
 8007200:	bd70      	pop	{r4, r5, r6, pc}

08007202 <HAL_I2C_MspInit>:
}
 8007202:	4770      	bx	lr

08007204 <HAL_I2C_Init>:
{
 8007204:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007206:	4604      	mov	r4, r0
 8007208:	2800      	cmp	r0, #0
 800720a:	d04e      	beq.n	80072aa <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800720c:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007210:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007214:	b91b      	cbnz	r3, 800721e <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007216:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 800721a:	f7ff fff2 	bl	8007202 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800721e:	2324      	movs	r3, #36	@ 0x24
 8007220:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007224:	6823      	ldr	r3, [r4, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	f022 0201 	bic.w	r2, r2, #1
 800722c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800722e:	6862      	ldr	r2, [r4, #4]
 8007230:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007234:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007236:	689a      	ldr	r2, [r3, #8]
 8007238:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800723c:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800723e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007242:	2901      	cmp	r1, #1
 8007244:	d106      	bne.n	8007254 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007246:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800724a:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007252:	e007      	b.n	8007264 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007254:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007258:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800725a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800725c:	d1f6      	bne.n	800724c <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007264:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007266:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 800726e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007272:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800727a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800727c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007280:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007282:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007284:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007288:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800728a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 800728e:	430a      	orrs	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	f042 0201 	orr.w	r2, r2, #1
 8007298:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800729a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800729c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800729e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072a2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072a4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80072a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7fc      	b.n	80072a8 <HAL_I2C_Init+0xa4>

080072ae <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 80072ae:	4770      	bx	lr

080072b0 <HAL_I2C_DeInit>:
{
 80072b0:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80072b2:	4604      	mov	r4, r0
 80072b4:	b198      	cbz	r0, 80072de <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 80072b6:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 80072b8:	2324      	movs	r3, #36	@ 0x24
 80072ba:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 80072be:	6813      	ldr	r3, [r2, #0]
 80072c0:	f023 0301 	bic.w	r3, r3, #1
 80072c4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80072c6:	f7ff fff2 	bl	80072ae <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072ca:	2000      	movs	r0, #0
 80072cc:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 80072ce:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 80072d2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80072d6:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80072d8:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 80072dc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072de:	2001      	movs	r0, #1
 80072e0:	e7fc      	b.n	80072dc <HAL_I2C_DeInit+0x2c>
	...

080072e4 <HAL_I2C_Mem_Write>:
{
 80072e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072e8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072ea:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80072ee:	4604      	mov	r4, r0
 80072f0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f2:	2b20      	cmp	r3, #32
{
 80072f4:	4616      	mov	r6, r2
 80072f6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80072fa:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80072fe:	f040 80c6 	bne.w	800748e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007302:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007304:	b113      	cbz	r3, 800730c <HAL_I2C_Mem_Write+0x28>
 8007306:	f1ba 0f00 	cmp.w	sl, #0
 800730a:	d106      	bne.n	800731a <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800730c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007310:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007312:	2001      	movs	r0, #1
}
 8007314:	b003      	add	sp, #12
 8007316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800731a:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800731e:	2b01      	cmp	r3, #1
 8007320:	f000 80b5 	beq.w	800748e <HAL_I2C_Mem_Write+0x1aa>
 8007324:	f04f 0b01 	mov.w	fp, #1
 8007328:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 800732c:	f7fe fe02 	bl	8005f34 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007330:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007332:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007334:	9000      	str	r0, [sp, #0]
 8007336:	465a      	mov	r2, fp
 8007338:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800733c:	4620      	mov	r0, r4
 800733e:	f7ff fefc 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 8007342:	2800      	cmp	r0, #0
 8007344:	d1e5      	bne.n	8007312 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007346:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007348:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800734a:	fa5f f289 	uxtb.w	r2, r9
 800734e:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007350:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007354:	2340      	movs	r3, #64	@ 0x40
 8007356:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800735a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800735c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800735e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007360:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007362:	4b4c      	ldr	r3, [pc, #304]	@ (8007494 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007364:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800736e:	f7ff fe23 	bl	8006fb8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007372:	462a      	mov	r2, r5
 8007374:	4641      	mov	r1, r8
 8007376:	4620      	mov	r0, r4
 8007378:	f7ff feb4 	bl	80070e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800737c:	bb18      	cbnz	r0, 80073c6 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800737e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007382:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007384:	d115      	bne.n	80073b2 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007386:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007388:	2200      	movs	r2, #0
 800738a:	2180      	movs	r1, #128	@ 0x80
 800738c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800738e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007390:	4643      	mov	r3, r8
 8007392:	9500      	str	r5, [sp, #0]
 8007394:	f7ff fed1 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 8007398:	b9a8      	cbnz	r0, 80073c6 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800739a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2bff      	cmp	r3, #255	@ 0xff
 80073a0:	d815      	bhi.n	80073ce <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 80073a2:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073a4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 80073a8:	b292      	uxth	r2, r2
 80073aa:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073ac:	b2d2      	uxtb	r2, r2
 80073ae:	9000      	str	r0, [sp, #0]
 80073b0:	e012      	b.n	80073d8 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073b2:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073b4:	4641      	mov	r1, r8
 80073b6:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80073b8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ba:	462a      	mov	r2, r5
 80073bc:	f7ff fe92 	bl	80070e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80073c0:	b908      	cbnz	r0, 80073c6 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	e7df      	b.n	8007386 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 80073c6:	2300      	movs	r3, #0
 80073c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80073cc:	e7a1      	b.n	8007312 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073ce:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80073d4:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073d6:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073d8:	4639      	mov	r1, r7
 80073da:	4620      	mov	r0, r4
 80073dc:	f7ff fdec 	bl	8006fb8 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073e0:	462a      	mov	r2, r5
 80073e2:	4641      	mov	r1, r8
 80073e4:	4620      	mov	r0, r4
 80073e6:	f7ff fe7d 	bl	80070e4 <I2C_WaitOnTXISFlagUntilTimeout>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d191      	bne.n	8007312 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073ee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80073f0:	6822      	ldr	r2, [r4, #0]
 80073f2:	f813 1b01 	ldrb.w	r1, [r3], #1
 80073f6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80073f8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80073fa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80073fc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80073fe:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007400:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007402:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007404:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007406:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007408:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800740a:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800740c:	b29b      	uxth	r3, r3
 800740e:	b1b3      	cbz	r3, 800743e <HAL_I2C_Mem_Write+0x15a>
 8007410:	b9aa      	cbnz	r2, 800743e <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007412:	4643      	mov	r3, r8
 8007414:	2180      	movs	r1, #128	@ 0x80
 8007416:	4620      	mov	r0, r4
 8007418:	9500      	str	r5, [sp, #0]
 800741a:	f7ff fe8e 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 800741e:	2800      	cmp	r0, #0
 8007420:	f47f af77 	bne.w	8007312 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007424:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007426:	b29b      	uxth	r3, r3
 8007428:	2bff      	cmp	r3, #255	@ 0xff
 800742a:	d928      	bls.n	800747e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800742c:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800742e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007432:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007434:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007436:	4639      	mov	r1, r7
 8007438:	4620      	mov	r0, r4
 800743a:	f7ff fdbd 	bl	8006fb8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800743e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1cc      	bne.n	80073e0 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007446:	462a      	mov	r2, r5
 8007448:	4641      	mov	r1, r8
 800744a:	4620      	mov	r0, r4
 800744c:	f7ff feb0 	bl	80071b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007450:	2800      	cmp	r0, #0
 8007452:	f47f af5e 	bne.w	8007312 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007456:	6823      	ldr	r3, [r4, #0]
 8007458:	2120      	movs	r1, #32
 800745a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800745c:	685a      	ldr	r2, [r3, #4]
 800745e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007462:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007466:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800746a:	f022 0201 	bic.w	r2, r2, #1
 800746e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007470:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007474:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007478:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800747c:	e74a      	b.n	8007314 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800747e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007480:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007484:	b292      	uxth	r2, r2
 8007486:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	9000      	str	r0, [sp, #0]
 800748c:	e7d3      	b.n	8007436 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800748e:	2002      	movs	r0, #2
 8007490:	e740      	b.n	8007314 <HAL_I2C_Mem_Write+0x30>
 8007492:	bf00      	nop
 8007494:	80002000 	.word	0x80002000

08007498 <HAL_I2C_Mem_Read>:
{
 8007498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800749c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800749e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80074a2:	4604      	mov	r4, r0
 80074a4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074a6:	2b20      	cmp	r3, #32
{
 80074a8:	4616      	mov	r6, r2
 80074aa:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80074ae:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80074b2:	f040 80c9 	bne.w	8007648 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80074b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074b8:	b113      	cbz	r3, 80074c0 <HAL_I2C_Mem_Read+0x28>
 80074ba:	f1ba 0f00 	cmp.w	sl, #0
 80074be:	d106      	bne.n	80074ce <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80074c4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80074c6:	2001      	movs	r0, #1
}
 80074c8:	b003      	add	sp, #12
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80074ce:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	f000 80b8 	beq.w	8007648 <HAL_I2C_Mem_Read+0x1b0>
 80074d8:	f04f 0b01 	mov.w	fp, #1
 80074dc:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80074e0:	f7fe fd28 	bl	8005f34 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074e4:	2319      	movs	r3, #25
 80074e6:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80074e8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80074ea:	465a      	mov	r2, fp
 80074ec:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80074f0:	4620      	mov	r0, r4
 80074f2:	f7ff fe22 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d1e4      	bne.n	80074c6 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074fc:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80074fe:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007500:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007502:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007506:	2240      	movs	r2, #64	@ 0x40
 8007508:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 800750c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800750e:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007510:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007512:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007514:	4a4d      	ldr	r2, [pc, #308]	@ (800764c <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8007516:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800751a:	9200      	str	r2, [sp, #0]
 800751c:	fa5f f289 	uxtb.w	r2, r9
 8007520:	f7ff fd4a 	bl	8006fb8 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007524:	462a      	mov	r2, r5
 8007526:	4641      	mov	r1, r8
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff fddb 	bl	80070e4 <I2C_WaitOnTXISFlagUntilTimeout>
 800752e:	bb20      	cbnz	r0, 800757a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007530:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007534:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007536:	d116      	bne.n	8007566 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007538:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800753a:	2200      	movs	r2, #0
 800753c:	2140      	movs	r1, #64	@ 0x40
 800753e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007540:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007542:	4643      	mov	r3, r8
 8007544:	9500      	str	r5, [sp, #0]
 8007546:	f7ff fdf8 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 800754a:	b9b0      	cbnz	r0, 800757a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800754c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800754e:	b29b      	uxth	r3, r3
 8007550:	2bff      	cmp	r3, #255	@ 0xff
 8007552:	4b3f      	ldr	r3, [pc, #252]	@ (8007650 <HAL_I2C_Mem_Read+0x1b8>)
 8007554:	d815      	bhi.n	8007582 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007556:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007558:	b292      	uxth	r2, r2
 800755a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800755c:	b2d2      	uxtb	r2, r2
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007564:	e012      	b.n	800758c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007566:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007568:	4641      	mov	r1, r8
 800756a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800756c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800756e:	462a      	mov	r2, r5
 8007570:	f7ff fdb8 	bl	80070e4 <I2C_WaitOnTXISFlagUntilTimeout>
 8007574:	b908      	cbnz	r0, 800757a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	e7de      	b.n	8007538 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800757a:	2300      	movs	r3, #0
 800757c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007580:	e7a1      	b.n	80074c6 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007582:	22ff      	movs	r2, #255	@ 0xff
 8007584:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007586:	9300      	str	r3, [sp, #0]
 8007588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800758c:	4639      	mov	r1, r7
 800758e:	4620      	mov	r0, r4
 8007590:	f7ff fd12 	bl	8006fb8 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007594:	4643      	mov	r3, r8
 8007596:	2200      	movs	r2, #0
 8007598:	2104      	movs	r1, #4
 800759a:	4620      	mov	r0, r4
 800759c:	9500      	str	r5, [sp, #0]
 800759e:	f7ff fdcc 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 80075a2:	2800      	cmp	r0, #0
 80075a4:	d18f      	bne.n	80074c6 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80075aa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80075ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80075ae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80075b0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80075b2:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80075b4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80075b6:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80075b8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80075ba:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80075bc:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80075be:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80075c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	b1b3      	cbz	r3, 80075f8 <HAL_I2C_Mem_Read+0x160>
 80075ca:	b9aa      	cbnz	r2, 80075f8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075cc:	4643      	mov	r3, r8
 80075ce:	2180      	movs	r1, #128	@ 0x80
 80075d0:	4620      	mov	r0, r4
 80075d2:	9500      	str	r5, [sp, #0]
 80075d4:	f7ff fdb1 	bl	800713a <I2C_WaitOnFlagUntilTimeout>
 80075d8:	2800      	cmp	r0, #0
 80075da:	f47f af74 	bne.w	80074c6 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075de:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	2bff      	cmp	r3, #255	@ 0xff
 80075e4:	d928      	bls.n	8007638 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075e6:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075e8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075ec:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80075ee:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80075f0:	4639      	mov	r1, r7
 80075f2:	4620      	mov	r0, r4
 80075f4:	f7ff fce0 	bl	8006fb8 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80075f8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1c9      	bne.n	8007594 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007600:	462a      	mov	r2, r5
 8007602:	4641      	mov	r1, r8
 8007604:	4620      	mov	r0, r4
 8007606:	f7ff fdd3 	bl	80071b0 <I2C_WaitOnSTOPFlagUntilTimeout>
 800760a:	2800      	cmp	r0, #0
 800760c:	f47f af5b 	bne.w	80074c6 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007610:	6823      	ldr	r3, [r4, #0]
 8007612:	2120      	movs	r1, #32
 8007614:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007616:	685a      	ldr	r2, [r3, #4]
 8007618:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800761c:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007620:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007624:	f022 0201 	bic.w	r2, r2, #1
 8007628:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800762a:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800762e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007632:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007636:	e747      	b.n	80074c8 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007638:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800763a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800763e:	b292      	uxth	r2, r2
 8007640:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007642:	b2d2      	uxtb	r2, r2
 8007644:	9000      	str	r0, [sp, #0]
 8007646:	e7d3      	b.n	80075f0 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8007648:	2002      	movs	r0, #2
 800764a:	e73d      	b.n	80074c8 <HAL_I2C_Mem_Read+0x30>
 800764c:	80002000 	.word	0x80002000
 8007650:	80002400 	.word	0x80002400

08007654 <HAL_I2C_GetState>:
  return hi2c->State;
 8007654:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8007658:	4770      	bx	lr

0800765a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800765a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800765c:	4770      	bx	lr

0800765e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800765e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007660:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007664:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007666:	2a20      	cmp	r2, #32
 8007668:	b2d4      	uxtb	r4, r2
 800766a:	d11c      	bne.n	80076a6 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007670:	2a01      	cmp	r2, #1
 8007672:	d018      	beq.n	80076a6 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007674:	2224      	movs	r2, #36	@ 0x24
 8007676:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800767a:	6802      	ldr	r2, [r0, #0]
 800767c:	6810      	ldr	r0, [r2, #0]
 800767e:	f020 0001 	bic.w	r0, r0, #1
 8007682:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007684:	6810      	ldr	r0, [r2, #0]
 8007686:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800768a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800768c:	6810      	ldr	r0, [r2, #0]
 800768e:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007690:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8007692:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007694:	6811      	ldr	r1, [r2, #0]
 8007696:	f041 0101 	orr.w	r1, r1, #1
 800769a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800769c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80076a0:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80076a4:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80076a6:	2002      	movs	r0, #2
 80076a8:	e7fc      	b.n	80076a4 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080076aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076aa:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076ac:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80076b0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80076b2:	2a20      	cmp	r2, #32
 80076b4:	b2d4      	uxtb	r4, r2
 80076b6:	d11b      	bne.n	80076f0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076b8:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80076bc:	2a01      	cmp	r2, #1
 80076be:	d017      	beq.n	80076f0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80076c0:	2224      	movs	r2, #36	@ 0x24
 80076c2:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80076c6:	6802      	ldr	r2, [r0, #0]
 80076c8:	6810      	ldr	r0, [r2, #0]
 80076ca:	f020 0001 	bic.w	r0, r0, #1
 80076ce:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80076d0:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80076d2:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80076d6:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076da:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80076dc:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80076de:	6811      	ldr	r1, [r2, #0]
 80076e0:	f041 0101 	orr.w	r1, r1, #1
 80076e4:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80076e6:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80076ea:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80076ee:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80076f0:	2002      	movs	r0, #2
 80076f2:	e7fc      	b.n	80076ee <HAL_I2CEx_ConfigDigitalFilter+0x44>

080076f4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80076f4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80076f6:	2401      	movs	r4, #1
 80076f8:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80076fa:	2500      	movs	r5, #0
 80076fc:	194e      	adds	r6, r1, r5
 80076fe:	443d      	add	r5, r7
 8007700:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8007702:	42be      	cmp	r6, r7
 8007704:	d112      	bne.n	800772c <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8007706:	2c10      	cmp	r4, #16
 8007708:	d108      	bne.n	800771c <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 800770a:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 800770c:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800770e:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8007710:	601d      	str	r5, [r3, #0]
  p = 0;
 8007712:	4623      	mov	r3, r4
  si = Huffsize[0];
 8007714:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8007716:	5cc8      	ldrb	r0, [r1, r3]
 8007718:	b9d8      	cbnz	r0, 8007752 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 800771a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 800771c:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800771e:	3401      	adds	r4, #1
 8007720:	19ee      	adds	r6, r5, r7
 8007722:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007726:	d9e9      	bls.n	80076fc <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8007728:	2001      	movs	r0, #1
 800772a:	e7f6      	b.n	800771a <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 800772c:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8007730:	e7e7      	b.n	8007702 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8007732:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8007736:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007738:	5cc8      	ldrb	r0, [r1, r3]
 800773a:	19dc      	adds	r4, r3, r7
 800773c:	42a8      	cmp	r0, r5
 800773e:	d0f8      	beq.n	8007732 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8007740:	2d1f      	cmp	r5, #31
 8007742:	d8f1      	bhi.n	8007728 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007744:	fa06 f005 	lsl.w	r0, r6, r5
 8007748:	42a0      	cmp	r0, r4
 800774a:	d9ed      	bls.n	8007728 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 800774c:	0064      	lsls	r4, r4, #1
    si++;
 800774e:	3501      	adds	r5, #1
 8007750:	e7e1      	b.n	8007716 <JPEG_Bits_To_SizeCodes+0x22>
 8007752:	1ae7      	subs	r7, r4, r3
 8007754:	e7f0      	b.n	8007738 <JPEG_Bits_To_SizeCodes+0x44>

08007756 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007756:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007758:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800775c:	460d      	mov	r5, r1
 800775e:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007760:	ab01      	add	r3, sp, #4
 8007762:	aa43      	add	r2, sp, #268	@ 0x10c
 8007764:	a902      	add	r1, sp, #8
 8007766:	f7ff ffc5 	bl	80076f4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800776a:	b938      	cbnz	r0, 800777c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800776c:	9e01      	ldr	r6, [sp, #4]
 800776e:	460b      	mov	r3, r1
 8007770:	f104 010f 	add.w	r1, r4, #15
 8007774:	360f      	adds	r6, #15
 8007776:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007778:	42a1      	cmp	r1, r4
 800777a:	d102      	bne.n	8007782 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800777c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007780:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007782:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007786:	2e0b      	cmp	r6, #11
 8007788:	d80a      	bhi.n	80077a0 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800778a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800778e:	f852 cb04 	ldr.w	ip, [r2], #4
 8007792:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007796:	f813 7b01 	ldrb.w	r7, [r3], #1
 800779a:	3f01      	subs	r7, #1
 800779c:	55af      	strb	r7, [r5, r6]
      k++;
 800779e:	e7eb      	b.n	8007778 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80077a0:	2001      	movs	r0, #1
 80077a2:	e7eb      	b.n	800777c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

080077a4 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80077a4:	4603      	mov	r3, r0
 80077a6:	4608      	mov	r0, r1
 80077a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80077aa:	681c      	ldr	r4, [r3, #0]
{
 80077ac:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80077ae:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d125      	bne.n	8007802 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80077b6:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80077ba:	a901      	add	r1, sp, #4
 80077bc:	f7ff ffcb 	bl	8007756 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80077c0:	b9e8      	cbnz	r0, 80077fe <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80077c2:	aa01      	add	r2, sp, #4
 80077c4:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80077c8:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80077cc:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80077ce:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80077d0:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077d2:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80077d4:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077d6:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80077da:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077dc:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077de:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077e2:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80077e6:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80077e8:	7b13      	ldrb	r3, [r2, #12]
 80077ea:	021b      	lsls	r3, r3, #8
 80077ec:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80077f0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80077f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80077f6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80077fa:	42b4      	cmp	r4, r6
 80077fc:	d1e9      	bne.n	80077d2 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80077fe:	b011      	add	sp, #68	@ 0x44
 8007800:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007802:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8007806:	429a      	cmp	r2, r3
 8007808:	d102      	bne.n	8007810 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 800780a:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800780e:	e7d4      	b.n	80077ba <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007810:	2001      	movs	r0, #1
 8007812:	e7f4      	b.n	80077fe <JPEG_Set_HuffDC_Mem+0x5a>

08007814 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007814:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007818:	6804      	ldr	r4, [r0, #0]
{
 800781a:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800781e:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007820:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8007824:	429a      	cmp	r2, r3
 8007826:	d149      	bne.n	80078bc <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8007828:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800782c:	466b      	mov	r3, sp
 800782e:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8007832:	a901      	add	r1, sp, #4
 8007834:	4630      	mov	r0, r6
 8007836:	f7ff ff5d 	bl	80076f4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800783a:	2800      	cmp	r0, #0
 800783c:	d13a      	bne.n	80078b4 <JPEG_Set_HuffAC_Mem+0xa0>
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	460d      	mov	r5, r1
 8007842:	f106 0c0f 	add.w	ip, r6, #15
 8007846:	4617      	mov	r7, r2
 8007848:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800784a:	f04f 0e0a 	mov.w	lr, #10
 800784e:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007850:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8007852:	4561      	cmp	r1, ip
 8007854:	d139      	bne.n	80078ca <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8007856:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800785a:	a942      	add	r1, sp, #264	@ 0x108
 800785c:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8007860:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8007862:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8007864:	6063      	str	r3, [r4, #4]
 8007866:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8007868:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800786c:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8007870:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8007872:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007876:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8007878:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800787c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800787e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8007882:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007884:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8007888:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800788a:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800788e:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007890:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007892:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8007896:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800789a:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800789c:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80078a6:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80078a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ac:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80078b0:	42b4      	cmp	r4, r6
 80078b2:	d1e7      	bne.n	8007884 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80078b4:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80078bc:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d10f      	bne.n	80078e4 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80078c4:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80078c8:	e7b0      	b.n	800782c <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80078ca:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80078ce:	b15b      	cbz	r3, 80078e8 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80078d0:	2bf0      	cmp	r3, #240	@ 0xf0
 80078d2:	d015      	beq.n	8007900 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80078d4:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80078d6:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80078da:	3b01      	subs	r3, #1
 80078dc:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80078e0:	2ba1      	cmp	r3, #161	@ 0xa1
 80078e2:	d902      	bls.n	80078ea <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80078e4:	2001      	movs	r0, #1
 80078e6:	e7e5      	b.n	80078b4 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80078e8:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80078ea:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80078ee:	f857 8b04 	ldr.w	r8, [r7], #4
 80078f2:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80078f6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80078fa:	3a01      	subs	r2, #1
 80078fc:	54f2      	strb	r2, [r6, r3]
      k++;
 80078fe:	e7a8      	b.n	8007852 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 8007900:	23a1      	movs	r3, #161	@ 0xa1
 8007902:	e7f2      	b.n	80078ea <JPEG_Set_HuffAC_Mem+0xd6>

08007904 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8007904:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007906:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800790a:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800790c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800790e:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8007910:	f002 0203 	and.w	r2, r2, #3
 8007914:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	bf0c      	ite	eq
 800791a:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800791e:	f022 0208 	bicne.w	r2, r2, #8
 8007922:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007924:	681a      	ldr	r2, [r3, #0]
 8007926:	f022 0201 	bic.w	r2, r2, #1
 800792a:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800792c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800792e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007934:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007936:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800793a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800793c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800793e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007942:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007944:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007946:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800794a:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 800794c:	681a      	ldr	r2, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007954:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8007956:	f002 020c 	and.w	r2, r2, #12
 800795a:	2a08      	cmp	r2, #8
 800795c:	d104      	bne.n	8007968 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800795e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007960:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007964:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8007966:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007968:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800796a:	f002 020c 	and.w	r2, r2, #12
 800796e:	2a0c      	cmp	r2, #12
 8007970:	d1f9      	bne.n	8007966 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007972:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007974:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007978:	e7f4      	b.n	8007964 <JPEG_Init_Process+0x60>
	...

0800797c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800797c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800797e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8007980:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007982:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007984:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007986:	42aa      	cmp	r2, r5
 8007988:	d313      	bcc.n	80079b2 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800798a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800798c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800798e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8007990:	428b      	cmp	r3, r1
 8007992:	d30e      	bcc.n	80079b2 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8007994:	4f18      	ldr	r7, [pc, #96]	@ (80079f8 <JPEG_DMA_StartProcess+0x7c>)
 8007996:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8007998:	4f18      	ldr	r7, [pc, #96]	@ (80079fc <JPEG_DMA_StartProcess+0x80>)
 800799a:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800799c:	4e18      	ldr	r6, [pc, #96]	@ (8007a00 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800799e:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80079a0:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80079a2:	4e18      	ldr	r6, [pc, #96]	@ (8007a04 <JPEG_DMA_StartProcess+0x88>)
 80079a4:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80079a6:	b105      	cbz	r5, 80079aa <JPEG_DMA_StartProcess+0x2e>
 80079a8:	b931      	cbnz	r1, 80079b8 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80079aa:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80079ac:	f043 0304 	orr.w	r3, r3, #4
 80079b0:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80079b2:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80079b4:	b003      	add	sp, #12
 80079b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80079b8:	fbb2 f6f5 	udiv	r6, r2, r5
 80079bc:	fb05 2516 	mls	r5, r5, r6, r2
 80079c0:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80079c2:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80079c4:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80079c6:	fbb3 f2f1 	udiv	r2, r3, r1
 80079ca:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80079ce:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80079d0:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80079d2:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80079d4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80079d6:	9500      	str	r5, [sp, #0]
 80079d8:	69e2      	ldr	r2, [r4, #28]
 80079da:	f001 f848 	bl	8008a6e <HAL_MDMA_Start_IT>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d1e3      	bne.n	80079aa <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80079e2:	6822      	ldr	r2, [r4, #0]
 80079e4:	9500      	str	r5, [sp, #0]
 80079e6:	3240      	adds	r2, #64	@ 0x40
 80079e8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80079ea:	69a1      	ldr	r1, [r4, #24]
 80079ec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80079ee:	f001 f83e 	bl	8008a6e <HAL_MDMA_Start_IT>
 80079f2:	2800      	cmp	r0, #0
 80079f4:	d0de      	beq.n	80079b4 <JPEG_DMA_StartProcess+0x38>
 80079f6:	e7d8      	b.n	80079aa <JPEG_DMA_StartProcess+0x2e>
 80079f8:	08007f3f 	.word	0x08007f3f
 80079fc:	08007e37 	.word	0x08007e37
 8007a00:	080083fd 	.word	0x080083fd
 8007a04:	080083ef 	.word	0x080083ef

08007a08 <HAL_JPEG_Init>:
{
 8007a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8007a0a:	4605      	mov	r5, r0
 8007a0c:	2800      	cmp	r0, #0
 8007a0e:	f000 80f2 	beq.w	8007bf6 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 8007a12:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8007a16:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007a1a:	b91b      	cbnz	r3, 8007a24 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8007a1c:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8007a20:	f7f9 fb3e 	bl	80010a0 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8007a24:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8007a26:	2302      	movs	r3, #2
 8007a28:	4a86      	ldr	r2, [pc, #536]	@ (8007c44 <HAL_JPEG_Init+0x23c>)
 8007a2a:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8007a2e:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8007a32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a34:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8007a38:	f043 0301 	orr.w	r3, r3, #1
 8007a3c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007a3e:	6823      	ldr	r3, [r4, #0]
 8007a40:	f023 0301 	bic.w	r3, r3, #1
 8007a44:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007a46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a48:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007a4c:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8007a4e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a50:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007a54:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8007a56:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007a58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007a5c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8007a5e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8007a60:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007a64:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8007a66:	4b78      	ldr	r3, [pc, #480]	@ (8007c48 <HAL_JPEG_Init+0x240>)
 8007a68:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8007a6a:	4b78      	ldr	r3, [pc, #480]	@ (8007c4c <HAL_JPEG_Init+0x244>)
 8007a6c:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8007a6e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8007a70:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a74:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8007a76:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a78:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007a7a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a7c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8007a80:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007a82:	4333      	orrs	r3, r6
 8007a84:	7c56      	ldrb	r6, [r2, #17]
 8007a86:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007a8a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007a8e:	4281      	cmp	r1, r0
 8007a90:	d1f0      	bne.n	8007a74 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a92:	4b6f      	ldr	r3, [pc, #444]	@ (8007c50 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007a94:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8007a98:	4a6e      	ldr	r2, [pc, #440]	@ (8007c54 <HAL_JPEG_Init+0x24c>)
 8007a9a:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007a9e:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8007aa2:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8007aa6:	4610      	mov	r0, r2
 8007aa8:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007aaa:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8007aae:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007ab2:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007ab6:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8007ab8:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007aba:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8007abe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007ac0:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8007ac4:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8007ac8:	ea43 030c 	orr.w	r3, r3, ip
 8007acc:	f890 c011 	ldrb.w	ip, [r0, #17]
 8007ad0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8007ad4:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8007ad8:	42be      	cmp	r6, r7
 8007ada:	d1ec      	bne.n	8007ab6 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 8007adc:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8007ae0:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8007ae4:	0c1b      	lsrs	r3, r3, #16
 8007ae6:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8007ae8:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 8007aec:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 8007af0:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007af4:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8007af8:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007afa:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8007afe:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007b00:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8007b04:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8007b08:	4333      	orrs	r3, r6
 8007b0a:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 8007b0e:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8007b12:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8007b16:	4281      	cmp	r1, r0
 8007b18:	d1ec      	bne.n	8007af4 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8007b1a:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8007b1e:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8007b22:	4a4d      	ldr	r2, [pc, #308]	@ (8007c58 <HAL_JPEG_Init+0x250>)
 8007b24:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8007b28:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8007b2a:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8007b2e:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8007b32:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007b36:	4013      	ands	r3, r2
  *address = value;
 8007b38:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8007b42:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8007b46:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8007b4a:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8007b4e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8007b52:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8007b54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007b58:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8007b5c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b60:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8007b62:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8007b66:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8007b6a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c5c <HAL_JPEG_Init+0x254>)
 8007b70:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8007b74:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8007b78:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8007b7c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8007b80:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8007b82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8007b86:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8007b8a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007b8e:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8007b90:	4a33      	ldr	r2, [pc, #204]	@ (8007c60 <HAL_JPEG_Init+0x258>)
 8007b92:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8007b96:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 8007b9a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8007b9e:	4b31      	ldr	r3, [pc, #196]	@ (8007c64 <HAL_JPEG_Init+0x25c>)
 8007ba0:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8007ba4:	4b30      	ldr	r3, [pc, #192]	@ (8007c68 <HAL_JPEG_Init+0x260>)
 8007ba6:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 8007baa:	4b30      	ldr	r3, [pc, #192]	@ (8007c6c <HAL_JPEG_Init+0x264>)
 8007bac:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8007bb0:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8007bb4:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8007bb6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8007bba:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007bbe:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8007bc2:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007bc4:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8007bc8:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007bca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 8007bce:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8007bd2:	4333      	orrs	r3, r6
 8007bd4:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8007bd8:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8007bdc:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8007be0:	4281      	cmp	r1, r0
 8007be2:	d1ec      	bne.n	8007bbe <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8007be4:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8007be8:	491a      	ldr	r1, [pc, #104]	@ (8007c54 <HAL_JPEG_Init+0x24c>)
 8007bea:	4628      	mov	r0, r5
 8007bec:	f7ff fe12 	bl	8007814 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007bf0:	b118      	cbz	r0, 8007bfa <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8007bf6:	2001      	movs	r0, #1
}
 8007bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8007bfa:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 8007bfe:	4918      	ldr	r1, [pc, #96]	@ (8007c60 <HAL_JPEG_Init+0x258>)
 8007c00:	4628      	mov	r0, r5
 8007c02:	f7ff fe07 	bl	8007814 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8007c06:	2800      	cmp	r0, #0
 8007c08:	d1f3      	bne.n	8007bf2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8007c0a:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 8007c0e:	490d      	ldr	r1, [pc, #52]	@ (8007c44 <HAL_JPEG_Init+0x23c>)
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7ff fdc7 	bl	80077a4 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8007c16:	2800      	cmp	r0, #0
 8007c18:	d1eb      	bne.n	8007bf2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8007c1a:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8007c1e:	4914      	ldr	r1, [pc, #80]	@ (8007c70 <HAL_JPEG_Init+0x268>)
 8007c20:	4628      	mov	r0, r5
 8007c22:	f7ff fdbf 	bl	80077a4 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8007c26:	2800      	cmp	r0, #0
 8007c28:	d1e3      	bne.n	8007bf2 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8007c2a:	6863      	ldr	r3, [r4, #4]
 8007c2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c30:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007c32:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8007c34:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8007c36:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007c38:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8007c3c:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8007c3e:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8007c40:	e7da      	b.n	8007bf8 <HAL_JPEG_Init+0x1f0>
 8007c42:	bf00      	nop
 8007c44:	08025820 	.word	0x08025820
 8007c48:	08025620 	.word	0x08025620
 8007c4c:	080255e0 	.word	0x080255e0
 8007c50:	0b0a0908 	.word	0x0b0a0908
 8007c54:	08025752 	.word	0x08025752
 8007c58:	ffff0000 	.word	0xffff0000
 8007c5c:	09080706 	.word	0x09080706
 8007c60:	080256a0 	.word	0x080256a0
 8007c64:	01000404 	.word	0x01000404
 8007c68:	05070403 	.word	0x05070403
 8007c6c:	04040201 	.word	0x04040201
 8007c70:	08025804 	.word	0x08025804

08007c74 <HAL_JPEG_GetInfo>:
{
 8007c74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8007c78:	2800      	cmp	r0, #0
 8007c7a:	d06f      	beq.n	8007d5c <HAL_JPEG_GetInfo+0xe8>
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	d06d      	beq.n	8007d5c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8007c80:	6804      	ldr	r4, [r0, #0]
 8007c82:	6863      	ldr	r3, [r4, #4]
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d047      	beq.n	8007d1c <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8007c8c:	6863      	ldr	r3, [r4, #4]
 8007c8e:	f013 0303 	ands.w	r3, r3, #3
 8007c92:	d005      	beq.n	8007ca0 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	f003 0303 	and.w	r3, r3, #3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d15e      	bne.n	8007d5c <HAL_JPEG_GetInfo+0xe8>
 8007c9e:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007ca0:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8007ca2:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007ca4:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007ca8:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007caa:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8007cac:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8007cae:	68e2      	ldr	r2, [r4, #12]
 8007cb0:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8007cb4:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8007cb6:	d13c      	bne.n	8007d32 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007cb8:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007cba:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8007cbc:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007cc0:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8007cc2:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007cc4:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8007cc6:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007cca:	d129      	bne.n	8007d20 <HAL_JPEG_GetInfo+0xac>
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	f013 0f0f 	tst.w	r3, #15
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2301      	moveq	r3, #1
 8007cd6:	2300      	movne	r3, #0
 8007cd8:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 8007cda:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	3450      	adds	r4, #80	@ 0x50
 8007ce0:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8007d60 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8007ce4:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007ce6:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 8007cea:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 8007cee:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 8007cf2:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8007cf6:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8007cf8:	fa29 f206 	lsr.w	r2, r9, r6
 8007cfc:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 8007cfe:	2a01      	cmp	r2, #1
 8007d00:	d119      	bne.n	8007d36 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 8007d02:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8007d04:	3608      	adds	r6, #8
 8007d06:	3701      	adds	r7, #1
 8007d08:	2e20      	cmp	r6, #32
 8007d0a:	d1f5      	bne.n	8007cf8 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8007d0c:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 8007d0e:	2d40      	cmp	r5, #64	@ 0x40
 8007d10:	d1ed      	bne.n	8007cee <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 8007d12:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8007d14:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8007d16:	610b      	str	r3, [r1, #16]
}
 8007d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1c:	2310      	movs	r3, #16
 8007d1e:	e7bf      	b.n	8007ca0 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007d20:	2d03      	cmp	r5, #3
 8007d22:	d106      	bne.n	8007d32 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8007d24:	4313      	orrs	r3, r2
 8007d26:	f013 0f0f 	tst.w	r3, #15
 8007d2a:	bf0c      	ite	eq
 8007d2c:	2301      	moveq	r3, #1
 8007d2e:	2300      	movne	r3, #0
 8007d30:	e7d3      	b.n	8007cda <HAL_JPEG_GetInfo+0x66>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e7d1      	b.n	8007cda <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8007d36:	fb0e fb02 	mul.w	fp, lr, r2
 8007d3a:	f897 a000 	ldrb.w	sl, [r7]
 8007d3e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007d40:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8007d44:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8007d48:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8007d4a:	bf8b      	itete	hi
 8007d4c:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8007d50:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8007d54:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8007d56:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8007d5a:	e7d3      	b.n	8007d04 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8007d5c:	2001      	movs	r0, #1
 8007d5e:	e7db      	b.n	8007d18 <HAL_JPEG_GetInfo+0xa4>
 8007d60:	08025660 	.word	0x08025660

08007d64 <HAL_JPEG_Decode_DMA>:
{
 8007d64:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8007d66:	4604      	mov	r4, r0
 8007d68:	b348      	cbz	r0, 8007dbe <HAL_JPEG_Decode_DMA+0x5a>
 8007d6a:	b341      	cbz	r1, 8007dbe <HAL_JPEG_Decode_DMA+0x5a>
 8007d6c:	b33b      	cbz	r3, 8007dbe <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8007d6e:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8007d72:	2d01      	cmp	r5, #1
 8007d74:	d028      	beq.n	8007dc8 <HAL_JPEG_Decode_DMA+0x64>
 8007d76:	2501      	movs	r5, #1
 8007d78:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8007d7c:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8007d80:	2d01      	cmp	r5, #1
 8007d82:	d11e      	bne.n	8007dc2 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007d84:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8007d86:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8007d88:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8007d8c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007d8e:	f025 050f 	bic.w	r5, r5, #15
 8007d92:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007d94:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8007d96:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 8007d9a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8007d9e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8007da0:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8007da2:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8007da4:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8007da6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8007da8:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 8007daa:	f7ff fdab 	bl	8007904 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8007dae:	f7ff fde5 	bl	800797c <JPEG_DMA_StartProcess>
 8007db2:	b128      	cbz	r0, 8007dc0 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007db4:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8007db6:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007dba:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8007dbe:	2001      	movs	r0, #1
}
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8007dc8:	2002      	movs	r0, #2
 8007dca:	e7f9      	b.n	8007dc0 <HAL_JPEG_Decode_DMA+0x5c>

08007dcc <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8007dcc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007dce:	f003 030c 	and.w	r3, r3, #12
 8007dd2:	2b0c      	cmp	r3, #12
 8007dd4:	d10d      	bne.n	8007df2 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007dd6:	07cb      	lsls	r3, r1, #31
 8007dd8:	d503      	bpl.n	8007de2 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007dda:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007ddc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007de0:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007de2:	0789      	lsls	r1, r1, #30
 8007de4:	d503      	bpl.n	8007dee <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007de6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007de8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007dec:	6543      	str	r3, [r0, #84]	@ 0x54
}
 8007dee:	2000      	movs	r0, #0
 8007df0:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8007df2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007df4:	f003 030c 	and.w	r3, r3, #12
 8007df8:	2b08      	cmp	r3, #8
 8007dfa:	d1f8      	bne.n	8007dee <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8007dfc:	f011 0301 	ands.w	r3, r1, #1
 8007e00:	d004      	beq.n	8007e0c <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8007e02:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8007e04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007e08:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8007e0a:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8007e0c:	078a      	lsls	r2, r1, #30
 8007e0e:	d505      	bpl.n	8007e1c <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007e10:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8007e12:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8007e16:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e1a:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8007e1c:	6801      	ldr	r1, [r0, #0]
 8007e1e:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8007e20:	ea22 0303 	bic.w	r3, r2, r3
 8007e24:	630b      	str	r3, [r1, #48]	@ 0x30
 8007e26:	e7e2      	b.n	8007dee <HAL_JPEG_Pause+0x22>

08007e28 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8007e28:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8007e2a:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8007e2c:	4770      	bx	lr

08007e2e <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8007e2e:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8007e30:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8007e32:	4770      	bx	lr

08007e34 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8007e34:	4770      	bx	lr

08007e36 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007e36:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8007e38:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8007e3a:	6803      	ldr	r3, [r0, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	f022 0201 	bic.w	r2, r2, #1
 8007e42:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007e44:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e46:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8007e4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007e52:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007e54:	f043 0304 	orr.w	r3, r3, #4
 8007e58:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8007e5a:	f7fa fbd7 	bl	800260c <HAL_JPEG_ErrorCallback>
}
 8007e5e:	bd08      	pop	{r3, pc}

08007e60 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8007e60:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8007e62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e64:	4604      	mov	r4, r0
 8007e66:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8007e68:	b922      	cbnz	r2, 8007e74 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8007e6a:	2101      	movs	r1, #1
 8007e6c:	f7ff ffae 	bl	8007dcc <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8007e70:	2200      	movs	r2, #0
 8007e72:	e004      	b.n	8007e7e <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007e74:	6a03      	ldr	r3, [r0, #32]
 8007e76:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007e78:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8007e7a:	d924      	bls.n	8007ec6 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8007e7c:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8007e7e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007e80:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8007e84:	d11e      	bne.n	8007ec4 <JPEG_ReadInputData+0x64>
 8007e86:	b1ea      	cbz	r2, 8007ec4 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8007e88:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8007e8c:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8007e8e:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8007e92:	d827      	bhi.n	8007ee4 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007e94:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8007e96:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007e98:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007e9a:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007e9c:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8007e9e:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007ea0:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007ea2:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007ea6:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007eaa:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007eac:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007eb0:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007eb4:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007eb8:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8007eba:	6a22      	ldr	r2, [r4, #32]
 8007ebc:	f102 0204 	add.w	r2, r2, #4
 8007ec0:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8007ec2:	d1e8      	bne.n	8007e96 <JPEG_ReadInputData+0x36>
}
 8007ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d1d2      	bne.n	8007e70 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007eca:	6a01      	ldr	r1, [r0, #32]
 8007ecc:	f7fa fb30 	bl	8002530 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8007ed0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007ed2:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8007ed4:	bf84      	itt	hi
 8007ed6:	f023 0303 	bichi.w	r3, r3, #3
 8007eda:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8007edc:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8007ede:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8007ee0:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8007ee2:	e7cc      	b.n	8007e7e <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8007ee4:	2a03      	cmp	r2, #3
 8007ee6:	d918      	bls.n	8007f1a <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007ee8:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8007eea:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8007eec:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007eee:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007ef0:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8007ef2:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007ef4:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007ef6:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007efa:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8007efe:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8007f00:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8007f04:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8007f08:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8007f0c:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8007f0e:	6a22      	ldr	r2, [r4, #32]
 8007f10:	f102 0204 	add.w	r2, r2, #4
 8007f14:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8007f16:	d1e8      	bne.n	8007eea <JPEG_ReadInputData+0x8a>
 8007f18:	e7d4      	b.n	8007ec4 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8007f1a:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007f1c:	6a25      	ldr	r5, [r4, #32]
 8007f1e:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8007f20:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007f22:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8007f24:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8007f26:	fa05 f506 	lsl.w	r5, r5, r6
 8007f2a:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8007f2e:	6a25      	ldr	r5, [r4, #32]
 8007f30:	f105 0501 	add.w	r5, r5, #1
 8007f34:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8007f36:	d1f1      	bne.n	8007f1c <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8007f38:	6822      	ldr	r2, [r4, #0]
 8007f3a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8007f3c:	e7c2      	b.n	8007ec4 <JPEG_ReadInputData+0x64>

08007f3e <JPEG_MDMAInCpltCallback>:
{
 8007f3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8007f40:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8007f42:	6822      	ldr	r2, [r4, #0]
 8007f44:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007f46:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8007f4a:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8007f4c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8007f4e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007f52:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	2b0c      	cmp	r3, #12
 8007f5c:	d11a      	bne.n	8007f94 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8007f5e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007f60:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f62:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007f64:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8007f66:	695a      	ldr	r2, [r3, #20]
 8007f68:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f6a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8007f6e:	1a9b      	subs	r3, r3, r2
 8007f70:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8007f72:	6a21      	ldr	r1, [r4, #32]
 8007f74:	f7fa fadc 	bl	8002530 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8007f78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007f7a:	42ab      	cmp	r3, r5
 8007f7c:	d327      	bcc.n	8007fce <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8007f7e:	b95d      	cbnz	r5, 8007f98 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f80:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8007f82:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8007f84:	f043 0304 	orr.w	r3, r3, #4
 8007f88:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8007f8a:	2306      	movs	r3, #6
 8007f8c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8007f90:	f7fa fb3c 	bl	800260c <HAL_JPEG_ErrorCallback>
}
 8007f94:	b003      	add	sp, #12
 8007f96:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8007f98:	fbb3 f2f5 	udiv	r2, r3, r5
 8007f9c:	fb05 3212 	mls	r2, r5, r2, r3
 8007fa0:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007fa2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007fa4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007fa6:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8007fa8:	04db      	lsls	r3, r3, #19
 8007faa:	d40a      	bmi.n	8007fc2 <JPEG_MDMAInCpltCallback+0x84>
 8007fac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8007fae:	b143      	cbz	r3, 8007fc2 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8007fb0:	2101      	movs	r1, #1
 8007fb2:	3240      	adds	r2, #64	@ 0x40
 8007fb4:	9100      	str	r1, [sp, #0]
 8007fb6:	69a1      	ldr	r1, [r4, #24]
 8007fb8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007fba:	f000 fd58 	bl	8008a6e <HAL_MDMA_Start_IT>
 8007fbe:	2800      	cmp	r0, #0
 8007fc0:	d1de      	bne.n	8007f80 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8007fc2:	6822      	ldr	r2, [r4, #0]
 8007fc4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8007fc6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007fca:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fcc:	e7e2      	b.n	8007f94 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0e8      	beq.n	8007fa4 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8007fd2:	079a      	lsls	r2, r3, #30
 8007fd4:	d0e6      	beq.n	8007fa4 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8007fd6:	f023 0303 	bic.w	r3, r3, #3
 8007fda:	3304      	adds	r3, #4
 8007fdc:	e7e1      	b.n	8007fa2 <JPEG_MDMAInCpltCallback+0x64>

08007fde <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007fde:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8007fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007fe2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007fe6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8007fe8:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d32a      	bcc.n	8008044 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8007fee:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8007ff0:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8007ff2:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007ff4:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8007ff6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8007ff8:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8007ffa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007ffc:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8007ffe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008000:	69e0      	ldr	r0, [r4, #28]
 8008002:	4428      	add	r0, r5
 8008004:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008008:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800800a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800800c:	69e0      	ldr	r0, [r4, #28]
 800800e:	4428      	add	r0, r5
 8008010:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008014:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008018:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 800801a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800801c:	69e0      	ldr	r0, [r4, #28]
 800801e:	4428      	add	r0, r5
 8008020:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008022:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008024:	f103 0304 	add.w	r3, r3, #4
 8008028:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800802a:	d1e1      	bne.n	8007ff0 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800802c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800802e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008030:	429a      	cmp	r2, r3
 8008032:	d106      	bne.n	8008042 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008034:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008036:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008038:	4620      	mov	r0, r4
 800803a:	f7fa fa97 	bl	800256c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800803e:	2300      	movs	r3, #0
 8008040:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008044:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008046:	4293      	cmp	r3, r2
 8008048:	d9fb      	bls.n	8008042 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800804a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 800804c:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800804e:	1a9b      	subs	r3, r3, r2
 8008050:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008052:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008054:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008056:	d105      	bne.n	8008064 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008058:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800805a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800805c:	429f      	cmp	r7, r3
 800805e:	d119      	bne.n	8008094 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008060:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008062:	e7e9      	b.n	8008038 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008064:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008066:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800806a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800806c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 800806e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008070:	69e1      	ldr	r1, [r4, #28]
 8008072:	4429      	add	r1, r5
 8008074:	0a1d      	lsrs	r5, r3, #8
 8008076:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008078:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800807a:	69e1      	ldr	r1, [r4, #28]
 800807c:	4429      	add	r1, r5
 800807e:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008080:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008082:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008084:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008086:	69e1      	ldr	r1, [r4, #28]
 8008088:	4429      	add	r1, r5
 800808a:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 800808c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800808e:	3304      	adds	r3, #4
 8008090:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008092:	e7de      	b.n	8008052 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008094:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008096:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008098:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800809a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 800809c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 800809e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80080a0:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 80080a2:	d114      	bne.n	80080ce <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 80080a4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080a6:	4620      	mov	r0, r4
 80080a8:	f7fa fa60 	bl	800256c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80080ac:	2300      	movs	r3, #0
 80080ae:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 80080b0:	1d2b      	adds	r3, r5, #4
 80080b2:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 80080b4:	2b03      	cmp	r3, #3
 80080b6:	d8c4      	bhi.n	8008042 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80080b8:	00da      	lsls	r2, r3, #3
 80080ba:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080bc:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80080be:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80080c0:	fa26 f202 	lsr.w	r2, r6, r2
 80080c4:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80080c6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80080c8:	3201      	adds	r2, #1
 80080ca:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80080cc:	e7f2      	b.n	80080b4 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80080ce:	f002 0303 	and.w	r3, r2, #3
 80080d2:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80080d6:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80080d8:	00db      	lsls	r3, r3, #3
 80080da:	fa26 f303 	lsr.w	r3, r6, r3
 80080de:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80080e2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80080e4:	3301      	adds	r3, #1
 80080e6:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80080e8:	e7d9      	b.n	800809e <JPEG_StoreOutputData+0xc0>

080080ea <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080ea:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80080ec:	f003 0303 	and.w	r3, r3, #3
 80080f0:	2b02      	cmp	r3, #2
{
 80080f2:	b510      	push	{r4, lr}
 80080f4:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080f6:	d114      	bne.n	8008122 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80080f8:	6803      	ldr	r3, [r0, #0]
 80080fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80080fc:	065b      	lsls	r3, r3, #25
 80080fe:	d510      	bpl.n	8008122 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008100:	1d01      	adds	r1, r0, #4
 8008102:	f7ff fdb7 	bl	8007c74 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008106:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008108:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800810a:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800810c:	f7fa f9da 	bl	80024c4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008118:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800811a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800811c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008120:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8008122:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008124:	04d9      	lsls	r1, r3, #19
 8008126:	d407      	bmi.n	8008138 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800812c:	0792      	lsls	r2, r2, #30
 800812e:	d544      	bpl.n	80081ba <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008130:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff fe94 	bl	8007e60 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008138:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800813a:	0499      	lsls	r1, r3, #18
 800813c:	d407      	bmi.n	800814e <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008142:	0712      	lsls	r2, r2, #28
 8008144:	d53e      	bpl.n	80081c4 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008146:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008148:	4620      	mov	r0, r4
 800814a:	f7ff ff48 	bl	8007fde <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008152:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008156:	2a20      	cmp	r2, #32
 8008158:	d13c      	bne.n	80081d4 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800815a:	681a      	ldr	r2, [r3, #0]
 800815c:	f022 0201 	bic.w	r2, r2, #1
 8008160:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008162:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008164:	f002 020c 	and.w	r2, r2, #12
 8008168:	2a08      	cmp	r2, #8
 800816a:	d103      	bne.n	8008174 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800816c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800816e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008172:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008174:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008176:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800817a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 800817c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800817e:	b133      	cbz	r3, 800818e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008180:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008182:	4620      	mov	r0, r4
 8008184:	69e1      	ldr	r1, [r4, #28]
 8008186:	f7fa f9f1 	bl	800256c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800818a:	2300      	movs	r3, #0
 800818c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800818e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008190:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008192:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008194:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008198:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800819c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800819e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80081a0:	f04f 0200 	mov.w	r2, #0
 80081a4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80081a8:	f04f 0201 	mov.w	r2, #1
 80081ac:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80081b0:	d10d      	bne.n	80081ce <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80081b2:	f7fa fa2d 	bl	8002610 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 80081b6:	2001      	movs	r0, #1
}
 80081b8:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 80081ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081bc:	0758      	lsls	r0, r3, #29
 80081be:	d5bb      	bpl.n	8008138 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80081c0:	2101      	movs	r1, #1
 80081c2:	e7b6      	b.n	8008132 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80081c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c6:	06db      	lsls	r3, r3, #27
 80081c8:	d5c1      	bpl.n	800814e <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80081ca:	2101      	movs	r1, #1
 80081cc:	e7bc      	b.n	8008148 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80081ce:	f7ff fe31 	bl	8007e34 <HAL_JPEG_EncodeCpltCallback>
 80081d2:	e7f0      	b.n	80081b6 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80081d4:	2000      	movs	r0, #0
 80081d6:	e7ef      	b.n	80081b8 <JPEG_Process+0xce>

080081d8 <JPEG_DMA_PollResidualData>:
{
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4604      	mov	r4, r0
 80081dc:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80081de:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80081e0:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80081e2:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80081e6:	d122      	bne.n	800822e <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80081e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ea:	06d0      	lsls	r0, r2, #27
 80081ec:	d51f      	bpl.n	800822e <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80081ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80081f0:	69e1      	ldr	r1, [r4, #28]
 80081f2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80081f4:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80081f6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80081f8:	69e2      	ldr	r2, [r4, #28]
 80081fa:	440a      	add	r2, r1
 80081fc:	0a19      	lsrs	r1, r3, #8
 80081fe:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008200:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008202:	69e2      	ldr	r2, [r4, #28]
 8008204:	440a      	add	r2, r1
 8008206:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008208:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 800820a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 800820c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800820e:	69e2      	ldr	r2, [r4, #28]
 8008210:	440a      	add	r2, r1
 8008212:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8008214:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008216:	3304      	adds	r3, #4
 8008218:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 800821a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800821c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800821e:	429a      	cmp	r2, r3
 8008220:	d105      	bne.n	800822e <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008222:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008224:	4620      	mov	r0, r4
 8008226:	69e1      	ldr	r1, [r4, #28]
 8008228:	f7fa f9a0 	bl	800256c <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 800822c:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 800822e:	3e01      	subs	r6, #1
 8008230:	d1d5      	bne.n	80081de <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008232:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8008234:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008236:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008238:	06c9      	lsls	r1, r1, #27
 800823a:	d501      	bpl.n	8008240 <JPEG_DMA_PollResidualData+0x68>
 800823c:	0492      	lsls	r2, r2, #18
 800823e:	d420      	bmi.n	8008282 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008248:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800824a:	b133      	cbz	r3, 800825a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800824c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800824e:	4620      	mov	r0, r4
 8008250:	69e1      	ldr	r1, [r4, #28]
 8008252:	f7fa f98b 	bl	800256c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008256:	2300      	movs	r3, #0
 8008258:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 800825a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800825c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800825e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008260:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008264:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008268:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800826a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008274:	f04f 0201 	mov.w	r2, #1
 8008278:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800827c:	d102      	bne.n	8008284 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 800827e:	f7fa f9c7 	bl	8002610 <HAL_JPEG_DecodeCpltCallback>
}
 8008282:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008284:	f7ff fdd6 	bl	8007e34 <HAL_JPEG_EncodeCpltCallback>
}
 8008288:	e7fb      	b.n	8008282 <JPEG_DMA_PollResidualData+0xaa>

0800828a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 800828a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800828c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008292:	4604      	mov	r4, r0
 8008294:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008296:	d014      	beq.n	80082c2 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008298:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800829a:	f003 030c 	and.w	r3, r3, #12
 800829e:	2b0c      	cmp	r3, #12
 80082a0:	d146      	bne.n	8008330 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80082a2:	07cb      	lsls	r3, r1, #31
 80082a4:	d520      	bpl.n	80082e8 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 80082a6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80082a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082ac:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 80082ae:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80082b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 80082b2:	b941      	cbnz	r1, 80082c6 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80082b4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80082b6:	f043 0304 	orr.w	r3, r3, #4
 80082ba:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 80082bc:	2306      	movs	r3, #6
 80082be:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80082c2:	2001      	movs	r0, #1
 80082c4:	e01d      	b.n	8008302 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 80082c6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80082c8:	fbb3 f2f1 	udiv	r2, r3, r1
 80082cc:	fb01 3212 	mls	r2, r1, r2, r3
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 80082d4:	b143      	cbz	r3, 80082e8 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	2101      	movs	r1, #1
 80082da:	3240      	adds	r2, #64	@ 0x40
 80082dc:	9100      	str	r1, [sp, #0]
 80082de:	69a1      	ldr	r1, [r4, #24]
 80082e0:	f000 fbc5 	bl	8008a6e <HAL_MDMA_Start_IT>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d1e5      	bne.n	80082b4 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80082e8:	07a8      	lsls	r0, r5, #30
 80082ea:	d509      	bpl.n	8008300 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 80082ec:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082ee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80082f2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80082f4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80082f6:	0419      	lsls	r1, r3, #16
 80082f8:	d505      	bpl.n	8008306 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff ff6c 	bl	80081d8 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008300:	2000      	movs	r0, #0
}
 8008302:	b003      	add	sp, #12
 8008304:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008306:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008308:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 800830a:	2900      	cmp	r1, #0
 800830c:	d0d2      	beq.n	80082b4 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800830e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008310:	fbb3 f2f1 	udiv	r2, r3, r1
 8008314:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008318:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 800831a:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800831c:	2201      	movs	r2, #1
 800831e:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008320:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008322:	9200      	str	r2, [sp, #0]
 8008324:	69e2      	ldr	r2, [r4, #28]
 8008326:	f000 fba2 	bl	8008a6e <HAL_MDMA_Start_IT>
 800832a:	2800      	cmp	r0, #0
 800832c:	d0e8      	beq.n	8008300 <HAL_JPEG_Resume+0x76>
 800832e:	e7c1      	b.n	80082b4 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008330:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008332:	f003 030c 	and.w	r3, r3, #12
 8008336:	2b08      	cmp	r3, #8
 8008338:	d1e2      	bne.n	8008300 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 800833a:	f011 0301 	ands.w	r3, r1, #1
 800833e:	d004      	beq.n	800834a <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008340:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008342:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008346:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008348:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 800834a:	07aa      	lsls	r2, r5, #30
 800834c:	d505      	bpl.n	800835a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 800834e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008350:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008358:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 800835a:	6821      	ldr	r1, [r4, #0]
 800835c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 800835e:	4313      	orrs	r3, r2
 8008360:	630b      	str	r3, [r1, #48]	@ 0x30
 8008362:	e7cd      	b.n	8008300 <HAL_JPEG_Resume+0x76>

08008364 <JPEG_DMA_EndProcess>:
{
 8008364:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008366:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008368:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800836a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008374:	1ad3      	subs	r3, r2, r3
 8008376:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008378:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800837a:	429a      	cmp	r2, r3
 800837c:	d105      	bne.n	800838a <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800837e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008380:	69c1      	ldr	r1, [r0, #28]
 8008382:	f7fa f8f3 	bl	800256c <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008386:	2300      	movs	r3, #0
 8008388:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 800838a:	6823      	ldr	r3, [r4, #0]
 800838c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 800838e:	f015 0510 	ands.w	r5, r5, #16
 8008392:	d124      	bne.n	80083de <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008394:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008396:	b12b      	cbz	r3, 80083a4 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008398:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800839a:	4620      	mov	r0, r4
 800839c:	69e1      	ldr	r1, [r4, #28]
 800839e:	f7fa f8e5 	bl	800256c <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 80083a2:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80083a4:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80083a6:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80083a8:	6813      	ldr	r3, [r2, #0]
 80083aa:	f023 0301 	bic.w	r3, r3, #1
 80083ae:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 80083b0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083b4:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083b8:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083bc:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 80083be:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 80083c0:	f04f 0200 	mov.w	r2, #0
 80083c4:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 80083c8:	f04f 0201 	mov.w	r2, #1
 80083cc:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80083d0:	d102      	bne.n	80083d8 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 80083d2:	f7fa f91d 	bl	8002610 <HAL_JPEG_DecodeCpltCallback>
}
 80083d6:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80083d8:	f7ff fd2c 	bl	8007e34 <HAL_JPEG_EncodeCpltCallback>
 80083dc:	e7fb      	b.n	80083d6 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80083de:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80083e0:	049b      	lsls	r3, r3, #18
 80083e2:	d4f8      	bmi.n	80083d6 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 80083e4:	4620      	mov	r0, r4
}
 80083e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 80083ea:	f7ff bef5 	b.w	80081d8 <JPEG_DMA_PollResidualData>

080083ee <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80083ee:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 80083f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80083f2:	041b      	lsls	r3, r3, #16
 80083f4:	d501      	bpl.n	80083fa <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 80083f6:	f7ff bfb5 	b.w	8008364 <JPEG_DMA_EndProcess>
}
 80083fa:	4770      	bx	lr

080083fc <JPEG_MDMAOutCpltCallback>:
{
 80083fc:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80083fe:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008400:	6823      	ldr	r3, [r4, #0]
 8008402:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008404:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008408:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800840a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800840c:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008410:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008414:	0412      	lsls	r2, r2, #16
 8008416:	0c12      	lsrs	r2, r2, #16
 8008418:	2a0c      	cmp	r2, #12
 800841a:	d125      	bne.n	8008468 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800841c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800841e:	069a      	lsls	r2, r3, #26
 8008420:	d424      	bmi.n	800846c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008422:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008424:	4620      	mov	r0, r4
 8008426:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008428:	695a      	ldr	r2, [r3, #20]
 800842a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800842c:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008430:	1a9b      	subs	r3, r3, r2
 8008432:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008434:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008436:	f7fa f899 	bl	800256c <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800843a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800843c:	049b      	lsls	r3, r3, #18
 800843e:	d415      	bmi.n	800846c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008440:	6821      	ldr	r1, [r4, #0]
 8008442:	2301      	movs	r3, #1
 8008444:	3144      	adds	r1, #68	@ 0x44
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800844a:	69e2      	ldr	r2, [r4, #28]
 800844c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800844e:	f000 fb0e 	bl	8008a6e <HAL_MDMA_Start_IT>
 8008452:	b158      	cbz	r0, 800846c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008454:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008456:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008458:	f043 0304 	orr.w	r3, r3, #4
 800845c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800845e:	2306      	movs	r3, #6
 8008460:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008464:	f7fa f8d2 	bl	800260c <HAL_JPEG_ErrorCallback>
}
 8008468:	b002      	add	sp, #8
 800846a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800846c:	6822      	ldr	r2, [r4, #0]
 800846e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008470:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008474:	6313      	str	r3, [r2, #48]	@ 0x30
 8008476:	e7f7      	b.n	8008468 <JPEG_MDMAOutCpltCallback+0x6c>

08008478 <HAL_JPEG_IRQHandler>:
{
 8008478:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800847a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800847e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008480:	3b03      	subs	r3, #3
 8008482:	2b01      	cmp	r3, #1
 8008484:	d850      	bhi.n	8008528 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008486:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008488:	f003 030c 	and.w	r3, r3, #12
 800848c:	2b08      	cmp	r3, #8
 800848e:	d103      	bne.n	8008498 <HAL_JPEG_IRQHandler+0x20>
}
 8008490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008494:	f7ff be29 	b.w	80080ea <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008498:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800849a:	f003 030c 	and.w	r3, r3, #12
 800849e:	2b0c      	cmp	r3, #12
 80084a0:	d142      	bne.n	8008528 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084a4:	f003 0303 	and.w	r3, r3, #3
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d114      	bne.n	80084d6 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80084ac:	6803      	ldr	r3, [r0, #0]
 80084ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80084b0:	0659      	lsls	r1, r3, #25
 80084b2:	d510      	bpl.n	80084d6 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80084b4:	1d01      	adds	r1, r0, #4
 80084b6:	f7ff fbdd 	bl	8007c74 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80084ba:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80084bc:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80084be:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80084c0:	f7fa f800 	bl	80024c4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084cc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80084ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80084d4:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084da:	0692      	lsls	r2, r2, #26
 80084dc:	d524      	bpl.n	8008528 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80084de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80084e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 80084e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80084e6:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	f022 0201 	bic.w	r2, r2, #1
 80084ee:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80084f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084f2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80084f6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80084f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084fa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80084fe:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008500:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008504:	2b02      	cmp	r3, #2
 8008506:	d101      	bne.n	800850c <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8008508:	f000 fafa 	bl	8008b00 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800850c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800850e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008512:	2b02      	cmp	r3, #2
 8008514:	d103      	bne.n	800851e <HAL_JPEG_IRQHandler+0xa6>
}
 8008516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800851a:	f000 baf1 	b.w	8008b00 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800851e:	4620      	mov	r0, r4
}
 8008520:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8008524:	f7ff bf1e 	b.w	8008364 <JPEG_DMA_EndProcess>
}
 8008528:	bd10      	pop	{r4, pc}

0800852a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800852a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800852c:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800852e:	f8d1 c000 	ldr.w	ip, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008532:	3284      	adds	r2, #132	@ 0x84
 8008534:	1883      	adds	r3, r0, r2
{
 8008536:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800853a:	68c6      	ldr	r6, [r0, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800853c:	f10c 0701 	add.w	r7, ip, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008540:	685d      	ldr	r5, [r3, #4]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008542:	f04f 0e00 	mov.w	lr, #0
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008546:	684c      	ldr	r4, [r1, #4]
 8008548:	f3c6 460b 	ubfx	r6, r6, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800854c:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008550:	f8d1 9018 	ldr.w	r9, [r1, #24]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008554:	4426      	add	r6, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008556:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008558:	68c5      	ldr	r5, [r0, #12]
 800855a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800855e:	443d      	add	r5, r7
 8008560:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008564:	605d      	str	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008566:	68c6      	ldr	r6, [r0, #12]
 8008568:	68cd      	ldr	r5, [r1, #12]
 800856a:	f3c6 060a 	ubfx	r6, r6, #0, #11
 800856e:	442e      	add	r6, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008570:	689d      	ldr	r5, [r3, #8]
 8008572:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8008576:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008578:	688d      	ldr	r5, [r1, #8]
 800857a:	68c7      	ldr	r7, [r0, #12]
 800857c:	3501      	adds	r5, #1
 800857e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008582:	443d      	add	r5, r7
 8008584:	ea45 4506 	orr.w	r5, r5, r6, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008588:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800858a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800858c:	691d      	ldr	r5, [r3, #16]
 800858e:	f025 0507 	bic.w	r5, r5, #7
 8008592:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008594:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8008596:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008598:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800859c:	f891 8031 	ldrb.w	r8, [r1, #49]	@ 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80085a0:	f8c3 e018 	str.w	lr, [r3, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085a4:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80085a8:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 80085ac:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80085b0:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 80085b4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80085b6:	695d      	ldr	r5, [r3, #20]
 80085b8:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 80085bc:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80085be:	694d      	ldr	r5, [r1, #20]
 80085c0:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80085c2:	69dd      	ldr	r5, [r3, #28]
 80085c4:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 80085c8:	f025 0507 	bic.w	r5, r5, #7
 80085cc:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80085ce:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 80085d2:	433d      	orrs	r5, r7
 80085d4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80085d6:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80085d8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80085da:	f8c3 e028 	str.w	lr, [r3, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80085de:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80085e0:	b31e      	cbz	r6, 800862a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80085e2:	2e01      	cmp	r6, #1
 80085e4:	d023      	beq.n	800862e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80085e6:	1eb5      	subs	r5, r6, #2
 80085e8:	2d02      	cmp	r5, #2
 80085ea:	d922      	bls.n	8008632 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 80085ec:	2e07      	cmp	r6, #7
 80085ee:	bf14      	ite	ne
 80085f0:	2501      	movne	r5, #1
 80085f2:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085f4:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80085f6:	eba4 040c 	sub.w	r4, r4, ip
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80085fa:	f006 26e0 	and.w	r6, r6, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80085fe:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008600:	62de      	str	r6, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008602:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008604:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008606:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008608:	436e      	muls	r6, r5
 800860a:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 800860e:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008610:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8008612:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8008616:	f024 0407 	bic.w	r4, r4, #7
 800861a:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800861c:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800861e:	5883      	ldr	r3, [r0, r2]
 8008620:	f043 0301 	orr.w	r3, r3, #1
 8008624:	5083      	str	r3, [r0, r2]
}
 8008626:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800862a:	2504      	movs	r5, #4
 800862c:	e7e2      	b.n	80085f4 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800862e:	2503      	movs	r5, #3
 8008630:	e7e0      	b.n	80085f4 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8008632:	2502      	movs	r5, #2
 8008634:	e7de      	b.n	80085f4 <LTDC_SetConfig+0xca>
	...

08008638 <HAL_LTDC_Init>:
{
 8008638:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800863a:	4604      	mov	r4, r0
 800863c:	2800      	cmp	r0, #0
 800863e:	d063      	beq.n	8008708 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008640:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8008644:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008648:	b91b      	cbnz	r3, 8008652 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800864a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800864e:	f7f8 fdad 	bl	80011ac <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008652:	2302      	movs	r3, #2
 8008654:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	699a      	ldr	r2, [r3, #24]
 800865c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008660:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008662:	6999      	ldr	r1, [r3, #24]
 8008664:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008668:	4302      	orrs	r2, r0
 800866a:	68e0      	ldr	r0, [r4, #12]
 800866c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800866e:	6920      	ldr	r0, [r4, #16]
 8008670:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008672:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008674:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008676:	4925      	ldr	r1, [pc, #148]	@ (800870c <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008678:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800867a:	689a      	ldr	r2, [r3, #8]
 800867c:	400a      	ands	r2, r1
 800867e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008680:	689a      	ldr	r2, [r3, #8]
 8008682:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8008686:	69a0      	ldr	r0, [r4, #24]
 8008688:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800868a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800868c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800868e:	68da      	ldr	r2, [r3, #12]
 8008690:	400a      	ands	r2, r1
 8008692:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8008694:	68da      	ldr	r2, [r3, #12]
 8008696:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800869a:	6a20      	ldr	r0, [r4, #32]
 800869c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800869e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80086a0:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80086a2:	691a      	ldr	r2, [r3, #16]
 80086a4:	400a      	ands	r2, r1
 80086a6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80086a8:	691a      	ldr	r2, [r3, #16]
 80086aa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80086ae:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80086b0:	4302      	orrs	r2, r0
 80086b2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80086b4:	695a      	ldr	r2, [r3, #20]
 80086b6:	400a      	ands	r2, r1
  tmp = (hltdc->Init.TotalWidth << 16U);
 80086b8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80086ba:	615a      	str	r2, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80086bc:	695a      	ldr	r2, [r3, #20]
 80086be:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80086c2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80086c4:	430a      	orrs	r2, r1
 80086c6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80086ca:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086ce:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80086d2:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80086d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086d8:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 80086da:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 80086de:	432a      	orrs	r2, r5
 80086e0:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086e4:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80086e6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80086ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80086ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80086ee:	f042 0206 	orr.w	r2, r2, #6
 80086f2:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80086f4:	699a      	ldr	r2, [r3, #24]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80086fc:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80086fe:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008702:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8008706:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008708:	2001      	movs	r0, #1
 800870a:	e7fc      	b.n	8008706 <HAL_LTDC_Init+0xce>
 800870c:	f000f800 	.word	0xf000f800

08008710 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8008710:	4770      	bx	lr

08008712 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8008712:	4770      	bx	lr

08008714 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8008714:	4770      	bx	lr

08008716 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008716:	6803      	ldr	r3, [r0, #0]
{
 8008718:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800871a:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800871c:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800871e:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008720:	0772      	lsls	r2, r6, #29
 8008722:	d514      	bpl.n	800874e <HAL_LTDC_IRQHandler+0x38>
 8008724:	0769      	lsls	r1, r5, #29
 8008726:	d512      	bpl.n	800874e <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008728:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800872a:	f022 0204 	bic.w	r2, r2, #4
 800872e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008730:	2204      	movs	r2, #4
 8008732:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008734:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8008740:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008742:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008746:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800874a:	f7ff ffe1 	bl	8008710 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800874e:	07b2      	lsls	r2, r6, #30
 8008750:	d516      	bpl.n	8008780 <HAL_LTDC_IRQHandler+0x6a>
 8008752:	07ab      	lsls	r3, r5, #30
 8008754:	d514      	bpl.n	8008780 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008756:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008758:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800875a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800875c:	f022 0202 	bic.w	r2, r2, #2
 8008760:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008762:	2202      	movs	r2, #2
 8008764:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008766:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800876a:	4313      	orrs	r3, r2
 800876c:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008770:	2304      	movs	r3, #4
 8008772:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008776:	2300      	movs	r3, #0
 8008778:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800877c:	f7ff ffc8 	bl	8008710 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008780:	07f0      	lsls	r0, r6, #31
 8008782:	d510      	bpl.n	80087a6 <HAL_LTDC_IRQHandler+0x90>
 8008784:	07e9      	lsls	r1, r5, #31
 8008786:	d50e      	bpl.n	80087a6 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008788:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800878a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800878c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800878e:	f022 0201 	bic.w	r2, r2, #1
 8008792:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008794:	2201      	movs	r2, #1
 8008796:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008798:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800879a:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800879e:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80087a2:	f7ff ffb6 	bl	8008712 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80087a6:	0732      	lsls	r2, r6, #28
 80087a8:	d511      	bpl.n	80087ce <HAL_LTDC_IRQHandler+0xb8>
 80087aa:	072b      	lsls	r3, r5, #28
 80087ac:	d50f      	bpl.n	80087ce <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80087ae:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 80087b0:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80087b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087b4:	f022 0208 	bic.w	r2, r2, #8
 80087b8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80087ba:	2208      	movs	r2, #8
 80087bc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80087be:	2301      	movs	r3, #1
 80087c0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80087c4:	2300      	movs	r3, #0
 80087c6:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80087ca:	f7ff ffa3 	bl	8008714 <HAL_LTDC_ReloadEventCallback>
}
 80087ce:	bd70      	pop	{r4, r5, r6, pc}

080087d0 <HAL_LTDC_ConfigLayer>:
{
 80087d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 80087d4:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 80087d8:	4606      	mov	r6, r0
 80087da:	460f      	mov	r7, r1
 80087dc:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 80087de:	2b01      	cmp	r3, #1
 80087e0:	f04f 0002 	mov.w	r0, #2
 80087e4:	d01f      	beq.n	8008826 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087e6:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 80087e8:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087ec:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80087ee:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087f2:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 80087f6:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80087fa:	3438      	adds	r4, #56	@ 0x38
 80087fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80087fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008804:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008806:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008808:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800880a:	4630      	mov	r0, r6
 800880c:	4662      	mov	r2, ip
 800880e:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008810:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008812:	f7ff fe8a 	bl	800852a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008816:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008818:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800881a:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800881e:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008822:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8008826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800882c <HAL_LTDC_SetPitch>:
{
 800882c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800882e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8008832:	2b01      	cmp	r3, #1
 8008834:	f04f 0302 	mov.w	r3, #2
 8008838:	d02c      	beq.n	8008894 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800883a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800883c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008840:	fb04 0402 	mla	r4, r4, r2, r0
 8008844:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008846:	b33c      	cbz	r4, 8008898 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008848:	2c01      	cmp	r4, #1
 800884a:	d027      	beq.n	800889c <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800884c:	1ea5      	subs	r5, r4, #2
 800884e:	429d      	cmp	r5, r3
 8008850:	d902      	bls.n	8008858 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 8008852:	2c07      	cmp	r4, #7
 8008854:	bf18      	it	ne
 8008856:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8008858:	01d2      	lsls	r2, r2, #7
 800885a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800885c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800885e:	3284      	adds	r2, #132	@ 0x84
 8008860:	4422      	add	r2, r4
 8008862:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 8008864:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8008868:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800886c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800886e:	4c0c      	ldr	r4, [pc, #48]	@ (80088a0 <HAL_LTDC_SetPitch+0x74>)
 8008870:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008872:	f045 0501 	orr.w	r5, r5, #1
 8008876:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8008878:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800887a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800887e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8008880:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8008888:	2301      	movs	r3, #1
 800888a:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800888e:	2300      	movs	r3, #0
 8008890:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8008894:	4618      	mov	r0, r3
 8008896:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8008898:	2304      	movs	r3, #4
 800889a:	e7dd      	b.n	8008858 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800889c:	2303      	movs	r3, #3
 800889e:	e7db      	b.n	8008858 <HAL_LTDC_SetPitch+0x2c>
 80088a0:	50001000 	.word	0x50001000

080088a4 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80088a4:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80088a6:	6804      	ldr	r4, [r0, #0]
 80088a8:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80088ac:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80088b0:	6965      	ldr	r5, [r4, #20]
 80088b2:	ea4f 4555 	mov.w	r5, r5, lsr #17
 80088b6:	ea4f 4545 	mov.w	r5, r5, lsl #17
 80088ba:	ea45 0503 	orr.w	r5, r5, r3
 80088be:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80088c0:	9d03      	ldr	r5, [sp, #12]
 80088c2:	6963      	ldr	r3, [r4, #20]
 80088c4:	f105 35ff 	add.w	r5, r5, #4294967295
 80088c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088cc:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 80088d0:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80088d2:	f04f 031f 	mov.w	r3, #31
 80088d6:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 80088d8:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 80088da:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 80088dc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088de:	bf0c      	ite	eq
 80088e0:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80088e4:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 80088e8:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 80088ec:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 80088ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80088f0:	bf0c      	ite	eq
 80088f2:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 80088f6:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 80088fa:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80088fc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80088fe:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008900:	bd30      	pop	{r4, r5, pc}

08008902 <HAL_MDMA_Init>:
{
 8008902:	b538      	push	{r3, r4, r5, lr}
 8008904:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008906:	f7fd fb15 	bl	8005f34 <HAL_GetTick>
 800890a:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800890c:	2c00      	cmp	r4, #0
 800890e:	d061      	beq.n	80089d4 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8008910:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8008912:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8008914:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 8008918:	2302      	movs	r3, #2
 800891a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800891e:	68d3      	ldr	r3, [r2, #12]
 8008920:	f023 0301 	bic.w	r3, r3, #1
 8008924:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008926:	6823      	ldr	r3, [r4, #0]
 8008928:	68da      	ldr	r2, [r3, #12]
 800892a:	07d2      	lsls	r2, r2, #31
 800892c:	d448      	bmi.n	80089c0 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800892e:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 8008932:	430a      	orrs	r2, r1
 8008934:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 8008936:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800893a:	430a      	orrs	r2, r1
 800893c:	69e1      	ldr	r1, [r4, #28]
 800893e:	430a      	orrs	r2, r1
 8008940:	6a21      	ldr	r1, [r4, #32]
 8008942:	430a      	orrs	r2, r1
 8008944:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008946:	430a      	orrs	r2, r1
 8008948:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800894a:	430a      	orrs	r2, r1
 800894c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800894e:	430a      	orrs	r2, r1
 8008950:	68a1      	ldr	r1, [r4, #8]
 8008952:	430a      	orrs	r2, r1
 8008954:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8008956:	3901      	subs	r1, #1
 8008958:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800895c:	6861      	ldr	r1, [r4, #4]
 800895e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 8008962:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008964:	d103      	bne.n	800896e <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8008966:	691a      	ldr	r2, [r3, #16]
 8008968:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800896c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800896e:	2200      	movs	r2, #0
 8008970:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 8008972:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008974:	2a00      	cmp	r2, #0
 8008976:	da04      	bge.n	8008982 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8008978:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800897a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800897c:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8008980:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8008982:	b292      	uxth	r2, r2
 8008984:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8008986:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008988:	2a00      	cmp	r2, #0
 800898a:	da25      	bge.n	80089d8 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800898c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800898e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8008990:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8008994:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008996:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8008998:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800899c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80089a0:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 80089a2:	f04f 0200 	mov.w	r2, #0
 80089a6:	d019      	beq.n	80089dc <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80089a8:	b2c9      	uxtb	r1, r1
 80089aa:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80089ac:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 80089ae:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80089b0:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 80089b2:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 80089b4:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 80089b6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 80089ba:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 80089be:	e00a      	b.n	80089d6 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 80089c0:	f7fd fab8 	bl	8005f34 <HAL_GetTick>
 80089c4:	1b40      	subs	r0, r0, r5
 80089c6:	2805      	cmp	r0, #5
 80089c8:	d9ad      	bls.n	8008926 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 80089ca:	2340      	movs	r3, #64	@ 0x40
 80089cc:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80089ce:	2303      	movs	r3, #3
 80089d0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 80089d4:	2001      	movs	r0, #1
}
 80089d6:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 80089d8:	6a18      	ldr	r0, [r3, #32]
 80089da:	e7dd      	b.n	8008998 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 80089dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80089de:	e7e5      	b.n	80089ac <HAL_MDMA_Init+0xaa>

080089e0 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 80089e0:	b1d8      	cbz	r0, 8008a1a <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 80089e2:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80089e4:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 80089e6:	68d3      	ldr	r3, [r2, #12]
 80089e8:	f023 0301 	bic.w	r3, r3, #1
 80089ec:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 80089ee:	2300      	movs	r3, #0
 80089f0:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 80089f2:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 80089f4:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 80089f6:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80089f8:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80089fa:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80089fc:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80089fe:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8008a00:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8008a02:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8008a04:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a06:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 8008a08:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 8008a0a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8008a0e:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8008a12:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 8008a16:	4618      	mov	r0, r3
 8008a18:	4770      	bx	lr
    return HAL_ERROR;
 8008a1a:	2001      	movs	r0, #1
}
 8008a1c:	4770      	bx	lr

08008a1e <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8008a1e:	4603      	mov	r3, r0
{
 8008a20:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8008a22:	b300      	cbz	r0, 8008a66 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8008a24:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008a28:	2801      	cmp	r0, #1
 8008a2a:	d01e      	beq.n	8008a6a <HAL_MDMA_ConfigPostRequestMask+0x4c>
 8008a2c:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008a2e:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 8008a32:	42a5      	cmp	r5, r4
 8008a34:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 8008a36:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008a3a:	d112      	bne.n	8008a62 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 8008a3c:	681c      	ldr	r4, [r3, #0]
 8008a3e:	6925      	ldr	r5, [r4, #16]
 8008a40:	006d      	lsls	r5, r5, #1
 8008a42:	d407      	bmi.n	8008a54 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 8008a44:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 8008a46:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a48:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 8008a4a:	b939      	cbnz	r1, 8008a5c <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a4c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 8008a50:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 8008a52:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8008a5a:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8008a5c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8008a60:	e7f6      	b.n	8008a50 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 8008a62:	4620      	mov	r0, r4
 8008a64:	e7f6      	b.n	8008a54 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 8008a66:	2001      	movs	r0, #1
 8008a68:	e7f7      	b.n	8008a5a <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8008a6a:	2002      	movs	r0, #2
 8008a6c:	e7f5      	b.n	8008a5a <HAL_MDMA_ConfigPostRequestMask+0x3c>

08008a6e <HAL_MDMA_Start_IT>:
{
 8008a6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8008a70:	4604      	mov	r4, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d042      	beq.n	8008afc <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 8008a76:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8008a7a:	2d01      	cmp	r5, #1
 8008a7c:	d03c      	beq.n	8008af8 <HAL_MDMA_Start_IT+0x8a>
 8008a7e:	2501      	movs	r5, #1
 8008a80:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 8008a84:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8008a88:	2d01      	cmp	r5, #1
 8008a8a:	f04f 0500 	mov.w	r5, #0
 8008a8e:	d131      	bne.n	8008af4 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8008a90:	2602      	movs	r6, #2
 8008a92:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8008a96:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8008a98:	6805      	ldr	r5, [r0, #0]
 8008a9a:	68ee      	ldr	r6, [r5, #12]
 8008a9c:	f026 0601 	bic.w	r6, r6, #1
 8008aa0:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8008aa2:	9e06      	ldr	r6, [sp, #24]
 8008aa4:	9600      	str	r6, [sp, #0]
 8008aa6:	f7ff fefd 	bl	80088a4 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8008aaa:	68eb      	ldr	r3, [r5, #12]
 8008aac:	f043 0306 	orr.w	r3, r3, #6
 8008ab0:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8008ab2:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8008ab4:	b11b      	cbz	r3, 8008abe <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8008ab6:	68eb      	ldr	r3, [r5, #12]
 8008ab8:	f043 0310 	orr.w	r3, r3, #16
 8008abc:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008abe:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008ac0:	b11b      	cbz	r3, 8008aca <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8008ac2:	68eb      	ldr	r3, [r5, #12]
 8008ac4:	f043 0308 	orr.w	r3, r3, #8
 8008ac8:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8008aca:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008acc:	b11b      	cbz	r3, 8008ad6 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8008ace:	68eb      	ldr	r3, [r5, #12]
 8008ad0:	f043 0320 	orr.w	r3, r3, #32
 8008ad4:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 8008ad6:	68eb      	ldr	r3, [r5, #12]
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8008ade:	6863      	ldr	r3, [r4, #4]
 8008ae0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ae4:	d103      	bne.n	8008aee <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 8008ae6:	68eb      	ldr	r3, [r5, #12]
 8008ae8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008aec:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8008aee:	2000      	movs	r0, #0
}
 8008af0:	b002      	add	sp, #8
 8008af2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8008af4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 8008af8:	2002      	movs	r0, #2
 8008afa:	e7f9      	b.n	8008af0 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8008afc:	2001      	movs	r0, #1
 8008afe:	e7f7      	b.n	8008af0 <HAL_MDMA_Start_IT+0x82>

08008b00 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8008b00:	b128      	cbz	r0, 8008b0e <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8008b02:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	d003      	beq.n	8008b12 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 8008b0a:	2380      	movs	r3, #128	@ 0x80
 8008b0c:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8008b0e:	2001      	movs	r0, #1
 8008b10:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8008b12:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008b14:	2304      	movs	r3, #4
 8008b16:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 8008b1a:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8008b1c:	68d3      	ldr	r3, [r2, #12]
 8008b1e:	f023 0301 	bic.w	r3, r3, #1
 8008b22:	60d3      	str	r3, [r2, #12]
}
 8008b24:	4770      	bx	lr
	...

08008b28 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 8008b28:	2300      	movs	r3, #0
{
 8008b2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 8008b2c:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b2e:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b32:	4b58      	ldr	r3, [pc, #352]	@ (8008c94 <HAL_MDMA_IRQHandler+0x16c>)
{
 8008b34:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b36:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8008b38:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b3a:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b3c:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8008b3e:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 8008b42:	3a40      	subs	r2, #64	@ 0x40
 8008b44:	f3c2 1284 	ubfx	r2, r2, #6, #5
 8008b48:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 8008b4c:	4202      	tst	r2, r0
 8008b4e:	f000 809e 	beq.w	8008c8e <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	07d1      	lsls	r1, r2, #31
 8008b56:	d529      	bpl.n	8008bac <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8008b58:	68da      	ldr	r2, [r3, #12]
 8008b5a:	0792      	lsls	r2, r2, #30
 8008b5c:	d526      	bpl.n	8008bac <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8008b5e:	68da      	ldr	r2, [r3, #12]
 8008b60:	f022 0202 	bic.w	r2, r2, #2
 8008b64:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 8008b66:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b68:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8008b6a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8008b6c:	bf54      	ite	pl
 8008b6e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 8008b72:	f041 0102 	orrmi.w	r1, r1, #2
 8008b76:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8008b78:	0591      	lsls	r1, r2, #22
 8008b7a:	d503      	bpl.n	8008b84 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8008b7c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b7e:	f041 0104 	orr.w	r1, r1, #4
 8008b82:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 8008b84:	05d0      	lsls	r0, r2, #23
 8008b86:	d503      	bpl.n	8008b90 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8008b88:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b8a:	f041 0108 	orr.w	r1, r1, #8
 8008b8e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8008b90:	0551      	lsls	r1, r2, #21
 8008b92:	d503      	bpl.n	8008b9c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8008b94:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8008b96:	f041 0110 	orr.w	r1, r1, #16
 8008b9a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8008b9c:	0512      	lsls	r2, r2, #20
 8008b9e:	d503      	bpl.n	8008ba8 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8008ba0:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8008ba2:	f042 0220 	orr.w	r2, r2, #32
 8008ba6:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8008ba8:	2201      	movs	r2, #1
 8008baa:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	06d0      	lsls	r0, r2, #27
 8008bb0:	d508      	bpl.n	8008bc4 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8008bb2:	68da      	ldr	r2, [r3, #12]
 8008bb4:	0691      	lsls	r1, r2, #26
 8008bb6:	d505      	bpl.n	8008bc4 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8008bb8:	2210      	movs	r2, #16
 8008bba:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8008bbc:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8008bbe:	b10b      	cbz	r3, 8008bc4 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8008bc4:	6823      	ldr	r3, [r4, #0]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	0712      	lsls	r2, r2, #28
 8008bca:	d508      	bpl.n	8008bde <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8008bcc:	68da      	ldr	r2, [r3, #12]
 8008bce:	06d0      	lsls	r0, r2, #27
 8008bd0:	d505      	bpl.n	8008bde <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8008bd2:	2208      	movs	r2, #8
 8008bd4:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 8008bd6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8008bd8:	b10b      	cbz	r3, 8008bde <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8008bda:	4620      	mov	r0, r4
 8008bdc:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8008bde:	6823      	ldr	r3, [r4, #0]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	0751      	lsls	r1, r2, #29
 8008be4:	d508      	bpl.n	8008bf8 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8008be6:	68da      	ldr	r2, [r3, #12]
 8008be8:	0712      	lsls	r2, r2, #28
 8008bea:	d505      	bpl.n	8008bf8 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8008bec:	2204      	movs	r2, #4
 8008bee:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8008bf0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008bf2:	b10b      	cbz	r3, 8008bf8 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 8008bf8:	6823      	ldr	r3, [r4, #0]
 8008bfa:	681a      	ldr	r2, [r3, #0]
 8008bfc:	0790      	lsls	r0, r2, #30
 8008bfe:	d524      	bpl.n	8008c4a <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	0751      	lsls	r1, r2, #29
 8008c04:	d521      	bpl.n	8008c4a <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 8008c06:	68da      	ldr	r2, [r3, #12]
 8008c08:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8008c0c:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8008c0e:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8008c12:	2a04      	cmp	r2, #4
 8008c14:	f04f 0200 	mov.w	r2, #0
 8008c18:	d10c      	bne.n	8008c34 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 8008c1a:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8008c1c:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8008c20:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8008c24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d031      	beq.n	8008c8e <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 8008c2a:	4620      	mov	r0, r4
}
 8008c2c:	b003      	add	sp, #12
 8008c2e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 8008c32:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8008c34:	2102      	movs	r1, #2
 8008c36:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c38:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 8008c3a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 8008c42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008c44:	b10b      	cbz	r3, 8008c4a <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 8008c46:	4620      	mov	r0, r4
 8008c48:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8008c4a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 8008c4c:	b1fb      	cbz	r3, 8008c8e <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 8008c4e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8008c52:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8008c56:	2304      	movs	r3, #4
 8008c58:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8008c5c:	6823      	ldr	r3, [r4, #0]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	f022 0201 	bic.w	r2, r2, #1
 8008c64:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 8008c66:	9a01      	ldr	r2, [sp, #4]
 8008c68:	3201      	adds	r2, #1
 8008c6a:	42aa      	cmp	r2, r5
 8008c6c:	9201      	str	r2, [sp, #4]
 8008c6e:	d802      	bhi.n	8008c76 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8008c70:	68da      	ldr	r2, [r3, #12]
 8008c72:	07d2      	lsls	r2, r2, #31
 8008c74:	d4f7      	bmi.n	8008c66 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 8008c76:	2200      	movs	r2, #0
 8008c78:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8008c7c:	68db      	ldr	r3, [r3, #12]
 8008c7e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8008c80:	bf4c      	ite	mi
 8008c82:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 8008c84:	2301      	movpl	r3, #1
 8008c86:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8008c8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c8c:	e7cb      	b.n	8008c26 <HAL_MDMA_IRQHandler+0xfe>
}
 8008c8e:	b003      	add	sp, #12
 8008c90:	bd30      	pop	{r4, r5, pc}
 8008c92:	bf00      	nop
 8008c94:	2400006c 	.word	0x2400006c

08008c98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8008c98:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c9a:	4d1c      	ldr	r5, [pc, #112]	@ (8008d0c <HAL_PWREx_ConfigSupply+0x74>)
{
 8008c9c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8008c9e:	68eb      	ldr	r3, [r5, #12]
 8008ca0:	f003 0307 	and.w	r3, r3, #7
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	d006      	beq.n	8008cb6 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8008ca8:	68e8      	ldr	r0, [r5, #12]
 8008caa:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8008cae:	1b00      	subs	r0, r0, r4
 8008cb0:	bf18      	it	ne
 8008cb2:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8008cb4:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8008cb6:	68eb      	ldr	r3, [r5, #12]
 8008cb8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008cbc:	4303      	orrs	r3, r0
 8008cbe:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8008cc0:	f7fd f938 	bl	8005f34 <HAL_GetTick>
 8008cc4:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8008cc6:	686b      	ldr	r3, [r5, #4]
 8008cc8:	049a      	lsls	r2, r3, #18
 8008cca:	d508      	bpl.n	8008cde <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8008ccc:	f1a4 031d 	sub.w	r3, r4, #29
 8008cd0:	2b01      	cmp	r3, #1
 8008cd2:	d90c      	bls.n	8008cee <HAL_PWREx_ConfigSupply+0x56>
 8008cd4:	3c2d      	subs	r4, #45	@ 0x2d
 8008cd6:	2c01      	cmp	r4, #1
 8008cd8:	d909      	bls.n	8008cee <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8008cda:	2000      	movs	r0, #0
 8008cdc:	e7ea      	b.n	8008cb4 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cde:	f7fd f929 	bl	8005f34 <HAL_GetTick>
 8008ce2:	1b80      	subs	r0, r0, r6
 8008ce4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008ce8:	d9ed      	bls.n	8008cc6 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8008cea:	2001      	movs	r0, #1
 8008cec:	e7e2      	b.n	8008cb4 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8008cee:	f7fd f921 	bl	8005f34 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008cf2:	4d06      	ldr	r5, [pc, #24]	@ (8008d0c <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8008cf4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8008cf6:	68eb      	ldr	r3, [r5, #12]
 8008cf8:	03db      	lsls	r3, r3, #15
 8008cfa:	d4ee      	bmi.n	8008cda <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8008cfc:	f7fd f91a 	bl	8005f34 <HAL_GetTick>
 8008d00:	1b00      	subs	r0, r0, r4
 8008d02:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008d06:	d9f6      	bls.n	8008cf6 <HAL_PWREx_ConfigSupply+0x5e>
 8008d08:	e7ef      	b.n	8008cea <HAL_PWREx_ConfigSupply+0x52>
 8008d0a:	bf00      	nop
 8008d0c:	58024800 	.word	0x58024800

08008d10 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8008d14:	6a4e      	ldr	r6, [r1, #36]	@ 0x24
 8008d16:	b136      	cbz	r6, 8008d26 <QSPI_Config+0x16>
 8008d18:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8008d1c:	d003      	beq.n	8008d26 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008d1e:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8008d20:	6804      	ldr	r4, [r0, #0]
 8008d22:	3b01      	subs	r3, #1
 8008d24:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008d26:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d2a:	e9d1 7e07 	ldrd	r7, lr, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8008d2e:	f1ba 0f00 	cmp.w	sl, #0
 8008d32:	d04c      	beq.n	8008dce <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d34:	694c      	ldr	r4, [r1, #20]
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8008d36:	6805      	ldr	r5, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d38:	ea4f 4c84 	mov.w	ip, r4, lsl #18
 8008d3c:	ea4a 0406 	orr.w	r4, sl, r6
 8008d40:	680b      	ldr	r3, [r1, #0]
 8008d42:	f8d1 8034 	ldr.w	r8, [r1, #52]	@ 0x34
 8008d46:	ea44 0a02 	orr.w	sl, r4, r2
 8008d4a:	e9d1 090b 	ldrd	r0, r9, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008d4e:	f1be 0f00 	cmp.w	lr, #0
 8008d52:	d024      	beq.n	8008d9e <QSPI_Config+0x8e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008d54:	688e      	ldr	r6, [r1, #8]
 8008d56:	ea4a 040e 	orr.w	r4, sl, lr
 8008d5a:	61ee      	str	r6, [r5, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d5c:	690e      	ldr	r6, [r1, #16]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d5e:	b19f      	cbz	r7, 8008d88 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d60:	433b      	orrs	r3, r7
 8008d62:	4303      	orrs	r3, r0
 8008d64:	68c8      	ldr	r0, [r1, #12]
 8008d66:	ea43 0309 	orr.w	r3, r3, r9
 8008d6a:	ea43 0308 	orr.w	r3, r3, r8
 8008d6e:	4333      	orrs	r3, r6
 8008d70:	4303      	orrs	r3, r0
 8008d72:	ea43 030c 	orr.w	r3, r3, ip
 8008d76:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d78:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d7c:	616b      	str	r3, [r5, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008d7e:	d001      	beq.n	8008d84 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008d80:	684b      	ldr	r3, [r1, #4]
 8008d82:	61ab      	str	r3, [r5, #24]
                                           cmd->InstructionMode | FunctionalMode));
        }
      }
    }
  }
}
 8008d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d88:	4303      	orrs	r3, r0
 8008d8a:	ea43 0309 	orr.w	r3, r3, r9
 8008d8e:	ea43 0308 	orr.w	r3, r3, r8
 8008d92:	4333      	orrs	r3, r6
 8008d94:	ea43 030c 	orr.w	r3, r3, ip
 8008d98:	4323      	orrs	r3, r4
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008d9a:	616b      	str	r3, [r5, #20]
 8008d9c:	e7f2      	b.n	8008d84 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008d9e:	b167      	cbz	r7, 8008dba <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008da0:	433b      	orrs	r3, r7
 8008da2:	4303      	orrs	r3, r0
 8008da4:	68c8      	ldr	r0, [r1, #12]
 8008da6:	ea43 0309 	orr.w	r3, r3, r9
 8008daa:	ea43 0308 	orr.w	r3, r3, r8
 8008dae:	4303      	orrs	r3, r0
 8008db0:	ea43 030c 	orr.w	r3, r3, ip
 8008db4:	ea43 030a 	orr.w	r3, r3, sl
 8008db8:	e7de      	b.n	8008d78 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dba:	4303      	orrs	r3, r0
 8008dbc:	ea43 0309 	orr.w	r3, r3, r9
 8008dc0:	ea43 0408 	orr.w	r4, r3, r8
 8008dc4:	ea44 030c 	orr.w	r3, r4, ip
 8008dc8:	ea43 030a 	orr.w	r3, r3, sl
 8008dcc:	e7e5      	b.n	8008d9a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8008dce:	f1be 0f00 	cmp.w	lr, #0
 8008dd2:	d02c      	beq.n	8008e2e <QSPI_Config+0x11e>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008dd4:	ea46 050e 	orr.w	r5, r6, lr
 8008dd8:	688b      	ldr	r3, [r1, #8]
 8008dda:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008ddc:	694e      	ldr	r6, [r1, #20]
 8008dde:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8008de0:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008de2:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008de6:	04b6      	lsls	r6, r6, #18
 8008de8:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008dea:	e9d1 8e0b 	ldrd	r8, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008dee:	b1a7      	cbz	r7, 8008e1a <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008df0:	433b      	orrs	r3, r7
 8008df2:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008df4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008df8:	ea43 0308 	orr.w	r3, r3, r8
 8008dfc:	ea43 030e 	orr.w	r3, r3, lr
 8008e00:	ea43 030c 	orr.w	r3, r3, ip
 8008e04:	ea43 0300 	orr.w	r3, r3, r0
 8008e08:	ea43 0306 	orr.w	r3, r3, r6
 8008e0c:	ea43 0305 	orr.w	r3, r3, r5
 8008e10:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e12:	d0b7      	beq.n	8008d84 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008e14:	684b      	ldr	r3, [r1, #4]
 8008e16:	61a3      	str	r3, [r4, #24]
 8008e18:	e7b4      	b.n	8008d84 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e1a:	ea43 0308 	orr.w	r3, r3, r8
 8008e1e:	ea43 030e 	orr.w	r3, r3, lr
 8008e22:	ea43 030c 	orr.w	r3, r3, ip
 8008e26:	4333      	orrs	r3, r6
 8008e28:	432b      	orrs	r3, r5
 8008e2a:	6163      	str	r3, [r4, #20]
 8008e2c:	e7aa      	b.n	8008d84 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8008e2e:	b1d7      	cbz	r7, 8008e66 <QSPI_Config+0x156>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e30:	ea46 0307 	orr.w	r3, r6, r7
 8008e34:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 8008e36:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e38:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e3c:	ea43 0302 	orr.w	r3, r3, r2
 8008e40:	ea43 0304 	orr.w	r3, r3, r4
 8008e44:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 8008e46:	ea43 0304 	orr.w	r3, r3, r4
 8008e4a:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 8008e4c:	ea43 0304 	orr.w	r3, r3, r4
 8008e50:	68cc      	ldr	r4, [r1, #12]
 8008e52:	ea43 0304 	orr.w	r3, r3, r4
 8008e56:	694c      	ldr	r4, [r1, #20]
 8008e58:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8008e5c:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8008e5e:	d091      	beq.n	8008d84 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8008e60:	684b      	ldr	r3, [r1, #4]
 8008e62:	6183      	str	r3, [r0, #24]
 8008e64:	e78e      	b.n	8008d84 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8008e66:	2e00      	cmp	r6, #0
 8008e68:	d08c      	beq.n	8008d84 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8008e6a:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8008e6c:	6800      	ldr	r0, [r0, #0]
 8008e6e:	4333      	orrs	r3, r6
 8008e70:	4313      	orrs	r3, r2
 8008e72:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008e74:	4313      	orrs	r3, r2
 8008e76:	6b4a      	ldr	r2, [r1, #52]	@ 0x34
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	694a      	ldr	r2, [r1, #20]
 8008e7c:	ea43 4382 	orr.w	r3, r3, r2, lsl #18
 8008e80:	6143      	str	r3, [r0, #20]
}
 8008e82:	e77f      	b.n	8008d84 <QSPI_Config+0x74>

08008e84 <QSPI_WaitFlagStateUntilTimeout>:
{
 8008e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e88:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008e8c:	4604      	mov	r4, r0
 8008e8e:	460e      	mov	r6, r1
 8008e90:	4615      	mov	r5, r2
 8008e92:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8008e94:	6822      	ldr	r2, [r4, #0]
 8008e96:	6893      	ldr	r3, [r2, #8]
 8008e98:	4233      	tst	r3, r6
 8008e9a:	bf14      	ite	ne
 8008e9c:	2301      	movne	r3, #1
 8008e9e:	2300      	moveq	r3, #0
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	d101      	bne.n	8008ea8 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e012      	b.n	8008ece <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8008ea8:	f1b8 3fff 	cmp.w	r8, #4294967295
 8008eac:	d0f3      	beq.n	8008e96 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008eae:	f7fd f841 	bl	8005f34 <HAL_GetTick>
 8008eb2:	1bc0      	subs	r0, r0, r7
 8008eb4:	4540      	cmp	r0, r8
 8008eb6:	d802      	bhi.n	8008ebe <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8008eb8:	f1b8 0f00 	cmp.w	r8, #0
 8008ebc:	d1ea      	bne.n	8008e94 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008ebe:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ec0:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8008ec2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8008ec6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008ec8:	f043 0301 	orr.w	r3, r3, #1
 8008ecc:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8008ece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08008ed4 <HAL_QSPI_Init>:
{
 8008ed4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ed6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008ed8:	f7fd f82c 	bl	8005f34 <HAL_GetTick>
 8008edc:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8008ede:	2c00      	cmp	r4, #0
 8008ee0:	d03f      	beq.n	8008f62 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8008ee2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008ee6:	b92b      	cbnz	r3, 8008ef4 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8008ee8:	4620      	mov	r0, r4
 8008eea:	f7f8 f99f 	bl	800122c <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8008eee:	f241 3388 	movw	r3, #5000	@ 0x1388
 8008ef2:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008ef4:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008ef6:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008ef8:	68a3      	ldr	r3, [r4, #8]
 8008efa:	680a      	ldr	r2, [r1, #0]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8008f02:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008f06:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8008f08:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	9300      	str	r3, [sp, #0]
 8008f0e:	2120      	movs	r1, #32
 8008f10:	462b      	mov	r3, r5
 8008f12:	f7ff ffb7 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8008f16:	bb10      	cbnz	r0, 8008f5e <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8008f18:	6822      	ldr	r2, [r4, #0]
 8008f1a:	69e5      	ldr	r5, [r4, #28]
 8008f1c:	68e3      	ldr	r3, [r4, #12]
 8008f1e:	6811      	ldr	r1, [r2, #0]
 8008f20:	432b      	orrs	r3, r5
 8008f22:	6a25      	ldr	r5, [r4, #32]
 8008f24:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8008f28:	432b      	orrs	r3, r5
 8008f2a:	6865      	ldr	r5, [r4, #4]
 8008f2c:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8008f30:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8008f34:	430b      	orrs	r3, r1
 8008f36:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8008f38:	6855      	ldr	r5, [r2, #4]
 8008f3a:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8008f3e:	430b      	orrs	r3, r1
 8008f40:	6921      	ldr	r1, [r4, #16]
 8008f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008f46:	4908      	ldr	r1, [pc, #32]	@ (8008f68 <HAL_QSPI_Init+0x94>)
 8008f48:	4029      	ands	r1, r5
 8008f4a:	430b      	orrs	r3, r1
 8008f4c:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8008f4e:	6813      	ldr	r3, [r2, #0]
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8008f56:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f58:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8008f5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8008f5e:	b003      	add	sp, #12
 8008f60:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8008f62:	2001      	movs	r0, #1
 8008f64:	e7fb      	b.n	8008f5e <HAL_QSPI_Init+0x8a>
 8008f66:	bf00      	nop
 8008f68:	ffe0f8fe 	.word	0xffe0f8fe

08008f6c <HAL_QSPI_Command>:
{
 8008f6c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	4604      	mov	r4, r0
 8008f72:	468a      	mov	sl, r1
 8008f74:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8008f76:	f7fc ffdd 	bl	8005f34 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8008f7a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8008f7e:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d036      	beq.n	8008ff2 <HAL_QSPI_Command+0x86>
 8008f84:	2301      	movs	r3, #1
 8008f86:	2602      	movs	r6, #2
 8008f88:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8008f8c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	fa5f f983 	uxtb.w	r9, r3
 8008f96:	d128      	bne.n	8008fea <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008f98:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2120      	movs	r1, #32
 8008f9e:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8008fa0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8008fa2:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8008fa6:	f8cd 8000 	str.w	r8, [sp]
 8008faa:	f7ff ff6b 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8008fae:	4605      	mov	r5, r0
 8008fb0:	b9a0      	cbnz	r0, 8008fdc <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8008fb2:	4602      	mov	r2, r0
 8008fb4:	4651      	mov	r1, sl
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	f7ff feaa 	bl	8008d10 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8008fbc:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8008fc0:	b953      	cbnz	r3, 8008fd8 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8008fc2:	463b      	mov	r3, r7
 8008fc4:	464a      	mov	r2, r9
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4620      	mov	r0, r4
 8008fca:	f8cd 8000 	str.w	r8, [sp]
 8008fce:	f7ff ff59 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8008fd2:	b960      	cbnz	r0, 8008fee <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8008fd4:	6823      	ldr	r3, [r4, #0]
 8008fd6:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8008fd8:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8008fe2:	4628      	mov	r0, r5
 8008fe4:	b002      	add	sp, #8
 8008fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8008fea:	4635      	mov	r5, r6
 8008fec:	e7f6      	b.n	8008fdc <HAL_QSPI_Command+0x70>
 8008fee:	4605      	mov	r5, r0
 8008ff0:	e7f4      	b.n	8008fdc <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8008ff2:	2502      	movs	r5, #2
 8008ff4:	e7f5      	b.n	8008fe2 <HAL_QSPI_Command+0x76>

08008ff6 <HAL_QSPI_Transmit>:
{
 8008ff6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8008ffa:	4604      	mov	r4, r0
 8008ffc:	4688      	mov	r8, r1
 8008ffe:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009000:	f7fc ff98 	bl	8005f34 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009004:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009008:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800900a:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800900c:	2b01      	cmp	r3, #1
 800900e:	d04c      	beq.n	80090aa <HAL_QSPI_Transmit+0xb4>
 8009010:	2301      	movs	r3, #1
 8009012:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009016:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800901a:	2b01      	cmp	r3, #1
 800901c:	b2d8      	uxtb	r0, r3
 800901e:	d142      	bne.n	80090a6 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009020:	2300      	movs	r3, #0
 8009022:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009024:	f1b8 0f00 	cmp.w	r8, #0
 8009028:	d038      	beq.n	800909c <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800902a:	2312      	movs	r3, #18
 800902c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009030:	692b      	ldr	r3, [r5, #16]
 8009032:	3301      	adds	r3, #1
 8009034:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009036:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009038:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800903c:	3301      	adds	r3, #1
 800903e:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009040:	696b      	ldr	r3, [r5, #20]
 8009042:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009046:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009048:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800904a:	b99b      	cbnz	r3, 8009074 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800904c:	4633      	mov	r3, r6
 800904e:	2201      	movs	r2, #1
 8009050:	2102      	movs	r1, #2
 8009052:	4620      	mov	r0, r4
 8009054:	9700      	str	r7, [sp, #0]
 8009056:	f7ff ff15 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800905a:	b910      	cbnz	r0, 8009062 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800905c:	6823      	ldr	r3, [r4, #0]
 800905e:	2202      	movs	r2, #2
 8009060:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009062:	2301      	movs	r3, #1
 8009064:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009068:	2300      	movs	r3, #0
 800906a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800906e:	b002      	add	sp, #8
 8009070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009074:	4633      	mov	r3, r6
 8009076:	2201      	movs	r2, #1
 8009078:	2104      	movs	r1, #4
 800907a:	4620      	mov	r0, r4
 800907c:	9700      	str	r7, [sp, #0]
 800907e:	f7ff ff01 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009082:	2800      	cmp	r0, #0
 8009084:	d1ed      	bne.n	8009062 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009086:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009088:	781b      	ldrb	r3, [r3, #0]
 800908a:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800908e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009090:	3301      	adds	r3, #1
 8009092:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009094:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009096:	3b01      	subs	r3, #1
 8009098:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800909a:	e7d5      	b.n	8009048 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800909c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800909e:	f043 0308 	orr.w	r3, r3, #8
 80090a2:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 80090a4:	e7e0      	b.n	8009068 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 80090a6:	2002      	movs	r0, #2
 80090a8:	e7de      	b.n	8009068 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 80090aa:	2002      	movs	r0, #2
 80090ac:	e7df      	b.n	800906e <HAL_QSPI_Transmit+0x78>

080090ae <HAL_QSPI_Receive>:
{
 80090ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80090b2:	4604      	mov	r4, r0
 80090b4:	4617      	mov	r7, r2
 80090b6:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 80090b8:	f7fc ff3c 	bl	8005f34 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80090bc:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 80090be:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 80090c0:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 80090c2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80090c6:	2b01      	cmp	r3, #1
 80090c8:	d04f      	beq.n	800916a <HAL_QSPI_Receive+0xbc>
 80090ca:	2301      	movs	r3, #1
 80090cc:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80090d0:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	b2d8      	uxtb	r0, r3
 80090d8:	d145      	bne.n	8009166 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80090da:	2300      	movs	r3, #0
 80090dc:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80090de:	f1b8 0f00 	cmp.w	r8, #0
 80090e2:	d03b      	beq.n	800915c <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 80090e4:	2322      	movs	r3, #34	@ 0x22
 80090e6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80090ea:	692b      	ldr	r3, [r5, #16]
 80090ec:	3301      	adds	r3, #1
 80090ee:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80090f0:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 80090f2:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80090f6:	3301      	adds	r3, #1
 80090f8:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80090fa:	6969      	ldr	r1, [r5, #20]
 80090fc:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009100:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8009104:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009106:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009108:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800910a:	b99b      	cbnz	r3, 8009134 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800910c:	4633      	mov	r3, r6
 800910e:	2201      	movs	r2, #1
 8009110:	2102      	movs	r1, #2
 8009112:	4620      	mov	r0, r4
 8009114:	9700      	str	r7, [sp, #0]
 8009116:	f7ff feb5 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800911a:	b910      	cbnz	r0, 8009122 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800911c:	6823      	ldr	r3, [r4, #0]
 800911e:	2202      	movs	r2, #2
 8009120:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009122:	2301      	movs	r3, #1
 8009124:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009128:	2300      	movs	r3, #0
 800912a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800912e:	b002      	add	sp, #8
 8009130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009134:	4633      	mov	r3, r6
 8009136:	2201      	movs	r2, #1
 8009138:	2106      	movs	r1, #6
 800913a:	4620      	mov	r0, r4
 800913c:	9700      	str	r7, [sp, #0]
 800913e:	f7ff fea1 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009142:	2800      	cmp	r0, #0
 8009144:	d1ed      	bne.n	8009122 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009146:	f895 2020 	ldrb.w	r2, [r5, #32]
 800914a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800914c:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800914e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009150:	3301      	adds	r3, #1
 8009152:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009154:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009156:	3b01      	subs	r3, #1
 8009158:	63a3      	str	r3, [r4, #56]	@ 0x38
 800915a:	e7d5      	b.n	8009108 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800915c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800915e:	f043 0308 	orr.w	r3, r3, #8
 8009162:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009164:	e7e0      	b.n	8009128 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009166:	2002      	movs	r0, #2
 8009168:	e7de      	b.n	8009128 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800916a:	2002      	movs	r0, #2
 800916c:	e7df      	b.n	800912e <HAL_QSPI_Receive+0x80>

0800916e <HAL_QSPI_AutoPolling>:
{
 800916e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009172:	4604      	mov	r4, r0
 8009174:	461f      	mov	r7, r3
 8009176:	4689      	mov	r9, r1
 8009178:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800917a:	f7fc fedb 	bl	8005f34 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800917e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009182:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009184:	2b01      	cmp	r3, #1
 8009186:	d041      	beq.n	800920c <HAL_QSPI_AutoPolling+0x9e>
 8009188:	2301      	movs	r3, #1
 800918a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800918e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009192:	2b01      	cmp	r3, #1
 8009194:	fa5f f883 	uxtb.w	r8, r3
 8009198:	d136      	bne.n	8009208 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800919a:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800919c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800919e:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80091a0:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 80091a2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80091a6:	4603      	mov	r3, r0
 80091a8:	9700      	str	r7, [sp, #0]
 80091aa:	4620      	mov	r0, r4
 80091ac:	f7ff fe6a 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80091b0:	bb20      	cbnz	r0, 80091fc <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80091b2:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80091b4:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80091b6:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80091b8:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 80091ba:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 80091bc:	686b      	ldr	r3, [r5, #4]
 80091be:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 80091c0:	68ab      	ldr	r3, [r5, #8]
 80091c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80091c4:	6813      	ldr	r3, [r2, #0]
 80091c6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80091ca:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80091cc:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 80091ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80091d2:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80091d4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 80091d8:	68eb      	ldr	r3, [r5, #12]
 80091da:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 80091de:	f7ff fd97 	bl	8008d10 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 80091e2:	4633      	mov	r3, r6
 80091e4:	4642      	mov	r2, r8
 80091e6:	2108      	movs	r1, #8
 80091e8:	4620      	mov	r0, r4
 80091ea:	9700      	str	r7, [sp, #0]
 80091ec:	f7ff fe4a 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 80091f0:	b920      	cbnz	r0, 80091fc <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 80091f2:	6823      	ldr	r3, [r4, #0]
 80091f4:	2208      	movs	r2, #8
 80091f6:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80091f8:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80091fc:	2300      	movs	r3, #0
 80091fe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009202:	b003      	add	sp, #12
 8009204:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009208:	2002      	movs	r0, #2
 800920a:	e7f7      	b.n	80091fc <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800920c:	2002      	movs	r0, #2
 800920e:	e7f8      	b.n	8009202 <HAL_QSPI_AutoPolling+0x94>

08009210 <HAL_QSPI_MemoryMapped>:
{
 8009210:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009212:	4604      	mov	r4, r0
 8009214:	4616      	mov	r6, r2
 8009216:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009218:	f7fc fe8c 	bl	8005f34 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800921c:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009220:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009222:	2a01      	cmp	r2, #1
 8009224:	d033      	beq.n	800928e <HAL_QSPI_MemoryMapped+0x7e>
 8009226:	2201      	movs	r2, #1
 8009228:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800922c:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009230:	2a01      	cmp	r2, #1
 8009232:	d12a      	bne.n	800928a <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009234:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009236:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009238:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800923a:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800923c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009240:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009242:	9100      	str	r1, [sp, #0]
 8009244:	2120      	movs	r1, #32
 8009246:	f7ff fe1d 	bl	8008e84 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800924a:	4605      	mov	r5, r0
 800924c:	b9b8      	cbnz	r0, 800927e <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800924e:	6823      	ldr	r3, [r4, #0]
 8009250:	6872      	ldr	r2, [r6, #4]
 8009252:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009254:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009256:	f020 0008 	bic.w	r0, r0, #8
 800925a:	ea40 0002 	orr.w	r0, r0, r2
 800925e:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009260:	d107      	bne.n	8009272 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009262:	6832      	ldr	r2, [r6, #0]
 8009264:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009266:	2210      	movs	r2, #16
 8009268:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800926a:	681a      	ldr	r2, [r3, #0]
 800926c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009270:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009272:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8009276:	4639      	mov	r1, r7
 8009278:	4620      	mov	r0, r4
 800927a:	f7ff fd49 	bl	8008d10 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800927e:	2300      	movs	r3, #0
 8009280:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009284:	4628      	mov	r0, r5
 8009286:	b003      	add	sp, #12
 8009288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800928a:	2502      	movs	r5, #2
 800928c:	e7f7      	b.n	800927e <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800928e:	2502      	movs	r5, #2
 8009290:	e7f8      	b.n	8009284 <HAL_QSPI_MemoryMapped+0x74>
	...

08009294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009296:	4604      	mov	r4, r0
 8009298:	2800      	cmp	r0, #0
 800929a:	d074      	beq.n	8009386 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800929c:	6803      	ldr	r3, [r0, #0]
 800929e:	07d8      	lsls	r0, r3, #31
 80092a0:	d45e      	bmi.n	8009360 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80092a2:	6823      	ldr	r3, [r4, #0]
 80092a4:	0799      	lsls	r1, r3, #30
 80092a6:	f100 80ad 	bmi.w	8009404 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80092aa:	6823      	ldr	r3, [r4, #0]
 80092ac:	06da      	lsls	r2, r3, #27
 80092ae:	d527      	bpl.n	8009300 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092b0:	4a9c      	ldr	r2, [pc, #624]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 80092b2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80092b4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80092b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80092ba:	2b08      	cmp	r3, #8
 80092bc:	d007      	beq.n	80092ce <HAL_RCC_OscConfig+0x3a>
 80092be:	2b18      	cmp	r3, #24
 80092c0:	f040 8103 	bne.w	80094ca <HAL_RCC_OscConfig+0x236>
 80092c4:	f001 0303 	and.w	r3, r1, #3
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	f040 80fe 	bne.w	80094ca <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80092ce:	6813      	ldr	r3, [r2, #0]
 80092d0:	05db      	lsls	r3, r3, #23
 80092d2:	d502      	bpl.n	80092da <HAL_RCC_OscConfig+0x46>
 80092d4:	69e3      	ldr	r3, [r4, #28]
 80092d6:	2b80      	cmp	r3, #128	@ 0x80
 80092d8:	d155      	bne.n	8009386 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80092da:	f7fc fe43 	bl	8005f64 <HAL_GetREVID>
 80092de:	f241 0303 	movw	r3, #4099	@ 0x1003
 80092e2:	6a21      	ldr	r1, [r4, #32]
 80092e4:	4298      	cmp	r0, r3
 80092e6:	4b8f      	ldr	r3, [pc, #572]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 80092e8:	f200 80e8 	bhi.w	80094bc <HAL_RCC_OscConfig+0x228>
 80092ec:	685a      	ldr	r2, [r3, #4]
 80092ee:	2920      	cmp	r1, #32
 80092f0:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 80092f4:	bf0c      	ite	eq
 80092f6:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 80092fa:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 80092fe:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009300:	6823      	ldr	r3, [r4, #0]
 8009302:	0719      	lsls	r1, r3, #28
 8009304:	f100 8123 	bmi.w	800954e <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	069a      	lsls	r2, r3, #26
 800930c:	f100 8144 	bmi.w	8009598 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009310:	6823      	ldr	r3, [r4, #0]
 8009312:	075d      	lsls	r5, r3, #29
 8009314:	d51e      	bpl.n	8009354 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009316:	4d84      	ldr	r5, [pc, #528]	@ (8009528 <HAL_RCC_OscConfig+0x294>)
 8009318:	682b      	ldr	r3, [r5, #0]
 800931a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800931e:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009320:	f7fc fe08 	bl	8005f34 <HAL_GetTick>
 8009324:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009326:	682b      	ldr	r3, [r5, #0]
 8009328:	05da      	lsls	r2, r3, #23
 800932a:	f140 815a 	bpl.w	80095e2 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800932e:	68a3      	ldr	r3, [r4, #8]
 8009330:	4d7c      	ldr	r5, [pc, #496]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 8009332:	2b01      	cmp	r3, #1
 8009334:	f040 815c 	bne.w	80095f0 <HAL_RCC_OscConfig+0x35c>
 8009338:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800933a:	f043 0301 	orr.w	r3, r3, #1
 800933e:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009340:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009344:	f7fc fdf6 	bl	8005f34 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009348:	4e76      	ldr	r6, [pc, #472]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800934a:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800934c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800934e:	079b      	lsls	r3, r3, #30
 8009350:	f140 8174 	bpl.w	800963c <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009354:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009356:	2900      	cmp	r1, #0
 8009358:	f040 8177 	bne.w	800964a <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800935c:	2000      	movs	r0, #0
 800935e:	e02b      	b.n	80093b8 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009360:	4a70      	ldr	r2, [pc, #448]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 8009362:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009364:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800936a:	2b10      	cmp	r3, #16
 800936c:	d005      	beq.n	800937a <HAL_RCC_OscConfig+0xe6>
 800936e:	2b18      	cmp	r3, #24
 8009370:	d10b      	bne.n	800938a <HAL_RCC_OscConfig+0xf6>
 8009372:	f001 0303 	and.w	r3, r1, #3
 8009376:	2b02      	cmp	r3, #2
 8009378:	d107      	bne.n	800938a <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800937a:	6813      	ldr	r3, [r2, #0]
 800937c:	039a      	lsls	r2, r3, #14
 800937e:	d590      	bpl.n	80092a2 <HAL_RCC_OscConfig+0xe>
 8009380:	6863      	ldr	r3, [r4, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d18d      	bne.n	80092a2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009386:	2001      	movs	r0, #1
 8009388:	e016      	b.n	80093b8 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800938a:	6863      	ldr	r3, [r4, #4]
 800938c:	4d65      	ldr	r5, [pc, #404]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 800938e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009392:	d112      	bne.n	80093ba <HAL_RCC_OscConfig+0x126>
 8009394:	682b      	ldr	r3, [r5, #0]
 8009396:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800939a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800939c:	f7fc fdca 	bl	8005f34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093a0:	4e60      	ldr	r6, [pc, #384]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80093a2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80093a4:	6833      	ldr	r3, [r6, #0]
 80093a6:	039b      	lsls	r3, r3, #14
 80093a8:	f53f af7b 	bmi.w	80092a2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093ac:	f7fc fdc2 	bl	8005f34 <HAL_GetTick>
 80093b0:	1b40      	subs	r0, r0, r5
 80093b2:	2864      	cmp	r0, #100	@ 0x64
 80093b4:	d9f6      	bls.n	80093a4 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 80093b6:	2003      	movs	r0, #3
}
 80093b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093ba:	b9a3      	cbnz	r3, 80093e6 <HAL_RCC_OscConfig+0x152>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093c2:	602b      	str	r3, [r5, #0]
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80093ca:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80093cc:	f7fc fdb2 	bl	8005f34 <HAL_GetTick>
 80093d0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80093d2:	682b      	ldr	r3, [r5, #0]
 80093d4:	039f      	lsls	r7, r3, #14
 80093d6:	f57f af64 	bpl.w	80092a2 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80093da:	f7fc fdab 	bl	8005f34 <HAL_GetTick>
 80093de:	1b80      	subs	r0, r0, r6
 80093e0:	2864      	cmp	r0, #100	@ 0x64
 80093e2:	d9f6      	bls.n	80093d2 <HAL_RCC_OscConfig+0x13e>
 80093e4:	e7e7      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80093e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80093ea:	682b      	ldr	r3, [r5, #0]
 80093ec:	d103      	bne.n	80093f6 <HAL_RCC_OscConfig+0x162>
 80093ee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80093f2:	602b      	str	r3, [r5, #0]
 80093f4:	e7ce      	b.n	8009394 <HAL_RCC_OscConfig+0x100>
 80093f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80093fa:	602b      	str	r3, [r5, #0]
 80093fc:	682b      	ldr	r3, [r5, #0]
 80093fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009402:	e7ca      	b.n	800939a <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009404:	4947      	ldr	r1, [pc, #284]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 8009406:	68e2      	ldr	r2, [r4, #12]
 8009408:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800940a:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800940c:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009410:	d003      	beq.n	800941a <HAL_RCC_OscConfig+0x186>
 8009412:	2b18      	cmp	r3, #24
 8009414:	d12a      	bne.n	800946c <HAL_RCC_OscConfig+0x1d8>
 8009416:	0780      	lsls	r0, r0, #30
 8009418:	d128      	bne.n	800946c <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800941a:	680b      	ldr	r3, [r1, #0]
 800941c:	075b      	lsls	r3, r3, #29
 800941e:	d501      	bpl.n	8009424 <HAL_RCC_OscConfig+0x190>
 8009420:	2a00      	cmp	r2, #0
 8009422:	d0b0      	beq.n	8009386 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009424:	4d3f      	ldr	r5, [pc, #252]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 8009426:	682b      	ldr	r3, [r5, #0]
 8009428:	f023 0319 	bic.w	r3, r3, #25
 800942c:	4313      	orrs	r3, r2
 800942e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009430:	f7fc fd80 	bl	8005f34 <HAL_GetTick>
 8009434:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009436:	682b      	ldr	r3, [r5, #0]
 8009438:	075f      	lsls	r7, r3, #29
 800943a:	d511      	bpl.n	8009460 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800943c:	f7fc fd92 	bl	8005f64 <HAL_GetREVID>
 8009440:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009444:	6922      	ldr	r2, [r4, #16]
 8009446:	4298      	cmp	r0, r3
 8009448:	686b      	ldr	r3, [r5, #4]
 800944a:	d822      	bhi.n	8009492 <HAL_RCC_OscConfig+0x1fe>
 800944c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009450:	2a40      	cmp	r2, #64	@ 0x40
 8009452:	bf0c      	ite	eq
 8009454:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8009458:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800945c:	606b      	str	r3, [r5, #4]
 800945e:	e724      	b.n	80092aa <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009460:	f7fc fd68 	bl	8005f34 <HAL_GetTick>
 8009464:	1b80      	subs	r0, r0, r6
 8009466:	2802      	cmp	r0, #2
 8009468:	d9e5      	bls.n	8009436 <HAL_RCC_OscConfig+0x1a2>
 800946a:	e7a4      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800946c:	4d2d      	ldr	r5, [pc, #180]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800946e:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009470:	b1a2      	cbz	r2, 800949c <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009472:	f023 0319 	bic.w	r3, r3, #25
 8009476:	4313      	orrs	r3, r2
 8009478:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800947a:	f7fc fd5b 	bl	8005f34 <HAL_GetTick>
 800947e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	0758      	lsls	r0, r3, #29
 8009484:	d4da      	bmi.n	800943c <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009486:	f7fc fd55 	bl	8005f34 <HAL_GetTick>
 800948a:	1b80      	subs	r0, r0, r6
 800948c:	2802      	cmp	r0, #2
 800948e:	d9f7      	bls.n	8009480 <HAL_RCC_OscConfig+0x1ec>
 8009490:	e791      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009492:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009496:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800949a:	e7df      	b.n	800945c <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800949c:	f023 0301 	bic.w	r3, r3, #1
 80094a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094a2:	f7fc fd47 	bl	8005f34 <HAL_GetTick>
 80094a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	0759      	lsls	r1, r3, #29
 80094ac:	f57f aefd 	bpl.w	80092aa <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80094b0:	f7fc fd40 	bl	8005f34 <HAL_GetTick>
 80094b4:	1b80      	subs	r0, r0, r6
 80094b6:	2802      	cmp	r0, #2
 80094b8:	d9f6      	bls.n	80094a8 <HAL_RCC_OscConfig+0x214>
 80094ba:	e77c      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094bc:	68da      	ldr	r2, [r3, #12]
 80094be:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 80094c2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80094c6:	60da      	str	r2, [r3, #12]
 80094c8:	e71a      	b.n	8009300 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80094ca:	69e3      	ldr	r3, [r4, #28]
 80094cc:	4d15      	ldr	r5, [pc, #84]	@ (8009524 <HAL_RCC_OscConfig+0x290>)
 80094ce:	b36b      	cbz	r3, 800952c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80094d8:	f7fc fd2c 	bl	8005f34 <HAL_GetTick>
 80094dc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80094de:	682b      	ldr	r3, [r5, #0]
 80094e0:	05df      	lsls	r7, r3, #23
 80094e2:	d511      	bpl.n	8009508 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80094e4:	f7fc fd3e 	bl	8005f64 <HAL_GetREVID>
 80094e8:	f241 0303 	movw	r3, #4099	@ 0x1003
 80094ec:	6a22      	ldr	r2, [r4, #32]
 80094ee:	4298      	cmp	r0, r3
 80094f0:	d810      	bhi.n	8009514 <HAL_RCC_OscConfig+0x280>
 80094f2:	686b      	ldr	r3, [r5, #4]
 80094f4:	2a20      	cmp	r2, #32
 80094f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80094fa:	bf0c      	ite	eq
 80094fc:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009500:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009504:	606b      	str	r3, [r5, #4]
 8009506:	e6fb      	b.n	8009300 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009508:	f7fc fd14 	bl	8005f34 <HAL_GetTick>
 800950c:	1b80      	subs	r0, r0, r6
 800950e:	2802      	cmp	r0, #2
 8009510:	d9e5      	bls.n	80094de <HAL_RCC_OscConfig+0x24a>
 8009512:	e750      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009514:	68eb      	ldr	r3, [r5, #12]
 8009516:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800951a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800951e:	60eb      	str	r3, [r5, #12]
 8009520:	e6ee      	b.n	8009300 <HAL_RCC_OscConfig+0x6c>
 8009522:	bf00      	nop
 8009524:	58024400 	.word	0x58024400
 8009528:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800952c:	682b      	ldr	r3, [r5, #0]
 800952e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009532:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009534:	f7fc fcfe 	bl	8005f34 <HAL_GetTick>
 8009538:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800953a:	682b      	ldr	r3, [r5, #0]
 800953c:	05d8      	lsls	r0, r3, #23
 800953e:	f57f aedf 	bpl.w	8009300 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009542:	f7fc fcf7 	bl	8005f34 <HAL_GetTick>
 8009546:	1b80      	subs	r0, r0, r6
 8009548:	2802      	cmp	r0, #2
 800954a:	d9f6      	bls.n	800953a <HAL_RCC_OscConfig+0x2a6>
 800954c:	e733      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800954e:	6963      	ldr	r3, [r4, #20]
 8009550:	4da5      	ldr	r5, [pc, #660]	@ (80097e8 <HAL_RCC_OscConfig+0x554>)
 8009552:	b183      	cbz	r3, 8009576 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009554:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800955c:	f7fc fcea 	bl	8005f34 <HAL_GetTick>
 8009560:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009562:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009564:	079b      	lsls	r3, r3, #30
 8009566:	f53f aecf 	bmi.w	8009308 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800956a:	f7fc fce3 	bl	8005f34 <HAL_GetTick>
 800956e:	1b80      	subs	r0, r0, r6
 8009570:	2802      	cmp	r0, #2
 8009572:	d9f6      	bls.n	8009562 <HAL_RCC_OscConfig+0x2ce>
 8009574:	e71f      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009576:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009578:	f023 0301 	bic.w	r3, r3, #1
 800957c:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800957e:	f7fc fcd9 	bl	8005f34 <HAL_GetTick>
 8009582:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009584:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009586:	079f      	lsls	r7, r3, #30
 8009588:	f57f aebe 	bpl.w	8009308 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800958c:	f7fc fcd2 	bl	8005f34 <HAL_GetTick>
 8009590:	1b80      	subs	r0, r0, r6
 8009592:	2802      	cmp	r0, #2
 8009594:	d9f6      	bls.n	8009584 <HAL_RCC_OscConfig+0x2f0>
 8009596:	e70e      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009598:	69a3      	ldr	r3, [r4, #24]
 800959a:	4d93      	ldr	r5, [pc, #588]	@ (80097e8 <HAL_RCC_OscConfig+0x554>)
 800959c:	b183      	cbz	r3, 80095c0 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800959e:	682b      	ldr	r3, [r5, #0]
 80095a0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80095a4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80095a6:	f7fc fcc5 	bl	8005f34 <HAL_GetTick>
 80095aa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	0498      	lsls	r0, r3, #18
 80095b0:	f53f aeae 	bmi.w	8009310 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095b4:	f7fc fcbe 	bl	8005f34 <HAL_GetTick>
 80095b8:	1b80      	subs	r0, r0, r6
 80095ba:	2802      	cmp	r0, #2
 80095bc:	d9f6      	bls.n	80095ac <HAL_RCC_OscConfig+0x318>
 80095be:	e6fa      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 80095c0:	682b      	ldr	r3, [r5, #0]
 80095c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80095c6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80095c8:	f7fc fcb4 	bl	8005f34 <HAL_GetTick>
 80095cc:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	0499      	lsls	r1, r3, #18
 80095d2:	f57f ae9d 	bpl.w	8009310 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80095d6:	f7fc fcad 	bl	8005f34 <HAL_GetTick>
 80095da:	1b80      	subs	r0, r0, r6
 80095dc:	2802      	cmp	r0, #2
 80095de:	d9f6      	bls.n	80095ce <HAL_RCC_OscConfig+0x33a>
 80095e0:	e6e9      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095e2:	f7fc fca7 	bl	8005f34 <HAL_GetTick>
 80095e6:	1b80      	subs	r0, r0, r6
 80095e8:	2864      	cmp	r0, #100	@ 0x64
 80095ea:	f67f ae9c 	bls.w	8009326 <HAL_RCC_OscConfig+0x92>
 80095ee:	e6e2      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f0:	b9b3      	cbnz	r3, 8009620 <HAL_RCC_OscConfig+0x38c>
 80095f2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80095f4:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80095f8:	f023 0301 	bic.w	r3, r3, #1
 80095fc:	672b      	str	r3, [r5, #112]	@ 0x70
 80095fe:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009600:	f023 0304 	bic.w	r3, r3, #4
 8009604:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8009606:	f7fc fc95 	bl	8005f34 <HAL_GetTick>
 800960a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800960c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800960e:	0798      	lsls	r0, r3, #30
 8009610:	f57f aea0 	bpl.w	8009354 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009614:	f7fc fc8e 	bl	8005f34 <HAL_GetTick>
 8009618:	1b80      	subs	r0, r0, r6
 800961a:	42b8      	cmp	r0, r7
 800961c:	d9f6      	bls.n	800960c <HAL_RCC_OscConfig+0x378>
 800961e:	e6ca      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009620:	2b05      	cmp	r3, #5
 8009622:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009624:	d103      	bne.n	800962e <HAL_RCC_OscConfig+0x39a>
 8009626:	f043 0304 	orr.w	r3, r3, #4
 800962a:	672b      	str	r3, [r5, #112]	@ 0x70
 800962c:	e684      	b.n	8009338 <HAL_RCC_OscConfig+0xa4>
 800962e:	f023 0301 	bic.w	r3, r3, #1
 8009632:	672b      	str	r3, [r5, #112]	@ 0x70
 8009634:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009636:	f023 0304 	bic.w	r3, r3, #4
 800963a:	e680      	b.n	800933e <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800963c:	f7fc fc7a 	bl	8005f34 <HAL_GetTick>
 8009640:	1b40      	subs	r0, r0, r5
 8009642:	42b8      	cmp	r0, r7
 8009644:	f67f ae82 	bls.w	800934c <HAL_RCC_OscConfig+0xb8>
 8009648:	e6b5      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800964a:	4d67      	ldr	r5, [pc, #412]	@ (80097e8 <HAL_RCC_OscConfig+0x554>)
 800964c:	692b      	ldr	r3, [r5, #16]
 800964e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009652:	2b18      	cmp	r3, #24
 8009654:	d07a      	beq.n	800974c <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8009656:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009658:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800965a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800965e:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009660:	d167      	bne.n	8009732 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8009662:	f7fc fc67 	bl	8005f34 <HAL_GetTick>
 8009666:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	0199      	lsls	r1, r3, #6
 800966c:	d45b      	bmi.n	8009726 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800966e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009670:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009672:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8009676:	f023 0303 	bic.w	r3, r3, #3
 800967a:	4313      	orrs	r3, r2
 800967c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800967e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009682:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009684:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009686:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009688:	3b01      	subs	r3, #1
 800968a:	3a01      	subs	r2, #1
 800968c:	025b      	lsls	r3, r3, #9
 800968e:	0412      	lsls	r2, r2, #16
 8009690:	b29b      	uxth	r3, r3
 8009692:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009696:	4313      	orrs	r3, r2
 8009698:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800969a:	3a01      	subs	r2, #1
 800969c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096a0:	4313      	orrs	r3, r2
 80096a2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80096a4:	3a01      	subs	r2, #1
 80096a6:	0612      	lsls	r2, r2, #24
 80096a8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80096ac:	4313      	orrs	r3, r2
 80096ae:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80096b0:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80096b8:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80096ba:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80096bc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80096c0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80096c4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80096c8:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80096ca:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80096ce:	f023 030c 	bic.w	r3, r3, #12
 80096d2:	4313      	orrs	r3, r2
 80096d4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80096d6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096d8:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80096da:	f023 0302 	bic.w	r3, r3, #2
 80096de:	4313      	orrs	r3, r2
 80096e0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80096e2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80096e8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80096ea:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80096f0:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80096f2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80096f8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 80096fa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80096fc:	f043 0301 	orr.w	r3, r3, #1
 8009700:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009708:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800970a:	f7fc fc13 	bl	8005f34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800970e:	4d36      	ldr	r5, [pc, #216]	@ (80097e8 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8009710:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009712:	682b      	ldr	r3, [r5, #0]
 8009714:	019a      	lsls	r2, r3, #6
 8009716:	f53f ae21 	bmi.w	800935c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800971a:	f7fc fc0b 	bl	8005f34 <HAL_GetTick>
 800971e:	1b00      	subs	r0, r0, r4
 8009720:	2802      	cmp	r0, #2
 8009722:	d9f6      	bls.n	8009712 <HAL_RCC_OscConfig+0x47e>
 8009724:	e647      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009726:	f7fc fc05 	bl	8005f34 <HAL_GetTick>
 800972a:	1b80      	subs	r0, r0, r6
 800972c:	2802      	cmp	r0, #2
 800972e:	d99b      	bls.n	8009668 <HAL_RCC_OscConfig+0x3d4>
 8009730:	e641      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009732:	f7fc fbff 	bl	8005f34 <HAL_GetTick>
 8009736:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009738:	682b      	ldr	r3, [r5, #0]
 800973a:	019b      	lsls	r3, r3, #6
 800973c:	f57f ae0e 	bpl.w	800935c <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009740:	f7fc fbf8 	bl	8005f34 <HAL_GetTick>
 8009744:	1b00      	subs	r0, r0, r4
 8009746:	2802      	cmp	r0, #2
 8009748:	d9f6      	bls.n	8009738 <HAL_RCC_OscConfig+0x4a4>
 800974a:	e634      	b.n	80093b6 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800974c:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800974e:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009750:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009752:	f43f ae18 	beq.w	8009386 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009756:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800975a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800975c:	4281      	cmp	r1, r0
 800975e:	f47f ae12 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009762:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009766:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009768:	428a      	cmp	r2, r1
 800976a:	f47f ae0c 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800976e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009770:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009774:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009776:	4291      	cmp	r1, r2
 8009778:	f47f ae05 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800977c:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800977e:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009782:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009784:	4291      	cmp	r1, r2
 8009786:	f47f adfe 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800978a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800978c:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009790:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009792:	4291      	cmp	r1, r2
 8009794:	f47f adf7 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009798:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800979a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800979e:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80097a0:	4293      	cmp	r3, r2
 80097a2:	f47f adf0 	bne.w	8009386 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80097a6:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80097a8:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80097aa:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80097ae:	429a      	cmp	r2, r3
 80097b0:	f43f add4 	beq.w	800935c <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 80097b4:	4d0c      	ldr	r5, [pc, #48]	@ (80097e8 <HAL_RCC_OscConfig+0x554>)
 80097b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80097b8:	f023 0301 	bic.w	r3, r3, #1
 80097bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 80097be:	f7fc fbb9 	bl	8005f34 <HAL_GetTick>
 80097c2:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80097c4:	f7fc fbb6 	bl	8005f34 <HAL_GetTick>
 80097c8:	42b0      	cmp	r0, r6
 80097ca:	d0fb      	beq.n	80097c4 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80097cc:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 80097ce:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 80097d0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80097d4:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80097d8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80097dc:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80097de:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 80097e0:	f043 0301 	orr.w	r3, r3, #1
 80097e4:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80097e6:	e5b9      	b.n	800935c <HAL_RCC_OscConfig+0xc8>
 80097e8:	58024400 	.word	0x58024400

080097ec <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4c23      	ldr	r4, [pc, #140]	@ (800987c <HAL_RCC_MCOConfig+0x90>)
 80097f0:	b088      	sub	sp, #32
 80097f2:	460e      	mov	r6, r1
 80097f4:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 80097f6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 80097fa:	b9f8      	cbnz	r0, 800983c <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 80097fc:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009800:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009804:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009806:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800980a:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800980e:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009818:	2302      	movs	r3, #2
 800981a:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800981e:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009820:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009824:	4816      	ldr	r0, [pc, #88]	@ (8009880 <HAL_RCC_MCOConfig+0x94>)
 8009826:	f7fd fa0b 	bl	8006c40 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800982a:	6923      	ldr	r3, [r4, #16]
 800982c:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8009830:	ea43 0106 	orr.w	r1, r3, r6
 8009834:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009836:	6121      	str	r1, [r4, #16]
  }
}
 8009838:	b008      	add	sp, #32
 800983a:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800983c:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009840:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009844:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009846:	480f      	ldr	r0, [pc, #60]	@ (8009884 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009848:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800984c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	9302      	str	r3, [sp, #8]
 8009856:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009858:	2302      	movs	r3, #2
 800985a:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800985e:	2300      	movs	r3, #0
 8009860:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009864:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009866:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009868:	f7fd f9ea 	bl	8006c40 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800986c:	6923      	ldr	r3, [r4, #16]
 800986e:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 8009872:	ea43 0106 	orr.w	r1, r3, r6
 8009876:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800987a:	e7dc      	b.n	8009836 <HAL_RCC_MCOConfig+0x4a>
 800987c:	58024400 	.word	0x58024400
 8009880:	58020000 	.word	0x58020000
 8009884:	58020800 	.word	0x58020800

08009888 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009888:	4b49      	ldr	r3, [pc, #292]	@ (80099b0 <HAL_RCC_GetSysClockFreq+0x128>)
 800988a:	691a      	ldr	r2, [r3, #16]
 800988c:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009890:	2a10      	cmp	r2, #16
{
 8009892:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009894:	f000 8088 	beq.w	80099a8 <HAL_RCC_GetSysClockFreq+0x120>
 8009898:	2a18      	cmp	r2, #24
 800989a:	d00c      	beq.n	80098b6 <HAL_RCC_GetSysClockFreq+0x2e>
 800989c:	2a00      	cmp	r2, #0
 800989e:	f040 8085 	bne.w	80099ac <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	4843      	ldr	r0, [pc, #268]	@ (80099b4 <HAL_RCC_GetSysClockFreq+0x12c>)
 80098a6:	f012 0f20 	tst.w	r2, #32
 80098aa:	d003      	beq.n	80098b4 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80098b2:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80098b4:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098b6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098b8:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098ba:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 80098bc:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80098c0:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 80098c6:	d0f5      	beq.n	80098b4 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098c8:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80098cc:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80098d0:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098d4:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80098d8:	4362      	muls	r2, r4
 80098da:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80098de:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80098e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80098e4:	ee06 2a90 	vmov	s13, r2
 80098e8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 80098ec:	d04e      	beq.n	800998c <HAL_RCC_GetSysClockFreq+0x104>
 80098ee:	2902      	cmp	r1, #2
 80098f0:	d03e      	beq.n	8009970 <HAL_RCC_GetSysClockFreq+0xe8>
 80098f2:	2900      	cmp	r1, #0
 80098f4:	d14a      	bne.n	800998c <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	0692      	lsls	r2, r2, #26
 80098fa:	d527      	bpl.n	800994c <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80098fc:	6819      	ldr	r1, [r3, #0]
 80098fe:	4a2d      	ldr	r2, [pc, #180]	@ (80099b4 <HAL_RCC_GetSysClockFreq+0x12c>)
 8009900:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009906:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800990c:	ee07 2a90 	vmov	s15, r2
 8009910:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8009914:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8009918:	ee07 3a10 	vmov	s14, r3
 800991c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009920:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009924:	ee37 7a06 	vadd.f32	s14, s14, s12
 8009928:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800992c:	4b20      	ldr	r3, [pc, #128]	@ (80099b0 <HAL_RCC_GetSysClockFreq+0x128>)
 800992e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009930:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8009934:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8009936:	ee07 3a10 	vmov	s14, r3
 800993a:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800993e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8009942:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8009946:	ee17 0a90 	vmov	r0, s15
 800994a:	e7b3      	b.n	80098b4 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800994c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800994e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800995a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800995e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009962:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 80099b8 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009966:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800996a:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800996e:	e7dd      	b.n	800992c <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009976:	ee07 3a90 	vmov	s15, r3
 800997a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800997e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009982:	ee77 7a86 	vadd.f32	s15, s15, s12
 8009986:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 80099bc <HAL_RCC_GetSysClockFreq+0x134>
 800998a:	e7ec      	b.n	8009966 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800998c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800998e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009992:	ee07 3a90 	vmov	s15, r3
 8009996:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800999a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800999e:	ee77 7a86 	vadd.f32	s15, s15, s12
 80099a2:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 80099c0 <HAL_RCC_GetSysClockFreq+0x138>
 80099a6:	e7de      	b.n	8009966 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80099a8:	4806      	ldr	r0, [pc, #24]	@ (80099c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80099aa:	e783      	b.n	80098b4 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 80099ac:	4806      	ldr	r0, [pc, #24]	@ (80099c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80099ae:	e781      	b.n	80098b4 <HAL_RCC_GetSysClockFreq+0x2c>
 80099b0:	58024400 	.word	0x58024400
 80099b4:	03d09000 	.word	0x03d09000
 80099b8:	4c742400 	.word	0x4c742400
 80099bc:	4bbebc20 	.word	0x4bbebc20
 80099c0:	4a742400 	.word	0x4a742400
 80099c4:	017d7840 	.word	0x017d7840
 80099c8:	003d0900 	.word	0x003d0900

080099cc <HAL_RCC_ClockConfig>:
{
 80099cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099d0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80099d2:	4604      	mov	r4, r0
 80099d4:	b910      	cbnz	r0, 80099dc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80099d6:	2001      	movs	r0, #1
}
 80099d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80099dc:	4a88      	ldr	r2, [pc, #544]	@ (8009c00 <HAL_RCC_ClockConfig+0x234>)
 80099de:	6813      	ldr	r3, [r2, #0]
 80099e0:	f003 030f 	and.w	r3, r3, #15
 80099e4:	428b      	cmp	r3, r1
 80099e6:	f0c0 8093 	bcc.w	8009b10 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80099ea:	6823      	ldr	r3, [r4, #0]
 80099ec:	075f      	lsls	r7, r3, #29
 80099ee:	f100 809b 	bmi.w	8009b28 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80099f2:	071e      	lsls	r6, r3, #28
 80099f4:	d50b      	bpl.n	8009a0e <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80099f6:	4983      	ldr	r1, [pc, #524]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 80099f8:	6960      	ldr	r0, [r4, #20]
 80099fa:	69ca      	ldr	r2, [r1, #28]
 80099fc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009a00:	4290      	cmp	r0, r2
 8009a02:	d904      	bls.n	8009a0e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a04:	69ca      	ldr	r2, [r1, #28]
 8009a06:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009a0a:	4302      	orrs	r2, r0
 8009a0c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a0e:	06d8      	lsls	r0, r3, #27
 8009a10:	d50b      	bpl.n	8009a2a <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009a12:	497c      	ldr	r1, [pc, #496]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009a14:	69a0      	ldr	r0, [r4, #24]
 8009a16:	69ca      	ldr	r2, [r1, #28]
 8009a18:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009a1c:	4290      	cmp	r0, r2
 8009a1e:	d904      	bls.n	8009a2a <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009a20:	69ca      	ldr	r2, [r1, #28]
 8009a22:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009a26:	4302      	orrs	r2, r0
 8009a28:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009a2a:	0699      	lsls	r1, r3, #26
 8009a2c:	d50b      	bpl.n	8009a46 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009a2e:	4975      	ldr	r1, [pc, #468]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009a30:	69e0      	ldr	r0, [r4, #28]
 8009a32:	6a0a      	ldr	r2, [r1, #32]
 8009a34:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009a38:	4290      	cmp	r0, r2
 8009a3a:	d904      	bls.n	8009a46 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009a3c:	6a0a      	ldr	r2, [r1, #32]
 8009a3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009a42:	4302      	orrs	r2, r0
 8009a44:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a46:	079a      	lsls	r2, r3, #30
 8009a48:	d50b      	bpl.n	8009a62 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009a4a:	496e      	ldr	r1, [pc, #440]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009a4c:	68e0      	ldr	r0, [r4, #12]
 8009a4e:	698a      	ldr	r2, [r1, #24]
 8009a50:	f002 020f 	and.w	r2, r2, #15
 8009a54:	4290      	cmp	r0, r2
 8009a56:	d904      	bls.n	8009a62 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009a58:	698a      	ldr	r2, [r1, #24]
 8009a5a:	f022 020f 	bic.w	r2, r2, #15
 8009a5e:	4302      	orrs	r2, r0
 8009a60:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009a62:	07df      	lsls	r7, r3, #31
 8009a64:	d46e      	bmi.n	8009b44 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009a66:	6823      	ldr	r3, [r4, #0]
 8009a68:	079e      	lsls	r6, r3, #30
 8009a6a:	f100 80a1 	bmi.w	8009bb0 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009a6e:	4964      	ldr	r1, [pc, #400]	@ (8009c00 <HAL_RCC_ClockConfig+0x234>)
 8009a70:	680a      	ldr	r2, [r1, #0]
 8009a72:	f002 020f 	and.w	r2, r2, #15
 8009a76:	42aa      	cmp	r2, r5
 8009a78:	f200 80a8 	bhi.w	8009bcc <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009a7c:	0758      	lsls	r0, r3, #29
 8009a7e:	f100 80b1 	bmi.w	8009be4 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009a82:	0719      	lsls	r1, r3, #28
 8009a84:	d50b      	bpl.n	8009a9e <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009a86:	495f      	ldr	r1, [pc, #380]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009a88:	6960      	ldr	r0, [r4, #20]
 8009a8a:	69ca      	ldr	r2, [r1, #28]
 8009a8c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009a90:	4290      	cmp	r0, r2
 8009a92:	d204      	bcs.n	8009a9e <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009a94:	69ca      	ldr	r2, [r1, #28]
 8009a96:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009a9a:	4302      	orrs	r2, r0
 8009a9c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009a9e:	06da      	lsls	r2, r3, #27
 8009aa0:	d50b      	bpl.n	8009aba <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009aa2:	4958      	ldr	r1, [pc, #352]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009aa4:	69a0      	ldr	r0, [r4, #24]
 8009aa6:	69ca      	ldr	r2, [r1, #28]
 8009aa8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009aac:	4290      	cmp	r0, r2
 8009aae:	d204      	bcs.n	8009aba <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009ab0:	69ca      	ldr	r2, [r1, #28]
 8009ab2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8009ab6:	4302      	orrs	r2, r0
 8009ab8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009aba:	069b      	lsls	r3, r3, #26
 8009abc:	d50b      	bpl.n	8009ad6 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009abe:	4a51      	ldr	r2, [pc, #324]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009ac0:	69e1      	ldr	r1, [r4, #28]
 8009ac2:	6a13      	ldr	r3, [r2, #32]
 8009ac4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ac8:	4299      	cmp	r1, r3
 8009aca:	d204      	bcs.n	8009ad6 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8009acc:	6a13      	ldr	r3, [r2, #32]
 8009ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009ad2:	430b      	orrs	r3, r1
 8009ad4:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009ad6:	f7ff fed7 	bl	8009888 <HAL_RCC_GetSysClockFreq>
 8009ada:	494a      	ldr	r1, [pc, #296]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009adc:	4a4a      	ldr	r2, [pc, #296]	@ (8009c08 <HAL_RCC_ClockConfig+0x23c>)
 8009ade:	698b      	ldr	r3, [r1, #24]
 8009ae0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8009ae4:	5cd3      	ldrb	r3, [r2, r3]
 8009ae6:	f003 031f 	and.w	r3, r3, #31
 8009aea:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009aec:	698b      	ldr	r3, [r1, #24]
 8009aee:	f003 030f 	and.w	r3, r3, #15
 8009af2:	5cd3      	ldrb	r3, [r2, r3]
 8009af4:	4a45      	ldr	r2, [pc, #276]	@ (8009c0c <HAL_RCC_ClockConfig+0x240>)
 8009af6:	f003 031f 	and.w	r3, r3, #31
 8009afa:	fa20 f303 	lsr.w	r3, r0, r3
 8009afe:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 8009b00:	4b43      	ldr	r3, [pc, #268]	@ (8009c10 <HAL_RCC_ClockConfig+0x244>)
 8009b02:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 8009b04:	4b43      	ldr	r3, [pc, #268]	@ (8009c14 <HAL_RCC_ClockConfig+0x248>)
}
 8009b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8009b0a:	6818      	ldr	r0, [r3, #0]
 8009b0c:	f7f7 bd36 	b.w	800157c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009b10:	6813      	ldr	r3, [r2, #0]
 8009b12:	f023 030f 	bic.w	r3, r3, #15
 8009b16:	430b      	orrs	r3, r1
 8009b18:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009b1a:	6813      	ldr	r3, [r2, #0]
 8009b1c:	f003 030f 	and.w	r3, r3, #15
 8009b20:	428b      	cmp	r3, r1
 8009b22:	f47f af58 	bne.w	80099d6 <HAL_RCC_ClockConfig+0xa>
 8009b26:	e760      	b.n	80099ea <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009b28:	4936      	ldr	r1, [pc, #216]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009b2a:	6920      	ldr	r0, [r4, #16]
 8009b2c:	698a      	ldr	r2, [r1, #24]
 8009b2e:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009b32:	4290      	cmp	r0, r2
 8009b34:	f67f af5d 	bls.w	80099f2 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009b38:	698a      	ldr	r2, [r1, #24]
 8009b3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009b3e:	4302      	orrs	r2, r0
 8009b40:	618a      	str	r2, [r1, #24]
 8009b42:	e756      	b.n	80099f2 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8009b44:	4b2f      	ldr	r3, [pc, #188]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009b46:	68a1      	ldr	r1, [r4, #8]
 8009b48:	699a      	ldr	r2, [r3, #24]
 8009b4a:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b52:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b54:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009b56:	2902      	cmp	r1, #2
 8009b58:	d11d      	bne.n	8009b96 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b5a:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b5e:	f43f af3a 	beq.w	80099d6 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b62:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b64:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b68:	4f26      	ldr	r7, [pc, #152]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009b6a:	f022 0207 	bic.w	r2, r2, #7
 8009b6e:	430a      	orrs	r2, r1
 8009b70:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 8009b72:	f7fc f9df 	bl	8005f34 <HAL_GetTick>
 8009b76:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	6862      	ldr	r2, [r4, #4]
 8009b7c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009b80:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8009b84:	f43f af6f 	beq.w	8009a66 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009b88:	f7fc f9d4 	bl	8005f34 <HAL_GetTick>
 8009b8c:	1b80      	subs	r0, r0, r6
 8009b8e:	4540      	cmp	r0, r8
 8009b90:	d9f2      	bls.n	8009b78 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 8009b92:	2003      	movs	r0, #3
 8009b94:	e720      	b.n	80099d8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009b96:	2903      	cmp	r1, #3
 8009b98:	d102      	bne.n	8009ba0 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009b9a:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 8009b9e:	e7de      	b.n	8009b5e <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8009ba0:	2901      	cmp	r1, #1
 8009ba2:	d102      	bne.n	8009baa <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ba4:	f412 7f80 	tst.w	r2, #256	@ 0x100
 8009ba8:	e7d9      	b.n	8009b5e <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009baa:	f012 0f04 	tst.w	r2, #4
 8009bae:	e7d6      	b.n	8009b5e <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8009bb0:	4914      	ldr	r1, [pc, #80]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009bb2:	68e0      	ldr	r0, [r4, #12]
 8009bb4:	698a      	ldr	r2, [r1, #24]
 8009bb6:	f002 020f 	and.w	r2, r2, #15
 8009bba:	4290      	cmp	r0, r2
 8009bbc:	f4bf af57 	bcs.w	8009a6e <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009bc0:	698a      	ldr	r2, [r1, #24]
 8009bc2:	f022 020f 	bic.w	r2, r2, #15
 8009bc6:	4302      	orrs	r2, r0
 8009bc8:	618a      	str	r2, [r1, #24]
 8009bca:	e750      	b.n	8009a6e <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009bcc:	680a      	ldr	r2, [r1, #0]
 8009bce:	f022 020f 	bic.w	r2, r2, #15
 8009bd2:	432a      	orrs	r2, r5
 8009bd4:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009bd6:	680a      	ldr	r2, [r1, #0]
 8009bd8:	f002 020f 	and.w	r2, r2, #15
 8009bdc:	42aa      	cmp	r2, r5
 8009bde:	f47f aefa 	bne.w	80099d6 <HAL_RCC_ClockConfig+0xa>
 8009be2:	e74b      	b.n	8009a7c <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009be4:	4907      	ldr	r1, [pc, #28]	@ (8009c04 <HAL_RCC_ClockConfig+0x238>)
 8009be6:	6920      	ldr	r0, [r4, #16]
 8009be8:	698a      	ldr	r2, [r1, #24]
 8009bea:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009bee:	4290      	cmp	r0, r2
 8009bf0:	f4bf af47 	bcs.w	8009a82 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009bf4:	698a      	ldr	r2, [r1, #24]
 8009bf6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8009bfa:	4302      	orrs	r2, r0
 8009bfc:	618a      	str	r2, [r1, #24]
 8009bfe:	e740      	b.n	8009a82 <HAL_RCC_ClockConfig+0xb6>
 8009c00:	52002000 	.word	0x52002000
 8009c04:	58024400 	.word	0x58024400
 8009c08:	080255d0 	.word	0x080255d0
 8009c0c:	24000068 	.word	0x24000068
 8009c10:	2400006c 	.word	0x2400006c
 8009c14:	24000074 	.word	0x24000074

08009c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009c18:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c1a:	f7ff fe35 	bl	8009888 <HAL_RCC_GetSysClockFreq>
 8009c1e:	4a0b      	ldr	r2, [pc, #44]	@ (8009c4c <HAL_RCC_GetHCLKFreq+0x34>)
 8009c20:	490b      	ldr	r1, [pc, #44]	@ (8009c50 <HAL_RCC_GetHCLKFreq+0x38>)
 8009c22:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c24:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c26:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c2a:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8009c2e:	5ccb      	ldrb	r3, [r1, r3]
 8009c30:	f003 031f 	and.w	r3, r3, #31
 8009c34:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009c38:	5c88      	ldrb	r0, [r1, r2]
 8009c3a:	4a06      	ldr	r2, [pc, #24]	@ (8009c54 <HAL_RCC_GetHCLKFreq+0x3c>)
 8009c3c:	f000 001f 	and.w	r0, r0, #31
 8009c40:	fa23 f000 	lsr.w	r0, r3, r0
 8009c44:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009c46:	4a04      	ldr	r2, [pc, #16]	@ (8009c58 <HAL_RCC_GetHCLKFreq+0x40>)
 8009c48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8009c4a:	bd08      	pop	{r3, pc}
 8009c4c:	58024400 	.word	0x58024400
 8009c50:	080255d0 	.word	0x080255d0
 8009c54:	24000068 	.word	0x24000068
 8009c58:	2400006c 	.word	0x2400006c

08009c5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009c5c:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009c5e:	f7ff ffdb 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c62:	4b05      	ldr	r3, [pc, #20]	@ (8009c78 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8009c64:	4a05      	ldr	r2, [pc, #20]	@ (8009c7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009c6c:	5cd3      	ldrb	r3, [r2, r3]
 8009c6e:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8009c72:	40d8      	lsrs	r0, r3
 8009c74:	bd08      	pop	{r3, pc}
 8009c76:	bf00      	nop
 8009c78:	58024400 	.word	0x58024400
 8009c7c:	080255d0 	.word	0x080255d0

08009c80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009c80:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8009c82:	f7ff ffc9 	bl	8009c18 <HAL_RCC_GetHCLKFreq>
 8009c86:	4b05      	ldr	r3, [pc, #20]	@ (8009c9c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8009c88:	4a05      	ldr	r2, [pc, #20]	@ (8009ca0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009c8a:	69db      	ldr	r3, [r3, #28]
 8009c8c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8009c90:	5cd3      	ldrb	r3, [r2, r3]
 8009c92:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8009c96:	40d8      	lsrs	r0, r3
 8009c98:	bd08      	pop	{r3, pc}
 8009c9a:	bf00      	nop
 8009c9c:	58024400 	.word	0x58024400
 8009ca0:	080255d0 	.word	0x080255d0

08009ca4 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8009ca4:	233f      	movs	r3, #63	@ 0x3f
 8009ca6:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009ca8:	4b11      	ldr	r3, [pc, #68]	@ (8009cf0 <HAL_RCC_GetClockConfig+0x4c>)
 8009caa:	691a      	ldr	r2, [r3, #16]
 8009cac:	f002 0207 	and.w	r2, r2, #7
 8009cb0:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8009cb2:	699a      	ldr	r2, [r3, #24]
 8009cb4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8009cb8:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8009cba:	699a      	ldr	r2, [r3, #24]
 8009cbc:	f002 020f 	and.w	r2, r2, #15
 8009cc0:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8009cc2:	699a      	ldr	r2, [r3, #24]
 8009cc4:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009cc8:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8009cca:	69da      	ldr	r2, [r3, #28]
 8009ccc:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 8009cd0:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8009cd2:	69da      	ldr	r2, [r3, #28]
 8009cd4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 8009cd8:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8009ce0:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009ce2:	4b04      	ldr	r3, [pc, #16]	@ (8009cf4 <HAL_RCC_GetClockConfig+0x50>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 030f 	and.w	r3, r3, #15
 8009cea:	600b      	str	r3, [r1, #0]
}
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	58024400 	.word	0x58024400
 8009cf4:	52002000 	.word	0x52002000

08009cf8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009cfa:	4c3a      	ldr	r4, [pc, #232]	@ (8009de4 <RCCEx_PLL2_Config+0xec>)
{
 8009cfc:	4606      	mov	r6, r0
 8009cfe:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009d00:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d02:	f003 0303 	and.w	r3, r3, #3
 8009d06:	2b03      	cmp	r3, #3
 8009d08:	d069      	beq.n	8009dde <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009d0a:	6823      	ldr	r3, [r4, #0]
 8009d0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009d10:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d12:	f7fc f90f 	bl	8005f34 <HAL_GetTick>
 8009d16:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	011a      	lsls	r2, r3, #4
 8009d1c:	d44b      	bmi.n	8009db6 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009d1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009d20:	6832      	ldr	r2, [r6, #0]
 8009d22:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009d26:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8009d2a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009d2c:	68b3      	ldr	r3, [r6, #8]
 8009d2e:	68f2      	ldr	r2, [r6, #12]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	3a01      	subs	r2, #1
 8009d34:	025b      	lsls	r3, r3, #9
 8009d36:	0412      	lsls	r2, r2, #16
 8009d38:	b29b      	uxth	r3, r3
 8009d3a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	6872      	ldr	r2, [r6, #4]
 8009d42:	3a01      	subs	r2, #1
 8009d44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d48:	4313      	orrs	r3, r2
 8009d4a:	6932      	ldr	r2, [r6, #16]
 8009d4c:	3a01      	subs	r2, #1
 8009d4e:	0612      	lsls	r2, r2, #24
 8009d50:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009d54:	4313      	orrs	r3, r2
 8009d56:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009d58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d5a:	6972      	ldr	r2, [r6, #20]
 8009d5c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d60:	4313      	orrs	r3, r2
 8009d62:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009d64:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d66:	69b2      	ldr	r2, [r6, #24]
 8009d68:	f023 0320 	bic.w	r3, r3, #32
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009d70:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d72:	f023 0310 	bic.w	r3, r3, #16
 8009d76:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009d78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d7a:	69f2      	ldr	r2, [r6, #28]
 8009d7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009d84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009d88:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009d8a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009d8c:	f043 0310 	orr.w	r3, r3, #16
 8009d90:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d92:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009d94:	b9b5      	cbnz	r5, 8009dc4 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009d96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009d9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009d9c:	4c11      	ldr	r4, [pc, #68]	@ (8009de4 <RCCEx_PLL2_Config+0xec>)
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009da4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009da6:	f7fc f8c5 	bl	8005f34 <HAL_GetTick>
 8009daa:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009dac:	6823      	ldr	r3, [r4, #0]
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	d50f      	bpl.n	8009dd2 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 8009db2:	2000      	movs	r0, #0
 8009db4:	e005      	b.n	8009dc2 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009db6:	f7fc f8bd 	bl	8005f34 <HAL_GetTick>
 8009dba:	1bc0      	subs	r0, r0, r7
 8009dbc:	2802      	cmp	r0, #2
 8009dbe:	d9ab      	bls.n	8009d18 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 8009dc0:	2003      	movs	r0, #3
}
 8009dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009dc4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009dc6:	bf0c      	ite	eq
 8009dc8:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009dcc:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 8009dd0:	e7e3      	b.n	8009d9a <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dd2:	f7fc f8af 	bl	8005f34 <HAL_GetTick>
 8009dd6:	1b40      	subs	r0, r0, r5
 8009dd8:	2802      	cmp	r0, #2
 8009dda:	d9e7      	bls.n	8009dac <RCCEx_PLL2_Config+0xb4>
 8009ddc:	e7f0      	b.n	8009dc0 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 8009dde:	2001      	movs	r0, #1
 8009de0:	e7ef      	b.n	8009dc2 <RCCEx_PLL2_Config+0xca>
 8009de2:	bf00      	nop
 8009de4:	58024400 	.word	0x58024400

08009de8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dea:	4c3a      	ldr	r4, [pc, #232]	@ (8009ed4 <RCCEx_PLL3_Config+0xec>)
{
 8009dec:	4606      	mov	r6, r0
 8009dee:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009df0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009df2:	f003 0303 	and.w	r3, r3, #3
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d069      	beq.n	8009ece <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009e00:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e02:	f7fc f897 	bl	8005f34 <HAL_GetTick>
 8009e06:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009e08:	6823      	ldr	r3, [r4, #0]
 8009e0a:	009a      	lsls	r2, r3, #2
 8009e0c:	d44b      	bmi.n	8009ea6 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009e0e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009e10:	6832      	ldr	r2, [r6, #0]
 8009e12:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 8009e16:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8009e1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e1c:	68b3      	ldr	r3, [r6, #8]
 8009e1e:	68f2      	ldr	r2, [r6, #12]
 8009e20:	3b01      	subs	r3, #1
 8009e22:	3a01      	subs	r2, #1
 8009e24:	025b      	lsls	r3, r3, #9
 8009e26:	0412      	lsls	r2, r2, #16
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e2e:	4313      	orrs	r3, r2
 8009e30:	6872      	ldr	r2, [r6, #4]
 8009e32:	3a01      	subs	r2, #1
 8009e34:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	6932      	ldr	r2, [r6, #16]
 8009e3c:	3a01      	subs	r2, #1
 8009e3e:	0612      	lsls	r2, r2, #24
 8009e40:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e44:	4313      	orrs	r3, r2
 8009e46:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009e48:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e4a:	6972      	ldr	r2, [r6, #20]
 8009e4c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8009e50:	4313      	orrs	r3, r2
 8009e52:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009e54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e56:	69b2      	ldr	r2, [r6, #24]
 8009e58:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009e60:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e66:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009e68:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009e6a:	69f2      	ldr	r2, [r6, #28]
 8009e6c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e70:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e74:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009e78:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009e7a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e80:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e82:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8009e84:	b9b5      	cbnz	r5, 8009eb4 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009e86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009e8a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009e8c:	4c11      	ldr	r4, [pc, #68]	@ (8009ed4 <RCCEx_PLL3_Config+0xec>)
 8009e8e:	6823      	ldr	r3, [r4, #0]
 8009e90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009e94:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e96:	f7fc f84d 	bl	8005f34 <HAL_GetTick>
 8009e9a:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009e9c:	6823      	ldr	r3, [r4, #0]
 8009e9e:	009b      	lsls	r3, r3, #2
 8009ea0:	d50f      	bpl.n	8009ec2 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 8009ea2:	2000      	movs	r0, #0
 8009ea4:	e005      	b.n	8009eb2 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ea6:	f7fc f845 	bl	8005f34 <HAL_GetTick>
 8009eaa:	1bc0      	subs	r0, r0, r7
 8009eac:	2802      	cmp	r0, #2
 8009eae:	d9ab      	bls.n	8009e08 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 8009eb0:	2003      	movs	r0, #3
}
 8009eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 8009eb4:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009eb6:	bf0c      	ite	eq
 8009eb8:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009ebc:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 8009ec0:	e7e3      	b.n	8009e8a <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ec2:	f7fc f837 	bl	8005f34 <HAL_GetTick>
 8009ec6:	1b40      	subs	r0, r0, r5
 8009ec8:	2802      	cmp	r0, #2
 8009eca:	d9e7      	bls.n	8009e9c <RCCEx_PLL3_Config+0xb4>
 8009ecc:	e7f0      	b.n	8009eb0 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e7ef      	b.n	8009eb2 <RCCEx_PLL3_Config+0xca>
 8009ed2:	bf00      	nop
 8009ed4:	58024400 	.word	0x58024400

08009ed8 <HAL_RCCEx_PeriphCLKConfig>:
{
 8009ed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009edc:	6803      	ldr	r3, [r0, #0]
{
 8009ede:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ee0:	011c      	lsls	r4, r3, #4
 8009ee2:	d51e      	bpl.n	8009f22 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009ee4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8009ee6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009eea:	d02a      	beq.n	8009f42 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8009eec:	d80f      	bhi.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x36>
 8009eee:	b1d3      	cbz	r3, 8009f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009ef0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ef4:	d01d      	beq.n	8009f32 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8009ef6:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	05d8      	lsls	r0, r3, #23
 8009efc:	d54f      	bpl.n	8009f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009efe:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8009f00:	2b04      	cmp	r3, #4
 8009f02:	d84b      	bhi.n	8009f9c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8009f04:	e8df f003 	tbb	[pc, r3]
 8009f08:	27443d22 	.word	0x27443d22
 8009f0c:	27          	.byte	0x27
 8009f0d:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009f0e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009f12:	d1f0      	bne.n	8009ef6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8009f14:	4a86      	ldr	r2, [pc, #536]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f16:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 8009f18:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f1a:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8009f1e:	430b      	orrs	r3, r1
 8009f20:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009f22:	2600      	movs	r6, #0
 8009f24:	e7e8      	b.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f26:	4a82      	ldr	r2, [pc, #520]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f28:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009f2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 8009f30:	e7f0      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f32:	2102      	movs	r1, #2
 8009f34:	3008      	adds	r0, #8
 8009f36:	f7ff fedf 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f3a:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8009f3c:	2800      	cmp	r0, #0
 8009f3e:	d1db      	bne.n	8009ef8 <HAL_RCCEx_PeriphCLKConfig+0x20>
 8009f40:	e7e8      	b.n	8009f14 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009f42:	2102      	movs	r1, #2
 8009f44:	3028      	adds	r0, #40	@ 0x28
 8009f46:	f7ff ff4f 	bl	8009de8 <RCCEx_PLL3_Config>
 8009f4a:	e7f6      	b.n	8009f3a <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f4c:	4a78      	ldr	r2, [pc, #480]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f4e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009f50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f54:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 8009f56:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 8009f58:	bb1c      	cbnz	r4, 8009fa2 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009f5a:	4a75      	ldr	r2, [pc, #468]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009f5c:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 8009f5e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009f60:	f023 0307 	bic.w	r3, r3, #7
 8009f64:	430b      	orrs	r3, r1
 8009f66:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8009f68:	682b      	ldr	r3, [r5, #0]
 8009f6a:	0599      	lsls	r1, r3, #22
 8009f6c:	d528      	bpl.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009f6e:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8009f70:	2b80      	cmp	r3, #128	@ 0x80
 8009f72:	d043      	beq.n	8009ffc <HAL_RCCEx_PeriphCLKConfig+0x124>
 8009f74:	d817      	bhi.n	8009fa6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8009f76:	b3a3      	cbz	r3, 8009fe2 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8009f78:	2b40      	cmp	r3, #64	@ 0x40
 8009f7a:	d038      	beq.n	8009fee <HAL_RCCEx_PeriphCLKConfig+0x116>
 8009f7c:	2601      	movs	r6, #1
 8009f7e:	4634      	mov	r4, r6
 8009f80:	e01e      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009f82:	2100      	movs	r1, #0
 8009f84:	f105 0008 	add.w	r0, r5, #8
 8009f88:	f7ff feb6 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f8c:	4604      	mov	r4, r0
        break;
 8009f8e:	e7e3      	b.n	8009f58 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009f90:	2100      	movs	r1, #0
 8009f92:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 8009f96:	f7ff ff27 	bl	8009de8 <RCCEx_PLL3_Config>
 8009f9a:	e7f7      	b.n	8009f8c <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 8009f9c:	2601      	movs	r6, #1
 8009f9e:	4634      	mov	r4, r6
 8009fa0:	e7e2      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009fa2:	4626      	mov	r6, r4
 8009fa4:	e7e0      	b.n	8009f68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 8009fa6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fa8:	d002      	beq.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8009faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fae:	d1e5      	bne.n	8009f7c <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 8009fb0:	bb54      	cbnz	r4, 800a008 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009fb2:	4a5f      	ldr	r2, [pc, #380]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009fb4:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 8009fb6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 8009fb8:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 8009fbc:	430b      	orrs	r3, r1
 8009fbe:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009fc0:	682b      	ldr	r3, [r5, #0]
 8009fc2:	055a      	lsls	r2, r3, #21
 8009fc4:	d531      	bpl.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 8009fc6:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 8009fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009fce:	d049      	beq.n	800a064 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8009fd0:	d81c      	bhi.n	800a00c <HAL_RCCEx_PeriphCLKConfig+0x134>
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d039      	beq.n	800a04a <HAL_RCCEx_PeriphCLKConfig+0x172>
 8009fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009fda:	d03c      	beq.n	800a056 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 8009fdc:	2601      	movs	r6, #1
 8009fde:	4634      	mov	r4, r6
 8009fe0:	e023      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009fe2:	4a53      	ldr	r2, [pc, #332]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009fe4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8009fe6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009fea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 8009fec:	e7e0      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009fee:	2100      	movs	r1, #0
 8009ff0:	f105 0008 	add.w	r0, r5, #8
 8009ff4:	f7ff fe80 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ff8:	4604      	mov	r4, r0
        break;
 8009ffa:	e7d9      	b.n	8009fb0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ffc:	2100      	movs	r1, #0
 8009ffe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a002:	f7ff fef1 	bl	8009de8 <RCCEx_PLL3_Config>
 800a006:	e7f7      	b.n	8009ff8 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a008:	4626      	mov	r6, r4
 800a00a:	e7d9      	b.n	8009fc0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a00c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a010:	d002      	beq.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a012:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a016:	d1e1      	bne.n	8009fdc <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a018:	bb54      	cbnz	r4, 800a070 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a01a:	4a45      	ldr	r2, [pc, #276]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a01c:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a020:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a022:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a026:	430b      	orrs	r3, r1
 800a028:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	051b      	lsls	r3, r3, #20
 800a02e:	d530      	bpl.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a030:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a034:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a038:	d045      	beq.n	800a0c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a03a:	d81b      	bhi.n	800a074 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a03c:	b3b3      	cbz	r3, 800a0ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a03e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a042:	d039      	beq.n	800a0b8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a044:	2601      	movs	r6, #1
 800a046:	4634      	mov	r4, r6
 800a048:	e023      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a04a:	4a39      	ldr	r2, [pc, #228]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a04c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a04e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a052:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a054:	e7e0      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a056:	2100      	movs	r1, #0
 800a058:	f105 0008 	add.w	r0, r5, #8
 800a05c:	f7ff fe4c 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a060:	4604      	mov	r4, r0
        break;
 800a062:	e7d9      	b.n	800a018 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a064:	2100      	movs	r1, #0
 800a066:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a06a:	f7ff febd 	bl	8009de8 <RCCEx_PLL3_Config>
 800a06e:	e7f7      	b.n	800a060 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a070:	4626      	mov	r6, r4
 800a072:	e7da      	b.n	800a02a <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a074:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a078:	d002      	beq.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a07a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a07e:	d1e1      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a080:	bb3c      	cbnz	r4, 800a0d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a082:	4a2b      	ldr	r2, [pc, #172]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a084:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a088:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a08a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a08e:	430b      	orrs	r3, r1
 800a090:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a092:	682b      	ldr	r3, [r5, #0]
 800a094:	019f      	lsls	r7, r3, #6
 800a096:	d528      	bpl.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a098:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a09a:	2b20      	cmp	r3, #32
 800a09c:	d03e      	beq.n	800a11c <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a09e:	d81a      	bhi.n	800a0d6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a0a0:	b1db      	cbz	r3, 800a0da <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a0a2:	2b10      	cmp	r3, #16
 800a0a4:	d034      	beq.n	800a110 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a0a6:	2601      	movs	r6, #1
 800a0a8:	4634      	mov	r4, r6
 800a0aa:	e01e      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ac:	4a20      	ldr	r2, [pc, #128]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0ae:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a0b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a0b4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a0b6:	e7e3      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	f105 0008 	add.w	r0, r5, #8
 800a0be:	f7ff fe1b 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0c2:	4604      	mov	r4, r0
        break;
 800a0c4:	e7dc      	b.n	800a080 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a0c6:	2100      	movs	r1, #0
 800a0c8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a0cc:	f7ff fe8c 	bl	8009de8 <RCCEx_PLL3_Config>
 800a0d0:	e7f7      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a0d2:	4626      	mov	r6, r4
 800a0d4:	e7dd      	b.n	800a092 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a0d6:	2b30      	cmp	r3, #48	@ 0x30
 800a0d8:	d1e5      	bne.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a0da:	bb34      	cbnz	r4, 800a12a <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a0dc:	4a14      	ldr	r2, [pc, #80]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a0de:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a0e0:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a0e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a0e6:	430b      	orrs	r3, r1
 800a0e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a0ea:	682b      	ldr	r3, [r5, #0]
 800a0ec:	04d8      	lsls	r0, r3, #19
 800a0ee:	d530      	bpl.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a0f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a0f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a0f6:	f000 8097 	beq.w	800a228 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a0fa:	d81b      	bhi.n	800a134 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	f000 8086 	beq.w	800a20e <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a102:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a106:	f000 8088 	beq.w	800a21a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a10a:	2601      	movs	r6, #1
 800a10c:	4634      	mov	r4, r6
 800a10e:	e020      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a110:	4a07      	ldr	r2, [pc, #28]	@ (800a130 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a112:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a114:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a118:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a11a:	e7de      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a11c:	2102      	movs	r1, #2
 800a11e:	f105 0008 	add.w	r0, r5, #8
 800a122:	f7ff fde9 	bl	8009cf8 <RCCEx_PLL2_Config>
 800a126:	4604      	mov	r4, r0
        break;
 800a128:	e7d7      	b.n	800a0da <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a12a:	4626      	mov	r6, r4
 800a12c:	e7dd      	b.n	800a0ea <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a12e:	bf00      	nop
 800a130:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a134:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a138:	d002      	beq.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a13a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a13e:	d1e4      	bne.n	800a10a <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a140:	2c00      	cmp	r4, #0
 800a142:	d177      	bne.n	800a234 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a144:	4a9e      	ldr	r2, [pc, #632]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a146:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a148:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a14a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a14e:	430b      	orrs	r3, r1
 800a150:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a152:	682b      	ldr	r3, [r5, #0]
 800a154:	0499      	lsls	r1, r3, #18
 800a156:	d50c      	bpl.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a158:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a15a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a15e:	f000 8083 	beq.w	800a268 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a162:	d869      	bhi.n	800a238 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d06f      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a16c:	d075      	beq.n	800a25a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a16e:	2601      	movs	r6, #1
 800a170:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a172:	682b      	ldr	r3, [r5, #0]
 800a174:	045a      	lsls	r2, r3, #17
 800a176:	d50e      	bpl.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a178:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a17c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a180:	f000 8093 	beq.w	800a2aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a184:	d878      	bhi.n	800a278 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a186:	2b00      	cmp	r3, #0
 800a188:	d07e      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a18a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a18e:	f000 8085 	beq.w	800a29c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a192:	2601      	movs	r6, #1
 800a194:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a196:	682b      	ldr	r3, [r5, #0]
 800a198:	015b      	lsls	r3, r3, #5
 800a19a:	d515      	bpl.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a19c:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a19e:	b14b      	cbz	r3, 800a1b4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a1a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1a4:	f040 8089 	bne.w	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1a8:	2101      	movs	r1, #1
 800a1aa:	f105 0008 	add.w	r0, r5, #8
 800a1ae:	f7ff fda3 	bl	8009cf8 <RCCEx_PLL2_Config>
 800a1b2:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a1b4:	2c00      	cmp	r4, #0
 800a1b6:	f040 8083 	bne.w	800a2c0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a1ba:	4a81      	ldr	r2, [pc, #516]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a1bc:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a1be:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a1c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a1c4:	430b      	orrs	r3, r1
 800a1c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a1c8:	682b      	ldr	r3, [r5, #0]
 800a1ca:	041f      	lsls	r7, r3, #16
 800a1cc:	d511      	bpl.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a1ce:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a1d0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1d4:	d076      	beq.n	800a2c4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a1d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a1da:	d079      	beq.n	800a2d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d17e      	bne.n	800a2de <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a1e0:	2c00      	cmp	r4, #0
 800a1e2:	d17f      	bne.n	800a2e4 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a1e4:	4a76      	ldr	r2, [pc, #472]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a1e6:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a1e8:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a1ea:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a1ee:	430b      	orrs	r3, r1
 800a1f0:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a1f2:	682b      	ldr	r3, [r5, #0]
 800a1f4:	01d8      	lsls	r0, r3, #7
 800a1f6:	f140 8085 	bpl.w	800a304 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a1fa:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a1fc:	2b03      	cmp	r3, #3
 800a1fe:	f200 80e5 	bhi.w	800a3cc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a202:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a206:	0076      	.short	0x0076
 800a208:	00d50071 	.word	0x00d50071
 800a20c:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a20e:	4a6c      	ldr	r2, [pc, #432]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a210:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a212:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a216:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a218:	e792      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a21a:	2100      	movs	r1, #0
 800a21c:	f105 0008 	add.w	r0, r5, #8
 800a220:	f7ff fd6a 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a224:	4604      	mov	r4, r0
        break;
 800a226:	e78b      	b.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a228:	2100      	movs	r1, #0
 800a22a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a22e:	f7ff fddb 	bl	8009de8 <RCCEx_PLL3_Config>
 800a232:	e7f7      	b.n	800a224 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a234:	4626      	mov	r6, r4
 800a236:	e78c      	b.n	800a152 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a238:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a23c:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a240:	d002      	beq.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a242:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a246:	d192      	bne.n	800a16e <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a248:	b9a4      	cbnz	r4, 800a274 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a24a:	4a5d      	ldr	r2, [pc, #372]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a24c:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a24e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a250:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800a254:	430b      	orrs	r3, r1
 800a256:	6513      	str	r3, [r2, #80]	@ 0x50
 800a258:	e78b      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a25a:	2101      	movs	r1, #1
 800a25c:	f105 0008 	add.w	r0, r5, #8
 800a260:	f7ff fd4a 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a264:	4604      	mov	r4, r0
        break;
 800a266:	e7ef      	b.n	800a248 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a268:	2101      	movs	r1, #1
 800a26a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a26e:	f7ff fdbb 	bl	8009de8 <RCCEx_PLL3_Config>
 800a272:	e7f7      	b.n	800a264 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800a274:	4626      	mov	r6, r4
 800a276:	e77c      	b.n	800a172 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a278:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a27c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a280:	d002      	beq.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a282:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a286:	d184      	bne.n	800a192 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800a288:	b9ac      	cbnz	r4, 800a2b6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800a28a:	4a4d      	ldr	r2, [pc, #308]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a28c:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800a290:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a292:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a296:	430b      	orrs	r3, r1
 800a298:	6593      	str	r3, [r2, #88]	@ 0x58
 800a29a:	e77c      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a29c:	2101      	movs	r1, #1
 800a29e:	f105 0008 	add.w	r0, r5, #8
 800a2a2:	f7ff fd29 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2a6:	4604      	mov	r4, r0
        break;
 800a2a8:	e7ee      	b.n	800a288 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2aa:	2101      	movs	r1, #1
 800a2ac:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a2b0:	f7ff fd9a 	bl	8009de8 <RCCEx_PLL3_Config>
 800a2b4:	e7f7      	b.n	800a2a6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800a2b6:	4626      	mov	r6, r4
 800a2b8:	e76d      	b.n	800a196 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800a2ba:	2601      	movs	r6, #1
 800a2bc:	4634      	mov	r4, r6
 800a2be:	e783      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800a2c0:	4626      	mov	r6, r4
 800a2c2:	e781      	b.n	800a1c8 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2c4:	4a3e      	ldr	r2, [pc, #248]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2c6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2cc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a2ce:	e787      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2d0:	2101      	movs	r1, #1
 800a2d2:	f105 0008 	add.w	r0, r5, #8
 800a2d6:	f7ff fd0f 	bl	8009cf8 <RCCEx_PLL2_Config>
 800a2da:	4604      	mov	r4, r0
        break;
 800a2dc:	e780      	b.n	800a1e0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800a2de:	2601      	movs	r6, #1
 800a2e0:	4634      	mov	r4, r6
 800a2e2:	e786      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800a2e4:	4626      	mov	r6, r4
 800a2e6:	e784      	b.n	800a1f2 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a2e8:	4a35      	ldr	r2, [pc, #212]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2ea:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a2ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a2f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a2f2:	2c00      	cmp	r4, #0
 800a2f4:	d16d      	bne.n	800a3d2 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800a2f6:	4a32      	ldr	r2, [pc, #200]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a2f8:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800a2fa:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a2fc:	f023 0303 	bic.w	r3, r3, #3
 800a300:	430b      	orrs	r3, r1
 800a302:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	0259      	lsls	r1, r3, #9
 800a308:	d539      	bpl.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a30a:	4f2e      	ldr	r7, [pc, #184]	@ (800a3c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a312:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800a314:	f7fb fe0e 	bl	8005f34 <HAL_GetTick>
 800a318:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	05da      	lsls	r2, r3, #23
 800a31e:	d55a      	bpl.n	800a3d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800a320:	2c00      	cmp	r4, #0
 800a322:	d176      	bne.n	800a412 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a324:	4b26      	ldr	r3, [pc, #152]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a326:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800a32a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800a32c:	4042      	eors	r2, r0
 800a32e:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800a332:	d00b      	beq.n	800a34c <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a334:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800a336:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a338:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800a33c:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800a340:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a342:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800a344:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800a348:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800a34a:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a34c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a350:	d04a      	beq.n	800a3e8 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a352:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800a356:	491a      	ldr	r1, [pc, #104]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a358:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800a35c:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800a360:	d153      	bne.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x532>
 800a362:	6908      	ldr	r0, [r1, #16]
 800a364:	4a18      	ldr	r2, [pc, #96]	@ (800a3c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800a366:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800a36a:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800a36e:	4302      	orrs	r2, r0
 800a370:	610a      	str	r2, [r1, #16]
 800a372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a376:	4a12      	ldr	r2, [pc, #72]	@ (800a3c0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a378:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800a37a:	430b      	orrs	r3, r1
 800a37c:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a37e:	682b      	ldr	r3, [r5, #0]
 800a380:	07d8      	lsls	r0, r3, #31
 800a382:	d50a      	bpl.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a384:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800a388:	2b10      	cmp	r3, #16
 800a38a:	d05b      	beq.n	800a444 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800a38c:	d843      	bhi.n	800a416 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d047      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a392:	2b08      	cmp	r3, #8
 800a394:	d04f      	beq.n	800a436 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800a396:	2601      	movs	r6, #1
 800a398:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a39a:	682b      	ldr	r3, [r5, #0]
 800a39c:	0799      	lsls	r1, r3, #30
 800a39e:	d567      	bpl.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a3a0:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800a3a2:	2b05      	cmp	r3, #5
 800a3a4:	d87a      	bhi.n	800a49c <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800a3a6:	e8df f003 	tbb	[pc, r3]
 800a3aa:	555b      	.short	0x555b
 800a3ac:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a3b0:	2102      	movs	r1, #2
 800a3b2:	f105 0008 	add.w	r0, r5, #8
 800a3b6:	f7ff fc9f 	bl	8009cf8 <RCCEx_PLL2_Config>
 800a3ba:	4604      	mov	r4, r0
        break;
 800a3bc:	e799      	b.n	800a2f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800a3be:	bf00      	nop
 800a3c0:	58024400 	.word	0x58024400
 800a3c4:	58024800 	.word	0x58024800
 800a3c8:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800a3cc:	2601      	movs	r6, #1
 800a3ce:	4634      	mov	r4, r6
 800a3d0:	e798      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800a3d2:	4626      	mov	r6, r4
 800a3d4:	e796      	b.n	800a304 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a3d6:	f7fb fdad 	bl	8005f34 <HAL_GetTick>
 800a3da:	eba0 0008 	sub.w	r0, r0, r8
 800a3de:	2864      	cmp	r0, #100	@ 0x64
 800a3e0:	d99b      	bls.n	800a31a <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800a3e2:	2603      	movs	r6, #3
 800a3e4:	4634      	mov	r4, r6
 800a3e6:	e7ca      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800a3e8:	f7fb fda4 	bl	8005f34 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800a3f0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3f2:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3f6:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800a3fa:	079b      	lsls	r3, r3, #30
 800a3fc:	d4a9      	bmi.n	800a352 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a3fe:	f7fb fd99 	bl	8005f34 <HAL_GetTick>
 800a402:	1bc0      	subs	r0, r0, r7
 800a404:	4548      	cmp	r0, r9
 800a406:	d9f6      	bls.n	800a3f6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800a408:	e7eb      	b.n	800a3e2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a40a:	690a      	ldr	r2, [r1, #16]
 800a40c:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800a410:	e7ae      	b.n	800a370 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800a412:	4626      	mov	r6, r4
 800a414:	e7b3      	b.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800a416:	f023 0208 	bic.w	r2, r3, #8
 800a41a:	2a20      	cmp	r2, #32
 800a41c:	d001      	beq.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800a41e:	2b18      	cmp	r3, #24
 800a420:	d1b9      	bne.n	800a396 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800a422:	b9ac      	cbnz	r4, 800a450 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a424:	4a20      	ldr	r2, [pc, #128]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a426:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800a42a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a42c:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800a430:	430b      	orrs	r3, r1
 800a432:	6553      	str	r3, [r2, #84]	@ 0x54
 800a434:	e7b1      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a436:	2101      	movs	r1, #1
 800a438:	f105 0008 	add.w	r0, r5, #8
 800a43c:	f7ff fc5c 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a440:	4604      	mov	r4, r0
        break;
 800a442:	e7ee      	b.n	800a422 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a444:	2101      	movs	r1, #1
 800a446:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a44a:	f7ff fccd 	bl	8009de8 <RCCEx_PLL3_Config>
 800a44e:	e7f7      	b.n	800a440 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800a450:	4626      	mov	r6, r4
 800a452:	e7a2      	b.n	800a39a <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a454:	2101      	movs	r1, #1
 800a456:	f105 0008 	add.w	r0, r5, #8
 800a45a:	f7ff fc4d 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a45e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a460:	b9fc      	cbnz	r4, 800a4a2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a462:	4a11      	ldr	r2, [pc, #68]	@ (800a4a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800a464:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800a466:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a468:	f023 0307 	bic.w	r3, r3, #7
 800a46c:	430b      	orrs	r3, r1
 800a46e:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a470:	682b      	ldr	r3, [r5, #0]
 800a472:	075a      	lsls	r2, r3, #29
 800a474:	d52b      	bpl.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a476:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800a47a:	2b05      	cmp	r3, #5
 800a47c:	f200 816e 	bhi.w	800a75c <HAL_RCCEx_PeriphCLKConfig+0x884>
 800a480:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a484:	0014001a 	.word	0x0014001a
 800a488:	001a0166 	.word	0x001a0166
 800a48c:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a490:	2101      	movs	r1, #1
 800a492:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a496:	f7ff fca7 	bl	8009de8 <RCCEx_PLL3_Config>
 800a49a:	e7e0      	b.n	800a45e <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a49c:	2601      	movs	r6, #1
 800a49e:	4634      	mov	r4, r6
 800a4a0:	e7e6      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a4a2:	4626      	mov	r6, r4
 800a4a4:	e7e4      	b.n	800a470 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800a4a6:	bf00      	nop
 800a4a8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a4ac:	2101      	movs	r1, #1
 800a4ae:	f105 0008 	add.w	r0, r5, #8
 800a4b2:	f7ff fc21 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a4b6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a4b8:	2c00      	cmp	r4, #0
 800a4ba:	f040 8152 	bne.w	800a762 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4be:	4aaa      	ldr	r2, [pc, #680]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a4c0:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800a4c4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a4c6:	f023 0307 	bic.w	r3, r3, #7
 800a4ca:	430b      	orrs	r3, r1
 800a4cc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a4ce:	682b      	ldr	r3, [r5, #0]
 800a4d0:	069b      	lsls	r3, r3, #26
 800a4d2:	d510      	bpl.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a4d4:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800a4d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4dc:	f000 8160 	beq.w	800a7a0 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800a4e0:	f200 8144 	bhi.w	800a76c <HAL_RCCEx_PeriphCLKConfig+0x894>
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	f000 814a 	beq.w	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a4ea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a4ee:	f000 8150 	beq.w	800a792 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800a4f2:	2601      	movs	r6, #1
 800a4f4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a4f6:	682b      	ldr	r3, [r5, #0]
 800a4f8:	065f      	lsls	r7, r3, #25
 800a4fa:	d510      	bpl.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4fc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800a500:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a504:	f000 816e 	beq.w	800a7e4 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800a508:	f200 8152 	bhi.w	800a7b0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f000 8158 	beq.w	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a512:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a516:	f000 815e 	beq.w	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800a51a:	2601      	movs	r6, #1
 800a51c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	0618      	lsls	r0, r3, #24
 800a522:	d510      	bpl.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a524:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800a528:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a52c:	f000 817c 	beq.w	800a828 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800a530:	f200 8160 	bhi.w	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800a534:	2b00      	cmp	r3, #0
 800a536:	f000 8166 	beq.w	800a806 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a53e:	f000 816c 	beq.w	800a81a <HAL_RCCEx_PeriphCLKConfig+0x942>
 800a542:	2601      	movs	r6, #1
 800a544:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a546:	682b      	ldr	r3, [r5, #0]
 800a548:	0719      	lsls	r1, r3, #28
 800a54a:	d514      	bpl.n	800a576 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a54c:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800a550:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a554:	d107      	bne.n	800a566 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a556:	2102      	movs	r1, #2
 800a558:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a55c:	f7ff fc44 	bl	8009de8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a560:	2800      	cmp	r0, #0
 800a562:	bf18      	it	ne
 800a564:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a566:	4a80      	ldr	r2, [pc, #512]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a568:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800a56c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a56e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800a572:	430b      	orrs	r3, r1
 800a574:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a576:	682b      	ldr	r3, [r5, #0]
 800a578:	06da      	lsls	r2, r3, #27
 800a57a:	d514      	bpl.n	800a5a6 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a57c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800a580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a584:	d107      	bne.n	800a596 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a586:	2102      	movs	r1, #2
 800a588:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a58c:	f7ff fc2c 	bl	8009de8 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800a590:	2800      	cmp	r0, #0
 800a592:	bf18      	it	ne
 800a594:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a596:	4a74      	ldr	r2, [pc, #464]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a598:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800a59c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a59e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a5a2:	430b      	orrs	r3, r1
 800a5a4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	031b      	lsls	r3, r3, #12
 800a5aa:	d51b      	bpl.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800a5ac:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a5b0:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800a5b4:	f000 8140 	beq.w	800a838 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800a5b8:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800a5bc:	d007      	beq.n	800a5ce <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800a5be:	2900      	cmp	r1, #0
 800a5c0:	f040 8140 	bne.w	800a844 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5c4:	f105 0008 	add.w	r0, r5, #8
 800a5c8:	f7ff fb96 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5cc:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a5ce:	2c00      	cmp	r4, #0
 800a5d0:	f040 813b 	bne.w	800a84a <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a5d4:	4a64      	ldr	r2, [pc, #400]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a5d6:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800a5da:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a5dc:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a5e4:	682b      	ldr	r3, [r5, #0]
 800a5e6:	035f      	lsls	r7, r3, #13
 800a5e8:	d50f      	bpl.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800a5ea:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800a5ee:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a5f2:	f000 813b 	beq.w	800a86c <HAL_RCCEx_PeriphCLKConfig+0x994>
 800a5f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a5fa:	f000 812d 	beq.w	800a858 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a5fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a602:	f000 8124 	beq.w	800a84e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800a606:	2601      	movs	r6, #1
 800a608:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a60a:	682b      	ldr	r3, [r5, #0]
 800a60c:	03d8      	lsls	r0, r3, #15
 800a60e:	d509      	bpl.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800a610:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800a612:	2b00      	cmp	r3, #0
 800a614:	f000 8133 	beq.w	800a87e <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800a618:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a61c:	f000 813d 	beq.w	800a89a <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800a620:	2601      	movs	r6, #1
 800a622:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a624:	682b      	ldr	r3, [r5, #0]
 800a626:	0099      	lsls	r1, r3, #2
 800a628:	d507      	bpl.n	800a63a <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a62a:	2102      	movs	r1, #2
 800a62c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a630:	f7ff fbda 	bl	8009de8 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800a634:	2800      	cmp	r0, #0
 800a636:	bf18      	it	ne
 800a638:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a63a:	e9d5 3100 	ldrd	r3, r1, [r5]
 800a63e:	039a      	lsls	r2, r3, #14
 800a640:	f140 8143 	bpl.w	800a8ca <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800a644:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800a648:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800a64c:	f000 813f 	beq.w	800a8ce <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800a650:	f200 812c 	bhi.w	800a8ac <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800a654:	2800      	cmp	r0, #0
 800a656:	f000 812f 	beq.w	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800a65a:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a65c:	02df      	lsls	r7, r3, #11
 800a65e:	d506      	bpl.n	800a66e <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a660:	4841      	ldr	r0, [pc, #260]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a662:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800a664:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a666:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800a66a:	4332      	orrs	r2, r6
 800a66c:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a66e:	00de      	lsls	r6, r3, #3
 800a670:	d507      	bpl.n	800a682 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a672:	483d      	ldr	r0, [pc, #244]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a674:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800a678:	6902      	ldr	r2, [r0, #16]
 800a67a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a67e:	4332      	orrs	r2, r6
 800a680:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a682:	0298      	lsls	r0, r3, #10
 800a684:	d506      	bpl.n	800a694 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a686:	4838      	ldr	r0, [pc, #224]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a688:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800a68a:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a68c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a690:	4332      	orrs	r2, r6
 800a692:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a694:	005a      	lsls	r2, r3, #1
 800a696:	d509      	bpl.n	800a6ac <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a698:	4a33      	ldr	r2, [pc, #204]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a69a:	6910      	ldr	r0, [r2, #16]
 800a69c:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800a6a0:	6110      	str	r0, [r2, #16]
 800a6a2:	6910      	ldr	r0, [r2, #16]
 800a6a4:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800a6a8:	4330      	orrs	r0, r6
 800a6aa:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	da06      	bge.n	800a6be <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a6b0:	482d      	ldr	r0, [pc, #180]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a6b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800a6b4:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800a6b6:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800a6ba:	4332      	orrs	r2, r6
 800a6bc:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a6be:	021f      	lsls	r7, r3, #8
 800a6c0:	d507      	bpl.n	800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a6c2:	4a29      	ldr	r2, [pc, #164]	@ (800a768 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800a6c4:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800a6c8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a6ca:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800a6ce:	4303      	orrs	r3, r0
 800a6d0:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a6d2:	07ce      	lsls	r6, r1, #31
 800a6d4:	d506      	bpl.n	800a6e4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	f105 0008 	add.w	r0, r5, #8
 800a6dc:	f7ff fb0c 	bl	8009cf8 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a6e0:	4607      	mov	r7, r0
 800a6e2:	b900      	cbnz	r0, 800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800a6e4:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a6e6:	686b      	ldr	r3, [r5, #4]
 800a6e8:	079c      	lsls	r4, r3, #30
 800a6ea:	d506      	bpl.n	800a6fa <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	f105 0008 	add.w	r0, r5, #8
 800a6f2:	f7ff fb01 	bl	8009cf8 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	b900      	cbnz	r0, 800a6fc <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800a6fa:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a6fc:	686b      	ldr	r3, [r5, #4]
 800a6fe:	0758      	lsls	r0, r3, #29
 800a700:	d506      	bpl.n	800a710 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a702:	2102      	movs	r1, #2
 800a704:	f105 0008 	add.w	r0, r5, #8
 800a708:	f7ff faf6 	bl	8009cf8 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800a70c:	4604      	mov	r4, r0
 800a70e:	b900      	cbnz	r0, 800a712 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800a710:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a712:	686b      	ldr	r3, [r5, #4]
 800a714:	0719      	lsls	r1, r3, #28
 800a716:	d506      	bpl.n	800a726 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a718:	2100      	movs	r1, #0
 800a71a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a71e:	f7ff fb63 	bl	8009de8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a722:	4606      	mov	r6, r0
 800a724:	b900      	cbnz	r0, 800a728 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800a726:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a728:	686b      	ldr	r3, [r5, #4]
 800a72a:	06da      	lsls	r2, r3, #27
 800a72c:	d506      	bpl.n	800a73c <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a72e:	2101      	movs	r1, #1
 800a730:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a734:	f7ff fb58 	bl	8009de8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a738:	4604      	mov	r4, r0
 800a73a:	b900      	cbnz	r0, 800a73e <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800a73c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a73e:	686b      	ldr	r3, [r5, #4]
 800a740:	069b      	lsls	r3, r3, #26
 800a742:	f100 80ca 	bmi.w	800a8da <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800a746:	1e20      	subs	r0, r4, #0
 800a748:	bf18      	it	ne
 800a74a:	2001      	movne	r0, #1
}
 800a74c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a750:	2101      	movs	r1, #1
 800a752:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a756:	f7ff fb47 	bl	8009de8 <RCCEx_PLL3_Config>
 800a75a:	e6ac      	b.n	800a4b6 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a75c:	2601      	movs	r6, #1
 800a75e:	4634      	mov	r4, r6
 800a760:	e6b5      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a762:	4626      	mov	r6, r4
 800a764:	e6b3      	b.n	800a4ce <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800a766:	bf00      	nop
 800a768:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a76c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800a770:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800a774:	d003      	beq.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800a776:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a77a:	f47f aeba 	bne.w	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800a77e:	b9ac      	cbnz	r4, 800a7ac <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a780:	4a5b      	ldr	r2, [pc, #364]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a782:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800a786:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a788:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800a78c:	430b      	orrs	r3, r1
 800a78e:	6553      	str	r3, [r2, #84]	@ 0x54
 800a790:	e6b1      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a792:	2100      	movs	r1, #0
 800a794:	f105 0008 	add.w	r0, r5, #8
 800a798:	f7ff faae 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a79c:	4604      	mov	r4, r0
        break;
 800a79e:	e7ee      	b.n	800a77e <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7a0:	2102      	movs	r1, #2
 800a7a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7a6:	f7ff fb1f 	bl	8009de8 <RCCEx_PLL3_Config>
 800a7aa:	e7f7      	b.n	800a79c <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800a7ac:	4626      	mov	r6, r4
 800a7ae:	e6a2      	b.n	800a4f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a7b0:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800a7b4:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800a7b8:	d003      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800a7ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800a7be:	f47f aeac 	bne.w	800a51a <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800a7c2:	b9ac      	cbnz	r4, 800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a7c4:	4a4a      	ldr	r2, [pc, #296]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a7c6:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800a7ca:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a7cc:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800a7d0:	430b      	orrs	r3, r1
 800a7d2:	6593      	str	r3, [r2, #88]	@ 0x58
 800a7d4:	e6a3      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a7d6:	2100      	movs	r1, #0
 800a7d8:	f105 0008 	add.w	r0, r5, #8
 800a7dc:	f7ff fa8c 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e0:	4604      	mov	r4, r0
        break;
 800a7e2:	e7ee      	b.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a7e4:	2102      	movs	r1, #2
 800a7e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7ea:	f7ff fafd 	bl	8009de8 <RCCEx_PLL3_Config>
 800a7ee:	e7f7      	b.n	800a7e0 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800a7f0:	4626      	mov	r6, r4
 800a7f2:	e694      	b.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a7f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800a7f8:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a7fc:	d003      	beq.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800a7fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800a802:	f47f ae9e 	bne.w	800a542 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800a806:	b9ac      	cbnz	r4, 800a834 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a808:	4a39      	ldr	r2, [pc, #228]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a80a:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800a80e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a810:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800a814:	430b      	orrs	r3, r1
 800a816:	6593      	str	r3, [r2, #88]	@ 0x58
 800a818:	e695      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a81a:	2100      	movs	r1, #0
 800a81c:	f105 0008 	add.w	r0, r5, #8
 800a820:	f7ff fa6a 	bl	8009cf8 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a824:	4604      	mov	r4, r0
        break;
 800a826:	e7ee      	b.n	800a806 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a828:	2102      	movs	r1, #2
 800a82a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a82e:	f7ff fadb 	bl	8009de8 <RCCEx_PLL3_Config>
 800a832:	e7f7      	b.n	800a824 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800a834:	4626      	mov	r6, r4
 800a836:	e686      	b.n	800a546 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a838:	2102      	movs	r1, #2
 800a83a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a83e:	f7ff fad3 	bl	8009de8 <RCCEx_PLL3_Config>
 800a842:	e6c3      	b.n	800a5cc <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800a844:	2601      	movs	r6, #1
 800a846:	4634      	mov	r4, r6
 800a848:	e6cc      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800a84a:	4626      	mov	r6, r4
 800a84c:	e6ca      	b.n	800a5e4 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a84e:	4a28      	ldr	r2, [pc, #160]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a850:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a852:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a856:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a858:	b97c      	cbnz	r4, 800a87a <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a85a:	4a25      	ldr	r2, [pc, #148]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a85c:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800a860:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800a862:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a866:	430b      	orrs	r3, r1
 800a868:	6553      	str	r3, [r2, #84]	@ 0x54
 800a86a:	e6ce      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a86c:	2101      	movs	r1, #1
 800a86e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a872:	f7ff fab9 	bl	8009de8 <RCCEx_PLL3_Config>
 800a876:	4604      	mov	r4, r0
        break;
 800a878:	e7ee      	b.n	800a858 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800a87a:	4626      	mov	r6, r4
 800a87c:	e6c5      	b.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a87e:	4a1c      	ldr	r2, [pc, #112]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a880:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a882:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a886:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a888:	b974      	cbnz	r4, 800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a88a:	4a19      	ldr	r2, [pc, #100]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a88c:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800a88e:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a890:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a894:	430b      	orrs	r3, r1
 800a896:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800a898:	e6c4      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a89a:	2102      	movs	r1, #2
 800a89c:	f105 0008 	add.w	r0, r5, #8
 800a8a0:	f7ff fa2a 	bl	8009cf8 <RCCEx_PLL2_Config>
 800a8a4:	4604      	mov	r4, r0
        break;
 800a8a6:	e7ef      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800a8a8:	4626      	mov	r6, r4
 800a8aa:	e6bb      	b.n	800a624 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800a8ac:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800a8b0:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800a8b4:	f47f aed1 	bne.w	800a65a <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800a8b8:	2c00      	cmp	r4, #0
 800a8ba:	f47f aecf 	bne.w	800a65c <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a8be:	4c0c      	ldr	r4, [pc, #48]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a8c0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8c2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800a8c6:	4302      	orrs	r2, r0
 800a8c8:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800a8ca:	4634      	mov	r4, r6
 800a8cc:	e6c6      	b.n	800a65c <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ce:	4f08      	ldr	r7, [pc, #32]	@ (800a8f0 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800a8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8d2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800a8d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800a8d8:	e7ee      	b.n	800a8b8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a8da:	2102      	movs	r1, #2
 800a8dc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a8e0:	f7ff fa82 	bl	8009de8 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f43f af2e 	beq.w	800a746 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800a8ea:	2001      	movs	r0, #1
 800a8ec:	e72e      	b.n	800a74c <HAL_RCCEx_PeriphCLKConfig+0x874>
 800a8ee:	bf00      	nop
 800a8f0:	58024400 	.word	0x58024400

0800a8f4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	b1f0      	cbz	r0, 800a93a <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a8fc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800a900:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a904:	b91b      	cbnz	r3, 800a90e <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a906:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a90a:	f7f6 fd53 	bl	80013b4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a90e:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a910:	1d21      	adds	r1, r4, #4
 800a912:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a914:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a918:	f000 fa15 	bl	800ad46 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a91c:	6862      	ldr	r2, [r4, #4]
 800a91e:	4629      	mov	r1, r5
 800a920:	6820      	ldr	r0, [r4, #0]
 800a922:	f000 fa48 	bl	800adb6 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a926:	4a06      	ldr	r2, [pc, #24]	@ (800a940 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800a928:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800a92a:	6813      	ldr	r3, [r2, #0]
 800a92c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a930:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a932:	2301      	movs	r3, #1
 800a934:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800a938:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a93a:	2001      	movs	r0, #1
 800a93c:	e7fc      	b.n	800a938 <HAL_SDRAM_Init+0x44>
 800a93e:	bf00      	nop
 800a940:	52004000 	.word	0x52004000

0800a944 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800a944:	b510      	push	{r4, lr}
 800a946:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800a948:	f7f6 fdce 	bl	80014e8 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800a94c:	e9d4 0100 	ldrd	r0, r1, [r4]
 800a950:	f000 fa67 	bl	800ae22 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800a954:	2000      	movs	r0, #0
 800a956:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800a95a:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800a95e:	bd10      	pop	{r4, pc}

0800a960 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800a960:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a962:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800a966:	4605      	mov	r5, r0
 800a968:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800a96a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800a96c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800a96e:	d010      	beq.n	800a992 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800a970:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800a974:	2c01      	cmp	r4, #1
 800a976:	d110      	bne.n	800a99a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a978:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a97a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a97c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a980:	f000 fa5e 	bl	800ae40 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a984:	6833      	ldr	r3, [r6, #0]
 800a986:	2b02      	cmp	r3, #2
 800a988:	d104      	bne.n	800a994 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a98a:	2305      	movs	r3, #5
 800a98c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a990:	2000      	movs	r0, #0
}
 800a992:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800a994:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800a998:	e7fa      	b.n	800a990 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800a99a:	2001      	movs	r0, #1
 800a99c:	e7f9      	b.n	800a992 <HAL_SDRAM_SendCommand+0x32>

0800a99e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a99e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9a0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800a9a4:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	b2d8      	uxtb	r0, r3
 800a9aa:	d00d      	beq.n	800a9c8 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800a9ac:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800a9b0:	2b01      	cmp	r3, #1
 800a9b2:	b2dd      	uxtb	r5, r3
 800a9b4:	d109      	bne.n	800a9ca <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9b6:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9b8:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a9ba:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800a9be:	f000 fa51 	bl	800ae64 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800a9c2:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a9c4:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800a9c8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a9ca:	2001      	movs	r0, #1
 800a9cc:	e7fc      	b.n	800a9c8 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800a9ce <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800a9ce:	4770      	bx	lr

0800a9d0 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9d0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d12f      	bne.n	800aa38 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9d8:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9da:	4a18      	ldr	r2, [pc, #96]	@ (800aa3c <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800a9dc:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e0:	6803      	ldr	r3, [r0, #0]
 800a9e2:	4293      	cmp	r3, r2
 800a9e4:	d01a      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800a9e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a9ea:	d017      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800a9ec:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800a9f0:	4293      	cmp	r3, r2
 800a9f2:	d013      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800a9f4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800a9f8:	4293      	cmp	r3, r2
 800a9fa:	d00f      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800a9fc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00b      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800aa04:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800aa08:	4293      	cmp	r3, r2
 800aa0a:	d007      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800aa0c:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d003      	beq.n	800aa1c <HAL_TIM_Base_Start+0x4c>
 800aa14:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d107      	bne.n	800aa2c <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa1c:	6899      	ldr	r1, [r3, #8]
 800aa1e:	4a08      	ldr	r2, [pc, #32]	@ (800aa40 <HAL_TIM_Base_Start+0x70>)
 800aa20:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa22:	2a06      	cmp	r2, #6
 800aa24:	d006      	beq.n	800aa34 <HAL_TIM_Base_Start+0x64>
 800aa26:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800aa2a:	d003      	beq.n	800aa34 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800aa2c:	681a      	ldr	r2, [r3, #0]
 800aa2e:	f042 0201 	orr.w	r2, r2, #1
 800aa32:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800aa34:	2000      	movs	r0, #0
 800aa36:	4770      	bx	lr
    return HAL_ERROR;
 800aa38:	2001      	movs	r0, #1
}
 800aa3a:	4770      	bx	lr
 800aa3c:	40010000 	.word	0x40010000
 800aa40:	00010007 	.word	0x00010007

0800aa44 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa44:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d133      	bne.n	800aab4 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	68da      	ldr	r2, [r3, #12]
 800aa56:	f042 0201 	orr.w	r2, r2, #1
 800aa5a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa5c:	4a16      	ldr	r2, [pc, #88]	@ (800aab8 <HAL_TIM_Base_Start_IT+0x74>)
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d01a      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800aa66:	d017      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa68:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d013      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d00f      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800aa7c:	4293      	cmp	r3, r2
 800aa7e:	d00b      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa80:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d007      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa88:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800aa8c:	4293      	cmp	r3, r2
 800aa8e:	d003      	beq.n	800aa98 <HAL_TIM_Base_Start_IT+0x54>
 800aa90:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d107      	bne.n	800aaa8 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa98:	6899      	ldr	r1, [r3, #8]
 800aa9a:	4a08      	ldr	r2, [pc, #32]	@ (800aabc <HAL_TIM_Base_Start_IT+0x78>)
 800aa9c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa9e:	2a06      	cmp	r2, #6
 800aaa0:	d006      	beq.n	800aab0 <HAL_TIM_Base_Start_IT+0x6c>
 800aaa2:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800aaa6:	d003      	beq.n	800aab0 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800aaa8:	681a      	ldr	r2, [r3, #0]
 800aaaa:	f042 0201 	orr.w	r2, r2, #1
 800aaae:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800aab0:	2000      	movs	r0, #0
 800aab2:	4770      	bx	lr
    return HAL_ERROR;
 800aab4:	2001      	movs	r0, #1
}
 800aab6:	4770      	bx	lr
 800aab8:	40010000 	.word	0x40010000
 800aabc:	00010007 	.word	0x00010007

0800aac0 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800aac0:	4770      	bx	lr

0800aac2 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800aac2:	4770      	bx	lr

0800aac4 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800aac4:	4770      	bx	lr

0800aac6 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800aac6:	4770      	bx	lr

0800aac8 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800aac8:	6803      	ldr	r3, [r0, #0]
{
 800aaca:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800aacc:	68dd      	ldr	r5, [r3, #12]
{
 800aace:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800aad0:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800aad2:	07b2      	lsls	r2, r6, #30
 800aad4:	d50d      	bpl.n	800aaf2 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800aad6:	07a9      	lsls	r1, r5, #30
 800aad8:	d50b      	bpl.n	800aaf2 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800aada:	f06f 0202 	mvn.w	r2, #2
 800aade:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aae0:	2201      	movs	r2, #1
 800aae2:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aae4:	699b      	ldr	r3, [r3, #24]
 800aae6:	079a      	lsls	r2, r3, #30
 800aae8:	d075      	beq.n	800abd6 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800aaea:	f7ff ffea 	bl	800aac2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aaee:	2300      	movs	r3, #0
 800aaf0:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800aaf2:	0773      	lsls	r3, r6, #29
 800aaf4:	d510      	bpl.n	800ab18 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800aaf6:	0768      	lsls	r0, r5, #29
 800aaf8:	d50e      	bpl.n	800ab18 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800aafa:	6823      	ldr	r3, [r4, #0]
 800aafc:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800ab00:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ab02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab04:	2202      	movs	r2, #2
 800ab06:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab08:	699b      	ldr	r3, [r3, #24]
 800ab0a:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ab0e:	d068      	beq.n	800abe2 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab10:	f7ff ffd7 	bl	800aac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab14:	2300      	movs	r3, #0
 800ab16:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ab18:	0731      	lsls	r1, r6, #28
 800ab1a:	d50f      	bpl.n	800ab3c <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ab1c:	072a      	lsls	r2, r5, #28
 800ab1e:	d50d      	bpl.n	800ab3c <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab20:	6823      	ldr	r3, [r4, #0]
 800ab22:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800ab26:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ab28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab2a:	2204      	movs	r2, #4
 800ab2c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab2e:	69db      	ldr	r3, [r3, #28]
 800ab30:	079b      	lsls	r3, r3, #30
 800ab32:	d05c      	beq.n	800abee <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab34:	f7ff ffc5 	bl	800aac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab38:	2300      	movs	r3, #0
 800ab3a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ab3c:	06f1      	lsls	r1, r6, #27
 800ab3e:	d510      	bpl.n	800ab62 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ab40:	06ea      	lsls	r2, r5, #27
 800ab42:	d50e      	bpl.n	800ab62 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ab4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ab4e:	2208      	movs	r2, #8
 800ab50:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ab52:	69db      	ldr	r3, [r3, #28]
 800ab54:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800ab58:	d04f      	beq.n	800abfa <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800ab5a:	f7ff ffb2 	bl	800aac2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5e:	2300      	movs	r3, #0
 800ab60:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ab62:	07f3      	lsls	r3, r6, #31
 800ab64:	d508      	bpl.n	800ab78 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ab66:	07e8      	lsls	r0, r5, #31
 800ab68:	d506      	bpl.n	800ab78 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab6a:	6823      	ldr	r3, [r4, #0]
 800ab6c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab70:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ab72:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ab74:	f7f6 f9e4 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ab78:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800ab7c:	d008      	beq.n	800ab90 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab7e:	0629      	lsls	r1, r5, #24
 800ab80:	d506      	bpl.n	800ab90 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab82:	6823      	ldr	r3, [r4, #0]
 800ab84:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800ab88:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ab8a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ab8c:	f000 f8d9 	bl	800ad42 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ab90:	05f2      	lsls	r2, r6, #23
 800ab92:	d508      	bpl.n	800aba6 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ab94:	062b      	lsls	r3, r5, #24
 800ab96:	d506      	bpl.n	800aba6 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ab98:	6823      	ldr	r3, [r4, #0]
 800ab9a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ab9e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800aba0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800aba2:	f000 f8cf 	bl	800ad44 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800aba6:	0670      	lsls	r0, r6, #25
 800aba8:	d508      	bpl.n	800abbc <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800abaa:	0669      	lsls	r1, r5, #25
 800abac:	d506      	bpl.n	800abbc <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800abae:	6823      	ldr	r3, [r4, #0]
 800abb0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800abb4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800abb6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800abb8:	f7ff ff85 	bl	800aac6 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800abbc:	06b2      	lsls	r2, r6, #26
 800abbe:	d522      	bpl.n	800ac06 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800abc0:	06ab      	lsls	r3, r5, #26
 800abc2:	d520      	bpl.n	800ac06 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abc4:	6823      	ldr	r3, [r4, #0]
 800abc6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800abca:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800abcc:	611a      	str	r2, [r3, #16]
}
 800abce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800abd2:	f000 b8b5 	b.w	800ad40 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abd6:	f7ff ff73 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abda:	4620      	mov	r0, r4
 800abdc:	f7ff ff72 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
 800abe0:	e785      	b.n	800aaee <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abe2:	f7ff ff6d 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abe6:	4620      	mov	r0, r4
 800abe8:	f7ff ff6c 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
 800abec:	e792      	b.n	800ab14 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abee:	f7ff ff67 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abf2:	4620      	mov	r0, r4
 800abf4:	f7ff ff66 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
 800abf8:	e79e      	b.n	800ab38 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfa:	f7ff ff61 	bl	800aac0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abfe:	4620      	mov	r0, r4
 800ac00:	f7ff ff60 	bl	800aac4 <HAL_TIM_PWM_PulseFinishedCallback>
 800ac04:	e7ab      	b.n	800ab5e <HAL_TIM_IRQHandler+0x96>
}
 800ac06:	bd70      	pop	{r4, r5, r6, pc}

0800ac08 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac08:	4a33      	ldr	r2, [pc, #204]	@ (800acd8 <TIM_Base_SetConfig+0xd0>)
  tmpcr1 = TIMx->CR1;
 800ac0a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac0c:	4290      	cmp	r0, r2
 800ac0e:	d012      	beq.n	800ac36 <TIM_Base_SetConfig+0x2e>
 800ac10:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ac14:	d00f      	beq.n	800ac36 <TIM_Base_SetConfig+0x2e>
 800ac16:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac1a:	4290      	cmp	r0, r2
 800ac1c:	d00b      	beq.n	800ac36 <TIM_Base_SetConfig+0x2e>
 800ac1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac22:	4290      	cmp	r0, r2
 800ac24:	d007      	beq.n	800ac36 <TIM_Base_SetConfig+0x2e>
 800ac26:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac2a:	4290      	cmp	r0, r2
 800ac2c:	d003      	beq.n	800ac36 <TIM_Base_SetConfig+0x2e>
 800ac2e:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac32:	4290      	cmp	r0, r2
 800ac34:	d119      	bne.n	800ac6a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ac36:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ac3c:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac3e:	4a26      	ldr	r2, [pc, #152]	@ (800acd8 <TIM_Base_SetConfig+0xd0>)
 800ac40:	4290      	cmp	r0, r2
 800ac42:	d01d      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac44:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ac48:	d01a      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac4a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ac4e:	4290      	cmp	r0, r2
 800ac50:	d016      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac52:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac56:	4290      	cmp	r0, r2
 800ac58:	d012      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac5a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac5e:	4290      	cmp	r0, r2
 800ac60:	d00e      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac62:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ac66:	4290      	cmp	r0, r2
 800ac68:	d00a      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac6a:	4a1c      	ldr	r2, [pc, #112]	@ (800acdc <TIM_Base_SetConfig+0xd4>)
 800ac6c:	4290      	cmp	r0, r2
 800ac6e:	d007      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac74:	4290      	cmp	r0, r2
 800ac76:	d003      	beq.n	800ac80 <TIM_Base_SetConfig+0x78>
 800ac78:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ac7c:	4290      	cmp	r0, r2
 800ac7e:	d103      	bne.n	800ac88 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac84:	68ca      	ldr	r2, [r1, #12]
 800ac86:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac88:	694a      	ldr	r2, [r1, #20]
 800ac8a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac8e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800ac90:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac92:	688b      	ldr	r3, [r1, #8]
 800ac94:	62c3      	str	r3, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac96:	680b      	ldr	r3, [r1, #0]
 800ac98:	6283      	str	r3, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac9a:	4b0f      	ldr	r3, [pc, #60]	@ (800acd8 <TIM_Base_SetConfig+0xd0>)
 800ac9c:	4298      	cmp	r0, r3
 800ac9e:	d00f      	beq.n	800acc0 <TIM_Base_SetConfig+0xb8>
 800aca0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800aca4:	4298      	cmp	r0, r3
 800aca6:	d00b      	beq.n	800acc0 <TIM_Base_SetConfig+0xb8>
 800aca8:	f503 5370 	add.w	r3, r3, #15360	@ 0x3c00
 800acac:	4298      	cmp	r0, r3
 800acae:	d007      	beq.n	800acc0 <TIM_Base_SetConfig+0xb8>
 800acb0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acb4:	4298      	cmp	r0, r3
 800acb6:	d003      	beq.n	800acc0 <TIM_Base_SetConfig+0xb8>
 800acb8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800acbc:	4298      	cmp	r0, r3
 800acbe:	d101      	bne.n	800acc4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acc0:	690b      	ldr	r3, [r1, #16]
 800acc2:	6303      	str	r3, [r0, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc4:	2301      	movs	r3, #1
 800acc6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800acc8:	6903      	ldr	r3, [r0, #16]
 800acca:	07db      	lsls	r3, r3, #31
 800accc:	d503      	bpl.n	800acd6 <TIM_Base_SetConfig+0xce>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800acce:	6903      	ldr	r3, [r0, #16]
 800acd0:	f023 0301 	bic.w	r3, r3, #1
 800acd4:	6103      	str	r3, [r0, #16]
  }
}
 800acd6:	4770      	bx	lr
 800acd8:	40010000 	.word	0x40010000
 800acdc:	40014000 	.word	0x40014000

0800ace0 <HAL_TIM_Base_Init>:
{
 800ace0:	b510      	push	{r4, lr}
  if (htim == NULL)
 800ace2:	4604      	mov	r4, r0
 800ace4:	b350      	cbz	r0, 800ad3c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800ace6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800acea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800acee:	b91b      	cbnz	r3, 800acf8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800acf0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800acf4:	f7ff fe6b 	bl	800a9ce <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800acf8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800acfa:	6820      	ldr	r0, [r4, #0]
 800acfc:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800acfe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ad02:	f7ff ff81 	bl	800ac08 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad06:	2301      	movs	r3, #1
  return HAL_OK;
 800ad08:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ad0a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad0e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800ad12:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800ad16:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800ad1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800ad1e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ad22:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ad26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ad2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ad2e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800ad32:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800ad36:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800ad3a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800ad3c:	2001      	movs	r0, #1
 800ad3e:	e7fc      	b.n	800ad3a <HAL_TIM_Base_Init+0x5a>

0800ad40 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800ad40:	4770      	bx	lr

0800ad42 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800ad42:	4770      	bx	lr

0800ad44 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800ad44:	4770      	bx	lr

0800ad46 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800ad46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad4a:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800ad4e:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800ad52:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800ad56:	ea43 0308 	orr.w	r3, r3, r8
 800ad5a:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800ad5e:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800ad62:	6809      	ldr	r1, [r1, #0]
 800ad64:	b991      	cbnz	r1, 800ad8c <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad66:	ea43 030e 	orr.w	r3, r3, lr
 800ad6a:	6801      	ldr	r1, [r0, #0]
 800ad6c:	4313      	orrs	r3, r2
 800ad6e:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800ad72:	ea43 030c 	orr.w	r3, r3, ip
 800ad76:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800ad7a:	433b      	orrs	r3, r7
 800ad7c:	4333      	orrs	r3, r6
 800ad7e:	432b      	orrs	r3, r5
 800ad80:	4323      	orrs	r3, r4
 800ad82:	430b      	orrs	r3, r1
 800ad84:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800ad86:	2000      	movs	r0, #0
 800ad88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800ad8c:	6801      	ldr	r1, [r0, #0]
 800ad8e:	ea43 030e 	orr.w	r3, r3, lr
 800ad92:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800ad96:	430b      	orrs	r3, r1
 800ad98:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800ad9a:	ea42 030c 	orr.w	r3, r2, ip
 800ad9e:	6841      	ldr	r1, [r0, #4]
 800ada0:	433b      	orrs	r3, r7
 800ada2:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800ada6:	4333      	orrs	r3, r6
 800ada8:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800adac:	432b      	orrs	r3, r5
 800adae:	4323      	orrs	r3, r4
 800adb0:	4313      	orrs	r3, r2
 800adb2:	6043      	str	r3, [r0, #4]
 800adb4:	e7e7      	b.n	800ad86 <FMC_SDRAM_Init+0x40>

0800adb6 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800adb6:	68cb      	ldr	r3, [r1, #12]
 800adb8:	f103 3cff 	add.w	ip, r3, #4294967295
 800adbc:	694b      	ldr	r3, [r1, #20]
{
 800adbe:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800adc0:	3b01      	subs	r3, #1
 800adc2:	680f      	ldr	r7, [r1, #0]
 800adc4:	684c      	ldr	r4, [r1, #4]
 800adc6:	688e      	ldr	r6, [r1, #8]
 800adc8:	051b      	lsls	r3, r3, #20
 800adca:	690d      	ldr	r5, [r1, #16]
 800adcc:	3c01      	subs	r4, #1
 800adce:	6989      	ldr	r1, [r1, #24]
 800add0:	3e01      	subs	r6, #1
 800add2:	3d01      	subs	r5, #1
 800add4:	3f01      	subs	r7, #1
 800add6:	3901      	subs	r1, #1
 800add8:	0124      	lsls	r4, r4, #4
 800adda:	0236      	lsls	r6, r6, #8
 800addc:	042d      	lsls	r5, r5, #16
 800adde:	0609      	lsls	r1, r1, #24
 800ade0:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800ade4:	b95a      	cbnz	r2, 800adfe <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ade6:	433b      	orrs	r3, r7
 800ade8:	6882      	ldr	r2, [r0, #8]
 800adea:	4323      	orrs	r3, r4
 800adec:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800adf0:	4333      	orrs	r3, r6
 800adf2:	432b      	orrs	r3, r5
 800adf4:	430b      	orrs	r3, r1
 800adf6:	4313      	orrs	r3, r2
 800adf8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800adfa:	2000      	movs	r0, #0
 800adfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800adfe:	6882      	ldr	r2, [r0, #8]
 800ae00:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800ae04:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800ae08:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ae0a:	ea44 0306 	orr.w	r3, r4, r6
 800ae0e:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800ae10:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800ae12:	68c2      	ldr	r2, [r0, #12]
 800ae14:	432b      	orrs	r3, r5
 800ae16:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800ae1a:	430b      	orrs	r3, r1
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	60c3      	str	r3, [r0, #12]
 800ae20:	e7eb      	b.n	800adfa <FMC_SDRAM_Timing_Init+0x44>

0800ae22 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800ae22:	4603      	mov	r3, r0
 800ae24:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800ae28:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800ae2c:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800ae30:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800ae32:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800ae36:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800ae38:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800ae3a:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800ae3c:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800ae3e:	4770      	bx	lr

0800ae40 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ae40:	6902      	ldr	r2, [r0, #16]
{
 800ae42:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800ae44:	e9d1 3400 	ldrd	r3, r4, [r1]
 800ae48:	0d92      	lsrs	r2, r2, #22
 800ae4a:	4323      	orrs	r3, r4
 800ae4c:	68cc      	ldr	r4, [r1, #12]
 800ae4e:	0592      	lsls	r2, r2, #22
 800ae50:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800ae54:	4313      	orrs	r3, r2
 800ae56:	688a      	ldr	r2, [r1, #8]
 800ae58:	3a01      	subs	r2, #1
 800ae5a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800ae5e:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800ae60:	2000      	movs	r0, #0
 800ae62:	bd10      	pop	{r4, pc}

0800ae64 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ae64:	6943      	ldr	r3, [r0, #20]
 800ae66:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800ae6a:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800ae6e:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800ae72:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800ae74:	2000      	movs	r0, #0
 800ae76:	4770      	bx	lr

0800ae78 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800ae78:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800ae7a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ae7e:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800ae80:	f001 fee2 	bl	800cc48 <xTaskGetSchedulerState>
 800ae84:	2801      	cmp	r0, #1
 800ae86:	d003      	beq.n	800ae90 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800ae88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800ae8c:	f000 bc4a 	b.w	800b724 <xPortSysTickHandler>
}
 800ae90:	bd08      	pop	{r3, pc}
	...

0800ae94 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae94:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae98:	b92b      	cbnz	r3, 800aea6 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae9a:	4b06      	ldr	r3, [pc, #24]	@ (800aeb4 <osKernelInitialize+0x20>)
 800ae9c:	6818      	ldr	r0, [r3, #0]
 800ae9e:	b928      	cbnz	r0, 800aeac <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800aea0:	2201      	movs	r2, #1
 800aea2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800aea4:	4770      	bx	lr
    stat = osErrorISR;
 800aea6:	f06f 0005 	mvn.w	r0, #5
 800aeaa:	4770      	bx	lr
    } else {
      stat = osError;
 800aeac:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop
 800aeb4:	2400c534 	.word	0x2400c534

0800aeb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800aebe:	b95c      	cbnz	r4, 800aed8 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800aec0:	4b08      	ldr	r3, [pc, #32]	@ (800aee4 <osKernelStart+0x2c>)
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	2a01      	cmp	r2, #1
 800aec6:	d10a      	bne.n	800aede <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800aec8:	4a07      	ldr	r2, [pc, #28]	@ (800aee8 <osKernelStart+0x30>)
 800aeca:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800aecc:	2202      	movs	r2, #2
 800aece:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800aed0:	f001 fd5a 	bl	800c988 <vTaskStartScheduler>
      stat = osOK;
 800aed4:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800aed6:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800aed8:	f06f 0005 	mvn.w	r0, #5
 800aedc:	e7fb      	b.n	800aed6 <osKernelStart+0x1e>
      stat = osError;
 800aede:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800aee2:	e7f8      	b.n	800aed6 <osKernelStart+0x1e>
 800aee4:	2400c534 	.word	0x2400c534
 800aee8:	e000ed00 	.word	0xe000ed00

0800aeec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aeec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeee:	4614      	mov	r4, r2
 800aef0:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800aef2:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800aef4:	460b      	mov	r3, r1
  hTask = NULL;
 800aef6:	9205      	str	r2, [sp, #20]
 800aef8:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800aefc:	b9ca      	cbnz	r2, 800af32 <osThreadNew+0x46>
 800aefe:	b1c0      	cbz	r0, 800af32 <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800af00:	b36c      	cbz	r4, 800af5e <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800af02:	69a5      	ldr	r5, [r4, #24]
 800af04:	2d00      	cmp	r5, #0
 800af06:	bf08      	it	eq
 800af08:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800af0a:	1e69      	subs	r1, r5, #1
 800af0c:	46ac      	mov	ip, r5
 800af0e:	2937      	cmp	r1, #55	@ 0x37
 800af10:	d82a      	bhi.n	800af68 <osThreadNew+0x7c>
 800af12:	6861      	ldr	r1, [r4, #4]
 800af14:	07c9      	lsls	r1, r1, #31
 800af16:	d427      	bmi.n	800af68 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800af18:	6966      	ldr	r6, [r4, #20]
 800af1a:	b16e      	cbz	r6, 800af38 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800af1c:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800af1e:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af20:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800af24:	b157      	cbz	r7, 800af3c <osThreadNew+0x50>
 800af26:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 800af2a:	d902      	bls.n	800af32 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af2c:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af2e:	b104      	cbz	r4, 800af32 <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af30:	b9e6      	cbnz	r6, 800af6c <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af32:	9805      	ldr	r0, [sp, #20]
}
 800af34:	b007      	add	sp, #28
 800af36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800af38:	2280      	movs	r2, #128	@ 0x80
 800af3a:	e7f0      	b.n	800af1e <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af3c:	f1be 0f00 	cmp.w	lr, #0
 800af40:	d1f7      	bne.n	800af32 <osThreadNew+0x46>
      if (mem == 0) {
 800af42:	6924      	ldr	r4, [r4, #16]
 800af44:	2c00      	cmp	r4, #0
 800af46:	d1f4      	bne.n	800af32 <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af48:	ac05      	add	r4, sp, #20
 800af4a:	b292      	uxth	r2, r2
 800af4c:	e9cd c400 	strd	ip, r4, [sp]
 800af50:	f001 fbb7 	bl	800c6c2 <xTaskCreate>
 800af54:	2801      	cmp	r0, #1
            hTask = NULL;
 800af56:	bf1c      	itt	ne
 800af58:	2300      	movne	r3, #0
 800af5a:	9305      	strne	r3, [sp, #20]
 800af5c:	e7e9      	b.n	800af32 <osThreadNew+0x46>
    name = NULL;
 800af5e:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800af60:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800af64:	2280      	movs	r2, #128	@ 0x80
 800af66:	e7ef      	b.n	800af48 <osThreadNew+0x5c>
        return (NULL);
 800af68:	4610      	mov	r0, r2
 800af6a:	e7e3      	b.n	800af34 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af6c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800af70:	9500      	str	r5, [sp, #0]
 800af72:	f001 fb6e 	bl	800c652 <xTaskCreateStatic>
 800af76:	9005      	str	r0, [sp, #20]
 800af78:	e7db      	b.n	800af32 <osThreadNew+0x46>

0800af7a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800af7a:	b570      	push	{r4, r5, r6, lr}
 800af7c:	4605      	mov	r5, r0
 800af7e:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800af82:	b116      	cbz	r6, 800af8a <osMutexNew+0x10>
  hMutex = NULL;
 800af84:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800af86:	4620      	mov	r0, r4
 800af88:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800af8a:	b110      	cbz	r0, 800af92 <osMutexNew+0x18>
      type = attr->attr_bits;
 800af8c:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800af8e:	0733      	lsls	r3, r6, #28
 800af90:	d4f8      	bmi.n	800af84 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800af92:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800af96:	b17d      	cbz	r5, 800afb8 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800af98:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800af9c:	b151      	cbz	r1, 800afb4 <osMutexNew+0x3a>
 800af9e:	2b4f      	cmp	r3, #79	@ 0x4f
 800afa0:	d9f0      	bls.n	800af84 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800afa2:	b1de      	cbz	r6, 800afdc <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800afa4:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800afa6:	f000 fec6 	bl	800bd36 <xQueueCreateMutexStatic>
 800afaa:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800afac:	2800      	cmp	r0, #0
 800afae:	d0e9      	beq.n	800af84 <osMutexNew+0xa>
          name = attr->name;
 800afb0:	682d      	ldr	r5, [r5, #0]
 800afb2:	e00a      	b.n	800afca <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1e5      	bne.n	800af84 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800afb8:	b196      	cbz	r6, 800afe0 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800afba:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800afbc:	f000 feef 	bl	800bd9e <xQueueCreateMutex>
 800afc0:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800afc2:	2800      	cmp	r0, #0
 800afc4:	d0de      	beq.n	800af84 <osMutexNew+0xa>
        if (attr != NULL) {
 800afc6:	2d00      	cmp	r5, #0
 800afc8:	d1f2      	bne.n	800afb0 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800afca:	4629      	mov	r1, r5
 800afcc:	4620      	mov	r0, r4
 800afce:	f001 f97b 	bl	800c2c8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d0d7      	beq.n	800af86 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800afd6:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800afda:	e7d4      	b.n	800af86 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800afdc:	2001      	movs	r0, #1
 800afde:	e7e2      	b.n	800afa6 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800afe0:	2001      	movs	r0, #1
 800afe2:	e7eb      	b.n	800afbc <osMutexNew+0x42>

0800afe4 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4603      	mov	r3, r0
 800afe8:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800afea:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800afee:	f003 0201 	and.w	r2, r3, #1
 800aff2:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800aff6:	b995      	cbnz	r5, 800b01e <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800aff8:	2b01      	cmp	r3, #1
 800affa:	d913      	bls.n	800b024 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800affc:	b162      	cbz	r2, 800b018 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800affe:	f001 f8f4 	bl	800c1ea <xQueueTakeMutexRecursive>
 800b002:	2801      	cmp	r0, #1
 800b004:	d101      	bne.n	800b00a <osMutexAcquire+0x26>
  stat = osOK;
 800b006:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800b008:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800b00a:	2c00      	cmp	r4, #0
 800b00c:	bf14      	ite	ne
 800b00e:	f06f 0001 	mvnne.w	r0, #1
 800b012:	f06f 0002 	mvneq.w	r0, #2
 800b016:	e7f7      	b.n	800b008 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b018:	f001 f82a 	bl	800c070 <xQueueSemaphoreTake>
 800b01c:	e7f1      	b.n	800b002 <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800b01e:	f06f 0005 	mvn.w	r0, #5
 800b022:	e7f1      	b.n	800b008 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800b024:	f06f 0003 	mvn.w	r0, #3
 800b028:	e7ee      	b.n	800b008 <osMutexAcquire+0x24>

0800b02a <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b02a:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b02c:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b030:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800b032:	f002 0301 	and.w	r3, r2, #1
 800b036:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800b03a:	b979      	cbnz	r1, 800b05c <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800b03c:	2a01      	cmp	r2, #1
 800b03e:	d910      	bls.n	800b062 <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800b040:	b13b      	cbz	r3, 800b052 <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b042:	f000 fe8d 	bl	800bd60 <xQueueGiveMutexRecursive>
 800b046:	2801      	cmp	r0, #1
  stat = osOK;
 800b048:	bf0c      	ite	eq
 800b04a:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800b04c:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b050:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b052:	461a      	mov	r2, r3
 800b054:	4619      	mov	r1, r3
 800b056:	f000 fdbc 	bl	800bbd2 <xQueueGenericSend>
 800b05a:	e7f4      	b.n	800b046 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800b05c:	f06f 0005 	mvn.w	r0, #5
 800b060:	e7f6      	b.n	800b050 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800b062:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b066:	e7f3      	b.n	800b050 <osMutexRelease+0x26>

0800b068 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b06a:	4604      	mov	r4, r0
 800b06c:	460e      	mov	r6, r1
 800b06e:	4615      	mov	r5, r2
 800b070:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b074:	b942      	cbnz	r2, 800b088 <osSemaphoreNew+0x20>
 800b076:	b138      	cbz	r0, 800b088 <osSemaphoreNew+0x20>
 800b078:	4288      	cmp	r0, r1
 800b07a:	d305      	bcc.n	800b088 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800b07c:	b155      	cbz	r5, 800b094 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b07e:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800b082:	b12b      	cbz	r3, 800b090 <osSemaphoreNew+0x28>
 800b084:	2f4f      	cmp	r7, #79	@ 0x4f
 800b086:	d822      	bhi.n	800b0ce <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800b088:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800b08a:	4620      	mov	r0, r4
 800b08c:	b003      	add	sp, #12
 800b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b090:	2f00      	cmp	r7, #0
 800b092:	d1f9      	bne.n	800b088 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800b094:	2c01      	cmp	r4, #1
 800b096:	d00c      	beq.n	800b0b2 <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b098:	4620      	mov	r0, r4
 800b09a:	4631      	mov	r1, r6
 800b09c:	f000 fd7b 	bl	800bb96 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800b0a0:	4604      	mov	r4, r0
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d0f0      	beq.n	800b088 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800b0a6:	b985      	cbnz	r5, 800b0ca <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800b0a8:	4629      	mov	r1, r5
 800b0aa:	4620      	mov	r0, r4
 800b0ac:	f001 f90c 	bl	800c2c8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800b0b0:	e7eb      	b.n	800b08a <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800b0b2:	2203      	movs	r2, #3
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	2001      	movs	r0, #1
 800b0b8:	f000 fd24 	bl	800bb04 <xQueueGenericCreate>
 800b0bc:	e00e      	b.n	800b0dc <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f000 fd47 	bl	800bb52 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d0de      	beq.n	800b088 <osSemaphoreNew+0x20>
          name = attr->name;
 800b0ca:	682d      	ldr	r5, [r5, #0]
 800b0cc:	e7ec      	b.n	800b0a8 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800b0ce:	2801      	cmp	r0, #1
 800b0d0:	d1f5      	bne.n	800b0be <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b0d2:	2103      	movs	r1, #3
 800b0d4:	9100      	str	r1, [sp, #0]
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	f000 fcc6 	bl	800ba68 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800b0dc:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b0de:	2800      	cmp	r0, #0
 800b0e0:	d0d2      	beq.n	800b088 <osSemaphoreNew+0x20>
 800b0e2:	2e00      	cmp	r6, #0
 800b0e4:	d0df      	beq.n	800b0a6 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4619      	mov	r1, r3
 800b0ec:	f000 fd71 	bl	800bbd2 <xQueueGenericSend>
 800b0f0:	2801      	cmp	r0, #1
 800b0f2:	d0d8      	beq.n	800b0a6 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800b0f4:	4620      	mov	r0, r4
 800b0f6:	f001 f911 	bl	800c31c <vQueueDelete>
      if (hSemaphore != NULL) {
 800b0fa:	e7c5      	b.n	800b088 <osSemaphoreNew+0x20>

0800b0fc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b0fc:	b513      	push	{r0, r1, r4, lr}
 800b0fe:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b100:	b328      	cbz	r0, 800b14e <osSemaphoreAcquire+0x52>
 800b102:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b106:	b1cb      	cbz	r3, 800b13c <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800b108:	bb09      	cbnz	r1, 800b14e <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b10a:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b10c:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b10e:	f001 f88d 	bl	800c22c <xQueueReceiveFromISR>
 800b112:	2801      	cmp	r0, #1
 800b114:	d003      	beq.n	800b11e <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800b116:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b11a:	b002      	add	sp, #8
 800b11c:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800b11e:	9b01      	ldr	r3, [sp, #4]
 800b120:	b90b      	cbnz	r3, 800b126 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800b122:	2000      	movs	r0, #0
 800b124:	e7f9      	b.n	800b11a <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800b126:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b12a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b132:	f3bf 8f4f 	dsb	sy
 800b136:	f3bf 8f6f 	isb	sy
 800b13a:	e7f2      	b.n	800b122 <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b13c:	f000 ff98 	bl	800c070 <xQueueSemaphoreTake>
 800b140:	2801      	cmp	r0, #1
 800b142:	d0ee      	beq.n	800b122 <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800b144:	2c00      	cmp	r4, #0
 800b146:	d0e6      	beq.n	800b116 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800b148:	f06f 0001 	mvn.w	r0, #1
 800b14c:	e7e5      	b.n	800b11a <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800b14e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b152:	e7e2      	b.n	800b11a <osSemaphoreAcquire+0x1e>

0800b154 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b154:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800b156:	b318      	cbz	r0, 800b1a0 <osSemaphoreRelease+0x4c>
 800b158:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800b15c:	b1cb      	cbz	r3, 800b192 <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800b15e:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b160:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800b162:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b164:	f000 fe95 	bl	800be92 <xQueueGiveFromISR>
 800b168:	2801      	cmp	r0, #1
 800b16a:	d004      	beq.n	800b176 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800b16c:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800b170:	b003      	add	sp, #12
 800b172:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800b176:	9b01      	ldr	r3, [sp, #4]
 800b178:	b14b      	cbz	r3, 800b18e <osSemaphoreRelease+0x3a>
 800b17a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b17e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b182:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800b18e:	2000      	movs	r0, #0
 800b190:	e7ee      	b.n	800b170 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b192:	461a      	mov	r2, r3
 800b194:	4619      	mov	r1, r3
 800b196:	f000 fd1c 	bl	800bbd2 <xQueueGenericSend>
 800b19a:	2801      	cmp	r0, #1
 800b19c:	d0f7      	beq.n	800b18e <osSemaphoreRelease+0x3a>
 800b19e:	e7e5      	b.n	800b16c <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800b1a0:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b1a4:	e7e4      	b.n	800b170 <osSemaphoreRelease+0x1c>

0800b1a6 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b1a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	460e      	mov	r6, r1
 800b1ac:	4614      	mov	r4, r2
 800b1ae:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1b2:	b11f      	cbz	r7, 800b1bc <osMessageQueueNew+0x16>
  hQueue = NULL;
 800b1b4:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800b1b6:	4628      	mov	r0, r5
 800b1b8:	b003      	add	sp, #12
 800b1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b1bc:	2800      	cmp	r0, #0
 800b1be:	d0f9      	beq.n	800b1b4 <osMessageQueueNew+0xe>
 800b1c0:	2900      	cmp	r1, #0
 800b1c2:	d0f7      	beq.n	800b1b4 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800b1c4:	b1da      	cbz	r2, 800b1fe <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1c6:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800b1ca:	b183      	cbz	r3, 800b1ee <osMessageQueueNew+0x48>
 800b1cc:	2a4f      	cmp	r2, #79	@ 0x4f
 800b1ce:	d9f1      	bls.n	800b1b4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1d0:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b1d2:	2a00      	cmp	r2, #0
 800b1d4:	d0ee      	beq.n	800b1b4 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b1d6:	434d      	muls	r5, r1
 800b1d8:	6966      	ldr	r6, [r4, #20]
 800b1da:	42ae      	cmp	r6, r5
 800b1dc:	d3ea      	bcc.n	800b1b4 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b1de:	9700      	str	r7, [sp, #0]
 800b1e0:	f000 fc42 	bl	800ba68 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	2800      	cmp	r0, #0
 800b1e8:	d0e4      	beq.n	800b1b4 <osMessageQueueNew+0xe>
        name = attr->name;
 800b1ea:	6824      	ldr	r4, [r4, #0]
 800b1ec:	e011      	b.n	800b212 <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b1ee:	2a00      	cmp	r2, #0
 800b1f0:	d1e0      	bne.n	800b1b4 <osMessageQueueNew+0xe>
 800b1f2:	6923      	ldr	r3, [r4, #16]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d1dd      	bne.n	800b1b4 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b1f8:	6963      	ldr	r3, [r4, #20]
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d1da      	bne.n	800b1b4 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800b1fe:	4628      	mov	r0, r5
 800b200:	2200      	movs	r2, #0
 800b202:	4631      	mov	r1, r6
 800b204:	f000 fc7e 	bl	800bb04 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800b208:	4605      	mov	r5, r0
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d0d2      	beq.n	800b1b4 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800b20e:	2c00      	cmp	r4, #0
 800b210:	d1eb      	bne.n	800b1ea <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f001 f857 	bl	800c2c8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800b21a:	e7cc      	b.n	800b1b6 <osMessageQueueNew+0x10>

0800b21c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b21c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b21e:	461c      	mov	r4, r3
 800b220:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b224:	b1de      	cbz	r6, 800b25e <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b226:	b338      	cbz	r0, 800b278 <osMessageQueuePut+0x5c>
 800b228:	b331      	cbz	r1, 800b278 <osMessageQueuePut+0x5c>
 800b22a:	bb2b      	cbnz	r3, 800b278 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b22c:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b22e:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b230:	f000 fdd2 	bl	800bdd8 <xQueueGenericSendFromISR>
 800b234:	2801      	cmp	r0, #1
 800b236:	d003      	beq.n	800b240 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800b238:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b23c:	b002      	add	sp, #8
 800b23e:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	b90b      	cbnz	r3, 800b248 <osMessageQueuePut+0x2c>
  stat = osOK;
 800b244:	2000      	movs	r0, #0
 800b246:	e7f9      	b.n	800b23c <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800b248:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b24c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b250:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b254:	f3bf 8f4f 	dsb	sy
 800b258:	f3bf 8f6f 	isb	sy
 800b25c:	e7f2      	b.n	800b244 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b25e:	b158      	cbz	r0, 800b278 <osMessageQueuePut+0x5c>
 800b260:	b151      	cbz	r1, 800b278 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b262:	4633      	mov	r3, r6
 800b264:	4622      	mov	r2, r4
 800b266:	f000 fcb4 	bl	800bbd2 <xQueueGenericSend>
 800b26a:	2801      	cmp	r0, #1
 800b26c:	d0ea      	beq.n	800b244 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800b26e:	2c00      	cmp	r4, #0
 800b270:	d0e2      	beq.n	800b238 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800b272:	f06f 0001 	mvn.w	r0, #1
 800b276:	e7e1      	b.n	800b23c <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800b278:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b27c:	e7de      	b.n	800b23c <osMessageQueuePut+0x20>

0800b27e <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b27e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b280:	461c      	mov	r4, r3
 800b282:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800b286:	b1db      	cbz	r3, 800b2c0 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b288:	b330      	cbz	r0, 800b2d8 <osMessageQueueGet+0x5a>
 800b28a:	b329      	cbz	r1, 800b2d8 <osMessageQueueGet+0x5a>
 800b28c:	bb24      	cbnz	r4, 800b2d8 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b28e:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800b290:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b292:	f000 ffcb 	bl	800c22c <xQueueReceiveFromISR>
 800b296:	2801      	cmp	r0, #1
 800b298:	d003      	beq.n	800b2a2 <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800b29a:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800b29e:	b003      	add	sp, #12
 800b2a0:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800b2a2:	9b01      	ldr	r3, [sp, #4]
 800b2a4:	b90b      	cbnz	r3, 800b2aa <osMessageQueueGet+0x2c>
  stat = osOK;
 800b2a6:	2000      	movs	r0, #0
 800b2a8:	e7f9      	b.n	800b29e <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800b2aa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b2ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b2b2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	f3bf 8f6f 	isb	sy
 800b2be:	e7f2      	b.n	800b2a6 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b2c0:	b150      	cbz	r0, 800b2d8 <osMessageQueueGet+0x5a>
 800b2c2:	b149      	cbz	r1, 800b2d8 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b2c4:	4622      	mov	r2, r4
 800b2c6:	f000 fe35 	bl	800bf34 <xQueueReceive>
 800b2ca:	2801      	cmp	r0, #1
 800b2cc:	d0eb      	beq.n	800b2a6 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800b2ce:	2c00      	cmp	r4, #0
 800b2d0:	d0e3      	beq.n	800b29a <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800b2d2:	f06f 0001 	mvn.w	r0, #1
 800b2d6:	e7e2      	b.n	800b29e <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800b2d8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800b2dc:	e7df      	b.n	800b29e <osMessageQueueGet+0x20>
	...

0800b2e0 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b2e0:	4b03      	ldr	r3, [pc, #12]	@ (800b2f0 <vApplicationGetIdleTaskMemory+0x10>)
 800b2e2:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b2e4:	4b03      	ldr	r3, [pc, #12]	@ (800b2f4 <vApplicationGetIdleTaskMemory+0x14>)
 800b2e6:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b2e8:	2380      	movs	r3, #128	@ 0x80
 800b2ea:	6013      	str	r3, [r2, #0]
}
 800b2ec:	4770      	bx	lr
 800b2ee:	bf00      	nop
 800b2f0:	2400c4d4 	.word	0x2400c4d4
 800b2f4:	2400c2d4 	.word	0x2400c2d4

0800b2f8 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b2f8:	4b03      	ldr	r3, [pc, #12]	@ (800b308 <vApplicationGetTimerTaskMemory+0x10>)
 800b2fa:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b2fc:	4b03      	ldr	r3, [pc, #12]	@ (800b30c <vApplicationGetTimerTaskMemory+0x14>)
 800b2fe:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b300:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b304:	6013      	str	r3, [r2, #0]
}
 800b306:	4770      	bx	lr
 800b308:	2400c274 	.word	0x2400c274
 800b30c:	2400be74 	.word	0x2400be74

0800b310 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b310:	4b10      	ldr	r3, [pc, #64]	@ (800b354 <prvInsertBlockIntoFreeList+0x44>)
{
 800b312:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b314:	461a      	mov	r2, r3
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4283      	cmp	r3, r0
 800b31a:	d3fb      	bcc.n	800b314 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b31c:	6854      	ldr	r4, [r2, #4]
 800b31e:	1911      	adds	r1, r2, r4
 800b320:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b322:	bf01      	itttt	eq
 800b324:	6841      	ldreq	r1, [r0, #4]
 800b326:	4610      	moveq	r0, r2
 800b328:	1909      	addeq	r1, r1, r4
 800b32a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b32c:	6844      	ldr	r4, [r0, #4]
 800b32e:	1901      	adds	r1, r0, r4
 800b330:	428b      	cmp	r3, r1
 800b332:	d10c      	bne.n	800b34e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b334:	4908      	ldr	r1, [pc, #32]	@ (800b358 <prvInsertBlockIntoFreeList+0x48>)
 800b336:	6809      	ldr	r1, [r1, #0]
 800b338:	428b      	cmp	r3, r1
 800b33a:	d003      	beq.n	800b344 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b33c:	6859      	ldr	r1, [r3, #4]
 800b33e:	4421      	add	r1, r4
 800b340:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b342:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b344:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b346:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b348:	bf18      	it	ne
 800b34a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b34c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b34e:	4619      	mov	r1, r3
 800b350:	e7f8      	b.n	800b344 <prvInsertBlockIntoFreeList+0x34>
 800b352:	bf00      	nop
 800b354:	2400c550 	.word	0x2400c550
 800b358:	2400c54c 	.word	0x2400c54c

0800b35c <pvPortMalloc>:
{
 800b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800b362:	f001 f9dd 	bl	800c720 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800b366:	4940      	ldr	r1, [pc, #256]	@ (800b468 <pvPortMalloc+0x10c>)
 800b368:	4d40      	ldr	r5, [pc, #256]	@ (800b46c <pvPortMalloc+0x110>)
 800b36a:	680b      	ldr	r3, [r1, #0]
 800b36c:	b9f3      	cbnz	r3, 800b3ac <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800b36e:	4a40      	ldr	r2, [pc, #256]	@ (800b470 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800b370:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b372:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b374:	4e3f      	ldr	r6, [pc, #252]	@ (800b474 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b376:	bf1b      	ittet	ne
 800b378:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b37a:	4b3f      	ldrne	r3, [pc, #252]	@ (800b478 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b37c:	4b3f      	ldreq	r3, [pc, #252]	@ (800b47c <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b37e:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800b382:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b384:	bf18      	it	ne
 800b386:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b388:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b38a:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800b38c:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b38e:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800b392:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b396:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800b398:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b39a:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b39e:	4b38      	ldr	r3, [pc, #224]	@ (800b480 <pvPortMalloc+0x124>)
 800b3a0:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3a2:	4b38      	ldr	r3, [pc, #224]	@ (800b484 <pvPortMalloc+0x128>)
 800b3a4:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800b3aa:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b3ac:	682e      	ldr	r6, [r5, #0]
 800b3ae:	4226      	tst	r6, r4
 800b3b0:	d155      	bne.n	800b45e <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800b3b2:	2c00      	cmp	r4, #0
 800b3b4:	d046      	beq.n	800b444 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800b3b6:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b3ba:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b3bc:	bf1c      	itt	ne
 800b3be:	f023 0307 	bicne.w	r3, r3, #7
 800b3c2:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d04a      	beq.n	800b45e <pvPortMalloc+0x102>
 800b3c8:	4f2e      	ldr	r7, [pc, #184]	@ (800b484 <pvPortMalloc+0x128>)
 800b3ca:	683c      	ldr	r4, [r7, #0]
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	d346      	bcc.n	800b45e <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800b3d0:	4a28      	ldr	r2, [pc, #160]	@ (800b474 <pvPortMalloc+0x118>)
 800b3d2:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b3d4:	6868      	ldr	r0, [r5, #4]
 800b3d6:	4298      	cmp	r0, r3
 800b3d8:	d204      	bcs.n	800b3e4 <pvPortMalloc+0x88>
 800b3da:	f8d5 c000 	ldr.w	ip, [r5]
 800b3de:	f1bc 0f00 	cmp.w	ip, #0
 800b3e2:	d115      	bne.n	800b410 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800b3e4:	6809      	ldr	r1, [r1, #0]
 800b3e6:	42a9      	cmp	r1, r5
 800b3e8:	d039      	beq.n	800b45e <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3ea:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b3ec:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b3f0:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b3f2:	1ac2      	subs	r2, r0, r3
 800b3f4:	2a10      	cmp	r2, #16
 800b3f6:	d912      	bls.n	800b41e <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b3f8:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b3fa:	0741      	lsls	r1, r0, #29
 800b3fc:	d00b      	beq.n	800b416 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b3fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b402:	f383 8811 	msr	BASEPRI, r3
 800b406:	f3bf 8f6f 	isb	sy
 800b40a:	f3bf 8f4f 	dsb	sy
 800b40e:	e7fe      	b.n	800b40e <pvPortMalloc+0xb2>
 800b410:	462a      	mov	r2, r5
 800b412:	4665      	mov	r5, ip
 800b414:	e7de      	b.n	800b3d4 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b416:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b418:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b41a:	f7ff ff79 	bl	800b310 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b41e:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b420:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b422:	4917      	ldr	r1, [pc, #92]	@ (800b480 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b424:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b426:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b428:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800b42a:	4a17      	ldr	r2, [pc, #92]	@ (800b488 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b42c:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800b42e:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800b430:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b432:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800b434:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b438:	bf38      	it	cc
 800b43a:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b43c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b440:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800b442:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800b444:	f001 fa10 	bl	800c868 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b448:	0763      	lsls	r3, r4, #29
 800b44a:	d00a      	beq.n	800b462 <pvPortMalloc+0x106>
 800b44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b450:	f383 8811 	msr	BASEPRI, r3
 800b454:	f3bf 8f6f 	isb	sy
 800b458:	f3bf 8f4f 	dsb	sy
 800b45c:	e7fe      	b.n	800b45c <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800b45e:	2400      	movs	r4, #0
 800b460:	e7f0      	b.n	800b444 <pvPortMalloc+0xe8>
}
 800b462:	4620      	mov	r0, r4
 800b464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b468:	2400c54c 	.word	0x2400c54c
 800b46c:	2400c538 	.word	0x2400c538
 800b470:	2400c558 	.word	0x2400c558
 800b474:	2400c550 	.word	0x2400c550
 800b478:	24024bf8 	.word	0x24024bf8
 800b47c:	000186a0 	.word	0x000186a0
 800b480:	2400c544 	.word	0x2400c544
 800b484:	2400c548 	.word	0x2400c548
 800b488:	2400c540 	.word	0x2400c540

0800b48c <vPortFree>:
{
 800b48c:	b510      	push	{r4, lr}
	if( pv != NULL )
 800b48e:	4604      	mov	r4, r0
 800b490:	b390      	cbz	r0, 800b4f8 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b492:	4a1a      	ldr	r2, [pc, #104]	@ (800b4fc <vPortFree+0x70>)
 800b494:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800b498:	6812      	ldr	r2, [r2, #0]
 800b49a:	4213      	tst	r3, r2
 800b49c:	d108      	bne.n	800b4b0 <vPortFree+0x24>
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	e7fe      	b.n	800b4ae <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b4b0:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800b4b4:	b141      	cbz	r1, 800b4c8 <vPortFree+0x3c>
 800b4b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4ba:	f383 8811 	msr	BASEPRI, r3
 800b4be:	f3bf 8f6f 	isb	sy
 800b4c2:	f3bf 8f4f 	dsb	sy
 800b4c6:	e7fe      	b.n	800b4c6 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b4c8:	ea23 0302 	bic.w	r3, r3, r2
 800b4cc:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800b4d0:	f001 f926 	bl	800c720 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4d4:	4a0a      	ldr	r2, [pc, #40]	@ (800b500 <vPortFree+0x74>)
 800b4d6:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4da:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b4de:	6811      	ldr	r1, [r2, #0]
 800b4e0:	440b      	add	r3, r1
 800b4e2:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b4e4:	f7ff ff14 	bl	800b310 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b4e8:	4a06      	ldr	r2, [pc, #24]	@ (800b504 <vPortFree+0x78>)
 800b4ea:	6813      	ldr	r3, [r2, #0]
 800b4ec:	3301      	adds	r3, #1
}
 800b4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800b4f2:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800b4f4:	f001 b9b8 	b.w	800c868 <xTaskResumeAll>
}
 800b4f8:	bd10      	pop	{r4, pc}
 800b4fa:	bf00      	nop
 800b4fc:	2400c538 	.word	0x2400c538
 800b500:	2400c548 	.word	0x2400c548
 800b504:	2400c53c 	.word	0x2400c53c

0800b508 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b508:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b50c:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b510:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b512:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b514:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b518:	2300      	movs	r3, #0
 800b51a:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b51c:	4770      	bx	lr

0800b51e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b51e:	2300      	movs	r3, #0
 800b520:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b522:	4770      	bx	lr

0800b524 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800b524:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b526:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800b528:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b52a:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b52c:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b52e:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b530:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b532:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b534:	3301      	adds	r3, #1
 800b536:	6003      	str	r3, [r0, #0]
}
 800b538:	4770      	bx	lr

0800b53a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b53a:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b53c:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b53e:	1c63      	adds	r3, r4, #1
 800b540:	d10a      	bne.n	800b558 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b542:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b544:	685a      	ldr	r2, [r3, #4]
 800b546:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b548:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b54a:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800b54c:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800b54e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800b550:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800b552:	3301      	adds	r3, #1
 800b554:	6003      	str	r3, [r0, #0]
}
 800b556:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b558:	f100 0208 	add.w	r2, r0, #8
 800b55c:	4613      	mov	r3, r2
 800b55e:	6852      	ldr	r2, [r2, #4]
 800b560:	6815      	ldr	r5, [r2, #0]
 800b562:	42a5      	cmp	r5, r4
 800b564:	d9fa      	bls.n	800b55c <vListInsert+0x22>
 800b566:	e7ed      	b.n	800b544 <vListInsert+0xa>

0800b568 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b568:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b56a:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800b56e:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b570:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b572:	6859      	ldr	r1, [r3, #4]
 800b574:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b576:	bf08      	it	eq
 800b578:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b57a:	2200      	movs	r2, #0
 800b57c:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800b57e:	681a      	ldr	r2, [r3, #0]
 800b580:	3a01      	subs	r2, #1
 800b582:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b584:	6818      	ldr	r0, [r3, #0]
}
 800b586:	4770      	bx	lr

0800b588 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b588:	4808      	ldr	r0, [pc, #32]	@ (800b5ac <prvPortStartFirstTask+0x24>)
 800b58a:	6800      	ldr	r0, [r0, #0]
 800b58c:	6800      	ldr	r0, [r0, #0]
 800b58e:	f380 8808 	msr	MSP, r0
 800b592:	f04f 0000 	mov.w	r0, #0
 800b596:	f380 8814 	msr	CONTROL, r0
 800b59a:	b662      	cpsie	i
 800b59c:	b661      	cpsie	f
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	f3bf 8f6f 	isb	sy
 800b5a6:	df00      	svc	0
 800b5a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b5aa:	0000      	.short	0x0000
 800b5ac:	e000ed08 	.word	0xe000ed08

0800b5b0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b5b0:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b5c0 <vPortEnableVFP+0x10>
 800b5b4:	6801      	ldr	r1, [r0, #0]
 800b5b6:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b5ba:	6001      	str	r1, [r0, #0]
 800b5bc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b5be:	0000      	.short	0x0000
 800b5c0:	e000ed88 	.word	0xe000ed88

0800b5c4 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800b5c4:	2300      	movs	r3, #0
{
 800b5c6:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800b5c8:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800b5ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b600 <prvTaskExitError+0x3c>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	d008      	beq.n	800b5e4 <prvTaskExitError+0x20>
 800b5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5d6:	f383 8811 	msr	BASEPRI, r3
 800b5da:	f3bf 8f6f 	isb	sy
 800b5de:	f3bf 8f4f 	dsb	sy
 800b5e2:	e7fe      	b.n	800b5e2 <prvTaskExitError+0x1e>
 800b5e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5e8:	f383 8811 	msr	BASEPRI, r3
 800b5ec:	f3bf 8f6f 	isb	sy
 800b5f0:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800b5f4:	9b01      	ldr	r3, [sp, #4]
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d0fc      	beq.n	800b5f4 <prvTaskExitError+0x30>
}
 800b5fa:	b002      	add	sp, #8
 800b5fc:	4770      	bx	lr
 800b5fe:	bf00      	nop
 800b600:	24000078 	.word	0x24000078

0800b604 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b604:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b608:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b60c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800b610:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b612:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b614:	4b03      	ldr	r3, [pc, #12]	@ (800b624 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b616:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b618:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b61a:	f06f 0302 	mvn.w	r3, #2
 800b61e:	6203      	str	r3, [r0, #32]
}
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	0800b5c5 	.word	0x0800b5c5
	...

0800b630 <SVC_Handler>:
	__asm volatile (
 800b630:	4b07      	ldr	r3, [pc, #28]	@ (800b650 <pxCurrentTCBConst2>)
 800b632:	6819      	ldr	r1, [r3, #0]
 800b634:	6808      	ldr	r0, [r1, #0]
 800b636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b63a:	f380 8809 	msr	PSP, r0
 800b63e:	f3bf 8f6f 	isb	sy
 800b642:	f04f 0000 	mov.w	r0, #0
 800b646:	f380 8811 	msr	BASEPRI, r0
 800b64a:	4770      	bx	lr
 800b64c:	f3af 8000 	nop.w

0800b650 <pxCurrentTCBConst2>:
 800b650:	24025138 	.word	0x24025138

0800b654 <vPortEnterCritical>:
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800b664:	4a0a      	ldr	r2, [pc, #40]	@ (800b690 <vPortEnterCritical+0x3c>)
 800b666:	6813      	ldr	r3, [r2, #0]
 800b668:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800b66a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800b66c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800b66e:	d10e      	bne.n	800b68e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b670:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b674:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	b143      	cbz	r3, 800b68e <vPortEnterCritical+0x3a>
 800b67c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b680:	f383 8811 	msr	BASEPRI, r3
 800b684:	f3bf 8f6f 	isb	sy
 800b688:	f3bf 8f4f 	dsb	sy
 800b68c:	e7fe      	b.n	800b68c <vPortEnterCritical+0x38>
}
 800b68e:	4770      	bx	lr
 800b690:	24000078 	.word	0x24000078

0800b694 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800b694:	4a08      	ldr	r2, [pc, #32]	@ (800b6b8 <vPortExitCritical+0x24>)
 800b696:	6813      	ldr	r3, [r2, #0]
 800b698:	b943      	cbnz	r3, 800b6ac <vPortExitCritical+0x18>
 800b69a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69e:	f383 8811 	msr	BASEPRI, r3
 800b6a2:	f3bf 8f6f 	isb	sy
 800b6a6:	f3bf 8f4f 	dsb	sy
 800b6aa:	e7fe      	b.n	800b6aa <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800b6ac:	3b01      	subs	r3, #1
 800b6ae:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b6b0:	b90b      	cbnz	r3, 800b6b6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b6b2:	f383 8811 	msr	BASEPRI, r3
}
 800b6b6:	4770      	bx	lr
 800b6b8:	24000078 	.word	0x24000078
 800b6bc:	00000000 	.word	0x00000000

0800b6c0 <PendSV_Handler>:
	__asm volatile
 800b6c0:	f3ef 8009 	mrs	r0, PSP
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	4b15      	ldr	r3, [pc, #84]	@ (800b720 <pxCurrentTCBConst>)
 800b6ca:	681a      	ldr	r2, [r3, #0]
 800b6cc:	f01e 0f10 	tst.w	lr, #16
 800b6d0:	bf08      	it	eq
 800b6d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b6d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6da:	6010      	str	r0, [r2, #0]
 800b6dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b6e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b6e4:	f380 8811 	msr	BASEPRI, r0
 800b6e8:	f3bf 8f4f 	dsb	sy
 800b6ec:	f3bf 8f6f 	isb	sy
 800b6f0:	f001 f998 	bl	800ca24 <vTaskSwitchContext>
 800b6f4:	f04f 0000 	mov.w	r0, #0
 800b6f8:	f380 8811 	msr	BASEPRI, r0
 800b6fc:	bc09      	pop	{r0, r3}
 800b6fe:	6819      	ldr	r1, [r3, #0]
 800b700:	6808      	ldr	r0, [r1, #0]
 800b702:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b706:	f01e 0f10 	tst.w	lr, #16
 800b70a:	bf08      	it	eq
 800b70c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b710:	f380 8809 	msr	PSP, r0
 800b714:	f3bf 8f6f 	isb	sy
 800b718:	4770      	bx	lr
 800b71a:	bf00      	nop
 800b71c:	f3af 8000 	nop.w

0800b720 <pxCurrentTCBConst>:
 800b720:	24025138 	.word	0x24025138

0800b724 <xPortSysTickHandler>:
{
 800b724:	b508      	push	{r3, lr}
	__asm volatile
 800b726:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b72a:	f383 8811 	msr	BASEPRI, r3
 800b72e:	f3bf 8f6f 	isb	sy
 800b732:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800b736:	f001 f801 	bl	800c73c <xTaskIncrementTick>
 800b73a:	b128      	cbz	r0, 800b748 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b73c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b740:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b744:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800b748:	2300      	movs	r3, #0
 800b74a:	f383 8811 	msr	BASEPRI, r3
}
 800b74e:	bd08      	pop	{r3, pc}

0800b750 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b750:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800b754:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b756:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b75a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b75c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b75e:	4b04      	ldr	r3, [pc, #16]	@ (800b770 <vPortSetupTimerInterrupt+0x20>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	fbb3 f3f1 	udiv	r3, r3, r1
 800b766:	3b01      	subs	r3, #1
 800b768:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b76a:	2307      	movs	r3, #7
 800b76c:	6113      	str	r3, [r2, #16]
}
 800b76e:	4770      	bx	lr
 800b770:	2400006c 	.word	0x2400006c

0800b774 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b774:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800b778:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b77a:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800b77e:	4a38      	ldr	r2, [pc, #224]	@ (800b860 <xPortStartScheduler+0xec>)
 800b780:	4291      	cmp	r1, r2
 800b782:	d108      	bne.n	800b796 <xPortStartScheduler+0x22>
	__asm volatile
 800b784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b788:	f383 8811 	msr	BASEPRI, r3
 800b78c:	f3bf 8f6f 	isb	sy
 800b790:	f3bf 8f4f 	dsb	sy
 800b794:	e7fe      	b.n	800b794 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b796:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800b79a:	4b32      	ldr	r3, [pc, #200]	@ (800b864 <xPortStartScheduler+0xf0>)
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d108      	bne.n	800b7b2 <xPortStartScheduler+0x3e>
 800b7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	e7fe      	b.n	800b7b0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b7b2:	4b2d      	ldr	r3, [pc, #180]	@ (800b868 <xPortStartScheduler+0xf4>)
 800b7b4:	781a      	ldrb	r2, [r3, #0]
 800b7b6:	b2d2      	uxtb	r2, r2
 800b7b8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b7ba:	22ff      	movs	r2, #255	@ 0xff
 800b7bc:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7be:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7c0:	4a2a      	ldr	r2, [pc, #168]	@ (800b86c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b7c2:	b2db      	uxtb	r3, r3
 800b7c4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b7c8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b7cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b7d0:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b7d2:	2307      	movs	r3, #7
 800b7d4:	4a26      	ldr	r2, [pc, #152]	@ (800b870 <xPortStartScheduler+0xfc>)
 800b7d6:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7d8:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800b7dc:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b7de:	0609      	lsls	r1, r1, #24
 800b7e0:	d40a      	bmi.n	800b7f8 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b7e2:	2b03      	cmp	r3, #3
 800b7e4:	d011      	beq.n	800b80a <xPortStartScheduler+0x96>
 800b7e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7ea:	f383 8811 	msr	BASEPRI, r3
 800b7ee:	f3bf 8f6f 	isb	sy
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	e7fe      	b.n	800b7f6 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b7fc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b800:	005b      	lsls	r3, r3, #1
 800b802:	b2db      	uxtb	r3, r3
 800b804:	f88d 3003 	strb.w	r3, [sp, #3]
 800b808:	e7e6      	b.n	800b7d8 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b80a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b80e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800b812:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b814:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b816:	9b01      	ldr	r3, [sp, #4]
 800b818:	4a13      	ldr	r2, [pc, #76]	@ (800b868 <xPortStartScheduler+0xf4>)
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b81e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b822:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b826:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b82a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800b82e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b832:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800b836:	f7ff ff8b 	bl	800b750 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800b83a:	4b0e      	ldr	r3, [pc, #56]	@ (800b874 <xPortStartScheduler+0x100>)
 800b83c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800b83e:	f7ff feb7 	bl	800b5b0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b842:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800b846:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b84a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800b84e:	f7ff fe9b 	bl	800b588 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800b852:	f001 f8e7 	bl	800ca24 <vTaskSwitchContext>
}
 800b856:	4628      	mov	r0, r5
	prvTaskExitError();
 800b858:	f7ff feb4 	bl	800b5c4 <prvTaskExitError>
}
 800b85c:	b003      	add	sp, #12
 800b85e:	bd30      	pop	{r4, r5, pc}
 800b860:	410fc271 	.word	0x410fc271
 800b864:	410fc270 	.word	0x410fc270
 800b868:	e000e400 	.word	0xe000e400
 800b86c:	24024bfc 	.word	0x24024bfc
 800b870:	24024bf8 	.word	0x24024bf8
 800b874:	24000078 	.word	0x24000078

0800b878 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b878:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b87c:	2b0f      	cmp	r3, #15
 800b87e:	d90e      	bls.n	800b89e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b880:	4a11      	ldr	r2, [pc, #68]	@ (800b8c8 <vPortValidateInterruptPriority+0x50>)
 800b882:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b884:	4a11      	ldr	r2, [pc, #68]	@ (800b8cc <vPortValidateInterruptPriority+0x54>)
 800b886:	7812      	ldrb	r2, [r2, #0]
 800b888:	429a      	cmp	r2, r3
 800b88a:	d908      	bls.n	800b89e <vPortValidateInterruptPriority+0x26>
 800b88c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b890:	f383 8811 	msr	BASEPRI, r3
 800b894:	f3bf 8f6f 	isb	sy
 800b898:	f3bf 8f4f 	dsb	sy
 800b89c:	e7fe      	b.n	800b89c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b89e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800b8a2:	4a0b      	ldr	r2, [pc, #44]	@ (800b8d0 <vPortValidateInterruptPriority+0x58>)
 800b8a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800b8a8:	6812      	ldr	r2, [r2, #0]
 800b8aa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	d908      	bls.n	800b8c4 <vPortValidateInterruptPriority+0x4c>
 800b8b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8b6:	f383 8811 	msr	BASEPRI, r3
 800b8ba:	f3bf 8f6f 	isb	sy
 800b8be:	f3bf 8f4f 	dsb	sy
 800b8c2:	e7fe      	b.n	800b8c2 <vPortValidateInterruptPriority+0x4a>
	}
 800b8c4:	4770      	bx	lr
 800b8c6:	bf00      	nop
 800b8c8:	e000e3f0 	.word	0xe000e3f0
 800b8cc:	24024bfc 	.word	0x24024bfc
 800b8d0:	24024bf8 	.word	0x24024bf8

0800b8d4 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b8d8:	f7ff febc 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b8dc:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800b8de:	f7ff fed9 	bl	800b694 <vPortExitCritical>

	return xReturn;
}
 800b8e2:	fab4 f084 	clz	r0, r4
 800b8e6:	0940      	lsrs	r0, r0, #5
 800b8e8:	bd10      	pop	{r4, pc}

0800b8ea <prvCopyDataToQueue>:
{
 800b8ea:	b570      	push	{r4, r5, r6, lr}
 800b8ec:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8ee:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800b8f0:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b8f2:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b8f4:	b942      	cbnz	r2, 800b908 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b8f6:	6806      	ldr	r6, [r0, #0]
 800b8f8:	b99e      	cbnz	r6, 800b922 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b8fa:	6880      	ldr	r0, [r0, #8]
 800b8fc:	f001 f9f2 	bl	800cce4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b900:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b902:	3501      	adds	r5, #1
 800b904:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800b906:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800b908:	b96e      	cbnz	r6, 800b926 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b90a:	6840      	ldr	r0, [r0, #4]
 800b90c:	f016 ff61 	bl	80227d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b910:	6863      	ldr	r3, [r4, #4]
 800b912:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b914:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b916:	68a2      	ldr	r2, [r4, #8]
 800b918:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b91a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b91c:	bf24      	itt	cs
 800b91e:	6823      	ldrcs	r3, [r4, #0]
 800b920:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800b922:	2000      	movs	r0, #0
 800b924:	e7ed      	b.n	800b902 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b926:	68c0      	ldr	r0, [r0, #12]
 800b928:	f016 ff53 	bl	80227d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b92c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b92e:	68e3      	ldr	r3, [r4, #12]
 800b930:	4251      	negs	r1, r2
 800b932:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b934:	6822      	ldr	r2, [r4, #0]
 800b936:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b938:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b93a:	bf3e      	ittt	cc
 800b93c:	68a3      	ldrcc	r3, [r4, #8]
 800b93e:	185b      	addcc	r3, r3, r1
 800b940:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800b942:	2e02      	cmp	r6, #2
 800b944:	d1ed      	bne.n	800b922 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b946:	b10d      	cbz	r5, 800b94c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800b948:	3d01      	subs	r5, #1
 800b94a:	e7ea      	b.n	800b922 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800b94c:	4628      	mov	r0, r5
 800b94e:	e7d8      	b.n	800b902 <prvCopyDataToQueue+0x18>

0800b950 <prvCopyDataFromQueue>:
{
 800b950:	4603      	mov	r3, r0
 800b952:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b954:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800b956:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b958:	b162      	cbz	r2, 800b974 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b95c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b960:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b962:	60dc      	str	r4, [r3, #12]
}
 800b964:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b968:	bf24      	itt	cs
 800b96a:	6819      	ldrcs	r1, [r3, #0]
 800b96c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b96e:	68d9      	ldr	r1, [r3, #12]
 800b970:	f016 bf2f 	b.w	80227d2 <memcpy>
}
 800b974:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b978:	4770      	bx	lr

0800b97a <prvUnlockQueue>:
{
 800b97a:	b570      	push	{r4, r5, r6, lr}
 800b97c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800b97e:	f7ff fe69 	bl	800b654 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800b982:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b986:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800b98a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b98c:	2d00      	cmp	r5, #0
 800b98e:	dc14      	bgt.n	800b9ba <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800b990:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b992:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800b996:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800b99a:	f7ff fe7b 	bl	800b694 <vPortExitCritical>
	taskENTER_CRITICAL();
 800b99e:	f7ff fe59 	bl	800b654 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800b9a2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800b9a6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	dc12      	bgt.n	800b9d2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800b9ac:	23ff      	movs	r3, #255	@ 0xff
 800b9ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800b9b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800b9b6:	f7ff be6d 	b.w	800b694 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b9ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d0e7      	beq.n	800b990 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b9c0:	4630      	mov	r0, r6
 800b9c2:	f001 f8ab 	bl	800cb1c <xTaskRemoveFromEventList>
 800b9c6:	b108      	cbz	r0, 800b9cc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800b9c8:	f001 f932 	bl	800cc30 <vTaskMissedYield>
			--cTxLock;
 800b9cc:	3d01      	subs	r5, #1
 800b9ce:	b26d      	sxtb	r5, r5
 800b9d0:	e7dc      	b.n	800b98c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b9d2:	6923      	ldr	r3, [r4, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d0e9      	beq.n	800b9ac <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b9d8:	4630      	mov	r0, r6
 800b9da:	f001 f89f 	bl	800cb1c <xTaskRemoveFromEventList>
 800b9de:	b108      	cbz	r0, 800b9e4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800b9e0:	f001 f926 	bl	800cc30 <vTaskMissedYield>
				--cRxLock;
 800b9e4:	3d01      	subs	r5, #1
 800b9e6:	b26d      	sxtb	r5, r5
 800b9e8:	e7de      	b.n	800b9a8 <prvUnlockQueue+0x2e>

0800b9ea <xQueueGenericReset>:
{
 800b9ea:	b538      	push	{r3, r4, r5, lr}
 800b9ec:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800b9ee:	4604      	mov	r4, r0
 800b9f0:	b940      	cbnz	r0, 800ba04 <xQueueGenericReset+0x1a>
 800b9f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9f6:	f383 8811 	msr	BASEPRI, r3
 800b9fa:	f3bf 8f6f 	isb	sy
 800b9fe:	f3bf 8f4f 	dsb	sy
 800ba02:	e7fe      	b.n	800ba02 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800ba04:	f7ff fe26 	bl	800b654 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba08:	6822      	ldr	r2, [r4, #0]
 800ba0a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ba0e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba10:	434b      	muls	r3, r1
 800ba12:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba14:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba16:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba18:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba1a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800ba1c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba1e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ba20:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800ba22:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ba26:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800ba2a:	b9a5      	cbnz	r5, 800ba56 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba2c:	6923      	ldr	r3, [r4, #16]
 800ba2e:	b173      	cbz	r3, 800ba4e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba30:	f104 0010 	add.w	r0, r4, #16
 800ba34:	f001 f872 	bl	800cb1c <xTaskRemoveFromEventList>
 800ba38:	b148      	cbz	r0, 800ba4e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800ba3a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ba3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ba42:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ba46:	f3bf 8f4f 	dsb	sy
 800ba4a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ba4e:	f7ff fe21 	bl	800b694 <vPortExitCritical>
}
 800ba52:	2001      	movs	r0, #1
 800ba54:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ba56:	f104 0010 	add.w	r0, r4, #16
 800ba5a:	f7ff fd55 	bl	800b508 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ba5e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ba62:	f7ff fd51 	bl	800b508 <vListInitialise>
 800ba66:	e7f2      	b.n	800ba4e <xQueueGenericReset+0x64>

0800ba68 <xQueueGenericCreateStatic>:
	{
 800ba68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ba6a:	460d      	mov	r5, r1
 800ba6c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba6e:	b940      	cbnz	r0, 800ba82 <xQueueGenericCreateStatic+0x1a>
 800ba70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba74:	f383 8811 	msr	BASEPRI, r3
 800ba78:	f3bf 8f6f 	isb	sy
 800ba7c:	f3bf 8f4f 	dsb	sy
 800ba80:	e7fe      	b.n	800ba80 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ba82:	b943      	cbnz	r3, 800ba96 <xQueueGenericCreateStatic+0x2e>
 800ba84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba88:	f383 8811 	msr	BASEPRI, r3
 800ba8c:	f3bf 8f6f 	isb	sy
 800ba90:	f3bf 8f4f 	dsb	sy
 800ba94:	e7fe      	b.n	800ba94 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800ba96:	b14a      	cbz	r2, 800baac <xQueueGenericCreateStatic+0x44>
 800ba98:	b991      	cbnz	r1, 800bac0 <xQueueGenericCreateStatic+0x58>
 800ba9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba9e:	f383 8811 	msr	BASEPRI, r3
 800baa2:	f3bf 8f6f 	isb	sy
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	e7fe      	b.n	800baaa <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800baac:	b141      	cbz	r1, 800bac0 <xQueueGenericCreateStatic+0x58>
 800baae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	e7fe      	b.n	800babe <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bac0:	2350      	movs	r3, #80	@ 0x50
 800bac2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bac4:	9b01      	ldr	r3, [sp, #4]
 800bac6:	2b50      	cmp	r3, #80	@ 0x50
 800bac8:	d008      	beq.n	800badc <xQueueGenericCreateStatic+0x74>
 800baca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bace:	f383 8811 	msr	BASEPRI, r3
 800bad2:	f3bf 8f6f 	isb	sy
 800bad6:	f3bf 8f4f 	dsb	sy
 800bada:	e7fe      	b.n	800bada <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800badc:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bade:	2d00      	cmp	r5, #0
 800bae0:	bf08      	it	eq
 800bae2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bae4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bae6:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800baea:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800baec:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800baf0:	4620      	mov	r0, r4
 800baf2:	f7ff ff7a 	bl	800b9ea <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800baf6:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800bafa:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bafc:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800bb00:	b003      	add	sp, #12
 800bb02:	bd30      	pop	{r4, r5, pc}

0800bb04 <xQueueGenericCreate>:
	{
 800bb04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb06:	460d      	mov	r5, r1
 800bb08:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb0a:	4606      	mov	r6, r0
 800bb0c:	b940      	cbnz	r0, 800bb20 <xQueueGenericCreate+0x1c>
 800bb0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	e7fe      	b.n	800bb1e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb20:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bb22:	3050      	adds	r0, #80	@ 0x50
 800bb24:	f7ff fc1a 	bl	800b35c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800bb28:	4604      	mov	r4, r0
 800bb2a:	b170      	cbz	r0, 800bb4a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb32:	b165      	cbz	r5, 800bb4e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bb34:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb38:	2101      	movs	r1, #1
 800bb3a:	4620      	mov	r0, r4
 800bb3c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800bb3e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb42:	f7ff ff52 	bl	800b9ea <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800bb46:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb4e:	4603      	mov	r3, r0
 800bb50:	e7f2      	b.n	800bb38 <xQueueGenericCreate+0x34>

0800bb52 <xQueueCreateCountingSemaphoreStatic>:
	{
 800bb52:	b513      	push	{r0, r1, r4, lr}
 800bb54:	4613      	mov	r3, r2
 800bb56:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bb58:	b940      	cbnz	r0, 800bb6c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800bb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5e:	f383 8811 	msr	BASEPRI, r3
 800bb62:	f3bf 8f6f 	isb	sy
 800bb66:	f3bf 8f4f 	dsb	sy
 800bb6a:	e7fe      	b.n	800bb6a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bb6c:	4288      	cmp	r0, r1
 800bb6e:	d208      	bcs.n	800bb82 <xQueueCreateCountingSemaphoreStatic+0x30>
 800bb70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb74:	f383 8811 	msr	BASEPRI, r3
 800bb78:	f3bf 8f6f 	isb	sy
 800bb7c:	f3bf 8f4f 	dsb	sy
 800bb80:	e7fe      	b.n	800bb80 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bb82:	2202      	movs	r2, #2
 800bb84:	9200      	str	r2, [sp, #0]
 800bb86:	2200      	movs	r2, #0
 800bb88:	4611      	mov	r1, r2
 800bb8a:	f7ff ff6d 	bl	800ba68 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800bb8e:	b100      	cbz	r0, 800bb92 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bb90:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bb92:	b002      	add	sp, #8
 800bb94:	bd10      	pop	{r4, pc}

0800bb96 <xQueueCreateCountingSemaphore>:
	{
 800bb96:	b510      	push	{r4, lr}
 800bb98:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800bb9a:	b940      	cbnz	r0, 800bbae <xQueueCreateCountingSemaphore+0x18>
 800bb9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	e7fe      	b.n	800bbac <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bbae:	4288      	cmp	r0, r1
 800bbb0:	d208      	bcs.n	800bbc4 <xQueueCreateCountingSemaphore+0x2e>
 800bbb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb6:	f383 8811 	msr	BASEPRI, r3
 800bbba:	f3bf 8f6f 	isb	sy
 800bbbe:	f3bf 8f4f 	dsb	sy
 800bbc2:	e7fe      	b.n	800bbc2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	2100      	movs	r1, #0
 800bbc8:	f7ff ff9c 	bl	800bb04 <xQueueGenericCreate>
		if( xHandle != NULL )
 800bbcc:	b100      	cbz	r0, 800bbd0 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bbce:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800bbd0:	bd10      	pop	{r4, pc}

0800bbd2 <xQueueGenericSend>:
{
 800bbd2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bbda:	4604      	mov	r4, r0
{
 800bbdc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800bbde:	b940      	cbnz	r0, 800bbf2 <xQueueGenericSend+0x20>
 800bbe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe4:	f383 8811 	msr	BASEPRI, r3
 800bbe8:	f3bf 8f6f 	isb	sy
 800bbec:	f3bf 8f4f 	dsb	sy
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bbf2:	b951      	cbnz	r1, 800bc0a <xQueueGenericSend+0x38>
 800bbf4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bbf6:	b143      	cbz	r3, 800bc0a <xQueueGenericSend+0x38>
 800bbf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbfc:	f383 8811 	msr	BASEPRI, r3
 800bc00:	f3bf 8f6f 	isb	sy
 800bc04:	f3bf 8f4f 	dsb	sy
 800bc08:	e7fe      	b.n	800bc08 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc0a:	2e02      	cmp	r6, #2
 800bc0c:	d10b      	bne.n	800bc26 <xQueueGenericSend+0x54>
 800bc0e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bc10:	2b01      	cmp	r3, #1
 800bc12:	d008      	beq.n	800bc26 <xQueueGenericSend+0x54>
 800bc14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc18:	f383 8811 	msr	BASEPRI, r3
 800bc1c:	f3bf 8f6f 	isb	sy
 800bc20:	f3bf 8f4f 	dsb	sy
 800bc24:	e7fe      	b.n	800bc24 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc26:	f001 f80f 	bl	800cc48 <xTaskGetSchedulerState>
 800bc2a:	4605      	mov	r5, r0
 800bc2c:	b330      	cbz	r0, 800bc7c <xQueueGenericSend+0xaa>
 800bc2e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bc30:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bc34:	f7ff fd0e 	bl	800b654 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bc38:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bc3a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d301      	bcc.n	800bc44 <xQueueGenericSend+0x72>
 800bc40:	2e02      	cmp	r6, #2
 800bc42:	d127      	bne.n	800bc94 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bc44:	4632      	mov	r2, r6
 800bc46:	4639      	mov	r1, r7
 800bc48:	4620      	mov	r0, r4
 800bc4a:	f7ff fe4e 	bl	800b8ea <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bc4e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bc50:	b11b      	cbz	r3, 800bc5a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bc52:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bc56:	f000 ff61 	bl	800cb1c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800bc5a:	b148      	cbz	r0, 800bc70 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800bc5c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bc60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bc64:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bc70:	f7ff fd10 	bl	800b694 <vPortExitCritical>
				return pdPASS;
 800bc74:	2001      	movs	r0, #1
}
 800bc76:	b004      	add	sp, #16
 800bc78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc7c:	9b01      	ldr	r3, [sp, #4]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d0d6      	beq.n	800bc30 <xQueueGenericSend+0x5e>
 800bc82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	e7fe      	b.n	800bc92 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	b91b      	cbnz	r3, 800bca0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800bc98:	f7ff fcfc 	bl	800b694 <vPortExitCritical>
					return errQUEUE_FULL;
 800bc9c:	2000      	movs	r0, #0
 800bc9e:	e7ea      	b.n	800bc76 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800bca0:	b915      	cbnz	r5, 800bca8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bca2:	a802      	add	r0, sp, #8
 800bca4:	f000 ff7c 	bl	800cba0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bca8:	f7ff fcf4 	bl	800b694 <vPortExitCritical>
		vTaskSuspendAll();
 800bcac:	f000 fd38 	bl	800c720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bcb0:	f7ff fcd0 	bl	800b654 <vPortEnterCritical>
 800bcb4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bcb8:	2bff      	cmp	r3, #255	@ 0xff
 800bcba:	d101      	bne.n	800bcc0 <xQueueGenericSend+0xee>
 800bcbc:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bcc0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800bcc4:	2bff      	cmp	r3, #255	@ 0xff
 800bcc6:	d101      	bne.n	800bccc <xQueueGenericSend+0xfa>
 800bcc8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800bccc:	f7ff fce2 	bl	800b694 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bcd0:	a901      	add	r1, sp, #4
 800bcd2:	a802      	add	r0, sp, #8
 800bcd4:	f000 ff70 	bl	800cbb8 <xTaskCheckForTimeOut>
 800bcd8:	bb38      	cbnz	r0, 800bd2a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bcda:	f7ff fcbb 	bl	800b654 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bcde:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bce0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d10e      	bne.n	800bd04 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800bce6:	f7ff fcd5 	bl	800b694 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bcea:	9901      	ldr	r1, [sp, #4]
 800bcec:	f104 0010 	add.w	r0, r4, #16
 800bcf0:	f000 fedc 	bl	800caac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bcf4:	4620      	mov	r0, r4
 800bcf6:	f7ff fe40 	bl	800b97a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bcfa:	f000 fdb5 	bl	800c868 <xTaskResumeAll>
 800bcfe:	b148      	cbz	r0, 800bd14 <xQueueGenericSend+0x142>
 800bd00:	2501      	movs	r5, #1
 800bd02:	e797      	b.n	800bc34 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800bd04:	f7ff fcc6 	bl	800b694 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f7ff fe36 	bl	800b97a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bd0e:	f000 fdab 	bl	800c868 <xTaskResumeAll>
 800bd12:	e7f5      	b.n	800bd00 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800bd14:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bd18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bd1c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bd20:	f3bf 8f4f 	dsb	sy
 800bd24:	f3bf 8f6f 	isb	sy
 800bd28:	e7ea      	b.n	800bd00 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800bd2a:	4620      	mov	r0, r4
 800bd2c:	f7ff fe25 	bl	800b97a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bd30:	f000 fd9a 	bl	800c868 <xTaskResumeAll>
			return errQUEUE_FULL;
 800bd34:	e7b2      	b.n	800bc9c <xQueueGenericSend+0xca>

0800bd36 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd36:	2200      	movs	r2, #0
	{
 800bd38:	460b      	mov	r3, r1
 800bd3a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd3c:	4611      	mov	r1, r2
 800bd3e:	9000      	str	r0, [sp, #0]
 800bd40:	2001      	movs	r0, #1
 800bd42:	f7ff fe91 	bl	800ba68 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800bd46:	4604      	mov	r4, r0
 800bd48:	b138      	cbz	r0, 800bd5a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd4a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd4c:	461a      	mov	r2, r3
 800bd4e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd50:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd52:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd54:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd56:	f7ff ff3c 	bl	800bbd2 <xQueueGenericSend>
	}
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	b002      	add	sp, #8
 800bd5e:	bd10      	pop	{r4, pc}

0800bd60 <xQueueGiveMutexRecursive>:
	{
 800bd60:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800bd62:	4604      	mov	r4, r0
 800bd64:	b940      	cbnz	r0, 800bd78 <xQueueGiveMutexRecursive+0x18>
 800bd66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd6a:	f383 8811 	msr	BASEPRI, r3
 800bd6e:	f3bf 8f6f 	isb	sy
 800bd72:	f3bf 8f4f 	dsb	sy
 800bd76:	e7fe      	b.n	800bd76 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bd78:	6885      	ldr	r5, [r0, #8]
 800bd7a:	f000 ff5f 	bl	800cc3c <xTaskGetCurrentTaskHandle>
 800bd7e:	4285      	cmp	r5, r0
 800bd80:	d10b      	bne.n	800bd9a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bd82:	68e3      	ldr	r3, [r4, #12]
 800bd84:	3b01      	subs	r3, #1
 800bd86:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bd88:	b10b      	cbz	r3, 800bd8e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800bd8a:	2001      	movs	r0, #1
	}
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bd8e:	461a      	mov	r2, r3
 800bd90:	4619      	mov	r1, r3
 800bd92:	4620      	mov	r0, r4
 800bd94:	f7ff ff1d 	bl	800bbd2 <xQueueGenericSend>
 800bd98:	e7f7      	b.n	800bd8a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800bd9a:	2000      	movs	r0, #0
		return xReturn;
 800bd9c:	e7f6      	b.n	800bd8c <xQueueGiveMutexRecursive+0x2c>

0800bd9e <xQueueCreateMutex>:
	{
 800bd9e:	b570      	push	{r4, r5, r6, lr}
 800bda0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bda2:	2050      	movs	r0, #80	@ 0x50
 800bda4:	f7ff fada 	bl	800b35c <pvPortMalloc>
 800bda8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800bdaa:	b198      	cbz	r0, 800bdd4 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdac:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800bdae:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bdb0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bdb2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800bdb6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bdba:	f7ff fe16 	bl	800b9ea <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bdbe:	462b      	mov	r3, r5
 800bdc0:	462a      	mov	r2, r5
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800bdc6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bdca:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bdcc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bdce:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bdd0:	f7ff feff 	bl	800bbd2 <xQueueGenericSend>
	}
 800bdd4:	4620      	mov	r0, r4
 800bdd6:	bd70      	pop	{r4, r5, r6, pc}

0800bdd8 <xQueueGenericSendFromISR>:
{
 800bdd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bddc:	4689      	mov	r9, r1
 800bdde:	4617      	mov	r7, r2
 800bde0:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800bde2:	4604      	mov	r4, r0
 800bde4:	b940      	cbnz	r0, 800bdf8 <xQueueGenericSendFromISR+0x20>
 800bde6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdea:	f383 8811 	msr	BASEPRI, r3
 800bdee:	f3bf 8f6f 	isb	sy
 800bdf2:	f3bf 8f4f 	dsb	sy
 800bdf6:	e7fe      	b.n	800bdf6 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdf8:	b951      	cbnz	r1, 800be10 <xQueueGenericSendFromISR+0x38>
 800bdfa:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bdfc:	b143      	cbz	r3, 800be10 <xQueueGenericSendFromISR+0x38>
 800bdfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be02:	f383 8811 	msr	BASEPRI, r3
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	f3bf 8f4f 	dsb	sy
 800be0e:	e7fe      	b.n	800be0e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be10:	2e02      	cmp	r6, #2
 800be12:	d10b      	bne.n	800be2c <xQueueGenericSendFromISR+0x54>
 800be14:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be16:	2b01      	cmp	r3, #1
 800be18:	d008      	beq.n	800be2c <xQueueGenericSendFromISR+0x54>
 800be1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be1e:	f383 8811 	msr	BASEPRI, r3
 800be22:	f3bf 8f6f 	isb	sy
 800be26:	f3bf 8f4f 	dsb	sy
 800be2a:	e7fe      	b.n	800be2a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800be2c:	f7ff fd24 	bl	800b878 <vPortValidateInterruptPriority>
	__asm volatile
 800be30:	f3ef 8811 	mrs	r8, BASEPRI
 800be34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be44:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800be46:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800be48:	429a      	cmp	r2, r3
 800be4a:	d301      	bcc.n	800be50 <xQueueGenericSendFromISR+0x78>
 800be4c:	2e02      	cmp	r6, #2
 800be4e:	d11e      	bne.n	800be8e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800be50:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be54:	4632      	mov	r2, r6
 800be56:	4649      	mov	r1, r9
 800be58:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800be5a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800be5c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be5e:	f7ff fd44 	bl	800b8ea <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800be62:	1c6b      	adds	r3, r5, #1
 800be64:	d10e      	bne.n	800be84 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800be68:	b13b      	cbz	r3, 800be7a <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be6a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800be6e:	f000 fe55 	bl	800cb1c <xTaskRemoveFromEventList>
 800be72:	b110      	cbz	r0, 800be7a <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800be74:	b10f      	cbz	r7, 800be7a <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800be76:	2301      	movs	r3, #1
 800be78:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800be7a:	2001      	movs	r0, #1
	__asm volatile
 800be7c:	f388 8811 	msr	BASEPRI, r8
}
 800be80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800be84:	3501      	adds	r5, #1
 800be86:	b26d      	sxtb	r5, r5
 800be88:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800be8c:	e7f5      	b.n	800be7a <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800be8e:	2000      	movs	r0, #0
 800be90:	e7f4      	b.n	800be7c <xQueueGenericSendFromISR+0xa4>

0800be92 <xQueueGiveFromISR>:
{
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800be96:	4604      	mov	r4, r0
 800be98:	b940      	cbnz	r0, 800beac <xQueueGiveFromISR+0x1a>
	__asm volatile
 800be9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be9e:	f383 8811 	msr	BASEPRI, r3
 800bea2:	f3bf 8f6f 	isb	sy
 800bea6:	f3bf 8f4f 	dsb	sy
 800beaa:	e7fe      	b.n	800beaa <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800beac:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800beae:	b143      	cbz	r3, 800bec2 <xQueueGiveFromISR+0x30>
 800beb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800beb4:	f383 8811 	msr	BASEPRI, r3
 800beb8:	f3bf 8f6f 	isb	sy
 800bebc:	f3bf 8f4f 	dsb	sy
 800bec0:	e7fe      	b.n	800bec0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800bec2:	6803      	ldr	r3, [r0, #0]
 800bec4:	b953      	cbnz	r3, 800bedc <xQueueGiveFromISR+0x4a>
 800bec6:	6883      	ldr	r3, [r0, #8]
 800bec8:	b143      	cbz	r3, 800bedc <xQueueGiveFromISR+0x4a>
 800beca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bece:	f383 8811 	msr	BASEPRI, r3
 800bed2:	f3bf 8f6f 	isb	sy
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	e7fe      	b.n	800beda <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bedc:	f7ff fccc 	bl	800b878 <vPortValidateInterruptPriority>
	__asm volatile
 800bee0:	f3ef 8611 	mrs	r6, BASEPRI
 800bee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bee8:	f383 8811 	msr	BASEPRI, r3
 800beec:	f3bf 8f6f 	isb	sy
 800bef0:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bef4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800bef6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bef8:	4293      	cmp	r3, r2
 800befa:	d919      	bls.n	800bf30 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800befc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf00:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800bf02:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800bf04:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800bf06:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800bf08:	d10d      	bne.n	800bf26 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800bf0c:	b13b      	cbz	r3, 800bf1e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bf0e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800bf12:	f000 fe03 	bl	800cb1c <xTaskRemoveFromEventList>
 800bf16:	b110      	cbz	r0, 800bf1e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800bf18:	b10d      	cbz	r5, 800bf1e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800bf1e:	2001      	movs	r0, #1
	__asm volatile
 800bf20:	f386 8811 	msr	BASEPRI, r6
}
 800bf24:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800bf26:	3301      	adds	r3, #1
 800bf28:	b25b      	sxtb	r3, r3
 800bf2a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800bf2e:	e7f6      	b.n	800bf1e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800bf30:	2000      	movs	r0, #0
 800bf32:	e7f5      	b.n	800bf20 <xQueueGiveFromISR+0x8e>

0800bf34 <xQueueReceive>:
{
 800bf34:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800bf38:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800bf3a:	4604      	mov	r4, r0
{
 800bf3c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800bf3e:	b940      	cbnz	r0, 800bf52 <xQueueReceive+0x1e>
	__asm volatile
 800bf40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf44:	f383 8811 	msr	BASEPRI, r3
 800bf48:	f3bf 8f6f 	isb	sy
 800bf4c:	f3bf 8f4f 	dsb	sy
 800bf50:	e7fe      	b.n	800bf50 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf52:	b951      	cbnz	r1, 800bf6a <xQueueReceive+0x36>
 800bf54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800bf56:	b143      	cbz	r3, 800bf6a <xQueueReceive+0x36>
 800bf58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf5c:	f383 8811 	msr	BASEPRI, r3
 800bf60:	f3bf 8f6f 	isb	sy
 800bf64:	f3bf 8f4f 	dsb	sy
 800bf68:	e7fe      	b.n	800bf68 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf6a:	f000 fe6d 	bl	800cc48 <xTaskGetSchedulerState>
 800bf6e:	4605      	mov	r5, r0
 800bf70:	b318      	cbz	r0, 800bfba <xQueueReceive+0x86>
 800bf72:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800bf74:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800bf78:	f7ff fb6c 	bl	800b654 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bf7c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800bf7e:	b347      	cbz	r7, 800bfd2 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf80:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800bf82:	4631      	mov	r1, r6
 800bf84:	4620      	mov	r0, r4
 800bf86:	f7ff fce3 	bl	800b950 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800bf8a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	b173      	cbz	r3, 800bfae <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bf90:	f104 0010 	add.w	r0, r4, #16
 800bf94:	f000 fdc2 	bl	800cb1c <xTaskRemoveFromEventList>
 800bf98:	b148      	cbz	r0, 800bfae <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800bf9a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800bf9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bfa2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800bfae:	f7ff fb71 	bl	800b694 <vPortExitCritical>
				return pdPASS;
 800bfb2:	2001      	movs	r0, #1
}
 800bfb4:	b004      	add	sp, #16
 800bfb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d0d9      	beq.n	800bf74 <xQueueReceive+0x40>
 800bfc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfc4:	f383 8811 	msr	BASEPRI, r3
 800bfc8:	f3bf 8f6f 	isb	sy
 800bfcc:	f3bf 8f4f 	dsb	sy
 800bfd0:	e7fe      	b.n	800bfd0 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfd2:	9b01      	ldr	r3, [sp, #4]
 800bfd4:	b91b      	cbnz	r3, 800bfde <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800bfd6:	f7ff fb5d 	bl	800b694 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800bfda:	2000      	movs	r0, #0
 800bfdc:	e7ea      	b.n	800bfb4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800bfde:	b915      	cbnz	r5, 800bfe6 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bfe0:	a802      	add	r0, sp, #8
 800bfe2:	f000 fddd 	bl	800cba0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800bfe6:	f7ff fb55 	bl	800b694 <vPortExitCritical>
		vTaskSuspendAll();
 800bfea:	f000 fb99 	bl	800c720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bfee:	f7ff fb31 	bl	800b654 <vPortEnterCritical>
 800bff2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800bff6:	2bff      	cmp	r3, #255	@ 0xff
 800bff8:	d101      	bne.n	800bffe <xQueueReceive+0xca>
 800bffa:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800bffe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c002:	2bff      	cmp	r3, #255	@ 0xff
 800c004:	d101      	bne.n	800c00a <xQueueReceive+0xd6>
 800c006:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800c00a:	f7ff fb43 	bl	800b694 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c00e:	a901      	add	r1, sp, #4
 800c010:	a802      	add	r0, sp, #8
 800c012:	f000 fdd1 	bl	800cbb8 <xTaskCheckForTimeOut>
 800c016:	bb00      	cbnz	r0, 800c05a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c018:	4620      	mov	r0, r4
 800c01a:	f7ff fc5b 	bl	800b8d4 <prvIsQueueEmpty>
 800c01e:	b1b0      	cbz	r0, 800c04e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c020:	9901      	ldr	r1, [sp, #4]
 800c022:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c026:	f000 fd41 	bl	800caac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c02a:	4620      	mov	r0, r4
 800c02c:	f7ff fca5 	bl	800b97a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c030:	f000 fc1a 	bl	800c868 <xTaskResumeAll>
 800c034:	b948      	cbnz	r0, 800c04a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800c036:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c03a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c03e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c042:	f3bf 8f4f 	dsb	sy
 800c046:	f3bf 8f6f 	isb	sy
 800c04a:	2501      	movs	r5, #1
 800c04c:	e794      	b.n	800bf78 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800c04e:	4620      	mov	r0, r4
 800c050:	f7ff fc93 	bl	800b97a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c054:	f000 fc08 	bl	800c868 <xTaskResumeAll>
 800c058:	e7f7      	b.n	800c04a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800c05a:	4620      	mov	r0, r4
 800c05c:	f7ff fc8d 	bl	800b97a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c060:	f000 fc02 	bl	800c868 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c064:	4620      	mov	r0, r4
 800c066:	f7ff fc35 	bl	800b8d4 <prvIsQueueEmpty>
 800c06a:	2800      	cmp	r0, #0
 800c06c:	d0ed      	beq.n	800c04a <xQueueReceive+0x116>
 800c06e:	e7b4      	b.n	800bfda <xQueueReceive+0xa6>

0800c070 <xQueueSemaphoreTake>:
{
 800c070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c072:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800c074:	4604      	mov	r4, r0
{
 800c076:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800c078:	b940      	cbnz	r0, 800c08c <xQueueSemaphoreTake+0x1c>
 800c07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c07e:	f383 8811 	msr	BASEPRI, r3
 800c082:	f3bf 8f6f 	isb	sy
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	e7fe      	b.n	800c08a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800c08c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800c08e:	b145      	cbz	r5, 800c0a2 <xQueueSemaphoreTake+0x32>
 800c090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c094:	f383 8811 	msr	BASEPRI, r3
 800c098:	f3bf 8f6f 	isb	sy
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	e7fe      	b.n	800c0a0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0a2:	f000 fdd1 	bl	800cc48 <xTaskGetSchedulerState>
 800c0a6:	4606      	mov	r6, r0
 800c0a8:	b320      	cbz	r0, 800c0f4 <xQueueSemaphoreTake+0x84>
 800c0aa:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800c0ac:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800c0ae:	f7ff fad1 	bl	800b654 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c0b2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c0b4:	b353      	cbz	r3, 800c10c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c0b6:	3b01      	subs	r3, #1
 800c0b8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c0ba:	6823      	ldr	r3, [r4, #0]
 800c0bc:	b913      	cbnz	r3, 800c0c4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c0be:	f000 fea1 	bl	800ce04 <pvTaskIncrementMutexHeldCount>
 800c0c2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c0c4:	6923      	ldr	r3, [r4, #16]
 800c0c6:	b173      	cbz	r3, 800c0e6 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c0c8:	f104 0010 	add.w	r0, r4, #16
 800c0cc:	f000 fd26 	bl	800cb1c <xTaskRemoveFromEventList>
 800c0d0:	b148      	cbz	r0, 800c0e6 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800c0d2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c0d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c0da:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800c0e6:	f7ff fad5 	bl	800b694 <vPortExitCritical>
				return pdPASS;
 800c0ea:	2001      	movs	r0, #1
}
 800c0ec:	b005      	add	sp, #20
 800c0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0f0:	4635      	mov	r5, r6
 800c0f2:	e7db      	b.n	800c0ac <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c0f4:	9b01      	ldr	r3, [sp, #4]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d0fa      	beq.n	800c0f0 <xQueueSemaphoreTake+0x80>
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	e7fe      	b.n	800c10a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800c10c:	9b01      	ldr	r3, [sp, #4]
 800c10e:	b953      	cbnz	r3, 800c126 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c110:	2d00      	cmp	r5, #0
 800c112:	d066      	beq.n	800c1e2 <xQueueSemaphoreTake+0x172>
 800c114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c118:	f383 8811 	msr	BASEPRI, r3
 800c11c:	f3bf 8f6f 	isb	sy
 800c120:	f3bf 8f4f 	dsb	sy
 800c124:	e7fe      	b.n	800c124 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800c126:	b916      	cbnz	r6, 800c12e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c128:	a802      	add	r0, sp, #8
 800c12a:	f000 fd39 	bl	800cba0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800c12e:	f7ff fab1 	bl	800b694 <vPortExitCritical>
		vTaskSuspendAll();
 800c132:	f000 faf5 	bl	800c720 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c136:	f7ff fa8d 	bl	800b654 <vPortEnterCritical>
 800c13a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c13e:	2bff      	cmp	r3, #255	@ 0xff
 800c140:	d101      	bne.n	800c146 <xQueueSemaphoreTake+0xd6>
 800c142:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800c146:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c14a:	2bff      	cmp	r3, #255	@ 0xff
 800c14c:	d101      	bne.n	800c152 <xQueueSemaphoreTake+0xe2>
 800c14e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c152:	f7ff fa9f 	bl	800b694 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c156:	a901      	add	r1, sp, #4
 800c158:	a802      	add	r0, sp, #8
 800c15a:	f000 fd2d 	bl	800cbb8 <xTaskCheckForTimeOut>
 800c15e:	bb50      	cbnz	r0, 800c1b6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c160:	4620      	mov	r0, r4
 800c162:	f7ff fbb7 	bl	800b8d4 <prvIsQueueEmpty>
 800c166:	b300      	cbz	r0, 800c1aa <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c168:	6823      	ldr	r3, [r4, #0]
 800c16a:	b93b      	cbnz	r3, 800c17c <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800c16c:	f7ff fa72 	bl	800b654 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c170:	68a0      	ldr	r0, [r4, #8]
 800c172:	f000 fd79 	bl	800cc68 <xTaskPriorityInherit>
 800c176:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800c178:	f7ff fa8c 	bl	800b694 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c17c:	9901      	ldr	r1, [sp, #4]
 800c17e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c182:	f000 fc93 	bl	800caac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c186:	4620      	mov	r0, r4
 800c188:	f7ff fbf7 	bl	800b97a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c18c:	f000 fb6c 	bl	800c868 <xTaskResumeAll>
 800c190:	b948      	cbnz	r0, 800c1a6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800c192:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c19a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c19e:	f3bf 8f4f 	dsb	sy
 800c1a2:	f3bf 8f6f 	isb	sy
 800c1a6:	2601      	movs	r6, #1
 800c1a8:	e781      	b.n	800c0ae <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800c1aa:	4620      	mov	r0, r4
 800c1ac:	f7ff fbe5 	bl	800b97a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c1b0:	f000 fb5a 	bl	800c868 <xTaskResumeAll>
 800c1b4:	e7f7      	b.n	800c1a6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800c1b6:	4620      	mov	r0, r4
 800c1b8:	f7ff fbdf 	bl	800b97a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c1bc:	f000 fb54 	bl	800c868 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c1c0:	4620      	mov	r0, r4
 800c1c2:	f7ff fb87 	bl	800b8d4 <prvIsQueueEmpty>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d0ed      	beq.n	800c1a6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800c1ca:	b165      	cbz	r5, 800c1e6 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800c1cc:	f7ff fa42 	bl	800b654 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c1d2:	b119      	cbz	r1, 800c1dc <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c1d6:	6819      	ldr	r1, [r3, #0]
 800c1d8:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1dc:	68a0      	ldr	r0, [r4, #8]
 800c1de:	f000 fdc3 	bl	800cd68 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800c1e2:	f7ff fa57 	bl	800b694 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800c1e6:	2000      	movs	r0, #0
 800c1e8:	e780      	b.n	800c0ec <xQueueSemaphoreTake+0x7c>

0800c1ea <xQueueTakeMutexRecursive>:
	{
 800c1ea:	b570      	push	{r4, r5, r6, lr}
 800c1ec:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	b940      	cbnz	r0, 800c204 <xQueueTakeMutexRecursive+0x1a>
 800c1f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	e7fe      	b.n	800c202 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800c204:	6886      	ldr	r6, [r0, #8]
 800c206:	f000 fd19 	bl	800cc3c <xTaskGetCurrentTaskHandle>
 800c20a:	4286      	cmp	r6, r0
 800c20c:	d104      	bne.n	800c218 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c20e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800c210:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c212:	3301      	adds	r3, #1
 800c214:	60e3      	str	r3, [r4, #12]
	}
 800c216:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800c218:	4629      	mov	r1, r5
 800c21a:	4620      	mov	r0, r4
 800c21c:	f7ff ff28 	bl	800c070 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800c220:	2800      	cmp	r0, #0
 800c222:	d0f8      	beq.n	800c216 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800c224:	68e3      	ldr	r3, [r4, #12]
 800c226:	3301      	adds	r3, #1
 800c228:	60e3      	str	r3, [r4, #12]
 800c22a:	e7f4      	b.n	800c216 <xQueueTakeMutexRecursive+0x2c>

0800c22c <xQueueReceiveFromISR>:
{
 800c22c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c230:	4689      	mov	r9, r1
 800c232:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800c234:	4604      	mov	r4, r0
 800c236:	b940      	cbnz	r0, 800c24a <xQueueReceiveFromISR+0x1e>
 800c238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c23c:	f383 8811 	msr	BASEPRI, r3
 800c240:	f3bf 8f6f 	isb	sy
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	e7fe      	b.n	800c248 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c24a:	b951      	cbnz	r1, 800c262 <xQueueReceiveFromISR+0x36>
 800c24c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800c24e:	b143      	cbz	r3, 800c262 <xQueueReceiveFromISR+0x36>
 800c250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	e7fe      	b.n	800c260 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c262:	f7ff fb09 	bl	800b878 <vPortValidateInterruptPriority>
	__asm volatile
 800c266:	f3ef 8711 	mrs	r7, BASEPRI
 800c26a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c26e:	f383 8811 	msr	BASEPRI, r3
 800c272:	f3bf 8f6f 	isb	sy
 800c276:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c27a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c27c:	b30d      	cbz	r5, 800c2c2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800c27e:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c282:	4649      	mov	r1, r9
 800c284:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c286:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800c288:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c28a:	f7ff fb61 	bl	800b950 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c28e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800c290:	1c73      	adds	r3, r6, #1
 800c292:	d111      	bne.n	800c2b8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c294:	6923      	ldr	r3, [r4, #16]
 800c296:	b153      	cbz	r3, 800c2ae <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c298:	f104 0010 	add.w	r0, r4, #16
 800c29c:	f000 fc3e 	bl	800cb1c <xTaskRemoveFromEventList>
 800c2a0:	b128      	cbz	r0, 800c2ae <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800c2a2:	f1b8 0f00 	cmp.w	r8, #0
 800c2a6:	d002      	beq.n	800c2ae <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800c2ae:	2001      	movs	r0, #1
	__asm volatile
 800c2b0:	f387 8811 	msr	BASEPRI, r7
}
 800c2b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c2b8:	3601      	adds	r6, #1
 800c2ba:	b276      	sxtb	r6, r6
 800c2bc:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800c2c0:	e7f5      	b.n	800c2ae <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800c2c2:	4628      	mov	r0, r5
 800c2c4:	e7f4      	b.n	800c2b0 <xQueueReceiveFromISR+0x84>
	...

0800c2c8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2c8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c2ca:	4a07      	ldr	r2, [pc, #28]	@ (800c2e8 <vQueueAddToRegistry+0x20>)
	{
 800c2cc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c2ce:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800c2d2:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800c2d6:	b91d      	cbnz	r5, 800c2e0 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c2d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c2dc:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c2de:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	2b08      	cmp	r3, #8
 800c2e4:	d1f3      	bne.n	800c2ce <vQueueAddToRegistry+0x6>
 800c2e6:	e7fa      	b.n	800c2de <vQueueAddToRegistry+0x16>
 800c2e8:	24024c00 	.word	0x24024c00

0800c2ec <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c2ec:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2ee:	4a09      	ldr	r2, [pc, #36]	@ (800c314 <vQueueUnregisterQueue+0x28>)
	{
 800c2f0:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c2f2:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800c2f6:	00dc      	lsls	r4, r3, #3
 800c2f8:	4281      	cmp	r1, r0
 800c2fa:	d106      	bne.n	800c30a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c2fc:	4a06      	ldr	r2, [pc, #24]	@ (800c318 <vQueueUnregisterQueue+0x2c>)
 800c2fe:	2100      	movs	r1, #0
 800c300:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c304:	4422      	add	r2, r4
 800c306:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c308:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c30a:	3301      	adds	r3, #1
 800c30c:	2b08      	cmp	r3, #8
 800c30e:	d1f0      	bne.n	800c2f2 <vQueueUnregisterQueue+0x6>
 800c310:	e7fa      	b.n	800c308 <vQueueUnregisterQueue+0x1c>
 800c312:	bf00      	nop
 800c314:	24024c04 	.word	0x24024c04
 800c318:	24024c00 	.word	0x24024c00

0800c31c <vQueueDelete>:
{
 800c31c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800c31e:	b940      	cbnz	r0, 800c332 <vQueueDelete+0x16>
	__asm volatile
 800c320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c324:	f383 8811 	msr	BASEPRI, r3
 800c328:	f3bf 8f6f 	isb	sy
 800c32c:	f3bf 8f4f 	dsb	sy
 800c330:	e7fe      	b.n	800c330 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800c332:	f7ff ffdb 	bl	800c2ec <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c336:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800c33a:	b91b      	cbnz	r3, 800c344 <vQueueDelete+0x28>
}
 800c33c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800c340:	f7ff b8a4 	b.w	800b48c <vPortFree>
}
 800c344:	bd10      	pop	{r4, pc}

0800c346 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c346:	b570      	push	{r4, r5, r6, lr}
 800c348:	4604      	mov	r4, r0
 800c34a:	460d      	mov	r5, r1
 800c34c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c34e:	f7ff f981 	bl	800b654 <vPortEnterCritical>
 800c352:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c356:	2bff      	cmp	r3, #255	@ 0xff
 800c358:	d102      	bne.n	800c360 <vQueueWaitForMessageRestricted+0x1a>
 800c35a:	2300      	movs	r3, #0
 800c35c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800c360:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c364:	2bff      	cmp	r3, #255	@ 0xff
 800c366:	d102      	bne.n	800c36e <vQueueWaitForMessageRestricted+0x28>
 800c368:	2300      	movs	r3, #0
 800c36a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800c36e:	f7ff f991 	bl	800b694 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c372:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800c374:	b92b      	cbnz	r3, 800c382 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c376:	4632      	mov	r2, r6
 800c378:	4629      	mov	r1, r5
 800c37a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800c37e:	f000 fbaf 	bl	800cae0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c382:	4620      	mov	r0, r4
	}
 800c384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800c388:	f7ff baf7 	b.w	800b97a <prvUnlockQueue>

0800c38c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c38c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c390:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c392:	f7ff f95f 	bl	800b654 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c396:	4b2f      	ldr	r3, [pc, #188]	@ (800c454 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800c398:	4e2f      	ldr	r6, [pc, #188]	@ (800c458 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800c39a:	681a      	ldr	r2, [r3, #0]
 800c39c:	4f2f      	ldr	r7, [pc, #188]	@ (800c45c <prvAddNewTaskToReadyList+0xd0>)
 800c39e:	3201      	adds	r2, #1
 800c3a0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800c3a2:	6835      	ldr	r5, [r6, #0]
 800c3a4:	2d00      	cmp	r5, #0
 800c3a6:	d14a      	bne.n	800c43e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c3a8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	2b01      	cmp	r3, #1
 800c3ae:	d11f      	bne.n	800c3f0 <prvAddNewTaskToReadyList+0x64>
 800c3b0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3b2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c3b4:	4640      	mov	r0, r8
 800c3b6:	f7ff f8a7 	bl	800b508 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c3ba:	f108 0814 	add.w	r8, r8, #20
 800c3be:	2d38      	cmp	r5, #56	@ 0x38
 800c3c0:	d1f7      	bne.n	800c3b2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c3c2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800c484 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800c3c6:	4d26      	ldr	r5, [pc, #152]	@ (800c460 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800c3c8:	4640      	mov	r0, r8
 800c3ca:	f7ff f89d 	bl	800b508 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c3ce:	4628      	mov	r0, r5
 800c3d0:	f7ff f89a 	bl	800b508 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c3d4:	4823      	ldr	r0, [pc, #140]	@ (800c464 <prvAddNewTaskToReadyList+0xd8>)
 800c3d6:	f7ff f897 	bl	800b508 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c3da:	4823      	ldr	r0, [pc, #140]	@ (800c468 <prvAddNewTaskToReadyList+0xdc>)
 800c3dc:	f7ff f894 	bl	800b508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c3e0:	4822      	ldr	r0, [pc, #136]	@ (800c46c <prvAddNewTaskToReadyList+0xe0>)
 800c3e2:	f7ff f891 	bl	800b508 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c3e6:	4b22      	ldr	r3, [pc, #136]	@ (800c470 <prvAddNewTaskToReadyList+0xe4>)
 800c3e8:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c3ec:	4b21      	ldr	r3, [pc, #132]	@ (800c474 <prvAddNewTaskToReadyList+0xe8>)
 800c3ee:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800c3f0:	4a21      	ldr	r2, [pc, #132]	@ (800c478 <prvAddNewTaskToReadyList+0xec>)
 800c3f2:	6813      	ldr	r3, [r2, #0]
 800c3f4:	3301      	adds	r3, #1
 800c3f6:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800c3f8:	4a20      	ldr	r2, [pc, #128]	@ (800c47c <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c3fa:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800c3fc:	6811      	ldr	r1, [r2, #0]
 800c3fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c400:	428b      	cmp	r3, r1
 800c402:	d900      	bls.n	800c406 <prvAddNewTaskToReadyList+0x7a>
 800c404:	6013      	str	r3, [r2, #0]
 800c406:	2014      	movs	r0, #20
 800c408:	1d21      	adds	r1, r4, #4
 800c40a:	fb00 7003 	mla	r0, r0, r3, r7
 800c40e:	f7ff f889 	bl	800b524 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800c412:	f7ff f93f 	bl	800b694 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800c416:	4b1a      	ldr	r3, [pc, #104]	@ (800c480 <prvAddNewTaskToReadyList+0xf4>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	b173      	cbz	r3, 800c43a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c41c:	6833      	ldr	r3, [r6, #0]
 800c41e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c420:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c422:	429a      	cmp	r2, r3
 800c424:	d209      	bcs.n	800c43a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800c426:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c42a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c42e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c432:	f3bf 8f4f 	dsb	sy
 800c436:	f3bf 8f6f 	isb	sy
}
 800c43a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800c43e:	4b10      	ldr	r3, [pc, #64]	@ (800c480 <prvAddNewTaskToReadyList+0xf4>)
 800c440:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c442:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800c444:	2a00      	cmp	r2, #0
 800c446:	d1d3      	bne.n	800c3f0 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c448:	6832      	ldr	r2, [r6, #0]
 800c44a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c44c:	429a      	cmp	r2, r3
 800c44e:	d8cf      	bhi.n	800c3f0 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800c450:	6034      	str	r4, [r6, #0]
 800c452:	e7cd      	b.n	800c3f0 <prvAddNewTaskToReadyList+0x64>
 800c454:	24024c64 	.word	0x24024c64
 800c458:	24025138 	.word	0x24025138
 800c45c:	24024cd8 	.word	0x24024cd8
 800c460:	24024cb0 	.word	0x24024cb0
 800c464:	24024c94 	.word	0x24024c94
 800c468:	24024c80 	.word	0x24024c80
 800c46c:	24024c68 	.word	0x24024c68
 800c470:	24024cac 	.word	0x24024cac
 800c474:	24024ca8 	.word	0x24024ca8
 800c478:	24024c48 	.word	0x24024c48
 800c47c:	24024c5c 	.word	0x24024c5c
 800c480:	24024c58 	.word	0x24024c58
 800c484:	24024cc4 	.word	0x24024cc4

0800c488 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c48a:	4b15      	ldr	r3, [pc, #84]	@ (800c4e0 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800c48c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c48e:	4d15      	ldr	r5, [pc, #84]	@ (800c4e4 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800c490:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800c492:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c494:	6828      	ldr	r0, [r5, #0]
 800c496:	3004      	adds	r0, #4
 800c498:	f7ff f866 	bl	800b568 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c49c:	1c73      	adds	r3, r6, #1
 800c49e:	d107      	bne.n	800c4b0 <prvAddCurrentTaskToDelayedList+0x28>
 800c4a0:	b137      	cbz	r7, 800c4b0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4a2:	6829      	ldr	r1, [r5, #0]
 800c4a4:	4810      	ldr	r0, [pc, #64]	@ (800c4e8 <prvAddCurrentTaskToDelayedList+0x60>)
 800c4a6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c4a8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4ac:	f7ff b83a 	b.w	800b524 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c4b0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c4b2:	682b      	ldr	r3, [r5, #0]
 800c4b4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c4b6:	d307      	bcc.n	800c4c8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c4ec <prvAddCurrentTaskToDelayedList+0x64>)
 800c4ba:	6818      	ldr	r0, [r3, #0]
 800c4bc:	6829      	ldr	r1, [r5, #0]
}
 800c4be:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4c2:	3104      	adds	r1, #4
 800c4c4:	f7ff b839 	b.w	800b53a <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c4c8:	4b09      	ldr	r3, [pc, #36]	@ (800c4f0 <prvAddCurrentTaskToDelayedList+0x68>)
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	6829      	ldr	r1, [r5, #0]
 800c4ce:	3104      	adds	r1, #4
 800c4d0:	f7ff f833 	bl	800b53a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c4d4:	4b07      	ldr	r3, [pc, #28]	@ (800c4f4 <prvAddCurrentTaskToDelayedList+0x6c>)
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	42a2      	cmp	r2, r4
 800c4da:	d900      	bls.n	800c4de <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800c4dc:	601c      	str	r4, [r3, #0]
}
 800c4de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4e0:	24024c60 	.word	0x24024c60
 800c4e4:	24025138 	.word	0x24025138
 800c4e8:	24024c68 	.word	0x24024c68
 800c4ec:	24024ca8 	.word	0x24024ca8
 800c4f0:	24024cac 	.word	0x24024cac
 800c4f4:	24024c44 	.word	0x24024c44

0800c4f8 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c4f8:	4a06      	ldr	r2, [pc, #24]	@ (800c514 <prvResetNextTaskUnblockTime+0x1c>)
 800c4fa:	6813      	ldr	r3, [r2, #0]
 800c4fc:	6819      	ldr	r1, [r3, #0]
 800c4fe:	4b06      	ldr	r3, [pc, #24]	@ (800c518 <prvResetNextTaskUnblockTime+0x20>)
 800c500:	b919      	cbnz	r1, 800c50a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800c502:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c506:	601a      	str	r2, [r3, #0]
}
 800c508:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c50a:	6812      	ldr	r2, [r2, #0]
 800c50c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c50e:	68d2      	ldr	r2, [r2, #12]
 800c510:	6852      	ldr	r2, [r2, #4]
 800c512:	e7f8      	b.n	800c506 <prvResetNextTaskUnblockTime+0xe>
 800c514:	24024cac 	.word	0x24024cac
 800c518:	24024c44 	.word	0x24024c44

0800c51c <prvDeleteTCB>:
	{
 800c51c:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c51e:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
	{
 800c522:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c524:	b93b      	cbnz	r3, 800c536 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800c526:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800c528:	f7fe ffb0 	bl	800b48c <vPortFree>
				vPortFree( pxTCB );
 800c52c:	4620      	mov	r0, r4
	}
 800c52e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800c532:	f7fe bfab 	b.w	800b48c <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c536:	2b01      	cmp	r3, #1
 800c538:	d0f9      	beq.n	800c52e <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c53a:	2b02      	cmp	r3, #2
 800c53c:	d008      	beq.n	800c550 <prvDeleteTCB+0x34>
 800c53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c542:	f383 8811 	msr	BASEPRI, r3
 800c546:	f3bf 8f6f 	isb	sy
 800c54a:	f3bf 8f4f 	dsb	sy
 800c54e:	e7fe      	b.n	800c54e <prvDeleteTCB+0x32>
	}
 800c550:	bd10      	pop	{r4, pc}
	...

0800c554 <prvIdleTask>:
{
 800c554:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c556:	4c14      	ldr	r4, [pc, #80]	@ (800c5a8 <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c558:	4f14      	ldr	r7, [pc, #80]	@ (800c5ac <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800c55a:	4d15      	ldr	r5, [pc, #84]	@ (800c5b0 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c55c:	6823      	ldr	r3, [r4, #0]
 800c55e:	b983      	cbnz	r3, 800c582 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c560:	4b14      	ldr	r3, [pc, #80]	@ (800c5b4 <prvIdleTask+0x60>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	2b01      	cmp	r3, #1
 800c566:	d909      	bls.n	800c57c <prvIdleTask+0x28>
				taskYIELD();
 800c568:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c56c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c570:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c574:	f3bf 8f4f 	dsb	sy
 800c578:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800c57c:	f7f4 f8bc 	bl	80006f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800c580:	e7eb      	b.n	800c55a <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800c582:	f7ff f867 	bl	800b654 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c586:	68fb      	ldr	r3, [r7, #12]
 800c588:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c58a:	1d30      	adds	r0, r6, #4
 800c58c:	f7fe ffec 	bl	800b568 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c590:	682b      	ldr	r3, [r5, #0]
 800c592:	3b01      	subs	r3, #1
 800c594:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	3b01      	subs	r3, #1
 800c59a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800c59c:	f7ff f87a 	bl	800b694 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800c5a0:	4630      	mov	r0, r6
 800c5a2:	f7ff ffbb 	bl	800c51c <prvDeleteTCB>
 800c5a6:	e7d9      	b.n	800c55c <prvIdleTask+0x8>
 800c5a8:	24024c7c 	.word	0x24024c7c
 800c5ac:	24024c80 	.word	0x24024c80
 800c5b0:	24024c64 	.word	0x24024c64
 800c5b4:	24024cd8 	.word	0x24024cd8

0800c5b8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c5b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5bc:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c5be:	4607      	mov	r7, r0
 800c5c0:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5c2:	21a5      	movs	r1, #165	@ 0xa5
 800c5c4:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c5c6:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5c8:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800c5ca:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c5ce:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800c5d0:	f016 f81e 	bl	8022610 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c5d4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c5d6:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c5d8:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800c5dc:	b3b5      	cbz	r5, 800c64c <prvInitialiseNewTask.constprop.0+0x94>
 800c5de:	1e6b      	subs	r3, r5, #1
 800c5e0:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800c5e4:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c5e6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800c5ea:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800c5ee:	b109      	cbz	r1, 800c5f4 <prvInitialiseNewTask.constprop.0+0x3c>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c5f0:	42ab      	cmp	r3, r5
 800c5f2:	d1f8      	bne.n	800c5e6 <prvInitialiseNewTask.constprop.0+0x2e>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5f4:	2300      	movs	r3, #0
 800c5f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5fa:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800c5fc:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c600:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c602:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800c604:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c608:	bf28      	it	cs
 800c60a:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800c60c:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800c60e:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c610:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c614:	f7fe ff83 	bl	800b51e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c618:	f104 0018 	add.w	r0, r4, #24
 800c61c:	f7fe ff7f 	bl	800b51e <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800c620:	f8c4 a058 	str.w	sl, [r4, #88]	@ 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c624:	4642      	mov	r2, r8
 800c626:	4639      	mov	r1, r7
 800c628:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c62a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c62c:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c62e:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800c630:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c634:	f884 a05c 	strb.w	sl, [r4, #92]	@ 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c638:	f7fe ffe4 	bl	800b604 <pxPortInitialiseStack>
 800c63c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800c63e:	f1b9 0f00 	cmp.w	r9, #0
 800c642:	d001      	beq.n	800c648 <prvInitialiseNewTask.constprop.0+0x90>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c644:	f8c9 4000 	str.w	r4, [r9]
}
 800c648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c64c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800c650:	e7d3      	b.n	800c5fa <prvInitialiseNewTask.constprop.0+0x42>

0800c652 <xTaskCreateStatic>:
	{
 800c652:	b570      	push	{r4, r5, r6, lr}
 800c654:	b086      	sub	sp, #24
 800c656:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800c65a:	b945      	cbnz	r5, 800c66e <xTaskCreateStatic+0x1c>
 800c65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c660:	f383 8811 	msr	BASEPRI, r3
 800c664:	f3bf 8f6f 	isb	sy
 800c668:	f3bf 8f4f 	dsb	sy
 800c66c:	e7fe      	b.n	800c66c <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800c66e:	b944      	cbnz	r4, 800c682 <xTaskCreateStatic+0x30>
 800c670:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c674:	f383 8811 	msr	BASEPRI, r3
 800c678:	f3bf 8f6f 	isb	sy
 800c67c:	f3bf 8f4f 	dsb	sy
 800c680:	e7fe      	b.n	800c680 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800c682:	2660      	movs	r6, #96	@ 0x60
 800c684:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c686:	9e05      	ldr	r6, [sp, #20]
 800c688:	2e60      	cmp	r6, #96	@ 0x60
 800c68a:	d008      	beq.n	800c69e <xTaskCreateStatic+0x4c>
 800c68c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c690:	f383 8811 	msr	BASEPRI, r3
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	e7fe      	b.n	800c69c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c69e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a0:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6a2:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6a4:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6a8:	ad04      	add	r5, sp, #16
 800c6aa:	9402      	str	r4, [sp, #8]
 800c6ac:	9501      	str	r5, [sp, #4]
 800c6ae:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800c6b0:	9500      	str	r5, [sp, #0]
 800c6b2:	f7ff ff81 	bl	800c5b8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	f7ff fe68 	bl	800c38c <prvAddNewTaskToReadyList>
	}
 800c6bc:	9804      	ldr	r0, [sp, #16]
 800c6be:	b006      	add	sp, #24
 800c6c0:	bd70      	pop	{r4, r5, r6, pc}

0800c6c2 <xTaskCreate>:
	{
 800c6c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6c6:	4607      	mov	r7, r0
 800c6c8:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6ca:	0090      	lsls	r0, r2, #2
	{
 800c6cc:	4688      	mov	r8, r1
 800c6ce:	4616      	mov	r6, r2
 800c6d0:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c6d2:	f7fe fe43 	bl	800b35c <pvPortMalloc>
			if( pxStack != NULL )
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	b920      	cbnz	r0, 800c6e4 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c6da:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800c6de:	b005      	add	sp, #20
 800c6e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c6e4:	2060      	movs	r0, #96	@ 0x60
 800c6e6:	f7fe fe39 	bl	800b35c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	b198      	cbz	r0, 800c716 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6ee:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800c6f0:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6f2:	4632      	mov	r2, r6
 800c6f4:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c6f6:	f880 305d 	strb.w	r3, [r0, #93]	@ 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c6fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c6fc:	9002      	str	r0, [sp, #8]
 800c6fe:	4638      	mov	r0, r7
 800c700:	9301      	str	r3, [sp, #4]
 800c702:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c704:	9300      	str	r3, [sp, #0]
 800c706:	464b      	mov	r3, r9
 800c708:	f7ff ff56 	bl	800c5b8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c70c:	4620      	mov	r0, r4
 800c70e:	f7ff fe3d 	bl	800c38c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c712:	2001      	movs	r0, #1
 800c714:	e7e3      	b.n	800c6de <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800c716:	4628      	mov	r0, r5
 800c718:	f7fe feb8 	bl	800b48c <vPortFree>
		if( pxNewTCB != NULL )
 800c71c:	e7dd      	b.n	800c6da <xTaskCreate+0x18>
	...

0800c720 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800c720:	4a02      	ldr	r2, [pc, #8]	@ (800c72c <vTaskSuspendAll+0xc>)
 800c722:	6813      	ldr	r3, [r2, #0]
 800c724:	3301      	adds	r3, #1
 800c726:	6013      	str	r3, [r2, #0]
}
 800c728:	4770      	bx	lr
 800c72a:	bf00      	nop
 800c72c:	24024c40 	.word	0x24024c40

0800c730 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800c730:	4b01      	ldr	r3, [pc, #4]	@ (800c738 <xTaskGetTickCount+0x8>)
 800c732:	6818      	ldr	r0, [r3, #0]
}
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	24024c60 	.word	0x24024c60

0800c73c <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c73c:	4b3f      	ldr	r3, [pc, #252]	@ (800c83c <xTaskIncrementTick+0x100>)
 800c73e:	681b      	ldr	r3, [r3, #0]
{
 800c740:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c744:	2b00      	cmp	r3, #0
 800c746:	d172      	bne.n	800c82e <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c748:	4b3d      	ldr	r3, [pc, #244]	@ (800c840 <xTaskIncrementTick+0x104>)
 800c74a:	681c      	ldr	r4, [r3, #0]
 800c74c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800c74e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c750:	b9bc      	cbnz	r4, 800c782 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800c752:	4b3c      	ldr	r3, [pc, #240]	@ (800c844 <xTaskIncrementTick+0x108>)
 800c754:	681a      	ldr	r2, [r3, #0]
 800c756:	6812      	ldr	r2, [r2, #0]
 800c758:	b142      	cbz	r2, 800c76c <xTaskIncrementTick+0x30>
 800c75a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75e:	f383 8811 	msr	BASEPRI, r3
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	f3bf 8f4f 	dsb	sy
 800c76a:	e7fe      	b.n	800c76a <xTaskIncrementTick+0x2e>
 800c76c:	4a36      	ldr	r2, [pc, #216]	@ (800c848 <xTaskIncrementTick+0x10c>)
 800c76e:	6819      	ldr	r1, [r3, #0]
 800c770:	6810      	ldr	r0, [r2, #0]
 800c772:	6018      	str	r0, [r3, #0]
 800c774:	6011      	str	r1, [r2, #0]
 800c776:	4a35      	ldr	r2, [pc, #212]	@ (800c84c <xTaskIncrementTick+0x110>)
 800c778:	6813      	ldr	r3, [r2, #0]
 800c77a:	3301      	adds	r3, #1
 800c77c:	6013      	str	r3, [r2, #0]
 800c77e:	f7ff febb 	bl	800c4f8 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c782:	4d33      	ldr	r5, [pc, #204]	@ (800c850 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800c784:	f04f 0b00 	mov.w	fp, #0
 800c788:	4e32      	ldr	r6, [pc, #200]	@ (800c854 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c78a:	682b      	ldr	r3, [r5, #0]
 800c78c:	4f32      	ldr	r7, [pc, #200]	@ (800c858 <xTaskIncrementTick+0x11c>)
 800c78e:	429c      	cmp	r4, r3
 800c790:	d212      	bcs.n	800c7b8 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c792:	683a      	ldr	r2, [r7, #0]
 800c794:	2114      	movs	r1, #20
 800c796:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c798:	434a      	muls	r2, r1
 800c79a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800c79c:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800c79e:	4a2f      	ldr	r2, [pc, #188]	@ (800c85c <xTaskIncrementTick+0x120>)
 800c7a0:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800c7a2:	bf28      	it	cs
 800c7a4:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800c7a8:	2a00      	cmp	r2, #0
 800c7aa:	bf18      	it	ne
 800c7ac:	f04f 0b01 	movne.w	fp, #1
}
 800c7b0:	4658      	mov	r0, fp
 800c7b2:	b003      	add	sp, #12
 800c7b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7b8:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800c844 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800c7bc:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800c864 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c7c0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7c4:	6812      	ldr	r2, [r2, #0]
 800c7c6:	b91a      	cbnz	r2, 800c7d0 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c8:	f04f 32ff 	mov.w	r2, #4294967295
 800c7cc:	602a      	str	r2, [r5, #0]
					break;
 800c7ce:	e7e0      	b.n	800c792 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c7d0:	f8d9 2000 	ldr.w	r2, [r9]
 800c7d4:	68d2      	ldr	r2, [r2, #12]
 800c7d6:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c7da:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800c7de:	428c      	cmp	r4, r1
 800c7e0:	d201      	bcs.n	800c7e6 <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800c7e2:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c7e4:	e7d5      	b.n	800c792 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c7e6:	f108 0304 	add.w	r3, r8, #4
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	f7fe febb 	bl	800b568 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c7f2:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800c7f6:	b119      	cbz	r1, 800c800 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c7f8:	f108 0018 	add.w	r0, r8, #24
 800c7fc:	f7fe feb4 	bl	800b568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c800:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800c804:	f8da 1000 	ldr.w	r1, [sl]
 800c808:	4288      	cmp	r0, r1
 800c80a:	d901      	bls.n	800c810 <xTaskIncrementTick+0xd4>
 800c80c:	f8ca 0000 	str.w	r0, [sl]
 800c810:	2314      	movs	r3, #20
 800c812:	9901      	ldr	r1, [sp, #4]
 800c814:	fb03 6000 	mla	r0, r3, r0, r6
 800c818:	f7fe fe84 	bl	800b524 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c81c:	6838      	ldr	r0, [r7, #0]
 800c81e:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800c822:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800c824:	4291      	cmp	r1, r2
 800c826:	bf28      	it	cs
 800c828:	f04f 0b01 	movcs.w	fp, #1
 800c82c:	e7c8      	b.n	800c7c0 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800c82e:	4a0c      	ldr	r2, [pc, #48]	@ (800c860 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800c830:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800c834:	6813      	ldr	r3, [r2, #0]
 800c836:	3301      	adds	r3, #1
 800c838:	6013      	str	r3, [r2, #0]
 800c83a:	e7b9      	b.n	800c7b0 <xTaskIncrementTick+0x74>
 800c83c:	24024c40 	.word	0x24024c40
 800c840:	24024c60 	.word	0x24024c60
 800c844:	24024cac 	.word	0x24024cac
 800c848:	24024ca8 	.word	0x24024ca8
 800c84c:	24024c4c 	.word	0x24024c4c
 800c850:	24024c44 	.word	0x24024c44
 800c854:	24024cd8 	.word	0x24024cd8
 800c858:	24025138 	.word	0x24025138
 800c85c:	24024c50 	.word	0x24024c50
 800c860:	24024c54 	.word	0x24024c54
 800c864:	24024c5c 	.word	0x24024c5c

0800c868 <xTaskResumeAll>:
{
 800c868:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800c86c:	4c30      	ldr	r4, [pc, #192]	@ (800c930 <xTaskResumeAll+0xc8>)
 800c86e:	6823      	ldr	r3, [r4, #0]
 800c870:	b943      	cbnz	r3, 800c884 <xTaskResumeAll+0x1c>
 800c872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c876:	f383 8811 	msr	BASEPRI, r3
 800c87a:	f3bf 8f6f 	isb	sy
 800c87e:	f3bf 8f4f 	dsb	sy
 800c882:	e7fe      	b.n	800c882 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800c884:	f7fe fee6 	bl	800b654 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800c888:	6823      	ldr	r3, [r4, #0]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c88e:	6824      	ldr	r4, [r4, #0]
 800c890:	b12c      	cbz	r4, 800c89e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800c892:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800c894:	f7fe fefe 	bl	800b694 <vPortExitCritical>
}
 800c898:	4620      	mov	r0, r4
 800c89a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c89e:	4b25      	ldr	r3, [pc, #148]	@ (800c934 <xTaskResumeAll+0xcc>)
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d0f5      	beq.n	800c892 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8a6:	4d24      	ldr	r5, [pc, #144]	@ (800c938 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800c8a8:	4e24      	ldr	r6, [pc, #144]	@ (800c93c <xTaskResumeAll+0xd4>)
 800c8aa:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800c94c <xTaskResumeAll+0xe4>
 800c8ae:	e01d      	b.n	800c8ec <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c8b0:	68eb      	ldr	r3, [r5, #12]
 800c8b2:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8b4:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8b6:	f104 0018 	add.w	r0, r4, #24
 800c8ba:	f7fe fe55 	bl	800b568 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c8be:	4638      	mov	r0, r7
 800c8c0:	f7fe fe52 	bl	800b568 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c8c4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800c8c6:	6832      	ldr	r2, [r6, #0]
 800c8c8:	4293      	cmp	r3, r2
 800c8ca:	d900      	bls.n	800c8ce <xTaskResumeAll+0x66>
 800c8cc:	6033      	str	r3, [r6, #0]
 800c8ce:	2014      	movs	r0, #20
 800c8d0:	4639      	mov	r1, r7
 800c8d2:	fb00 8003 	mla	r0, r0, r3, r8
 800c8d6:	f7fe fe25 	bl	800b524 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c8da:	4b19      	ldr	r3, [pc, #100]	@ (800c940 <xTaskResumeAll+0xd8>)
 800c8dc:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d302      	bcc.n	800c8ec <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800c8e6:	4b17      	ldr	r3, [pc, #92]	@ (800c944 <xTaskResumeAll+0xdc>)
 800c8e8:	2201      	movs	r2, #1
 800c8ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1de      	bne.n	800c8b0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800c8f2:	b10c      	cbz	r4, 800c8f8 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800c8f4:	f7ff fe00 	bl	800c4f8 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c8f8:	4d13      	ldr	r5, [pc, #76]	@ (800c948 <xTaskResumeAll+0xe0>)
 800c8fa:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800c8fc:	b144      	cbz	r4, 800c910 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800c8fe:	4e11      	ldr	r6, [pc, #68]	@ (800c944 <xTaskResumeAll+0xdc>)
 800c900:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800c902:	f7ff ff1b 	bl	800c73c <xTaskIncrementTick>
 800c906:	b100      	cbz	r0, 800c90a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800c908:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c90a:	3c01      	subs	r4, #1
 800c90c:	d1f9      	bne.n	800c902 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800c90e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800c910:	4b0c      	ldr	r3, [pc, #48]	@ (800c944 <xTaskResumeAll+0xdc>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d0bc      	beq.n	800c892 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800c918:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c91c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c920:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c924:	f3bf 8f4f 	dsb	sy
 800c928:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800c92c:	2401      	movs	r4, #1
 800c92e:	e7b1      	b.n	800c894 <xTaskResumeAll+0x2c>
 800c930:	24024c40 	.word	0x24024c40
 800c934:	24024c64 	.word	0x24024c64
 800c938:	24024c94 	.word	0x24024c94
 800c93c:	24024c5c 	.word	0x24024c5c
 800c940:	24025138 	.word	0x24025138
 800c944:	24024c50 	.word	0x24024c50
 800c948:	24024c54 	.word	0x24024c54
 800c94c:	24024cd8 	.word	0x24024cd8

0800c950 <vTaskSetApplicationTaskTag>:
	{
 800c950:	b538      	push	{r3, r4, r5, lr}
 800c952:	460d      	mov	r5, r1
		if( xTask == NULL )
 800c954:	4604      	mov	r4, r0
 800c956:	b908      	cbnz	r0, 800c95c <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800c958:	4b04      	ldr	r3, [pc, #16]	@ (800c96c <vTaskSetApplicationTaskTag+0x1c>)
 800c95a:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800c95c:	f7fe fe7a 	bl	800b654 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800c960:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800c962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800c966:	f7fe be95 	b.w	800b694 <vPortExitCritical>
 800c96a:	bf00      	nop
 800c96c:	24025138 	.word	0x24025138

0800c970 <xTaskCallApplicationTaskHook>:
	{
 800c970:	4603      	mov	r3, r0
 800c972:	4608      	mov	r0, r1
		if( xTask == NULL )
 800c974:	b90b      	cbnz	r3, 800c97a <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800c976:	4b03      	ldr	r3, [pc, #12]	@ (800c984 <xTaskCallApplicationTaskHook+0x14>)
 800c978:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800c97a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c97c:	b103      	cbz	r3, 800c980 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800c97e:	4718      	bx	r3
	}
 800c980:	4618      	mov	r0, r3
 800c982:	4770      	bx	lr
 800c984:	24025138 	.word	0x24025138

0800c988 <vTaskStartScheduler>:
{
 800c988:	b510      	push	{r4, lr}
 800c98a:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c98c:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c98e:	aa07      	add	r2, sp, #28
 800c990:	a906      	add	r1, sp, #24
 800c992:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c994:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c998:	f7fe fca2 	bl	800b2e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c99c:	9b05      	ldr	r3, [sp, #20]
 800c99e:	9a07      	ldr	r2, [sp, #28]
 800c9a0:	9302      	str	r3, [sp, #8]
 800c9a2:	9b06      	ldr	r3, [sp, #24]
 800c9a4:	4919      	ldr	r1, [pc, #100]	@ (800ca0c <vTaskStartScheduler+0x84>)
 800c9a6:	481a      	ldr	r0, [pc, #104]	@ (800ca10 <vTaskStartScheduler+0x88>)
 800c9a8:	e9cd 4300 	strd	r4, r3, [sp]
 800c9ac:	4623      	mov	r3, r4
 800c9ae:	f7ff fe50 	bl	800c652 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800c9b2:	b340      	cbz	r0, 800ca06 <vTaskStartScheduler+0x7e>
			xReturn = xTimerCreateTimerTask();
 800c9b4:	f000 fa84 	bl	800cec0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800c9b8:	2801      	cmp	r0, #1
 800c9ba:	d119      	bne.n	800c9f0 <vTaskStartScheduler+0x68>
 800c9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c0:	f383 8811 	msr	BASEPRI, r3
 800c9c4:	f3bf 8f6f 	isb	sy
 800c9c8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800c9d0:	4b10      	ldr	r3, [pc, #64]	@ (800ca14 <vTaskStartScheduler+0x8c>)
		traceTASK_SWITCHED_IN();
 800c9d2:	4621      	mov	r1, r4
		xNextTaskUnblockTime = portMAX_DELAY;
 800c9d4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c9d6:	4b10      	ldr	r3, [pc, #64]	@ (800ca18 <vTaskStartScheduler+0x90>)
 800c9d8:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c9da:	4b10      	ldr	r3, [pc, #64]	@ (800ca1c <vTaskStartScheduler+0x94>)
 800c9dc:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800c9de:	4b10      	ldr	r3, [pc, #64]	@ (800ca20 <vTaskStartScheduler+0x98>)
 800c9e0:	6818      	ldr	r0, [r3, #0]
 800c9e2:	f7ff ffc5 	bl	800c970 <xTaskCallApplicationTaskHook>
}
 800c9e6:	b008      	add	sp, #32
 800c9e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800c9ec:	f7fe bec2 	b.w	800b774 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d108      	bne.n	800ca06 <vTaskStartScheduler+0x7e>
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
 800ca04:	e7fe      	b.n	800ca04 <vTaskStartScheduler+0x7c>
}
 800ca06:	b008      	add	sp, #32
 800ca08:	bd10      	pop	{r4, pc}
 800ca0a:	bf00      	nop
 800ca0c:	0802583c 	.word	0x0802583c
 800ca10:	0800c555 	.word	0x0800c555
 800ca14:	24024c44 	.word	0x24024c44
 800ca18:	24024c58 	.word	0x24024c58
 800ca1c:	24024c60 	.word	0x24024c60
 800ca20:	24025138 	.word	0x24025138

0800ca24 <vTaskSwitchContext>:
{
 800ca24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ca26:	4b1c      	ldr	r3, [pc, #112]	@ (800ca98 <vTaskSwitchContext+0x74>)
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	4b1c      	ldr	r3, [pc, #112]	@ (800ca9c <vTaskSwitchContext+0x78>)
 800ca2c:	b112      	cbz	r2, 800ca34 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800ca2e:	2201      	movs	r2, #1
 800ca30:	601a      	str	r2, [r3, #0]
}
 800ca32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800ca34:	4c1a      	ldr	r4, [pc, #104]	@ (800caa0 <vTaskSwitchContext+0x7c>)
 800ca36:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca38:	4e1a      	ldr	r6, [pc, #104]	@ (800caa4 <vTaskSwitchContext+0x80>)
 800ca3a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800ca3c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800ca3e:	6820      	ldr	r0, [r4, #0]
 800ca40:	f7ff ff96 	bl	800c970 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca44:	6832      	ldr	r2, [r6, #0]
 800ca46:	4918      	ldr	r1, [pc, #96]	@ (800caa8 <vTaskSwitchContext+0x84>)
 800ca48:	fb07 f302 	mul.w	r3, r7, r2
 800ca4c:	58cd      	ldr	r5, [r1, r3]
 800ca4e:	18c8      	adds	r0, r1, r3
 800ca50:	b1ad      	cbz	r5, 800ca7e <vTaskSwitchContext+0x5a>
 800ca52:	6845      	ldr	r5, [r0, #4]
 800ca54:	3308      	adds	r3, #8
 800ca56:	686d      	ldr	r5, [r5, #4]
 800ca58:	440b      	add	r3, r1
 800ca5a:	429d      	cmp	r5, r3
 800ca5c:	6045      	str	r5, [r0, #4]
 800ca5e:	bf04      	itt	eq
 800ca60:	686b      	ldreq	r3, [r5, #4]
 800ca62:	6043      	streq	r3, [r0, #4]
 800ca64:	2314      	movs	r3, #20
 800ca66:	fb03 1102 	mla	r1, r3, r2, r1
 800ca6a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800ca6c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	6023      	str	r3, [r4, #0]
 800ca72:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800ca74:	6820      	ldr	r0, [r4, #0]
}
 800ca76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 800ca7a:	f7ff bf79 	b.w	800c970 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ca7e:	b942      	cbnz	r2, 800ca92 <vTaskSwitchContext+0x6e>
 800ca80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca84:	f383 8811 	msr	BASEPRI, r3
 800ca88:	f3bf 8f6f 	isb	sy
 800ca8c:	f3bf 8f4f 	dsb	sy
 800ca90:	e7fe      	b.n	800ca90 <vTaskSwitchContext+0x6c>
 800ca92:	3a01      	subs	r2, #1
 800ca94:	e7d8      	b.n	800ca48 <vTaskSwitchContext+0x24>
 800ca96:	bf00      	nop
 800ca98:	24024c40 	.word	0x24024c40
 800ca9c:	24024c50 	.word	0x24024c50
 800caa0:	24025138 	.word	0x24025138
 800caa4:	24024c5c 	.word	0x24024c5c
 800caa8:	24024cd8 	.word	0x24024cd8

0800caac <vTaskPlaceOnEventList>:
{
 800caac:	b510      	push	{r4, lr}
 800caae:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800cab0:	b940      	cbnz	r0, 800cac4 <vTaskPlaceOnEventList+0x18>
 800cab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cab6:	f383 8811 	msr	BASEPRI, r3
 800caba:	f3bf 8f6f 	isb	sy
 800cabe:	f3bf 8f4f 	dsb	sy
 800cac2:	e7fe      	b.n	800cac2 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cac4:	4b05      	ldr	r3, [pc, #20]	@ (800cadc <vTaskPlaceOnEventList+0x30>)
 800cac6:	6819      	ldr	r1, [r3, #0]
 800cac8:	3118      	adds	r1, #24
 800caca:	f7fe fd36 	bl	800b53a <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cace:	4620      	mov	r0, r4
 800cad0:	2101      	movs	r1, #1
}
 800cad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cad6:	f7ff bcd7 	b.w	800c488 <prvAddCurrentTaskToDelayedList>
 800cada:	bf00      	nop
 800cadc:	24025138 	.word	0x24025138

0800cae0 <vTaskPlaceOnEventListRestricted>:
	{
 800cae0:	b538      	push	{r3, r4, r5, lr}
 800cae2:	460d      	mov	r5, r1
 800cae4:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800cae6:	b940      	cbnz	r0, 800cafa <vTaskPlaceOnEventListRestricted+0x1a>
 800cae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caec:	f383 8811 	msr	BASEPRI, r3
 800caf0:	f3bf 8f6f 	isb	sy
 800caf4:	f3bf 8f4f 	dsb	sy
 800caf8:	e7fe      	b.n	800caf8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cafa:	4b07      	ldr	r3, [pc, #28]	@ (800cb18 <vTaskPlaceOnEventListRestricted+0x38>)
 800cafc:	6819      	ldr	r1, [r3, #0]
 800cafe:	3118      	adds	r1, #24
 800cb00:	f7fe fd10 	bl	800b524 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800cb04:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb06:	4621      	mov	r1, r4
 800cb08:	bf0c      	ite	eq
 800cb0a:	4628      	moveq	r0, r5
 800cb0c:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800cb10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cb14:	f7ff bcb8 	b.w	800c488 <prvAddCurrentTaskToDelayedList>
 800cb18:	24025138 	.word	0x24025138

0800cb1c <xTaskRemoveFromEventList>:
{
 800cb1c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb1e:	68c3      	ldr	r3, [r0, #12]
 800cb20:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800cb22:	b944      	cbnz	r4, 800cb36 <xTaskRemoveFromEventList+0x1a>
 800cb24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb28:	f383 8811 	msr	BASEPRI, r3
 800cb2c:	f3bf 8f6f 	isb	sy
 800cb30:	f3bf 8f4f 	dsb	sy
 800cb34:	e7fe      	b.n	800cb34 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cb36:	f104 0518 	add.w	r5, r4, #24
 800cb3a:	4628      	mov	r0, r5
 800cb3c:	f7fe fd14 	bl	800b568 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb40:	4b11      	ldr	r3, [pc, #68]	@ (800cb88 <xTaskRemoveFromEventList+0x6c>)
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	b9d3      	cbnz	r3, 800cb7c <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cb46:	1d25      	adds	r5, r4, #4
 800cb48:	4628      	mov	r0, r5
 800cb4a:	f7fe fd0d 	bl	800b568 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cb4e:	4a0f      	ldr	r2, [pc, #60]	@ (800cb8c <xTaskRemoveFromEventList+0x70>)
 800cb50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cb52:	6811      	ldr	r1, [r2, #0]
 800cb54:	428b      	cmp	r3, r1
 800cb56:	d900      	bls.n	800cb5a <xTaskRemoveFromEventList+0x3e>
 800cb58:	6013      	str	r3, [r2, #0]
 800cb5a:	2014      	movs	r0, #20
 800cb5c:	4a0c      	ldr	r2, [pc, #48]	@ (800cb90 <xTaskRemoveFromEventList+0x74>)
 800cb5e:	4629      	mov	r1, r5
 800cb60:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb64:	f7fe fcde 	bl	800b524 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cb68:	4b0a      	ldr	r3, [pc, #40]	@ (800cb94 <xTaskRemoveFromEventList+0x78>)
 800cb6a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d906      	bls.n	800cb82 <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800cb74:	2001      	movs	r0, #1
 800cb76:	4b08      	ldr	r3, [pc, #32]	@ (800cb98 <xTaskRemoveFromEventList+0x7c>)
 800cb78:	6018      	str	r0, [r3, #0]
}
 800cb7a:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cb7c:	4629      	mov	r1, r5
 800cb7e:	4807      	ldr	r0, [pc, #28]	@ (800cb9c <xTaskRemoveFromEventList+0x80>)
 800cb80:	e7f0      	b.n	800cb64 <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800cb82:	2000      	movs	r0, #0
	return xReturn;
 800cb84:	e7f9      	b.n	800cb7a <xTaskRemoveFromEventList+0x5e>
 800cb86:	bf00      	nop
 800cb88:	24024c40 	.word	0x24024c40
 800cb8c:	24024c5c 	.word	0x24024c5c
 800cb90:	24024cd8 	.word	0x24024cd8
 800cb94:	24025138 	.word	0x24025138
 800cb98:	24024c50 	.word	0x24024c50
 800cb9c:	24024c94 	.word	0x24024c94

0800cba0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cba0:	4b03      	ldr	r3, [pc, #12]	@ (800cbb0 <vTaskInternalSetTimeOutState+0x10>)
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cba6:	4b03      	ldr	r3, [pc, #12]	@ (800cbb4 <vTaskInternalSetTimeOutState+0x14>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	6043      	str	r3, [r0, #4]
}
 800cbac:	4770      	bx	lr
 800cbae:	bf00      	nop
 800cbb0:	24024c4c 	.word	0x24024c4c
 800cbb4:	24024c60 	.word	0x24024c60

0800cbb8 <xTaskCheckForTimeOut>:
{
 800cbb8:	b570      	push	{r4, r5, r6, lr}
 800cbba:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800cbbc:	4605      	mov	r5, r0
 800cbbe:	b940      	cbnz	r0, 800cbd2 <xTaskCheckForTimeOut+0x1a>
 800cbc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbc4:	f383 8811 	msr	BASEPRI, r3
 800cbc8:	f3bf 8f6f 	isb	sy
 800cbcc:	f3bf 8f4f 	dsb	sy
 800cbd0:	e7fe      	b.n	800cbd0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800cbd2:	b941      	cbnz	r1, 800cbe6 <xTaskCheckForTimeOut+0x2e>
 800cbd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd8:	f383 8811 	msr	BASEPRI, r3
 800cbdc:	f3bf 8f6f 	isb	sy
 800cbe0:	f3bf 8f4f 	dsb	sy
 800cbe4:	e7fe      	b.n	800cbe4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800cbe6:	f7fe fd35 	bl	800b654 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800cbea:	4b0f      	ldr	r3, [pc, #60]	@ (800cc28 <xTaskCheckForTimeOut+0x70>)
 800cbec:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800cbee:	6823      	ldr	r3, [r4, #0]
 800cbf0:	1c5a      	adds	r2, r3, #1
 800cbf2:	d010      	beq.n	800cc16 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbf4:	480d      	ldr	r0, [pc, #52]	@ (800cc2c <xTaskCheckForTimeOut+0x74>)
 800cbf6:	682e      	ldr	r6, [r5, #0]
 800cbf8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cbfa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cbfc:	4286      	cmp	r6, r0
 800cbfe:	d001      	beq.n	800cc04 <xTaskCheckForTimeOut+0x4c>
 800cc00:	428a      	cmp	r2, r1
 800cc02:	d90f      	bls.n	800cc24 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cc04:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cc06:	4283      	cmp	r3, r0
 800cc08:	d90a      	bls.n	800cc20 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800cc0a:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc0c:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800cc0e:	4413      	add	r3, r2
 800cc10:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cc12:	f7ff ffc5 	bl	800cba0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800cc16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800cc18:	f7fe fd3c 	bl	800b694 <vPortExitCritical>
}
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800cc20:	2300      	movs	r3, #0
 800cc22:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800cc24:	2401      	movs	r4, #1
 800cc26:	e7f7      	b.n	800cc18 <xTaskCheckForTimeOut+0x60>
 800cc28:	24024c60 	.word	0x24024c60
 800cc2c:	24024c4c 	.word	0x24024c4c

0800cc30 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800cc30:	4b01      	ldr	r3, [pc, #4]	@ (800cc38 <vTaskMissedYield+0x8>)
 800cc32:	2201      	movs	r2, #1
 800cc34:	601a      	str	r2, [r3, #0]
}
 800cc36:	4770      	bx	lr
 800cc38:	24024c50 	.word	0x24024c50

0800cc3c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800cc3c:	4b01      	ldr	r3, [pc, #4]	@ (800cc44 <xTaskGetCurrentTaskHandle+0x8>)
 800cc3e:	6818      	ldr	r0, [r3, #0]
	}
 800cc40:	4770      	bx	lr
 800cc42:	bf00      	nop
 800cc44:	24025138 	.word	0x24025138

0800cc48 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800cc48:	4b05      	ldr	r3, [pc, #20]	@ (800cc60 <xTaskGetSchedulerState+0x18>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	b133      	cbz	r3, 800cc5c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc4e:	4b05      	ldr	r3, [pc, #20]	@ (800cc64 <xTaskGetSchedulerState+0x1c>)
 800cc50:	6818      	ldr	r0, [r3, #0]
 800cc52:	fab0 f080 	clz	r0, r0
 800cc56:	0940      	lsrs	r0, r0, #5
 800cc58:	0040      	lsls	r0, r0, #1
 800cc5a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cc5c:	2001      	movs	r0, #1
	}
 800cc5e:	4770      	bx	lr
 800cc60:	24024c58 	.word	0x24024c58
 800cc64:	24024c40 	.word	0x24024c40

0800cc68 <xTaskPriorityInherit>:
	{
 800cc68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800cc6a:	4604      	mov	r4, r0
 800cc6c:	b338      	cbz	r0, 800ccbe <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cc6e:	4d1a      	ldr	r5, [pc, #104]	@ (800ccd8 <xTaskPriorityInherit+0x70>)
 800cc70:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cc72:	682a      	ldr	r2, [r5, #0]
 800cc74:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cc76:	4293      	cmp	r3, r2
 800cc78:	d226      	bcs.n	800ccc8 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cc7a:	6982      	ldr	r2, [r0, #24]
 800cc7c:	2a00      	cmp	r2, #0
 800cc7e:	db04      	blt.n	800cc8a <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc80:	682a      	ldr	r2, [r5, #0]
 800cc82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800cc84:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800cc88:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cc8a:	2214      	movs	r2, #20
 800cc8c:	4e13      	ldr	r6, [pc, #76]	@ (800ccdc <xTaskPriorityInherit+0x74>)
 800cc8e:	fb02 6303 	mla	r3, r2, r3, r6
 800cc92:	6962      	ldr	r2, [r4, #20]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d113      	bne.n	800ccc0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc98:	1d27      	adds	r7, r4, #4
 800cc9a:	4638      	mov	r0, r7
 800cc9c:	f7fe fc64 	bl	800b568 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cca0:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cca2:	4a0f      	ldr	r2, [pc, #60]	@ (800cce0 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800cca6:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800cca8:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ccaa:	428b      	cmp	r3, r1
 800ccac:	d900      	bls.n	800ccb0 <xTaskPriorityInherit+0x48>
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	2014      	movs	r0, #20
 800ccb2:	4639      	mov	r1, r7
 800ccb4:	fb00 6003 	mla	r0, r0, r3, r6
 800ccb8:	f7fe fc34 	bl	800b524 <vListInsertEnd>
				xReturn = pdTRUE;
 800ccbc:	2001      	movs	r0, #1
	}
 800ccbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ccc0:	682b      	ldr	r3, [r5, #0]
 800ccc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ccc6:	e7f9      	b.n	800ccbc <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ccc8:	682b      	ldr	r3, [r5, #0]
 800ccca:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800cccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ccce:	4298      	cmp	r0, r3
 800ccd0:	bf2c      	ite	cs
 800ccd2:	2000      	movcs	r0, #0
 800ccd4:	2001      	movcc	r0, #1
 800ccd6:	e7f2      	b.n	800ccbe <xTaskPriorityInherit+0x56>
 800ccd8:	24025138 	.word	0x24025138
 800ccdc:	24024cd8 	.word	0x24024cd8
 800cce0:	24024c5c 	.word	0x24024c5c

0800cce4 <xTaskPriorityDisinherit>:
	{
 800cce4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800cce6:	b908      	cbnz	r0, 800ccec <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800cce8:	2000      	movs	r0, #0
	}
 800ccea:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800ccec:	4b1b      	ldr	r3, [pc, #108]	@ (800cd5c <xTaskPriorityDisinherit+0x78>)
 800ccee:	681c      	ldr	r4, [r3, #0]
 800ccf0:	4284      	cmp	r4, r0
 800ccf2:	d008      	beq.n	800cd06 <xTaskPriorityDisinherit+0x22>
 800ccf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccf8:	f383 8811 	msr	BASEPRI, r3
 800ccfc:	f3bf 8f6f 	isb	sy
 800cd00:	f3bf 8f4f 	dsb	sy
 800cd04:	e7fe      	b.n	800cd04 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd06:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800cd08:	b943      	cbnz	r3, 800cd1c <xTaskPriorityDisinherit+0x38>
 800cd0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd0e:	f383 8811 	msr	BASEPRI, r3
 800cd12:	f3bf 8f6f 	isb	sy
 800cd16:	f3bf 8f4f 	dsb	sy
 800cd1a:	e7fe      	b.n	800cd1a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd1c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800cd1e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd20:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800cd22:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800cd24:	4291      	cmp	r1, r2
 800cd26:	d0df      	beq.n	800cce8 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d1dd      	bne.n	800cce8 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cd2c:	1d25      	adds	r5, r4, #4
 800cd2e:	4628      	mov	r0, r5
 800cd30:	f7fe fc1a 	bl	800b568 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd34:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800cd3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd3c:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800cd3e:	4a08      	ldr	r2, [pc, #32]	@ (800cd60 <xTaskPriorityDisinherit+0x7c>)
 800cd40:	6811      	ldr	r1, [r2, #0]
 800cd42:	428b      	cmp	r3, r1
 800cd44:	d900      	bls.n	800cd48 <xTaskPriorityDisinherit+0x64>
 800cd46:	6013      	str	r3, [r2, #0]
 800cd48:	4a06      	ldr	r2, [pc, #24]	@ (800cd64 <xTaskPriorityDisinherit+0x80>)
 800cd4a:	2014      	movs	r0, #20
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	fb00 2003 	mla	r0, r0, r3, r2
 800cd52:	f7fe fbe7 	bl	800b524 <vListInsertEnd>
					xReturn = pdTRUE;
 800cd56:	2001      	movs	r0, #1
		return xReturn;
 800cd58:	e7c7      	b.n	800ccea <xTaskPriorityDisinherit+0x6>
 800cd5a:	bf00      	nop
 800cd5c:	24025138 	.word	0x24025138
 800cd60:	24024c5c 	.word	0x24024c5c
 800cd64:	24024cd8 	.word	0x24024cd8

0800cd68 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800cd68:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800cd6a:	4604      	mov	r4, r0
 800cd6c:	2800      	cmp	r0, #0
 800cd6e:	d042      	beq.n	800cdf6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800cd70:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800cd72:	b942      	cbnz	r2, 800cd86 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800cd74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd78:	f383 8811 	msr	BASEPRI, r3
 800cd7c:	f3bf 8f6f 	isb	sy
 800cd80:	f3bf 8f4f 	dsb	sy
 800cd84:	e7fe      	b.n	800cd84 <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800cd86:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800cd88:	4299      	cmp	r1, r3
 800cd8a:	bf38      	it	cc
 800cd8c:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800cd8e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800cd90:	428b      	cmp	r3, r1
 800cd92:	d030      	beq.n	800cdf6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800cd94:	2a01      	cmp	r2, #1
 800cd96:	d12e      	bne.n	800cdf6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800cd98:	4a17      	ldr	r2, [pc, #92]	@ (800cdf8 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800cd9a:	6812      	ldr	r2, [r2, #0]
 800cd9c:	4282      	cmp	r2, r0
 800cd9e:	d108      	bne.n	800cdb2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800cda0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cda4:	f383 8811 	msr	BASEPRI, r3
 800cda8:	f3bf 8f6f 	isb	sy
 800cdac:	f3bf 8f4f 	dsb	sy
 800cdb0:	e7fe      	b.n	800cdb0 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdb2:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdb4:	4d11      	ldr	r5, [pc, #68]	@ (800cdfc <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cdb6:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdb8:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800cdbc:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdbe:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdc2:	bfa8      	it	ge
 800cdc4:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdc8:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdca:	bfa8      	it	ge
 800cdcc:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d111      	bne.n	800cdf6 <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cdd2:	1d06      	adds	r6, r0, #4
 800cdd4:	4630      	mov	r0, r6
 800cdd6:	f7fe fbc7 	bl	800b568 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800cdda:	4a09      	ldr	r2, [pc, #36]	@ (800ce00 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800cddc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800cdde:	6811      	ldr	r1, [r2, #0]
 800cde0:	428b      	cmp	r3, r1
 800cde2:	d900      	bls.n	800cde6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	2014      	movs	r0, #20
 800cde8:	4631      	mov	r1, r6
 800cdea:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800cdee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800cdf2:	f7fe bb97 	b.w	800b524 <vListInsertEnd>
	}
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	24025138 	.word	0x24025138
 800cdfc:	24024cd8 	.word	0x24024cd8
 800ce00:	24024c5c 	.word	0x24024c5c

0800ce04 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800ce04:	4b04      	ldr	r3, [pc, #16]	@ (800ce18 <pvTaskIncrementMutexHeldCount+0x14>)
 800ce06:	681a      	ldr	r2, [r3, #0]
 800ce08:	b11a      	cbz	r2, 800ce12 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800ce0a:	6819      	ldr	r1, [r3, #0]
 800ce0c:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800ce0e:	3201      	adds	r2, #1
 800ce10:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800ce12:	6818      	ldr	r0, [r3, #0]
	}
 800ce14:	4770      	bx	lr
 800ce16:	bf00      	nop
 800ce18:	24025138 	.word	0x24025138

0800ce1c <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800ce1c:	4291      	cmp	r1, r2
{
 800ce1e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ce20:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ce22:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800ce24:	d80a      	bhi.n	800ce3c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce26:	1ad2      	subs	r2, r2, r3
 800ce28:	6983      	ldr	r3, [r0, #24]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d20d      	bcs.n	800ce4a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce2e:	1d01      	adds	r1, r0, #4
 800ce30:	4b07      	ldr	r3, [pc, #28]	@ (800ce50 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce32:	6818      	ldr	r0, [r3, #0]
 800ce34:	f7fe fb81 	bl	800b53a <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800ce38:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800ce3a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	d201      	bcs.n	800ce44 <prvInsertTimerInActiveList+0x28>
 800ce40:	4299      	cmp	r1, r3
 800ce42:	d202      	bcs.n	800ce4a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce44:	1d01      	adds	r1, r0, #4
 800ce46:	4b03      	ldr	r3, [pc, #12]	@ (800ce54 <prvInsertTimerInActiveList+0x38>)
 800ce48:	e7f3      	b.n	800ce32 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800ce4a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800ce4c:	e7f5      	b.n	800ce3a <prvInsertTimerInActiveList+0x1e>
 800ce4e:	bf00      	nop
 800ce50:	24025238 	.word	0x24025238
 800ce54:	2402523c 	.word	0x2402523c

0800ce58 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ce58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800ce5a:	4c11      	ldr	r4, [pc, #68]	@ (800cea0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800ce5c:	f7fe fbfa 	bl	800b654 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800ce60:	6825      	ldr	r5, [r4, #0]
 800ce62:	b9bd      	cbnz	r5, 800ce94 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800ce64:	4f0f      	ldr	r7, [pc, #60]	@ (800cea4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800ce66:	4e10      	ldr	r6, [pc, #64]	@ (800cea8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800ce68:	4638      	mov	r0, r7
 800ce6a:	f7fe fb4d 	bl	800b508 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ce6e:	4630      	mov	r0, r6
 800ce70:	f7fe fb4a 	bl	800b508 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ce74:	4b0d      	ldr	r3, [pc, #52]	@ (800ceac <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce76:	4a0e      	ldr	r2, [pc, #56]	@ (800ceb0 <prvCheckForValidListAndQueue+0x58>)
 800ce78:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800ce7a:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce7c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800ce7e:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb4 <prvCheckForValidListAndQueue+0x5c>)
 800ce80:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ce82:	4b0d      	ldr	r3, [pc, #52]	@ (800ceb8 <prvCheckForValidListAndQueue+0x60>)
 800ce84:	9500      	str	r5, [sp, #0]
 800ce86:	f7fe fdef 	bl	800ba68 <xQueueGenericCreateStatic>
 800ce8a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ce8c:	b110      	cbz	r0, 800ce94 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ce8e:	490b      	ldr	r1, [pc, #44]	@ (800cebc <prvCheckForValidListAndQueue+0x64>)
 800ce90:	f7ff fa1a 	bl	800c2c8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800ce94:	b003      	add	sp, #12
 800ce96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800ce9a:	f7fe bbfb 	b.w	800b694 <vPortExitCritical>
 800ce9e:	bf00      	nop
 800cea0:	24025234 	.word	0x24025234
 800cea4:	24025254 	.word	0x24025254
 800cea8:	24025240 	.word	0x24025240
 800ceac:	2402523c 	.word	0x2402523c
 800ceb0:	2402518c 	.word	0x2402518c
 800ceb4:	24025238 	.word	0x24025238
 800ceb8:	2402513c 	.word	0x2402513c
 800cebc:	08025841 	.word	0x08025841

0800cec0 <xTimerCreateTimerTask>:
{
 800cec0:	b510      	push	{r4, lr}
 800cec2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800cec4:	f7ff ffc8 	bl	800ce58 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800cec8:	4b12      	ldr	r3, [pc, #72]	@ (800cf14 <xTimerCreateTimerTask+0x54>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	b1b3      	cbz	r3, 800cefc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cece:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ced0:	aa07      	add	r2, sp, #28
 800ced2:	a906      	add	r1, sp, #24
 800ced4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ced6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ceda:	f7fe fa0d 	bl	800b2f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cede:	9b05      	ldr	r3, [sp, #20]
 800cee0:	9a07      	ldr	r2, [sp, #28]
 800cee2:	9302      	str	r3, [sp, #8]
 800cee4:	9b06      	ldr	r3, [sp, #24]
 800cee6:	490c      	ldr	r1, [pc, #48]	@ (800cf18 <xTimerCreateTimerTask+0x58>)
 800cee8:	9301      	str	r3, [sp, #4]
 800ceea:	2302      	movs	r3, #2
 800ceec:	480b      	ldr	r0, [pc, #44]	@ (800cf1c <xTimerCreateTimerTask+0x5c>)
 800ceee:	9300      	str	r3, [sp, #0]
 800cef0:	4623      	mov	r3, r4
 800cef2:	f7ff fbae 	bl	800c652 <xTaskCreateStatic>
 800cef6:	4b0a      	ldr	r3, [pc, #40]	@ (800cf20 <xTimerCreateTimerTask+0x60>)
 800cef8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800cefa:	b940      	cbnz	r0, 800cf0e <xTimerCreateTimerTask+0x4e>
 800cefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf00:	f383 8811 	msr	BASEPRI, r3
 800cf04:	f3bf 8f6f 	isb	sy
 800cf08:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800cf0c:	e7fe      	b.n	800cf0c <xTimerCreateTimerTask+0x4c>
}
 800cf0e:	2001      	movs	r0, #1
 800cf10:	b008      	add	sp, #32
 800cf12:	bd10      	pop	{r4, pc}
 800cf14:	24025234 	.word	0x24025234
 800cf18:	08025846 	.word	0x08025846
 800cf1c:	0800d01d 	.word	0x0800d01d
 800cf20:	24025230 	.word	0x24025230

0800cf24 <xTimerGenericCommand>:
{
 800cf24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800cf26:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800cf28:	4604      	mov	r4, r0
{
 800cf2a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800cf2c:	b940      	cbnz	r0, 800cf40 <xTimerGenericCommand+0x1c>
 800cf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	e7fe      	b.n	800cf3e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800cf40:	4d0c      	ldr	r5, [pc, #48]	@ (800cf74 <xTimerGenericCommand+0x50>)
 800cf42:	6828      	ldr	r0, [r5, #0]
 800cf44:	b178      	cbz	r0, 800cf66 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf46:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cf48:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cf4a:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cf4e:	dc0c      	bgt.n	800cf6a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf50:	f7ff fe7a 	bl	800cc48 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf54:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cf56:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf58:	4669      	mov	r1, sp
 800cf5a:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cf5c:	bf0c      	ite	eq
 800cf5e:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cf60:	461a      	movne	r2, r3
 800cf62:	f7fe fe36 	bl	800bbd2 <xQueueGenericSend>
}
 800cf66:	b004      	add	sp, #16
 800cf68:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	4669      	mov	r1, sp
 800cf6e:	f7fe ff33 	bl	800bdd8 <xQueueGenericSendFromISR>
 800cf72:	e7f8      	b.n	800cf66 <xTimerGenericCommand+0x42>
 800cf74:	24025234 	.word	0x24025234

0800cf78 <prvSampleTimeNow>:
{
 800cf78:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800cf7c:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800d018 <prvSampleTimeNow+0xa0>
{
 800cf80:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800cf82:	f7ff fbd5 	bl	800c730 <xTaskGetTickCount>
 800cf86:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800cf88:	f8d8 3000 	ldr.w	r3, [r8]
 800cf8c:	4283      	cmp	r3, r0
 800cf8e:	d909      	bls.n	800cfa4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cf90:	4f1f      	ldr	r7, [pc, #124]	@ (800d010 <prvSampleTimeNow+0x98>)
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	b96a      	cbnz	r2, 800cfb4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800cf98:	4a1e      	ldr	r2, [pc, #120]	@ (800d014 <prvSampleTimeNow+0x9c>)
 800cf9a:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cf9c:	6013      	str	r3, [r2, #0]
 800cf9e:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800cfa0:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800cfa2:	e000      	b.n	800cfa6 <prvSampleTimeNow+0x2e>
 800cfa4:	2300      	movs	r3, #0
}
 800cfa6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800cfa8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800cfaa:	f8c8 5000 	str.w	r5, [r8]
}
 800cfae:	b002      	add	sp, #8
 800cfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfb4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cfb6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cfb8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cfbc:	f104 0a04 	add.w	sl, r4, #4
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	f7fe fad1 	bl	800b568 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cfc6:	6a23      	ldr	r3, [r4, #32]
 800cfc8:	4620      	mov	r0, r4
 800cfca:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cfcc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800cfd0:	075b      	lsls	r3, r3, #29
 800cfd2:	d5de      	bpl.n	800cf92 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cfd4:	69a3      	ldr	r3, [r4, #24]
 800cfd6:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800cfd8:	4599      	cmp	r9, r3
 800cfda:	d206      	bcs.n	800cfea <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfdc:	4651      	mov	r1, sl
 800cfde:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cfe0:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cfe2:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800cfe4:	f7fe faa9 	bl	800b53a <vListInsert>
 800cfe8:	e7d3      	b.n	800cf92 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cfea:	2300      	movs	r3, #0
 800cfec:	464a      	mov	r2, r9
 800cfee:	4620      	mov	r0, r4
 800cff0:	4619      	mov	r1, r3
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	f7ff ff96 	bl	800cf24 <xTimerGenericCommand>
				configASSERT( xResult );
 800cff8:	2800      	cmp	r0, #0
 800cffa:	d1ca      	bne.n	800cf92 <prvSampleTimeNow+0x1a>
 800cffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d000:	f383 8811 	msr	BASEPRI, r3
 800d004:	f3bf 8f6f 	isb	sy
 800d008:	f3bf 8f4f 	dsb	sy
 800d00c:	e7fe      	b.n	800d00c <prvSampleTimeNow+0x94>
 800d00e:	bf00      	nop
 800d010:	2402523c 	.word	0x2402523c
 800d014:	24025238 	.word	0x24025238
 800d018:	2402522c 	.word	0x2402522c

0800d01c <prvTimerTask>:
{
 800d01c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d020:	4d6e      	ldr	r5, [pc, #440]	@ (800d1dc <prvTimerTask+0x1c0>)
{
 800d022:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d024:	4e6e      	ldr	r6, [pc, #440]	@ (800d1e0 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d026:	682b      	ldr	r3, [r5, #0]
 800d028:	f8d3 8000 	ldr.w	r8, [r3]
 800d02c:	f1b8 0f00 	cmp.w	r8, #0
 800d030:	d035      	beq.n	800d09e <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d032:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d034:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d036:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800d03a:	f7ff fb71 	bl	800c720 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d03e:	a804      	add	r0, sp, #16
 800d040:	f7ff ff9a 	bl	800cf78 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800d044:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d046:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d169      	bne.n	800d120 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d04c:	2c00      	cmp	r4, #0
 800d04e:	d14c      	bne.n	800d0ea <prvTimerTask+0xce>
 800d050:	4540      	cmp	r0, r8
 800d052:	d350      	bcc.n	800d0f6 <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800d054:	f7ff fc08 	bl	800c868 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d058:	682b      	ldr	r3, [r5, #0]
 800d05a:	68db      	ldr	r3, [r3, #12]
 800d05c:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d05e:	1d38      	adds	r0, r7, #4
 800d060:	f7fe fa82 	bl	800b568 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d064:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d068:	0758      	lsls	r0, r3, #29
 800d06a:	d51a      	bpl.n	800d0a2 <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d06c:	69b9      	ldr	r1, [r7, #24]
 800d06e:	4643      	mov	r3, r8
 800d070:	464a      	mov	r2, r9
 800d072:	4638      	mov	r0, r7
 800d074:	4441      	add	r1, r8
 800d076:	f7ff fed1 	bl	800ce1c <prvInsertTimerInActiveList>
 800d07a:	b1b0      	cbz	r0, 800d0aa <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d07c:	4623      	mov	r3, r4
 800d07e:	4642      	mov	r2, r8
 800d080:	4621      	mov	r1, r4
 800d082:	4638      	mov	r0, r7
 800d084:	9400      	str	r4, [sp, #0]
 800d086:	f7ff ff4d 	bl	800cf24 <xTimerGenericCommand>
			configASSERT( xResult );
 800d08a:	b970      	cbnz	r0, 800d0aa <prvTimerTask+0x8e>
 800d08c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d090:	f383 8811 	msr	BASEPRI, r3
 800d094:	f3bf 8f6f 	isb	sy
 800d098:	f3bf 8f4f 	dsb	sy
 800d09c:	e7fe      	b.n	800d09c <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d09e:	2401      	movs	r4, #1
 800d0a0:	e7cb      	b.n	800d03a <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d0a2:	f023 0301 	bic.w	r3, r3, #1
 800d0a6:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d0aa:	6a3b      	ldr	r3, [r7, #32]
 800d0ac:	4638      	mov	r0, r7
 800d0ae:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	a904      	add	r1, sp, #16
 800d0b4:	6830      	ldr	r0, [r6, #0]
 800d0b6:	f7fe ff3d 	bl	800bf34 <xQueueReceive>
 800d0ba:	2800      	cmp	r0, #0
 800d0bc:	d0b3      	beq.n	800d026 <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0be:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d0c0:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	db2f      	blt.n	800d126 <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d0c6:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d0c8:	6963      	ldr	r3, [r4, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d132      	bne.n	800d134 <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0ce:	a803      	add	r0, sp, #12
 800d0d0:	f7ff ff52 	bl	800cf78 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800d0d4:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d0d6:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800d0d8:	2b09      	cmp	r3, #9
 800d0da:	d8e9      	bhi.n	800d0b0 <prvTimerTask+0x94>
 800d0dc:	e8df f003 	tbb	[pc, r3]
 800d0e0:	572e2e2e 	.word	0x572e2e2e
 800d0e4:	2e2e765e 	.word	0x2e2e765e
 800d0e8:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d0ea:	4b3e      	ldr	r3, [pc, #248]	@ (800d1e4 <prvTimerTask+0x1c8>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	681c      	ldr	r4, [r3, #0]
 800d0f0:	fab4 f484 	clz	r4, r4
 800d0f4:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	eba8 0109 	sub.w	r1, r8, r9
 800d0fc:	6830      	ldr	r0, [r6, #0]
 800d0fe:	f7ff f922 	bl	800c346 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d102:	f7ff fbb1 	bl	800c868 <xTaskResumeAll>
 800d106:	2800      	cmp	r0, #0
 800d108:	d1d2      	bne.n	800d0b0 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800d10a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d10e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d112:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d116:	f3bf 8f4f 	dsb	sy
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	e7c7      	b.n	800d0b0 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800d120:	f7ff fba2 	bl	800c868 <xTaskResumeAll>
}
 800d124:	e7c4      	b.n	800d0b0 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d126:	9b05      	ldr	r3, [sp, #20]
 800d128:	9907      	ldr	r1, [sp, #28]
 800d12a:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d12c:	9b04      	ldr	r3, [sp, #16]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	dbbe      	blt.n	800d0b0 <prvTimerTask+0x94>
 800d132:	e7c8      	b.n	800d0c6 <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d134:	1d20      	adds	r0, r4, #4
 800d136:	f7fe fa17 	bl	800b568 <uxListRemove>
 800d13a:	e7c8      	b.n	800d0ce <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d13c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d140:	4620      	mov	r0, r4
 800d142:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d144:	f043 0301 	orr.w	r3, r3, #1
 800d148:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d14c:	9b05      	ldr	r3, [sp, #20]
 800d14e:	4419      	add	r1, r3
 800d150:	f7ff fe64 	bl	800ce1c <prvInsertTimerInActiveList>
 800d154:	2800      	cmp	r0, #0
 800d156:	d0ab      	beq.n	800d0b0 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d158:	6a23      	ldr	r3, [r4, #32]
 800d15a:	4620      	mov	r0, r4
 800d15c:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d15e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d162:	0759      	lsls	r1, r3, #29
 800d164:	d5a4      	bpl.n	800d0b0 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d166:	69a2      	ldr	r2, [r4, #24]
 800d168:	2300      	movs	r3, #0
 800d16a:	9905      	ldr	r1, [sp, #20]
 800d16c:	4620      	mov	r0, r4
 800d16e:	9300      	str	r3, [sp, #0]
 800d170:	440a      	add	r2, r1
 800d172:	4619      	mov	r1, r3
 800d174:	f7ff fed6 	bl	800cf24 <xTimerGenericCommand>
							configASSERT( xResult );
 800d178:	2800      	cmp	r0, #0
 800d17a:	d199      	bne.n	800d0b0 <prvTimerTask+0x94>
 800d17c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d180:	f383 8811 	msr	BASEPRI, r3
 800d184:	f3bf 8f6f 	isb	sy
 800d188:	f3bf 8f4f 	dsb	sy
 800d18c:	e7fe      	b.n	800d18c <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d18e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d192:	f023 0301 	bic.w	r3, r3, #1
 800d196:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800d19a:	e789      	b.n	800d0b0 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d19c:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d1a0:	f043 0301 	orr.w	r3, r3, #1
 800d1a4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d1a8:	9905      	ldr	r1, [sp, #20]
 800d1aa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d1ac:	b941      	cbnz	r1, 800d1c0 <prvTimerTask+0x1a4>
 800d1ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1b2:	f383 8811 	msr	BASEPRI, r3
 800d1b6:	f3bf 8f6f 	isb	sy
 800d1ba:	f3bf 8f4f 	dsb	sy
 800d1be:	e7fe      	b.n	800d1be <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	4401      	add	r1, r0
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f7ff fe29 	bl	800ce1c <prvInsertTimerInActiveList>
					break;
 800d1ca:	e771      	b.n	800d0b0 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d1cc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800d1d0:	079a      	lsls	r2, r3, #30
 800d1d2:	d4de      	bmi.n	800d192 <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f7fe f959 	bl	800b48c <vPortFree>
 800d1da:	e769      	b.n	800d0b0 <prvTimerTask+0x94>
 800d1dc:	2402523c 	.word	0x2402523c
 800d1e0:	24025234 	.word	0x24025234
 800d1e4:	24025238 	.word	0x24025238

0800d1e8 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800d1e8:	8880      	ldrh	r0, [r0, #4]
 800d1ea:	4770      	bx	lr

0800d1ec <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800d1ec:	b570      	push	{r4, r5, r6, lr}
 800d1ee:	6803      	ldr	r3, [r0, #0]
 800d1f0:	460c      	mov	r4, r1
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4605      	mov	r5, r0
 800d1f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f8:	4798      	blx	r3
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	4628      	mov	r0, r5
 800d200:	1ba4      	subs	r4, r4, r6
 800d202:	6a1b      	ldr	r3, [r3, #32]
 800d204:	b2a4      	uxth	r4, r4
 800d206:	4798      	blx	r3
 800d208:	fbb4 f0f0 	udiv	r0, r4, r0
 800d20c:	bd70      	pop	{r4, r5, r6, pc}

0800d20e <_ZN8touchgfx17AbstractPartition5clearEv>:
 800d20e:	2300      	movs	r3, #0
 800d210:	8083      	strh	r3, [r0, #4]
 800d212:	4770      	bx	lr

0800d214 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800d214:	b510      	push	{r4, lr}
 800d216:	6803      	ldr	r3, [r0, #0]
 800d218:	4604      	mov	r4, r0
 800d21a:	8881      	ldrh	r1, [r0, #4]
 800d21c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d21e:	4798      	blx	r3
 800d220:	88a3      	ldrh	r3, [r4, #4]
 800d222:	3301      	adds	r3, #1
 800d224:	80a3      	strh	r3, [r4, #4]
 800d226:	bd10      	pop	{r4, pc}

0800d228 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800d228:	6803      	ldr	r3, [r0, #0]
 800d22a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d22c:	4718      	bx	r3

0800d22e <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800d22e:	4770      	bx	lr

0800d230 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800d230:	4a02      	ldr	r2, [pc, #8]	@ (800d23c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800d232:	6002      	str	r2, [r0, #0]
 800d234:	2200      	movs	r2, #0
 800d236:	8082      	strh	r2, [r0, #4]
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	08025858 	.word	0x08025858

0800d240 <_ZN8touchgfx9Container13getFirstChildEv>:
 800d240:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800d242:	4770      	bx	lr

0800d244 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv>:
 800d244:	b510      	push	{r4, lr}
 800d246:	6803      	ldr	r3, [r0, #0]
 800d248:	4604      	mov	r4, r0
 800d24a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800d24e:	4798      	blx	r3
 800d250:	b110      	cbz	r0, 800d258 <_ZNK8touchgfx25AbstractProgressIndicator17invalidateContentEv+0x14>
 800d252:	4620      	mov	r0, r4
 800d254:	f7f6 f871 	bl	800333a <_ZNK8touchgfx8Drawable17invalidateContentEv>
 800d258:	bd10      	pop	{r4, pc}

0800d25a <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorXEv>:
 800d25a:	f9b0 005c 	ldrsh.w	r0, [r0, #92]	@ 0x5c
 800d25e:	4770      	bx	lr

0800d260 <_ZNK8touchgfx25AbstractProgressIndicator21getProgressIndicatorYEv>:
 800d260:	f9b0 005e 	ldrsh.w	r0, [r0, #94]	@ 0x5e
 800d264:	4770      	bx	lr

0800d266 <_ZNK8touchgfx25AbstractProgressIndicator25getProgressIndicatorWidthEv>:
 800d266:	f9b0 0060 	ldrsh.w	r0, [r0, #96]	@ 0x60
 800d26a:	4770      	bx	lr

0800d26c <_ZNK8touchgfx25AbstractProgressIndicator26getProgressIndicatorHeightEv>:
 800d26c:	f9b0 0062 	ldrsh.w	r0, [r0, #98]	@ 0x62
 800d270:	4770      	bx	lr

0800d272 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt>:
 800d272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d274:	461e      	mov	r6, r3
 800d276:	6803      	ldr	r3, [r0, #0]
 800d278:	460f      	mov	r7, r1
 800d27a:	4604      	mov	r4, r0
 800d27c:	4615      	mov	r5, r2
 800d27e:	e9c0 1221 	strd	r1, r2, [r0, #132]	@ 0x84
 800d282:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800d286:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d28a:	4798      	blx	r3
 800d28c:	b93e      	cbnz	r6, 800d29e <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x2c>
 800d28e:	1bed      	subs	r5, r5, r7
 800d290:	f8a4 5090 	strh.w	r5, [r4, #144]	@ 0x90
 800d294:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 800d298:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
 800d29c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d29e:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 800d2a2:	e7f7      	b.n	800d294 <_ZN8touchgfx25AbstractProgressIndicator8setRangeEiitt+0x22>

0800d2a4 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_RtS2_>:
 800d2a4:	b510      	push	{r4, lr}
 800d2a6:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800d2aa:	600c      	str	r4, [r1, #0]
 800d2ac:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800d2b0:	6011      	str	r1, [r2, #0]
 800d2b2:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800d2b6:	801a      	strh	r2, [r3, #0]
 800d2b8:	9b02      	ldr	r3, [sp, #8]
 800d2ba:	f8b0 2092 	ldrh.w	r2, [r0, #146]	@ 0x92
 800d2be:	801a      	strh	r2, [r3, #0]
 800d2c0:	bd10      	pop	{r4, pc}

0800d2c2 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_Rt>:
 800d2c2:	b510      	push	{r4, lr}
 800d2c4:	f8d0 4084 	ldr.w	r4, [r0, #132]	@ 0x84
 800d2c8:	600c      	str	r4, [r1, #0]
 800d2ca:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800d2ce:	6011      	str	r1, [r2, #0]
 800d2d0:	f8b0 2090 	ldrh.w	r2, [r0, #144]	@ 0x90
 800d2d4:	801a      	strh	r2, [r3, #0]
 800d2d6:	bd10      	pop	{r4, pc}

0800d2d8 <_ZNK8touchgfx25AbstractProgressIndicator8getRangeERiS1_>:
 800d2d8:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800d2dc:	600b      	str	r3, [r1, #0]
 800d2de:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	4770      	bx	lr

0800d2e6 <_ZN8touchgfx25AbstractProgressIndicator17setEasingEquationEPFstsstE>:
 800d2e6:	f8c0 1094 	str.w	r1, [r0, #148]	@ 0x94
 800d2ea:	4770      	bx	lr

0800d2ec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>:
 800d2ec:	f8d0 008c 	ldr.w	r0, [r0, #140]	@ 0x8c
 800d2f0:	4770      	bx	lr

0800d2f2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>:
 800d2f2:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 800d2f6:	4770      	bx	lr

0800d2f8 <_ZNK8touchgfx25AbstractProgressIndicator8getAlphaEv>:
 800d2f8:	f890 0054 	ldrb.w	r0, [r0, #84]	@ 0x54
 800d2fc:	4770      	bx	lr

0800d2fe <_ZN8touchgfx25AbstractProgressIndicatorD1Ev>:
 800d2fe:	4770      	bx	lr

0800d300 <_ZN8touchgfx25AbstractProgressIndicatorD0Ev>:
 800d300:	b510      	push	{r4, lr}
 800d302:	4604      	mov	r4, r0
 800d304:	21b4      	movs	r1, #180	@ 0xb4
 800d306:	f014 fb70 	bl	80219ea <_ZdlPvj>
 800d30a:	4620      	mov	r0, r4
 800d30c:	bd10      	pop	{r4, pc}

0800d30e <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit>:
 800d30e:	b570      	push	{r4, r5, r6, lr}
 800d310:	f8d0 5084 	ldr.w	r5, [r0, #132]	@ 0x84
 800d314:	4604      	mov	r4, r0
 800d316:	4616      	mov	r6, r2
 800d318:	428d      	cmp	r5, r1
 800d31a:	bfb8      	it	lt
 800d31c:	460d      	movlt	r5, r1
 800d31e:	f8d0 1088 	ldr.w	r1, [r0, #136]	@ 0x88
 800d322:	428d      	cmp	r5, r1
 800d324:	bfa8      	it	ge
 800d326:	460d      	movge	r5, r1
 800d328:	b99a      	cbnz	r2, 800d352 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x44>
 800d32a:	6803      	ldr	r3, [r0, #0]
 800d32c:	4629      	mov	r1, r5
 800d32e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d332:	4798      	blx	r3
 800d334:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800d338:	b368      	cbz	r0, 800d396 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800d33a:	6803      	ldr	r3, [r0, #0]
 800d33c:	68db      	ldr	r3, [r3, #12]
 800d33e:	4798      	blx	r3
 800d340:	b348      	cbz	r0, 800d396 <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x88>
 800d342:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800d346:	4621      	mov	r1, r4
 800d348:	6803      	ldr	r3, [r0, #0]
 800d34a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d34e:	689b      	ldr	r3, [r3, #8]
 800d350:	4718      	bx	r3
 800d352:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800d356:	2b00      	cmp	r3, #0
 800d358:	dd08      	ble.n	800d36c <_ZN8touchgfx25AbstractProgressIndicator11updateValueEit+0x5e>
 800d35a:	f004 ffa3 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800d35e:	4621      	mov	r1, r4
 800d360:	3004      	adds	r0, #4
 800d362:	f004 ffc4 	bl	80122ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800d366:	2300      	movs	r3, #0
 800d368:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800d36c:	6823      	ldr	r3, [r4, #0]
 800d36e:	4620      	mov	r0, r4
 800d370:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800d374:	4798      	blx	r3
 800d376:	2300      	movs	r3, #0
 800d378:	f8c4 60a4 	str.w	r6, [r4, #164]	@ 0xa4
 800d37c:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 800d380:	e9c4 0527 	strd	r0, r5, [r4, #156]	@ 0x9c
 800d384:	f004 ff8e 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800d388:	4621      	mov	r1, r4
 800d38a:	3004      	adds	r0, #4
 800d38c:	f005 f858 	bl	8012440 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>
 800d390:	2301      	movs	r3, #1
 800d392:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
 800d396:	bd70      	pop	{r4, r5, r6, pc}

0800d398 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>:
 800d398:	b510      	push	{r4, lr}
 800d39a:	f8d0 3084 	ldr.w	r3, [r0, #132]	@ 0x84
 800d39e:	4604      	mov	r4, r0
 800d3a0:	4299      	cmp	r1, r3
 800d3a2:	bfb8      	it	lt
 800d3a4:	4619      	movlt	r1, r3
 800d3a6:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800d3aa:	4299      	cmp	r1, r3
 800d3ac:	bfa8      	it	ge
 800d3ae:	4619      	movge	r1, r3
 800d3b0:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
 800d3b4:	428b      	cmp	r3, r1
 800d3b6:	d010      	beq.n	800d3da <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d3b8:	f8c0 108c 	str.w	r1, [r0, #140]	@ 0x8c
 800d3bc:	f8d0 00ac 	ldr.w	r0, [r0, #172]	@ 0xac
 800d3c0:	b158      	cbz	r0, 800d3da <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d3c2:	6803      	ldr	r3, [r0, #0]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	4798      	blx	r3
 800d3c8:	b138      	cbz	r0, 800d3da <_ZN8touchgfx25AbstractProgressIndicator8setValueEi+0x42>
 800d3ca:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
 800d3ce:	4621      	mov	r1, r4
 800d3d0:	6803      	ldr	r3, [r0, #0]
 800d3d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	4718      	bx	r3
 800d3da:	bd10      	pop	{r4, pc}

0800d3dc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>:
 800d3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d3de:	4604      	mov	r4, r0
 800d3e0:	460d      	mov	r5, r1
 800d3e2:	b1a9      	cbz	r1, 800d410 <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt+0x34>
 800d3e4:	f8b0 6092 	ldrh.w	r6, [r0, #146]	@ 0x92
 800d3e8:	ab01      	add	r3, sp, #4
 800d3ea:	f8b4 1090 	ldrh.w	r1, [r4, #144]	@ 0x90
 800d3ee:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 800d3f2:	1b89      	subs	r1, r1, r6
 800d3f4:	e9d0 0221 	ldrd	r0, r2, [r0, #132]	@ 0x84
 800d3f8:	1a12      	subs	r2, r2, r0
 800d3fa:	1a38      	subs	r0, r7, r0
 800d3fc:	f006 fd06 	bl	8013e0c <_ZN8touchgfx6muldivElllRl>
 800d400:	4629      	mov	r1, r5
 800d402:	ab01      	add	r3, sp, #4
 800d404:	f8b4 2090 	ldrh.w	r2, [r4, #144]	@ 0x90
 800d408:	4430      	add	r0, r6
 800d40a:	f006 fcff 	bl	8013e0c <_ZN8touchgfx6muldivElllRl>
 800d40e:	b285      	uxth	r5, r0
 800d410:	4628      	mov	r0, r5
 800d412:	b003      	add	sp, #12
 800d414:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d416 <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv>:
 800d416:	b570      	push	{r4, r5, r6, lr}
 800d418:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800d41c:	4604      	mov	r4, r0
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d035      	beq.n	800d48e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800d422:	f8d0 00a8 	ldr.w	r0, [r0, #168]	@ 0xa8
 800d426:	2100      	movs	r1, #0
 800d428:	f8d4 5094 	ldr.w	r5, [r4, #148]	@ 0x94
 800d42c:	3001      	adds	r0, #1
 800d42e:	e9d4 3227 	ldrd	r3, r2, [r4, #156]	@ 0x9c
 800d432:	f8c4 00a8 	str.w	r0, [r4, #168]	@ 0xa8
 800d436:	b280      	uxth	r0, r0
 800d438:	1ad2      	subs	r2, r2, r3
 800d43a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 800d43e:	b212      	sxth	r2, r2
 800d440:	47a8      	blx	r5
 800d442:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
 800d446:	6823      	ldr	r3, [r4, #0]
 800d448:	4401      	add	r1, r0
 800d44a:	4620      	mov	r0, r4
 800d44c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800d450:	4798      	blx	r3
 800d452:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 800d456:	429a      	cmp	r2, r3
 800d458:	db19      	blt.n	800d48e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800d45a:	2500      	movs	r5, #0
 800d45c:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800d460:	f004 ff20 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800d464:	4621      	mov	r1, r4
 800d466:	3004      	adds	r0, #4
 800d468:	f004 ff41 	bl	80122ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>
 800d46c:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800d470:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800d474:	b158      	cbz	r0, 800d48e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800d476:	6803      	ldr	r3, [r0, #0]
 800d478:	68db      	ldr	r3, [r3, #12]
 800d47a:	4798      	blx	r3
 800d47c:	b138      	cbz	r0, 800d48e <_ZN8touchgfx25AbstractProgressIndicator15handleTickEventEv+0x78>
 800d47e:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
 800d482:	4621      	mov	r1, r4
 800d484:	6803      	ldr	r3, [r0, #0]
 800d486:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	4718      	bx	r3
 800d48e:	bd70      	pop	{r4, r5, r6, pc}

0800d490 <_ZN8touchgfx8DrawableC1Ev>:
 800d490:	4a0a      	ldr	r2, [pc, #40]	@ (800d4bc <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 800d492:	6002      	str	r2, [r0, #0]
 800d494:	2200      	movs	r2, #0
 800d496:	8082      	strh	r2, [r0, #4]
 800d498:	80c2      	strh	r2, [r0, #6]
 800d49a:	8102      	strh	r2, [r0, #8]
 800d49c:	8142      	strh	r2, [r0, #10]
 800d49e:	8182      	strh	r2, [r0, #12]
 800d4a0:	81c2      	strh	r2, [r0, #14]
 800d4a2:	8202      	strh	r2, [r0, #16]
 800d4a4:	8242      	strh	r2, [r0, #18]
 800d4a6:	61c2      	str	r2, [r0, #28]
 800d4a8:	8402      	strh	r2, [r0, #32]
 800d4aa:	8442      	strh	r2, [r0, #34]	@ 0x22
 800d4ac:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 800d4b0:	e9c0 2205 	strd	r2, r2, [r0, #20]
 800d4b4:	2201      	movs	r2, #1
 800d4b6:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 800d4ba:	4770      	bx	lr
 800d4bc:	08025d70 	.word	0x08025d70

0800d4c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
 800d4c0:	b570      	push	{r4, r5, r6, lr}
 800d4c2:	6803      	ldr	r3, [r0, #0]
 800d4c4:	4604      	mov	r4, r0
 800d4c6:	4615      	mov	r5, r2
 800d4c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d4ca:	4798      	blx	r3
 800d4cc:	6823      	ldr	r3, [r4, #0]
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4620      	mov	r0, r4
 800d4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d4d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4d8:	4718      	bx	r3

0800d4da <_ZN8touchgfx25AbstractProgressIndicator28setProgressIndicatorPositionEssss>:
 800d4da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4de:	4604      	mov	r4, r0
 800d4e0:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
 800d4e4:	4698      	mov	r8, r3
 800d4e6:	460e      	mov	r6, r1
 800d4e8:	4615      	mov	r5, r2
 800d4ea:	f8a4 105c 	strh.w	r1, [r4, #92]	@ 0x5c
 800d4ee:	f8a4 205e 	strh.w	r2, [r4, #94]	@ 0x5e
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	463a      	mov	r2, r7
 800d4f6:	3058      	adds	r0, #88	@ 0x58
 800d4f8:	f7ff ffe2 	bl	800d4c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d4fc:	4446      	add	r6, r8
 800d4fe:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800d502:	443d      	add	r5, r7
 800d504:	42b3      	cmp	r3, r6
 800d506:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 800d50a:	bfb8      	it	lt
 800d50c:	8126      	strhlt	r6, [r4, #8]
 800d50e:	42ab      	cmp	r3, r5
 800d510:	bfb8      	it	lt
 800d512:	8165      	strhlt	r5, [r4, #10]
 800d514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d518 <_ZN8touchgfx25AbstractProgressIndicator13setBackgroundERKNS_6BitmapE>:
 800d518:	b510      	push	{r4, lr}
 800d51a:	4604      	mov	r4, r0
 800d51c:	302c      	adds	r0, #44	@ 0x2c
 800d51e:	f002 ff66 	bl	80103ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d522:	f9b4 2036 	ldrsh.w	r2, [r4, #54]	@ 0x36
 800d526:	4620      	mov	r0, r4
 800d528:	f9b4 1034 	ldrsh.w	r1, [r4, #52]	@ 0x34
 800d52c:	f7ff ffc8 	bl	800d4c0 <_ZN8touchgfx8Drawable14setWidthHeightEss>
 800d530:	bd10      	pop	{r4, pc}
	...

0800d534 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>:
 800d534:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d536:	4604      	mov	r4, r0
 800d538:	2500      	movs	r5, #0
 800d53a:	f7ff ffa9 	bl	800d490 <_ZN8touchgfx8DrawableC1Ev>
 800d53e:	4b24      	ldr	r3, [pc, #144]	@ (800d5d0 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0x9c>)
 800d540:	4626      	mov	r6, r4
 800d542:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 800d546:	2226      	movs	r2, #38	@ 0x26
 800d548:	4629      	mov	r1, r5
 800d54a:	62a5      	str	r5, [r4, #40]	@ 0x28
 800d54c:	f846 3b2c 	str.w	r3, [r6], #44
 800d550:	4630      	mov	r0, r6
 800d552:	f8ad 7004 	strh.w	r7, [sp, #4]
 800d556:	f015 f85b 	bl	8022610 <memset>
 800d55a:	4630      	mov	r0, r6
 800d55c:	f7ff ff98 	bl	800d490 <_ZN8touchgfx8DrawableC1Ev>
 800d560:	a902      	add	r1, sp, #8
 800d562:	4b1c      	ldr	r3, [pc, #112]	@ (800d5d4 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa0>)
 800d564:	4630      	mov	r0, r6
 800d566:	f884 7054 	strb.w	r7, [r4, #84]	@ 0x54
 800d56a:	f104 0758 	add.w	r7, r4, #88	@ 0x58
 800d56e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d570:	f831 3d04 	ldrh.w	r3, [r1, #-4]!
 800d574:	f8a4 3052 	strh.w	r3, [r4, #82]	@ 0x52
 800d578:	f002 ff39 	bl	80103ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 800d57c:	4638      	mov	r0, r7
 800d57e:	f7ff ff87 	bl	800d490 <_ZN8touchgfx8DrawableC1Ev>
 800d582:	4b15      	ldr	r3, [pc, #84]	@ (800d5d8 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa4>)
 800d584:	4629      	mov	r1, r5
 800d586:	4630      	mov	r0, r6
 800d588:	65a3      	str	r3, [r4, #88]	@ 0x58
 800d58a:	2364      	movs	r3, #100	@ 0x64
 800d58c:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
 800d590:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
 800d594:	e9c4 3522 	strd	r3, r5, [r4, #136]	@ 0x88
 800d598:	4b10      	ldr	r3, [pc, #64]	@ (800d5dc <_ZN8touchgfx25AbstractProgressIndicatorC1Ev+0xa8>)
 800d59a:	e9c4 5520 	strd	r5, r5, [r4, #128]	@ 0x80
 800d59e:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 800d5a2:	e9c4 5527 	strd	r5, r5, [r4, #156]	@ 0x9c
 800d5a6:	e9c4 5529 	strd	r5, r5, [r4, #164]	@ 0xa4
 800d5aa:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 800d5ae:	f7f5 fdfb 	bl	80031a8 <_ZN8touchgfx8Drawable4setXEs>
 800d5b2:	4629      	mov	r1, r5
 800d5b4:	4630      	mov	r0, r6
 800d5b6:	f7f5 fdf9 	bl	80031ac <_ZN8touchgfx8Drawable4setYEs>
 800d5ba:	4631      	mov	r1, r6
 800d5bc:	4620      	mov	r0, r4
 800d5be:	f000 f819 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d5c2:	4620      	mov	r0, r4
 800d5c4:	4639      	mov	r1, r7
 800d5c6:	f000 f815 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800d5ca:	4620      	mov	r0, r4
 800d5cc:	b003      	add	sp, #12
 800d5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d5d0:	0802588c 	.word	0x0802588c
 800d5d4:	08025ca0 	.word	0x08025ca0
 800d5d8:	08025960 	.word	0x08025960
 800d5dc:	08014481 	.word	0x08014481

0800d5e0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800d5e0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d5e2:	2000      	movs	r0, #0
 800d5e4:	b12b      	cbz	r3, 800d5f2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d5e6:	b920      	cbnz	r0, 800d5f2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800d5e8:	1a5a      	subs	r2, r3, r1
 800d5ea:	699b      	ldr	r3, [r3, #24]
 800d5ec:	4250      	negs	r0, r2
 800d5ee:	4150      	adcs	r0, r2
 800d5f0:	e7f8      	b.n	800d5e4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800d5f2:	4770      	bx	lr

0800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	6148      	str	r0, [r1, #20]
 800d5f8:	618b      	str	r3, [r1, #24]
 800d5fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d5fc:	b913      	cbnz	r3, 800d604 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800d5fe:	6281      	str	r1, [r0, #40]	@ 0x28
 800d600:	4770      	bx	lr
 800d602:	4613      	mov	r3, r2
 800d604:	699a      	ldr	r2, [r3, #24]
 800d606:	2a00      	cmp	r2, #0
 800d608:	d1fb      	bne.n	800d602 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800d60a:	6199      	str	r1, [r3, #24]
 800d60c:	4770      	bx	lr

0800d60e <_ZN8touchgfx9Container9removeAllEv>:
 800d60e:	2200      	movs	r2, #0
 800d610:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d612:	b123      	cbz	r3, 800d61e <_ZN8touchgfx9Container9removeAllEv+0x10>
 800d614:	6999      	ldr	r1, [r3, #24]
 800d616:	6281      	str	r1, [r0, #40]	@ 0x28
 800d618:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800d61c:	e7f8      	b.n	800d610 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800d61e:	4770      	bx	lr

0800d620 <_ZN8touchgfx9Container6unlinkEv>:
 800d620:	2300      	movs	r3, #0
 800d622:	6283      	str	r3, [r0, #40]	@ 0x28
 800d624:	4770      	bx	lr

0800d626 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800d626:	2200      	movs	r2, #0
 800d628:	8002      	strh	r2, [r0, #0]
 800d62a:	8042      	strh	r2, [r0, #2]
 800d62c:	8082      	strh	r2, [r0, #4]
 800d62e:	80c2      	strh	r2, [r0, #6]
 800d630:	4770      	bx	lr

0800d632 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800d632:	b570      	push	{r4, r5, r6, lr}
 800d634:	460d      	mov	r5, r1
 800d636:	4616      	mov	r6, r2
 800d638:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d63a:	b13c      	cbz	r4, 800d64c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800d63c:	6823      	ldr	r3, [r4, #0]
 800d63e:	4620      	mov	r0, r4
 800d640:	4632      	mov	r2, r6
 800d642:	4629      	mov	r1, r5
 800d644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d646:	4798      	blx	r3
 800d648:	69a4      	ldr	r4, [r4, #24]
 800d64a:	e7f6      	b.n	800d63a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800d64c:	bd70      	pop	{r4, r5, r6, pc}

0800d64e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800d64e:	b538      	push	{r3, r4, r5, lr}
 800d650:	460d      	mov	r5, r1
 800d652:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d654:	b134      	cbz	r4, 800d664 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800d656:	682b      	ldr	r3, [r5, #0]
 800d658:	4621      	mov	r1, r4
 800d65a:	4628      	mov	r0, r5
 800d65c:	689b      	ldr	r3, [r3, #8]
 800d65e:	4798      	blx	r3
 800d660:	69a4      	ldr	r4, [r4, #24]
 800d662:	e7f7      	b.n	800d654 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800d664:	bd38      	pop	{r3, r4, r5, pc}

0800d666 <_ZN8touchgfx9ContainerD1Ev>:
 800d666:	4770      	bx	lr

0800d668 <_ZN8touchgfx9ContainerD0Ev>:
 800d668:	b510      	push	{r4, lr}
 800d66a:	4604      	mov	r4, r0
 800d66c:	212c      	movs	r1, #44	@ 0x2c
 800d66e:	f014 f9bc 	bl	80219ea <_ZdlPvj>
 800d672:	4620      	mov	r0, r4
 800d674:	bd10      	pop	{r4, pc}

0800d676 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800d676:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d678:	b19b      	cbz	r3, 800d6a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d67a:	428b      	cmp	r3, r1
 800d67c:	d109      	bne.n	800d692 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800d67e:	699a      	ldr	r2, [r3, #24]
 800d680:	2100      	movs	r1, #0
 800d682:	6159      	str	r1, [r3, #20]
 800d684:	6282      	str	r2, [r0, #40]	@ 0x28
 800d686:	b902      	cbnz	r2, 800d68a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800d688:	4770      	bx	lr
 800d68a:	6199      	str	r1, [r3, #24]
 800d68c:	4770      	bx	lr
 800d68e:	4613      	mov	r3, r2
 800d690:	b13a      	cbz	r2, 800d6a2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800d692:	699a      	ldr	r2, [r3, #24]
 800d694:	428a      	cmp	r2, r1
 800d696:	d1fa      	bne.n	800d68e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800d698:	698a      	ldr	r2, [r1, #24]
 800d69a:	619a      	str	r2, [r3, #24]
 800d69c:	2300      	movs	r3, #0
 800d69e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800d6a2:	4770      	bx	lr

0800d6a4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800d6a4:	b410      	push	{r4}
 800d6a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d6a8:	4604      	mov	r4, r0
 800d6aa:	b92b      	cbnz	r3, 800d6b8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800d6ac:	6803      	ldr	r3, [r0, #0]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d6b6:	4718      	bx	r3
 800d6b8:	b941      	cbnz	r1, 800d6cc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800d6ba:	6193      	str	r3, [r2, #24]
 800d6bc:	6282      	str	r2, [r0, #40]	@ 0x28
 800d6be:	6154      	str	r4, [r2, #20]
 800d6c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d6c4:	4770      	bx	lr
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d0f9      	beq.n	800d6c0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	6998      	ldr	r0, [r3, #24]
 800d6d0:	d1f9      	bne.n	800d6c6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800d6d2:	6190      	str	r0, [r2, #24]
 800d6d4:	618a      	str	r2, [r1, #24]
 800d6d6:	e7f2      	b.n	800d6be <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800d6d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800d6d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6dc:	461f      	mov	r7, r3
 800d6de:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800d6e2:	460d      	mov	r5, r1
 800d6e4:	4616      	mov	r6, r2
 800d6e6:	b103      	cbz	r3, 800d6ea <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800d6e8:	6038      	str	r0, [r7, #0]
 800d6ea:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800d6ec:	b314      	cbz	r4, 800d734 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800d6ee:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800d6f2:	b1eb      	cbz	r3, 800d730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d6f4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800d6f8:	428d      	cmp	r5, r1
 800d6fa:	db19      	blt.n	800d730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d6fc:	b289      	uxth	r1, r1
 800d6fe:	8923      	ldrh	r3, [r4, #8]
 800d700:	440b      	add	r3, r1
 800d702:	b21b      	sxth	r3, r3
 800d704:	429d      	cmp	r5, r3
 800d706:	da13      	bge.n	800d730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d708:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800d70c:	4296      	cmp	r6, r2
 800d70e:	db0f      	blt.n	800d730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d710:	b292      	uxth	r2, r2
 800d712:	8963      	ldrh	r3, [r4, #10]
 800d714:	4413      	add	r3, r2
 800d716:	b21b      	sxth	r3, r3
 800d718:	429e      	cmp	r6, r3
 800d71a:	da09      	bge.n	800d730 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800d71c:	6823      	ldr	r3, [r4, #0]
 800d71e:	1ab2      	subs	r2, r6, r2
 800d720:	1a69      	subs	r1, r5, r1
 800d722:	4620      	mov	r0, r4
 800d724:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800d728:	b212      	sxth	r2, r2
 800d72a:	463b      	mov	r3, r7
 800d72c:	b209      	sxth	r1, r1
 800d72e:	47c0      	blx	r8
 800d730:	69a4      	ldr	r4, [r4, #24]
 800d732:	e7db      	b.n	800d6ec <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800d734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d738 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	4c6d      	ldr	r4, [pc, #436]	@ (800d8f4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800d73e:	b0a1      	sub	sp, #132	@ 0x84
 800d740:	4606      	mov	r6, r0
 800d742:	6824      	ldr	r4, [r4, #0]
 800d744:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800d746:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800d74a:	2400      	movs	r4, #0
 800d74c:	9303      	str	r3, [sp, #12]
 800d74e:	802c      	strh	r4, [r5, #0]
 800d750:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800d752:	802c      	strh	r4, [r5, #0]
 800d754:	601c      	str	r4, [r3, #0]
 800d756:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800d75a:	f7ff ffbd 	bl	800d6d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d75e:	f1b9 0f03 	cmp.w	r9, #3
 800d762:	f340 80c1 	ble.w	800d8e8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800d766:	4631      	mov	r1, r6
 800d768:	a80c      	add	r0, sp, #48	@ 0x30
 800d76a:	f005 fef9 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d76e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800d772:	9306      	str	r3, [sp, #24]
 800d774:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800d778:	9307      	str	r3, [sp, #28]
 800d77a:	9b03      	ldr	r3, [sp, #12]
 800d77c:	f8d3 a000 	ldr.w	sl, [r3]
 800d780:	f1ba 0f00 	cmp.w	sl, #0
 800d784:	f000 80b3 	beq.w	800d8ee <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800d788:	4651      	mov	r1, sl
 800d78a:	a810      	add	r0, sp, #64	@ 0x40
 800d78c:	f005 fee8 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d790:	2002      	movs	r0, #2
 800d792:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800d796:	9b01      	ldr	r3, [sp, #4]
 800d798:	9a06      	ldr	r2, [sp, #24]
 800d79a:	fb91 f1f0 	sdiv	r1, r1, r0
 800d79e:	189d      	adds	r5, r3, r2
 800d7a0:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800d7a4:	9a07      	ldr	r2, [sp, #28]
 800d7a6:	4419      	add	r1, r3
 800d7a8:	9b02      	ldr	r3, [sp, #8]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800d7b0:	1a6d      	subs	r5, r5, r1
 800d7b2:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800d7b6:	fb92 f2f0 	sdiv	r2, r2, r0
 800d7ba:	440a      	add	r2, r1
 800d7bc:	1a9b      	subs	r3, r3, r2
 800d7be:	435b      	muls	r3, r3
 800d7c0:	fb05 3505 	mla	r5, r5, r5, r3
 800d7c4:	4f4c      	ldr	r7, [pc, #304]	@ (800d8f8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800d7c6:	ac10      	add	r4, sp, #64	@ 0x40
 800d7c8:	f1b9 0f0c 	cmp.w	r9, #12
 800d7cc:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7d0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7d4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800d7d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d7d8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800d7dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800d7e0:	f04f 0303 	mov.w	r3, #3
 800d7e4:	bfd8      	it	le
 800d7e6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800d7ea:	f04f 0400 	mov.w	r4, #0
 800d7ee:	f8cd 9000 	str.w	r9, [sp]
 800d7f2:	bfcc      	ite	gt
 800d7f4:	4698      	movgt	r8, r3
 800d7f6:	fb92 f8f3 	sdivle	r8, r2, r3
 800d7fa:	1c63      	adds	r3, r4, #1
 800d7fc:	aa10      	add	r2, sp, #64	@ 0x40
 800d7fe:	f004 0401 	and.w	r4, r4, #1
 800d802:	f04f 0b00 	mov.w	fp, #0
 800d806:	9308      	str	r3, [sp, #32]
 800d808:	9b00      	ldr	r3, [sp, #0]
 800d80a:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800d80e:	fb93 f3f8 	sdiv	r3, r3, r8
 800d812:	3404      	adds	r4, #4
 800d814:	b29b      	uxth	r3, r3
 800d816:	9304      	str	r3, [sp, #16]
 800d818:	9a04      	ldr	r2, [sp, #16]
 800d81a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800d81e:	fb13 f302 	smulbb	r3, r3, r2
 800d822:	9a01      	ldr	r2, [sp, #4]
 800d824:	b29b      	uxth	r3, r3
 800d826:	1899      	adds	r1, r3, r2
 800d828:	9305      	str	r3, [sp, #20]
 800d82a:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800d82e:	b209      	sxth	r1, r1
 800d830:	4299      	cmp	r1, r3
 800d832:	db4d      	blt.n	800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d834:	8932      	ldrh	r2, [r6, #8]
 800d836:	4413      	add	r3, r2
 800d838:	b21b      	sxth	r3, r3
 800d83a:	4299      	cmp	r1, r3
 800d83c:	da48      	bge.n	800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d83e:	9b04      	ldr	r3, [sp, #16]
 800d840:	6827      	ldr	r7, [r4, #0]
 800d842:	fb17 f703 	smulbb	r7, r7, r3
 800d846:	9b02      	ldr	r3, [sp, #8]
 800d848:	b2bf      	uxth	r7, r7
 800d84a:	18fa      	adds	r2, r7, r3
 800d84c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800d850:	b212      	sxth	r2, r2
 800d852:	429a      	cmp	r2, r3
 800d854:	db3c      	blt.n	800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d856:	8970      	ldrh	r0, [r6, #10]
 800d858:	4403      	add	r3, r0
 800d85a:	b21b      	sxth	r3, r3
 800d85c:	429a      	cmp	r2, r3
 800d85e:	da37      	bge.n	800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d860:	2300      	movs	r3, #0
 800d862:	4630      	mov	r0, r6
 800d864:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d866:	ab0b      	add	r3, sp, #44	@ 0x2c
 800d868:	f7ff ff36 	bl	800d6d8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800d86c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d86e:	b37a      	cbz	r2, 800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d870:	4552      	cmp	r2, sl
 800d872:	d02d      	beq.n	800d8d0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800d874:	4611      	mov	r1, r2
 800d876:	a80e      	add	r0, sp, #56	@ 0x38
 800d878:	9209      	str	r2, [sp, #36]	@ 0x24
 800d87a:	f005 fe71 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800d87e:	f04f 0e02 	mov.w	lr, #2
 800d882:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800d886:	9a06      	ldr	r2, [sp, #24]
 800d888:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800d88c:	9b01      	ldr	r3, [sp, #4]
 800d88e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800d892:	4413      	add	r3, r2
 800d894:	9a07      	ldr	r2, [sp, #28]
 800d896:	fb91 f1fe 	sdiv	r1, r1, lr
 800d89a:	fb9c fcfe 	sdiv	ip, ip, lr
 800d89e:	4401      	add	r1, r0
 800d8a0:	1a58      	subs	r0, r3, r1
 800d8a2:	9b02      	ldr	r3, [sp, #8]
 800d8a4:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800d8a8:	4413      	add	r3, r2
 800d8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ac:	448c      	add	ip, r1
 800d8ae:	eba3 030c 	sub.w	r3, r3, ip
 800d8b2:	435b      	muls	r3, r3
 800d8b4:	fb00 3300 	mla	r3, r0, r0, r3
 800d8b8:	42ab      	cmp	r3, r5
 800d8ba:	d208      	bcs.n	800d8ce <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800d8bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d8be:	461d      	mov	r5, r3
 800d8c0:	9803      	ldr	r0, [sp, #12]
 800d8c2:	6001      	str	r1, [r0, #0]
 800d8c4:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800d8c6:	9805      	ldr	r0, [sp, #20]
 800d8c8:	8008      	strh	r0, [r1, #0]
 800d8ca:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800d8cc:	800f      	strh	r7, [r1, #0]
 800d8ce:	4692      	mov	sl, r2
 800d8d0:	f10b 0b01 	add.w	fp, fp, #1
 800d8d4:	3408      	adds	r4, #8
 800d8d6:	f1bb 0f04 	cmp.w	fp, #4
 800d8da:	d19d      	bne.n	800d818 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800d8dc:	9b00      	ldr	r3, [sp, #0]
 800d8de:	9c08      	ldr	r4, [sp, #32]
 800d8e0:	444b      	add	r3, r9
 800d8e2:	4544      	cmp	r4, r8
 800d8e4:	9300      	str	r3, [sp, #0]
 800d8e6:	d188      	bne.n	800d7fa <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800d8e8:	b021      	add	sp, #132	@ 0x84
 800d8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ee:	f04f 35ff 	mov.w	r5, #4294967295
 800d8f2:	e767      	b.n	800d7c4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800d8f4:	24025274 	.word	0x24025274
 800d8f8:	08023158 	.word	0x08023158

0800d8fc <_ZN8touchgfx4RectaNERKS0_>:
 800d8fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d900:	f9b1 7000 	ldrsh.w	r7, [r1]
 800d904:	888c      	ldrh	r4, [r1, #4]
 800d906:	f9b0 9000 	ldrsh.w	r9, [r0]
 800d90a:	443c      	add	r4, r7
 800d90c:	b2a4      	uxth	r4, r4
 800d90e:	fa0f f884 	sxth.w	r8, r4
 800d912:	45c1      	cmp	r9, r8
 800d914:	da2f      	bge.n	800d976 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d916:	8882      	ldrh	r2, [r0, #4]
 800d918:	444a      	add	r2, r9
 800d91a:	b292      	uxth	r2, r2
 800d91c:	fa0f fe82 	sxth.w	lr, r2
 800d920:	4577      	cmp	r7, lr
 800d922:	da28      	bge.n	800d976 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d924:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800d928:	88cb      	ldrh	r3, [r1, #6]
 800d92a:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800d92e:	442b      	add	r3, r5
 800d930:	b21b      	sxth	r3, r3
 800d932:	429e      	cmp	r6, r3
 800d934:	da1f      	bge.n	800d976 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d936:	88c3      	ldrh	r3, [r0, #6]
 800d938:	4433      	add	r3, r6
 800d93a:	b29b      	uxth	r3, r3
 800d93c:	fa0f fc83 	sxth.w	ip, r3
 800d940:	4565      	cmp	r5, ip
 800d942:	da18      	bge.n	800d976 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800d944:	454f      	cmp	r7, r9
 800d946:	bfb8      	it	lt
 800d948:	464f      	movlt	r7, r9
 800d94a:	42b5      	cmp	r5, r6
 800d94c:	bfb8      	it	lt
 800d94e:	4635      	movlt	r5, r6
 800d950:	45f0      	cmp	r8, lr
 800d952:	bfd8      	it	le
 800d954:	4622      	movle	r2, r4
 800d956:	1bd2      	subs	r2, r2, r7
 800d958:	8082      	strh	r2, [r0, #4]
 800d95a:	884a      	ldrh	r2, [r1, #2]
 800d95c:	88c9      	ldrh	r1, [r1, #6]
 800d95e:	8007      	strh	r7, [r0, #0]
 800d960:	440a      	add	r2, r1
 800d962:	8045      	strh	r5, [r0, #2]
 800d964:	b292      	uxth	r2, r2
 800d966:	b211      	sxth	r1, r2
 800d968:	458c      	cmp	ip, r1
 800d96a:	bfa8      	it	ge
 800d96c:	4613      	movge	r3, r2
 800d96e:	1b5b      	subs	r3, r3, r5
 800d970:	80c3      	strh	r3, [r0, #6]
 800d972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d976:	2300      	movs	r3, #0
 800d978:	8003      	strh	r3, [r0, #0]
 800d97a:	8043      	strh	r3, [r0, #2]
 800d97c:	8083      	strh	r3, [r0, #4]
 800d97e:	80c3      	strh	r3, [r0, #6]
 800d980:	e7f7      	b.n	800d972 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800d982 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800d982:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	dd06      	ble.n	800d998 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800d98a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800d98e:	2800      	cmp	r0, #0
 800d990:	bfcc      	ite	gt
 800d992:	2000      	movgt	r0, #0
 800d994:	2001      	movle	r0, #1
 800d996:	4770      	bx	lr
 800d998:	2001      	movs	r0, #1
 800d99a:	4770      	bx	lr

0800d99c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9a0:	2300      	movs	r3, #0
 800d9a2:	4604      	mov	r4, r0
 800d9a4:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800d9a6:	8003      	strh	r3, [r0, #0]
 800d9a8:	8043      	strh	r3, [r0, #2]
 800d9aa:	8083      	strh	r3, [r0, #4]
 800d9ac:	80c3      	strh	r3, [r0, #6]
 800d9ae:	2d00      	cmp	r5, #0
 800d9b0:	d040      	beq.n	800da34 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800d9b2:	1d28      	adds	r0, r5, #4
 800d9b4:	f7ff ffe5 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9b8:	b988      	cbnz	r0, 800d9de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800d9ba:	4620      	mov	r0, r4
 800d9bc:	f7ff ffe1 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 800d9c0:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800d9c4:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800d9c8:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800d9cc:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800d9d0:	b138      	cbz	r0, 800d9e2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800d9d2:	8022      	strh	r2, [r4, #0]
 800d9d4:	8063      	strh	r3, [r4, #2]
 800d9d6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800d9da:	f8a4 c006 	strh.w	ip, [r4, #6]
 800d9de:	69ad      	ldr	r5, [r5, #24]
 800d9e0:	e7e5      	b.n	800d9ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800d9e2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800d9e6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800d9ea:	4290      	cmp	r0, r2
 800d9ec:	4607      	mov	r7, r0
 800d9ee:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800d9f2:	460e      	mov	r6, r1
 800d9f4:	bfa8      	it	ge
 800d9f6:	4617      	movge	r7, r2
 800d9f8:	4299      	cmp	r1, r3
 800d9fa:	4472      	add	r2, lr
 800d9fc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800da00:	bfa8      	it	ge
 800da02:	461e      	movge	r6, r3
 800da04:	4440      	add	r0, r8
 800da06:	4471      	add	r1, lr
 800da08:	4463      	add	r3, ip
 800da0a:	b200      	sxth	r0, r0
 800da0c:	8027      	strh	r7, [r4, #0]
 800da0e:	b212      	sxth	r2, r2
 800da10:	8066      	strh	r6, [r4, #2]
 800da12:	b209      	sxth	r1, r1
 800da14:	b21b      	sxth	r3, r3
 800da16:	4290      	cmp	r0, r2
 800da18:	bfac      	ite	ge
 800da1a:	ebc7 0200 	rsbge	r2, r7, r0
 800da1e:	ebc7 0202 	rsblt	r2, r7, r2
 800da22:	4299      	cmp	r1, r3
 800da24:	bfac      	ite	ge
 800da26:	ebc6 0301 	rsbge	r3, r6, r1
 800da2a:	ebc6 0303 	rsblt	r3, r6, r3
 800da2e:	80a2      	strh	r2, [r4, #4]
 800da30:	80e3      	strh	r3, [r4, #6]
 800da32:	e7d4      	b.n	800d9de <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800da34:	4620      	mov	r0, r4
 800da36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800da3a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800da3a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800da3e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800da42:	b383      	cbz	r3, 800daa6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800da44:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800da46:	b374      	cbz	r4, 800daa6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800da48:	f9b1 5000 	ldrsh.w	r5, [r1]
 800da4c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800da50:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800da54:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800da58:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800da5c:	b303      	cbz	r3, 800daa0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800da5e:	4668      	mov	r0, sp
 800da60:	1d21      	adds	r1, r4, #4
 800da62:	f8ad 5000 	strh.w	r5, [sp]
 800da66:	f8ad 6002 	strh.w	r6, [sp, #2]
 800da6a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800da6e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800da72:	f7ff ff43 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 800da76:	4668      	mov	r0, sp
 800da78:	f7ff ff83 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 800da7c:	b980      	cbnz	r0, 800daa0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800da7e:	f8bd 3000 	ldrh.w	r3, [sp]
 800da82:	4669      	mov	r1, sp
 800da84:	88a2      	ldrh	r2, [r4, #4]
 800da86:	4620      	mov	r0, r4
 800da88:	1a9b      	subs	r3, r3, r2
 800da8a:	88e2      	ldrh	r2, [r4, #6]
 800da8c:	f8ad 3000 	strh.w	r3, [sp]
 800da90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800da94:	1a9b      	subs	r3, r3, r2
 800da96:	f8ad 3002 	strh.w	r3, [sp, #2]
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	4798      	blx	r3
 800daa0:	69a4      	ldr	r4, [r4, #24]
 800daa2:	2c00      	cmp	r4, #0
 800daa4:	d1d8      	bne.n	800da58 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800daa6:	b002      	add	sp, #8
 800daa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800daac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800daac:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800daae:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800dab2:	460d      	mov	r5, r1
 800dab4:	4616      	mov	r6, r2
 800dab6:	b323      	cbz	r3, 800db02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dab8:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800daba:	b314      	cbz	r4, 800db02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800dabc:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800dac0:	b1eb      	cbz	r3, 800dafe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dac2:	6828      	ldr	r0, [r5, #0]
 800dac4:	466b      	mov	r3, sp
 800dac6:	6869      	ldr	r1, [r5, #4]
 800dac8:	c303      	stmia	r3!, {r0, r1}
 800daca:	4668      	mov	r0, sp
 800dacc:	1d21      	adds	r1, r4, #4
 800dace:	f7ff ff15 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 800dad2:	4668      	mov	r0, sp
 800dad4:	f7ff ff55 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 800dad8:	b988      	cbnz	r0, 800dafe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800dada:	f8bd 3000 	ldrh.w	r3, [sp]
 800dade:	4669      	mov	r1, sp
 800dae0:	88a2      	ldrh	r2, [r4, #4]
 800dae2:	4620      	mov	r0, r4
 800dae4:	1a9b      	subs	r3, r3, r2
 800dae6:	88e2      	ldrh	r2, [r4, #6]
 800dae8:	f8ad 3000 	strh.w	r3, [sp]
 800daec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800daf0:	1a9b      	subs	r3, r3, r2
 800daf2:	4632      	mov	r2, r6
 800daf4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800daf8:	6823      	ldr	r3, [r4, #0]
 800dafa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dafc:	4798      	blx	r3
 800dafe:	69a4      	ldr	r4, [r4, #24]
 800db00:	e7db      	b.n	800daba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800db02:	b002      	add	sp, #8
 800db04:	bd70      	pop	{r4, r5, r6, pc}

0800db06 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800db06:	6803      	ldr	r3, [r0, #0]
 800db08:	b513      	push	{r0, r1, r4, lr}
 800db0a:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800db0e:	2300      	movs	r3, #0
 800db10:	e9cd 3300 	strd	r3, r3, [sp]
 800db14:	466b      	mov	r3, sp
 800db16:	47a0      	blx	r4
 800db18:	b002      	add	sp, #8
 800db1a:	bd10      	pop	{r4, pc}

0800db1c <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800db1c:	2301      	movs	r3, #1
 800db1e:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800db22:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800db26:	4770      	bx	lr

0800db28 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800db28:	2301      	movs	r3, #1
 800db2a:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800db2e:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800db32:	4770      	bx	lr

0800db34 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800db34:	6843      	ldr	r3, [r0, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	725a      	strb	r2, [r3, #9]
 800db3a:	6840      	ldr	r0, [r0, #4]
 800db3c:	6803      	ldr	r3, [r0, #0]
 800db3e:	691b      	ldr	r3, [r3, #16]
 800db40:	4718      	bx	r3

0800db42 <_ZN8touchgfx3HAL8flushDMAEv>:
 800db42:	6840      	ldr	r0, [r0, #4]
 800db44:	6803      	ldr	r3, [r0, #0]
 800db46:	689b      	ldr	r3, [r3, #8]
 800db48:	4718      	bx	r3

0800db4a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800db4a:	b530      	push	{r4, r5, lr}
 800db4c:	b08b      	sub	sp, #44	@ 0x2c
 800db4e:	6804      	ldr	r4, [r0, #0]
 800db50:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800db54:	9509      	str	r5, [sp, #36]	@ 0x24
 800db56:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800db5a:	9508      	str	r5, [sp, #32]
 800db5c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800db60:	9507      	str	r5, [sp, #28]
 800db62:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800db66:	9506      	str	r5, [sp, #24]
 800db68:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800db6c:	9505      	str	r5, [sp, #20]
 800db6e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800db72:	9504      	str	r5, [sp, #16]
 800db74:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800db78:	9503      	str	r5, [sp, #12]
 800db7a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800db7e:	9502      	str	r5, [sp, #8]
 800db80:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800db84:	e9cd 3500 	strd	r3, r5, [sp]
 800db88:	4613      	mov	r3, r2
 800db8a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800db8c:	2200      	movs	r2, #0
 800db8e:	47a0      	blx	r4
 800db90:	b00b      	add	sp, #44	@ 0x2c
 800db92:	bd30      	pop	{r4, r5, pc}

0800db94 <_ZN8touchgfx3HAL10beginFrameEv>:
 800db94:	4b04      	ldr	r3, [pc, #16]	@ (800dba8 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b123      	cbz	r3, 800dba4 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800db9a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800db9e:	f080 0001 	eor.w	r0, r0, #1
 800dba2:	4770      	bx	lr
 800dba4:	2001      	movs	r0, #1
 800dba6:	4770      	bx	lr
 800dba8:	24025272 	.word	0x24025272

0800dbac <_ZN8touchgfx3HAL8endFrameEv>:
 800dbac:	b510      	push	{r4, lr}
 800dbae:	4604      	mov	r4, r0
 800dbb0:	6840      	ldr	r0, [r0, #4]
 800dbb2:	6803      	ldr	r3, [r0, #0]
 800dbb4:	689b      	ldr	r3, [r3, #8]
 800dbb6:	4798      	blx	r3
 800dbb8:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800dbbc:	b113      	cbz	r3, 800dbc4 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800dbbe:	2301      	movs	r3, #1
 800dbc0:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800dbc4:	bd10      	pop	{r4, pc}

0800dbc6 <_ZN8touchgfx3HAL10initializeEv>:
 800dbc6:	b510      	push	{r4, lr}
 800dbc8:	4604      	mov	r4, r0
 800dbca:	f7f4 fea1 	bl	8002910 <_ZN8touchgfx10OSWrappers10initializeEv>
 800dbce:	f7f3 fef7 	bl	80019c0 <_ZN8touchgfx4GPIO4initEv>
 800dbd2:	6860      	ldr	r0, [r4, #4]
 800dbd4:	6803      	ldr	r3, [r0, #0]
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	4798      	blx	r3
 800dbda:	68e0      	ldr	r0, [r4, #12]
 800dbdc:	6803      	ldr	r3, [r0, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	4798      	blx	r3
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	4620      	mov	r0, r4
 800dbe6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dbe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dbec:	4718      	bx	r3
	...

0800dbf0 <_ZN8touchgfx3HAL4tickEv>:
 800dbf0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800dbf2:	6803      	ldr	r3, [r0, #0]
 800dbf4:	4604      	mov	r4, r0
 800dbf6:	4d5b      	ldr	r5, [pc, #364]	@ (800dd64 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800dbf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800dbfc:	4798      	blx	r3
 800dbfe:	2800      	cmp	r0, #0
 800dc00:	f000 8095 	beq.w	800dd2e <_ZN8touchgfx3HAL4tickEv+0x13e>
 800dc04:	2001      	movs	r0, #1
 800dc06:	2600      	movs	r6, #0
 800dc08:	f7f3 fe7c 	bl	8001904 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800dc0c:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800dc10:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800dc14:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800dc18:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800dc1c:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800dc20:	b133      	cbz	r3, 800dc30 <_ZN8touchgfx3HAL4tickEv+0x40>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	4620      	mov	r0, r4
 800dc26:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800dc2a:	4798      	blx	r3
 800dc2c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800dc30:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800dc34:	2601      	movs	r6, #1
 800dc36:	6862      	ldr	r2, [r4, #4]
 800dc38:	f083 0301 	eor.w	r3, r3, #1
 800dc3c:	702e      	strb	r6, [r5, #0]
 800dc3e:	7253      	strb	r3, [r2, #9]
 800dc40:	f004 fb30 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800dc44:	6803      	ldr	r3, [r0, #0]
 800dc46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800dc48:	4798      	blx	r3
 800dc4a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800dc4e:	b90b      	cbnz	r3, 800dc54 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dc50:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800dc54:	f004 fb26 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800dc58:	6803      	ldr	r3, [r0, #0]
 800dc5a:	695b      	ldr	r3, [r3, #20]
 800dc5c:	4798      	blx	r3
 800dc5e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800dc60:	6803      	ldr	r3, [r0, #0]
 800dc62:	691b      	ldr	r3, [r3, #16]
 800dc64:	4798      	blx	r3
 800dc66:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800dc6a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800dc6e:	3b01      	subs	r3, #1
 800dc70:	b2db      	uxtb	r3, r3
 800dc72:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800dc76:	b10a      	cbz	r2, 800dc7c <_ZN8touchgfx3HAL4tickEv+0x8c>
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d1eb      	bne.n	800dc54 <_ZN8touchgfx3HAL4tickEv+0x64>
 800dc7c:	4a3a      	ldr	r2, [pc, #232]	@ (800dd68 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800dc7e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800dc82:	7813      	ldrb	r3, [r2, #0]
 800dc84:	3301      	adds	r3, #1
 800dc86:	b25b      	sxtb	r3, r3
 800dc88:	4299      	cmp	r1, r3
 800dc8a:	7013      	strb	r3, [r2, #0]
 800dc8c:	dc10      	bgt.n	800dcb0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dc8e:	2300      	movs	r3, #0
 800dc90:	68e0      	ldr	r0, [r4, #12]
 800dc92:	a902      	add	r1, sp, #8
 800dc94:	7013      	strb	r3, [r2, #0]
 800dc96:	aa03      	add	r2, sp, #12
 800dc98:	6803      	ldr	r3, [r0, #0]
 800dc9a:	68db      	ldr	r3, [r3, #12]
 800dc9c:	4798      	blx	r3
 800dc9e:	6823      	ldr	r3, [r4, #0]
 800dca0:	2800      	cmp	r0, #0
 800dca2:	d050      	beq.n	800dd46 <_ZN8touchgfx3HAL4tickEv+0x156>
 800dca4:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800dca8:	4620      	mov	r0, r4
 800dcaa:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800dcae:	4798      	blx	r3
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	6960      	ldr	r0, [r4, #20]
 800dcb4:	f88d 3007 	strb.w	r3, [sp, #7]
 800dcb8:	b158      	cbz	r0, 800dcd2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dcba:	6803      	ldr	r3, [r0, #0]
 800dcbc:	f10d 0107 	add.w	r1, sp, #7
 800dcc0:	68db      	ldr	r3, [r3, #12]
 800dcc2:	4798      	blx	r3
 800dcc4:	b128      	cbz	r0, 800dcd2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800dcc6:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800dcc8:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800dccc:	6803      	ldr	r3, [r0, #0]
 800dcce:	68db      	ldr	r3, [r3, #12]
 800dcd0:	4798      	blx	r3
 800dcd2:	f104 001c 	add.w	r0, r4, #28
 800dcd6:	f011 fc95 	bl	801f604 <_ZN8touchgfx8Gestures4tickEv>
 800dcda:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800dcde:	b30b      	cbz	r3, 800dd24 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dce0:	6920      	ldr	r0, [r4, #16]
 800dce2:	6803      	ldr	r3, [r0, #0]
 800dce4:	691b      	ldr	r3, [r3, #16]
 800dce6:	4798      	blx	r3
 800dce8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dcea:	4606      	mov	r6, r0
 800dcec:	b903      	cbnz	r3, 800dcf0 <_ZN8touchgfx3HAL4tickEv+0x100>
 800dcee:	6760      	str	r0, [r4, #116]	@ 0x74
 800dcf0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dcf2:	4a1e      	ldr	r2, [pc, #120]	@ (800dd6c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800dcf4:	1af3      	subs	r3, r6, r3
 800dcf6:	4293      	cmp	r3, r2
 800dcf8:	d914      	bls.n	800dd24 <_ZN8touchgfx3HAL4tickEv+0x134>
 800dcfa:	6920      	ldr	r0, [r4, #16]
 800dcfc:	6803      	ldr	r3, [r0, #0]
 800dcfe:	699b      	ldr	r3, [r3, #24]
 800dd00:	4798      	blx	r3
 800dd02:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800dd04:	2264      	movs	r2, #100	@ 0x64
 800dd06:	1af3      	subs	r3, r6, r3
 800dd08:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd0c:	fbb0 f0f3 	udiv	r0, r0, r3
 800dd10:	2800      	cmp	r0, #0
 800dd12:	dc1d      	bgt.n	800dd50 <_ZN8touchgfx3HAL4tickEv+0x160>
 800dd14:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800dd18:	6920      	ldr	r0, [r4, #16]
 800dd1a:	2100      	movs	r1, #0
 800dd1c:	6803      	ldr	r3, [r0, #0]
 800dd1e:	69db      	ldr	r3, [r3, #28]
 800dd20:	4798      	blx	r3
 800dd22:	6766      	str	r6, [r4, #116]	@ 0x74
 800dd24:	f004 fabe 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 800dd28:	6803      	ldr	r3, [r0, #0]
 800dd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd2c:	4798      	blx	r3
 800dd2e:	6823      	ldr	r3, [r4, #0]
 800dd30:	4620      	mov	r0, r4
 800dd32:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800dd36:	4798      	blx	r3
 800dd38:	2001      	movs	r0, #1
 800dd3a:	f7f3 fdff 	bl	800193c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800dd3e:	2300      	movs	r3, #0
 800dd40:	702b      	strb	r3, [r5, #0]
 800dd42:	b004      	add	sp, #16
 800dd44:	bd70      	pop	{r4, r5, r6, pc}
 800dd46:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800dd4a:	4620      	mov	r0, r4
 800dd4c:	4798      	blx	r3
 800dd4e:	e7af      	b.n	800dcb0 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800dd50:	2863      	cmp	r0, #99	@ 0x63
 800dd52:	bfcb      	itete	gt
 800dd54:	2300      	movgt	r3, #0
 800dd56:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800dd5a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800dd5e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800dd62:	e7d9      	b.n	800dd18 <_ZN8touchgfx3HAL4tickEv+0x128>
 800dd64:	24025278 	.word	0x24025278
 800dd68:	24025279 	.word	0x24025279
 800dd6c:	05f5e100 	.word	0x05f5e100

0800dd70 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800dd70:	b510      	push	{r4, lr}
 800dd72:	4604      	mov	r4, r0
 800dd74:	f7f4 fdfc 	bl	8002970 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800dd78:	2200      	movs	r2, #0
 800dd7a:	6863      	ldr	r3, [r4, #4]
 800dd7c:	729a      	strb	r2, [r3, #10]
 800dd7e:	bd10      	pop	{r4, pc}

0800dd80 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800dd80:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800dd82:	301c      	adds	r0, #28
 800dd84:	f011 bc3c 	b.w	801f600 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800dd88 <_ZN8touchgfx3HAL5touchEll>:
 800dd88:	b530      	push	{r4, r5, lr}
 800dd8a:	b087      	sub	sp, #28
 800dd8c:	4604      	mov	r4, r0
 800dd8e:	a804      	add	r0, sp, #16
 800dd90:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800dd94:	f004 f852 	bl	8011e3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800dd98:	9b04      	ldr	r3, [sp, #16]
 800dd9a:	a906      	add	r1, sp, #24
 800dd9c:	a803      	add	r0, sp, #12
 800dd9e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800dda2:	9b05      	ldr	r3, [sp, #20]
 800dda4:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800dda8:	f004 f89a 	bl	8011ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800ddac:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800ddb0:	f104 001c 	add.w	r0, r4, #28
 800ddb4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800ddb8:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800ddbc:	b189      	cbz	r1, 800dde2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800ddbe:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800ddc2:	9300      	str	r3, [sp, #0]
 800ddc4:	4613      	mov	r3, r2
 800ddc6:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800ddca:	462a      	mov	r2, r5
 800ddcc:	f011 fc28 	bl	801f620 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800ddd0:	b128      	cbz	r0, 800ddde <_ZN8touchgfx3HAL5touchEll+0x56>
 800ddd2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800ddd6:	6623      	str	r3, [r4, #96]	@ 0x60
 800ddd8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800dddc:	6663      	str	r3, [r4, #100]	@ 0x64
 800ddde:	b007      	add	sp, #28
 800dde0:	bd30      	pop	{r4, r5, pc}
 800dde2:	f011 fc5d 	bl	801f6a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dde6:	2301      	movs	r3, #1
 800dde8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800ddec:	e7f1      	b.n	800ddd2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800ddee <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800ddee:	b510      	push	{r4, lr}
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d046      	beq.n	800de82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800ddf4:	ea81 0002 	eor.w	r0, r1, r2
 800ddf8:	07c4      	lsls	r4, r0, #31
 800ddfa:	d508      	bpl.n	800de0e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800ddfc:	440b      	add	r3, r1
 800ddfe:	3a01      	subs	r2, #1
 800de00:	428b      	cmp	r3, r1
 800de02:	d93e      	bls.n	800de82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800de04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800de08:	f801 0b01 	strb.w	r0, [r1], #1
 800de0c:	e7f8      	b.n	800de00 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800de0e:	07d0      	lsls	r0, r2, #31
 800de10:	bf42      	ittt	mi
 800de12:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800de16:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800de1a:	f801 0b01 	strbmi.w	r0, [r1], #1
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d911      	bls.n	800de46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de22:	ea81 0402 	eor.w	r4, r1, r2
 800de26:	4610      	mov	r0, r2
 800de28:	07a4      	lsls	r4, r4, #30
 800de2a:	d022      	beq.n	800de72 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800de2c:	f023 0401 	bic.w	r4, r3, #1
 800de30:	440c      	add	r4, r1
 800de32:	428c      	cmp	r4, r1
 800de34:	4602      	mov	r2, r0
 800de36:	d904      	bls.n	800de42 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800de38:	8812      	ldrh	r2, [r2, #0]
 800de3a:	3002      	adds	r0, #2
 800de3c:	f821 2b02 	strh.w	r2, [r1], #2
 800de40:	e7f7      	b.n	800de32 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800de42:	f003 0301 	and.w	r3, r3, #1
 800de46:	f023 0003 	bic.w	r0, r3, #3
 800de4a:	4408      	add	r0, r1
 800de4c:	4288      	cmp	r0, r1
 800de4e:	4614      	mov	r4, r2
 800de50:	d904      	bls.n	800de5c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800de52:	6824      	ldr	r4, [r4, #0]
 800de54:	3204      	adds	r2, #4
 800de56:	f841 4b04 	str.w	r4, [r1], #4
 800de5a:	e7f7      	b.n	800de4c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800de5c:	f003 0303 	and.w	r3, r3, #3
 800de60:	3a01      	subs	r2, #1
 800de62:	440b      	add	r3, r1
 800de64:	428b      	cmp	r3, r1
 800de66:	d90c      	bls.n	800de82 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800de68:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800de6c:	f801 0b01 	strb.w	r0, [r1], #1
 800de70:	e7f8      	b.n	800de64 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800de72:	0790      	lsls	r0, r2, #30
 800de74:	d0e7      	beq.n	800de46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de76:	f832 0b02 	ldrh.w	r0, [r2], #2
 800de7a:	3b02      	subs	r3, #2
 800de7c:	f821 0b02 	strh.w	r0, [r1], #2
 800de80:	e7e1      	b.n	800de46 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800de82:	2001      	movs	r0, #1
 800de84:	bd10      	pop	{r4, pc}

0800de86 <_ZN8touchgfx3HAL7noTouchEv>:
 800de86:	b510      	push	{r4, lr}
 800de88:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800de8c:	4604      	mov	r4, r0
 800de8e:	b153      	cbz	r3, 800dea6 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800de90:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800de94:	2101      	movs	r1, #1
 800de96:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800de9a:	301c      	adds	r0, #28
 800de9c:	f011 fc00 	bl	801f6a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800dea0:	2300      	movs	r3, #0
 800dea2:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800dea6:	bd10      	pop	{r4, pc}

0800dea8 <_ZN8touchgfx8Drawable5setXYEss>:
 800dea8:	b570      	push	{r4, r5, r6, lr}
 800deaa:	6803      	ldr	r3, [r0, #0]
 800deac:	4604      	mov	r4, r0
 800deae:	4615      	mov	r5, r2
 800deb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800deb2:	4798      	blx	r3
 800deb4:	6823      	ldr	r3, [r4, #0]
 800deb6:	4629      	mov	r1, r5
 800deb8:	4620      	mov	r0, r4
 800deba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800debc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dec0:	4718      	bx	r3
	...

0800dec4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800dec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dec8:	b085      	sub	sp, #20
 800deca:	4604      	mov	r4, r0
 800decc:	2000      	movs	r0, #0
 800dece:	4699      	mov	r9, r3
 800ded0:	ad04      	add	r5, sp, #16
 800ded2:	460f      	mov	r7, r1
 800ded4:	4690      	mov	r8, r2
 800ded6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800deda:	69a0      	ldr	r0, [r4, #24]
 800dedc:	6806      	ldr	r6, [r0, #0]
 800dede:	9501      	str	r5, [sp, #4]
 800dee0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800dee4:	9500      	str	r5, [sp, #0]
 800dee6:	6835      	ldr	r5, [r6, #0]
 800dee8:	47a8      	blx	r5
 800deea:	4d10      	ldr	r5, [pc, #64]	@ (800df2c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800deec:	4606      	mov	r6, r0
 800deee:	f8a5 9000 	strh.w	r9, [r5]
 800def2:	f7f5 fe3d 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800def6:	6803      	ldr	r3, [r0, #0]
 800def8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800defa:	4798      	blx	r3
 800defc:	b128      	cbz	r0, 800df0a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800defe:	2801      	cmp	r0, #1
 800df00:	d00b      	beq.n	800df1a <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800df02:	4630      	mov	r0, r6
 800df04:	b005      	add	sp, #20
 800df06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800df0a:	882b      	ldrh	r3, [r5, #0]
 800df0c:	fb08 7203 	mla	r2, r8, r3, r7
 800df10:	9b03      	ldr	r3, [sp, #12]
 800df12:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800df16:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800df18:	e7f3      	b.n	800df02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800df1a:	882a      	ldrh	r2, [r5, #0]
 800df1c:	9b03      	ldr	r3, [sp, #12]
 800df1e:	fb08 7202 	mla	r2, r8, r2, r7
 800df22:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800df26:	1a9a      	subs	r2, r3, r2
 800df28:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800df2a:	e7ea      	b.n	800df02 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800df2c:	2402526e 	.word	0x2402526e

0800df30 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800df30:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df32:	b08b      	sub	sp, #44	@ 0x2c
 800df34:	4617      	mov	r7, r2
 800df36:	4604      	mov	r4, r0
 800df38:	460e      	mov	r6, r1
 800df3a:	461d      	mov	r5, r3
 800df3c:	f7f5 fe18 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800df40:	6803      	ldr	r3, [r0, #0]
 800df42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df44:	4798      	blx	r3
 800df46:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800df4a:	9007      	str	r0, [sp, #28]
 800df4c:	4631      	mov	r1, r6
 800df4e:	6822      	ldr	r2, [r4, #0]
 800df50:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800df54:	4b0c      	ldr	r3, [pc, #48]	@ (800df88 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800df56:	4620      	mov	r0, r4
 800df58:	881b      	ldrh	r3, [r3, #0]
 800df5a:	9306      	str	r3, [sp, #24]
 800df5c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800df66:	9304      	str	r3, [sp, #16]
 800df68:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800df6c:	9303      	str	r3, [sp, #12]
 800df6e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800df72:	9302      	str	r3, [sp, #8]
 800df74:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800df78:	e9cd 5300 	strd	r5, r3, [sp]
 800df7c:	463b      	mov	r3, r7
 800df7e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800df80:	2200      	movs	r2, #0
 800df82:	47a8      	blx	r5
 800df84:	b00b      	add	sp, #44	@ 0x2c
 800df86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df88:	2402526e 	.word	0x2402526e

0800df8c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800df8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800df90:	4698      	mov	r8, r3
 800df92:	6803      	ldr	r3, [r0, #0]
 800df94:	b08b      	sub	sp, #44	@ 0x2c
 800df96:	4617      	mov	r7, r2
 800df98:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800df9a:	460e      	mov	r6, r1
 800df9c:	4b13      	ldr	r3, [pc, #76]	@ (800dfec <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800df9e:	4604      	mov	r4, r0
 800dfa0:	f8b3 9000 	ldrh.w	r9, [r3]
 800dfa4:	f7f5 fde4 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800dfa8:	6803      	ldr	r3, [r0, #0]
 800dfaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dfac:	4798      	blx	r3
 800dfae:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800dfb2:	2200      	movs	r2, #0
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800dfba:	2302      	movs	r3, #2
 800dfbc:	4620      	mov	r0, r4
 800dfbe:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	9305      	str	r3, [sp, #20]
 800dfc6:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800dfca:	9304      	str	r3, [sp, #16]
 800dfcc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800dfd0:	9303      	str	r3, [sp, #12]
 800dfd2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800dfd6:	9302      	str	r3, [sp, #8]
 800dfd8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800dfdc:	e9cd 8300 	strd	r8, r3, [sp]
 800dfe0:	463b      	mov	r3, r7
 800dfe2:	47a8      	blx	r5
 800dfe4:	b00b      	add	sp, #44	@ 0x2c
 800dfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfea:	bf00      	nop
 800dfec:	2402526e 	.word	0x2402526e

0800dff0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800dff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dff4:	4698      	mov	r8, r3
 800dff6:	6803      	ldr	r3, [r0, #0]
 800dff8:	b087      	sub	sp, #28
 800dffa:	460e      	mov	r6, r1
 800dffc:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800dffe:	4617      	mov	r7, r2
 800e000:	4b0f      	ldr	r3, [pc, #60]	@ (800e040 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e002:	4604      	mov	r4, r0
 800e004:	f8b3 9000 	ldrh.w	r9, [r3]
 800e008:	f7f5 fdb2 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e00c:	6803      	ldr	r3, [r0, #0]
 800e00e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e010:	4798      	blx	r3
 800e012:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800e016:	463a      	mov	r2, r7
 800e018:	4631      	mov	r1, r6
 800e01a:	f8cd 900c 	str.w	r9, [sp, #12]
 800e01e:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e022:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800e026:	4620      	mov	r0, r4
 800e028:	9302      	str	r3, [sp, #8]
 800e02a:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e02e:	9301      	str	r3, [sp, #4]
 800e030:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e034:	9300      	str	r3, [sp, #0]
 800e036:	4643      	mov	r3, r8
 800e038:	47a8      	blx	r5
 800e03a:	b007      	add	sp, #28
 800e03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e040:	2402526e 	.word	0x2402526e

0800e044 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e048:	4604      	mov	r4, r0
 800e04a:	b08f      	sub	sp, #60	@ 0x3c
 800e04c:	4610      	mov	r0, r2
 800e04e:	460d      	mov	r5, r1
 800e050:	4691      	mov	r9, r2
 800e052:	461e      	mov	r6, r3
 800e054:	f007 f988 	bl	8015368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e058:	2800      	cmp	r0, #0
 800e05a:	f000 809d 	beq.w	800e198 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e05e:	6823      	ldr	r3, [r4, #0]
 800e060:	4620      	mov	r0, r4
 800e062:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e1fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e066:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e06a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e06c:	4798      	blx	r3
 800e06e:	6823      	ldr	r3, [r4, #0]
 800e070:	4620      	mov	r0, r4
 800e072:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e078:	4798      	blx	r3
 800e07a:	f8bb 3000 	ldrh.w	r3, [fp]
 800e07e:	4f5c      	ldr	r7, [pc, #368]	@ (800e1f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e080:	9301      	str	r3, [sp, #4]
 800e082:	f8ba 3000 	ldrh.w	r3, [sl]
 800e086:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e08a:	4640      	mov	r0, r8
 800e08c:	9302      	str	r3, [sp, #8]
 800e08e:	883b      	ldrh	r3, [r7, #0]
 800e090:	9303      	str	r3, [sp, #12]
 800e092:	4b58      	ldr	r3, [pc, #352]	@ (800e1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e094:	881a      	ldrh	r2, [r3, #0]
 800e096:	9305      	str	r3, [sp, #20]
 800e098:	9204      	str	r2, [sp, #16]
 800e09a:	f007 fab5 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e09e:	8038      	strh	r0, [r7, #0]
 800e0a0:	4640      	mov	r0, r8
 800e0a2:	f007 fae5 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e0a6:	9b05      	ldr	r3, [sp, #20]
 800e0a8:	b280      	uxth	r0, r0
 800e0aa:	8018      	strh	r0, [r3, #0]
 800e0ac:	4b52      	ldr	r3, [pc, #328]	@ (800e1f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d174      	bne.n	800e19e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e0b4:	883b      	ldrh	r3, [r7, #0]
 800e0b6:	f8aa 0000 	strh.w	r0, [sl]
 800e0ba:	f8ab 3000 	strh.w	r3, [fp]
 800e0be:	4648      	mov	r0, r9
 800e0c0:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800e0c4:	f007 f950 	bl	8015368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e0ce:	4611      	mov	r1, r2
 800e0d0:	4628      	mov	r0, r5
 800e0d2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e0d6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e0da:	f7ff fee5 	bl	800dea8 <_ZN8touchgfx8Drawable5setXYEss>
 800e0de:	2301      	movs	r3, #1
 800e0e0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800e0e4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e0e8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	dd5c      	ble.n	800e1aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e0f0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dd58      	ble.n	800e1aa <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e0f8:	462a      	mov	r2, r5
 800e0fa:	ab0a      	add	r3, sp, #40	@ 0x28
 800e0fc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e100:	6851      	ldr	r1, [r2, #4]
 800e102:	c303      	stmia	r3!, {r0, r1}
 800e104:	4631      	mov	r1, r6
 800e106:	a80a      	add	r0, sp, #40	@ 0x28
 800e108:	f7ff fbf8 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 800e10c:	4b38      	ldr	r3, [pc, #224]	@ (800e1f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e10e:	2100      	movs	r1, #0
 800e110:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e114:	4b37      	ldr	r3, [pc, #220]	@ (800e1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e116:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e11a:	aa0a      	add	r2, sp, #40	@ 0x28
 800e11c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e120:	910c      	str	r1, [sp, #48]	@ 0x30
 800e122:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e126:	ab08      	add	r3, sp, #32
 800e128:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e12c:	e883 0003 	stmia.w	r3, {r0, r1}
 800e130:	4618      	mov	r0, r3
 800e132:	a90c      	add	r1, sp, #48	@ 0x30
 800e134:	f7ff fbe2 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 800e138:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d13c      	bne.n	800e1b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e13e:	2000      	movs	r0, #0
 800e140:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e144:	2600      	movs	r6, #0
 800e146:	696b      	ldr	r3, [r5, #20]
 800e148:	a908      	add	r1, sp, #32
 800e14a:	682a      	ldr	r2, [r5, #0]
 800e14c:	4628      	mov	r0, r5
 800e14e:	9305      	str	r3, [sp, #20]
 800e150:	616e      	str	r6, [r5, #20]
 800e152:	6892      	ldr	r2, [r2, #8]
 800e154:	4790      	blx	r2
 800e156:	9b05      	ldr	r3, [sp, #20]
 800e158:	4652      	mov	r2, sl
 800e15a:	4649      	mov	r1, r9
 800e15c:	616b      	str	r3, [r5, #20]
 800e15e:	4628      	mov	r0, r5
 800e160:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e164:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e168:	f7ff fe9e 	bl	800dea8 <_ZN8touchgfx8Drawable5setXYEss>
 800e16c:	9a01      	ldr	r2, [sp, #4]
 800e16e:	4b23      	ldr	r3, [pc, #140]	@ (800e1fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e170:	4620      	mov	r0, r4
 800e172:	801a      	strh	r2, [r3, #0]
 800e174:	9a02      	ldr	r2, [sp, #8]
 800e176:	4b22      	ldr	r3, [pc, #136]	@ (800e200 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e178:	801a      	strh	r2, [r3, #0]
 800e17a:	9a03      	ldr	r2, [sp, #12]
 800e17c:	4b1c      	ldr	r3, [pc, #112]	@ (800e1f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e17e:	801a      	strh	r2, [r3, #0]
 800e180:	4b1c      	ldr	r3, [pc, #112]	@ (800e1f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e182:	9a04      	ldr	r2, [sp, #16]
 800e184:	801a      	strh	r2, [r3, #0]
 800e186:	6823      	ldr	r3, [r4, #0]
 800e188:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e18c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e18e:	4798      	blx	r3
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	4620      	mov	r0, r4
 800e194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e196:	4798      	blx	r3
 800e198:	b00f      	add	sp, #60	@ 0x3c
 800e19a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e19e:	883b      	ldrh	r3, [r7, #0]
 800e1a0:	f8ab 0000 	strh.w	r0, [fp]
 800e1a4:	f8aa 3000 	strh.w	r3, [sl]
 800e1a8:	e789      	b.n	800e0be <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e1aa:	462a      	mov	r2, r5
 800e1ac:	ab0a      	add	r3, sp, #40	@ 0x28
 800e1ae:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e1b2:	6851      	ldr	r1, [r2, #4]
 800e1b4:	c303      	stmia	r3!, {r0, r1}
 800e1b6:	e7a9      	b.n	800e10c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e1b8:	a807      	add	r0, sp, #28
 800e1ba:	f007 fb9b 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e1be:	4606      	mov	r6, r0
 800e1c0:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e1c2:	6803      	ldr	r3, [r0, #0]
 800e1c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c6:	4798      	blx	r3
 800e1c8:	4286      	cmp	r6, r0
 800e1ca:	d1b8      	bne.n	800e13e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e1cc:	f7f5 fcd0 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e1d0:	6803      	ldr	r3, [r0, #0]
 800e1d2:	4606      	mov	r6, r0
 800e1d4:	a807      	add	r0, sp, #28
 800e1d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1d8:	9305      	str	r3, [sp, #20]
 800e1da:	f007 fb8b 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e1de:	9b05      	ldr	r3, [sp, #20]
 800e1e0:	4601      	mov	r1, r0
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	4798      	blx	r3
 800e1e6:	f080 0001 	eor.w	r0, r0, #1
 800e1ea:	b2c0      	uxtb	r0, r0
 800e1ec:	e7a8      	b.n	800e140 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e1ee:	bf00      	nop
 800e1f0:	24025268 	.word	0x24025268
 800e1f4:	2402526a 	.word	0x2402526a
 800e1f8:	2402526c 	.word	0x2402526c
 800e1fc:	2402526e 	.word	0x2402526e
 800e200:	24025270 	.word	0x24025270

0800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e204:	4b07      	ldr	r3, [pc, #28]	@ (800e224 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e206:	b510      	push	{r4, lr}
 800e208:	781b      	ldrb	r3, [r3, #0]
 800e20a:	4604      	mov	r4, r0
 800e20c:	b13b      	cbz	r3, 800e21e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e20e:	6803      	ldr	r3, [r0, #0]
 800e210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e212:	4798      	blx	r3
 800e214:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e216:	4283      	cmp	r3, r0
 800e218:	d101      	bne.n	800e21e <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e21a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e21c:	bd10      	pop	{r4, pc}
 800e21e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e220:	e7fc      	b.n	800e21c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e222:	bf00      	nop
 800e224:	24025272 	.word	0x24025272

0800e228 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22c:	461d      	mov	r5, r3
 800e22e:	b08a      	sub	sp, #40	@ 0x28
 800e230:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e234:	4690      	mov	r8, r2
 800e236:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e23a:	2400      	movs	r4, #0
 800e23c:	4607      	mov	r7, r0
 800e23e:	fb06 8505 	mla	r5, r6, r5, r8
 800e242:	9404      	str	r4, [sp, #16]
 800e244:	f88d 4020 	strb.w	r4, [sp, #32]
 800e248:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e24c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e250:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e254:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e258:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e25c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e260:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e264:	f7ff ffce 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e268:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e272:	a901      	add	r1, sp, #4
 800e274:	9505      	str	r5, [sp, #20]
 800e276:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e27a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e27e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e282:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e286:	6803      	ldr	r3, [r0, #0]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	4798      	blx	r3
 800e28c:	b00a      	add	sp, #40	@ 0x28
 800e28e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e292 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e296:	b08b      	sub	sp, #44	@ 0x2c
 800e298:	2400      	movs	r4, #0
 800e29a:	4691      	mov	r9, r2
 800e29c:	461d      	mov	r5, r3
 800e29e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e2a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e2a6:	4688      	mov	r8, r1
 800e2a8:	4607      	mov	r7, r0
 800e2aa:	9404      	str	r4, [sp, #16]
 800e2ac:	fb06 9505 	mla	r5, r6, r5, r9
 800e2b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2b4:	f7ff ffa6 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e2b8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e2bc:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e2c0:	6878      	ldr	r0, [r7, #4]
 800e2c2:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e2c6:	a901      	add	r1, sp, #4
 800e2c8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e2cc:	9505      	str	r5, [sp, #20]
 800e2ce:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e2d2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e2d6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e2da:	f8cd 8010 	str.w	r8, [sp, #16]
 800e2de:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e2e2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e2e6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e2ea:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e2ee:	6803      	ldr	r3, [r0, #0]
 800e2f0:	685b      	ldr	r3, [r3, #4]
 800e2f2:	4798      	blx	r3
 800e2f4:	b00b      	add	sp, #44	@ 0x2c
 800e2f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e2fc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e300:	b08a      	sub	sp, #40	@ 0x28
 800e302:	4698      	mov	r8, r3
 800e304:	2300      	movs	r3, #0
 800e306:	4606      	mov	r6, r0
 800e308:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e30c:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e310:	2d0b      	cmp	r5, #11
 800e312:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e316:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e31a:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e31e:	9304      	str	r3, [sp, #16]
 800e320:	d137      	bne.n	800e392 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e322:	2380      	movs	r3, #128	@ 0x80
 800e324:	f88d 0020 	strb.w	r0, [sp, #32]
 800e328:	4630      	mov	r0, r6
 800e32a:	9203      	str	r2, [sp, #12]
 800e32c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e330:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e334:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e338:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e33c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e340:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e344:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e348:	f7ff ff5c 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e34c:	2c0b      	cmp	r4, #11
 800e34e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800e352:	f8ad 701e 	strh.w	r7, [sp, #30]
 800e356:	bf94      	ite	ls
 800e358:	4b19      	ldrls	r3, [pc, #100]	@ (800e3c0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800e35a:	2100      	movhi	r1, #0
 800e35c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800e360:	bf98      	it	ls
 800e362:	5d19      	ldrbls	r1, [r3, r4]
 800e364:	fb02 8307 	mla	r3, r2, r7, r8
 800e368:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e36c:	10c9      	asrs	r1, r1, #3
 800e36e:	fb01 0003 	mla	r0, r1, r3, r0
 800e372:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800e376:	a901      	add	r1, sp, #4
 800e378:	9005      	str	r0, [sp, #20]
 800e37a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e37e:	2300      	movs	r3, #0
 800e380:	6870      	ldr	r0, [r6, #4]
 800e382:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e386:	6803      	ldr	r3, [r0, #0]
 800e388:	685b      	ldr	r3, [r3, #4]
 800e38a:	4798      	blx	r3
 800e38c:	b00a      	add	sp, #40	@ 0x28
 800e38e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e392:	2d02      	cmp	r5, #2
 800e394:	d109      	bne.n	800e3aa <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800e396:	28ff      	cmp	r0, #255	@ 0xff
 800e398:	d105      	bne.n	800e3a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800e39a:	f1bc 0f00 	cmp.w	ip, #0
 800e39e:	bf14      	ite	ne
 800e3a0:	2340      	movne	r3, #64	@ 0x40
 800e3a2:	2320      	moveq	r3, #32
 800e3a4:	e7be      	b.n	800e324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e3a6:	2340      	movs	r3, #64	@ 0x40
 800e3a8:	e7bc      	b.n	800e324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e3aa:	28ff      	cmp	r0, #255	@ 0xff
 800e3ac:	d105      	bne.n	800e3ba <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800e3ae:	f1bc 0f00 	cmp.w	ip, #0
 800e3b2:	bf14      	ite	ne
 800e3b4:	2304      	movne	r3, #4
 800e3b6:	2301      	moveq	r3, #1
 800e3b8:	e7b4      	b.n	800e324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e3ba:	2304      	movs	r3, #4
 800e3bc:	e7b2      	b.n	800e324 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800e3be:	bf00      	nop
 800e3c0:	080259e8 	.word	0x080259e8

0800e3c4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800e3c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3c8:	b08b      	sub	sp, #44	@ 0x2c
 800e3ca:	461d      	mov	r5, r3
 800e3cc:	2400      	movs	r4, #0
 800e3ce:	4688      	mov	r8, r1
 800e3d0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800e3d4:	4693      	mov	fp, r2
 800e3d6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800e3da:	4607      	mov	r7, r0
 800e3dc:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800e3e0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800e3e4:	9404      	str	r4, [sp, #16]
 800e3e6:	bf14      	ite	ne
 800e3e8:	2308      	movne	r3, #8
 800e3ea:	2302      	moveq	r3, #2
 800e3ec:	fb05 b50a 	mla	r5, r5, sl, fp
 800e3f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e3f4:	f7ff ff06 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e3f8:	2e0b      	cmp	r6, #11
 800e3fa:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800e3fe:	a901      	add	r1, sp, #4
 800e400:	bf98      	it	ls
 800e402:	4b13      	ldrls	r3, [pc, #76]	@ (800e450 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800e404:	f8ad a01e 	strh.w	sl, [sp, #30]
 800e408:	bf98      	it	ls
 800e40a:	5d9c      	ldrbls	r4, [r3, r6]
 800e40c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e410:	10e4      	asrs	r4, r4, #3
 800e412:	f8cd 8010 	str.w	r8, [sp, #16]
 800e416:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e41a:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e41e:	fb04 0405 	mla	r4, r4, r5, r0
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e428:	2300      	movs	r3, #0
 800e42a:	9405      	str	r4, [sp, #20]
 800e42c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e430:	f88d 9020 	strb.w	r9, [sp, #32]
 800e434:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800e438:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e43c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800e440:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800e444:	6803      	ldr	r3, [r0, #0]
 800e446:	685b      	ldr	r3, [r3, #4]
 800e448:	4798      	blx	r3
 800e44a:	b00b      	add	sp, #44	@ 0x2c
 800e44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e450:	080259e8 	.word	0x080259e8

0800e454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800e454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e458:	461e      	mov	r6, r3
 800e45a:	4b0a      	ldr	r3, [pc, #40]	@ (800e484 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800e45c:	460f      	mov	r7, r1
 800e45e:	4690      	mov	r8, r2
 800e460:	881d      	ldrh	r5, [r3, #0]
 800e462:	f7f5 fb85 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e466:	6803      	ldr	r3, [r0, #0]
 800e468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e46a:	4798      	blx	r3
 800e46c:	280b      	cmp	r0, #11
 800e46e:	bf96      	itet	ls
 800e470:	4b05      	ldrls	r3, [pc, #20]	@ (800e488 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800e472:	2400      	movhi	r4, #0
 800e474:	5c1c      	ldrbls	r4, [r3, r0]
 800e476:	fb08 7005 	mla	r0, r8, r5, r7
 800e47a:	10e4      	asrs	r4, r4, #3
 800e47c:	fb04 6000 	mla	r0, r4, r0, r6
 800e480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e484:	2402526e 	.word	0x2402526e
 800e488:	080259e8 	.word	0x080259e8

0800e48c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800e48c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e48e:	b08b      	sub	sp, #44	@ 0x2c
 800e490:	461f      	mov	r7, r3
 800e492:	4604      	mov	r4, r0
 800e494:	4616      	mov	r6, r2
 800e496:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800e49a:	2500      	movs	r5, #0
 800e49c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e4a0:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e4a4:	9504      	str	r5, [sp, #16]
 800e4a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e4aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e4ae:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e4b2:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e4b6:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e4ba:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e4be:	f88d 3020 	strb.w	r3, [sp, #32]
 800e4c2:	f7ff fe9f 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e4c6:	463a      	mov	r2, r7
 800e4c8:	4631      	mov	r1, r6
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	f7ff ffc1 	bl	800e454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e4d2:	4b0e      	ldr	r3, [pc, #56]	@ (800e50c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800e4d4:	9005      	str	r0, [sp, #20]
 800e4d6:	881b      	ldrh	r3, [r3, #0]
 800e4d8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e4dc:	f7f5 fb48 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e4e0:	6803      	ldr	r3, [r0, #0]
 800e4e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4e4:	4798      	blx	r3
 800e4e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e4e8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800e4ec:	a901      	add	r1, sp, #4
 800e4ee:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800e4f2:	9304      	str	r3, [sp, #16]
 800e4f4:	6860      	ldr	r0, [r4, #4]
 800e4f6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e4fa:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800e4fe:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800e502:	6803      	ldr	r3, [r0, #0]
 800e504:	685b      	ldr	r3, [r3, #4]
 800e506:	4798      	blx	r3
 800e508:	b00b      	add	sp, #44	@ 0x2c
 800e50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e50c:	2402526e 	.word	0x2402526e

0800e510 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800e510:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e512:	b08d      	sub	sp, #52	@ 0x34
 800e514:	2501      	movs	r5, #1
 800e516:	4604      	mov	r4, r0
 800e518:	466b      	mov	r3, sp
 800e51a:	9503      	str	r5, [sp, #12]
 800e51c:	e883 0006 	stmia.w	r3, {r1, r2}
 800e520:	2300      	movs	r3, #0
 800e522:	f8bd 6000 	ldrh.w	r6, [sp]
 800e526:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800e52a:	9306      	str	r3, [sp, #24]
 800e52c:	6803      	ldr	r3, [r0, #0]
 800e52e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e530:	4798      	blx	r3
 800e532:	463a      	mov	r2, r7
 800e534:	4631      	mov	r1, r6
 800e536:	4603      	mov	r3, r0
 800e538:	4620      	mov	r0, r4
 800e53a:	f7ff ff8b 	bl	800e454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e53e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800e540:	9004      	str	r0, [sp, #16]
 800e542:	9307      	str	r3, [sp, #28]
 800e544:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e548:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e54c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e550:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e554:	4b0e      	ldr	r3, [pc, #56]	@ (800e590 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800e556:	881b      	ldrh	r3, [r3, #0]
 800e558:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e55c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e560:	f7f5 fb06 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e564:	6803      	ldr	r3, [r0, #0]
 800e566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e568:	4798      	blx	r3
 800e56a:	23ff      	movs	r3, #255	@ 0xff
 800e56c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e570:	a903      	add	r1, sp, #12
 800e572:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e576:	6860      	ldr	r0, [r4, #4]
 800e578:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e57c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e580:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e584:	6803      	ldr	r3, [r0, #0]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	4798      	blx	r3
 800e58a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800e58c:	b00d      	add	sp, #52	@ 0x34
 800e58e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e590:	2402526e 	.word	0x2402526e

0800e594 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800e594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e598:	b08c      	sub	sp, #48	@ 0x30
 800e59a:	461e      	mov	r6, r3
 800e59c:	2300      	movs	r3, #0
 800e59e:	4604      	mov	r4, r0
 800e5a0:	466d      	mov	r5, sp
 800e5a2:	9306      	str	r3, [sp, #24]
 800e5a4:	6803      	ldr	r3, [r0, #0]
 800e5a6:	e885 0006 	stmia.w	r5, {r1, r2}
 800e5aa:	2501      	movs	r5, #1
 800e5ac:	f8bd 7000 	ldrh.w	r7, [sp]
 800e5b0:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800e5b4:	9503      	str	r5, [sp, #12]
 800e5b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5b8:	4798      	blx	r3
 800e5ba:	4642      	mov	r2, r8
 800e5bc:	4639      	mov	r1, r7
 800e5be:	4603      	mov	r3, r0
 800e5c0:	4620      	mov	r0, r4
 800e5c2:	f7ff ff47 	bl	800e454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e5c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800e5ca:	9004      	str	r0, [sp, #16]
 800e5cc:	f8ad 3020 	strh.w	r3, [sp, #32]
 800e5d0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800e5d4:	9607      	str	r6, [sp, #28]
 800e5d6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800e5da:	4b10      	ldr	r3, [pc, #64]	@ (800e61c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800e5dc:	881b      	ldrh	r3, [r3, #0]
 800e5de:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800e5e2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e5e4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800e5e8:	f7f5 fac2 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 800e5ec:	6803      	ldr	r3, [r0, #0]
 800e5ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f0:	4798      	blx	r3
 800e5f2:	23ff      	movs	r3, #255	@ 0xff
 800e5f4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800e5f8:	a903      	add	r1, sp, #12
 800e5fa:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800e5fe:	6860      	ldr	r0, [r4, #4]
 800e600:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800e604:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800e608:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800e60c:	6803      	ldr	r3, [r0, #0]
 800e60e:	685b      	ldr	r3, [r3, #4]
 800e610:	4798      	blx	r3
 800e612:	4630      	mov	r0, r6
 800e614:	b00c      	add	sp, #48	@ 0x30
 800e616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e61a:	bf00      	nop
 800e61c:	2402526e 	.word	0x2402526e

0800e620 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800e620:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e622:	b085      	sub	sp, #20
 800e624:	4605      	mov	r5, r0
 800e626:	ac02      	add	r4, sp, #8
 800e628:	e884 0006 	stmia.w	r4, {r1, r2}
 800e62c:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800e630:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800e634:	f7ff fde6 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e638:	4631      	mov	r1, r6
 800e63a:	4603      	mov	r3, r0
 800e63c:	463a      	mov	r2, r7
 800e63e:	4628      	mov	r0, r5
 800e640:	f7ff ff08 	bl	800e454 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800e644:	4a05      	ldr	r2, [pc, #20]	@ (800e65c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800e646:	682b      	ldr	r3, [r5, #0]
 800e648:	8812      	ldrh	r2, [r2, #0]
 800e64a:	9200      	str	r2, [sp, #0]
 800e64c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800e64e:	4603      	mov	r3, r0
 800e650:	4628      	mov	r0, r5
 800e652:	e894 0006 	ldmia.w	r4, {r1, r2}
 800e656:	47b0      	blx	r6
 800e658:	b005      	add	sp, #20
 800e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e65c:	2402526e 	.word	0x2402526e

0800e660 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800e660:	b570      	push	{r4, r5, r6, lr}
 800e662:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800e666:	4604      	mov	r4, r0
 800e668:	b19b      	cbz	r3, 800e692 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800e66a:	2002      	movs	r0, #2
 800e66c:	f7f3 f982 	bl	8001974 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800e670:	2300      	movs	r3, #0
 800e672:	4620      	mov	r0, r4
 800e674:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e678:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800e67c:	6823      	ldr	r3, [r4, #0]
 800e67e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800e682:	f7ff fdbf 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e686:	4601      	mov	r1, r0
 800e688:	4620      	mov	r0, r4
 800e68a:	462b      	mov	r3, r5
 800e68c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e690:	4718      	bx	r3
 800e692:	bd70      	pop	{r4, r5, r6, pc}

0800e694 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	4605      	mov	r5, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	2003      	movs	r0, #3
 800e69c:	b149      	cbz	r1, 800e6b2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800e69e:	f7f3 f931 	bl	8001904 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e6a2:	6928      	ldr	r0, [r5, #16]
 800e6a4:	b168      	cbz	r0, 800e6c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e6a6:	6803      	ldr	r3, [r0, #0]
 800e6a8:	2101      	movs	r1, #1
 800e6aa:	695b      	ldr	r3, [r3, #20]
 800e6ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e6b0:	4718      	bx	r3
 800e6b2:	f7f3 f943 	bl	800193c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e6b6:	6928      	ldr	r0, [r5, #16]
 800e6b8:	b118      	cbz	r0, 800e6c2 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800e6ba:	6803      	ldr	r3, [r0, #0]
 800e6bc:	4621      	mov	r1, r4
 800e6be:	695b      	ldr	r3, [r3, #20]
 800e6c0:	e7f4      	b.n	800e6ac <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800e6c2:	bd70      	pop	{r4, r5, r6, pc}

0800e6c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800e6c4:	b538      	push	{r3, r4, r5, lr}
 800e6c6:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	460d      	mov	r5, r1
 800e6ce:	428b      	cmp	r3, r1
 800e6d0:	d006      	beq.n	800e6e0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800e6d2:	6803      	ldr	r3, [r0, #0]
 800e6d4:	b929      	cbnz	r1, 800e6e2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800e6d6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e6da:	4798      	blx	r3
 800e6dc:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800e6e0:	bd38      	pop	{r3, r4, r5, pc}
 800e6e2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800e6e6:	e7f8      	b.n	800e6da <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800e6e8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800e6e8:	4b0d      	ldr	r3, [pc, #52]	@ (800e720 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800e6ea:	b510      	push	{r4, lr}
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	4604      	mov	r4, r0
 800e6f0:	b95b      	cbnz	r3, 800e70a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e6f2:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800e6f6:	2b02      	cmp	r3, #2
 800e6f8:	d007      	beq.n	800e70a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e6fa:	6840      	ldr	r0, [r0, #4]
 800e6fc:	f000 f91a 	bl	800e934 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800e700:	b118      	cbz	r0, 800e70a <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800e702:	6862      	ldr	r2, [r4, #4]
 800e704:	7a53      	ldrb	r3, [r2, #9]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d0fc      	beq.n	800e704 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800e70a:	f7f4 f929 	bl	8002960 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e70e:	4620      	mov	r0, r4
 800e710:	2100      	movs	r1, #0
 800e712:	f7ff ffd7 	bl	800e6c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e716:	4620      	mov	r0, r4
 800e718:	f7ff fd74 	bl	800e204 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e71c:	bd10      	pop	{r4, pc}
 800e71e:	bf00      	nop
 800e720:	24025272 	.word	0x24025272

0800e724 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800e724:	b570      	push	{r4, r5, r6, lr}
 800e726:	4604      	mov	r4, r0
 800e728:	6803      	ldr	r3, [r0, #0]
 800e72a:	b919      	cbnz	r1, 800e734 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800e72c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e72e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e732:	4718      	bx	r3
 800e734:	2200      	movs	r2, #0
 800e736:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800e73a:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800e73e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e740:	4798      	blx	r3
 800e742:	6863      	ldr	r3, [r4, #4]
 800e744:	2101      	movs	r1, #1
 800e746:	4605      	mov	r5, r0
 800e748:	4620      	mov	r0, r4
 800e74a:	7299      	strb	r1, [r3, #10]
 800e74c:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800e750:	f7ff ffb8 	bl	800e6c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e754:	4628      	mov	r0, r5
 800e756:	bd70      	pop	{r4, r5, r6, pc}

0800e758 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800e758:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800e75c:	1a13      	subs	r3, r2, r0
 800e75e:	4258      	negs	r0, r3
 800e760:	4158      	adcs	r0, r3
 800e762:	4770      	bx	lr

0800e764 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800e764:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800e768:	1a9b      	subs	r3, r3, r2
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	bfdc      	itt	le
 800e76e:	6882      	ldrle	r2, [r0, #8]
 800e770:	189b      	addle	r3, r3, r2
 800e772:	2b01      	cmp	r3, #1
 800e774:	bfcc      	ite	gt
 800e776:	2000      	movgt	r0, #0
 800e778:	2001      	movle	r0, #1
 800e77a:	4770      	bx	lr

0800e77c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800e77c:	6902      	ldr	r2, [r0, #16]
 800e77e:	6843      	ldr	r3, [r0, #4]
 800e780:	2024      	movs	r0, #36	@ 0x24
 800e782:	fb00 3002 	mla	r0, r0, r2, r3
 800e786:	4770      	bx	lr

0800e788 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800e788:	6803      	ldr	r3, [r0, #0]
 800e78a:	691b      	ldr	r3, [r3, #16]
 800e78c:	4718      	bx	r3

0800e78e <_ZN8touchgfx13DMA_Interface7executeEv>:
 800e78e:	2301      	movs	r3, #1
 800e790:	b570      	push	{r4, r5, r6, lr}
 800e792:	7203      	strb	r3, [r0, #8]
 800e794:	4604      	mov	r4, r0
 800e796:	6840      	ldr	r0, [r0, #4]
 800e798:	6803      	ldr	r3, [r0, #0]
 800e79a:	699b      	ldr	r3, [r3, #24]
 800e79c:	4798      	blx	r3
 800e79e:	6803      	ldr	r3, [r0, #0]
 800e7a0:	4605      	mov	r5, r0
 800e7a2:	2b40      	cmp	r3, #64	@ 0x40
 800e7a4:	d00c      	beq.n	800e7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e7a6:	d810      	bhi.n	800e7ca <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800e7a8:	2b04      	cmp	r3, #4
 800e7aa:	d01d      	beq.n	800e7e8 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800e7ac:	d804      	bhi.n	800e7b8 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800e7ae:	2b01      	cmp	r3, #1
 800e7b0:	d006      	beq.n	800e7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e7b2:	2b02      	cmp	r3, #2
 800e7b4:	d02c      	beq.n	800e810 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800e7b6:	bd70      	pop	{r4, r5, r6, pc}
 800e7b8:	2b08      	cmp	r3, #8
 800e7ba:	d01d      	beq.n	800e7f8 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800e7bc:	2b20      	cmp	r3, #32
 800e7be:	d1fa      	bne.n	800e7b6 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800e7c0:	6823      	ldr	r3, [r4, #0]
 800e7c2:	4620      	mov	r0, r4
 800e7c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e7c6:	4798      	blx	r3
 800e7c8:	e013      	b.n	800e7f2 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800e7ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7ce:	d0f7      	beq.n	800e7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e7d0:	d804      	bhi.n	800e7dc <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800e7d2:	2b80      	cmp	r3, #128	@ 0x80
 800e7d4:	d0f4      	beq.n	800e7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e7d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7da:	e7f0      	b.n	800e7be <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800e7dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e7e0:	d0ee      	beq.n	800e7c0 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800e7e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e7e6:	e7e5      	b.n	800e7b4 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800e7e8:	6823      	ldr	r3, [r4, #0]
 800e7ea:	7f01      	ldrb	r1, [r0, #28]
 800e7ec:	4620      	mov	r0, r4
 800e7ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e7f0:	4798      	blx	r3
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e7f6:	e006      	b.n	800e806 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800e7f8:	6823      	ldr	r3, [r4, #0]
 800e7fa:	7f01      	ldrb	r1, [r0, #28]
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e800:	4798      	blx	r3
 800e802:	6823      	ldr	r3, [r4, #0]
 800e804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e806:	4629      	mov	r1, r5
 800e808:	4620      	mov	r0, r4
 800e80a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e80e:	4718      	bx	r3
 800e810:	6823      	ldr	r3, [r4, #0]
 800e812:	4620      	mov	r0, r4
 800e814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e816:	4798      	blx	r3
 800e818:	e7f3      	b.n	800e802 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800e81a <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800e81a:	4770      	bx	lr

0800e81c <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800e81c:	4770      	bx	lr

0800e81e <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800e81e:	4770      	bx	lr

0800e820 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800e820:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800e824:	b510      	push	{r4, lr}
 800e826:	1ad2      	subs	r2, r2, r3
 800e828:	2a00      	cmp	r2, #0
 800e82a:	bfdc      	itt	le
 800e82c:	6884      	ldrle	r4, [r0, #8]
 800e82e:	1912      	addle	r2, r2, r4
 800e830:	2a01      	cmp	r2, #1
 800e832:	dd16      	ble.n	800e862 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800e834:	6842      	ldr	r2, [r0, #4]
 800e836:	2424      	movs	r4, #36	@ 0x24
 800e838:	fb04 2303 	mla	r3, r4, r3, r2
 800e83c:	f101 0220 	add.w	r2, r1, #32
 800e840:	f851 4b04 	ldr.w	r4, [r1], #4
 800e844:	4291      	cmp	r1, r2
 800e846:	f843 4b04 	str.w	r4, [r3], #4
 800e84a:	d1f9      	bne.n	800e840 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800e84c:	780a      	ldrb	r2, [r1, #0]
 800e84e:	701a      	strb	r2, [r3, #0]
 800e850:	68c3      	ldr	r3, [r0, #12]
 800e852:	6882      	ldr	r2, [r0, #8]
 800e854:	f3bf 8f5b 	dmb	ish
 800e858:	3301      	adds	r3, #1
 800e85a:	429a      	cmp	r2, r3
 800e85c:	bfd8      	it	le
 800e85e:	1a9b      	suble	r3, r3, r2
 800e860:	60c3      	str	r3, [r0, #12]
 800e862:	bd10      	pop	{r4, pc}

0800e864 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800e864:	6903      	ldr	r3, [r0, #16]
 800e866:	6882      	ldr	r2, [r0, #8]
 800e868:	f3bf 8f5b 	dmb	ish
 800e86c:	3301      	adds	r3, #1
 800e86e:	429a      	cmp	r2, r3
 800e870:	bfd8      	it	le
 800e872:	1a9b      	suble	r3, r3, r2
 800e874:	6103      	str	r3, [r0, #16]
 800e876:	4770      	bx	lr

0800e878 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800e878:	b570      	push	{r4, r5, r6, lr}
 800e87a:	4604      	mov	r4, r0
 800e87c:	460e      	mov	r6, r1
 800e87e:	6860      	ldr	r0, [r4, #4]
 800e880:	6803      	ldr	r3, [r0, #0]
 800e882:	685b      	ldr	r3, [r3, #4]
 800e884:	4798      	blx	r3
 800e886:	2800      	cmp	r0, #0
 800e888:	d1f9      	bne.n	800e87e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800e88a:	4d0d      	ldr	r5, [pc, #52]	@ (800e8c0 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800e88c:	6828      	ldr	r0, [r5, #0]
 800e88e:	6803      	ldr	r3, [r0, #0]
 800e890:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e892:	4798      	blx	r3
 800e894:	f7f4 f872 	bl	800297c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800e898:	6828      	ldr	r0, [r5, #0]
 800e89a:	2101      	movs	r1, #1
 800e89c:	f7ff ff12 	bl	800e6c4 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800e8a0:	6860      	ldr	r0, [r4, #4]
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	6803      	ldr	r3, [r0, #0]
 800e8a6:	689b      	ldr	r3, [r3, #8]
 800e8a8:	4798      	blx	r3
 800e8aa:	6823      	ldr	r3, [r4, #0]
 800e8ac:	4620      	mov	r0, r4
 800e8ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8b0:	4798      	blx	r3
 800e8b2:	6828      	ldr	r0, [r5, #0]
 800e8b4:	6803      	ldr	r3, [r0, #0]
 800e8b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e8ba:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800e8bc:	4718      	bx	r3
 800e8be:	bf00      	nop
 800e8c0:	24025274 	.word	0x24025274

0800e8c4 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800e8c4:	b508      	push	{r3, lr}
 800e8c6:	f7f4 f84b 	bl	8002960 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800e8ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800e8ce:	f7f4 b84f 	b.w	8002970 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800e8d2 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800e8d2:	b510      	push	{r4, lr}
 800e8d4:	4604      	mov	r4, r0
 800e8d6:	2114      	movs	r1, #20
 800e8d8:	f013 f887 	bl	80219ea <_ZdlPvj>
 800e8dc:	4620      	mov	r0, r4
 800e8de:	bd10      	pop	{r4, pc}

0800e8e0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800e8e0:	b570      	push	{r4, r5, r6, lr}
 800e8e2:	4604      	mov	r4, r0
 800e8e4:	6840      	ldr	r0, [r0, #4]
 800e8e6:	6803      	ldr	r3, [r0, #0]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	4798      	blx	r3
 800e8ec:	4605      	mov	r5, r0
 800e8ee:	b930      	cbnz	r0, 800e8fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e8f0:	7a23      	ldrb	r3, [r4, #8]
 800e8f2:	b123      	cbz	r3, 800e8fe <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800e8f4:	6860      	ldr	r0, [r4, #4]
 800e8f6:	6803      	ldr	r3, [r0, #0]
 800e8f8:	695b      	ldr	r3, [r3, #20]
 800e8fa:	4798      	blx	r3
 800e8fc:	7225      	strb	r5, [r4, #8]
 800e8fe:	6860      	ldr	r0, [r4, #4]
 800e900:	6803      	ldr	r3, [r0, #0]
 800e902:	681b      	ldr	r3, [r3, #0]
 800e904:	4798      	blx	r3
 800e906:	b928      	cbnz	r0, 800e914 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800e908:	6823      	ldr	r3, [r4, #0]
 800e90a:	4620      	mov	r0, r4
 800e90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e90e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e912:	4718      	bx	r3
 800e914:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e918:	f7f4 b838 	b.w	800298c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800e91c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800e91c:	b510      	push	{r4, lr}
 800e91e:	6082      	str	r2, [r0, #8]
 800e920:	2200      	movs	r2, #0
 800e922:	4c03      	ldr	r4, [pc, #12]	@ (800e930 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800e924:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800e928:	e9c0 4100 	strd	r4, r1, [r0]
 800e92c:	bd10      	pop	{r4, pc}
 800e92e:	bf00      	nop
 800e930:	080259fc 	.word	0x080259fc

0800e934 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800e934:	6840      	ldr	r0, [r0, #4]
 800e936:	6803      	ldr	r3, [r0, #0]
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	4718      	bx	r3

0800e93c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800e93c:	2300      	movs	r3, #0
 800e93e:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800e940:	8503      	strh	r3, [r0, #40]	@ 0x28
 800e942:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800e944:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800e946:	6980      	ldr	r0, [r0, #24]
 800e948:	b110      	cbz	r0, 800e950 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800e94a:	6803      	ldr	r3, [r0, #0]
 800e94c:	691b      	ldr	r3, [r3, #16]
 800e94e:	4718      	bx	r3
 800e950:	4770      	bx	lr

0800e952 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800e952:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800e956:	4770      	bx	lr

0800e958 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800e958:	b538      	push	{r3, r4, r5, lr}
 800e95a:	0e0b      	lsrs	r3, r1, #24
 800e95c:	4604      	mov	r4, r0
 800e95e:	460d      	mov	r5, r1
 800e960:	7783      	strb	r3, [r0, #30]
 800e962:	6803      	ldr	r3, [r0, #0]
 800e964:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e966:	4798      	blx	r3
 800e968:	6803      	ldr	r3, [r0, #0]
 800e96a:	4629      	mov	r1, r5
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	4798      	blx	r3
 800e970:	6823      	ldr	r3, [r4, #0]
 800e972:	4620      	mov	r0, r4
 800e974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e976:	4798      	blx	r3
 800e978:	61a0      	str	r0, [r4, #24]
 800e97a:	bd38      	pop	{r3, r4, r5, pc}

0800e97c <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800e97c:	7741      	strb	r1, [r0, #29]
 800e97e:	4770      	bx	lr

0800e980 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800e980:	b530      	push	{r4, r5, lr}
 800e982:	460d      	mov	r5, r1
 800e984:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800e988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e98a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e98c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e98e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	6023      	str	r3, [r4, #0]
 800e994:	bd30      	pop	{r4, r5, pc}

0800e996 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800e996:	b538      	push	{r3, r4, r5, lr}
 800e998:	4604      	mov	r4, r0
 800e99a:	1d03      	adds	r3, r0, #4
 800e99c:	6808      	ldr	r0, [r1, #0]
 800e99e:	2500      	movs	r5, #0
 800e9a0:	6849      	ldr	r1, [r1, #4]
 800e9a2:	c303      	stmia	r3!, {r0, r1}
 800e9a4:	6813      	ldr	r3, [r2, #0]
 800e9a6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800e9aa:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800e9ae:	6853      	ldr	r3, [r2, #4]
 800e9b0:	61a5      	str	r5, [r4, #24]
 800e9b2:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800e9b6:	f005 f83f 	bl	8013a38 <_ZN8touchgfx9Matrix3x35resetEv>
 800e9ba:	23ff      	movs	r3, #255	@ 0xff
 800e9bc:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800e9c0:	7763      	strb	r3, [r4, #29]
 800e9c2:	77a3      	strb	r3, [r4, #30]
 800e9c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800e9c8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800e9d0:	bd38      	pop	{r3, r4, r5, pc}
	...

0800e9d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800e9d4:	ee70 7a41 	vsub.f32	s15, s0, s2
 800e9d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e9e0:	4605      	mov	r5, r0
 800e9e2:	ed2d 8b0a 	vpush	{d8-d12}
 800e9e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9ea:	b086      	sub	sp, #24
 800e9ec:	eeb0 ba40 	vmov.f32	s22, s0
 800e9f0:	6802      	ldr	r2, [r0, #0]
 800e9f2:	eef0 ba60 	vmov.f32	s23, s1
 800e9f6:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800e9fa:	eef0 aa41 	vmov.f32	s21, s2
 800e9fe:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ea00:	eeb0 aa61 	vmov.f32	s20, s3
 800ea04:	eeb0 ca42 	vmov.f32	s24, s4
 800ea08:	eef0 ca62 	vmov.f32	s25, s5
 800ea0c:	d112      	bne.n	800ea34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ea0e:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800ea12:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ea16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea1a:	d10b      	bne.n	800ea34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ea1c:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800ea20:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ea22:	3901      	subs	r1, #1
 800ea24:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800ea28:	b006      	add	sp, #24
 800ea2a:	ecbd 8b0a 	vpop	{d8-d12}
 800ea2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea32:	4710      	bx	r2
 800ea34:	23ff      	movs	r3, #255	@ 0xff
 800ea36:	4628      	mov	r0, r5
 800ea38:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800ea3c:	77ab      	strb	r3, [r5, #30]
 800ea3e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800ea40:	4798      	blx	r3
 800ea42:	eeb0 0a4b 	vmov.f32	s0, s22
 800ea46:	eef0 0a6b 	vmov.f32	s1, s23
 800ea4a:	4604      	mov	r4, r0
 800ea4c:	4640      	mov	r0, r8
 800ea4e:	f005 f8a2 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ea52:	eef0 8a40 	vmov.f32	s17, s0
 800ea56:	ed8d 0a00 	vstr	s0, [sp]
 800ea5a:	eeb0 0a6a 	vmov.f32	s0, s21
 800ea5e:	eef0 9a60 	vmov.f32	s19, s1
 800ea62:	edcd 0a01 	vstr	s1, [sp, #4]
 800ea66:	4640      	mov	r0, r8
 800ea68:	eef0 0a4a 	vmov.f32	s1, s20
 800ea6c:	f005 f893 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ea70:	eef4 8a40 	vcmp.f32	s17, s0
 800ea74:	eeb0 8a40 	vmov.f32	s16, s0
 800ea78:	ed8d 0a02 	vstr	s0, [sp, #8]
 800ea7c:	eeb0 9a60 	vmov.f32	s18, s1
 800ea80:	edcd 0a03 	vstr	s1, [sp, #12]
 800ea84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea88:	eef4 9a60 	vcmp.f32	s19, s1
 800ea8c:	bf0c      	ite	eq
 800ea8e:	2301      	moveq	r3, #1
 800ea90:	2300      	movne	r3, #0
 800ea92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea96:	eef4 8a40 	vcmp.f32	s17, s0
 800ea9a:	7463      	strb	r3, [r4, #17]
 800ea9c:	bf0c      	ite	eq
 800ea9e:	2301      	moveq	r3, #1
 800eaa0:	2300      	movne	r3, #0
 800eaa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa6:	74a3      	strb	r3, [r4, #18]
 800eaa8:	d024      	beq.n	800eaf4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800eaaa:	eef4 9a60 	vcmp.f32	s19, s1
 800eaae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eab2:	d01f      	beq.n	800eaf4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800eab4:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800eab8:	4640      	mov	r0, r8
 800eaba:	ee7a aacb 	vsub.f32	s21, s21, s22
 800eabe:	eeb0 0a4b 	vmov.f32	s0, s22
 800eac2:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800eac6:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800eaca:	eef0 0a6b 	vmov.f32	s1, s23
 800eace:	eea7 0acc 	vfms.f32	s0, s15, s24
 800ead2:	eeec 0a87 	vfma.f32	s1, s25, s14
 800ead6:	f005 f85e 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800eada:	ed8d 0a04 	vstr	s0, [sp, #16]
 800eade:	ee30 0a68 	vsub.f32	s0, s0, s17
 800eae2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eae6:	edcd 0a05 	vstr	s1, [sp, #20]
 800eaea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaee:	d121      	bne.n	800eb34 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	74a3      	strb	r3, [r4, #18]
 800eaf4:	7c63      	ldrb	r3, [r4, #17]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d051      	beq.n	800eb9e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800eafa:	ee39 7a69 	vsub.f32	s14, s18, s19
 800eafe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ebf4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800eb02:	eef4 9ac9 	vcmpe.f32	s19, s18
 800eb06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800eb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb0e:	edc4 7a08 	vstr	s15, [r4, #32]
 800eb12:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800eb16:	ee17 3a90 	vmov	r3, s15
 800eb1a:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800eb1e:	b21a      	sxth	r2, r3
 800eb20:	ee17 3a90 	vmov	r3, s15
 800eb24:	bf48      	it	mi
 800eb26:	8122      	strhmi	r2, [r4, #8]
 800eb28:	b21b      	sxth	r3, r3
 800eb2a:	bf56      	itet	pl
 800eb2c:	80e2      	strhpl	r2, [r4, #6]
 800eb2e:	80e3      	strhmi	r3, [r4, #6]
 800eb30:	8123      	strhpl	r3, [r4, #8]
 800eb32:	e02c      	b.n	800eb8e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eb34:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800eb38:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800eb3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800eb40:	edc4 7a05 	vstr	s15, [r4, #20]
 800eb44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb48:	d102      	bne.n	800eb50 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800eb4a:	2301      	movs	r3, #1
 800eb4c:	7463      	strb	r3, [r4, #17]
 800eb4e:	e7d1      	b.n	800eaf4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800eb50:	eeb0 7a69 	vmov.f32	s14, s19
 800eb54:	ee39 9a69 	vsub.f32	s18, s18, s19
 800eb58:	ee38 8a68 	vsub.f32	s16, s16, s17
 800eb5c:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800eb60:	ed84 7a06 	vstr	s14, [r4, #24]
 800eb64:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800eb68:	ee38 8a47 	vsub.f32	s16, s16, s14
 800eb6c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800ebf8 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800eb70:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800eb74:	ed84 8a07 	vstr	s16, [r4, #28]
 800eb78:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eb7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eb80:	edc4 7a08 	vstr	s15, [r4, #32]
 800eb84:	d503      	bpl.n	800eb8e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eb86:	eeb1 8a48 	vneg.f32	s16, s16
 800eb8a:	ed84 8a07 	vstr	s16, [r4, #28]
 800eb8e:	60e7      	str	r7, [r4, #12]
 800eb90:	7426      	strb	r6, [r4, #16]
 800eb92:	61ac      	str	r4, [r5, #24]
 800eb94:	b006      	add	sp, #24
 800eb96:	ecbd 8b0a 	vpop	{d8-d12}
 800eb9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb9e:	7ca3      	ldrb	r3, [r4, #18]
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d0f4      	beq.n	800eb8e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800eba4:	ee38 7a68 	vsub.f32	s14, s16, s17
 800eba8:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800ebf4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800ebac:	eef4 8ac8 	vcmpe.f32	s17, s16
 800ebb0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ebb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebb8:	edc4 7a08 	vstr	s15, [r4, #32]
 800ebbc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800ebc0:	ee17 3a90 	vmov	r3, s15
 800ebc4:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800ebc8:	b21a      	sxth	r2, r3
 800ebca:	ee17 3a90 	vmov	r3, s15
 800ebce:	bf48      	it	mi
 800ebd0:	8122      	strhmi	r2, [r4, #8]
 800ebd2:	b21b      	sxth	r3, r3
 800ebd4:	bf56      	itet	pl
 800ebd6:	80e2      	strhpl	r2, [r4, #6]
 800ebd8:	80e3      	strhmi	r3, [r4, #6]
 800ebda:	8123      	strhpl	r3, [r4, #8]
 800ebdc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ebe0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800ebe4:	1a9b      	subs	r3, r3, r2
 800ebe6:	ee07 3a90 	vmov	s15, r3
 800ebea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ebee:	edc4 7a07 	vstr	s15, [r4, #28]
 800ebf2:	e7cc      	b.n	800eb8e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800ebf4:	447ffffe 	.word	0x447ffffe
 800ebf8:	44800000 	.word	0x44800000

0800ebfc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800ebfc:	b510      	push	{r4, lr}
 800ebfe:	ed2d 8b02 	vpush	{d8}
 800ec02:	eef0 8a62 	vmov.f32	s17, s5
 800ec06:	2100      	movs	r1, #0
 800ec08:	4604      	mov	r4, r0
 800ec0a:	eeb0 8a42 	vmov.f32	s16, s4
 800ec0e:	f011 f887 	bl	801fd20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800ec12:	eef0 7a68 	vmov.f32	s15, s17
 800ec16:	6823      	ldr	r3, [r4, #0]
 800ec18:	4620      	mov	r0, r4
 800ec1a:	689b      	ldr	r3, [r3, #8]
 800ec1c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec20:	ee17 2a90 	vmov	r2, s15
 800ec24:	eef0 7a48 	vmov.f32	s15, s16
 800ec28:	ecbd 8b02 	vpop	{d8}
 800ec2c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec34:	ee17 1a90 	vmov	r1, s15
 800ec38:	4718      	bx	r3

0800ec3a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800ec3a:	b510      	push	{r4, lr}
 800ec3c:	ed2d 8b02 	vpush	{d8}
 800ec40:	eef0 8a63 	vmov.f32	s17, s7
 800ec44:	2100      	movs	r1, #0
 800ec46:	4604      	mov	r4, r0
 800ec48:	eeb0 8a43 	vmov.f32	s16, s6
 800ec4c:	f011 f92a 	bl	801fea4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800ec50:	eef0 7a68 	vmov.f32	s15, s17
 800ec54:	6823      	ldr	r3, [r4, #0]
 800ec56:	4620      	mov	r0, r4
 800ec58:	689b      	ldr	r3, [r3, #8]
 800ec5a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec5e:	ee17 2a90 	vmov	r2, s15
 800ec62:	eef0 7a48 	vmov.f32	s15, s16
 800ec66:	ecbd 8b02 	vpop	{d8}
 800ec6a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec72:	ee17 1a90 	vmov	r1, s15
 800ec76:	4718      	bx	r3

0800ec78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800ec78:	b513      	push	{r0, r1, r4, lr}
 800ec7a:	4604      	mov	r4, r0
 800ec7c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ec7e:	f004 ff8a 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ec82:	eef0 7a60 	vmov.f32	s15, s1
 800ec86:	4620      	mov	r0, r4
 800ec88:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec8c:	ee17 2a90 	vmov	r2, s15
 800ec90:	eef0 7a40 	vmov.f32	s15, s0
 800ec94:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ec98:	ee17 1a90 	vmov	r1, s15
 800ec9c:	b002      	add	sp, #8
 800ec9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800eca2:	f010 bf97 	b.w	801fbd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800eca6:	b513      	push	{r0, r1, r4, lr}
 800eca8:	4604      	mov	r4, r0
 800ecaa:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800ecac:	f004 ff73 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ecb0:	eef0 7a60 	vmov.f32	s15, s1
 800ecb4:	4620      	mov	r0, r4
 800ecb6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ecba:	ee17 2a90 	vmov	r2, s15
 800ecbe:	eef0 7a40 	vmov.f32	s15, s0
 800ecc2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800ecc6:	ee17 1a90 	vmov	r1, s15
 800ecca:	b002      	add	sp, #8
 800eccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd0:	f010 bfcd 	b.w	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800ecd4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800ecd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecd6:	2400      	movs	r4, #0
 800ecd8:	9f07      	ldr	r7, [sp, #28]
 800ecda:	f04f 0e01 	mov.w	lr, #1
 800ecde:	4626      	mov	r6, r4
 800ece0:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800ece4:	4463      	add	r3, ip
 800ece6:	4563      	cmp	r3, ip
 800ece8:	d02d      	beq.n	800ed46 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800ecea:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800ecee:	2d06      	cmp	r5, #6
 800ecf0:	d8f9      	bhi.n	800ece6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ecf2:	fa0e f505 	lsl.w	r5, lr, r5
 800ecf6:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800ecfa:	d10d      	bne.n	800ed18 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800ecfc:	f015 0f10 	tst.w	r5, #16
 800ed00:	d117      	bne.n	800ed32 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800ed02:	072d      	lsls	r5, r5, #28
 800ed04:	d5ef      	bpl.n	800ece6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ed06:	3801      	subs	r0, #1
 800ed08:	b91e      	cbnz	r6, 800ed12 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800ed0a:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800ed0e:	682d      	ldr	r5, [r5, #0]
 800ed10:	600d      	str	r5, [r1, #0]
 800ed12:	b96c      	cbnz	r4, 800ed30 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ed14:	2601      	movs	r6, #1
 800ed16:	e7e6      	b.n	800ece6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ed18:	b926      	cbnz	r6, 800ed24 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800ed1a:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800ed1e:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800ed22:	600b      	str	r3, [r1, #0]
 800ed24:	b924      	cbnz	r4, 800ed30 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ed26:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800ed2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800ed2e:	6013      	str	r3, [r2, #0]
 800ed30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed32:	3801      	subs	r0, #1
 800ed34:	b91c      	cbnz	r4, 800ed3e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800ed36:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800ed3a:	6824      	ldr	r4, [r4, #0]
 800ed3c:	6014      	str	r4, [r2, #0]
 800ed3e:	2e00      	cmp	r6, #0
 800ed40:	d1f6      	bne.n	800ed30 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ed42:	2401      	movs	r4, #1
 800ed44:	e7cf      	b.n	800ece6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800ed46:	b90e      	cbnz	r6, 800ed4c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800ed48:	2300      	movs	r3, #0
 800ed4a:	600b      	str	r3, [r1, #0]
 800ed4c:	2c00      	cmp	r4, #0
 800ed4e:	d1ef      	bne.n	800ed30 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800ed50:	2300      	movs	r3, #0
 800ed52:	e7ec      	b.n	800ed2e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800ed54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	ed2d 8b0a 	vpush	{d8-d12}
 800ed5a:	eef0 ba40 	vmov.f32	s23, s0
 800ed5e:	4604      	mov	r4, r0
 800ed60:	eeb0 ca60 	vmov.f32	s24, s1
 800ed64:	460d      	mov	r5, r1
 800ed66:	eef0 aa41 	vmov.f32	s21, s2
 800ed6a:	eeb0 ba61 	vmov.f32	s22, s3
 800ed6e:	eeb0 9a42 	vmov.f32	s18, s4
 800ed72:	eef0 9a62 	vmov.f32	s19, s5
 800ed76:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800ed7a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800ed7e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800ed82:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800ed86:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800ed8a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800ed8e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800ed92:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ed96:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800ed9a:	f012 fe51 	bl	8021a40 <sqrtf>
 800ed9e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800eda2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eda6:	d12e      	bne.n	800ee06 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800eda8:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800edac:	ee39 7acb 	vsub.f32	s14, s19, s22
 800edb0:	eeb0 8a6a 	vmov.f32	s16, s21
 800edb4:	eef0 8a4b 	vmov.f32	s17, s22
 800edb8:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800edbc:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800edc0:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800edc4:	eee7 8aca 	vfms.f32	s17, s15, s20
 800edc8:	2d02      	cmp	r5, #2
 800edca:	dc2f      	bgt.n	800ee2c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800edcc:	3501      	adds	r5, #1
 800edce:	eef0 1a4b 	vmov.f32	s3, s22
 800edd2:	eeb0 1a6a 	vmov.f32	s2, s21
 800edd6:	4620      	mov	r0, r4
 800edd8:	4629      	mov	r1, r5
 800edda:	eef0 2a68 	vmov.f32	s5, s17
 800edde:	eeb0 2a48 	vmov.f32	s4, s16
 800ede2:	eef0 0a4c 	vmov.f32	s1, s24
 800ede6:	eeb0 0a6b 	vmov.f32	s0, s23
 800edea:	f7ff ffb3 	bl	800ed54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800edee:	eef0 0a68 	vmov.f32	s1, s17
 800edf2:	eeb0 0a48 	vmov.f32	s0, s16
 800edf6:	4620      	mov	r0, r4
 800edf8:	f7ff ff55 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800edfc:	eeb0 ba68 	vmov.f32	s22, s17
 800ee00:	eef0 aa48 	vmov.f32	s21, s16
 800ee04:	e7b9      	b.n	800ed7a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800ee06:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800ee0a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800ee0e:	ee78 8acc 	vsub.f32	s17, s17, s24
 800ee12:	ee28 7a27 	vmul.f32	s14, s16, s15
 800ee16:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ee1a:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800ee1e:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800ee22:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800ee26:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800ee2a:	e7cd      	b.n	800edc8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800ee2c:	eef0 0a68 	vmov.f32	s1, s17
 800ee30:	4620      	mov	r0, r4
 800ee32:	eeb0 0a48 	vmov.f32	s0, s16
 800ee36:	f7ff ff36 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee3a:	ecbd 8b0a 	vpop	{d8-d12}
 800ee3e:	bd38      	pop	{r3, r4, r5, pc}

0800ee40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800ee40:	b510      	push	{r4, lr}
 800ee42:	ed2d 8b0a 	vpush	{d8-d12}
 800ee46:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800ee4a:	4604      	mov	r4, r0
 800ee4c:	eeb0 ca40 	vmov.f32	s24, s0
 800ee50:	2b02      	cmp	r3, #2
 800ee52:	eeb0 9a60 	vmov.f32	s18, s1
 800ee56:	eef0 9a41 	vmov.f32	s19, s2
 800ee5a:	eef0 8a61 	vmov.f32	s17, s3
 800ee5e:	eeb0 ba42 	vmov.f32	s22, s4
 800ee62:	eef0 ba62 	vmov.f32	s23, s5
 800ee66:	eeb0 aa43 	vmov.f32	s20, s6
 800ee6a:	eef0 aa63 	vmov.f32	s21, s7
 800ee6e:	eeb0 8a44 	vmov.f32	s16, s8
 800ee72:	eef0 ca64 	vmov.f32	s25, s9
 800ee76:	d12c      	bne.n	800eed2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800ee78:	eef0 0a62 	vmov.f32	s1, s5
 800ee7c:	eeb0 0a42 	vmov.f32	s0, s4
 800ee80:	f7ff ff11 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ee84:	ee79 9acb 	vsub.f32	s19, s19, s22
 800ee88:	ee7a caec 	vsub.f32	s25, s21, s25
 800ee8c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800ee90:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800ee94:	ee69 9aac 	vmul.f32	s19, s19, s25
 800ee98:	ee28 8a88 	vmul.f32	s16, s17, s16
 800ee9c:	eef4 9ac8 	vcmpe.f32	s19, s16
 800eea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eea4:	db0f      	blt.n	800eec6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800eea6:	2101      	movs	r1, #1
 800eea8:	eef0 2a6a 	vmov.f32	s5, s21
 800eeac:	eeb0 2a4a 	vmov.f32	s4, s20
 800eeb0:	4620      	mov	r0, r4
 800eeb2:	eef0 1a6b 	vmov.f32	s3, s23
 800eeb6:	eeb0 1a4b 	vmov.f32	s2, s22
 800eeba:	eef0 0a49 	vmov.f32	s1, s18
 800eebe:	eeb0 0a4c 	vmov.f32	s0, s24
 800eec2:	f7ff ff47 	bl	800ed54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800eec6:	eef0 0a6a 	vmov.f32	s1, s21
 800eeca:	4620      	mov	r0, r4
 800eecc:	eeb0 0a4a 	vmov.f32	s0, s20
 800eed0:	e035      	b.n	800ef3e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800eed2:	2b01      	cmp	r3, #1
 800eed4:	d138      	bne.n	800ef48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800eed6:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800eeda:	ee33 6a48 	vsub.f32	s12, s6, s16
 800eede:	ee71 7a42 	vsub.f32	s15, s2, s4
 800eee2:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800eee6:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800eeea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800eeee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800eef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eef6:	d027      	beq.n	800ef48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800eef8:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800eefc:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800ef00:	eea4 8a83 	vfma.f32	s16, s9, s6
 800ef04:	eee1 8a22 	vfma.f32	s17, s2, s5
 800ef08:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800ef0c:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800ef10:	eee6 7a28 	vfma.f32	s15, s12, s17
 800ef14:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800ef18:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800ef1c:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800ef20:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800ef24:	ee3c ca40 	vsub.f32	s24, s24, s0
 800ef28:	ee39 9a60 	vsub.f32	s18, s18, s1
 800ef2c:	ee29 9a09 	vmul.f32	s18, s18, s18
 800ef30:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800ef34:	eef4 7ac9 	vcmpe.f32	s15, s18
 800ef38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef3c:	db04      	blt.n	800ef48 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800ef3e:	f7ff feb2 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef42:	ecbd 8b0a 	vpop	{d8-d12}
 800ef46:	bd10      	pop	{r4, pc}
 800ef48:	eef0 0a6b 	vmov.f32	s1, s23
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	eeb0 0a4b 	vmov.f32	s0, s22
 800ef52:	f7ff fea8 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef56:	e7b6      	b.n	800eec6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800ef58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800ef58:	b510      	push	{r4, lr}
 800ef5a:	ed2d 8b0c 	vpush	{d8-d13}
 800ef5e:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800ef62:	4604      	mov	r4, r0
 800ef64:	eeb0 9a40 	vmov.f32	s18, s0
 800ef68:	eef0 9a60 	vmov.f32	s19, s1
 800ef6c:	eef0 aa41 	vmov.f32	s21, s2
 800ef70:	eeb0 ba61 	vmov.f32	s22, s3
 800ef74:	b933      	cbnz	r3, 800ef84 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800ef76:	f7ff fe96 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800ef7a:	eef0 0a4b 	vmov.f32	s1, s22
 800ef7e:	eeb0 0a6a 	vmov.f32	s0, s21
 800ef82:	e015      	b.n	800efb0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800ef84:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ef88:	2b02      	cmp	r3, #2
 800ef8a:	ee71 8a40 	vsub.f32	s17, s2, s0
 800ef8e:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800ef92:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800ef96:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ef9a:	d10f      	bne.n	800efbc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800ef9c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800efa0:	ee30 0a08 	vadd.f32	s0, s0, s16
 800efa4:	f7ff fe7f 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efa8:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800efac:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800efb0:	4620      	mov	r0, r4
 800efb2:	f7ff fe78 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efb6:	ecbd 8b0c 	vpop	{d8-d13}
 800efba:	bd10      	pop	{r4, pc}
 800efbc:	f7ff fe73 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800efc0:	eef0 0a69 	vmov.f32	s1, s19
 800efc4:	eeb0 0a49 	vmov.f32	s0, s18
 800efc8:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800f0f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800efcc:	eeb1 aa68 	vneg.f32	s20, s17
 800efd0:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f0fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800efd4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800efd8:	4620      	mov	r0, r4
 800efda:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800efde:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f100 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800efe2:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f104 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800efe6:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f108 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800efea:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800efee:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800eff2:	f7ff fe58 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800eff6:	eef0 0a69 	vmov.f32	s1, s19
 800effa:	eeb0 0a49 	vmov.f32	s0, s18
 800effe:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f10c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800f002:	4620      	mov	r0, r4
 800f004:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f008:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f00c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f010:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f014:	f7ff fe47 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f018:	eef0 0a69 	vmov.f32	s1, s19
 800f01c:	eeb0 0a49 	vmov.f32	s0, s18
 800f020:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f110 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800f024:	4620      	mov	r0, r4
 800f026:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f02a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f02e:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f032:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f036:	f7ff fe36 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f03a:	eef0 0a69 	vmov.f32	s1, s19
 800f03e:	eeb0 0a49 	vmov.f32	s0, s18
 800f042:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f114 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800f046:	4620      	mov	r0, r4
 800f048:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f04c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f050:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f054:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f058:	f7ff fe25 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f05c:	ee79 0a88 	vadd.f32	s1, s19, s16
 800f060:	ee39 0a28 	vadd.f32	s0, s18, s17
 800f064:	4620      	mov	r0, r4
 800f066:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f06a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f06e:	f7ff fe1a 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f072:	eef0 0a69 	vmov.f32	s1, s19
 800f076:	eeb0 0a49 	vmov.f32	s0, s18
 800f07a:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f118 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800f07e:	4620      	mov	r0, r4
 800f080:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f084:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f088:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f08c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f090:	f7ff fe09 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f094:	eef0 0a69 	vmov.f32	s1, s19
 800f098:	eeb0 0a49 	vmov.f32	s0, s18
 800f09c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f11c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800f0a0:	4620      	mov	r0, r4
 800f0a2:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f0a6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f0aa:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f0ae:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f0b2:	f7ff fdf8 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f0b6:	eef0 0a69 	vmov.f32	s1, s19
 800f0ba:	eeb0 0a49 	vmov.f32	s0, s18
 800f0be:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f120 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800f0c2:	4620      	mov	r0, r4
 800f0c4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f0c8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f0cc:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f0d0:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f0d4:	f7ff fde7 	bl	800eca6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f0d8:	eef0 0a69 	vmov.f32	s1, s19
 800f0dc:	eeb0 0a49 	vmov.f32	s0, s18
 800f0e0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f124 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800f0e4:	4620      	mov	r0, r4
 800f0e6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f0ea:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f0ee:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f0f2:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f0f6:	e73e      	b.n	800ef76 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800f0f8:	3d23d70a 	.word	0x3d23d70a
 800f0fc:	3e8f5c29 	.word	0x3e8f5c29
 800f100:	3f19999a 	.word	0x3f19999a
 800f104:	3f4ccccd 	.word	0x3f4ccccd
 800f108:	3f75c28f 	.word	0x3f75c28f
 800f10c:	3e4ccccd 	.word	0x3e4ccccd
 800f110:	3ecccccd 	.word	0x3ecccccd
 800f114:	3f3851ec 	.word	0x3f3851ec
 800f118:	3fa3d70a 	.word	0x3fa3d70a
 800f11c:	3fcccccd 	.word	0x3fcccccd
 800f120:	3fe66666 	.word	0x3fe66666
 800f124:	3ffae148 	.word	0x3ffae148

0800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f128:	b570      	push	{r4, r5, r6, lr}
 800f12a:	ed2d 8b06 	vpush	{d8-d10}
 800f12e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f132:	eef0 aa40 	vmov.f32	s21, s0
 800f136:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f13a:	4604      	mov	r4, r0
 800f13c:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f140:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f144:	eeb0 aa60 	vmov.f32	s20, s1
 800f148:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f14c:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f150:	f012 fc76 	bl	8021a40 <sqrtf>
 800f154:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f15c:	dd36      	ble.n	800f1cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f15e:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f162:	2600      	movs	r6, #0
 800f164:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f168:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f16c:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f170:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f174:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f178:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f17c:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f180:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f184:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f188:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f18c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f190:	b1fd      	cbz	r5, 800f1d2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f192:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f196:	eef0 0a49 	vmov.f32	s1, s18
 800f19a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f19e:	eeb0 0a69 	vmov.f32	s0, s19
 800f1a2:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f1ac:	f7ff fd64 	bl	800ec78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f1b0:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f1b4:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f1b8:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f1bc:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f1c0:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f1c4:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f1c8:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f1cc:	ecbd 8b06 	vpop	{d8-d10}
 800f1d0:	bd70      	pop	{r4, r5, r6, pc}
 800f1d2:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f1d6:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f1da:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f1de:	b16b      	cbz	r3, 800f1fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f1e0:	eef0 1a49 	vmov.f32	s3, s18
 800f1e4:	4620      	mov	r0, r4
 800f1e6:	eeb0 1a69 	vmov.f32	s2, s19
 800f1ea:	eef0 0a62 	vmov.f32	s1, s5
 800f1ee:	eeb0 0a42 	vmov.f32	s0, s4
 800f1f2:	f7ff feb1 	bl	800ef58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f1f6:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f1fa:	e7db      	b.n	800f1b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f1fc:	eef0 4a48 	vmov.f32	s9, s16
 800f200:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f204:	eeb0 4a68 	vmov.f32	s8, s17
 800f208:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f20c:	eef0 3a49 	vmov.f32	s7, s18
 800f210:	4620      	mov	r0, r4
 800f212:	eeb0 3a69 	vmov.f32	s6, s19
 800f216:	f7ff fe13 	bl	800ee40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f21a:	e7cb      	b.n	800f1b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f21c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f21c:	ee07 2a90 	vmov	s15, r2
 800f220:	ee07 1a10 	vmov	s14, r1
 800f224:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f228:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f23c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f22c:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f230:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f234:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f238:	f7ff bf76 	b.w	800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f23c:	3d000000 	.word	0x3d000000

0800f240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f240:	b538      	push	{r3, r4, r5, lr}
 800f242:	ed2d 8b02 	vpush	{d8}
 800f246:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f24a:	4604      	mov	r4, r0
 800f24c:	b31d      	cbz	r5, 800f296 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f24e:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f252:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f256:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f25a:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f25e:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f262:	eef0 0a68 	vmov.f32	s1, s17
 800f266:	f7ff fd07 	bl	800ec78 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f26a:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f26e:	eef0 1a48 	vmov.f32	s3, s16
 800f272:	4620      	mov	r0, r4
 800f274:	eeb0 0a41 	vmov.f32	s0, s2
 800f278:	eef0 0a68 	vmov.f32	s1, s17
 800f27c:	f7ff fe6c 	bl	800ef58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f280:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f284:	eef0 1a68 	vmov.f32	s3, s17
 800f288:	4620      	mov	r0, r4
 800f28a:	eef0 0a48 	vmov.f32	s1, s16
 800f28e:	eeb0 0a41 	vmov.f32	s0, s2
 800f292:	f7ff fe61 	bl	800ef58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f296:	4628      	mov	r0, r5
 800f298:	ecbd 8b02 	vpop	{d8}
 800f29c:	bd38      	pop	{r3, r4, r5, pc}

0800f29e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f29e:	b510      	push	{r4, lr}
 800f2a0:	ed2d 8b02 	vpush	{d8}
 800f2a4:	4604      	mov	r4, r0
 800f2a6:	eeb0 8a40 	vmov.f32	s16, s0
 800f2aa:	eef0 8a60 	vmov.f32	s17, s1
 800f2ae:	f7ff ffc7 	bl	800f240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f2b2:	b9d0      	cbnz	r0, 800f2ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f2b4:	4620      	mov	r0, r4
 800f2b6:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f2ba:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f2be:	eef0 0a68 	vmov.f32	s1, s17
 800f2c2:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f2c6:	eeb0 0a48 	vmov.f32	s0, s16
 800f2ca:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f2ce:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f2d2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f2d6:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f2da:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f2de:	f7ff fdaf 	bl	800ee40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f2e2:	2001      	movs	r0, #1
 800f2e4:	ecbd 8b02 	vpop	{d8}
 800f2e8:	bd10      	pop	{r4, pc}
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	e7fa      	b.n	800f2e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f2ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f2ee:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f2f2:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f2f6:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f2fa:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f2fe:	f7ff be2b 	b.w	800ef58 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f304 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f308:	b089      	sub	sp, #36	@ 0x24
 800f30a:	461c      	mov	r4, r3
 800f30c:	4682      	mov	sl, r0
 800f30e:	4615      	mov	r5, r2
 800f310:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f314:	f10d 0820 	add.w	r8, sp, #32
 800f318:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f31a:	9304      	str	r3, [sp, #16]
 800f31c:	2300      	movs	r3, #0
 800f31e:	9105      	str	r1, [sp, #20]
 800f320:	9306      	str	r3, [sp, #24]
 800f322:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f326:	9b04      	ldr	r3, [sp, #16]
 800f328:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f32c:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f330:	9b05      	ldr	r3, [sp, #20]
 800f332:	429d      	cmp	r5, r3
 800f334:	d96d      	bls.n	800f412 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f336:	3d01      	subs	r5, #1
 800f338:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f33c:	2b06      	cmp	r3, #6
 800f33e:	d8f7      	bhi.n	800f330 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f340:	a201      	add	r2, pc, #4	@ (adr r2, 800f348 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f346:	bf00      	nop
 800f348:	0800f367 	.word	0x0800f367
 800f34c:	0800f331 	.word	0x0800f331
 800f350:	0800f365 	.word	0x0800f365
 800f354:	0800f389 	.word	0x0800f389
 800f358:	0800f389 	.word	0x0800f389
 800f35c:	0800f38d 	.word	0x0800f38d
 800f360:	0800f3cd 	.word	0x0800f3cd
 800f364:	3c02      	subs	r4, #2
 800f366:	4650      	mov	r0, sl
 800f368:	9400      	str	r4, [sp, #0]
 800f36a:	462b      	mov	r3, r5
 800f36c:	4642      	mov	r2, r8
 800f36e:	a906      	add	r1, sp, #24
 800f370:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f374:	f7ff fcae 	bl	800ecd4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f378:	eddd 0a07 	vldr	s1, [sp, #28]
 800f37c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800f380:	4630      	mov	r0, r6
 800f382:	f7ff fed1 	bl	800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f386:	e7d3      	b.n	800f330 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f388:	3c01      	subs	r4, #1
 800f38a:	e7ec      	b.n	800f366 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800f38c:	f1a4 0b04 	sub.w	fp, r4, #4
 800f390:	3c02      	subs	r4, #2
 800f392:	4650      	mov	r0, sl
 800f394:	462b      	mov	r3, r5
 800f396:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f39a:	f8cd b000 	str.w	fp, [sp]
 800f39e:	4642      	mov	r2, r8
 800f3a0:	a906      	add	r1, sp, #24
 800f3a2:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f3a6:	f7ff fc95 	bl	800ecd4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f3aa:	eddd 2a07 	vldr	s5, [sp, #28]
 800f3ae:	ed9d 2a06 	vldr	s4, [sp, #24]
 800f3b2:	4630      	mov	r0, r6
 800f3b4:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f3b8:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f3bc:	edd4 0a01 	vldr	s1, [r4, #4]
 800f3c0:	ed94 0a00 	vldr	s0, [r4]
 800f3c4:	f7ff fc1a 	bl	800ebfc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f3c8:	465c      	mov	r4, fp
 800f3ca:	e7b1      	b.n	800f330 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f3cc:	f1a4 0b06 	sub.w	fp, r4, #6
 800f3d0:	3c02      	subs	r4, #2
 800f3d2:	4650      	mov	r0, sl
 800f3d4:	462b      	mov	r3, r5
 800f3d6:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800f3da:	f8cd b000 	str.w	fp, [sp]
 800f3de:	4642      	mov	r2, r8
 800f3e0:	a906      	add	r1, sp, #24
 800f3e2:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800f3e6:	f7ff fc75 	bl	800ecd4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800f3ea:	eddd 3a07 	vldr	s7, [sp, #28]
 800f3ee:	ed9d 3a06 	vldr	s6, [sp, #24]
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	ed54 2a03 	vldr	s5, [r4, #-12]
 800f3f8:	ed14 2a04 	vldr	s4, [r4, #-16]
 800f3fc:	ed54 1a01 	vldr	s3, [r4, #-4]
 800f400:	ed14 1a02 	vldr	s2, [r4, #-8]
 800f404:	edd4 0a01 	vldr	s1, [r4, #4]
 800f408:	ed94 0a00 	vldr	s0, [r4]
 800f40c:	f7ff fc15 	bl	800ec3a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f410:	e7da      	b.n	800f3c8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800f412:	9b04      	ldr	r3, [sp, #16]
 800f414:	b113      	cbz	r3, 800f41c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800f416:	4630      	mov	r0, r6
 800f418:	f7ff ff69 	bl	800f2ee <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800f41c:	b009      	add	sp, #36	@ 0x24
 800f41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f422:	bf00      	nop

0800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800f424:	eef0 7a60 	vmov.f32	s15, s1
 800f428:	6803      	ldr	r3, [r0, #0]
 800f42a:	689b      	ldr	r3, [r3, #8]
 800f42c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f430:	ee17 2a90 	vmov	r2, s15
 800f434:	eef0 7a40 	vmov.f32	s15, s0
 800f438:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f43c:	ee17 1a90 	vmov	r1, s15
 800f440:	4718      	bx	r3
	...

0800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800f444:	4b04      	ldr	r3, [pc, #16]	@ (800f458 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800f446:	b510      	push	{r4, lr}
 800f448:	4604      	mov	r4, r0
 800f44a:	f840 3b14 	str.w	r3, [r0], #20
 800f44e:	f001 f84b 	bl	80104e8 <_ZN8touchgfx7OutlineD1Ev>
 800f452:	4620      	mov	r0, r4
 800f454:	bd10      	pop	{r4, pc}
 800f456:	bf00      	nop
 800f458:	0802610c 	.word	0x0802610c

0800f45c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800f45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f460:	ed2d 8b04 	vpush	{d8-d9}
 800f464:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800f468:	b0b5      	sub	sp, #212	@ 0xd4
 800f46a:	4605      	mov	r5, r0
 800f46c:	468b      	mov	fp, r1
 800f46e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f472:	9206      	str	r2, [sp, #24]
 800f474:	461e      	mov	r6, r3
 800f476:	2400      	movs	r4, #0
 800f478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f47c:	f240 814f 	bls.w	800f71e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800f480:	23ff      	movs	r3, #255	@ 0xff
 800f482:	1d02      	adds	r2, r0, #4
 800f484:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800f724 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800f488:	f04f 0800 	mov.w	r8, #0
 800f48c:	9300      	str	r3, [sp, #0]
 800f48e:	af08      	add	r7, sp, #32
 800f490:	6981      	ldr	r1, [r0, #24]
 800f492:	a808      	add	r0, sp, #32
 800f494:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800f496:	eef0 9a49 	vmov.f32	s19, s18
 800f49a:	f010 fa4f 	bl	801f93c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f49e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800f4a2:	4ba1      	ldr	r3, [pc, #644]	@ (800f728 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800f4a4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800f4a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800f4ac:	2201      	movs	r2, #1
 800f4ae:	9308      	str	r3, [sp, #32]
 800f4b0:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800f4b4:	edd5 6a08 	vldr	s13, [r5, #32]
 800f4b8:	eeb0 8a49 	vmov.f32	s16, s18
 800f4bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4c0:	9325      	str	r3, [sp, #148]	@ 0x94
 800f4c2:	f04f 0300 	mov.w	r3, #0
 800f4c6:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800f4ca:	7f6a      	ldrb	r2, [r5, #29]
 800f4cc:	eef0 8a49 	vmov.f32	s17, s18
 800f4d0:	bf48      	it	mi
 800f4d2:	eef1 7a67 	vnegmi.f32	s15, s15
 800f4d6:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800f4da:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800f4de:	46c1      	mov	r9, r8
 800f4e0:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800f4e4:	f04f 0a01 	mov.w	sl, #1
 800f4e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f4ec:	7fab      	ldrb	r3, [r5, #30]
 800f4ee:	942a      	str	r4, [sp, #168]	@ 0xa8
 800f4f0:	435a      	muls	r2, r3
 800f4f2:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800f4f6:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800f4fa:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800f4fe:	1c53      	adds	r3, r2, #1
 800f500:	942b      	str	r4, [sp, #172]	@ 0xac
 800f502:	942c      	str	r4, [sp, #176]	@ 0xb0
 800f504:	ee27 7a26 	vmul.f32	s14, s14, s13
 800f508:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800f50c:	942d      	str	r4, [sp, #180]	@ 0xb4
 800f50e:	942e      	str	r4, [sp, #184]	@ 0xb8
 800f510:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800f514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f518:	942f      	str	r4, [sp, #188]	@ 0xbc
 800f51a:	9430      	str	r4, [sp, #192]	@ 0xc0
 800f51c:	9431      	str	r4, [sp, #196]	@ 0xc4
 800f51e:	9432      	str	r4, [sp, #200]	@ 0xc8
 800f520:	9433      	str	r4, [sp, #204]	@ 0xcc
 800f522:	4644      	mov	r4, r8
 800f524:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800f528:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800f52c:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800f530:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800f534:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800f538:	9b06      	ldr	r3, [sp, #24]
 800f53a:	454b      	cmp	r3, r9
 800f53c:	f000 80cc 	beq.w	800f6d8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800f540:	f109 0301 	add.w	r3, r9, #1
 800f544:	9305      	str	r3, [sp, #20]
 800f546:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800f54a:	2b06      	cmp	r3, #6
 800f54c:	d839      	bhi.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f54e:	e8df f003 	tbb	[pc, r3]
 800f552:	3b04      	.short	0x3b04
 800f554:	817c6f60 	.word	0x817c6f60
 800f558:	a0          	.byte	0xa0
 800f559:	00          	.byte	0x00
 800f55a:	45c1      	cmp	r9, r8
 800f55c:	d92b      	bls.n	800f5b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f55e:	eef0 0a49 	vmov.f32	s1, s18
 800f562:	4638      	mov	r0, r7
 800f564:	eeb0 0a69 	vmov.f32	s0, s19
 800f568:	f7ff fdde 	bl	800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f56c:	4638      	mov	r0, r7
 800f56e:	f7ff fe67 	bl	800f240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f572:	4681      	mov	r9, r0
 800f574:	b9f8      	cbnz	r0, 800f5b6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800f576:	eef0 0a49 	vmov.f32	s1, s18
 800f57a:	4638      	mov	r0, r7
 800f57c:	eeb0 0a69 	vmov.f32	s0, s19
 800f580:	f7ff fe8d 	bl	800f29e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f584:	4628      	mov	r0, r5
 800f586:	4623      	mov	r3, r4
 800f588:	9a05      	ldr	r2, [sp, #20]
 800f58a:	4641      	mov	r1, r8
 800f58c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800f590:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800f594:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f598:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f59c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800f5a0:	e9cd b600 	strd	fp, r6, [sp]
 800f5a4:	f7ff feae 	bl	800f304 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f5a8:	eef0 0a49 	vmov.f32	s1, s18
 800f5ac:	eeb0 0a69 	vmov.f32	s0, s19
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff fe74 	bl	800f29e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800f5b6:	eeb0 8a49 	vmov.f32	s16, s18
 800f5ba:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f5be:	eef0 8a69 	vmov.f32	s17, s19
 800f5c2:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800f5c6:	e7b7      	b.n	800f538 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800f5c8:	45c1      	cmp	r9, r8
 800f5ca:	d90d      	bls.n	800f5e8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f5cc:	4638      	mov	r0, r7
 800f5ce:	f7ff fe37 	bl	800f240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f5d2:	b948      	cbnz	r0, 800f5e8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800f5d4:	4623      	mov	r3, r4
 800f5d6:	464a      	mov	r2, r9
 800f5d8:	4641      	mov	r1, r8
 800f5da:	4628      	mov	r0, r5
 800f5dc:	e9cd a702 	strd	sl, r7, [sp, #8]
 800f5e0:	e9cd b600 	strd	fp, r6, [sp]
 800f5e4:	f7ff fe8e 	bl	800f304 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f5e8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f5ec:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800f5f0:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800f5f4:	3402      	adds	r4, #2
 800f5f6:	edd3 8a00 	vldr	s17, [r3]
 800f5fa:	46c8      	mov	r8, r9
 800f5fc:	ed93 8a01 	vldr	s16, [r3, #4]
 800f600:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800f604:	eef0 9a68 	vmov.f32	s19, s17
 800f608:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800f60c:	eeb0 9a48 	vmov.f32	s18, s16
 800f610:	e7d7      	b.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f612:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f616:	4638      	mov	r0, r7
 800f618:	3402      	adds	r4, #2
 800f61a:	edd3 8a00 	vldr	s17, [r3]
 800f61e:	ed93 8a01 	vldr	s16, [r3, #4]
 800f622:	eeb0 0a68 	vmov.f32	s0, s17
 800f626:	eef0 0a48 	vmov.f32	s1, s16
 800f62a:	f7ff fd7d 	bl	800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f62e:	e7c8      	b.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f630:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f634:	edd3 8a00 	vldr	s17, [r3]
 800f638:	eef0 0a48 	vmov.f32	s1, s16
 800f63c:	4638      	mov	r0, r7
 800f63e:	eeb0 0a68 	vmov.f32	s0, s17
 800f642:	3401      	adds	r4, #1
 800f644:	f7ff fd70 	bl	800f128 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f648:	e7bb      	b.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f64a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f64e:	ed93 8a00 	vldr	s16, [r3]
 800f652:	e7f1      	b.n	800f638 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800f654:	00a3      	lsls	r3, r4, #2
 800f656:	eef0 0a48 	vmov.f32	s1, s16
 800f65a:	eeb0 0a68 	vmov.f32	s0, s17
 800f65e:	4638      	mov	r0, r7
 800f660:	f103 0208 	add.w	r2, r3, #8
 800f664:	f103 090c 	add.w	r9, r3, #12
 800f668:	4433      	add	r3, r6
 800f66a:	3404      	adds	r4, #4
 800f66c:	4432      	add	r2, r6
 800f66e:	44b1      	add	r9, r6
 800f670:	edd3 1a01 	vldr	s3, [r3, #4]
 800f674:	ed92 2a00 	vldr	s4, [r2]
 800f678:	edd9 2a00 	vldr	s5, [r9]
 800f67c:	ed93 1a00 	vldr	s2, [r3]
 800f680:	9207      	str	r2, [sp, #28]
 800f682:	f7ff fabb 	bl	800ebfc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f686:	9a07      	ldr	r2, [sp, #28]
 800f688:	ed99 8a00 	vldr	s16, [r9]
 800f68c:	edd2 8a00 	vldr	s17, [r2]
 800f690:	e797      	b.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f692:	00a3      	lsls	r3, r4, #2
 800f694:	eef0 0a48 	vmov.f32	s1, s16
 800f698:	eeb0 0a68 	vmov.f32	s0, s17
 800f69c:	4638      	mov	r0, r7
 800f69e:	f103 0210 	add.w	r2, r3, #16
 800f6a2:	f103 0914 	add.w	r9, r3, #20
 800f6a6:	4433      	add	r3, r6
 800f6a8:	3406      	adds	r4, #6
 800f6aa:	4432      	add	r2, r6
 800f6ac:	44b1      	add	r9, r6
 800f6ae:	edd3 2a03 	vldr	s5, [r3, #12]
 800f6b2:	ed92 3a00 	vldr	s6, [r2]
 800f6b6:	edd9 3a00 	vldr	s7, [r9]
 800f6ba:	ed93 2a02 	vldr	s4, [r3, #8]
 800f6be:	edd3 1a01 	vldr	s3, [r3, #4]
 800f6c2:	ed93 1a00 	vldr	s2, [r3]
 800f6c6:	9207      	str	r2, [sp, #28]
 800f6c8:	f7ff fab7 	bl	800ec3a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f6cc:	9a07      	ldr	r2, [sp, #28]
 800f6ce:	ed99 8a00 	vldr	s16, [r9]
 800f6d2:	edd2 8a00 	vldr	s17, [r2]
 800f6d6:	e774      	b.n	800f5c2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800f6d8:	9b06      	ldr	r3, [sp, #24]
 800f6da:	af08      	add	r7, sp, #32
 800f6dc:	4543      	cmp	r3, r8
 800f6de:	d90f      	bls.n	800f700 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f6e0:	4638      	mov	r0, r7
 800f6e2:	f7ff fdad 	bl	800f240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f6e6:	b958      	cbnz	r0, 800f700 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800f6e8:	2301      	movs	r3, #1
 800f6ea:	9703      	str	r7, [sp, #12]
 800f6ec:	f8cd b000 	str.w	fp, [sp]
 800f6f0:	4641      	mov	r1, r8
 800f6f2:	9a06      	ldr	r2, [sp, #24]
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800f6fa:	4623      	mov	r3, r4
 800f6fc:	f7ff fe02 	bl	800f304 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800f700:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800f704:	4638      	mov	r0, r7
 800f706:	f010 f9ad 	bl	801fa64 <_ZN8touchgfx6Canvas6renderEh>
 800f70a:	4604      	mov	r4, r0
 800f70c:	4638      	mov	r0, r7
 800f70e:	f7ff fe99 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f712:	4620      	mov	r0, r4
 800f714:	b035      	add	sp, #212	@ 0xd4
 800f716:	ecbd 8b04 	vpop	{d8-d9}
 800f71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f71e:	2401      	movs	r4, #1
 800f720:	e7f7      	b.n	800f712 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800f722:	bf00      	nop
 800f724:	00000000 	.word	0x00000000
 800f728:	08025a20 	.word	0x08025a20

0800f72c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800f72c:	b510      	push	{r4, lr}
 800f72e:	4604      	mov	r4, r0
 800f730:	f7ff fe88 	bl	800f444 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800f734:	21b0      	movs	r1, #176	@ 0xb0
 800f736:	4620      	mov	r0, r4
 800f738:	f012 f957 	bl	80219ea <_ZdlPvj>
 800f73c:	4620      	mov	r0, r4
 800f73e:	bd10      	pop	{r4, pc}

0800f740 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800f740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f744:	4698      	mov	r8, r3
 800f746:	23ff      	movs	r3, #255	@ 0xff
 800f748:	4607      	mov	r7, r0
 800f74a:	4689      	mov	r9, r1
 800f74c:	4692      	mov	sl, r2
 800f74e:	1d02      	adds	r2, r0, #4
 800f750:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800f754:	2400      	movs	r4, #0
 800f756:	44ca      	add	sl, r9
 800f758:	ed2d 8b06 	vpush	{d8-d10}
 800f75c:	b0aa      	sub	sp, #168	@ 0xa8
 800f75e:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 800f964 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f762:	9300      	str	r3, [sp, #0]
 800f764:	eef0 8a48 	vmov.f32	s17, s16
 800f768:	6981      	ldr	r1, [r0, #24]
 800f76a:	a80d      	add	r0, sp, #52	@ 0x34
 800f76c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800f76e:	f010 f8e5 	bl	801f93c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800f772:	7f3b      	ldrb	r3, [r7, #28]
 800f774:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 800f964 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800f778:	4628      	mov	r0, r5
 800f77a:	1e5a      	subs	r2, r3, #1
 800f77c:	eeb0 0a60 	vmov.f32	s0, s1
 800f780:	4253      	negs	r3, r2
 800f782:	4153      	adcs	r3, r2
 800f784:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800f788:	f004 fa05 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f78c:	eeb0 9a40 	vmov.f32	s18, s0
 800f790:	eef0 9a60 	vmov.f32	s19, s1
 800f794:	45ca      	cmp	sl, r9
 800f796:	f000 80cd 	beq.w	800f934 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800f79a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f79e:	2b06      	cmp	r3, #6
 800f7a0:	d8f8      	bhi.n	800f794 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f7a2:	e8df f003 	tbb	[pc, r3]
 800f7a6:	0804      	.short	0x0804
 800f7a8:	58533f2a 	.word	0x58533f2a
 800f7ac:	8a          	.byte	0x8a
 800f7ad:	00          	.byte	0x00
 800f7ae:	a80d      	add	r0, sp, #52	@ 0x34
 800f7b0:	f010 f936 	bl	801fa20 <_ZN8touchgfx6Canvas5closeEv>
 800f7b4:	e7ee      	b.n	800f794 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f7b6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f7ba:	4628      	mov	r0, r5
 800f7bc:	ed93 8a01 	vldr	s16, [r3, #4]
 800f7c0:	edd3 8a00 	vldr	s17, [r3]
 800f7c4:	eef0 0a48 	vmov.f32	s1, s16
 800f7c8:	eeb0 0a68 	vmov.f32	s0, s17
 800f7cc:	f004 f9e3 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f7d0:	a80d      	add	r0, sp, #52	@ 0x34
 800f7d2:	eef0 7a60 	vmov.f32	s15, s1
 800f7d6:	eeb0 9a40 	vmov.f32	s18, s0
 800f7da:	eef0 9a60 	vmov.f32	s19, s1
 800f7de:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f7e2:	ee17 2a90 	vmov	r2, s15
 800f7e6:	eef0 7a40 	vmov.f32	s15, s0
 800f7ea:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f7ee:	ee17 1a90 	vmov	r1, s15
 800f7f2:	f010 f9ef 	bl	801fbd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800f7f6:	3402      	adds	r4, #2
 800f7f8:	e7cc      	b.n	800f794 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f7fa:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f7fe:	4628      	mov	r0, r5
 800f800:	edd3 8a00 	vldr	s17, [r3]
 800f804:	ed93 8a01 	vldr	s16, [r3, #4]
 800f808:	eeb0 0a68 	vmov.f32	s0, s17
 800f80c:	eef0 0a48 	vmov.f32	s1, s16
 800f810:	f004 f9c1 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f814:	a80d      	add	r0, sp, #52	@ 0x34
 800f816:	eeb0 9a40 	vmov.f32	s18, s0
 800f81a:	eef0 9a60 	vmov.f32	s19, s1
 800f81e:	f7ff fe01 	bl	800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f822:	e7e8      	b.n	800f7f6 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800f824:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f828:	edd3 8a00 	vldr	s17, [r3]
 800f82c:	eef0 0a48 	vmov.f32	s1, s16
 800f830:	4628      	mov	r0, r5
 800f832:	eeb0 0a68 	vmov.f32	s0, s17
 800f836:	3401      	adds	r4, #1
 800f838:	f004 f9ad 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f83c:	a80d      	add	r0, sp, #52	@ 0x34
 800f83e:	eef0 9a60 	vmov.f32	s19, s1
 800f842:	eeb0 9a40 	vmov.f32	s18, s0
 800f846:	f7ff fded 	bl	800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800f84a:	e7a3      	b.n	800f794 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f84c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800f850:	ed93 8a00 	vldr	s16, [r3]
 800f854:	e7ea      	b.n	800f82c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800f856:	1ca3      	adds	r3, r4, #2
 800f858:	4628      	mov	r0, r5
 800f85a:	3404      	adds	r4, #4
 800f85c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800f860:	ed53 0a01 	vldr	s1, [r3, #-4]
 800f864:	ed13 0a02 	vldr	s0, [r3, #-8]
 800f868:	edd3 8a00 	vldr	s17, [r3]
 800f86c:	ed93 8a01 	vldr	s16, [r3, #4]
 800f870:	f004 f991 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f874:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f878:	eeb0 0a68 	vmov.f32	s0, s17
 800f87c:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f880:	eef0 0a48 	vmov.f32	s1, s16
 800f884:	4628      	mov	r0, r5
 800f886:	f004 f986 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f88a:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800f88e:	eef0 2a60 	vmov.f32	s5, s1
 800f892:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800f896:	eeb0 2a40 	vmov.f32	s4, s0
 800f89a:	a80d      	add	r0, sp, #52	@ 0x34
 800f89c:	eeb0 aa40 	vmov.f32	s20, s0
 800f8a0:	eef0 aa60 	vmov.f32	s21, s1
 800f8a4:	eeb0 0a49 	vmov.f32	s0, s18
 800f8a8:	eef0 0a69 	vmov.f32	s1, s19
 800f8ac:	f7ff f9a6 	bl	800ebfc <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800f8b0:	eef0 9a6a 	vmov.f32	s19, s21
 800f8b4:	eeb0 9a4a 	vmov.f32	s18, s20
 800f8b8:	e76c      	b.n	800f794 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800f8ba:	1d26      	adds	r6, r4, #4
 800f8bc:	4628      	mov	r0, r5
 800f8be:	3406      	adds	r4, #6
 800f8c0:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800f8c4:	ed56 0a03 	vldr	s1, [r6, #-12]
 800f8c8:	ed16 0a04 	vldr	s0, [r6, #-16]
 800f8cc:	edd6 8a00 	vldr	s17, [r6]
 800f8d0:	ed96 8a01 	vldr	s16, [r6, #4]
 800f8d4:	f004 f95f 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f8d8:	ed8d 0a07 	vstr	s0, [sp, #28]
 800f8dc:	4628      	mov	r0, r5
 800f8de:	ed16 0a02 	vldr	s0, [r6, #-8]
 800f8e2:	edcd 0a08 	vstr	s1, [sp, #32]
 800f8e6:	ed56 0a01 	vldr	s1, [r6, #-4]
 800f8ea:	f004 f954 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f8ee:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800f8f2:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800f8f6:	eeb0 0a68 	vmov.f32	s0, s17
 800f8fa:	eef0 0a48 	vmov.f32	s1, s16
 800f8fe:	4628      	mov	r0, r5
 800f900:	f004 f949 	bl	8013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f904:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800f908:	eeb0 3a40 	vmov.f32	s6, s0
 800f90c:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800f910:	eef0 3a60 	vmov.f32	s7, s1
 800f914:	eddd 1a08 	vldr	s3, [sp, #32]
 800f918:	eeb0 aa40 	vmov.f32	s20, s0
 800f91c:	ed9d 1a07 	vldr	s2, [sp, #28]
 800f920:	eef0 aa60 	vmov.f32	s21, s1
 800f924:	a80d      	add	r0, sp, #52	@ 0x34
 800f926:	eef0 0a69 	vmov.f32	s1, s19
 800f92a:	eeb0 0a49 	vmov.f32	s0, s18
 800f92e:	f7ff f984 	bl	800ec3a <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800f932:	e7bd      	b.n	800f8b0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800f934:	7f7b      	ldrb	r3, [r7, #29]
 800f936:	a80d      	add	r0, sp, #52	@ 0x34
 800f938:	7fb9      	ldrb	r1, [r7, #30]
 800f93a:	4359      	muls	r1, r3
 800f93c:	1c4b      	adds	r3, r1, #1
 800f93e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800f942:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800f946:	f010 f88d 	bl	801fa64 <_ZN8touchgfx6Canvas6renderEh>
 800f94a:	4b07      	ldr	r3, [pc, #28]	@ (800f968 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800f94c:	4604      	mov	r4, r0
 800f94e:	a812      	add	r0, sp, #72	@ 0x48
 800f950:	930d      	str	r3, [sp, #52]	@ 0x34
 800f952:	f000 fdc9 	bl	80104e8 <_ZN8touchgfx7OutlineD1Ev>
 800f956:	4620      	mov	r0, r4
 800f958:	b02a      	add	sp, #168	@ 0xa8
 800f95a:	ecbd 8b06 	vpop	{d8-d10}
 800f95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f962:	bf00      	nop
 800f964:	00000000 	.word	0x00000000
 800f968:	0802610c 	.word	0x0802610c

0800f96c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 800f96c:	b410      	push	{r4}
 800f96e:	7f04      	ldrb	r4, [r0, #28]
 800f970:	b11c      	cbz	r4, 800f97a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 800f972:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f976:	f7ff bee3 	b.w	800f740 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 800f97a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f97e:	f7ff bd6d 	b.w	800f45c <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

0800f982 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 800f982:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f986:	4691      	mov	r9, r2
 800f988:	4602      	mov	r2, r0
 800f98a:	4606      	mov	r6, r0
 800f98c:	4688      	mov	r8, r1
 800f98e:	f852 0f26 	ldr.w	r0, [r2, #38]!
 800f992:	469a      	mov	sl, r3
 800f994:	ab02      	add	r3, sp, #8
 800f996:	af02      	add	r7, sp, #8
 800f998:	6851      	ldr	r1, [r2, #4]
 800f99a:	c303      	stmia	r3!, {r0, r1}
 800f99c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	dd2f      	ble.n	800fa04 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f9a4:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 800f9a8:	2c00      	cmp	r4, #0
 800f9aa:	dd2b      	ble.n	800fa04 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f9ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f9b0:	441c      	add	r4, r3
 800f9b2:	b2a4      	uxth	r4, r4
 800f9b4:	b225      	sxth	r5, r4
 800f9b6:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 800f9ba:	42ab      	cmp	r3, r5
 800f9bc:	da22      	bge.n	800fa04 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 800f9be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9c0:	464a      	mov	r2, r9
 800f9c2:	9701      	str	r7, [sp, #4]
 800f9c4:	4641      	mov	r1, r8
 800f9c6:	9300      	str	r3, [sp, #0]
 800f9c8:	4630      	mov	r0, r6
 800f9ca:	4653      	mov	r3, sl
 800f9cc:	f7ff ffce 	bl	800f96c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 800f9d0:	b940      	cbnz	r0, 800f9e4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f9d2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f9d6:	2b01      	cmp	r3, #1
 800f9d8:	d004      	beq.n	800f9e4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 800f9da:	3301      	adds	r3, #1
 800f9dc:	105b      	asrs	r3, r3, #1
 800f9de:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9e2:	e7ec      	b.n	800f9be <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 800f9e4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 800f9e8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 800f9ec:	4413      	add	r3, r2
 800f9ee:	b29b      	uxth	r3, r3
 800f9f0:	441a      	add	r2, r3
 800f9f2:	f8ad 300a 	strh.w	r3, [sp, #10]
 800f9f6:	b212      	sxth	r2, r2
 800f9f8:	4295      	cmp	r5, r2
 800f9fa:	dadc      	bge.n	800f9b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800f9fc:	1ae3      	subs	r3, r4, r3
 800f9fe:	f8ad 300e 	strh.w	r3, [sp, #14]
 800fa02:	e7d8      	b.n	800f9b6 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 800fa04:	b004      	add	sp, #16
 800fa06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800fa0a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fa0a:	0c0b      	lsrs	r3, r1, #16
 800fa0c:	60c1      	str	r1, [r0, #12]
 800fa0e:	7481      	strb	r1, [r0, #18]
 800fa10:	7403      	strb	r3, [r0, #16]
 800fa12:	0a0b      	lsrs	r3, r1, #8
 800fa14:	7443      	strb	r3, [r0, #17]
 800fa16:	4770      	bx	lr

0800fa18 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 800fa18:	f1a0 0008 	sub.w	r0, r0, #8
 800fa1c:	e7f5      	b.n	800fa0a <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0800fa20 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 800fa20:	b508      	push	{r3, lr}
 800fa22:	4b05      	ldr	r3, [pc, #20]	@ (800fa38 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 800fa24:	6818      	ldr	r0, [r3, #0]
 800fa26:	6803      	ldr	r3, [r0, #0]
 800fa28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fa2c:	4798      	blx	r3
 800fa2e:	1e43      	subs	r3, r0, #1
 800fa30:	4258      	negs	r0, r3
 800fa32:	4158      	adcs	r0, r3
 800fa34:	bd08      	pop	{r3, pc}
 800fa36:	bf00      	nop
 800fa38:	24025274 	.word	0x24025274

0800fa3c <_ZN8touchgfx13PainterRGB888D1Ev>:
 800fa3c:	4770      	bx	lr

0800fa3e <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 800fa3e:	3808      	subs	r0, #8
 800fa40:	4770      	bx	lr

0800fa42 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 800fa42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fa46:	b410      	push	{r4}
 800fa48:	188c      	adds	r4, r1, r2
 800fa4a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800fa4e:	68c2      	ldr	r2, [r0, #12]
 800fa50:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 800fa54:	4620      	mov	r0, r4
 800fa56:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fa5a:	f7f3 b9f5 	b.w	8002e48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0800fa5e <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 800fa5e:	f7f3 b9cf 	b.w	8002e00 <_ZN8touchgfx5paint8tearDownEv>

0800fa62 <_ZN8touchgfx13PainterRGB888D0Ev>:
 800fa62:	b510      	push	{r4, lr}
 800fa64:	4604      	mov	r4, r0
 800fa66:	2114      	movs	r1, #20
 800fa68:	f011 ffbf 	bl	80219ea <_ZdlPvj>
 800fa6c:	4620      	mov	r0, r4
 800fa6e:	bd10      	pop	{r4, pc}

0800fa70 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 800fa70:	f1a0 0008 	sub.w	r0, r0, #8
 800fa74:	e7f5      	b.n	800fa62 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

0800fa78 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 800fa78:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fa7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa80:	4411      	add	r1, r2
 800fa82:	7c42      	ldrb	r2, [r0, #17]
 800fa84:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 800fa88:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 800fa8c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 800fa90:	2a00      	cmp	r2, #0
 800fa92:	f000 8084 	beq.w	800fb9e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 800fa96:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fa9a:	ed90 7a08 	vldr	s14, [r0, #32]
 800fa9e:	42a2      	cmp	r2, r4
 800faa0:	68c3      	ldr	r3, [r0, #12]
 800faa2:	db20      	blt.n	800fae6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 800faa4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800faa8:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800faac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fab0:	bfc8      	it	gt
 800fab2:	2200      	movgt	r2, #0
 800fab4:	589a      	ldr	r2, [r3, r2]
 800fab6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 800faba:	7c03      	ldrb	r3, [r0, #16]
 800fabc:	fa5f fc82 	uxtb.w	ip, r2
 800fac0:	f3c2 2707 	ubfx	r7, r2, #8, #8
 800fac4:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800fac8:	440e      	add	r6, r1
 800faca:	b36b      	cbz	r3, 800fb28 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800facc:	2dff      	cmp	r5, #255	@ 0xff
 800face:	d12b      	bne.n	800fb28 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 800fad0:	42b1      	cmp	r1, r6
 800fad2:	f080 8204 	bcs.w	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fad6:	f881 c000 	strb.w	ip, [r1]
 800fada:	3103      	adds	r1, #3
 800fadc:	f801 7c02 	strb.w	r7, [r1, #-2]
 800fae0:	f801 4c01 	strb.w	r4, [r1, #-1]
 800fae4:	e7f4      	b.n	800fad0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 800fae6:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 800faea:	42a7      	cmp	r7, r4
 800faec:	dc08      	bgt.n	800fb00 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 800faee:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800faf2:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800faf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fafa:	bfd8      	it	le
 800fafc:	2200      	movle	r2, #0
 800fafe:	e7d9      	b.n	800fab4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fb00:	1aa2      	subs	r2, r4, r2
 800fb02:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 800fb06:	ee07 2a90 	vmov	s15, r2
 800fb0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fb12:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb16:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fb1a:	ee17 2a90 	vmov	r2, s15
 800fb1e:	bfd8      	it	le
 800fb20:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 800fb24:	0092      	lsls	r2, r2, #2
 800fb26:	e7c5      	b.n	800fab4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 800fb28:	0e12      	lsrs	r2, r2, #24
 800fb2a:	4355      	muls	r5, r2
 800fb2c:	1c6a      	adds	r2, r5, #1
 800fb2e:	eb02 2525 	add.w	r5, r2, r5, asr #8
 800fb32:	122d      	asrs	r5, r5, #8
 800fb34:	43e8      	mvns	r0, r5
 800fb36:	b2ad      	uxth	r5, r5
 800fb38:	fb1c fc05 	smulbb	ip, ip, r5
 800fb3c:	b2c0      	uxtb	r0, r0
 800fb3e:	fb17 f705 	smulbb	r7, r7, r5
 800fb42:	fb14 f505 	smulbb	r5, r4, r5
 800fb46:	fa1f fc8c 	uxth.w	ip, ip
 800fb4a:	b2bf      	uxth	r7, r7
 800fb4c:	b2ad      	uxth	r5, r5
 800fb4e:	428e      	cmp	r6, r1
 800fb50:	f101 0303 	add.w	r3, r1, #3
 800fb54:	f240 81c3 	bls.w	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fb58:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 800fb5c:	fb02 c200 	mla	r2, r2, r0, ip
 800fb60:	b292      	uxth	r2, r2
 800fb62:	1c51      	adds	r1, r2, #1
 800fb64:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fb68:	1212      	asrs	r2, r2, #8
 800fb6a:	f803 2c03 	strb.w	r2, [r3, #-3]
 800fb6e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 800fb72:	fb02 7200 	mla	r2, r2, r0, r7
 800fb76:	b292      	uxth	r2, r2
 800fb78:	1c51      	adds	r1, r2, #1
 800fb7a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fb7e:	1212      	asrs	r2, r2, #8
 800fb80:	f803 2c02 	strb.w	r2, [r3, #-2]
 800fb84:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 800fb88:	fb02 5200 	mla	r2, r2, r0, r5
 800fb8c:	b292      	uxth	r2, r2
 800fb8e:	1c51      	adds	r1, r2, #1
 800fb90:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 800fb94:	4619      	mov	r1, r3
 800fb96:	1212      	asrs	r2, r2, #8
 800fb98:	f803 2c01 	strb.w	r2, [r3, #-1]
 800fb9c:	e7d7      	b.n	800fb4e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 800fb9e:	7c82      	ldrb	r2, [r0, #18]
 800fba0:	2a00      	cmp	r2, #0
 800fba2:	d047      	beq.n	800fc34 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 800fba4:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 800fba8:	ee07 2a10 	vmov	s14, r2
 800fbac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fbb0:	ee07 3a90 	vmov	s15, r3
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800fbba:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fbbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbc2:	f200 808e 	bhi.w	800fce2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 800fbc6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fbca:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fbce:	68c7      	ldr	r7, [r0, #12]
 800fbd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fbd4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fbd8:	ee06 6a90 	vmov	s13, r6
 800fbdc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fbe0:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fbe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fbe8:	bf4a      	itet	mi
 800fbea:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 800fbee:	4634      	movpl	r4, r6
 800fbf0:	ee17 4a90 	vmovmi	r4, s15
 800fbf4:	edd0 7a08 	vldr	s15, [r0, #32]
 800fbf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fbfc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 800fc00:	448e      	add	lr, r1
 800fc02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc06:	bfc8      	it	gt
 800fc08:	2200      	movgt	r2, #0
 800fc0a:	58bf      	ldr	r7, [r7, r2]
 800fc0c:	7c02      	ldrb	r2, [r0, #16]
 800fc0e:	fa5f f987 	uxtb.w	r9, r7
 800fc12:	f3c7 2807 	ubfx	r8, r7, #8, #8
 800fc16:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800fc1a:	b31a      	cbz	r2, 800fc64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fc1c:	2dff      	cmp	r5, #255	@ 0xff
 800fc1e:	d121      	bne.n	800fc64 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 800fc20:	4571      	cmp	r1, lr
 800fc22:	d25d      	bcs.n	800fce0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fc24:	f881 9000 	strb.w	r9, [r1]
 800fc28:	3103      	adds	r1, #3
 800fc2a:	f801 8c02 	strb.w	r8, [r1, #-2]
 800fc2e:	f801 cc01 	strb.w	ip, [r1, #-1]
 800fc32:	e7f5      	b.n	800fc20 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 800fc34:	ee07 4a90 	vmov	s15, r4
 800fc38:	ed90 7a06 	vldr	s14, [r0, #24]
 800fc3c:	edd0 6a05 	vldr	s13, [r0, #20]
 800fc40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fc44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fc48:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800fc4c:	edd0 7a08 	vldr	s15, [r0, #32]
 800fc50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fc54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc58:	bf44      	itt	mi
 800fc5a:	edd0 7a07 	vldrmi	s15, [r0, #28]
 800fc5e:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 800fc62:	e7a5      	b.n	800fbb0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 800fc64:	0e3f      	lsrs	r7, r7, #24
 800fc66:	436f      	muls	r7, r5
 800fc68:	1c7a      	adds	r2, r7, #1
 800fc6a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 800fc6e:	1212      	asrs	r2, r2, #8
 800fc70:	ea6f 0a02 	mvn.w	sl, r2
 800fc74:	b292      	uxth	r2, r2
 800fc76:	fb19 f902 	smulbb	r9, r9, r2
 800fc7a:	fa5f fa8a 	uxtb.w	sl, sl
 800fc7e:	fb18 f802 	smulbb	r8, r8, r2
 800fc82:	fb1c fc02 	smulbb	ip, ip, r2
 800fc86:	fa1f f989 	uxth.w	r9, r9
 800fc8a:	fa1f f888 	uxth.w	r8, r8
 800fc8e:	fa1f fc8c 	uxth.w	ip, ip
 800fc92:	458e      	cmp	lr, r1
 800fc94:	f101 0203 	add.w	r2, r1, #3
 800fc98:	d922      	bls.n	800fce0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 800fc9a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fc9e:	fb01 910a 	mla	r1, r1, sl, r9
 800fca2:	b289      	uxth	r1, r1
 800fca4:	1c4f      	adds	r7, r1, #1
 800fca6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fcaa:	1209      	asrs	r1, r1, #8
 800fcac:	f802 1c03 	strb.w	r1, [r2, #-3]
 800fcb0:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800fcb4:	fb01 810a 	mla	r1, r1, sl, r8
 800fcb8:	b289      	uxth	r1, r1
 800fcba:	1c4f      	adds	r7, r1, #1
 800fcbc:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fcc0:	1209      	asrs	r1, r1, #8
 800fcc2:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fcc6:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fcca:	fb01 c10a 	mla	r1, r1, sl, ip
 800fcce:	b289      	uxth	r1, r1
 800fcd0:	1c4f      	adds	r7, r1, #1
 800fcd2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fcd6:	1209      	asrs	r1, r1, #8
 800fcd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 800fcdc:	4611      	mov	r1, r2
 800fcde:	e7d8      	b.n	800fc92 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 800fce0:	191a      	adds	r2, r3, r4
 800fce2:	4433      	add	r3, r6
 800fce4:	b21b      	sxth	r3, r3
 800fce6:	4293      	cmp	r3, r2
 800fce8:	f340 80f9 	ble.w	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fcec:	edd0 7a07 	vldr	s15, [r0, #28]
 800fcf0:	ee06 2a90 	vmov	s13, r2
 800fcf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fcf8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800fcfc:	eef4 7ae6 	vcmpe.f32	s15, s13
 800fd00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd04:	f340 80b0 	ble.w	800fe68 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 800fd08:	ee06 3a10 	vmov	s12, r3
 800fd0c:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800fd10:	eddf 5a74 	vldr	s11, [pc, #464]	@ 800fee4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 800fd14:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800fd18:	eef4 7ac6 	vcmpe.f32	s15, s12
 800fd1c:	ed90 6a08 	vldr	s12, [r0, #32]
 800fd20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd24:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 800fd28:	bfd6      	itet	le
 800fd2a:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 800fd2e:	469c      	movgt	ip, r3
 800fd30:	ee17 ca90 	vmovle	ip, s15
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 800fee8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 800fd3c:	ebac 0202 	sub.w	r2, ip, r2
 800fd40:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 800fd44:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fd48:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800fd4c:	188c      	adds	r4, r1, r2
 800fd4e:	7c02      	ldrb	r2, [r0, #16]
 800fd50:	b1d2      	cbz	r2, 800fd88 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fd52:	2dff      	cmp	r5, #255	@ 0xff
 800fd54:	d118      	bne.n	800fd88 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 800fd56:	42a1      	cmp	r1, r4
 800fd58:	d261      	bcs.n	800fe1e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fd5a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fd5e:	68c6      	ldr	r6, [r0, #12]
 800fd60:	3103      	adds	r1, #3
 800fd62:	ee17 7a10 	vmov	r7, s14
 800fd66:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 800fd6a:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 800fd6e:	f801 6c03 	strb.w	r6, [r1, #-3]
 800fd72:	7856      	ldrb	r6, [r2, #1]
 800fd74:	f801 6c02 	strb.w	r6, [r1, #-2]
 800fd78:	7892      	ldrb	r2, [r2, #2]
 800fd7a:	f801 2c01 	strb.w	r2, [r1, #-1]
 800fd7e:	ed90 7a08 	vldr	s14, [r0, #32]
 800fd82:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fd86:	e7e6      	b.n	800fd56 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 800fd88:	68c2      	ldr	r2, [r0, #12]
 800fd8a:	428c      	cmp	r4, r1
 800fd8c:	f101 0e03 	add.w	lr, r1, #3
 800fd90:	d945      	bls.n	800fe1e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 800fd92:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fd96:	ee17 9a10 	vmov	r9, s14
 800fd9a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 800fd9e:	f898 7003 	ldrb.w	r7, [r8, #3]
 800fda2:	fb07 f605 	mul.w	r6, r7, r5
 800fda6:	1c77      	adds	r7, r6, #1
 800fda8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 800fdac:	123f      	asrs	r7, r7, #8
 800fdae:	b2b9      	uxth	r1, r7
 800fdb0:	43ff      	mvns	r7, r7
 800fdb2:	b2fe      	uxtb	r6, r7
 800fdb4:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 800fdb8:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 800fdbc:	fb19 f906 	smulbb	r9, r9, r6
 800fdc0:	fb07 9701 	mla	r7, r7, r1, r9
 800fdc4:	b2bf      	uxth	r7, r7
 800fdc6:	f107 0901 	add.w	r9, r7, #1
 800fdca:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fdce:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 800fdd2:	fb19 f906 	smulbb	r9, r9, r6
 800fdd6:	123f      	asrs	r7, r7, #8
 800fdd8:	f80e 7c03 	strb.w	r7, [lr, #-3]
 800fddc:	f898 7001 	ldrb.w	r7, [r8, #1]
 800fde0:	fb07 9701 	mla	r7, r7, r1, r9
 800fde4:	b2bf      	uxth	r7, r7
 800fde6:	f107 0901 	add.w	r9, r7, #1
 800fdea:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 800fdee:	123f      	asrs	r7, r7, #8
 800fdf0:	f80e 7c02 	strb.w	r7, [lr, #-2]
 800fdf4:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 800fdf8:	f898 8002 	ldrb.w	r8, [r8, #2]
 800fdfc:	fb17 f606 	smulbb	r6, r7, r6
 800fe00:	fb08 6601 	mla	r6, r8, r1, r6
 800fe04:	b2b6      	uxth	r6, r6
 800fe06:	1c71      	adds	r1, r6, #1
 800fe08:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 800fe0c:	4671      	mov	r1, lr
 800fe0e:	1236      	asrs	r6, r6, #8
 800fe10:	f80e 6c01 	strb.w	r6, [lr, #-1]
 800fe14:	ed90 7a08 	vldr	s14, [r0, #32]
 800fe18:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe1c:	e7b5      	b.n	800fd8a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 800fe1e:	4563      	cmp	r3, ip
 800fe20:	dd5d      	ble.n	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fe22:	edd0 7a08 	vldr	s15, [r0, #32]
 800fe26:	eba3 030c 	sub.w	r3, r3, ip
 800fe2a:	68c4      	ldr	r4, [r0, #12]
 800fe2c:	f640 72fc 	movw	r2, #4092	@ 0xffc
 800fe30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fe34:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fe38:	7c00      	ldrb	r0, [r0, #16]
 800fe3a:	440b      	add	r3, r1
 800fe3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fe40:	bfd8      	it	le
 800fe42:	2200      	movle	r2, #0
 800fe44:	58a2      	ldr	r2, [r4, r2]
 800fe46:	b2d4      	uxtb	r4, r2
 800fe48:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 800fe4c:	f3c2 4707 	ubfx	r7, r2, #16, #8
 800fe50:	b160      	cbz	r0, 800fe6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fe52:	2dff      	cmp	r5, #255	@ 0xff
 800fe54:	d10a      	bne.n	800fe6c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 800fe56:	4299      	cmp	r1, r3
 800fe58:	d241      	bcs.n	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fe5a:	700c      	strb	r4, [r1, #0]
 800fe5c:	3103      	adds	r1, #3
 800fe5e:	f801 cc02 	strb.w	ip, [r1, #-2]
 800fe62:	f801 7c01 	strb.w	r7, [r1, #-1]
 800fe66:	e7f6      	b.n	800fe56 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 800fe68:	4694      	mov	ip, r2
 800fe6a:	e7da      	b.n	800fe22 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 800fe6c:	0e12      	lsrs	r2, r2, #24
 800fe6e:	436a      	muls	r2, r5
 800fe70:	1c55      	adds	r5, r2, #1
 800fe72:	eb05 2522 	add.w	r5, r5, r2, asr #8
 800fe76:	122d      	asrs	r5, r5, #8
 800fe78:	43ee      	mvns	r6, r5
 800fe7a:	b2ad      	uxth	r5, r5
 800fe7c:	fb14 f405 	smulbb	r4, r4, r5
 800fe80:	b2f6      	uxtb	r6, r6
 800fe82:	fb1c f005 	smulbb	r0, ip, r5
 800fe86:	fb17 f505 	smulbb	r5, r7, r5
 800fe8a:	b2a4      	uxth	r4, r4
 800fe8c:	b280      	uxth	r0, r0
 800fe8e:	b2ad      	uxth	r5, r5
 800fe90:	428b      	cmp	r3, r1
 800fe92:	f101 0203 	add.w	r2, r1, #3
 800fe96:	d922      	bls.n	800fede <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 800fe98:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800fe9c:	fb01 4106 	mla	r1, r1, r6, r4
 800fea0:	b289      	uxth	r1, r1
 800fea2:	1c4f      	adds	r7, r1, #1
 800fea4:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fea8:	1209      	asrs	r1, r1, #8
 800feaa:	f802 1c03 	strb.w	r1, [r2, #-3]
 800feae:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800feb2:	fb01 0106 	mla	r1, r1, r6, r0
 800feb6:	b289      	uxth	r1, r1
 800feb8:	1c4f      	adds	r7, r1, #1
 800feba:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800febe:	1209      	asrs	r1, r1, #8
 800fec0:	f802 1c02 	strb.w	r1, [r2, #-2]
 800fec4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800fec8:	fb01 5106 	mla	r1, r1, r6, r5
 800fecc:	b289      	uxth	r1, r1
 800fece:	1c4f      	adds	r7, r1, #1
 800fed0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 800fed4:	1209      	asrs	r1, r1, #8
 800fed6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800feda:	4611      	mov	r1, r2
 800fedc:	e7d8      	b.n	800fe90 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 800fede:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fee2:	bf00      	nop
 800fee4:	447ffffe 	.word	0x447ffffe
 800fee8:	00000000 	.word	0x00000000

0800feec <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 800feec:	4770      	bx	lr

0800feee <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 800feee:	4770      	bx	lr

0800fef0 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 800fef0:	b510      	push	{r4, lr}
 800fef2:	4604      	mov	r4, r0
 800fef4:	2124      	movs	r1, #36	@ 0x24
 800fef6:	f011 fd78 	bl	80219ea <_ZdlPvj>
 800fefa:	4620      	mov	r0, r4
 800fefc:	bd10      	pop	{r4, pc}
	...

0800ff00 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 800ff00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ff02:	6803      	ldr	r3, [r0, #0]
 800ff04:	460d      	mov	r5, r1
 800ff06:	4604      	mov	r4, r0
 800ff08:	4601      	mov	r1, r0
 800ff0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ff0c:	a802      	add	r0, sp, #8
 800ff0e:	4798      	blx	r3
 800ff10:	6828      	ldr	r0, [r5, #0]
 800ff12:	6869      	ldr	r1, [r5, #4]
 800ff14:	466b      	mov	r3, sp
 800ff16:	c303      	stmia	r3!, {r0, r1}
 800ff18:	4668      	mov	r0, sp
 800ff1a:	4619      	mov	r1, r3
 800ff1c:	f7fd fcee 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 800ff20:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800ff22:	b188      	cbz	r0, 800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ff24:	6803      	ldr	r3, [r0, #0]
 800ff26:	1d21      	adds	r1, r4, #4
 800ff28:	68db      	ldr	r3, [r3, #12]
 800ff2a:	4798      	blx	r3
 800ff2c:	b160      	cbz	r0, 800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ff2e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd08      	ble.n	800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ff36:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	dd04      	ble.n	800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ff3e:	4a2b      	ldr	r2, [pc, #172]	@ (800ffec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 800ff40:	7812      	ldrb	r2, [r2, #0]
 800ff42:	b11a      	cbz	r2, 800ff4c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 800ff44:	2a01      	cmp	r2, #1
 800ff46:	d029      	beq.n	800ff9c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 800ff48:	b004      	add	sp, #16
 800ff4a:	bd70      	pop	{r4, r5, r6, pc}
 800ff4c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ff50:	441d      	add	r5, r3
 800ff52:	b2ad      	uxth	r5, r5
 800ff54:	b22e      	sxth	r6, r5
 800ff56:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800ff5a:	42b3      	cmp	r3, r6
 800ff5c:	daf4      	bge.n	800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ff5e:	6823      	ldr	r3, [r4, #0]
 800ff60:	4669      	mov	r1, sp
 800ff62:	4620      	mov	r0, r4
 800ff64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff66:	4798      	blx	r3
 800ff68:	b940      	cbnz	r0, 800ff7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800ff6a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800ff6e:	2b01      	cmp	r3, #1
 800ff70:	d004      	beq.n	800ff7c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 800ff72:	3301      	adds	r3, #1
 800ff74:	105b      	asrs	r3, r3, #1
 800ff76:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff7a:	e7f0      	b.n	800ff5e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 800ff7c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ff80:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800ff84:	4413      	add	r3, r2
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	441a      	add	r2, r3
 800ff8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 800ff8e:	b212      	sxth	r2, r2
 800ff90:	4296      	cmp	r6, r2
 800ff92:	dae0      	bge.n	800ff56 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800ff94:	1aeb      	subs	r3, r5, r3
 800ff96:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ff9a:	e7dc      	b.n	800ff56 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 800ff9c:	f8bd 5000 	ldrh.w	r5, [sp]
 800ffa0:	441d      	add	r5, r3
 800ffa2:	b2ad      	uxth	r5, r5
 800ffa4:	b22e      	sxth	r6, r5
 800ffa6:	f9bd 3000 	ldrsh.w	r3, [sp]
 800ffaa:	42b3      	cmp	r3, r6
 800ffac:	dacc      	bge.n	800ff48 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 800ffae:	6823      	ldr	r3, [r4, #0]
 800ffb0:	4669      	mov	r1, sp
 800ffb2:	4620      	mov	r0, r4
 800ffb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ffb6:	4798      	blx	r3
 800ffb8:	b940      	cbnz	r0, 800ffcc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800ffba:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 800ffbe:	2b01      	cmp	r3, #1
 800ffc0:	d004      	beq.n	800ffcc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 800ffc2:	3301      	adds	r3, #1
 800ffc4:	105b      	asrs	r3, r3, #1
 800ffc6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ffca:	e7f0      	b.n	800ffae <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 800ffcc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 800ffd0:	f8bd 3000 	ldrh.w	r3, [sp]
 800ffd4:	4413      	add	r3, r2
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	441a      	add	r2, r3
 800ffda:	f8ad 3000 	strh.w	r3, [sp]
 800ffde:	b212      	sxth	r2, r2
 800ffe0:	4296      	cmp	r6, r2
 800ffe2:	dae0      	bge.n	800ffa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800ffe4:	1aeb      	subs	r3, r5, r3
 800ffe6:	f8ad 3004 	strh.w	r3, [sp, #4]
 800ffea:	e7dc      	b.n	800ffa6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 800ffec:	2402526c 	.word	0x2402526c

0800fff0 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 800fff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fff2:	6803      	ldr	r3, [r0, #0]
 800fff4:	4604      	mov	r4, r0
 800fff6:	4601      	mov	r1, r0
 800fff8:	4668      	mov	r0, sp
 800fffa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800fffc:	4798      	blx	r3
 800fffe:	2100      	movs	r1, #0
 8010000:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8010004:	4668      	mov	r0, sp
 8010006:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801000a:	9102      	str	r1, [sp, #8]
 801000c:	a902      	add	r1, sp, #8
 801000e:	f8ad 200c 	strh.w	r2, [sp, #12]
 8010012:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010016:	f7fd fc71 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 801001a:	6823      	ldr	r3, [r4, #0]
 801001c:	4669      	mov	r1, sp
 801001e:	4620      	mov	r0, r4
 8010020:	691b      	ldr	r3, [r3, #16]
 8010022:	4798      	blx	r3
 8010024:	b004      	add	sp, #16
 8010026:	bd10      	pop	{r4, pc}

08010028 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8010028:	2101      	movs	r1, #1
 801002a:	2200      	movs	r2, #0
 801002c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8010030:	490a      	ldr	r1, [pc, #40]	@ (801005c <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 8010032:	8082      	strh	r2, [r0, #4]
 8010034:	6001      	str	r1, [r0, #0]
 8010036:	21ff      	movs	r1, #255	@ 0xff
 8010038:	80c2      	strh	r2, [r0, #6]
 801003a:	8102      	strh	r2, [r0, #8]
 801003c:	8142      	strh	r2, [r0, #10]
 801003e:	8182      	strh	r2, [r0, #12]
 8010040:	81c2      	strh	r2, [r0, #14]
 8010042:	8202      	strh	r2, [r0, #16]
 8010044:	8242      	strh	r2, [r0, #18]
 8010046:	61c2      	str	r2, [r0, #28]
 8010048:	8402      	strh	r2, [r0, #32]
 801004a:	8442      	strh	r2, [r0, #34]	@ 0x22
 801004c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8010050:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8010054:	6282      	str	r2, [r0, #40]	@ 0x28
 8010056:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801005a:	4770      	bx	lr
 801005c:	08025ad8 	.word	0x08025ad8

08010060 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010060:	2300      	movs	r3, #0
 8010062:	8083      	strh	r3, [r0, #4]
 8010064:	80c3      	strh	r3, [r0, #6]
 8010066:	8003      	strh	r3, [r0, #0]
 8010068:	8043      	strh	r3, [r0, #2]
 801006a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801006e:	2bff      	cmp	r3, #255	@ 0xff
 8010070:	bf01      	itttt	eq
 8010072:	890b      	ldrheq	r3, [r1, #8]
 8010074:	8083      	strheq	r3, [r0, #4]
 8010076:	894b      	ldrheq	r3, [r1, #10]
 8010078:	80c3      	strheq	r3, [r0, #6]
 801007a:	4770      	bx	lr

0801007c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801007c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801007e:	4604      	mov	r4, r0
 8010080:	466b      	mov	r3, sp
 8010082:	6808      	ldr	r0, [r1, #0]
 8010084:	6849      	ldr	r1, [r1, #4]
 8010086:	c303      	stmia	r3!, {r0, r1}
 8010088:	6823      	ldr	r3, [r4, #0]
 801008a:	4669      	mov	r1, sp
 801008c:	4620      	mov	r0, r4
 801008e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010090:	4798      	blx	r3
 8010092:	4b08      	ldr	r3, [pc, #32]	@ (80100b4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801009a:	b10a      	cbz	r2, 80100a0 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801009c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801009e:	b900      	cbnz	r0, 80100a2 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80100a0:	6898      	ldr	r0, [r3, #8]
 80100a2:	6803      	ldr	r3, [r0, #0]
 80100a4:	4669      	mov	r1, sp
 80100a6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80100a8:	6a1d      	ldr	r5, [r3, #32]
 80100aa:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80100ae:	47a8      	blx	r5
 80100b0:	b003      	add	sp, #12
 80100b2:	bd30      	pop	{r4, r5, pc}
 80100b4:	24025274 	.word	0x24025274

080100b8 <_ZN8touchgfx3BoxD1Ev>:
 80100b8:	4770      	bx	lr

080100ba <_ZN8touchgfx3BoxD0Ev>:
 80100ba:	b510      	push	{r4, lr}
 80100bc:	4604      	mov	r4, r0
 80100be:	212c      	movs	r1, #44	@ 0x2c
 80100c0:	f011 fc93 	bl	80219ea <_ZdlPvj>
 80100c4:	4620      	mov	r0, r4
 80100c6:	bd10      	pop	{r4, pc}

080100c8 <_ZNK8touchgfx3Box17invalidateContentEv>:
 80100c8:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 80100cc:	b12a      	cbz	r2, 80100da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80100ce:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80100d2:	b112      	cbz	r2, 80100da <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 80100d4:	6803      	ldr	r3, [r0, #0]
 80100d6:	695b      	ldr	r3, [r3, #20]
 80100d8:	4718      	bx	r3
 80100da:	4770      	bx	lr

080100dc <_ZNK8touchgfx5Gauge9getCenterERiS1_>:
 80100dc:	f9b0 3150 	ldrsh.w	r3, [r0, #336]	@ 0x150
 80100e0:	600b      	str	r3, [r1, #0]
 80100e2:	f9b0 3152 	ldrsh.w	r3, [r0, #338]	@ 0x152
 80100e6:	6013      	str	r3, [r2, #0]
 80100e8:	4770      	bx	lr

080100ea <_ZN8touchgfx5Gauge8setWidthEs>:
 80100ea:	8101      	strh	r1, [r0, #8]
 80100ec:	f8a0 10bc 	strh.w	r1, [r0, #188]	@ 0xbc
 80100f0:	f8a0 1160 	strh.w	r1, [r0, #352]	@ 0x160
 80100f4:	4770      	bx	lr

080100f6 <_ZN8touchgfx5Gauge9setHeightEs>:
 80100f6:	8141      	strh	r1, [r0, #10]
 80100f8:	f8a0 10be 	strh.w	r1, [r0, #190]	@ 0xbe
 80100fc:	f8a0 1162 	strh.w	r1, [r0, #354]	@ 0x162
 8010100:	4770      	bx	lr

08010102 <_ZNK8touchgfx5Gauge13getStartAngleEv>:
 8010102:	f8d0 0148 	ldr.w	r0, [r0, #328]	@ 0x148
 8010106:	4770      	bx	lr

08010108 <_ZNK8touchgfx5Gauge11getEndAngleEv>:
 8010108:	f8d0 014c 	ldr.w	r0, [r0, #332]	@ 0x14c
 801010c:	4770      	bx	lr

0801010e <_ZN8touchgfx5Gauge28setProgressIndicatorPositionEssss>:
 801010e:	4770      	bx	lr

08010110 <_ZN8touchgfx5GaugeD1Ev>:
 8010110:	4770      	bx	lr

08010112 <_ZN8touchgfx5Gauge8setAlphaEh>:
 8010112:	b538      	push	{r3, r4, r5, lr}
 8010114:	4604      	mov	r4, r0
 8010116:	460d      	mov	r5, r1
 8010118:	f7fd f8eb 	bl	800d2f2 <_ZN8touchgfx25AbstractProgressIndicator8setAlphaEh>
 801011c:	f884 50dc 	strb.w	r5, [r4, #220]	@ 0xdc
 8010120:	f884 517e 	strb.w	r5, [r4, #382]	@ 0x17e
 8010124:	bd38      	pop	{r3, r4, r5, pc}

08010126 <_ZN8touchgfx5GaugeD0Ev>:
 8010126:	b510      	push	{r4, lr}
 8010128:	4604      	mov	r4, r0
 801012a:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 801012e:	f011 fc5c 	bl	80219ea <_ZdlPvj>
 8010132:	4620      	mov	r0, r4
 8010134:	bd10      	pop	{r4, pc}

08010136 <_ZNK8touchgfx5Gauge17invalidateContentEv>:
 8010136:	b510      	push	{r4, lr}
 8010138:	6803      	ldr	r3, [r0, #0]
 801013a:	4604      	mov	r4, r0
 801013c:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010140:	4798      	blx	r3
 8010142:	b170      	cbz	r0, 8010162 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8010144:	6823      	ldr	r3, [r4, #0]
 8010146:	4620      	mov	r0, r4
 8010148:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 801014c:	4798      	blx	r3
 801014e:	b140      	cbz	r0, 8010162 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8010150:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010154:	b12b      	cbz	r3, 8010162 <_ZNK8touchgfx5Gauge17invalidateContentEv+0x2c>
 8010156:	6823      	ldr	r3, [r4, #0]
 8010158:	4620      	mov	r0, r4
 801015a:	695b      	ldr	r3, [r3, #20]
 801015c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010160:	4718      	bx	r3
 8010162:	bd10      	pop	{r4, pc}

08010164 <_ZN8touchgfx5GaugeC1Ev>:
 8010164:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010166:	4604      	mov	r4, r0
 8010168:	f7fd f9e4 	bl	800d534 <_ZN8touchgfx25AbstractProgressIndicatorC1Ev>
 801016c:	4b18      	ldr	r3, [pc, #96]	@ (80101d0 <_ZN8touchgfx5GaugeC1Ev+0x6c>)
 801016e:	a902      	add	r1, sp, #8
 8010170:	4626      	mov	r6, r4
 8010172:	2500      	movs	r5, #0
 8010174:	f504 77ac 	add.w	r7, r4, #344	@ 0x158
 8010178:	f846 3bb4 	str.w	r3, [r6], #180
 801017c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8010180:	4630      	mov	r0, r6
 8010182:	f821 3d04 	strh.w	r3, [r1, #-4]!
 8010186:	f010 fe31 	bl	8020dec <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>
 801018a:	2301      	movs	r3, #1
 801018c:	f8c4 5148 	str.w	r5, [r4, #328]	@ 0x148
 8010190:	4638      	mov	r0, r7
 8010192:	f884 3144 	strb.w	r3, [r4, #324]	@ 0x144
 8010196:	f884 3145 	strb.w	r3, [r4, #325]	@ 0x145
 801019a:	f8c4 514c 	str.w	r5, [r4, #332]	@ 0x14c
 801019e:	f8c4 5150 	str.w	r5, [r4, #336]	@ 0x150
 80101a2:	f8c4 5154 	str.w	r5, [r4, #340]	@ 0x154
 80101a6:	f010 f87f 	bl	80202a8 <_ZN8touchgfx6CircleC1Ev>
 80101aa:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 80101ae:	4620      	mov	r0, r4
 80101b0:	f7fd fa61 	bl	800d676 <_ZN8touchgfx9Container6removeERNS_8DrawableE>
 80101b4:	4639      	mov	r1, r7
 80101b6:	4620      	mov	r0, r4
 80101b8:	f7fd fa1c 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80101bc:	4620      	mov	r0, r4
 80101be:	4631      	mov	r1, r6
 80101c0:	f7fd fa18 	bl	800d5f4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
 80101c4:	4620      	mov	r0, r4
 80101c6:	f884 517d 	strb.w	r5, [r4, #381]	@ 0x17d
 80101ca:	b003      	add	sp, #12
 80101cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101ce:	bf00      	nop
 80101d0:	08025bb8 	.word	0x08025bb8

080101d4 <_ZN8touchgfx5Gauge33setMovingNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 80101d4:	f880 1144 	strb.w	r1, [r0, #324]	@ 0x144
 80101d8:	4770      	bx	lr

080101da <_ZN8touchgfx5Gauge33setSteadyNeedleRenderingAlgorithmENS_13TextureMapper18RenderingAlgorithmE>:
 80101da:	f880 1145 	strb.w	r1, [r0, #325]	@ 0x145
 80101de:	4770      	bx	lr

080101e0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>:
 80101e0:	b538      	push	{r3, r4, r5, lr}
 80101e2:	8902      	ldrh	r2, [r0, #8]
 80101e4:	f100 05b4 	add.w	r5, r0, #180	@ 0xb4
 80101e8:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80101ec:	4604      	mov	r4, r0
 80101ee:	f8a0 20bc 	strh.w	r2, [r0, #188]	@ 0xbc
 80101f2:	2200      	movs	r2, #0
 80101f4:	f8a0 30be 	strh.w	r3, [r0, #190]	@ 0xbe
 80101f8:	4628      	mov	r0, r5
 80101fa:	4611      	mov	r1, r2
 80101fc:	f7fd fe54 	bl	800dea8 <_ZN8touchgfx8Drawable5setXYEss>
 8010200:	f9b4 2156 	ldrsh.w	r2, [r4, #342]	@ 0x156
 8010204:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 8010208:	4628      	mov	r0, r5
 801020a:	1a9b      	subs	r3, r3, r2
 801020c:	f9b4 2154 	ldrsh.w	r2, [r4, #340]	@ 0x154
 8010210:	ee07 3a90 	vmov	s15, r3
 8010214:	f9b4 3150 	ldrsh.w	r3, [r4, #336]	@ 0x150
 8010218:	1a9b      	subs	r3, r3, r2
 801021a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801021e:	ee07 3a10 	vmov	s14, r3
 8010222:	edc4 7a39 	vstr	s15, [r4, #228]	@ 0xe4
 8010226:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801022a:	ed84 7a38 	vstr	s14, [r4, #224]	@ 0xe0
 801022e:	f010 fe29 	bl	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8010232:	4b16      	ldr	r3, [pc, #88]	@ (801028c <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv+0xac>)
 8010234:	4628      	mov	r0, r5
 8010236:	f8c4 310c 	str.w	r3, [r4, #268]	@ 0x10c
 801023a:	f010 fe23 	bl	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801023e:	f9b4 3152 	ldrsh.w	r3, [r4, #338]	@ 0x152
 8010242:	f9b4 2150 	ldrsh.w	r2, [r4, #336]	@ 0x150
 8010246:	4628      	mov	r0, r5
 8010248:	ee07 3a90 	vmov	s15, r3
 801024c:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
 8010250:	ee07 2a10 	vmov	s14, r2
 8010254:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010258:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 801025c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010260:	edc4 7a3f 	vstr	s15, [r4, #252]	@ 0xfc
 8010264:	ed84 7a3e 	vstr	s14, [r4, #248]	@ 0xf8
 8010268:	f010 fe0c 	bl	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 801026c:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
 8010270:	f8d4 20f8 	ldr.w	r2, [r4, #248]	@ 0xf8
 8010274:	4628      	mov	r0, r5
 8010276:	f8c4 3108 	str.w	r3, [r4, #264]	@ 0x108
 801027a:	f8c4 2104 	str.w	r2, [r4, #260]	@ 0x104
 801027e:	f010 fe01 	bl	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>
 8010282:	2301      	movs	r3, #1
 8010284:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8010288:	bd38      	pop	{r3, r4, r5, pc}
 801028a:	bf00      	nop
 801028c:	43960000 	.word	0x43960000

08010290 <_ZN8touchgfx5Gauge9setNeedleEtss>:
 8010290:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010292:	4604      	mov	r4, r0
 8010294:	a802      	add	r0, sp, #8
 8010296:	4616      	mov	r6, r2
 8010298:	461d      	mov	r5, r3
 801029a:	f820 1d04 	strh.w	r1, [r0, #-4]!
 801029e:	4601      	mov	r1, r0
 80102a0:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 80102a4:	f010 ff44 	bl	8021130 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>
 80102a8:	4620      	mov	r0, r4
 80102aa:	f8a4 6154 	strh.w	r6, [r4, #340]	@ 0x154
 80102ae:	f8a4 5156 	strh.w	r5, [r4, #342]	@ 0x156
 80102b2:	f7ff ff95 	bl	80101e0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80102b6:	b002      	add	sp, #8
 80102b8:	bd70      	pop	{r4, r5, r6, pc}

080102ba <_ZN8touchgfx5Gauge9setCenterEii>:
 80102ba:	b570      	push	{r4, r5, r6, lr}
 80102bc:	4606      	mov	r6, r0
 80102be:	460d      	mov	r5, r1
 80102c0:	4614      	mov	r4, r2
 80102c2:	f8a6 1150 	strh.w	r1, [r6, #336]	@ 0x150
 80102c6:	f8a6 2152 	strh.w	r2, [r6, #338]	@ 0x152
 80102ca:	f7ff ff89 	bl	80101e0 <_ZN8touchgfx5Gauge24setupNeedleTextureMapperEv>
 80102ce:	f9b6 215e 	ldrsh.w	r2, [r6, #350]	@ 0x15e
 80102d2:	f9b6 115c 	ldrsh.w	r1, [r6, #348]	@ 0x15c
 80102d6:	1aa4      	subs	r4, r4, r2
 80102d8:	1a6d      	subs	r5, r5, r1
 80102da:	0164      	lsls	r4, r4, #5
 80102dc:	016d      	lsls	r5, r5, #5
 80102de:	3410      	adds	r4, #16
 80102e0:	3510      	adds	r5, #16
 80102e2:	f8c6 4188 	str.w	r4, [r6, #392]	@ 0x188
 80102e6:	f8c6 5184 	str.w	r5, [r6, #388]	@ 0x184
 80102ea:	bd70      	pop	{r4, r5, r6, pc}

080102ec <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>:
 80102ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80102ee:	0149      	lsls	r1, r1, #5
 80102f0:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80102f2:	4604      	mov	r4, r0
 80102f4:	4299      	cmp	r1, r3
 80102f6:	9101      	str	r1, [sp, #4]
 80102f8:	d00b      	beq.n	8010312 <_ZN8touchgfx6Circle12updateArcEndIiEEvT_+0x26>
 80102fa:	4601      	mov	r1, r0
 80102fc:	aa01      	add	r2, sp, #4
 80102fe:	a802      	add	r0, sp, #8
 8010300:	f010 f9ce 	bl	80206a0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>
 8010304:	9b01      	ldr	r3, [sp, #4]
 8010306:	a902      	add	r1, sp, #8
 8010308:	4620      	mov	r0, r4
 801030a:	63e3      	str	r3, [r4, #60]	@ 0x3c
 801030c:	6823      	ldr	r3, [r4, #0]
 801030e:	691b      	ldr	r3, [r3, #16]
 8010310:	4798      	blx	r3
 8010312:	b004      	add	sp, #16
 8010314:	bd10      	pop	{r4, pc}
	...

08010318 <_ZN8touchgfx5Gauge8setValueEi>:
 8010318:	b570      	push	{r4, r5, r6, lr}
 801031a:	4604      	mov	r4, r0
 801031c:	f7fd f83c 	bl	800d398 <_ZN8touchgfx25AbstractProgressIndicator8setValueEi>
 8010320:	e9d4 3229 	ldrd	r3, r2, [r4, #164]	@ 0xa4
 8010324:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
 8010328:	4620      	mov	r0, r4
 801032a:	429a      	cmp	r2, r3
 801032c:	f504 76ac 	add.w	r6, r4, #344	@ 0x158
 8010330:	bfac      	ite	ge
 8010332:	f894 3145 	ldrbge.w	r3, [r4, #325]	@ 0x145
 8010336:	f894 3144 	ldrblt.w	r3, [r4, #324]	@ 0x144
 801033a:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 801033e:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8010342:	1ac9      	subs	r1, r1, r3
 8010344:	2900      	cmp	r1, #0
 8010346:	bfb8      	it	lt
 8010348:	4249      	neglt	r1, r1
 801034a:	b289      	uxth	r1, r1
 801034c:	f7fd f846 	bl	800d3dc <_ZNK8touchgfx25AbstractProgressIndicator11getProgressEt>
 8010350:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
 8010354:	f8d4 214c 	ldr.w	r2, [r4, #332]	@ 0x14c
 8010358:	4605      	mov	r5, r0
 801035a:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80103bc <_ZN8touchgfx5Gauge8setValueEi+0xa4>
 801035e:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8010362:	429a      	cmp	r2, r3
 8010364:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 80103c0 <_ZN8touchgfx5Gauge8setValueEi+0xa8>
 8010368:	da15      	bge.n	8010396 <_ZN8touchgfx5Gauge8setValueEi+0x7e>
 801036a:	1b5b      	subs	r3, r3, r5
 801036c:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 8010370:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 8010374:	ee07 3a90 	vmov	s15, r3
 8010378:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801037c:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 8010380:	ee21 1a07 	vmul.f32	s2, s2, s14
 8010384:	f010 fcec 	bl	8020d60 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 8010388:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 801038c:	1b49      	subs	r1, r1, r5
 801038e:	4630      	mov	r0, r6
 8010390:	f7ff ffac 	bl	80102ec <_ZN8touchgfx6Circle12updateArcEndIiEEvT_>
 8010394:	bd70      	pop	{r4, r5, r6, pc}
 8010396:	442b      	add	r3, r5
 8010398:	edd4 0a3b 	vldr	s1, [r4, #236]	@ 0xec
 801039c:	ed94 0a3a 	vldr	s0, [r4, #232]	@ 0xe8
 80103a0:	ee07 3a90 	vmov	s15, r3
 80103a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80103a8:	ee87 1aa6 	vdiv.f32	s2, s15, s13
 80103ac:	ee21 1a07 	vmul.f32	s2, s2, s14
 80103b0:	f010 fcd6 	bl	8020d60 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>
 80103b4:	f8d4 1148 	ldr.w	r1, [r4, #328]	@ 0x148
 80103b8:	4429      	add	r1, r5
 80103ba:	e7e8      	b.n	801038e <_ZN8touchgfx5Gauge8setValueEi+0x76>
 80103bc:	43340000 	.word	0x43340000
 80103c0:	40490fdb 	.word	0x40490fdb

080103c4 <_ZN8touchgfx5Gauge16setStartEndAngleEii>:
 80103c4:	b510      	push	{r4, lr}
 80103c6:	f8c0 1148 	str.w	r1, [r0, #328]	@ 0x148
 80103ca:	0149      	lsls	r1, r1, #5
 80103cc:	f8c0 214c 	str.w	r2, [r0, #332]	@ 0x14c
 80103d0:	0152      	lsls	r2, r2, #5
 80103d2:	4604      	mov	r4, r0
 80103d4:	f8c0 1190 	str.w	r1, [r0, #400]	@ 0x190
 80103d8:	f8c0 2194 	str.w	r2, [r0, #404]	@ 0x194
 80103dc:	f7fc ff86 	bl	800d2ec <_ZNK8touchgfx25AbstractProgressIndicator8getValueEv>
 80103e0:	4601      	mov	r1, r0
 80103e2:	4620      	mov	r0, r4
 80103e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80103e8:	f7ff bf96 	b.w	8010318 <_ZN8touchgfx5Gauge8setValueEi>

080103ec <_ZN8touchgfx5ImageD1Ev>:
 80103ec:	4770      	bx	lr

080103ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80103ee:	b570      	push	{r4, r5, r6, lr}
 80103f0:	880b      	ldrh	r3, [r1, #0]
 80103f2:	460d      	mov	r5, r1
 80103f4:	4604      	mov	r4, r0
 80103f6:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80103f8:	4608      	mov	r0, r1
 80103fa:	f005 f905 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80103fe:	4606      	mov	r6, r0
 8010400:	4628      	mov	r0, r5
 8010402:	f005 f935 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010406:	6823      	ldr	r3, [r4, #0]
 8010408:	4605      	mov	r5, r0
 801040a:	4631      	mov	r1, r6
 801040c:	4620      	mov	r0, r4
 801040e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010410:	4798      	blx	r3
 8010412:	6823      	ldr	r3, [r4, #0]
 8010414:	4629      	mov	r1, r5
 8010416:	4620      	mov	r0, r4
 8010418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801041a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801041e:	4718      	bx	r3

08010420 <_ZN8touchgfx5ImageD0Ev>:
 8010420:	b510      	push	{r4, lr}
 8010422:	4604      	mov	r4, r0
 8010424:	212c      	movs	r1, #44	@ 0x2c
 8010426:	f011 fae0 	bl	80219ea <_ZdlPvj>
 801042a:	4620      	mov	r0, r4
 801042c:	bd10      	pop	{r4, pc}

0801042e <_ZNK8touchgfx5Image12getSolidRectEv>:
 801042e:	b510      	push	{r4, lr}
 8010430:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 8010434:	4604      	mov	r4, r0
 8010436:	2bff      	cmp	r3, #255	@ 0xff
 8010438:	d006      	beq.n	8010448 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801043a:	2300      	movs	r3, #0
 801043c:	8003      	strh	r3, [r0, #0]
 801043e:	8043      	strh	r3, [r0, #2]
 8010440:	8083      	strh	r3, [r0, #4]
 8010442:	80c3      	strh	r3, [r0, #6]
 8010444:	4620      	mov	r0, r4
 8010446:	bd10      	pop	{r4, pc}
 8010448:	3126      	adds	r1, #38	@ 0x26
 801044a:	f005 f945 	bl	80156d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801044e:	e7f9      	b.n	8010444 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08010450 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8010450:	f890 2028 	ldrb.w	r2, [r0, #40]	@ 0x28
 8010454:	b12a      	cbz	r2, 8010462 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8010456:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801045a:	b112      	cbz	r2, 8010462 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801045c:	6803      	ldr	r3, [r0, #0]
 801045e:	695b      	ldr	r3, [r3, #20]
 8010460:	4718      	bx	r3
 8010462:	4770      	bx	lr

08010464 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8010464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010468:	4604      	mov	r4, r0
 801046a:	b088      	sub	sp, #32
 801046c:	2500      	movs	r5, #0
 801046e:	460f      	mov	r7, r1
 8010470:	f854 3b26 	ldr.w	r3, [r4], #38
 8010474:	a904      	add	r1, sp, #16
 8010476:	4606      	mov	r6, r0
 8010478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801047a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801047e:	4798      	blx	r3
 8010480:	4620      	mov	r0, r4
 8010482:	f005 f8c1 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010486:	4680      	mov	r8, r0
 8010488:	4620      	mov	r0, r4
 801048a:	f005 f8f1 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801048e:	9506      	str	r5, [sp, #24]
 8010490:	ad06      	add	r5, sp, #24
 8010492:	f8ad 001e 	strh.w	r0, [sp, #30]
 8010496:	4639      	mov	r1, r7
 8010498:	f8ad 801c 	strh.w	r8, [sp, #28]
 801049c:	4628      	mov	r0, r5
 801049e:	f7fd fa2d 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 80104a2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	dd19      	ble.n	80104de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80104aa:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	dd15      	ble.n	80104de <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 80104b2:	4b0c      	ldr	r3, [pc, #48]	@ (80104e4 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80104ba:	b10a      	cbz	r2, 80104c0 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 80104bc:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80104be:	b900      	cbnz	r0, 80104c2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 80104c0:	6898      	ldr	r0, [r3, #8]
 80104c2:	2701      	movs	r7, #1
 80104c4:	6801      	ldr	r1, [r0, #0]
 80104c6:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80104ca:	9702      	str	r7, [sp, #8]
 80104cc:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 80104d0:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80104d4:	e9cd 5600 	strd	r5, r6, [sp]
 80104d8:	688d      	ldr	r5, [r1, #8]
 80104da:	4621      	mov	r1, r4
 80104dc:	47a8      	blx	r5
 80104de:	b008      	add	sp, #32
 80104e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104e4:	24025274 	.word	0x24025274

080104e8 <_ZN8touchgfx7OutlineD1Ev>:
 80104e8:	4770      	bx	lr

080104ea <_ZN8touchgfx7OutlineD0Ev>:
 80104ea:	b510      	push	{r4, lr}
 80104ec:	4604      	mov	r4, r0
 80104ee:	2130      	movs	r1, #48	@ 0x30
 80104f0:	f011 fa7b 	bl	80219ea <_ZdlPvj>
 80104f4:	4620      	mov	r0, r4
 80104f6:	bd10      	pop	{r4, pc}

080104f8 <_ZN8touchgfx7Outline5resetEv>:
 80104f8:	b510      	push	{r4, lr}
 80104fa:	4604      	mov	r4, r0
 80104fc:	f000 fe72 	bl	80111e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8010500:	60e0      	str	r0, [r4, #12]
 8010502:	f000 fe75 	bl	80111f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8010506:	68e3      	ldr	r3, [r4, #12]
 8010508:	08c0      	lsrs	r0, r0, #3
 801050a:	2200      	movs	r2, #0
 801050c:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8010510:	6123      	str	r3, [r4, #16]
 8010512:	3801      	subs	r0, #1
 8010514:	60a2      	str	r2, [r4, #8]
 8010516:	6060      	str	r0, [r4, #4]
 8010518:	8019      	strh	r1, [r3, #0]
 801051a:	8059      	strh	r1, [r3, #2]
 801051c:	809a      	strh	r2, [r3, #4]
 801051e:	80da      	strh	r2, [r3, #6]
 8010520:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010522:	f023 0301 	bic.w	r3, r3, #1
 8010526:	f043 0302 	orr.w	r3, r3, #2
 801052a:	6263      	str	r3, [r4, #36]	@ 0x24
 801052c:	bd10      	pop	{r4, pc}
	...

08010530 <_ZN8touchgfx7OutlineC1Ev>:
 8010530:	4b0a      	ldr	r3, [pc, #40]	@ (801055c <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8010532:	b510      	push	{r4, lr}
 8010534:	6003      	str	r3, [r0, #0]
 8010536:	2300      	movs	r3, #0
 8010538:	4604      	mov	r4, r0
 801053a:	6243      	str	r3, [r0, #36]	@ 0x24
 801053c:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8010540:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010544:	e9c0 3305 	strd	r3, r3, [r0, #20]
 8010548:	e9c0 3307 	strd	r3, r3, [r0, #28]
 801054c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8010550:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8010554:	f7ff ffd0 	bl	80104f8 <_ZN8touchgfx7Outline5resetEv>
 8010558:	4620      	mov	r0, r4
 801055a:	bd10      	pop	{r4, pc}
 801055c:	08025d0c 	.word	0x08025d0c

08010560 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8010560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010564:	b093      	sub	sp, #76	@ 0x4c
 8010566:	1156      	asrs	r6, r2, #5
 8010568:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801056a:	9305      	str	r3, [sp, #20]
 801056c:	1153      	asrs	r3, r2, #5
 801056e:	f004 051f 	and.w	r5, r4, #31
 8010572:	9303      	str	r3, [sp, #12]
 8010574:	1163      	asrs	r3, r4, #5
 8010576:	9504      	str	r5, [sp, #16]
 8010578:	1165      	asrs	r5, r4, #5
 801057a:	9306      	str	r3, [sp, #24]
 801057c:	f002 031f 	and.w	r3, r2, #31
 8010580:	42ae      	cmp	r6, r5
 8010582:	f040 80f4 	bne.w	801076e <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 8010586:	9c04      	ldr	r4, [sp, #16]
 8010588:	9a05      	ldr	r2, [sp, #20]
 801058a:	42a3      	cmp	r3, r4
 801058c:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8010590:	6902      	ldr	r2, [r0, #16]
 8010592:	d125      	bne.n	80105e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010594:	f9b2 3000 	ldrsh.w	r3, [r2]
 8010598:	459e      	cmp	lr, r3
 801059a:	d103      	bne.n	80105a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 801059c:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80105a0:	429e      	cmp	r6, r3
 80105a2:	d035      	beq.n	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80105a4:	88d1      	ldrh	r1, [r2, #6]
 80105a6:	8893      	ldrh	r3, [r2, #4]
 80105a8:	430b      	orrs	r3, r1
 80105aa:	d010      	beq.n	80105ce <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80105ac:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	db0c      	blt.n	80105ce <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80105b4:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80105b6:	428b      	cmp	r3, r1
 80105b8:	da09      	bge.n	80105ce <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80105ba:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80105be:	428b      	cmp	r3, r1
 80105c0:	f103 0301 	add.w	r3, r3, #1
 80105c4:	bf38      	it	cc
 80105c6:	3208      	addcc	r2, #8
 80105c8:	6083      	str	r3, [r0, #8]
 80105ca:	bf38      	it	cc
 80105cc:	6102      	strcc	r2, [r0, #16]
 80105ce:	6903      	ldr	r3, [r0, #16]
 80105d0:	9a03      	ldr	r2, [sp, #12]
 80105d2:	f8a3 e000 	strh.w	lr, [r3]
 80105d6:	805a      	strh	r2, [r3, #2]
 80105d8:	2200      	movs	r2, #0
 80105da:	809a      	strh	r2, [r3, #4]
 80105dc:	80da      	strh	r2, [r3, #6]
 80105de:	e017      	b.n	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80105e0:	9c05      	ldr	r4, [sp, #20]
 80105e2:	114e      	asrs	r6, r1, #5
 80105e4:	f001 0c1f 	and.w	ip, r1, #31
 80105e8:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 80105ec:	f004 041f 	and.w	r4, r4, #31
 80105f0:	4576      	cmp	r6, lr
 80105f2:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 80105f6:	9402      	str	r4, [sp, #8]
 80105f8:	9c04      	ldr	r4, [sp, #16]
 80105fa:	eba4 0403 	sub.w	r4, r4, r3
 80105fe:	d10a      	bne.n	8010616 <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8010600:	9b02      	ldr	r3, [sp, #8]
 8010602:	44a0      	add	r8, r4
 8010604:	449c      	add	ip, r3
 8010606:	f8a2 8004 	strh.w	r8, [r2, #4]
 801060a:	fb04 a40c 	mla	r4, r4, ip, sl
 801060e:	80d4      	strh	r4, [r2, #6]
 8010610:	b013      	add	sp, #76	@ 0x4c
 8010612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010616:	9d05      	ldr	r5, [sp, #20]
 8010618:	1a69      	subs	r1, r5, r1
 801061a:	bf51      	iteee	pl
 801061c:	f1cc 0520 	rsbpl	r5, ip, #32
 8010620:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010624:	4249      	negmi	r1, r1
 8010626:	2500      	movmi	r5, #0
 8010628:	bf5d      	ittte	pl
 801062a:	436c      	mulpl	r4, r5
 801062c:	2520      	movpl	r5, #32
 801062e:	f04f 0901 	movpl.w	r9, #1
 8010632:	f04f 39ff 	movmi.w	r9, #4294967295
 8010636:	9501      	str	r5, [sp, #4]
 8010638:	9f01      	ldr	r7, [sp, #4]
 801063a:	444e      	add	r6, r9
 801063c:	fb94 f5f1 	sdiv	r5, r4, r1
 8010640:	fb01 4415 	mls	r4, r1, r5, r4
 8010644:	44bc      	add	ip, r7
 8010646:	2c00      	cmp	r4, #0
 8010648:	bfbc      	itt	lt
 801064a:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801064e:	1864      	addlt	r4, r4, r1
 8010650:	44a8      	add	r8, r5
 8010652:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010656:	f8a2 8004 	strh.w	r8, [r2, #4]
 801065a:	f8a2 c006 	strh.w	ip, [r2, #6]
 801065e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010662:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010666:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801066a:	ea58 0202 	orrs.w	r2, r8, r2
 801066e:	d011      	beq.n	8010694 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010670:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010674:	f1b8 0f00 	cmp.w	r8, #0
 8010678:	db0c      	blt.n	8010694 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801067a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 801067c:	4590      	cmp	r8, r2
 801067e:	da09      	bge.n	8010694 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010680:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010684:	4590      	cmp	r8, r2
 8010686:	bf3c      	itt	cc
 8010688:	f10c 0208 	addcc.w	r2, ip, #8
 801068c:	6102      	strcc	r2, [r0, #16]
 801068e:	f108 0201 	add.w	r2, r8, #1
 8010692:	6082      	str	r2, [r0, #8]
 8010694:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010698:	2700      	movs	r7, #0
 801069a:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801069e:	45b6      	cmp	lr, r6
 80106a0:	f8ac 6000 	strh.w	r6, [ip]
 80106a4:	442b      	add	r3, r5
 80106a6:	f8ac 2002 	strh.w	r2, [ip, #2]
 80106aa:	f8ac 7004 	strh.w	r7, [ip, #4]
 80106ae:	f8ac 7006 	strh.w	r7, [ip, #6]
 80106b2:	d04b      	beq.n	801074c <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80106b4:	9f04      	ldr	r7, [sp, #16]
 80106b6:	1a64      	subs	r4, r4, r1
 80106b8:	f04f 0a00 	mov.w	sl, #0
 80106bc:	1aff      	subs	r7, r7, r3
 80106be:	443d      	add	r5, r7
 80106c0:	016d      	lsls	r5, r5, #5
 80106c2:	fb95 f8f1 	sdiv	r8, r5, r1
 80106c6:	fb01 5518 	mls	r5, r1, r8, r5
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	bfbc      	itt	lt
 80106ce:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80106d2:	186d      	addlt	r5, r5, r1
 80106d4:	f108 0701 	add.w	r7, r8, #1
 80106d8:	9703      	str	r7, [sp, #12]
 80106da:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80106de:	1964      	adds	r4, r4, r5
 80106e0:	444e      	add	r6, r9
 80106e2:	bf54      	ite	pl
 80106e4:	9f03      	ldrpl	r7, [sp, #12]
 80106e6:	4647      	movmi	r7, r8
 80106e8:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80106ec:	bf58      	it	pl
 80106ee:	1a64      	subpl	r4, r4, r1
 80106f0:	443b      	add	r3, r7
 80106f2:	44bb      	add	fp, r7
 80106f4:	f8ac b004 	strh.w	fp, [ip, #4]
 80106f8:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80106fc:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010700:	f8ac b006 	strh.w	fp, [ip, #6]
 8010704:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010708:	f8bc b006 	ldrh.w	fp, [ip, #6]
 801070c:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010710:	ea5b 0707 	orrs.w	r7, fp, r7
 8010714:	d011      	beq.n	801073a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010716:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801071a:	f1bb 0f00 	cmp.w	fp, #0
 801071e:	db0c      	blt.n	801073a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010720:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010722:	45bb      	cmp	fp, r7
 8010724:	da09      	bge.n	801073a <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8010726:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801072a:	45bb      	cmp	fp, r7
 801072c:	bf3c      	itt	cc
 801072e:	f10c 0708 	addcc.w	r7, ip, #8
 8010732:	6107      	strcc	r7, [r0, #16]
 8010734:	f10b 0701 	add.w	r7, fp, #1
 8010738:	6087      	str	r7, [r0, #8]
 801073a:	6907      	ldr	r7, [r0, #16]
 801073c:	45b6      	cmp	lr, r6
 801073e:	803e      	strh	r6, [r7, #0]
 8010740:	807a      	strh	r2, [r7, #2]
 8010742:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010746:	f8a7 a006 	strh.w	sl, [r7, #6]
 801074a:	d1c6      	bne.n	80106da <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 801074c:	9a04      	ldr	r2, [sp, #16]
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	6902      	ldr	r2, [r0, #16]
 8010752:	8891      	ldrh	r1, [r2, #4]
 8010754:	88d6      	ldrh	r6, [r2, #6]
 8010756:	4419      	add	r1, r3
 8010758:	8091      	strh	r1, [r2, #4]
 801075a:	9902      	ldr	r1, [sp, #8]
 801075c:	f101 0c20 	add.w	ip, r1, #32
 8010760:	9901      	ldr	r1, [sp, #4]
 8010762:	ebac 0c01 	sub.w	ip, ip, r1
 8010766:	fb03 630c 	mla	r3, r3, ip, r6
 801076a:	80d3      	strh	r3, [r2, #6]
 801076c:	e750      	b.n	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801076e:	9d05      	ldr	r5, [sp, #20]
 8010770:	1aa2      	subs	r2, r4, r2
 8010772:	eba5 0501 	sub.w	r5, r5, r1
 8010776:	9202      	str	r2, [sp, #8]
 8010778:	9508      	str	r5, [sp, #32]
 801077a:	f140 8128 	bpl.w	80109ce <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 801077e:	9a03      	ldr	r2, [sp, #12]
 8010780:	2a00      	cmp	r2, #0
 8010782:	f6ff af45 	blt.w	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010786:	9a02      	ldr	r2, [sp, #8]
 8010788:	f04f 34ff 	mov.w	r4, #4294967295
 801078c:	4252      	negs	r2, r2
 801078e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010790:	2400      	movs	r4, #0
 8010792:	9202      	str	r2, [sp, #8]
 8010794:	9a06      	ldr	r2, [sp, #24]
 8010796:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 801079a:	9206      	str	r2, [sp, #24]
 801079c:	462a      	mov	r2, r5
 801079e:	435a      	muls	r2, r3
 80107a0:	9401      	str	r4, [sp, #4]
 80107a2:	9c02      	ldr	r4, [sp, #8]
 80107a4:	9d02      	ldr	r5, [sp, #8]
 80107a6:	fb92 f4f4 	sdiv	r4, r2, r4
 80107aa:	fb05 2214 	mls	r2, r5, r4, r2
 80107ae:	2a00      	cmp	r2, #0
 80107b0:	9207      	str	r2, [sp, #28]
 80107b2:	bfbc      	itt	lt
 80107b4:	1952      	addlt	r2, r2, r5
 80107b6:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80107ba:	6905      	ldr	r5, [r0, #16]
 80107bc:	bfb8      	it	lt
 80107be:	9207      	strlt	r2, [sp, #28]
 80107c0:	eb04 0901 	add.w	r9, r4, r1
 80107c4:	9a01      	ldr	r2, [sp, #4]
 80107c6:	ea4f 1669 	mov.w	r6, r9, asr #5
 80107ca:	429a      	cmp	r2, r3
 80107cc:	f040 8111 	bne.w	80109f2 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80107d0:	f9b5 3000 	ldrsh.w	r3, [r5]
 80107d4:	429e      	cmp	r6, r3
 80107d6:	d104      	bne.n	80107e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80107d8:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80107dc:	9a03      	ldr	r2, [sp, #12]
 80107de:	429a      	cmp	r2, r3
 80107e0:	d01b      	beq.n	801081a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80107e2:	88ea      	ldrh	r2, [r5, #6]
 80107e4:	88ab      	ldrh	r3, [r5, #4]
 80107e6:	4313      	orrs	r3, r2
 80107e8:	d010      	beq.n	801080c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80107ea:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80107ee:	2a00      	cmp	r2, #0
 80107f0:	db0c      	blt.n	801080c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80107f2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80107f4:	429a      	cmp	r2, r3
 80107f6:	da09      	bge.n	801080c <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80107f8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80107fc:	429a      	cmp	r2, r3
 80107fe:	f102 0201 	add.w	r2, r2, #1
 8010802:	bf38      	it	cc
 8010804:	3508      	addcc	r5, #8
 8010806:	6082      	str	r2, [r0, #8]
 8010808:	bf38      	it	cc
 801080a:	6105      	strcc	r5, [r0, #16]
 801080c:	6903      	ldr	r3, [r0, #16]
 801080e:	9a03      	ldr	r2, [sp, #12]
 8010810:	801e      	strh	r6, [r3, #0]
 8010812:	805a      	strh	r2, [r3, #2]
 8010814:	2200      	movs	r2, #0
 8010816:	809a      	strh	r2, [r3, #4]
 8010818:	80da      	strh	r2, [r3, #6]
 801081a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801081c:	9a03      	ldr	r2, [sp, #12]
 801081e:	6901      	ldr	r1, [r0, #16]
 8010820:	441a      	add	r2, r3
 8010822:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010826:	42b3      	cmp	r3, r6
 8010828:	d103      	bne.n	8010832 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 801082a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 801082e:	429a      	cmp	r2, r3
 8010830:	d01a      	beq.n	8010868 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8010832:	88cc      	ldrh	r4, [r1, #6]
 8010834:	888b      	ldrh	r3, [r1, #4]
 8010836:	4323      	orrs	r3, r4
 8010838:	d010      	beq.n	801085c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801083a:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801083e:	2c00      	cmp	r4, #0
 8010840:	db0c      	blt.n	801085c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010842:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010844:	429c      	cmp	r4, r3
 8010846:	da09      	bge.n	801085c <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010848:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801084c:	429c      	cmp	r4, r3
 801084e:	f104 0401 	add.w	r4, r4, #1
 8010852:	bf38      	it	cc
 8010854:	3108      	addcc	r1, #8
 8010856:	6084      	str	r4, [r0, #8]
 8010858:	bf38      	it	cc
 801085a:	6101      	strcc	r1, [r0, #16]
 801085c:	6903      	ldr	r3, [r0, #16]
 801085e:	2100      	movs	r1, #0
 8010860:	801e      	strh	r6, [r3, #0]
 8010862:	805a      	strh	r2, [r3, #2]
 8010864:	8099      	strh	r1, [r3, #4]
 8010866:	80d9      	strh	r1, [r3, #6]
 8010868:	9b06      	ldr	r3, [sp, #24]
 801086a:	4293      	cmp	r3, r2
 801086c:	f000 8082 	beq.w	8010974 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8010870:	9b08      	ldr	r3, [sp, #32]
 8010872:	9902      	ldr	r1, [sp, #8]
 8010874:	015b      	lsls	r3, r3, #5
 8010876:	9c02      	ldr	r4, [sp, #8]
 8010878:	fb93 f1f1 	sdiv	r1, r3, r1
 801087c:	fb04 3311 	mls	r3, r4, r1, r3
 8010880:	9103      	str	r1, [sp, #12]
 8010882:	2b00      	cmp	r3, #0
 8010884:	9308      	str	r3, [sp, #32]
 8010886:	da04      	bge.n	8010892 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8010888:	1e4b      	subs	r3, r1, #1
 801088a:	9303      	str	r3, [sp, #12]
 801088c:	9b08      	ldr	r3, [sp, #32]
 801088e:	4423      	add	r3, r4
 8010890:	9308      	str	r3, [sp, #32]
 8010892:	9b07      	ldr	r3, [sp, #28]
 8010894:	464f      	mov	r7, r9
 8010896:	9902      	ldr	r1, [sp, #8]
 8010898:	2600      	movs	r6, #0
 801089a:	1a5b      	subs	r3, r3, r1
 801089c:	9307      	str	r3, [sp, #28]
 801089e:	9b01      	ldr	r3, [sp, #4]
 80108a0:	f1c3 0320 	rsb	r3, r3, #32
 80108a4:	930e      	str	r3, [sp, #56]	@ 0x38
 80108a6:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80108a8:	9b01      	ldr	r3, [sp, #4]
 80108aa:	1a5b      	subs	r3, r3, r1
 80108ac:	930a      	str	r3, [sp, #40]	@ 0x28
 80108ae:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 80108b2:	185b      	adds	r3, r3, r1
 80108b4:	bf58      	it	pl
 80108b6:	9902      	ldrpl	r1, [sp, #8]
 80108b8:	9307      	str	r3, [sp, #28]
 80108ba:	bf57      	itett	pl
 80108bc:	1a5b      	subpl	r3, r3, r1
 80108be:	9903      	ldrmi	r1, [sp, #12]
 80108c0:	9307      	strpl	r3, [sp, #28]
 80108c2:	9b03      	ldrpl	r3, [sp, #12]
 80108c4:	bf58      	it	pl
 80108c6:	1c59      	addpl	r1, r3, #1
 80108c8:	2a00      	cmp	r2, #0
 80108ca:	4489      	add	r9, r1
 80108cc:	ea4f 1a69 	mov.w	sl, r9, asr #5
 80108d0:	db2e      	blt.n	8010930 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80108d2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80108d4:	4293      	cmp	r3, r2
 80108d6:	dd2b      	ble.n	8010930 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80108d8:	9c01      	ldr	r4, [sp, #4]
 80108da:	6905      	ldr	r5, [r0, #16]
 80108dc:	46a0      	mov	r8, r4
 80108de:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80108e0:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 80108e4:	45a0      	cmp	r8, r4
 80108e6:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 80108ea:	f040 814c 	bne.w	8010b86 <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 80108ee:	f9b5 1000 	ldrsh.w	r1, [r5]
 80108f2:	4551      	cmp	r1, sl
 80108f4:	d103      	bne.n	80108fe <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 80108f6:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 80108fa:	4291      	cmp	r1, r2
 80108fc:	d018      	beq.n	8010930 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 80108fe:	ea5c 010e 	orrs.w	r1, ip, lr
 8010902:	d00f      	beq.n	8010924 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010904:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010908:	2900      	cmp	r1, #0
 801090a:	db0b      	blt.n	8010924 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801090c:	428b      	cmp	r3, r1
 801090e:	dd09      	ble.n	8010924 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010910:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8010914:	4299      	cmp	r1, r3
 8010916:	f101 0101 	add.w	r1, r1, #1
 801091a:	bf38      	it	cc
 801091c:	3508      	addcc	r5, #8
 801091e:	6081      	str	r1, [r0, #8]
 8010920:	bf38      	it	cc
 8010922:	6105      	strcc	r5, [r0, #16]
 8010924:	6903      	ldr	r3, [r0, #16]
 8010926:	f8a3 a000 	strh.w	sl, [r3]
 801092a:	805a      	strh	r2, [r3, #2]
 801092c:	809e      	strh	r6, [r3, #4]
 801092e:	80de      	strh	r6, [r3, #6]
 8010930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010932:	6901      	ldr	r1, [r0, #16]
 8010934:	441a      	add	r2, r3
 8010936:	88cc      	ldrh	r4, [r1, #6]
 8010938:	888b      	ldrh	r3, [r1, #4]
 801093a:	4323      	orrs	r3, r4
 801093c:	d010      	beq.n	8010960 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801093e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010942:	2c00      	cmp	r4, #0
 8010944:	db0c      	blt.n	8010960 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010946:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010948:	429c      	cmp	r4, r3
 801094a:	da09      	bge.n	8010960 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801094c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010950:	429c      	cmp	r4, r3
 8010952:	f104 0401 	add.w	r4, r4, #1
 8010956:	bf38      	it	cc
 8010958:	3108      	addcc	r1, #8
 801095a:	6084      	str	r4, [r0, #8]
 801095c:	bf38      	it	cc
 801095e:	6101      	strcc	r1, [r0, #16]
 8010960:	6903      	ldr	r3, [r0, #16]
 8010962:	464f      	mov	r7, r9
 8010964:	f8a3 a000 	strh.w	sl, [r3]
 8010968:	805a      	strh	r2, [r3, #2]
 801096a:	809e      	strh	r6, [r3, #4]
 801096c:	80de      	strh	r6, [r3, #6]
 801096e:	9b06      	ldr	r3, [sp, #24]
 8010970:	4293      	cmp	r3, r2
 8010972:	d19c      	bne.n	80108ae <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8010974:	9b01      	ldr	r3, [sp, #4]
 8010976:	6907      	ldr	r7, [r0, #16]
 8010978:	f1c3 0620 	rsb	r6, r3, #32
 801097c:	9b05      	ldr	r3, [sp, #20]
 801097e:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8010982:	9b04      	ldr	r3, [sp, #16]
 8010984:	429e      	cmp	r6, r3
 8010986:	f040 81c7 	bne.w	8010d18 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 801098a:	f9b7 3000 	ldrsh.w	r3, [r7]
 801098e:	459e      	cmp	lr, r3
 8010990:	d104      	bne.n	801099c <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8010992:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010996:	429a      	cmp	r2, r3
 8010998:	f43f ae3a 	beq.w	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801099c:	88f9      	ldrh	r1, [r7, #6]
 801099e:	88bb      	ldrh	r3, [r7, #4]
 80109a0:	430b      	orrs	r3, r1
 80109a2:	d010      	beq.n	80109c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80109a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	db0c      	blt.n	80109c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80109ac:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80109ae:	428b      	cmp	r3, r1
 80109b0:	da09      	bge.n	80109c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80109b2:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80109b6:	428b      	cmp	r3, r1
 80109b8:	f103 0301 	add.w	r3, r3, #1
 80109bc:	bf38      	it	cc
 80109be:	3708      	addcc	r7, #8
 80109c0:	6083      	str	r3, [r0, #8]
 80109c2:	bf38      	it	cc
 80109c4:	6107      	strcc	r7, [r0, #16]
 80109c6:	6903      	ldr	r3, [r0, #16]
 80109c8:	f8a3 e000 	strh.w	lr, [r3]
 80109cc:	e603      	b.n	80105d6 <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 80109ce:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80109d0:	9c03      	ldr	r4, [sp, #12]
 80109d2:	42a2      	cmp	r2, r4
 80109d4:	f6ff ae1c 	blt.w	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80109d8:	9c06      	ldr	r4, [sp, #24]
 80109da:	42a2      	cmp	r2, r4
 80109dc:	9c08      	ldr	r4, [sp, #32]
 80109de:	bfbc      	itt	lt
 80109e0:	3201      	addlt	r2, #1
 80109e2:	9206      	strlt	r2, [sp, #24]
 80109e4:	f1c3 0220 	rsb	r2, r3, #32
 80109e8:	4362      	muls	r2, r4
 80109ea:	2401      	movs	r4, #1
 80109ec:	940b      	str	r4, [sp, #44]	@ 0x2c
 80109ee:	2420      	movs	r4, #32
 80109f0:	e6d6      	b.n	80107a0 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 80109f2:	ea4f 1861 	mov.w	r8, r1, asr #5
 80109f6:	f009 021f 	and.w	r2, r9, #31
 80109fa:	f001 011f 	and.w	r1, r1, #31
 80109fe:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8010a02:	920c      	str	r2, [sp, #48]	@ 0x30
 8010a04:	45b0      	cmp	r8, r6
 8010a06:	9a01      	ldr	r2, [sp, #4]
 8010a08:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8010a0c:	eba2 0203 	sub.w	r2, r2, r3
 8010a10:	d108      	bne.n	8010a24 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8010a12:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a14:	4496      	add	lr, r2
 8010a16:	4419      	add	r1, r3
 8010a18:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010a1c:	fb02 a101 	mla	r1, r2, r1, sl
 8010a20:	80e9      	strh	r1, [r5, #6]
 8010a22:	e6fa      	b.n	801081a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010a24:	2c00      	cmp	r4, #0
 8010a26:	f2c0 80a7 	blt.w	8010b78 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8010a2a:	2701      	movs	r7, #1
 8010a2c:	f1c1 0c20 	rsb	ip, r1, #32
 8010a30:	970a      	str	r7, [sp, #40]	@ 0x28
 8010a32:	2720      	movs	r7, #32
 8010a34:	fb02 f20c 	mul.w	r2, r2, ip
 8010a38:	9709      	str	r7, [sp, #36]	@ 0x24
 8010a3a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010a3c:	fb92 fcf4 	sdiv	ip, r2, r4
 8010a40:	fb04 221c 	mls	r2, r4, ip, r2
 8010a44:	4439      	add	r1, r7
 8010a46:	2a00      	cmp	r2, #0
 8010a48:	bfbc      	itt	lt
 8010a4a:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8010a4e:	1912      	addlt	r2, r2, r4
 8010a50:	fb0c a101 	mla	r1, ip, r1, sl
 8010a54:	44e6      	add	lr, ip
 8010a56:	80e9      	strh	r1, [r5, #6]
 8010a58:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010a5a:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010a5e:	eb08 0501 	add.w	r5, r8, r1
 8010a62:	6901      	ldr	r1, [r0, #16]
 8010a64:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8010a68:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8010a6c:	ea58 070e 	orrs.w	r7, r8, lr
 8010a70:	d010      	beq.n	8010a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010a72:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8010a76:	f1be 0f00 	cmp.w	lr, #0
 8010a7a:	db0b      	blt.n	8010a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010a7c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010a7e:	45be      	cmp	lr, r7
 8010a80:	da08      	bge.n	8010a94 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010a82:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010a86:	45be      	cmp	lr, r7
 8010a88:	bf3c      	itt	cc
 8010a8a:	3108      	addcc	r1, #8
 8010a8c:	6101      	strcc	r1, [r0, #16]
 8010a8e:	f10e 0101 	add.w	r1, lr, #1
 8010a92:	6081      	str	r1, [r0, #8]
 8010a94:	6901      	ldr	r1, [r0, #16]
 8010a96:	f04f 0e00 	mov.w	lr, #0
 8010a9a:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010a9e:	42ae      	cmp	r6, r5
 8010aa0:	800d      	strh	r5, [r1, #0]
 8010aa2:	4463      	add	r3, ip
 8010aa4:	f8a1 8002 	strh.w	r8, [r1, #2]
 8010aa8:	f8a1 e004 	strh.w	lr, [r1, #4]
 8010aac:	f8a1 e006 	strh.w	lr, [r1, #6]
 8010ab0:	d053      	beq.n	8010b5a <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8010ab2:	9901      	ldr	r1, [sp, #4]
 8010ab4:	1b12      	subs	r2, r2, r4
 8010ab6:	1ac9      	subs	r1, r1, r3
 8010ab8:	4461      	add	r1, ip
 8010aba:	0149      	lsls	r1, r1, #5
 8010abc:	fb91 fef4 	sdiv	lr, r1, r4
 8010ac0:	fb04 111e 	mls	r1, r4, lr, r1
 8010ac4:	2900      	cmp	r1, #0
 8010ac6:	bfbc      	itt	lt
 8010ac8:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8010acc:	1909      	addlt	r1, r1, r4
 8010ace:	f10e 0701 	add.w	r7, lr, #1
 8010ad2:	970d      	str	r7, [sp, #52]	@ 0x34
 8010ad4:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8010ad8:	1852      	adds	r2, r2, r1
 8010ada:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010adc:	bf54      	ite	pl
 8010ade:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8010ae2:	46f4      	movmi	ip, lr
 8010ae4:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8010ae8:	bf58      	it	pl
 8010aea:	1b12      	subpl	r2, r2, r4
 8010aec:	4463      	add	r3, ip
 8010aee:	443d      	add	r5, r7
 8010af0:	44e3      	add	fp, ip
 8010af2:	f8aa b004 	strh.w	fp, [sl, #4]
 8010af6:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8010afa:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8010afe:	f8aa b006 	strh.w	fp, [sl, #6]
 8010b02:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010b06:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010b0a:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8010b0e:	ea5b 070a 	orrs.w	r7, fp, sl
 8010b12:	d014      	beq.n	8010b3e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010b14:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8010b18:	f1ba 0f00 	cmp.w	sl, #0
 8010b1c:	db0f      	blt.n	8010b3e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010b1e:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010b20:	45ba      	cmp	sl, r7
 8010b22:	da0c      	bge.n	8010b3e <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010b24:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8010b28:	45ba      	cmp	sl, r7
 8010b2a:	f10a 0a01 	add.w	sl, sl, #1
 8010b2e:	bf38      	it	cc
 8010b30:	f10c 0c08 	addcc.w	ip, ip, #8
 8010b34:	f8c0 a008 	str.w	sl, [r0, #8]
 8010b38:	bf38      	it	cc
 8010b3a:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8010b3e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010b42:	f04f 0700 	mov.w	r7, #0
 8010b46:	42ae      	cmp	r6, r5
 8010b48:	f8ac 5000 	strh.w	r5, [ip]
 8010b4c:	f8ac 8002 	strh.w	r8, [ip, #2]
 8010b50:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010b54:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010b58:	d1bc      	bne.n	8010ad4 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8010b5a:	6904      	ldr	r4, [r0, #16]
 8010b5c:	9a01      	ldr	r2, [sp, #4]
 8010b5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010b60:	1ad3      	subs	r3, r2, r3
 8010b62:	88a2      	ldrh	r2, [r4, #4]
 8010b64:	3120      	adds	r1, #32
 8010b66:	441a      	add	r2, r3
 8010b68:	80a2      	strh	r2, [r4, #4]
 8010b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b6c:	1a89      	subs	r1, r1, r2
 8010b6e:	88e2      	ldrh	r2, [r4, #6]
 8010b70:	fb03 2301 	mla	r3, r3, r1, r2
 8010b74:	80e3      	strh	r3, [r4, #6]
 8010b76:	e650      	b.n	801081a <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010b78:	f04f 37ff 	mov.w	r7, #4294967295
 8010b7c:	434a      	muls	r2, r1
 8010b7e:	4264      	negs	r4, r4
 8010b80:	970a      	str	r7, [sp, #40]	@ 0x28
 8010b82:	2700      	movs	r7, #0
 8010b84:	e758      	b.n	8010a38 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8010b86:	ea4f 1867 	mov.w	r8, r7, asr #5
 8010b8a:	f009 031f 	and.w	r3, r9, #31
 8010b8e:	f007 071f 	and.w	r7, r7, #31
 8010b92:	fa1f fc8c 	uxth.w	ip, ip
 8010b96:	45d0      	cmp	r8, sl
 8010b98:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010b9a:	fa1f fe8e 	uxth.w	lr, lr
 8010b9e:	d10a      	bne.n	8010bb6 <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8010ba0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010ba2:	449c      	add	ip, r3
 8010ba4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010ba6:	441f      	add	r7, r3
 8010ba8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010baa:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010bae:	fb03 e707 	mla	r7, r3, r7, lr
 8010bb2:	80ef      	strh	r7, [r5, #6]
 8010bb4:	e6bc      	b.n	8010930 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010bb6:	2900      	cmp	r1, #0
 8010bb8:	f2c0 80a6 	blt.w	8010d08 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8010bbc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010bbe:	f1c7 0320 	rsb	r3, r7, #32
 8010bc2:	4363      	muls	r3, r4
 8010bc4:	2401      	movs	r4, #1
 8010bc6:	940d      	str	r4, [sp, #52]	@ 0x34
 8010bc8:	2420      	movs	r4, #32
 8010bca:	940c      	str	r4, [sp, #48]	@ 0x30
 8010bcc:	fb93 f4f1 	sdiv	r4, r3, r1
 8010bd0:	fb01 3b14 	mls	fp, r1, r4, r3
 8010bd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010bd6:	f1bb 0f00 	cmp.w	fp, #0
 8010bda:	441f      	add	r7, r3
 8010bdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010bde:	bfbc      	itt	lt
 8010be0:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010be4:	448b      	addlt	fp, r1
 8010be6:	fb04 e707 	mla	r7, r4, r7, lr
 8010bea:	44a4      	add	ip, r4
 8010bec:	80ef      	strh	r7, [r5, #6]
 8010bee:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010bf2:	eb08 0503 	add.w	r5, r8, r3
 8010bf6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010bfa:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8010bfe:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010c02:	ea5e 0307 	orrs.w	r3, lr, r7
 8010c06:	d011      	beq.n	8010c2c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010c08:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8010c0c:	f1be 0f00 	cmp.w	lr, #0
 8010c10:	db0c      	blt.n	8010c2c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010c12:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010c14:	45be      	cmp	lr, r7
 8010c16:	da09      	bge.n	8010c2c <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010c18:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010c1c:	45be      	cmp	lr, r7
 8010c1e:	bf3c      	itt	cc
 8010c20:	f10c 0708 	addcc.w	r7, ip, #8
 8010c24:	6107      	strcc	r7, [r0, #16]
 8010c26:	f10e 0701 	add.w	r7, lr, #1
 8010c2a:	6087      	str	r7, [r0, #8]
 8010c2c:	6907      	ldr	r7, [r0, #16]
 8010c2e:	b213      	sxth	r3, r2
 8010c30:	4555      	cmp	r5, sl
 8010c32:	9310      	str	r3, [sp, #64]	@ 0x40
 8010c34:	807b      	strh	r3, [r7, #2]
 8010c36:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c38:	803d      	strh	r5, [r7, #0]
 8010c3a:	80be      	strh	r6, [r7, #4]
 8010c3c:	eb04 0c03 	add.w	ip, r4, r3
 8010c40:	80fe      	strh	r6, [r7, #6]
 8010c42:	d050      	beq.n	8010ce6 <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8010c44:	9b01      	ldr	r3, [sp, #4]
 8010c46:	eba3 070c 	sub.w	r7, r3, ip
 8010c4a:	ebab 0301 	sub.w	r3, fp, r1
 8010c4e:	443c      	add	r4, r7
 8010c50:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c52:	0164      	lsls	r4, r4, #5
 8010c54:	fb94 f8f1 	sdiv	r8, r4, r1
 8010c58:	fb01 4418 	mls	r4, r1, r8, r4
 8010c5c:	2c00      	cmp	r4, #0
 8010c5e:	bfbc      	itt	lt
 8010c60:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010c64:	1864      	addlt	r4, r4, r1
 8010c66:	f108 0701 	add.w	r7, r8, #1
 8010c6a:	9711      	str	r7, [sp, #68]	@ 0x44
 8010c6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c6e:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010c72:	191b      	adds	r3, r3, r4
 8010c74:	f8be b004 	ldrh.w	fp, [lr, #4]
 8010c78:	bf54      	ite	pl
 8010c7a:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8010c7c:	4647      	movmi	r7, r8
 8010c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c80:	bf58      	it	pl
 8010c82:	1a5b      	subpl	r3, r3, r1
 8010c84:	44bb      	add	fp, r7
 8010c86:	44bc      	add	ip, r7
 8010c88:	bf58      	it	pl
 8010c8a:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8010c8c:	f8ae b004 	strh.w	fp, [lr, #4]
 8010c90:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010c94:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010c98:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010c9a:	f8ae b006 	strh.w	fp, [lr, #6]
 8010c9e:	443d      	add	r5, r7
 8010ca0:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010ca4:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010ca8:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010cac:	ea5b 0307 	orrs.w	r3, fp, r7
 8010cb0:	d011      	beq.n	8010cd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010cb2:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8010cb6:	f1bb 0f00 	cmp.w	fp, #0
 8010cba:	db0c      	blt.n	8010cd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010cbc:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010cbe:	45bb      	cmp	fp, r7
 8010cc0:	da09      	bge.n	8010cd6 <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010cc2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010cc6:	45bb      	cmp	fp, r7
 8010cc8:	bf3c      	itt	cc
 8010cca:	f10e 0708 	addcc.w	r7, lr, #8
 8010cce:	6107      	strcc	r7, [r0, #16]
 8010cd0:	f10b 0701 	add.w	r7, fp, #1
 8010cd4:	6087      	str	r7, [r0, #8]
 8010cd6:	6907      	ldr	r7, [r0, #16]
 8010cd8:	4555      	cmp	r5, sl
 8010cda:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010cdc:	803d      	strh	r5, [r7, #0]
 8010cde:	807b      	strh	r3, [r7, #2]
 8010ce0:	80be      	strh	r6, [r7, #4]
 8010ce2:	80fe      	strh	r6, [r7, #6]
 8010ce4:	d1c2      	bne.n	8010c6c <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010ce6:	9b01      	ldr	r3, [sp, #4]
 8010ce8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010cea:	eba3 0c0c 	sub.w	ip, r3, ip
 8010cee:	6903      	ldr	r3, [r0, #16]
 8010cf0:	3720      	adds	r7, #32
 8010cf2:	8899      	ldrh	r1, [r3, #4]
 8010cf4:	4461      	add	r1, ip
 8010cf6:	8099      	strh	r1, [r3, #4]
 8010cf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010cfa:	1a7f      	subs	r7, r7, r1
 8010cfc:	88d9      	ldrh	r1, [r3, #6]
 8010cfe:	fb0c 1c07 	mla	ip, ip, r7, r1
 8010d02:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010d06:	e613      	b.n	8010930 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010d08:	f04f 34ff 	mov.w	r4, #4294967295
 8010d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010d0e:	4249      	negs	r1, r1
 8010d10:	940d      	str	r4, [sp, #52]	@ 0x34
 8010d12:	2400      	movs	r4, #0
 8010d14:	437b      	muls	r3, r7
 8010d16:	e758      	b.n	8010bca <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010d18:	9905      	ldr	r1, [sp, #20]
 8010d1a:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8010d1e:	f009 0c1f 	and.w	ip, r9, #31
 8010d22:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010d26:	f001 011f 	and.w	r1, r1, #31
 8010d2a:	45f3      	cmp	fp, lr
 8010d2c:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8010d30:	9102      	str	r1, [sp, #8]
 8010d32:	9904      	ldr	r1, [sp, #16]
 8010d34:	eba1 0406 	sub.w	r4, r1, r6
 8010d38:	d108      	bne.n	8010d4c <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010d3a:	9b02      	ldr	r3, [sp, #8]
 8010d3c:	44a0      	add	r8, r4
 8010d3e:	449c      	add	ip, r3
 8010d40:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010d44:	fb04 a40c 	mla	r4, r4, ip, sl
 8010d48:	80fc      	strh	r4, [r7, #6]
 8010d4a:	e461      	b.n	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010d4c:	9905      	ldr	r1, [sp, #20]
 8010d4e:	ebb1 0109 	subs.w	r1, r1, r9
 8010d52:	bf51      	iteee	pl
 8010d54:	f1cc 0520 	rsbpl	r5, ip, #32
 8010d58:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010d5c:	4249      	negmi	r1, r1
 8010d5e:	2500      	movmi	r5, #0
 8010d60:	bf5d      	ittte	pl
 8010d62:	436c      	mulpl	r4, r5
 8010d64:	2520      	movpl	r5, #32
 8010d66:	f04f 0901 	movpl.w	r9, #1
 8010d6a:	f04f 39ff 	movmi.w	r9, #4294967295
 8010d6e:	9501      	str	r5, [sp, #4]
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	fb94 f5f1 	sdiv	r5, r4, r1
 8010d76:	fb01 4415 	mls	r4, r1, r5, r4
 8010d7a:	449c      	add	ip, r3
 8010d7c:	eb0b 0309 	add.w	r3, fp, r9
 8010d80:	2c00      	cmp	r4, #0
 8010d82:	bfbc      	itt	lt
 8010d84:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8010d88:	1864      	addlt	r4, r4, r1
 8010d8a:	44a8      	add	r8, r5
 8010d8c:	fb05 ac0c 	mla	ip, r5, ip, sl
 8010d90:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010d94:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010d98:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010d9c:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8010da0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010da4:	ea58 0707 	orrs.w	r7, r8, r7
 8010da8:	d011      	beq.n	8010dce <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010daa:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010dae:	f1b8 0f00 	cmp.w	r8, #0
 8010db2:	db0c      	blt.n	8010dce <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010db4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010db6:	45b8      	cmp	r8, r7
 8010db8:	da09      	bge.n	8010dce <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8010dba:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8010dbe:	45b8      	cmp	r8, r7
 8010dc0:	bf3c      	itt	cc
 8010dc2:	f10c 0708 	addcc.w	r7, ip, #8
 8010dc6:	6107      	strcc	r7, [r0, #16]
 8010dc8:	f108 0701 	add.w	r7, r8, #1
 8010dcc:	6087      	str	r7, [r0, #8]
 8010dce:	6907      	ldr	r7, [r0, #16]
 8010dd0:	f04f 0c00 	mov.w	ip, #0
 8010dd4:	b212      	sxth	r2, r2
 8010dd6:	459e      	cmp	lr, r3
 8010dd8:	803b      	strh	r3, [r7, #0]
 8010dda:	442e      	add	r6, r5
 8010ddc:	807a      	strh	r2, [r7, #2]
 8010dde:	f8a7 c004 	strh.w	ip, [r7, #4]
 8010de2:	f8a7 c006 	strh.w	ip, [r7, #6]
 8010de6:	d04b      	beq.n	8010e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8010de8:	9f04      	ldr	r7, [sp, #16]
 8010dea:	1a64      	subs	r4, r4, r1
 8010dec:	f04f 0a00 	mov.w	sl, #0
 8010df0:	1bbf      	subs	r7, r7, r6
 8010df2:	443d      	add	r5, r7
 8010df4:	016d      	lsls	r5, r5, #5
 8010df6:	fb95 f8f1 	sdiv	r8, r5, r1
 8010dfa:	fb01 5518 	mls	r5, r1, r8, r5
 8010dfe:	4565      	cmp	r5, ip
 8010e00:	bfbc      	itt	lt
 8010e02:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010e06:	186d      	addlt	r5, r5, r1
 8010e08:	f108 0701 	add.w	r7, r8, #1
 8010e0c:	9703      	str	r7, [sp, #12]
 8010e0e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e12:	1964      	adds	r4, r4, r5
 8010e14:	444b      	add	r3, r9
 8010e16:	bf54      	ite	pl
 8010e18:	9f03      	ldrpl	r7, [sp, #12]
 8010e1a:	4647      	movmi	r7, r8
 8010e1c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010e20:	bf58      	it	pl
 8010e22:	1a64      	subpl	r4, r4, r1
 8010e24:	443e      	add	r6, r7
 8010e26:	44bb      	add	fp, r7
 8010e28:	f8ac b004 	strh.w	fp, [ip, #4]
 8010e2c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010e30:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010e34:	f8ac b006 	strh.w	fp, [ip, #6]
 8010e38:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e3c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010e40:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010e44:	ea5b 0707 	orrs.w	r7, fp, r7
 8010e48:	d011      	beq.n	8010e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010e4a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8010e4e:	f1bb 0f00 	cmp.w	fp, #0
 8010e52:	db0c      	blt.n	8010e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010e54:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010e56:	45bb      	cmp	fp, r7
 8010e58:	da09      	bge.n	8010e6e <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8010e5a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010e5e:	45bb      	cmp	fp, r7
 8010e60:	bf3c      	itt	cc
 8010e62:	f10c 0708 	addcc.w	r7, ip, #8
 8010e66:	6107      	strcc	r7, [r0, #16]
 8010e68:	f10b 0701 	add.w	r7, fp, #1
 8010e6c:	6087      	str	r7, [r0, #8]
 8010e6e:	6907      	ldr	r7, [r0, #16]
 8010e70:	459e      	cmp	lr, r3
 8010e72:	803b      	strh	r3, [r7, #0]
 8010e74:	807a      	strh	r2, [r7, #2]
 8010e76:	f8a7 a004 	strh.w	sl, [r7, #4]
 8010e7a:	f8a7 a006 	strh.w	sl, [r7, #6]
 8010e7e:	d1c6      	bne.n	8010e0e <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8010e80:	9b04      	ldr	r3, [sp, #16]
 8010e82:	1b9e      	subs	r6, r3, r6
 8010e84:	6903      	ldr	r3, [r0, #16]
 8010e86:	889a      	ldrh	r2, [r3, #4]
 8010e88:	4432      	add	r2, r6
 8010e8a:	809a      	strh	r2, [r3, #4]
 8010e8c:	9a02      	ldr	r2, [sp, #8]
 8010e8e:	f102 0c20 	add.w	ip, r2, #32
 8010e92:	9a01      	ldr	r2, [sp, #4]
 8010e94:	ebac 0c02 	sub.w	ip, ip, r2
 8010e98:	88da      	ldrh	r2, [r3, #6]
 8010e9a:	fb06 260c 	mla	r6, r6, ip, r2
 8010e9e:	80de      	strh	r6, [r3, #6]
 8010ea0:	f7ff bbb6 	b.w	8010610 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08010ea4 <_ZN8touchgfx7Outline6lineToEii>:
 8010ea4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010ea6:	079b      	lsls	r3, r3, #30
 8010ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010eaa:	460e      	mov	r6, r1
 8010eac:	4615      	mov	r5, r2
 8010eae:	d511      	bpl.n	8010ed4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010eb0:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8010eb4:	ea86 0701 	eor.w	r7, r6, r1
 8010eb8:	ea85 0302 	eor.w	r3, r5, r2
 8010ebc:	433b      	orrs	r3, r7
 8010ebe:	d009      	beq.n	8010ed4 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8010ec0:	4633      	mov	r3, r6
 8010ec2:	9500      	str	r5, [sp, #0]
 8010ec4:	f7ff fb4c 	bl	8010560 <_ZN8touchgfx7Outline10renderLineEiiii>
 8010ec8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010eca:	f043 0301 	orr.w	r3, r3, #1
 8010ece:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8010ed2:	6243      	str	r3, [r0, #36]	@ 0x24
 8010ed4:	b003      	add	sp, #12
 8010ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010ed8 <_ZN8touchgfx7Outline6moveToEii>:
 8010ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eda:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8010edc:	4615      	mov	r5, r2
 8010ede:	4604      	mov	r4, r0
 8010ee0:	460e      	mov	r6, r1
 8010ee2:	079a      	lsls	r2, r3, #30
 8010ee4:	d401      	bmi.n	8010eea <_ZN8touchgfx7Outline6moveToEii+0x12>
 8010ee6:	f7ff fb07 	bl	80104f8 <_ZN8touchgfx7Outline5resetEv>
 8010eea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8010eec:	07db      	lsls	r3, r3, #31
 8010eee:	d504      	bpl.n	8010efa <_ZN8touchgfx7Outline6moveToEii+0x22>
 8010ef0:	4620      	mov	r0, r4
 8010ef2:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8010ef6:	f7ff ffd5 	bl	8010ea4 <_ZN8touchgfx7Outline6lineToEii>
 8010efa:	6923      	ldr	r3, [r4, #16]
 8010efc:	1170      	asrs	r0, r6, #5
 8010efe:	1169      	asrs	r1, r5, #5
 8010f00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010f04:	4290      	cmp	r0, r2
 8010f06:	d103      	bne.n	8010f10 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8010f08:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010f0c:	4291      	cmp	r1, r2
 8010f0e:	d01a      	beq.n	8010f46 <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8010f10:	88df      	ldrh	r7, [r3, #6]
 8010f12:	889a      	ldrh	r2, [r3, #4]
 8010f14:	433a      	orrs	r2, r7
 8010f16:	d010      	beq.n	8010f3a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010f18:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8010f1c:	2a00      	cmp	r2, #0
 8010f1e:	db0c      	blt.n	8010f3a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010f20:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8010f22:	42ba      	cmp	r2, r7
 8010f24:	da09      	bge.n	8010f3a <_ZN8touchgfx7Outline6moveToEii+0x62>
 8010f26:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8010f2a:	42ba      	cmp	r2, r7
 8010f2c:	f102 0201 	add.w	r2, r2, #1
 8010f30:	bf38      	it	cc
 8010f32:	3308      	addcc	r3, #8
 8010f34:	60a2      	str	r2, [r4, #8]
 8010f36:	bf38      	it	cc
 8010f38:	6123      	strcc	r3, [r4, #16]
 8010f3a:	6923      	ldr	r3, [r4, #16]
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	8018      	strh	r0, [r3, #0]
 8010f40:	8059      	strh	r1, [r3, #2]
 8010f42:	809a      	strh	r2, [r3, #4]
 8010f44:	80da      	strh	r2, [r3, #6]
 8010f46:	6166      	str	r6, [r4, #20]
 8010f48:	6225      	str	r5, [r4, #32]
 8010f4a:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8010f4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010f50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8010f50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010f54:	b0d0      	sub	sp, #320	@ 0x140
 8010f56:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010f5a:	466c      	mov	r4, sp
 8010f5c:	4627      	mov	r7, r4
 8010f5e:	1a0d      	subs	r5, r1, r0
 8010f60:	f100 0308 	add.w	r3, r0, #8
 8010f64:	2d48      	cmp	r5, #72	@ 0x48
 8010f66:	f340 80d5 	ble.w	8011114 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8010f6a:	112d      	asrs	r5, r5, #4
 8010f6c:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8010f70:	f9b0 9000 	ldrsh.w	r9, [r0]
 8010f74:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8010f78:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8010f7c:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8010f80:	6816      	ldr	r6, [r2, #0]
 8010f82:	6006      	str	r6, [r0, #0]
 8010f84:	6856      	ldr	r6, [r2, #4]
 8010f86:	6046      	str	r6, [r0, #4]
 8010f88:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8010f8c:	f8a2 8002 	strh.w	r8, [r2, #2]
 8010f90:	f8a2 e004 	strh.w	lr, [r2, #4]
 8010f94:	f8a2 c006 	strh.w	ip, [r2, #6]
 8010f98:	f1a1 0208 	sub.w	r2, r1, #8
 8010f9c:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8010fa0:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8010fa4:	4565      	cmp	r5, ip
 8010fa6:	db06      	blt.n	8010fb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8010fa8:	d119      	bne.n	8010fde <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010faa:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8010fae:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8010fb2:	42ae      	cmp	r6, r5
 8010fb4:	dd13      	ble.n	8010fde <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8010fb6:	460e      	mov	r6, r1
 8010fb8:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8010fbc:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8010fc0:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8010fc4:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8010fc8:	601d      	str	r5, [r3, #0]
 8010fca:	6875      	ldr	r5, [r6, #4]
 8010fcc:	605d      	str	r5, [r3, #4]
 8010fce:	f821 9c08 	strh.w	r9, [r1, #-8]
 8010fd2:	f821 cc06 	strh.w	ip, [r1, #-6]
 8010fd6:	f821 8c04 	strh.w	r8, [r1, #-4]
 8010fda:	f821 ec02 	strh.w	lr, [r1, #-2]
 8010fde:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8010fe2:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 8010fe6:	42ae      	cmp	r6, r5
 8010fe8:	db06      	blt.n	8010ff8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8010fea:	d116      	bne.n	801101a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010fec:	f9b0 c000 	ldrsh.w	ip, [r0]
 8010ff0:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8010ff4:	45ac      	cmp	ip, r5
 8010ff6:	da10      	bge.n	801101a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8010ff8:	681d      	ldr	r5, [r3, #0]
 8010ffa:	f9b0 8000 	ldrsh.w	r8, [r0]
 8010ffe:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011002:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011006:	6005      	str	r5, [r0, #0]
 8011008:	685d      	ldr	r5, [r3, #4]
 801100a:	f8a0 8008 	strh.w	r8, [r0, #8]
 801100e:	6045      	str	r5, [r0, #4]
 8011010:	8146      	strh	r6, [r0, #10]
 8011012:	f8a0 e00c 	strh.w	lr, [r0, #12]
 8011016:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801101a:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 801101e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011022:	4565      	cmp	r5, ip
 8011024:	db06      	blt.n	8011034 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 8011026:	d119      	bne.n	801105c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011028:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 801102c:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011030:	42ae      	cmp	r6, r5
 8011032:	da13      	bge.n	801105c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011034:	460e      	mov	r6, r1
 8011036:	f9b0 9000 	ldrsh.w	r9, [r0]
 801103a:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 801103e:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011042:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 8011046:	6005      	str	r5, [r0, #0]
 8011048:	6875      	ldr	r5, [r6, #4]
 801104a:	6045      	str	r5, [r0, #4]
 801104c:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011050:	f821 cc06 	strh.w	ip, [r1, #-6]
 8011054:	f821 8c04 	strh.w	r8, [r1, #-4]
 8011058:	f821 ec02 	strh.w	lr, [r1, #-2]
 801105c:	3308      	adds	r3, #8
 801105e:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8011062:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 8011066:	45e6      	cmp	lr, ip
 8011068:	dbf8      	blt.n	801105c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801106a:	d105      	bne.n	8011078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 801106c:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011070:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011074:	42ae      	cmp	r6, r5
 8011076:	dbf1      	blt.n	801105c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8011078:	4615      	mov	r5, r2
 801107a:	3a08      	subs	r2, #8
 801107c:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8011080:	45b4      	cmp	ip, r6
 8011082:	dbf9      	blt.n	8011078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011084:	d105      	bne.n	8011092 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 8011086:	f9b0 8000 	ldrsh.w	r8, [r0]
 801108a:	f9b2 6000 	ldrsh.w	r6, [r2]
 801108e:	45b0      	cmp	r8, r6
 8011090:	dbf2      	blt.n	8011078 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011092:	4293      	cmp	r3, r2
 8011094:	f1a5 0608 	sub.w	r6, r5, #8
 8011098:	d816      	bhi.n	80110c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801109a:	f8d6 c000 	ldr.w	ip, [r6]
 801109e:	f9b3 a000 	ldrsh.w	sl, [r3]
 80110a2:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80110a6:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80110aa:	f8c3 c000 	str.w	ip, [r3]
 80110ae:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80110b2:	f8c3 c004 	str.w	ip, [r3, #4]
 80110b6:	f825 ac08 	strh.w	sl, [r5, #-8]
 80110ba:	f825 ec06 	strh.w	lr, [r5, #-6]
 80110be:	f825 9c04 	strh.w	r9, [r5, #-4]
 80110c2:	f825 8c02 	strh.w	r8, [r5, #-2]
 80110c6:	e7c9      	b.n	801105c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80110c8:	f8d6 e000 	ldr.w	lr, [r6]
 80110cc:	f9b0 a000 	ldrsh.w	sl, [r0]
 80110d0:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80110d4:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80110d8:	f8c0 e000 	str.w	lr, [r0]
 80110dc:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80110e0:	1a16      	subs	r6, r2, r0
 80110e2:	f8c0 e004 	str.w	lr, [r0, #4]
 80110e6:	f825 ac08 	strh.w	sl, [r5, #-8]
 80110ea:	f825 cc06 	strh.w	ip, [r5, #-6]
 80110ee:	f825 9c04 	strh.w	r9, [r5, #-4]
 80110f2:	f825 8c02 	strh.w	r8, [r5, #-2]
 80110f6:	1acd      	subs	r5, r1, r3
 80110f8:	10ed      	asrs	r5, r5, #3
 80110fa:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 80110fe:	bfb5      	itete	lt
 8011100:	e9c4 0200 	strdlt	r0, r2, [r4]
 8011104:	e9c4 3100 	strdge	r3, r1, [r4]
 8011108:	460a      	movlt	r2, r1
 801110a:	4603      	movge	r3, r0
 801110c:	3408      	adds	r4, #8
 801110e:	4618      	mov	r0, r3
 8011110:	4611      	mov	r1, r2
 8011112:	e724      	b.n	8010f5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011114:	4299      	cmp	r1, r3
 8011116:	d927      	bls.n	8011168 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8011118:	f1a3 0210 	sub.w	r2, r3, #16
 801111c:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8011120:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8011124:	45ac      	cmp	ip, r5
 8011126:	db06      	blt.n	8011136 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8011128:	d11c      	bne.n	8011164 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801112a:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 801112e:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8011132:	42ae      	cmp	r6, r5
 8011134:	da16      	bge.n	8011164 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8011136:	4615      	mov	r5, r2
 8011138:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 801113c:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8011140:	3a08      	subs	r2, #8
 8011142:	f855 6f08 	ldr.w	r6, [r5, #8]!
 8011146:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801114a:	6196      	str	r6, [r2, #24]
 801114c:	42a8      	cmp	r0, r5
 801114e:	686e      	ldr	r6, [r5, #4]
 8011150:	f8a2 9010 	strh.w	r9, [r2, #16]
 8011154:	61d6      	str	r6, [r2, #28]
 8011156:	f8a2 c012 	strh.w	ip, [r2, #18]
 801115a:	f8a2 8014 	strh.w	r8, [r2, #20]
 801115e:	f8a2 e016 	strh.w	lr, [r2, #22]
 8011162:	d1db      	bne.n	801111c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8011164:	3308      	adds	r3, #8
 8011166:	e7d5      	b.n	8011114 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8011168:	42bc      	cmp	r4, r7
 801116a:	d903      	bls.n	8011174 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 801116c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8011170:	3c08      	subs	r4, #8
 8011172:	e6f4      	b.n	8010f5e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011174:	b050      	add	sp, #320	@ 0x140
 8011176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801117a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801117a:	b510      	push	{r4, lr}
 801117c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801117e:	4604      	mov	r4, r0
 8011180:	07da      	lsls	r2, r3, #31
 8011182:	d507      	bpl.n	8011194 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8011184:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 8011188:	f7ff fe8c 	bl	8010ea4 <_ZN8touchgfx7Outline6lineToEii>
 801118c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801118e:	f023 0301 	bic.w	r3, r3, #1
 8011192:	6243      	str	r3, [r0, #36]	@ 0x24
 8011194:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011196:	079b      	lsls	r3, r3, #30
 8011198:	d521      	bpl.n	80111de <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801119a:	6923      	ldr	r3, [r4, #16]
 801119c:	88d9      	ldrh	r1, [r3, #6]
 801119e:	889a      	ldrh	r2, [r3, #4]
 80111a0:	430a      	orrs	r2, r1
 80111a2:	d010      	beq.n	80111c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80111a4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80111a8:	2a00      	cmp	r2, #0
 80111aa:	db0c      	blt.n	80111c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80111ac:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80111ae:	428a      	cmp	r2, r1
 80111b0:	da09      	bge.n	80111c6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80111b2:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80111b6:	4291      	cmp	r1, r2
 80111b8:	f102 0201 	add.w	r2, r2, #1
 80111bc:	bf88      	it	hi
 80111be:	3308      	addhi	r3, #8
 80111c0:	60a2      	str	r2, [r4, #8]
 80111c2:	bf88      	it	hi
 80111c4:	6123      	strhi	r3, [r4, #16]
 80111c6:	68a1      	ldr	r1, [r4, #8]
 80111c8:	b129      	cbz	r1, 80111d6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80111ca:	6863      	ldr	r3, [r4, #4]
 80111cc:	4299      	cmp	r1, r3
 80111ce:	d802      	bhi.n	80111d6 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80111d0:	68e0      	ldr	r0, [r4, #12]
 80111d2:	f7ff febd 	bl	8010f50 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80111d6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80111d8:	f023 0302 	bic.w	r3, r3, #2
 80111dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80111de:	68e0      	ldr	r0, [r4, #12]
 80111e0:	bd10      	pop	{r4, pc}
	...

080111e4 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80111e4:	4b01      	ldr	r3, [pc, #4]	@ (80111ec <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80111e6:	6818      	ldr	r0, [r3, #0]
 80111e8:	4770      	bx	lr
 80111ea:	bf00      	nop
 80111ec:	2402527c 	.word	0x2402527c

080111f0 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 80111f0:	4b01      	ldr	r3, [pc, #4]	@ (80111f8 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 80111f2:	6818      	ldr	r0, [r3, #0]
 80111f4:	4770      	bx	lr
 80111f6:	bf00      	nop
 80111f8:	24025280 	.word	0x24025280

080111fc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80111fc:	b510      	push	{r4, lr}
 80111fe:	6803      	ldr	r3, [r0, #0]
 8011200:	460c      	mov	r4, r1
 8011202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011204:	4798      	blx	r3
 8011206:	1b03      	subs	r3, r0, r4
 8011208:	4258      	negs	r0, r3
 801120a:	4158      	adcs	r0, r3
 801120c:	bd10      	pop	{r4, pc}
	...

08011210 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8011210:	4b01      	ldr	r3, [pc, #4]	@ (8011218 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8011212:	6019      	str	r1, [r3, #0]
 8011214:	4770      	bx	lr
 8011216:	bf00      	nop
 8011218:	24025284 	.word	0x24025284

0801121c <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801121c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011220:	4696      	mov	lr, r2
 8011222:	b097      	sub	sp, #92	@ 0x5c
 8011224:	4605      	mov	r5, r0
 8011226:	4614      	mov	r4, r2
 8011228:	460e      	mov	r6, r1
 801122a:	461f      	mov	r7, r3
 801122c:	f10d 0c1c 	add.w	ip, sp, #28
 8011230:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8011234:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8011238:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 801123c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011240:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011244:	f8de 3000 	ldr.w	r3, [lr]
 8011248:	f104 0e14 	add.w	lr, r4, #20
 801124c:	f8cc 3000 	str.w	r3, [ip]
 8011250:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011254:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011258:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801125c:	f8de 3000 	ldr.w	r3, [lr]
 8011260:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011264:	f8cc 3000 	str.w	r3, [ip]
 8011268:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 801126c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011270:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011274:	f8de 3000 	ldr.w	r3, [lr]
 8011278:	4631      	mov	r1, r6
 801127a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801127c:	4628      	mov	r0, r5
 801127e:	f8cc 3000 	str.w	r3, [ip]
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	9201      	str	r2, [sp, #4]
 8011286:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011288:	f8cd 8008 	str.w	r8, [sp, #8]
 801128c:	9200      	str	r2, [sp, #0]
 801128e:	aa07      	add	r2, sp, #28
 8011290:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011294:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 8011298:	463b      	mov	r3, r7
 801129a:	47d8      	blx	fp
 801129c:	46a6      	mov	lr, r4
 801129e:	f10d 0c1c 	add.w	ip, sp, #28
 80112a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112a6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112aa:	f8de 3000 	ldr.w	r3, [lr]
 80112ae:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80112b2:	343c      	adds	r4, #60	@ 0x3c
 80112b4:	f8cc 3000 	str.w	r3, [ip]
 80112b8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80112bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80112c0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112c4:	f8de 3000 	ldr.w	r3, [lr]
 80112c8:	f8cc 3000 	str.w	r3, [ip]
 80112cc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80112d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80112d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80112d6:	6823      	ldr	r3, [r4, #0]
 80112d8:	4631      	mov	r1, r6
 80112da:	4628      	mov	r0, r5
 80112dc:	f8cc 3000 	str.w	r3, [ip]
 80112e0:	682b      	ldr	r3, [r5, #0]
 80112e2:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80112e6:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80112e8:	f8cd 8008 	str.w	r8, [sp, #8]
 80112ec:	9201      	str	r2, [sp, #4]
 80112ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80112f0:	9200      	str	r2, [sp, #0]
 80112f2:	aa07      	add	r2, sp, #28
 80112f4:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 80112f6:	463b      	mov	r3, r7
 80112f8:	47a0      	blx	r4
 80112fa:	b017      	add	sp, #92	@ 0x5c
 80112fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011300 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011304:	b08d      	sub	sp, #52	@ 0x34
 8011306:	4688      	mov	r8, r1
 8011308:	f8d3 c000 	ldr.w	ip, [r3]
 801130c:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801130e:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8011312:	680f      	ldr	r7, [r1, #0]
 8011314:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8011318:	eba7 070c 	sub.w	r7, r7, ip
 801131c:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8011320:	edd3 6a07 	vldr	s13, [r3, #28]
 8011324:	42bc      	cmp	r4, r7
 8011326:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8011328:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 801132c:	bfa8      	it	ge
 801132e:	463c      	movge	r4, r7
 8011330:	f9b1 9000 	ldrsh.w	r9, [r1]
 8011334:	f9ba 1000 	ldrsh.w	r1, [sl]
 8011338:	ee07 4a90 	vmov	s15, r4
 801133c:	eb09 0e0c 	add.w	lr, r9, ip
 8011340:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8011344:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 8011348:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 801134c:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8011350:	4571      	cmp	r1, lr
 8011352:	ee25 4a04 	vmul.f32	s8, s10, s8
 8011356:	ee65 4a24 	vmul.f32	s9, s10, s9
 801135a:	ee25 5a27 	vmul.f32	s10, s10, s15
 801135e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011362:	ee71 0aa4 	vadd.f32	s1, s3, s9
 8011366:	ee32 1a05 	vadd.f32	s2, s4, s10
 801136a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 801136e:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011372:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011376:	ee22 2a07 	vmul.f32	s4, s4, s14
 801137a:	f340 808c 	ble.w	8011496 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 801137e:	eba1 060e 	sub.w	r6, r1, lr
 8011382:	fb96 f5f4 	sdiv	r5, r6, r4
 8011386:	ee07 5a10 	vmov	s14, r5
 801138a:	2d00      	cmp	r5, #0
 801138c:	fb04 6615 	mls	r6, r4, r5, r6
 8011390:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011394:	eea7 0a04 	vfma.f32	s0, s14, s8
 8011398:	eee7 0a24 	vfma.f32	s1, s14, s9
 801139c:	eea7 1a05 	vfma.f32	s2, s14, s10
 80113a0:	dd12      	ble.n	80113c8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80113a2:	ee70 6a44 	vsub.f32	s13, s0, s8
 80113a6:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80113aa:	ee31 2a45 	vsub.f32	s4, s2, s10
 80113ae:	eef5 6a40 	vcmp.f32	s13, #0.0
 80113b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113b6:	bf14      	ite	ne
 80113b8:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80113bc:	eeb0 7a67 	vmoveq.f32	s14, s15
 80113c0:	ee61 1a87 	vmul.f32	s3, s3, s14
 80113c4:	ee22 2a07 	vmul.f32	s4, s4, s14
 80113c8:	fb05 f204 	mul.w	r2, r5, r4
 80113cc:	1abf      	subs	r7, r7, r2
 80113ce:	4494      	add	ip, r2
 80113d0:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80113d4:	4411      	add	r1, r2
 80113d6:	eb09 020c 	add.w	r2, r9, ip
 80113da:	b209      	sxth	r1, r1
 80113dc:	443a      	add	r2, r7
 80113de:	428a      	cmp	r2, r1
 80113e0:	bfc4      	itt	gt
 80113e2:	eba1 0209 	subgt.w	r2, r1, r9
 80113e6:	eba2 070c 	subgt.w	r7, r2, ip
 80113ea:	2f00      	cmp	r7, #0
 80113ec:	dd50      	ble.n	8011490 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80113ee:	fb97 f1f4 	sdiv	r1, r7, r4
 80113f2:	fb04 7211 	mls	r2, r4, r1, r7
 80113f6:	b90a      	cbnz	r2, 80113fc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80113f8:	3901      	subs	r1, #1
 80113fa:	4622      	mov	r2, r4
 80113fc:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011400:	6840      	ldr	r0, [r0, #4]
 8011402:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 8011406:	44b6      	add	lr, r6
 8011408:	f8d0 a000 	ldr.w	sl, [r0]
 801140c:	2900      	cmp	r1, #0
 801140e:	bfcc      	ite	gt
 8011410:	46a1      	movgt	r9, r4
 8011412:	4691      	movle	r9, r2
 8011414:	900b      	str	r0, [sp, #44]	@ 0x2c
 8011416:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8011418:	fb04 e505 	mla	r5, r4, r5, lr
 801141c:	eef0 6a42 	vmov.f32	s13, s4
 8011420:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8011424:	9008      	str	r0, [sp, #32]
 8011426:	eeb0 7a61 	vmov.f32	s14, s3
 801142a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801142c:	695b      	ldr	r3, [r3, #20]
 801142e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8011432:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 8011436:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801143a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801143c:	445b      	add	r3, fp
 801143e:	9307      	str	r3, [sp, #28]
 8011440:	ee16 3a90 	vmov	r3, s13
 8011444:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8011448:	ee60 2aa3 	vmul.f32	s5, s1, s7
 801144c:	ee21 3a23 	vmul.f32	s6, s2, s7
 8011450:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8011454:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011458:	ee17 7a90 	vmov	r7, s15
 801145c:	ee73 7a42 	vsub.f32	s15, s6, s4
 8011460:	fb97 f7f4 	sdiv	r7, r7, r4
 8011464:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8011468:	ee17 ca90 	vmov	ip, s15
 801146c:	fb9c fcf4 	sdiv	ip, ip, r4
 8011470:	fb0c 3306 	mla	r3, ip, r6, r3
 8011474:	9302      	str	r3, [sp, #8]
 8011476:	ee17 3a10 	vmov	r3, s14
 801147a:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801147e:	fb07 3706 	mla	r7, r7, r6, r3
 8011482:	eba9 0306 	sub.w	r3, r9, r6
 8011486:	e9cd 4700 	strd	r4, r7, [sp]
 801148a:	f8da 4008 	ldr.w	r4, [sl, #8]
 801148e:	47a0      	blx	r4
 8011490:	b00d      	add	sp, #52	@ 0x34
 8011492:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011496:	2500      	movs	r5, #0
 8011498:	462e      	mov	r6, r5
 801149a:	e799      	b.n	80113d0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

0801149c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 801149c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114a0:	b0db      	sub	sp, #364	@ 0x16c
 80114a2:	461d      	mov	r5, r3
 80114a4:	4614      	mov	r4, r2
 80114a6:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80114aa:	910f      	str	r1, [sp, #60]	@ 0x3c
 80114ac:	4629      	mov	r1, r5
 80114ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80114b0:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80114b4:	9009      	str	r0, [sp, #36]	@ 0x24
 80114b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80114b8:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80114bc:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80114c0:	9310      	str	r3, [sp, #64]	@ 0x40
 80114c2:	6803      	ldr	r3, [r0, #0]
 80114c4:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80114c6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80114ca:	47b8      	blx	r7
 80114cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80114ce:	6058      	str	r0, [r3, #4]
 80114d0:	2800      	cmp	r0, #0
 80114d2:	f000 83a1 	beq.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80114d6:	682b      	ldr	r3, [r5, #0]
 80114d8:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80114dc:	ed94 7a02 	vldr	s14, [r4, #8]
 80114e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80114e2:	686b      	ldr	r3, [r5, #4]
 80114e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80114e8:	9315      	str	r3, [sp, #84]	@ 0x54
 80114ea:	4bc1      	ldr	r3, [pc, #772]	@ (80117f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80114ec:	7819      	ldrb	r1, [r3, #0]
 80114ee:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80114f2:	2900      	cmp	r1, #0
 80114f4:	bf16      	itet	ne
 80114f6:	4619      	movne	r1, r3
 80114f8:	4611      	moveq	r1, r2
 80114fa:	4613      	movne	r3, r2
 80114fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011500:	9116      	str	r1, [sp, #88]	@ 0x58
 8011502:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 8011506:	f240 8387 	bls.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801150a:	ed94 7a07 	vldr	s14, [r4, #28]
 801150e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011516:	f240 837f 	bls.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801151a:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 801151e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011526:	f240 8377 	bls.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801152a:	6822      	ldr	r2, [r4, #0]
 801152c:	4bb1      	ldr	r3, [pc, #708]	@ (80117f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 801152e:	429a      	cmp	r2, r3
 8011530:	f2c0 8372 	blt.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011534:	49b0      	ldr	r1, [pc, #704]	@ (80117f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 8011536:	6963      	ldr	r3, [r4, #20]
 8011538:	428a      	cmp	r2, r1
 801153a:	f300 836d 	bgt.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801153e:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011542:	48ae      	ldr	r0, [pc, #696]	@ (80117fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8011544:	33ff      	adds	r3, #255	@ 0xff
 8011546:	4283      	cmp	r3, r0
 8011548:	f200 8366 	bhi.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801154c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801154e:	4dac      	ldr	r5, [pc, #688]	@ (8011800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8011550:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8011554:	33ff      	adds	r3, #255	@ 0xff
 8011556:	42ab      	cmp	r3, r5
 8011558:	f200 835e 	bhi.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801155c:	6862      	ldr	r2, [r4, #4]
 801155e:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8011562:	33ff      	adds	r3, #255	@ 0xff
 8011564:	4283      	cmp	r3, r0
 8011566:	f200 8357 	bhi.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801156a:	69a1      	ldr	r1, [r4, #24]
 801156c:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8011570:	33ff      	adds	r3, #255	@ 0xff
 8011572:	4283      	cmp	r3, r0
 8011574:	f200 8350 	bhi.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011578:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801157a:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 801157e:	30ff      	adds	r0, #255	@ 0xff
 8011580:	42a8      	cmp	r0, r5
 8011582:	f200 8349 	bhi.w	8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011586:	428a      	cmp	r2, r1
 8011588:	f280 8110 	bge.w	80117ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 801158c:	429a      	cmp	r2, r3
 801158e:	f300 8119 	bgt.w	80117c4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011592:	4299      	cmp	r1, r3
 8011594:	f280 811d 	bge.w	80117d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8011598:	2502      	movs	r5, #2
 801159a:	2701      	movs	r7, #1
 801159c:	46a9      	mov	r9, r5
 801159e:	46b8      	mov	r8, r7
 80115a0:	f04f 0a00 	mov.w	sl, #0
 80115a4:	4621      	mov	r1, r4
 80115a6:	a849      	add	r0, sp, #292	@ 0x124
 80115a8:	f003 fcaa 	bl	8014f00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80115ac:	4622      	mov	r2, r4
 80115ae:	4653      	mov	r3, sl
 80115b0:	a949      	add	r1, sp, #292	@ 0x124
 80115b2:	f8cd 9000 	str.w	r9, [sp]
 80115b6:	a819      	add	r0, sp, #100	@ 0x64
 80115b8:	f003 fdd2 	bl	8015160 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80115bc:	4622      	mov	r2, r4
 80115be:	4653      	mov	r3, sl
 80115c0:	a949      	add	r1, sp, #292	@ 0x124
 80115c2:	f8cd 8000 	str.w	r8, [sp]
 80115c6:	a829      	add	r0, sp, #164	@ 0xa4
 80115c8:	f003 fdca 	bl	8015160 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80115cc:	4643      	mov	r3, r8
 80115ce:	4622      	mov	r2, r4
 80115d0:	a949      	add	r1, sp, #292	@ 0x124
 80115d2:	f8cd 9000 	str.w	r9, [sp]
 80115d6:	a839      	add	r0, sp, #228	@ 0xe4
 80115d8:	f003 fdc2 	bl	8015160 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80115dc:	42af      	cmp	r7, r5
 80115de:	af12      	add	r7, sp, #72	@ 0x48
 80115e0:	bfb7      	itett	lt
 80115e2:	2300      	movlt	r3, #0
 80115e4:	2301      	movge	r3, #1
 80115e6:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80115e8:	ac19      	addlt	r4, sp, #100	@ 0x64
 80115ea:	bfb1      	iteee	lt
 80115ec:	930e      	strlt	r3, [sp, #56]	@ 0x38
 80115ee:	ad19      	addge	r5, sp, #100	@ 0x64
 80115f0:	930e      	strge	r3, [sp, #56]	@ 0x38
 80115f2:	ac29      	addge	r4, sp, #164	@ 0xa4
 80115f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80115f6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80115fa:	e887 0003 	stmia.w	r7, {r0, r1}
 80115fe:	b928      	cbnz	r0, 801160c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011600:	4b80      	ldr	r3, [pc, #512]	@ (8011804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011602:	6818      	ldr	r0, [r3, #0]
 8011604:	6803      	ldr	r3, [r0, #0]
 8011606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011608:	4798      	blx	r3
 801160a:	6038      	str	r0, [r7, #0]
 801160c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801160e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011612:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011616:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8011618:	930c      	str	r3, [sp, #48]	@ 0x30
 801161a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801161c:	6963      	ldr	r3, [r4, #20]
 801161e:	440b      	add	r3, r1
 8011620:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011624:	4408      	add	r0, r1
 8011626:	b200      	sxth	r0, r0
 8011628:	4283      	cmp	r3, r0
 801162a:	900d      	str	r0, [sp, #52]	@ 0x34
 801162c:	f280 80dd 	bge.w	80117ea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8011630:	428b      	cmp	r3, r1
 8011632:	da08      	bge.n	8011646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011634:	2a00      	cmp	r2, #0
 8011636:	dd06      	ble.n	8011646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011638:	1acb      	subs	r3, r1, r3
 801163a:	429a      	cmp	r2, r3
 801163c:	f2c0 80e4 	blt.w	8011808 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8011640:	2b00      	cmp	r3, #0
 8011642:	f300 80e2 	bgt.w	801180a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8011646:	6967      	ldr	r7, [r4, #20]
 8011648:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801164c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801164e:	443b      	add	r3, r7
 8011650:	461f      	mov	r7, r3
 8011652:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011654:	1bdf      	subs	r7, r3, r7
 8011656:	4297      	cmp	r7, r2
 8011658:	bfa8      	it	ge
 801165a:	4617      	movge	r7, r2
 801165c:	2f00      	cmp	r7, #0
 801165e:	f340 8166 	ble.w	801192e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8011662:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011664:	6829      	ldr	r1, [r5, #0]
 8011666:	f9b3 2000 	ldrsh.w	r2, [r3]
 801166a:	f9bb 3000 	ldrsh.w	r3, [fp]
 801166e:	4411      	add	r1, r2
 8011670:	6820      	ldr	r0, [r4, #0]
 8011672:	4299      	cmp	r1, r3
 8011674:	dd1a      	ble.n	80116ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011676:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801167a:	4402      	add	r2, r0
 801167c:	440b      	add	r3, r1
 801167e:	b21b      	sxth	r3, r3
 8011680:	429a      	cmp	r2, r3
 8011682:	dc13      	bgt.n	80116ac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011684:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011686:	a912      	add	r1, sp, #72	@ 0x48
 8011688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801168a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	9206      	str	r2, [sp, #24]
 8011690:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011692:	9500      	str	r5, [sp, #0]
 8011694:	9205      	str	r2, [sp, #20]
 8011696:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011698:	e9cd b203 	strd	fp, r2, [sp, #12]
 801169c:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 801169e:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80116a2:	aa49      	add	r2, sp, #292	@ 0x124
 80116a4:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80116a8:	4623      	mov	r3, r4
 80116aa:	47c8      	blx	r9
 80116ac:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80116b0:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80116b4:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80116b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80116bc:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80116c0:	68a1      	ldr	r1, [r4, #8]
 80116c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80116c6:	ed94 6a08 	vldr	s12, [r4, #32]
 80116ca:	edd4 6a07 	vldr	s13, [r4, #28]
 80116ce:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80116d2:	ee76 6a86 	vadd.f32	s13, s13, s12
 80116d6:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80116da:	e9d4 2300 	ldrd	r2, r3, [r4]
 80116de:	edc4 6a07 	vstr	s13, [r4, #28]
 80116e2:	441a      	add	r2, r3
 80116e4:	6963      	ldr	r3, [r4, #20]
 80116e6:	3301      	adds	r3, #1
 80116e8:	6022      	str	r2, [r4, #0]
 80116ea:	6163      	str	r3, [r4, #20]
 80116ec:	69a3      	ldr	r3, [r4, #24]
 80116ee:	3b01      	subs	r3, #1
 80116f0:	61a3      	str	r3, [r4, #24]
 80116f2:	6923      	ldr	r3, [r4, #16]
 80116f4:	440b      	add	r3, r1
 80116f6:	68e1      	ldr	r1, [r4, #12]
 80116f8:	428b      	cmp	r3, r1
 80116fa:	6123      	str	r3, [r4, #16]
 80116fc:	db15      	blt.n	801172a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 80116fe:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011702:	3201      	adds	r2, #1
 8011704:	1a5b      	subs	r3, r3, r1
 8011706:	ee76 6a26 	vadd.f32	s13, s12, s13
 801170a:	6022      	str	r2, [r4, #0]
 801170c:	6123      	str	r3, [r4, #16]
 801170e:	edc4 6a07 	vstr	s13, [r4, #28]
 8011712:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011716:	ee36 7a87 	vadd.f32	s14, s13, s14
 801171a:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801171e:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011726:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801172a:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 801172e:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011732:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011736:	ee37 7a27 	vadd.f32	s14, s14, s15
 801173a:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 801173e:	68a9      	ldr	r1, [r5, #8]
 8011740:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011744:	ed95 6a08 	vldr	s12, [r5, #32]
 8011748:	edd5 6a07 	vldr	s13, [r5, #28]
 801174c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011750:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011754:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011758:	e9d5 2300 	ldrd	r2, r3, [r5]
 801175c:	edc5 6a07 	vstr	s13, [r5, #28]
 8011760:	441a      	add	r2, r3
 8011762:	696b      	ldr	r3, [r5, #20]
 8011764:	3301      	adds	r3, #1
 8011766:	602a      	str	r2, [r5, #0]
 8011768:	616b      	str	r3, [r5, #20]
 801176a:	69ab      	ldr	r3, [r5, #24]
 801176c:	3b01      	subs	r3, #1
 801176e:	61ab      	str	r3, [r5, #24]
 8011770:	692b      	ldr	r3, [r5, #16]
 8011772:	440b      	add	r3, r1
 8011774:	68e9      	ldr	r1, [r5, #12]
 8011776:	428b      	cmp	r3, r1
 8011778:	612b      	str	r3, [r5, #16]
 801177a:	db15      	blt.n	80117a8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 801177c:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011780:	3201      	adds	r2, #1
 8011782:	1a5b      	subs	r3, r3, r1
 8011784:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011788:	602a      	str	r2, [r5, #0]
 801178a:	612b      	str	r3, [r5, #16]
 801178c:	edc5 6a07 	vstr	s13, [r5, #28]
 8011790:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011794:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011798:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 801179c:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80117a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80117a4:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80117a8:	3f01      	subs	r7, #1
 80117aa:	e757      	b.n	801165c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80117ac:	4299      	cmp	r1, r3
 80117ae:	dc13      	bgt.n	80117d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80117b0:	429a      	cmp	r2, r3
 80117b2:	da14      	bge.n	80117de <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80117b4:	2502      	movs	r5, #2
 80117b6:	2703      	movs	r7, #3
 80117b8:	f04f 0800 	mov.w	r8, #0
 80117bc:	46a9      	mov	r9, r5
 80117be:	f04f 0a01 	mov.w	sl, #1
 80117c2:	e6ef      	b.n	80115a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80117c4:	2501      	movs	r5, #1
 80117c6:	2700      	movs	r7, #0
 80117c8:	46a9      	mov	r9, r5
 80117ca:	46b8      	mov	r8, r7
 80117cc:	f04f 0a02 	mov.w	sl, #2
 80117d0:	e6e8      	b.n	80115a4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80117d2:	2501      	movs	r5, #1
 80117d4:	2702      	movs	r7, #2
 80117d6:	e6e1      	b.n	801159c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80117d8:	2500      	movs	r5, #0
 80117da:	2701      	movs	r7, #1
 80117dc:	e7f4      	b.n	80117c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80117de:	2702      	movs	r7, #2
 80117e0:	2503      	movs	r5, #3
 80117e2:	f04f 0900 	mov.w	r9, #0
 80117e6:	46b8      	mov	r8, r7
 80117e8:	e7e9      	b.n	80117be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80117ea:	4613      	mov	r3, r2
 80117ec:	e728      	b.n	8011640 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 80117ee:	bf00      	nop
 80117f0:	2402526c 	.word	0x2402526c
 80117f4:	fffd8f01 	.word	0xfffd8f01
 80117f8:	00027100 	.word	0x00027100
 80117fc:	0004e1ff 	.word	0x0004e1ff
 8011800:	0004e1fe 	.word	0x0004e1fe
 8011804:	24025274 	.word	0x24025274
 8011808:	4613      	mov	r3, r2
 801180a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 801180c:	469e      	mov	lr, r3
 801180e:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011810:	469c      	mov	ip, r3
 8011812:	9111      	str	r1, [sp, #68]	@ 0x44
 8011814:	f04f 0900 	mov.w	r9, #0
 8011818:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 801181c:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8011820:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011824:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011828:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 801182c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011830:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8011834:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8011838:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 801183c:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8011840:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8011844:	f1bc 0f00 	cmp.w	ip, #0
 8011848:	d147      	bne.n	80118da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 801184a:	eb03 0c07 	add.w	ip, r3, r7
 801184e:	1ad7      	subs	r7, r2, r3
 8011850:	f1b9 0f00 	cmp.w	r9, #0
 8011854:	d009      	beq.n	801186a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011856:	9029      	str	r0, [sp, #164]	@ 0xa4
 8011858:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 801185c:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8011860:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8011864:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011866:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 801186a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 801186c:	f04f 0800 	mov.w	r8, #0
 8011870:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011874:	9111      	str	r1, [sp, #68]	@ 0x44
 8011876:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 801187a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 801187e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011882:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011886:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 801188a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 801188e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011892:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011896:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 801189a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 801189e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80118a2:	f1be 0f00 	cmp.w	lr, #0
 80118a6:	d031      	beq.n	801190c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 80118a8:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80118aa:	4450      	add	r0, sl
 80118ac:	ee76 6aa4 	vadd.f32	s13, s13, s9
 80118b0:	4431      	add	r1, r6
 80118b2:	ee37 7a04 	vadd.f32	s14, s14, s8
 80118b6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 80118ba:	4549      	cmp	r1, r9
 80118bc:	db08      	blt.n	80118d0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 80118be:	ee77 7a85 	vadd.f32	s15, s15, s10
 80118c2:	3001      	adds	r0, #1
 80118c4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80118c8:	eba1 0109 	sub.w	r1, r1, r9
 80118cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 80118d0:	f10e 3eff 	add.w	lr, lr, #4294967295
 80118d4:	f04f 0801 	mov.w	r8, #1
 80118d8:	e7e3      	b.n	80118a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 80118da:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80118dc:	4450      	add	r0, sl
 80118de:	ee37 7a24 	vadd.f32	s14, s14, s9
 80118e2:	4431      	add	r1, r6
 80118e4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80118e8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 80118ec:	4541      	cmp	r1, r8
 80118ee:	db08      	blt.n	8011902 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 80118f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80118f4:	3001      	adds	r0, #1
 80118f6:	ee37 7a25 	vadd.f32	s14, s14, s11
 80118fa:	eba1 0108 	sub.w	r1, r1, r8
 80118fe:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011902:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011906:	f04f 0901 	mov.w	r9, #1
 801190a:	e79b      	b.n	8011844 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 801190c:	449c      	add	ip, r3
 801190e:	1aff      	subs	r7, r7, r3
 8011910:	f1b8 0f00 	cmp.w	r8, #0
 8011914:	d009      	beq.n	801192a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011916:	9019      	str	r0, [sp, #100]	@ 0x64
 8011918:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 801191c:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011920:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011924:	911d      	str	r1, [sp, #116]	@ 0x74
 8011926:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 801192a:	1ad2      	subs	r2, r2, r3
 801192c:	e68b      	b.n	8011646 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801192e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011930:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011932:	2b00      	cmp	r3, #0
 8011934:	f000 80d1 	beq.w	8011ada <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011938:	ad19      	add	r5, sp, #100	@ 0x64
 801193a:	ac39      	add	r4, sp, #228	@ 0xe4
 801193c:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 801193e:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011942:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011946:	930c      	str	r3, [sp, #48]	@ 0x30
 8011948:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801194a:	6963      	ldr	r3, [r4, #20]
 801194c:	440b      	add	r3, r1
 801194e:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011952:	4408      	add	r0, r1
 8011954:	b200      	sxth	r0, r0
 8011956:	4283      	cmp	r3, r0
 8011958:	900d      	str	r0, [sp, #52]	@ 0x34
 801195a:	f280 80c1 	bge.w	8011ae0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 801195e:	428b      	cmp	r3, r1
 8011960:	da08      	bge.n	8011974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011962:	2a00      	cmp	r2, #0
 8011964:	dd06      	ble.n	8011974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011966:	1acb      	subs	r3, r1, r3
 8011968:	429a      	cmp	r2, r3
 801196a:	f2c0 80bb 	blt.w	8011ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 801196e:	2b00      	cmp	r3, #0
 8011970:	f300 80b9 	bgt.w	8011ae6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011974:	6967      	ldr	r7, [r4, #20]
 8011976:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 801197a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801197c:	443b      	add	r3, r7
 801197e:	461f      	mov	r7, r3
 8011980:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011982:	1bdf      	subs	r7, r3, r7
 8011984:	4297      	cmp	r7, r2
 8011986:	bfa8      	it	ge
 8011988:	4617      	movge	r7, r2
 801198a:	2f00      	cmp	r7, #0
 801198c:	f340 813c 	ble.w	8011c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011990:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011992:	6829      	ldr	r1, [r5, #0]
 8011994:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011998:	f9bb 3000 	ldrsh.w	r3, [fp]
 801199c:	4411      	add	r1, r2
 801199e:	6820      	ldr	r0, [r4, #0]
 80119a0:	4299      	cmp	r1, r3
 80119a2:	dd1a      	ble.n	80119da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80119a4:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80119a8:	4402      	add	r2, r0
 80119aa:	440b      	add	r3, r1
 80119ac:	b21b      	sxth	r3, r3
 80119ae:	429a      	cmp	r2, r3
 80119b0:	dc13      	bgt.n	80119da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80119b2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80119b4:	a912      	add	r1, sp, #72	@ 0x48
 80119b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80119b8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	9206      	str	r2, [sp, #24]
 80119be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80119c0:	9500      	str	r5, [sp, #0]
 80119c2:	9205      	str	r2, [sp, #20]
 80119c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80119c6:	e9cd b203 	strd	fp, r2, [sp, #12]
 80119ca:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80119cc:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80119d0:	aa49      	add	r2, sp, #292	@ 0x124
 80119d2:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80119d6:	4623      	mov	r3, r4
 80119d8:	47c8      	blx	r9
 80119da:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80119de:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80119e2:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80119e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119ea:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80119ee:	68a1      	ldr	r1, [r4, #8]
 80119f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119f4:	ed94 6a08 	vldr	s12, [r4, #32]
 80119f8:	edd4 6a07 	vldr	s13, [r4, #28]
 80119fc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011a00:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011a04:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011a08:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011a0c:	edc4 6a07 	vstr	s13, [r4, #28]
 8011a10:	441a      	add	r2, r3
 8011a12:	6963      	ldr	r3, [r4, #20]
 8011a14:	3301      	adds	r3, #1
 8011a16:	6022      	str	r2, [r4, #0]
 8011a18:	6163      	str	r3, [r4, #20]
 8011a1a:	69a3      	ldr	r3, [r4, #24]
 8011a1c:	3b01      	subs	r3, #1
 8011a1e:	61a3      	str	r3, [r4, #24]
 8011a20:	6923      	ldr	r3, [r4, #16]
 8011a22:	440b      	add	r3, r1
 8011a24:	68e1      	ldr	r1, [r4, #12]
 8011a26:	428b      	cmp	r3, r1
 8011a28:	6123      	str	r3, [r4, #16]
 8011a2a:	db15      	blt.n	8011a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011a2c:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011a30:	3201      	adds	r2, #1
 8011a32:	1a5b      	subs	r3, r3, r1
 8011a34:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011a38:	6022      	str	r2, [r4, #0]
 8011a3a:	6123      	str	r3, [r4, #16]
 8011a3c:	edc4 6a07 	vstr	s13, [r4, #28]
 8011a40:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011a44:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011a48:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011a4c:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011a50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a54:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011a58:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8011a5c:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011a60:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011a64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011a68:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8011a6c:	68a9      	ldr	r1, [r5, #8]
 8011a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011a72:	ed95 6a08 	vldr	s12, [r5, #32]
 8011a76:	edd5 6a07 	vldr	s13, [r5, #28]
 8011a7a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011a7e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011a82:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011a86:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a8a:	edc5 6a07 	vstr	s13, [r5, #28]
 8011a8e:	441a      	add	r2, r3
 8011a90:	696b      	ldr	r3, [r5, #20]
 8011a92:	3301      	adds	r3, #1
 8011a94:	602a      	str	r2, [r5, #0]
 8011a96:	616b      	str	r3, [r5, #20]
 8011a98:	69ab      	ldr	r3, [r5, #24]
 8011a9a:	3b01      	subs	r3, #1
 8011a9c:	61ab      	str	r3, [r5, #24]
 8011a9e:	692b      	ldr	r3, [r5, #16]
 8011aa0:	440b      	add	r3, r1
 8011aa2:	68e9      	ldr	r1, [r5, #12]
 8011aa4:	428b      	cmp	r3, r1
 8011aa6:	612b      	str	r3, [r5, #16]
 8011aa8:	db15      	blt.n	8011ad6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011aaa:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011aae:	3201      	adds	r2, #1
 8011ab0:	1a5b      	subs	r3, r3, r1
 8011ab2:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011ab6:	602a      	str	r2, [r5, #0]
 8011ab8:	612b      	str	r3, [r5, #16]
 8011aba:	edc5 6a07 	vstr	s13, [r5, #28]
 8011abe:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011ac2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011ac6:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011aca:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011ace:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ad2:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011ad6:	3f01      	subs	r7, #1
 8011ad8:	e757      	b.n	801198a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011ada:	ad39      	add	r5, sp, #228	@ 0xe4
 8011adc:	ac19      	add	r4, sp, #100	@ 0x64
 8011ade:	e72d      	b.n	801193c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011ae0:	4613      	mov	r3, r2
 8011ae2:	e744      	b.n	801196e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8011ae8:	469e      	mov	lr, r3
 8011aea:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8011aee:	461f      	mov	r7, r3
 8011af0:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8011af4:	f04f 0900 	mov.w	r9, #0
 8011af8:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8011afc:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8011b00:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8011b04:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8011b08:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8011b0c:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011b0e:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8011b12:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8011b16:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8011b1a:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8011b1e:	960e      	str	r6, [sp, #56]	@ 0x38
 8011b20:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8011b24:	2f00      	cmp	r7, #0
 8011b26:	d146      	bne.n	8011bb6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011b28:	449c      	add	ip, r3
 8011b2a:	1ad7      	subs	r7, r2, r3
 8011b2c:	f1b9 0f00 	cmp.w	r9, #0
 8011b30:	d009      	beq.n	8011b46 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011b32:	9039      	str	r0, [sp, #228]	@ 0xe4
 8011b34:	913d      	str	r1, [sp, #244]	@ 0xf4
 8011b36:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8011b3a:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8011b3e:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8011b42:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8011b46:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011b48:	f04f 0800 	mov.w	r8, #0
 8011b4c:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011b50:	910e      	str	r1, [sp, #56]	@ 0x38
 8011b52:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8011b56:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8011b5a:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011b5e:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011b62:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011b66:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8011b6a:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011b6e:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011b72:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011b76:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8011b7a:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8011b7e:	f1be 0f00 	cmp.w	lr, #0
 8011b82:	d030      	beq.n	8011be6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011b84:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011b86:	4450      	add	r0, sl
 8011b88:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011b8c:	4431      	add	r1, r6
 8011b8e:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011b92:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011b96:	4549      	cmp	r1, r9
 8011b98:	db08      	blt.n	8011bac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011b9a:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011b9e:	3001      	adds	r0, #1
 8011ba0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011ba4:	eba1 0109 	sub.w	r1, r1, r9
 8011ba8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011bac:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011bb0:	f04f 0801 	mov.w	r8, #1
 8011bb4:	e7e3      	b.n	8011b7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011bb6:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011bb8:	4450      	add	r0, sl
 8011bba:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011bbe:	4431      	add	r1, r6
 8011bc0:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011bc4:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011bc8:	4541      	cmp	r1, r8
 8011bca:	db08      	blt.n	8011bde <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011bcc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011bd0:	3001      	adds	r0, #1
 8011bd2:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011bd6:	eba1 0108 	sub.w	r1, r1, r8
 8011bda:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011bde:	3f01      	subs	r7, #1
 8011be0:	f04f 0901 	mov.w	r9, #1
 8011be4:	e79e      	b.n	8011b24 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011be6:	449c      	add	ip, r3
 8011be8:	1aff      	subs	r7, r7, r3
 8011bea:	f1b8 0f00 	cmp.w	r8, #0
 8011bee:	d009      	beq.n	8011c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011bf0:	9019      	str	r0, [sp, #100]	@ 0x64
 8011bf2:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011bf6:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011bfa:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011bfe:	911d      	str	r1, [sp, #116]	@ 0x74
 8011c00:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011c04:	1ad2      	subs	r2, r2, r3
 8011c06:	e6b5      	b.n	8011974 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011c08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011c0a:	681b      	ldr	r3, [r3, #0]
 8011c0c:	b923      	cbnz	r3, 8011c18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011c0e:	4b04      	ldr	r3, [pc, #16]	@ (8011c20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011c10:	6818      	ldr	r0, [r3, #0]
 8011c12:	6803      	ldr	r3, [r0, #0]
 8011c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c16:	4798      	blx	r3
 8011c18:	b05b      	add	sp, #364	@ 0x16c
 8011c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c1e:	bf00      	nop
 8011c20:	24025274 	.word	0x24025274

08011c24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011c24:	2b03      	cmp	r3, #3
 8011c26:	d818      	bhi.n	8011c5a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011c28:	e8df f003 	tbb	[pc, r3]
 8011c2c:	130d0602 	.word	0x130d0602
 8011c30:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011c34:	1850      	adds	r0, r2, r1
 8011c36:	4770      	bx	lr
 8011c38:	8803      	ldrh	r3, [r0, #0]
 8011c3a:	8880      	ldrh	r0, [r0, #4]
 8011c3c:	4418      	add	r0, r3
 8011c3e:	b200      	sxth	r0, r0
 8011c40:	1a80      	subs	r0, r0, r2
 8011c42:	3801      	subs	r0, #1
 8011c44:	4770      	bx	lr
 8011c46:	8803      	ldrh	r3, [r0, #0]
 8011c48:	8880      	ldrh	r0, [r0, #4]
 8011c4a:	4418      	add	r0, r3
 8011c4c:	b200      	sxth	r0, r0
 8011c4e:	1a40      	subs	r0, r0, r1
 8011c50:	e7f7      	b.n	8011c42 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011c52:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011c56:	4410      	add	r0, r2
 8011c58:	4770      	bx	lr
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	4770      	bx	lr

08011c5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011c5e:	2b03      	cmp	r3, #3
 8011c60:	d817      	bhi.n	8011c92 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011c62:	e8df f003 	tbb	[pc, r3]
 8011c66:	0602      	.short	0x0602
 8011c68:	1009      	.short	0x1009
 8011c6a:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011c6e:	1850      	adds	r0, r2, r1
 8011c70:	4770      	bx	lr
 8011c72:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011c76:	e7fa      	b.n	8011c6e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011c78:	8843      	ldrh	r3, [r0, #2]
 8011c7a:	88c0      	ldrh	r0, [r0, #6]
 8011c7c:	4418      	add	r0, r3
 8011c7e:	b200      	sxth	r0, r0
 8011c80:	1a80      	subs	r0, r0, r2
 8011c82:	3801      	subs	r0, #1
 8011c84:	4770      	bx	lr
 8011c86:	8843      	ldrh	r3, [r0, #2]
 8011c88:	88c0      	ldrh	r0, [r0, #6]
 8011c8a:	4418      	add	r0, r3
 8011c8c:	b200      	sxth	r0, r0
 8011c8e:	1a40      	subs	r0, r0, r1
 8011c90:	e7f7      	b.n	8011c82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011c92:	2000      	movs	r0, #0
 8011c94:	4770      	bx	lr
	...

08011c98 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011c98:	4b01      	ldr	r3, [pc, #4]	@ (8011ca0 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	601a      	str	r2, [r3, #0]
 8011c9e:	4770      	bx	lr
 8011ca0:	24025284 	.word	0x24025284

08011ca4 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	b1c8      	cbz	r0, 8011cdc <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011ca8:	0c02      	lsrs	r2, r0, #16
 8011caa:	0412      	lsls	r2, r2, #16
 8011cac:	b9a2      	cbnz	r2, 8011cd8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8011cae:	0403      	lsls	r3, r0, #16
 8011cb0:	2010      	movs	r0, #16
 8011cb2:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8011cb6:	bf04      	itt	eq
 8011cb8:	021b      	lsleq	r3, r3, #8
 8011cba:	3008      	addeq	r0, #8
 8011cbc:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8011cc0:	bf04      	itt	eq
 8011cc2:	011b      	lsleq	r3, r3, #4
 8011cc4:	3004      	addeq	r0, #4
 8011cc6:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8011cca:	bf04      	itt	eq
 8011ccc:	009b      	lsleq	r3, r3, #2
 8011cce:	3002      	addeq	r0, #2
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	db04      	blt.n	8011cde <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011cd4:	3001      	adds	r0, #1
 8011cd6:	4770      	bx	lr
 8011cd8:	2000      	movs	r0, #0
 8011cda:	e7ea      	b.n	8011cb2 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011cdc:	2020      	movs	r0, #32
 8011cde:	4770      	bx	lr

08011ce0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011ce0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ce4:	b087      	sub	sp, #28
 8011ce6:	460d      	mov	r5, r1
 8011ce8:	4616      	mov	r6, r2
 8011cea:	4698      	mov	r8, r3
 8011cec:	4601      	mov	r1, r0
 8011cee:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8011cf2:	b120      	cbz	r0, 8011cfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011cf4:	b11a      	cbz	r2, 8011cfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011cf6:	2d1f      	cmp	r5, #31
 8011cf8:	d801      	bhi.n	8011cfe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011cfa:	2b1f      	cmp	r3, #31
 8011cfc:	d904      	bls.n	8011d08 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8011cfe:	2000      	movs	r0, #0
 8011d00:	6038      	str	r0, [r7, #0]
 8011d02:	b007      	add	sp, #28
 8011d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d08:	b97d      	cbnz	r5, 8011d2a <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8011d0a:	b143      	cbz	r3, 8011d1e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	462b      	mov	r3, r5
 8011d10:	4641      	mov	r1, r8
 8011d12:	4630      	mov	r0, r6
 8011d14:	e9cd 4700 	strd	r4, r7, [sp]
 8011d18:	f7ff ffe2 	bl	8011ce0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011d1c:	e7f1      	b.n	8011d02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d22:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011d26:	603b      	str	r3, [r7, #0]
 8011d28:	e7eb      	b.n	8011d02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011d2a:	fa32 fa05 	lsrs.w	sl, r2, r5
 8011d2e:	d106      	bne.n	8011d3e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8011d30:	4346      	muls	r6, r0
 8011d32:	fbb6 f0f4 	udiv	r0, r6, r4
 8011d36:	fb04 6610 	mls	r6, r4, r0, r6
 8011d3a:	603e      	str	r6, [r7, #0]
 8011d3c:	e7e1      	b.n	8011d02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011d3e:	2201      	movs	r2, #1
 8011d40:	fa00 fb05 	lsl.w	fp, r0, r5
 8011d44:	40aa      	lsls	r2, r5
 8011d46:	fbbb f9f4 	udiv	r9, fp, r4
 8011d4a:	3a01      	subs	r2, #1
 8011d4c:	fb0a f309 	mul.w	r3, sl, r9
 8011d50:	fb04 b919 	mls	r9, r4, r9, fp
 8011d54:	4016      	ands	r6, r2
 8011d56:	9303      	str	r3, [sp, #12]
 8011d58:	4630      	mov	r0, r6
 8011d5a:	f7ff ffa3 	bl	8011ca4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011d5e:	462b      	mov	r3, r5
 8011d60:	460a      	mov	r2, r1
 8011d62:	4601      	mov	r1, r0
 8011d64:	4630      	mov	r0, r6
 8011d66:	e9cd 4700 	strd	r4, r7, [sp]
 8011d6a:	f7ff ffb9 	bl	8011ce0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011d6e:	4606      	mov	r6, r0
 8011d70:	4648      	mov	r0, r9
 8011d72:	eb05 0108 	add.w	r1, r5, r8
 8011d76:	f7ff ff95 	bl	8011ca4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011d7a:	ab05      	add	r3, sp, #20
 8011d7c:	464a      	mov	r2, r9
 8011d7e:	e9cd 4300 	strd	r4, r3, [sp]
 8011d82:	4603      	mov	r3, r0
 8011d84:	4650      	mov	r0, sl
 8011d86:	f7ff ffab 	bl	8011ce0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011d8a:	6839      	ldr	r1, [r7, #0]
 8011d8c:	9a05      	ldr	r2, [sp, #20]
 8011d8e:	9b03      	ldr	r3, [sp, #12]
 8011d90:	4411      	add	r1, r2
 8011d92:	fbb1 f2f4 	udiv	r2, r1, r4
 8011d96:	18d3      	adds	r3, r2, r3
 8011d98:	fb04 1412 	mls	r4, r4, r2, r1
 8011d9c:	441e      	add	r6, r3
 8011d9e:	603c      	str	r4, [r7, #0]
 8011da0:	4430      	add	r0, r6
 8011da2:	e7ae      	b.n	8011d02 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08011da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8011da4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011da8:	b085      	sub	sp, #20
 8011daa:	f1b0 0900 	subs.w	r9, r0, #0
 8011dae:	461d      	mov	r5, r3
 8011db0:	4617      	mov	r7, r2
 8011db2:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8011db4:	bfbb      	ittet	lt
 8011db6:	f1c9 0900 	rsblt	r9, r9, #0
 8011dba:	f04f 36ff 	movlt.w	r6, #4294967295
 8011dbe:	2601      	movge	r6, #1
 8011dc0:	6823      	ldrlt	r3, [r4, #0]
 8011dc2:	bfbc      	itt	lt
 8011dc4:	425b      	neglt	r3, r3
 8011dc6:	6023      	strlt	r3, [r4, #0]
 8011dc8:	2a00      	cmp	r2, #0
 8011dca:	da04      	bge.n	8011dd6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8011dcc:	6823      	ldr	r3, [r4, #0]
 8011dce:	4257      	negs	r7, r2
 8011dd0:	4276      	negs	r6, r6
 8011dd2:	425b      	negs	r3, r3
 8011dd4:	6023      	str	r3, [r4, #0]
 8011dd6:	2d00      	cmp	r5, #0
 8011dd8:	4638      	mov	r0, r7
 8011dda:	bfba      	itte	lt
 8011ddc:	426d      	neglt	r5, r5
 8011dde:	f04f 38ff 	movlt.w	r8, #4294967295
 8011de2:	f04f 0801 	movge.w	r8, #1
 8011de6:	f7ff ff5d 	bl	8011ca4 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011dea:	ab03      	add	r3, sp, #12
 8011dec:	463a      	mov	r2, r7
 8011dee:	e9cd 5300 	strd	r5, r3, [sp]
 8011df2:	4603      	mov	r3, r0
 8011df4:	4648      	mov	r0, r9
 8011df6:	f7ff ff73 	bl	8011ce0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011dfa:	6823      	ldr	r3, [r4, #0]
 8011dfc:	9a03      	ldr	r2, [sp, #12]
 8011dfe:	4546      	cmp	r6, r8
 8011e00:	441a      	add	r2, r3
 8011e02:	fb92 f3f5 	sdiv	r3, r2, r5
 8011e06:	4418      	add	r0, r3
 8011e08:	fb05 2313 	mls	r3, r5, r3, r2
 8011e0c:	bf18      	it	ne
 8011e0e:	4240      	negne	r0, r0
 8011e10:	1c72      	adds	r2, r6, #1
 8011e12:	6023      	str	r3, [r4, #0]
 8011e14:	d105      	bne.n	8011e22 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	f1c3 0200 	rsb	r2, r3, #0
 8011e1c:	db0b      	blt.n	8011e36 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8011e1e:	6022      	str	r2, [r4, #0]
 8011e20:	e006      	b.n	8011e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011e22:	2e01      	cmp	r6, #1
 8011e24:	d104      	bne.n	8011e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	da02      	bge.n	8011e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8011e2a:	442b      	add	r3, r5
 8011e2c:	3801      	subs	r0, #1
 8011e2e:	6023      	str	r3, [r4, #0]
 8011e30:	b005      	add	sp, #20
 8011e32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011e36:	3801      	subs	r0, #1
 8011e38:	1b52      	subs	r2, r2, r5
 8011e3a:	e7f0      	b.n	8011e1e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08011e3c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8011e3c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8011e40:	4c1c      	ldr	r4, [pc, #112]	@ (8011eb4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8011e42:	4605      	mov	r5, r0
 8011e44:	6807      	ldr	r7, [r0, #0]
 8011e46:	69a3      	ldr	r3, [r4, #24]
 8011e48:	b92b      	cbnz	r3, 8011e56 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8011e4a:	6840      	ldr	r0, [r0, #4]
 8011e4c:	e9c5 7000 	strd	r7, r0, [r5]
 8011e50:	b004      	add	sp, #16
 8011e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e56:	f04f 0802 	mov.w	r8, #2
 8011e5a:	68a2      	ldr	r2, [r4, #8]
 8011e5c:	ae04      	add	r6, sp, #16
 8011e5e:	6820      	ldr	r0, [r4, #0]
 8011e60:	fb93 f1f8 	sdiv	r1, r3, r8
 8011e64:	440a      	add	r2, r1
 8011e66:	69e1      	ldr	r1, [r4, #28]
 8011e68:	f846 2d04 	str.w	r2, [r6, #-4]!
 8011e6c:	463a      	mov	r2, r7
 8011e6e:	9600      	str	r6, [sp, #0]
 8011e70:	f7ff ff98 	bl	8011da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011e74:	69a3      	ldr	r3, [r4, #24]
 8011e76:	4607      	mov	r7, r0
 8011e78:	686a      	ldr	r2, [r5, #4]
 8011e7a:	6a21      	ldr	r1, [r4, #32]
 8011e7c:	9600      	str	r6, [sp, #0]
 8011e7e:	6860      	ldr	r0, [r4, #4]
 8011e80:	f7ff ff90 	bl	8011da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011e84:	69a3      	ldr	r3, [r4, #24]
 8011e86:	6962      	ldr	r2, [r4, #20]
 8011e88:	4407      	add	r7, r0
 8011e8a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8011e8c:	9600      	str	r6, [sp, #0]
 8011e8e:	68e0      	ldr	r0, [r4, #12]
 8011e90:	fb93 f8f8 	sdiv	r8, r3, r8
 8011e94:	4442      	add	r2, r8
 8011e96:	9203      	str	r2, [sp, #12]
 8011e98:	682a      	ldr	r2, [r5, #0]
 8011e9a:	f7ff ff83 	bl	8011da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011e9e:	4680      	mov	r8, r0
 8011ea0:	9600      	str	r6, [sp, #0]
 8011ea2:	69a3      	ldr	r3, [r4, #24]
 8011ea4:	686a      	ldr	r2, [r5, #4]
 8011ea6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8011ea8:	6920      	ldr	r0, [r4, #16]
 8011eaa:	f7ff ff7b 	bl	8011da4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8011eae:	4440      	add	r0, r8
 8011eb0:	e7cc      	b.n	8011e4c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8011eb2:	bf00      	nop
 8011eb4:	24025288 	.word	0x24025288

08011eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8011eb8:	4b07      	ldr	r3, [pc, #28]	@ (8011ed8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	2b01      	cmp	r3, #1
 8011ebe:	d109      	bne.n	8011ed4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8011ec0:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011ec4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011ec8:	8003      	strh	r3, [r0, #0]
 8011eca:	4b04      	ldr	r3, [pc, #16]	@ (8011edc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8011ecc:	881b      	ldrh	r3, [r3, #0]
 8011ece:	3b01      	subs	r3, #1
 8011ed0:	1a9b      	subs	r3, r3, r2
 8011ed2:	800b      	strh	r3, [r1, #0]
 8011ed4:	4770      	bx	lr
 8011ed6:	bf00      	nop
 8011ed8:	2402526c 	.word	0x2402526c
 8011edc:	24025268 	.word	0x24025268

08011ee0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8011ee0:	4b07      	ldr	r3, [pc, #28]	@ (8011f00 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8011ee2:	b510      	push	{r4, lr}
 8011ee4:	781b      	ldrb	r3, [r3, #0]
 8011ee6:	2b01      	cmp	r3, #1
 8011ee8:	d108      	bne.n	8011efc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8011eea:	4b06      	ldr	r3, [pc, #24]	@ (8011f04 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8011eec:	880c      	ldrh	r4, [r1, #0]
 8011eee:	881b      	ldrh	r3, [r3, #0]
 8011ef0:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011ef4:	3b01      	subs	r3, #1
 8011ef6:	1b1b      	subs	r3, r3, r4
 8011ef8:	8003      	strh	r3, [r0, #0]
 8011efa:	800a      	strh	r2, [r1, #0]
 8011efc:	bd10      	pop	{r4, pc}
 8011efe:	bf00      	nop
 8011f00:	2402526c 	.word	0x2402526c
 8011f04:	24025268 	.word	0x24025268

08011f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 8011f08:	4b0a      	ldr	r3, [pc, #40]	@ (8011f34 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 8011f0a:	b510      	push	{r4, lr}
 8011f0c:	781b      	ldrb	r3, [r3, #0]
 8011f0e:	2b01      	cmp	r3, #1
 8011f10:	d10e      	bne.n	8011f30 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8011f12:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8011f16:	8843      	ldrh	r3, [r0, #2]
 8011f18:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011f1c:	18ca      	adds	r2, r1, r3
 8011f1e:	4b06      	ldr	r3, [pc, #24]	@ (8011f38 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8011f20:	8044      	strh	r4, [r0, #2]
 8011f22:	881b      	ldrh	r3, [r3, #0]
 8011f24:	1a9b      	subs	r3, r3, r2
 8011f26:	8003      	strh	r3, [r0, #0]
 8011f28:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011f2c:	8081      	strh	r1, [r0, #4]
 8011f2e:	80c3      	strh	r3, [r0, #6]
 8011f30:	bd10      	pop	{r4, pc}
 8011f32:	bf00      	nop
 8011f34:	2402526c 	.word	0x2402526c
 8011f38:	24025268 	.word	0x24025268

08011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8011f3c:	4b08      	ldr	r3, [pc, #32]	@ (8011f60 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8011f3e:	781b      	ldrb	r3, [r3, #0]
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d10c      	bne.n	8011f5e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8011f44:	8803      	ldrh	r3, [r0, #0]
 8011f46:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8011f4a:	8842      	ldrh	r2, [r0, #2]
 8011f4c:	8002      	strh	r2, [r0, #0]
 8011f4e:	185a      	adds	r2, r3, r1
 8011f50:	4b04      	ldr	r3, [pc, #16]	@ (8011f64 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8011f52:	881b      	ldrh	r3, [r3, #0]
 8011f54:	1a9b      	subs	r3, r3, r2
 8011f56:	8043      	strh	r3, [r0, #2]
 8011f58:	88c3      	ldrh	r3, [r0, #6]
 8011f5a:	80c1      	strh	r1, [r0, #6]
 8011f5c:	8083      	strh	r3, [r0, #4]
 8011f5e:	4770      	bx	lr
 8011f60:	2402526c 	.word	0x2402526c
 8011f64:	24025268 	.word	0x24025268

08011f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8011f68:	4b07      	ldr	r3, [pc, #28]	@ (8011f88 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8011f6a:	b510      	push	{r4, lr}
 8011f6c:	781b      	ldrb	r3, [r3, #0]
 8011f6e:	2b01      	cmp	r3, #1
 8011f70:	d108      	bne.n	8011f84 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8011f72:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011f76:	f9b0 4000 	ldrsh.w	r4, [r0]
 8011f7a:	8003      	strh	r3, [r0, #0]
 8011f7c:	8893      	ldrh	r3, [r2, #4]
 8011f7e:	3b01      	subs	r3, #1
 8011f80:	1b1b      	subs	r3, r3, r4
 8011f82:	800b      	strh	r3, [r1, #0]
 8011f84:	bd10      	pop	{r4, pc}
 8011f86:	bf00      	nop
 8011f88:	2402526c 	.word	0x2402526c

08011f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8011f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8011fbc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	2b01      	cmp	r3, #1
 8011f92:	d111      	bne.n	8011fb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8011f94:	680b      	ldr	r3, [r1, #0]
 8011f96:	ed90 7a00 	vldr	s14, [r0]
 8011f9a:	6003      	str	r3, [r0, #0]
 8011f9c:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8011fa0:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8011fc0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8011fa4:	ee07 3a90 	vmov	s15, r3
 8011fa8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8011fac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8011fb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011fb4:	edc1 7a00 	vstr	s15, [r1]
 8011fb8:	4770      	bx	lr
 8011fba:	bf00      	nop
 8011fbc:	2402526c 	.word	0x2402526c
 8011fc0:	38d1b717 	.word	0x38d1b717

08011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8011fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8011ff0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8011fc6:	460a      	mov	r2, r1
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	781b      	ldrb	r3, [r3, #0]
 8011fcc:	2b01      	cmp	r3, #1
 8011fce:	d10d      	bne.n	8011fec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8011fd0:	8881      	ldrh	r1, [r0, #4]
 8011fd2:	8803      	ldrh	r3, [r0, #0]
 8011fd4:	440b      	add	r3, r1
 8011fd6:	4601      	mov	r1, r0
 8011fd8:	3b01      	subs	r3, #1
 8011fda:	f821 3b02 	strh.w	r3, [r1], #2
 8011fde:	f7ff ffc3 	bl	8011f68 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8011fe2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011fe6:	88c2      	ldrh	r2, [r0, #6]
 8011fe8:	80c3      	strh	r3, [r0, #6]
 8011fea:	8082      	strh	r2, [r0, #4]
 8011fec:	bd10      	pop	{r4, pc}
 8011fee:	bf00      	nop
 8011ff0:	2402526c 	.word	0x2402526c

08011ff4 <_ZN8touchgfx11Application13requestRedrawEv>:
 8011ff4:	4b06      	ldr	r3, [pc, #24]	@ (8012010 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8011ff6:	2100      	movs	r1, #0
 8011ff8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011ffc:	4b05      	ldr	r3, [pc, #20]	@ (8012014 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8011ffe:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 8012002:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012006:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 801200a:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801200e:	4770      	bx	lr
 8012010:	24025268 	.word	0x24025268
 8012014:	2402526a 	.word	0x2402526a

08012018 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012018:	4b03      	ldr	r3, [pc, #12]	@ (8012028 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801201a:	6818      	ldr	r0, [r3, #0]
 801201c:	b110      	cbz	r0, 8012024 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801201e:	6803      	ldr	r3, [r0, #0]
 8012020:	699b      	ldr	r3, [r3, #24]
 8012022:	4718      	bx	r3
 8012024:	4770      	bx	lr
 8012026:	bf00      	nop
 8012028:	240252b8 	.word	0x240252b8

0801202c <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801202c:	4770      	bx	lr
	...

08012030 <_ZN8touchgfx11Application4drawEv>:
 8012030:	4b09      	ldr	r3, [pc, #36]	@ (8012058 <_ZN8touchgfx11Application4drawEv+0x28>)
 8012032:	b507      	push	{r0, r1, r2, lr}
 8012034:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012038:	2100      	movs	r1, #0
 801203a:	4b08      	ldr	r3, [pc, #32]	@ (801205c <_ZN8touchgfx11Application4drawEv+0x2c>)
 801203c:	9100      	str	r1, [sp, #0]
 801203e:	4669      	mov	r1, sp
 8012040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012044:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012048:	f8ad 3006 	strh.w	r3, [sp, #6]
 801204c:	6803      	ldr	r3, [r0, #0]
 801204e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012050:	4798      	blx	r3
 8012052:	b003      	add	sp, #12
 8012054:	f85d fb04 	ldr.w	pc, [sp], #4
 8012058:	24025268 	.word	0x24025268
 801205c:	2402526a 	.word	0x2402526a

08012060 <_ZN8touchgfx11Application10invalidateEv>:
 8012060:	4b09      	ldr	r3, [pc, #36]	@ (8012088 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8012062:	b082      	sub	sp, #8
 8012064:	2100      	movs	r1, #0
 8012066:	f9b3 2000 	ldrsh.w	r2, [r3]
 801206a:	4b08      	ldr	r3, [pc, #32]	@ (801208c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 801206c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8012070:	aa02      	add	r2, sp, #8
 8012072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012076:	9100      	str	r1, [sp, #0]
 8012078:	f8ad 3006 	strh.w	r3, [sp, #6]
 801207c:	6803      	ldr	r3, [r0, #0]
 801207e:	e912 0006 	ldmdb	r2, {r1, r2}
 8012082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012084:	b002      	add	sp, #8
 8012086:	4718      	bx	r3
 8012088:	24025268 	.word	0x24025268
 801208c:	2402526a 	.word	0x2402526a

08012090 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8012090:	4b03      	ldr	r3, [pc, #12]	@ (80120a0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8012092:	6818      	ldr	r0, [r3, #0]
 8012094:	b110      	cbz	r0, 801209c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8012096:	6803      	ldr	r3, [r0, #0]
 8012098:	69db      	ldr	r3, [r3, #28]
 801209a:	4718      	bx	r3
 801209c:	4770      	bx	lr
 801209e:	bf00      	nop
 80120a0:	240252b8 	.word	0x240252b8

080120a4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80120a4:	4b03      	ldr	r3, [pc, #12]	@ (80120b4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80120a6:	6818      	ldr	r0, [r3, #0]
 80120a8:	b110      	cbz	r0, 80120b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80120aa:	6803      	ldr	r3, [r0, #0]
 80120ac:	6a1b      	ldr	r3, [r3, #32]
 80120ae:	4718      	bx	r3
 80120b0:	4770      	bx	lr
 80120b2:	bf00      	nop
 80120b4:	240252b8 	.word	0x240252b8

080120b8 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 80120b8:	2300      	movs	r3, #0
 80120ba:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 80120be:	4770      	bx	lr

080120c0 <_ZN8touchgfx11Application14handleKeyEventEh>:
 80120c0:	4b03      	ldr	r3, [pc, #12]	@ (80120d0 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 80120c2:	6818      	ldr	r0, [r3, #0]
 80120c4:	b110      	cbz	r0, 80120cc <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80120c6:	6803      	ldr	r3, [r0, #0]
 80120c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80120ca:	4718      	bx	r3
 80120cc:	4770      	bx	lr
 80120ce:	bf00      	nop
 80120d0:	240252b8 	.word	0x240252b8

080120d4 <_ZN8touchgfx11ApplicationD1Ev>:
 80120d4:	4770      	bx	lr

080120d6 <_ZN8touchgfx11ApplicationD0Ev>:
 80120d6:	b510      	push	{r4, lr}
 80120d8:	4604      	mov	r4, r0
 80120da:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80120de:	f00f fc84 	bl	80219ea <_ZdlPvj>
 80120e2:	4620      	mov	r0, r4
 80120e4:	bd10      	pop	{r4, pc}

080120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80120e6:	b510      	push	{r4, lr}
 80120e8:	f9b1 4000 	ldrsh.w	r4, [r1]
 80120ec:	888a      	ldrh	r2, [r1, #4]
 80120ee:	f9b0 3000 	ldrsh.w	r3, [r0]
 80120f2:	4422      	add	r2, r4
 80120f4:	b212      	sxth	r2, r2
 80120f6:	4293      	cmp	r3, r2
 80120f8:	da15      	bge.n	8012126 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80120fa:	8882      	ldrh	r2, [r0, #4]
 80120fc:	4413      	add	r3, r2
 80120fe:	b21b      	sxth	r3, r3
 8012100:	429c      	cmp	r4, r3
 8012102:	da10      	bge.n	8012126 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012104:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012108:	88c9      	ldrh	r1, [r1, #6]
 801210a:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801210e:	4419      	add	r1, r3
 8012110:	b209      	sxth	r1, r1
 8012112:	428a      	cmp	r2, r1
 8012114:	da07      	bge.n	8012126 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012116:	88c0      	ldrh	r0, [r0, #6]
 8012118:	4410      	add	r0, r2
 801211a:	b200      	sxth	r0, r0
 801211c:	4283      	cmp	r3, r0
 801211e:	bfac      	ite	ge
 8012120:	2000      	movge	r0, #0
 8012122:	2001      	movlt	r0, #1
 8012124:	bd10      	pop	{r4, pc}
 8012126:	2000      	movs	r0, #0
 8012128:	e7fc      	b.n	8012124 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

0801212a <_ZN8touchgfx4Rect10restrictToEss>:
 801212a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	b510      	push	{r4, lr}
 8012132:	da04      	bge.n	801213e <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012134:	8884      	ldrh	r4, [r0, #4]
 8012136:	4423      	add	r3, r4
 8012138:	8083      	strh	r3, [r0, #4]
 801213a:	2300      	movs	r3, #0
 801213c:	8003      	strh	r3, [r0, #0]
 801213e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8012142:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012146:	1b09      	subs	r1, r1, r4
 8012148:	428b      	cmp	r3, r1
 801214a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801214e:	bfc8      	it	gt
 8012150:	8081      	strhgt	r1, [r0, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	da04      	bge.n	8012160 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8012156:	88c1      	ldrh	r1, [r0, #6]
 8012158:	440b      	add	r3, r1
 801215a:	80c3      	strh	r3, [r0, #6]
 801215c:	2300      	movs	r3, #0
 801215e:	8043      	strh	r3, [r0, #2]
 8012160:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012164:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8012168:	1a52      	subs	r2, r2, r1
 801216a:	4293      	cmp	r3, r2
 801216c:	bfc8      	it	gt
 801216e:	80c2      	strhgt	r2, [r0, #6]
 8012170:	bd10      	pop	{r4, pc}
	...

08012174 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8012174:	4b10      	ldr	r3, [pc, #64]	@ (80121b8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8012176:	b510      	push	{r4, lr}
 8012178:	460c      	mov	r4, r1
 801217a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801217e:	4b0f      	ldr	r3, [pc, #60]	@ (80121bc <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8012180:	4620      	mov	r0, r4
 8012182:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012186:	f7ff ffd0 	bl	801212a <_ZN8touchgfx4Rect10restrictToEss>
 801218a:	4b0d      	ldr	r3, [pc, #52]	@ (80121c0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 801218c:	6818      	ldr	r0, [r3, #0]
 801218e:	b190      	cbz	r0, 80121b6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8012190:	6803      	ldr	r3, [r0, #0]
 8012192:	4621      	mov	r1, r4
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	4798      	blx	r3
 8012198:	4b0a      	ldr	r3, [pc, #40]	@ (80121c4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 801219a:	6818      	ldr	r0, [r3, #0]
 801219c:	b118      	cbz	r0, 80121a6 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 801219e:	6803      	ldr	r3, [r0, #0]
 80121a0:	4621      	mov	r1, r4
 80121a2:	689b      	ldr	r3, [r3, #8]
 80121a4:	4798      	blx	r3
 80121a6:	4b08      	ldr	r3, [pc, #32]	@ (80121c8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80121a8:	4621      	mov	r1, r4
 80121aa:	6818      	ldr	r0, [r3, #0]
 80121ac:	6803      	ldr	r3, [r0, #0]
 80121ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80121b2:	69db      	ldr	r3, [r3, #28]
 80121b4:	4718      	bx	r3
 80121b6:	bd10      	pop	{r4, pc}
 80121b8:	2402526a 	.word	0x2402526a
 80121bc:	24025268 	.word	0x24025268
 80121c0:	240252b8 	.word	0x240252b8
 80121c4:	240252b4 	.word	0x240252b4
 80121c8:	24025274 	.word	0x24025274

080121cc <_ZNK8touchgfx4Rect8includesERKS0_>:
 80121cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80121ce:	4606      	mov	r6, r0
 80121d0:	4608      	mov	r0, r1
 80121d2:	460f      	mov	r7, r1
 80121d4:	f7fb fbd5 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80121d8:	b9e8      	cbnz	r0, 8012216 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80121da:	f9b7 5000 	ldrsh.w	r5, [r7]
 80121de:	f9b6 4000 	ldrsh.w	r4, [r6]
 80121e2:	42a5      	cmp	r5, r4
 80121e4:	db17      	blt.n	8012216 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80121e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80121ea:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	db11      	blt.n	8012216 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 80121f2:	88b9      	ldrh	r1, [r7, #4]
 80121f4:	440d      	add	r5, r1
 80121f6:	88b1      	ldrh	r1, [r6, #4]
 80121f8:	440c      	add	r4, r1
 80121fa:	b22d      	sxth	r5, r5
 80121fc:	b224      	sxth	r4, r4
 80121fe:	42a5      	cmp	r5, r4
 8012200:	dc09      	bgt.n	8012216 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012202:	88f8      	ldrh	r0, [r7, #6]
 8012204:	4410      	add	r0, r2
 8012206:	88f2      	ldrh	r2, [r6, #6]
 8012208:	4413      	add	r3, r2
 801220a:	b200      	sxth	r0, r0
 801220c:	b21b      	sxth	r3, r3
 801220e:	4298      	cmp	r0, r3
 8012210:	bfcc      	ite	gt
 8012212:	2000      	movgt	r0, #0
 8012214:	2001      	movle	r0, #1
 8012216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801221a:	4604      	mov	r4, r0
 801221c:	4608      	mov	r0, r1
 801221e:	460d      	mov	r5, r1
 8012220:	f7fb fbaf 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012224:	b978      	cbnz	r0, 8012246 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012226:	4620      	mov	r0, r4
 8012228:	f7fb fbab 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 801222c:	f9b5 6000 	ldrsh.w	r6, [r5]
 8012230:	b150      	cbz	r0, 8012248 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8012232:	8026      	strh	r6, [r4, #0]
 8012234:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012238:	8063      	strh	r3, [r4, #2]
 801223a:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801223e:	80a3      	strh	r3, [r4, #4]
 8012240:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8012244:	80e3      	strh	r3, [r4, #6]
 8012246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012248:	f9b4 1000 	ldrsh.w	r1, [r4]
 801224c:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8012250:	42b1      	cmp	r1, r6
 8012252:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8012256:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 801225a:	460f      	mov	r7, r1
 801225c:	88ed      	ldrh	r5, [r5, #6]
 801225e:	bfa8      	it	ge
 8012260:	4637      	movge	r7, r6
 8012262:	4293      	cmp	r3, r2
 8012264:	4618      	mov	r0, r3
 8012266:	4466      	add	r6, ip
 8012268:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801226c:	bfa8      	it	ge
 801226e:	4610      	movge	r0, r2
 8012270:	442a      	add	r2, r5
 8012272:	88e5      	ldrh	r5, [r4, #6]
 8012274:	4461      	add	r1, ip
 8012276:	b236      	sxth	r6, r6
 8012278:	8027      	strh	r7, [r4, #0]
 801227a:	442b      	add	r3, r5
 801227c:	b209      	sxth	r1, r1
 801227e:	b212      	sxth	r2, r2
 8012280:	8060      	strh	r0, [r4, #2]
 8012282:	b21b      	sxth	r3, r3
 8012284:	428e      	cmp	r6, r1
 8012286:	bfac      	ite	ge
 8012288:	ebc7 0106 	rsbge	r1, r7, r6
 801228c:	ebc7 0101 	rsblt	r1, r7, r1
 8012290:	429a      	cmp	r2, r3
 8012292:	bfac      	ite	ge
 8012294:	ebc0 0202 	rsbge	r2, r0, r2
 8012298:	ebc0 0203 	rsblt	r2, r0, r3
 801229c:	80a1      	strh	r1, [r4, #4]
 801229e:	80e2      	strh	r2, [r4, #6]
 80122a0:	e7d1      	b.n	8012246 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080122a4 <_ZN8touchgfx11Application11getInstanceEv>:
 80122a4:	4b01      	ldr	r3, [pc, #4]	@ (80122ac <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80122a6:	6818      	ldr	r0, [r3, #0]
 80122a8:	4770      	bx	lr
 80122aa:	bf00      	nop
 80122ac:	240252c8 	.word	0x240252c8

080122b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80122b0:	2300      	movs	r3, #0
 80122b2:	b510      	push	{r4, lr}
 80122b4:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 80122b8:	4604      	mov	r4, r0
 80122ba:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80122be:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80122c2:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80122c6:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 80122ca:	429a      	cmp	r2, r3
 80122cc:	d90e      	bls.n	80122ec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 80122ce:	18e2      	adds	r2, r4, r3
 80122d0:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 80122d4:	b122      	cbz	r2, 80122e0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 80122d6:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 80122da:	6803      	ldr	r3, [r0, #0]
 80122dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80122de:	4798      	blx	r3
 80122e0:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 80122e4:	3301      	adds	r3, #1
 80122e6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80122ea:	e7ea      	b.n	80122c2 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 80122ec:	bd10      	pop	{r4, pc}

080122ee <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE>:
 80122ee:	b530      	push	{r4, r5, lr}
 80122f0:	2200      	movs	r2, #0
 80122f2:	f8b0 5080 	ldrh.w	r5, [r0, #128]	@ 0x80
 80122f6:	b293      	uxth	r3, r2
 80122f8:	429d      	cmp	r5, r3
 80122fa:	d90e      	bls.n	801231a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 80122fc:	f850 3022 	ldr.w	r3, [r0, r2, lsl #2]
 8012300:	428b      	cmp	r3, r1
 8012302:	d10b      	bne.n	801231c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 8012304:	1884      	adds	r4, r0, r2
 8012306:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
 801230a:	b13b      	cbz	r3, 801231c <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2e>
 801230c:	3b01      	subs	r3, #1
 801230e:	b2db      	uxtb	r3, r3
 8012310:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
 8012314:	b90b      	cbnz	r3, 801231a <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x2c>
 8012316:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 801231a:	bd30      	pop	{r4, r5, pc}
 801231c:	3201      	adds	r2, #1
 801231e:	e7ea      	b.n	80122f6 <_ZN8touchgfx11Application12TimerWidgets6removeEPKNS_8DrawableE+0x8>

08012320 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8012320:	2300      	movs	r3, #0
 8012322:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8012326:	30a4      	adds	r0, #164	@ 0xa4
 8012328:	f820 3c24 	strh.w	r3, [r0, #-36]
 801232c:	f802 3b01 	strb.w	r3, [r2], #1
 8012330:	4282      	cmp	r2, r0
 8012332:	d1fb      	bne.n	801232c <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8012334:	4770      	bx	lr
	...

08012338 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012338:	b570      	push	{r4, r5, r6, lr}
 801233a:	4c0b      	ldr	r4, [pc, #44]	@ (8012368 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 801233c:	4605      	mov	r5, r0
 801233e:	460e      	mov	r6, r1
 8012340:	6820      	ldr	r0, [r4, #0]
 8012342:	b110      	cbz	r0, 801234a <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8012344:	6803      	ldr	r3, [r0, #0]
 8012346:	695b      	ldr	r3, [r3, #20]
 8012348:	4798      	blx	r3
 801234a:	1d28      	adds	r0, r5, #4
 801234c:	f7ff ffe8 	bl	8012320 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012350:	6026      	str	r6, [r4, #0]
 8012352:	6833      	ldr	r3, [r6, #0]
 8012354:	4630      	mov	r0, r6
 8012356:	68db      	ldr	r3, [r3, #12]
 8012358:	4798      	blx	r3
 801235a:	682b      	ldr	r3, [r5, #0]
 801235c:	4628      	mov	r0, r5
 801235e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012360:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012364:	4718      	bx	r3
 8012366:	bf00      	nop
 8012368:	240252b8 	.word	0x240252b8

0801236c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 801236c:	2300      	movs	r3, #0
 801236e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8012372:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8012376:	461a      	mov	r2, r3
 8012378:	b5f0      	push	{r4, r5, r6, r7, lr}
 801237a:	461c      	mov	r4, r3
 801237c:	461d      	mov	r5, r3
 801237e:	459c      	cmp	ip, r3
 8012380:	dd1a      	ble.n	80123b8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8012382:	18c6      	adds	r6, r0, r3
 8012384:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8012388:	b16e      	cbz	r6, 80123a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 801238a:	429a      	cmp	r2, r3
 801238c:	d008      	beq.n	80123a0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 801238e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8012392:	fa1f fe82 	uxth.w	lr, r2
 8012396:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 801239a:	1887      	adds	r7, r0, r2
 801239c:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80123a0:	3201      	adds	r2, #1
 80123a2:	3301      	adds	r3, #1
 80123a4:	e7eb      	b.n	801237e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80123a6:	4299      	cmp	r1, r3
 80123a8:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80123ac:	bfa8      	it	ge
 80123ae:	3501      	addge	r5, #1
 80123b0:	429e      	cmp	r6, r3
 80123b2:	bfc8      	it	gt
 80123b4:	3401      	addgt	r4, #1
 80123b6:	e7f4      	b.n	80123a2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80123b8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80123bc:	1b49      	subs	r1, r1, r5
 80123be:	1b1b      	subs	r3, r3, r4
 80123c0:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80123c4:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80123c8:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80123cc:	4293      	cmp	r3, r2
 80123ce:	dd03      	ble.n	80123d8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80123d0:	3b01      	subs	r3, #1
 80123d2:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80123d6:	e7f7      	b.n	80123c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80123d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080123dc <_ZN8touchgfx11Application15handleTickEventEv>:
 80123dc:	b570      	push	{r4, r5, r6, lr}
 80123de:	4d16      	ldr	r5, [pc, #88]	@ (8012438 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80123e0:	4604      	mov	r4, r0
 80123e2:	6828      	ldr	r0, [r5, #0]
 80123e4:	b140      	cbz	r0, 80123f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80123e6:	7a03      	ldrb	r3, [r0, #8]
 80123e8:	b933      	cbnz	r3, 80123f8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80123ea:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 80123ee:	6803      	ldr	r3, [r0, #0]
 80123f0:	689b      	ldr	r3, [r3, #8]
 80123f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123f6:	4718      	bx	r3
 80123f8:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 80123fc:	4e0f      	ldr	r6, [pc, #60]	@ (801243c <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 80123fe:	b973      	cbnz	r3, 801241e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012400:	b168      	cbz	r0, 801241e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012402:	7a03      	ldrb	r3, [r0, #8]
 8012404:	b15b      	cbz	r3, 801241e <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012406:	6830      	ldr	r0, [r6, #0]
 8012408:	b110      	cbz	r0, 8012410 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801240a:	6803      	ldr	r3, [r0, #0]
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	4798      	blx	r3
 8012410:	6828      	ldr	r0, [r5, #0]
 8012412:	6803      	ldr	r3, [r0, #0]
 8012414:	68db      	ldr	r3, [r3, #12]
 8012416:	4798      	blx	r3
 8012418:	2301      	movs	r3, #1
 801241a:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 801241e:	3404      	adds	r4, #4
 8012420:	4620      	mov	r0, r4
 8012422:	f7ff ff45 	bl	80122b0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8012426:	4620      	mov	r0, r4
 8012428:	f7ff ffa0 	bl	801236c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 801242c:	6830      	ldr	r0, [r6, #0]
 801242e:	b110      	cbz	r0, 8012436 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012430:	6803      	ldr	r3, [r0, #0]
 8012432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012434:	e7dd      	b.n	80123f2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8012436:	bd70      	pop	{r4, r5, r6, pc}
 8012438:	240252bc 	.word	0x240252bc
 801243c:	240252b8 	.word	0x240252b8

08012440 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE>:
 8012440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012442:	2300      	movs	r3, #0
 8012444:	4604      	mov	r4, r0
 8012446:	460d      	mov	r5, r1
 8012448:	f8b0 1080 	ldrh.w	r1, [r0, #128]	@ 0x80
 801244c:	4618      	mov	r0, r3
 801244e:	b29a      	uxth	r2, r3
 8012450:	4291      	cmp	r1, r2
 8012452:	d912      	bls.n	801247a <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x3a>
 8012454:	f854 7023 	ldr.w	r7, [r4, r3, lsl #2]
 8012458:	18e6      	adds	r6, r4, r3
 801245a:	42af      	cmp	r7, r5
 801245c:	f896 2084 	ldrb.w	r2, [r6, #132]	@ 0x84
 8012460:	d105      	bne.n	801246e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2e>
 8012462:	2aff      	cmp	r2, #255	@ 0xff
 8012464:	d002      	beq.n	801246c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 8012466:	3201      	adds	r2, #1
 8012468:	f886 2084 	strb.w	r2, [r6, #132]	@ 0x84
 801246c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801246e:	2a00      	cmp	r2, #0
 8012470:	f103 0301 	add.w	r3, r3, #1
 8012474:	bf08      	it	eq
 8012476:	2001      	moveq	r0, #1
 8012478:	e7e9      	b.n	801244e <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0xe>
 801247a:	b120      	cbz	r0, 8012486 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 801247c:	2920      	cmp	r1, #32
 801247e:	d102      	bne.n	8012486 <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x46>
 8012480:	4620      	mov	r0, r4
 8012482:	f7ff ff73 	bl	801236c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012486:	f8b4 3080 	ldrh.w	r3, [r4, #128]	@ 0x80
 801248a:	2b1f      	cmp	r3, #31
 801248c:	d8ee      	bhi.n	801246c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>
 801248e:	18e2      	adds	r2, r4, r3
 8012490:	2101      	movs	r1, #1
 8012492:	f882 1084 	strb.w	r1, [r2, #132]	@ 0x84
 8012496:	185a      	adds	r2, r3, r1
 8012498:	f8a4 2080 	strh.w	r2, [r4, #128]	@ 0x80
 801249c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80124a0:	e7e4      	b.n	801246c <_ZN8touchgfx11Application12TimerWidgets3addEPNS_8DrawableE+0x2c>

080124a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80124a2:	4603      	mov	r3, r0
 80124a4:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80124a8:	2200      	movs	r2, #0
 80124aa:	801a      	strh	r2, [r3, #0]
 80124ac:	3308      	adds	r3, #8
 80124ae:	f823 2c06 	strh.w	r2, [r3, #-6]
 80124b2:	f823 2c04 	strh.w	r2, [r3, #-4]
 80124b6:	f823 2c02 	strh.w	r2, [r3, #-2]
 80124ba:	428b      	cmp	r3, r1
 80124bc:	d1f5      	bne.n	80124aa <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80124be:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80124c2:	4770      	bx	lr

080124c4 <_ZN8touchgfx11ApplicationC1Ev>:
 80124c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124c6:	4b1d      	ldr	r3, [pc, #116]	@ (801253c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80124c8:	4606      	mov	r6, r0
 80124ca:	4604      	mov	r4, r0
 80124cc:	2500      	movs	r5, #0
 80124ce:	f846 3b04 	str.w	r3, [r6], #4
 80124d2:	22a8      	movs	r2, #168	@ 0xa8
 80124d4:	2100      	movs	r1, #0
 80124d6:	4630      	mov	r0, r6
 80124d8:	f010 f89a 	bl	8022610 <memset>
 80124dc:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80124e0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80124e4:	4f16      	ldr	r7, [pc, #88]	@ (8012540 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80124e6:	f7ff ffdc 	bl	80124a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80124ea:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80124ee:	f7ff ffd8 	bl	80124a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80124f2:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80124f6:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80124fa:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80124fe:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8012502:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8012506:	490f      	ldr	r1, [pc, #60]	@ (8012544 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8012508:	480f      	ldr	r0, [pc, #60]	@ (8012548 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801250a:	f00d f807 	bl	801f51c <CRC_Lock>
 801250e:	4b0f      	ldr	r3, [pc, #60]	@ (801254c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8012510:	b158      	cbz	r0, 801252a <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8012512:	801d      	strh	r5, [r3, #0]
 8012514:	2300      	movs	r3, #0
 8012516:	4a0e      	ldr	r2, [pc, #56]	@ (8012550 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8012518:	4630      	mov	r0, r6
 801251a:	6013      	str	r3, [r2, #0]
 801251c:	4a0d      	ldr	r2, [pc, #52]	@ (8012554 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 801251e:	603b      	str	r3, [r7, #0]
 8012520:	6013      	str	r3, [r2, #0]
 8012522:	f7ff fefd 	bl	8012320 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012526:	4620      	mov	r0, r4
 8012528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801252a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801252e:	2002      	movs	r0, #2
 8012530:	801a      	strh	r2, [r3, #0]
 8012532:	6038      	str	r0, [r7, #0]
 8012534:	f001 fe2a 	bl	801418c <_ZN8touchgfx6Screen4drawEv>
 8012538:	e7ec      	b.n	8012514 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801253a:	bf00      	nop
 801253c:	08025d1c 	.word	0x08025d1c
 8012540:	240252b8 	.word	0x240252b8
 8012544:	b5e8b5cd 	.word	0xb5e8b5cd
 8012548:	f407a5c2 	.word	0xf407a5c2
 801254c:	2400007c 	.word	0x2400007c
 8012550:	240252c8 	.word	0x240252c8
 8012554:	240252bc 	.word	0x240252bc

08012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012558:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 801255c:	3b01      	subs	r3, #1
 801255e:	b29b      	uxth	r3, r3
 8012560:	428b      	cmp	r3, r1
 8012562:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8012566:	b510      	push	{r4, lr}
 8012568:	d908      	bls.n	801257c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801256a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801256e:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8012572:	681a      	ldr	r2, [r3, #0]
 8012574:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012578:	685a      	ldr	r2, [r3, #4]
 801257a:	6062      	str	r2, [r4, #4]
 801257c:	bd10      	pop	{r4, pc}
	...

08012580 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012584:	b08f      	sub	sp, #60	@ 0x3c
 8012586:	4b8f      	ldr	r3, [pc, #572]	@ (80127c4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012588:	4683      	mov	fp, r0
 801258a:	ac0a      	add	r4, sp, #40	@ 0x28
 801258c:	e884 0006 	stmia.w	r4, {r1, r2}
 8012590:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012594:	4620      	mov	r0, r4
 8012596:	4b8c      	ldr	r3, [pc, #560]	@ (80127c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012598:	f9b3 1000 	ldrsh.w	r1, [r3]
 801259c:	f7ff fdc5 	bl	801212a <_ZN8touchgfx4Rect10restrictToEss>
 80125a0:	4620      	mov	r0, r4
 80125a2:	f7fb f9ee 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80125a6:	2800      	cmp	r0, #0
 80125a8:	d16a      	bne.n	8012680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80125aa:	9403      	str	r4, [sp, #12]
 80125ac:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80125b0:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80125b4:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80125b8:	9301      	str	r3, [sp, #4]
 80125ba:	35a4      	adds	r5, #164	@ 0xa4
 80125bc:	b15c      	cbz	r4, 80125d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80125be:	4629      	mov	r1, r5
 80125c0:	9803      	ldr	r0, [sp, #12]
 80125c2:	f7ff fe03 	bl	80121cc <_ZNK8touchgfx4Rect8includesERKS0_>
 80125c6:	3c01      	subs	r4, #1
 80125c8:	b118      	cbz	r0, 80125d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80125ca:	b2a1      	uxth	r1, r4
 80125cc:	9801      	ldr	r0, [sp, #4]
 80125ce:	f7ff ffc3 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80125d2:	3d08      	subs	r5, #8
 80125d4:	e7f2      	b.n	80125bc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80125d6:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80125da:	f10a 33ff 	add.w	r3, sl, #4294967295
 80125de:	f8cd a010 	str.w	sl, [sp, #16]
 80125e2:	9302      	str	r3, [sp, #8]
 80125e4:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80125e8:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80125ec:	9306      	str	r3, [sp, #24]
 80125ee:	445c      	add	r4, fp
 80125f0:	2500      	movs	r5, #0
 80125f2:	4626      	mov	r6, r4
 80125f4:	f8cd a014 	str.w	sl, [sp, #20]
 80125f8:	462f      	mov	r7, r5
 80125fa:	9b05      	ldr	r3, [sp, #20]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d073      	beq.n	80126e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8012600:	9903      	ldr	r1, [sp, #12]
 8012602:	4630      	mov	r0, r6
 8012604:	f7ff fd6f 	bl	80120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012608:	b350      	cbz	r0, 8012660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801260a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801260e:	f9b6 c000 	ldrsh.w	ip, [r6]
 8012612:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8012616:	45e6      	cmp	lr, ip
 8012618:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 801261c:	db33      	blt.n	8012686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 801261e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012622:	88b3      	ldrh	r3, [r6, #4]
 8012624:	4472      	add	r2, lr
 8012626:	4463      	add	r3, ip
 8012628:	b212      	sxth	r2, r2
 801262a:	b21b      	sxth	r3, r3
 801262c:	429a      	cmp	r2, r3
 801262e:	dc2a      	bgt.n	8012686 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8012630:	fa1f f289 	uxth.w	r2, r9
 8012634:	88f3      	ldrh	r3, [r6, #6]
 8012636:	45c8      	cmp	r8, r9
 8012638:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 801263c:	4413      	add	r3, r2
 801263e:	fa1f fc88 	uxth.w	ip, r8
 8012642:	b29b      	uxth	r3, r3
 8012644:	fa0f fe83 	sxth.w	lr, r3
 8012648:	db0f      	blt.n	801266a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801264a:	eba3 030c 	sub.w	r3, r3, ip
 801264e:	1ac9      	subs	r1, r1, r3
 8012650:	b209      	sxth	r1, r1
 8012652:	2900      	cmp	r1, #0
 8012654:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012658:	dd12      	ble.n	8012680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801265a:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 801265e:	4605      	mov	r5, r0
 8012660:	9b05      	ldr	r3, [sp, #20]
 8012662:	3e08      	subs	r6, #8
 8012664:	3b01      	subs	r3, #1
 8012666:	9305      	str	r3, [sp, #20]
 8012668:	e7c7      	b.n	80125fa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801266a:	4461      	add	r1, ip
 801266c:	b209      	sxth	r1, r1
 801266e:	4571      	cmp	r1, lr
 8012670:	dc38      	bgt.n	80126e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012672:	eba2 020c 	sub.w	r2, r2, ip
 8012676:	b212      	sxth	r2, r2
 8012678:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 801267c:	2a00      	cmp	r2, #0
 801267e:	dcee      	bgt.n	801265e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012680:	b00f      	add	sp, #60	@ 0x3c
 8012682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012686:	45c8      	cmp	r8, r9
 8012688:	db2c      	blt.n	80126e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801268a:	88f3      	ldrh	r3, [r6, #6]
 801268c:	4499      	add	r9, r3
 801268e:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8012692:	4498      	add	r8, r3
 8012694:	fa0f f989 	sxth.w	r9, r9
 8012698:	fa0f f888 	sxth.w	r8, r8
 801269c:	45c1      	cmp	r9, r8
 801269e:	db21      	blt.n	80126e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80126a0:	fa1f f28c 	uxth.w	r2, ip
 80126a4:	88b3      	ldrh	r3, [r6, #4]
 80126a6:	45e6      	cmp	lr, ip
 80126a8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80126ac:	4413      	add	r3, r2
 80126ae:	fa1f f88e 	uxth.w	r8, lr
 80126b2:	b29b      	uxth	r3, r3
 80126b4:	fa0f f983 	sxth.w	r9, r3
 80126b8:	db0a      	blt.n	80126d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80126ba:	eba3 0308 	sub.w	r3, r3, r8
 80126be:	1ac9      	subs	r1, r1, r3
 80126c0:	b209      	sxth	r1, r1
 80126c2:	2900      	cmp	r1, #0
 80126c4:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80126c8:	ddda      	ble.n	8012680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80126ca:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80126ce:	e7c6      	b.n	801265e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80126d0:	4441      	add	r1, r8
 80126d2:	b209      	sxth	r1, r1
 80126d4:	4549      	cmp	r1, r9
 80126d6:	dc05      	bgt.n	80126e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80126d8:	eba2 0208 	sub.w	r2, r2, r8
 80126dc:	b212      	sxth	r2, r2
 80126de:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80126e2:	e7cb      	b.n	801267c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80126e4:	4607      	mov	r7, r0
 80126e6:	e7bb      	b.n	8012660 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80126e8:	2d00      	cmp	r5, #0
 80126ea:	d181      	bne.n	80125f0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80126ec:	2f00      	cmp	r7, #0
 80126ee:	f000 81dd 	beq.w	8012aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80126f2:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80126f6:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80126fa:	b2b3      	uxth	r3, r6
 80126fc:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8012700:	9305      	str	r3, [sp, #20]
 8012702:	9a05      	ldr	r2, [sp, #20]
 8012704:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8012708:	4413      	add	r3, r2
 801270a:	b2ba      	uxth	r2, r7
 801270c:	4492      	add	sl, r2
 801270e:	b29b      	uxth	r3, r3
 8012710:	fa1f fa8a 	uxth.w	sl, sl
 8012714:	fa0f f883 	sxth.w	r8, r3
 8012718:	fa0f f98a 	sxth.w	r9, sl
 801271c:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8012720:	9b04      	ldr	r3, [sp, #16]
 8012722:	2b00      	cmp	r3, #0
 8012724:	d052      	beq.n	80127cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8012726:	9903      	ldr	r1, [sp, #12]
 8012728:	4620      	mov	r0, r4
 801272a:	f7ff fcdc 	bl	80120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801272e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8012732:	b1c0      	cbz	r0, 8012766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012734:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012738:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801273c:	4576      	cmp	r6, lr
 801273e:	dc22      	bgt.n	8012786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012740:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8012744:	44f4      	add	ip, lr
 8012746:	fa0f fc8c 	sxth.w	ip, ip
 801274a:	45e0      	cmp	r8, ip
 801274c:	db1b      	blt.n	8012786 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 801274e:	428f      	cmp	r7, r1
 8012750:	fa1f fc81 	uxth.w	ip, r1
 8012754:	88e1      	ldrh	r1, [r4, #6]
 8012756:	dc0d      	bgt.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8012758:	ebaa 0c0c 	sub.w	ip, sl, ip
 801275c:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012760:	eba1 010c 	sub.w	r1, r1, ip
 8012764:	80e1      	strh	r1, [r4, #6]
 8012766:	4628      	mov	r0, r5
 8012768:	9904      	ldr	r1, [sp, #16]
 801276a:	3c08      	subs	r4, #8
 801276c:	4605      	mov	r5, r0
 801276e:	3901      	subs	r1, #1
 8012770:	9104      	str	r1, [sp, #16]
 8012772:	e7d3      	b.n	801271c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8012774:	4461      	add	r1, ip
 8012776:	b209      	sxth	r1, r1
 8012778:	4549      	cmp	r1, r9
 801277a:	dcf5      	bgt.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801277c:	eba2 0c0c 	sub.w	ip, r2, ip
 8012780:	f8a4 c006 	strh.w	ip, [r4, #6]
 8012784:	e7ef      	b.n	8012766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012786:	428f      	cmp	r7, r1
 8012788:	dcee      	bgt.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801278a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 801278e:	4461      	add	r1, ip
 8012790:	b209      	sxth	r1, r1
 8012792:	4589      	cmp	r9, r1
 8012794:	dbe8      	blt.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012796:	4576      	cmp	r6, lr
 8012798:	fa1f fc8e 	uxth.w	ip, lr
 801279c:	88a1      	ldrh	r1, [r4, #4]
 801279e:	dc07      	bgt.n	80127b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80127a0:	eba3 0c0c 	sub.w	ip, r3, ip
 80127a4:	f8a4 8000 	strh.w	r8, [r4]
 80127a8:	eba1 010c 	sub.w	r1, r1, ip
 80127ac:	80a1      	strh	r1, [r4, #4]
 80127ae:	e7da      	b.n	8012766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80127b0:	4461      	add	r1, ip
 80127b2:	b209      	sxth	r1, r1
 80127b4:	4588      	cmp	r8, r1
 80127b6:	dbd7      	blt.n	8012768 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80127b8:	9905      	ldr	r1, [sp, #20]
 80127ba:	eba1 0c0c 	sub.w	ip, r1, ip
 80127be:	f8a4 c004 	strh.w	ip, [r4, #4]
 80127c2:	e7d0      	b.n	8012766 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80127c4:	2402526a 	.word	0x2402526a
 80127c8:	24025268 	.word	0x24025268
 80127cc:	2d00      	cmp	r5, #0
 80127ce:	f000 816d 	beq.w	8012aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80127d2:	9b06      	ldr	r3, [sp, #24]
 80127d4:	445b      	add	r3, fp
 80127d6:	461c      	mov	r4, r3
 80127d8:	9b02      	ldr	r3, [sp, #8]
 80127da:	3301      	adds	r3, #1
 80127dc:	f000 8166 	beq.w	8012aac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80127e0:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80127e4:	9803      	ldr	r0, [sp, #12]
 80127e6:	4629      	mov	r1, r5
 80127e8:	f7ff fcf0 	bl	80121cc <_ZNK8touchgfx4Rect8includesERKS0_>
 80127ec:	b120      	cbz	r0, 80127f8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80127ee:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80127f2:	9801      	ldr	r0, [sp, #4]
 80127f4:	f7ff feb0 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80127f8:	9903      	ldr	r1, [sp, #12]
 80127fa:	4628      	mov	r0, r5
 80127fc:	f7ff fc73 	bl	80120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012800:	2800      	cmp	r0, #0
 8012802:	f000 809c 	beq.w	801293e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012806:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801280a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 801280e:	fa1f f189 	uxth.w	r1, r9
 8012812:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012816:	9309      	str	r3, [sp, #36]	@ 0x24
 8012818:	eb01 0c03 	add.w	ip, r1, r3
 801281c:	b283      	uxth	r3, r0
 801281e:	4548      	cmp	r0, r9
 8012820:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8012824:	fa1f fa8c 	uxth.w	sl, ip
 8012828:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 801282c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8012830:	eb03 050c 	add.w	r5, r3, ip
 8012834:	b2ad      	uxth	r5, r5
 8012836:	9505      	str	r5, [sp, #20]
 8012838:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 801283c:	9504      	str	r5, [sp, #16]
 801283e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012842:	f340 8099 	ble.w	8012978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012846:	1a5b      	subs	r3, r3, r1
 8012848:	4596      	cmp	lr, r2
 801284a:	fa0f f08a 	sxth.w	r0, sl
 801284e:	b29b      	uxth	r3, r3
 8012850:	b21e      	sxth	r6, r3
 8012852:	dd2e      	ble.n	80128b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012854:	9f02      	ldr	r7, [sp, #8]
 8012856:	fa1f fe8e 	uxth.w	lr, lr
 801285a:	b292      	uxth	r2, r2
 801285c:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012860:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012864:	9f04      	ldr	r7, [sp, #16]
 8012866:	ebae 0102 	sub.w	r1, lr, r2
 801286a:	44a6      	add	lr, r4
 801286c:	1a3f      	subs	r7, r7, r0
 801286e:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012872:	b289      	uxth	r1, r1
 8012874:	4402      	add	r2, r0
 8012876:	fa0f fe8e 	sxth.w	lr, lr
 801287a:	b20d      	sxth	r5, r1
 801287c:	b212      	sxth	r2, r2
 801287e:	436f      	muls	r7, r5
 8012880:	ebae 0202 	sub.w	r2, lr, r2
 8012884:	4372      	muls	r2, r6
 8012886:	4297      	cmp	r7, r2
 8012888:	db09      	blt.n	801289e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801288a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 801288e:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012892:	449c      	add	ip, r3
 8012894:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012898:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801289c:	e686      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801289e:	4421      	add	r1, r4
 80128a0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 80128a4:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 80128a8:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80128ac:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80128b0:	e67c      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80128b2:	9f04      	ldr	r7, [sp, #16]
 80128b4:	42b8      	cmp	r0, r7
 80128b6:	da27      	bge.n	8012908 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80128b8:	9902      	ldr	r1, [sp, #8]
 80128ba:	1a3f      	subs	r7, r7, r0
 80128bc:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80128c0:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80128c4:	eb05 010e 	add.w	r1, r5, lr
 80128c8:	fa1f f881 	uxth.w	r8, r1
 80128cc:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80128d0:	4411      	add	r1, r2
 80128d2:	fa0f f988 	sxth.w	r9, r8
 80128d6:	eba2 020e 	sub.w	r2, r2, lr
 80128da:	eba1 0108 	sub.w	r1, r1, r8
 80128de:	4372      	muls	r2, r6
 80128e0:	b289      	uxth	r1, r1
 80128e2:	fa0f f881 	sxth.w	r8, r1
 80128e6:	fb08 f707 	mul.w	r7, r8, r7
 80128ea:	42ba      	cmp	r2, r7
 80128ec:	dc06      	bgt.n	80128fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80128ee:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80128f2:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80128f6:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80128fa:	e7ca      	b.n	8012892 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80128fc:	4429      	add	r1, r5
 80128fe:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012902:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012906:	e651      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012908:	9805      	ldr	r0, [sp, #20]
 801290a:	2d06      	cmp	r5, #6
 801290c:	ebaa 0000 	sub.w	r0, sl, r0
 8012910:	b280      	uxth	r0, r0
 8012912:	fa0f fe80 	sxth.w	lr, r0
 8012916:	d817      	bhi.n	8012948 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012918:	9b04      	ldr	r3, [sp, #16]
 801291a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 801291e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012922:	1c6b      	adds	r3, r5, #1
 8012924:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8012928:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801292c:	9b01      	ldr	r3, [sp, #4]
 801292e:	9801      	ldr	r0, [sp, #4]
 8012930:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012934:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012938:	805a      	strh	r2, [r3, #2]
 801293a:	809e      	strh	r6, [r3, #4]
 801293c:	80d9      	strh	r1, [r3, #6]
 801293e:	9b02      	ldr	r3, [sp, #8]
 8012940:	3c08      	subs	r4, #8
 8012942:	3b01      	subs	r3, #1
 8012944:	9302      	str	r3, [sp, #8]
 8012946:	e747      	b.n	80127d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012948:	9a02      	ldr	r2, [sp, #8]
 801294a:	45b6      	cmp	lr, r6
 801294c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012950:	db0d      	blt.n	801296e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012952:	449c      	add	ip, r3
 8012954:	445a      	add	r2, fp
 8012956:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801295a:	fa1f fc8c 	uxth.w	ip, ip
 801295e:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012962:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012966:	448c      	add	ip, r1
 8012968:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 801296c:	e61e      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 801296e:	445a      	add	r2, fp
 8012970:	4484      	add	ip, r0
 8012972:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8012976:	e78f      	b.n	8012898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012978:	fa1f f18e 	uxth.w	r1, lr
 801297c:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8012980:	b293      	uxth	r3, r2
 8012982:	4596      	cmp	lr, r2
 8012984:	eb01 0806 	add.w	r8, r1, r6
 8012988:	9306      	str	r3, [sp, #24]
 801298a:	fa1f f888 	uxth.w	r8, r8
 801298e:	9f06      	ldr	r7, [sp, #24]
 8012990:	fa0f f388 	sxth.w	r3, r8
 8012994:	9307      	str	r3, [sp, #28]
 8012996:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801299a:	443b      	add	r3, r7
 801299c:	b29b      	uxth	r3, r3
 801299e:	9308      	str	r3, [sp, #32]
 80129a0:	da24      	bge.n	80129ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 80129a2:	9905      	ldr	r1, [sp, #20]
 80129a4:	eba3 0308 	sub.w	r3, r3, r8
 80129a8:	eba2 020e 	sub.w	r2, r2, lr
 80129ac:	eba9 0000 	sub.w	r0, r9, r0
 80129b0:	ebaa 0401 	sub.w	r4, sl, r1
 80129b4:	b29b      	uxth	r3, r3
 80129b6:	b2a4      	uxth	r4, r4
 80129b8:	b219      	sxth	r1, r3
 80129ba:	b225      	sxth	r5, r4
 80129bc:	4348      	muls	r0, r1
 80129be:	436a      	muls	r2, r5
 80129c0:	4282      	cmp	r2, r0
 80129c2:	9a02      	ldr	r2, [sp, #8]
 80129c4:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80129c8:	445a      	add	r2, fp
 80129ca:	dc06      	bgt.n	80129da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80129cc:	9b07      	ldr	r3, [sp, #28]
 80129ce:	44a4      	add	ip, r4
 80129d0:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80129d4:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80129d8:	e75e      	b.n	8012898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80129da:	9904      	ldr	r1, [sp, #16]
 80129dc:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80129e0:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80129e4:	4433      	add	r3, r6
 80129e6:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80129ea:	e5df      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80129ec:	9f06      	ldr	r7, [sp, #24]
 80129ee:	9b04      	ldr	r3, [sp, #16]
 80129f0:	1bc9      	subs	r1, r1, r7
 80129f2:	fa0f f78a 	sxth.w	r7, sl
 80129f6:	b289      	uxth	r1, r1
 80129f8:	429f      	cmp	r7, r3
 80129fa:	fa0f fe81 	sxth.w	lr, r1
 80129fe:	dd23      	ble.n	8012a48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012a00:	9a05      	ldr	r2, [sp, #20]
 8012a02:	eba9 0000 	sub.w	r0, r9, r0
 8012a06:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012a0a:	ebaa 0202 	sub.w	r2, sl, r2
 8012a0e:	9d07      	ldr	r5, [sp, #28]
 8012a10:	fb0e f000 	mul.w	r0, lr, r0
 8012a14:	b292      	uxth	r2, r2
 8012a16:	eba5 0a03 	sub.w	sl, r5, r3
 8012a1a:	9b02      	ldr	r3, [sp, #8]
 8012a1c:	b214      	sxth	r4, r2
 8012a1e:	00db      	lsls	r3, r3, #3
 8012a20:	fb04 fa0a 	mul.w	sl, r4, sl
 8012a24:	445b      	add	r3, fp
 8012a26:	4550      	cmp	r0, sl
 8012a28:	db03      	blt.n	8012a32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012a2a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012a2e:	4494      	add	ip, r2
 8012a30:	e732      	b.n	8012898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012a32:	9a04      	ldr	r2, [sp, #16]
 8012a34:	4431      	add	r1, r6
 8012a36:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8012a3a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012a3e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012a42:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012a46:	e75c      	b.n	8012902 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012a48:	9b08      	ldr	r3, [sp, #32]
 8012a4a:	2d06      	cmp	r5, #6
 8012a4c:	eba3 0308 	sub.w	r3, r3, r8
 8012a50:	b29b      	uxth	r3, r3
 8012a52:	b218      	sxth	r0, r3
 8012a54:	d813      	bhi.n	8012a7e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012a56:	9b07      	ldr	r3, [sp, #28]
 8012a58:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8012a5c:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8012a60:	1c6b      	adds	r3, r5, #1
 8012a62:	9901      	ldr	r1, [sp, #4]
 8012a64:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012a68:	9b01      	ldr	r3, [sp, #4]
 8012a6a:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012a6e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012a72:	805a      	strh	r2, [r3, #2]
 8012a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012a76:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012a7a:	809a      	strh	r2, [r3, #4]
 8012a7c:	e75f      	b.n	801293e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012a7e:	9c02      	ldr	r4, [sp, #8]
 8012a80:	4570      	cmp	r0, lr
 8012a82:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012a86:	db0d      	blt.n	8012aa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012a88:	4431      	add	r1, r6
 8012a8a:	9b06      	ldr	r3, [sp, #24]
 8012a8c:	445c      	add	r4, fp
 8012a8e:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8012a92:	b289      	uxth	r1, r1
 8012a94:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8012a98:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012a9c:	4419      	add	r1, r3
 8012a9e:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8012aa2:	e583      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012aa4:	445c      	add	r4, fp
 8012aa6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8012aaa:	e79b      	b.n	80129e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012aac:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012ab0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8012ab4:	1e65      	subs	r5, r4, #1
 8012ab6:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8012aba:	b2ad      	uxth	r5, r5
 8012abc:	42b5      	cmp	r5, r6
 8012abe:	d044      	beq.n	8012b4a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8012ac0:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8012ac4:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8012ac8:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8012acc:	4282      	cmp	r2, r0
 8012ace:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8012ad2:	d11f      	bne.n	8012b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8012ad4:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8012ad8:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012adc:	459c      	cmp	ip, r3
 8012ade:	d119      	bne.n	8012b14 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8012ae0:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8012ae4:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012ae8:	19d8      	adds	r0, r3, r7
 8012aea:	b200      	sxth	r0, r0
 8012aec:	4288      	cmp	r0, r1
 8012aee:	d109      	bne.n	8012b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8012af0:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8012af4:	4413      	add	r3, r2
 8012af6:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8012afa:	4629      	mov	r1, r5
 8012afc:	9801      	ldr	r0, [sp, #4]
 8012afe:	f7ff fd2b 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012b02:	e003      	b.n	8012b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012b04:	4411      	add	r1, r2
 8012b06:	b209      	sxth	r1, r1
 8012b08:	42b9      	cmp	r1, r7
 8012b0a:	d0f3      	beq.n	8012af4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8012b0c:	3d01      	subs	r5, #1
 8012b0e:	3c08      	subs	r4, #8
 8012b10:	b2ad      	uxth	r5, r5
 8012b12:	e7d3      	b.n	8012abc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8012b14:	42b9      	cmp	r1, r7
 8012b16:	d1f9      	bne.n	8012b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012b18:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8012b1c:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012b20:	4299      	cmp	r1, r3
 8012b22:	d1f3      	bne.n	8012b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012b24:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012b28:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012b2c:	181f      	adds	r7, r3, r0
 8012b2e:	b23f      	sxth	r7, r7
 8012b30:	42ba      	cmp	r2, r7
 8012b32:	d105      	bne.n	8012b40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8012b34:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8012b38:	440b      	add	r3, r1
 8012b3a:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012b3e:	e7dc      	b.n	8012afa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8012b40:	440a      	add	r2, r1
 8012b42:	b212      	sxth	r2, r2
 8012b44:	4290      	cmp	r0, r2
 8012b46:	d1e1      	bne.n	8012b0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012b48:	e7f6      	b.n	8012b38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8012b4a:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8012b4e:	2e07      	cmp	r6, #7
 8012b50:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012b54:	d812      	bhi.n	8012b7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8012b56:	1c75      	adds	r5, r6, #1
 8012b58:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012b5c:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012b60:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8012b64:	9d01      	ldr	r5, [sp, #4]
 8012b66:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012b6a:	442c      	add	r4, r5
 8012b6c:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8012b70:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012b74:	8061      	strh	r1, [r4, #2]
 8012b76:	80a2      	strh	r2, [r4, #4]
 8012b78:	80e3      	strh	r3, [r4, #6]
 8012b7a:	e581      	b.n	8012680 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012b7c:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012b80:	3e01      	subs	r6, #1
 8012b82:	445c      	add	r4, fp
 8012b84:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8012b88:	f04f 37ff 	mov.w	r7, #4294967295
 8012b8c:	2500      	movs	r5, #0
 8012b8e:	9305      	str	r3, [sp, #20]
 8012b90:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012b94:	1e72      	subs	r2, r6, #1
 8012b96:	9302      	str	r3, [sp, #8]
 8012b98:	4691      	mov	r9, r2
 8012b9a:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012b9e:	9304      	str	r3, [sp, #16]
 8012ba0:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8012ba4:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012ba8:	6818      	ldr	r0, [r3, #0]
 8012baa:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012bae:	9207      	str	r2, [sp, #28]
 8012bb0:	bf16      	itet	ne
 8012bb2:	9905      	ldrne	r1, [sp, #20]
 8012bb4:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8012bb8:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012bbc:	9306      	str	r3, [sp, #24]
 8012bbe:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012bc2:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8012bc6:	fb18 f801 	smulbb	r8, r8, r1
 8012bca:	6859      	ldr	r1, [r3, #4]
 8012bcc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012bd0:	4671      	mov	r1, lr
 8012bd2:	a80c      	add	r0, sp, #48	@ 0x30
 8012bd4:	f7ff fb20 	bl	8012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012bd8:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012bdc:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012be0:	f04f 0c08 	mov.w	ip, #8
 8012be4:	9b04      	ldr	r3, [sp, #16]
 8012be6:	9a02      	ldr	r2, [sp, #8]
 8012be8:	fb10 f001 	smulbb	r0, r0, r1
 8012bec:	fb02 8803 	mla	r8, r2, r3, r8
 8012bf0:	eba0 0108 	sub.w	r1, r0, r8
 8012bf4:	fb90 f0fc 	sdiv	r0, r0, ip
 8012bf8:	4288      	cmp	r0, r1
 8012bfa:	dc20      	bgt.n	8012c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8012bfc:	4551      	cmp	r1, sl
 8012bfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012c02:	da03      	bge.n	8012c0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8012c04:	b1d9      	cbz	r1, 8012c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8012c06:	468a      	mov	sl, r1
 8012c08:	464f      	mov	r7, r9
 8012c0a:	4635      	mov	r5, r6
 8012c0c:	f109 39ff 	add.w	r9, r9, #4294967295
 8012c10:	f119 0f02 	cmn.w	r9, #2
 8012c14:	d1c6      	bne.n	8012ba4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8012c16:	4616      	mov	r6, r2
 8012c18:	3201      	adds	r2, #1
 8012c1a:	f1a4 0408 	sub.w	r4, r4, #8
 8012c1e:	d1b7      	bne.n	8012b90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8012c20:	9b01      	ldr	r3, [sp, #4]
 8012c22:	b2ac      	uxth	r4, r5
 8012c24:	00ed      	lsls	r5, r5, #3
 8012c26:	1958      	adds	r0, r3, r5
 8012c28:	1c7b      	adds	r3, r7, #1
 8012c2a:	d10b      	bne.n	8012c44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8012c2c:	4601      	mov	r1, r0
 8012c2e:	9803      	ldr	r0, [sp, #12]
 8012c30:	f7ff faf2 	bl	8012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c34:	4621      	mov	r1, r4
 8012c36:	9801      	ldr	r0, [sp, #4]
 8012c38:	f7ff fc8e 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012c3c:	e4b6      	b.n	80125ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012c3e:	464f      	mov	r7, r9
 8012c40:	4635      	mov	r5, r6
 8012c42:	e7ed      	b.n	8012c20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8012c44:	9b01      	ldr	r3, [sp, #4]
 8012c46:	00ff      	lsls	r7, r7, #3
 8012c48:	445d      	add	r5, fp
 8012c4a:	19d9      	adds	r1, r3, r7
 8012c4c:	445f      	add	r7, fp
 8012c4e:	f7ff fae3 	bl	8012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012c52:	9b03      	ldr	r3, [sp, #12]
 8012c54:	cb03      	ldmia	r3!, {r0, r1}
 8012c56:	9b03      	ldr	r3, [sp, #12]
 8012c58:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8012c5c:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8012c60:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012c64:	6869      	ldr	r1, [r5, #4]
 8012c66:	c303      	stmia	r3!, {r0, r1}
 8012c68:	e7e4      	b.n	8012c34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8012c6a:	bf00      	nop

08012c6c <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c70:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8012c74:	b09b      	sub	sp, #108	@ 0x6c
 8012c76:	4604      	mov	r4, r0
 8012c78:	4630      	mov	r0, r6
 8012c7a:	f7fa fe82 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012c7e:	4605      	mov	r5, r0
 8012c80:	b948      	cbnz	r0, 8012c96 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8012c82:	6823      	ldr	r3, [r4, #0]
 8012c84:	4620      	mov	r0, r4
 8012c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c88:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012c8c:	4798      	blx	r3
 8012c8e:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8012c92:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8012c96:	4bc5      	ldr	r3, [pc, #788]	@ (8012fac <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d03f      	beq.n	8012d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012c9e:	4dc4      	ldr	r5, [pc, #784]	@ (8012fb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8012ca0:	4628      	mov	r0, r5
 8012ca2:	f7fa fe6e 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012ca6:	4606      	mov	r6, r0
 8012ca8:	2800      	cmp	r0, #0
 8012caa:	d138      	bne.n	8012d1e <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012cac:	4628      	mov	r0, r5
 8012cae:	f7ff f92b 	bl	8011f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012cb2:	6823      	ldr	r3, [r4, #0]
 8012cb4:	6829      	ldr	r1, [r5, #0]
 8012cb6:	4620      	mov	r0, r4
 8012cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cba:	686a      	ldr	r2, [r5, #4]
 8012cbc:	4798      	blx	r3
 8012cbe:	802e      	strh	r6, [r5, #0]
 8012cc0:	806e      	strh	r6, [r5, #2]
 8012cc2:	80ae      	strh	r6, [r5, #4]
 8012cc4:	80ee      	strh	r6, [r5, #6]
 8012cc6:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8012cca:	4dba      	ldr	r5, [pc, #744]	@ (8012fb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8012ccc:	4640      	mov	r0, r8
 8012cce:	f7ff fbe8 	bl	80124a2 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012cd2:	882e      	ldrh	r6, [r5, #0]
 8012cd4:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8012cd8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012cdc:	4633      	mov	r3, r6
 8012cde:	42bb      	cmp	r3, r7
 8012ce0:	d224      	bcs.n	8012d2c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012ce2:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8012ce6:	2907      	cmp	r1, #7
 8012ce8:	d816      	bhi.n	8012d18 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8012cea:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012cee:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8012cf2:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8012cf6:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8012cfa:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012cfe:	1c4a      	adds	r2, r1, #1
 8012d00:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8012d04:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8012d08:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8012d0c:	f8a2 a002 	strh.w	sl, [r2, #2]
 8012d10:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012d14:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	b29b      	uxth	r3, r3
 8012d1c:	e7df      	b.n	8012cde <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8012d1e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d1cf      	bne.n	8012cc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8012d26:	b01b      	add	sp, #108	@ 0x6c
 8012d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d2c:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8012d30:	42b3      	cmp	r3, r6
 8012d32:	d90c      	bls.n	8012d4e <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8012d34:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012d38:	6822      	ldr	r2, [r4, #0]
 8012d3a:	3601      	adds	r6, #1
 8012d3c:	4620      	mov	r0, r4
 8012d3e:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8012d40:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8012d44:	b2b6      	uxth	r6, r6
 8012d46:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8012d4a:	47b8      	blx	r7
 8012d4c:	e7ee      	b.n	8012d2c <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8012fb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012d50:	6813      	ldr	r3, [r2, #0]
 8012d52:	4691      	mov	r9, r2
 8012d54:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012d58:	2b01      	cmp	r3, #1
 8012d5a:	f040 80e0 	bne.w	8012f1e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8012d5e:	8829      	ldrh	r1, [r5, #0]
 8012d60:	2600      	movs	r6, #0
 8012d62:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8012d66:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8012d6a:	33ae      	adds	r3, #174	@ 0xae
 8012d6c:	428f      	cmp	r7, r1
 8012d6e:	f103 0308 	add.w	r3, r3, #8
 8012d72:	dd0a      	ble.n	8012d8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8012d74:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8012d78:	3101      	adds	r1, #1
 8012d7a:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8012d7e:	4402      	add	r2, r0
 8012d80:	b212      	sxth	r2, r2
 8012d82:	4296      	cmp	r6, r2
 8012d84:	bfb8      	it	lt
 8012d86:	4616      	movlt	r6, r2
 8012d88:	e7f0      	b.n	8012d6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8012d8a:	4b8c      	ldr	r3, [pc, #560]	@ (8012fbc <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012d8c:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8012fb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8012d90:	881b      	ldrh	r3, [r3, #0]
 8012d92:	2b0f      	cmp	r3, #15
 8012d94:	bf8c      	ite	hi
 8012d96:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8012d9a:	f04f 0b01 	movls.w	fp, #1
 8012d9e:	2300      	movs	r3, #0
 8012da0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012da4:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8012da8:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012dac:	4b82      	ldr	r3, [pc, #520]	@ (8012fb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012dae:	4438      	add	r0, r7
 8012db0:	b207      	sxth	r7, r0
 8012db2:	6818      	ldr	r0, [r3, #0]
 8012db4:	42b7      	cmp	r7, r6
 8012db6:	6803      	ldr	r3, [r0, #0]
 8012db8:	f280 8083 	bge.w	8012ec2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012dbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012dc0:	4798      	blx	r3
 8012dc2:	eb07 030b 	add.w	r3, r7, fp
 8012dc6:	4298      	cmp	r0, r3
 8012dc8:	da07      	bge.n	8012dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8012dca:	42b0      	cmp	r0, r6
 8012dcc:	da05      	bge.n	8012dda <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8012dce:	4287      	cmp	r7, r0
 8012dd0:	dd6c      	ble.n	8012eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012dd2:	2f00      	cmp	r7, #0
 8012dd4:	dd6a      	ble.n	8012eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012dd6:	4630      	mov	r0, r6
 8012dd8:	e004      	b.n	8012de4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8012dda:	4287      	cmp	r7, r0
 8012ddc:	dcfb      	bgt.n	8012dd6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8012dde:	42b0      	cmp	r0, r6
 8012de0:	bfa8      	it	ge
 8012de2:	4630      	movge	r0, r6
 8012de4:	4b76      	ldr	r3, [pc, #472]	@ (8012fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012de6:	1bc0      	subs	r0, r0, r7
 8012de8:	2200      	movs	r2, #0
 8012dea:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012df2:	882f      	ldrh	r7, [r5, #0]
 8012df4:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012df8:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012dfc:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012e00:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012e04:	42bb      	cmp	r3, r7
 8012e06:	d9cd      	bls.n	8012da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8012e08:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012e0c:	ab07      	add	r3, sp, #28
 8012e0e:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012e12:	6851      	ldr	r1, [r2, #4]
 8012e14:	c303      	stmia	r3!, {r0, r1}
 8012e16:	a905      	add	r1, sp, #20
 8012e18:	a807      	add	r0, sp, #28
 8012e1a:	f7ff f964 	bl	80120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012e1e:	2800      	cmp	r0, #0
 8012e20:	d04c      	beq.n	8012ebc <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8012e22:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012e26:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012e2a:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8012e2e:	4686      	mov	lr, r0
 8012e30:	4290      	cmp	r0, r2
 8012e32:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8012e36:	4450      	add	r0, sl
 8012e38:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8012e3c:	bfb8      	it	lt
 8012e3e:	4696      	movlt	lr, r2
 8012e40:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8012e44:	4452      	add	r2, sl
 8012e46:	b280      	uxth	r0, r0
 8012e48:	4299      	cmp	r1, r3
 8012e4a:	468c      	mov	ip, r1
 8012e4c:	b292      	uxth	r2, r2
 8012e4e:	9302      	str	r3, [sp, #8]
 8012e50:	bfb8      	it	lt
 8012e52:	469c      	movlt	ip, r3
 8012e54:	b203      	sxth	r3, r0
 8012e56:	fa0f fa82 	sxth.w	sl, r2
 8012e5a:	f8ad e01c 	strh.w	lr, [sp, #28]
 8012e5e:	f8ad c01e 	strh.w	ip, [sp, #30]
 8012e62:	4553      	cmp	r3, sl
 8012e64:	bfb8      	it	lt
 8012e66:	4602      	movlt	r2, r0
 8012e68:	9b02      	ldr	r3, [sp, #8]
 8012e6a:	eba2 020e 	sub.w	r2, r2, lr
 8012e6e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8012e72:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8012e76:	4411      	add	r1, r2
 8012e78:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	b289      	uxth	r1, r1
 8012e80:	b29b      	uxth	r3, r3
 8012e82:	b208      	sxth	r0, r1
 8012e84:	b21a      	sxth	r2, r3
 8012e86:	4290      	cmp	r0, r2
 8012e88:	bfb8      	it	lt
 8012e8a:	460b      	movlt	r3, r1
 8012e8c:	eba3 030c 	sub.w	r3, r3, ip
 8012e90:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8012e94:	a807      	add	r0, sp, #28
 8012e96:	f7fa fd74 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e9a:	b920      	cbnz	r0, 8012ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8012e9c:	6823      	ldr	r3, [r4, #0]
 8012e9e:	a907      	add	r1, sp, #28
 8012ea0:	4620      	mov	r0, r4
 8012ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ea4:	4798      	blx	r3
 8012ea6:	3701      	adds	r7, #1
 8012ea8:	b2bf      	uxth	r7, r7
 8012eaa:	e7a9      	b.n	8012e00 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8012eac:	f8d9 0000 	ldr.w	r0, [r9]
 8012eb0:	2101      	movs	r1, #1
 8012eb2:	6803      	ldr	r3, [r0, #0]
 8012eb4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8012eb8:	4798      	blx	r3
 8012eba:	e773      	b.n	8012da4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8012ebc:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8012ec0:	e7e8      	b.n	8012e94 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8012ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ec4:	4798      	blx	r3
 8012ec6:	4b3f      	ldr	r3, [pc, #252]	@ (8012fc4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8012ec8:	781b      	ldrb	r3, [r3, #0]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f43f af2b 	beq.w	8012d26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8012ed0:	2300      	movs	r3, #0
 8012ed2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8012ed6:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8012eda:	882b      	ldrh	r3, [r5, #0]
 8012edc:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8012ee0:	42ab      	cmp	r3, r5
 8012ee2:	f4bf af20 	bcs.w	8012d26 <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8012ee6:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8012eea:	2907      	cmp	r1, #7
 8012eec:	d814      	bhi.n	8012f18 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8012eee:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8012ef2:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8012ef6:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8012efa:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8012efe:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8012f02:	1c4a      	adds	r2, r1, #1
 8012f04:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 8012f08:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8012f0c:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8012f10:	f8a2 c002 	strh.w	ip, [r2, #2]
 8012f14:	8097      	strh	r7, [r2, #4]
 8012f16:	80d6      	strh	r6, [r2, #6]
 8012f18:	3301      	adds	r3, #1
 8012f1a:	b29b      	uxth	r3, r3
 8012f1c:	e7e0      	b.n	8012ee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	f040 8133 	bne.w	801318a <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8012f24:	4b28      	ldr	r3, [pc, #160]	@ (8012fc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8012f26:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 8012f2a:	781b      	ldrb	r3, [r3, #0]
 8012f2c:	2b01      	cmp	r3, #1
 8012f2e:	f000 8098 	beq.w	8013062 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8012f32:	882a      	ldrh	r2, [r5, #0]
 8012f34:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8012f38:	3201      	adds	r2, #1
 8012f3a:	b292      	uxth	r2, r2
 8012f3c:	2900      	cmp	r1, #0
 8012f3e:	d0c2      	beq.n	8012ec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8012f40:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8012f44:	4694      	mov	ip, r2
 8012f46:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8012f4a:	f04f 0900 	mov.w	r9, #0
 8012f4e:	441e      	add	r6, r3
 8012f50:	b236      	sxth	r6, r6
 8012f52:	fa1f f38c 	uxth.w	r3, ip
 8012f56:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8012f5a:	4299      	cmp	r1, r3
 8012f5c:	f240 80be 	bls.w	80130dc <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8012f60:	4427      	add	r7, r4
 8012f62:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 8012f66:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8012f6a:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8012f6e:	4283      	cmp	r3, r0
 8012f70:	f340 80a0 	ble.w	80130b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8012f74:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8012f78:	46e1      	mov	r9, ip
 8012f7a:	4406      	add	r6, r0
 8012f7c:	b236      	sxth	r6, r6
 8012f7e:	429e      	cmp	r6, r3
 8012f80:	bfa8      	it	ge
 8012f82:	461e      	movge	r6, r3
 8012f84:	f10c 0c01 	add.w	ip, ip, #1
 8012f88:	e7e3      	b.n	8012f52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8012f8a:	d10a      	bne.n	8012fa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8012f8c:	4562      	cmp	r2, ip
 8012f8e:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8012f92:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 8012f96:	bfb8      	it	lt
 8012f98:	4662      	movlt	r2, ip
 8012f9a:	4288      	cmp	r0, r1
 8012f9c:	bfb8      	it	lt
 8012f9e:	461f      	movlt	r7, r3
 8012fa0:	e086      	b.n	80130b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8012fa2:	428a      	cmp	r2, r1
 8012fa4:	bfb8      	it	lt
 8012fa6:	460a      	movlt	r2, r1
 8012fa8:	e082      	b.n	80130b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8012faa:	bf00      	nop
 8012fac:	240252b4 	.word	0x240252b4
 8012fb0:	240252c0 	.word	0x240252c0
 8012fb4:	2400007c 	.word	0x2400007c
 8012fb8:	24025274 	.word	0x24025274
 8012fbc:	2402526a 	.word	0x2402526a
 8012fc0:	24025268 	.word	0x24025268
 8012fc4:	24025272 	.word	0x24025272
 8012fc8:	2402526c 	.word	0x2402526c
 8012fcc:	19a1      	adds	r1, r4, r6
 8012fce:	ab07      	add	r3, sp, #28
 8012fd0:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8012fd4:	6849      	ldr	r1, [r1, #4]
 8012fd6:	c303      	stmia	r3!, {r0, r1}
 8012fd8:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012fdc:	a807      	add	r0, sp, #28
 8012fde:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8012fe2:	2b13      	cmp	r3, #19
 8012fe4:	440b      	add	r3, r1
 8012fe6:	bfd8      	it	le
 8012fe8:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 8012fec:	1a9b      	subs	r3, r3, r2
 8012fee:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012ff2:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012ff6:	f7fe ffa1 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8012ffa:	a807      	add	r0, sp, #28
 8012ffc:	f7fa fcc1 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013000:	bb78      	cbnz	r0, 8013062 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013002:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 8013006:	4426      	add	r6, r4
 8013008:	f8d9 0000 	ldr.w	r0, [r9]
 801300c:	f1bc 0f14 	cmp.w	ip, #20
 8013010:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8013014:	f8d0 e000 	ldr.w	lr, [r0]
 8013018:	bfa8      	it	ge
 801301a:	f04f 0c14 	movge.w	ip, #20
 801301e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8013022:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8013026:	fa1f fc8c 	uxth.w	ip, ip
 801302a:	f8cd c000 	str.w	ip, [sp]
 801302e:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8013032:	47d8      	blx	fp
 8013034:	4683      	mov	fp, r0
 8013036:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801303a:	a807      	add	r0, sp, #28
 801303c:	f7fe ff64 	bl	8011f08 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013040:	6823      	ldr	r3, [r4, #0]
 8013042:	4620      	mov	r0, r4
 8013044:	a907      	add	r1, sp, #28
 8013046:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013048:	4798      	blx	r3
 801304a:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 801304e:	eba0 000b 	sub.w	r0, r0, fp
 8013052:	b200      	sxth	r0, r0
 8013054:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8013058:	b918      	cbnz	r0, 8013062 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801305a:	b2b9      	uxth	r1, r7
 801305c:	4650      	mov	r0, sl
 801305e:	f7ff fa7b 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013062:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 8013066:	f1bb 0f00 	cmp.w	fp, #0
 801306a:	f43f af2c 	beq.w	8012ec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801306e:	882b      	ldrh	r3, [r5, #0]
 8013070:	2700      	movs	r7, #0
 8013072:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 8013076:	3301      	adds	r3, #1
 8013078:	b29b      	uxth	r3, r3
 801307a:	b299      	uxth	r1, r3
 801307c:	00fe      	lsls	r6, r7, #3
 801307e:	458b      	cmp	fp, r1
 8013080:	d9a4      	bls.n	8012fcc <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8013082:	4426      	add	r6, r4
 8013084:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8013088:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 801308c:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013090:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8013094:	4408      	add	r0, r1
 8013096:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801309a:	4461      	add	r1, ip
 801309c:	b200      	sxth	r0, r0
 801309e:	b209      	sxth	r1, r1
 80130a0:	4288      	cmp	r0, r1
 80130a2:	f6bf af72 	bge.w	8012f8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80130a6:	4584      	cmp	ip, r0
 80130a8:	4662      	mov	r2, ip
 80130aa:	461f      	mov	r7, r3
 80130ac:	bfb8      	it	lt
 80130ae:	4602      	movlt	r2, r0
 80130b0:	3301      	adds	r3, #1
 80130b2:	e7e2      	b.n	801307a <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80130b4:	d10e      	bne.n	80130d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80130b6:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80130ba:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80130be:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80130c2:	4473      	add	r3, lr
 80130c4:	b21b      	sxth	r3, r3
 80130c6:	429e      	cmp	r6, r3
 80130c8:	bfa8      	it	ge
 80130ca:	461e      	movge	r6, r3
 80130cc:	4287      	cmp	r7, r0
 80130ce:	bfb8      	it	lt
 80130d0:	46e1      	movlt	r9, ip
 80130d2:	e757      	b.n	8012f84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80130d4:	4286      	cmp	r6, r0
 80130d6:	bfa8      	it	ge
 80130d8:	4606      	movge	r6, r0
 80130da:	e753      	b.n	8012f84 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80130dc:	eb0a 0007 	add.w	r0, sl, r7
 80130e0:	4427      	add	r7, r4
 80130e2:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80130e6:	f1bb 0f13 	cmp.w	fp, #19
 80130ea:	bfdc      	itt	le
 80130ec:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80130f0:	445e      	addle	r6, fp
 80130f2:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80130f6:	bfd8      	it	le
 80130f8:	b236      	sxthle	r6, r6
 80130fa:	f7fa fc42 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80130fe:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013102:	2800      	cmp	r0, #0
 8013104:	f47f af1a 	bne.w	8012f3c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 8013108:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 801310c:	fa1f fb8b 	uxth.w	fp, fp
 8013110:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013114:	1ab6      	subs	r6, r6, r2
 8013116:	4829      	ldr	r0, [pc, #164]	@ (80131bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 8013118:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 801311c:	2e14      	cmp	r6, #20
 801311e:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8013122:	6800      	ldr	r0, [r0, #0]
 8013124:	bfa8      	it	ge
 8013126:	2614      	movge	r6, #20
 8013128:	f8ad 101c 	strh.w	r1, [sp, #28]
 801312c:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013130:	b289      	uxth	r1, r1
 8013132:	f8ad 3020 	strh.w	r3, [sp, #32]
 8013136:	b2b6      	uxth	r6, r6
 8013138:	f8d0 c000 	ldr.w	ip, [r0]
 801313c:	b292      	uxth	r2, r2
 801313e:	455e      	cmp	r6, fp
 8013140:	bf94      	ite	ls
 8013142:	9600      	strls	r6, [sp, #0]
 8013144:	f8cd b000 	strhi.w	fp, [sp]
 8013148:	b29b      	uxth	r3, r3
 801314a:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 801314e:	47b0      	blx	r6
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013156:	a907      	add	r1, sp, #28
 8013158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801315a:	4620      	mov	r0, r4
 801315c:	4798      	blx	r3
 801315e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8013162:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8013166:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801316a:	1a5b      	subs	r3, r3, r1
 801316c:	440a      	add	r2, r1
 801316e:	b21b      	sxth	r3, r3
 8013170:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8013174:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8013178:	2b00      	cmp	r3, #0
 801317a:	f47f aeda 	bne.w	8012f32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801317e:	fa1f f189 	uxth.w	r1, r9
 8013182:	4650      	mov	r0, sl
 8013184:	f7ff f9e8 	bl	8012558 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013188:	e6d3      	b.n	8012f32 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801318a:	882e      	ldrh	r6, [r5, #0]
 801318c:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013190:	42b3      	cmp	r3, r6
 8013192:	f67f ae98 	bls.w	8012ec6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013196:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801319a:	ab07      	add	r3, sp, #28
 801319c:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80131a0:	6851      	ldr	r1, [r2, #4]
 80131a2:	c303      	stmia	r3!, {r0, r1}
 80131a4:	a807      	add	r0, sp, #28
 80131a6:	f7fa fbec 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80131aa:	b920      	cbnz	r0, 80131b6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80131ac:	6823      	ldr	r3, [r4, #0]
 80131ae:	a907      	add	r1, sp, #28
 80131b0:	4620      	mov	r0, r4
 80131b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80131b4:	4798      	blx	r3
 80131b6:	3601      	adds	r6, #1
 80131b8:	b2b6      	uxth	r6, r6
 80131ba:	e7e7      	b.n	801318c <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80131bc:	24025274 	.word	0x24025274

080131c0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80131c0:	4b03      	ldr	r3, [pc, #12]	@ (80131d0 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80131c2:	2200      	movs	r2, #0
 80131c4:	801a      	strh	r2, [r3, #0]
 80131c6:	805a      	strh	r2, [r3, #2]
 80131c8:	809a      	strh	r2, [r3, #4]
 80131ca:	80da      	strh	r2, [r3, #6]
 80131cc:	4770      	bx	lr
 80131ce:	bf00      	nop
 80131d0:	240252c0 	.word	0x240252c0

080131d4 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80131d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131d8:	b09d      	sub	sp, #116	@ 0x74
 80131da:	4606      	mov	r6, r0
 80131dc:	4614      	mov	r4, r2
 80131de:	468a      	mov	sl, r1
 80131e0:	a803      	add	r0, sp, #12
 80131e2:	461d      	mov	r5, r3
 80131e4:	f001 f979 	bl	80144da <_ZN8touchgfx12TextProviderC1Ev>
 80131e8:	6833      	ldr	r3, [r6, #0]
 80131ea:	4630      	mov	r0, r6
 80131ec:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80131f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80131f2:	4798      	blx	r3
 80131f4:	6833      	ldr	r3, [r6, #0]
 80131f6:	4607      	mov	r7, r0
 80131f8:	4630      	mov	r0, r6
 80131fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80131fc:	4798      	blx	r3
 80131fe:	462a      	mov	r2, r5
 8013200:	2500      	movs	r5, #0
 8013202:	4621      	mov	r1, r4
 8013204:	9000      	str	r0, [sp, #0]
 8013206:	463b      	mov	r3, r7
 8013208:	462c      	mov	r4, r5
 801320a:	46a9      	mov	r9, r5
 801320c:	46a8      	mov	r8, r5
 801320e:	a803      	add	r0, sp, #12
 8013210:	f001 f9b6 	bl	8014580 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013214:	2300      	movs	r3, #0
 8013216:	9302      	str	r3, [sp, #8]
 8013218:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 801321c:	429c      	cmp	r4, r3
 801321e:	d002      	beq.n	8013226 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8013220:	455c      	cmp	r4, fp
 8013222:	bf18      	it	ne
 8013224:	4625      	movne	r5, r4
 8013226:	ab02      	add	r3, sp, #8
 8013228:	4632      	mov	r2, r6
 801322a:	4651      	mov	r1, sl
 801322c:	a803      	add	r0, sp, #12
 801322e:	f001 fcc9 	bl	8014bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8013232:	4604      	mov	r4, r0
 8013234:	b108      	cbz	r0, 801323a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8013236:	280a      	cmp	r0, #10
 8013238:	d10a      	bne.n	8013250 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801323a:	45c1      	cmp	r9, r8
 801323c:	bf38      	it	cc
 801323e:	46c1      	movcc	r9, r8
 8013240:	f04f 0800 	mov.w	r8, #0
 8013244:	2c00      	cmp	r4, #0
 8013246:	d1e5      	bne.n	8013214 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013248:	4648      	mov	r0, r9
 801324a:	b01d      	add	sp, #116	@ 0x74
 801324c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013250:	9a02      	ldr	r2, [sp, #8]
 8013252:	2a00      	cmp	r2, #0
 8013254:	d0de      	beq.n	8013214 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013256:	7b57      	ldrb	r7, [r2, #13]
 8013258:	4629      	mov	r1, r5
 801325a:	6833      	ldr	r3, [r6, #0]
 801325c:	007f      	lsls	r7, r7, #1
 801325e:	8894      	ldrh	r4, [r2, #4]
 8013260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013262:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8013266:	7a97      	ldrb	r7, [r2, #10]
 8013268:	4307      	orrs	r7, r0
 801326a:	4630      	mov	r0, r6
 801326c:	4798      	blx	r3
 801326e:	4438      	add	r0, r7
 8013270:	4480      	add	r8, r0
 8013272:	fa1f f888 	uxth.w	r8, r8
 8013276:	e7e5      	b.n	8013244 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013278 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013278:	b508      	push	{r3, lr}
 801327a:	6803      	ldr	r3, [r0, #0]
 801327c:	68db      	ldr	r3, [r3, #12]
 801327e:	4798      	blx	r3
 8013280:	b128      	cbz	r0, 801328e <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8013282:	7b43      	ldrb	r3, [r0, #13]
 8013284:	7a80      	ldrb	r0, [r0, #10]
 8013286:	005b      	lsls	r3, r3, #1
 8013288:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801328c:	4318      	orrs	r0, r3
 801328e:	bd08      	pop	{r3, pc}

08013290 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013290:	b40e      	push	{r1, r2, r3}
 8013292:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013294:	b09e      	sub	sp, #120	@ 0x78
 8013296:	4605      	mov	r5, r0
 8013298:	ab23      	add	r3, sp, #140	@ 0x8c
 801329a:	a805      	add	r0, sp, #20
 801329c:	f853 4b04 	ldr.w	r4, [r3], #4
 80132a0:	9303      	str	r3, [sp, #12]
 80132a2:	f001 f91a 	bl	80144da <_ZN8touchgfx12TextProviderC1Ev>
 80132a6:	682b      	ldr	r3, [r5, #0]
 80132a8:	4628      	mov	r0, r5
 80132aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80132ac:	4798      	blx	r3
 80132ae:	682b      	ldr	r3, [r5, #0]
 80132b0:	4606      	mov	r6, r0
 80132b2:	4628      	mov	r0, r5
 80132b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80132b6:	4798      	blx	r3
 80132b8:	4633      	mov	r3, r6
 80132ba:	4621      	mov	r1, r4
 80132bc:	ae1e      	add	r6, sp, #120	@ 0x78
 80132be:	2400      	movs	r4, #0
 80132c0:	9000      	str	r0, [sp, #0]
 80132c2:	9a03      	ldr	r2, [sp, #12]
 80132c4:	a805      	add	r0, sp, #20
 80132c6:	f001 f95b 	bl	8014580 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80132ca:	f846 4d68 	str.w	r4, [r6, #-104]!
 80132ce:	462a      	mov	r2, r5
 80132d0:	4633      	mov	r3, r6
 80132d2:	4621      	mov	r1, r4
 80132d4:	a805      	add	r0, sp, #20
 80132d6:	f001 fc75 	bl	8014bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80132da:	b300      	cbz	r0, 801331e <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80132dc:	280a      	cmp	r0, #10
 80132de:	d01a      	beq.n	8013316 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80132e0:	9f04      	ldr	r7, [sp, #16]
 80132e2:	b1c7      	cbz	r7, 8013316 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80132e4:	7b78      	ldrb	r0, [r7, #13]
 80132e6:	7a3b      	ldrb	r3, [r7, #8]
 80132e8:	00c1      	lsls	r1, r0, #3
 80132ea:	88ea      	ldrh	r2, [r5, #6]
 80132ec:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80132f0:	4319      	orrs	r1, r3
 80132f2:	0643      	lsls	r3, r0, #25
 80132f4:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80132f8:	bf48      	it	mi
 80132fa:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80132fe:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8013302:	bf48      	it	mi
 8013304:	b219      	sxthmi	r1, r3
 8013306:	79fb      	ldrb	r3, [r7, #7]
 8013308:	4303      	orrs	r3, r0
 801330a:	4413      	add	r3, r2
 801330c:	1a5b      	subs	r3, r3, r1
 801330e:	b21b      	sxth	r3, r3
 8013310:	429c      	cmp	r4, r3
 8013312:	bfb8      	it	lt
 8013314:	461c      	movlt	r4, r3
 8013316:	4633      	mov	r3, r6
 8013318:	462a      	mov	r2, r5
 801331a:	2100      	movs	r1, #0
 801331c:	e7da      	b.n	80132d4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801331e:	b2a0      	uxth	r0, r4
 8013320:	b01e      	add	sp, #120	@ 0x78
 8013322:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013326:	b003      	add	sp, #12
 8013328:	4770      	bx	lr

0801332a <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801332a:	7a43      	ldrb	r3, [r0, #9]
 801332c:	8880      	ldrh	r0, [r0, #4]
 801332e:	4418      	add	r0, r3
 8013330:	b280      	uxth	r0, r0
 8013332:	4770      	bx	lr

08013334 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8013334:	6803      	ldr	r3, [r0, #0]
 8013336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013338:	4718      	bx	r3

0801333a <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801333a:	b40e      	push	{r1, r2, r3}
 801333c:	b570      	push	{r4, r5, r6, lr}
 801333e:	b09d      	sub	sp, #116	@ 0x74
 8013340:	4604      	mov	r4, r0
 8013342:	ab21      	add	r3, sp, #132	@ 0x84
 8013344:	a803      	add	r0, sp, #12
 8013346:	f853 5b04 	ldr.w	r5, [r3], #4
 801334a:	9302      	str	r3, [sp, #8]
 801334c:	f001 f8c5 	bl	80144da <_ZN8touchgfx12TextProviderC1Ev>
 8013350:	6823      	ldr	r3, [r4, #0]
 8013352:	4620      	mov	r0, r4
 8013354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013356:	4798      	blx	r3
 8013358:	6823      	ldr	r3, [r4, #0]
 801335a:	4606      	mov	r6, r0
 801335c:	4620      	mov	r0, r4
 801335e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013360:	2401      	movs	r4, #1
 8013362:	4798      	blx	r3
 8013364:	4633      	mov	r3, r6
 8013366:	9000      	str	r0, [sp, #0]
 8013368:	4629      	mov	r1, r5
 801336a:	9a02      	ldr	r2, [sp, #8]
 801336c:	a803      	add	r0, sp, #12
 801336e:	f001 f907 	bl	8014580 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013372:	a803      	add	r0, sp, #12
 8013374:	f001 fca6 	bl	8014cc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013378:	b2a3      	uxth	r3, r4
 801337a:	b138      	cbz	r0, 801338c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 801337c:	280a      	cmp	r0, #10
 801337e:	a803      	add	r0, sp, #12
 8013380:	bf04      	itt	eq
 8013382:	3301      	addeq	r3, #1
 8013384:	b21c      	sxtheq	r4, r3
 8013386:	f001 fc9d 	bl	8014cc4 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801338a:	e7f5      	b.n	8013378 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 801338c:	4618      	mov	r0, r3
 801338e:	b01d      	add	sp, #116	@ 0x74
 8013390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013394:	b003      	add	sp, #12
 8013396:	4770      	bx	lr

08013398 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013398:	b40e      	push	{r1, r2, r3}
 801339a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801339c:	b09e      	sub	sp, #120	@ 0x78
 801339e:	4604      	mov	r4, r0
 80133a0:	ab23      	add	r3, sp, #140	@ 0x8c
 80133a2:	a805      	add	r0, sp, #20
 80133a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80133a8:	9303      	str	r3, [sp, #12]
 80133aa:	f001 f896 	bl	80144da <_ZN8touchgfx12TextProviderC1Ev>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	4620      	mov	r0, r4
 80133b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133b4:	4798      	blx	r3
 80133b6:	6823      	ldr	r3, [r4, #0]
 80133b8:	4606      	mov	r6, r0
 80133ba:	4620      	mov	r0, r4
 80133bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133be:	4798      	blx	r3
 80133c0:	4633      	mov	r3, r6
 80133c2:	4629      	mov	r1, r5
 80133c4:	9000      	str	r0, [sp, #0]
 80133c6:	9a03      	ldr	r2, [sp, #12]
 80133c8:	a805      	add	r0, sp, #20
 80133ca:	f001 f8d9 	bl	8014580 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80133ce:	ad1e      	add	r5, sp, #120	@ 0x78
 80133d0:	2100      	movs	r1, #0
 80133d2:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80133d6:	4622      	mov	r2, r4
 80133d8:	a805      	add	r0, sp, #20
 80133da:	f845 1d68 	str.w	r1, [r5, #-104]!
 80133de:	462b      	mov	r3, r5
 80133e0:	f001 fbf0 	bl	8014bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80133e4:	b1d8      	cbz	r0, 801341e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80133e6:	280a      	cmp	r0, #10
 80133e8:	d012      	beq.n	8013410 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80133ea:	9804      	ldr	r0, [sp, #16]
 80133ec:	b180      	cbz	r0, 8013410 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80133ee:	7b47      	ldrb	r7, [r0, #13]
 80133f0:	88e2      	ldrh	r2, [r4, #6]
 80133f2:	00fb      	lsls	r3, r7, #3
 80133f4:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80133f8:	7a03      	ldrb	r3, [r0, #8]
 80133fa:	430b      	orrs	r3, r1
 80133fc:	0679      	lsls	r1, r7, #25
 80133fe:	bf44      	itt	mi
 8013400:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8013404:	b21b      	sxthmi	r3, r3
 8013406:	1ad3      	subs	r3, r2, r3
 8013408:	b21b      	sxth	r3, r3
 801340a:	429e      	cmp	r6, r3
 801340c:	bfa8      	it	ge
 801340e:	461e      	movge	r6, r3
 8013410:	462b      	mov	r3, r5
 8013412:	4622      	mov	r2, r4
 8013414:	2100      	movs	r1, #0
 8013416:	a805      	add	r0, sp, #20
 8013418:	f001 fbd4 	bl	8014bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801341c:	e7e2      	b.n	80133e4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801341e:	4630      	mov	r0, r6
 8013420:	b01e      	add	sp, #120	@ 0x78
 8013422:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8013426:	b003      	add	sp, #12
 8013428:	4770      	bx	lr

0801342a <_ZNK8touchgfx8Drawable10invalidateEv>:
 801342a:	b513      	push	{r0, r1, r4, lr}
 801342c:	6803      	ldr	r3, [r0, #0]
 801342e:	2400      	movs	r4, #0
 8013430:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8013434:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013438:	f8ad 1004 	strh.w	r1, [sp, #4]
 801343c:	4669      	mov	r1, sp
 801343e:	691b      	ldr	r3, [r3, #16]
 8013440:	9400      	str	r4, [sp, #0]
 8013442:	f8ad 2006 	strh.w	r2, [sp, #6]
 8013446:	4798      	blx	r3
 8013448:	b002      	add	sp, #8
 801344a:	bd10      	pop	{r4, pc}

0801344c <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801344c:	b538      	push	{r3, r4, r5, lr}
 801344e:	680b      	ldr	r3, [r1, #0]
 8013450:	460c      	mov	r4, r1
 8013452:	4605      	mov	r5, r0
 8013454:	68db      	ldr	r3, [r3, #12]
 8013456:	4798      	blx	r3
 8013458:	6823      	ldr	r3, [r4, #0]
 801345a:	4620      	mov	r0, r4
 801345c:	4629      	mov	r1, r5
 801345e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013460:	4798      	blx	r3
 8013462:	4628      	mov	r0, r5
 8013464:	bd38      	pop	{r3, r4, r5, pc}

08013466 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8013466:	b410      	push	{r4}
 8013468:	880a      	ldrh	r2, [r1, #0]
 801346a:	8884      	ldrh	r4, [r0, #4]
 801346c:	4422      	add	r2, r4
 801346e:	800a      	strh	r2, [r1, #0]
 8013470:	884a      	ldrh	r2, [r1, #2]
 8013472:	88c4      	ldrh	r4, [r0, #6]
 8013474:	4422      	add	r2, r4
 8013476:	804a      	strh	r2, [r1, #2]
 8013478:	6940      	ldr	r0, [r0, #20]
 801347a:	b120      	cbz	r0, 8013486 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801347c:	6803      	ldr	r3, [r0, #0]
 801347e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013484:	4718      	bx	r3
 8013486:	f85d 4b04 	ldr.w	r4, [sp], #4
 801348a:	4770      	bx	lr

0801348c <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801348c:	b570      	push	{r4, r5, r6, lr}
 801348e:	8882      	ldrh	r2, [r0, #4]
 8013490:	460c      	mov	r4, r1
 8013492:	880b      	ldrh	r3, [r1, #0]
 8013494:	4605      	mov	r5, r0
 8013496:	4413      	add	r3, r2
 8013498:	800b      	strh	r3, [r1, #0]
 801349a:	884b      	ldrh	r3, [r1, #2]
 801349c:	88c2      	ldrh	r2, [r0, #6]
 801349e:	4413      	add	r3, r2
 80134a0:	804b      	strh	r3, [r1, #2]
 80134a2:	1d01      	adds	r1, r0, #4
 80134a4:	4620      	mov	r0, r4
 80134a6:	f7fa fa29 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 80134aa:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	dd0b      	ble.n	80134ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80134b2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	dd07      	ble.n	80134ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80134ba:	6968      	ldr	r0, [r5, #20]
 80134bc:	b128      	cbz	r0, 80134ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80134be:	6803      	ldr	r3, [r0, #0]
 80134c0:	4621      	mov	r1, r4
 80134c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80134c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134c8:	4718      	bx	r3
 80134ca:	bd70      	pop	{r4, r5, r6, pc}

080134cc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80134cc:	b570      	push	{r4, r5, r6, lr}
 80134ce:	8882      	ldrh	r2, [r0, #4]
 80134d0:	460c      	mov	r4, r1
 80134d2:	880b      	ldrh	r3, [r1, #0]
 80134d4:	4605      	mov	r5, r0
 80134d6:	4413      	add	r3, r2
 80134d8:	800b      	strh	r3, [r1, #0]
 80134da:	884b      	ldrh	r3, [r1, #2]
 80134dc:	88c2      	ldrh	r2, [r0, #6]
 80134de:	4413      	add	r3, r2
 80134e0:	804b      	strh	r3, [r1, #2]
 80134e2:	1d01      	adds	r1, r0, #4
 80134e4:	4620      	mov	r0, r4
 80134e6:	f7fa fa09 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 80134ea:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	dd19      	ble.n	8013526 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80134f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	dd15      	ble.n	8013526 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80134fa:	6968      	ldr	r0, [r5, #20]
 80134fc:	b128      	cbz	r0, 801350a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80134fe:	6803      	ldr	r3, [r0, #0]
 8013500:	4621      	mov	r1, r4
 8013502:	691b      	ldr	r3, [r3, #16]
 8013504:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013508:	4718      	bx	r3
 801350a:	4b07      	ldr	r3, [pc, #28]	@ (8013528 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	3304      	adds	r3, #4
 8013510:	429d      	cmp	r5, r3
 8013512:	d108      	bne.n	8013526 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8013514:	f7fe fec6 	bl	80122a4 <_ZN8touchgfx11Application11getInstanceEv>
 8013518:	6803      	ldr	r3, [r0, #0]
 801351a:	6821      	ldr	r1, [r4, #0]
 801351c:	6862      	ldr	r2, [r4, #4]
 801351e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013520:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013524:	4718      	bx	r3
 8013526:	bd70      	pop	{r4, r5, r6, pc}
 8013528:	240252b8 	.word	0x240252b8

0801352c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801352c:	b570      	push	{r4, r5, r6, lr}
 801352e:	4604      	mov	r4, r0
 8013530:	4616      	mov	r6, r2
 8013532:	460d      	mov	r5, r1
 8013534:	b901      	cbnz	r1, 8013538 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8013536:	b192      	cbz	r2, 801355e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013538:	6823      	ldr	r3, [r4, #0]
 801353a:	4620      	mov	r0, r4
 801353c:	699b      	ldr	r3, [r3, #24]
 801353e:	4798      	blx	r3
 8013540:	88e2      	ldrh	r2, [r4, #6]
 8013542:	88a1      	ldrh	r1, [r4, #4]
 8013544:	4620      	mov	r0, r4
 8013546:	4432      	add	r2, r6
 8013548:	4429      	add	r1, r5
 801354a:	b212      	sxth	r2, r2
 801354c:	b209      	sxth	r1, r1
 801354e:	f7fa fcab 	bl	800dea8 <_ZN8touchgfx8Drawable5setXYEss>
 8013552:	6823      	ldr	r3, [r4, #0]
 8013554:	4620      	mov	r0, r4
 8013556:	699b      	ldr	r3, [r3, #24]
 8013558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801355c:	4718      	bx	r3
 801355e:	bd70      	pop	{r4, r5, r6, pc}

08013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013560:	b510      	push	{r4, lr}
 8013562:	2300      	movs	r3, #0
 8013564:	4604      	mov	r4, r0
 8013566:	4608      	mov	r0, r1
 8013568:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801356c:	8023      	strh	r3, [r4, #0]
 801356e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013572:	8063      	strh	r3, [r4, #2]
 8013574:	6803      	ldr	r3, [r0, #0]
 8013576:	80a1      	strh	r1, [r4, #4]
 8013578:	4621      	mov	r1, r4
 801357a:	80e2      	strh	r2, [r4, #6]
 801357c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801357e:	4798      	blx	r3
 8013580:	4620      	mov	r0, r4
 8013582:	bd10      	pop	{r4, pc}

08013584 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8013584:	4770      	bx	lr

08013586 <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8013586:	b510      	push	{r4, lr}
 8013588:	4604      	mov	r4, r0
 801358a:	211c      	movs	r1, #28
 801358c:	f00e fa2d 	bl	80219ea <_ZdlPvj>
 8013590:	4620      	mov	r0, r4
 8013592:	bd10      	pop	{r4, pc}

08013594 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8013594:	4a04      	ldr	r2, [pc, #16]	@ (80135a8 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8013596:	6002      	str	r2, [r0, #0]
 8013598:	2200      	movs	r2, #0
 801359a:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801359e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80135a2:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80135a6:	4770      	bx	lr
 80135a8:	08025dd8 	.word	0x08025dd8

080135ac <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 80135ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135b0:	4604      	mov	r4, r0
 80135b2:	b087      	sub	sp, #28
 80135b4:	4696      	mov	lr, r2
 80135b6:	6880      	ldr	r0, [r0, #8]
 80135b8:	8b22      	ldrh	r2, [r4, #24]
 80135ba:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80135be:	9105      	str	r1, [sp, #20]
 80135c0:	1c51      	adds	r1, r2, #1
 80135c2:	8321      	strh	r1, [r4, #24]
 80135c4:	2101      	movs	r1, #1
 80135c6:	5481      	strb	r1, [r0, r2]
 80135c8:	4689      	mov	r9, r1
 80135ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80135ce:	8b60      	ldrh	r0, [r4, #26]
 80135d0:	ee06 2a90 	vmov	s13, r2
 80135d4:	68e2      	ldr	r2, [r4, #12]
 80135d6:	1845      	adds	r5, r0, r1
 80135d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80135dc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80135e0:	8365      	strh	r5, [r4, #26]
 80135e2:	edc2 6a00 	vstr	s13, [r2]
 80135e6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80135ea:	8b60      	ldrh	r0, [r4, #26]
 80135ec:	ee07 2a10 	vmov	s14, r2
 80135f0:	68e2      	ldr	r2, [r4, #12]
 80135f2:	1845      	adds	r5, r0, r1
 80135f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135f8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80135fc:	8365      	strh	r5, [r4, #26]
 80135fe:	1d18      	adds	r0, r3, #4
 8013600:	460d      	mov	r5, r1
 8013602:	ed82 7a00 	vstr	s14, [r2]
 8013606:	f8be 2000 	ldrh.w	r2, [lr]
 801360a:	9203      	str	r2, [sp, #12]
 801360c:	2200      	movs	r2, #0
 801360e:	4613      	mov	r3, r2
 8013610:	4694      	mov	ip, r2
 8013612:	9201      	str	r2, [sp, #4]
 8013614:	9202      	str	r2, [sp, #8]
 8013616:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801361a:	9e05      	ldr	r6, [sp, #20]
 801361c:	f108 0701 	add.w	r7, r8, #1
 8013620:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8013624:	428e      	cmp	r6, r1
 8013626:	b2bf      	uxth	r7, r7
 8013628:	eb0a 0b08 	add.w	fp, sl, r8
 801362c:	f340 80b6 	ble.w	801379c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8013630:	9b03      	ldr	r3, [sp, #12]
 8013632:	f9b0 c000 	ldrsh.w	ip, [r0]
 8013636:	fa43 fb05 	asr.w	fp, r3, r5
 801363a:	f00b 0b01 	and.w	fp, fp, #1
 801363e:	fa5f f38b 	uxtb.w	r3, fp
 8013642:	9304      	str	r3, [sp, #16]
 8013644:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013648:	f1bb 0f00 	cmp.w	fp, #0
 801364c:	d057      	beq.n	80136fe <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 801364e:	ee07 ca90 	vmov	s15, ip
 8013652:	8327      	strh	r7, [r4, #24]
 8013654:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013658:	ee07 3a90 	vmov	s15, r3
 801365c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013660:	f1b9 0f00 	cmp.w	r9, #0
 8013664:	d028      	beq.n	80136b8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8013666:	f04f 0602 	mov.w	r6, #2
 801366a:	f80a 6008 	strb.w	r6, [sl, r8]
 801366e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013672:	68e7      	ldr	r7, [r4, #12]
 8013674:	f108 0901 	add.w	r9, r8, #1
 8013678:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801367c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013680:	edc7 5a00 	vstr	s11, [r7]
 8013684:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013688:	68e7      	ldr	r7, [r4, #12]
 801368a:	f108 0901 	add.w	r9, r8, #1
 801368e:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013692:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013696:	edc7 7a00 	vstr	s15, [r7]
 801369a:	3501      	adds	r5, #1
 801369c:	2d10      	cmp	r5, #16
 801369e:	d106      	bne.n	80136ae <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 80136a0:	9d02      	ldr	r5, [sp, #8]
 80136a2:	3501      	adds	r5, #1
 80136a4:	9502      	str	r5, [sp, #8]
 80136a6:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 80136aa:	9503      	str	r5, [sp, #12]
 80136ac:	2500      	movs	r5, #0
 80136ae:	3101      	adds	r1, #1
 80136b0:	3004      	adds	r0, #4
 80136b2:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80136b6:	e7ae      	b.n	8013616 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 80136b8:	f04f 0605 	mov.w	r6, #5
 80136bc:	ed9d 5a01 	vldr	s10, [sp, #4]
 80136c0:	f80a 6008 	strb.w	r6, [sl, r8]
 80136c4:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80136c8:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80136cc:	68e7      	ldr	r7, [r4, #12]
 80136ce:	f108 0901 	add.w	r9, r8, #1
 80136d2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80136d6:	f8a4 901a 	strh.w	r9, [r4, #26]
 80136da:	ed87 5a00 	vstr	s10, [r7]
 80136de:	ee05 2a10 	vmov	s10, r2
 80136e2:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80136e6:	68e7      	ldr	r7, [r4, #12]
 80136e8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80136ec:	f108 0901 	add.w	r9, r8, #1
 80136f0:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80136f4:	f8a4 901a 	strh.w	r9, [r4, #26]
 80136f8:	ed87 5a00 	vstr	s10, [r7]
 80136fc:	e7b7      	b.n	801366e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 80136fe:	f1b9 0f00 	cmp.w	r9, #0
 8013702:	d147      	bne.n	8013794 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8013704:	f04f 0605 	mov.w	r6, #5
 8013708:	eddd 7a01 	vldr	s15, [sp, #4]
 801370c:	8327      	strh	r7, [r4, #24]
 801370e:	f80a 6008 	strb.w	r6, [sl, r8]
 8013712:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013716:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801371a:	68e7      	ldr	r7, [r4, #12]
 801371c:	f108 0901 	add.w	r9, r8, #1
 8013720:	9e01      	ldr	r6, [sp, #4]
 8013722:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013726:	f8a4 901a 	strh.w	r9, [r4, #26]
 801372a:	4466      	add	r6, ip
 801372c:	edc7 7a00 	vstr	s15, [r7]
 8013730:	ee07 2a90 	vmov	s15, r2
 8013734:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013738:	441a      	add	r2, r3
 801373a:	68e7      	ldr	r7, [r4, #12]
 801373c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013740:	f108 0901 	add.w	r9, r8, #1
 8013744:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013748:	f8a4 901a 	strh.w	r9, [r4, #26]
 801374c:	edc7 7a00 	vstr	s15, [r7]
 8013750:	ee07 6a90 	vmov	s15, r6
 8013754:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013758:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801375c:	68e7      	ldr	r7, [r4, #12]
 801375e:	f108 0901 	add.w	r9, r8, #1
 8013762:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013766:	ee67 7a86 	vmul.f32	s15, s15, s12
 801376a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801376e:	edc7 7a00 	vstr	s15, [r7]
 8013772:	ee07 2a90 	vmov	s15, r2
 8013776:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801377a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801377e:	68e7      	ldr	r7, [r4, #12]
 8013780:	f108 0901 	add.w	r9, r8, #1
 8013784:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013788:	ee67 7a86 	vmul.f32	s15, s15, s12
 801378c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013790:	edc7 7a00 	vstr	s15, [r7]
 8013794:	461a      	mov	r2, r3
 8013796:	f8cd c004 	str.w	ip, [sp, #4]
 801379a:	e77e      	b.n	801369a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 801379c:	f1b9 0f00 	cmp.w	r9, #0
 80137a0:	d028      	beq.n	80137f4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 80137a2:	ee07 ca90 	vmov	s15, ip
 80137a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137aa:	eef4 6a67 	vcmp.f32	s13, s15
 80137ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137b2:	d108      	bne.n	80137c6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 80137b4:	ee07 3a90 	vmov	s15, r3
 80137b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137bc:	eeb4 7a67 	vcmp.f32	s14, s15
 80137c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c4:	d016      	beq.n	80137f4 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 80137c6:	2302      	movs	r3, #2
 80137c8:	8327      	strh	r7, [r4, #24]
 80137ca:	f88b 3000 	strb.w	r3, [fp]
 80137ce:	8b62      	ldrh	r2, [r4, #26]
 80137d0:	68e3      	ldr	r3, [r4, #12]
 80137d2:	1c51      	adds	r1, r2, #1
 80137d4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80137d8:	8361      	strh	r1, [r4, #26]
 80137da:	edc3 6a00 	vstr	s13, [r3]
 80137de:	8b62      	ldrh	r2, [r4, #26]
 80137e0:	68e3      	ldr	r3, [r4, #12]
 80137e2:	1c51      	adds	r1, r2, #1
 80137e4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80137e8:	8361      	strh	r1, [r4, #26]
 80137ea:	ed83 7a00 	vstr	s14, [r3]
 80137ee:	b007      	add	sp, #28
 80137f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137f4:	2305      	movs	r3, #5
 80137f6:	eddd 7a01 	vldr	s15, [sp, #4]
 80137fa:	8327      	strh	r7, [r4, #24]
 80137fc:	f88b 3000 	strb.w	r3, [fp]
 8013800:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013804:	8b61      	ldrh	r1, [r4, #26]
 8013806:	68e3      	ldr	r3, [r4, #12]
 8013808:	1c4d      	adds	r5, r1, #1
 801380a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801380e:	8365      	strh	r5, [r4, #26]
 8013810:	edc3 7a00 	vstr	s15, [r3]
 8013814:	ee07 2a90 	vmov	s15, r2
 8013818:	8b61      	ldrh	r1, [r4, #26]
 801381a:	68e3      	ldr	r3, [r4, #12]
 801381c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013820:	1c4d      	adds	r5, r1, #1
 8013822:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8013826:	8365      	strh	r5, [r4, #26]
 8013828:	edc3 7a00 	vstr	s15, [r3]
 801382c:	e7cf      	b.n	80137ce <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08013830 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8013830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013834:	4604      	mov	r4, r0
 8013836:	b08e      	sub	sp, #56	@ 0x38
 8013838:	4699      	mov	r9, r3
 801383a:	4688      	mov	r8, r1
 801383c:	4615      	mov	r5, r2
 801383e:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013840:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8013844:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013846:	f7ef ff51 	bl	80036ec <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801384a:	6060      	str	r0, [r4, #4]
 801384c:	f1b9 0f00 	cmp.w	r9, #0
 8013850:	f000 80e8 	beq.w	8013a24 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013854:	2800      	cmp	r0, #0
 8013856:	f000 80e5 	beq.w	8013a24 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801385a:	a805      	add	r0, sp, #20
 801385c:	f000 f8f9 	bl	8013a52 <_ZN8touchgfx9Matrix3x3C1Ev>
 8013860:	6833      	ldr	r3, [r6, #0]
 8013862:	4630      	mov	r0, r6
 8013864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013866:	4798      	blx	r3
 8013868:	a805      	add	r0, sp, #20
 801386a:	eef0 0a40 	vmov.f32	s1, s0
 801386e:	f000 f8f4 	bl	8013a5a <_ZN8touchgfx9Matrix3x35scaleEff>
 8013872:	6860      	ldr	r0, [r4, #4]
 8013874:	f1ba 0f03 	cmp.w	sl, #3
 8013878:	d83b      	bhi.n	80138f2 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801387a:	e8df f00a 	tbb	[pc, sl]
 801387e:	1002      	.short	0x1002
 8013880:	9f71      	.short	0x9f71
 8013882:	6803      	ldr	r3, [r0, #0]
 8013884:	462a      	mov	r2, r5
 8013886:	4641      	mov	r1, r8
 8013888:	689b      	ldr	r3, [r3, #8]
 801388a:	4798      	blx	r3
 801388c:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013890:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013894:	ee07 7a90 	vmov	s15, r7
 8013898:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801389c:	e026      	b.n	80138ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 801389e:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80138a2:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80138a6:	8869      	ldrh	r1, [r5, #2]
 80138a8:	1a9b      	subs	r3, r3, r2
 80138aa:	f8ad 2010 	strh.w	r2, [sp, #16]
 80138ae:	aa03      	add	r2, sp, #12
 80138b0:	1a5b      	subs	r3, r3, r1
 80138b2:	4641      	mov	r1, r8
 80138b4:	f8ad 300c 	strh.w	r3, [sp, #12]
 80138b8:	882b      	ldrh	r3, [r5, #0]
 80138ba:	f8ad 300e 	strh.w	r3, [sp, #14]
 80138be:	88ab      	ldrh	r3, [r5, #4]
 80138c0:	f8ad 3012 	strh.w	r3, [sp, #18]
 80138c4:	6803      	ldr	r3, [r0, #0]
 80138c6:	689b      	ldr	r3, [r3, #8]
 80138c8:	4798      	blx	r3
 80138ca:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8013a2c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 80138ce:	a805      	add	r0, sp, #20
 80138d0:	f000 f8e8 	bl	8013aa4 <_ZN8touchgfx9Matrix3x36rotateEf>
 80138d4:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80138d8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80138da:	ee07 7a90 	vmov	s15, r7
 80138de:	1a9b      	subs	r3, r3, r2
 80138e0:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80138e4:	ee00 3a10 	vmov	s0, r3
 80138e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80138ec:	a805      	add	r0, sp, #20
 80138ee:	f000 f927 	bl	8013b40 <_ZN8touchgfx9Matrix3x39translateEff>
 80138f2:	6860      	ldr	r0, [r4, #4]
 80138f4:	a905      	add	r1, sp, #20
 80138f6:	2500      	movs	r5, #0
 80138f8:	f109 0602 	add.w	r6, r9, #2
 80138fc:	6803      	ldr	r3, [r0, #0]
 80138fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013900:	4798      	blx	r3
 8013902:	6860      	ldr	r0, [r4, #4]
 8013904:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013906:	6803      	ldr	r3, [r0, #0]
 8013908:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 801390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801390e:	4798      	blx	r3
 8013910:	6860      	ldr	r0, [r4, #4]
 8013912:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8013916:	6803      	ldr	r3, [r0, #0]
 8013918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801391a:	4798      	blx	r3
 801391c:	6860      	ldr	r0, [r4, #4]
 801391e:	2101      	movs	r1, #1
 8013920:	6803      	ldr	r3, [r0, #0]
 8013922:	68db      	ldr	r3, [r3, #12]
 8013924:	4798      	blx	r3
 8013926:	f8b9 7000 	ldrh.w	r7, [r9]
 801392a:	f104 0310 	add.w	r3, r4, #16
 801392e:	61a5      	str	r5, [r4, #24]
 8013930:	f104 0208 	add.w	r2, r4, #8
 8013934:	f104 0114 	add.w	r1, r4, #20
 8013938:	f104 000c 	add.w	r0, r4, #12
 801393c:	f7f0 fbec 	bl	8004118 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8013940:	42af      	cmp	r7, r5
 8013942:	dd60      	ble.n	8013a06 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8013944:	8831      	ldrh	r1, [r6, #0]
 8013946:	1cb2      	adds	r2, r6, #2
 8013948:	4620      	mov	r0, r4
 801394a:	3501      	adds	r5, #1
 801394c:	f101 030f 	add.w	r3, r1, #15
 8013950:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8013954:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8013958:	f7ff fe28 	bl	80135ac <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 801395c:	4606      	mov	r6, r0
 801395e:	e7ef      	b.n	8013940 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8013960:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013964:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013968:	8829      	ldrh	r1, [r5, #0]
 801396a:	1a9b      	subs	r3, r3, r2
 801396c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013970:	aa03      	add	r2, sp, #12
 8013972:	1a5b      	subs	r3, r3, r1
 8013974:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013978:	886d      	ldrh	r5, [r5, #2]
 801397a:	f8ad 300c 	strh.w	r3, [sp, #12]
 801397e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013982:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013986:	1a5b      	subs	r3, r3, r1
 8013988:	4641      	mov	r1, r8
 801398a:	1b5b      	subs	r3, r3, r5
 801398c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013990:	6803      	ldr	r3, [r0, #0]
 8013992:	689b      	ldr	r3, [r3, #8]
 8013994:	4798      	blx	r3
 8013996:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8013a30 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801399a:	a805      	add	r0, sp, #20
 801399c:	f000 f882 	bl	8013aa4 <_ZN8touchgfx9Matrix3x36rotateEf>
 80139a0:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80139a4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80139a6:	1a9b      	subs	r3, r3, r2
 80139a8:	ee00 3a90 	vmov	s1, r3
 80139ac:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80139b0:	1bdb      	subs	r3, r3, r7
 80139b2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80139b6:	ee00 3a10 	vmov	s0, r3
 80139ba:	e795      	b.n	80138e8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 80139bc:	886b      	ldrh	r3, [r5, #2]
 80139be:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 80139c2:	f8ad 300c 	strh.w	r3, [sp, #12]
 80139c6:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 80139ca:	8829      	ldrh	r1, [r5, #0]
 80139cc:	1a9b      	subs	r3, r3, r2
 80139ce:	f8ad 2012 	strh.w	r2, [sp, #18]
 80139d2:	aa03      	add	r2, sp, #12
 80139d4:	1a5b      	subs	r3, r3, r1
 80139d6:	4641      	mov	r1, r8
 80139d8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80139dc:	88eb      	ldrh	r3, [r5, #6]
 80139de:	f8ad 3010 	strh.w	r3, [sp, #16]
 80139e2:	6803      	ldr	r3, [r0, #0]
 80139e4:	689b      	ldr	r3, [r3, #8]
 80139e6:	4798      	blx	r3
 80139e8:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8013a34 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 80139ec:	a805      	add	r0, sp, #20
 80139ee:	f000 f859 	bl	8013aa4 <_ZN8touchgfx9Matrix3x36rotateEf>
 80139f2:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80139f6:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80139fa:	1bdb      	subs	r3, r3, r7
 80139fc:	ee00 3a90 	vmov	s1, r3
 8013a00:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013a04:	e748      	b.n	8013898 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8013a06:	6860      	ldr	r0, [r4, #4]
 8013a08:	2100      	movs	r1, #0
 8013a0a:	8b22      	ldrh	r2, [r4, #24]
 8013a0c:	6803      	ldr	r3, [r0, #0]
 8013a0e:	9101      	str	r1, [sp, #4]
 8013a10:	8b61      	ldrh	r1, [r4, #26]
 8013a12:	9100      	str	r1, [sp, #0]
 8013a14:	6a1d      	ldr	r5, [r3, #32]
 8013a16:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013a1a:	47a8      	blx	r5
 8013a1c:	6860      	ldr	r0, [r4, #4]
 8013a1e:	6803      	ldr	r3, [r0, #0]
 8013a20:	69db      	ldr	r3, [r3, #28]
 8013a22:	4798      	blx	r3
 8013a24:	b00e      	add	sp, #56	@ 0x38
 8013a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a2a:	bf00      	nop
 8013a2c:	42b40000 	.word	0x42b40000
 8013a30:	43340000 	.word	0x43340000
 8013a34:	43870000 	.word	0x43870000

08013a38 <_ZN8touchgfx9Matrix3x35resetEv>:
 8013a38:	2300      	movs	r3, #0
 8013a3a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013a3e:	6043      	str	r3, [r0, #4]
 8013a40:	6002      	str	r2, [r0, #0]
 8013a42:	6083      	str	r3, [r0, #8]
 8013a44:	60c3      	str	r3, [r0, #12]
 8013a46:	6102      	str	r2, [r0, #16]
 8013a48:	6143      	str	r3, [r0, #20]
 8013a4a:	6183      	str	r3, [r0, #24]
 8013a4c:	61c3      	str	r3, [r0, #28]
 8013a4e:	6202      	str	r2, [r0, #32]
 8013a50:	4770      	bx	lr

08013a52 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8013a52:	b508      	push	{r3, lr}
 8013a54:	f7ff fff0 	bl	8013a38 <_ZN8touchgfx9Matrix3x35resetEv>
 8013a58:	bd08      	pop	{r3, pc}

08013a5a <_ZN8touchgfx9Matrix3x35scaleEff>:
 8013a5a:	edd0 7a00 	vldr	s15, [r0]
 8013a5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013a62:	edc0 7a00 	vstr	s15, [r0]
 8013a66:	edd0 7a01 	vldr	s15, [r0, #4]
 8013a6a:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013a6e:	edc0 7a01 	vstr	s15, [r0, #4]
 8013a72:	edd0 7a02 	vldr	s15, [r0, #8]
 8013a76:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013a7a:	edd0 7a03 	vldr	s15, [r0, #12]
 8013a7e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013a82:	ed80 0a02 	vstr	s0, [r0, #8]
 8013a86:	edc0 7a03 	vstr	s15, [r0, #12]
 8013a8a:	edd0 7a04 	vldr	s15, [r0, #16]
 8013a8e:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013a92:	edc0 7a04 	vstr	s15, [r0, #16]
 8013a96:	edd0 7a05 	vldr	s15, [r0, #20]
 8013a9a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013a9e:	edc0 0a05 	vstr	s1, [r0, #20]
 8013aa2:	4770      	bx	lr

08013aa4 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8013aa4:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8013b38 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8013aa8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013aac:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8013b3c <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8013ab0:	b510      	push	{r4, lr}
 8013ab2:	ed2d 8b02 	vpush	{d8}
 8013ab6:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8013aba:	4604      	mov	r4, r0
 8013abc:	eeb0 0a68 	vmov.f32	s0, s17
 8013ac0:	f00e f8ca 	bl	8021c58 <cosf>
 8013ac4:	eeb0 8a40 	vmov.f32	s16, s0
 8013ac8:	eeb0 0a68 	vmov.f32	s0, s17
 8013acc:	f00e f800 	bl	8021ad0 <sinf>
 8013ad0:	edd4 6a03 	vldr	s13, [r4, #12]
 8013ad4:	edd4 4a00 	vldr	s9, [r4]
 8013ad8:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8013adc:	ed94 7a04 	vldr	s14, [r4, #16]
 8013ae0:	ed94 5a01 	vldr	s10, [r4, #4]
 8013ae4:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013ae8:	edd4 5a02 	vldr	s11, [r4, #8]
 8013aec:	eee8 7a24 	vfma.f32	s15, s16, s9
 8013af0:	eee0 6a24 	vfma.f32	s13, s0, s9
 8013af4:	edc4 7a00 	vstr	s15, [r4]
 8013af8:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8013afc:	ee27 7a08 	vmul.f32	s14, s14, s16
 8013b00:	edc4 6a03 	vstr	s13, [r4, #12]
 8013b04:	eee8 7a05 	vfma.f32	s15, s16, s10
 8013b08:	eea0 7a05 	vfma.f32	s14, s0, s10
 8013b0c:	edc4 7a01 	vstr	s15, [r4, #4]
 8013b10:	edd4 7a05 	vldr	s15, [r4, #20]
 8013b14:	ed84 7a04 	vstr	s14, [r4, #16]
 8013b18:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8013b1c:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013b20:	eea8 6a25 	vfma.f32	s12, s16, s11
 8013b24:	eee0 7a25 	vfma.f32	s15, s0, s11
 8013b28:	ecbd 8b02 	vpop	{d8}
 8013b2c:	ed84 6a02 	vstr	s12, [r4, #8]
 8013b30:	edc4 7a05 	vstr	s15, [r4, #20]
 8013b34:	bd10      	pop	{r4, pc}
 8013b36:	bf00      	nop
 8013b38:	40490fdb 	.word	0x40490fdb
 8013b3c:	43340000 	.word	0x43340000

08013b40 <_ZN8touchgfx9Matrix3x39translateEff>:
 8013b40:	ed90 6a06 	vldr	s12, [r0, #24]
 8013b44:	edd0 7a00 	vldr	s15, [r0]
 8013b48:	edd0 6a07 	vldr	s13, [r0, #28]
 8013b4c:	eee6 7a00 	vfma.f32	s15, s12, s0
 8013b50:	ed90 7a08 	vldr	s14, [r0, #32]
 8013b54:	edc0 7a00 	vstr	s15, [r0]
 8013b58:	edd0 7a01 	vldr	s15, [r0, #4]
 8013b5c:	eee6 7a80 	vfma.f32	s15, s13, s0
 8013b60:	edc0 7a01 	vstr	s15, [r0, #4]
 8013b64:	edd0 7a02 	vldr	s15, [r0, #8]
 8013b68:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013b6c:	edc0 7a02 	vstr	s15, [r0, #8]
 8013b70:	edd0 7a03 	vldr	s15, [r0, #12]
 8013b74:	eee6 7a20 	vfma.f32	s15, s12, s1
 8013b78:	edc0 7a03 	vstr	s15, [r0, #12]
 8013b7c:	edd0 7a04 	vldr	s15, [r0, #16]
 8013b80:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8013b84:	edc0 7a04 	vstr	s15, [r0, #16]
 8013b88:	edd0 7a05 	vldr	s15, [r0, #20]
 8013b8c:	eee7 7a20 	vfma.f32	s15, s14, s1
 8013b90:	edc0 7a05 	vstr	s15, [r0, #20]
 8013b94:	4770      	bx	lr

08013b96 <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8013b96:	edd0 6a01 	vldr	s13, [r0, #4]
 8013b9a:	b084      	sub	sp, #16
 8013b9c:	edd0 7a04 	vldr	s15, [r0, #16]
 8013ba0:	ed90 7a03 	vldr	s14, [r0, #12]
 8013ba4:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8013ba8:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8013bac:	edd0 6a00 	vldr	s13, [r0]
 8013bb0:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013bb4:	ed90 7a05 	vldr	s14, [r0, #20]
 8013bb8:	eee6 0a80 	vfma.f32	s1, s13, s0
 8013bbc:	ed90 0a02 	vldr	s0, [r0, #8]
 8013bc0:	ee30 0a80 	vadd.f32	s0, s1, s0
 8013bc4:	ee77 0a87 	vadd.f32	s1, s15, s14
 8013bc8:	b004      	add	sp, #16
 8013bca:	4770      	bx	lr

08013bcc <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013bcc:	b530      	push	{r4, r5, lr}
 8013bce:	8083      	strh	r3, [r0, #4]
 8013bd0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013bd4:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013bd8:	80c3      	strh	r3, [r0, #6]
 8013bda:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013bde:	6141      	str	r1, [r0, #20]
 8013be0:	7203      	strb	r3, [r0, #8]
 8013be2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013be6:	8302      	strh	r2, [r0, #24]
 8013be8:	7243      	strb	r3, [r0, #9]
 8013bea:	7a83      	ldrb	r3, [r0, #10]
 8013bec:	f365 0306 	bfi	r3, r5, #0, #7
 8013bf0:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8013bf4:	f365 13c7 	bfi	r3, r5, #7, #1
 8013bf8:	7283      	strb	r3, [r0, #10]
 8013bfa:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013bfe:	72c3      	strb	r3, [r0, #11]
 8013c00:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013c04:	7303      	strb	r3, [r0, #12]
 8013c06:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8013c0a:	81c3      	strh	r3, [r0, #14]
 8013c0c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013c10:	8203      	strh	r3, [r0, #16]
 8013c12:	4b01      	ldr	r3, [pc, #4]	@ (8013c18 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8013c14:	6003      	str	r3, [r0, #0]
 8013c16:	bd30      	pop	{r4, r5, pc}
 8013c18:	08025dec 	.word	0x08025dec

08013c1c <_ZNK8touchgfx9ConstFont4findEt>:
 8013c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013c1e:	6944      	ldr	r4, [r0, #20]
 8013c20:	b3bc      	cbz	r4, 8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c22:	88a3      	ldrh	r3, [r4, #4]
 8013c24:	8b02      	ldrh	r2, [r0, #24]
 8013c26:	1acb      	subs	r3, r1, r3
 8013c28:	f102 32ff 	add.w	r2, r2, #4294967295
 8013c2c:	d431      	bmi.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c2e:	4293      	cmp	r3, r2
 8013c30:	dd0c      	ble.n	8013c4c <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013c32:	230e      	movs	r3, #14
 8013c34:	fb03 4302 	mla	r3, r3, r2, r4
 8013c38:	889b      	ldrh	r3, [r3, #4]
 8013c3a:	1a5b      	subs	r3, r3, r1
 8013c3c:	1ad3      	subs	r3, r2, r3
 8013c3e:	429a      	cmp	r2, r3
 8013c40:	db27      	blt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	bfbc      	itt	lt
 8013c46:	2302      	movlt	r3, #2
 8013c48:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013c4c:	2500      	movs	r5, #0
 8013c4e:	260e      	movs	r6, #14
 8013c50:	4295      	cmp	r5, r2
 8013c52:	dc1e      	bgt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c54:	fb06 4003 	mla	r0, r6, r3, r4
 8013c58:	8887      	ldrh	r7, [r0, #4]
 8013c5a:	42b9      	cmp	r1, r7
 8013c5c:	d01a      	beq.n	8013c94 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013c5e:	d20d      	bcs.n	8013c7c <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013c60:	1e5a      	subs	r2, r3, #1
 8013c62:	4295      	cmp	r5, r2
 8013c64:	dc15      	bgt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c66:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013c6a:	1a5b      	subs	r3, r3, r1
 8013c6c:	1ad3      	subs	r3, r2, r3
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	db0f      	blt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c72:	429d      	cmp	r5, r3
 8013c74:	ddec      	ble.n	8013c50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013c76:	1953      	adds	r3, r2, r5
 8013c78:	105b      	asrs	r3, r3, #1
 8013c7a:	e7e9      	b.n	8013c50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013c7c:	1c5d      	adds	r5, r3, #1
 8013c7e:	42aa      	cmp	r2, r5
 8013c80:	db07      	blt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c82:	8a43      	ldrh	r3, [r0, #18]
 8013c84:	1acb      	subs	r3, r1, r3
 8013c86:	442b      	add	r3, r5
 8013c88:	429d      	cmp	r5, r3
 8013c8a:	dc02      	bgt.n	8013c92 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013c8c:	429a      	cmp	r2, r3
 8013c8e:	dadf      	bge.n	8013c50 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013c90:	e7f1      	b.n	8013c76 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013c92:	2000      	movs	r0, #0
 8013c94:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013c96 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013c96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c98:	4604      	mov	r4, r0
 8013c9a:	4617      	mov	r7, r2
 8013c9c:	461e      	mov	r6, r3
 8013c9e:	b911      	cbnz	r1, 8013ca6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013ca0:	2500      	movs	r5, #0
 8013ca2:	4628      	mov	r0, r5
 8013ca4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013ca6:	290a      	cmp	r1, #10
 8013ca8:	d0fa      	beq.n	8013ca0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013caa:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013cae:	4291      	cmp	r1, r2
 8013cb0:	d0f6      	beq.n	8013ca0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013cb2:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013cb6:	4291      	cmp	r1, r2
 8013cb8:	d0f2      	beq.n	8013ca0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013cba:	f7ff ffaf 	bl	8013c1c <_ZNK8touchgfx9ConstFont4findEt>
 8013cbe:	4605      	mov	r5, r0
 8013cc0:	b950      	cbnz	r0, 8013cd8 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013cc2:	6823      	ldr	r3, [r4, #0]
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	691b      	ldr	r3, [r3, #16]
 8013cc8:	4798      	blx	r3
 8013cca:	4601      	mov	r1, r0
 8013ccc:	4620      	mov	r0, r4
 8013cce:	f7ff ffa5 	bl	8013c1c <_ZNK8touchgfx9ConstFont4findEt>
 8013cd2:	4605      	mov	r5, r0
 8013cd4:	2800      	cmp	r0, #0
 8013cd6:	d0e3      	beq.n	8013ca0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	4629      	mov	r1, r5
 8013cdc:	4620      	mov	r0, r4
 8013cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ce0:	4798      	blx	r3
 8013ce2:	6038      	str	r0, [r7, #0]
 8013ce4:	6823      	ldr	r3, [r4, #0]
 8013ce6:	4620      	mov	r0, r4
 8013ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013cea:	4798      	blx	r3
 8013cec:	7030      	strb	r0, [r6, #0]
 8013cee:	e7d8      	b.n	8013ca2 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013cf0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 8013cf0:	b538      	push	{r3, r4, r5, lr}
 8013cf2:	4605      	mov	r5, r0
 8013cf4:	f001 fdfe 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013cf8:	4604      	mov	r4, r0
 8013cfa:	4628      	mov	r0, r5
 8013cfc:	f001 fd3e 	bl	801577c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8013d00:	2800      	cmp	r0, #0
 8013d02:	bf14      	ite	ne
 8013d04:	2002      	movne	r0, #2
 8013d06:	2000      	moveq	r0, #0
 8013d08:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8013d0c:	b280      	uxth	r0, r0
 8013d0e:	bd38      	pop	{r3, r4, r5, pc}

08013d10 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 8013d10:	b538      	push	{r3, r4, r5, lr}
 8013d12:	4605      	mov	r5, r0
 8013d14:	f001 fdee 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8013d18:	4604      	mov	r4, r0
 8013d1a:	4628      	mov	r0, r5
 8013d1c:	f001 fd2e 	bl	801577c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8013d20:	2800      	cmp	r0, #0
 8013d22:	bf14      	ite	ne
 8013d24:	2002      	movne	r0, #2
 8013d26:	2000      	moveq	r0, #0
 8013d28:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8013d2c:	f040 0001 	orr.w	r0, r0, #1
 8013d30:	b280      	uxth	r0, r0
 8013d32:	bd38      	pop	{r3, r4, r5, pc}

08013d34 <_ZN8touchgfx4clzuEm>:
 8013d34:	4603      	mov	r3, r0
 8013d36:	b1c8      	cbz	r0, 8013d6c <_ZN8touchgfx4clzuEm+0x38>
 8013d38:	0c02      	lsrs	r2, r0, #16
 8013d3a:	0412      	lsls	r2, r2, #16
 8013d3c:	b9a2      	cbnz	r2, 8013d68 <_ZN8touchgfx4clzuEm+0x34>
 8013d3e:	0403      	lsls	r3, r0, #16
 8013d40:	2010      	movs	r0, #16
 8013d42:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8013d46:	bf04      	itt	eq
 8013d48:	021b      	lsleq	r3, r3, #8
 8013d4a:	3008      	addeq	r0, #8
 8013d4c:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8013d50:	bf04      	itt	eq
 8013d52:	011b      	lsleq	r3, r3, #4
 8013d54:	3004      	addeq	r0, #4
 8013d56:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8013d5a:	bf04      	itt	eq
 8013d5c:	009b      	lsleq	r3, r3, #2
 8013d5e:	3002      	addeq	r0, #2
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	db04      	blt.n	8013d6e <_ZN8touchgfx4clzuEm+0x3a>
 8013d64:	3001      	adds	r0, #1
 8013d66:	4770      	bx	lr
 8013d68:	2000      	movs	r0, #0
 8013d6a:	e7ea      	b.n	8013d42 <_ZN8touchgfx4clzuEm+0xe>
 8013d6c:	2020      	movs	r0, #32
 8013d6e:	4770      	bx	lr

08013d70 <_ZN8touchgfx7muldivuEmmmRm>:
 8013d70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013d74:	460f      	mov	r7, r1
 8013d76:	4615      	mov	r5, r2
 8013d78:	461e      	mov	r6, r3
 8013d7a:	4601      	mov	r1, r0
 8013d7c:	b100      	cbz	r0, 8013d80 <_ZN8touchgfx7muldivuEmmmRm+0x10>
 8013d7e:	b927      	cbnz	r7, 8013d8a <_ZN8touchgfx7muldivuEmmmRm+0x1a>
 8013d80:	2000      	movs	r0, #0
 8013d82:	6030      	str	r0, [r6, #0]
 8013d84:	b002      	add	sp, #8
 8013d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013d8a:	f7ff ffd3 	bl	8013d34 <_ZN8touchgfx4clzuEm>
 8013d8e:	b980      	cbnz	r0, 8013db2 <_ZN8touchgfx7muldivuEmmmRm+0x42>
 8013d90:	4638      	mov	r0, r7
 8013d92:	f7ff ffcf 	bl	8013d34 <_ZN8touchgfx4clzuEm>
 8013d96:	2800      	cmp	r0, #0
 8013d98:	dd05      	ble.n	8013da6 <_ZN8touchgfx7muldivuEmmmRm+0x36>
 8013d9a:	4633      	mov	r3, r6
 8013d9c:	462a      	mov	r2, r5
 8013d9e:	4638      	mov	r0, r7
 8013da0:	f7ff ffe6 	bl	8013d70 <_ZN8touchgfx7muldivuEmmmRm>
 8013da4:	e7ee      	b.n	8013d84 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8013da6:	f04f 33ff 	mov.w	r3, #4294967295
 8013daa:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8013dae:	6033      	str	r3, [r6, #0]
 8013db0:	e7e8      	b.n	8013d84 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8013db2:	fa37 f800 	lsrs.w	r8, r7, r0
 8013db6:	fb07 f301 	mul.w	r3, r7, r1
 8013dba:	d105      	bne.n	8013dc8 <_ZN8touchgfx7muldivuEmmmRm+0x58>
 8013dbc:	fbb3 f0f5 	udiv	r0, r3, r5
 8013dc0:	fb05 3510 	mls	r5, r5, r0, r3
 8013dc4:	6035      	str	r5, [r6, #0]
 8013dc6:	e7dd      	b.n	8013d84 <_ZN8touchgfx7muldivuEmmmRm+0x14>
 8013dc8:	2301      	movs	r3, #1
 8013dca:	fa01 fa00 	lsl.w	sl, r1, r0
 8013dce:	462a      	mov	r2, r5
 8013dd0:	fa03 f000 	lsl.w	r0, r3, r0
 8013dd4:	4633      	mov	r3, r6
 8013dd6:	fbba f9f5 	udiv	r9, sl, r5
 8013dda:	3801      	subs	r0, #1
 8013ddc:	fb08 f409 	mul.w	r4, r8, r9
 8013de0:	4038      	ands	r0, r7
 8013de2:	f7ff ffc5 	bl	8013d70 <_ZN8touchgfx7muldivuEmmmRm>
 8013de6:	462a      	mov	r2, r5
 8013de8:	4607      	mov	r7, r0
 8013dea:	ab01      	add	r3, sp, #4
 8013dec:	fb05 a119 	mls	r1, r5, r9, sl
 8013df0:	4640      	mov	r0, r8
 8013df2:	f7ff ffbd 	bl	8013d70 <_ZN8touchgfx7muldivuEmmmRm>
 8013df6:	9b01      	ldr	r3, [sp, #4]
 8013df8:	6832      	ldr	r2, [r6, #0]
 8013dfa:	441a      	add	r2, r3
 8013dfc:	fbb2 f3f5 	udiv	r3, r2, r5
 8013e00:	441c      	add	r4, r3
 8013e02:	fb05 2513 	mls	r5, r5, r3, r2
 8013e06:	443c      	add	r4, r7
 8013e08:	4420      	add	r0, r4
 8013e0a:	e7db      	b.n	8013dc4 <_ZN8touchgfx7muldivuEmmmRm+0x54>

08013e0c <_ZN8touchgfx6muldivElllRl>:
 8013e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8013e0e:	2800      	cmp	r0, #0
 8013e10:	461e      	mov	r6, r3
 8013e12:	bfba      	itte	lt
 8013e14:	4240      	neglt	r0, r0
 8013e16:	f04f 34ff 	movlt.w	r4, #4294967295
 8013e1a:	2401      	movge	r4, #1
 8013e1c:	2900      	cmp	r1, #0
 8013e1e:	bfbc      	itt	lt
 8013e20:	4249      	neglt	r1, r1
 8013e22:	4264      	neglt	r4, r4
 8013e24:	2a00      	cmp	r2, #0
 8013e26:	bfb6      	itet	lt
 8013e28:	4265      	neglt	r5, r4
 8013e2a:	4625      	movge	r5, r4
 8013e2c:	4252      	neglt	r2, r2
 8013e2e:	4288      	cmp	r0, r1
 8013e30:	bfc2      	ittt	gt
 8013e32:	4603      	movgt	r3, r0
 8013e34:	4608      	movgt	r0, r1
 8013e36:	4619      	movgt	r1, r3
 8013e38:	ab01      	add	r3, sp, #4
 8013e3a:	f7ff ff99 	bl	8013d70 <_ZN8touchgfx7muldivuEmmmRm>
 8013e3e:	9b01      	ldr	r3, [sp, #4]
 8013e40:	4368      	muls	r0, r5
 8013e42:	435c      	muls	r4, r3
 8013e44:	6034      	str	r4, [r6, #0]
 8013e46:	b002      	add	sp, #8
 8013e48:	bd70      	pop	{r4, r5, r6, pc}

08013e4a <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013e4a:	2000      	movs	r0, #0
 8013e4c:	4770      	bx	lr

08013e4e <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013e4e:	2001      	movs	r0, #1
 8013e50:	4770      	bx	lr

08013e52 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013e52:	2002      	movs	r0, #2
 8013e54:	4770      	bx	lr

08013e56 <_ZN8touchgfx6ScreenD1Ev>:
 8013e56:	4770      	bx	lr

08013e58 <_ZN8touchgfx12GestureEventD1Ev>:
 8013e58:	4770      	bx	lr

08013e5a <_ZN8touchgfx9DragEventD1Ev>:
 8013e5a:	4770      	bx	lr

08013e5c <_ZN8touchgfx10ClickEventD1Ev>:
 8013e5c:	4770      	bx	lr

08013e5e <_ZN8touchgfx10ClickEventD0Ev>:
 8013e5e:	b510      	push	{r4, lr}
 8013e60:	4604      	mov	r4, r0
 8013e62:	210c      	movs	r1, #12
 8013e64:	f00d fdc1 	bl	80219ea <_ZdlPvj>
 8013e68:	4620      	mov	r0, r4
 8013e6a:	bd10      	pop	{r4, pc}

08013e6c <_ZN8touchgfx9DragEventD0Ev>:
 8013e6c:	b510      	push	{r4, lr}
 8013e6e:	4604      	mov	r4, r0
 8013e70:	2110      	movs	r1, #16
 8013e72:	f00d fdba 	bl	80219ea <_ZdlPvj>
 8013e76:	4620      	mov	r0, r4
 8013e78:	bd10      	pop	{r4, pc}

08013e7a <_ZN8touchgfx12GestureEventD0Ev>:
 8013e7a:	b510      	push	{r4, lr}
 8013e7c:	4604      	mov	r4, r0
 8013e7e:	210c      	movs	r1, #12
 8013e80:	f00d fdb3 	bl	80219ea <_ZdlPvj>
 8013e84:	4620      	mov	r0, r4
 8013e86:	bd10      	pop	{r4, pc}

08013e88 <_ZN8touchgfx6ScreenD0Ev>:
 8013e88:	b510      	push	{r4, lr}
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	213c      	movs	r1, #60	@ 0x3c
 8013e8e:	f00d fdac 	bl	80219ea <_ZdlPvj>
 8013e92:	4620      	mov	r0, r4
 8013e94:	bd10      	pop	{r4, pc}
	...

08013e98 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013e98:	b530      	push	{r4, r5, lr}
 8013e9a:	460d      	mov	r5, r1
 8013e9c:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013e9e:	b087      	sub	sp, #28
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	b301      	cbz	r1, 8013ee6 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013ea4:	a801      	add	r0, sp, #4
 8013ea6:	f7ff fb5b 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013eaa:	892a      	ldrh	r2, [r5, #8]
 8013eac:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013eb0:	7928      	ldrb	r0, [r5, #4]
 8013eb2:	1ad2      	subs	r2, r2, r3
 8013eb4:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013eb6:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013eba:	441a      	add	r2, r3
 8013ebc:	896b      	ldrh	r3, [r5, #10]
 8013ebe:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013ec2:	f88d 0010 	strb.w	r0, [sp, #16]
 8013ec6:	1b5b      	subs	r3, r3, r5
 8013ec8:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8013eca:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013ecc:	442b      	add	r3, r5
 8013ece:	4d07      	ldr	r5, [pc, #28]	@ (8013eec <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013ed0:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013ed4:	a903      	add	r1, sp, #12
 8013ed6:	9503      	str	r5, [sp, #12]
 8013ed8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013edc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013ee0:	6803      	ldr	r3, [r0, #0]
 8013ee2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013ee4:	4798      	blx	r3
 8013ee6:	b007      	add	sp, #28
 8013ee8:	bd30      	pop	{r4, r5, pc}
 8013eea:	bf00      	nop
 8013eec:	08025e7c 	.word	0x08025e7c

08013ef0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ef4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ef6:	b08a      	sub	sp, #40	@ 0x28
 8013ef8:	4604      	mov	r4, r0
 8013efa:	460d      	mov	r5, r1
 8013efc:	b113      	cbz	r3, 8013f04 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013efe:	790b      	ldrb	r3, [r1, #4]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d044      	beq.n	8013f8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013f04:	f104 0804 	add.w	r8, r4, #4
 8013f08:	a803      	add	r0, sp, #12
 8013f0a:	4641      	mov	r1, r8
 8013f0c:	f7ff fb28 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f10:	792b      	ldrb	r3, [r5, #4]
 8013f12:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013f16:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013f1a:	b983      	cbnz	r3, 8013f3e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013f1c:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8013f20:	892a      	ldrh	r2, [r5, #8]
 8013f22:	88e9      	ldrh	r1, [r5, #6]
 8013f24:	4640      	mov	r0, r8
 8013f26:	1b92      	subs	r2, r2, r6
 8013f28:	9301      	str	r3, [sp, #4]
 8013f2a:	1bc9      	subs	r1, r1, r7
 8013f2c:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8013f30:	b212      	sxth	r2, r2
 8013f32:	9300      	str	r3, [sp, #0]
 8013f34:	b209      	sxth	r1, r1
 8013f36:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8013f3a:	f7f9 fbfd 	bl	800d738 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013f3e:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013f40:	b329      	cbz	r1, 8013f8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013f42:	a805      	add	r0, sp, #20
 8013f44:	f7ff fb0c 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f48:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013f4c:	792b      	ldrb	r3, [r5, #4]
 8013f4e:	a907      	add	r1, sp, #28
 8013f50:	1abf      	subs	r7, r7, r2
 8013f52:	88ea      	ldrh	r2, [r5, #6]
 8013f54:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013f56:	4417      	add	r7, r2
 8013f58:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8013f5a:	f88d 3020 	strb.w	r3, [sp, #32]
 8013f5e:	4417      	add	r7, r2
 8013f60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013f64:	1ab6      	subs	r6, r6, r2
 8013f66:	892a      	ldrh	r2, [r5, #8]
 8013f68:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013f6c:	4416      	add	r6, r2
 8013f6e:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013f70:	4416      	add	r6, r2
 8013f72:	4a08      	ldr	r2, [pc, #32]	@ (8013f94 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013f74:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8013f78:	2600      	movs	r6, #0
 8013f7a:	9207      	str	r2, [sp, #28]
 8013f7c:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8013f80:	6803      	ldr	r3, [r0, #0]
 8013f82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f84:	4798      	blx	r3
 8013f86:	792b      	ldrb	r3, [r5, #4]
 8013f88:	b10b      	cbz	r3, 8013f8e <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013f8a:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8013f8e:	b00a      	add	sp, #40	@ 0x28
 8013f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f94:	08025e54 	.word	0x08025e54

08013f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8013f98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f9c:	460c      	mov	r4, r1
 8013f9e:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013fa0:	b088      	sub	sp, #32
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	2900      	cmp	r1, #0
 8013fa6:	d06d      	beq.n	8014084 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8013fa8:	4668      	mov	r0, sp
 8013faa:	f7ff fad9 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fae:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8013fb0:	88e3      	ldrh	r3, [r4, #6]
 8013fb2:	f9bd 8000 	ldrsh.w	r8, [sp]
 8013fb6:	440b      	add	r3, r1
 8013fb8:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8013fbc:	b21b      	sxth	r3, r3
 8013fbe:	4543      	cmp	r3, r8
 8013fc0:	db31      	blt.n	8014026 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013fc2:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8013fc6:	44c4      	add	ip, r8
 8013fc8:	fa0f fc8c 	sxth.w	ip, ip
 8013fcc:	4563      	cmp	r3, ip
 8013fce:	da2a      	bge.n	8014026 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013fd0:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8013fd2:	8926      	ldrh	r6, [r4, #8]
 8013fd4:	4416      	add	r6, r2
 8013fd6:	b236      	sxth	r6, r6
 8013fd8:	42be      	cmp	r6, r7
 8013fda:	db24      	blt.n	8014026 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013fdc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8013fe0:	4438      	add	r0, r7
 8013fe2:	b200      	sxth	r0, r0
 8013fe4:	4286      	cmp	r6, r0
 8013fe6:	da1e      	bge.n	8014026 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8013fe8:	8963      	ldrh	r3, [r4, #10]
 8013fea:	4419      	add	r1, r3
 8013fec:	b209      	sxth	r1, r1
 8013fee:	4541      	cmp	r1, r8
 8013ff0:	db08      	blt.n	8014004 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013ff2:	4561      	cmp	r1, ip
 8013ff4:	da06      	bge.n	8014004 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8013ff6:	89a3      	ldrh	r3, [r4, #12]
 8013ff8:	441a      	add	r2, r3
 8013ffa:	b212      	sxth	r2, r2
 8013ffc:	42ba      	cmp	r2, r7
 8013ffe:	db01      	blt.n	8014004 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014000:	4282      	cmp	r2, r0
 8014002:	db10      	blt.n	8014026 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014004:	4b21      	ldr	r3, [pc, #132]	@ (801408c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014006:	a904      	add	r1, sp, #16
 8014008:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801400a:	9304      	str	r3, [sp, #16]
 801400c:	2302      	movs	r3, #2
 801400e:	f88d 3014 	strb.w	r3, [sp, #20]
 8014012:	2300      	movs	r3, #0
 8014014:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014018:	f8ad 3018 	strh.w	r3, [sp, #24]
 801401c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014020:	6803      	ldr	r3, [r0, #0]
 8014022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014024:	4798      	blx	r3
 8014026:	1d29      	adds	r1, r5, #4
 8014028:	a802      	add	r0, sp, #8
 801402a:	f7ff fa99 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801402e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014032:	88e0      	ldrh	r0, [r4, #6]
 8014034:	eba3 0808 	sub.w	r8, r3, r8
 8014038:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801403c:	7921      	ldrb	r1, [r4, #4]
 801403e:	fa1f f888 	uxth.w	r8, r8
 8014042:	1bdf      	subs	r7, r3, r7
 8014044:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8014048:	b2bb      	uxth	r3, r7
 801404a:	4440      	add	r0, r8
 801404c:	8922      	ldrh	r2, [r4, #8]
 801404e:	8967      	ldrh	r7, [r4, #10]
 8014050:	4460      	add	r0, ip
 8014052:	89a4      	ldrh	r4, [r4, #12]
 8014054:	441a      	add	r2, r3
 8014056:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8014058:	44b8      	add	r8, r7
 801405a:	4423      	add	r3, r4
 801405c:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014060:	4432      	add	r2, r6
 8014062:	44e0      	add	r8, ip
 8014064:	4433      	add	r3, r6
 8014066:	4c0a      	ldr	r4, [pc, #40]	@ (8014090 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014068:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 801406a:	f88d 1014 	strb.w	r1, [sp, #20]
 801406e:	a904      	add	r1, sp, #16
 8014070:	9404      	str	r4, [sp, #16]
 8014072:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014076:	f8ad 801a 	strh.w	r8, [sp, #26]
 801407a:	f8ad 301c 	strh.w	r3, [sp, #28]
 801407e:	6803      	ldr	r3, [r0, #0]
 8014080:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014082:	4798      	blx	r3
 8014084:	b008      	add	sp, #32
 8014086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801408a:	bf00      	nop
 801408c:	08025e54 	.word	0x08025e54
 8014090:	08025e68 	.word	0x08025e68

08014094 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014094:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014096:	4604      	mov	r4, r0
 8014098:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801409c:	3201      	adds	r2, #1
 801409e:	d112      	bne.n	80140c6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 80140a0:	2500      	movs	r5, #0
 80140a2:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80140a6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80140aa:	6803      	ldr	r3, [r0, #0]
 80140ac:	9500      	str	r5, [sp, #0]
 80140ae:	466d      	mov	r5, sp
 80140b0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80140b4:	f8ad 2006 	strh.w	r2, [sp, #6]
 80140b8:	4629      	mov	r1, r5
 80140ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140bc:	4798      	blx	r3
 80140be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80140c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80140c6:	4620      	mov	r0, r4
 80140c8:	b003      	add	sp, #12
 80140ca:	bd30      	pop	{r4, r5, pc}

080140cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 80140cc:	b513      	push	{r0, r1, r4, lr}
 80140ce:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 80140d2:	4604      	mov	r4, r0
 80140d4:	3301      	adds	r3, #1
 80140d6:	d109      	bne.n	80140ec <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 80140d8:	4601      	mov	r1, r0
 80140da:	4668      	mov	r0, sp
 80140dc:	f7ff fa40 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80140e0:	f8bd 3000 	ldrh.w	r3, [sp]
 80140e4:	8423      	strh	r3, [r4, #32]
 80140e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80140ea:	8463      	strh	r3, [r4, #34]	@ 0x22
 80140ec:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 80140f0:	b002      	add	sp, #8
 80140f2:	bd10      	pop	{r4, pc}

080140f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 80140f4:	b513      	push	{r0, r1, r4, lr}
 80140f6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80140fa:	4604      	mov	r4, r0
 80140fc:	3301      	adds	r3, #1
 80140fe:	d109      	bne.n	8014114 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014100:	4601      	mov	r1, r0
 8014102:	4668      	mov	r0, sp
 8014104:	f7ff fa2c 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014108:	f8bd 3000 	ldrh.w	r3, [sp]
 801410c:	8423      	strh	r3, [r4, #32]
 801410e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014112:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014114:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8014118:	b002      	add	sp, #8
 801411a:	bd10      	pop	{r4, pc}

0801411c <_ZN8touchgfx6ScreenC1Ev>:
 801411c:	b570      	push	{r4, r5, r6, lr}
 801411e:	4b17      	ldr	r3, [pc, #92]	@ (801417c <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014120:	4605      	mov	r5, r0
 8014122:	4a17      	ldr	r2, [pc, #92]	@ (8014180 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014124:	2101      	movs	r1, #1
 8014126:	f845 3b04 	str.w	r3, [r5], #4
 801412a:	2300      	movs	r3, #0
 801412c:	6042      	str	r2, [r0, #4]
 801412e:	4604      	mov	r4, r0
 8014130:	8103      	strh	r3, [r0, #8]
 8014132:	8143      	strh	r3, [r0, #10]
 8014134:	8183      	strh	r3, [r0, #12]
 8014136:	81c3      	strh	r3, [r0, #14]
 8014138:	8203      	strh	r3, [r0, #16]
 801413a:	8243      	strh	r3, [r0, #18]
 801413c:	8283      	strh	r3, [r0, #20]
 801413e:	82c3      	strh	r3, [r0, #22]
 8014140:	6203      	str	r3, [r0, #32]
 8014142:	8483      	strh	r3, [r0, #36]	@ 0x24
 8014144:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8014146:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801414a:	6343      	str	r3, [r0, #52]	@ 0x34
 801414c:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8014150:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8014154:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014158:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 801415c:	4b09      	ldr	r3, [pc, #36]	@ (8014184 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801415e:	4628      	mov	r0, r5
 8014160:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014164:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8014166:	4a08      	ldr	r2, [pc, #32]	@ (8014188 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014168:	f9b2 1000 	ldrsh.w	r1, [r2]
 801416c:	4798      	blx	r3
 801416e:	6863      	ldr	r3, [r4, #4]
 8014170:	4628      	mov	r0, r5
 8014172:	4631      	mov	r1, r6
 8014174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014176:	4798      	blx	r3
 8014178:	4620      	mov	r0, r4
 801417a:	bd70      	pop	{r4, r5, r6, pc}
 801417c:	08025e90 	.word	0x08025e90
 8014180:	08025960 	.word	0x08025960
 8014184:	2402526a 	.word	0x2402526a
 8014188:	24025268 	.word	0x24025268

0801418c <_ZN8touchgfx6Screen4drawEv>:
 801418c:	4b09      	ldr	r3, [pc, #36]	@ (80141b4 <_ZN8touchgfx6Screen4drawEv+0x28>)
 801418e:	b507      	push	{r0, r1, r2, lr}
 8014190:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014194:	2100      	movs	r1, #0
 8014196:	4b08      	ldr	r3, [pc, #32]	@ (80141b8 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014198:	9100      	str	r1, [sp, #0]
 801419a:	4669      	mov	r1, sp
 801419c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80141a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80141a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80141a8:	6803      	ldr	r3, [r0, #0]
 80141aa:	689b      	ldr	r3, [r3, #8]
 80141ac:	4798      	blx	r3
 80141ae:	b003      	add	sp, #12
 80141b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80141b4:	24025268 	.word	0x24025268
 80141b8:	2402526a 	.word	0x2402526a

080141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 80141bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80141c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 80141c4:	b089      	sub	sp, #36	@ 0x24
 80141c6:	4680      	mov	r8, r0
 80141c8:	460c      	mov	r4, r1
 80141ca:	2b00      	cmp	r3, #0
 80141cc:	4615      	mov	r5, r2
 80141ce:	dd0e      	ble.n	80141ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80141d0:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	dd0a      	ble.n	80141ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80141d8:	4628      	mov	r0, r5
 80141da:	f7ff ff5b 	bl	8014094 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80141de:	4621      	mov	r1, r4
 80141e0:	f7fd ff81 	bl	80120e6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80141e4:	69eb      	ldr	r3, [r5, #28]
 80141e6:	b928      	cbnz	r0, 80141f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 80141e8:	461d      	mov	r5, r3
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d1f4      	bne.n	80141d8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 80141ee:	b009      	add	sp, #36	@ 0x24
 80141f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141f4:	ae04      	add	r6, sp, #16
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	f000 80b5 	beq.w	8014366 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80141fc:	682b      	ldr	r3, [r5, #0]
 80141fe:	4629      	mov	r1, r5
 8014200:	a802      	add	r0, sp, #8
 8014202:	68db      	ldr	r3, [r3, #12]
 8014204:	4798      	blx	r3
 8014206:	4628      	mov	r0, r5
 8014208:	f7ff ff60 	bl	80140cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801420c:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014210:	4407      	add	r7, r0
 8014212:	4628      	mov	r0, r5
 8014214:	f7ff ff6e 	bl	80140f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014218:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801421c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014220:	b23f      	sxth	r7, r7
 8014222:	4418      	add	r0, r3
 8014224:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014228:	4621      	mov	r1, r4
 801422a:	f8ad 2014 	strh.w	r2, [sp, #20]
 801422e:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014232:	4630      	mov	r0, r6
 8014234:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014238:	f8ad 7010 	strh.w	r7, [sp, #16]
 801423c:	f7f9 fb5e 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 8014240:	4628      	mov	r0, r5
 8014242:	f7ff ff27 	bl	8014094 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014246:	ab06      	add	r3, sp, #24
 8014248:	4602      	mov	r2, r0
 801424a:	e896 0003 	ldmia.w	r6, {r0, r1}
 801424e:	e883 0003 	stmia.w	r3, {r0, r1}
 8014252:	4611      	mov	r1, r2
 8014254:	4618      	mov	r0, r3
 8014256:	f7f9 fb51 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 801425a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801425e:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014262:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014266:	4299      	cmp	r1, r3
 8014268:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 801426c:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014270:	d10b      	bne.n	801428a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014272:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014276:	4552      	cmp	r2, sl
 8014278:	d107      	bne.n	801428a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801427a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801427e:	455a      	cmp	r2, fp
 8014280:	d103      	bne.n	801428a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014282:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014286:	454a      	cmp	r2, r9
 8014288:	d06d      	beq.n	8014366 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801428a:	f1bb 0f00 	cmp.w	fp, #0
 801428e:	dd65      	ble.n	801435c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014290:	f1b9 0f00 	cmp.w	r9, #0
 8014294:	dd62      	ble.n	801435c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014296:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801429a:	fa1f f08a 	uxth.w	r0, sl
 801429e:	4552      	cmp	r2, sl
 80142a0:	9000      	str	r0, [sp, #0]
 80142a2:	da12      	bge.n	80142ca <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 80142a4:	9301      	str	r3, [sp, #4]
 80142a6:	9b00      	ldr	r3, [sp, #0]
 80142a8:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80142ac:	f8ad 2012 	strh.w	r2, [sp, #18]
 80142b0:	1a9a      	subs	r2, r3, r2
 80142b2:	f8ad 1010 	strh.w	r1, [sp, #16]
 80142b6:	4631      	mov	r1, r6
 80142b8:	f8ad 0014 	strh.w	r0, [sp, #20]
 80142bc:	4640      	mov	r0, r8
 80142be:	f8ad 2016 	strh.w	r2, [sp, #22]
 80142c2:	69ea      	ldr	r2, [r5, #28]
 80142c4:	f7ff ff7a 	bl	80141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80142c8:	9b01      	ldr	r3, [sp, #4]
 80142ca:	f9b4 2000 	ldrsh.w	r2, [r4]
 80142ce:	b29f      	uxth	r7, r3
 80142d0:	429a      	cmp	r2, r3
 80142d2:	da0d      	bge.n	80142f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 80142d4:	f8ad 2010 	strh.w	r2, [sp, #16]
 80142d8:	1aba      	subs	r2, r7, r2
 80142da:	f8ad a012 	strh.w	sl, [sp, #18]
 80142de:	4631      	mov	r1, r6
 80142e0:	f8ad 2014 	strh.w	r2, [sp, #20]
 80142e4:	4640      	mov	r0, r8
 80142e6:	f8ad 9016 	strh.w	r9, [sp, #22]
 80142ea:	69ea      	ldr	r2, [r5, #28]
 80142ec:	f7ff ff66 	bl	80141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80142f0:	8822      	ldrh	r2, [r4, #0]
 80142f2:	445f      	add	r7, fp
 80142f4:	88a3      	ldrh	r3, [r4, #4]
 80142f6:	b2bf      	uxth	r7, r7
 80142f8:	4413      	add	r3, r2
 80142fa:	b23a      	sxth	r2, r7
 80142fc:	b29b      	uxth	r3, r3
 80142fe:	b219      	sxth	r1, r3
 8014300:	4291      	cmp	r1, r2
 8014302:	dd0d      	ble.n	8014320 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014304:	1bdb      	subs	r3, r3, r7
 8014306:	f8ad 2010 	strh.w	r2, [sp, #16]
 801430a:	f8ad a012 	strh.w	sl, [sp, #18]
 801430e:	4631      	mov	r1, r6
 8014310:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014314:	4640      	mov	r0, r8
 8014316:	f8ad 9016 	strh.w	r9, [sp, #22]
 801431a:	69ea      	ldr	r2, [r5, #28]
 801431c:	f7ff ff4e 	bl	80141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014320:	88e2      	ldrh	r2, [r4, #6]
 8014322:	8863      	ldrh	r3, [r4, #2]
 8014324:	4413      	add	r3, r2
 8014326:	9a00      	ldr	r2, [sp, #0]
 8014328:	444a      	add	r2, r9
 801432a:	b29b      	uxth	r3, r3
 801432c:	fa1f f982 	uxth.w	r9, r2
 8014330:	b219      	sxth	r1, r3
 8014332:	fa0f f289 	sxth.w	r2, r9
 8014336:	428a      	cmp	r2, r1
 8014338:	da15      	bge.n	8014366 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801433a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801433e:	eba3 0309 	sub.w	r3, r3, r9
 8014342:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014346:	f8ad 1014 	strh.w	r1, [sp, #20]
 801434a:	4631      	mov	r1, r6
 801434c:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014350:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014354:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014358:	69ea      	ldr	r2, [r5, #28]
 801435a:	e001      	b.n	8014360 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 801435c:	69ea      	ldr	r2, [r5, #28]
 801435e:	4621      	mov	r1, r4
 8014360:	4640      	mov	r0, r8
 8014362:	f7ff ff2b 	bl	80141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014366:	4628      	mov	r0, r5
 8014368:	f7ff fe94 	bl	8014094 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801436c:	6861      	ldr	r1, [r4, #4]
 801436e:	4602      	mov	r2, r0
 8014370:	4633      	mov	r3, r6
 8014372:	6820      	ldr	r0, [r4, #0]
 8014374:	c303      	stmia	r3!, {r0, r1}
 8014376:	4611      	mov	r1, r2
 8014378:	4630      	mov	r0, r6
 801437a:	f7f9 fabf 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 801437e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014382:	2b00      	cmp	r3, #0
 8014384:	f77f af33 	ble.w	80141ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014388:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801438c:	2b00      	cmp	r3, #0
 801438e:	f77f af2e 	ble.w	80141ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014392:	4628      	mov	r0, r5
 8014394:	f7ff fe9a 	bl	80140cc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014398:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801439c:	1a18      	subs	r0, r3, r0
 801439e:	f8ad 0010 	strh.w	r0, [sp, #16]
 80143a2:	4628      	mov	r0, r5
 80143a4:	f7ff fea6 	bl	80140f4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80143a8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80143ac:	4631      	mov	r1, r6
 80143ae:	1a18      	subs	r0, r3, r0
 80143b0:	f8ad 0012 	strh.w	r0, [sp, #18]
 80143b4:	4628      	mov	r0, r5
 80143b6:	682b      	ldr	r3, [r5, #0]
 80143b8:	689b      	ldr	r3, [r3, #8]
 80143ba:	4798      	blx	r3
 80143bc:	e717      	b.n	80141ee <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

080143be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 80143be:	b570      	push	{r4, r5, r6, lr}
 80143c0:	1d06      	adds	r6, r0, #4
 80143c2:	b086      	sub	sp, #24
 80143c4:	460c      	mov	r4, r1
 80143c6:	2300      	movs	r3, #0
 80143c8:	4631      	mov	r1, r6
 80143ca:	4605      	mov	r5, r0
 80143cc:	a802      	add	r0, sp, #8
 80143ce:	9301      	str	r3, [sp, #4]
 80143d0:	f7ff f8c6 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80143d4:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80143d8:	8822      	ldrh	r2, [r4, #0]
 80143da:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80143de:	1ad2      	subs	r2, r2, r3
 80143e0:	8863      	ldrh	r3, [r4, #2]
 80143e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 80143e6:	1a5b      	subs	r3, r3, r1
 80143e8:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80143ec:	f8ad 2010 	strh.w	r2, [sp, #16]
 80143f0:	aa01      	add	r2, sp, #4
 80143f2:	f8ad 0014 	strh.w	r0, [sp, #20]
 80143f6:	4630      	mov	r0, r6
 80143f8:	f8ad 1016 	strh.w	r1, [sp, #22]
 80143fc:	a904      	add	r1, sp, #16
 80143fe:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014402:	f7f9 fb53 	bl	800daac <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014406:	9a01      	ldr	r2, [sp, #4]
 8014408:	b11a      	cbz	r2, 8014412 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801440a:	4621      	mov	r1, r4
 801440c:	4628      	mov	r0, r5
 801440e:	f7ff fed5 	bl	80141bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014412:	b006      	add	sp, #24
 8014414:	bd70      	pop	{r4, r5, r6, pc}

08014416 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014416:	4602      	mov	r2, r0
 8014418:	b530      	push	{r4, r5, lr}
 801441a:	4604      	mov	r4, r0
 801441c:	b085      	sub	sp, #20
 801441e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014422:	460d      	mov	r5, r1
 8014424:	466b      	mov	r3, sp
 8014426:	6851      	ldr	r1, [r2, #4]
 8014428:	c303      	stmia	r3!, {r0, r1}
 801442a:	4629      	mov	r1, r5
 801442c:	4668      	mov	r0, sp
 801442e:	f7f9 fa65 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 8014432:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8014436:	b12b      	cbz	r3, 8014444 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014438:	4669      	mov	r1, sp
 801443a:	4620      	mov	r0, r4
 801443c:	f7ff ffbf 	bl	80143be <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014440:	b005      	add	sp, #20
 8014442:	bd30      	pop	{r4, r5, pc}
 8014444:	3404      	adds	r4, #4
 8014446:	a802      	add	r0, sp, #8
 8014448:	4621      	mov	r1, r4
 801444a:	f7ff f889 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801444e:	f8bd 3000 	ldrh.w	r3, [sp]
 8014452:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014456:	4669      	mov	r1, sp
 8014458:	4620      	mov	r0, r4
 801445a:	1a9b      	subs	r3, r3, r2
 801445c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014460:	f8ad 3000 	strh.w	r3, [sp]
 8014464:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014468:	1a9b      	subs	r3, r3, r2
 801446a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801446e:	f7f9 fae4 	bl	800da3a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014472:	e7e5      	b.n	8014440 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08014474 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8014474:	460b      	mov	r3, r1
 8014476:	680a      	ldr	r2, [r1, #0]
 8014478:	1d01      	adds	r1, r0, #4
 801447a:	6992      	ldr	r2, [r2, #24]
 801447c:	4618      	mov	r0, r3
 801447e:	4710      	bx	r2

08014480 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst>:
 8014480:	4298      	cmp	r0, r3
 8014482:	d200      	bcs.n	8014486 <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0x6>
 8014484:	b913      	cbnz	r3, 801448c <_ZN8touchgfx15EasingEquations14linearEaseNoneEtsst+0xc>
 8014486:	440a      	add	r2, r1
 8014488:	b210      	sxth	r0, r2
 801448a:	4770      	bx	lr
 801448c:	ee07 2a90 	vmov	s15, r2
 8014490:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8014494:	ee07 0a90 	vmov	s15, r0
 8014498:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801449c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80144a0:	ee07 3a10 	vmov	s14, r3
 80144a4:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80144a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80144ac:	ee07 1a90 	vmov	s15, r1
 80144b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80144b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144b8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80144bc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80144c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80144c4:	bfcc      	ite	gt
 80144c6:	ee77 7a87 	vaddgt.f32	s15, s15, s14
 80144ca:	ee77 7ac7 	vsuble.f32	s15, s15, s14
 80144ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80144d2:	ee17 3a90 	vmov	r3, s15
 80144d6:	b218      	sxth	r0, r3
 80144d8:	4770      	bx	lr

080144da <_ZN8touchgfx12TextProviderC1Ev>:
 80144da:	b538      	push	{r3, r4, r5, lr}
 80144dc:	2500      	movs	r5, #0
 80144de:	2302      	movs	r3, #2
 80144e0:	4604      	mov	r4, r0
 80144e2:	220e      	movs	r2, #14
 80144e4:	7403      	strb	r3, [r0, #16]
 80144e6:	4629      	mov	r1, r5
 80144e8:	6145      	str	r5, [r0, #20]
 80144ea:	7605      	strb	r5, [r0, #24]
 80144ec:	83c5      	strh	r5, [r0, #30]
 80144ee:	8405      	strh	r5, [r0, #32]
 80144f0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80144f2:	8705      	strh	r5, [r0, #56]	@ 0x38
 80144f4:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 80144f6:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 80144fa:	e9c0 5500 	strd	r5, r5, [r0]
 80144fe:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8014502:	304c      	adds	r0, #76	@ 0x4c
 8014504:	f00e f884 	bl	8022610 <memset>
 8014508:	2301      	movs	r3, #1
 801450a:	4620      	mov	r0, r4
 801450c:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8014510:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014514:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8014518:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801451c:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8014520:	f7ef fda8 	bl	8004074 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014524:	4620      	mov	r0, r4
 8014526:	bd38      	pop	{r3, r4, r5, pc}

08014528 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8014528:	b530      	push	{r4, r5, lr}
 801452a:	2500      	movs	r5, #0
 801452c:	2401      	movs	r4, #1
 801452e:	6843      	ldr	r3, [r0, #4]
 8014530:	b913      	cbnz	r3, 8014538 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014532:	6803      	ldr	r3, [r0, #0]
 8014534:	b313      	cbz	r3, 801457c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014536:	6043      	str	r3, [r0, #4]
 8014538:	7e03      	ldrb	r3, [r0, #24]
 801453a:	b143      	cbz	r3, 801454e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801453c:	6943      	ldr	r3, [r0, #20]
 801453e:	b12b      	cbz	r3, 801454c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014540:	881a      	ldrh	r2, [r3, #0]
 8014542:	b11a      	cbz	r2, 801454c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014544:	1c9a      	adds	r2, r3, #2
 8014546:	6142      	str	r2, [r0, #20]
 8014548:	8818      	ldrh	r0, [r3, #0]
 801454a:	bd30      	pop	{r4, r5, pc}
 801454c:	7605      	strb	r5, [r0, #24]
 801454e:	6843      	ldr	r3, [r0, #4]
 8014550:	8819      	ldrh	r1, [r3, #0]
 8014552:	b199      	cbz	r1, 801457c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014554:	1c9a      	adds	r2, r3, #2
 8014556:	2902      	cmp	r1, #2
 8014558:	6042      	str	r2, [r0, #4]
 801455a:	d1f5      	bne.n	8014548 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801455c:	7c03      	ldrb	r3, [r0, #16]
 801455e:	2b01      	cmp	r3, #1
 8014560:	d8e5      	bhi.n	801452e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014562:	1c5a      	adds	r2, r3, #1
 8014564:	3302      	adds	r3, #2
 8014566:	7402      	strb	r2, [r0, #16]
 8014568:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801456c:	6143      	str	r3, [r0, #20]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d0dd      	beq.n	801452e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014572:	881b      	ldrh	r3, [r3, #0]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d0da      	beq.n	801452e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014578:	7604      	strb	r4, [r0, #24]
 801457a:	e7d8      	b.n	801452e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801457c:	2000      	movs	r0, #0
 801457e:	e7e4      	b.n	801454a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014580 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014580:	6001      	str	r1, [r0, #0]
 8014582:	2100      	movs	r1, #0
 8014584:	b430      	push	{r4, r5}
 8014586:	6041      	str	r1, [r0, #4]
 8014588:	6815      	ldr	r5, [r2, #0]
 801458a:	6085      	str	r5, [r0, #8]
 801458c:	6852      	ldr	r2, [r2, #4]
 801458e:	6443      	str	r3, [r0, #68]	@ 0x44
 8014590:	9b02      	ldr	r3, [sp, #8]
 8014592:	60c2      	str	r2, [r0, #12]
 8014594:	7401      	strb	r1, [r0, #16]
 8014596:	6141      	str	r1, [r0, #20]
 8014598:	7601      	strb	r1, [r0, #24]
 801459a:	8701      	strh	r1, [r0, #56]	@ 0x38
 801459c:	8401      	strh	r1, [r0, #32]
 801459e:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80145a2:	6483      	str	r3, [r0, #72]	@ 0x48
 80145a4:	bc30      	pop	{r4, r5}
 80145a6:	f7ef bd65 	b.w	8004074 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080145aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80145aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145ac:	4605      	mov	r5, r0
 80145ae:	4608      	mov	r0, r1
 80145b0:	b1f1      	cbz	r1, 80145f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80145b2:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80145b6:	460b      	mov	r3, r1
 80145b8:	f101 0708 	add.w	r7, r1, #8
 80145bc:	4622      	mov	r2, r4
 80145be:	6818      	ldr	r0, [r3, #0]
 80145c0:	3308      	adds	r3, #8
 80145c2:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80145c6:	4626      	mov	r6, r4
 80145c8:	42bb      	cmp	r3, r7
 80145ca:	c603      	stmia	r6!, {r0, r1}
 80145cc:	4634      	mov	r4, r6
 80145ce:	d1f6      	bne.n	80145be <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80145d0:	6818      	ldr	r0, [r3, #0]
 80145d2:	6030      	str	r0, [r6, #0]
 80145d4:	4610      	mov	r0, r2
 80145d6:	889b      	ldrh	r3, [r3, #4]
 80145d8:	80b3      	strh	r3, [r6, #4]
 80145da:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80145de:	015b      	lsls	r3, r3, #5
 80145e0:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80145e4:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80145e8:	430b      	orrs	r3, r1
 80145ea:	425b      	negs	r3, r3
 80145ec:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 80145f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080145f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 80145f2:	b538      	push	{r3, r4, r5, lr}
 80145f4:	460c      	mov	r4, r1
 80145f6:	6811      	ldr	r1, [r2, #0]
 80145f8:	4610      	mov	r0, r2
 80145fa:	68cd      	ldr	r5, [r1, #12]
 80145fc:	4619      	mov	r1, r3
 80145fe:	47a8      	blx	r5
 8014600:	2800      	cmp	r0, #0
 8014602:	bf08      	it	eq
 8014604:	4620      	moveq	r0, r4
 8014606:	bd38      	pop	{r3, r4, r5, pc}

08014608 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8014608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801460c:	468c      	mov	ip, r1
 801460e:	4605      	mov	r5, r0
 8014610:	4614      	mov	r4, r2
 8014612:	b942      	cbnz	r2, 8014626 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8014614:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8014618:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 801461c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8014620:	4620      	mov	r0, r4
 8014622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014626:	7b50      	ldrb	r0, [r2, #13]
 8014628:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 801462c:	8893      	ldrh	r3, [r2, #4]
 801462e:	0106      	lsls	r6, r0, #4
 8014630:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014634:	79e6      	ldrb	r6, [r4, #7]
 8014636:	4316      	orrs	r6, r2
 8014638:	185a      	adds	r2, r3, r1
 801463a:	b291      	uxth	r1, r2
 801463c:	b2b7      	uxth	r7, r6
 801463e:	291d      	cmp	r1, #29
 8014640:	d87f      	bhi.n	8014742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8014642:	2201      	movs	r2, #1
 8014644:	10f6      	asrs	r6, r6, #3
 8014646:	408a      	lsls	r2, r1
 8014648:	498b      	ldr	r1, [pc, #556]	@ (8014878 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801464a:	420a      	tst	r2, r1
 801464c:	d12e      	bne.n	80146ac <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801464e:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8014652:	d076      	beq.n	8014742 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8014654:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8014658:	4623      	mov	r3, r4
 801465a:	f104 0e08 	add.w	lr, r4, #8
 801465e:	4614      	mov	r4, r2
 8014660:	6818      	ldr	r0, [r3, #0]
 8014662:	3308      	adds	r3, #8
 8014664:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8014668:	4694      	mov	ip, r2
 801466a:	4573      	cmp	r3, lr
 801466c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014670:	4662      	mov	r2, ip
 8014672:	d1f5      	bne.n	8014660 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	f8cc 0000 	str.w	r0, [ip]
 801467a:	889b      	ldrh	r3, [r3, #4]
 801467c:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014680:	b2b3      	uxth	r3, r6
 8014682:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8014686:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801468a:	1aca      	subs	r2, r1, r3
 801468c:	1bcf      	subs	r7, r1, r7
 801468e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8014692:	b292      	uxth	r2, r2
 8014694:	1afb      	subs	r3, r7, r3
 8014696:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 801469a:	10d2      	asrs	r2, r2, #3
 801469c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80146a0:	4302      	orrs	r2, r0
 80146a2:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80146a6:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80146aa:	e7b9      	b.n	8014620 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80146ac:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80146b0:	4623      	mov	r3, r4
 80146b2:	f104 0808 	add.w	r8, r4, #8
 80146b6:	4614      	mov	r4, r2
 80146b8:	6818      	ldr	r0, [r3, #0]
 80146ba:	3308      	adds	r3, #8
 80146bc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80146c0:	4696      	mov	lr, r2
 80146c2:	4543      	cmp	r3, r8
 80146c4:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80146c8:	4672      	mov	r2, lr
 80146ca:	d1f5      	bne.n	80146b8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	f8ce 0000 	str.w	r0, [lr]
 80146d2:	889b      	ldrh	r3, [r3, #4]
 80146d4:	f8ae 3004 	strh.w	r3, [lr, #4]
 80146d8:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80146da:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80146de:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80146e0:	f640 6333 	movw	r3, #3635	@ 0xe33
 80146e4:	4299      	cmp	r1, r3
 80146e6:	d111      	bne.n	801470c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80146e8:	f8dc 3000 	ldr.w	r3, [ip]
 80146ec:	4660      	mov	r0, ip
 80146ee:	68db      	ldr	r3, [r3, #12]
 80146f0:	4798      	blx	r3
 80146f2:	7b41      	ldrb	r1, [r0, #13]
 80146f4:	00cb      	lsls	r3, r1, #3
 80146f6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80146fa:	7a03      	ldrb	r3, [r0, #8]
 80146fc:	4313      	orrs	r3, r2
 80146fe:	064a      	lsls	r2, r1, #25
 8014700:	bf44      	itt	mi
 8014702:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014706:	b21b      	sxthmi	r3, r3
 8014708:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801470c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8014710:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8014714:	443b      	add	r3, r7
 8014716:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801471a:	4433      	add	r3, r6
 801471c:	b29b      	uxth	r3, r3
 801471e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8014722:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8014726:	10db      	asrs	r3, r3, #3
 8014728:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801472c:	4313      	orrs	r3, r2
 801472e:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8014732:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8014736:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801473a:	1a9b      	subs	r3, r3, r2
 801473c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8014740:	e76e      	b.n	8014620 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8014742:	f023 0204 	bic.w	r2, r3, #4
 8014746:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801474a:	428a      	cmp	r2, r1
 801474c:	d003      	beq.n	8014756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801474e:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8014752:	4293      	cmp	r3, r2
 8014754:	d138      	bne.n	80147c8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8014756:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801475a:	4622      	mov	r2, r4
 801475c:	f104 0808 	add.w	r8, r4, #8
 8014760:	4634      	mov	r4, r6
 8014762:	6810      	ldr	r0, [r2, #0]
 8014764:	3208      	adds	r2, #8
 8014766:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801476a:	46b6      	mov	lr, r6
 801476c:	4542      	cmp	r2, r8
 801476e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014772:	4676      	mov	r6, lr
 8014774:	d1f5      	bne.n	8014762 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8014776:	6810      	ldr	r0, [r2, #0]
 8014778:	3b01      	subs	r3, #1
 801477a:	4621      	mov	r1, r4
 801477c:	f8ce 0000 	str.w	r0, [lr]
 8014780:	b29b      	uxth	r3, r3
 8014782:	8892      	ldrh	r2, [r2, #4]
 8014784:	4628      	mov	r0, r5
 8014786:	f8ae 2004 	strh.w	r2, [lr, #4]
 801478a:	4662      	mov	r2, ip
 801478c:	f7ff ff31 	bl	80145f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014790:	7b41      	ldrb	r1, [r0, #13]
 8014792:	00cb      	lsls	r3, r1, #3
 8014794:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014798:	7a03      	ldrb	r3, [r0, #8]
 801479a:	0648      	lsls	r0, r1, #25
 801479c:	ea43 0302 	orr.w	r3, r3, r2
 80147a0:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80147a4:	bf44      	itt	mi
 80147a6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80147aa:	b21b      	sxthmi	r3, r3
 80147ac:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80147b0:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80147b4:	005b      	lsls	r3, r3, #1
 80147b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147ba:	4313      	orrs	r3, r2
 80147bc:	115a      	asrs	r2, r3, #5
 80147be:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80147c2:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80147c6:	e047      	b.n	8014858 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80147c8:	00c2      	lsls	r2, r0, #3
 80147ca:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80147ce:	7a22      	ldrb	r2, [r4, #8]
 80147d0:	430a      	orrs	r2, r1
 80147d2:	0641      	lsls	r1, r0, #25
 80147d4:	f640 6109 	movw	r1, #3593	@ 0xe09
 80147d8:	bf44      	itt	mi
 80147da:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80147de:	b212      	sxthmi	r2, r2
 80147e0:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80147e4:	f023 0210 	bic.w	r2, r3, #16
 80147e8:	428a      	cmp	r2, r1
 80147ea:	d003      	beq.n	80147f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 80147ec:	f640 6213 	movw	r2, #3603	@ 0xe13
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d13e      	bne.n	8014872 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 80147f4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80147f8:	f104 0808 	add.w	r8, r4, #8
 80147fc:	4696      	mov	lr, r2
 80147fe:	6820      	ldr	r0, [r4, #0]
 8014800:	3408      	adds	r4, #8
 8014802:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8014806:	4616      	mov	r6, r2
 8014808:	4544      	cmp	r4, r8
 801480a:	c603      	stmia	r6!, {r0, r1}
 801480c:	4632      	mov	r2, r6
 801480e:	d1f6      	bne.n	80147fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8014810:	6820      	ldr	r0, [r4, #0]
 8014812:	6030      	str	r0, [r6, #0]
 8014814:	4628      	mov	r0, r5
 8014816:	88a1      	ldrh	r1, [r4, #4]
 8014818:	4674      	mov	r4, lr
 801481a:	80b1      	strh	r1, [r6, #4]
 801481c:	4671      	mov	r1, lr
 801481e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8014822:	0076      	lsls	r6, r6, #1
 8014824:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014828:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 801482c:	4316      	orrs	r6, r2
 801482e:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014832:	4293      	cmp	r3, r2
 8014834:	4662      	mov	r2, ip
 8014836:	bf16      	itet	ne
 8014838:	f103 33ff 	addne.w	r3, r3, #4294967295
 801483c:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8014840:	b29b      	uxthne	r3, r3
 8014842:	f7ff fed6 	bl	80145f2 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8014846:	7b43      	ldrb	r3, [r0, #13]
 8014848:	7a82      	ldrb	r2, [r0, #10]
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014850:	4313      	orrs	r3, r2
 8014852:	1af6      	subs	r6, r6, r3
 8014854:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8014858:	7b61      	ldrb	r1, [r4, #13]
 801485a:	00cb      	lsls	r3, r1, #3
 801485c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014860:	7a23      	ldrb	r3, [r4, #8]
 8014862:	4313      	orrs	r3, r2
 8014864:	064a      	lsls	r2, r1, #25
 8014866:	bf44      	itt	mi
 8014868:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801486c:	b21b      	sxthmi	r3, r3
 801486e:	1bdb      	subs	r3, r3, r7
 8014870:	e719      	b.n	80146a6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8014872:	2300      	movs	r3, #0
 8014874:	e7a5      	b.n	80147c2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8014876:	bf00      	nop
 8014878:	3fc00079 	.word	0x3fc00079

0801487c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801487c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014880:	4604      	mov	r4, r0
 8014882:	b942      	cbnz	r2, 8014896 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014884:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8014888:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801488c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8014890:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8014894:	e047      	b.n	8014926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014896:	7b51      	ldrb	r1, [r2, #13]
 8014898:	8893      	ldrh	r3, [r2, #4]
 801489a:	010d      	lsls	r5, r1, #4
 801489c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80148a0:	79d5      	ldrb	r5, [r2, #7]
 80148a2:	4305      	orrs	r5, r0
 80148a4:	2d04      	cmp	r5, #4
 80148a6:	bfcc      	ite	gt
 80148a8:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80148ac:	f04f 0e01 	movle.w	lr, #1
 80148b0:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80148b4:	f200 80ab 	bhi.w	8014a0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80148b8:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80148bc:	4283      	cmp	r3, r0
 80148be:	d216      	bcs.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148c0:	f240 605b 	movw	r0, #1627	@ 0x65b
 80148c4:	4283      	cmp	r3, r0
 80148c6:	d859      	bhi.n	801497c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80148c8:	f240 6057 	movw	r0, #1623	@ 0x657
 80148cc:	4283      	cmp	r3, r0
 80148ce:	d20e      	bcs.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148d0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80148d4:	d24a      	bcs.n	801496c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80148d6:	f240 604e 	movw	r0, #1614	@ 0x64e
 80148da:	4283      	cmp	r3, r0
 80148dc:	d207      	bcs.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148de:	f240 601a 	movw	r0, #1562	@ 0x61a
 80148e2:	4283      	cmp	r3, r0
 80148e4:	d02a      	beq.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80148e6:	d821      	bhi.n	801492c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80148e8:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 80148ec:	d35b      	bcc.n	80149a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80148ee:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 80148f2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80148f6:	f040 80d0 	bne.w	8014a9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80148fa:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 80148fe:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014902:	f040 80ca 	bne.w	8014a9a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8014906:	00cb      	lsls	r3, r1, #3
 8014908:	0649      	lsls	r1, r1, #25
 801490a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801490e:	7a13      	ldrb	r3, [r2, #8]
 8014910:	ea43 0300 	orr.w	r3, r3, r0
 8014914:	bf44      	itt	mi
 8014916:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801491a:	b21b      	sxthmi	r3, r3
 801491c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014920:	1b5d      	subs	r5, r3, r5
 8014922:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014926:	4610      	mov	r0, r2
 8014928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801492c:	f240 604b 	movw	r0, #1611	@ 0x64b
 8014930:	4283      	cmp	r3, r0
 8014932:	d338      	bcc.n	80149a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014934:	f240 604c 	movw	r0, #1612	@ 0x64c
 8014938:	4283      	cmp	r3, r0
 801493a:	d9d8      	bls.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801493c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8014940:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014944:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014948:	f040 80f3 	bne.w	8014b32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 801494c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014950:	f040 80ef 	bne.w	8014b32 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014954:	00cb      	lsls	r3, r1, #3
 8014956:	064e      	lsls	r6, r1, #25
 8014958:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801495c:	7a13      	ldrb	r3, [r2, #8]
 801495e:	ea43 0300 	orr.w	r3, r3, r0
 8014962:	bf44      	itt	mi
 8014964:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014968:	b21b      	sxthmi	r3, r3
 801496a:	e7d9      	b.n	8014920 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801496c:	f240 6054 	movw	r0, #1620	@ 0x654
 8014970:	4283      	cmp	r3, r0
 8014972:	d8e3      	bhi.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014974:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8014978:	d9e0      	bls.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801497a:	e7b8      	b.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801497c:	f240 6074 	movw	r0, #1652	@ 0x674
 8014980:	4283      	cmp	r3, r0
 8014982:	d0b4      	beq.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014984:	d82d      	bhi.n	80149e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8014986:	f240 605e 	movw	r0, #1630	@ 0x65e
 801498a:	4283      	cmp	r3, r0
 801498c:	d804      	bhi.n	8014998 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801498e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8014992:	4283      	cmp	r3, r0
 8014994:	d3d2      	bcc.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014996:	e7aa      	b.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014998:	f240 605f 	movw	r0, #1631	@ 0x65f
 801499c:	4283      	cmp	r3, r0
 801499e:	d0cd      	beq.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80149a0:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80149a4:	d0a3      	beq.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149a6:	00cb      	lsls	r3, r1, #3
 80149a8:	0649      	lsls	r1, r1, #25
 80149aa:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80149ae:	7a13      	ldrb	r3, [r2, #8]
 80149b0:	ea43 0300 	orr.w	r3, r3, r0
 80149b4:	bf44      	itt	mi
 80149b6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80149ba:	b21b      	sxthmi	r3, r3
 80149bc:	1b5d      	subs	r5, r3, r5
 80149be:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80149c2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80149c6:	7b53      	ldrb	r3, [r2, #13]
 80149c8:	015b      	lsls	r3, r3, #5
 80149ca:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80149ce:	7993      	ldrb	r3, [r2, #6]
 80149d0:	430b      	orrs	r3, r1
 80149d2:	2105      	movs	r1, #5
 80149d4:	005b      	lsls	r3, r3, #1
 80149d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80149da:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80149de:	440b      	add	r3, r1
 80149e0:	e756      	b.n	8014890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80149e2:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80149e6:	4283      	cmp	r3, r0
 80149e8:	d809      	bhi.n	80149fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80149ea:	f240 60df 	movw	r0, #1759	@ 0x6df
 80149ee:	4283      	cmp	r3, r0
 80149f0:	f4bf af7d 	bcs.w	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149f4:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 80149f8:	2b05      	cmp	r3, #5
 80149fa:	d8d4      	bhi.n	80149a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80149fc:	e777      	b.n	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149fe:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8014a02:	4283      	cmp	r3, r0
 8014a04:	d09a      	beq.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a06:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8014a0a:	4283      	cmp	r3, r0
 8014a0c:	e7ca      	b.n	80149a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014a0e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8014a12:	d22b      	bcs.n	8014a6c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014a14:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014a18:	4283      	cmp	r3, r0
 8014a1a:	d28f      	bcs.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a1c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014a20:	4283      	cmp	r3, r0
 8014a22:	d816      	bhi.n	8014a52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014a24:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014a28:	4283      	cmp	r3, r0
 8014a2a:	f4bf af60 	bcs.w	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a2e:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8014a32:	4283      	cmp	r3, r0
 8014a34:	d80a      	bhi.n	8014a4c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014a36:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014a3a:	4283      	cmp	r3, r0
 8014a3c:	f4bf af57 	bcs.w	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a40:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014a44:	4283      	cmp	r3, r0
 8014a46:	f43f af79 	beq.w	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a4a:	e7ac      	b.n	80149a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014a4c:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8014a50:	e7f8      	b.n	8014a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014a52:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8014a56:	4283      	cmp	r3, r0
 8014a58:	d802      	bhi.n	8014a60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014a5a:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014a5e:	e798      	b.n	8014992 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014a60:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8014a64:	4283      	cmp	r3, r0
 8014a66:	f47f af42 	bne.w	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a6a:	e767      	b.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a6c:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8014a70:	4283      	cmp	r3, r0
 8014a72:	f43f af63 	beq.w	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a76:	d802      	bhi.n	8014a7e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014a78:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8014a7c:	e7f2      	b.n	8014a64 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014a7e:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8014a82:	4283      	cmp	r3, r0
 8014a84:	d805      	bhi.n	8014a92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014a86:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8014a8a:	4283      	cmp	r3, r0
 8014a8c:	f4ff af2f 	bcc.w	80148ee <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a90:	e754      	b.n	801493c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a92:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8014a96:	4283      	cmp	r3, r0
 8014a98:	e7af      	b.n	80149fa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014a9a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014a9e:	4617      	mov	r7, r2
 8014aa0:	f102 0808 	add.w	r8, r2, #8
 8014aa4:	4666      	mov	r6, ip
 8014aa6:	6838      	ldr	r0, [r7, #0]
 8014aa8:	3708      	adds	r7, #8
 8014aaa:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014aae:	46e6      	mov	lr, ip
 8014ab0:	4547      	cmp	r7, r8
 8014ab2:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014ab6:	46f4      	mov	ip, lr
 8014ab8:	d1f5      	bne.n	8014aa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014aba:	6838      	ldr	r0, [r7, #0]
 8014abc:	f8ce 0000 	str.w	r0, [lr]
 8014ac0:	88b9      	ldrh	r1, [r7, #4]
 8014ac2:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014ac6:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014aca:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014ace:	d009      	beq.n	8014ae4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014ad0:	7b51      	ldrb	r1, [r2, #13]
 8014ad2:	7992      	ldrb	r2, [r2, #6]
 8014ad4:	0149      	lsls	r1, r1, #5
 8014ad6:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014ada:	4311      	orrs	r1, r2
 8014adc:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014ae0:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014ae4:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014ae8:	b2ad      	uxth	r5, r5
 8014aea:	d00d      	beq.n	8014b08 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014aec:	442b      	add	r3, r5
 8014aee:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014af2:	b29b      	uxth	r3, r3
 8014af4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014af8:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014afc:	10db      	asrs	r3, r3, #3
 8014afe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b02:	4313      	orrs	r3, r2
 8014b04:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014b08:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014b0c:	00cb      	lsls	r3, r1, #3
 8014b0e:	064f      	lsls	r7, r1, #25
 8014b10:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014b14:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014b18:	ea43 0302 	orr.w	r3, r3, r2
 8014b1c:	bf44      	itt	mi
 8014b1e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014b22:	b21b      	sxthmi	r3, r3
 8014b24:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014b28:	1b5b      	subs	r3, r3, r5
 8014b2a:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014b2e:	4632      	mov	r2, r6
 8014b30:	e6f9      	b.n	8014926 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014b32:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014b36:	4617      	mov	r7, r2
 8014b38:	f102 0908 	add.w	r9, r2, #8
 8014b3c:	4666      	mov	r6, ip
 8014b3e:	6838      	ldr	r0, [r7, #0]
 8014b40:	3708      	adds	r7, #8
 8014b42:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014b46:	46e0      	mov	r8, ip
 8014b48:	454f      	cmp	r7, r9
 8014b4a:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014b4e:	46c4      	mov	ip, r8
 8014b50:	d1f5      	bne.n	8014b3e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014b52:	6838      	ldr	r0, [r7, #0]
 8014b54:	f8c8 0000 	str.w	r0, [r8]
 8014b58:	88b9      	ldrh	r1, [r7, #4]
 8014b5a:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014b5e:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014b62:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014b66:	d009      	beq.n	8014b7c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014b68:	7b51      	ldrb	r1, [r2, #13]
 8014b6a:	7992      	ldrb	r2, [r2, #6]
 8014b6c:	0149      	lsls	r1, r1, #5
 8014b6e:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014b72:	4311      	orrs	r1, r2
 8014b74:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014b78:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014b7c:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014b80:	d00e      	beq.n	8014ba0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014b82:	eba3 030e 	sub.w	r3, r3, lr
 8014b86:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014b8a:	b29b      	uxth	r3, r3
 8014b8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014b90:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014b94:	10db      	asrs	r3, r3, #3
 8014b96:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b9a:	4313      	orrs	r3, r2
 8014b9c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014ba0:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014ba4:	00cb      	lsls	r3, r1, #3
 8014ba6:	0648      	lsls	r0, r1, #25
 8014ba8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014bac:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014bb0:	ea43 0302 	orr.w	r3, r3, r2
 8014bb4:	bf44      	itt	mi
 8014bb6:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014bba:	b21b      	sxthmi	r3, r3
 8014bbc:	1b5d      	subs	r5, r3, r5
 8014bbe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014bc2:	e7b4      	b.n	8014b2e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014bc4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bc8:	461e      	mov	r6, r3
 8014bca:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014bcc:	4604      	mov	r4, r0
 8014bce:	4617      	mov	r7, r2
 8014bd0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014bd4:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014bd8:	f7ef fa0a 	bl	8003ff0 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014bdc:	4605      	mov	r5, r0
 8014bde:	b918      	cbnz	r0, 8014be8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014be0:	6030      	str	r0, [r6, #0]
 8014be2:	4628      	mov	r0, r5
 8014be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014be8:	683b      	ldr	r3, [r7, #0]
 8014bea:	4601      	mov	r1, r0
 8014bec:	4638      	mov	r0, r7
 8014bee:	68db      	ldr	r3, [r3, #12]
 8014bf0:	4798      	blx	r3
 8014bf2:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8014bf6:	4602      	mov	r2, r0
 8014bf8:	6030      	str	r0, [r6, #0]
 8014bfa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014bfe:	d213      	bcs.n	8014c28 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014c00:	4643      	mov	r3, r8
 8014c02:	4639      	mov	r1, r7
 8014c04:	4620      	mov	r0, r4
 8014c06:	f7ff fe39 	bl	801487c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014c0a:	6030      	str	r0, [r6, #0]
 8014c0c:	6833      	ldr	r3, [r6, #0]
 8014c0e:	b143      	cbz	r3, 8014c22 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014c10:	7b5a      	ldrb	r2, [r3, #13]
 8014c12:	7a9b      	ldrb	r3, [r3, #10]
 8014c14:	0052      	lsls	r2, r2, #1
 8014c16:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8014c1a:	4313      	orrs	r3, r2
 8014c1c:	bf0c      	ite	eq
 8014c1e:	2301      	moveq	r3, #1
 8014c20:	2300      	movne	r3, #0
 8014c22:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8014c26:	e7dc      	b.n	8014be2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014c28:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c30:	d804      	bhi.n	8014c3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014c32:	4639      	mov	r1, r7
 8014c34:	4620      	mov	r0, r4
 8014c36:	f7ff fce7 	bl	8014608 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014c3a:	e7e6      	b.n	8014c0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014c3c:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d0e3      	beq.n	8014c0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c44:	f640 1302 	movw	r3, #2306	@ 0x902
 8014c48:	429d      	cmp	r5, r3
 8014c4a:	d1df      	bne.n	8014c0c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c4c:	4601      	mov	r1, r0
 8014c4e:	4620      	mov	r0, r4
 8014c50:	f7ff fcab 	bl	80145aa <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014c54:	e7d9      	b.n	8014c0a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014c56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014c56:	b510      	push	{r4, lr}
 8014c58:	4604      	mov	r4, r0
 8014c5a:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8014c5e:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014c60:	b1e1      	cbz	r1, 8014c9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014c62:	2b0a      	cmp	r3, #10
 8014c64:	d02d      	beq.n	8014cc2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014c66:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8014c68:	3901      	subs	r1, #1
 8014c6a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014c6e:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8014c70:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8014c74:	1c51      	adds	r1, r2, #1
 8014c76:	b289      	uxth	r1, r1
 8014c78:	2901      	cmp	r1, #1
 8014c7a:	bf8a      	itet	hi
 8014c7c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014c80:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8014c82:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8014c84:	1c5a      	adds	r2, r3, #1
 8014c86:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014c88:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014c8a:	4413      	add	r3, r2
 8014c8c:	b29b      	uxth	r3, r3
 8014c8e:	2b09      	cmp	r3, #9
 8014c90:	bf88      	it	hi
 8014c92:	3b0a      	subhi	r3, #10
 8014c94:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014c98:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014c9a:	e7de      	b.n	8014c5a <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014c9c:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014c9e:	2b0a      	cmp	r3, #10
 8014ca0:	d00f      	beq.n	8014cc2 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014ca2:	4620      	mov	r0, r4
 8014ca4:	f7ff fc40 	bl	8014528 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014ca8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014caa:	1c5a      	adds	r2, r3, #1
 8014cac:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014cae:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014cb0:	4413      	add	r3, r2
 8014cb2:	b29b      	uxth	r3, r3
 8014cb4:	2b09      	cmp	r3, #9
 8014cb6:	bf88      	it	hi
 8014cb8:	3b0a      	subhi	r3, #10
 8014cba:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014cbe:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014cc0:	e7ec      	b.n	8014c9c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014cc2:	bd10      	pop	{r4, pc}

08014cc4 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014cc4:	b538      	push	{r3, r4, r5, lr}
 8014cc6:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014cc8:	4604      	mov	r4, r0
 8014cca:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014cce:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8014cd0:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8014cd2:	3a01      	subs	r2, #1
 8014cd4:	8702      	strh	r2, [r0, #56]	@ 0x38
 8014cd6:	1c5a      	adds	r2, r3, #1
 8014cd8:	b292      	uxth	r2, r2
 8014cda:	2a09      	cmp	r2, #9
 8014cdc:	bf8a      	itet	hi
 8014cde:	3b09      	subhi	r3, #9
 8014ce0:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8014ce2:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8014ce4:	f7ff ffb7 	bl	8014c56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014ce8:	8c23      	ldrh	r3, [r4, #32]
 8014cea:	2b01      	cmp	r3, #1
 8014cec:	bf9c      	itt	ls
 8014cee:	3301      	addls	r3, #1
 8014cf0:	8423      	strhls	r3, [r4, #32]
 8014cf2:	8be3      	ldrh	r3, [r4, #30]
 8014cf4:	b90b      	cbnz	r3, 8014cfa <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014cf6:	2302      	movs	r3, #2
 8014cf8:	83e3      	strh	r3, [r4, #30]
 8014cfa:	8be3      	ldrh	r3, [r4, #30]
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	3b01      	subs	r3, #1
 8014d00:	b29b      	uxth	r3, r3
 8014d02:	83e3      	strh	r3, [r4, #30]
 8014d04:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014d08:	8365      	strh	r5, [r4, #26]
 8014d0a:	bd38      	pop	{r3, r4, r5, pc}

08014d0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014d0c:	428a      	cmp	r2, r1
 8014d0e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d12:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8014d14:	d932      	bls.n	8014d7c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8014d16:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8014d18:	1a54      	subs	r4, r2, r1
 8014d1a:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8014d1e:	19ee      	adds	r6, r5, r7
 8014d20:	fa1f fe84 	uxth.w	lr, r4
 8014d24:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8014d28:	3e01      	subs	r6, #1
 8014d2a:	b2b4      	uxth	r4, r6
 8014d2c:	eba4 090e 	sub.w	r9, r4, lr
 8014d30:	fa1f f989 	uxth.w	r9, r9
 8014d34:	2c09      	cmp	r4, #9
 8014d36:	4626      	mov	r6, r4
 8014d38:	bf88      	it	hi
 8014d3a:	f1a4 060a 	subhi.w	r6, r4, #10
 8014d3e:	f1bc 0f00 	cmp.w	ip, #0
 8014d42:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d46:	bf08      	it	eq
 8014d48:	f04f 0c02 	moveq.w	ip, #2
 8014d4c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014d50:	b2a4      	uxth	r4, r4
 8014d52:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014d56:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8014d5a:	454c      	cmp	r4, r9
 8014d5c:	fa1f fc8c 	uxth.w	ip, ip
 8014d60:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014d64:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8014d68:	d1e4      	bne.n	8014d34 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014d6a:	eba5 050e 	sub.w	r5, r5, lr
 8014d6e:	eb0e 0408 	add.w	r4, lr, r8
 8014d72:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8014d76:	8705      	strh	r5, [r0, #56]	@ 0x38
 8014d78:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8014d7c:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8014d7e:	250a      	movs	r5, #10
 8014d80:	1a64      	subs	r4, r4, r1
 8014d82:	4439      	add	r1, r7
 8014d84:	b289      	uxth	r1, r1
 8014d86:	8704      	strh	r4, [r0, #56]	@ 0x38
 8014d88:	2909      	cmp	r1, #9
 8014d8a:	bf88      	it	hi
 8014d8c:	390a      	subhi	r1, #10
 8014d8e:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014d90:	b18a      	cbz	r2, 8014db6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014d92:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8014d94:	3a01      	subs	r2, #1
 8014d96:	3101      	adds	r1, #1
 8014d98:	b292      	uxth	r2, r2
 8014d9a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014d9e:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014da0:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014da2:	b901      	cbnz	r1, 8014da6 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014da4:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8014da6:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014da8:	3901      	subs	r1, #1
 8014daa:	b289      	uxth	r1, r1
 8014dac:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014dae:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014db2:	844c      	strh	r4, [r1, #34]	@ 0x22
 8014db4:	e7ec      	b.n	8014d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8014db6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dba:	f7ff bf4c 	b.w	8014c56 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014dbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014dbe:	b570      	push	{r4, r5, r6, lr}
 8014dc0:	2500      	movs	r5, #0
 8014dc2:	4295      	cmp	r5, r2
 8014dc4:	d011      	beq.n	8014dea <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014dc6:	8bc4      	ldrh	r4, [r0, #30]
 8014dc8:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014dcc:	4414      	add	r4, r2
 8014dce:	3c01      	subs	r4, #1
 8014dd0:	1b64      	subs	r4, r4, r5
 8014dd2:	b2a4      	uxth	r4, r4
 8014dd4:	2c01      	cmp	r4, #1
 8014dd6:	bf88      	it	hi
 8014dd8:	3c02      	subhi	r4, #2
 8014dda:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014dde:	8b64      	ldrh	r4, [r4, #26]
 8014de0:	42b4      	cmp	r4, r6
 8014de2:	d117      	bne.n	8014e14 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014de4:	3501      	adds	r5, #1
 8014de6:	b2ad      	uxth	r5, r5
 8014de8:	e7eb      	b.n	8014dc2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014dea:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014dee:	2400      	movs	r4, #0
 8014df0:	4413      	add	r3, r2
 8014df2:	b2a2      	uxth	r2, r4
 8014df4:	429a      	cmp	r2, r3
 8014df6:	da0f      	bge.n	8014e18 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014df8:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8014dfa:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014dfe:	3401      	adds	r4, #1
 8014e00:	4432      	add	r2, r6
 8014e02:	b292      	uxth	r2, r2
 8014e04:	2a09      	cmp	r2, #9
 8014e06:	bf88      	it	hi
 8014e08:	3a0a      	subhi	r2, #10
 8014e0a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014e0e:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8014e10:	42aa      	cmp	r2, r5
 8014e12:	d0ee      	beq.n	8014df2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014e14:	2000      	movs	r0, #0
 8014e16:	bd70      	pop	{r4, r5, r6, pc}
 8014e18:	2001      	movs	r0, #1
 8014e1a:	e7fc      	b.n	8014e16 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014e1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e20:	4605      	mov	r5, r0
 8014e22:	4616      	mov	r6, r2
 8014e24:	1c8c      	adds	r4, r1, #2
 8014e26:	8809      	ldrh	r1, [r1, #0]
 8014e28:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014e2c:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014e30:	42b3      	cmp	r3, r6
 8014e32:	d124      	bne.n	8014e7e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014e34:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014e38:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014e3c:	f001 070f 	and.w	r7, r1, #15
 8014e40:	4652      	mov	r2, sl
 8014e42:	f8cd 8000 	str.w	r8, [sp]
 8014e46:	464b      	mov	r3, r9
 8014e48:	4621      	mov	r1, r4
 8014e4a:	4628      	mov	r0, r5
 8014e4c:	f7ff ffb7 	bl	8014dbe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014e50:	4683      	mov	fp, r0
 8014e52:	b168      	cbz	r0, 8014e70 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014e54:	eb0a 0109 	add.w	r1, sl, r9
 8014e58:	463a      	mov	r2, r7
 8014e5a:	4628      	mov	r0, r5
 8014e5c:	4441      	add	r1, r8
 8014e5e:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014e62:	4649      	mov	r1, r9
 8014e64:	f7ff ff52 	bl	8014d0c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014e68:	4658      	mov	r0, fp
 8014e6a:	b003      	add	sp, #12
 8014e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e70:	eb07 010a 	add.w	r1, r7, sl
 8014e74:	4449      	add	r1, r9
 8014e76:	4441      	add	r1, r8
 8014e78:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014e7c:	e7d2      	b.n	8014e24 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014e7e:	f04f 0b00 	mov.w	fp, #0
 8014e82:	e7f1      	b.n	8014e68 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014e84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014e84:	b570      	push	{r4, r5, r6, lr}
 8014e86:	8810      	ldrh	r0, [r2, #0]
 8014e88:	4298      	cmp	r0, r3
 8014e8a:	d817      	bhi.n	8014ebc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e8c:	1e48      	subs	r0, r1, #1
 8014e8e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014e92:	4298      	cmp	r0, r3
 8014e94:	d312      	bcc.n	8014ebc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e96:	2400      	movs	r4, #0
 8014e98:	428c      	cmp	r4, r1
 8014e9a:	d20f      	bcs.n	8014ebc <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014e9c:	1860      	adds	r0, r4, r1
 8014e9e:	1040      	asrs	r0, r0, #1
 8014ea0:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014ea4:	0085      	lsls	r5, r0, #2
 8014ea6:	42b3      	cmp	r3, r6
 8014ea8:	d902      	bls.n	8014eb0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014eaa:	3001      	adds	r0, #1
 8014eac:	b284      	uxth	r4, r0
 8014eae:	e7f3      	b.n	8014e98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014eb0:	d201      	bcs.n	8014eb6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014eb2:	b281      	uxth	r1, r0
 8014eb4:	e7f0      	b.n	8014e98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014eb6:	442a      	add	r2, r5
 8014eb8:	8850      	ldrh	r0, [r2, #2]
 8014eba:	bd70      	pop	{r4, r5, r6, pc}
 8014ebc:	2000      	movs	r0, #0
 8014ebe:	e7fc      	b.n	8014eba <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014ec0 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014ec0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ec4:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8014ec6:	4604      	mov	r4, r0
 8014ec8:	260b      	movs	r6, #11
 8014eca:	886f      	ldrh	r7, [r5, #2]
 8014ecc:	087f      	lsrs	r7, r7, #1
 8014ece:	3e01      	subs	r6, #1
 8014ed0:	d013      	beq.n	8014efa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014ed2:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014ed4:	462a      	mov	r2, r5
 8014ed6:	4639      	mov	r1, r7
 8014ed8:	4620      	mov	r0, r4
 8014eda:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014ede:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014ee2:	4643      	mov	r3, r8
 8014ee4:	f7ff ffce 	bl	8014e84 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014ee8:	b138      	cbz	r0, 8014efa <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014eea:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014eee:	4642      	mov	r2, r8
 8014ef0:	4620      	mov	r0, r4
 8014ef2:	f7ff ff93 	bl	8014e1c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d1e9      	bne.n	8014ece <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014f00 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014f00:	b570      	push	{r4, r5, r6, lr}
 8014f02:	694a      	ldr	r2, [r1, #20]
 8014f04:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014f06:	684b      	ldr	r3, [r1, #4]
 8014f08:	1b54      	subs	r4, r2, r5
 8014f0a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8014f0c:	f000 8106 	beq.w	801511c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014f10:	1b9b      	subs	r3, r3, r6
 8014f12:	d003      	beq.n	8014f1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014f14:	4363      	muls	r3, r4
 8014f16:	2210      	movs	r2, #16
 8014f18:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f1c:	680c      	ldr	r4, [r1, #0]
 8014f1e:	698a      	ldr	r2, [r1, #24]
 8014f20:	1b65      	subs	r5, r4, r5
 8014f22:	f000 80fd 	beq.w	8015120 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014f26:	1b92      	subs	r2, r2, r6
 8014f28:	d003      	beq.n	8014f32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014f2a:	436a      	muls	r2, r5
 8014f2c:	2410      	movs	r4, #16
 8014f2e:	fb92 f2f4 	sdiv	r2, r2, r4
 8014f32:	1a9b      	subs	r3, r3, r2
 8014f34:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 801515c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014f38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014f3c:	460a      	mov	r2, r1
 8014f3e:	ee07 3a90 	vmov	s15, r3
 8014f42:	f100 040c 	add.w	r4, r0, #12
 8014f46:	4603      	mov	r3, r0
 8014f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f4c:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014f50:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014f54:	eeb1 6a43 	vneg.f32	s12, s6
 8014f58:	edd2 7a02 	vldr	s15, [r2, #8]
 8014f5c:	3214      	adds	r2, #20
 8014f5e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f62:	ece3 6a01 	vstmia	r3!, {s13}
 8014f66:	429c      	cmp	r4, r3
 8014f68:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014f6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f70:	edc3 7a02 	vstr	s15, [r3, #8]
 8014f74:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014f78:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f7c:	edc3 7a05 	vstr	s15, [r3, #20]
 8014f80:	d1ea      	bne.n	8014f58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014f82:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014f84:	698b      	ldr	r3, [r1, #24]
 8014f86:	edd0 4a02 	vldr	s9, [r0, #8]
 8014f8a:	1a9b      	subs	r3, r3, r2
 8014f8c:	edd0 3a00 	vldr	s7, [r0]
 8014f90:	edd0 6a01 	vldr	s13, [r0, #4]
 8014f94:	ee07 3a90 	vmov	s15, r3
 8014f98:	684b      	ldr	r3, [r1, #4]
 8014f9a:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014f9e:	ed90 5a05 	vldr	s10, [r0, #20]
 8014fa2:	1a9b      	subs	r3, r3, r2
 8014fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fa8:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014fac:	ed90 2a03 	vldr	s4, [r0, #12]
 8014fb0:	ee07 3a10 	vmov	s14, r3
 8014fb4:	edd0 5a04 	vldr	s11, [r0, #16]
 8014fb8:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014fbc:	ed90 1a07 	vldr	s2, [r0, #28]
 8014fc0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fc4:	edd0 2a06 	vldr	s5, [r0, #24]
 8014fc8:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014fcc:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014fd0:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014fd4:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014fd8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014fdc:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014fe0:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8014fe4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014fe6:	694a      	ldr	r2, [r1, #20]
 8014fe8:	1b13      	subs	r3, r2, r4
 8014fea:	ee07 3a10 	vmov	s14, r3
 8014fee:	680b      	ldr	r3, [r1, #0]
 8014ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014ff4:	1b1b      	subs	r3, r3, r4
 8014ff6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014ffa:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8014ffe:	ee07 3a10 	vmov	s14, r3
 8015002:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015006:	ee27 7a04 	vmul.f32	s14, s14, s8
 801500a:	eee6 4a87 	vfma.f32	s9, s13, s14
 801500e:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015012:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8015016:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015018:	698b      	ldr	r3, [r1, #24]
 801501a:	1a9b      	subs	r3, r3, r2
 801501c:	ee06 3a90 	vmov	s13, r3
 8015020:	684b      	ldr	r3, [r1, #4]
 8015022:	1a9b      	subs	r3, r3, r2
 8015024:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015028:	ee07 3a10 	vmov	s14, r3
 801502c:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015030:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015034:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015038:	ee27 7a04 	vmul.f32	s14, s14, s8
 801503c:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015040:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015044:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8015048:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801504a:	694a      	ldr	r2, [r1, #20]
 801504c:	1b13      	subs	r3, r2, r4
 801504e:	ee07 3a10 	vmov	s14, r3
 8015052:	680b      	ldr	r3, [r1, #0]
 8015054:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015058:	1b1b      	subs	r3, r3, r4
 801505a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801505e:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015062:	ee07 3a10 	vmov	s14, r3
 8015066:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801506a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801506e:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015072:	edd0 5a08 	vldr	s11, [r0, #32]
 8015076:	ee31 1a65 	vsub.f32	s2, s2, s11
 801507a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 801507e:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015082:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8015086:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015088:	698b      	ldr	r3, [r1, #24]
 801508a:	1a9b      	subs	r3, r3, r2
 801508c:	ee07 3a10 	vmov	s14, r3
 8015090:	684b      	ldr	r3, [r1, #4]
 8015092:	1a9b      	subs	r3, r3, r2
 8015094:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015098:	ee01 3a90 	vmov	s3, r3
 801509c:	ee27 7a04 	vmul.f32	s14, s14, s8
 80150a0:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80150a4:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80150a8:	ee61 1a84 	vmul.f32	s3, s3, s8
 80150ac:	eea1 7a21 	vfma.f32	s14, s2, s3
 80150b0:	ee27 7a03 	vmul.f32	s14, s14, s6
 80150b4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80150b8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80150ba:	694a      	ldr	r2, [r1, #20]
 80150bc:	1b13      	subs	r3, r2, r4
 80150be:	ee03 3a10 	vmov	s6, r3
 80150c2:	680b      	ldr	r3, [r1, #0]
 80150c4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80150c8:	1b1b      	subs	r3, r3, r4
 80150ca:	ee23 3a04 	vmul.f32	s6, s6, s8
 80150ce:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80150d2:	ee03 3a10 	vmov	s6, r3
 80150d6:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80150da:	ee23 4a04 	vmul.f32	s8, s6, s8
 80150de:	eee1 5a04 	vfma.f32	s11, s2, s8
 80150e2:	ee25 6a86 	vmul.f32	s12, s11, s12
 80150e6:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80150ea:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 80150ee:	eee3 5aa6 	vfma.f32	s11, s7, s13
 80150f2:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 80150f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150fa:	dd13      	ble.n	8015124 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 80150fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015100:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015104:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8015106:	eee3 7a87 	vfma.f32	s15, s7, s14
 801510a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015112:	dd15      	ble.n	8015140 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015118:	6403      	str	r3, [r0, #64]	@ 0x40
 801511a:	bd70      	pop	{r4, r5, r6, pc}
 801511c:	4623      	mov	r3, r4
 801511e:	e6fd      	b.n	8014f1c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015120:	462a      	mov	r2, r5
 8015122:	e706      	b.n	8014f32 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015124:	d502      	bpl.n	801512c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8015126:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801512a:	e7e9      	b.n	8015100 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 801512c:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015130:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015134:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513c:	dade      	bge.n	80150fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801513e:	e7f2      	b.n	8015126 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015140:	d502      	bpl.n	8015148 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8015142:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8015146:	e7e7      	b.n	8015118 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8015148:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 801514c:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015150:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015158:	dadc      	bge.n	8015114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801515a:	e7f2      	b.n	8015142 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 801515c:	3d800000 	.word	0x3d800000

08015160 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015164:	2714      	movs	r7, #20
 8015166:	435f      	muls	r7, r3
 8015168:	eb02 0c07 	add.w	ip, r2, r7
 801516c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015170:	f115 0e0f 	adds.w	lr, r5, #15
 8015174:	f100 80a2 	bmi.w	80152bc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015178:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 801517c:	9c08      	ldr	r4, [sp, #32]
 801517e:	2614      	movs	r6, #20
 8015180:	f8c0 e014 	str.w	lr, [r0, #20]
 8015184:	4366      	muls	r6, r4
 8015186:	eb02 0806 	add.w	r8, r2, r6
 801518a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801518e:	f115 040f 	adds.w	r4, r5, #15
 8015192:	f100 809f 	bmi.w	80152d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015196:	1124      	asrs	r4, r4, #4
 8015198:	eba4 040e 	sub.w	r4, r4, lr
 801519c:	6184      	str	r4, [r0, #24]
 801519e:	2c00      	cmp	r4, #0
 80151a0:	f000 808a 	beq.w	80152b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80151a4:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80151a8:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80151ac:	5995      	ldr	r5, [r2, r6]
 80151ae:	eba4 0809 	sub.w	r8, r4, r9
 80151b2:	59d4      	ldr	r4, [r2, r7]
 80151b4:	eba5 0a04 	sub.w	sl, r5, r4
 80151b8:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80151bc:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80151c0:	fb0e fe05 	mul.w	lr, lr, r5
 80151c4:	fb0a ee19 	mls	lr, sl, r9, lr
 80151c8:	fb08 e404 	mla	r4, r8, r4, lr
 80151cc:	3c01      	subs	r4, #1
 80151ce:	19a4      	adds	r4, r4, r6
 80151d0:	f100 808c 	bmi.w	80152ec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80151d4:	fb94 fef6 	sdiv	lr, r4, r6
 80151d8:	fb06 441e 	mls	r4, r6, lr, r4
 80151dc:	f8c0 e000 	str.w	lr, [r0]
 80151e0:	6104      	str	r4, [r0, #16]
 80151e2:	2d00      	cmp	r5, #0
 80151e4:	f2c0 8095 	blt.w	8015312 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80151e8:	fb95 f4f6 	sdiv	r4, r5, r6
 80151ec:	fb06 5514 	mls	r5, r6, r4, r5
 80151f0:	6044      	str	r4, [r0, #4]
 80151f2:	6085      	str	r5, [r0, #8]
 80151f4:	60c6      	str	r6, [r0, #12]
 80151f6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80151fa:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80151fe:	6945      	ldr	r5, [r0, #20]
 8015200:	59d2      	ldr	r2, [r2, r7]
 8015202:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015206:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015334 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801520a:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801520e:	ee07 4a10 	vmov	s14, r4
 8015212:	6804      	ldr	r4, [r0, #0]
 8015214:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015218:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801521c:	ee07 2a90 	vmov	s15, r2
 8015220:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015228:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801522c:	edd3 6a00 	vldr	s13, [r3]
 8015230:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015234:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8015238:	eee6 6a27 	vfma.f32	s13, s12, s15
 801523c:	edc0 6a07 	vstr	s13, [r0, #28]
 8015240:	edd0 6a01 	vldr	s13, [r0, #4]
 8015244:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8015248:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801524c:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8015250:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015254:	ed80 6a08 	vstr	s12, [r0, #32]
 8015258:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801525a:	6242      	str	r2, [r0, #36]	@ 0x24
 801525c:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8015260:	ed93 6a03 	vldr	s12, [r3, #12]
 8015264:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015268:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801526c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015270:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8015274:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015278:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 801527c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015280:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8015284:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015286:	6302      	str	r2, [r0, #48]	@ 0x30
 8015288:	ed93 6a06 	vldr	s12, [r3, #24]
 801528c:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8015290:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015294:	eeb0 7a46 	vmov.f32	s14, s12
 8015298:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 801529c:	eea6 7a27 	vfma.f32	s14, s12, s15
 80152a0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80152a4:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80152a8:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80152ac:	eee6 7a87 	vfma.f32	s15, s13, s14
 80152b0:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80152b4:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80152b6:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80152b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152bc:	2410      	movs	r4, #16
 80152be:	f1c5 0501 	rsb	r5, r5, #1
 80152c2:	fb9e fef4 	sdiv	lr, lr, r4
 80152c6:	f015 050f 	ands.w	r5, r5, #15
 80152ca:	bf18      	it	ne
 80152cc:	2501      	movne	r5, #1
 80152ce:	ebae 0e05 	sub.w	lr, lr, r5
 80152d2:	e753      	b.n	801517c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80152d4:	f04f 0910 	mov.w	r9, #16
 80152d8:	f1c5 0501 	rsb	r5, r5, #1
 80152dc:	fb94 f4f9 	sdiv	r4, r4, r9
 80152e0:	f015 050f 	ands.w	r5, r5, #15
 80152e4:	bf18      	it	ne
 80152e6:	2501      	movne	r5, #1
 80152e8:	1b64      	subs	r4, r4, r5
 80152ea:	e755      	b.n	8015198 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 80152ec:	4264      	negs	r4, r4
 80152ee:	fb94 fef6 	sdiv	lr, r4, r6
 80152f2:	f1ce 0800 	rsb	r8, lr, #0
 80152f6:	fb06 441e 	mls	r4, r6, lr, r4
 80152fa:	f8c0 8000 	str.w	r8, [r0]
 80152fe:	6104      	str	r4, [r0, #16]
 8015300:	2c00      	cmp	r4, #0
 8015302:	f43f af6e 	beq.w	80151e2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015306:	ea6f 0e0e 	mvn.w	lr, lr
 801530a:	1b34      	subs	r4, r6, r4
 801530c:	f8c0 e000 	str.w	lr, [r0]
 8015310:	e766      	b.n	80151e0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8015312:	426d      	negs	r5, r5
 8015314:	fb95 f4f6 	sdiv	r4, r5, r6
 8015318:	f1c4 0e00 	rsb	lr, r4, #0
 801531c:	fb06 5514 	mls	r5, r6, r4, r5
 8015320:	f8c0 e004 	str.w	lr, [r0, #4]
 8015324:	6085      	str	r5, [r0, #8]
 8015326:	2d00      	cmp	r5, #0
 8015328:	f43f af64 	beq.w	80151f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 801532c:	43e4      	mvns	r4, r4
 801532e:	1b75      	subs	r5, r6, r5
 8015330:	6044      	str	r4, [r0, #4]
 8015332:	e75e      	b.n	80151f2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015334:	3d800000 	.word	0x3d800000

08015338 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015338:	4b01      	ldr	r3, [pc, #4]	@ (8015340 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801533a:	6018      	str	r0, [r3, #0]
 801533c:	4770      	bx	lr
 801533e:	bf00      	nop
 8015340:	240252dc 	.word	0x240252dc

08015344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015344:	4b06      	ldr	r3, [pc, #24]	@ (8015360 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015346:	881a      	ldrh	r2, [r3, #0]
 8015348:	4282      	cmp	r2, r0
 801534a:	d807      	bhi.n	801535c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801534c:	4b05      	ldr	r3, [pc, #20]	@ (8015364 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801534e:	881b      	ldrh	r3, [r3, #0]
 8015350:	4413      	add	r3, r2
 8015352:	4298      	cmp	r0, r3
 8015354:	bfac      	ite	ge
 8015356:	2000      	movge	r0, #0
 8015358:	2001      	movlt	r0, #1
 801535a:	4770      	bx	lr
 801535c:	2000      	movs	r0, #0
 801535e:	4770      	bx	lr
 8015360:	240252fc 	.word	0x240252fc
 8015364:	24025300 	.word	0x24025300

08015368 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015368:	b508      	push	{r3, lr}
 801536a:	4601      	mov	r1, r0
 801536c:	f7ff ffea 	bl	8015344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015370:	b118      	cbz	r0, 801537a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8015372:	4b02      	ldr	r3, [pc, #8]	@ (801537c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015374:	681b      	ldr	r3, [r3, #0]
 8015376:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801537a:	bd08      	pop	{r3, pc}
 801537c:	240252e0 	.word	0x240252e0

08015380 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8015380:	b538      	push	{r3, r4, r5, lr}
 8015382:	4604      	mov	r4, r0
 8015384:	f7ff ffde 	bl	8015344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015388:	b1d8      	cbz	r0, 80153c2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801538a:	4b0f      	ldr	r3, [pc, #60]	@ (80153c8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801538c:	881b      	ldrh	r3, [r3, #0]
 801538e:	1ae4      	subs	r4, r4, r3
 8015390:	230e      	movs	r3, #14
 8015392:	4363      	muls	r3, r4
 8015394:	4c0d      	ldr	r4, [pc, #52]	@ (80153cc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 8015396:	6825      	ldr	r5, [r4, #0]
 8015398:	18ea      	adds	r2, r5, r3
 801539a:	7b12      	ldrb	r2, [r2, #12]
 801539c:	f012 0220 	ands.w	r2, r2, #32
 80153a0:	d010      	beq.n	80153c4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80153a2:	f9b1 2000 	ldrsh.w	r2, [r1]
 80153a6:	52ea      	strh	r2, [r5, r3]
 80153a8:	6822      	ldr	r2, [r4, #0]
 80153aa:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80153ae:	441a      	add	r2, r3
 80153b0:	8055      	strh	r5, [r2, #2]
 80153b2:	6822      	ldr	r2, [r4, #0]
 80153b4:	4413      	add	r3, r2
 80153b6:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80153ba:	809a      	strh	r2, [r3, #4]
 80153bc:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80153c0:	80da      	strh	r2, [r3, #6]
 80153c2:	bd38      	pop	{r3, r4, r5, pc}
 80153c4:	4610      	mov	r0, r2
 80153c6:	e7fc      	b.n	80153c2 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80153c8:	240252fc 	.word	0x240252fc
 80153cc:	240252e4 	.word	0x240252e4

080153d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80153d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80153d4:	4606      	mov	r6, r0
 80153d6:	460c      	mov	r4, r1
 80153d8:	f7ff ffb4 	bl	8015344 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80153dc:	b918      	cbnz	r0, 80153e6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80153de:	2000      	movs	r0, #0
 80153e0:	b002      	add	sp, #8
 80153e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153e6:	4608      	mov	r0, r1
 80153e8:	f7f8 facb 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80153ec:	2800      	cmp	r0, #0
 80153ee:	d1f6      	bne.n	80153de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80153f0:	4b3f      	ldr	r3, [pc, #252]	@ (80154f0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 80153f2:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 80154f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 80153f6:	881d      	ldrh	r5, [r3, #0]
 80153f8:	f8d9 a000 	ldr.w	sl, [r9]
 80153fc:	46c8      	mov	r8, r9
 80153fe:	1b73      	subs	r3, r6, r5
 8015400:	250e      	movs	r5, #14
 8015402:	435d      	muls	r5, r3
 8015404:	eb0a 0705 	add.w	r7, sl, r5
 8015408:	7b3b      	ldrb	r3, [r7, #12]
 801540a:	f013 0f20 	tst.w	r3, #32
 801540e:	d0e6      	beq.n	80153de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015410:	4621      	mov	r1, r4
 8015412:	4638      	mov	r0, r7
 8015414:	f7fc feda 	bl	80121cc <_ZNK8touchgfx4Rect8includesERKS0_>
 8015418:	2800      	cmp	r0, #0
 801541a:	d1e1      	bne.n	80153e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801541c:	4639      	mov	r1, r7
 801541e:	4620      	mov	r0, r4
 8015420:	f7fc fed4 	bl	80121cc <_ZNK8touchgfx4Rect8includesERKS0_>
 8015424:	b108      	cbz	r0, 801542a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8015426:	4621      	mov	r1, r4
 8015428:	e020      	b.n	801546c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801542a:	f9b4 2000 	ldrsh.w	r2, [r4]
 801542e:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8015432:	429a      	cmp	r2, r3
 8015434:	d11e      	bne.n	8015474 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015436:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801543a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801543e:	429a      	cmp	r2, r3
 8015440:	d118      	bne.n	8015474 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015442:	6820      	ldr	r0, [r4, #0]
 8015444:	466b      	mov	r3, sp
 8015446:	6861      	ldr	r1, [r4, #4]
 8015448:	c303      	stmia	r3!, {r0, r1}
 801544a:	4639      	mov	r1, r7
 801544c:	4668      	mov	r0, sp
 801544e:	f7fc fee3 	bl	8012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015452:	f8d9 3000 	ldr.w	r3, [r9]
 8015456:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801545a:	442b      	add	r3, r5
 801545c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015460:	4413      	add	r3, r2
 8015462:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8015466:	4293      	cmp	r3, r2
 8015468:	dc04      	bgt.n	8015474 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801546a:	4669      	mov	r1, sp
 801546c:	4630      	mov	r0, r6
 801546e:	f7ff ff87 	bl	8015380 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8015472:	e7b5      	b.n	80153e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015474:	f8d8 3000 	ldr.w	r3, [r8]
 8015478:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801547c:	442b      	add	r3, r5
 801547e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015482:	4291      	cmp	r1, r2
 8015484:	d119      	bne.n	80154ba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8015486:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801548a:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801548e:	4291      	cmp	r1, r2
 8015490:	d113      	bne.n	80154ba <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 8015492:	6820      	ldr	r0, [r4, #0]
 8015494:	466a      	mov	r2, sp
 8015496:	6861      	ldr	r1, [r4, #4]
 8015498:	c203      	stmia	r2!, {r0, r1}
 801549a:	4619      	mov	r1, r3
 801549c:	4668      	mov	r0, sp
 801549e:	f7fc febb 	bl	8012218 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80154a2:	f8d8 3000 	ldr.w	r3, [r8]
 80154a6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80154aa:	442b      	add	r3, r5
 80154ac:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154b0:	4413      	add	r3, r2
 80154b2:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80154b6:	4293      	cmp	r3, r2
 80154b8:	ddd7      	ble.n	801546a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80154ba:	4620      	mov	r0, r4
 80154bc:	f7f8 fa61 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154c0:	b990      	cbnz	r0, 80154e8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80154c2:	88a7      	ldrh	r7, [r4, #4]
 80154c4:	88e3      	ldrh	r3, [r4, #6]
 80154c6:	fb17 f703 	smulbb	r7, r7, r3
 80154ca:	f8d8 3000 	ldr.w	r3, [r8]
 80154ce:	441d      	add	r5, r3
 80154d0:	4628      	mov	r0, r5
 80154d2:	f7f8 fa56 	bl	800d982 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154d6:	b948      	cbnz	r0, 80154ec <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80154d8:	88ab      	ldrh	r3, [r5, #4]
 80154da:	88ea      	ldrh	r2, [r5, #6]
 80154dc:	fb13 f302 	smulbb	r3, r3, r2
 80154e0:	42bb      	cmp	r3, r7
 80154e2:	f6bf af7c 	bge.w	80153de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80154e6:	e79e      	b.n	8015426 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80154e8:	2700      	movs	r7, #0
 80154ea:	e7ee      	b.n	80154ca <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 80154ec:	2300      	movs	r3, #0
 80154ee:	e7f7      	b.n	80154e0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 80154f0:	240252fc 	.word	0x240252fc
 80154f4:	240252e4 	.word	0x240252e4

080154f8 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80154f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154fa:	4c24      	ldr	r4, [pc, #144]	@ (801558c <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 80154fc:	6823      	ldr	r3, [r4, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d042      	beq.n	8015588 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015502:	4a23      	ldr	r2, [pc, #140]	@ (8015590 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015504:	4d23      	ldr	r5, [pc, #140]	@ (8015594 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015506:	8811      	ldrh	r1, [r2, #0]
 8015508:	f8b5 c000 	ldrh.w	ip, [r5]
 801550c:	4822      	ldr	r0, [pc, #136]	@ (8015598 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801550e:	4461      	add	r1, ip
 8015510:	1c4a      	adds	r2, r1, #1
 8015512:	008f      	lsls	r7, r1, #2
 8015514:	f022 0201 	bic.w	r2, r2, #1
 8015518:	19de      	adds	r6, r3, r7
 801551a:	0412      	lsls	r2, r2, #16
 801551c:	6006      	str	r6, [r0, #0]
 801551e:	4e1f      	ldr	r6, [pc, #124]	@ (801559c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015520:	0c12      	lsrs	r2, r2, #16
 8015522:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015526:	19da      	adds	r2, r3, r7
 8015528:	6032      	str	r2, [r6, #0]
 801552a:	220e      	movs	r2, #14
 801552c:	fb02 f20c 	mul.w	r2, r2, ip
 8015530:	3203      	adds	r2, #3
 8015532:	f022 0203 	bic.w	r2, r2, #3
 8015536:	443a      	add	r2, r7
 8015538:	4f19      	ldr	r7, [pc, #100]	@ (80155a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801553a:	4413      	add	r3, r2
 801553c:	603b      	str	r3, [r7, #0]
 801553e:	2300      	movs	r3, #0
 8015540:	4f18      	ldr	r7, [pc, #96]	@ (80155a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015542:	469c      	mov	ip, r3
 8015544:	803b      	strh	r3, [r7, #0]
 8015546:	4f18      	ldr	r7, [pc, #96]	@ (80155a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015548:	683f      	ldr	r7, [r7, #0]
 801554a:	1aba      	subs	r2, r7, r2
 801554c:	4f17      	ldr	r7, [pc, #92]	@ (80155ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801554e:	603a      	str	r2, [r7, #0]
 8015550:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015554:	4a16      	ldr	r2, [pc, #88]	@ (80155b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015556:	8013      	strh	r3, [r2, #0]
 8015558:	428b      	cmp	r3, r1
 801555a:	d10d      	bne.n	8015578 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801555c:	882d      	ldrh	r5, [r5, #0]
 801555e:	2300      	movs	r3, #0
 8015560:	6830      	ldr	r0, [r6, #0]
 8015562:	240e      	movs	r4, #14
 8015564:	429d      	cmp	r5, r3
 8015566:	d90f      	bls.n	8015588 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015568:	fb04 0203 	mla	r2, r4, r3, r0
 801556c:	3301      	adds	r3, #1
 801556e:	7b11      	ldrb	r1, [r2, #12]
 8015570:	f36f 1145 	bfc	r1, #5, #1
 8015574:	7311      	strb	r1, [r2, #12]
 8015576:	e7f5      	b.n	8015564 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8015578:	6822      	ldr	r2, [r4, #0]
 801557a:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801557e:	6802      	ldr	r2, [r0, #0]
 8015580:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015584:	3301      	adds	r3, #1
 8015586:	e7e7      	b.n	8015558 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8015588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801558a:	bf00      	nop
 801558c:	240252e0 	.word	0x240252e0
 8015590:	240252fc 	.word	0x240252fc
 8015594:	24025300 	.word	0x24025300
 8015598:	240252f4 	.word	0x240252f4
 801559c:	240252e4 	.word	0x240252e4
 80155a0:	240252ec 	.word	0x240252ec
 80155a4:	240252fe 	.word	0x240252fe
 80155a8:	240252e8 	.word	0x240252e8
 80155ac:	240252f8 	.word	0x240252f8
 80155b0:	240252f0 	.word	0x240252f0

080155b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80155b4:	4b06      	ldr	r3, [pc, #24]	@ (80155d0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80155b6:	681b      	ldr	r3, [r3, #0]
 80155b8:	b943      	cbnz	r3, 80155cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80155ba:	b139      	cbz	r1, 80155cc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80155bc:	4b05      	ldr	r3, [pc, #20]	@ (80155d4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80155be:	801a      	strh	r2, [r3, #0]
 80155c0:	4b05      	ldr	r3, [pc, #20]	@ (80155d8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80155c2:	6019      	str	r1, [r3, #0]
 80155c4:	4b05      	ldr	r3, [pc, #20]	@ (80155dc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80155c6:	6018      	str	r0, [r3, #0]
 80155c8:	f7ff bf96 	b.w	80154f8 <_ZN8touchgfx6Bitmap10clearCacheEv>
 80155cc:	4770      	bx	lr
 80155ce:	bf00      	nop
 80155d0:	240252ec 	.word	0x240252ec
 80155d4:	24025300 	.word	0x24025300
 80155d8:	240252e8 	.word	0x240252e8
 80155dc:	240252e0 	.word	0x240252e0

080155e0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80155e0:	b470      	push	{r4, r5, r6}
 80155e2:	4c07      	ldr	r4, [pc, #28]	@ (8015600 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80155e4:	4605      	mov	r5, r0
 80155e6:	4610      	mov	r0, r2
 80155e8:	9a03      	ldr	r2, [sp, #12]
 80155ea:	6826      	ldr	r6, [r4, #0]
 80155ec:	b936      	cbnz	r6, 80155fc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80155ee:	6025      	str	r5, [r4, #0]
 80155f0:	4c04      	ldr	r4, [pc, #16]	@ (8015604 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80155f2:	8021      	strh	r1, [r4, #0]
 80155f4:	4619      	mov	r1, r3
 80155f6:	bc70      	pop	{r4, r5, r6}
 80155f8:	f7ff bfdc 	b.w	80155b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80155fc:	bc70      	pop	{r4, r5, r6}
 80155fe:	4770      	bx	lr
 8015600:	24025304 	.word	0x24025304
 8015604:	240252fc 	.word	0x240252fc

08015608 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015608:	4a12      	ldr	r2, [pc, #72]	@ (8015654 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801560a:	8803      	ldrh	r3, [r0, #0]
 801560c:	8812      	ldrh	r2, [r2, #0]
 801560e:	4293      	cmp	r3, r2
 8015610:	d207      	bcs.n	8015622 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015612:	4a11      	ldr	r2, [pc, #68]	@ (8015658 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015614:	2114      	movs	r1, #20
 8015616:	6812      	ldr	r2, [r2, #0]
 8015618:	fb01 2303 	mla	r3, r1, r3, r2
 801561c:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015620:	4770      	bx	lr
 8015622:	490e      	ldr	r1, [pc, #56]	@ (801565c <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015624:	8809      	ldrh	r1, [r1, #0]
 8015626:	4411      	add	r1, r2
 8015628:	428b      	cmp	r3, r1
 801562a:	da04      	bge.n	8015636 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801562c:	1a9b      	subs	r3, r3, r2
 801562e:	4a0c      	ldr	r2, [pc, #48]	@ (8015660 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015630:	210e      	movs	r1, #14
 8015632:	6812      	ldr	r2, [r2, #0]
 8015634:	e7f0      	b.n	8015618 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015636:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801563a:	4293      	cmp	r3, r2
 801563c:	d108      	bne.n	8015650 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801563e:	4b09      	ldr	r3, [pc, #36]	@ (8015664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015640:	781b      	ldrb	r3, [r3, #0]
 8015642:	b91b      	cbnz	r3, 801564c <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015644:	4b08      	ldr	r3, [pc, #32]	@ (8015668 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015646:	f9b3 0000 	ldrsh.w	r0, [r3]
 801564a:	4770      	bx	lr
 801564c:	4b07      	ldr	r3, [pc, #28]	@ (801566c <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801564e:	e7fa      	b.n	8015646 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015650:	2000      	movs	r0, #0
 8015652:	4770      	bx	lr
 8015654:	240252fc 	.word	0x240252fc
 8015658:	24025304 	.word	0x24025304
 801565c:	24025300 	.word	0x24025300
 8015660:	240252e4 	.word	0x240252e4
 8015664:	2402526c 	.word	0x2402526c
 8015668:	2402526e 	.word	0x2402526e
 801566c:	24025270 	.word	0x24025270

08015670 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015670:	4a12      	ldr	r2, [pc, #72]	@ (80156bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015672:	8803      	ldrh	r3, [r0, #0]
 8015674:	8812      	ldrh	r2, [r2, #0]
 8015676:	4293      	cmp	r3, r2
 8015678:	d207      	bcs.n	801568a <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801567a:	4a11      	ldr	r2, [pc, #68]	@ (80156c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801567c:	2114      	movs	r1, #20
 801567e:	6812      	ldr	r2, [r2, #0]
 8015680:	fb01 2303 	mla	r3, r1, r3, r2
 8015684:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015688:	4770      	bx	lr
 801568a:	490e      	ldr	r1, [pc, #56]	@ (80156c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801568c:	8809      	ldrh	r1, [r1, #0]
 801568e:	4411      	add	r1, r2
 8015690:	428b      	cmp	r3, r1
 8015692:	da04      	bge.n	801569e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015694:	1a9b      	subs	r3, r3, r2
 8015696:	4a0c      	ldr	r2, [pc, #48]	@ (80156c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015698:	210e      	movs	r1, #14
 801569a:	6812      	ldr	r2, [r2, #0]
 801569c:	e7f0      	b.n	8015680 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801569e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80156a2:	4293      	cmp	r3, r2
 80156a4:	d108      	bne.n	80156b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80156a6:	4b09      	ldr	r3, [pc, #36]	@ (80156cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80156a8:	781b      	ldrb	r3, [r3, #0]
 80156aa:	b91b      	cbnz	r3, 80156b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80156ac:	4b08      	ldr	r3, [pc, #32]	@ (80156d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80156ae:	f9b3 0000 	ldrsh.w	r0, [r3]
 80156b2:	4770      	bx	lr
 80156b4:	4b07      	ldr	r3, [pc, #28]	@ (80156d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80156b6:	e7fa      	b.n	80156ae <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80156b8:	2000      	movs	r0, #0
 80156ba:	4770      	bx	lr
 80156bc:	240252fc 	.word	0x240252fc
 80156c0:	24025304 	.word	0x24025304
 80156c4:	24025300 	.word	0x24025300
 80156c8:	240252e4 	.word	0x240252e4
 80156cc:	2402526c 	.word	0x2402526c
 80156d0:	24025270 	.word	0x24025270
 80156d4:	2402526e 	.word	0x2402526e

080156d8 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80156d8:	4a22      	ldr	r2, [pc, #136]	@ (8015764 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80156da:	b530      	push	{r4, r5, lr}
 80156dc:	880b      	ldrh	r3, [r1, #0]
 80156de:	8812      	ldrh	r2, [r2, #0]
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d213      	bcs.n	801570c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 80156e4:	4a20      	ldr	r2, [pc, #128]	@ (8015768 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80156e6:	2114      	movs	r1, #20
 80156e8:	6812      	ldr	r2, [r2, #0]
 80156ea:	fb01 2303 	mla	r3, r1, r3, r2
 80156ee:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80156f2:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 80156f6:	8a1a      	ldrh	r2, [r3, #16]
 80156f8:	8a5b      	ldrh	r3, [r3, #18]
 80156fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80156fe:	8004      	strh	r4, [r0, #0]
 8015700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015704:	8041      	strh	r1, [r0, #2]
 8015706:	8082      	strh	r2, [r0, #4]
 8015708:	80c3      	strh	r3, [r0, #6]
 801570a:	e024      	b.n	8015756 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801570c:	4917      	ldr	r1, [pc, #92]	@ (801576c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801570e:	8809      	ldrh	r1, [r1, #0]
 8015710:	4411      	add	r1, r2
 8015712:	428b      	cmp	r3, r1
 8015714:	da10      	bge.n	8015738 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8015716:	1a9b      	subs	r3, r3, r2
 8015718:	220e      	movs	r2, #14
 801571a:	4353      	muls	r3, r2
 801571c:	4a14      	ldr	r2, [pc, #80]	@ (8015770 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801571e:	6811      	ldr	r1, [r2, #0]
 8015720:	18ca      	adds	r2, r1, r3
 8015722:	5ecd      	ldrsh	r5, [r1, r3]
 8015724:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 8015728:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801572c:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 8015730:	8005      	strh	r5, [r0, #0]
 8015732:	8044      	strh	r4, [r0, #2]
 8015734:	8081      	strh	r1, [r0, #4]
 8015736:	e7e7      	b.n	8015708 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015738:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801573c:	4293      	cmp	r3, r2
 801573e:	d10b      	bne.n	8015758 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 8015740:	4b0c      	ldr	r3, [pc, #48]	@ (8015774 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 8015742:	f9b3 1000 	ldrsh.w	r1, [r3]
 8015746:	4b0c      	ldr	r3, [pc, #48]	@ (8015778 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8015748:	8081      	strh	r1, [r0, #4]
 801574a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801574e:	2300      	movs	r3, #0
 8015750:	80c2      	strh	r2, [r0, #6]
 8015752:	8003      	strh	r3, [r0, #0]
 8015754:	8043      	strh	r3, [r0, #2]
 8015756:	bd30      	pop	{r4, r5, pc}
 8015758:	2300      	movs	r3, #0
 801575a:	8003      	strh	r3, [r0, #0]
 801575c:	8043      	strh	r3, [r0, #2]
 801575e:	8083      	strh	r3, [r0, #4]
 8015760:	e7d2      	b.n	8015708 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 8015762:	bf00      	nop
 8015764:	240252fc 	.word	0x240252fc
 8015768:	24025304 	.word	0x24025304
 801576c:	24025300 	.word	0x24025300
 8015770:	240252e4 	.word	0x240252e4
 8015774:	24025268 	.word	0x24025268
 8015778:	2402526a 	.word	0x2402526a

0801577c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801577c:	4a17      	ldr	r2, [pc, #92]	@ (80157dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801577e:	8803      	ldrh	r3, [r0, #0]
 8015780:	8812      	ldrh	r2, [r2, #0]
 8015782:	4293      	cmp	r3, r2
 8015784:	d213      	bcs.n	80157ae <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 8015786:	4a16      	ldr	r2, [pc, #88]	@ (80157e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8015788:	2114      	movs	r1, #20
 801578a:	6812      	ldr	r2, [r2, #0]
 801578c:	fb01 2303 	mla	r3, r1, r3, r2
 8015790:	8a1a      	ldrh	r2, [r3, #16]
 8015792:	8919      	ldrh	r1, [r3, #8]
 8015794:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8015798:	428a      	cmp	r2, r1
 801579a:	db1d      	blt.n	80157d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801579c:	8a58      	ldrh	r0, [r3, #18]
 801579e:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80157a2:	895b      	ldrh	r3, [r3, #10]
 80157a4:	4298      	cmp	r0, r3
 80157a6:	bfac      	ite	ge
 80157a8:	2000      	movge	r0, #0
 80157aa:	2001      	movlt	r0, #1
 80157ac:	4770      	bx	lr
 80157ae:	490d      	ldr	r1, [pc, #52]	@ (80157e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80157b0:	8809      	ldrh	r1, [r1, #0]
 80157b2:	4411      	add	r1, r2
 80157b4:	428b      	cmp	r3, r1
 80157b6:	da0d      	bge.n	80157d4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80157b8:	1a9b      	subs	r3, r3, r2
 80157ba:	4a0b      	ldr	r2, [pc, #44]	@ (80157e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 80157bc:	210e      	movs	r1, #14
 80157be:	6812      	ldr	r2, [r2, #0]
 80157c0:	fb01 2303 	mla	r3, r1, r3, r2
 80157c4:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80157c8:	891a      	ldrh	r2, [r3, #8]
 80157ca:	4291      	cmp	r1, r2
 80157cc:	db04      	blt.n	80157d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80157ce:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80157d2:	e7e6      	b.n	80157a2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 80157d4:	2000      	movs	r0, #0
 80157d6:	4770      	bx	lr
 80157d8:	2001      	movs	r0, #1
 80157da:	4770      	bx	lr
 80157dc:	240252fc 	.word	0x240252fc
 80157e0:	24025304 	.word	0x24025304
 80157e4:	24025300 	.word	0x24025300
 80157e8:	240252e4 	.word	0x240252e4

080157ec <_ZNK8touchgfx6Bitmap7getDataEv>:
 80157ec:	4a12      	ldr	r2, [pc, #72]	@ (8015838 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80157ee:	8803      	ldrh	r3, [r0, #0]
 80157f0:	8811      	ldrh	r1, [r2, #0]
 80157f2:	428b      	cmp	r3, r1
 80157f4:	d20b      	bcs.n	801580e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80157f6:	4a11      	ldr	r2, [pc, #68]	@ (801583c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80157f8:	6812      	ldr	r2, [r2, #0]
 80157fa:	b112      	cbz	r2, 8015802 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80157fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015800:	b9c0      	cbnz	r0, 8015834 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015802:	4a0f      	ldr	r2, [pc, #60]	@ (8015840 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015804:	6811      	ldr	r1, [r2, #0]
 8015806:	2214      	movs	r2, #20
 8015808:	4353      	muls	r3, r2
 801580a:	58c8      	ldr	r0, [r1, r3]
 801580c:	4770      	bx	lr
 801580e:	4a0d      	ldr	r2, [pc, #52]	@ (8015844 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015810:	8812      	ldrh	r2, [r2, #0]
 8015812:	440a      	add	r2, r1
 8015814:	4293      	cmp	r3, r2
 8015816:	da04      	bge.n	8015822 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015818:	4a08      	ldr	r2, [pc, #32]	@ (801583c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801581a:	6812      	ldr	r2, [r2, #0]
 801581c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015820:	4770      	bx	lr
 8015822:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015826:	4293      	cmp	r3, r2
 8015828:	d103      	bne.n	8015832 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801582a:	4b07      	ldr	r3, [pc, #28]	@ (8015848 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801582c:	681b      	ldr	r3, [r3, #0]
 801582e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8015830:	4770      	bx	lr
 8015832:	2000      	movs	r0, #0
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	240252fc 	.word	0x240252fc
 801583c:	240252e0 	.word	0x240252e0
 8015840:	24025304 	.word	0x24025304
 8015844:	24025300 	.word	0x24025300
 8015848:	24025274 	.word	0x24025274

0801584c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801584c:	4b24      	ldr	r3, [pc, #144]	@ (80158e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801584e:	8802      	ldrh	r2, [r0, #0]
 8015850:	8818      	ldrh	r0, [r3, #0]
 8015852:	4282      	cmp	r2, r0
 8015854:	d221      	bcs.n	801589a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015856:	4b23      	ldr	r3, [pc, #140]	@ (80158e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015858:	6819      	ldr	r1, [r3, #0]
 801585a:	2314      	movs	r3, #20
 801585c:	fb03 1302 	mla	r3, r3, r2, r1
 8015860:	6858      	ldr	r0, [r3, #4]
 8015862:	2800      	cmp	r0, #0
 8015864:	d03a      	beq.n	80158dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015866:	4920      	ldr	r1, [pc, #128]	@ (80158e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015868:	6809      	ldr	r1, [r1, #0]
 801586a:	2900      	cmp	r1, #0
 801586c:	d036      	beq.n	80158dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801586e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015872:	2900      	cmp	r1, #0
 8015874:	d032      	beq.n	80158dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015876:	891a      	ldrh	r2, [r3, #8]
 8015878:	8958      	ldrh	r0, [r3, #10]
 801587a:	4350      	muls	r0, r2
 801587c:	7c5a      	ldrb	r2, [r3, #17]
 801587e:	7cdb      	ldrb	r3, [r3, #19]
 8015880:	0952      	lsrs	r2, r2, #5
 8015882:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015886:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801588a:	2b0b      	cmp	r3, #11
 801588c:	bf18      	it	ne
 801588e:	0040      	lslne	r0, r0, #1
 8015890:	3003      	adds	r0, #3
 8015892:	f020 0003 	bic.w	r0, r0, #3
 8015896:	4408      	add	r0, r1
 8015898:	4770      	bx	lr
 801589a:	4b14      	ldr	r3, [pc, #80]	@ (80158ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801589c:	881b      	ldrh	r3, [r3, #0]
 801589e:	4403      	add	r3, r0
 80158a0:	429a      	cmp	r2, r3
 80158a2:	da1a      	bge.n	80158da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80158a4:	4b12      	ldr	r3, [pc, #72]	@ (80158f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80158a6:	1a10      	subs	r0, r2, r0
 80158a8:	210e      	movs	r1, #14
 80158aa:	681b      	ldr	r3, [r3, #0]
 80158ac:	fb01 3000 	mla	r0, r1, r0, r3
 80158b0:	7b03      	ldrb	r3, [r0, #12]
 80158b2:	f003 031f 	and.w	r3, r3, #31
 80158b6:	2b0b      	cmp	r3, #11
 80158b8:	d10b      	bne.n	80158d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80158ba:	8903      	ldrh	r3, [r0, #8]
 80158bc:	8940      	ldrh	r0, [r0, #10]
 80158be:	4358      	muls	r0, r3
 80158c0:	4b09      	ldr	r3, [pc, #36]	@ (80158e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80158c2:	3003      	adds	r0, #3
 80158c4:	6819      	ldr	r1, [r3, #0]
 80158c6:	f020 0303 	bic.w	r3, r0, #3
 80158ca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80158ce:	4418      	add	r0, r3
 80158d0:	4770      	bx	lr
 80158d2:	2b0d      	cmp	r3, #13
 80158d4:	d101      	bne.n	80158da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80158d6:	300d      	adds	r0, #13
 80158d8:	4770      	bx	lr
 80158da:	2000      	movs	r0, #0
 80158dc:	4770      	bx	lr
 80158de:	bf00      	nop
 80158e0:	240252fc 	.word	0x240252fc
 80158e4:	24025304 	.word	0x24025304
 80158e8:	240252e0 	.word	0x240252e0
 80158ec:	24025300 	.word	0x24025300
 80158f0:	240252e4 	.word	0x240252e4

080158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80158f4:	4b1f      	ldr	r3, [pc, #124]	@ (8015974 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80158f6:	b510      	push	{r4, lr}
 80158f8:	8802      	ldrh	r2, [r0, #0]
 80158fa:	881b      	ldrh	r3, [r3, #0]
 80158fc:	429a      	cmp	r2, r3
 80158fe:	d21a      	bcs.n	8015936 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8015900:	4b1d      	ldr	r3, [pc, #116]	@ (8015978 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8015902:	2114      	movs	r1, #20
 8015904:	681b      	ldr	r3, [r3, #0]
 8015906:	fb01 3102 	mla	r1, r1, r2, r3
 801590a:	7c4b      	ldrb	r3, [r1, #17]
 801590c:	0958      	lsrs	r0, r3, #5
 801590e:	7ccb      	ldrb	r3, [r1, #19]
 8015910:	491a      	ldr	r1, [pc, #104]	@ (801597c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8015912:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015916:	6809      	ldr	r1, [r1, #0]
 8015918:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801591c:	b2d8      	uxtb	r0, r3
 801591e:	b149      	cbz	r1, 8015934 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015920:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015924:	b132      	cbz	r2, 8015934 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015926:	2b0e      	cmp	r3, #14
 8015928:	d021      	beq.n	801596e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801592a:	280f      	cmp	r0, #15
 801592c:	d01d      	beq.n	801596a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801592e:	2810      	cmp	r0, #16
 8015930:	bf08      	it	eq
 8015932:	2002      	moveq	r0, #2
 8015934:	bd10      	pop	{r4, pc}
 8015936:	4912      	ldr	r1, [pc, #72]	@ (8015980 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8015938:	8809      	ldrh	r1, [r1, #0]
 801593a:	4419      	add	r1, r3
 801593c:	428a      	cmp	r2, r1
 801593e:	da09      	bge.n	8015954 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	4a10      	ldr	r2, [pc, #64]	@ (8015984 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8015944:	210e      	movs	r1, #14
 8015946:	6812      	ldr	r2, [r2, #0]
 8015948:	fb01 2303 	mla	r3, r1, r3, r2
 801594c:	7b18      	ldrb	r0, [r3, #12]
 801594e:	f000 001f 	and.w	r0, r0, #31
 8015952:	e7ef      	b.n	8015934 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015954:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8015958:	429a      	cmp	r2, r3
 801595a:	d108      	bne.n	801596e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801595c:	f7ee f908 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 8015960:	6803      	ldr	r3, [r0, #0]
 8015962:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015968:	4718      	bx	r3
 801596a:	2001      	movs	r0, #1
 801596c:	e7e2      	b.n	8015934 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801596e:	2000      	movs	r0, #0
 8015970:	e7e0      	b.n	8015934 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015972:	bf00      	nop
 8015974:	240252fc 	.word	0x240252fc
 8015978:	24025304 	.word	0x24025304
 801597c:	240252e0 	.word	0x240252e0
 8015980:	24025300 	.word	0x24025300
 8015984:	240252e4 	.word	0x240252e4

08015988 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015988:	2018      	movs	r0, #24
 801598a:	4770      	bx	lr

0801598c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801598c:	2001      	movs	r0, #1
 801598e:	4770      	bx	lr

08015990 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015990:	4b02      	ldr	r3, [pc, #8]	@ (801599c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015992:	8818      	ldrh	r0, [r3, #0]
 8015994:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015998:	b280      	uxth	r0, r0
 801599a:	4770      	bx	lr
 801599c:	2402526e 	.word	0x2402526e

080159a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80159a0:	2bff      	cmp	r3, #255	@ 0xff
 80159a2:	d04c      	beq.n	8015a3e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80159a4:	2a2c      	cmp	r2, #44	@ 0x2c
 80159a6:	d030      	beq.n	8015a0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 80159a8:	d80f      	bhi.n	80159ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80159aa:	2a08      	cmp	r2, #8
 80159ac:	d043      	beq.n	8015a36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80159ae:	d805      	bhi.n	80159bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80159b0:	2a04      	cmp	r2, #4
 80159b2:	d03e      	beq.n	8015a32 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80159b4:	2a05      	cmp	r2, #5
 80159b6:	d03a      	beq.n	8015a2e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80159b8:	2300      	movs	r3, #0
 80159ba:	e024      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159bc:	2a0a      	cmp	r2, #10
 80159be:	d03a      	beq.n	8015a36 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80159c0:	d301      	bcc.n	80159c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80159c2:	2a0b      	cmp	r2, #11
 80159c4:	d1f8      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80159c8:	e01d      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159ca:	2a30      	cmp	r2, #48	@ 0x30
 80159cc:	d035      	beq.n	8015a3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80159ce:	d80a      	bhi.n	80159e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80159d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80159d2:	684b      	ldr	r3, [r1, #4]
 80159d4:	d023      	beq.n	8015a1e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80159d6:	d90d      	bls.n	80159f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80159d8:	781a      	ldrb	r2, [r3, #0]
 80159da:	785b      	ldrb	r3, [r3, #1]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d1eb      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159e0:	b98a      	cbnz	r2, 8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80159e4:	e00f      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159e6:	2a32      	cmp	r2, #50	@ 0x32
 80159e8:	d027      	beq.n	8015a3a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80159ea:	d301      	bcc.n	80159f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80159ec:	2a33      	cmp	r2, #51	@ 0x33
 80159ee:	d1e3      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80159f2:	e008      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159f4:	781a      	ldrb	r2, [r3, #0]
 80159f6:	785b      	ldrb	r3, [r3, #1]
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d1dd      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159fc:	2a00      	cmp	r2, #0
 80159fe:	d0f0      	beq.n	80159e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015a00:	2a01      	cmp	r2, #1
 8015a02:	d1d9      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a04:	6943      	ldr	r3, [r0, #20]
 8015a06:	4618      	mov	r0, r3
 8015a08:	4770      	bx	lr
 8015a0a:	684b      	ldr	r3, [r1, #4]
 8015a0c:	781a      	ldrb	r2, [r3, #0]
 8015a0e:	785b      	ldrb	r3, [r3, #1]
 8015a10:	2b00      	cmp	r3, #0
 8015a12:	d1d1      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a14:	b14a      	cbz	r2, 8015a2a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8015a16:	2a01      	cmp	r2, #1
 8015a18:	bf08      	it	eq
 8015a1a:	68c3      	ldreq	r3, [r0, #12]
 8015a1c:	e7f3      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a1e:	781a      	ldrb	r2, [r3, #0]
 8015a20:	785b      	ldrb	r3, [r3, #1]
 8015a22:	2b00      	cmp	r3, #0
 8015a24:	d1c8      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a26:	2a00      	cmp	r2, #0
 8015a28:	d1ed      	bne.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a2a:	69c3      	ldr	r3, [r0, #28]
 8015a2c:	e7eb      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a2e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015a30:	e7e9      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a32:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015a34:	e7e7      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a36:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8015a38:	e7e5      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a3a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8015a3c:	e7e3      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a3e:	2a2c      	cmp	r2, #44	@ 0x2c
 8015a40:	d030      	beq.n	8015aa4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8015a42:	d80f      	bhi.n	8015a64 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015a44:	2a08      	cmp	r2, #8
 8015a46:	d042      	beq.n	8015ace <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8015a48:	d805      	bhi.n	8015a56 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8015a4a:	2a04      	cmp	r2, #4
 8015a4c:	d03d      	beq.n	8015aca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8015a4e:	2a05      	cmp	r2, #5
 8015a50:	d1b2      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a52:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8015a54:	e7d7      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a56:	2a0a      	cmp	r2, #10
 8015a58:	d039      	beq.n	8015ace <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8015a5a:	d301      	bcc.n	8015a60 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8015a5c:	2a0b      	cmp	r2, #11
 8015a5e:	d1ab      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a60:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8015a62:	e7d0      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a64:	2a30      	cmp	r2, #48	@ 0x30
 8015a66:	d034      	beq.n	8015ad2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015a68:	d80b      	bhi.n	8015a82 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8015a6a:	2a2e      	cmp	r2, #46	@ 0x2e
 8015a6c:	684b      	ldr	r3, [r1, #4]
 8015a6e:	d023      	beq.n	8015ab8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8015a70:	d90e      	bls.n	8015a90 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8015a72:	781a      	ldrb	r2, [r3, #0]
 8015a74:	785b      	ldrb	r3, [r3, #1]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d19e      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a7a:	2a00      	cmp	r2, #0
 8015a7c:	d1c3      	bne.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a7e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8015a80:	e7c1      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a82:	2a32      	cmp	r2, #50	@ 0x32
 8015a84:	d025      	beq.n	8015ad2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015a86:	d301      	bcc.n	8015a8c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8015a88:	2a33      	cmp	r2, #51	@ 0x33
 8015a8a:	d195      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a8c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8015a8e:	e7ba      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015a90:	781a      	ldrb	r2, [r3, #0]
 8015a92:	785b      	ldrb	r3, [r3, #1]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d18f      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015a98:	2a00      	cmp	r2, #0
 8015a9a:	d0f0      	beq.n	8015a7e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 8015a9c:	2a01      	cmp	r2, #1
 8015a9e:	d18b      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015aa0:	6983      	ldr	r3, [r0, #24]
 8015aa2:	e7b0      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015aa4:	684b      	ldr	r3, [r1, #4]
 8015aa6:	781a      	ldrb	r2, [r3, #0]
 8015aa8:	785b      	ldrb	r3, [r3, #1]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d184      	bne.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015aae:	b152      	cbz	r2, 8015ac6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 8015ab0:	2a01      	cmp	r2, #1
 8015ab2:	bf08      	it	eq
 8015ab4:	6903      	ldreq	r3, [r0, #16]
 8015ab6:	e7a6      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015ab8:	781a      	ldrb	r2, [r3, #0]
 8015aba:	785b      	ldrb	r3, [r3, #1]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	f47f af7b 	bne.w	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015ac2:	2a00      	cmp	r2, #0
 8015ac4:	d19f      	bne.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015ac6:	6a03      	ldr	r3, [r0, #32]
 8015ac8:	e79d      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015aca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8015acc:	e79b      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015ace:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8015ad0:	e799      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015ad2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8015ad4:	e797      	b.n	8015a06 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

08015ad6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015ad6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ada:	b085      	sub	sp, #20
 8015adc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8015ade:	9203      	str	r2, [sp, #12]
 8015ae0:	6870      	ldr	r0, [r6, #4]
 8015ae2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015ae6:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8015aea:	9101      	str	r1, [sp, #4]
 8015aec:	fa1f f885 	uxth.w	r8, r5
 8015af0:	43ed      	mvns	r5, r5
 8015af2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8015af6:	b2ed      	uxtb	r5, r5
 8015af8:	fb00 2404 	mla	r4, r0, r4, r2
 8015afc:	6832      	ldr	r2, [r6, #0]
 8015afe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015b02:	4414      	add	r4, r2
 8015b04:	f8dc 2000 	ldr.w	r2, [ip]
 8015b08:	9202      	str	r2, [sp, #8]
 8015b0a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015b0e:	f102 0e04 	add.w	lr, r2, #4
 8015b12:	9a01      	ldr	r2, [sp, #4]
 8015b14:	2a00      	cmp	r2, #0
 8015b16:	dc03      	bgt.n	8015b20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015b18:	9a03      	ldr	r2, [sp, #12]
 8015b1a:	2a00      	cmp	r2, #0
 8015b1c:	f340 8116 	ble.w	8015d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015b20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015b22:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015b26:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015b2a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015b2c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015b30:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	dd0e      	ble.n	8015b56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015b38:	1406      	asrs	r6, r0, #16
 8015b3a:	d405      	bmi.n	8015b48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b3c:	4556      	cmp	r6, sl
 8015b3e:	da03      	bge.n	8015b48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b40:	1416      	asrs	r6, r2, #16
 8015b42:	d401      	bmi.n	8015b48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015b44:	454e      	cmp	r6, r9
 8015b46:	db07      	blt.n	8015b58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015b48:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015b4a:	3b01      	subs	r3, #1
 8015b4c:	3403      	adds	r4, #3
 8015b4e:	4430      	add	r0, r6
 8015b50:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015b52:	4432      	add	r2, r6
 8015b54:	e7ee      	b.n	8015b34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015b56:	d063      	beq.n	8015c20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015b58:	1e5e      	subs	r6, r3, #1
 8015b5a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015b5c:	fb07 0706 	mla	r7, r7, r6, r0
 8015b60:	143f      	asrs	r7, r7, #16
 8015b62:	d454      	bmi.n	8015c0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015b64:	4557      	cmp	r7, sl
 8015b66:	da52      	bge.n	8015c0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015b68:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015b6a:	fb07 2606 	mla	r6, r7, r6, r2
 8015b6e:	1436      	asrs	r6, r6, #16
 8015b70:	d44d      	bmi.n	8015c0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015b72:	454e      	cmp	r6, r9
 8015b74:	da4b      	bge.n	8015c0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015b76:	1ce6      	adds	r6, r4, #3
 8015b78:	4699      	mov	r9, r3
 8015b7a:	f1b9 0f00 	cmp.w	r9, #0
 8015b7e:	f106 0603 	add.w	r6, r6, #3
 8015b82:	dd48      	ble.n	8015c16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015b84:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015b88:	1417      	asrs	r7, r2, #16
 8015b8a:	9902      	ldr	r1, [sp, #8]
 8015b8c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015b90:	f109 39ff 	add.w	r9, r9, #4294967295
 8015b94:	fb0b 1707 	mla	r7, fp, r7, r1
 8015b98:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015b9c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015b9e:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015ba2:	fb1b fb05 	smulbb	fp, fp, r5
 8015ba6:	4408      	add	r0, r1
 8015ba8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015baa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015bae:	440a      	add	r2, r1
 8015bb0:	eb0e 0a07 	add.w	sl, lr, r7
 8015bb4:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015bb8:	fb07 b708 	mla	r7, r7, r8, fp
 8015bbc:	b2bf      	uxth	r7, r7
 8015bbe:	f107 0b01 	add.w	fp, r7, #1
 8015bc2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015bc6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015bca:	fb1b fb05 	smulbb	fp, fp, r5
 8015bce:	123f      	asrs	r7, r7, #8
 8015bd0:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015bd4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015bd8:	fb07 b708 	mla	r7, r7, r8, fp
 8015bdc:	b2bf      	uxth	r7, r7
 8015bde:	f107 0b01 	add.w	fp, r7, #1
 8015be2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015be6:	123f      	asrs	r7, r7, #8
 8015be8:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015bec:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015bf0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015bf4:	fb1a fa05 	smulbb	sl, sl, r5
 8015bf8:	fb07 a708 	mla	r7, r7, r8, sl
 8015bfc:	b2bf      	uxth	r7, r7
 8015bfe:	f107 0a01 	add.w	sl, r7, #1
 8015c02:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015c06:	123f      	asrs	r7, r7, #8
 8015c08:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015c0c:	e7b5      	b.n	8015b7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015c0e:	2700      	movs	r7, #0
 8015c10:	1bde      	subs	r6, r3, r7
 8015c12:	2e00      	cmp	r6, #0
 8015c14:	dc42      	bgt.n	8015c9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015c16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015c1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015c1e:	441c      	add	r4, r3
 8015c20:	9b01      	ldr	r3, [sp, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	f340 8092 	ble.w	8015d4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015c28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015c2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015c32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015c36:	eef0 6a62 	vmov.f32	s13, s5
 8015c3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015c3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015c42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015c46:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8015c4a:	eef0 6a43 	vmov.f32	s13, s6
 8015c4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015c52:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8015c56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015c5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015c5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015c62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015c66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015c6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015c6e:	ee12 2a90 	vmov	r2, s5
 8015c72:	eef0 2a47 	vmov.f32	s5, s14
 8015c76:	fb92 f3f3 	sdiv	r3, r2, r3
 8015c7a:	ee13 2a10 	vmov	r2, s6
 8015c7e:	9311      	str	r3, [sp, #68]	@ 0x44
 8015c80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c82:	eeb0 3a67 	vmov.f32	s6, s15
 8015c86:	fb92 f3f3 	sdiv	r3, r2, r3
 8015c8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8015c8c:	9b01      	ldr	r3, [sp, #4]
 8015c8e:	9a03      	ldr	r2, [sp, #12]
 8015c90:	3b01      	subs	r3, #1
 8015c92:	9301      	str	r3, [sp, #4]
 8015c94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015c96:	bf08      	it	eq
 8015c98:	4613      	moveq	r3, r2
 8015c9a:	e73a      	b.n	8015b12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015c9c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015ca0:	d44e      	bmi.n	8015d40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015ca2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015ca6:	4556      	cmp	r6, sl
 8015ca8:	dd4a      	ble.n	8015d40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015caa:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015cae:	d447      	bmi.n	8015d40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015cb0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015cb4:	4559      	cmp	r1, fp
 8015cb6:	dd43      	ble.n	8015d40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015cb8:	fa0f f986 	sxth.w	r9, r6
 8015cbc:	9902      	ldr	r1, [sp, #8]
 8015cbe:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015cc2:	fb0b 1909 	mla	r9, fp, r9, r1
 8015cc6:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015cca:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015cce:	fb1b fb05 	smulbb	fp, fp, r5
 8015cd2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015cd6:	eb0e 0a09 	add.w	sl, lr, r9
 8015cda:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015cde:	fb09 b908 	mla	r9, r9, r8, fp
 8015ce2:	fa1f f989 	uxth.w	r9, r9
 8015ce6:	f109 0b01 	add.w	fp, r9, #1
 8015cea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015cee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015cf2:	f804 9006 	strb.w	r9, [r4, r6]
 8015cf6:	4426      	add	r6, r4
 8015cf8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015cfc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015d00:	fb1b fb05 	smulbb	fp, fp, r5
 8015d04:	fb09 b908 	mla	r9, r9, r8, fp
 8015d08:	fa1f f989 	uxth.w	r9, r9
 8015d0c:	f109 0b01 	add.w	fp, r9, #1
 8015d10:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015d14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d18:	f886 9001 	strb.w	r9, [r6, #1]
 8015d1c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015d20:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015d24:	fb1a fa05 	smulbb	sl, sl, r5
 8015d28:	fb09 a908 	mla	r9, r9, r8, sl
 8015d2c:	fa1f f989 	uxth.w	r9, r9
 8015d30:	f109 0a01 	add.w	sl, r9, #1
 8015d34:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015d38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015d3c:	f886 9002 	strb.w	r9, [r6, #2]
 8015d40:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015d42:	3701      	adds	r7, #1
 8015d44:	4408      	add	r0, r1
 8015d46:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015d48:	440a      	add	r2, r1
 8015d4a:	e761      	b.n	8015c10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015d4c:	b005      	add	sp, #20
 8015d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015d52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d56:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015d58:	4693      	mov	fp, r2
 8015d5a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015d5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015d60:	6868      	ldr	r0, [r5, #4]
 8015d62:	6877      	ldr	r7, [r6, #4]
 8015d64:	9100      	str	r1, [sp, #0]
 8015d66:	3704      	adds	r7, #4
 8015d68:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8015d6c:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8015d70:	fb00 2404 	mla	r4, r0, r4, r2
 8015d74:	682a      	ldr	r2, [r5, #0]
 8015d76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015d7a:	4414      	add	r4, r2
 8015d7c:	6832      	ldr	r2, [r6, #0]
 8015d7e:	9201      	str	r2, [sp, #4]
 8015d80:	9a00      	ldr	r2, [sp, #0]
 8015d82:	2a00      	cmp	r2, #0
 8015d84:	dc03      	bgt.n	8015d8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015d86:	f1bb 0f00 	cmp.w	fp, #0
 8015d8a:	f340 80bc 	ble.w	8015f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015d8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015d90:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015d94:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015d98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015d9a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015d9e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	dd0c      	ble.n	8015dc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015da6:	1405      	asrs	r5, r0, #16
 8015da8:	d405      	bmi.n	8015db6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015daa:	4555      	cmp	r5, sl
 8015dac:	da03      	bge.n	8015db6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015dae:	1415      	asrs	r5, r2, #16
 8015db0:	d401      	bmi.n	8015db6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015db2:	454d      	cmp	r5, r9
 8015db4:	db05      	blt.n	8015dc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015db6:	4440      	add	r0, r8
 8015db8:	4472      	add	r2, lr
 8015dba:	3b01      	subs	r3, #1
 8015dbc:	3403      	adds	r4, #3
 8015dbe:	e7f0      	b.n	8015da2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015dc0:	d03f      	beq.n	8015e42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015dc2:	1e5d      	subs	r5, r3, #1
 8015dc4:	fb08 0c05 	mla	ip, r8, r5, r0
 8015dc8:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015dcc:	d42e      	bmi.n	8015e2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015dce:	45d4      	cmp	ip, sl
 8015dd0:	da2c      	bge.n	8015e2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015dd2:	fb0e 2505 	mla	r5, lr, r5, r2
 8015dd6:	142d      	asrs	r5, r5, #16
 8015dd8:	d428      	bmi.n	8015e2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015dda:	454d      	cmp	r5, r9
 8015ddc:	da26      	bge.n	8015e2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015dde:	1ce5      	adds	r5, r4, #3
 8015de0:	469c      	mov	ip, r3
 8015de2:	f1bc 0f00 	cmp.w	ip, #0
 8015de6:	f105 0503 	add.w	r5, r5, #3
 8015dea:	dd25      	ble.n	8015e38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015dec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015df0:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015df4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015df8:	4472      	add	r2, lr
 8015dfa:	468a      	mov	sl, r1
 8015dfc:	9901      	ldr	r1, [sp, #4]
 8015dfe:	fb0a 1909 	mla	r9, sl, r9, r1
 8015e02:	1401      	asrs	r1, r0, #16
 8015e04:	4440      	add	r0, r8
 8015e06:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015e0a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015e0e:	eb07 0a09 	add.w	sl, r7, r9
 8015e12:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015e16:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015e1a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015e1e:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015e22:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015e26:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015e2a:	e7da      	b.n	8015de2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015e2c:	2500      	movs	r5, #0
 8015e2e:	eba3 0c05 	sub.w	ip, r3, r5
 8015e32:	f1bc 0f00 	cmp.w	ip, #0
 8015e36:	dc3b      	bgt.n	8015eb0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015e38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015e3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015e40:	441c      	add	r4, r3
 8015e42:	9b00      	ldr	r3, [sp, #0]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	dd5e      	ble.n	8015f06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015e48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015e4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015e52:	eeb0 6a62 	vmov.f32	s12, s5
 8015e56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015e5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015e5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e62:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8015e66:	eeb0 6a43 	vmov.f32	s12, s6
 8015e6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015e6e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8015e72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015e76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015e7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015e7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015e82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015e86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015e8a:	ee12 2a90 	vmov	r2, s5
 8015e8e:	eef0 2a47 	vmov.f32	s5, s14
 8015e92:	fb92 f8f3 	sdiv	r8, r2, r3
 8015e96:	ee13 2a10 	vmov	r2, s6
 8015e9a:	eeb0 3a67 	vmov.f32	s6, s15
 8015e9e:	fb92 fef3 	sdiv	lr, r2, r3
 8015ea2:	9b00      	ldr	r3, [sp, #0]
 8015ea4:	3b01      	subs	r3, #1
 8015ea6:	9300      	str	r3, [sp, #0]
 8015ea8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015eaa:	bf08      	it	eq
 8015eac:	465b      	moveq	r3, fp
 8015eae:	e767      	b.n	8015d80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015eb0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015eb4:	d423      	bmi.n	8015efe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015eb6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015eba:	45cc      	cmp	ip, r9
 8015ebc:	dd1f      	ble.n	8015efe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015ebe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015ec2:	d41c      	bmi.n	8015efe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015ec4:	68f1      	ldr	r1, [r6, #12]
 8015ec6:	4551      	cmp	r1, sl
 8015ec8:	dd19      	ble.n	8015efe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015eca:	fa0f fc8c 	sxth.w	ip, ip
 8015ece:	9901      	ldr	r1, [sp, #4]
 8015ed0:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015ed4:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015ed8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015edc:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015ee0:	eb07 090c 	add.w	r9, r7, ip
 8015ee4:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015ee8:	f804 a00c 	strb.w	sl, [r4, ip]
 8015eec:	44a4      	add	ip, r4
 8015eee:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015ef2:	f88c a001 	strb.w	sl, [ip, #1]
 8015ef6:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015efa:	f88c 9002 	strb.w	r9, [ip, #2]
 8015efe:	4440      	add	r0, r8
 8015f00:	4472      	add	r2, lr
 8015f02:	3501      	adds	r5, #1
 8015f04:	e793      	b.n	8015e2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015f06:	b003      	add	sp, #12
 8015f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015f10:	b085      	sub	sp, #20
 8015f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015f16:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015f18:	9202      	str	r2, [sp, #8]
 8015f1a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8015f1e:	6860      	ldr	r0, [r4, #4]
 8015f20:	9203      	str	r2, [sp, #12]
 8015f22:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015f26:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8015f2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8015f2e:	fb00 2505 	mla	r5, r0, r5, r2
 8015f32:	6822      	ldr	r2, [r4, #0]
 8015f34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015f38:	4415      	add	r5, r2
 8015f3a:	f8dc 2000 	ldr.w	r2, [ip]
 8015f3e:	9200      	str	r2, [sp, #0]
 8015f40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015f44:	3204      	adds	r2, #4
 8015f46:	9201      	str	r2, [sp, #4]
 8015f48:	2900      	cmp	r1, #0
 8015f4a:	dc03      	bgt.n	8015f54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015f4c:	9a02      	ldr	r2, [sp, #8]
 8015f4e:	2a00      	cmp	r2, #0
 8015f50:	f340 8127 	ble.w	80161a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015f54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015f56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015f5a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8015f5e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015f60:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015f64:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015f68:	2b00      	cmp	r3, #0
 8015f6a:	dd0d      	ble.n	8015f88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015f6c:	1422      	asrs	r2, r4, #16
 8015f6e:	d405      	bmi.n	8015f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015f70:	4542      	cmp	r2, r8
 8015f72:	da03      	bge.n	8015f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015f74:	1402      	asrs	r2, r0, #16
 8015f76:	d401      	bmi.n	8015f7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015f78:	42ba      	cmp	r2, r7
 8015f7a:	db06      	blt.n	8015f8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015f7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015f7e:	4474      	add	r4, lr
 8015f80:	3b01      	subs	r3, #1
 8015f82:	3503      	adds	r5, #3
 8015f84:	4410      	add	r0, r2
 8015f86:	e7ef      	b.n	8015f68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015f88:	d075      	beq.n	8016076 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015f8a:	1e5a      	subs	r2, r3, #1
 8015f8c:	fb0e 4602 	mla	r6, lr, r2, r4
 8015f90:	1436      	asrs	r6, r6, #16
 8015f92:	d465      	bmi.n	8016060 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015f94:	4546      	cmp	r6, r8
 8015f96:	da63      	bge.n	8016060 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015f98:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015f9a:	fb06 0202 	mla	r2, r6, r2, r0
 8015f9e:	1412      	asrs	r2, r2, #16
 8015fa0:	d45e      	bmi.n	8016060 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015fa2:	42ba      	cmp	r2, r7
 8015fa4:	da5c      	bge.n	8016060 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015fa6:	1cef      	adds	r7, r5, #3
 8015fa8:	4699      	mov	r9, r3
 8015faa:	f1b9 0f00 	cmp.w	r9, #0
 8015fae:	dd5d      	ble.n	801606c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8015fb0:	1402      	asrs	r2, r0, #16
 8015fb2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015fb6:	1426      	asrs	r6, r4, #16
 8015fb8:	4692      	mov	sl, r2
 8015fba:	9a00      	ldr	r2, [sp, #0]
 8015fbc:	fb08 220a 	mla	r2, r8, sl, r2
 8015fc0:	5d92      	ldrb	r2, [r2, r6]
 8015fc2:	9e01      	ldr	r6, [sp, #4]
 8015fc4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015fc8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015fcc:	d041      	beq.n	8016052 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015fce:	9a03      	ldr	r2, [sp, #12]
 8015fd0:	fa5f fb86 	uxtb.w	fp, r6
 8015fd4:	fb02 f808 	mul.w	r8, r2, r8
 8015fd8:	f108 0201 	add.w	r2, r8, #1
 8015fdc:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015fe0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015fe4:	1212      	asrs	r2, r2, #8
 8015fe6:	fa1f fa82 	uxth.w	sl, r2
 8015fea:	43d2      	mvns	r2, r2
 8015fec:	fb1b fb0a 	smulbb	fp, fp, sl
 8015ff0:	b2d2      	uxtb	r2, r2
 8015ff2:	fb08 b802 	mla	r8, r8, r2, fp
 8015ff6:	fa1f f888 	uxth.w	r8, r8
 8015ffa:	f108 0b01 	add.w	fp, r8, #1
 8015ffe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016002:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016006:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801600a:	fb1b fb0a 	smulbb	fp, fp, sl
 801600e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016012:	fb16 fa0a 	smulbb	sl, r6, sl
 8016016:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801601a:	f807 8c03 	strb.w	r8, [r7, #-3]
 801601e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016022:	fb06 aa02 	mla	sl, r6, r2, sl
 8016026:	fb08 b802 	mla	r8, r8, r2, fp
 801602a:	fa1f fa8a 	uxth.w	sl, sl
 801602e:	fa1f f888 	uxth.w	r8, r8
 8016032:	f10a 0601 	add.w	r6, sl, #1
 8016036:	f108 0b01 	add.w	fp, r8, #1
 801603a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801603e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016042:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016046:	ea4f 2828 	mov.w	r8, r8, asr #8
 801604a:	f807 ac01 	strb.w	sl, [r7, #-1]
 801604e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016052:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016054:	4474      	add	r4, lr
 8016056:	3703      	adds	r7, #3
 8016058:	f109 39ff 	add.w	r9, r9, #4294967295
 801605c:	4410      	add	r0, r2
 801605e:	e7a4      	b.n	8015faa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016060:	f04f 0800 	mov.w	r8, #0
 8016064:	eba3 0208 	sub.w	r2, r3, r8
 8016068:	2a00      	cmp	r2, #0
 801606a:	dc3b      	bgt.n	80160e4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801606c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016070:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016074:	441d      	add	r5, r3
 8016076:	2900      	cmp	r1, #0
 8016078:	f340 8093 	ble.w	80161a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801607c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016080:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016082:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016086:	3901      	subs	r1, #1
 8016088:	eeb0 6a62 	vmov.f32	s12, s5
 801608c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016090:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016094:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016098:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801609c:	eeb0 6a43 	vmov.f32	s12, s6
 80160a0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80160a4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80160a8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80160ac:	ee61 7a27 	vmul.f32	s15, s2, s15
 80160b0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80160b4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80160b8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80160bc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80160c0:	ee12 2a90 	vmov	r2, s5
 80160c4:	eef0 2a47 	vmov.f32	s5, s14
 80160c8:	fb92 fef3 	sdiv	lr, r2, r3
 80160cc:	ee13 2a10 	vmov	r2, s6
 80160d0:	eeb0 3a67 	vmov.f32	s6, s15
 80160d4:	fb92 f3f3 	sdiv	r3, r2, r3
 80160d8:	9a02      	ldr	r2, [sp, #8]
 80160da:	9312      	str	r3, [sp, #72]	@ 0x48
 80160dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80160de:	bf08      	it	eq
 80160e0:	4613      	moveq	r3, r2
 80160e2:	e731      	b.n	8015f48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 80160e4:	1427      	asrs	r7, r4, #16
 80160e6:	d456      	bmi.n	8016196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80160e8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 80160ec:	42be      	cmp	r6, r7
 80160ee:	dd52      	ble.n	8016196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80160f0:	ea5f 4920 	movs.w	r9, r0, asr #16
 80160f4:	d44f      	bmi.n	8016196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80160f6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80160fa:	454a      	cmp	r2, r9
 80160fc:	dd4b      	ble.n	8016196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 80160fe:	9a00      	ldr	r2, [sp, #0]
 8016100:	b236      	sxth	r6, r6
 8016102:	fb09 2606 	mla	r6, r9, r6, r2
 8016106:	5df2      	ldrb	r2, [r6, r7]
 8016108:	9e01      	ldr	r6, [sp, #4]
 801610a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801610e:	0e3a      	lsrs	r2, r7, #24
 8016110:	d041      	beq.n	8016196 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016112:	9e03      	ldr	r6, [sp, #12]
 8016114:	fa5f fb87 	uxtb.w	fp, r7
 8016118:	4372      	muls	r2, r6
 801611a:	1c56      	adds	r6, r2, #1
 801611c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016120:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016124:	1212      	asrs	r2, r2, #8
 8016126:	f815 9006 	ldrb.w	r9, [r5, r6]
 801612a:	fa1f fa82 	uxth.w	sl, r2
 801612e:	43d2      	mvns	r2, r2
 8016130:	fb1b fb0a 	smulbb	fp, fp, sl
 8016134:	b2d2      	uxtb	r2, r2
 8016136:	fb09 b902 	mla	r9, r9, r2, fp
 801613a:	fa1f f989 	uxth.w	r9, r9
 801613e:	f109 0b01 	add.w	fp, r9, #1
 8016142:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016146:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801614a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801614e:	fb1b fb0a 	smulbb	fp, fp, sl
 8016152:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016156:	fb17 fa0a 	smulbb	sl, r7, sl
 801615a:	f805 9006 	strb.w	r9, [r5, r6]
 801615e:	442e      	add	r6, r5
 8016160:	78b7      	ldrb	r7, [r6, #2]
 8016162:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016166:	fb07 aa02 	mla	sl, r7, r2, sl
 801616a:	fb09 b902 	mla	r9, r9, r2, fp
 801616e:	fa1f fa8a 	uxth.w	sl, sl
 8016172:	fa1f f989 	uxth.w	r9, r9
 8016176:	f10a 0701 	add.w	r7, sl, #1
 801617a:	f109 0b01 	add.w	fp, r9, #1
 801617e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016182:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016186:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801618a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801618e:	f886 a002 	strb.w	sl, [r6, #2]
 8016192:	f886 9001 	strb.w	r9, [r6, #1]
 8016196:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016198:	4474      	add	r4, lr
 801619a:	f108 0801 	add.w	r8, r8, #1
 801619e:	4410      	add	r0, r2
 80161a0:	e760      	b.n	8016064 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80161a2:	b005      	add	sp, #20
 80161a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080161a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80161a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80161ac:	b085      	sub	sp, #20
 80161ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80161b2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80161b4:	9203      	str	r2, [sp, #12]
 80161b6:	6868      	ldr	r0, [r5, #4]
 80161b8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80161bc:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80161c0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80161c4:	fb00 2404 	mla	r4, r0, r4, r2
 80161c8:	682a      	ldr	r2, [r5, #0]
 80161ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80161ce:	4414      	add	r4, r2
 80161d0:	f8dc 2000 	ldr.w	r2, [ip]
 80161d4:	9201      	str	r2, [sp, #4]
 80161d6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80161da:	3204      	adds	r2, #4
 80161dc:	9202      	str	r2, [sp, #8]
 80161de:	2900      	cmp	r1, #0
 80161e0:	dc03      	bgt.n	80161ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80161e2:	9a03      	ldr	r2, [sp, #12]
 80161e4:	2a00      	cmp	r2, #0
 80161e6:	f340 8137 	ble.w	8016458 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80161ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80161ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80161f0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80161f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80161f6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80161fa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80161fe:	2b00      	cmp	r3, #0
 8016200:	dd0d      	ble.n	801621e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016202:	1405      	asrs	r5, r0, #16
 8016204:	d405      	bmi.n	8016212 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016206:	4545      	cmp	r5, r8
 8016208:	da03      	bge.n	8016212 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801620a:	1415      	asrs	r5, r2, #16
 801620c:	d401      	bmi.n	8016212 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801620e:	42bd      	cmp	r5, r7
 8016210:	db06      	blt.n	8016220 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016212:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016214:	4470      	add	r0, lr
 8016216:	3b01      	subs	r3, #1
 8016218:	3403      	adds	r4, #3
 801621a:	442a      	add	r2, r5
 801621c:	e7ef      	b.n	80161fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801621e:	d070      	beq.n	8016302 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016220:	1e5d      	subs	r5, r3, #1
 8016222:	fb0e 0605 	mla	r6, lr, r5, r0
 8016226:	1436      	asrs	r6, r6, #16
 8016228:	d462      	bmi.n	80162f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801622a:	4546      	cmp	r6, r8
 801622c:	da60      	bge.n	80162f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801622e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016230:	fb06 2505 	mla	r5, r6, r5, r2
 8016234:	142d      	asrs	r5, r5, #16
 8016236:	d45b      	bmi.n	80162f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016238:	42bd      	cmp	r5, r7
 801623a:	da59      	bge.n	80162f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801623c:	1ce5      	adds	r5, r4, #3
 801623e:	469a      	mov	sl, r3
 8016240:	f1ba 0f00 	cmp.w	sl, #0
 8016244:	dd58      	ble.n	80162f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8016246:	1416      	asrs	r6, r2, #16
 8016248:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801624c:	1407      	asrs	r7, r0, #16
 801624e:	46b1      	mov	r9, r6
 8016250:	9e01      	ldr	r6, [sp, #4]
 8016252:	fb08 6609 	mla	r6, r8, r9, r6
 8016256:	5df6      	ldrb	r6, [r6, r7]
 8016258:	9f02      	ldr	r7, [sp, #8]
 801625a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801625e:	0e37      	lsrs	r7, r6, #24
 8016260:	2fff      	cmp	r7, #255	@ 0xff
 8016262:	f000 80f0 	beq.w	8016446 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016266:	fa5f f887 	uxtb.w	r8, r7
 801626a:	b3d7      	cbz	r7, 80162e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801626c:	fa1f f788 	uxth.w	r7, r8
 8016270:	ea6f 0808 	mvn.w	r8, r8
 8016274:	fa5f fb86 	uxtb.w	fp, r6
 8016278:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801627c:	fa5f f888 	uxtb.w	r8, r8
 8016280:	fb1b fb07 	smulbb	fp, fp, r7
 8016284:	fb09 b908 	mla	r9, r9, r8, fp
 8016288:	fa1f f989 	uxth.w	r9, r9
 801628c:	f109 0b01 	add.w	fp, r9, #1
 8016290:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016294:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8016298:	fb1b fb08 	smulbb	fp, fp, r8
 801629c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80162a0:	f805 9c03 	strb.w	r9, [r5, #-3]
 80162a4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80162a8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80162ac:	fb09 b907 	mla	r9, r9, r7, fp
 80162b0:	fa1f f989 	uxth.w	r9, r9
 80162b4:	f109 0b01 	add.w	fp, r9, #1
 80162b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80162bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80162c0:	f805 9c02 	strb.w	r9, [r5, #-2]
 80162c4:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80162c8:	fb19 f808 	smulbb	r8, r9, r8
 80162cc:	fb06 8607 	mla	r6, r6, r7, r8
 80162d0:	b2b6      	uxth	r6, r6
 80162d2:	f106 0801 	add.w	r8, r6, #1
 80162d6:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80162da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80162de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80162e2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80162e4:	4470      	add	r0, lr
 80162e6:	3503      	adds	r5, #3
 80162e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80162ec:	4432      	add	r2, r6
 80162ee:	e7a7      	b.n	8016240 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80162f0:	2600      	movs	r6, #0
 80162f2:	1b9d      	subs	r5, r3, r6
 80162f4:	2d00      	cmp	r5, #0
 80162f6:	dc3b      	bgt.n	8016370 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80162f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80162fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016300:	441c      	add	r4, r3
 8016302:	2900      	cmp	r1, #0
 8016304:	f340 80a8 	ble.w	8016458 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016308:	ee30 0a04 	vadd.f32	s0, s0, s8
 801630c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801630e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016312:	3901      	subs	r1, #1
 8016314:	eeb0 6a62 	vmov.f32	s12, s5
 8016318:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801631c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016320:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016324:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016328:	eeb0 6a43 	vmov.f32	s12, s6
 801632c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016330:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016334:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016338:	ee61 7a27 	vmul.f32	s15, s2, s15
 801633c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016340:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016344:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016348:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801634c:	ee12 2a90 	vmov	r2, s5
 8016350:	eef0 2a47 	vmov.f32	s5, s14
 8016354:	fb92 fef3 	sdiv	lr, r2, r3
 8016358:	ee13 2a10 	vmov	r2, s6
 801635c:	eeb0 3a67 	vmov.f32	s6, s15
 8016360:	fb92 f3f3 	sdiv	r3, r2, r3
 8016364:	9a03      	ldr	r2, [sp, #12]
 8016366:	9312      	str	r3, [sp, #72]	@ 0x48
 8016368:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801636a:	bf08      	it	eq
 801636c:	4613      	moveq	r3, r2
 801636e:	e736      	b.n	80161de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016370:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016374:	d457      	bmi.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016376:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801637a:	4547      	cmp	r7, r8
 801637c:	dd53      	ble.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801637e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8016382:	d450      	bmi.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016384:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016388:	454d      	cmp	r5, r9
 801638a:	dd4c      	ble.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801638c:	9d01      	ldr	r5, [sp, #4]
 801638e:	b23f      	sxth	r7, r7
 8016390:	fb09 5707 	mla	r7, r9, r7, r5
 8016394:	f817 5008 	ldrb.w	r5, [r7, r8]
 8016398:	9f02      	ldr	r7, [sp, #8]
 801639a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801639e:	0e2f      	lsrs	r7, r5, #24
 80163a0:	2fff      	cmp	r7, #255	@ 0xff
 80163a2:	d045      	beq.n	8016430 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80163a4:	fa5f f987 	uxtb.w	r9, r7
 80163a8:	b3ef      	cbz	r7, 8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80163aa:	fa1f f889 	uxth.w	r8, r9
 80163ae:	ea6f 0909 	mvn.w	r9, r9
 80163b2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80163b6:	fa5f fb85 	uxtb.w	fp, r5
 80163ba:	f814 a007 	ldrb.w	sl, [r4, r7]
 80163be:	fa5f f989 	uxtb.w	r9, r9
 80163c2:	fb1b fb08 	smulbb	fp, fp, r8
 80163c6:	fb0a ba09 	mla	sl, sl, r9, fp
 80163ca:	fa1f fa8a 	uxth.w	sl, sl
 80163ce:	f10a 0b01 	add.w	fp, sl, #1
 80163d2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80163d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80163da:	f804 a007 	strb.w	sl, [r4, r7]
 80163de:	4427      	add	r7, r4
 80163e0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80163e4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80163e8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80163ec:	fb1b fb09 	smulbb	fp, fp, r9
 80163f0:	fb0a ba08 	mla	sl, sl, r8, fp
 80163f4:	fa1f fa8a 	uxth.w	sl, sl
 80163f8:	f10a 0b01 	add.w	fp, sl, #1
 80163fc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016400:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016404:	f887 a001 	strb.w	sl, [r7, #1]
 8016408:	f897 a002 	ldrb.w	sl, [r7, #2]
 801640c:	fb1a f909 	smulbb	r9, sl, r9
 8016410:	fb05 9508 	mla	r5, r5, r8, r9
 8016414:	b2ad      	uxth	r5, r5
 8016416:	f105 0901 	add.w	r9, r5, #1
 801641a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801641e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016422:	f887 9002 	strb.w	r9, [r7, #2]
 8016426:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016428:	4470      	add	r0, lr
 801642a:	3601      	adds	r6, #1
 801642c:	442a      	add	r2, r5
 801642e:	e760      	b.n	80162f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016430:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016434:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8016438:	55e5      	strb	r5, [r4, r7]
 801643a:	4427      	add	r7, r4
 801643c:	0c2d      	lsrs	r5, r5, #16
 801643e:	f887 8001 	strb.w	r8, [r7, #1]
 8016442:	70bd      	strb	r5, [r7, #2]
 8016444:	e7ef      	b.n	8016426 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016446:	0a37      	lsrs	r7, r6, #8
 8016448:	f805 6c03 	strb.w	r6, [r5, #-3]
 801644c:	0c36      	lsrs	r6, r6, #16
 801644e:	f805 7c02 	strb.w	r7, [r5, #-2]
 8016452:	f805 6c01 	strb.w	r6, [r5, #-1]
 8016456:	e744      	b.n	80162e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016458:	b005      	add	sp, #20
 801645a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801645e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801645e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016462:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016464:	9201      	str	r2, [sp, #4]
 8016466:	6870      	ldr	r0, [r6, #4]
 8016468:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801646c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016470:	fa1f fe85 	uxth.w	lr, r5
 8016474:	43ed      	mvns	r5, r5
 8016476:	f8dc 8000 	ldr.w	r8, [ip]
 801647a:	b2ed      	uxtb	r5, r5
 801647c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016480:	fb00 2404 	mla	r4, r0, r4, r2
 8016484:	6832      	ldr	r2, [r6, #0]
 8016486:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801648a:	4414      	add	r4, r2
 801648c:	2900      	cmp	r1, #0
 801648e:	dc03      	bgt.n	8016498 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016490:	9a01      	ldr	r2, [sp, #4]
 8016492:	2a00      	cmp	r2, #0
 8016494:	f340 810d 	ble.w	80166b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016498:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801649a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801649e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80164a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80164a4:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80164a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	dd0e      	ble.n	80164ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80164b0:	1406      	asrs	r6, r0, #16
 80164b2:	d405      	bmi.n	80164c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80164b4:	4556      	cmp	r6, sl
 80164b6:	da03      	bge.n	80164c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80164b8:	1416      	asrs	r6, r2, #16
 80164ba:	d401      	bmi.n	80164c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80164bc:	454e      	cmp	r6, r9
 80164be:	db07      	blt.n	80164d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80164c0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80164c2:	3b01      	subs	r3, #1
 80164c4:	3403      	adds	r4, #3
 80164c6:	4430      	add	r0, r6
 80164c8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80164ca:	4432      	add	r2, r6
 80164cc:	e7ee      	b.n	80164ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80164ce:	d060      	beq.n	8016592 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80164d0:	1e5e      	subs	r6, r3, #1
 80164d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80164d4:	fb07 0706 	mla	r7, r7, r6, r0
 80164d8:	143f      	asrs	r7, r7, #16
 80164da:	d451      	bmi.n	8016580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80164dc:	4557      	cmp	r7, sl
 80164de:	da4f      	bge.n	8016580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80164e0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80164e2:	fb07 2606 	mla	r6, r7, r6, r2
 80164e6:	1436      	asrs	r6, r6, #16
 80164e8:	d44a      	bmi.n	8016580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80164ea:	454e      	cmp	r6, r9
 80164ec:	da48      	bge.n	8016580 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80164ee:	1ce6      	adds	r6, r4, #3
 80164f0:	4699      	mov	r9, r3
 80164f2:	f1b9 0f00 	cmp.w	r9, #0
 80164f6:	f106 0603 	add.w	r6, r6, #3
 80164fa:	dd45      	ble.n	8016588 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80164fc:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016500:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016504:	1417      	asrs	r7, r2, #16
 8016506:	f109 39ff 	add.w	r9, r9, #4294967295
 801650a:	fb0b a707 	mla	r7, fp, r7, sl
 801650e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016512:	fb1b fb05 	smulbb	fp, fp, r5
 8016516:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801651a:	eb08 0a07 	add.w	sl, r8, r7
 801651e:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016522:	fb07 b70e 	mla	r7, r7, lr, fp
 8016526:	b2bf      	uxth	r7, r7
 8016528:	f107 0b01 	add.w	fp, r7, #1
 801652c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016530:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016534:	fb1b fb05 	smulbb	fp, fp, r5
 8016538:	123f      	asrs	r7, r7, #8
 801653a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801653e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016542:	fb07 b70e 	mla	r7, r7, lr, fp
 8016546:	b2bf      	uxth	r7, r7
 8016548:	f107 0b01 	add.w	fp, r7, #1
 801654c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016550:	123f      	asrs	r7, r7, #8
 8016552:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016556:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801655a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801655e:	fb1a fa05 	smulbb	sl, sl, r5
 8016562:	fb07 a70e 	mla	r7, r7, lr, sl
 8016566:	b2bf      	uxth	r7, r7
 8016568:	f107 0a01 	add.w	sl, r7, #1
 801656c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016570:	123f      	asrs	r7, r7, #8
 8016572:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016576:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016578:	4438      	add	r0, r7
 801657a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801657c:	443a      	add	r2, r7
 801657e:	e7b8      	b.n	80164f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016580:	2700      	movs	r7, #0
 8016582:	1bde      	subs	r6, r3, r7
 8016584:	2e00      	cmp	r6, #0
 8016586:	dc3f      	bgt.n	8016608 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8016588:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801658c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016590:	441c      	add	r4, r3
 8016592:	2900      	cmp	r1, #0
 8016594:	f340 808d 	ble.w	80166b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016598:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801659c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801659e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80165a2:	3901      	subs	r1, #1
 80165a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80165a8:	eef0 6a62 	vmov.f32	s13, s5
 80165ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80165b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80165b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165b8:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 80165bc:	eef0 6a43 	vmov.f32	s13, s6
 80165c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165c4:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80165c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80165cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80165d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80165d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80165d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80165dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80165e0:	ee12 2a90 	vmov	r2, s5
 80165e4:	eef0 2a47 	vmov.f32	s5, s14
 80165e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80165ec:	ee13 2a10 	vmov	r2, s6
 80165f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80165f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80165f4:	eeb0 3a67 	vmov.f32	s6, s15
 80165f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80165fc:	9a01      	ldr	r2, [sp, #4]
 80165fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8016600:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016602:	bf08      	it	eq
 8016604:	4613      	moveq	r3, r2
 8016606:	e741      	b.n	801648c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016608:	ea5f 4920 	movs.w	r9, r0, asr #16
 801660c:	d44b      	bmi.n	80166a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801660e:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016612:	45cb      	cmp	fp, r9
 8016614:	dd47      	ble.n	80166a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016616:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801661a:	d444      	bmi.n	80166a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801661c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016620:	4556      	cmp	r6, sl
 8016622:	dd40      	ble.n	80166a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016624:	fa0f f68b 	sxth.w	r6, fp
 8016628:	fb0a 9906 	mla	r9, sl, r6, r9
 801662c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016630:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016634:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016638:	fb1b fb05 	smulbb	fp, fp, r5
 801663c:	eb08 0a09 	add.w	sl, r8, r9
 8016640:	f818 9009 	ldrb.w	r9, [r8, r9]
 8016644:	fb09 b90e 	mla	r9, r9, lr, fp
 8016648:	fa1f f989 	uxth.w	r9, r9
 801664c:	f109 0b01 	add.w	fp, r9, #1
 8016650:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016654:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016658:	f804 9006 	strb.w	r9, [r4, r6]
 801665c:	4426      	add	r6, r4
 801665e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016662:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016666:	fb1b fb05 	smulbb	fp, fp, r5
 801666a:	fb09 b90e 	mla	r9, r9, lr, fp
 801666e:	fa1f f989 	uxth.w	r9, r9
 8016672:	f109 0b01 	add.w	fp, r9, #1
 8016676:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801667a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801667e:	f886 9001 	strb.w	r9, [r6, #1]
 8016682:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016686:	f896 a002 	ldrb.w	sl, [r6, #2]
 801668a:	fb1a fa05 	smulbb	sl, sl, r5
 801668e:	fb09 a90e 	mla	r9, r9, lr, sl
 8016692:	fa1f f989 	uxth.w	r9, r9
 8016696:	f109 0a01 	add.w	sl, r9, #1
 801669a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801669e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80166a2:	f886 9002 	strb.w	r9, [r6, #2]
 80166a6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80166a8:	3701      	adds	r7, #1
 80166aa:	4430      	add	r0, r6
 80166ac:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80166ae:	4432      	add	r2, r6
 80166b0:	e767      	b.n	8016582 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80166b2:	b003      	add	sp, #12
 80166b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80166b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80166be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80166c2:	9201      	str	r2, [sp, #4]
 80166c4:	6868      	ldr	r0, [r5, #4]
 80166c6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80166c8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80166cc:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80166d0:	fb00 2404 	mla	r4, r0, r4, r2
 80166d4:	682a      	ldr	r2, [r5, #0]
 80166d6:	f8d7 8000 	ldr.w	r8, [r7]
 80166da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80166de:	4414      	add	r4, r2
 80166e0:	2900      	cmp	r1, #0
 80166e2:	dc03      	bgt.n	80166ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80166e4:	9a01      	ldr	r2, [sp, #4]
 80166e6:	2a00      	cmp	r2, #0
 80166e8:	f340 80af 	ble.w	801684a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80166ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80166ee:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80166f2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80166f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80166f8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80166fc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016700:	2b00      	cmp	r3, #0
 8016702:	dd0c      	ble.n	801671e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016704:	1405      	asrs	r5, r0, #16
 8016706:	d405      	bmi.n	8016714 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016708:	4555      	cmp	r5, sl
 801670a:	da03      	bge.n	8016714 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801670c:	1415      	asrs	r5, r2, #16
 801670e:	d401      	bmi.n	8016714 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016710:	454d      	cmp	r5, r9
 8016712:	db05      	blt.n	8016720 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016714:	4470      	add	r0, lr
 8016716:	4462      	add	r2, ip
 8016718:	3b01      	subs	r3, #1
 801671a:	3403      	adds	r4, #3
 801671c:	e7f0      	b.n	8016700 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801671e:	d038      	beq.n	8016792 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016720:	1e5d      	subs	r5, r3, #1
 8016722:	fb0e 0605 	mla	r6, lr, r5, r0
 8016726:	1436      	asrs	r6, r6, #16
 8016728:	d42a      	bmi.n	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801672a:	4556      	cmp	r6, sl
 801672c:	da28      	bge.n	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801672e:	fb0c 2505 	mla	r5, ip, r5, r2
 8016732:	142d      	asrs	r5, r5, #16
 8016734:	d424      	bmi.n	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016736:	454d      	cmp	r5, r9
 8016738:	da22      	bge.n	8016780 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801673a:	1ce6      	adds	r6, r4, #3
 801673c:	4699      	mov	r9, r3
 801673e:	f1b9 0f00 	cmp.w	r9, #0
 8016742:	f106 0603 	add.w	r6, r6, #3
 8016746:	dd1f      	ble.n	8016788 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016748:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801674c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016750:	1415      	asrs	r5, r2, #16
 8016752:	4470      	add	r0, lr
 8016754:	4462      	add	r2, ip
 8016756:	f109 39ff 	add.w	r9, r9, #4294967295
 801675a:	fb0b a505 	mla	r5, fp, r5, sl
 801675e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016762:	eb08 0a05 	add.w	sl, r8, r5
 8016766:	f818 5005 	ldrb.w	r5, [r8, r5]
 801676a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801676e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016772:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016776:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801677a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801677e:	e7de      	b.n	801673e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016780:	2600      	movs	r6, #0
 8016782:	1b9d      	subs	r5, r3, r6
 8016784:	2d00      	cmp	r5, #0
 8016786:	dc38      	bgt.n	80167fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016788:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801678c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016790:	441c      	add	r4, r3
 8016792:	2900      	cmp	r1, #0
 8016794:	dd59      	ble.n	801684a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016796:	ee30 0a04 	vadd.f32	s0, s0, s8
 801679a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801679c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80167a0:	3901      	subs	r1, #1
 80167a2:	eeb0 6a62 	vmov.f32	s12, s5
 80167a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80167aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80167ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80167b2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80167b6:	eeb0 6a43 	vmov.f32	s12, s6
 80167ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80167be:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80167c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80167c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80167ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80167ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80167d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80167d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80167da:	ee12 2a90 	vmov	r2, s5
 80167de:	eef0 2a47 	vmov.f32	s5, s14
 80167e2:	fb92 fef3 	sdiv	lr, r2, r3
 80167e6:	ee13 2a10 	vmov	r2, s6
 80167ea:	eeb0 3a67 	vmov.f32	s6, s15
 80167ee:	fb92 fcf3 	sdiv	ip, r2, r3
 80167f2:	9a01      	ldr	r2, [sp, #4]
 80167f4:	bf08      	it	eq
 80167f6:	4613      	moveq	r3, r2
 80167f8:	e772      	b.n	80166e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80167fa:	ea5f 4920 	movs.w	r9, r0, asr #16
 80167fe:	d420      	bmi.n	8016842 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016800:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016804:	45cb      	cmp	fp, r9
 8016806:	dd1c      	ble.n	8016842 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016808:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801680c:	d419      	bmi.n	8016842 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801680e:	68fd      	ldr	r5, [r7, #12]
 8016810:	4555      	cmp	r5, sl
 8016812:	dd16      	ble.n	8016842 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016814:	fa0f f58b 	sxth.w	r5, fp
 8016818:	fb0a 9505 	mla	r5, sl, r5, r9
 801681c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016820:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016824:	eb08 0b05 	add.w	fp, r8, r5
 8016828:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801682c:	f804 9005 	strb.w	r9, [r4, r5]
 8016830:	4425      	add	r5, r4
 8016832:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016836:	f885 9001 	strb.w	r9, [r5, #1]
 801683a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801683e:	f885 9002 	strb.w	r9, [r5, #2]
 8016842:	4470      	add	r0, lr
 8016844:	4462      	add	r2, ip
 8016846:	3601      	adds	r6, #1
 8016848:	e79b      	b.n	8016782 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801684a:	b003      	add	sp, #12
 801684c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016850 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016854:	b085      	sub	sp, #20
 8016856:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801685a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801685c:	9202      	str	r2, [sp, #8]
 801685e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016862:	6860      	ldr	r0, [r4, #4]
 8016864:	9203      	str	r2, [sp, #12]
 8016866:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801686a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801686e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016872:	fb00 2505 	mla	r5, r0, r5, r2
 8016876:	6822      	ldr	r2, [r4, #0]
 8016878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801687c:	4415      	add	r5, r2
 801687e:	f8dc 2000 	ldr.w	r2, [ip]
 8016882:	9201      	str	r2, [sp, #4]
 8016884:	2900      	cmp	r1, #0
 8016886:	dc03      	bgt.n	8016890 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016888:	9a02      	ldr	r2, [sp, #8]
 801688a:	2a00      	cmp	r2, #0
 801688c:	f340 8122 	ble.w	8016ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016890:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016892:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016896:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801689a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801689c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80168a0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80168a4:	2b00      	cmp	r3, #0
 80168a6:	dd0d      	ble.n	80168c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80168a8:	1422      	asrs	r2, r4, #16
 80168aa:	d405      	bmi.n	80168b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80168ac:	4542      	cmp	r2, r8
 80168ae:	da03      	bge.n	80168b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80168b0:	1402      	asrs	r2, r0, #16
 80168b2:	d401      	bmi.n	80168b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80168b4:	42ba      	cmp	r2, r7
 80168b6:	db06      	blt.n	80168c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80168b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80168ba:	4474      	add	r4, lr
 80168bc:	3b01      	subs	r3, #1
 80168be:	3503      	adds	r5, #3
 80168c0:	4410      	add	r0, r2
 80168c2:	e7ef      	b.n	80168a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80168c4:	d072      	beq.n	80169ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80168c6:	1e5a      	subs	r2, r3, #1
 80168c8:	fb0e 4602 	mla	r6, lr, r2, r4
 80168cc:	1436      	asrs	r6, r6, #16
 80168ce:	d462      	bmi.n	8016996 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80168d0:	4546      	cmp	r6, r8
 80168d2:	da60      	bge.n	8016996 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80168d4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80168d6:	fb06 0202 	mla	r2, r6, r2, r0
 80168da:	1412      	asrs	r2, r2, #16
 80168dc:	d45b      	bmi.n	8016996 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80168de:	42ba      	cmp	r2, r7
 80168e0:	da59      	bge.n	8016996 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80168e2:	1cef      	adds	r7, r5, #3
 80168e4:	4699      	mov	r9, r3
 80168e6:	f1b9 0f00 	cmp.w	r9, #0
 80168ea:	dd5a      	ble.n	80169a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80168ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80168f0:	1426      	asrs	r6, r4, #16
 80168f2:	1402      	asrs	r2, r0, #16
 80168f4:	fb08 6202 	mla	r2, r8, r2, r6
 80168f8:	9e01      	ldr	r6, [sp, #4]
 80168fa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80168fe:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016902:	d041      	beq.n	8016988 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016904:	9a03      	ldr	r2, [sp, #12]
 8016906:	fa5f fb86 	uxtb.w	fp, r6
 801690a:	fb02 f808 	mul.w	r8, r2, r8
 801690e:	f108 0201 	add.w	r2, r8, #1
 8016912:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016916:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801691a:	1212      	asrs	r2, r2, #8
 801691c:	fa1f fa82 	uxth.w	sl, r2
 8016920:	43d2      	mvns	r2, r2
 8016922:	fb1b fb0a 	smulbb	fp, fp, sl
 8016926:	b2d2      	uxtb	r2, r2
 8016928:	fb08 b802 	mla	r8, r8, r2, fp
 801692c:	fa1f f888 	uxth.w	r8, r8
 8016930:	f108 0b01 	add.w	fp, r8, #1
 8016934:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016938:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801693c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016940:	fb1b fb0a 	smulbb	fp, fp, sl
 8016944:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016948:	fb16 fa0a 	smulbb	sl, r6, sl
 801694c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016950:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016954:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016958:	fb06 aa02 	mla	sl, r6, r2, sl
 801695c:	fb08 b802 	mla	r8, r8, r2, fp
 8016960:	fa1f fa8a 	uxth.w	sl, sl
 8016964:	fa1f f888 	uxth.w	r8, r8
 8016968:	f10a 0601 	add.w	r6, sl, #1
 801696c:	f108 0b01 	add.w	fp, r8, #1
 8016970:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016974:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016978:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801697c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016980:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016984:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016988:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801698a:	4474      	add	r4, lr
 801698c:	3703      	adds	r7, #3
 801698e:	f109 39ff 	add.w	r9, r9, #4294967295
 8016992:	4410      	add	r0, r2
 8016994:	e7a7      	b.n	80168e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016996:	f04f 0800 	mov.w	r8, #0
 801699a:	eba3 0208 	sub.w	r2, r3, r8
 801699e:	2a00      	cmp	r2, #0
 80169a0:	dc3b      	bgt.n	8016a1a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80169a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80169a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80169aa:	441d      	add	r5, r3
 80169ac:	2900      	cmp	r1, #0
 80169ae:	f340 8091 	ble.w	8016ad4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80169b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80169b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80169b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80169bc:	3901      	subs	r1, #1
 80169be:	eeb0 6a62 	vmov.f32	s12, s5
 80169c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80169c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80169ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80169ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80169d2:	eeb0 6a43 	vmov.f32	s12, s6
 80169d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80169da:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80169de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80169e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80169e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80169ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80169ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80169f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80169f6:	ee12 2a90 	vmov	r2, s5
 80169fa:	eef0 2a47 	vmov.f32	s5, s14
 80169fe:	fb92 fef3 	sdiv	lr, r2, r3
 8016a02:	ee13 2a10 	vmov	r2, s6
 8016a06:	eeb0 3a67 	vmov.f32	s6, s15
 8016a0a:	fb92 f3f3 	sdiv	r3, r2, r3
 8016a0e:	9a02      	ldr	r2, [sp, #8]
 8016a10:	9312      	str	r3, [sp, #72]	@ 0x48
 8016a12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a14:	bf08      	it	eq
 8016a16:	4613      	moveq	r3, r2
 8016a18:	e734      	b.n	8016884 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016a1a:	1427      	asrs	r7, r4, #16
 8016a1c:	d454      	bmi.n	8016ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a1e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016a22:	42be      	cmp	r6, r7
 8016a24:	dd50      	ble.n	8016ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a26:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016a2a:	d44d      	bmi.n	8016ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a2c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016a30:	454a      	cmp	r2, r9
 8016a32:	dd49      	ble.n	8016ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a34:	b236      	sxth	r6, r6
 8016a36:	9a01      	ldr	r2, [sp, #4]
 8016a38:	fb09 7606 	mla	r6, r9, r6, r7
 8016a3c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016a40:	0e3a      	lsrs	r2, r7, #24
 8016a42:	d041      	beq.n	8016ac8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016a44:	9e03      	ldr	r6, [sp, #12]
 8016a46:	fa5f fb87 	uxtb.w	fp, r7
 8016a4a:	4372      	muls	r2, r6
 8016a4c:	1c56      	adds	r6, r2, #1
 8016a4e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016a52:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016a56:	1212      	asrs	r2, r2, #8
 8016a58:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016a5c:	fa1f fa82 	uxth.w	sl, r2
 8016a60:	43d2      	mvns	r2, r2
 8016a62:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a66:	b2d2      	uxtb	r2, r2
 8016a68:	fb09 b902 	mla	r9, r9, r2, fp
 8016a6c:	fa1f f989 	uxth.w	r9, r9
 8016a70:	f109 0b01 	add.w	fp, r9, #1
 8016a74:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016a78:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016a7c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016a80:	fb1b fb0a 	smulbb	fp, fp, sl
 8016a84:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016a88:	fb17 fa0a 	smulbb	sl, r7, sl
 8016a8c:	f805 9006 	strb.w	r9, [r5, r6]
 8016a90:	442e      	add	r6, r5
 8016a92:	78b7      	ldrb	r7, [r6, #2]
 8016a94:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016a98:	fb07 aa02 	mla	sl, r7, r2, sl
 8016a9c:	fb09 b902 	mla	r9, r9, r2, fp
 8016aa0:	fa1f fa8a 	uxth.w	sl, sl
 8016aa4:	fa1f f989 	uxth.w	r9, r9
 8016aa8:	f10a 0701 	add.w	r7, sl, #1
 8016aac:	f109 0b01 	add.w	fp, r9, #1
 8016ab0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016ab4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016ab8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016abc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ac0:	f886 a002 	strb.w	sl, [r6, #2]
 8016ac4:	f886 9001 	strb.w	r9, [r6, #1]
 8016ac8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016aca:	4474      	add	r4, lr
 8016acc:	f108 0801 	add.w	r8, r8, #1
 8016ad0:	4410      	add	r0, r2
 8016ad2:	e762      	b.n	801699a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016ad4:	b005      	add	sp, #20
 8016ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016ada <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016ada:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ade:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8016ae0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016ae4:	9201      	str	r2, [sp, #4]
 8016ae6:	6860      	ldr	r0, [r4, #4]
 8016ae8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016aec:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8016af0:	fb00 2505 	mla	r5, r0, r5, r2
 8016af4:	6822      	ldr	r2, [r4, #0]
 8016af6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016afa:	4415      	add	r5, r2
 8016afc:	f8dc 2000 	ldr.w	r2, [ip]
 8016b00:	9200      	str	r2, [sp, #0]
 8016b02:	2900      	cmp	r1, #0
 8016b04:	dc03      	bgt.n	8016b0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016b06:	9a01      	ldr	r2, [sp, #4]
 8016b08:	2a00      	cmp	r2, #0
 8016b0a:	f340 812b 	ble.w	8016d64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016b0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016b10:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016b14:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016b18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016b1a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016b1e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	dd0e      	ble.n	8016b44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016b26:	1422      	asrs	r2, r4, #16
 8016b28:	d405      	bmi.n	8016b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b2a:	4572      	cmp	r2, lr
 8016b2c:	da03      	bge.n	8016b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b2e:	1402      	asrs	r2, r0, #16
 8016b30:	d401      	bmi.n	8016b36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016b32:	42ba      	cmp	r2, r7
 8016b34:	db07      	blt.n	8016b46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016b36:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b38:	3b01      	subs	r3, #1
 8016b3a:	3503      	adds	r5, #3
 8016b3c:	4414      	add	r4, r2
 8016b3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016b40:	4410      	add	r0, r2
 8016b42:	e7ee      	b.n	8016b22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016b44:	d06f      	beq.n	8016c26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016b46:	1e5a      	subs	r2, r3, #1
 8016b48:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016b4a:	fb06 4602 	mla	r6, r6, r2, r4
 8016b4e:	1436      	asrs	r6, r6, #16
 8016b50:	d45e      	bmi.n	8016c10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016b52:	4576      	cmp	r6, lr
 8016b54:	da5c      	bge.n	8016c10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016b56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016b58:	fb06 0202 	mla	r2, r6, r2, r0
 8016b5c:	1412      	asrs	r2, r2, #16
 8016b5e:	d457      	bmi.n	8016c10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016b60:	42ba      	cmp	r2, r7
 8016b62:	da55      	bge.n	8016c10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016b64:	1cee      	adds	r6, r5, #3
 8016b66:	469a      	mov	sl, r3
 8016b68:	f1ba 0f00 	cmp.w	sl, #0
 8016b6c:	dd56      	ble.n	8016c1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016b6e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016b72:	1427      	asrs	r7, r4, #16
 8016b74:	1402      	asrs	r2, r0, #16
 8016b76:	fb0e 7202 	mla	r2, lr, r2, r7
 8016b7a:	9f00      	ldr	r7, [sp, #0]
 8016b7c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016b80:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016b84:	d03c      	beq.n	8016c00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016b86:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016b8a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016b8e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016b92:	fa5f f28e 	uxtb.w	r2, lr
 8016b96:	b2ff      	uxtb	r7, r7
 8016b98:	f000 80dd 	beq.w	8016d56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016b9c:	fa1f f882 	uxth.w	r8, r2
 8016ba0:	43d2      	mvns	r2, r2
 8016ba2:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016ba6:	fb17 f708 	smulbb	r7, r7, r8
 8016baa:	b2d2      	uxtb	r2, r2
 8016bac:	fb19 f908 	smulbb	r9, r9, r8
 8016bb0:	fb0e 7702 	mla	r7, lr, r2, r7
 8016bb4:	fb1b f808 	smulbb	r8, fp, r8
 8016bb8:	b2bf      	uxth	r7, r7
 8016bba:	f107 0e01 	add.w	lr, r7, #1
 8016bbe:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016bc2:	123f      	asrs	r7, r7, #8
 8016bc4:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016bc8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016bcc:	fb07 9902 	mla	r9, r7, r2, r9
 8016bd0:	fa1f f989 	uxth.w	r9, r9
 8016bd4:	f109 0701 	add.w	r7, r9, #1
 8016bd8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016bdc:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016be0:	fb07 8802 	mla	r8, r7, r2, r8
 8016be4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016be8:	fa1f f888 	uxth.w	r8, r8
 8016bec:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016bf0:	f108 0201 	add.w	r2, r8, #1
 8016bf4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016bf8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016bfc:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016c00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016c02:	3603      	adds	r6, #3
 8016c04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016c08:	4414      	add	r4, r2
 8016c0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016c0c:	4410      	add	r0, r2
 8016c0e:	e7ab      	b.n	8016b68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016c10:	f04f 0e00 	mov.w	lr, #0
 8016c14:	eba3 020e 	sub.w	r2, r3, lr
 8016c18:	2a00      	cmp	r2, #0
 8016c1a:	dc3d      	bgt.n	8016c98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016c1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c24:	441d      	add	r5, r3
 8016c26:	2900      	cmp	r1, #0
 8016c28:	f340 809c 	ble.w	8016d64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016c2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c36:	3901      	subs	r1, #1
 8016c38:	eeb0 6a62 	vmov.f32	s12, s5
 8016c3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016c40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c48:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016c4c:	eeb0 6a43 	vmov.f32	s12, s6
 8016c50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c54:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016c58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016c60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016c64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016c68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016c6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016c70:	ee12 2a90 	vmov	r2, s5
 8016c74:	eef0 2a47 	vmov.f32	s5, s14
 8016c78:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c7c:	ee13 2a10 	vmov	r2, s6
 8016c80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016c82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c84:	eeb0 3a67 	vmov.f32	s6, s15
 8016c88:	fb92 f3f3 	sdiv	r3, r2, r3
 8016c8c:	9a01      	ldr	r2, [sp, #4]
 8016c8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016c90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c92:	bf08      	it	eq
 8016c94:	4613      	moveq	r3, r2
 8016c96:	e734      	b.n	8016b02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016c98:	1427      	asrs	r7, r4, #16
 8016c9a:	d44d      	bmi.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016c9c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016ca0:	42be      	cmp	r6, r7
 8016ca2:	dd49      	ble.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016ca4:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016ca8:	d446      	bmi.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016caa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016cae:	4542      	cmp	r2, r8
 8016cb0:	dd42      	ble.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016cb2:	b236      	sxth	r6, r6
 8016cb4:	9a00      	ldr	r2, [sp, #0]
 8016cb6:	fb08 7606 	mla	r6, r8, r6, r7
 8016cba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016cbe:	0e3a      	lsrs	r2, r7, #24
 8016cc0:	d03a      	beq.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016cc2:	2aff      	cmp	r2, #255	@ 0xff
 8016cc4:	b2d6      	uxtb	r6, r2
 8016cc6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016cca:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016cce:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016cd2:	b2ff      	uxtb	r7, r7
 8016cd4:	d037      	beq.n	8016d46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016cd6:	fa1f f986 	uxth.w	r9, r6
 8016cda:	4472      	add	r2, lr
 8016cdc:	43f6      	mvns	r6, r6
 8016cde:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016ce2:	fb17 f709 	smulbb	r7, r7, r9
 8016ce6:	fb1a fa09 	smulbb	sl, sl, r9
 8016cea:	b2f6      	uxtb	r6, r6
 8016cec:	fb1b f909 	smulbb	r9, fp, r9
 8016cf0:	fb08 7706 	mla	r7, r8, r6, r7
 8016cf4:	b2bf      	uxth	r7, r7
 8016cf6:	f107 0801 	add.w	r8, r7, #1
 8016cfa:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016cfe:	123f      	asrs	r7, r7, #8
 8016d00:	54af      	strb	r7, [r5, r2]
 8016d02:	442a      	add	r2, r5
 8016d04:	7857      	ldrb	r7, [r2, #1]
 8016d06:	fb07 aa06 	mla	sl, r7, r6, sl
 8016d0a:	fa1f fa8a 	uxth.w	sl, sl
 8016d0e:	f10a 0701 	add.w	r7, sl, #1
 8016d12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016d16:	7897      	ldrb	r7, [r2, #2]
 8016d18:	fb07 9906 	mla	r9, r7, r6, r9
 8016d1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016d20:	fa1f f989 	uxth.w	r9, r9
 8016d24:	f882 a001 	strb.w	sl, [r2, #1]
 8016d28:	f109 0601 	add.w	r6, r9, #1
 8016d2c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016d30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016d34:	f882 9002 	strb.w	r9, [r2, #2]
 8016d38:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016d3a:	f10e 0e01 	add.w	lr, lr, #1
 8016d3e:	4414      	add	r4, r2
 8016d40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016d42:	4410      	add	r0, r2
 8016d44:	e766      	b.n	8016c14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016d46:	4472      	add	r2, lr
 8016d48:	54af      	strb	r7, [r5, r2]
 8016d4a:	442a      	add	r2, r5
 8016d4c:	f882 a001 	strb.w	sl, [r2, #1]
 8016d50:	f882 b002 	strb.w	fp, [r2, #2]
 8016d54:	e7f0      	b.n	8016d38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016d56:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016d5a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016d5e:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016d62:	e74d      	b.n	8016c00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016d64:	b003      	add	sp, #12
 8016d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016d6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d70:	b087      	sub	sp, #28
 8016d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016d76:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8016d78:	9204      	str	r2, [sp, #16]
 8016d7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016d7e:	6860      	ldr	r0, [r4, #4]
 8016d80:	9205      	str	r2, [sp, #20]
 8016d82:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8016d86:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8016d8a:	9101      	str	r1, [sp, #4]
 8016d8c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8016d90:	fb00 2505 	mla	r5, r0, r5, r2
 8016d94:	6822      	ldr	r2, [r4, #0]
 8016d96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d9a:	4415      	add	r5, r2
 8016d9c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016da0:	3201      	adds	r2, #1
 8016da2:	f022 0201 	bic.w	r2, r2, #1
 8016da6:	9202      	str	r2, [sp, #8]
 8016da8:	f8dc 2000 	ldr.w	r2, [ip]
 8016dac:	9203      	str	r2, [sp, #12]
 8016dae:	9a01      	ldr	r2, [sp, #4]
 8016db0:	2a00      	cmp	r2, #0
 8016db2:	dc03      	bgt.n	8016dbc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016db4:	9a04      	ldr	r2, [sp, #16]
 8016db6:	2a00      	cmp	r2, #0
 8016db8:	f340 8135 	ble.w	8017026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016dbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016dbe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016dc2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016dc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016dc8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016dcc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	dd0d      	ble.n	8016df0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016dd4:	1422      	asrs	r2, r4, #16
 8016dd6:	d405      	bmi.n	8016de4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016dd8:	4542      	cmp	r2, r8
 8016dda:	da03      	bge.n	8016de4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016ddc:	1402      	asrs	r2, r0, #16
 8016dde:	d401      	bmi.n	8016de4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016de0:	42ba      	cmp	r2, r7
 8016de2:	db06      	blt.n	8016df2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016de4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016de6:	4474      	add	r4, lr
 8016de8:	3b01      	subs	r3, #1
 8016dea:	3503      	adds	r5, #3
 8016dec:	4410      	add	r0, r2
 8016dee:	e7ef      	b.n	8016dd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016df0:	d077      	beq.n	8016ee2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016df2:	1e5a      	subs	r2, r3, #1
 8016df4:	fb0e 4602 	mla	r6, lr, r2, r4
 8016df8:	1436      	asrs	r6, r6, #16
 8016dfa:	d469      	bmi.n	8016ed0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016dfc:	4546      	cmp	r6, r8
 8016dfe:	da67      	bge.n	8016ed0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e00:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016e02:	fb06 0202 	mla	r2, r6, r2, r0
 8016e06:	1412      	asrs	r2, r2, #16
 8016e08:	d462      	bmi.n	8016ed0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e0a:	42ba      	cmp	r2, r7
 8016e0c:	da60      	bge.n	8016ed0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016e0e:	1cee      	adds	r6, r5, #3
 8016e10:	4699      	mov	r9, r3
 8016e12:	f1b9 0f00 	cmp.w	r9, #0
 8016e16:	dd5f      	ble.n	8016ed8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016e18:	1422      	asrs	r2, r4, #16
 8016e1a:	9902      	ldr	r1, [sp, #8]
 8016e1c:	1407      	asrs	r7, r0, #16
 8016e1e:	fb01 2707 	mla	r7, r1, r7, r2
 8016e22:	9903      	ldr	r1, [sp, #12]
 8016e24:	087a      	lsrs	r2, r7, #1
 8016e26:	5c8a      	ldrb	r2, [r1, r2]
 8016e28:	07f9      	lsls	r1, r7, #31
 8016e2a:	bf54      	ite	pl
 8016e2c:	f002 020f 	andpl.w	r2, r2, #15
 8016e30:	1112      	asrmi	r2, r2, #4
 8016e32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016e36:	b2d2      	uxtb	r2, r2
 8016e38:	2a00      	cmp	r2, #0
 8016e3a:	d042      	beq.n	8016ec2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016e3c:	497b      	ldr	r1, [pc, #492]	@ (801702c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016e3e:	680f      	ldr	r7, [r1, #0]
 8016e40:	9905      	ldr	r1, [sp, #20]
 8016e42:	fa5f fb87 	uxtb.w	fp, r7
 8016e46:	434a      	muls	r2, r1
 8016e48:	f102 0801 	add.w	r8, r2, #1
 8016e4c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016e50:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016e54:	1212      	asrs	r2, r2, #8
 8016e56:	fa1f fa82 	uxth.w	sl, r2
 8016e5a:	43d2      	mvns	r2, r2
 8016e5c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e60:	b2d2      	uxtb	r2, r2
 8016e62:	fb08 b802 	mla	r8, r8, r2, fp
 8016e66:	fa1f f888 	uxth.w	r8, r8
 8016e6a:	f108 0b01 	add.w	fp, r8, #1
 8016e6e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016e72:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016e76:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016e7a:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016e82:	fb17 fa0a 	smulbb	sl, r7, sl
 8016e86:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016e8a:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016e8e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016e92:	fb07 aa02 	mla	sl, r7, r2, sl
 8016e96:	fb08 b802 	mla	r8, r8, r2, fp
 8016e9a:	fa1f fa8a 	uxth.w	sl, sl
 8016e9e:	fa1f f888 	uxth.w	r8, r8
 8016ea2:	f10a 0701 	add.w	r7, sl, #1
 8016ea6:	f108 0b01 	add.w	fp, r8, #1
 8016eaa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016eae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016eb2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016eb6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016eba:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016ebe:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016ec2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016ec4:	4474      	add	r4, lr
 8016ec6:	3603      	adds	r6, #3
 8016ec8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016ecc:	4410      	add	r0, r2
 8016ece:	e7a0      	b.n	8016e12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016ed0:	2700      	movs	r7, #0
 8016ed2:	1bda      	subs	r2, r3, r7
 8016ed4:	2a00      	cmp	r2, #0
 8016ed6:	dc3e      	bgt.n	8016f56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016ed8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016edc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016ee0:	441d      	add	r5, r3
 8016ee2:	9b01      	ldr	r3, [sp, #4]
 8016ee4:	2b00      	cmp	r3, #0
 8016ee6:	f340 809e 	ble.w	8017026 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016eea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016eee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016ef0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016ef4:	eeb0 6a62 	vmov.f32	s12, s5
 8016ef8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016efc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016f00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f04:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016f08:	eeb0 6a43 	vmov.f32	s12, s6
 8016f0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016f10:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016f14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016f18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016f1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016f20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016f24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016f28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016f2c:	ee12 2a90 	vmov	r2, s5
 8016f30:	eef0 2a47 	vmov.f32	s5, s14
 8016f34:	fb92 fef3 	sdiv	lr, r2, r3
 8016f38:	ee13 2a10 	vmov	r2, s6
 8016f3c:	eeb0 3a67 	vmov.f32	s6, s15
 8016f40:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f44:	9314      	str	r3, [sp, #80]	@ 0x50
 8016f46:	9b01      	ldr	r3, [sp, #4]
 8016f48:	9a04      	ldr	r2, [sp, #16]
 8016f4a:	3b01      	subs	r3, #1
 8016f4c:	9301      	str	r3, [sp, #4]
 8016f4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f50:	bf08      	it	eq
 8016f52:	4613      	moveq	r3, r2
 8016f54:	e72b      	b.n	8016dae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016f56:	1426      	asrs	r6, r4, #16
 8016f58:	d460      	bmi.n	801701c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016f5a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016f5e:	42b2      	cmp	r2, r6
 8016f60:	dd5c      	ble.n	801701c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016f62:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016f66:	d459      	bmi.n	801701c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016f68:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016f6c:	4542      	cmp	r2, r8
 8016f6e:	dd55      	ble.n	801701c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016f70:	9a02      	ldr	r2, [sp, #8]
 8016f72:	9903      	ldr	r1, [sp, #12]
 8016f74:	fb08 6602 	mla	r6, r8, r2, r6
 8016f78:	0872      	lsrs	r2, r6, #1
 8016f7a:	07f6      	lsls	r6, r6, #31
 8016f7c:	5c8a      	ldrb	r2, [r1, r2]
 8016f7e:	bf54      	ite	pl
 8016f80:	f002 020f 	andpl.w	r2, r2, #15
 8016f84:	1112      	asrmi	r2, r2, #4
 8016f86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016f8a:	b2d2      	uxtb	r2, r2
 8016f8c:	2a00      	cmp	r2, #0
 8016f8e:	d045      	beq.n	801701c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016f90:	4926      	ldr	r1, [pc, #152]	@ (801702c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016f92:	f8d1 8000 	ldr.w	r8, [r1]
 8016f96:	9905      	ldr	r1, [sp, #20]
 8016f98:	fa5f fb88 	uxtb.w	fp, r8
 8016f9c:	434a      	muls	r2, r1
 8016f9e:	1c56      	adds	r6, r2, #1
 8016fa0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016fa4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016fa8:	1212      	asrs	r2, r2, #8
 8016faa:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016fae:	fa1f fa82 	uxth.w	sl, r2
 8016fb2:	43d2      	mvns	r2, r2
 8016fb4:	fb1b fb0a 	smulbb	fp, fp, sl
 8016fb8:	b2d2      	uxtb	r2, r2
 8016fba:	fb09 b902 	mla	r9, r9, r2, fp
 8016fbe:	fa1f f989 	uxth.w	r9, r9
 8016fc2:	f109 0b01 	add.w	fp, r9, #1
 8016fc6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016fca:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016fce:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8016fd2:	fb1b fb0a 	smulbb	fp, fp, sl
 8016fd6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016fda:	fb18 fa0a 	smulbb	sl, r8, sl
 8016fde:	f805 9006 	strb.w	r9, [r5, r6]
 8016fe2:	442e      	add	r6, r5
 8016fe4:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016fe8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016fec:	fb08 aa02 	mla	sl, r8, r2, sl
 8016ff0:	fb09 b902 	mla	r9, r9, r2, fp
 8016ff4:	fa1f fa8a 	uxth.w	sl, sl
 8016ff8:	fa1f f989 	uxth.w	r9, r9
 8016ffc:	f10a 0801 	add.w	r8, sl, #1
 8017000:	f109 0b01 	add.w	fp, r9, #1
 8017004:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8017008:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801700c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017010:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017014:	f886 a002 	strb.w	sl, [r6, #2]
 8017018:	f886 9001 	strb.w	r9, [r6, #1]
 801701c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801701e:	4474      	add	r4, lr
 8017020:	3701      	adds	r7, #1
 8017022:	4410      	add	r0, r2
 8017024:	e755      	b.n	8016ed2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8017026:	b007      	add	sp, #28
 8017028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801702c:	24025284 	.word	0x24025284

08017030 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017034:	b085      	sub	sp, #20
 8017036:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801703a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801703c:	9203      	str	r2, [sp, #12]
 801703e:	6860      	ldr	r0, [r4, #4]
 8017040:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017044:	9100      	str	r1, [sp, #0]
 8017046:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801704a:	fb00 2606 	mla	r6, r0, r6, r2
 801704e:	6822      	ldr	r2, [r4, #0]
 8017050:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017054:	4416      	add	r6, r2
 8017056:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801705a:	3201      	adds	r2, #1
 801705c:	f022 0201 	bic.w	r2, r2, #1
 8017060:	9201      	str	r2, [sp, #4]
 8017062:	f8dc 2000 	ldr.w	r2, [ip]
 8017066:	9202      	str	r2, [sp, #8]
 8017068:	9a00      	ldr	r2, [sp, #0]
 801706a:	2a00      	cmp	r2, #0
 801706c:	dc03      	bgt.n	8017076 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801706e:	9a03      	ldr	r2, [sp, #12]
 8017070:	2a00      	cmp	r2, #0
 8017072:	f340 8140 	ble.w	80172f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017076:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017078:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801707c:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8017080:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017082:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017086:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801708a:	2b00      	cmp	r3, #0
 801708c:	dd0e      	ble.n	80170ac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801708e:	142a      	asrs	r2, r5, #16
 8017090:	d405      	bmi.n	801709e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017092:	4572      	cmp	r2, lr
 8017094:	da03      	bge.n	801709e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017096:	1422      	asrs	r2, r4, #16
 8017098:	d401      	bmi.n	801709e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801709a:	42ba      	cmp	r2, r7
 801709c:	db07      	blt.n	80170ae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801709e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80170a0:	3b01      	subs	r3, #1
 80170a2:	3603      	adds	r6, #3
 80170a4:	4415      	add	r5, r2
 80170a6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80170a8:	4414      	add	r4, r2
 80170aa:	e7ee      	b.n	801708a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80170ac:	d072      	beq.n	8017194 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 80170ae:	1e5a      	subs	r2, r3, #1
 80170b0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80170b2:	fb00 5002 	mla	r0, r0, r2, r5
 80170b6:	1400      	asrs	r0, r0, #16
 80170b8:	d463      	bmi.n	8017182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80170ba:	4570      	cmp	r0, lr
 80170bc:	da61      	bge.n	8017182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80170be:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80170c0:	fb00 4202 	mla	r2, r0, r2, r4
 80170c4:	1412      	asrs	r2, r2, #16
 80170c6:	d45c      	bmi.n	8017182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80170c8:	42ba      	cmp	r2, r7
 80170ca:	da5a      	bge.n	8017182 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80170cc:	1cf0      	adds	r0, r6, #3
 80170ce:	469a      	mov	sl, r3
 80170d0:	f1ba 0f00 	cmp.w	sl, #0
 80170d4:	dd59      	ble.n	801718a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 80170d6:	142a      	asrs	r2, r5, #16
 80170d8:	9901      	ldr	r1, [sp, #4]
 80170da:	1427      	asrs	r7, r4, #16
 80170dc:	fb01 2707 	mla	r7, r1, r7, r2
 80170e0:	9902      	ldr	r1, [sp, #8]
 80170e2:	087a      	lsrs	r2, r7, #1
 80170e4:	5c8a      	ldrb	r2, [r1, r2]
 80170e6:	07f9      	lsls	r1, r7, #31
 80170e8:	bf54      	ite	pl
 80170ea:	f002 020f 	andpl.w	r2, r2, #15
 80170ee:	1112      	asrmi	r2, r2, #4
 80170f0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 80170f4:	b2d2      	uxtb	r2, r2
 80170f6:	2a00      	cmp	r2, #0
 80170f8:	d03b      	beq.n	8017172 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80170fa:	4980      	ldr	r1, [pc, #512]	@ (80172fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 80170fc:	2aff      	cmp	r2, #255	@ 0xff
 80170fe:	680f      	ldr	r7, [r1, #0]
 8017100:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017104:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017108:	b2ff      	uxtb	r7, r7
 801710a:	f000 80ed 	beq.w	80172e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801710e:	fa1f f882 	uxth.w	r8, r2
 8017112:	43d2      	mvns	r2, r2
 8017114:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017118:	fb17 f708 	smulbb	r7, r7, r8
 801711c:	b2d2      	uxtb	r2, r2
 801711e:	fb19 f908 	smulbb	r9, r9, r8
 8017122:	fb0e 7702 	mla	r7, lr, r2, r7
 8017126:	fb1b f808 	smulbb	r8, fp, r8
 801712a:	b2bf      	uxth	r7, r7
 801712c:	f107 0e01 	add.w	lr, r7, #1
 8017130:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017134:	123f      	asrs	r7, r7, #8
 8017136:	f800 7c03 	strb.w	r7, [r0, #-3]
 801713a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801713e:	fb07 9902 	mla	r9, r7, r2, r9
 8017142:	fa1f f989 	uxth.w	r9, r9
 8017146:	f109 0701 	add.w	r7, r9, #1
 801714a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801714e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017152:	fb07 8802 	mla	r8, r7, r2, r8
 8017156:	ea4f 2929 	mov.w	r9, r9, asr #8
 801715a:	fa1f f888 	uxth.w	r8, r8
 801715e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017162:	f108 0201 	add.w	r2, r8, #1
 8017166:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801716a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801716e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8017172:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017174:	3003      	adds	r0, #3
 8017176:	f10a 3aff 	add.w	sl, sl, #4294967295
 801717a:	4415      	add	r5, r2
 801717c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801717e:	4414      	add	r4, r2
 8017180:	e7a6      	b.n	80170d0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017182:	2700      	movs	r7, #0
 8017184:	1bda      	subs	r2, r3, r7
 8017186:	2a00      	cmp	r2, #0
 8017188:	dc40      	bgt.n	801720c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801718a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801718e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017192:	441e      	add	r6, r3
 8017194:	9b00      	ldr	r3, [sp, #0]
 8017196:	2b00      	cmp	r3, #0
 8017198:	f340 80ad 	ble.w	80172f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801719c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80171a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80171a6:	eeb0 6a62 	vmov.f32	s12, s5
 80171aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80171ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80171b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80171ba:	eeb0 6a43 	vmov.f32	s12, s6
 80171be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80171c2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80171c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80171ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80171ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80171d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80171d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80171da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80171de:	ee12 2a90 	vmov	r2, s5
 80171e2:	eef0 2a47 	vmov.f32	s5, s14
 80171e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80171ea:	ee13 2a10 	vmov	r2, s6
 80171ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80171f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80171f2:	eeb0 3a67 	vmov.f32	s6, s15
 80171f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80171fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80171fc:	9b00      	ldr	r3, [sp, #0]
 80171fe:	9a03      	ldr	r2, [sp, #12]
 8017200:	3b01      	subs	r3, #1
 8017202:	9300      	str	r3, [sp, #0]
 8017204:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017206:	bf08      	it	eq
 8017208:	4613      	moveq	r3, r2
 801720a:	e72d      	b.n	8017068 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801720c:	1428      	asrs	r0, r5, #16
 801720e:	d45c      	bmi.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017210:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017214:	4282      	cmp	r2, r0
 8017216:	dd58      	ble.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017218:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801721c:	d455      	bmi.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801721e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017222:	4572      	cmp	r2, lr
 8017224:	dd51      	ble.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017226:	9a01      	ldr	r2, [sp, #4]
 8017228:	9902      	ldr	r1, [sp, #8]
 801722a:	fb0e 0002 	mla	r0, lr, r2, r0
 801722e:	0842      	lsrs	r2, r0, #1
 8017230:	07c0      	lsls	r0, r0, #31
 8017232:	5c8a      	ldrb	r2, [r1, r2]
 8017234:	bf54      	ite	pl
 8017236:	f002 020f 	andpl.w	r2, r2, #15
 801723a:	1112      	asrmi	r2, r2, #4
 801723c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017240:	b2d2      	uxtb	r2, r2
 8017242:	2a00      	cmp	r2, #0
 8017244:	d041      	beq.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017246:	492d      	ldr	r1, [pc, #180]	@ (80172fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017248:	2aff      	cmp	r2, #255	@ 0xff
 801724a:	6808      	ldr	r0, [r1, #0]
 801724c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017250:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017254:	fa5f fe80 	uxtb.w	lr, r0
 8017258:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801725c:	d03b      	beq.n	80172d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801725e:	fa1f f982 	uxth.w	r9, r2
 8017262:	4438      	add	r0, r7
 8017264:	43d2      	mvns	r2, r2
 8017266:	f816 8000 	ldrb.w	r8, [r6, r0]
 801726a:	fb1e fe09 	smulbb	lr, lr, r9
 801726e:	fb1a fa09 	smulbb	sl, sl, r9
 8017272:	b2d2      	uxtb	r2, r2
 8017274:	fb1b f909 	smulbb	r9, fp, r9
 8017278:	fb08 ee02 	mla	lr, r8, r2, lr
 801727c:	fa1f fe8e 	uxth.w	lr, lr
 8017280:	f10e 0801 	add.w	r8, lr, #1
 8017284:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8017288:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801728c:	f806 e000 	strb.w	lr, [r6, r0]
 8017290:	4430      	add	r0, r6
 8017292:	f890 e001 	ldrb.w	lr, [r0, #1]
 8017296:	fb0e aa02 	mla	sl, lr, r2, sl
 801729a:	fa1f fa8a 	uxth.w	sl, sl
 801729e:	f10a 0e01 	add.w	lr, sl, #1
 80172a2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80172a6:	f890 e002 	ldrb.w	lr, [r0, #2]
 80172aa:	fb0e 9902 	mla	r9, lr, r2, r9
 80172ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80172b2:	fa1f f989 	uxth.w	r9, r9
 80172b6:	f880 a001 	strb.w	sl, [r0, #1]
 80172ba:	f109 0201 	add.w	r2, r9, #1
 80172be:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80172c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80172c6:	f880 9002 	strb.w	r9, [r0, #2]
 80172ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80172cc:	3701      	adds	r7, #1
 80172ce:	4415      	add	r5, r2
 80172d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80172d2:	4414      	add	r4, r2
 80172d4:	e756      	b.n	8017184 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80172d6:	4438      	add	r0, r7
 80172d8:	f806 e000 	strb.w	lr, [r6, r0]
 80172dc:	4430      	add	r0, r6
 80172de:	f880 a001 	strb.w	sl, [r0, #1]
 80172e2:	f880 b002 	strb.w	fp, [r0, #2]
 80172e6:	e7f0      	b.n	80172ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80172e8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80172ec:	f800 9c02 	strb.w	r9, [r0, #-2]
 80172f0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80172f4:	e73d      	b.n	8017172 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80172f6:	b005      	add	sp, #20
 80172f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80172fc:	24025284 	.word	0x24025284

08017300 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017300:	4770      	bx	lr

08017302 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8017302:	4770      	bx	lr

08017304 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8017304:	4770      	bx	lr

08017306 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8017306:	4770      	bx	lr

08017308 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8017308:	4770      	bx	lr

0801730a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801730a:	4770      	bx	lr

0801730c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801730c:	4770      	bx	lr

0801730e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801730e:	4770      	bx	lr

08017310 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017310:	4770      	bx	lr

08017312 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017312:	4770      	bx	lr

08017314 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017314:	4770      	bx	lr

08017316 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017316:	4770      	bx	lr

08017318 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017318:	4770      	bx	lr

0801731a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801731a:	4770      	bx	lr

0801731c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801731c:	4770      	bx	lr

0801731e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801731e:	4770      	bx	lr

08017320 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017320:	4770      	bx	lr

08017322 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017322:	4770      	bx	lr

08017324 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017324:	4770      	bx	lr

08017326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017326:	4770      	bx	lr

08017328 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017328:	4770      	bx	lr

0801732a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801732a:	4770      	bx	lr

0801732c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801732c:	4770      	bx	lr

0801732e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801732e:	4770      	bx	lr

08017330 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017330:	4770      	bx	lr
	...

08017334 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017336:	4606      	mov	r6, r0
 8017338:	b087      	sub	sp, #28
 801733a:	4615      	mov	r5, r2
 801733c:	461f      	mov	r7, r3
 801733e:	b353      	cbz	r3, 8017396 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017340:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017344:	2b00      	cmp	r3, #0
 8017346:	dd26      	ble.n	8017396 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017348:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801734c:	2b00      	cmp	r3, #0
 801734e:	dd22      	ble.n	8017396 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017350:	6808      	ldr	r0, [r1, #0]
 8017352:	aa04      	add	r2, sp, #16
 8017354:	6849      	ldr	r1, [r1, #4]
 8017356:	4c1b      	ldr	r4, [pc, #108]	@ (80173c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017358:	c203      	stmia	r2!, {r0, r1}
 801735a:	a804      	add	r0, sp, #16
 801735c:	f7fa fdee 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017360:	6820      	ldr	r0, [r4, #0]
 8017362:	6803      	ldr	r3, [r0, #0]
 8017364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017366:	4798      	blx	r3
 8017368:	2fff      	cmp	r7, #255	@ 0xff
 801736a:	d016      	beq.n	801739a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801736c:	f010 0f08 	tst.w	r0, #8
 8017370:	6820      	ldr	r0, [r4, #0]
 8017372:	d015      	beq.n	80173a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8017374:	2400      	movs	r4, #0
 8017376:	6801      	ldr	r1, [r0, #0]
 8017378:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801737c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017380:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8017384:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017388:	9401      	str	r4, [sp, #4]
 801738a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801738e:	9400      	str	r4, [sp, #0]
 8017390:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8017392:	4629      	mov	r1, r5
 8017394:	47a0      	blx	r4
 8017396:	b007      	add	sp, #28
 8017398:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801739a:	f010 0f02 	tst.w	r0, #2
 801739e:	e7e7      	b.n	8017370 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80173a0:	6803      	ldr	r3, [r0, #0]
 80173a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173a4:	4798      	blx	r3
 80173a6:	4b08      	ldr	r3, [pc, #32]	@ (80173c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80173a8:	4601      	mov	r1, r0
 80173aa:	4630      	mov	r0, r6
 80173ac:	881a      	ldrh	r2, [r3, #0]
 80173ae:	6833      	ldr	r3, [r6, #0]
 80173b0:	e9cd 5700 	strd	r5, r7, [sp]
 80173b4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80173b6:	ab04      	add	r3, sp, #16
 80173b8:	47a8      	blx	r5
 80173ba:	6820      	ldr	r0, [r4, #0]
 80173bc:	6803      	ldr	r3, [r0, #0]
 80173be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80173c0:	4798      	blx	r3
 80173c2:	e7e8      	b.n	8017396 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80173c4:	24025274 	.word	0x24025274
 80173c8:	2402526e 	.word	0x2402526e

080173cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80173cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80173d0:	b08b      	sub	sp, #44	@ 0x2c
 80173d2:	460d      	mov	r5, r1
 80173d4:	4616      	mov	r6, r2
 80173d6:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80173da:	f1b8 0f00 	cmp.w	r8, #0
 80173de:	d047      	beq.n	8017470 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80173e0:	6810      	ldr	r0, [r2, #0]
 80173e2:	ac06      	add	r4, sp, #24
 80173e4:	6851      	ldr	r1, [r2, #4]
 80173e6:	4f51      	ldr	r7, [pc, #324]	@ (801752c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80173e8:	c403      	stmia	r4!, {r0, r1}
 80173ea:	6818      	ldr	r0, [r3, #0]
 80173ec:	ac08      	add	r4, sp, #32
 80173ee:	6859      	ldr	r1, [r3, #4]
 80173f0:	c403      	stmia	r4!, {r0, r1}
 80173f2:	a806      	add	r0, sp, #24
 80173f4:	f7fa fda2 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80173f8:	4631      	mov	r1, r6
 80173fa:	a808      	add	r0, sp, #32
 80173fc:	f7fa fde2 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017400:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017404:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017408:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801740c:	6838      	ldr	r0, [r7, #0]
 801740e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017412:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8017416:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801741a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801741e:	440d      	add	r5, r1
 8017420:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017424:	440a      	add	r2, r1
 8017426:	f8ad 2020 	strh.w	r2, [sp, #32]
 801742a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801742e:	4413      	add	r3, r2
 8017430:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017434:	6803      	ldr	r3, [r0, #0]
 8017436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017438:	4798      	blx	r3
 801743a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801743e:	d01a      	beq.n	8017476 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017440:	f010 0f04 	tst.w	r0, #4
 8017444:	6838      	ldr	r0, [r7, #0]
 8017446:	d019      	beq.n	801747c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017448:	2100      	movs	r1, #0
 801744a:	6807      	ldr	r7, [r0, #0]
 801744c:	b2a4      	uxth	r4, r4
 801744e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017452:	b2b6      	uxth	r6, r6
 8017454:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8017458:	9401      	str	r4, [sp, #4]
 801745a:	9600      	str	r6, [sp, #0]
 801745c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017460:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8017464:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017468:	9102      	str	r1, [sp, #8]
 801746a:	4629      	mov	r1, r5
 801746c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801746e:	47a0      	blx	r4
 8017470:	b00b      	add	sp, #44	@ 0x2c
 8017472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017476:	f010 0f01 	tst.w	r0, #1
 801747a:	e7e3      	b.n	8017444 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801747c:	6803      	ldr	r3, [r0, #0]
 801747e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017480:	4798      	blx	r3
 8017482:	4a2b      	ldr	r2, [pc, #172]	@ (8017530 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8017484:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8017488:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801748c:	8813      	ldrh	r3, [r2, #0]
 801748e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8017492:	fb03 f404 	mul.w	r4, r3, r4
 8017496:	fb03 c101 	mla	r1, r3, r1, ip
 801749a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801749e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80174a2:	4408      	add	r0, r1
 80174a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80174a8:	4404      	add	r4, r0
 80174aa:	d02e      	beq.n	801750a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80174ac:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80174b0:	1b9b      	subs	r3, r3, r6
 80174b2:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 80174b6:	1b96      	subs	r6, r2, r6
 80174b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80174c0:	42a0      	cmp	r0, r4
 80174c2:	d22d      	bcs.n	8017520 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80174c4:	eb00 0e01 	add.w	lr, r0, r1
 80174c8:	4570      	cmp	r0, lr
 80174ca:	d210      	bcs.n	80174ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80174cc:	f890 9000 	ldrb.w	r9, [r0]
 80174d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80174d4:	fb19 f90c 	smulbb	r9, r9, ip
 80174d8:	fb02 9208 	mla	r2, r2, r8, r9
 80174dc:	b292      	uxth	r2, r2
 80174de:	f102 0901 	add.w	r9, r2, #1
 80174e2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80174e6:	1212      	asrs	r2, r2, #8
 80174e8:	f800 2b01 	strb.w	r2, [r0], #1
 80174ec:	e7ec      	b.n	80174c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80174ee:	4418      	add	r0, r3
 80174f0:	4435      	add	r5, r6
 80174f2:	e7e5      	b.n	80174c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80174f4:	8813      	ldrh	r3, [r2, #0]
 80174f6:	1b9b      	subs	r3, r3, r6
 80174f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80174fc:	4418      	add	r0, r3
 80174fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017502:	1b9b      	subs	r3, r3, r6
 8017504:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017508:	441d      	add	r5, r3
 801750a:	42a0      	cmp	r0, r4
 801750c:	d208      	bcs.n	8017520 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801750e:	eb00 0c01 	add.w	ip, r0, r1
 8017512:	4560      	cmp	r0, ip
 8017514:	d2ee      	bcs.n	80174f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017516:	f815 3b01 	ldrb.w	r3, [r5], #1
 801751a:	f800 3b01 	strb.w	r3, [r0], #1
 801751e:	e7f8      	b.n	8017512 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017520:	6838      	ldr	r0, [r7, #0]
 8017522:	6803      	ldr	r3, [r0, #0]
 8017524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017526:	4798      	blx	r3
 8017528:	e7a2      	b.n	8017470 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801752a:	bf00      	nop
 801752c:	24025274 	.word	0x24025274
 8017530:	2402526e 	.word	0x2402526e

08017534 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017534:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017536:	2300      	movs	r3, #0
 8017538:	b085      	sub	sp, #20
 801753a:	9300      	str	r3, [sp, #0]
 801753c:	4b41      	ldr	r3, [pc, #260]	@ (8017644 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801753e:	781b      	ldrb	r3, [r3, #0]
 8017540:	2b00      	cmp	r3, #0
 8017542:	d136      	bne.n	80175b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8017544:	4a40      	ldr	r2, [pc, #256]	@ (8017648 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017546:	f9b2 2000 	ldrsh.w	r2, [r2]
 801754a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d131      	bne.n	80175b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8017552:	4b3e      	ldr	r3, [pc, #248]	@ (801764c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017558:	ac02      	add	r4, sp, #8
 801755a:	6808      	ldr	r0, [r1, #0]
 801755c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017560:	ab02      	add	r3, sp, #8
 8017562:	6849      	ldr	r1, [r1, #4]
 8017564:	4d3a      	ldr	r5, [pc, #232]	@ (8017650 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8017566:	c303      	stmia	r3!, {r0, r1}
 8017568:	4669      	mov	r1, sp
 801756a:	4620      	mov	r0, r4
 801756c:	f7fa fd2a 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017570:	4668      	mov	r0, sp
 8017572:	f7fa fce3 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017576:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801757a:	f8bd 2000 	ldrh.w	r2, [sp]
 801757e:	462e      	mov	r6, r5
 8017580:	6828      	ldr	r0, [r5, #0]
 8017582:	4413      	add	r3, r2
 8017584:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017588:	f8ad 3008 	strh.w	r3, [sp, #8]
 801758c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017590:	4413      	add	r3, r2
 8017592:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017596:	6803      	ldr	r3, [r0, #0]
 8017598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801759a:	4798      	blx	r3
 801759c:	f010 0f01 	tst.w	r0, #1
 80175a0:	d00b      	beq.n	80175ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80175a2:	6828      	ldr	r0, [r5, #0]
 80175a4:	6803      	ldr	r3, [r0, #0]
 80175a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80175aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80175ac:	4798      	blx	r3
 80175ae:	b005      	add	sp, #20
 80175b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80175b2:	4a26      	ldr	r2, [pc, #152]	@ (801764c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80175b4:	e7c7      	b.n	8017546 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80175b6:	4b24      	ldr	r3, [pc, #144]	@ (8017648 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80175b8:	e7cc      	b.n	8017554 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80175ba:	6830      	ldr	r0, [r6, #0]
 80175bc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80175c0:	6803      	ldr	r3, [r0, #0]
 80175c2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80175c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80175c8:	4798      	blx	r3
 80175ca:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80175ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80175d2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80175d6:	fb14 3402 	smlabb	r4, r4, r2, r3
 80175da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80175de:	4404      	add	r4, r0
 80175e0:	6830      	ldr	r0, [r6, #0]
 80175e2:	6803      	ldr	r3, [r0, #0]
 80175e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80175e6:	4798      	blx	r3
 80175e8:	4917      	ldr	r1, [pc, #92]	@ (8017648 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80175ea:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80175ee:	880b      	ldrh	r3, [r1, #0]
 80175f0:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80175f4:	fb03 c202 	mla	r2, r3, r2, ip
 80175f8:	437b      	muls	r3, r7
 80175fa:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80175fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017602:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017606:	4410      	add	r0, r2
 8017608:	18c2      	adds	r2, r0, r3
 801760a:	4290      	cmp	r0, r2
 801760c:	d214      	bcs.n	8017638 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801760e:	eb00 0c07 	add.w	ip, r0, r7
 8017612:	4560      	cmp	r0, ip
 8017614:	d204      	bcs.n	8017620 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017616:	f814 3b01 	ldrb.w	r3, [r4], #1
 801761a:	f800 3b01 	strb.w	r3, [r0], #1
 801761e:	e7f8      	b.n	8017612 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017620:	880b      	ldrh	r3, [r1, #0]
 8017622:	1b5b      	subs	r3, r3, r5
 8017624:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017628:	4418      	add	r0, r3
 801762a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801762e:	1b5b      	subs	r3, r3, r5
 8017630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017634:	441c      	add	r4, r3
 8017636:	e7e8      	b.n	801760a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017638:	6830      	ldr	r0, [r6, #0]
 801763a:	6803      	ldr	r3, [r0, #0]
 801763c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801763e:	4798      	blx	r3
 8017640:	e7b5      	b.n	80175ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017642:	bf00      	nop
 8017644:	2402526c 	.word	0x2402526c
 8017648:	2402526e 	.word	0x2402526e
 801764c:	24025270 	.word	0x24025270
 8017650:	24025274 	.word	0x24025274

08017654 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8017654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017658:	b08f      	sub	sp, #60	@ 0x3c
 801765a:	461c      	mov	r4, r3
 801765c:	9203      	str	r2, [sp, #12]
 801765e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017662:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017664:	6820      	ldr	r0, [r4, #0]
 8017666:	9100      	str	r1, [sp, #0]
 8017668:	9204      	str	r2, [sp, #16]
 801766a:	aa0a      	add	r2, sp, #40	@ 0x28
 801766c:	6861      	ldr	r1, [r4, #4]
 801766e:	c203      	stmia	r2!, {r0, r1}
 8017670:	6818      	ldr	r0, [r3, #0]
 8017672:	aa0c      	add	r2, sp, #48	@ 0x30
 8017674:	6859      	ldr	r1, [r3, #4]
 8017676:	c203      	stmia	r2!, {r0, r1}
 8017678:	a80a      	add	r0, sp, #40	@ 0x28
 801767a:	f7fa fc5f 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801767e:	4621      	mov	r1, r4
 8017680:	a80c      	add	r0, sp, #48	@ 0x30
 8017682:	f7fa fc9f 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017686:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801768a:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801768e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017692:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017696:	bfdb      	ittet	le
 8017698:	b2b3      	uxthle	r3, r6
 801769a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801769e:	2301      	movgt	r3, #1
 80176a0:	fb92 f3f3 	sdivle	r3, r2, r3
 80176a4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80176a8:	441d      	add	r5, r3
 80176aa:	fb92 f1f3 	sdiv	r1, r2, r3
 80176ae:	fa1f fc81 	uxth.w	ip, r1
 80176b2:	3d01      	subs	r5, #1
 80176b4:	fb0c 2413 	mls	r4, ip, r3, r2
 80176b8:	4661      	mov	r1, ip
 80176ba:	fb14 f406 	smulbb	r4, r4, r6
 80176be:	4404      	add	r4, r0
 80176c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80176c4:	b2a4      	uxth	r4, r4
 80176c6:	b131      	cbz	r1, 80176d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80176c8:	9b03      	ldr	r3, [sp, #12]
 80176ca:	9900      	ldr	r1, [sp, #0]
 80176cc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80176d0:	ba1b      	rev	r3, r3
 80176d2:	4419      	add	r1, r3
 80176d4:	9100      	str	r1, [sp, #0]
 80176d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80176da:	b2ad      	uxth	r5, r5
 80176dc:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80176e0:	4418      	add	r0, r3
 80176e2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80176e6:	00ad      	lsls	r5, r5, #2
 80176e8:	441a      	add	r2, r3
 80176ea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80176ee:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80176f2:	9301      	str	r3, [sp, #4]
 80176f4:	4b79      	ldr	r3, [pc, #484]	@ (80178dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80176f6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80176fa:	6818      	ldr	r0, [r3, #0]
 80176fc:	6803      	ldr	r3, [r0, #0]
 80176fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017700:	4798      	blx	r3
 8017702:	4a77      	ldr	r2, [pc, #476]	@ (80178e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8017704:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017708:	2c00      	cmp	r4, #0
 801770a:	8813      	ldrh	r3, [r2, #0]
 801770c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017710:	9209      	str	r2, [sp, #36]	@ 0x24
 8017712:	fb03 c101 	mla	r1, r3, r1, ip
 8017716:	fb06 f303 	mul.w	r3, r6, r3
 801771a:	bf18      	it	ne
 801771c:	2600      	movne	r6, #0
 801771e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017722:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017726:	4408      	add	r0, r1
 8017728:	4403      	add	r3, r0
 801772a:	9306      	str	r3, [sp, #24]
 801772c:	f105 0304 	add.w	r3, r5, #4
 8017730:	9305      	str	r3, [sp, #20]
 8017732:	9b01      	ldr	r3, [sp, #4]
 8017734:	bf08      	it	eq
 8017736:	461e      	moveq	r6, r3
 8017738:	2300      	movs	r3, #0
 801773a:	b2b6      	uxth	r6, r6
 801773c:	9302      	str	r3, [sp, #8]
 801773e:	9a06      	ldr	r2, [sp, #24]
 8017740:	4290      	cmp	r0, r2
 8017742:	f080 80c2 	bcs.w	80178ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8017746:	b963      	cbnz	r3, 8017762 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017748:	9b00      	ldr	r3, [sp, #0]
 801774a:	781a      	ldrb	r2, [r3, #0]
 801774c:	0993      	lsrs	r3, r2, #6
 801774e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017752:	9202      	str	r2, [sp, #8]
 8017754:	1e5a      	subs	r2, r3, #1
 8017756:	2a02      	cmp	r2, #2
 8017758:	d815      	bhi.n	8017786 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801775a:	9a00      	ldr	r2, [sp, #0]
 801775c:	b29b      	uxth	r3, r3
 801775e:	3201      	adds	r2, #1
 8017760:	9200      	str	r2, [sp, #0]
 8017762:	b1b4      	cbz	r4, 8017792 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8017764:	429c      	cmp	r4, r3
 8017766:	bf91      	iteee	ls
 8017768:	1b1c      	subls	r4, r3, r4
 801776a:	1ae4      	subhi	r4, r4, r3
 801776c:	4635      	movhi	r5, r6
 801776e:	f04f 0e00 	movhi.w	lr, #0
 8017772:	bf9b      	ittet	ls
 8017774:	fa1f fe84 	uxthls.w	lr, r4
 8017778:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801777c:	b2a4      	uxthhi	r4, r4
 801777e:	2400      	movls	r4, #0
 8017780:	4673      	mov	r3, lr
 8017782:	462e      	mov	r6, r5
 8017784:	e7db      	b.n	801773e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8017786:	9a00      	ldr	r2, [sp, #0]
 8017788:	9b00      	ldr	r3, [sp, #0]
 801778a:	3202      	adds	r2, #2
 801778c:	785b      	ldrb	r3, [r3, #1]
 801778e:	9200      	str	r2, [sp, #0]
 8017790:	e7e7      	b.n	8017762 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017792:	2204      	movs	r2, #4
 8017794:	9905      	ldr	r1, [sp, #20]
 8017796:	429e      	cmp	r6, r3
 8017798:	4615      	mov	r5, r2
 801779a:	9a02      	ldr	r2, [sp, #8]
 801779c:	bf94      	ite	ls
 801779e:	eba3 0e06 	subls.w	lr, r3, r6
 80177a2:	46a6      	movhi	lr, r4
 80177a4:	fb15 1202 	smlabb	r2, r5, r2, r1
 80177a8:	9903      	ldr	r1, [sp, #12]
 80177aa:	bf8c      	ite	hi
 80177ac:	1af5      	subhi	r5, r6, r3
 80177ae:	fa1f fe8e 	uxthls.w	lr, lr
 80177b2:	f851 c002 	ldr.w	ip, [r1, r2]
 80177b6:	bf9a      	itte	ls
 80177b8:	4625      	movls	r5, r4
 80177ba:	4632      	movls	r2, r6
 80177bc:	b2ad      	uxthhi	r5, r5
 80177be:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80177c2:	bf88      	it	hi
 80177c4:	461a      	movhi	r2, r3
 80177c6:	b179      	cbz	r1, 80177e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80177c8:	29ff      	cmp	r1, #255	@ 0xff
 80177ca:	fa5f f98c 	uxtb.w	r9, ip
 80177ce:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80177d2:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80177d6:	d126      	bne.n	8017826 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80177d8:	9f04      	ldr	r7, [sp, #16]
 80177da:	2fff      	cmp	r7, #255	@ 0xff
 80177dc:	d123      	bne.n	8017826 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80177de:	4682      	mov	sl, r0
 80177e0:	4611      	mov	r1, r2
 80177e2:	f10a 0a03 	add.w	sl, sl, #3
 80177e6:	b9a9      	cbnz	r1, 8017814 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80177e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80177ec:	429e      	cmp	r6, r3
 80177ee:	4410      	add	r0, r2
 80177f0:	d8c6      	bhi.n	8017780 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80177f2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80177f6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80177fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80177fc:	1b64      	subs	r4, r4, r5
 80177fe:	9a01      	ldr	r2, [sp, #4]
 8017800:	881b      	ldrh	r3, [r3, #0]
 8017802:	b2a4      	uxth	r4, r4
 8017804:	1a9b      	subs	r3, r3, r2
 8017806:	2c00      	cmp	r4, #0
 8017808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801780c:	bf18      	it	ne
 801780e:	2500      	movne	r5, #0
 8017810:	4418      	add	r0, r3
 8017812:	e7b5      	b.n	8017780 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017814:	3901      	subs	r1, #1
 8017816:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801781a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801781e:	f80a cc01 	strb.w	ip, [sl, #-1]
 8017822:	b289      	uxth	r1, r1
 8017824:	e7dd      	b.n	80177e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8017826:	9f04      	ldr	r7, [sp, #16]
 8017828:	fb07 fa01 	mul.w	sl, r7, r1
 801782c:	f10a 0101 	add.w	r1, sl, #1
 8017830:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8017834:	1209      	asrs	r1, r1, #8
 8017836:	ea6f 0a01 	mvn.w	sl, r1
 801783a:	b289      	uxth	r1, r1
 801783c:	fb19 f901 	smulbb	r9, r9, r1
 8017840:	fa5f fa8a 	uxtb.w	sl, sl
 8017844:	fb18 f801 	smulbb	r8, r8, r1
 8017848:	fb1c f101 	smulbb	r1, ip, r1
 801784c:	fa1f f789 	uxth.w	r7, r9
 8017850:	4684      	mov	ip, r0
 8017852:	4691      	mov	r9, r2
 8017854:	9707      	str	r7, [sp, #28]
 8017856:	b289      	uxth	r1, r1
 8017858:	fa1f f788 	uxth.w	r7, r8
 801785c:	9708      	str	r7, [sp, #32]
 801785e:	f10c 0c03 	add.w	ip, ip, #3
 8017862:	f1b9 0f00 	cmp.w	r9, #0
 8017866:	d0bf      	beq.n	80177e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017868:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801786c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017870:	9f07      	ldr	r7, [sp, #28]
 8017872:	fa1f f989 	uxth.w	r9, r9
 8017876:	fb08 780a 	mla	r8, r8, sl, r7
 801787a:	9f08      	ldr	r7, [sp, #32]
 801787c:	fa1f f888 	uxth.w	r8, r8
 8017880:	f108 0b01 	add.w	fp, r8, #1
 8017884:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017888:	ea4f 2828 	mov.w	r8, r8, asr #8
 801788c:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8017890:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8017894:	fb08 780a 	mla	r8, r8, sl, r7
 8017898:	fa1f f888 	uxth.w	r8, r8
 801789c:	f108 0b01 	add.w	fp, r8, #1
 80178a0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80178a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80178a8:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80178ac:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80178b0:	fb08 180a 	mla	r8, r8, sl, r1
 80178b4:	fa1f f888 	uxth.w	r8, r8
 80178b8:	f108 0b01 	add.w	fp, r8, #1
 80178bc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80178c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80178c4:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80178c8:	e7c9      	b.n	801785e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80178ca:	4b04      	ldr	r3, [pc, #16]	@ (80178dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80178cc:	6818      	ldr	r0, [r3, #0]
 80178ce:	6803      	ldr	r3, [r0, #0]
 80178d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80178d2:	4798      	blx	r3
 80178d4:	b00f      	add	sp, #60	@ 0x3c
 80178d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178da:	bf00      	nop
 80178dc:	24025274 	.word	0x24025274
 80178e0:	2402526e 	.word	0x2402526e

080178e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80178e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178e8:	b089      	sub	sp, #36	@ 0x24
 80178ea:	4607      	mov	r7, r0
 80178ec:	4689      	mov	r9, r1
 80178ee:	4692      	mov	sl, r2
 80178f0:	ac08      	add	r4, sp, #32
 80178f2:	461e      	mov	r6, r3
 80178f4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80178f8:	4620      	mov	r0, r4
 80178fa:	f7fd ff77 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	4605      	mov	r5, r0
 8017902:	4620      	mov	r0, r4
 8017904:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017908:	f7fd fe7e 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801790c:	4683      	mov	fp, r0
 801790e:	4620      	mov	r0, r4
 8017910:	f7fd feae 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017914:	4653      	mov	r3, sl
 8017916:	464a      	mov	r2, r9
 8017918:	4639      	mov	r1, r7
 801791a:	9500      	str	r5, [sp, #0]
 801791c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017920:	a806      	add	r0, sp, #24
 8017922:	47c0      	blx	r8
 8017924:	a906      	add	r1, sp, #24
 8017926:	4630      	mov	r0, r6
 8017928:	f7fd fd52 	bl	80153d0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801792c:	4628      	mov	r0, r5
 801792e:	b009      	add	sp, #36	@ 0x24
 8017930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017934 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017934:	b510      	push	{r4, lr}
 8017936:	4604      	mov	r4, r0
 8017938:	216c      	movs	r1, #108	@ 0x6c
 801793a:	f00a f856 	bl	80219ea <_ZdlPvj>
 801793e:	4620      	mov	r0, r4
 8017940:	bd10      	pop	{r4, pc}

08017942 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8017942:	b510      	push	{r4, lr}
 8017944:	4604      	mov	r4, r0
 8017946:	2104      	movs	r1, #4
 8017948:	f00a f84f 	bl	80219ea <_ZdlPvj>
 801794c:	4620      	mov	r0, r4
 801794e:	bd10      	pop	{r4, pc}

08017950 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8017950:	b510      	push	{r4, lr}
 8017952:	4604      	mov	r4, r0
 8017954:	2104      	movs	r1, #4
 8017956:	f00a f848 	bl	80219ea <_ZdlPvj>
 801795a:	4620      	mov	r0, r4
 801795c:	bd10      	pop	{r4, pc}

0801795e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801795e:	b510      	push	{r4, lr}
 8017960:	4604      	mov	r4, r0
 8017962:	f640 0144 	movw	r1, #2116	@ 0x844
 8017966:	f00a f840 	bl	80219ea <_ZdlPvj>
 801796a:	4620      	mov	r0, r4
 801796c:	bd10      	pop	{r4, pc}

0801796e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801796e:	b510      	push	{r4, lr}
 8017970:	4604      	mov	r4, r0
 8017972:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8017976:	f00a f838 	bl	80219ea <_ZdlPvj>
 801797a:	4620      	mov	r0, r4
 801797c:	bd10      	pop	{r4, pc}

0801797e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801797e:	b510      	push	{r4, lr}
 8017980:	4604      	mov	r4, r0
 8017982:	2104      	movs	r1, #4
 8017984:	f00a f831 	bl	80219ea <_ZdlPvj>
 8017988:	4620      	mov	r0, r4
 801798a:	bd10      	pop	{r4, pc}

0801798c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801798c:	b510      	push	{r4, lr}
 801798e:	4604      	mov	r4, r0
 8017990:	2104      	movs	r1, #4
 8017992:	f00a f82a 	bl	80219ea <_ZdlPvj>
 8017996:	4620      	mov	r0, r4
 8017998:	bd10      	pop	{r4, pc}

0801799a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801799a:	b510      	push	{r4, lr}
 801799c:	4604      	mov	r4, r0
 801799e:	2104      	movs	r1, #4
 80179a0:	f00a f823 	bl	80219ea <_ZdlPvj>
 80179a4:	4620      	mov	r0, r4
 80179a6:	bd10      	pop	{r4, pc}

080179a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80179a8:	b510      	push	{r4, lr}
 80179aa:	4604      	mov	r4, r0
 80179ac:	2104      	movs	r1, #4
 80179ae:	f00a f81c 	bl	80219ea <_ZdlPvj>
 80179b2:	4620      	mov	r0, r4
 80179b4:	bd10      	pop	{r4, pc}

080179b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80179b6:	b510      	push	{r4, lr}
 80179b8:	4604      	mov	r4, r0
 80179ba:	2104      	movs	r1, #4
 80179bc:	f00a f815 	bl	80219ea <_ZdlPvj>
 80179c0:	4620      	mov	r0, r4
 80179c2:	bd10      	pop	{r4, pc}

080179c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80179c4:	b510      	push	{r4, lr}
 80179c6:	4604      	mov	r4, r0
 80179c8:	2104      	movs	r1, #4
 80179ca:	f00a f80e 	bl	80219ea <_ZdlPvj>
 80179ce:	4620      	mov	r0, r4
 80179d0:	bd10      	pop	{r4, pc}

080179d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80179d2:	b510      	push	{r4, lr}
 80179d4:	4604      	mov	r4, r0
 80179d6:	2104      	movs	r1, #4
 80179d8:	f00a f807 	bl	80219ea <_ZdlPvj>
 80179dc:	4620      	mov	r0, r4
 80179de:	bd10      	pop	{r4, pc}

080179e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80179e0:	b510      	push	{r4, lr}
 80179e2:	4604      	mov	r4, r0
 80179e4:	2104      	movs	r1, #4
 80179e6:	f00a f800 	bl	80219ea <_ZdlPvj>
 80179ea:	4620      	mov	r0, r4
 80179ec:	bd10      	pop	{r4, pc}

080179ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80179ee:	b510      	push	{r4, lr}
 80179f0:	4604      	mov	r4, r0
 80179f2:	2104      	movs	r1, #4
 80179f4:	f009 fff9 	bl	80219ea <_ZdlPvj>
 80179f8:	4620      	mov	r0, r4
 80179fa:	bd10      	pop	{r4, pc}

080179fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80179fc:	b510      	push	{r4, lr}
 80179fe:	4604      	mov	r4, r0
 8017a00:	2104      	movs	r1, #4
 8017a02:	f009 fff2 	bl	80219ea <_ZdlPvj>
 8017a06:	4620      	mov	r0, r4
 8017a08:	bd10      	pop	{r4, pc}

08017a0a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8017a0a:	b510      	push	{r4, lr}
 8017a0c:	4604      	mov	r4, r0
 8017a0e:	2104      	movs	r1, #4
 8017a10:	f009 ffeb 	bl	80219ea <_ZdlPvj>
 8017a14:	4620      	mov	r0, r4
 8017a16:	bd10      	pop	{r4, pc}

08017a18 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017a18:	b510      	push	{r4, lr}
 8017a1a:	4604      	mov	r4, r0
 8017a1c:	2104      	movs	r1, #4
 8017a1e:	f009 ffe4 	bl	80219ea <_ZdlPvj>
 8017a22:	4620      	mov	r0, r4
 8017a24:	bd10      	pop	{r4, pc}

08017a26 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017a26:	b510      	push	{r4, lr}
 8017a28:	4604      	mov	r4, r0
 8017a2a:	2104      	movs	r1, #4
 8017a2c:	f009 ffdd 	bl	80219ea <_ZdlPvj>
 8017a30:	4620      	mov	r0, r4
 8017a32:	bd10      	pop	{r4, pc}

08017a34 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017a34:	b510      	push	{r4, lr}
 8017a36:	4604      	mov	r4, r0
 8017a38:	2104      	movs	r1, #4
 8017a3a:	f009 ffd6 	bl	80219ea <_ZdlPvj>
 8017a3e:	4620      	mov	r0, r4
 8017a40:	bd10      	pop	{r4, pc}

08017a42 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017a42:	b510      	push	{r4, lr}
 8017a44:	4604      	mov	r4, r0
 8017a46:	2104      	movs	r1, #4
 8017a48:	f009 ffcf 	bl	80219ea <_ZdlPvj>
 8017a4c:	4620      	mov	r0, r4
 8017a4e:	bd10      	pop	{r4, pc}

08017a50 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017a50:	b510      	push	{r4, lr}
 8017a52:	4604      	mov	r4, r0
 8017a54:	2104      	movs	r1, #4
 8017a56:	f009 ffc8 	bl	80219ea <_ZdlPvj>
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	bd10      	pop	{r4, pc}

08017a5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8017a5e:	b510      	push	{r4, lr}
 8017a60:	4604      	mov	r4, r0
 8017a62:	2104      	movs	r1, #4
 8017a64:	f009 ffc1 	bl	80219ea <_ZdlPvj>
 8017a68:	4620      	mov	r0, r4
 8017a6a:	bd10      	pop	{r4, pc}

08017a6c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8017a6c:	b510      	push	{r4, lr}
 8017a6e:	4604      	mov	r4, r0
 8017a70:	2104      	movs	r1, #4
 8017a72:	f009 ffba 	bl	80219ea <_ZdlPvj>
 8017a76:	4620      	mov	r0, r4
 8017a78:	bd10      	pop	{r4, pc}

08017a7a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8017a7a:	b510      	push	{r4, lr}
 8017a7c:	4604      	mov	r4, r0
 8017a7e:	2104      	movs	r1, #4
 8017a80:	f009 ffb3 	bl	80219ea <_ZdlPvj>
 8017a84:	4620      	mov	r0, r4
 8017a86:	bd10      	pop	{r4, pc}

08017a88 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017a88:	b510      	push	{r4, lr}
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	2104      	movs	r1, #4
 8017a8e:	f009 ffac 	bl	80219ea <_ZdlPvj>
 8017a92:	4620      	mov	r0, r4
 8017a94:	bd10      	pop	{r4, pc}
	...

08017a98 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9c:	b08f      	sub	sp, #60	@ 0x3c
 8017a9e:	461c      	mov	r4, r3
 8017aa0:	460e      	mov	r6, r1
 8017aa2:	9206      	str	r2, [sp, #24]
 8017aa4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017aa8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017aaa:	9202      	str	r2, [sp, #8]
 8017aac:	2a00      	cmp	r2, #0
 8017aae:	f000 8128 	beq.w	8017d02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 8017ab2:	6820      	ldr	r0, [r4, #0]
 8017ab4:	aa0a      	add	r2, sp, #40	@ 0x28
 8017ab6:	6861      	ldr	r1, [r4, #4]
 8017ab8:	c203      	stmia	r2!, {r0, r1}
 8017aba:	6818      	ldr	r0, [r3, #0]
 8017abc:	aa0c      	add	r2, sp, #48	@ 0x30
 8017abe:	6859      	ldr	r1, [r3, #4]
 8017ac0:	c203      	stmia	r2!, {r0, r1}
 8017ac2:	a80a      	add	r0, sp, #40	@ 0x28
 8017ac4:	f7fa fa3a 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017ac8:	4621      	mov	r1, r4
 8017aca:	a80c      	add	r0, sp, #48	@ 0x30
 8017acc:	f7fa fa7a 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017ad0:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 8017ad4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8017ad8:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8017adc:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017ae0:	bfdb      	ittet	le
 8017ae2:	b2bb      	uxthle	r3, r7
 8017ae4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8017ae8:	2301      	movgt	r3, #1
 8017aea:	fb92 f3f3 	sdivle	r3, r2, r3
 8017aee:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8017af2:	441d      	add	r5, r3
 8017af4:	fb92 f1f3 	sdiv	r1, r2, r3
 8017af8:	fa1f fc81 	uxth.w	ip, r1
 8017afc:	3d01      	subs	r5, #1
 8017afe:	fb0c 2413 	mls	r4, ip, r3, r2
 8017b02:	4661      	mov	r1, ip
 8017b04:	fb14 f407 	smulbb	r4, r4, r7
 8017b08:	4404      	add	r4, r0
 8017b0a:	fb95 f5f3 	sdiv	r5, r5, r3
 8017b0e:	b2a4      	uxth	r4, r4
 8017b10:	b121      	cbz	r1, 8017b1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8017b12:	9b06      	ldr	r3, [sp, #24]
 8017b14:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017b18:	ba1b      	rev	r3, r3
 8017b1a:	441e      	add	r6, r3
 8017b1c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017b20:	b2ad      	uxth	r5, r5
 8017b22:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8017b26:	4418      	add	r0, r3
 8017b28:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017b2c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8017b30:	00ad      	lsls	r5, r5, #2
 8017b32:	441a      	add	r2, r3
 8017b34:	4b74      	ldr	r3, [pc, #464]	@ (8017d08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017b36:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017b3a:	6818      	ldr	r0, [r3, #0]
 8017b3c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017b40:	6803      	ldr	r3, [r0, #0]
 8017b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017b44:	4798      	blx	r3
 8017b46:	4a71      	ldr	r2, [pc, #452]	@ (8017d0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8017b48:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017b4c:	2c00      	cmp	r4, #0
 8017b4e:	8813      	ldrh	r3, [r2, #0]
 8017b50:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017b54:	9209      	str	r2, [sp, #36]	@ 0x24
 8017b56:	fb03 c101 	mla	r1, r3, r1, ip
 8017b5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017b5e:	fb03 f307 	mul.w	r3, r3, r7
 8017b62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017b66:	9204      	str	r2, [sp, #16]
 8017b68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b6c:	9a02      	ldr	r2, [sp, #8]
 8017b6e:	4408      	add	r0, r1
 8017b70:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8017b74:	4403      	add	r3, r0
 8017b76:	b292      	uxth	r2, r2
 8017b78:	9307      	str	r3, [sp, #28]
 8017b7a:	f105 0304 	add.w	r3, r5, #4
 8017b7e:	bf0c      	ite	eq
 8017b80:	4645      	moveq	r5, r8
 8017b82:	2500      	movne	r5, #0
 8017b84:	9308      	str	r3, [sp, #32]
 8017b86:	2300      	movs	r3, #0
 8017b88:	b2ad      	uxth	r5, r5
 8017b8a:	9205      	str	r2, [sp, #20]
 8017b8c:	9303      	str	r3, [sp, #12]
 8017b8e:	9a07      	ldr	r2, [sp, #28]
 8017b90:	4282      	cmp	r2, r0
 8017b92:	f240 80b1 	bls.w	8017cf8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8017b96:	b95b      	cbnz	r3, 8017bb0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8017b98:	7832      	ldrb	r2, [r6, #0]
 8017b9a:	0993      	lsrs	r3, r2, #6
 8017b9c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017ba0:	9203      	str	r2, [sp, #12]
 8017ba2:	1e5a      	subs	r2, r3, #1
 8017ba4:	2a02      	cmp	r2, #2
 8017ba6:	bf8d      	iteet	hi
 8017ba8:	7873      	ldrbhi	r3, [r6, #1]
 8017baa:	3601      	addls	r6, #1
 8017bac:	b29b      	uxthls	r3, r3
 8017bae:	3602      	addhi	r6, #2
 8017bb0:	b184      	cbz	r4, 8017bd4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8017bb2:	429c      	cmp	r4, r3
 8017bb4:	bf91      	iteee	ls
 8017bb6:	1b1c      	subls	r4, r3, r4
 8017bb8:	1ae4      	subhi	r4, r4, r3
 8017bba:	4629      	movhi	r1, r5
 8017bbc:	f04f 0e00 	movhi.w	lr, #0
 8017bc0:	bf9b      	ittet	ls
 8017bc2:	fa1f fe84 	uxthls.w	lr, r4
 8017bc6:	2400      	movls	r4, #0
 8017bc8:	b2a4      	uxthhi	r4, r4
 8017bca:	fa1f f188 	uxthls.w	r1, r8
 8017bce:	4673      	mov	r3, lr
 8017bd0:	460d      	mov	r5, r1
 8017bd2:	e7dc      	b.n	8017b8e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8017bd4:	2203      	movs	r2, #3
 8017bd6:	9908      	ldr	r1, [sp, #32]
 8017bd8:	42ab      	cmp	r3, r5
 8017bda:	4617      	mov	r7, r2
 8017bdc:	9a03      	ldr	r2, [sp, #12]
 8017bde:	bf24      	itt	cs
 8017be0:	eba3 0e05 	subcs.w	lr, r3, r5
 8017be4:	9501      	strcs	r5, [sp, #4]
 8017be6:	fb17 1702 	smlabb	r7, r7, r2, r1
 8017bea:	9a06      	ldr	r2, [sp, #24]
 8017bec:	bf34      	ite	cc
 8017bee:	1ae9      	subcc	r1, r5, r3
 8017bf0:	fa1f fe8e 	uxthcs.w	lr, lr
 8017bf4:	4417      	add	r7, r2
 8017bf6:	9a02      	ldr	r2, [sp, #8]
 8017bf8:	bf2f      	iteee	cs
 8017bfa:	4621      	movcs	r1, r4
 8017bfc:	b289      	uxthcc	r1, r1
 8017bfe:	9301      	strcc	r3, [sp, #4]
 8017c00:	46a6      	movcc	lr, r4
 8017c02:	2aff      	cmp	r2, #255	@ 0xff
 8017c04:	d11e      	bne.n	8017c44 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8017c06:	4681      	mov	r9, r0
 8017c08:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017c0c:	f109 0903 	add.w	r9, r9, #3
 8017c10:	f1bc 0f00 	cmp.w	ip, #0
 8017c14:	d15f      	bne.n	8017cd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8017c16:	9a01      	ldr	r2, [sp, #4]
 8017c18:	42ab      	cmp	r3, r5
 8017c1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017c1e:	4410      	add	r0, r2
 8017c20:	d3d5      	bcc.n	8017bce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017c22:	fa1f f188 	uxth.w	r1, r8
 8017c26:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017c2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017c2c:	1a64      	subs	r4, r4, r1
 8017c2e:	881b      	ldrh	r3, [r3, #0]
 8017c30:	b2a4      	uxth	r4, r4
 8017c32:	eba3 0308 	sub.w	r3, r3, r8
 8017c36:	2c00      	cmp	r4, #0
 8017c38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017c3c:	bf18      	it	ne
 8017c3e:	2100      	movne	r1, #0
 8017c40:	4418      	add	r0, r3
 8017c42:	e7c4      	b.n	8017bce <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017c44:	4684      	mov	ip, r0
 8017c46:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017c4a:	f10c 0c03 	add.w	ip, ip, #3
 8017c4e:	f1ba 0f00 	cmp.w	sl, #0
 8017c52:	d0e0      	beq.n	8017c16 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8017c54:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8017c58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017c5c:	9a05      	ldr	r2, [sp, #20]
 8017c5e:	f897 9000 	ldrb.w	r9, [r7]
 8017c62:	fa1f fa8a 	uxth.w	sl, sl
 8017c66:	fb1b fb02 	smulbb	fp, fp, r2
 8017c6a:	9a04      	ldr	r2, [sp, #16]
 8017c6c:	fb09 b902 	mla	r9, r9, r2, fp
 8017c70:	9a05      	ldr	r2, [sp, #20]
 8017c72:	fa1f f989 	uxth.w	r9, r9
 8017c76:	f109 0b01 	add.w	fp, r9, #1
 8017c7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017c7e:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8017c82:	fb1b fb02 	smulbb	fp, fp, r2
 8017c86:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017c8a:	9a04      	ldr	r2, [sp, #16]
 8017c8c:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8017c90:	f897 9001 	ldrb.w	r9, [r7, #1]
 8017c94:	fb09 b902 	mla	r9, r9, r2, fp
 8017c98:	9a05      	ldr	r2, [sp, #20]
 8017c9a:	fa1f f989 	uxth.w	r9, r9
 8017c9e:	f109 0b01 	add.w	fp, r9, #1
 8017ca2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ca6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8017caa:	fb1b fb02 	smulbb	fp, fp, r2
 8017cae:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017cb2:	9a04      	ldr	r2, [sp, #16]
 8017cb4:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8017cb8:	f897 9002 	ldrb.w	r9, [r7, #2]
 8017cbc:	fb09 b902 	mla	r9, r9, r2, fp
 8017cc0:	fa1f f989 	uxth.w	r9, r9
 8017cc4:	f109 0b01 	add.w	fp, r9, #1
 8017cc8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ccc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017cd0:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8017cd4:	e7b9      	b.n	8017c4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8017cd6:	f897 a000 	ldrb.w	sl, [r7]
 8017cda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017cde:	f809 ac03 	strb.w	sl, [r9, #-3]
 8017ce2:	fa1f fc8c 	uxth.w	ip, ip
 8017ce6:	f897 a001 	ldrb.w	sl, [r7, #1]
 8017cea:	f809 ac02 	strb.w	sl, [r9, #-2]
 8017cee:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017cf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017cf6:	e789      	b.n	8017c0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8017cf8:	4b03      	ldr	r3, [pc, #12]	@ (8017d08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017cfa:	6818      	ldr	r0, [r3, #0]
 8017cfc:	6803      	ldr	r3, [r0, #0]
 8017cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d00:	4798      	blx	r3
 8017d02:	b00f      	add	sp, #60	@ 0x3c
 8017d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d08:	24025274 	.word	0x24025274
 8017d0c:	2402526e 	.word	0x2402526e

08017d10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017d14:	b09b      	sub	sp, #108	@ 0x6c
 8017d16:	461d      	mov	r5, r3
 8017d18:	4604      	mov	r4, r0
 8017d1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017d1c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8017d20:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8017d24:	9208      	str	r2, [sp, #32]
 8017d26:	2a00      	cmp	r2, #0
 8017d28:	f000 81f3 	beq.w	8018112 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8017d2c:	6828      	ldr	r0, [r5, #0]
 8017d2e:	aa16      	add	r2, sp, #88	@ 0x58
 8017d30:	6869      	ldr	r1, [r5, #4]
 8017d32:	c203      	stmia	r2!, {r0, r1}
 8017d34:	6818      	ldr	r0, [r3, #0]
 8017d36:	aa18      	add	r2, sp, #96	@ 0x60
 8017d38:	6859      	ldr	r1, [r3, #4]
 8017d3a:	c203      	stmia	r2!, {r0, r1}
 8017d3c:	a816      	add	r0, sp, #88	@ 0x58
 8017d3e:	f7fa f8fd 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017d42:	4629      	mov	r1, r5
 8017d44:	a818      	add	r0, sp, #96	@ 0x60
 8017d46:	f7fa f93d 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017d4a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8017d4e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8017d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017d56:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8017d5a:	bfdb      	ittet	le
 8017d5c:	b29a      	uxthle	r2, r3
 8017d5e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017d62:	f04f 0a01 	movgt.w	sl, #1
 8017d66:	fb91 faf2 	sdivle	sl, r1, r2
 8017d6a:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8017d6e:	4456      	add	r6, sl
 8017d70:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8017d74:	3e01      	subs	r6, #1
 8017d76:	fb92 f0fa 	sdiv	r0, r2, sl
 8017d7a:	b280      	uxth	r0, r0
 8017d7c:	fb00 281a 	mls	r8, r0, sl, r2
 8017d80:	900e      	str	r0, [sp, #56]	@ 0x38
 8017d82:	fb18 f803 	smulbb	r8, r8, r3
 8017d86:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8017d8a:	4488      	add	r8, r1
 8017d8c:	4419      	add	r1, r3
 8017d8e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8017d92:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8017d96:	fa1f f888 	uxth.w	r8, r8
 8017d9a:	441a      	add	r2, r3
 8017d9c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8017da0:	9303      	str	r3, [sp, #12]
 8017da2:	4b9c      	ldr	r3, [pc, #624]	@ (8018014 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8017da4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8017da8:	6818      	ldr	r0, [r3, #0]
 8017daa:	6803      	ldr	r3, [r0, #0]
 8017dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017dae:	4798      	blx	r3
 8017db0:	4b99      	ldr	r3, [pc, #612]	@ (8018018 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8017db2:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8017db6:	f1b8 0f00 	cmp.w	r8, #0
 8017dba:	881a      	ldrh	r2, [r3, #0]
 8017dbc:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8017dc0:	fb02 f505 	mul.w	r5, r2, r5
 8017dc4:	fb02 7101 	mla	r1, r2, r1, r7
 8017dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017dcc:	9314      	str	r3, [sp, #80]	@ 0x50
 8017dce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017dd2:	9b08      	ldr	r3, [sp, #32]
 8017dd4:	fb96 f6fa 	sdiv	r6, r6, sl
 8017dd8:	4408      	add	r0, r1
 8017dda:	f106 0601 	add.w	r6, r6, #1
 8017dde:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8017de2:	f04f 0100 	mov.w	r1, #0
 8017de6:	eb00 0205 	add.w	r2, r0, r5
 8017dea:	b2b6      	uxth	r6, r6
 8017dec:	b29b      	uxth	r3, r3
 8017dee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017df0:	9209      	str	r2, [sp, #36]	@ 0x24
 8017df2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017df4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017df6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017dfa:	4b88      	ldr	r3, [pc, #544]	@ (801801c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8017dfc:	f106 0204 	add.w	r2, r6, #4
 8017e00:	eba3 0304 	sub.w	r3, r3, r4
 8017e04:	9205      	str	r2, [sp, #20]
 8017e06:	9a03      	ldr	r2, [sp, #12]
 8017e08:	bf18      	it	ne
 8017e0a:	2200      	movne	r2, #0
 8017e0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8017e0e:	b292      	uxth	r2, r2
 8017e10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017e12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017e14:	fa11 f383 	uxtah	r3, r1, r3
 8017e18:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017e1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017e1e:	3304      	adds	r3, #4
 8017e20:	9306      	str	r3, [sp, #24]
 8017e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e24:	4283      	cmp	r3, r0
 8017e26:	f240 816f 	bls.w	8018108 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8017e2a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8017e2e:	f04f 0900 	mov.w	r9, #0
 8017e32:	9d06      	ldr	r5, [sp, #24]
 8017e34:	fbb8 f3f3 	udiv	r3, r8, r3
 8017e38:	ebaa 0303 	sub.w	r3, sl, r3
 8017e3c:	782d      	ldrb	r5, [r5, #0]
 8017e3e:	b29b      	uxth	r3, r3
 8017e40:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017e42:	3501      	adds	r5, #1
 8017e44:	9312      	str	r3, [sp, #72]	@ 0x48
 8017e46:	9b06      	ldr	r3, [sp, #24]
 8017e48:	9504      	str	r5, [sp, #16]
 8017e4a:	7859      	ldrb	r1, [r3, #1]
 8017e4c:	789b      	ldrb	r3, [r3, #2]
 8017e4e:	021b      	lsls	r3, r3, #8
 8017e50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017e54:	9906      	ldr	r1, [sp, #24]
 8017e56:	78c9      	ldrb	r1, [r1, #3]
 8017e58:	430b      	orrs	r3, r1
 8017e5a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017e5c:	4419      	add	r1, r3
 8017e5e:	1c4d      	adds	r5, r1, #1
 8017e60:	7849      	ldrb	r1, [r1, #1]
 8017e62:	9502      	str	r5, [sp, #8]
 8017e64:	0209      	lsls	r1, r1, #8
 8017e66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017e68:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8017e6c:	5ceb      	ldrb	r3, [r5, r3]
 8017e6e:	4319      	orrs	r1, r3
 8017e70:	b28b      	uxth	r3, r1
 8017e72:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8017e76:	930a      	str	r3, [sp, #40]	@ 0x28
 8017e78:	2300      	movs	r3, #0
 8017e7a:	9307      	str	r3, [sp, #28]
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e9cd 3300 	strd	r3, r3, [sp]
 8017e82:	469c      	mov	ip, r3
 8017e84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017e88:	930c      	str	r3, [sp, #48]	@ 0x30
 8017e8a:	f1b8 0f00 	cmp.w	r8, #0
 8017e8e:	f000 8082 	beq.w	8017f96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8017e92:	45c4      	cmp	ip, r8
 8017e94:	d270      	bcs.n	8017f78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8017e96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017e98:	eba8 080c 	sub.w	r8, r8, ip
 8017e9c:	4611      	mov	r1, r2
 8017e9e:	4283      	cmp	r3, r0
 8017ea0:	fa1f f888 	uxth.w	r8, r8
 8017ea4:	d802      	bhi.n	8017eac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8017ea6:	e074      	b.n	8017f92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d15f      	bne.n	8017f6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8017eac:	9b02      	ldr	r3, [sp, #8]
 8017eae:	9a01      	ldr	r2, [sp, #4]
 8017eb0:	785b      	ldrb	r3, [r3, #1]
 8017eb2:	f1c2 0207 	rsb	r2, r2, #7
 8017eb6:	9d01      	ldr	r5, [sp, #4]
 8017eb8:	4093      	lsls	r3, r2
 8017eba:	005b      	lsls	r3, r3, #1
 8017ebc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8017ec0:	9b02      	ldr	r3, [sp, #8]
 8017ec2:	781b      	ldrb	r3, [r3, #0]
 8017ec4:	412b      	asrs	r3, r5
 8017ec6:	b2db      	uxtb	r3, r3
 8017ec8:	4313      	orrs	r3, r2
 8017eca:	462a      	mov	r2, r5
 8017ecc:	3201      	adds	r2, #1
 8017ece:	b29e      	uxth	r6, r3
 8017ed0:	b2d2      	uxtb	r2, r2
 8017ed2:	2a08      	cmp	r2, #8
 8017ed4:	9201      	str	r2, [sp, #4]
 8017ed6:	9a02      	ldr	r2, [sp, #8]
 8017ed8:	bf09      	itett	eq
 8017eda:	3202      	addeq	r2, #2
 8017edc:	3201      	addne	r2, #1
 8017ede:	9202      	streq	r2, [sp, #8]
 8017ee0:	2200      	moveq	r2, #0
 8017ee2:	bf14      	ite	ne
 8017ee4:	9202      	strne	r2, [sp, #8]
 8017ee6:	9201      	streq	r2, [sp, #4]
 8017ee8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017eea:	42b2      	cmp	r2, r6
 8017eec:	d309      	bcc.n	8017f02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8017eee:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8017ef2:	2301      	movs	r3, #1
 8017ef4:	9a04      	ldr	r2, [sp, #16]
 8017ef6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8017efa:	d30e      	bcc.n	8017f1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017efc:	9300      	str	r3, [sp, #0]
 8017efe:	2500      	movs	r5, #0
 8017f00:	e035      	b.n	8017f6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8017f02:	9b04      	ldr	r3, [sp, #16]
 8017f04:	429e      	cmp	r6, r3
 8017f06:	d318      	bcc.n	8017f3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8017f08:	9b00      	ldr	r3, [sp, #0]
 8017f0a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8017f0e:	18e3      	adds	r3, r4, r3
 8017f10:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8017f14:	9b00      	ldr	r3, [sp, #0]
 8017f16:	3301      	adds	r3, #1
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	9a04      	ldr	r2, [sp, #16]
 8017f1c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8017f20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017f24:	9f00      	ldr	r7, [sp, #0]
 8017f26:	7115      	strb	r5, [r2, #4]
 8017f28:	3701      	adds	r7, #1
 8017f2a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017f2c:	7157      	strb	r7, [r2, #5]
 8017f2e:	80d5      	strh	r5, [r2, #6]
 8017f30:	9a04      	ldr	r2, [sp, #16]
 8017f32:	3201      	adds	r2, #1
 8017f34:	b292      	uxth	r2, r2
 8017f36:	9204      	str	r2, [sp, #16]
 8017f38:	e7e0      	b.n	8017efc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8017f3a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017f3e:	4632      	mov	r2, r6
 8017f40:	795b      	ldrb	r3, [r3, #5]
 8017f42:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8017f46:	4425      	add	r5, r4
 8017f48:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8017f4a:	eb07 0c05 	add.w	ip, r7, r5
 8017f4e:	f1bc 0f00 	cmp.w	ip, #0
 8017f52:	dd07      	ble.n	8017f64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8017f54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017f58:	f892 c004 	ldrb.w	ip, [r2, #4]
 8017f5c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8017f60:	88d2      	ldrh	r2, [r2, #6]
 8017f62:	e7f1      	b.n	8017f48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8017f64:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8017f68:	b29b      	uxth	r3, r3
 8017f6a:	e7c3      	b.n	8017ef4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8017f6c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017f6e:	460a      	mov	r2, r1
 8017f70:	960a      	str	r6, [sp, #40]	@ 0x28
 8017f72:	46a9      	mov	r9, r5
 8017f74:	469c      	mov	ip, r3
 8017f76:	e788      	b.n	8017e8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8017f78:	ebac 0308 	sub.w	r3, ip, r8
 8017f7c:	eb09 0508 	add.w	r5, r9, r8
 8017f80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017f84:	b29b      	uxth	r3, r3
 8017f86:	b2ad      	uxth	r5, r5
 8017f88:	f04f 0800 	mov.w	r8, #0
 8017f8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f8e:	4282      	cmp	r2, r0
 8017f90:	d88a      	bhi.n	8017ea8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8017f92:	460a      	mov	r2, r1
 8017f94:	e745      	b.n	8017e22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8017f96:	4594      	cmp	ip, r2
 8017f98:	9d08      	ldr	r5, [sp, #32]
 8017f9a:	4686      	mov	lr, r0
 8017f9c:	bf27      	ittee	cs
 8017f9e:	ebac 0302 	subcs.w	r3, ip, r2
 8017fa2:	4616      	movcs	r6, r2
 8017fa4:	eba2 010c 	subcc.w	r1, r2, ip
 8017fa8:	4666      	movcc	r6, ip
 8017faa:	bf27      	ittee	cs
 8017fac:	b29b      	uxthcs	r3, r3
 8017fae:	4641      	movcs	r1, r8
 8017fb0:	b289      	uxthcc	r1, r1
 8017fb2:	4643      	movcc	r3, r8
 8017fb4:	2dff      	cmp	r5, #255	@ 0xff
 8017fb6:	eb09 0506 	add.w	r5, r9, r6
 8017fba:	b2ad      	uxth	r5, r5
 8017fbc:	d130      	bne.n	8018020 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8017fbe:	45a9      	cmp	r9, r5
 8017fc0:	f10e 0e03 	add.w	lr, lr, #3
 8017fc4:	d17a      	bne.n	80180bc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8017fc6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017fca:	4594      	cmp	ip, r2
 8017fcc:	4430      	add	r0, r6
 8017fce:	d3db      	bcc.n	8017f88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8017fd0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017fd2:	9903      	ldr	r1, [sp, #12]
 8017fd4:	8812      	ldrh	r2, [r2, #0]
 8017fd6:	1a52      	subs	r2, r2, r1
 8017fd8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017fda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017fde:	4410      	add	r0, r2
 8017fe0:	9a07      	ldr	r2, [sp, #28]
 8017fe2:	3201      	adds	r2, #1
 8017fe4:	428a      	cmp	r2, r1
 8017fe6:	9207      	str	r2, [sp, #28]
 8017fe8:	f040 8081 	bne.w	80180ee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8017fec:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8017ff0:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8017ff4:	9b03      	ldr	r3, [sp, #12]
 8017ff6:	eba8 080c 	sub.w	r8, r8, ip
 8017ffa:	fa1f f888 	uxth.w	r8, r8
 8017ffe:	f1b8 0f00 	cmp.w	r8, #0
 8018002:	bf08      	it	eq
 8018004:	461a      	moveq	r2, r3
 8018006:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018008:	bf18      	it	ne
 801800a:	2200      	movne	r2, #0
 801800c:	3301      	adds	r3, #1
 801800e:	b292      	uxth	r2, r2
 8018010:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018012:	e6fd      	b.n	8017e10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8018014:	24025274 	.word	0x24025274
 8018018:	2402526e 	.word	0x2402526e
 801801c:	fffff7fb 	.word	0xfffff7fb
 8018020:	45a9      	cmp	r9, r5
 8018022:	f10e 0e03 	add.w	lr, lr, #3
 8018026:	d0ce      	beq.n	8017fc6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8018028:	f109 0701 	add.w	r7, r9, #1
 801802c:	44a1      	add	r9, r4
 801802e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8018032:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018036:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018038:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801803c:	9f05      	ldr	r7, [sp, #20]
 801803e:	eb07 0908 	add.w	r9, r7, r8
 8018042:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018046:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018048:	fb1b fb07 	smulbb	fp, fp, r7
 801804c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801804e:	fb08 b807 	mla	r8, r8, r7, fp
 8018052:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018054:	fa1f f888 	uxth.w	r8, r8
 8018058:	f108 0b01 	add.w	fp, r8, #1
 801805c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018060:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8018064:	fb1b fb07 	smulbb	fp, fp, r7
 8018068:	ea4f 2828 	mov.w	r8, r8, asr #8
 801806c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801806e:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018072:	f899 8001 	ldrb.w	r8, [r9, #1]
 8018076:	fb08 b807 	mla	r8, r8, r7, fp
 801807a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801807c:	fa1f f888 	uxth.w	r8, r8
 8018080:	f108 0b01 	add.w	fp, r8, #1
 8018084:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018088:	ea4f 2828 	mov.w	r8, r8, asr #8
 801808c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018090:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018094:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8018098:	fb19 f907 	smulbb	r9, r9, r7
 801809c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801809e:	fb08 9807 	mla	r8, r8, r7, r9
 80180a2:	fa1f f888 	uxth.w	r8, r8
 80180a6:	f108 0901 	add.w	r9, r8, #1
 80180aa:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 80180ae:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 80180b2:	ea4f 2828 	mov.w	r8, r8, asr #8
 80180b6:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80180ba:	e7b1      	b.n	8018020 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 80180bc:	f109 0b01 	add.w	fp, r9, #1
 80180c0:	44a1      	add	r9, r4
 80180c2:	9f05      	ldr	r7, [sp, #20]
 80180c4:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 80180c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80180cc:	eb07 0908 	add.w	r9, r7, r8
 80180d0:	f817 8008 	ldrb.w	r8, [r7, r8]
 80180d4:	f80e 8c03 	strb.w	r8, [lr, #-3]
 80180d8:	f899 8001 	ldrb.w	r8, [r9, #1]
 80180dc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 80180e0:	f899 8002 	ldrb.w	r8, [r9, #2]
 80180e4:	fa1f f98b 	uxth.w	r9, fp
 80180e8:	f80e 8c01 	strb.w	r8, [lr, #-1]
 80180ec:	e767      	b.n	8017fbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 80180ee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 80180f2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 80180f6:	eba8 0801 	sub.w	r8, r8, r1
 80180fa:	fa1f f888 	uxth.w	r8, r8
 80180fe:	f1b8 0f00 	cmp.w	r8, #0
 8018102:	bf18      	it	ne
 8018104:	2100      	movne	r1, #0
 8018106:	e741      	b.n	8017f8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018108:	4b03      	ldr	r3, [pc, #12]	@ (8018118 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801810a:	6818      	ldr	r0, [r3, #0]
 801810c:	6803      	ldr	r3, [r0, #0]
 801810e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018110:	4798      	blx	r3
 8018112:	b01b      	add	sp, #108	@ 0x6c
 8018114:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018118:	24025274 	.word	0x24025274

0801811c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801811c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018120:	b09d      	sub	sp, #116	@ 0x74
 8018122:	461d      	mov	r5, r3
 8018124:	4604      	mov	r4, r0
 8018126:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018128:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801812c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018130:	920c      	str	r2, [sp, #48]	@ 0x30
 8018132:	2a00      	cmp	r2, #0
 8018134:	f000 81de 	beq.w	80184f4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8018138:	6828      	ldr	r0, [r5, #0]
 801813a:	aa18      	add	r2, sp, #96	@ 0x60
 801813c:	6869      	ldr	r1, [r5, #4]
 801813e:	c203      	stmia	r2!, {r0, r1}
 8018140:	6818      	ldr	r0, [r3, #0]
 8018142:	aa1a      	add	r2, sp, #104	@ 0x68
 8018144:	6859      	ldr	r1, [r3, #4]
 8018146:	c203      	stmia	r2!, {r0, r1}
 8018148:	a818      	add	r0, sp, #96	@ 0x60
 801814a:	f7f9 fef7 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801814e:	4629      	mov	r1, r5
 8018150:	a81a      	add	r0, sp, #104	@ 0x68
 8018152:	f7f9 ff37 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018156:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801815a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801815e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018162:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8018166:	bfdb      	ittet	le
 8018168:	b29a      	uxthle	r2, r3
 801816a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801816e:	2201      	movgt	r2, #1
 8018170:	fb91 f2f2 	sdivle	r2, r1, r2
 8018174:	9201      	str	r2, [sp, #4]
 8018176:	9801      	ldr	r0, [sp, #4]
 8018178:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801817c:	9901      	ldr	r1, [sp, #4]
 801817e:	fb92 f0f0 	sdiv	r0, r2, r0
 8018182:	b280      	uxth	r0, r0
 8018184:	440f      	add	r7, r1
 8018186:	900d      	str	r0, [sp, #52]	@ 0x34
 8018188:	3f01      	subs	r7, #1
 801818a:	9801      	ldr	r0, [sp, #4]
 801818c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801818e:	fb05 2510 	mls	r5, r5, r0, r2
 8018192:	fb97 f7f1 	sdiv	r7, r7, r1
 8018196:	fb15 f503 	smulbb	r5, r5, r3
 801819a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801819e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80181a2:	3701      	adds	r7, #1
 80181a4:	440d      	add	r5, r1
 80181a6:	4419      	add	r1, r3
 80181a8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80181ac:	b2bf      	uxth	r7, r7
 80181ae:	441a      	add	r2, r3
 80181b0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80181b4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80181b8:	00bf      	lsls	r7, r7, #2
 80181ba:	9304      	str	r3, [sp, #16]
 80181bc:	b2ad      	uxth	r5, r5
 80181be:	4bb0      	ldr	r3, [pc, #704]	@ (8018480 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80181c0:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 80181c4:	6818      	ldr	r0, [r3, #0]
 80181c6:	6803      	ldr	r3, [r0, #0]
 80181c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181ca:	4798      	blx	r3
 80181cc:	4bad      	ldr	r3, [pc, #692]	@ (8018484 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80181ce:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 80181d2:	2d00      	cmp	r5, #0
 80181d4:	881a      	ldrh	r2, [r3, #0]
 80181d6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 80181da:	fb02 f606 	mul.w	r6, r2, r6
 80181de:	fb02 c101 	mla	r1, r2, r1, ip
 80181e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80181e6:	9316      	str	r3, [sp, #88]	@ 0x58
 80181e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80181ec:	4ba6      	ldr	r3, [pc, #664]	@ (8018488 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80181ee:	eb00 0801 	add.w	r8, r0, r1
 80181f2:	bf18      	it	ne
 80181f4:	2100      	movne	r1, #0
 80181f6:	eba3 0304 	sub.w	r3, r3, r4
 80181fa:	eb08 0206 	add.w	r2, r8, r6
 80181fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018200:	9208      	str	r2, [sp, #32]
 8018202:	f107 0204 	add.w	r2, r7, #4
 8018206:	9211      	str	r2, [sp, #68]	@ 0x44
 8018208:	9a04      	ldr	r2, [sp, #16]
 801820a:	bf08      	it	eq
 801820c:	4611      	moveq	r1, r2
 801820e:	2200      	movs	r2, #0
 8018210:	b289      	uxth	r1, r1
 8018212:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018214:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018216:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018218:	fa12 f383 	uxtah	r3, r2, r3
 801821c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801821e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018222:	3304      	adds	r3, #4
 8018224:	9306      	str	r3, [sp, #24]
 8018226:	9b08      	ldr	r3, [sp, #32]
 8018228:	4543      	cmp	r3, r8
 801822a:	f240 815e 	bls.w	80184ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801822e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8018232:	f04f 0b01 	mov.w	fp, #1
 8018236:	9a01      	ldr	r2, [sp, #4]
 8018238:	9806      	ldr	r0, [sp, #24]
 801823a:	465e      	mov	r6, fp
 801823c:	f8cd b008 	str.w	fp, [sp, #8]
 8018240:	7800      	ldrb	r0, [r0, #0]
 8018242:	fbb5 f3f3 	udiv	r3, r5, r3
 8018246:	1ad3      	subs	r3, r2, r3
 8018248:	900e      	str	r0, [sp, #56]	@ 0x38
 801824a:	3001      	adds	r0, #1
 801824c:	b29b      	uxth	r3, r3
 801824e:	9005      	str	r0, [sp, #20]
 8018250:	9312      	str	r3, [sp, #72]	@ 0x48
 8018252:	9b06      	ldr	r3, [sp, #24]
 8018254:	785a      	ldrb	r2, [r3, #1]
 8018256:	789b      	ldrb	r3, [r3, #2]
 8018258:	021b      	lsls	r3, r3, #8
 801825a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801825e:	9a06      	ldr	r2, [sp, #24]
 8018260:	78d2      	ldrb	r2, [r2, #3]
 8018262:	4313      	orrs	r3, r2
 8018264:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018266:	441a      	add	r2, r3
 8018268:	1c50      	adds	r0, r2, #1
 801826a:	7852      	ldrb	r2, [r2, #1]
 801826c:	9003      	str	r0, [sp, #12]
 801826e:	0212      	lsls	r2, r2, #8
 8018270:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8018272:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8018276:	5cc3      	ldrb	r3, [r0, r3]
 8018278:	431a      	orrs	r2, r3
 801827a:	b293      	uxth	r3, r2
 801827c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8018280:	930a      	str	r3, [sp, #40]	@ 0x28
 8018282:	2300      	movs	r3, #0
 8018284:	461a      	mov	r2, r3
 8018286:	9307      	str	r3, [sp, #28]
 8018288:	2d00      	cmp	r5, #0
 801828a:	d07c      	beq.n	8018386 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801828c:	42ae      	cmp	r6, r5
 801828e:	d26c      	bcs.n	801836a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8018290:	9b08      	ldr	r3, [sp, #32]
 8018292:	1bad      	subs	r5, r5, r6
 8018294:	4608      	mov	r0, r1
 8018296:	4543      	cmp	r3, r8
 8018298:	b2ad      	uxth	r5, r5
 801829a:	d802      	bhi.n	80182a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801829c:	e071      	b.n	8018382 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d15d      	bne.n	801835e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80182a2:	9b03      	ldr	r3, [sp, #12]
 80182a4:	9a02      	ldr	r2, [sp, #8]
 80182a6:	785b      	ldrb	r3, [r3, #1]
 80182a8:	f1c2 0207 	rsb	r2, r2, #7
 80182ac:	9902      	ldr	r1, [sp, #8]
 80182ae:	4093      	lsls	r3, r2
 80182b0:	005b      	lsls	r3, r3, #1
 80182b2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80182b6:	9b03      	ldr	r3, [sp, #12]
 80182b8:	781b      	ldrb	r3, [r3, #0]
 80182ba:	410b      	asrs	r3, r1
 80182bc:	3101      	adds	r1, #1
 80182be:	b2c9      	uxtb	r1, r1
 80182c0:	b2db      	uxtb	r3, r3
 80182c2:	2908      	cmp	r1, #8
 80182c4:	9102      	str	r1, [sp, #8]
 80182c6:	9903      	ldr	r1, [sp, #12]
 80182c8:	ea43 0302 	orr.w	r3, r3, r2
 80182cc:	bf0c      	ite	eq
 80182ce:	3102      	addeq	r1, #2
 80182d0:	3101      	addne	r1, #1
 80182d2:	b29a      	uxth	r2, r3
 80182d4:	bf05      	ittet	eq
 80182d6:	9103      	streq	r1, [sp, #12]
 80182d8:	2100      	moveq	r1, #0
 80182da:	9103      	strne	r1, [sp, #12]
 80182dc:	9102      	streq	r1, [sp, #8]
 80182de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80182e0:	4291      	cmp	r1, r2
 80182e2:	d30a      	bcc.n	80182fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80182e4:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80182e8:	2301      	movs	r3, #1
 80182ea:	9905      	ldr	r1, [sp, #20]
 80182ec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80182f0:	d30f      	bcc.n	8018312 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80182f2:	469b      	mov	fp, r3
 80182f4:	f04f 0c00 	mov.w	ip, #0
 80182f8:	e032      	b.n	8018360 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80182fa:	9b05      	ldr	r3, [sp, #20]
 80182fc:	429a      	cmp	r2, r3
 80182fe:	d318      	bcc.n	8018332 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8018300:	eb04 030b 	add.w	r3, r4, fp
 8018304:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8018308:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801830c:	f10b 0301 	add.w	r3, fp, #1
 8018310:	b29b      	uxth	r3, r3
 8018312:	9905      	ldr	r1, [sp, #20]
 8018314:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018318:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801831c:	710e      	strb	r6, [r1, #4]
 801831e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018320:	80ce      	strh	r6, [r1, #6]
 8018322:	f10b 0601 	add.w	r6, fp, #1
 8018326:	714e      	strb	r6, [r1, #5]
 8018328:	9905      	ldr	r1, [sp, #20]
 801832a:	3101      	adds	r1, #1
 801832c:	b289      	uxth	r1, r1
 801832e:	9105      	str	r1, [sp, #20]
 8018330:	e7df      	b.n	80182f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8018332:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018336:	4611      	mov	r1, r2
 8018338:	795b      	ldrb	r3, [r3, #5]
 801833a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801833e:	4426      	add	r6, r4
 8018340:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8018342:	4437      	add	r7, r6
 8018344:	2f00      	cmp	r7, #0
 8018346:	dd06      	ble.n	8018356 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8018348:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801834c:	790f      	ldrb	r7, [r1, #4]
 801834e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018352:	88c9      	ldrh	r1, [r1, #6]
 8018354:	e7f4      	b.n	8018340 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8018356:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801835a:	b29b      	uxth	r3, r3
 801835c:	e7c5      	b.n	80182ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801835e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018360:	920a      	str	r2, [sp, #40]	@ 0x28
 8018362:	4601      	mov	r1, r0
 8018364:	4662      	mov	r2, ip
 8018366:	461e      	mov	r6, r3
 8018368:	e78e      	b.n	8018288 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801836a:	1b73      	subs	r3, r6, r5
 801836c:	eb02 0c05 	add.w	ip, r2, r5
 8018370:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8018374:	b29b      	uxth	r3, r3
 8018376:	fa1f fc8c 	uxth.w	ip, ip
 801837a:	2500      	movs	r5, #0
 801837c:	9a08      	ldr	r2, [sp, #32]
 801837e:	4542      	cmp	r2, r8
 8018380:	d88d      	bhi.n	801829e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8018382:	4601      	mov	r1, r0
 8018384:	e74f      	b.n	8018226 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8018386:	428e      	cmp	r6, r1
 8018388:	bf2b      	itete	cs
 801838a:	468e      	movcs	lr, r1
 801838c:	46b6      	movcc	lr, r6
 801838e:	1a73      	subcs	r3, r6, r1
 8018390:	1b88      	subcc	r0, r1, r6
 8018392:	eb02 0c0e 	add.w	ip, r2, lr
 8018396:	bf2b      	itete	cs
 8018398:	4628      	movcs	r0, r5
 801839a:	462b      	movcc	r3, r5
 801839c:	b29b      	uxthcs	r3, r3
 801839e:	b280      	uxthcc	r0, r0
 80183a0:	f108 0503 	add.w	r5, r8, #3
 80183a4:	fa1f fc8c 	uxth.w	ip, ip
 80183a8:	4562      	cmp	r2, ip
 80183aa:	d06f      	beq.n	801848c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80183ac:	1c57      	adds	r7, r2, #1
 80183ae:	4422      	add	r2, r4
 80183b0:	b2bf      	uxth	r7, r7
 80183b2:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80183b6:	9713      	str	r7, [sp, #76]	@ 0x4c
 80183b8:	2704      	movs	r7, #4
 80183ba:	46b9      	mov	r9, r7
 80183bc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80183be:	fb19 7202 	smlabb	r2, r9, r2, r7
 80183c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80183c4:	58bf      	ldr	r7, [r7, r2]
 80183c6:	0e3a      	lsrs	r2, r7, #24
 80183c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80183ca:	d016      	beq.n	80183fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80183cc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80183d0:	fa5f fa87 	uxtb.w	sl, r7
 80183d4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80183d8:	fa5f f289 	uxtb.w	r2, r9
 80183dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80183de:	b2fa      	uxtb	r2, r7
 80183e0:	9215      	str	r2, [sp, #84]	@ 0x54
 80183e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80183e4:	2aff      	cmp	r2, #255	@ 0xff
 80183e6:	d10b      	bne.n	8018400 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80183e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80183ea:	2aff      	cmp	r2, #255	@ 0xff
 80183ec:	d108      	bne.n	8018400 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80183ee:	f805 ac03 	strb.w	sl, [r5, #-3]
 80183f2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80183f6:	f805 7c01 	strb.w	r7, [r5, #-1]
 80183fa:	3503      	adds	r5, #3
 80183fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80183fe:	e7d3      	b.n	80183a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8018400:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018402:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018404:	437a      	muls	r2, r7
 8018406:	1c57      	adds	r7, r2, #1
 8018408:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801840c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8018410:	1212      	asrs	r2, r2, #8
 8018412:	fa1f f982 	uxth.w	r9, r2
 8018416:	43d2      	mvns	r2, r2
 8018418:	fb1a fa09 	smulbb	sl, sl, r9
 801841c:	b2d2      	uxtb	r2, r2
 801841e:	fb07 a702 	mla	r7, r7, r2, sl
 8018422:	9209      	str	r2, [sp, #36]	@ 0x24
 8018424:	b2bf      	uxth	r7, r7
 8018426:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018428:	f107 0a01 	add.w	sl, r7, #1
 801842c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018430:	fb12 fa09 	smulbb	sl, r2, r9
 8018434:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018436:	123f      	asrs	r7, r7, #8
 8018438:	f805 7c03 	strb.w	r7, [r5, #-3]
 801843c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8018440:	fb07 aa02 	mla	sl, r7, r2, sl
 8018444:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018446:	fb12 f909 	smulbb	r9, r2, r9
 801844a:	fa1f fa8a 	uxth.w	sl, sl
 801844e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018450:	f10a 0701 	add.w	r7, sl, #1
 8018454:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018458:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801845c:	fb07 9902 	mla	r9, r7, r2, r9
 8018460:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018464:	fa1f f989 	uxth.w	r9, r9
 8018468:	f805 ac02 	strb.w	sl, [r5, #-2]
 801846c:	f109 0201 	add.w	r2, r9, #1
 8018470:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018474:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018478:	f805 9c01 	strb.w	r9, [r5, #-1]
 801847c:	e7bd      	b.n	80183fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801847e:	bf00      	nop
 8018480:	24025274 	.word	0x24025274
 8018484:	2402526e 	.word	0x2402526e
 8018488:	fffff7fb 	.word	0xfffff7fb
 801848c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018490:	428e      	cmp	r6, r1
 8018492:	44f0      	add	r8, lr
 8018494:	f4ff af71 	bcc.w	801837a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018498:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801849a:	9904      	ldr	r1, [sp, #16]
 801849c:	8812      	ldrh	r2, [r2, #0]
 801849e:	1a52      	subs	r2, r2, r1
 80184a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80184a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80184a6:	4490      	add	r8, r2
 80184a8:	9a07      	ldr	r2, [sp, #28]
 80184aa:	3201      	adds	r2, #1
 80184ac:	428a      	cmp	r2, r1
 80184ae:	9207      	str	r2, [sp, #28]
 80184b0:	d111      	bne.n	80184d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 80184b2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 80184b6:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 80184ba:	9b04      	ldr	r3, [sp, #16]
 80184bc:	eba5 050c 	sub.w	r5, r5, ip
 80184c0:	b2ad      	uxth	r5, r5
 80184c2:	2d00      	cmp	r5, #0
 80184c4:	bf08      	it	eq
 80184c6:	4619      	moveq	r1, r3
 80184c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80184ca:	bf18      	it	ne
 80184cc:	2100      	movne	r1, #0
 80184ce:	3301      	adds	r3, #1
 80184d0:	b289      	uxth	r1, r1
 80184d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80184d4:	e69e      	b.n	8018214 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80184d6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80184da:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80184de:	1a2d      	subs	r5, r5, r0
 80184e0:	b2ad      	uxth	r5, r5
 80184e2:	2d00      	cmp	r5, #0
 80184e4:	bf18      	it	ne
 80184e6:	2000      	movne	r0, #0
 80184e8:	e748      	b.n	801837c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80184ea:	4b04      	ldr	r3, [pc, #16]	@ (80184fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80184ec:	6818      	ldr	r0, [r3, #0]
 80184ee:	6803      	ldr	r3, [r0, #0]
 80184f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80184f2:	4798      	blx	r3
 80184f4:	b01d      	add	sp, #116	@ 0x74
 80184f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184fa:	bf00      	nop
 80184fc:	24025274 	.word	0x24025274

08018500 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8018500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018504:	b08f      	sub	sp, #60	@ 0x3c
 8018506:	4616      	mov	r6, r2
 8018508:	4681      	mov	r9, r0
 801850a:	460d      	mov	r5, r1
 801850c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8018510:	9205      	str	r2, [sp, #20]
 8018512:	2a00      	cmp	r2, #0
 8018514:	f000 82a8 	beq.w	8018a68 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8018518:	6830      	ldr	r0, [r6, #0]
 801851a:	ac0a      	add	r4, sp, #40	@ 0x28
 801851c:	6871      	ldr	r1, [r6, #4]
 801851e:	c403      	stmia	r4!, {r0, r1}
 8018520:	6818      	ldr	r0, [r3, #0]
 8018522:	ac0c      	add	r4, sp, #48	@ 0x30
 8018524:	6859      	ldr	r1, [r3, #4]
 8018526:	c403      	stmia	r4!, {r0, r1}
 8018528:	a80a      	add	r0, sp, #40	@ 0x28
 801852a:	f7f9 fd07 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801852e:	4631      	mov	r1, r6
 8018530:	a80c      	add	r0, sp, #48	@ 0x30
 8018532:	f7f9 fd47 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018536:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801853a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801853e:	bfdb      	ittet	le
 8018540:	b293      	uxthle	r3, r2
 8018542:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018546:	2301      	movgt	r3, #1
 8018548:	fb91 f3f3 	sdivle	r3, r1, r3
 801854c:	9300      	str	r3, [sp, #0]
 801854e:	f105 0308 	add.w	r3, r5, #8
 8018552:	9900      	ldr	r1, [sp, #0]
 8018554:	9306      	str	r3, [sp, #24]
 8018556:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801855a:	440b      	add	r3, r1
 801855c:	3b01      	subs	r3, #1
 801855e:	fb93 f3f1 	sdiv	r3, r3, r1
 8018562:	3b01      	subs	r3, #1
 8018564:	9906      	ldr	r1, [sp, #24]
 8018566:	b29b      	uxth	r3, r3
 8018568:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801856c:	9900      	ldr	r1, [sp, #0]
 801856e:	9307      	str	r3, [sp, #28]
 8018570:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018574:	fb93 f0f1 	sdiv	r0, r3, r1
 8018578:	b284      	uxth	r4, r0
 801857a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801857e:	b280      	uxth	r0, r0
 8018580:	9402      	str	r4, [sp, #8]
 8018582:	9d02      	ldr	r5, [sp, #8]
 8018584:	9c00      	ldr	r4, [sp, #0]
 8018586:	fb05 3514 	mls	r5, r5, r4, r3
 801858a:	fb15 f502 	smulbb	r5, r5, r2
 801858e:	440d      	add	r5, r1
 8018590:	b2ad      	uxth	r5, r5
 8018592:	2800      	cmp	r0, #0
 8018594:	d071      	beq.n	801867a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8018596:	1e42      	subs	r2, r0, #1
 8018598:	9806      	ldr	r0, [sp, #24]
 801859a:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801859e:	9a07      	ldr	r2, [sp, #28]
 80185a0:	fa98 f888 	rev.w	r8, r8
 80185a4:	4490      	add	r8, r2
 80185a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80185aa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80185ae:	4411      	add	r1, r2
 80185b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80185b4:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8018900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80185b8:	4413      	add	r3, r2
 80185ba:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80185be:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80185c2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80185c6:	9301      	str	r3, [sp, #4]
 80185c8:	4bcb      	ldr	r3, [pc, #812]	@ (80188f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 80185ca:	6818      	ldr	r0, [r3, #0]
 80185cc:	6803      	ldr	r3, [r0, #0]
 80185ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80185d0:	4798      	blx	r3
 80185d2:	4bca      	ldr	r3, [pc, #808]	@ (80188fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 80185d4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80185d8:	881b      	ldrh	r3, [r3, #0]
 80185da:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 80185de:	fb03 2707 	mla	r7, r3, r7, r2
 80185e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80185e6:	4363      	muls	r3, r4
 80185e8:	2400      	movs	r4, #0
 80185ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80185ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80185f2:	4621      	mov	r1, r4
 80185f4:	4407      	add	r7, r0
 80185f6:	18fb      	adds	r3, r7, r3
 80185f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80185fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80185fe:	fb95 f3f3 	sdiv	r3, r5, r3
 8018602:	9304      	str	r3, [sp, #16]
 8018604:	f109 0304 	add.w	r3, r9, #4
 8018608:	4618      	mov	r0, r3
 801860a:	9308      	str	r3, [sp, #32]
 801860c:	f00a f800 	bl	8022610 <memset>
 8018610:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018612:	42bb      	cmp	r3, r7
 8018614:	f240 8223 	bls.w	8018a5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8018618:	2003      	movs	r0, #3
 801861a:	f04f 0c07 	mov.w	ip, #7
 801861e:	f04f 0e0b 	mov.w	lr, #11
 8018622:	2d00      	cmp	r5, #0
 8018624:	f000 813c 	beq.w	80188a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8018628:	f898 3000 	ldrb.w	r3, [r8]
 801862c:	b2db      	uxtb	r3, r3
 801862e:	2bfe      	cmp	r3, #254	@ 0xfe
 8018630:	d126      	bne.n	8018680 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8018632:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018636:	f108 0604 	add.w	r6, r8, #4
 801863a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801863e:	3d01      	subs	r5, #1
 8018640:	b2c9      	uxtb	r1, r1
 8018642:	f898 8003 	ldrb.w	r8, [r8, #3]
 8018646:	b2d2      	uxtb	r2, r2
 8018648:	f361 0407 	bfi	r4, r1, #0, #8
 801864c:	fa5f f888 	uxtb.w	r8, r8
 8018650:	b2ad      	uxth	r5, r5
 8018652:	f362 240f 	bfi	r4, r2, #8, #8
 8018656:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801865a:	fb10 2208 	smlabb	r2, r0, r8, r2
 801865e:	f368 4417 	bfi	r4, r8, #16, #8
 8018662:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8018666:	0e23      	lsrs	r3, r4, #24
 8018668:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801866c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018670:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018674:	605c      	str	r4, [r3, #4]
 8018676:	46b0      	mov	r8, r6
 8018678:	e7d3      	b.n	8018622 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801867a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801867e:	e792      	b.n	80185a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8018680:	2bff      	cmp	r3, #255	@ 0xff
 8018682:	d127      	bne.n	80186d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8018684:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018688:	f108 0605 	add.w	r6, r8, #5
 801868c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018690:	3d01      	subs	r5, #1
 8018692:	b2d2      	uxtb	r2, r2
 8018694:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018698:	b2db      	uxtb	r3, r3
 801869a:	f898 8004 	ldrb.w	r8, [r8, #4]
 801869e:	f362 0407 	bfi	r4, r2, #0, #8
 80186a2:	b2c9      	uxtb	r1, r1
 80186a4:	fa5f f888 	uxtb.w	r8, r8
 80186a8:	f363 240f 	bfi	r4, r3, #8, #8
 80186ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80186b0:	b2ad      	uxth	r5, r5
 80186b2:	fb10 3301 	smlabb	r3, r0, r1, r3
 80186b6:	f361 4417 	bfi	r4, r1, #16, #8
 80186ba:	fb1c 3302 	smlabb	r3, ip, r2, r3
 80186be:	f368 641f 	bfi	r4, r8, #24, #8
 80186c2:	fb1e 3808 	smlabb	r8, lr, r8, r3
 80186c6:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80186ca:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80186ce:	f8c8 4004 	str.w	r4, [r8, #4]
 80186d2:	e7d0      	b.n	8018676 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80186d4:	119a      	asrs	r2, r3, #6
 80186d6:	f108 0601 	add.w	r6, r8, #1
 80186da:	d107      	bne.n	80186ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 80186dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80186e0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80186e4:	685c      	ldr	r4, [r3, #4]
 80186e6:	3d01      	subs	r5, #1
 80186e8:	b2ad      	uxth	r5, r5
 80186ea:	e7c4      	b.n	8018676 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80186ec:	2a01      	cmp	r2, #1
 80186ee:	d129      	bne.n	8018744 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 80186f0:	f003 0203 	and.w	r2, r3, #3
 80186f4:	1ea1      	subs	r1, r4, #2
 80186f6:	4411      	add	r1, r2
 80186f8:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80186fc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018700:	b2c9      	uxtb	r1, r1
 8018702:	3a02      	subs	r2, #2
 8018704:	3b02      	subs	r3, #2
 8018706:	f361 0407 	bfi	r4, r1, #0, #8
 801870a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801870e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018712:	f362 240f 	bfi	r4, r2, #8, #8
 8018716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801871a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801871e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018722:	fb10 2203 	smlabb	r2, r0, r3, r2
 8018726:	f363 4417 	bfi	r4, r3, #16, #8
 801872a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801872e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8018732:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8018736:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801873a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801873e:	f8c8 4004 	str.w	r4, [r8, #4]
 8018742:	e7d0      	b.n	80186e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8018744:	2a02      	cmp	r2, #2
 8018746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801874a:	d12e      	bne.n	80187aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801874c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018750:	f1a3 0a20 	sub.w	sl, r3, #32
 8018754:	f108 0602 	add.w	r6, r8, #2
 8018758:	b2d2      	uxtb	r2, r2
 801875a:	f002 010f 	and.w	r1, r2, #15
 801875e:	1112      	asrs	r2, r2, #4
 8018760:	3908      	subs	r1, #8
 8018762:	3a08      	subs	r2, #8
 8018764:	4451      	add	r1, sl
 8018766:	4492      	add	sl, r2
 8018768:	4421      	add	r1, r4
 801876a:	b2c9      	uxtb	r1, r1
 801876c:	f361 0407 	bfi	r4, r1, #0, #8
 8018770:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8018774:	f1a8 0820 	sub.w	r8, r8, #32
 8018778:	4443      	add	r3, r8
 801877a:	b2db      	uxtb	r3, r3
 801877c:	f363 240f 	bfi	r4, r3, #8, #8
 8018780:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018784:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8018788:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801878c:	fb10 330a 	smlabb	r3, r0, sl, r3
 8018790:	f36a 4417 	bfi	r4, sl, #16, #8
 8018794:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8018798:	0e22      	lsrs	r2, r4, #24
 801879a:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801879e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80187a2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80187a6:	6054      	str	r4, [r2, #4]
 80187a8:	e79d      	b.n	80186e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80187aa:	3301      	adds	r3, #1
 80187ac:	42ab      	cmp	r3, r5
 80187ae:	dd59      	ble.n	8018864 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 80187b0:	1b5d      	subs	r5, r3, r5
 80187b2:	2d00      	cmp	r5, #0
 80187b4:	dc58      	bgt.n	8018868 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80187b6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80187ba:	f04f 0800 	mov.w	r8, #0
 80187be:	f1ba 0f00 	cmp.w	sl, #0
 80187c2:	f340 8108 	ble.w	80189d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 80187c6:	1c73      	adds	r3, r6, #1
 80187c8:	9303      	str	r3, [sp, #12]
 80187ca:	7833      	ldrb	r3, [r6, #0]
 80187cc:	b2db      	uxtb	r3, r3
 80187ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80187d0:	d16a      	bne.n	80188a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 80187d2:	7871      	ldrb	r1, [r6, #1]
 80187d4:	1d33      	adds	r3, r6, #4
 80187d6:	78b2      	ldrb	r2, [r6, #2]
 80187d8:	b2c9      	uxtb	r1, r1
 80187da:	78f0      	ldrb	r0, [r6, #3]
 80187dc:	b2d2      	uxtb	r2, r2
 80187de:	9303      	str	r3, [sp, #12]
 80187e0:	f361 0407 	bfi	r4, r1, #0, #8
 80187e4:	b2c0      	uxtb	r0, r0
 80187e6:	2303      	movs	r3, #3
 80187e8:	f362 240f 	bfi	r4, r2, #8, #8
 80187ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80187f0:	fb13 2200 	smlabb	r2, r3, r0, r2
 80187f4:	f360 4417 	bfi	r4, r0, #16, #8
 80187f8:	2307      	movs	r3, #7
 80187fa:	0e25      	lsrs	r5, r4, #24
 80187fc:	fb13 2101 	smlabb	r1, r3, r1, r2
 8018800:	230b      	movs	r3, #11
 8018802:	fb13 1305 	smlabb	r3, r3, r5, r1
 8018806:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801880a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801880e:	605c      	str	r4, [r3, #4]
 8018810:	2501      	movs	r5, #1
 8018812:	462e      	mov	r6, r5
 8018814:	eb06 0308 	add.w	r3, r6, r8
 8018818:	ebaa 0a06 	sub.w	sl, sl, r6
 801881c:	1bad      	subs	r5, r5, r6
 801881e:	2b40      	cmp	r3, #64	@ 0x40
 8018820:	dd16      	ble.n	8018850 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8018822:	4658      	mov	r0, fp
 8018824:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8018828:	f7ea faf4 	bl	8002e14 <_ZN8touchgfx5paint9flushLineEPmi>
 801882c:	4659      	mov	r1, fp
 801882e:	9b05      	ldr	r3, [sp, #20]
 8018830:	4642      	mov	r2, r8
 8018832:	4638      	mov	r0, r7
 8018834:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018838:	f7ea fb54 	bl	8002ee4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801883c:	4b30      	ldr	r3, [pc, #192]	@ (8018900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801883e:	4447      	add	r7, r8
 8018840:	f04f 0800 	mov.w	r8, #0
 8018844:	459b      	cmp	fp, r3
 8018846:	bf0c      	ite	eq
 8018848:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8018904 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801884c:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8018900 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8018850:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8018854:	4633      	mov	r3, r6
 8018856:	3b01      	subs	r3, #1
 8018858:	f842 4b04 	str.w	r4, [r2], #4
 801885c:	d1fb      	bne.n	8018856 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801885e:	44b0      	add	r8, r6
 8018860:	9e03      	ldr	r6, [sp, #12]
 8018862:	e7ac      	b.n	80187be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8018864:	1aed      	subs	r5, r5, r3
 8018866:	e73f      	b.n	80186e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8018868:	9b01      	ldr	r3, [sp, #4]
 801886a:	42ab      	cmp	r3, r5
 801886c:	bfa8      	it	ge
 801886e:	462b      	movge	r3, r5
 8018870:	4698      	mov	r8, r3
 8018872:	9b01      	ldr	r3, [sp, #4]
 8018874:	eba3 0a08 	sub.w	sl, r3, r8
 8018878:	0e23      	lsrs	r3, r4, #24
 801887a:	eba5 0508 	sub.w	r5, r5, r8
 801887e:	d00b      	beq.n	8018898 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8018880:	9a05      	ldr	r2, [sp, #20]
 8018882:	4641      	mov	r1, r8
 8018884:	4638      	mov	r0, r7
 8018886:	4353      	muls	r3, r2
 8018888:	1c5a      	adds	r2, r3, #1
 801888a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801888e:	4622      	mov	r2, r4
 8018890:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018894:	f7ea fad8 	bl	8002e48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018898:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801889c:	4447      	add	r7, r8
 801889e:	e78c      	b.n	80187ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80188a0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80188a4:	4646      	mov	r6, r8
 80188a6:	e788      	b.n	80187ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80188a8:	2bff      	cmp	r3, #255	@ 0xff
 80188aa:	d11d      	bne.n	80188e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 80188ac:	7870      	ldrb	r0, [r6, #1]
 80188ae:	1d73      	adds	r3, r6, #5
 80188b0:	78b2      	ldrb	r2, [r6, #2]
 80188b2:	b2c0      	uxtb	r0, r0
 80188b4:	78f5      	ldrb	r5, [r6, #3]
 80188b6:	b2d2      	uxtb	r2, r2
 80188b8:	9303      	str	r3, [sp, #12]
 80188ba:	f360 0407 	bfi	r4, r0, #0, #8
 80188be:	7933      	ldrb	r3, [r6, #4]
 80188c0:	b2ed      	uxtb	r5, r5
 80188c2:	b2d9      	uxtb	r1, r3
 80188c4:	f362 240f 	bfi	r4, r2, #8, #8
 80188c8:	2303      	movs	r3, #3
 80188ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80188ce:	f365 4417 	bfi	r4, r5, #16, #8
 80188d2:	fb13 2205 	smlabb	r2, r3, r5, r2
 80188d6:	2307      	movs	r3, #7
 80188d8:	f361 641f 	bfi	r4, r1, #24, #8
 80188dc:	fb13 2000 	smlabb	r0, r3, r0, r2
 80188e0:	230b      	movs	r3, #11
 80188e2:	fb13 0301 	smlabb	r3, r3, r1, r0
 80188e6:	e78e      	b.n	8018806 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80188e8:	119d      	asrs	r5, r3, #6
 80188ea:	d10d      	bne.n	8018908 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 80188ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80188f0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80188f4:	685c      	ldr	r4, [r3, #4]
 80188f6:	e78b      	b.n	8018810 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80188f8:	24025274 	.word	0x24025274
 80188fc:	2402526e 	.word	0x2402526e
 8018900:	24000140 	.word	0x24000140
 8018904:	24000240 	.word	0x24000240
 8018908:	2d01      	cmp	r5, #1
 801890a:	d12a      	bne.n	8018962 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801890c:	f003 0203 	and.w	r2, r3, #3
 8018910:	1ea1      	subs	r1, r4, #2
 8018912:	2603      	movs	r6, #3
 8018914:	4411      	add	r1, r2
 8018916:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801891a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801891e:	b2c9      	uxtb	r1, r1
 8018920:	3a02      	subs	r2, #2
 8018922:	3b02      	subs	r3, #2
 8018924:	f361 0407 	bfi	r4, r1, #0, #8
 8018928:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801892c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018930:	f362 240f 	bfi	r4, r2, #8, #8
 8018934:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018938:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801893c:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018940:	fb16 2203 	smlabb	r2, r6, r3, r2
 8018944:	f363 4417 	bfi	r4, r3, #16, #8
 8018948:	2307      	movs	r3, #7
 801894a:	0e20      	lsrs	r0, r4, #24
 801894c:	fb13 2101 	smlabb	r1, r3, r1, r2
 8018950:	230b      	movs	r3, #11
 8018952:	fb13 1300 	smlabb	r3, r3, r0, r1
 8018956:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801895a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801895e:	605c      	str	r4, [r3, #4]
 8018960:	e757      	b.n	8018812 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8018962:	2d02      	cmp	r5, #2
 8018964:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018968:	d12f      	bne.n	80189ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801896a:	1cb2      	adds	r2, r6, #2
 801896c:	f1a3 0020 	sub.w	r0, r3, #32
 8018970:	9203      	str	r2, [sp, #12]
 8018972:	7872      	ldrb	r2, [r6, #1]
 8018974:	b2d2      	uxtb	r2, r2
 8018976:	f002 010f 	and.w	r1, r2, #15
 801897a:	1112      	asrs	r2, r2, #4
 801897c:	3908      	subs	r1, #8
 801897e:	3a08      	subs	r2, #8
 8018980:	4401      	add	r1, r0
 8018982:	4402      	add	r2, r0
 8018984:	4421      	add	r1, r4
 8018986:	b2c9      	uxtb	r1, r1
 8018988:	f361 0407 	bfi	r4, r1, #0, #8
 801898c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8018990:	3d20      	subs	r5, #32
 8018992:	442b      	add	r3, r5
 8018994:	2503      	movs	r5, #3
 8018996:	b2db      	uxtb	r3, r3
 8018998:	f363 240f 	bfi	r4, r3, #8, #8
 801899c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80189a0:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 80189a4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80189a8:	fb15 3302 	smlabb	r3, r5, r2, r3
 80189ac:	f362 4417 	bfi	r4, r2, #16, #8
 80189b0:	2207      	movs	r2, #7
 80189b2:	0e20      	lsrs	r0, r4, #24
 80189b4:	fb12 3201 	smlabb	r2, r2, r1, r3
 80189b8:	210b      	movs	r1, #11
 80189ba:	fb11 2100 	smlabb	r1, r1, r0, r2
 80189be:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80189c2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80189c6:	604c      	str	r4, [r1, #4]
 80189c8:	e722      	b.n	8018810 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80189ca:	1c5d      	adds	r5, r3, #1
 80189cc:	4656      	mov	r6, sl
 80189ce:	45aa      	cmp	sl, r5
 80189d0:	bfa8      	it	ge
 80189d2:	462e      	movge	r6, r5
 80189d4:	e71e      	b.n	8018814 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 80189d6:	f1b8 0f00 	cmp.w	r8, #0
 80189da:	d00d      	beq.n	80189f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 80189dc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80189e0:	4658      	mov	r0, fp
 80189e2:	f7ea fa17 	bl	8002e14 <_ZN8touchgfx5paint9flushLineEPmi>
 80189e6:	4642      	mov	r2, r8
 80189e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80189ec:	4638      	mov	r0, r7
 80189ee:	9b05      	ldr	r3, [sp, #20]
 80189f0:	4659      	mov	r1, fp
 80189f2:	4447      	add	r7, r8
 80189f4:	f7ea fa76 	bl	8002ee4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80189f8:	4b1d      	ldr	r3, [pc, #116]	@ (8018a70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 80189fa:	9a01      	ldr	r2, [sp, #4]
 80189fc:	881b      	ldrh	r3, [r3, #0]
 80189fe:	1a9b      	subs	r3, r3, r2
 8018a00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a04:	441f      	add	r7, r3
 8018a06:	9b04      	ldr	r3, [sp, #16]
 8018a08:	3301      	adds	r3, #1
 8018a0a:	9304      	str	r3, [sp, #16]
 8018a0c:	9a04      	ldr	r2, [sp, #16]
 8018a0e:	9b00      	ldr	r3, [sp, #0]
 8018a10:	4293      	cmp	r3, r2
 8018a12:	d11d      	bne.n	8018a50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8018a14:	9b02      	ldr	r3, [sp, #8]
 8018a16:	2400      	movs	r4, #0
 8018a18:	9a02      	ldr	r2, [sp, #8]
 8018a1a:	f103 0801 	add.w	r8, r3, #1
 8018a1e:	9b06      	ldr	r3, [sp, #24]
 8018a20:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8018a24:	4621      	mov	r1, r4
 8018a26:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8018a2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018a2e:	9b07      	ldr	r3, [sp, #28]
 8018a30:	ba36      	rev	r6, r6
 8018a32:	9808      	ldr	r0, [sp, #32]
 8018a34:	441e      	add	r6, r3
 8018a36:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018a3a:	1aed      	subs	r5, r5, r3
 8018a3c:	f009 fde8 	bl	8022610 <memset>
 8018a40:	f8cd 8008 	str.w	r8, [sp, #8]
 8018a44:	b2ad      	uxth	r5, r5
 8018a46:	9404      	str	r4, [sp, #16]
 8018a48:	f7ea f9da 	bl	8002e00 <_ZN8touchgfx5paint8tearDownEv>
 8018a4c:	46b0      	mov	r8, r6
 8018a4e:	e5df      	b.n	8018610 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8018a50:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018a54:	9a01      	ldr	r2, [sp, #4]
 8018a56:	1a9b      	subs	r3, r3, r2
 8018a58:	1b5d      	subs	r5, r3, r5
 8018a5a:	b2ad      	uxth	r5, r5
 8018a5c:	e7f4      	b.n	8018a48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8018a5e:	4b05      	ldr	r3, [pc, #20]	@ (8018a74 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8018a60:	6818      	ldr	r0, [r3, #0]
 8018a62:	6803      	ldr	r3, [r0, #0]
 8018a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a66:	4798      	blx	r3
 8018a68:	b00f      	add	sp, #60	@ 0x3c
 8018a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a6e:	bf00      	nop
 8018a70:	2402526e 	.word	0x2402526e
 8018a74:	24025274 	.word	0x24025274

08018a78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8018a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a7c:	b093      	sub	sp, #76	@ 0x4c
 8018a7e:	460d      	mov	r5, r1
 8018a80:	4616      	mov	r6, r2
 8018a82:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8018a86:	9000      	str	r0, [sp, #0]
 8018a88:	f1bb 0f00 	cmp.w	fp, #0
 8018a8c:	f000 82ac 	beq.w	8018fe8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8018a90:	6810      	ldr	r0, [r2, #0]
 8018a92:	ac0e      	add	r4, sp, #56	@ 0x38
 8018a94:	6851      	ldr	r1, [r2, #4]
 8018a96:	c403      	stmia	r4!, {r0, r1}
 8018a98:	6818      	ldr	r0, [r3, #0]
 8018a9a:	ac10      	add	r4, sp, #64	@ 0x40
 8018a9c:	6859      	ldr	r1, [r3, #4]
 8018a9e:	c403      	stmia	r4!, {r0, r1}
 8018aa0:	a80e      	add	r0, sp, #56	@ 0x38
 8018aa2:	f7f9 fa4b 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018aa6:	4631      	mov	r1, r6
 8018aa8:	a810      	add	r0, sp, #64	@ 0x40
 8018aaa:	f7f9 fa8b 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018aae:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8018ab2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8018ab6:	bfdb      	ittet	le
 8018ab8:	b293      	uxthle	r3, r2
 8018aba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018abe:	2301      	movgt	r3, #1
 8018ac0:	fb91 f3f3 	sdivle	r3, r1, r3
 8018ac4:	9301      	str	r3, [sp, #4]
 8018ac6:	f105 0308 	add.w	r3, r5, #8
 8018aca:	9901      	ldr	r1, [sp, #4]
 8018acc:	9305      	str	r3, [sp, #20]
 8018ace:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 8018ad2:	440b      	add	r3, r1
 8018ad4:	3b01      	subs	r3, #1
 8018ad6:	fb93 f3f1 	sdiv	r3, r3, r1
 8018ada:	3b01      	subs	r3, #1
 8018adc:	9905      	ldr	r1, [sp, #20]
 8018ade:	b29b      	uxth	r3, r3
 8018ae0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018ae4:	9901      	ldr	r1, [sp, #4]
 8018ae6:	9306      	str	r3, [sp, #24]
 8018ae8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8018aec:	fb93 f0f1 	sdiv	r0, r3, r1
 8018af0:	b284      	uxth	r4, r0
 8018af2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 8018af6:	9403      	str	r4, [sp, #12]
 8018af8:	9d03      	ldr	r5, [sp, #12]
 8018afa:	9c01      	ldr	r4, [sp, #4]
 8018afc:	fb05 3714 	mls	r7, r5, r4, r3
 8018b00:	fb17 f702 	smulbb	r7, r7, r2
 8018b04:	440f      	add	r7, r1
 8018b06:	b2bf      	uxth	r7, r7
 8018b08:	2d00      	cmp	r5, #0
 8018b0a:	d06b      	beq.n	8018be4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8018b0c:	1e6a      	subs	r2, r5, #1
 8018b0e:	9805      	ldr	r0, [sp, #20]
 8018b10:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8018b14:	9a06      	ldr	r2, [sp, #24]
 8018b16:	fa99 f989 	rev.w	r9, r9
 8018b1a:	4491      	add	r9, r2
 8018b1c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8018b20:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8018b24:	4411      	add	r1, r2
 8018b26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018b2a:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8018e88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8018b2e:	4413      	add	r3, r2
 8018b30:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8018b34:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8018b38:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8018b3c:	9302      	str	r3, [sp, #8]
 8018b3e:	4bd0      	ldr	r3, [pc, #832]	@ (8018e80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8018b40:	6818      	ldr	r0, [r3, #0]
 8018b42:	6803      	ldr	r3, [r0, #0]
 8018b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018b46:	4798      	blx	r3
 8018b48:	4bce      	ldr	r3, [pc, #824]	@ (8018e84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8018b4a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8018b4e:	881b      	ldrh	r3, [r3, #0]
 8018b50:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8018b54:	fb03 2404 	mla	r4, r3, r4, r2
 8018b58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018b5c:	436b      	muls	r3, r5
 8018b5e:	2500      	movs	r5, #0
 8018b60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018b64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018b68:	4629      	mov	r1, r5
 8018b6a:	4404      	add	r4, r0
 8018b6c:	18e3      	adds	r3, r4, r3
 8018b6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018b70:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8018b74:	fb97 f3f3 	sdiv	r3, r7, r3
 8018b78:	9304      	str	r3, [sp, #16]
 8018b7a:	9b00      	ldr	r3, [sp, #0]
 8018b7c:	3304      	adds	r3, #4
 8018b7e:	4618      	mov	r0, r3
 8018b80:	9309      	str	r3, [sp, #36]	@ 0x24
 8018b82:	f009 fd45 	bl	8022610 <memset>
 8018b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018b88:	42a3      	cmp	r3, r4
 8018b8a:	f240 8228 	bls.w	8018fde <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8018b8e:	2003      	movs	r0, #3
 8018b90:	2607      	movs	r6, #7
 8018b92:	2f00      	cmp	r7, #0
 8018b94:	f000 80cb 	beq.w	8018d2e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8018b98:	f899 3000 	ldrb.w	r3, [r9]
 8018b9c:	b2db      	uxtb	r3, r3
 8018b9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8018ba0:	d123      	bne.n	8018bea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8018ba2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018ba6:	3f01      	subs	r7, #1
 8018ba8:	f899 2002 	ldrb.w	r2, [r9, #2]
 8018bac:	f109 0804 	add.w	r8, r9, #4
 8018bb0:	b2db      	uxtb	r3, r3
 8018bb2:	f899 1003 	ldrb.w	r1, [r9, #3]
 8018bb6:	b2d2      	uxtb	r2, r2
 8018bb8:	f363 0507 	bfi	r5, r3, #0, #8
 8018bbc:	b2c9      	uxtb	r1, r1
 8018bbe:	b2bf      	uxth	r7, r7
 8018bc0:	f362 250f 	bfi	r5, r2, #8, #8
 8018bc4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018bc8:	fb10 2201 	smlabb	r2, r0, r1, r2
 8018bcc:	f361 4517 	bfi	r5, r1, #16, #8
 8018bd0:	fb16 2303 	smlabb	r3, r6, r3, r2
 8018bd4:	9a00      	ldr	r2, [sp, #0]
 8018bd6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018bda:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bde:	605d      	str	r5, [r3, #4]
 8018be0:	46c1      	mov	r9, r8
 8018be2:	e7d6      	b.n	8018b92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8018be4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018be8:	e798      	b.n	8018b1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8018bea:	119a      	asrs	r2, r3, #6
 8018bec:	f109 0801 	add.w	r8, r9, #1
 8018bf0:	d108      	bne.n	8018c04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8018bf2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018bf6:	9a00      	ldr	r2, [sp, #0]
 8018bf8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bfc:	685d      	ldr	r5, [r3, #4]
 8018bfe:	3f01      	subs	r7, #1
 8018c00:	b2bf      	uxth	r7, r7
 8018c02:	e7ed      	b.n	8018be0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8018c04:	2a01      	cmp	r2, #1
 8018c06:	d125      	bne.n	8018c54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8018c08:	f003 0103 	and.w	r1, r3, #3
 8018c0c:	1eaa      	subs	r2, r5, #2
 8018c0e:	440a      	add	r2, r1
 8018c10:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018c14:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018c18:	b2d2      	uxtb	r2, r2
 8018c1a:	3902      	subs	r1, #2
 8018c1c:	3b02      	subs	r3, #2
 8018c1e:	f362 0507 	bfi	r5, r2, #0, #8
 8018c22:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018c26:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018c2a:	f361 250f 	bfi	r5, r1, #8, #8
 8018c2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018c32:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018c36:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018c3a:	fb10 1103 	smlabb	r1, r0, r3, r1
 8018c3e:	f363 4517 	bfi	r5, r3, #16, #8
 8018c42:	9b00      	ldr	r3, [sp, #0]
 8018c44:	fb16 1202 	smlabb	r2, r6, r2, r1
 8018c48:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018c4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018c50:	6055      	str	r5, [r2, #4]
 8018c52:	e7d4      	b.n	8018bfe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018c54:	2a02      	cmp	r2, #2
 8018c56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018c5a:	d12c      	bne.n	8018cb6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8018c5c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8018c60:	f1a3 0c20 	sub.w	ip, r3, #32
 8018c64:	f109 0802 	add.w	r8, r9, #2
 8018c68:	b2d2      	uxtb	r2, r2
 8018c6a:	f002 010f 	and.w	r1, r2, #15
 8018c6e:	1112      	asrs	r2, r2, #4
 8018c70:	3908      	subs	r1, #8
 8018c72:	3a08      	subs	r2, #8
 8018c74:	4461      	add	r1, ip
 8018c76:	4494      	add	ip, r2
 8018c78:	4429      	add	r1, r5
 8018c7a:	b2c9      	uxtb	r1, r1
 8018c7c:	f361 0507 	bfi	r5, r1, #0, #8
 8018c80:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8018c84:	f1ae 0e20 	sub.w	lr, lr, #32
 8018c88:	4473      	add	r3, lr
 8018c8a:	b2db      	uxtb	r3, r3
 8018c8c:	f363 250f 	bfi	r5, r3, #8, #8
 8018c90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018c94:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8018c98:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8018c9c:	fb10 330c 	smlabb	r3, r0, ip, r3
 8018ca0:	f36c 4517 	bfi	r5, ip, #16, #8
 8018ca4:	fb16 3101 	smlabb	r1, r6, r1, r3
 8018ca8:	9b00      	ldr	r3, [sp, #0]
 8018caa:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8018cae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8018cb2:	604d      	str	r5, [r1, #4]
 8018cb4:	e7a3      	b.n	8018bfe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018cb6:	3301      	adds	r3, #1
 8018cb8:	42bb      	cmp	r3, r7
 8018cba:	dd23      	ble.n	8018d04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8018cbc:	eba3 0907 	sub.w	r9, r3, r7
 8018cc0:	f1b9 0f00 	cmp.w	r9, #0
 8018cc4:	dc20      	bgt.n	8018d08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8018cc6:	9e02      	ldr	r6, [sp, #8]
 8018cc8:	2700      	movs	r7, #0
 8018cca:	2e00      	cmp	r6, #0
 8018ccc:	f340 8142 	ble.w	8018f54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8018cd0:	f108 0301 	add.w	r3, r8, #1
 8018cd4:	9307      	str	r3, [sp, #28]
 8018cd6:	f898 3000 	ldrb.w	r3, [r8]
 8018cda:	b2db      	uxtb	r3, r3
 8018cdc:	119a      	asrs	r2, r3, #6
 8018cde:	d12a      	bne.n	8018d36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8018ce0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018ce4:	9a00      	ldr	r2, [sp, #0]
 8018ce6:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018cea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018cee:	685d      	ldr	r5, [r3, #4]
 8018cf0:	f040 811f 	bne.w	8018f32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018cf4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018cf8:	7025      	strb	r5, [r4, #0]
 8018cfa:	7063      	strb	r3, [r4, #1]
 8018cfc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018d00:	70a3      	strb	r3, [r4, #2]
 8018d02:	e04e      	b.n	8018da2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018d04:	1aff      	subs	r7, r7, r3
 8018d06:	e77b      	b.n	8018c00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8018d08:	9b02      	ldr	r3, [sp, #8]
 8018d0a:	4620      	mov	r0, r4
 8018d0c:	462a      	mov	r2, r5
 8018d0e:	454b      	cmp	r3, r9
 8018d10:	bfa8      	it	ge
 8018d12:	464b      	movge	r3, r9
 8018d14:	461f      	mov	r7, r3
 8018d16:	9b02      	ldr	r3, [sp, #8]
 8018d18:	4639      	mov	r1, r7
 8018d1a:	1bde      	subs	r6, r3, r7
 8018d1c:	eba9 0907 	sub.w	r9, r9, r7
 8018d20:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018d24:	465b      	mov	r3, fp
 8018d26:	f7ea f88f 	bl	8002e48 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018d2a:	443c      	add	r4, r7
 8018d2c:	e7cc      	b.n	8018cc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018d2e:	46c8      	mov	r8, r9
 8018d30:	9e02      	ldr	r6, [sp, #8]
 8018d32:	46b9      	mov	r9, r7
 8018d34:	e7c8      	b.n	8018cc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018d36:	2a01      	cmp	r2, #1
 8018d38:	d136      	bne.n	8018da8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8018d3a:	f003 0103 	and.w	r1, r3, #3
 8018d3e:	1ea8      	subs	r0, r5, #2
 8018d40:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018d44:	4408      	add	r0, r1
 8018d46:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018d4a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018d4e:	b2c0      	uxtb	r0, r0
 8018d50:	f1a1 0102 	sub.w	r1, r1, #2
 8018d54:	f1a3 0302 	sub.w	r3, r3, #2
 8018d58:	f360 0507 	bfi	r5, r0, #0, #8
 8018d5c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018d60:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018d64:	f361 250f 	bfi	r5, r1, #8, #8
 8018d68:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8018d6c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018d70:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8018d74:	f04f 0303 	mov.w	r3, #3
 8018d78:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8018d7c:	f04f 0c07 	mov.w	ip, #7
 8018d80:	9b00      	ldr	r3, [sp, #0]
 8018d82:	f368 4517 	bfi	r5, r8, #16, #8
 8018d86:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8018d8a:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8018d8e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8018d92:	f8cc 5004 	str.w	r5, [ip, #4]
 8018d96:	f040 80cd 	bne.w	8018f34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018d9a:	7020      	strb	r0, [r4, #0]
 8018d9c:	7061      	strb	r1, [r4, #1]
 8018d9e:	f884 8002 	strb.w	r8, [r4, #2]
 8018da2:	3e01      	subs	r6, #1
 8018da4:	3403      	adds	r4, #3
 8018da6:	e0c1      	b.n	8018f2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018da8:	2a02      	cmp	r2, #2
 8018daa:	d13d      	bne.n	8018e28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8018dac:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018db0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018db4:	f108 0202 	add.w	r2, r8, #2
 8018db8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018dbc:	b2c9      	uxtb	r1, r1
 8018dbe:	f1a3 0c20 	sub.w	ip, r3, #32
 8018dc2:	9207      	str	r2, [sp, #28]
 8018dc4:	f001 000f 	and.w	r0, r1, #15
 8018dc8:	f1a0 0008 	sub.w	r0, r0, #8
 8018dcc:	4460      	add	r0, ip
 8018dce:	4428      	add	r0, r5
 8018dd0:	b2c0      	uxtb	r0, r0
 8018dd2:	f360 0507 	bfi	r5, r0, #0, #8
 8018dd6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018dda:	f1a2 0220 	sub.w	r2, r2, #32
 8018dde:	4413      	add	r3, r2
 8018de0:	ea4f 1221 	mov.w	r2, r1, asr #4
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	f1a2 0208 	sub.w	r2, r2, #8
 8018dea:	f363 250f 	bfi	r5, r3, #8, #8
 8018dee:	4462      	add	r2, ip
 8018df0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018df4:	f04f 0c03 	mov.w	ip, #3
 8018df8:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8018dfc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018e00:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8018e04:	f04f 0107 	mov.w	r1, #7
 8018e08:	f362 4517 	bfi	r5, r2, #16, #8
 8018e0c:	fb11 c100 	smlabb	r1, r1, r0, ip
 8018e10:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8018e14:	9900      	ldr	r1, [sp, #0]
 8018e16:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8018e1a:	604d      	str	r5, [r1, #4]
 8018e1c:	f040 8089 	bne.w	8018f32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018e20:	7020      	strb	r0, [r4, #0]
 8018e22:	7063      	strb	r3, [r4, #1]
 8018e24:	70a2      	strb	r2, [r4, #2]
 8018e26:	e7bc      	b.n	8018da2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018e28:	2bfe      	cmp	r3, #254	@ 0xfe
 8018e2a:	d12f      	bne.n	8018e8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8018e2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018e30:	f108 0304 	add.w	r3, r8, #4
 8018e34:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018e38:	f04f 0c03 	mov.w	ip, #3
 8018e3c:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018e40:	b2c0      	uxtb	r0, r0
 8018e42:	b2d2      	uxtb	r2, r2
 8018e44:	9307      	str	r3, [sp, #28]
 8018e46:	b2c9      	uxtb	r1, r1
 8018e48:	f360 0507 	bfi	r5, r0, #0, #8
 8018e4c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018e50:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018e54:	f362 250f 	bfi	r5, r2, #8, #8
 8018e58:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8018e5c:	f04f 0307 	mov.w	r3, #7
 8018e60:	f361 4517 	bfi	r5, r1, #16, #8
 8018e64:	fb13 c300 	smlabb	r3, r3, r0, ip
 8018e68:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8018e6c:	9b00      	ldr	r3, [sp, #0]
 8018e6e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8018e72:	605d      	str	r5, [r3, #4]
 8018e74:	d15d      	bne.n	8018f32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018e76:	7020      	strb	r0, [r4, #0]
 8018e78:	7062      	strb	r2, [r4, #1]
 8018e7a:	70a1      	strb	r1, [r4, #2]
 8018e7c:	e791      	b.n	8018da2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018e7e:	bf00      	nop
 8018e80:	24025274 	.word	0x24025274
 8018e84:	2402526e 	.word	0x2402526e
 8018e88:	24000140 	.word	0x24000140
 8018e8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018e90:	1c5a      	adds	r2, r3, #1
 8018e92:	b94b      	cbnz	r3, 8018ea8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8018e94:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018e98:	d14c      	bne.n	8018f34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018e9a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018e9e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018ea2:	7025      	strb	r5, [r4, #0]
 8018ea4:	7062      	strb	r2, [r4, #1]
 8018ea6:	e72b      	b.n	8018d00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8018ea8:	4296      	cmp	r6, r2
 8018eaa:	46b0      	mov	r8, r6
 8018eac:	bfa8      	it	ge
 8018eae:	4690      	movge	r8, r2
 8018eb0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018eb4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018eb8:	eba6 0608 	sub.w	r6, r6, r8
 8018ebc:	eba2 0908 	sub.w	r9, r2, r8
 8018ec0:	9308      	str	r3, [sp, #32]
 8018ec2:	b2eb      	uxtb	r3, r5
 8018ec4:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ec6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018eca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018ecc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018ed0:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ed2:	9b08      	ldr	r3, [sp, #32]
 8018ed4:	d030      	beq.n	8018f38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8018ed6:	18fb      	adds	r3, r7, r3
 8018ed8:	2bc0      	cmp	r3, #192	@ 0xc0
 8018eda:	dd15      	ble.n	8018f08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8018edc:	4650      	mov	r0, sl
 8018ede:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018ee2:	f7e9 ff97 	bl	8002e14 <_ZN8touchgfx5paint9flushLineEPmi>
 8018ee6:	2203      	movs	r2, #3
 8018ee8:	4651      	mov	r1, sl
 8018eea:	465b      	mov	r3, fp
 8018eec:	4620      	mov	r0, r4
 8018eee:	443c      	add	r4, r7
 8018ef0:	fb97 f2f2 	sdiv	r2, r7, r2
 8018ef4:	f7e9 ffd2 	bl	8002e9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018ef8:	4b3d      	ldr	r3, [pc, #244]	@ (8018ff0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8018efa:	2700      	movs	r7, #0
 8018efc:	459a      	cmp	sl, r3
 8018efe:	bf0c      	ite	eq
 8018f00:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8018ffc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8018f04:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8018ff0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8018f08:	eb0a 0307 	add.w	r3, sl, r7
 8018f0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018f0e:	f1b8 0801 	subs.w	r8, r8, #1
 8018f12:	f103 0303 	add.w	r3, r3, #3
 8018f16:	f803 2c03 	strb.w	r2, [r3, #-3]
 8018f1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f1c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8018f20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f22:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018f26:	d1f1      	bne.n	8018f0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8018f28:	9b08      	ldr	r3, [sp, #32]
 8018f2a:	441f      	add	r7, r3
 8018f2c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018f30:	e6cb      	b.n	8018cca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8018f32:	2201      	movs	r2, #1
 8018f34:	4690      	mov	r8, r2
 8018f36:	e7bb      	b.n	8018eb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8018f38:	4423      	add	r3, r4
 8018f3a:	42a3      	cmp	r3, r4
 8018f3c:	d9f6      	bls.n	8018f2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018f3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018f40:	3403      	adds	r4, #3
 8018f42:	f804 2c03 	strb.w	r2, [r4, #-3]
 8018f46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f48:	f804 2c02 	strb.w	r2, [r4, #-2]
 8018f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018f4e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8018f52:	e7f2      	b.n	8018f3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8018f54:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018f58:	d00e      	beq.n	8018f78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018f5a:	b16f      	cbz	r7, 8018f78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018f5c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018f60:	4650      	mov	r0, sl
 8018f62:	f7e9 ff57 	bl	8002e14 <_ZN8touchgfx5paint9flushLineEPmi>
 8018f66:	2203      	movs	r2, #3
 8018f68:	4620      	mov	r0, r4
 8018f6a:	443c      	add	r4, r7
 8018f6c:	465b      	mov	r3, fp
 8018f6e:	4651      	mov	r1, sl
 8018f70:	fb97 f2f2 	sdiv	r2, r7, r2
 8018f74:	f7e9 ff92 	bl	8002e9c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018f78:	4b1e      	ldr	r3, [pc, #120]	@ (8018ff4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8018f7a:	9a02      	ldr	r2, [sp, #8]
 8018f7c:	881b      	ldrh	r3, [r3, #0]
 8018f7e:	1a9b      	subs	r3, r3, r2
 8018f80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f84:	441c      	add	r4, r3
 8018f86:	9b04      	ldr	r3, [sp, #16]
 8018f88:	3301      	adds	r3, #1
 8018f8a:	9304      	str	r3, [sp, #16]
 8018f8c:	9a04      	ldr	r2, [sp, #16]
 8018f8e:	9b01      	ldr	r3, [sp, #4]
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d11c      	bne.n	8018fce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8018f94:	9b03      	ldr	r3, [sp, #12]
 8018f96:	2500      	movs	r5, #0
 8018f98:	9a03      	ldr	r2, [sp, #12]
 8018f9a:	1c5e      	adds	r6, r3, #1
 8018f9c:	9b05      	ldr	r3, [sp, #20]
 8018f9e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8018fa2:	4629      	mov	r1, r5
 8018fa4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8018fa8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018fac:	9b06      	ldr	r3, [sp, #24]
 8018fae:	fa98 f888 	rev.w	r8, r8
 8018fb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018fb4:	4498      	add	r8, r3
 8018fb6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018fba:	1aff      	subs	r7, r7, r3
 8018fbc:	f009 fb28 	bl	8022610 <memset>
 8018fc0:	b2bf      	uxth	r7, r7
 8018fc2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8018fc6:	f7e9 ff1b 	bl	8002e00 <_ZN8touchgfx5paint8tearDownEv>
 8018fca:	46c1      	mov	r9, r8
 8018fcc:	e5db      	b.n	8018b86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8018fce:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8018fd2:	9b02      	ldr	r3, [sp, #8]
 8018fd4:	1aff      	subs	r7, r7, r3
 8018fd6:	eba7 0709 	sub.w	r7, r7, r9
 8018fda:	b2bf      	uxth	r7, r7
 8018fdc:	e7f3      	b.n	8018fc6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8018fde:	4b06      	ldr	r3, [pc, #24]	@ (8018ff8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8018fe0:	6818      	ldr	r0, [r3, #0]
 8018fe2:	6803      	ldr	r3, [r0, #0]
 8018fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018fe6:	4798      	blx	r3
 8018fe8:	b013      	add	sp, #76	@ 0x4c
 8018fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fee:	bf00      	nop
 8018ff0:	24000140 	.word	0x24000140
 8018ff4:	2402526e 	.word	0x2402526e
 8018ff8:	24025274 	.word	0x24025274
 8018ffc:	24000240 	.word	0x24000240

08019000 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019004:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8019008:	9c06      	ldr	r4, [sp, #24]
 801900a:	2800      	cmp	r0, #0
 801900c:	d06e      	beq.n	80190ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801900e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8019012:	2d00      	cmp	r5, #0
 8019014:	dd6a      	ble.n	80190ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019016:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801901a:	f1bc 0f00 	cmp.w	ip, #0
 801901e:	dd65      	ble.n	80190ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019020:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8019024:	28ff      	cmp	r0, #255	@ 0xff
 8019026:	f9b3 3000 	ldrsh.w	r3, [r3]
 801902a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801902e:	fb02 3306 	mla	r3, r2, r6, r3
 8019032:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8019036:	b2e4      	uxtb	r4, r4
 8019038:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801903c:	4419      	add	r1, r3
 801903e:	fb02 f30c 	mul.w	r3, r2, ip
 8019042:	eba2 0205 	sub.w	r2, r2, r5
 8019046:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801904a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801904e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019052:	440b      	add	r3, r1
 8019054:	d03e      	beq.n	80190d4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8019056:	fa1f fc80 	uxth.w	ip, r0
 801905a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801905e:	fb06 f60c 	mul.w	r6, r6, ip
 8019062:	b280      	uxth	r0, r0
 8019064:	fb07 f70c 	mul.w	r7, r7, ip
 8019068:	fb04 f40c 	mul.w	r4, r4, ip
 801906c:	4299      	cmp	r1, r3
 801906e:	d23d      	bcs.n	80190ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019070:	eb01 0c05 	add.w	ip, r1, r5
 8019074:	458c      	cmp	ip, r1
 8019076:	f101 0e03 	add.w	lr, r1, #3
 801907a:	d928      	bls.n	80190ce <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801907c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8019080:	fb11 f100 	smulbb	r1, r1, r0
 8019084:	4421      	add	r1, r4
 8019086:	b289      	uxth	r1, r1
 8019088:	f101 0801 	add.w	r8, r1, #1
 801908c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019090:	1209      	asrs	r1, r1, #8
 8019092:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8019096:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801909a:	fb11 f100 	smulbb	r1, r1, r0
 801909e:	4439      	add	r1, r7
 80190a0:	b289      	uxth	r1, r1
 80190a2:	f101 0801 	add.w	r8, r1, #1
 80190a6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80190aa:	1209      	asrs	r1, r1, #8
 80190ac:	f80e 1c02 	strb.w	r1, [lr, #-2]
 80190b0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 80190b4:	fb11 f100 	smulbb	r1, r1, r0
 80190b8:	4431      	add	r1, r6
 80190ba:	b289      	uxth	r1, r1
 80190bc:	f101 0801 	add.w	r8, r1, #1
 80190c0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 80190c4:	1209      	asrs	r1, r1, #8
 80190c6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 80190ca:	4671      	mov	r1, lr
 80190cc:	e7d2      	b.n	8019074 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 80190ce:	4411      	add	r1, r2
 80190d0:	e7cc      	b.n	801906c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 80190d2:	4411      	add	r1, r2
 80190d4:	4299      	cmp	r1, r3
 80190d6:	d209      	bcs.n	80190ec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 80190d8:	1948      	adds	r0, r1, r5
 80190da:	4281      	cmp	r1, r0
 80190dc:	d2f9      	bcs.n	80190d2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 80190de:	700c      	strb	r4, [r1, #0]
 80190e0:	3103      	adds	r1, #3
 80190e2:	f801 7c02 	strb.w	r7, [r1, #-2]
 80190e6:	f801 6c01 	strb.w	r6, [r1, #-1]
 80190ea:	e7f6      	b.n	80190da <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 80190ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080190f0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 80190f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80190f4:	b093      	sub	sp, #76	@ 0x4c
 80190f6:	4699      	mov	r9, r3
 80190f8:	4617      	mov	r7, r2
 80190fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80190fe:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8019102:	4604      	mov	r4, r0
 8019104:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019108:	a80c      	add	r0, sp, #48	@ 0x30
 801910a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801910e:	460d      	mov	r5, r1
 8019110:	4649      	mov	r1, r9
 8019112:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019116:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801911a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801911e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8019122:	f7f4 fbeb 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 8019126:	4639      	mov	r1, r7
 8019128:	a80c      	add	r0, sp, #48	@ 0x30
 801912a:	f7f4 fbe7 	bl	800d8fc <_ZN8touchgfx4RectaNERKS0_>
 801912e:	4b78      	ldr	r3, [pc, #480]	@ (8019310 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8019130:	8818      	ldrh	r0, [r3, #0]
 8019132:	4b78      	ldr	r3, [pc, #480]	@ (8019314 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8019134:	b202      	sxth	r2, r0
 8019136:	8819      	ldrh	r1, [r3, #0]
 8019138:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801913c:	b20f      	sxth	r7, r1
 801913e:	2b00      	cmp	r3, #0
 8019140:	da07      	bge.n	8019152 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8019142:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8019146:	4463      	add	r3, ip
 8019148:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801914c:	2300      	movs	r3, #0
 801914e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8019152:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8019156:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801915a:	1ad2      	subs	r2, r2, r3
 801915c:	4594      	cmp	ip, r2
 801915e:	bfc4      	itt	gt
 8019160:	1ac2      	subgt	r2, r0, r3
 8019162:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8019166:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801916a:	2a00      	cmp	r2, #0
 801916c:	da07      	bge.n	801917e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801916e:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8019172:	4462      	add	r2, ip
 8019174:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8019178:	2200      	movs	r2, #0
 801917a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801917e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019182:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8019186:	1abf      	subs	r7, r7, r2
 8019188:	45bc      	cmp	ip, r7
 801918a:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801931c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801918e:	bfc8      	it	gt
 8019190:	1a8f      	subgt	r7, r1, r2
 8019192:	f89c c000 	ldrb.w	ip, [ip]
 8019196:	bfc8      	it	gt
 8019198:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801919c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80191a0:	f1bc 0f00 	cmp.w	ip, #0
 80191a4:	d176      	bne.n	8019294 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80191a6:	4287      	cmp	r7, r0
 80191a8:	bf14      	ite	ne
 80191aa:	2100      	movne	r1, #0
 80191ac:	2101      	moveq	r1, #1
 80191ae:	2f00      	cmp	r7, #0
 80191b0:	9107      	str	r1, [sp, #28]
 80191b2:	dd73      	ble.n	801929c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80191b4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 80191b8:	2900      	cmp	r1, #0
 80191ba:	9104      	str	r1, [sp, #16]
 80191bc:	dd6e      	ble.n	801929c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80191be:	f8b9 1000 	ldrh.w	r1, [r9]
 80191c2:	a80e      	add	r0, sp, #56	@ 0x38
 80191c4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 80191c8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80191cc:	1a5b      	subs	r3, r3, r1
 80191ce:	a910      	add	r1, sp, #64	@ 0x40
 80191d0:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80191d4:	b21b      	sxth	r3, r3
 80191d6:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 80191da:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8019320 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80191de:	9305      	str	r3, [sp, #20]
 80191e0:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80191e4:	1ad2      	subs	r2, r2, r3
 80191e6:	b213      	sxth	r3, r2
 80191e8:	9306      	str	r3, [sp, #24]
 80191ea:	9b05      	ldr	r3, [sp, #20]
 80191ec:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80191f0:	9b06      	ldr	r3, [sp, #24]
 80191f2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80191f6:	9b04      	ldr	r3, [sp, #16]
 80191f8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80191fc:	2300      	movs	r3, #0
 80191fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8019200:	f7f8 fee0 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019204:	4640      	mov	r0, r8
 8019206:	f7f8 fe99 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801920a:	a810      	add	r0, sp, #64	@ 0x40
 801920c:	f7f8 fe96 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019210:	4b41      	ldr	r3, [pc, #260]	@ (8019318 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8019212:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019216:	4628      	mov	r0, r5
 8019218:	881b      	ldrh	r3, [r3, #0]
 801921a:	9308      	str	r3, [sp, #32]
 801921c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8019220:	b21b      	sxth	r3, r3
 8019222:	9303      	str	r3, [sp, #12]
 8019224:	682b      	ldr	r3, [r5, #0]
 8019226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019228:	4798      	blx	r3
 801922a:	9a03      	ldr	r2, [sp, #12]
 801922c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8019230:	4681      	mov	r9, r0
 8019232:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8019236:	fb13 f302 	smulbb	r3, r3, r2
 801923a:	2203      	movs	r2, #3
 801923c:	f8da 0000 	ldr.w	r0, [sl]
 8019240:	fb15 3302 	smlabb	r3, r5, r2, r3
 8019244:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8019246:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019248:	441d      	add	r5, r3
 801924a:	6803      	ldr	r3, [r0, #0]
 801924c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801924e:	4798      	blx	r3
 8019250:	9009      	str	r0, [sp, #36]	@ 0x24
 8019252:	f8da 0000 	ldr.w	r0, [sl]
 8019256:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801925a:	6803      	ldr	r3, [r0, #0]
 801925c:	910a      	str	r1, [sp, #40]	@ 0x28
 801925e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019260:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8019264:	4798      	blx	r3
 8019266:	f010 0f01 	tst.w	r0, #1
 801926a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801926e:	d01e      	beq.n	80192ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8019270:	f8da 0000 	ldr.w	r0, [sl]
 8019274:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8019278:	6803      	ldr	r3, [r0, #0]
 801927a:	9200      	str	r2, [sp, #0]
 801927c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801927e:	462b      	mov	r3, r5
 8019280:	e898 0006 	ldmia.w	r8, {r1, r2}
 8019284:	47b0      	blx	r6
 8019286:	9b05      	ldr	r3, [sp, #20]
 8019288:	80a7      	strh	r7, [r4, #4]
 801928a:	8023      	strh	r3, [r4, #0]
 801928c:	9b06      	ldr	r3, [sp, #24]
 801928e:	8063      	strh	r3, [r4, #2]
 8019290:	9b04      	ldr	r3, [sp, #16]
 8019292:	e007      	b.n	80192a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8019294:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8019298:	4288      	cmp	r0, r1
 801929a:	e785      	b.n	80191a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801929c:	2300      	movs	r3, #0
 801929e:	8023      	strh	r3, [r4, #0]
 80192a0:	8063      	strh	r3, [r4, #2]
 80192a2:	80a3      	strh	r3, [r4, #4]
 80192a4:	4620      	mov	r0, r4
 80192a6:	80e3      	strh	r3, [r4, #6]
 80192a8:	b013      	add	sp, #76	@ 0x4c
 80192aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ae:	fb09 f606 	mul.w	r6, r9, r6
 80192b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80192b4:	fb11 6602 	smlabb	r6, r1, r2, r6
 80192b8:	9a07      	ldr	r2, [sp, #28]
 80192ba:	4433      	add	r3, r6
 80192bc:	461e      	mov	r6, r3
 80192be:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80192c2:	b16a      	cbz	r2, 80192e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80192c4:	9a08      	ldr	r2, [sp, #32]
 80192c6:	4593      	cmp	fp, r2
 80192c8:	d10a      	bne.n	80192e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80192ca:	f8da 0000 	ldr.w	r0, [sl]
 80192ce:	fb09 f303 	mul.w	r3, r9, r3
 80192d2:	4629      	mov	r1, r5
 80192d4:	6802      	ldr	r2, [r0, #0]
 80192d6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80192da:	4632      	mov	r2, r6
 80192dc:	47d0      	blx	sl
 80192de:	e7d2      	b.n	8019286 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80192e0:	9a03      	ldr	r2, [sp, #12]
 80192e2:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8019320 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80192e6:	fb02 5803 	mla	r8, r2, r3, r5
 80192ea:	4545      	cmp	r5, r8
 80192ec:	d2cb      	bcs.n	8019286 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80192ee:	f8db 0000 	ldr.w	r0, [fp]
 80192f2:	4629      	mov	r1, r5
 80192f4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80192f8:	6802      	ldr	r2, [r0, #0]
 80192fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80192fe:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8019302:	4632      	mov	r2, r6
 8019304:	47d0      	blx	sl
 8019306:	9b03      	ldr	r3, [sp, #12]
 8019308:	444e      	add	r6, r9
 801930a:	441d      	add	r5, r3
 801930c:	e7ed      	b.n	80192ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801930e:	bf00      	nop
 8019310:	24025268 	.word	0x24025268
 8019314:	2402526a 	.word	0x2402526a
 8019318:	2402526e 	.word	0x2402526e
 801931c:	2402526c 	.word	0x2402526c
 8019320:	24025274 	.word	0x24025274

08019324 <_ZN8touchgfx8LCD24bppC1Ev>:
 8019324:	2200      	movs	r2, #0
 8019326:	490e      	ldr	r1, [pc, #56]	@ (8019360 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8019328:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801932c:	6001      	str	r1, [r0, #0]
 801932e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019332:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019336:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801933a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801933e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8019342:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8019346:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801934a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801934e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8019352:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8019356:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801935a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801935e:	4770      	bx	lr
 8019360:	080260b4 	.word	0x080260b4

08019364 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019368:	b091      	sub	sp, #68	@ 0x44
 801936a:	4607      	mov	r7, r0
 801936c:	4688      	mov	r8, r1
 801936e:	6810      	ldr	r0, [r2, #0]
 8019370:	6851      	ldr	r1, [r2, #4]
 8019372:	ac0c      	add	r4, sp, #48	@ 0x30
 8019374:	4616      	mov	r6, r2
 8019376:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801937a:	4d64      	ldr	r5, [pc, #400]	@ (801950c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801937c:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8019510 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8019380:	c403      	stmia	r4!, {r0, r1}
 8019382:	6818      	ldr	r0, [r3, #0]
 8019384:	ac0e      	add	r4, sp, #56	@ 0x38
 8019386:	6859      	ldr	r1, [r3, #4]
 8019388:	c403      	stmia	r4!, {r0, r1}
 801938a:	a80c      	add	r0, sp, #48	@ 0x30
 801938c:	f7f8 fdd6 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019390:	4631      	mov	r1, r6
 8019392:	a80e      	add	r0, sp, #56	@ 0x38
 8019394:	f7f8 fe16 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019398:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801939c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80193a0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80193a4:	6828      	ldr	r0, [r5, #0]
 80193a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80193aa:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 80193ae:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 80193b2:	440f      	add	r7, r1
 80193b4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80193b8:	440a      	add	r2, r1
 80193ba:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80193be:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80193c2:	4413      	add	r3, r2
 80193c4:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80193c8:	6803      	ldr	r3, [r0, #0]
 80193ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80193cc:	4798      	blx	r3
 80193ce:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80193d2:	6828      	ldr	r0, [r5, #0]
 80193d4:	d01f      	beq.n	8019416 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80193d6:	2201      	movs	r2, #1
 80193d8:	2500      	movs	r5, #0
 80193da:	6801      	ldr	r1, [r0, #0]
 80193dc:	b2a4      	uxth	r4, r4
 80193de:	b2b6      	uxth	r6, r6
 80193e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80193e4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80193e8:	250b      	movs	r5, #11
 80193ea:	9507      	str	r5, [sp, #28]
 80193ec:	f8ba 5000 	ldrh.w	r5, [sl]
 80193f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80193f4:	9602      	str	r6, [sp, #8]
 80193f6:	9401      	str	r4, [sp, #4]
 80193f8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80193fc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8019400:	9203      	str	r2, [sp, #12]
 8019402:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019406:	9200      	str	r2, [sp, #0]
 8019408:	4642      	mov	r2, r8
 801940a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801940c:	4639      	mov	r1, r7
 801940e:	47a0      	blx	r4
 8019410:	b011      	add	sp, #68	@ 0x44
 8019412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019416:	6803      	ldr	r3, [r0, #0]
 8019418:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801941a:	4798      	blx	r3
 801941c:	f8ba 5000 	ldrh.w	r5, [sl]
 8019420:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8019424:	f04f 0e04 	mov.w	lr, #4
 8019428:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801942c:	436e      	muls	r6, r5
 801942e:	fb05 2303 	mla	r3, r5, r3, r2
 8019432:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019436:	1b2d      	subs	r5, r5, r4
 8019438:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801943c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019440:	4418      	add	r0, r3
 8019442:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019446:	1982      	adds	r2, r0, r6
 8019448:	1b1b      	subs	r3, r3, r4
 801944a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801944e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019450:	4290      	cmp	r0, r2
 8019452:	d254      	bcs.n	80194fe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8019454:	eb00 0a04 	add.w	sl, r0, r4
 8019458:	4550      	cmp	r0, sl
 801945a:	d24c      	bcs.n	80194f6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801945c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019460:	fb1e e101 	smlabb	r1, lr, r1, lr
 8019464:	eb08 0c01 	add.w	ip, r8, r1
 8019468:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801946c:	b173      	cbz	r3, 801948c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801946e:	2bff      	cmp	r3, #255	@ 0xff
 8019470:	f818 b001 	ldrb.w	fp, [r8, r1]
 8019474:	d10c      	bne.n	8019490 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019476:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801947a:	d109      	bne.n	8019490 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801947c:	f880 b000 	strb.w	fp, [r0]
 8019480:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019484:	7043      	strb	r3, [r0, #1]
 8019486:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801948a:	7083      	strb	r3, [r0, #2]
 801948c:	3003      	adds	r0, #3
 801948e:	e7e3      	b.n	8019458 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8019490:	fb09 f103 	mul.w	r1, r9, r3
 8019494:	1c4b      	adds	r3, r1, #1
 8019496:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801949a:	7801      	ldrb	r1, [r0, #0]
 801949c:	121b      	asrs	r3, r3, #8
 801949e:	b29e      	uxth	r6, r3
 80194a0:	43db      	mvns	r3, r3
 80194a2:	fb1b fb06 	smulbb	fp, fp, r6
 80194a6:	b2db      	uxtb	r3, r3
 80194a8:	fb01 b103 	mla	r1, r1, r3, fp
 80194ac:	b289      	uxth	r1, r1
 80194ae:	f101 0b01 	add.w	fp, r1, #1
 80194b2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80194b6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80194ba:	fb1b fb03 	smulbb	fp, fp, r3
 80194be:	1209      	asrs	r1, r1, #8
 80194c0:	7001      	strb	r1, [r0, #0]
 80194c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80194c6:	fb01 b106 	mla	r1, r1, r6, fp
 80194ca:	b289      	uxth	r1, r1
 80194cc:	f101 0b01 	add.w	fp, r1, #1
 80194d0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80194d4:	1209      	asrs	r1, r1, #8
 80194d6:	7041      	strb	r1, [r0, #1]
 80194d8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80194dc:	f890 c002 	ldrb.w	ip, [r0, #2]
 80194e0:	fb1c f303 	smulbb	r3, ip, r3
 80194e4:	fb01 3606 	mla	r6, r1, r6, r3
 80194e8:	b2b6      	uxth	r6, r6
 80194ea:	1c73      	adds	r3, r6, #1
 80194ec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80194f0:	1236      	asrs	r6, r6, #8
 80194f2:	7086      	strb	r6, [r0, #2]
 80194f4:	e7ca      	b.n	801948c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80194f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80194f8:	4428      	add	r0, r5
 80194fa:	441f      	add	r7, r3
 80194fc:	e7a8      	b.n	8019450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80194fe:	4b03      	ldr	r3, [pc, #12]	@ (801950c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8019500:	6818      	ldr	r0, [r3, #0]
 8019502:	6803      	ldr	r3, [r0, #0]
 8019504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019506:	4798      	blx	r3
 8019508:	e782      	b.n	8019410 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801950a:	bf00      	nop
 801950c:	24025274 	.word	0x24025274
 8019510:	2402526e 	.word	0x2402526e

08019514 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8019514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019518:	b091      	sub	sp, #68	@ 0x44
 801951a:	4680      	mov	r8, r0
 801951c:	460e      	mov	r6, r1
 801951e:	6810      	ldr	r0, [r2, #0]
 8019520:	6851      	ldr	r1, [r2, #4]
 8019522:	ad0c      	add	r5, sp, #48	@ 0x30
 8019524:	4614      	mov	r4, r2
 8019526:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801952a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 80196c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801952e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 80196c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8019532:	c503      	stmia	r5!, {r0, r1}
 8019534:	6818      	ldr	r0, [r3, #0]
 8019536:	ad0e      	add	r5, sp, #56	@ 0x38
 8019538:	6859      	ldr	r1, [r3, #4]
 801953a:	c503      	stmia	r5!, {r0, r1}
 801953c:	a80c      	add	r0, sp, #48	@ 0x30
 801953e:	f7f8 fcfd 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019542:	4621      	mov	r1, r4
 8019544:	a80e      	add	r0, sp, #56	@ 0x38
 8019546:	f7f8 fd3d 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801954a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801954e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8019552:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019556:	f8d9 0000 	ldr.w	r0, [r9]
 801955a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801955e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8019562:	eb08 0401 	add.w	r4, r8, r1
 8019566:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801956a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801956e:	440a      	add	r2, r1
 8019570:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8019574:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8019578:	4413      	add	r3, r2
 801957a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801957e:	6803      	ldr	r3, [r0, #0]
 8019580:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019582:	4798      	blx	r3
 8019584:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8019588:	f8d9 0000 	ldr.w	r0, [r9]
 801958c:	d022      	beq.n	80195d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801958e:	2200      	movs	r2, #0
 8019590:	f04f 0c01 	mov.w	ip, #1
 8019594:	6801      	ldr	r1, [r0, #0]
 8019596:	b2ad      	uxth	r5, r5
 8019598:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801959c:	e9cd c208 	strd	ip, r2, [sp, #32]
 80195a0:	f04f 0c0b 	mov.w	ip, #11
 80195a4:	f8cd c01c 	str.w	ip, [sp, #28]
 80195a8:	f8ba c000 	ldrh.w	ip, [sl]
 80195ac:	9704      	str	r7, [sp, #16]
 80195ae:	9502      	str	r5, [sp, #8]
 80195b0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80195b4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80195b8:	9203      	str	r2, [sp, #12]
 80195ba:	fa1f f288 	uxth.w	r2, r8
 80195be:	9201      	str	r2, [sp, #4]
 80195c0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80195c4:	9200      	str	r2, [sp, #0]
 80195c6:	4632      	mov	r2, r6
 80195c8:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80195ca:	4621      	mov	r1, r4
 80195cc:	47a8      	blx	r5
 80195ce:	b011      	add	sp, #68	@ 0x44
 80195d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80195d4:	6803      	ldr	r3, [r0, #0]
 80195d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80195d8:	4798      	blx	r3
 80195da:	f8ba 2000 	ldrh.w	r2, [sl]
 80195de:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80195e2:	f04f 0e03 	mov.w	lr, #3
 80195e6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80195ea:	4355      	muls	r5, r2
 80195ec:	fa1f fc87 	uxth.w	ip, r7
 80195f0:	fb02 1303 	mla	r3, r2, r3, r1
 80195f4:	eba2 0208 	sub.w	r2, r2, r8
 80195f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80195fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019600:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019604:	4418      	add	r0, r3
 8019606:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019608:	1943      	adds	r3, r0, r5
 801960a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801960e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8019612:	eba2 0208 	sub.w	r2, r2, r8
 8019616:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801961a:	b2ad      	uxth	r5, r5
 801961c:	4298      	cmp	r0, r3
 801961e:	d24a      	bcs.n	80196b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8019620:	eb00 0908 	add.w	r9, r0, r8
 8019624:	4621      	mov	r1, r4
 8019626:	4548      	cmp	r0, r9
 8019628:	460c      	mov	r4, r1
 801962a:	d240      	bcs.n	80196ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801962c:	f04f 0a04 	mov.w	sl, #4
 8019630:	7824      	ldrb	r4, [r4, #0]
 8019632:	2fff      	cmp	r7, #255	@ 0xff
 8019634:	f101 0101 	add.w	r1, r1, #1
 8019638:	fb1e a404 	smlabb	r4, lr, r4, sl
 801963c:	eb06 0a04 	add.w	sl, r6, r4
 8019640:	f816 b004 	ldrb.w	fp, [r6, r4]
 8019644:	d02b      	beq.n	801969e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8019646:	7804      	ldrb	r4, [r0, #0]
 8019648:	fb14 f405 	smulbb	r4, r4, r5
 801964c:	fb0b 440c 	mla	r4, fp, ip, r4
 8019650:	b2a4      	uxth	r4, r4
 8019652:	f104 0b01 	add.w	fp, r4, #1
 8019656:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801965a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801965e:	fb1b fb05 	smulbb	fp, fp, r5
 8019662:	1224      	asrs	r4, r4, #8
 8019664:	7004      	strb	r4, [r0, #0]
 8019666:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801966a:	fb04 b40c 	mla	r4, r4, ip, fp
 801966e:	b2a4      	uxth	r4, r4
 8019670:	f104 0b01 	add.w	fp, r4, #1
 8019674:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8019678:	1224      	asrs	r4, r4, #8
 801967a:	7044      	strb	r4, [r0, #1]
 801967c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8019680:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019684:	fb1a fa05 	smulbb	sl, sl, r5
 8019688:	fb04 a40c 	mla	r4, r4, ip, sl
 801968c:	b2a4      	uxth	r4, r4
 801968e:	f104 0a01 	add.w	sl, r4, #1
 8019692:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019696:	1224      	asrs	r4, r4, #8
 8019698:	7084      	strb	r4, [r0, #2]
 801969a:	3003      	adds	r0, #3
 801969c:	e7c3      	b.n	8019626 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801969e:	f880 b000 	strb.w	fp, [r0]
 80196a2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80196a6:	7044      	strb	r4, [r0, #1]
 80196a8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80196ac:	e7f4      	b.n	8019698 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 80196ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80196b0:	4420      	add	r0, r4
 80196b2:	188c      	adds	r4, r1, r2
 80196b4:	e7b2      	b.n	801961c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 80196b6:	4b03      	ldr	r3, [pc, #12]	@ (80196c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80196b8:	6818      	ldr	r0, [r3, #0]
 80196ba:	6803      	ldr	r3, [r0, #0]
 80196bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196be:	4798      	blx	r3
 80196c0:	e785      	b.n	80195ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 80196c2:	bf00      	nop
 80196c4:	24025274 	.word	0x24025274
 80196c8:	2402526e 	.word	0x2402526e

080196cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80196cc:	b4f0      	push	{r4, r5, r6, r7}
 80196ce:	460c      	mov	r4, r1
 80196d0:	4611      	mov	r1, r2
 80196d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80196d6:	461a      	mov	r2, r3
 80196d8:	780f      	ldrb	r7, [r1, #0]
 80196da:	9b04      	ldr	r3, [sp, #16]
 80196dc:	784e      	ldrb	r6, [r1, #1]
 80196de:	b11f      	cbz	r7, 80196e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 80196e0:	2f01      	cmp	r7, #1
 80196e2:	d01d      	beq.n	8019720 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80196e4:	bcf0      	pop	{r4, r5, r6, r7}
 80196e6:	4770      	bx	lr
 80196e8:	2e03      	cmp	r6, #3
 80196ea:	d8fb      	bhi.n	80196e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80196ec:	e8df f006 	tbb	[pc, r6]
 80196f0:	16140702 	.word	0x16140702
 80196f4:	9504      	str	r5, [sp, #16]
 80196f6:	4620      	mov	r0, r4
 80196f8:	bcf0      	pop	{r4, r5, r6, r7}
 80196fa:	f7ff be33 	b.w	8019364 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80196fe:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019700:	2800      	cmp	r0, #0
 8019702:	d0ef      	beq.n	80196e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019704:	6806      	ldr	r6, [r0, #0]
 8019706:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801970a:	68f5      	ldr	r5, [r6, #12]
 801970c:	4613      	mov	r3, r2
 801970e:	46ac      	mov	ip, r5
 8019710:	460a      	mov	r2, r1
 8019712:	4621      	mov	r1, r4
 8019714:	bcf0      	pop	{r4, r5, r6, r7}
 8019716:	4760      	bx	ip
 8019718:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801971a:	e7f1      	b.n	8019700 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801971c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801971e:	e7ef      	b.n	8019700 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8019720:	2e03      	cmp	r6, #3
 8019722:	d8df      	bhi.n	80196e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019724:	e8df f006 	tbb	[pc, r6]
 8019728:	110f0702 	.word	0x110f0702
 801972c:	9504      	str	r5, [sp, #16]
 801972e:	4620      	mov	r0, r4
 8019730:	bcf0      	pop	{r4, r5, r6, r7}
 8019732:	f7ff beef 	b.w	8019514 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8019736:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019738:	2800      	cmp	r0, #0
 801973a:	d0d3      	beq.n	80196e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801973c:	6806      	ldr	r6, [r0, #0]
 801973e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8019742:	68b5      	ldr	r5, [r6, #8]
 8019744:	e7e2      	b.n	801970c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8019746:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8019748:	e7f6      	b.n	8019738 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801974a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801974c:	e7f4      	b.n	8019738 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08019750 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8019750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019754:	4605      	mov	r5, r0
 8019756:	b08f      	sub	sp, #60	@ 0x3c
 8019758:	460c      	mov	r4, r1
 801975a:	461f      	mov	r7, r3
 801975c:	2b00      	cmp	r3, #0
 801975e:	d052      	beq.n	8019806 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019760:	6808      	ldr	r0, [r1, #0]
 8019762:	ab0a      	add	r3, sp, #40	@ 0x28
 8019764:	6849      	ldr	r1, [r1, #4]
 8019766:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8019930 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801976a:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8019934 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801976e:	c303      	stmia	r3!, {r0, r1}
 8019770:	6810      	ldr	r0, [r2, #0]
 8019772:	ab0c      	add	r3, sp, #48	@ 0x30
 8019774:	6851      	ldr	r1, [r2, #4]
 8019776:	c303      	stmia	r3!, {r0, r1}
 8019778:	a80a      	add	r0, sp, #40	@ 0x28
 801977a:	f7f8 fbdf 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801977e:	4621      	mov	r1, r4
 8019780:	a80c      	add	r0, sp, #48	@ 0x30
 8019782:	f7f8 fc1f 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019786:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801978a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801978e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019792:	f8d8 0000 	ldr.w	r0, [r8]
 8019796:	fb11 2103 	smlabb	r1, r1, r3, r2
 801979a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801979e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80197a2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80197a6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80197aa:	440a      	add	r2, r1
 80197ac:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80197b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80197b4:	4413      	add	r3, r2
 80197b6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80197ba:	6803      	ldr	r3, [r0, #0]
 80197bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80197be:	4798      	blx	r3
 80197c0:	2fff      	cmp	r7, #255	@ 0xff
 80197c2:	d023      	beq.n	801980c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80197c4:	f010 0f04 	tst.w	r0, #4
 80197c8:	f8d8 0000 	ldr.w	r0, [r8]
 80197cc:	d021      	beq.n	8019812 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80197ce:	2100      	movs	r1, #0
 80197d0:	f04f 0e01 	mov.w	lr, #1
 80197d4:	f8d0 c000 	ldr.w	ip, [r0]
 80197d8:	b2a4      	uxth	r4, r4
 80197da:	9106      	str	r1, [sp, #24]
 80197dc:	b2b6      	uxth	r6, r6
 80197de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80197e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80197e6:	e9cd e107 	strd	lr, r1, [sp, #28]
 80197ea:	f8b9 e000 	ldrh.w	lr, [r9]
 80197ee:	9703      	str	r7, [sp, #12]
 80197f0:	9401      	str	r4, [sp, #4]
 80197f2:	9600      	str	r6, [sp, #0]
 80197f4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80197f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80197fc:	9102      	str	r1, [sp, #8]
 80197fe:	4629      	mov	r1, r5
 8019800:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8019804:	47a0      	blx	r4
 8019806:	b00f      	add	sp, #60	@ 0x3c
 8019808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801980c:	f010 0f01 	tst.w	r0, #1
 8019810:	e7da      	b.n	80197c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8019812:	6803      	ldr	r3, [r0, #0]
 8019814:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019816:	4798      	blx	r3
 8019818:	f8b9 1000 	ldrh.w	r1, [r9]
 801981c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019820:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8019824:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019828:	434c      	muls	r4, r1
 801982a:	2fff      	cmp	r7, #255	@ 0xff
 801982c:	fb01 2303 	mla	r3, r1, r3, r2
 8019830:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019834:	eba1 0106 	sub.w	r1, r1, r6
 8019838:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801983c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019840:	4418      	add	r0, r3
 8019842:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019846:	eba3 0606 	sub.w	r6, r3, r6
 801984a:	4404      	add	r4, r0
 801984c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8019850:	d04a      	beq.n	80198e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8019852:	43fa      	mvns	r2, r7
 8019854:	b2bb      	uxth	r3, r7
 8019856:	b2d7      	uxtb	r7, r2
 8019858:	42a0      	cmp	r0, r4
 801985a:	d263      	bcs.n	8019924 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801985c:	eb00 0e0c 	add.w	lr, r0, ip
 8019860:	4586      	cmp	lr, r0
 8019862:	f100 0803 	add.w	r8, r0, #3
 8019866:	d93a      	bls.n	80198de <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8019868:	f835 2b02 	ldrh.w	r2, [r5], #2
 801986c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8019870:	00d0      	lsls	r0, r2, #3
 8019872:	fb19 f907 	smulbb	r9, r9, r7
 8019876:	b2c0      	uxtb	r0, r0
 8019878:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801987c:	fb00 9003 	mla	r0, r0, r3, r9
 8019880:	b280      	uxth	r0, r0
 8019882:	f100 0901 	add.w	r9, r0, #1
 8019886:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801988a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801988e:	fb19 f907 	smulbb	r9, r9, r7
 8019892:	1200      	asrs	r0, r0, #8
 8019894:	f808 0c03 	strb.w	r0, [r8, #-3]
 8019898:	10d0      	asrs	r0, r2, #3
 801989a:	1212      	asrs	r2, r2, #8
 801989c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80198a0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80198a4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80198a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80198ac:	fb00 9003 	mla	r0, r0, r3, r9
 80198b0:	b280      	uxth	r0, r0
 80198b2:	f100 0901 	add.w	r9, r0, #1
 80198b6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80198ba:	1200      	asrs	r0, r0, #8
 80198bc:	f808 0c02 	strb.w	r0, [r8, #-2]
 80198c0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80198c4:	fb10 f007 	smulbb	r0, r0, r7
 80198c8:	fb02 0203 	mla	r2, r2, r3, r0
 80198cc:	b292      	uxth	r2, r2
 80198ce:	1c50      	adds	r0, r2, #1
 80198d0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80198d4:	4640      	mov	r0, r8
 80198d6:	1212      	asrs	r2, r2, #8
 80198d8:	f808 2c01 	strb.w	r2, [r8, #-1]
 80198dc:	e7c0      	b.n	8019860 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80198de:	4408      	add	r0, r1
 80198e0:	4435      	add	r5, r6
 80198e2:	e7b9      	b.n	8019858 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80198e4:	4408      	add	r0, r1
 80198e6:	4435      	add	r5, r6
 80198e8:	42a0      	cmp	r0, r4
 80198ea:	d21b      	bcs.n	8019924 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80198ec:	eb00 070c 	add.w	r7, r0, ip
 80198f0:	42b8      	cmp	r0, r7
 80198f2:	d2f7      	bcs.n	80198e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80198f4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80198f8:	3003      	adds	r0, #3
 80198fa:	00da      	lsls	r2, r3, #3
 80198fc:	b2d2      	uxtb	r2, r2
 80198fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019902:	f800 2c03 	strb.w	r2, [r0, #-3]
 8019906:	10da      	asrs	r2, r3, #3
 8019908:	121b      	asrs	r3, r3, #8
 801990a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801990e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8019912:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019916:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801991a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801991e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019922:	e7e5      	b.n	80198f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8019924:	4b02      	ldr	r3, [pc, #8]	@ (8019930 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8019926:	6818      	ldr	r0, [r3, #0]
 8019928:	6803      	ldr	r3, [r0, #0]
 801992a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801992c:	4798      	blx	r3
 801992e:	e76a      	b.n	8019806 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019930:	24025274 	.word	0x24025274
 8019934:	2402526e 	.word	0x2402526e

08019938 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801993c:	b08a      	sub	sp, #40	@ 0x28
 801993e:	460d      	mov	r5, r1
 8019940:	4604      	mov	r4, r0
 8019942:	461e      	mov	r6, r3
 8019944:	6808      	ldr	r0, [r1, #0]
 8019946:	ab06      	add	r3, sp, #24
 8019948:	6849      	ldr	r1, [r1, #4]
 801994a:	4f5d      	ldr	r7, [pc, #372]	@ (8019ac0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801994c:	c303      	stmia	r3!, {r0, r1}
 801994e:	6810      	ldr	r0, [r2, #0]
 8019950:	ab08      	add	r3, sp, #32
 8019952:	6851      	ldr	r1, [r2, #4]
 8019954:	c303      	stmia	r3!, {r0, r1}
 8019956:	a806      	add	r0, sp, #24
 8019958:	f7f8 faf0 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801995c:	4629      	mov	r1, r5
 801995e:	a808      	add	r0, sp, #32
 8019960:	f7f8 fb30 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019964:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019968:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801996c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019970:	6838      	ldr	r0, [r7, #0]
 8019972:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019976:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801997a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801997e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019982:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019986:	440a      	add	r2, r1
 8019988:	f8ad 2020 	strh.w	r2, [sp, #32]
 801998c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019990:	4413      	add	r3, r2
 8019992:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019996:	6803      	ldr	r3, [r0, #0]
 8019998:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801999a:	4798      	blx	r3
 801999c:	2eff      	cmp	r6, #255	@ 0xff
 801999e:	d119      	bne.n	80199d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80199a0:	f010 0f20 	tst.w	r0, #32
 80199a4:	6838      	ldr	r0, [r7, #0]
 80199a6:	d018      	beq.n	80199da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80199a8:	b2ad      	uxth	r5, r5
 80199aa:	2700      	movs	r7, #0
 80199ac:	6801      	ldr	r1, [r0, #0]
 80199ae:	9501      	str	r5, [sp, #4]
 80199b0:	fa1f f588 	uxth.w	r5, r8
 80199b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80199b8:	9500      	str	r5, [sp, #0]
 80199ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80199be:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80199c2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80199c6:	9602      	str	r6, [sp, #8]
 80199c8:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80199ca:	4621      	mov	r1, r4
 80199cc:	47a8      	blx	r5
 80199ce:	b00a      	add	sp, #40	@ 0x28
 80199d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199d4:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80199d8:	e7e4      	b.n	80199a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80199da:	6803      	ldr	r3, [r0, #0]
 80199dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199de:	4798      	blx	r3
 80199e0:	4b38      	ldr	r3, [pc, #224]	@ (8019ac4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80199e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80199e6:	f8b3 c000 	ldrh.w	ip, [r3]
 80199ea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80199ee:	fb0c f505 	mul.w	r5, ip, r5
 80199f2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80199f6:	fb0c 2303 	mla	r3, ip, r3, r2
 80199fa:	ebac 0c08 	sub.w	ip, ip, r8
 80199fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019a02:	ebae 0e08 	sub.w	lr, lr, r8
 8019a06:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a0a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019a0e:	4418      	add	r0, r3
 8019a10:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019a14:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019a18:	4405      	add	r5, r0
 8019a1a:	42a8      	cmp	r0, r5
 8019a1c:	d24a      	bcs.n	8019ab4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 8019a1e:	eb00 0803 	add.w	r8, r0, r3
 8019a22:	4540      	cmp	r0, r8
 8019a24:	d243      	bcs.n	8019aae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8019a26:	78e2      	ldrb	r2, [r4, #3]
 8019a28:	b15a      	cbz	r2, 8019a42 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 8019a2a:	2aff      	cmp	r2, #255	@ 0xff
 8019a2c:	f894 9000 	ldrb.w	r9, [r4]
 8019a30:	d10a      	bne.n	8019a48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019a32:	2eff      	cmp	r6, #255	@ 0xff
 8019a34:	d108      	bne.n	8019a48 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019a36:	f880 9000 	strb.w	r9, [r0]
 8019a3a:	7862      	ldrb	r2, [r4, #1]
 8019a3c:	7042      	strb	r2, [r0, #1]
 8019a3e:	78a2      	ldrb	r2, [r4, #2]
 8019a40:	7082      	strb	r2, [r0, #2]
 8019a42:	3003      	adds	r0, #3
 8019a44:	3404      	adds	r4, #4
 8019a46:	e7ec      	b.n	8019a22 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8019a48:	4372      	muls	r2, r6
 8019a4a:	1c51      	adds	r1, r2, #1
 8019a4c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8019a50:	1209      	asrs	r1, r1, #8
 8019a52:	fa1f fa81 	uxth.w	sl, r1
 8019a56:	43c9      	mvns	r1, r1
 8019a58:	fb19 f90a 	smulbb	r9, r9, sl
 8019a5c:	b2ca      	uxtb	r2, r1
 8019a5e:	7801      	ldrb	r1, [r0, #0]
 8019a60:	fb01 9902 	mla	r9, r1, r2, r9
 8019a64:	fa1f f989 	uxth.w	r9, r9
 8019a68:	f109 0101 	add.w	r1, r9, #1
 8019a6c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8019a70:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019a74:	f880 9000 	strb.w	r9, [r0]
 8019a78:	f890 9001 	ldrb.w	r9, [r0, #1]
 8019a7c:	7861      	ldrb	r1, [r4, #1]
 8019a7e:	fb19 f902 	smulbb	r9, r9, r2
 8019a82:	fb01 910a 	mla	r1, r1, sl, r9
 8019a86:	b289      	uxth	r1, r1
 8019a88:	f101 0901 	add.w	r9, r1, #1
 8019a8c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8019a90:	1209      	asrs	r1, r1, #8
 8019a92:	7041      	strb	r1, [r0, #1]
 8019a94:	7881      	ldrb	r1, [r0, #2]
 8019a96:	f894 9002 	ldrb.w	r9, [r4, #2]
 8019a9a:	fb11 f202 	smulbb	r2, r1, r2
 8019a9e:	fb09 220a 	mla	r2, r9, sl, r2
 8019aa2:	b292      	uxth	r2, r2
 8019aa4:	1c51      	adds	r1, r2, #1
 8019aa6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8019aaa:	1212      	asrs	r2, r2, #8
 8019aac:	e7c8      	b.n	8019a40 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 8019aae:	4460      	add	r0, ip
 8019ab0:	4474      	add	r4, lr
 8019ab2:	e7b2      	b.n	8019a1a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 8019ab4:	6838      	ldr	r0, [r7, #0]
 8019ab6:	6803      	ldr	r3, [r0, #0]
 8019ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019aba:	4798      	blx	r3
 8019abc:	e787      	b.n	80199ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 8019abe:	bf00      	nop
 8019ac0:	24025274 	.word	0x24025274
 8019ac4:	2402526e 	.word	0x2402526e

08019ac8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019acc:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 8019ad0:	4607      	mov	r7, r0
 8019ad2:	460c      	mov	r4, r1
 8019ad4:	4692      	mov	sl, r2
 8019ad6:	4699      	mov	r9, r3
 8019ad8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019ada:	b335      	cbz	r5, 8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019adc:	4608      	mov	r0, r1
 8019ade:	f7fb fd93 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019ae2:	4680      	mov	r8, r0
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	f7fb fdc3 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019aea:	f8ad 000e 	strh.w	r0, [sp, #14]
 8019aee:	4620      	mov	r0, r4
 8019af0:	f8ad a008 	strh.w	sl, [sp, #8]
 8019af4:	f8ad 900a 	strh.w	r9, [sp, #10]
 8019af8:	f8ad 800c 	strh.w	r8, [sp, #12]
 8019afc:	f7fb fefa 	bl	80158f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019b00:	2810      	cmp	r0, #16
 8019b02:	d812      	bhi.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019b04:	e8df f000 	tbb	[pc, r0]
 8019b08:	11092d24 	.word	0x11092d24
 8019b0c:	11111111 	.word	0x11111111
 8019b10:	14111111 	.word	0x14111111
 8019b14:	4c111111 	.word	0x4c111111
 8019b18:	3c          	.byte	0x3c
 8019b19:	00          	.byte	0x00
 8019b1a:	4620      	mov	r0, r4
 8019b1c:	f7fb fe66 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b20:	462b      	mov	r3, r5
 8019b22:	4632      	mov	r2, r6
 8019b24:	a902      	add	r1, sp, #8
 8019b26:	f7ff ff07 	bl	8019938 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019b2a:	b004      	add	sp, #16
 8019b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b30:	4620      	mov	r0, r4
 8019b32:	f7fb fe5b 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b36:	4680      	mov	r8, r0
 8019b38:	4620      	mov	r0, r4
 8019b3a:	f7fb fe87 	bl	801584c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019b3e:	ab02      	add	r3, sp, #8
 8019b40:	4602      	mov	r2, r0
 8019b42:	4641      	mov	r1, r8
 8019b44:	4638      	mov	r0, r7
 8019b46:	e9cd 6500 	strd	r6, r5, [sp]
 8019b4a:	f7ff fdbf 	bl	80196cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8019b4e:	e7ec      	b.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019b50:	4620      	mov	r0, r4
 8019b52:	f7fb fe4b 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b56:	462b      	mov	r3, r5
 8019b58:	4632      	mov	r2, r6
 8019b5a:	a902      	add	r1, sp, #8
 8019b5c:	f7ff fdf8 	bl	8019750 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019b60:	e7e3      	b.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019b62:	683b      	ldr	r3, [r7, #0]
 8019b64:	4620      	mov	r0, r4
 8019b66:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019b6a:	f7fb fe3f 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b6e:	2300      	movs	r3, #0
 8019b70:	4601      	mov	r1, r0
 8019b72:	aa02      	add	r2, sp, #8
 8019b74:	4638      	mov	r0, r7
 8019b76:	e9cd 5300 	strd	r5, r3, [sp]
 8019b7a:	4633      	mov	r3, r6
 8019b7c:	47c0      	blx	r8
 8019b7e:	e7d4      	b.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019b80:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8019b82:	2f00      	cmp	r7, #0
 8019b84:	d0d1      	beq.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019b86:	683b      	ldr	r3, [r7, #0]
 8019b88:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8019b8c:	4620      	mov	r0, r4
 8019b8e:	f7fb fe2d 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019b92:	9500      	str	r5, [sp, #0]
 8019b94:	4601      	mov	r1, r0
 8019b96:	4633      	mov	r3, r6
 8019b98:	aa02      	add	r2, sp, #8
 8019b9a:	4638      	mov	r0, r7
 8019b9c:	47c0      	blx	r8
 8019b9e:	e7c4      	b.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019ba0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8019ba2:	2f00      	cmp	r7, #0
 8019ba4:	d0c1      	beq.n	8019b2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019ba6:	683b      	ldr	r3, [r7, #0]
 8019ba8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019bac:	e7ee      	b.n	8019b8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08019bae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019bae:	b4f0      	push	{r4, r5, r6, r7}
 8019bb0:	4616      	mov	r6, r2
 8019bb2:	461c      	mov	r4, r3
 8019bb4:	460d      	mov	r5, r1
 8019bb6:	9a04      	ldr	r2, [sp, #16]
 8019bb8:	2e01      	cmp	r6, #1
 8019bba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019bbe:	d00e      	beq.n	8019bde <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8019bc0:	d303      	bcc.n	8019bca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8019bc2:	2e02      	cmp	r6, #2
 8019bc4:	d006      	beq.n	8019bd4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8019bc6:	bcf0      	pop	{r4, r5, r6, r7}
 8019bc8:	4770      	bx	lr
 8019bca:	4621      	mov	r1, r4
 8019bcc:	4628      	mov	r0, r5
 8019bce:	bcf0      	pop	{r4, r5, r6, r7}
 8019bd0:	f7ff bdbe 	b.w	8019750 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019bd4:	4621      	mov	r1, r4
 8019bd6:	4628      	mov	r0, r5
 8019bd8:	bcf0      	pop	{r4, r5, r6, r7}
 8019bda:	f7ff bead 	b.w	8019938 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019bde:	6805      	ldr	r5, [r0, #0]
 8019be0:	2600      	movs	r6, #0
 8019be2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8019be6:	68ed      	ldr	r5, [r5, #12]
 8019be8:	4613      	mov	r3, r2
 8019bea:	4622      	mov	r2, r4
 8019bec:	46ac      	mov	ip, r5
 8019bee:	bcf0      	pop	{r4, r5, r6, r7}
 8019bf0:	4760      	bx	ip
	...

08019bf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8019bf4:	b160      	cbz	r0, 8019c10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8019bf6:	2903      	cmp	r1, #3
 8019bf8:	d818      	bhi.n	8019c2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019bfa:	e8df f001 	tbb	[pc, r1]
 8019bfe:	1902      	.short	0x1902
 8019c00:	1b06      	.short	0x1b06
 8019c02:	4b0e      	ldr	r3, [pc, #56]	@ (8019c3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019c04:	8818      	ldrh	r0, [r3, #0]
 8019c06:	4240      	negs	r0, r0
 8019c08:	4770      	bx	lr
 8019c0a:	4b0c      	ldr	r3, [pc, #48]	@ (8019c3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019c0c:	8818      	ldrh	r0, [r3, #0]
 8019c0e:	4770      	bx	lr
 8019c10:	2903      	cmp	r1, #3
 8019c12:	d80b      	bhi.n	8019c2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019c14:	a301      	add	r3, pc, #4	@ (adr r3, 8019c1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8019c16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019c1a:	bf00      	nop
 8019c1c:	08019c31 	.word	0x08019c31
 8019c20:	08019c0b 	.word	0x08019c0b
 8019c24:	08019c35 	.word	0x08019c35
 8019c28:	08019c03 	.word	0x08019c03
 8019c2c:	2000      	movs	r0, #0
 8019c2e:	4770      	bx	lr
 8019c30:	2001      	movs	r0, #1
 8019c32:	4770      	bx	lr
 8019c34:	f04f 30ff 	mov.w	r0, #4294967295
 8019c38:	4770      	bx	lr
 8019c3a:	bf00      	nop
 8019c3c:	2402526e 	.word	0x2402526e

08019c40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8019c40:	b160      	cbz	r0, 8019c5c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8019c42:	2903      	cmp	r1, #3
 8019c44:	d818      	bhi.n	8019c78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019c46:	e8df f001 	tbb	[pc, r1]
 8019c4a:	0219      	.short	0x0219
 8019c4c:	051b      	.short	0x051b
 8019c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8019c88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019c50:	8818      	ldrh	r0, [r3, #0]
 8019c52:	4770      	bx	lr
 8019c54:	4b0c      	ldr	r3, [pc, #48]	@ (8019c88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019c56:	8818      	ldrh	r0, [r3, #0]
 8019c58:	4240      	negs	r0, r0
 8019c5a:	4770      	bx	lr
 8019c5c:	2903      	cmp	r1, #3
 8019c5e:	d80b      	bhi.n	8019c78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019c60:	a301      	add	r3, pc, #4	@ (adr r3, 8019c68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8019c62:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019c66:	bf00      	nop
 8019c68:	08019c4f 	.word	0x08019c4f
 8019c6c:	08019c81 	.word	0x08019c81
 8019c70:	08019c55 	.word	0x08019c55
 8019c74:	08019c7d 	.word	0x08019c7d
 8019c78:	2000      	movs	r0, #0
 8019c7a:	4770      	bx	lr
 8019c7c:	2001      	movs	r0, #1
 8019c7e:	4770      	bx	lr
 8019c80:	f04f 30ff 	mov.w	r0, #4294967295
 8019c84:	4770      	bx	lr
 8019c86:	bf00      	nop
 8019c88:	2402526e 	.word	0x2402526e

08019c8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c90:	b097      	sub	sp, #92	@ 0x5c
 8019c92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019c94:	a912      	add	r1, sp, #72	@ 0x48
 8019c96:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8019c9a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8019c9e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8019ca2:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8019ca6:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8019caa:	e881 000c 	stmia.w	r1, {r2, r3}
 8019cae:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8019cb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cb4:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8019cb8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8019cbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8019cbe:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8019cc2:	798d      	ldrb	r5, [r1, #6]
 8019cc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019cc6:	7b4b      	ldrb	r3, [r1, #13]
 8019cc8:	0158      	lsls	r0, r3, #5
 8019cca:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019cce:	4328      	orrs	r0, r5
 8019cd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8019cd2:	f000 817c 	beq.w	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019cd6:	011b      	lsls	r3, r3, #4
 8019cd8:	79c8      	ldrb	r0, [r1, #7]
 8019cda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019cde:	4303      	orrs	r3, r0
 8019ce0:	930e      	str	r3, [sp, #56]	@ 0x38
 8019ce2:	f000 8174 	beq.w	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019ce6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8019cea:	b29b      	uxth	r3, r3
 8019cec:	2f00      	cmp	r7, #0
 8019cee:	f000 8116 	beq.w	8019f1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8019cf2:	1aff      	subs	r7, r7, r3
 8019cf4:	b2bf      	uxth	r7, r7
 8019cf6:	043b      	lsls	r3, r7, #16
 8019cf8:	d502      	bpl.n	8019d00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019cfa:	1bf6      	subs	r6, r6, r7
 8019cfc:	2700      	movs	r7, #0
 8019cfe:	b236      	sxth	r6, r6
 8019d00:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019d04:	a812      	add	r0, sp, #72	@ 0x48
 8019d06:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8019d0a:	428e      	cmp	r6, r1
 8019d0c:	b28b      	uxth	r3, r1
 8019d0e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8019d12:	bfbf      	itttt	lt
 8019d14:	18ff      	addlt	r7, r7, r3
 8019d16:	1bbe      	sublt	r6, r7, r6
 8019d18:	b2b7      	uxthlt	r7, r6
 8019d1a:	460e      	movlt	r6, r1
 8019d1c:	8891      	ldrh	r1, [r2, #4]
 8019d1e:	440b      	add	r3, r1
 8019d20:	4631      	mov	r1, r6
 8019d22:	b21b      	sxth	r3, r3
 8019d24:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d26:	88d3      	ldrh	r3, [r2, #6]
 8019d28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d2a:	449a      	add	sl, r3
 8019d2c:	fa0f f38a 	sxth.w	r3, sl
 8019d30:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8019d34:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019d36:	4bb5      	ldr	r3, [pc, #724]	@ (801a00c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8019d38:	f893 b000 	ldrb.w	fp, [r3]
 8019d3c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8019d40:	f1dc 0300 	rsbs	r3, ip, #0
 8019d44:	eb43 030c 	adc.w	r3, r3, ip
 8019d48:	930d      	str	r3, [sp, #52]	@ 0x34
 8019d4a:	464b      	mov	r3, r9
 8019d4c:	f7f7 ff6a 	bl	8011c24 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019d50:	4631      	mov	r1, r6
 8019d52:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8019d56:	464b      	mov	r3, r9
 8019d58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d5a:	a812      	add	r0, sp, #72	@ 0x48
 8019d5c:	f7f7 ff7f 	bl	8011c5e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019d60:	a916      	add	r1, sp, #88	@ 0x58
 8019d62:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019d66:	a815      	add	r0, sp, #84	@ 0x54
 8019d68:	f7f8 f8a6 	bl	8011eb8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019d6c:	f1b9 0f00 	cmp.w	r9, #0
 8019d70:	f040 80d8 	bne.w	8019f24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019d74:	f1bb 0f01 	cmp.w	fp, #1
 8019d78:	f040 80dc 	bne.w	8019f34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8019d7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019d7e:	b153      	cbz	r3, 8019d96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8019d80:	2508      	movs	r5, #8
 8019d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019d84:	fb95 f3f8 	sdiv	r3, r5, r8
 8019d88:	1e5d      	subs	r5, r3, #1
 8019d8a:	4415      	add	r5, r2
 8019d8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019d90:	fb15 f503 	smulbb	r5, r5, r3
 8019d94:	b2ad      	uxth	r5, r5
 8019d96:	b907      	cbnz	r7, 8019d9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8019d98:	b16c      	cbz	r4, 8019db6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8019d9a:	fb04 7305 	mla	r3, r4, r5, r7
 8019d9e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8019da0:	ebaa 0a04 	sub.w	sl, sl, r4
 8019da4:	fb08 f303 	mul.w	r3, r8, r3
 8019da8:	fa1f fa8a 	uxth.w	sl, sl
 8019dac:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8019db0:	f003 0407 	and.w	r4, r3, #7
 8019db4:	9226      	str	r2, [sp, #152]	@ 0x98
 8019db6:	4649      	mov	r1, r9
 8019db8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019dba:	f7ff ff1b 	bl	8019bf4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8019dbe:	4683      	mov	fp, r0
 8019dc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019dc2:	f7ff ff3d 	bl	8019c40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8019dc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019dc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019dca:	4681      	mov	r9, r0
 8019dcc:	1a9b      	subs	r3, r3, r2
 8019dce:	459a      	cmp	sl, r3
 8019dd0:	bfa8      	it	ge
 8019dd2:	469a      	movge	sl, r3
 8019dd4:	f1ba 0f00 	cmp.w	sl, #0
 8019dd8:	f340 80f9 	ble.w	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019ddc:	1bf6      	subs	r6, r6, r7
 8019dde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019de0:	1b9e      	subs	r6, r3, r6
 8019de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019de4:	429e      	cmp	r6, r3
 8019de6:	bfd4      	ite	le
 8019de8:	ebc7 0706 	rsble	r7, r7, r6
 8019dec:	ebc7 0703 	rsbgt	r7, r7, r3
 8019df0:	2f00      	cmp	r7, #0
 8019df2:	f340 80ec 	ble.w	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019df6:	1bed      	subs	r5, r5, r7
 8019df8:	fb08 f305 	mul.w	r3, r8, r5
 8019dfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8019dfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019e00:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8019e04:	930e      	str	r3, [sp, #56]	@ 0x38
 8019e06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019e08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019e0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019e0e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019e10:	b2db      	uxtb	r3, r3
 8019e12:	9310      	str	r3, [sp, #64]	@ 0x40
 8019e14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	f040 80de 	bne.w	8019fd8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8019e1c:	4b7c      	ldr	r3, [pc, #496]	@ (801a010 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8019e1e:	6818      	ldr	r0, [r3, #0]
 8019e20:	6803      	ldr	r3, [r0, #0]
 8019e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019e24:	4798      	blx	r3
 8019e26:	2301      	movs	r3, #1
 8019e28:	4a7a      	ldr	r2, [pc, #488]	@ (801a014 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019e2a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8019e2e:	fb07 9b1b 	mls	fp, r7, fp, r9
 8019e32:	fa03 f308 	lsl.w	r3, r3, r8
 8019e36:	8811      	ldrh	r1, [r2, #0]
 8019e38:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8019e3c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8019e40:	3b01      	subs	r3, #1
 8019e42:	fb06 bb07 	mla	fp, r6, r7, fp
 8019e46:	b2db      	uxtb	r3, r3
 8019e48:	930a      	str	r3, [sp, #40]	@ 0x28
 8019e4a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8019e4e:	fb01 2303 	mla	r3, r1, r3, r2
 8019e52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e56:	18c3      	adds	r3, r0, r3
 8019e58:	9309      	str	r3, [sp, #36]	@ 0x24
 8019e5a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019e5c:	781a      	ldrb	r2, [r3, #0]
 8019e5e:	4122      	asrs	r2, r4
 8019e60:	b2d2      	uxtb	r2, r2
 8019e62:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019e66:	f0c0 80d7 	bcc.w	801a018 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019e6a:	46be      	mov	lr, r7
 8019e6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019e6e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8019e72:	f0c0 80ba 	bcc.w	8019fea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019e76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019e78:	4013      	ands	r3, r2
 8019e7a:	d041      	beq.n	8019f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019e7c:	20ff      	movs	r0, #255	@ 0xff
 8019e7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019e80:	fb90 f5f5 	sdiv	r5, r0, r5
 8019e84:	436b      	muls	r3, r5
 8019e86:	2bfe      	cmp	r3, #254	@ 0xfe
 8019e88:	dd03      	ble.n	8019e92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8019e8a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019e8c:	4285      	cmp	r5, r0
 8019e8e:	f000 80a5 	beq.w	8019fdc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8019e92:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019e94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019e96:	fb15 f303 	smulbb	r3, r5, r3
 8019e9a:	b29b      	uxth	r3, r3
 8019e9c:	1c5d      	adds	r5, r3, #1
 8019e9e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8019ea2:	780d      	ldrb	r5, [r1, #0]
 8019ea4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019ea8:	fa1f fc83 	uxth.w	ip, r3
 8019eac:	43db      	mvns	r3, r3
 8019eae:	fb10 f90c 	smulbb	r9, r0, ip
 8019eb2:	b2db      	uxtb	r3, r3
 8019eb4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019eb6:	fb05 9503 	mla	r5, r5, r3, r9
 8019eba:	b2ad      	uxth	r5, r5
 8019ebc:	f105 0901 	add.w	r9, r5, #1
 8019ec0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019ec4:	fb10 f90c 	smulbb	r9, r0, ip
 8019ec8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019eca:	122d      	asrs	r5, r5, #8
 8019ecc:	fb10 fc0c 	smulbb	ip, r0, ip
 8019ed0:	700d      	strb	r5, [r1, #0]
 8019ed2:	784d      	ldrb	r5, [r1, #1]
 8019ed4:	fb05 9503 	mla	r5, r5, r3, r9
 8019ed8:	b2ad      	uxth	r5, r5
 8019eda:	f105 0901 	add.w	r9, r5, #1
 8019ede:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019ee2:	122d      	asrs	r5, r5, #8
 8019ee4:	704d      	strb	r5, [r1, #1]
 8019ee6:	788d      	ldrb	r5, [r1, #2]
 8019ee8:	fb05 cc03 	mla	ip, r5, r3, ip
 8019eec:	fa1f fc8c 	uxth.w	ip, ip
 8019ef0:	f10c 0301 	add.w	r3, ip, #1
 8019ef4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019ef8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019efc:	f881 c002 	strb.w	ip, [r1, #2]
 8019f00:	4444      	add	r4, r8
 8019f02:	4431      	add	r1, r6
 8019f04:	b2a4      	uxth	r4, r4
 8019f06:	2c07      	cmp	r4, #7
 8019f08:	bf89      	itett	hi
 8019f0a:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8019f0c:	fa42 f208 	asrls.w	r2, r2, r8
 8019f10:	2400      	movhi	r4, #0
 8019f12:	785a      	ldrbhi	r2, [r3, #1]
 8019f14:	bf8a      	itet	hi
 8019f16:	3301      	addhi	r3, #1
 8019f18:	b2d2      	uxtbls	r2, r2
 8019f1a:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8019f1c:	e7a7      	b.n	8019e6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8019f1e:	441e      	add	r6, r3
 8019f20:	b236      	sxth	r6, r6
 8019f22:	e6ed      	b.n	8019d00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019f24:	f1b9 0f01 	cmp.w	r9, #1
 8019f28:	f47f af28 	bne.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f2c:	f1bb 0f01 	cmp.w	fp, #1
 8019f30:	f47f af24 	bne.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f34:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801a010 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8019f38:	f8db 0000 	ldr.w	r0, [fp]
 8019f3c:	6803      	ldr	r3, [r0, #0]
 8019f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019f40:	4798      	blx	r3
 8019f42:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8019f46:	465a      	mov	r2, fp
 8019f48:	d006      	beq.n	8019f58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019f4a:	f1b8 0f04 	cmp.w	r8, #4
 8019f4e:	d141      	bne.n	8019fd4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8019f50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019f52:	3300      	adds	r3, #0
 8019f54:	bf18      	it	ne
 8019f56:	2301      	movne	r3, #1
 8019f58:	0580      	lsls	r0, r0, #22
 8019f5a:	d566      	bpl.n	801a02a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019f5c:	f1b8 0f08 	cmp.w	r8, #8
 8019f60:	d163      	bne.n	801a02a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	bf0c      	ite	eq
 8019f66:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8019f6a:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8019f6e:	2f00      	cmp	r7, #0
 8019f70:	f47f af04 	bne.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f74:	2c00      	cmp	r4, #0
 8019f76:	f47f af01 	bne.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019f7e:	18f3      	adds	r3, r6, r3
 8019f80:	4283      	cmp	r3, r0
 8019f82:	f73f aefb 	bgt.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019f88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019f8a:	4403      	add	r3, r0
 8019f8c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019f8e:	4283      	cmp	r3, r0
 8019f90:	f73f aef4 	bgt.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f94:	f1b8 0f08 	cmp.w	r8, #8
 8019f98:	6810      	ldr	r0, [r2, #0]
 8019f9a:	f04f 0600 	mov.w	r6, #0
 8019f9e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8019fa2:	bf18      	it	ne
 8019fa4:	3501      	addne	r5, #1
 8019fa6:	6804      	ldr	r4, [r0, #0]
 8019fa8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8019fac:	bf18      	it	ne
 8019fae:	f025 0501 	bicne.w	r5, r5, #1
 8019fb2:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8019fb6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019fb8:	bf18      	it	ne
 8019fba:	b2ad      	uxthne	r5, r5
 8019fbc:	9104      	str	r1, [sp, #16]
 8019fbe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8019fc0:	e9cd 5a00 	strd	r5, sl, [sp]
 8019fc4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8019fc8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8019fca:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8019fcc:	47a0      	blx	r4
 8019fce:	b017      	add	sp, #92	@ 0x5c
 8019fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fd4:	2300      	movs	r3, #0
 8019fd6:	e7bf      	b.n	8019f58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019fd8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019fda:	e724      	b.n	8019e26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8019fdc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019fde:	700b      	strb	r3, [r1, #0]
 8019fe0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019fe2:	704b      	strb	r3, [r1, #1]
 8019fe4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019fe6:	708b      	strb	r3, [r1, #2]
 8019fe8:	e78a      	b.n	8019f00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019fec:	b153      	cbz	r3, 801a004 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8019fee:	441c      	add	r4, r3
 8019ff0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019ff2:	b2a4      	uxth	r4, r4
 8019ff4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8019ff8:	f004 0407 	and.w	r4, r4, #7
 8019ffc:	781a      	ldrb	r2, [r3, #0]
 8019ffe:	9326      	str	r3, [sp, #152]	@ 0x98
 801a000:	4122      	asrs	r2, r4
 801a002:	b2d2      	uxtb	r2, r2
 801a004:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a006:	445b      	add	r3, fp
 801a008:	9309      	str	r3, [sp, #36]	@ 0x24
 801a00a:	e72a      	b.n	8019e62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801a00c:	2402526c 	.word	0x2402526c
 801a010:	24025274 	.word	0x24025274
 801a014:	2402526e 	.word	0x2402526e
 801a018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d1d7      	bne.n	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801a01e:	4b06      	ldr	r3, [pc, #24]	@ (801a038 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801a020:	6818      	ldr	r0, [r3, #0]
 801a022:	6803      	ldr	r3, [r0, #0]
 801a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a026:	4798      	blx	r3
 801a028:	e7d1      	b.n	8019fce <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	f43f aea6 	beq.w	8019d7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801a030:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801a034:	e79b      	b.n	8019f6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801a036:	bf00      	nop
 801a038:	24025274 	.word	0x24025274

0801a03c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801a03c:	b538      	push	{r3, r4, r5, lr}
 801a03e:	4c15      	ldr	r4, [pc, #84]	@ (801a094 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801a040:	4605      	mov	r5, r0
 801a042:	7823      	ldrb	r3, [r4, #0]
 801a044:	f3bf 8f5b 	dmb	ish
 801a048:	07da      	lsls	r2, r3, #31
 801a04a:	d40b      	bmi.n	801a064 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801a04c:	4620      	mov	r0, r4
 801a04e:	f007 fcce 	bl	80219ee <__cxa_guard_acquire>
 801a052:	b138      	cbz	r0, 801a064 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801a054:	4620      	mov	r0, r4
 801a056:	f007 fcd6 	bl	8021a06 <__cxa_guard_release>
 801a05a:	4a0f      	ldr	r2, [pc, #60]	@ (801a098 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801a05c:	490f      	ldr	r1, [pc, #60]	@ (801a09c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801a05e:	4810      	ldr	r0, [pc, #64]	@ (801a0a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801a060:	f007 fcbe 	bl	80219e0 <__aeabi_atexit>
 801a064:	4c0f      	ldr	r4, [pc, #60]	@ (801a0a4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801a066:	7823      	ldrb	r3, [r4, #0]
 801a068:	f3bf 8f5b 	dmb	ish
 801a06c:	07db      	lsls	r3, r3, #31
 801a06e:	d40b      	bmi.n	801a088 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801a070:	4620      	mov	r0, r4
 801a072:	f007 fcbc 	bl	80219ee <__cxa_guard_acquire>
 801a076:	b138      	cbz	r0, 801a088 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801a078:	4620      	mov	r0, r4
 801a07a:	f007 fcc4 	bl	8021a06 <__cxa_guard_release>
 801a07e:	4a06      	ldr	r2, [pc, #24]	@ (801a098 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801a080:	4909      	ldr	r1, [pc, #36]	@ (801a0a8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801a082:	480a      	ldr	r0, [pc, #40]	@ (801a0ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801a084:	f007 fcac 	bl	80219e0 <__aeabi_atexit>
 801a088:	4b05      	ldr	r3, [pc, #20]	@ (801a0a0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801a08a:	616b      	str	r3, [r5, #20]
 801a08c:	4b07      	ldr	r3, [pc, #28]	@ (801a0ac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801a08e:	61ab      	str	r3, [r5, #24]
 801a090:	bd38      	pop	{r3, r4, r5, pc}
 801a092:	bf00      	nop
 801a094:	24025358 	.word	0x24025358
 801a098:	24000000 	.word	0x24000000
 801a09c:	0801732d 	.word	0x0801732d
 801a0a0:	240000c8 	.word	0x240000c8
 801a0a4:	2402535c 	.word	0x2402535c
 801a0a8:	0801732b 	.word	0x0801732b
 801a0ac:	240000cc 	.word	0x240000cc

0801a0b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801a0b0:	b538      	push	{r3, r4, r5, lr}
 801a0b2:	4c15      	ldr	r4, [pc, #84]	@ (801a108 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801a0b4:	4605      	mov	r5, r0
 801a0b6:	7823      	ldrb	r3, [r4, #0]
 801a0b8:	f3bf 8f5b 	dmb	ish
 801a0bc:	07da      	lsls	r2, r3, #31
 801a0be:	d40b      	bmi.n	801a0d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801a0c0:	4620      	mov	r0, r4
 801a0c2:	f007 fc94 	bl	80219ee <__cxa_guard_acquire>
 801a0c6:	b138      	cbz	r0, 801a0d8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801a0c8:	4620      	mov	r0, r4
 801a0ca:	f007 fc9c 	bl	8021a06 <__cxa_guard_release>
 801a0ce:	4a0f      	ldr	r2, [pc, #60]	@ (801a10c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801a0d0:	490f      	ldr	r1, [pc, #60]	@ (801a110 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801a0d2:	4810      	ldr	r0, [pc, #64]	@ (801a114 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801a0d4:	f007 fc84 	bl	80219e0 <__aeabi_atexit>
 801a0d8:	4c0f      	ldr	r4, [pc, #60]	@ (801a118 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801a0da:	7823      	ldrb	r3, [r4, #0]
 801a0dc:	f3bf 8f5b 	dmb	ish
 801a0e0:	07db      	lsls	r3, r3, #31
 801a0e2:	d40b      	bmi.n	801a0fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801a0e4:	4620      	mov	r0, r4
 801a0e6:	f007 fc82 	bl	80219ee <__cxa_guard_acquire>
 801a0ea:	b138      	cbz	r0, 801a0fc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801a0ec:	4620      	mov	r0, r4
 801a0ee:	f007 fc8a 	bl	8021a06 <__cxa_guard_release>
 801a0f2:	4a06      	ldr	r2, [pc, #24]	@ (801a10c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801a0f4:	4909      	ldr	r1, [pc, #36]	@ (801a11c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801a0f6:	480a      	ldr	r0, [pc, #40]	@ (801a120 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801a0f8:	f007 fc72 	bl	80219e0 <__aeabi_atexit>
 801a0fc:	4b05      	ldr	r3, [pc, #20]	@ (801a114 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801a0fe:	60eb      	str	r3, [r5, #12]
 801a100:	4b07      	ldr	r3, [pc, #28]	@ (801a120 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801a102:	612b      	str	r3, [r5, #16]
 801a104:	bd38      	pop	{r3, r4, r5, pc}
 801a106:	bf00      	nop
 801a108:	24025338 	.word	0x24025338
 801a10c:	24000000 	.word	0x24000000
 801a110:	08017331 	.word	0x08017331
 801a114:	240000a8 	.word	0x240000a8
 801a118:	2402533c 	.word	0x2402533c
 801a11c:	0801732f 	.word	0x0801732f
 801a120:	240000ac 	.word	0x240000ac

0801a124 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801a124:	b510      	push	{r4, lr}
 801a126:	4604      	mov	r4, r0
 801a128:	f7ff ff88 	bl	801a03c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801a12c:	4620      	mov	r0, r4
 801a12e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a132:	f7ff bfbd 	b.w	801a0b0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801a138 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801a138:	b538      	push	{r3, r4, r5, lr}
 801a13a:	4c15      	ldr	r4, [pc, #84]	@ (801a190 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a13c:	4605      	mov	r5, r0
 801a13e:	7823      	ldrb	r3, [r4, #0]
 801a140:	f3bf 8f5b 	dmb	ish
 801a144:	07da      	lsls	r2, r3, #31
 801a146:	d40b      	bmi.n	801a160 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801a148:	4620      	mov	r0, r4
 801a14a:	f007 fc50 	bl	80219ee <__cxa_guard_acquire>
 801a14e:	b138      	cbz	r0, 801a160 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801a150:	4620      	mov	r0, r4
 801a152:	f007 fc58 	bl	8021a06 <__cxa_guard_release>
 801a156:	4a0f      	ldr	r2, [pc, #60]	@ (801a194 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a158:	490f      	ldr	r1, [pc, #60]	@ (801a198 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a15a:	4810      	ldr	r0, [pc, #64]	@ (801a19c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a15c:	f007 fc40 	bl	80219e0 <__aeabi_atexit>
 801a160:	4c0f      	ldr	r4, [pc, #60]	@ (801a1a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801a162:	7823      	ldrb	r3, [r4, #0]
 801a164:	f3bf 8f5b 	dmb	ish
 801a168:	07db      	lsls	r3, r3, #31
 801a16a:	d40b      	bmi.n	801a184 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801a16c:	4620      	mov	r0, r4
 801a16e:	f007 fc3e 	bl	80219ee <__cxa_guard_acquire>
 801a172:	b138      	cbz	r0, 801a184 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801a174:	4620      	mov	r0, r4
 801a176:	f007 fc46 	bl	8021a06 <__cxa_guard_release>
 801a17a:	4a06      	ldr	r2, [pc, #24]	@ (801a194 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a17c:	4909      	ldr	r1, [pc, #36]	@ (801a1a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a17e:	480a      	ldr	r0, [pc, #40]	@ (801a1a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801a180:	f007 fc2e 	bl	80219e0 <__aeabi_atexit>
 801a184:	4b05      	ldr	r3, [pc, #20]	@ (801a19c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a186:	626b      	str	r3, [r5, #36]	@ 0x24
 801a188:	4b07      	ldr	r3, [pc, #28]	@ (801a1a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801a18a:	62ab      	str	r3, [r5, #40]	@ 0x28
 801a18c:	bd38      	pop	{r3, r4, r5, pc}
 801a18e:	bf00      	nop
 801a190:	24025360 	.word	0x24025360
 801a194:	24000000 	.word	0x24000000
 801a198:	08017325 	.word	0x08017325
 801a19c:	240000d0 	.word	0x240000d0
 801a1a0:	24025364 	.word	0x24025364
 801a1a4:	08017323 	.word	0x08017323
 801a1a8:	240000d4 	.word	0x240000d4

0801a1ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801a1ac:	b538      	push	{r3, r4, r5, lr}
 801a1ae:	4c15      	ldr	r4, [pc, #84]	@ (801a204 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a1b0:	4605      	mov	r5, r0
 801a1b2:	7823      	ldrb	r3, [r4, #0]
 801a1b4:	f3bf 8f5b 	dmb	ish
 801a1b8:	07da      	lsls	r2, r3, #31
 801a1ba:	d40b      	bmi.n	801a1d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a1bc:	4620      	mov	r0, r4
 801a1be:	f007 fc16 	bl	80219ee <__cxa_guard_acquire>
 801a1c2:	b138      	cbz	r0, 801a1d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a1c4:	4620      	mov	r0, r4
 801a1c6:	f007 fc1e 	bl	8021a06 <__cxa_guard_release>
 801a1ca:	4a0f      	ldr	r2, [pc, #60]	@ (801a208 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a1cc:	490f      	ldr	r1, [pc, #60]	@ (801a20c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a1ce:	4810      	ldr	r0, [pc, #64]	@ (801a210 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a1d0:	f007 fc06 	bl	80219e0 <__aeabi_atexit>
 801a1d4:	4c0f      	ldr	r4, [pc, #60]	@ (801a214 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801a1d6:	7823      	ldrb	r3, [r4, #0]
 801a1d8:	f3bf 8f5b 	dmb	ish
 801a1dc:	07db      	lsls	r3, r3, #31
 801a1de:	d40b      	bmi.n	801a1f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a1e0:	4620      	mov	r0, r4
 801a1e2:	f007 fc04 	bl	80219ee <__cxa_guard_acquire>
 801a1e6:	b138      	cbz	r0, 801a1f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a1e8:	4620      	mov	r0, r4
 801a1ea:	f007 fc0c 	bl	8021a06 <__cxa_guard_release>
 801a1ee:	4a06      	ldr	r2, [pc, #24]	@ (801a208 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a1f0:	4909      	ldr	r1, [pc, #36]	@ (801a218 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a1f2:	480a      	ldr	r0, [pc, #40]	@ (801a21c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a1f4:	f007 fbf4 	bl	80219e0 <__aeabi_atexit>
 801a1f8:	4b05      	ldr	r3, [pc, #20]	@ (801a210 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a1fa:	61eb      	str	r3, [r5, #28]
 801a1fc:	4b07      	ldr	r3, [pc, #28]	@ (801a21c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a1fe:	622b      	str	r3, [r5, #32]
 801a200:	bd38      	pop	{r3, r4, r5, pc}
 801a202:	bf00      	nop
 801a204:	24025340 	.word	0x24025340
 801a208:	24000000 	.word	0x24000000
 801a20c:	08017329 	.word	0x08017329
 801a210:	240000b0 	.word	0x240000b0
 801a214:	24025344 	.word	0x24025344
 801a218:	08017327 	.word	0x08017327
 801a21c:	240000b4 	.word	0x240000b4

0801a220 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801a220:	b510      	push	{r4, lr}
 801a222:	4604      	mov	r4, r0
 801a224:	f7ff ff88 	bl	801a138 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801a228:	4620      	mov	r0, r4
 801a22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a22e:	f7ff bfbd 	b.w	801a1ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801a234 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801a234:	b538      	push	{r3, r4, r5, lr}
 801a236:	4c15      	ldr	r4, [pc, #84]	@ (801a28c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801a238:	4605      	mov	r5, r0
 801a23a:	7823      	ldrb	r3, [r4, #0]
 801a23c:	f3bf 8f5b 	dmb	ish
 801a240:	07da      	lsls	r2, r3, #31
 801a242:	d40b      	bmi.n	801a25c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a244:	4620      	mov	r0, r4
 801a246:	f007 fbd2 	bl	80219ee <__cxa_guard_acquire>
 801a24a:	b138      	cbz	r0, 801a25c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a24c:	4620      	mov	r0, r4
 801a24e:	f007 fbda 	bl	8021a06 <__cxa_guard_release>
 801a252:	4a0f      	ldr	r2, [pc, #60]	@ (801a290 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a254:	490f      	ldr	r1, [pc, #60]	@ (801a294 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801a256:	4810      	ldr	r0, [pc, #64]	@ (801a298 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a258:	f007 fbc2 	bl	80219e0 <__aeabi_atexit>
 801a25c:	4c0f      	ldr	r4, [pc, #60]	@ (801a29c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801a25e:	7823      	ldrb	r3, [r4, #0]
 801a260:	f3bf 8f5b 	dmb	ish
 801a264:	07db      	lsls	r3, r3, #31
 801a266:	d40b      	bmi.n	801a280 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a268:	4620      	mov	r0, r4
 801a26a:	f007 fbc0 	bl	80219ee <__cxa_guard_acquire>
 801a26e:	b138      	cbz	r0, 801a280 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a270:	4620      	mov	r0, r4
 801a272:	f007 fbc8 	bl	8021a06 <__cxa_guard_release>
 801a276:	4a06      	ldr	r2, [pc, #24]	@ (801a290 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a278:	4909      	ldr	r1, [pc, #36]	@ (801a2a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801a27a:	480a      	ldr	r0, [pc, #40]	@ (801a2a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a27c:	f007 fbb0 	bl	80219e0 <__aeabi_atexit>
 801a280:	4b05      	ldr	r3, [pc, #20]	@ (801a298 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a282:	636b      	str	r3, [r5, #52]	@ 0x34
 801a284:	4b07      	ldr	r3, [pc, #28]	@ (801a2a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a286:	63ab      	str	r3, [r5, #56]	@ 0x38
 801a288:	bd38      	pop	{r3, r4, r5, pc}
 801a28a:	bf00      	nop
 801a28c:	24025348 	.word	0x24025348
 801a290:	24000000 	.word	0x24000000
 801a294:	0801731d 	.word	0x0801731d
 801a298:	240000b8 	.word	0x240000b8
 801a29c:	2402534c 	.word	0x2402534c
 801a2a0:	0801731b 	.word	0x0801731b
 801a2a4:	240000bc 	.word	0x240000bc

0801a2a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801a2a8:	b538      	push	{r3, r4, r5, lr}
 801a2aa:	4c15      	ldr	r4, [pc, #84]	@ (801a300 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801a2ac:	4605      	mov	r5, r0
 801a2ae:	7823      	ldrb	r3, [r4, #0]
 801a2b0:	f3bf 8f5b 	dmb	ish
 801a2b4:	07da      	lsls	r2, r3, #31
 801a2b6:	d40b      	bmi.n	801a2d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a2b8:	4620      	mov	r0, r4
 801a2ba:	f007 fb98 	bl	80219ee <__cxa_guard_acquire>
 801a2be:	b138      	cbz	r0, 801a2d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a2c0:	4620      	mov	r0, r4
 801a2c2:	f007 fba0 	bl	8021a06 <__cxa_guard_release>
 801a2c6:	4a0f      	ldr	r2, [pc, #60]	@ (801a304 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a2c8:	490f      	ldr	r1, [pc, #60]	@ (801a308 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801a2ca:	4810      	ldr	r0, [pc, #64]	@ (801a30c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a2cc:	f007 fb88 	bl	80219e0 <__aeabi_atexit>
 801a2d0:	4c0f      	ldr	r4, [pc, #60]	@ (801a310 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801a2d2:	7823      	ldrb	r3, [r4, #0]
 801a2d4:	f3bf 8f5b 	dmb	ish
 801a2d8:	07db      	lsls	r3, r3, #31
 801a2da:	d40b      	bmi.n	801a2f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a2dc:	4620      	mov	r0, r4
 801a2de:	f007 fb86 	bl	80219ee <__cxa_guard_acquire>
 801a2e2:	b138      	cbz	r0, 801a2f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a2e4:	4620      	mov	r0, r4
 801a2e6:	f007 fb8e 	bl	8021a06 <__cxa_guard_release>
 801a2ea:	4a06      	ldr	r2, [pc, #24]	@ (801a304 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a2ec:	4909      	ldr	r1, [pc, #36]	@ (801a314 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801a2ee:	480a      	ldr	r0, [pc, #40]	@ (801a318 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a2f0:	f007 fb76 	bl	80219e0 <__aeabi_atexit>
 801a2f4:	4b05      	ldr	r3, [pc, #20]	@ (801a30c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a2f6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801a2f8:	4b07      	ldr	r3, [pc, #28]	@ (801a318 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a2fa:	632b      	str	r3, [r5, #48]	@ 0x30
 801a2fc:	bd38      	pop	{r3, r4, r5, pc}
 801a2fe:	bf00      	nop
 801a300:	24025320 	.word	0x24025320
 801a304:	24000000 	.word	0x24000000
 801a308:	08017321 	.word	0x08017321
 801a30c:	24000090 	.word	0x24000090
 801a310:	24025324 	.word	0x24025324
 801a314:	0801731f 	.word	0x0801731f
 801a318:	24000094 	.word	0x24000094

0801a31c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801a31c:	b510      	push	{r4, lr}
 801a31e:	4604      	mov	r4, r0
 801a320:	f7ff ff88 	bl	801a234 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801a324:	4620      	mov	r0, r4
 801a326:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a32a:	f7ff bfbd 	b.w	801a2a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801a330 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801a330:	b538      	push	{r3, r4, r5, lr}
 801a332:	4c15      	ldr	r4, [pc, #84]	@ (801a388 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801a334:	4605      	mov	r5, r0
 801a336:	7823      	ldrb	r3, [r4, #0]
 801a338:	f3bf 8f5b 	dmb	ish
 801a33c:	07da      	lsls	r2, r3, #31
 801a33e:	d40b      	bmi.n	801a358 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a340:	4620      	mov	r0, r4
 801a342:	f007 fb54 	bl	80219ee <__cxa_guard_acquire>
 801a346:	b138      	cbz	r0, 801a358 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a348:	4620      	mov	r0, r4
 801a34a:	f007 fb5c 	bl	8021a06 <__cxa_guard_release>
 801a34e:	4a0f      	ldr	r2, [pc, #60]	@ (801a38c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a350:	490f      	ldr	r1, [pc, #60]	@ (801a390 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801a352:	4810      	ldr	r0, [pc, #64]	@ (801a394 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a354:	f007 fb44 	bl	80219e0 <__aeabi_atexit>
 801a358:	4c0f      	ldr	r4, [pc, #60]	@ (801a398 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801a35a:	7823      	ldrb	r3, [r4, #0]
 801a35c:	f3bf 8f5b 	dmb	ish
 801a360:	07db      	lsls	r3, r3, #31
 801a362:	d40b      	bmi.n	801a37c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a364:	4620      	mov	r0, r4
 801a366:	f007 fb42 	bl	80219ee <__cxa_guard_acquire>
 801a36a:	b138      	cbz	r0, 801a37c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a36c:	4620      	mov	r0, r4
 801a36e:	f007 fb4a 	bl	8021a06 <__cxa_guard_release>
 801a372:	4a06      	ldr	r2, [pc, #24]	@ (801a38c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a374:	4909      	ldr	r1, [pc, #36]	@ (801a39c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801a376:	480a      	ldr	r0, [pc, #40]	@ (801a3a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a378:	f007 fb32 	bl	80219e0 <__aeabi_atexit>
 801a37c:	4b05      	ldr	r3, [pc, #20]	@ (801a394 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a37e:	646b      	str	r3, [r5, #68]	@ 0x44
 801a380:	4b07      	ldr	r3, [pc, #28]	@ (801a3a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a382:	64ab      	str	r3, [r5, #72]	@ 0x48
 801a384:	bd38      	pop	{r3, r4, r5, pc}
 801a386:	bf00      	nop
 801a388:	24025350 	.word	0x24025350
 801a38c:	24000000 	.word	0x24000000
 801a390:	08017315 	.word	0x08017315
 801a394:	240000c0 	.word	0x240000c0
 801a398:	24025354 	.word	0x24025354
 801a39c:	08017313 	.word	0x08017313
 801a3a0:	240000c4 	.word	0x240000c4

0801a3a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801a3a4:	b538      	push	{r3, r4, r5, lr}
 801a3a6:	4c15      	ldr	r4, [pc, #84]	@ (801a3fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801a3a8:	4605      	mov	r5, r0
 801a3aa:	7823      	ldrb	r3, [r4, #0]
 801a3ac:	f3bf 8f5b 	dmb	ish
 801a3b0:	07da      	lsls	r2, r3, #31
 801a3b2:	d40b      	bmi.n	801a3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a3b4:	4620      	mov	r0, r4
 801a3b6:	f007 fb1a 	bl	80219ee <__cxa_guard_acquire>
 801a3ba:	b138      	cbz	r0, 801a3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a3bc:	4620      	mov	r0, r4
 801a3be:	f007 fb22 	bl	8021a06 <__cxa_guard_release>
 801a3c2:	4a0f      	ldr	r2, [pc, #60]	@ (801a400 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a3c4:	490f      	ldr	r1, [pc, #60]	@ (801a404 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801a3c6:	4810      	ldr	r0, [pc, #64]	@ (801a408 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a3c8:	f007 fb0a 	bl	80219e0 <__aeabi_atexit>
 801a3cc:	4c0f      	ldr	r4, [pc, #60]	@ (801a40c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801a3ce:	7823      	ldrb	r3, [r4, #0]
 801a3d0:	f3bf 8f5b 	dmb	ish
 801a3d4:	07db      	lsls	r3, r3, #31
 801a3d6:	d40b      	bmi.n	801a3f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a3d8:	4620      	mov	r0, r4
 801a3da:	f007 fb08 	bl	80219ee <__cxa_guard_acquire>
 801a3de:	b138      	cbz	r0, 801a3f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a3e0:	4620      	mov	r0, r4
 801a3e2:	f007 fb10 	bl	8021a06 <__cxa_guard_release>
 801a3e6:	4a06      	ldr	r2, [pc, #24]	@ (801a400 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a3e8:	4909      	ldr	r1, [pc, #36]	@ (801a410 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801a3ea:	480a      	ldr	r0, [pc, #40]	@ (801a414 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a3ec:	f007 faf8 	bl	80219e0 <__aeabi_atexit>
 801a3f0:	4b05      	ldr	r3, [pc, #20]	@ (801a408 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a3f2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801a3f4:	4b07      	ldr	r3, [pc, #28]	@ (801a414 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a3f6:	642b      	str	r3, [r5, #64]	@ 0x40
 801a3f8:	bd38      	pop	{r3, r4, r5, pc}
 801a3fa:	bf00      	nop
 801a3fc:	24025330 	.word	0x24025330
 801a400:	24000000 	.word	0x24000000
 801a404:	08017319 	.word	0x08017319
 801a408:	240000a0 	.word	0x240000a0
 801a40c:	24025334 	.word	0x24025334
 801a410:	08017317 	.word	0x08017317
 801a414:	240000a4 	.word	0x240000a4

0801a418 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801a418:	b510      	push	{r4, lr}
 801a41a:	4604      	mov	r4, r0
 801a41c:	f7ff ff88 	bl	801a330 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801a420:	4620      	mov	r0, r4
 801a422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a426:	f7ff bfbd 	b.w	801a3a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801a42c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801a42c:	b538      	push	{r3, r4, r5, lr}
 801a42e:	4c15      	ldr	r4, [pc, #84]	@ (801a484 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801a430:	4605      	mov	r5, r0
 801a432:	7823      	ldrb	r3, [r4, #0]
 801a434:	f3bf 8f5b 	dmb	ish
 801a438:	07da      	lsls	r2, r3, #31
 801a43a:	d40b      	bmi.n	801a454 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a43c:	4620      	mov	r0, r4
 801a43e:	f007 fad6 	bl	80219ee <__cxa_guard_acquire>
 801a442:	b138      	cbz	r0, 801a454 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a444:	4620      	mov	r0, r4
 801a446:	f007 fade 	bl	8021a06 <__cxa_guard_release>
 801a44a:	4a0f      	ldr	r2, [pc, #60]	@ (801a488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a44c:	490f      	ldr	r1, [pc, #60]	@ (801a48c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801a44e:	4810      	ldr	r0, [pc, #64]	@ (801a490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a450:	f007 fac6 	bl	80219e0 <__aeabi_atexit>
 801a454:	4c0f      	ldr	r4, [pc, #60]	@ (801a494 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801a456:	7823      	ldrb	r3, [r4, #0]
 801a458:	f3bf 8f5b 	dmb	ish
 801a45c:	07db      	lsls	r3, r3, #31
 801a45e:	d40b      	bmi.n	801a478 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a460:	4620      	mov	r0, r4
 801a462:	f007 fac4 	bl	80219ee <__cxa_guard_acquire>
 801a466:	b138      	cbz	r0, 801a478 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a468:	4620      	mov	r0, r4
 801a46a:	f007 facc 	bl	8021a06 <__cxa_guard_release>
 801a46e:	4a06      	ldr	r2, [pc, #24]	@ (801a488 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a470:	4909      	ldr	r1, [pc, #36]	@ (801a498 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801a472:	480a      	ldr	r0, [pc, #40]	@ (801a49c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a474:	f007 fab4 	bl	80219e0 <__aeabi_atexit>
 801a478:	4b05      	ldr	r3, [pc, #20]	@ (801a490 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a47a:	656b      	str	r3, [r5, #84]	@ 0x54
 801a47c:	4b07      	ldr	r3, [pc, #28]	@ (801a49c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a47e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801a480:	bd38      	pop	{r3, r4, r5, pc}
 801a482:	bf00      	nop
 801a484:	24025328 	.word	0x24025328
 801a488:	24000000 	.word	0x24000000
 801a48c:	0801730d 	.word	0x0801730d
 801a490:	24000098 	.word	0x24000098
 801a494:	2402532c 	.word	0x2402532c
 801a498:	0801730b 	.word	0x0801730b
 801a49c:	2400009c 	.word	0x2400009c

0801a4a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801a4a0:	b538      	push	{r3, r4, r5, lr}
 801a4a2:	4c15      	ldr	r4, [pc, #84]	@ (801a4f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801a4a4:	4605      	mov	r5, r0
 801a4a6:	7823      	ldrb	r3, [r4, #0]
 801a4a8:	f3bf 8f5b 	dmb	ish
 801a4ac:	07da      	lsls	r2, r3, #31
 801a4ae:	d40b      	bmi.n	801a4c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a4b0:	4620      	mov	r0, r4
 801a4b2:	f007 fa9c 	bl	80219ee <__cxa_guard_acquire>
 801a4b6:	b138      	cbz	r0, 801a4c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	f007 faa4 	bl	8021a06 <__cxa_guard_release>
 801a4be:	4a0f      	ldr	r2, [pc, #60]	@ (801a4fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a4c0:	490f      	ldr	r1, [pc, #60]	@ (801a500 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801a4c2:	4810      	ldr	r0, [pc, #64]	@ (801a504 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a4c4:	f007 fa8c 	bl	80219e0 <__aeabi_atexit>
 801a4c8:	4c0f      	ldr	r4, [pc, #60]	@ (801a508 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801a4ca:	7823      	ldrb	r3, [r4, #0]
 801a4cc:	f3bf 8f5b 	dmb	ish
 801a4d0:	07db      	lsls	r3, r3, #31
 801a4d2:	d40b      	bmi.n	801a4ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a4d4:	4620      	mov	r0, r4
 801a4d6:	f007 fa8a 	bl	80219ee <__cxa_guard_acquire>
 801a4da:	b138      	cbz	r0, 801a4ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a4dc:	4620      	mov	r0, r4
 801a4de:	f007 fa92 	bl	8021a06 <__cxa_guard_release>
 801a4e2:	4a06      	ldr	r2, [pc, #24]	@ (801a4fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a4e4:	4909      	ldr	r1, [pc, #36]	@ (801a50c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801a4e6:	480a      	ldr	r0, [pc, #40]	@ (801a510 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a4e8:	f007 fa7a 	bl	80219e0 <__aeabi_atexit>
 801a4ec:	4b05      	ldr	r3, [pc, #20]	@ (801a504 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a4ee:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801a4f0:	4b07      	ldr	r3, [pc, #28]	@ (801a510 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a4f2:	652b      	str	r3, [r5, #80]	@ 0x50
 801a4f4:	bd38      	pop	{r3, r4, r5, pc}
 801a4f6:	bf00      	nop
 801a4f8:	24025318 	.word	0x24025318
 801a4fc:	24000000 	.word	0x24000000
 801a500:	08017311 	.word	0x08017311
 801a504:	24000088 	.word	0x24000088
 801a508:	2402531c 	.word	0x2402531c
 801a50c:	0801730f 	.word	0x0801730f
 801a510:	2400008c 	.word	0x2400008c

0801a514 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801a514:	b510      	push	{r4, lr}
 801a516:	4604      	mov	r4, r0
 801a518:	f7ff ff88 	bl	801a42c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801a51c:	4620      	mov	r0, r4
 801a51e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a522:	f7ff bfbd 	b.w	801a4a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801a526 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801a526:	b510      	push	{r4, lr}
 801a528:	4604      	mov	r4, r0
 801a52a:	f7ff fff3 	bl	801a514 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801a52e:	4620      	mov	r0, r4
 801a530:	f7ff ff72 	bl	801a418 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801a534:	4620      	mov	r0, r4
 801a536:	f7ff fe73 	bl	801a220 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801a53a:	4620      	mov	r0, r4
 801a53c:	f7ff fdf2 	bl	801a124 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801a540:	4620      	mov	r0, r4
 801a542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a546:	f7ff bee9 	b.w	801a31c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801a54c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801a54c:	b538      	push	{r3, r4, r5, lr}
 801a54e:	4c0b      	ldr	r4, [pc, #44]	@ (801a57c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801a550:	4605      	mov	r5, r0
 801a552:	7823      	ldrb	r3, [r4, #0]
 801a554:	f3bf 8f5b 	dmb	ish
 801a558:	07db      	lsls	r3, r3, #31
 801a55a:	d40b      	bmi.n	801a574 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a55c:	4620      	mov	r0, r4
 801a55e:	f007 fa46 	bl	80219ee <__cxa_guard_acquire>
 801a562:	b138      	cbz	r0, 801a574 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a564:	4620      	mov	r0, r4
 801a566:	f007 fa4e 	bl	8021a06 <__cxa_guard_release>
 801a56a:	4a05      	ldr	r2, [pc, #20]	@ (801a580 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801a56c:	4905      	ldr	r1, [pc, #20]	@ (801a584 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801a56e:	4806      	ldr	r0, [pc, #24]	@ (801a588 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a570:	f007 fa36 	bl	80219e0 <__aeabi_atexit>
 801a574:	4b04      	ldr	r3, [pc, #16]	@ (801a588 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a576:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801a578:	bd38      	pop	{r3, r4, r5, pc}
 801a57a:	bf00      	nop
 801a57c:	2402530c 	.word	0x2402530c
 801a580:	24000000 	.word	0x24000000
 801a584:	08017309 	.word	0x08017309
 801a588:	24000080 	.word	0x24000080

0801a58c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801a58c:	b538      	push	{r3, r4, r5, lr}
 801a58e:	4c0b      	ldr	r4, [pc, #44]	@ (801a5bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801a590:	4605      	mov	r5, r0
 801a592:	7823      	ldrb	r3, [r4, #0]
 801a594:	f3bf 8f5b 	dmb	ish
 801a598:	07db      	lsls	r3, r3, #31
 801a59a:	d40b      	bmi.n	801a5b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a59c:	4620      	mov	r0, r4
 801a59e:	f007 fa26 	bl	80219ee <__cxa_guard_acquire>
 801a5a2:	b138      	cbz	r0, 801a5b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	f007 fa2e 	bl	8021a06 <__cxa_guard_release>
 801a5aa:	4a05      	ldr	r2, [pc, #20]	@ (801a5c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801a5ac:	4905      	ldr	r1, [pc, #20]	@ (801a5c4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801a5ae:	4806      	ldr	r0, [pc, #24]	@ (801a5c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a5b0:	f007 fa16 	bl	80219e0 <__aeabi_atexit>
 801a5b4:	4b04      	ldr	r3, [pc, #16]	@ (801a5c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a5b6:	662b      	str	r3, [r5, #96]	@ 0x60
 801a5b8:	bd38      	pop	{r3, r4, r5, pc}
 801a5ba:	bf00      	nop
 801a5bc:	24025310 	.word	0x24025310
 801a5c0:	24000000 	.word	0x24000000
 801a5c4:	08017307 	.word	0x08017307
 801a5c8:	24000084 	.word	0x24000084

0801a5cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801a5cc:	b570      	push	{r4, r5, r6, lr}
 801a5ce:	4d0c      	ldr	r5, [pc, #48]	@ (801a600 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801a5d0:	4606      	mov	r6, r0
 801a5d2:	4c0c      	ldr	r4, [pc, #48]	@ (801a604 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801a5d4:	782b      	ldrb	r3, [r5, #0]
 801a5d6:	f3bf 8f5b 	dmb	ish
 801a5da:	f013 0f01 	tst.w	r3, #1
 801a5de:	d10d      	bne.n	801a5fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a5e0:	4628      	mov	r0, r5
 801a5e2:	f007 fa04 	bl	80219ee <__cxa_guard_acquire>
 801a5e6:	b148      	cbz	r0, 801a5fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a5e8:	4b07      	ldr	r3, [pc, #28]	@ (801a608 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801a5ea:	4628      	mov	r0, r5
 801a5ec:	6023      	str	r3, [r4, #0]
 801a5ee:	f007 fa0a 	bl	8021a06 <__cxa_guard_release>
 801a5f2:	4a06      	ldr	r2, [pc, #24]	@ (801a60c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801a5f4:	4620      	mov	r0, r4
 801a5f6:	4906      	ldr	r1, [pc, #24]	@ (801a610 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801a5f8:	f007 f9f2 	bl	80219e0 <__aeabi_atexit>
 801a5fc:	6674      	str	r4, [r6, #100]	@ 0x64
 801a5fe:	bd70      	pop	{r4, r5, r6, pc}
 801a600:	24025314 	.word	0x24025314
 801a604:	2402546c 	.word	0x2402546c
 801a608:	08025ef4 	.word	0x08025ef4
 801a60c:	24000000 	.word	0x24000000
 801a610:	08017305 	.word	0x08017305

0801a614 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801a614:	b510      	push	{r4, lr}
 801a616:	4604      	mov	r4, r0
 801a618:	f7ff ff98 	bl	801a54c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801a61c:	4620      	mov	r0, r4
 801a61e:	f7ff ffb5 	bl	801a58c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801a622:	4620      	mov	r0, r4
 801a624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a628:	f7ff bfd0 	b.w	801a5cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801a62c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801a62c:	b570      	push	{r4, r5, r6, lr}
 801a62e:	4d0c      	ldr	r5, [pc, #48]	@ (801a660 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801a630:	4606      	mov	r6, r0
 801a632:	4c0c      	ldr	r4, [pc, #48]	@ (801a664 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801a634:	782b      	ldrb	r3, [r5, #0]
 801a636:	f3bf 8f5b 	dmb	ish
 801a63a:	f013 0f01 	tst.w	r3, #1
 801a63e:	d10d      	bne.n	801a65c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a640:	4628      	mov	r0, r5
 801a642:	f007 f9d4 	bl	80219ee <__cxa_guard_acquire>
 801a646:	b148      	cbz	r0, 801a65c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a648:	4b07      	ldr	r3, [pc, #28]	@ (801a668 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801a64a:	4628      	mov	r0, r5
 801a64c:	6023      	str	r3, [r4, #0]
 801a64e:	f007 f9da 	bl	8021a06 <__cxa_guard_release>
 801a652:	4a06      	ldr	r2, [pc, #24]	@ (801a66c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801a654:	4620      	mov	r0, r4
 801a656:	4906      	ldr	r1, [pc, #24]	@ (801a670 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801a658:	f007 f9c2 	bl	80219e0 <__aeabi_atexit>
 801a65c:	66b4      	str	r4, [r6, #104]	@ 0x68
 801a65e:	bd70      	pop	{r4, r5, r6, pc}
 801a660:	24025308 	.word	0x24025308
 801a664:	24025368 	.word	0x24025368
 801a668:	08025f0c 	.word	0x08025f0c
 801a66c:	24000000 	.word	0x24000000
 801a670:	08017303 	.word	0x08017303

0801a674 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a678:	b087      	sub	sp, #28
 801a67a:	788d      	ldrb	r5, [r1, #2]
 801a67c:	f891 9000 	ldrb.w	r9, [r1]
 801a680:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801a684:	9501      	str	r5, [sp, #4]
 801a686:	784d      	ldrb	r5, [r1, #1]
 801a688:	9203      	str	r2, [sp, #12]
 801a68a:	9502      	str	r5, [sp, #8]
 801a68c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a690:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801a694:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801a698:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801a69c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801a6a0:	fb06 0708 	mla	r7, r6, r8, r0
 801a6a4:	2e00      	cmp	r6, #0
 801a6a6:	eb02 0a07 	add.w	sl, r2, r7
 801a6aa:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801a6ae:	9d01      	ldr	r5, [sp, #4]
 801a6b0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801a6b4:	ea45 0509 	orr.w	r5, r5, r9
 801a6b8:	9505      	str	r5, [sp, #20]
 801a6ba:	f2c0 80b2 	blt.w	801a822 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a6be:	45b3      	cmp	fp, r6
 801a6c0:	f340 80af 	ble.w	801a822 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a6c4:	2800      	cmp	r0, #0
 801a6c6:	f2c0 80aa 	blt.w	801a81e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a6ca:	4580      	cmp	r8, r0
 801a6cc:	f340 80a7 	ble.w	801a81e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a6d0:	9a03      	ldr	r2, [sp, #12]
 801a6d2:	5dd7      	ldrb	r7, [r2, r7]
 801a6d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a6d8:	441f      	add	r7, r3
 801a6da:	1c42      	adds	r2, r0, #1
 801a6dc:	f100 80a4 	bmi.w	801a828 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a6e0:	4590      	cmp	r8, r2
 801a6e2:	f340 80a1 	ble.w	801a828 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a6e6:	2c00      	cmp	r4, #0
 801a6e8:	f000 809e 	beq.w	801a828 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a6ec:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a6f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a6f4:	441d      	add	r5, r3
 801a6f6:	3601      	adds	r6, #1
 801a6f8:	f100 809a 	bmi.w	801a830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a6fc:	45b3      	cmp	fp, r6
 801a6fe:	f340 8097 	ble.w	801a830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a702:	f1bc 0f00 	cmp.w	ip, #0
 801a706:	f000 8093 	beq.w	801a830 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a70a:	2800      	cmp	r0, #0
 801a70c:	f2c0 808e 	blt.w	801a82c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a710:	4580      	cmp	r8, r0
 801a712:	f340 808b 	ble.w	801a82c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a716:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801a71a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a71e:	441e      	add	r6, r3
 801a720:	3001      	adds	r0, #1
 801a722:	f100 8088 	bmi.w	801a836 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a726:	4580      	cmp	r8, r0
 801a728:	f340 8085 	ble.w	801a836 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a72c:	2c00      	cmp	r4, #0
 801a72e:	f000 8082 	beq.w	801a836 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a732:	44d0      	add	r8, sl
 801a734:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a738:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a73c:	4413      	add	r3, r2
 801a73e:	b2a4      	uxth	r4, r4
 801a740:	f895 a000 	ldrb.w	sl, [r5]
 801a744:	fa1f fc8c 	uxth.w	ip, ip
 801a748:	fb04 fb0c 	mul.w	fp, r4, ip
 801a74c:	0124      	lsls	r4, r4, #4
 801a74e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801a752:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801a756:	eba4 040b 	sub.w	r4, r4, fp
 801a75a:	fa1f f08c 	uxth.w	r0, ip
 801a75e:	b2a2      	uxth	r2, r4
 801a760:	783c      	ldrb	r4, [r7, #0]
 801a762:	eba8 0800 	sub.w	r8, r8, r0
 801a766:	fa1f fc8e 	uxth.w	ip, lr
 801a76a:	fb02 fa0a 	mul.w	sl, r2, sl
 801a76e:	ea6f 0e0e 	mvn.w	lr, lr
 801a772:	fa1f f888 	uxth.w	r8, r8
 801a776:	fa5f fe8e 	uxtb.w	lr, lr
 801a77a:	fb08 aa04 	mla	sl, r8, r4, sl
 801a77e:	7834      	ldrb	r4, [r6, #0]
 801a780:	fb19 f90e 	smulbb	r9, r9, lr
 801a784:	fb00 aa04 	mla	sl, r0, r4, sl
 801a788:	781c      	ldrb	r4, [r3, #0]
 801a78a:	fb0b a404 	mla	r4, fp, r4, sl
 801a78e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a792:	fb04 990c 	mla	r9, r4, ip, r9
 801a796:	fa1f f989 	uxth.w	r9, r9
 801a79a:	f109 0401 	add.w	r4, r9, #1
 801a79e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801a7a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a7a6:	f881 9000 	strb.w	r9, [r1]
 801a7aa:	f895 9001 	ldrb.w	r9, [r5, #1]
 801a7ae:	787c      	ldrb	r4, [r7, #1]
 801a7b0:	fb02 f909 	mul.w	r9, r2, r9
 801a7b4:	fb08 9904 	mla	r9, r8, r4, r9
 801a7b8:	7874      	ldrb	r4, [r6, #1]
 801a7ba:	fb00 9904 	mla	r9, r0, r4, r9
 801a7be:	785c      	ldrb	r4, [r3, #1]
 801a7c0:	fb0b 9404 	mla	r4, fp, r4, r9
 801a7c4:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801a7c8:	9c02      	ldr	r4, [sp, #8]
 801a7ca:	fb14 f90e 	smulbb	r9, r4, lr
 801a7ce:	fb0a 940c 	mla	r4, sl, ip, r9
 801a7d2:	b2a4      	uxth	r4, r4
 801a7d4:	f104 0901 	add.w	r9, r4, #1
 801a7d8:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801a7dc:	1224      	asrs	r4, r4, #8
 801a7de:	704c      	strb	r4, [r1, #1]
 801a7e0:	78ad      	ldrb	r5, [r5, #2]
 801a7e2:	78bc      	ldrb	r4, [r7, #2]
 801a7e4:	436a      	muls	r2, r5
 801a7e6:	789b      	ldrb	r3, [r3, #2]
 801a7e8:	fb08 2204 	mla	r2, r8, r4, r2
 801a7ec:	78b4      	ldrb	r4, [r6, #2]
 801a7ee:	fb00 2004 	mla	r0, r0, r4, r2
 801a7f2:	fb0b 0b03 	mla	fp, fp, r3, r0
 801a7f6:	9b01      	ldr	r3, [sp, #4]
 801a7f8:	fb13 fe0e 	smulbb	lr, r3, lr
 801a7fc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801a800:	fb0b ec0c 	mla	ip, fp, ip, lr
 801a804:	fa1f fc8c 	uxth.w	ip, ip
 801a808:	f10c 0e01 	add.w	lr, ip, #1
 801a80c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a810:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a814:	f881 c002 	strb.w	ip, [r1, #2]
 801a818:	b007      	add	sp, #28
 801a81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a81e:	af05      	add	r7, sp, #20
 801a820:	e75b      	b.n	801a6da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801a822:	ad05      	add	r5, sp, #20
 801a824:	462f      	mov	r7, r5
 801a826:	e766      	b.n	801a6f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a828:	ad05      	add	r5, sp, #20
 801a82a:	e764      	b.n	801a6f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a82c:	ae05      	add	r6, sp, #20
 801a82e:	e777      	b.n	801a720 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801a830:	ab05      	add	r3, sp, #20
 801a832:	461e      	mov	r6, r3
 801a834:	e783      	b.n	801a73e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801a836:	ab05      	add	r3, sp, #20
 801a838:	e781      	b.n	801a73e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801a83a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a83a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a83e:	b093      	sub	sp, #76	@ 0x4c
 801a840:	9210      	str	r2, [sp, #64]	@ 0x40
 801a842:	9309      	str	r3, [sp, #36]	@ 0x24
 801a844:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a846:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801a84a:	9011      	str	r0, [sp, #68]	@ 0x44
 801a84c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a84e:	6850      	ldr	r0, [r2, #4]
 801a850:	910d      	str	r1, [sp, #52]	@ 0x34
 801a852:	6812      	ldr	r2, [r2, #0]
 801a854:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a858:	fb00 1303 	mla	r3, r0, r3, r1
 801a85c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a860:	18d3      	adds	r3, r2, r3
 801a862:	930a      	str	r3, [sp, #40]	@ 0x28
 801a864:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	930c      	str	r3, [sp, #48]	@ 0x30
 801a86a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a86c:	685c      	ldr	r4, [r3, #4]
 801a86e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a870:	3404      	adds	r4, #4
 801a872:	43db      	mvns	r3, r3
 801a874:	b2db      	uxtb	r3, r3
 801a876:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a878:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a87a:	2b00      	cmp	r3, #0
 801a87c:	dc03      	bgt.n	801a886 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a87e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a880:	2b00      	cmp	r3, #0
 801a882:	f340 8250 	ble.w	801ad26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a886:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a888:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a88c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a890:	1e48      	subs	r0, r1, #1
 801a892:	1e55      	subs	r5, r2, #1
 801a894:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a896:	2b00      	cmp	r3, #0
 801a898:	f340 80ee 	ble.w	801aa78 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a89c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801a89e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a8a0:	1436      	asrs	r6, r6, #16
 801a8a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a8a6:	d406      	bmi.n	801a8b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a8a8:	4286      	cmp	r6, r0
 801a8aa:	da04      	bge.n	801a8b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a8ac:	2b00      	cmp	r3, #0
 801a8ae:	db02      	blt.n	801a8b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a8b0:	42ab      	cmp	r3, r5
 801a8b2:	f2c0 80e2 	blt.w	801aa7a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801a8b6:	3601      	adds	r6, #1
 801a8b8:	f100 80cf 	bmi.w	801aa5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a8bc:	42b1      	cmp	r1, r6
 801a8be:	f2c0 80cc 	blt.w	801aa5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a8c2:	3301      	adds	r3, #1
 801a8c4:	f100 80c9 	bmi.w	801aa5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a8c8:	429a      	cmp	r2, r3
 801a8ca:	f2c0 80c6 	blt.w	801aa5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a8ce:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801a8d2:	f1bb 0f00 	cmp.w	fp, #0
 801a8d6:	f340 80f1 	ble.w	801aabc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a8da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a8dc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a8de:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801a8e0:	141d      	asrs	r5, r3, #16
 801a8e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a8e4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a8e8:	68c7      	ldr	r7, [r0, #12]
 801a8ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a8ec:	1418      	asrs	r0, r3, #16
 801a8ee:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801a8f2:	6892      	ldr	r2, [r2, #8]
 801a8f4:	f100 8137 	bmi.w	801ab66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a8f8:	f102 3cff 	add.w	ip, r2, #4294967295
 801a8fc:	4560      	cmp	r0, ip
 801a8fe:	f280 8132 	bge.w	801ab66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a902:	2d00      	cmp	r5, #0
 801a904:	f2c0 812f 	blt.w	801ab66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a908:	f107 3cff 	add.w	ip, r7, #4294967295
 801a90c:	4565      	cmp	r5, ip
 801a90e:	f280 812a 	bge.w	801ab66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a912:	b212      	sxth	r2, r2
 801a914:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a916:	fb05 0002 	mla	r0, r5, r2, r0
 801a91a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a91c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a920:	4405      	add	r5, r0
 801a922:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a926:	eb04 0e0c 	add.w	lr, r4, ip
 801a92a:	f1b8 0f00 	cmp.w	r8, #0
 801a92e:	f000 810c 	beq.w	801ab4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801a932:	786f      	ldrb	r7, [r5, #1]
 801a934:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a938:	4427      	add	r7, r4
 801a93a:	2900      	cmp	r1, #0
 801a93c:	f000 810d 	beq.w	801ab5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801a940:	18a8      	adds	r0, r5, r2
 801a942:	5caa      	ldrb	r2, [r5, r2]
 801a944:	7840      	ldrb	r0, [r0, #1]
 801a946:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a94a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a94e:	4422      	add	r2, r4
 801a950:	4420      	add	r0, r4
 801a952:	fa1f f388 	uxth.w	r3, r8
 801a956:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801a95a:	b289      	uxth	r1, r1
 801a95c:	f897 c000 	ldrb.w	ip, [r7]
 801a960:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a964:	fb03 f901 	mul.w	r9, r3, r1
 801a968:	011b      	lsls	r3, r3, #4
 801a96a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a96e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a972:	eba3 0309 	sub.w	r3, r3, r9
 801a976:	b289      	uxth	r1, r1
 801a978:	b29b      	uxth	r3, r3
 801a97a:	eba8 0801 	sub.w	r8, r8, r1
 801a97e:	fb03 fc0c 	mul.w	ip, r3, ip
 801a982:	fa1f f888 	uxth.w	r8, r8
 801a986:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a988:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a98a:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a98e:	f892 a000 	ldrb.w	sl, [r2]
 801a992:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a996:	f890 a000 	ldrb.w	sl, [r0]
 801a99a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a99e:	f896 a000 	ldrb.w	sl, [r6]
 801a9a2:	fb1a fa03 	smulbb	sl, sl, r3
 801a9a6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a9aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a9ac:	fb0c ac05 	mla	ip, ip, r5, sl
 801a9b0:	fa1f fc8c 	uxth.w	ip, ip
 801a9b4:	f10c 0a01 	add.w	sl, ip, #1
 801a9b8:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a9bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a9c0:	f886 a000 	strb.w	sl, [r6]
 801a9c4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a9c8:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a9cc:	fb03 fc0c 	mul.w	ip, r3, ip
 801a9d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a9d2:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a9d6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a9da:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a9de:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a9e2:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a9e6:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a9ea:	fb1a fa03 	smulbb	sl, sl, r3
 801a9ee:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a9f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a9f4:	fb0c ac05 	mla	ip, ip, r5, sl
 801a9f8:	fa1f fc8c 	uxth.w	ip, ip
 801a9fc:	f10c 0a01 	add.w	sl, ip, #1
 801aa00:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801aa04:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801aa08:	f886 c001 	strb.w	ip, [r6, #1]
 801aa0c:	78bf      	ldrb	r7, [r7, #2]
 801aa0e:	f89e c002 	ldrb.w	ip, [lr, #2]
 801aa12:	437b      	muls	r3, r7
 801aa14:	fb08 330c 	mla	r3, r8, ip, r3
 801aa18:	f892 c002 	ldrb.w	ip, [r2, #2]
 801aa1c:	7882      	ldrb	r2, [r0, #2]
 801aa1e:	fb01 310c 	mla	r1, r1, ip, r3
 801aa22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801aa24:	fb09 1902 	mla	r9, r9, r2, r1
 801aa28:	78b1      	ldrb	r1, [r6, #2]
 801aa2a:	fb11 f103 	smulbb	r1, r1, r3
 801aa2e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801aa32:	fb09 1505 	mla	r5, r9, r5, r1
 801aa36:	b2ad      	uxth	r5, r5
 801aa38:	1c6b      	adds	r3, r5, #1
 801aa3a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801aa3e:	122d      	asrs	r5, r5, #8
 801aa40:	70b5      	strb	r5, [r6, #2]
 801aa42:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aa44:	3603      	adds	r6, #3
 801aa46:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801aa48:	f10b 3bff 	add.w	fp, fp, #4294967295
 801aa4c:	4413      	add	r3, r2
 801aa4e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801aa50:	931d      	str	r3, [sp, #116]	@ 0x74
 801aa52:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aa54:	4413      	add	r3, r2
 801aa56:	931e      	str	r3, [sp, #120]	@ 0x78
 801aa58:	e73b      	b.n	801a8d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801aa5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aa5c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801aa5e:	4433      	add	r3, r6
 801aa60:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801aa62:	931d      	str	r3, [sp, #116]	@ 0x74
 801aa64:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aa66:	4433      	add	r3, r6
 801aa68:	931e      	str	r3, [sp, #120]	@ 0x78
 801aa6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa6c:	3b01      	subs	r3, #1
 801aa6e:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa70:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aa72:	3303      	adds	r3, #3
 801aa74:	930a      	str	r3, [sp, #40]	@ 0x28
 801aa76:	e70d      	b.n	801a894 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801aa78:	d028      	beq.n	801aacc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801aa7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aa7c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801aa7e:	3b01      	subs	r3, #1
 801aa80:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801aa82:	fb00 5003 	mla	r0, r0, r3, r5
 801aa86:	1400      	asrs	r0, r0, #16
 801aa88:	f53f af21 	bmi.w	801a8ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801aa8c:	3901      	subs	r1, #1
 801aa8e:	4288      	cmp	r0, r1
 801aa90:	f6bf af1d 	bge.w	801a8ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801aa94:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801aa96:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801aa98:	fb01 0303 	mla	r3, r1, r3, r0
 801aa9c:	141b      	asrs	r3, r3, #16
 801aa9e:	f53f af16 	bmi.w	801a8ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801aaa2:	3a01      	subs	r2, #1
 801aaa4:	4293      	cmp	r3, r2
 801aaa6:	f6bf af12 	bge.w	801a8ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801aaaa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aaac:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801aab0:	1cdf      	adds	r7, r3, #3
 801aab2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801aab6:	f1b9 0f00 	cmp.w	r9, #0
 801aaba:	dc73      	bgt.n	801aba4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801aabc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aabe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aac0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801aac4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801aac8:	441a      	add	r2, r3
 801aaca:	920a      	str	r2, [sp, #40]	@ 0x28
 801aacc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aace:	2b00      	cmp	r3, #0
 801aad0:	f340 8129 	ble.w	801ad26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801aad4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801aad8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801aada:	ee30 0a04 	vadd.f32	s0, s0, s8
 801aade:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801aae2:	eef0 6a62 	vmov.f32	s13, s5
 801aae6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801aaea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801aaee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aaf2:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801aaf6:	eef0 6a43 	vmov.f32	s13, s6
 801aafa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801aafe:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801ab02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ab0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ab0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ab12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ab16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ab1a:	ee12 2a90 	vmov	r2, s5
 801ab1e:	eef0 2a47 	vmov.f32	s5, s14
 801ab22:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab26:	ee13 2a10 	vmov	r2, s6
 801ab2a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ab2c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ab2e:	eeb0 3a67 	vmov.f32	s6, s15
 801ab32:	fb92 f3f3 	sdiv	r3, r2, r3
 801ab36:	9320      	str	r3, [sp, #128]	@ 0x80
 801ab38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ab3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ab3c:	3b01      	subs	r3, #1
 801ab3e:	930d      	str	r3, [sp, #52]	@ 0x34
 801ab40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ab42:	bf08      	it	eq
 801ab44:	4613      	moveq	r3, r2
 801ab46:	9309      	str	r3, [sp, #36]	@ 0x24
 801ab48:	e696      	b.n	801a878 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801ab4a:	b149      	cbz	r1, 801ab60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801ab4c:	5caa      	ldrb	r2, [r5, r2]
 801ab4e:	4670      	mov	r0, lr
 801ab50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ab54:	4422      	add	r2, r4
 801ab56:	4677      	mov	r7, lr
 801ab58:	e6fb      	b.n	801a952 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ab5a:	4670      	mov	r0, lr
 801ab5c:	4672      	mov	r2, lr
 801ab5e:	e6f8      	b.n	801a952 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801ab60:	4670      	mov	r0, lr
 801ab62:	4672      	mov	r2, lr
 801ab64:	e7f7      	b.n	801ab56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801ab66:	f110 0c01 	adds.w	ip, r0, #1
 801ab6a:	f53f af6a 	bmi.w	801aa42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ab6e:	4562      	cmp	r2, ip
 801ab70:	f6ff af67 	blt.w	801aa42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ab74:	f115 0c01 	adds.w	ip, r5, #1
 801ab78:	f53f af63 	bmi.w	801aa42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ab7c:	4567      	cmp	r7, ip
 801ab7e:	f6ff af60 	blt.w	801aa42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801ab82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab84:	b23f      	sxth	r7, r7
 801ab86:	b212      	sxth	r2, r2
 801ab88:	9002      	str	r0, [sp, #8]
 801ab8a:	9701      	str	r7, [sp, #4]
 801ab8c:	9200      	str	r2, [sp, #0]
 801ab8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ab90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ab92:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801ab96:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801ab9a:	4623      	mov	r3, r4
 801ab9c:	4631      	mov	r1, r6
 801ab9e:	f7ff fd69 	bl	801a674 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801aba2:	e74e      	b.n	801aa42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aba4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801aba6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801aba8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801abac:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801abae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801abb0:	1400      	asrs	r0, r0, #16
 801abb2:	142d      	asrs	r5, r5, #16
 801abb4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801abb6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801abba:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801abbe:	fb02 5000 	mla	r0, r2, r0, r5
 801abc2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801abc4:	f815 e000 	ldrb.w	lr, [r5, r0]
 801abc8:	eb05 0c00 	add.w	ip, r5, r0
 801abcc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801abd0:	eb04 060e 	add.w	r6, r4, lr
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	f000 8097 	beq.w	801ad08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801abda:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801abde:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801abe2:	4425      	add	r5, r4
 801abe4:	2900      	cmp	r1, #0
 801abe6:	f000 8098 	beq.w	801ad1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801abea:	eb0c 0002 	add.w	r0, ip, r2
 801abee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801abf2:	7840      	ldrb	r0, [r0, #1]
 801abf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801abf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801abfc:	4422      	add	r2, r4
 801abfe:	4420      	add	r0, r4
 801ac00:	b29b      	uxth	r3, r3
 801ac02:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ac06:	b289      	uxth	r1, r1
 801ac08:	f895 e000 	ldrb.w	lr, [r5]
 801ac0c:	3703      	adds	r7, #3
 801ac0e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ac12:	fb03 f801 	mul.w	r8, r3, r1
 801ac16:	011b      	lsls	r3, r3, #4
 801ac18:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ac1c:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ac20:	eba3 0308 	sub.w	r3, r3, r8
 801ac24:	b289      	uxth	r1, r1
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	ebac 0c01 	sub.w	ip, ip, r1
 801ac2c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ac30:	fa1f fc8c 	uxth.w	ip, ip
 801ac34:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac38:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ac3c:	f892 b000 	ldrb.w	fp, [r2]
 801ac40:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ac44:	f890 b000 	ldrb.w	fp, [r0]
 801ac48:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ac4c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ac50:	fb1b fb03 	smulbb	fp, fp, r3
 801ac54:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ac58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ac5a:	fb0e be0a 	mla	lr, lr, sl, fp
 801ac5e:	fa1f fe8e 	uxth.w	lr, lr
 801ac62:	f10e 0b01 	add.w	fp, lr, #1
 801ac66:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ac6a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ac6e:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ac72:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ac76:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ac7a:	fb03 fe0e 	mul.w	lr, r3, lr
 801ac7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac80:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ac84:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ac88:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ac8c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ac90:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ac94:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ac98:	fb1b fb03 	smulbb	fp, fp, r3
 801ac9c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801aca0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aca2:	fb0e be0a 	mla	lr, lr, sl, fp
 801aca6:	fa1f fe8e 	uxth.w	lr, lr
 801acaa:	f10e 0b01 	add.w	fp, lr, #1
 801acae:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801acb2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801acb6:	f807 ec05 	strb.w	lr, [r7, #-5]
 801acba:	78ad      	ldrb	r5, [r5, #2]
 801acbc:	78b6      	ldrb	r6, [r6, #2]
 801acbe:	436b      	muls	r3, r5
 801acc0:	7895      	ldrb	r5, [r2, #2]
 801acc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801acc4:	fb0c 3306 	mla	r3, ip, r6, r3
 801acc8:	fb01 3305 	mla	r3, r1, r5, r3
 801accc:	7885      	ldrb	r5, [r0, #2]
 801acce:	fb08 3805 	mla	r8, r8, r5, r3
 801acd2:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801acd6:	fb13 f302 	smulbb	r3, r3, r2
 801acda:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801acde:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801ace0:	fb08 380a 	mla	r8, r8, sl, r3
 801ace4:	fa1f f888 	uxth.w	r8, r8
 801ace8:	f108 0301 	add.w	r3, r8, #1
 801acec:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801acf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801acf2:	4413      	add	r3, r2
 801acf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801acf6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801acfa:	931d      	str	r3, [sp, #116]	@ 0x74
 801acfc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801acfe:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ad02:	4413      	add	r3, r2
 801ad04:	931e      	str	r3, [sp, #120]	@ 0x78
 801ad06:	e6d6      	b.n	801aab6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ad08:	b151      	cbz	r1, 801ad20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ad0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ad0e:	4630      	mov	r0, r6
 801ad10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ad14:	4422      	add	r2, r4
 801ad16:	4635      	mov	r5, r6
 801ad18:	e772      	b.n	801ac00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ad1a:	4630      	mov	r0, r6
 801ad1c:	4632      	mov	r2, r6
 801ad1e:	e76f      	b.n	801ac00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ad20:	4630      	mov	r0, r6
 801ad22:	4632      	mov	r2, r6
 801ad24:	e7f7      	b.n	801ad16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ad26:	b013      	add	sp, #76	@ 0x4c
 801ad28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ad2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ad2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ad30:	784c      	ldrb	r4, [r1, #1]
 801ad32:	f891 a002 	ldrb.w	sl, [r1, #2]
 801ad36:	0224      	lsls	r4, r4, #8
 801ad38:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ad3c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801ad40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ad44:	f891 a000 	ldrb.w	sl, [r1]
 801ad48:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801ad4c:	ea44 040a 	orr.w	r4, r4, sl
 801ad50:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801ad54:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801ad58:	9401      	str	r4, [sp, #4]
 801ad5a:	fb05 c70e 	mla	r7, r5, lr, ip
 801ad5e:	2d00      	cmp	r5, #0
 801ad60:	eb02 0807 	add.w	r8, r2, r7
 801ad64:	db72      	blt.n	801ae4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ad66:	45a9      	cmp	r9, r5
 801ad68:	dd70      	ble.n	801ae4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ad6a:	f1bc 0f00 	cmp.w	ip, #0
 801ad6e:	db6b      	blt.n	801ae48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ad70:	45e6      	cmp	lr, ip
 801ad72:	dd69      	ble.n	801ae48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ad74:	5dd7      	ldrb	r7, [r2, r7]
 801ad76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ad7a:	441f      	add	r7, r3
 801ad7c:	f11c 0201 	adds.w	r2, ip, #1
 801ad80:	d467      	bmi.n	801ae52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ad82:	4596      	cmp	lr, r2
 801ad84:	dd65      	ble.n	801ae52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ad86:	2800      	cmp	r0, #0
 801ad88:	d063      	beq.n	801ae52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ad8a:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ad8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ad92:	441c      	add	r4, r3
 801ad94:	3501      	adds	r5, #1
 801ad96:	d460      	bmi.n	801ae5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ad98:	45a9      	cmp	r9, r5
 801ad9a:	dd5e      	ble.n	801ae5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ad9c:	2e00      	cmp	r6, #0
 801ad9e:	d05c      	beq.n	801ae5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ada0:	f1bc 0f00 	cmp.w	ip, #0
 801ada4:	db57      	blt.n	801ae56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801ada6:	45e6      	cmp	lr, ip
 801ada8:	dd55      	ble.n	801ae56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801adaa:	f818 500e 	ldrb.w	r5, [r8, lr]
 801adae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801adb2:	441d      	add	r5, r3
 801adb4:	f11c 0201 	adds.w	r2, ip, #1
 801adb8:	d452      	bmi.n	801ae60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801adba:	4596      	cmp	lr, r2
 801adbc:	dd50      	ble.n	801ae60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801adbe:	2800      	cmp	r0, #0
 801adc0:	d04e      	beq.n	801ae60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801adc2:	44c6      	add	lr, r8
 801adc4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801adc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801adcc:	4413      	add	r3, r2
 801adce:	b280      	uxth	r0, r0
 801add0:	f897 8000 	ldrb.w	r8, [r7]
 801add4:	b2b2      	uxth	r2, r6
 801add6:	fb00 f602 	mul.w	r6, r0, r2
 801adda:	0100      	lsls	r0, r0, #4
 801addc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ade0:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801ade4:	1b80      	subs	r0, r0, r6
 801ade6:	fa1f fc82 	uxth.w	ip, r2
 801adea:	b282      	uxth	r2, r0
 801adec:	7820      	ldrb	r0, [r4, #0]
 801adee:	ebae 0e0c 	sub.w	lr, lr, ip
 801adf2:	4350      	muls	r0, r2
 801adf4:	fa1f fe8e 	uxth.w	lr, lr
 801adf8:	fb0e 0808 	mla	r8, lr, r8, r0
 801adfc:	7828      	ldrb	r0, [r5, #0]
 801adfe:	fb0c 8800 	mla	r8, ip, r0, r8
 801ae02:	7818      	ldrb	r0, [r3, #0]
 801ae04:	fb06 8000 	mla	r0, r6, r0, r8
 801ae08:	1200      	asrs	r0, r0, #8
 801ae0a:	7008      	strb	r0, [r1, #0]
 801ae0c:	7860      	ldrb	r0, [r4, #1]
 801ae0e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ae12:	4350      	muls	r0, r2
 801ae14:	fb0e 0808 	mla	r8, lr, r8, r0
 801ae18:	7868      	ldrb	r0, [r5, #1]
 801ae1a:	fb0c 8800 	mla	r8, ip, r0, r8
 801ae1e:	7858      	ldrb	r0, [r3, #1]
 801ae20:	fb06 8000 	mla	r0, r6, r0, r8
 801ae24:	1200      	asrs	r0, r0, #8
 801ae26:	7048      	strb	r0, [r1, #1]
 801ae28:	78a0      	ldrb	r0, [r4, #2]
 801ae2a:	78bf      	ldrb	r7, [r7, #2]
 801ae2c:	4350      	muls	r0, r2
 801ae2e:	78aa      	ldrb	r2, [r5, #2]
 801ae30:	fb0e 0007 	mla	r0, lr, r7, r0
 801ae34:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ae38:	789a      	ldrb	r2, [r3, #2]
 801ae3a:	fb06 c202 	mla	r2, r6, r2, ip
 801ae3e:	1212      	asrs	r2, r2, #8
 801ae40:	708a      	strb	r2, [r1, #2]
 801ae42:	b002      	add	sp, #8
 801ae44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ae48:	af01      	add	r7, sp, #4
 801ae4a:	e797      	b.n	801ad7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ae4c:	ac01      	add	r4, sp, #4
 801ae4e:	4627      	mov	r7, r4
 801ae50:	e7a0      	b.n	801ad94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ae52:	ac01      	add	r4, sp, #4
 801ae54:	e79e      	b.n	801ad94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ae56:	ad01      	add	r5, sp, #4
 801ae58:	e7ac      	b.n	801adb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801ae5a:	ab01      	add	r3, sp, #4
 801ae5c:	461d      	mov	r5, r3
 801ae5e:	e7b6      	b.n	801adce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801ae60:	ab01      	add	r3, sp, #4
 801ae62:	e7b4      	b.n	801adce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ae64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae68:	b08d      	sub	sp, #52	@ 0x34
 801ae6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ae6e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801ae72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ae74:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ae76:	9306      	str	r3, [sp, #24]
 801ae78:	6850      	ldr	r0, [r2, #4]
 801ae7a:	6812      	ldr	r2, [r2, #0]
 801ae7c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ae7e:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801ae82:	fb00 1303 	mla	r3, r0, r3, r1
 801ae86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ae8a:	18d3      	adds	r3, r2, r3
 801ae8c:	9307      	str	r3, [sp, #28]
 801ae8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ae90:	681b      	ldr	r3, [r3, #0]
 801ae92:	9308      	str	r3, [sp, #32]
 801ae94:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ae96:	685d      	ldr	r5, [r3, #4]
 801ae98:	3504      	adds	r5, #4
 801ae9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	dc03      	bgt.n	801aea8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801aea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	f340 81e6 	ble.w	801b274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801aea8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801aeaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aeae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aeb2:	1e48      	subs	r0, r1, #1
 801aeb4:	1e56      	subs	r6, r2, #1
 801aeb6:	9b06      	ldr	r3, [sp, #24]
 801aeb8:	2b00      	cmp	r3, #0
 801aeba:	f340 80bd 	ble.w	801b038 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801aebe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801aec0:	1427      	asrs	r7, r4, #16
 801aec2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801aec6:	d406      	bmi.n	801aed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aec8:	4287      	cmp	r7, r0
 801aeca:	da04      	bge.n	801aed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aecc:	2b00      	cmp	r3, #0
 801aece:	db02      	blt.n	801aed6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aed0:	42b3      	cmp	r3, r6
 801aed2:	f2c0 80b2 	blt.w	801b03a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801aed6:	3701      	adds	r7, #1
 801aed8:	f100 80a1 	bmi.w	801b01e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801aedc:	42b9      	cmp	r1, r7
 801aede:	f2c0 809e 	blt.w	801b01e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801aee2:	3301      	adds	r3, #1
 801aee4:	f100 809b 	bmi.w	801b01e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801aee8:	429a      	cmp	r2, r3
 801aeea:	f2c0 8098 	blt.w	801b01e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801aeee:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801aef2:	f1bb 0f00 	cmp.w	fp, #0
 801aef6:	f340 80bf 	ble.w	801b078 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801aefa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801aefc:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801aefe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801af00:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801af04:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801af08:	1420      	asrs	r0, r4, #16
 801af0a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801af0c:	ea4f 4723 	mov.w	r7, r3, asr #16
 801af10:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801af14:	6892      	ldr	r2, [r2, #8]
 801af16:	f100 8103 	bmi.w	801b120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801af1a:	f102 3eff 	add.w	lr, r2, #4294967295
 801af1e:	4570      	cmp	r0, lr
 801af20:	f280 80fe 	bge.w	801b120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801af24:	2f00      	cmp	r7, #0
 801af26:	f2c0 80fb 	blt.w	801b120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801af2a:	f10c 3eff 	add.w	lr, ip, #4294967295
 801af2e:	4577      	cmp	r7, lr
 801af30:	f280 80f6 	bge.w	801b120 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801af34:	b212      	sxth	r2, r2
 801af36:	fb07 0002 	mla	r0, r7, r2, r0
 801af3a:	9f08      	ldr	r7, [sp, #32]
 801af3c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801af40:	eb07 0e00 	add.w	lr, r7, r0
 801af44:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801af48:	eb05 0c08 	add.w	ip, r5, r8
 801af4c:	2b00      	cmp	r3, #0
 801af4e:	f000 80d8 	beq.w	801b102 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801af52:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801af56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801af5a:	442f      	add	r7, r5
 801af5c:	2900      	cmp	r1, #0
 801af5e:	f000 80d9 	beq.w	801b114 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801af62:	eb0e 0002 	add.w	r0, lr, r2
 801af66:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801af6a:	7840      	ldrb	r0, [r0, #1]
 801af6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801af70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801af74:	442a      	add	r2, r5
 801af76:	4428      	add	r0, r5
 801af78:	b29b      	uxth	r3, r3
 801af7a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801af7e:	b289      	uxth	r1, r1
 801af80:	f897 8000 	ldrb.w	r8, [r7]
 801af84:	fb03 f901 	mul.w	r9, r3, r1
 801af88:	011b      	lsls	r3, r3, #4
 801af8a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801af8e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801af92:	eba3 0309 	sub.w	r3, r3, r9
 801af96:	b289      	uxth	r1, r1
 801af98:	b29b      	uxth	r3, r3
 801af9a:	ebae 0e01 	sub.w	lr, lr, r1
 801af9e:	fb03 f808 	mul.w	r8, r3, r8
 801afa2:	fa1f fe8e 	uxth.w	lr, lr
 801afa6:	fb0e 880a 	mla	r8, lr, sl, r8
 801afaa:	f892 a000 	ldrb.w	sl, [r2]
 801afae:	fb01 880a 	mla	r8, r1, sl, r8
 801afb2:	f890 a000 	ldrb.w	sl, [r0]
 801afb6:	fb09 880a 	mla	r8, r9, sl, r8
 801afba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801afbe:	f886 8000 	strb.w	r8, [r6]
 801afc2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801afc6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801afca:	fb03 f808 	mul.w	r8, r3, r8
 801afce:	fb0e 880a 	mla	r8, lr, sl, r8
 801afd2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801afd6:	fb01 880a 	mla	r8, r1, sl, r8
 801afda:	f890 a001 	ldrb.w	sl, [r0, #1]
 801afde:	fb09 880a 	mla	r8, r9, sl, r8
 801afe2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801afe6:	f886 8001 	strb.w	r8, [r6, #1]
 801afea:	78bf      	ldrb	r7, [r7, #2]
 801afec:	f89c c002 	ldrb.w	ip, [ip, #2]
 801aff0:	437b      	muls	r3, r7
 801aff2:	7892      	ldrb	r2, [r2, #2]
 801aff4:	fb0e 330c 	mla	r3, lr, ip, r3
 801aff8:	fb01 3102 	mla	r1, r1, r2, r3
 801affc:	7882      	ldrb	r2, [r0, #2]
 801affe:	fb09 1902 	mla	r9, r9, r2, r1
 801b002:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b006:	f886 9002 	strb.w	r9, [r6, #2]
 801b00a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b00c:	3603      	adds	r6, #3
 801b00e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b010:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b014:	441c      	add	r4, r3
 801b016:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b018:	4413      	add	r3, r2
 801b01a:	9318      	str	r3, [sp, #96]	@ 0x60
 801b01c:	e769      	b.n	801aef2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801b01e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b020:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801b022:	441c      	add	r4, r3
 801b024:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b026:	443b      	add	r3, r7
 801b028:	9318      	str	r3, [sp, #96]	@ 0x60
 801b02a:	9b06      	ldr	r3, [sp, #24]
 801b02c:	3b01      	subs	r3, #1
 801b02e:	9306      	str	r3, [sp, #24]
 801b030:	9b07      	ldr	r3, [sp, #28]
 801b032:	3303      	adds	r3, #3
 801b034:	9307      	str	r3, [sp, #28]
 801b036:	e73e      	b.n	801aeb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b038:	d026      	beq.n	801b088 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801b03a:	9b06      	ldr	r3, [sp, #24]
 801b03c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801b03e:	3b01      	subs	r3, #1
 801b040:	fb00 4003 	mla	r0, r0, r3, r4
 801b044:	1400      	asrs	r0, r0, #16
 801b046:	f53f af52 	bmi.w	801aeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b04a:	3901      	subs	r1, #1
 801b04c:	4288      	cmp	r0, r1
 801b04e:	f6bf af4e 	bge.w	801aeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b052:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801b054:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801b056:	fb01 0303 	mla	r3, r1, r3, r0
 801b05a:	141b      	asrs	r3, r3, #16
 801b05c:	f53f af47 	bmi.w	801aeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b060:	3a01      	subs	r2, #1
 801b062:	4293      	cmp	r3, r2
 801b064:	f6bf af43 	bge.w	801aeee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801b068:	9b07      	ldr	r3, [sp, #28]
 801b06a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801b06e:	f103 0803 	add.w	r8, r3, #3
 801b072:	f1ba 0f00 	cmp.w	sl, #0
 801b076:	dc71      	bgt.n	801b15c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801b078:	9b06      	ldr	r3, [sp, #24]
 801b07a:	9a07      	ldr	r2, [sp, #28]
 801b07c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b080:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b084:	441a      	add	r2, r3
 801b086:	9207      	str	r2, [sp, #28]
 801b088:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	f340 80f2 	ble.w	801b274 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801b090:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b094:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b096:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b09a:	eeb0 6a62 	vmov.f32	s12, s5
 801b09e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b0a2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b0a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0aa:	ee16 4a10 	vmov	r4, s12
 801b0ae:	eeb0 6a43 	vmov.f32	s12, s6
 801b0b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b0b6:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801b0ba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b0be:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b0c2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b0c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b0ca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b0ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b0d2:	ee12 2a90 	vmov	r2, s5
 801b0d6:	eef0 2a47 	vmov.f32	s5, s14
 801b0da:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0de:	ee13 2a10 	vmov	r2, s6
 801b0e2:	9319      	str	r3, [sp, #100]	@ 0x64
 801b0e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b0e6:	eeb0 3a67 	vmov.f32	s6, s15
 801b0ea:	fb92 f3f3 	sdiv	r3, r2, r3
 801b0ee:	931a      	str	r3, [sp, #104]	@ 0x68
 801b0f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b0f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b0f4:	3b01      	subs	r3, #1
 801b0f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0f8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b0fa:	bf08      	it	eq
 801b0fc:	4613      	moveq	r3, r2
 801b0fe:	9306      	str	r3, [sp, #24]
 801b100:	e6cb      	b.n	801ae9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b102:	b151      	cbz	r1, 801b11a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b104:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801b108:	4660      	mov	r0, ip
 801b10a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b10e:	442a      	add	r2, r5
 801b110:	4667      	mov	r7, ip
 801b112:	e731      	b.n	801af78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b114:	4660      	mov	r0, ip
 801b116:	4662      	mov	r2, ip
 801b118:	e72e      	b.n	801af78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b11a:	4660      	mov	r0, ip
 801b11c:	4662      	mov	r2, ip
 801b11e:	e7f7      	b.n	801b110 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801b120:	f110 0e01 	adds.w	lr, r0, #1
 801b124:	f53f af71 	bmi.w	801b00a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b128:	4572      	cmp	r2, lr
 801b12a:	f6ff af6e 	blt.w	801b00a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b12e:	f117 0e01 	adds.w	lr, r7, #1
 801b132:	f53f af6a 	bmi.w	801b00a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b136:	45f4      	cmp	ip, lr
 801b138:	f6ff af67 	blt.w	801b00a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b13c:	b212      	sxth	r2, r2
 801b13e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801b142:	fa0f f38c 	sxth.w	r3, ip
 801b146:	9200      	str	r2, [sp, #0]
 801b148:	4631      	mov	r1, r6
 801b14a:	9a08      	ldr	r2, [sp, #32]
 801b14c:	9301      	str	r3, [sp, #4]
 801b14e:	462b      	mov	r3, r5
 801b150:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801b154:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b156:	f7ff fde9 	bl	801ad2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801b15a:	e756      	b.n	801b00a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b15c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b15e:	1426      	asrs	r6, r4, #16
 801b160:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801b162:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b166:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b16a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b16c:	1400      	asrs	r0, r0, #16
 801b16e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b172:	fb02 6000 	mla	r0, r2, r0, r6
 801b176:	9e08      	ldr	r6, [sp, #32]
 801b178:	f816 e000 	ldrb.w	lr, [r6, r0]
 801b17c:	eb06 0c00 	add.w	ip, r6, r0
 801b180:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b184:	eb05 070e 	add.w	r7, r5, lr
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d064      	beq.n	801b256 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801b18c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801b190:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b194:	442e      	add	r6, r5
 801b196:	2900      	cmp	r1, #0
 801b198:	d066      	beq.n	801b268 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801b19a:	eb0c 0002 	add.w	r0, ip, r2
 801b19e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b1a2:	7840      	ldrb	r0, [r0, #1]
 801b1a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b1a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b1ac:	442a      	add	r2, r5
 801b1ae:	4428      	add	r0, r5
 801b1b0:	b29b      	uxth	r3, r3
 801b1b2:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801b1b6:	b289      	uxth	r1, r1
 801b1b8:	f896 e000 	ldrb.w	lr, [r6]
 801b1bc:	f108 0803 	add.w	r8, r8, #3
 801b1c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b1c4:	fb03 f901 	mul.w	r9, r3, r1
 801b1c8:	011b      	lsls	r3, r3, #4
 801b1ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b1ce:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801b1d2:	eba3 0309 	sub.w	r3, r3, r9
 801b1d6:	b289      	uxth	r1, r1
 801b1d8:	b29b      	uxth	r3, r3
 801b1da:	ebac 0c01 	sub.w	ip, ip, r1
 801b1de:	fb03 fe0e 	mul.w	lr, r3, lr
 801b1e2:	fa1f fc8c 	uxth.w	ip, ip
 801b1e6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b1ea:	f892 b000 	ldrb.w	fp, [r2]
 801b1ee:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b1f2:	f890 b000 	ldrb.w	fp, [r0]
 801b1f6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b1fa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b1fe:	f808 ec06 	strb.w	lr, [r8, #-6]
 801b202:	f896 e001 	ldrb.w	lr, [r6, #1]
 801b206:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b20a:	fb03 fe0e 	mul.w	lr, r3, lr
 801b20e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b212:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b216:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b21a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b21e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b222:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b226:	f808 ec05 	strb.w	lr, [r8, #-5]
 801b22a:	78b6      	ldrb	r6, [r6, #2]
 801b22c:	78bf      	ldrb	r7, [r7, #2]
 801b22e:	4373      	muls	r3, r6
 801b230:	7896      	ldrb	r6, [r2, #2]
 801b232:	7882      	ldrb	r2, [r0, #2]
 801b234:	fb0c 3307 	mla	r3, ip, r7, r3
 801b238:	fb01 3306 	mla	r3, r1, r6, r3
 801b23c:	fb09 3902 	mla	r9, r9, r2, r3
 801b240:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b242:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b244:	441c      	add	r4, r3
 801b246:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b248:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b24c:	4413      	add	r3, r2
 801b24e:	f808 9c04 	strb.w	r9, [r8, #-4]
 801b252:	9318      	str	r3, [sp, #96]	@ 0x60
 801b254:	e70d      	b.n	801b072 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b256:	b151      	cbz	r1, 801b26e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801b258:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b25c:	4638      	mov	r0, r7
 801b25e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b262:	442a      	add	r2, r5
 801b264:	463e      	mov	r6, r7
 801b266:	e7a3      	b.n	801b1b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b268:	4638      	mov	r0, r7
 801b26a:	463a      	mov	r2, r7
 801b26c:	e7a0      	b.n	801b1b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b26e:	4638      	mov	r0, r7
 801b270:	463a      	mov	r2, r7
 801b272:	e7f7      	b.n	801b264 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801b274:	b00d      	add	sp, #52	@ 0x34
 801b276:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b27a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801b27a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b27e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801b282:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801b286:	2d00      	cmp	r5, #0
 801b288:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801b28c:	fb05 700c 	mla	r0, r5, ip, r7
 801b290:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801b294:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801b298:	eb02 0800 	add.w	r8, r2, r0
 801b29c:	f2c0 8118 	blt.w	801b4d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b2a0:	45a9      	cmp	r9, r5
 801b2a2:	f340 8115 	ble.w	801b4d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b2a6:	2f00      	cmp	r7, #0
 801b2a8:	f2c0 8110 	blt.w	801b4cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b2ac:	45bc      	cmp	ip, r7
 801b2ae:	f340 810d 	ble.w	801b4cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b2b2:	5c12      	ldrb	r2, [r2, r0]
 801b2b4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b2b8:	1c7a      	adds	r2, r7, #1
 801b2ba:	f100 810c 	bmi.w	801b4d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b2be:	4594      	cmp	ip, r2
 801b2c0:	f340 8109 	ble.w	801b4d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b2c4:	2c00      	cmp	r4, #0
 801b2c6:	f000 8108 	beq.w	801b4da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801b2ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b2ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b2d2:	3501      	adds	r5, #1
 801b2d4:	f100 8105 	bmi.w	801b4e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b2d8:	45a9      	cmp	r9, r5
 801b2da:	f340 8102 	ble.w	801b4e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b2de:	f1be 0f00 	cmp.w	lr, #0
 801b2e2:	f000 8101 	beq.w	801b4e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801b2e6:	2f00      	cmp	r7, #0
 801b2e8:	f2c0 80f9 	blt.w	801b4de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b2ec:	45bc      	cmp	ip, r7
 801b2ee:	f340 80f6 	ble.w	801b4de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b2f2:	f818 200c 	ldrb.w	r2, [r8, ip]
 801b2f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b2fa:	3701      	adds	r7, #1
 801b2fc:	f100 80f7 	bmi.w	801b4ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b300:	45bc      	cmp	ip, r7
 801b302:	f340 80f4 	ble.w	801b4ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b306:	2c00      	cmp	r4, #0
 801b308:	f000 80f3 	beq.w	801b4f2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801b30c:	44c4      	add	ip, r8
 801b30e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b312:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b316:	fa1f fc84 	uxth.w	ip, r4
 801b31a:	fa1f f48e 	uxth.w	r4, lr
 801b31e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b322:	fb04 fe0c 	mul.w	lr, r4, ip
 801b326:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b32a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b32e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801b332:	ebac 070e 	sub.w	r7, ip, lr
 801b336:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801b33a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b33e:	b2a4      	uxth	r4, r4
 801b340:	b2bf      	uxth	r7, r7
 801b342:	1b1b      	subs	r3, r3, r4
 801b344:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b348:	fb07 fc0a 	mul.w	ip, r7, sl
 801b34c:	b29b      	uxth	r3, r3
 801b34e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b352:	9300      	str	r3, [sp, #0]
 801b354:	fb04 cc09 	mla	ip, r4, r9, ip
 801b358:	fb0e cc08 	mla	ip, lr, r8, ip
 801b35c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b360:	9301      	str	r3, [sp, #4]
 801b362:	2b00      	cmp	r3, #0
 801b364:	f000 80af 	beq.w	801b4c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801b368:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801b36c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b370:	fb0b fc0c 	mul.w	ip, fp, ip
 801b374:	fb0b f606 	mul.w	r6, fp, r6
 801b378:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b37c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b380:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b384:	44dc      	add	ip, fp
 801b386:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801b38a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b38e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b392:	fb0a fb0b 	mul.w	fp, sl, fp
 801b396:	fb0a fa00 	mul.w	sl, sl, r0
 801b39a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801b39e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801b3a2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801b3a6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b3aa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b3ae:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b3b2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b3b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b3ba:	0a36      	lsrs	r6, r6, #8
 801b3bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b3c0:	44dc      	add	ip, fp
 801b3c2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801b3c6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b3ca:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b3ce:	fb09 fb0b 	mul.w	fp, r9, fp
 801b3d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b3d6:	fb09 f905 	mul.w	r9, r9, r5
 801b3da:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b3de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b3e2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801b3e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b3ea:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b3ee:	fb0c fc07 	mul.w	ip, ip, r7
 801b3f2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b3f6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801b3fa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b3fe:	4458      	add	r0, fp
 801b400:	fb08 f505 	mul.w	r5, r8, r5
 801b404:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b408:	fb08 f802 	mul.w	r8, r8, r2
 801b40c:	0a00      	lsrs	r0, r0, #8
 801b40e:	0a2a      	lsrs	r2, r5, #8
 801b410:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801b414:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b418:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b41c:	4415      	add	r5, r2
 801b41e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b422:	0a2d      	lsrs	r5, r5, #8
 801b424:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b428:	9a00      	ldr	r2, [sp, #0]
 801b42a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b42e:	fb03 cc02 	mla	ip, r3, r2, ip
 801b432:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b436:	9b01      	ldr	r3, [sp, #4]
 801b438:	fb05 c50e 	mla	r5, r5, lr, ip
 801b43c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b440:	fb00 5004 	mla	r0, r0, r4, r5
 801b444:	0a00      	lsrs	r0, r0, #8
 801b446:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801b44a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801b44e:	4378      	muls	r0, r7
 801b450:	fb02 0006 	mla	r0, r2, r6, r0
 801b454:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b458:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801b45c:	fb04 e000 	mla	r0, r4, r0, lr
 801b460:	0a00      	lsrs	r0, r0, #8
 801b462:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b466:	4328      	orrs	r0, r5
 801b468:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801b46c:	b2ad      	uxth	r5, r5
 801b46e:	b2c4      	uxtb	r4, r0
 801b470:	436b      	muls	r3, r5
 801b472:	fb14 f405 	smulbb	r4, r4, r5
 801b476:	1c5a      	adds	r2, r3, #1
 801b478:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b47c:	780b      	ldrb	r3, [r1, #0]
 801b47e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801b482:	b2d2      	uxtb	r2, r2
 801b484:	fb03 4302 	mla	r3, r3, r2, r4
 801b488:	b29b      	uxth	r3, r3
 801b48a:	1c5c      	adds	r4, r3, #1
 801b48c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b490:	784c      	ldrb	r4, [r1, #1]
 801b492:	fb14 f402 	smulbb	r4, r4, r2
 801b496:	121b      	asrs	r3, r3, #8
 801b498:	700b      	strb	r3, [r1, #0]
 801b49a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801b49e:	fb03 4305 	mla	r3, r3, r5, r4
 801b4a2:	b29b      	uxth	r3, r3
 801b4a4:	1c5c      	adds	r4, r3, #1
 801b4a6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b4aa:	0c04      	lsrs	r4, r0, #16
 801b4ac:	7888      	ldrb	r0, [r1, #2]
 801b4ae:	121b      	asrs	r3, r3, #8
 801b4b0:	fb10 f002 	smulbb	r0, r0, r2
 801b4b4:	704b      	strb	r3, [r1, #1]
 801b4b6:	fb04 0005 	mla	r0, r4, r5, r0
 801b4ba:	b280      	uxth	r0, r0
 801b4bc:	1c43      	adds	r3, r0, #1
 801b4be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b4c2:	1200      	asrs	r0, r0, #8
 801b4c4:	7088      	strb	r0, [r1, #2]
 801b4c6:	b003      	add	sp, #12
 801b4c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b4cc:	2600      	movs	r6, #0
 801b4ce:	e6f3      	b.n	801b2b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801b4d0:	2000      	movs	r0, #0
 801b4d2:	4606      	mov	r6, r0
 801b4d4:	e6fd      	b.n	801b2d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b4d6:	2000      	movs	r0, #0
 801b4d8:	e6fb      	b.n	801b2d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b4da:	4620      	mov	r0, r4
 801b4dc:	e6f9      	b.n	801b2d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b4de:	2500      	movs	r5, #0
 801b4e0:	e70b      	b.n	801b2fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801b4e2:	2200      	movs	r2, #0
 801b4e4:	4615      	mov	r5, r2
 801b4e6:	e716      	b.n	801b316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b4e8:	4672      	mov	r2, lr
 801b4ea:	4675      	mov	r5, lr
 801b4ec:	e713      	b.n	801b316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b4ee:	2200      	movs	r2, #0
 801b4f0:	e711      	b.n	801b316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b4f2:	4622      	mov	r2, r4
 801b4f4:	e70f      	b.n	801b316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801b4f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b4f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4fa:	b09f      	sub	sp, #124	@ 0x7c
 801b4fc:	921b      	str	r2, [sp, #108]	@ 0x6c
 801b4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801b500:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801b502:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801b506:	901d      	str	r0, [sp, #116]	@ 0x74
 801b508:	931c      	str	r3, [sp, #112]	@ 0x70
 801b50a:	6850      	ldr	r0, [r2, #4]
 801b50c:	9119      	str	r1, [sp, #100]	@ 0x64
 801b50e:	6812      	ldr	r2, [r2, #0]
 801b510:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801b512:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801b516:	fb00 1303 	mla	r3, r0, r3, r1
 801b51a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b51e:	18d3      	adds	r3, r2, r3
 801b520:	930c      	str	r3, [sp, #48]	@ 0x30
 801b522:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b524:	681b      	ldr	r3, [r3, #0]
 801b526:	9312      	str	r3, [sp, #72]	@ 0x48
 801b528:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b52a:	685e      	ldr	r6, [r3, #4]
 801b52c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801b530:	3604      	adds	r6, #4
 801b532:	930d      	str	r3, [sp, #52]	@ 0x34
 801b534:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b536:	2b00      	cmp	r3, #0
 801b538:	dc03      	bgt.n	801b542 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b53a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	f340 8378 	ble.w	801bc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b542:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b544:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b548:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b54c:	1e48      	subs	r0, r1, #1
 801b54e:	1e57      	subs	r7, r2, #1
 801b550:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b552:	2b00      	cmp	r3, #0
 801b554:	f340 818c 	ble.w	801b870 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801b558:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b55a:	142b      	asrs	r3, r5, #16
 801b55c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b560:	d406      	bmi.n	801b570 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b562:	4584      	cmp	ip, r0
 801b564:	da04      	bge.n	801b570 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b566:	2b00      	cmp	r3, #0
 801b568:	db02      	blt.n	801b570 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b56a:	42bb      	cmp	r3, r7
 801b56c:	f2c0 8181 	blt.w	801b872 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801b570:	f11c 0c01 	adds.w	ip, ip, #1
 801b574:	f100 816f 	bmi.w	801b856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b578:	4561      	cmp	r1, ip
 801b57a:	f2c0 816c 	blt.w	801b856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b57e:	3301      	adds	r3, #1
 801b580:	f100 8169 	bmi.w	801b856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b584:	429a      	cmp	r2, r3
 801b586:	f2c0 8166 	blt.w	801b856 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b58a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b58c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b58e:	931a      	str	r3, [sp, #104]	@ 0x68
 801b590:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b592:	2b00      	cmp	r3, #0
 801b594:	f340 818c 	ble.w	801b8b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b598:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b59a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b59e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b5a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b5a6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b5a8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801b5ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b5ae:	141b      	asrs	r3, r3, #16
 801b5b0:	f100 81d0 	bmi.w	801b954 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b5b4:	f100 38ff 	add.w	r8, r0, #4294967295
 801b5b8:	4543      	cmp	r3, r8
 801b5ba:	f280 81cb 	bge.w	801b954 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b5be:	f1bc 0f00 	cmp.w	ip, #0
 801b5c2:	f2c0 81c7 	blt.w	801b954 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b5c6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b5ca:	45c4      	cmp	ip, r8
 801b5cc:	f280 81c2 	bge.w	801b954 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b5d0:	b200      	sxth	r0, r0
 801b5d2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b5d4:	fb0c 3300 	mla	r3, ip, r0, r3
 801b5d8:	eb04 0803 	add.w	r8, r4, r3
 801b5dc:	5ce3      	ldrb	r3, [r4, r3]
 801b5de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b5e2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b5e6:	2a00      	cmp	r2, #0
 801b5e8:	f000 81a9 	beq.w	801b93e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801b5ec:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b5f0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b5f4:	940e      	str	r4, [sp, #56]	@ 0x38
 801b5f6:	0e24      	lsrs	r4, r4, #24
 801b5f8:	9415      	str	r4, [sp, #84]	@ 0x54
 801b5fa:	b179      	cbz	r1, 801b61c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b5fc:	eb08 0c00 	add.w	ip, r8, r0
 801b600:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b604:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b608:	900a      	str	r0, [sp, #40]	@ 0x28
 801b60a:	0e00      	lsrs	r0, r0, #24
 801b60c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b60e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b612:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b616:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b618:	0e00      	lsrs	r0, r0, #24
 801b61a:	9016      	str	r0, [sp, #88]	@ 0x58
 801b61c:	b292      	uxth	r2, r2
 801b61e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b620:	b289      	uxth	r1, r1
 801b622:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b624:	fb02 f901 	mul.w	r9, r2, r1
 801b628:	0112      	lsls	r2, r2, #4
 801b62a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b62e:	eba2 0809 	sub.w	r8, r2, r9
 801b632:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b636:	b289      	uxth	r1, r1
 801b638:	fa1f f888 	uxth.w	r8, r8
 801b63c:	1a52      	subs	r2, r2, r1
 801b63e:	fb08 f000 	mul.w	r0, r8, r0
 801b642:	b292      	uxth	r2, r2
 801b644:	fb02 000e 	mla	r0, r2, lr, r0
 801b648:	fb01 0004 	mla	r0, r1, r4, r0
 801b64c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b64e:	fb09 0004 	mla	r0, r9, r4, r0
 801b652:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b656:	2800      	cmp	r0, #0
 801b658:	f000 80f2 	beq.w	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b65c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b660:	d01b      	beq.n	801b69a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b662:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b666:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b66a:	fb0e fa0a 	mul.w	sl, lr, sl
 801b66e:	fb0e fe03 	mul.w	lr, lr, r3
 801b672:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b676:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b67a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b67e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b682:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b686:	4453      	add	r3, sl
 801b688:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b68c:	0a1b      	lsrs	r3, r3, #8
 801b68e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b692:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b696:	ea43 030c 	orr.w	r3, r3, ip
 801b69a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b69c:	2cff      	cmp	r4, #255	@ 0xff
 801b69e:	d021      	beq.n	801b6e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801b6a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b6a2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b6a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b6a8:	fb04 fb0b 	mul.w	fp, r4, fp
 801b6ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b6ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b6b2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b6b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b6b8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b6bc:	fb04 fa0a 	mul.w	sl, r4, sl
 801b6c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b6c4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b6c8:	44de      	add	lr, fp
 801b6ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b6ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b6d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b6d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b6da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b6de:	ea4e 040a 	orr.w	r4, lr, sl
 801b6e2:	940e      	str	r4, [sp, #56]	@ 0x38
 801b6e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b6e6:	2cff      	cmp	r4, #255	@ 0xff
 801b6e8:	d021      	beq.n	801b72e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b6ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b6ec:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b6f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b6f2:	fb04 fb0b 	mul.w	fp, r4, fp
 801b6f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b6f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b6fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b6fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b702:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b706:	fb04 fa0a 	mul.w	sl, r4, sl
 801b70a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b70e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b712:	44de      	add	lr, fp
 801b714:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b718:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b71c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b720:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b724:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b728:	ea4e 040a 	orr.w	r4, lr, sl
 801b72c:	940a      	str	r4, [sp, #40]	@ 0x28
 801b72e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b730:	2cff      	cmp	r4, #255	@ 0xff
 801b732:	d021      	beq.n	801b778 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b734:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b736:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b73a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b73c:	fb04 fb0b 	mul.w	fp, r4, fp
 801b740:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b742:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b746:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b748:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b74c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b750:	fb04 fa0a 	mul.w	sl, r4, sl
 801b754:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b758:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b75c:	44de      	add	lr, fp
 801b75e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b762:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b766:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b76a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b76e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b772:	ea4e 040a 	orr.w	r4, lr, sl
 801b776:	940f      	str	r4, [sp, #60]	@ 0x3c
 801b778:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b77a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b77e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b782:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b786:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b788:	fb08 fc0c 	mul.w	ip, r8, ip
 801b78c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b790:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b794:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b796:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b79a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b79e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b7a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b7a4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b7a8:	fb08 f80e 	mul.w	r8, r8, lr
 801b7ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b7b0:	fb02 8303 	mla	r3, r2, r3, r8
 801b7b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b7b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b7ba:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b7be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b7c0:	fb01 330a 	mla	r3, r1, sl, r3
 801b7c4:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801b7c8:	fb09 3901 	mla	r9, r9, r1, r3
 801b7cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b7d0:	4343      	muls	r3, r0
 801b7d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b7d6:	1c58      	adds	r0, r3, #1
 801b7d8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b7dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b7e0:	ea4c 0c09 	orr.w	ip, ip, r9
 801b7e4:	783b      	ldrb	r3, [r7, #0]
 801b7e6:	fa5f f28c 	uxtb.w	r2, ip
 801b7ea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b7ee:	fb12 f201 	smulbb	r2, r2, r1
 801b7f2:	b2c0      	uxtb	r0, r0
 801b7f4:	fb03 2300 	mla	r3, r3, r0, r2
 801b7f8:	b29b      	uxth	r3, r3
 801b7fa:	1c5a      	adds	r2, r3, #1
 801b7fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b800:	787a      	ldrb	r2, [r7, #1]
 801b802:	fb12 f200 	smulbb	r2, r2, r0
 801b806:	121b      	asrs	r3, r3, #8
 801b808:	703b      	strb	r3, [r7, #0]
 801b80a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b80e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b812:	fb03 2301 	mla	r3, r3, r1, r2
 801b816:	b29b      	uxth	r3, r3
 801b818:	1c5a      	adds	r2, r3, #1
 801b81a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b81e:	121b      	asrs	r3, r3, #8
 801b820:	707b      	strb	r3, [r7, #1]
 801b822:	78bb      	ldrb	r3, [r7, #2]
 801b824:	fb13 f000 	smulbb	r0, r3, r0
 801b828:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b82c:	fa1f fc8c 	uxth.w	ip, ip
 801b830:	f10c 0301 	add.w	r3, ip, #1
 801b834:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b838:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b83c:	f887 c002 	strb.w	ip, [r7, #2]
 801b840:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b842:	3703      	adds	r7, #3
 801b844:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b846:	441a      	add	r2, r3
 801b848:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b84a:	441d      	add	r5, r3
 801b84c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b84e:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b850:	3b01      	subs	r3, #1
 801b852:	931a      	str	r3, [sp, #104]	@ 0x68
 801b854:	e69c      	b.n	801b590 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b856:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b858:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b85a:	441c      	add	r4, r3
 801b85c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b85e:	441d      	add	r5, r3
 801b860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b862:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b864:	3b01      	subs	r3, #1
 801b866:	9309      	str	r3, [sp, #36]	@ 0x24
 801b868:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b86a:	3303      	adds	r3, #3
 801b86c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b86e:	e66f      	b.n	801b550 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b870:	d026      	beq.n	801b8c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801b872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b874:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b876:	3b01      	subs	r3, #1
 801b878:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b87a:	fb00 4003 	mla	r0, r0, r3, r4
 801b87e:	1400      	asrs	r0, r0, #16
 801b880:	f53f ae83 	bmi.w	801b58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b884:	3901      	subs	r1, #1
 801b886:	4288      	cmp	r0, r1
 801b888:	f6bf ae7f 	bge.w	801b58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b88c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b88e:	fb01 5303 	mla	r3, r1, r3, r5
 801b892:	141b      	asrs	r3, r3, #16
 801b894:	f53f ae79 	bmi.w	801b58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b898:	3a01      	subs	r2, #1
 801b89a:	4293      	cmp	r3, r2
 801b89c:	f6bf ae75 	bge.w	801b58a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b8a2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b8a6:	f103 0e03 	add.w	lr, r3, #3
 801b8aa:	f1bb 0f00 	cmp.w	fp, #0
 801b8ae:	dc71      	bgt.n	801b994 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b8b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b8b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b8b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b8bc:	4423      	add	r3, r4
 801b8be:	930c      	str	r3, [sp, #48]	@ 0x30
 801b8c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b8c2:	2b00      	cmp	r3, #0
 801b8c4:	f340 81b5 	ble.w	801bc32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b8c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b8cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b8ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b8d6:	eef0 6a62 	vmov.f32	s13, s5
 801b8da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b8de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b8e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8e6:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b8ea:	eef0 6a43 	vmov.f32	s13, s6
 801b8ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b8f2:	ee16 5a90 	vmov	r5, s13
 801b8f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b8fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b8fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b902:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b906:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b90a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b90e:	ee12 2a90 	vmov	r2, s5
 801b912:	eef0 2a47 	vmov.f32	s5, s14
 801b916:	fb92 f3f3 	sdiv	r3, r2, r3
 801b91a:	ee13 2a10 	vmov	r2, s6
 801b91e:	932b      	str	r3, [sp, #172]	@ 0xac
 801b920:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b922:	eeb0 3a67 	vmov.f32	s6, s15
 801b926:	fb92 f3f3 	sdiv	r3, r2, r3
 801b92a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b92c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b92e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b930:	3b01      	subs	r3, #1
 801b932:	9319      	str	r3, [sp, #100]	@ 0x64
 801b934:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b936:	bf08      	it	eq
 801b938:	4613      	moveq	r3, r2
 801b93a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b93c:	e5fa      	b.n	801b534 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b93e:	2900      	cmp	r1, #0
 801b940:	f43f ae6c 	beq.w	801b61c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b944:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b948:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b94c:	900a      	str	r0, [sp, #40]	@ 0x28
 801b94e:	0e00      	lsrs	r0, r0, #24
 801b950:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b952:	e663      	b.n	801b61c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b954:	f113 0801 	adds.w	r8, r3, #1
 801b958:	f53f af72 	bmi.w	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b95c:	4540      	cmp	r0, r8
 801b95e:	f6ff af6f 	blt.w	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b962:	f11c 0801 	adds.w	r8, ip, #1
 801b966:	f53f af6b 	bmi.w	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b96a:	45c6      	cmp	lr, r8
 801b96c:	f6ff af68 	blt.w	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b970:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b972:	b200      	sxth	r0, r0
 801b974:	9302      	str	r3, [sp, #8]
 801b976:	fa0f f38e 	sxth.w	r3, lr
 801b97a:	9000      	str	r0, [sp, #0]
 801b97c:	9301      	str	r3, [sp, #4]
 801b97e:	4633      	mov	r3, r6
 801b980:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b982:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b986:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b98a:	4639      	mov	r1, r7
 801b98c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b98e:	f7ff fc74 	bl	801b27a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b992:	e755      	b.n	801b840 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b994:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b996:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b99a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b99c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b9a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b9a2:	1427      	asrs	r7, r4, #16
 801b9a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b9a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b9aa:	142b      	asrs	r3, r5, #16
 801b9ac:	fb01 7303 	mla	r3, r1, r3, r7
 801b9b0:	18e7      	adds	r7, r4, r3
 801b9b2:	5ce3      	ldrb	r3, [r4, r3]
 801b9b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b9b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b9bc:	2a00      	cmp	r2, #0
 801b9be:	f000 812e 	beq.w	801bc1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b9c2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b9c6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b9ca:	9410      	str	r4, [sp, #64]	@ 0x40
 801b9cc:	0e24      	lsrs	r4, r4, #24
 801b9ce:	9417      	str	r4, [sp, #92]	@ 0x5c
 801b9d0:	b170      	cbz	r0, 801b9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b9d2:	eb07 0801 	add.w	r8, r7, r1
 801b9d6:	5c79      	ldrb	r1, [r7, r1]
 801b9d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b9dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b9de:	0e09      	lsrs	r1, r1, #24
 801b9e0:	9114      	str	r1, [sp, #80]	@ 0x50
 801b9e2:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b9e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b9ea:	9111      	str	r1, [sp, #68]	@ 0x44
 801b9ec:	0e09      	lsrs	r1, r1, #24
 801b9ee:	9118      	str	r1, [sp, #96]	@ 0x60
 801b9f0:	b292      	uxth	r2, r2
 801b9f2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b9f4:	b280      	uxth	r0, r0
 801b9f6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b9f8:	fb02 f900 	mul.w	r9, r2, r0
 801b9fc:	0112      	lsls	r2, r2, #4
 801b9fe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ba02:	eba2 0809 	sub.w	r8, r2, r9
 801ba06:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801ba0a:	b280      	uxth	r0, r0
 801ba0c:	fa1f f888 	uxth.w	r8, r8
 801ba10:	1a12      	subs	r2, r2, r0
 801ba12:	fb08 f101 	mul.w	r1, r8, r1
 801ba16:	b292      	uxth	r2, r2
 801ba18:	fb02 110c 	mla	r1, r2, ip, r1
 801ba1c:	fb00 1104 	mla	r1, r0, r4, r1
 801ba20:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ba22:	fb09 1104 	mla	r1, r9, r4, r1
 801ba26:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ba2a:	2900      	cmp	r1, #0
 801ba2c:	f000 80ec 	beq.w	801bc08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801ba30:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801ba34:	d019      	beq.n	801ba6a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801ba36:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ba3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ba3e:	fb0c fa0a 	mul.w	sl, ip, sl
 801ba42:	fb0c fc03 	mul.w	ip, ip, r3
 801ba46:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ba4a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ba4e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801ba52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ba56:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ba5a:	4453      	add	r3, sl
 801ba5c:	0a3f      	lsrs	r7, r7, #8
 801ba5e:	0a1b      	lsrs	r3, r3, #8
 801ba60:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801ba64:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ba68:	433b      	orrs	r3, r7
 801ba6a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ba6c:	2cff      	cmp	r4, #255	@ 0xff
 801ba6e:	d020      	beq.n	801bab2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801ba70:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ba72:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ba76:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ba78:	4367      	muls	r7, r4
 801ba7a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ba7c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ba80:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ba84:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ba86:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ba8a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ba8e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ba92:	44bc      	add	ip, r7
 801ba94:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ba98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba9c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801baa0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801baa4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801baa8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801baac:	ea4c 040a 	orr.w	r4, ip, sl
 801bab0:	9410      	str	r4, [sp, #64]	@ 0x40
 801bab2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bab4:	2cff      	cmp	r4, #255	@ 0xff
 801bab6:	d020      	beq.n	801bafa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801bab8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801baba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801babe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bac0:	4367      	muls	r7, r4
 801bac2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bac4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bac8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bacc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801bace:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bad2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bad6:	fb04 fa0a 	mul.w	sl, r4, sl
 801bada:	44bc      	add	ip, r7
 801badc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bae0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bae4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bae8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801baec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801baf0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801baf4:	ea4c 040a 	orr.w	r4, ip, sl
 801baf8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bafa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bafc:	2cff      	cmp	r4, #255	@ 0xff
 801bafe:	d020      	beq.n	801bb42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801bb00:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bb06:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bb08:	4367      	muls	r7, r4
 801bb0a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801bb10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bb14:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801bb16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801bb1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb1e:	fb04 fa0a 	mul.w	sl, r4, sl
 801bb22:	44bc      	add	ip, r7
 801bb24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801bb28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bb30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bb34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bb38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bb3c:	ea4c 040a 	orr.w	r4, ip, sl
 801bb40:	9411      	str	r4, [sp, #68]	@ 0x44
 801bb42:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bb44:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801bb48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bb4c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801bb50:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bb52:	fb08 f707 	mul.w	r7, r8, r7
 801bb56:	fb02 770c 	mla	r7, r2, ip, r7
 801bb5a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bb5e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801bb60:	fb00 770c 	mla	r7, r0, ip, r7
 801bb64:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801bb68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bb6a:	fb09 770c 	mla	r7, r9, ip, r7
 801bb6e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801bb72:	fb08 f80c 	mul.w	r8, r8, ip
 801bb76:	0a3f      	lsrs	r7, r7, #8
 801bb78:	fb02 8303 	mla	r3, r2, r3, r8
 801bb7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801bb7e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801bb82:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801bb86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bb88:	fb00 330a 	mla	r3, r0, sl, r3
 801bb8c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801bb90:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801bb92:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bb96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bb98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bb9c:	434b      	muls	r3, r1
 801bb9e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801bba2:	1c59      	adds	r1, r3, #1
 801bba4:	ea47 070c 	orr.w	r7, r7, ip
 801bba8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801bbac:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bbb0:	b2fa      	uxtb	r2, r7
 801bbb2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bbb6:	fb12 f200 	smulbb	r2, r2, r0
 801bbba:	b2c9      	uxtb	r1, r1
 801bbbc:	fb03 2301 	mla	r3, r3, r1, r2
 801bbc0:	b29b      	uxth	r3, r3
 801bbc2:	1c5a      	adds	r2, r3, #1
 801bbc4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bbc8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801bbcc:	fb12 f201 	smulbb	r2, r2, r1
 801bbd0:	121b      	asrs	r3, r3, #8
 801bbd2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bbd6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801bbda:	0c3f      	lsrs	r7, r7, #16
 801bbdc:	fb03 2300 	mla	r3, r3, r0, r2
 801bbe0:	b29b      	uxth	r3, r3
 801bbe2:	1c5a      	adds	r2, r3, #1
 801bbe4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bbe8:	121b      	asrs	r3, r3, #8
 801bbea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801bbee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801bbf2:	fb13 f101 	smulbb	r1, r3, r1
 801bbf6:	fb07 1700 	mla	r7, r7, r0, r1
 801bbfa:	b2bf      	uxth	r7, r7
 801bbfc:	1c7b      	adds	r3, r7, #1
 801bbfe:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801bc02:	123f      	asrs	r7, r7, #8
 801bc04:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801bc08:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801bc0a:	f10e 0e03 	add.w	lr, lr, #3
 801bc0e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bc10:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bc14:	441a      	add	r2, r3
 801bc16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bc18:	9229      	str	r2, [sp, #164]	@ 0xa4
 801bc1a:	441d      	add	r5, r3
 801bc1c:	e645      	b.n	801b8aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801bc1e:	2800      	cmp	r0, #0
 801bc20:	f43f aee6 	beq.w	801b9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801bc24:	5c79      	ldrb	r1, [r7, r1]
 801bc26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bc2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bc2c:	0e09      	lsrs	r1, r1, #24
 801bc2e:	9114      	str	r1, [sp, #80]	@ 0x50
 801bc30:	e6de      	b.n	801b9f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801bc32:	b01f      	add	sp, #124	@ 0x7c
 801bc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bc38 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801bc38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc3c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801bc40:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801bc44:	2d00      	cmp	r5, #0
 801bc46:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801bc4a:	fb05 700e 	mla	r0, r5, lr, r7
 801bc4e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801bc52:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801bc56:	eb02 0800 	add.w	r8, r2, r0
 801bc5a:	f2c0 8105 	blt.w	801be68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bc5e:	45a9      	cmp	r9, r5
 801bc60:	f340 8102 	ble.w	801be68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bc64:	2f00      	cmp	r7, #0
 801bc66:	f2c0 80fd 	blt.w	801be64 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801bc6a:	45be      	cmp	lr, r7
 801bc6c:	f340 80fa 	ble.w	801be64 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801bc70:	5c12      	ldrb	r2, [r2, r0]
 801bc72:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bc76:	1c7a      	adds	r2, r7, #1
 801bc78:	f100 80f9 	bmi.w	801be6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801bc7c:	4596      	cmp	lr, r2
 801bc7e:	f340 80f6 	ble.w	801be6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801bc82:	2c00      	cmp	r4, #0
 801bc84:	f000 80f5 	beq.w	801be72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801bc88:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bc8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bc90:	3501      	adds	r5, #1
 801bc92:	f100 80f2 	bmi.w	801be7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bc96:	45a9      	cmp	r9, r5
 801bc98:	f340 80ef 	ble.w	801be7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bc9c:	f1bc 0f00 	cmp.w	ip, #0
 801bca0:	f000 80ee 	beq.w	801be80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801bca4:	2f00      	cmp	r7, #0
 801bca6:	f2c0 80e6 	blt.w	801be76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bcaa:	45be      	cmp	lr, r7
 801bcac:	f340 80e3 	ble.w	801be76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bcb0:	f818 200e 	ldrb.w	r2, [r8, lr]
 801bcb4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bcb8:	3701      	adds	r7, #1
 801bcba:	f100 80e4 	bmi.w	801be86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bcbe:	45be      	cmp	lr, r7
 801bcc0:	f340 80e1 	ble.w	801be86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bcc4:	2c00      	cmp	r4, #0
 801bcc6:	f000 80e0 	beq.w	801be8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801bcca:	44c6      	add	lr, r8
 801bccc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bcd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bcd4:	b2a3      	uxth	r3, r4
 801bcd6:	fa1f fc8c 	uxth.w	ip, ip
 801bcda:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801bcde:	fb0c fe03 	mul.w	lr, ip, r3
 801bce2:	011b      	lsls	r3, r3, #4
 801bce4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801bce8:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801bcec:	eba3 070e 	sub.w	r7, r3, lr
 801bcf0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801bcf4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801bcf8:	fa1f f48c 	uxth.w	r4, ip
 801bcfc:	b2bf      	uxth	r7, r7
 801bcfe:	1b1b      	subs	r3, r3, r4
 801bd00:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801bd04:	fb07 fc0a 	mul.w	ip, r7, sl
 801bd08:	b29b      	uxth	r3, r3
 801bd0a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801bd0e:	9300      	str	r3, [sp, #0]
 801bd10:	fb04 cc09 	mla	ip, r4, r9, ip
 801bd14:	fb0e cc08 	mla	ip, lr, r8, ip
 801bd18:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bd1c:	9301      	str	r3, [sp, #4]
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	f000 809d 	beq.w	801be5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801bd24:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801bd28:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bd2c:	fb0b fc0c 	mul.w	ip, fp, ip
 801bd30:	fb0b f606 	mul.w	r6, fp, r6
 801bd34:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801bd38:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801bd3c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801bd40:	44dc      	add	ip, fp
 801bd42:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801bd46:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801bd4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd4e:	fb0a fb0b 	mul.w	fp, sl, fp
 801bd52:	fb0a fa00 	mul.w	sl, sl, r0
 801bd56:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801bd5a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801bd5e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801bd62:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801bd66:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801bd6a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bd6e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bd72:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bd76:	0a36      	lsrs	r6, r6, #8
 801bd78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bd7c:	44dc      	add	ip, fp
 801bd7e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801bd82:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801bd86:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bd8a:	fb09 fb0b 	mul.w	fp, r9, fp
 801bd8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bd92:	fb09 f905 	mul.w	r9, r9, r5
 801bd96:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801bd9a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bd9e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801bda2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bda6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bdaa:	fb0c fc07 	mul.w	ip, ip, r7
 801bdae:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801bdb2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801bdb6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801bdba:	4458      	add	r0, fp
 801bdbc:	fb08 f505 	mul.w	r5, r8, r5
 801bdc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bdc4:	fb08 f802 	mul.w	r8, r8, r2
 801bdc8:	0a00      	lsrs	r0, r0, #8
 801bdca:	0a2a      	lsrs	r2, r5, #8
 801bdcc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801bdd0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bdd4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801bdd8:	4415      	add	r5, r2
 801bdda:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801bdde:	0a2d      	lsrs	r5, r5, #8
 801bde0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bde4:	9a00      	ldr	r2, [sp, #0]
 801bde6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801bdea:	fb03 cc02 	mla	ip, r3, r2, ip
 801bdee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bdf2:	9b01      	ldr	r3, [sp, #4]
 801bdf4:	fb05 c50e 	mla	r5, r5, lr, ip
 801bdf8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801bdfc:	43db      	mvns	r3, r3
 801bdfe:	fb00 5004 	mla	r0, r0, r4, r5
 801be02:	b2db      	uxtb	r3, r3
 801be04:	0a00      	lsrs	r0, r0, #8
 801be06:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801be0a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801be0e:	4378      	muls	r0, r7
 801be10:	fb02 0006 	mla	r0, r2, r6, r0
 801be14:	780a      	ldrb	r2, [r1, #0]
 801be16:	fb0e 0e08 	mla	lr, lr, r8, r0
 801be1a:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801be1e:	fb04 e000 	mla	r0, r4, r0, lr
 801be22:	fb02 f403 	mul.w	r4, r2, r3
 801be26:	0a00      	lsrs	r0, r0, #8
 801be28:	1c62      	adds	r2, r4, #1
 801be2a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801be2e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801be32:	4328      	orrs	r0, r5
 801be34:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801be38:	700a      	strb	r2, [r1, #0]
 801be3a:	784a      	ldrb	r2, [r1, #1]
 801be3c:	435a      	muls	r2, r3
 801be3e:	1c54      	adds	r4, r2, #1
 801be40:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801be44:	0a02      	lsrs	r2, r0, #8
 801be46:	0c00      	lsrs	r0, r0, #16
 801be48:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801be4c:	704a      	strb	r2, [r1, #1]
 801be4e:	788a      	ldrb	r2, [r1, #2]
 801be50:	4353      	muls	r3, r2
 801be52:	1c5a      	adds	r2, r3, #1
 801be54:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801be58:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801be5c:	7088      	strb	r0, [r1, #2]
 801be5e:	b003      	add	sp, #12
 801be60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be64:	2600      	movs	r6, #0
 801be66:	e706      	b.n	801bc76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801be68:	2000      	movs	r0, #0
 801be6a:	4606      	mov	r6, r0
 801be6c:	e710      	b.n	801bc90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801be6e:	2000      	movs	r0, #0
 801be70:	e70e      	b.n	801bc90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801be72:	4620      	mov	r0, r4
 801be74:	e70c      	b.n	801bc90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801be76:	2500      	movs	r5, #0
 801be78:	e71e      	b.n	801bcb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801be7a:	2200      	movs	r2, #0
 801be7c:	4615      	mov	r5, r2
 801be7e:	e729      	b.n	801bcd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801be80:	4662      	mov	r2, ip
 801be82:	4665      	mov	r5, ip
 801be84:	e726      	b.n	801bcd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801be86:	2200      	movs	r2, #0
 801be88:	e724      	b.n	801bcd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801be8a:	4622      	mov	r2, r4
 801be8c:	e722      	b.n	801bcd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801be8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801be8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be92:	b09b      	sub	sp, #108	@ 0x6c
 801be94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801be98:	9218      	str	r2, [sp, #96]	@ 0x60
 801be9a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801be9c:	9019      	str	r0, [sp, #100]	@ 0x64
 801be9e:	9116      	str	r1, [sp, #88]	@ 0x58
 801bea0:	6850      	ldr	r0, [r2, #4]
 801bea2:	9307      	str	r3, [sp, #28]
 801bea4:	6812      	ldr	r2, [r2, #0]
 801bea6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801bea8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801beac:	fb00 1303 	mla	r3, r0, r3, r1
 801beb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801beb4:	18d3      	adds	r3, r2, r3
 801beb6:	930a      	str	r3, [sp, #40]	@ 0x28
 801beb8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801beba:	681b      	ldr	r3, [r3, #0]
 801bebc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bebe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bec0:	685e      	ldr	r6, [r3, #4]
 801bec2:	3604      	adds	r6, #4
 801bec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bec6:	2b00      	cmp	r3, #0
 801bec8:	dc03      	bgt.n	801bed2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801beca:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801becc:	2b00      	cmp	r3, #0
 801bece:	f340 834f 	ble.w	801c570 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801bed2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bed4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bed8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bedc:	1e48      	subs	r0, r1, #1
 801bede:	1e57      	subs	r7, r2, #1
 801bee0:	9b07      	ldr	r3, [sp, #28]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	f340 8178 	ble.w	801c1d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801bee8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801beea:	142b      	asrs	r3, r5, #16
 801beec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801bef0:	d406      	bmi.n	801bf00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bef2:	4584      	cmp	ip, r0
 801bef4:	da04      	bge.n	801bf00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bef6:	2b00      	cmp	r3, #0
 801bef8:	db02      	blt.n	801bf00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801befa:	42bb      	cmp	r3, r7
 801befc:	f2c0 816d 	blt.w	801c1da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801bf00:	f11c 0c01 	adds.w	ip, ip, #1
 801bf04:	f100 815b 	bmi.w	801c1be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bf08:	4561      	cmp	r1, ip
 801bf0a:	f2c0 8158 	blt.w	801c1be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bf0e:	3301      	adds	r3, #1
 801bf10:	f100 8155 	bmi.w	801c1be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bf14:	429a      	cmp	r2, r3
 801bf16:	f2c0 8152 	blt.w	801c1be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801bf1a:	9b07      	ldr	r3, [sp, #28]
 801bf1c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801bf1e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801bf20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801bf22:	2b00      	cmp	r3, #0
 801bf24:	f340 8178 	ble.w	801c218 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801bf28:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bf2a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801bf2e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801bf32:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801bf36:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bf38:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801bf3c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801bf3e:	141b      	asrs	r3, r3, #16
 801bf40:	f100 81ba 	bmi.w	801c2b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bf44:	f101 38ff 	add.w	r8, r1, #4294967295
 801bf48:	4543      	cmp	r3, r8
 801bf4a:	f280 81b5 	bge.w	801c2b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bf4e:	f1bc 0f00 	cmp.w	ip, #0
 801bf52:	f2c0 81b1 	blt.w	801c2b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bf56:	f10e 38ff 	add.w	r8, lr, #4294967295
 801bf5a:	45c4      	cmp	ip, r8
 801bf5c:	f280 81ac 	bge.w	801c2b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801bf60:	b209      	sxth	r1, r1
 801bf62:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801bf64:	fb0c 3301 	mla	r3, ip, r1, r3
 801bf68:	eb04 0803 	add.w	r8, r4, r3
 801bf6c:	5ce3      	ldrb	r3, [r4, r3]
 801bf6e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801bf72:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801bf76:	2a00      	cmp	r2, #0
 801bf78:	f000 8193 	beq.w	801c2a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801bf7c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801bf80:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801bf84:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bf86:	0e24      	lsrs	r4, r4, #24
 801bf88:	9412      	str	r4, [sp, #72]	@ 0x48
 801bf8a:	b178      	cbz	r0, 801bfac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801bf8c:	eb08 0c01 	add.w	ip, r8, r1
 801bf90:	f818 1001 	ldrb.w	r1, [r8, r1]
 801bf94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bf98:	9108      	str	r1, [sp, #32]
 801bf9a:	0e09      	lsrs	r1, r1, #24
 801bf9c:	9110      	str	r1, [sp, #64]	@ 0x40
 801bf9e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801bfa2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bfa6:	910c      	str	r1, [sp, #48]	@ 0x30
 801bfa8:	0e09      	lsrs	r1, r1, #24
 801bfaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bfac:	b292      	uxth	r2, r2
 801bfae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801bfb0:	b280      	uxth	r0, r0
 801bfb2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bfb4:	fb02 f900 	mul.w	r9, r2, r0
 801bfb8:	0112      	lsls	r2, r2, #4
 801bfba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bfbe:	eba2 0809 	sub.w	r8, r2, r9
 801bfc2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801bfc6:	b280      	uxth	r0, r0
 801bfc8:	fa1f f888 	uxth.w	r8, r8
 801bfcc:	1a12      	subs	r2, r2, r0
 801bfce:	fb08 f101 	mul.w	r1, r8, r1
 801bfd2:	b292      	uxth	r2, r2
 801bfd4:	fb02 110e 	mla	r1, r2, lr, r1
 801bfd8:	fb00 1104 	mla	r1, r0, r4, r1
 801bfdc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bfde:	fb09 1104 	mla	r1, r9, r4, r1
 801bfe2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bfe6:	2900      	cmp	r1, #0
 801bfe8:	f000 80de 	beq.w	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801bfec:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801bff0:	d01b      	beq.n	801c02a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801bff2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801bff6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801bffa:	fb0e fa0a 	mul.w	sl, lr, sl
 801bffe:	fb0e fe03 	mul.w	lr, lr, r3
 801c002:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c006:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c00a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801c00e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c012:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c016:	4453      	add	r3, sl
 801c018:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c01c:	0a1b      	lsrs	r3, r3, #8
 801c01e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c022:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c026:	ea43 030c 	orr.w	r3, r3, ip
 801c02a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c02c:	2cff      	cmp	r4, #255	@ 0xff
 801c02e:	d021      	beq.n	801c074 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801c030:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c032:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c036:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c038:	fb04 fb0b 	mul.w	fp, r4, fp
 801c03c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c03e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c042:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c044:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c048:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c04c:	fb04 fa0a 	mul.w	sl, r4, sl
 801c050:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c054:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c058:	44de      	add	lr, fp
 801c05a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c05e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c062:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c066:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c06a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c06e:	ea4e 040a 	orr.w	r4, lr, sl
 801c072:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c074:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c076:	2cff      	cmp	r4, #255	@ 0xff
 801c078:	d021      	beq.n	801c0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801c07a:	9c08      	ldr	r4, [sp, #32]
 801c07c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c080:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c082:	fb04 fb0b 	mul.w	fp, r4, fp
 801c086:	9c08      	ldr	r4, [sp, #32]
 801c088:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c08c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c08e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c092:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c096:	fb04 fa0a 	mul.w	sl, r4, sl
 801c09a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c09e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c0a2:	44de      	add	lr, fp
 801c0a4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c0a8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c0ac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c0b0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c0b4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c0b8:	ea4e 040a 	orr.w	r4, lr, sl
 801c0bc:	9408      	str	r4, [sp, #32]
 801c0be:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c0c0:	2cff      	cmp	r4, #255	@ 0xff
 801c0c2:	d021      	beq.n	801c108 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801c0c4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c0c6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c0ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c0cc:	fb04 fb0b 	mul.w	fp, r4, fp
 801c0d0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c0d2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c0d6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c0d8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c0dc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c0e0:	fb04 fa0a 	mul.w	sl, r4, sl
 801c0e4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c0e8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c0ec:	44de      	add	lr, fp
 801c0ee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c0f2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c0f6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c0fa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c0fe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c102:	ea4e 040a 	orr.w	r4, lr, sl
 801c106:	940c      	str	r4, [sp, #48]	@ 0x30
 801c108:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c10a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c10e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c112:	43c9      	mvns	r1, r1
 801c114:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c118:	9c08      	ldr	r4, [sp, #32]
 801c11a:	b2c9      	uxtb	r1, r1
 801c11c:	fb08 fc0c 	mul.w	ip, r8, ip
 801c120:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c124:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c128:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c12a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c12e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c132:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c134:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c138:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c13c:	fb08 f80e 	mul.w	r8, r8, lr
 801c140:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c144:	fb02 8303 	mla	r3, r2, r3, r8
 801c148:	9a08      	ldr	r2, [sp, #32]
 801c14a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c14e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c152:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c154:	fb00 330a 	mla	r3, r0, sl, r3
 801c158:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801c15c:	fb09 3900 	mla	r9, r9, r0, r3
 801c160:	783b      	ldrb	r3, [r7, #0]
 801c162:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c166:	fb03 f201 	mul.w	r2, r3, r1
 801c16a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c16e:	1c53      	adds	r3, r2, #1
 801c170:	ea4c 0c09 	orr.w	ip, ip, r9
 801c174:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c178:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801c17c:	703b      	strb	r3, [r7, #0]
 801c17e:	787b      	ldrb	r3, [r7, #1]
 801c180:	434b      	muls	r3, r1
 801c182:	1c5a      	adds	r2, r3, #1
 801c184:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c188:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c18c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c190:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c194:	707b      	strb	r3, [r7, #1]
 801c196:	78bb      	ldrb	r3, [r7, #2]
 801c198:	4359      	muls	r1, r3
 801c19a:	1c4b      	adds	r3, r1, #1
 801c19c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c1a0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c1a4:	f887 c002 	strb.w	ip, [r7, #2]
 801c1a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c1aa:	3703      	adds	r7, #3
 801c1ac:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c1ae:	441a      	add	r2, r3
 801c1b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c1b2:	441d      	add	r5, r3
 801c1b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c1b6:	9225      	str	r2, [sp, #148]	@ 0x94
 801c1b8:	3b01      	subs	r3, #1
 801c1ba:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c1bc:	e6b0      	b.n	801bf20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c1be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c1c0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c1c2:	441c      	add	r4, r3
 801c1c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c1c6:	441d      	add	r5, r3
 801c1c8:	9b07      	ldr	r3, [sp, #28]
 801c1ca:	9425      	str	r4, [sp, #148]	@ 0x94
 801c1cc:	3b01      	subs	r3, #1
 801c1ce:	9307      	str	r3, [sp, #28]
 801c1d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c1d2:	3303      	adds	r3, #3
 801c1d4:	930a      	str	r3, [sp, #40]	@ 0x28
 801c1d6:	e683      	b.n	801bee0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c1d8:	d026      	beq.n	801c228 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801c1da:	9b07      	ldr	r3, [sp, #28]
 801c1dc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c1de:	3b01      	subs	r3, #1
 801c1e0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c1e2:	fb00 4003 	mla	r0, r0, r3, r4
 801c1e6:	1400      	asrs	r0, r0, #16
 801c1e8:	f53f ae97 	bmi.w	801bf1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1ec:	3901      	subs	r1, #1
 801c1ee:	4288      	cmp	r0, r1
 801c1f0:	f6bf ae93 	bge.w	801bf1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c1f4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c1f6:	fb01 5303 	mla	r3, r1, r3, r5
 801c1fa:	141b      	asrs	r3, r3, #16
 801c1fc:	f53f ae8d 	bmi.w	801bf1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c200:	3a01      	subs	r2, #1
 801c202:	4293      	cmp	r3, r2
 801c204:	f6bf ae89 	bge.w	801bf1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c20a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c20e:	f103 0e03 	add.w	lr, r3, #3
 801c212:	f1bb 0f00 	cmp.w	fp, #0
 801c216:	dc6d      	bgt.n	801c2f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801c218:	9b07      	ldr	r3, [sp, #28]
 801c21a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c21e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c220:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c224:	4423      	add	r3, r4
 801c226:	930a      	str	r3, [sp, #40]	@ 0x28
 801c228:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	f340 81a0 	ble.w	801c570 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801c230:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c234:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c236:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c23a:	eeb0 6a62 	vmov.f32	s12, s5
 801c23e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c242:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c246:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c24a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801c24e:	eeb0 6a43 	vmov.f32	s12, s6
 801c252:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c256:	ee16 5a10 	vmov	r5, s12
 801c25a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c25e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c262:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c266:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c26a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c26e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c272:	ee12 2a90 	vmov	r2, s5
 801c276:	eef0 2a47 	vmov.f32	s5, s14
 801c27a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c27e:	ee13 2a10 	vmov	r2, s6
 801c282:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c284:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c286:	eeb0 3a67 	vmov.f32	s6, s15
 801c28a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c28e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c290:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c292:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c294:	3b01      	subs	r3, #1
 801c296:	9316      	str	r3, [sp, #88]	@ 0x58
 801c298:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c29a:	bf08      	it	eq
 801c29c:	4613      	moveq	r3, r2
 801c29e:	9307      	str	r3, [sp, #28]
 801c2a0:	e610      	b.n	801bec4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c2a2:	2800      	cmp	r0, #0
 801c2a4:	f43f ae82 	beq.w	801bfac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c2a8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c2ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c2b0:	9108      	str	r1, [sp, #32]
 801c2b2:	0e09      	lsrs	r1, r1, #24
 801c2b4:	9110      	str	r1, [sp, #64]	@ 0x40
 801c2b6:	e679      	b.n	801bfac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c2b8:	f113 0801 	adds.w	r8, r3, #1
 801c2bc:	f53f af74 	bmi.w	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2c0:	4541      	cmp	r1, r8
 801c2c2:	f6ff af71 	blt.w	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2c6:	f11c 0801 	adds.w	r8, ip, #1
 801c2ca:	f53f af6d 	bmi.w	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2ce:	45c6      	cmp	lr, r8
 801c2d0:	f6ff af6a 	blt.w	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2d4:	b209      	sxth	r1, r1
 801c2d6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801c2da:	fa0f f38e 	sxth.w	r3, lr
 801c2de:	9100      	str	r1, [sp, #0]
 801c2e0:	4639      	mov	r1, r7
 801c2e2:	9301      	str	r3, [sp, #4]
 801c2e4:	4633      	mov	r3, r6
 801c2e6:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801c2ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c2ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c2ee:	f7ff fca3 	bl	801bc38 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801c2f2:	e759      	b.n	801c1a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c2f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c2f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c2fa:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c2fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c300:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c302:	1427      	asrs	r7, r4, #16
 801c304:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c306:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c30a:	142b      	asrs	r3, r5, #16
 801c30c:	fb01 7303 	mla	r3, r1, r3, r7
 801c310:	18e7      	adds	r7, r4, r3
 801c312:	5ce3      	ldrb	r3, [r4, r3]
 801c314:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c318:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c31c:	2a00      	cmp	r2, #0
 801c31e:	f000 811d 	beq.w	801c55c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801c322:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c326:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801c32a:	940d      	str	r4, [sp, #52]	@ 0x34
 801c32c:	0e24      	lsrs	r4, r4, #24
 801c32e:	9414      	str	r4, [sp, #80]	@ 0x50
 801c330:	b170      	cbz	r0, 801c350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c332:	eb07 0801 	add.w	r8, r7, r1
 801c336:	5c79      	ldrb	r1, [r7, r1]
 801c338:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c33c:	9109      	str	r1, [sp, #36]	@ 0x24
 801c33e:	0e09      	lsrs	r1, r1, #24
 801c340:	9111      	str	r1, [sp, #68]	@ 0x44
 801c342:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c346:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c34a:	910e      	str	r1, [sp, #56]	@ 0x38
 801c34c:	0e09      	lsrs	r1, r1, #24
 801c34e:	9115      	str	r1, [sp, #84]	@ 0x54
 801c350:	b292      	uxth	r2, r2
 801c352:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c354:	b280      	uxth	r0, r0
 801c356:	fb02 f900 	mul.w	r9, r2, r0
 801c35a:	0112      	lsls	r2, r2, #4
 801c35c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c360:	eba2 0809 	sub.w	r8, r2, r9
 801c364:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801c368:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c36a:	b280      	uxth	r0, r0
 801c36c:	fa1f f888 	uxth.w	r8, r8
 801c370:	1a09      	subs	r1, r1, r0
 801c372:	fb08 f202 	mul.w	r2, r8, r2
 801c376:	b289      	uxth	r1, r1
 801c378:	fb01 220c 	mla	r2, r1, ip, r2
 801c37c:	fb00 2204 	mla	r2, r0, r4, r2
 801c380:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c382:	fb09 2204 	mla	r2, r9, r4, r2
 801c386:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c38a:	2a00      	cmp	r2, #0
 801c38c:	f000 80db 	beq.w	801c546 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801c390:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c394:	d019      	beq.n	801c3ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801c396:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c39a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c39e:	fb0c fa0a 	mul.w	sl, ip, sl
 801c3a2:	fb0c fc03 	mul.w	ip, ip, r3
 801c3a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c3aa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c3ae:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c3b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c3b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c3ba:	4453      	add	r3, sl
 801c3bc:	0a3f      	lsrs	r7, r7, #8
 801c3be:	0a1b      	lsrs	r3, r3, #8
 801c3c0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c3c4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c3c8:	433b      	orrs	r3, r7
 801c3ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c3cc:	2cff      	cmp	r4, #255	@ 0xff
 801c3ce:	d020      	beq.n	801c412 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801c3d0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c3d2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c3d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c3d8:	4367      	muls	r7, r4
 801c3da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c3dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c3e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c3e4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c3e6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c3ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c3ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801c3f2:	44bc      	add	ip, r7
 801c3f4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c3f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c3fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c400:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c404:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c408:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c40c:	ea4c 040a 	orr.w	r4, ip, sl
 801c410:	940d      	str	r4, [sp, #52]	@ 0x34
 801c412:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c414:	2cff      	cmp	r4, #255	@ 0xff
 801c416:	d020      	beq.n	801c45a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801c418:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c41a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c41e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c420:	4367      	muls	r7, r4
 801c422:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c424:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c428:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c42c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c42e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c432:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c436:	fb04 fa0a 	mul.w	sl, r4, sl
 801c43a:	44bc      	add	ip, r7
 801c43c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c444:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c448:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c44c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c450:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c454:	ea4c 040a 	orr.w	r4, ip, sl
 801c458:	9409      	str	r4, [sp, #36]	@ 0x24
 801c45a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c45c:	2cff      	cmp	r4, #255	@ 0xff
 801c45e:	d020      	beq.n	801c4a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801c460:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c462:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c466:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c468:	4367      	muls	r7, r4
 801c46a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c46c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c470:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c474:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c476:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c47a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c47e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c482:	44bc      	add	ip, r7
 801c484:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c488:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c48c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c490:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c494:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c498:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c49c:	ea4c 040a 	orr.w	r4, ip, sl
 801c4a0:	940e      	str	r4, [sp, #56]	@ 0x38
 801c4a2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c4a4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801c4a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c4ac:	43d2      	mvns	r2, r2
 801c4ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c4b2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c4b4:	b2d2      	uxtb	r2, r2
 801c4b6:	fb08 f707 	mul.w	r7, r8, r7
 801c4ba:	fb01 770c 	mla	r7, r1, ip, r7
 801c4be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c4c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c4c4:	fb00 770c 	mla	r7, r0, ip, r7
 801c4c8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c4cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c4ce:	fb09 770c 	mla	r7, r9, ip, r7
 801c4d2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801c4d6:	fb08 f80c 	mul.w	r8, r8, ip
 801c4da:	0a3f      	lsrs	r7, r7, #8
 801c4dc:	fb01 8303 	mla	r3, r1, r3, r8
 801c4e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c4e2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801c4e6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801c4ea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c4ec:	fb00 330a 	mla	r3, r0, sl, r3
 801c4f0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801c4f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c4f8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c4fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c500:	fb03 f102 	mul.w	r1, r3, r2
 801c504:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c508:	1c4b      	adds	r3, r1, #1
 801c50a:	ea47 070c 	orr.w	r7, r7, ip
 801c50e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c512:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801c516:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c51a:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801c51e:	4353      	muls	r3, r2
 801c520:	1c59      	adds	r1, r3, #1
 801c522:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c526:	0a3b      	lsrs	r3, r7, #8
 801c528:	0c3f      	lsrs	r7, r7, #16
 801c52a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c52e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c532:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c536:	435a      	muls	r2, r3
 801c538:	1c53      	adds	r3, r2, #1
 801c53a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c53e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c542:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c546:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c548:	f10e 0e03 	add.w	lr, lr, #3
 801c54c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c54e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c552:	441a      	add	r2, r3
 801c554:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c556:	9225      	str	r2, [sp, #148]	@ 0x94
 801c558:	441d      	add	r5, r3
 801c55a:	e65a      	b.n	801c212 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c55c:	2800      	cmp	r0, #0
 801c55e:	f43f aef7 	beq.w	801c350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c562:	5c79      	ldrb	r1, [r7, r1]
 801c564:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c568:	9109      	str	r1, [sp, #36]	@ 0x24
 801c56a:	0e09      	lsrs	r1, r1, #24
 801c56c:	9111      	str	r1, [sp, #68]	@ 0x44
 801c56e:	e6ef      	b.n	801c350 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c570:	b01b      	add	sp, #108	@ 0x6c
 801c572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c576 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801c576:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c57a:	b08d      	sub	sp, #52	@ 0x34
 801c57c:	468b      	mov	fp, r1
 801c57e:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801c582:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801c586:	fb0c 5703 	mla	r7, ip, r3, r5
 801c58a:	f1bc 0f00 	cmp.w	ip, #0
 801c58e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c590:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c594:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801c598:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801c59c:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801c5a0:	eb02 0607 	add.w	r6, r2, r7
 801c5a4:	f89b 4000 	ldrb.w	r4, [fp]
 801c5a8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801c5ac:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801c5b0:	f2c0 80c1 	blt.w	801c736 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c5b4:	45e6      	cmp	lr, ip
 801c5b6:	f340 80be 	ble.w	801c736 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c5ba:	2d00      	cmp	r5, #0
 801c5bc:	f2c0 80b7 	blt.w	801c72e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c5c0:	42ab      	cmp	r3, r5
 801c5c2:	f340 80b4 	ble.w	801c72e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c5c6:	5dd2      	ldrb	r2, [r2, r7]
 801c5c8:	9205      	str	r2, [sp, #20]
 801c5ca:	7872      	ldrb	r2, [r6, #1]
 801c5cc:	9206      	str	r2, [sp, #24]
 801c5ce:	78b2      	ldrb	r2, [r6, #2]
 801c5d0:	9207      	str	r2, [sp, #28]
 801c5d2:	1c6a      	adds	r2, r5, #1
 801c5d4:	f100 80b6 	bmi.w	801c744 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c5d8:	4293      	cmp	r3, r2
 801c5da:	f340 80b3 	ble.w	801c744 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c5de:	f1b8 0f00 	cmp.w	r8, #0
 801c5e2:	f000 80af 	beq.w	801c744 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c5e6:	78f2      	ldrb	r2, [r6, #3]
 801c5e8:	9201      	str	r2, [sp, #4]
 801c5ea:	7932      	ldrb	r2, [r6, #4]
 801c5ec:	9202      	str	r2, [sp, #8]
 801c5ee:	7972      	ldrb	r2, [r6, #5]
 801c5f0:	9203      	str	r2, [sp, #12]
 801c5f2:	f11c 0c01 	adds.w	ip, ip, #1
 801c5f6:	f100 80ad 	bmi.w	801c754 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c5fa:	45e6      	cmp	lr, ip
 801c5fc:	f340 80aa 	ble.w	801c754 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c600:	f1ba 0f00 	cmp.w	sl, #0
 801c604:	f000 80a6 	beq.w	801c754 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c608:	2d00      	cmp	r5, #0
 801c60a:	f2c0 809f 	blt.w	801c74c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c60e:	42ab      	cmp	r3, r5
 801c610:	f340 809c 	ble.w	801c74c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c614:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c618:	f816 9002 	ldrb.w	r9, [r6, r2]
 801c61c:	2203      	movs	r2, #3
 801c61e:	fb03 6c02 	mla	ip, r3, r2, r6
 801c622:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801c626:	f89c e002 	ldrb.w	lr, [ip, #2]
 801c62a:	9704      	str	r7, [sp, #16]
 801c62c:	3501      	adds	r5, #1
 801c62e:	f100 8098 	bmi.w	801c762 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c632:	42ab      	cmp	r3, r5
 801c634:	f340 8095 	ble.w	801c762 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c638:	f1b8 0f00 	cmp.w	r8, #0
 801c63c:	f000 8091 	beq.w	801c762 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c640:	f04f 0c03 	mov.w	ip, #3
 801c644:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801c648:	5cb5      	ldrb	r5, [r6, r2]
 801c64a:	fb03 620c 	mla	r2, r3, ip, r6
 801c64e:	fb03 630c 	mla	r3, r3, ip, r6
 801c652:	7912      	ldrb	r2, [r2, #4]
 801c654:	795e      	ldrb	r6, [r3, #5]
 801c656:	fa1f f388 	uxth.w	r3, r8
 801c65a:	fa1f fc8a 	uxth.w	ip, sl
 801c65e:	fb03 f70c 	mul.w	r7, r3, ip
 801c662:	011b      	lsls	r3, r3, #4
 801c664:	9708      	str	r7, [sp, #32]
 801c666:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801c66a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801c66e:	1bdb      	subs	r3, r3, r7
 801c670:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801c674:	fa1f fc8c 	uxth.w	ip, ip
 801c678:	b29b      	uxth	r3, r3
 801c67a:	9709      	str	r7, [sp, #36]	@ 0x24
 801c67c:	ebaa 0a0c 	sub.w	sl, sl, ip
 801c680:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c682:	930a      	str	r3, [sp, #40]	@ 0x28
 801c684:	fa1f fa8a 	uxth.w	sl, sl
 801c688:	ea6f 0807 	mvn.w	r8, r7
 801c68c:	9f01      	ldr	r7, [sp, #4]
 801c68e:	435f      	muls	r7, r3
 801c690:	9b05      	ldr	r3, [sp, #20]
 801c692:	fa5f f888 	uxtb.w	r8, r8
 801c696:	fb0a 7703 	mla	r7, sl, r3, r7
 801c69a:	9b08      	ldr	r3, [sp, #32]
 801c69c:	fb14 f408 	smulbb	r4, r4, r8
 801c6a0:	fb0c 7709 	mla	r7, ip, r9, r7
 801c6a4:	fb10 f008 	smulbb	r0, r0, r8
 801c6a8:	fb11 f108 	smulbb	r1, r1, r8
 801c6ac:	fb03 7705 	mla	r7, r3, r5, r7
 801c6b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c6b6:	fb07 4703 	mla	r7, r7, r3, r4
 801c6ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6bc:	b2bf      	uxth	r7, r7
 801c6be:	1c7c      	adds	r4, r7, #1
 801c6c0:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801c6c4:	1224      	asrs	r4, r4, #8
 801c6c6:	f88b 4000 	strb.w	r4, [fp]
 801c6ca:	9c02      	ldr	r4, [sp, #8]
 801c6cc:	435c      	muls	r4, r3
 801c6ce:	9b06      	ldr	r3, [sp, #24]
 801c6d0:	fb0a 4403 	mla	r4, sl, r3, r4
 801c6d4:	9b04      	ldr	r3, [sp, #16]
 801c6d6:	fb0c 4403 	mla	r4, ip, r3, r4
 801c6da:	9b08      	ldr	r3, [sp, #32]
 801c6dc:	fb03 4402 	mla	r4, r3, r2, r4
 801c6e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c6e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c6e8:	fb04 0403 	mla	r4, r4, r3, r0
 801c6ec:	9b03      	ldr	r3, [sp, #12]
 801c6ee:	435a      	muls	r2, r3
 801c6f0:	b2a4      	uxth	r4, r4
 801c6f2:	4613      	mov	r3, r2
 801c6f4:	9a07      	ldr	r2, [sp, #28]
 801c6f6:	1c60      	adds	r0, r4, #1
 801c6f8:	fb0a 3a02 	mla	sl, sl, r2, r3
 801c6fc:	9b08      	ldr	r3, [sp, #32]
 801c6fe:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801c702:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c706:	1224      	asrs	r4, r4, #8
 801c708:	fb03 c606 	mla	r6, r3, r6, ip
 801c70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c70e:	f88b 4001 	strb.w	r4, [fp, #1]
 801c712:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c716:	fb06 1103 	mla	r1, r6, r3, r1
 801c71a:	b289      	uxth	r1, r1
 801c71c:	1c4e      	adds	r6, r1, #1
 801c71e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801c722:	1209      	asrs	r1, r1, #8
 801c724:	f88b 1002 	strb.w	r1, [fp, #2]
 801c728:	b00d      	add	sp, #52	@ 0x34
 801c72a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c72e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c732:	9405      	str	r4, [sp, #20]
 801c734:	e74d      	b.n	801c5d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801c736:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c73a:	9401      	str	r4, [sp, #4]
 801c73c:	9405      	str	r4, [sp, #20]
 801c73e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c742:	e756      	b.n	801c5f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c744:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c748:	9401      	str	r4, [sp, #4]
 801c74a:	e752      	b.n	801c5f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c74c:	468e      	mov	lr, r1
 801c74e:	9004      	str	r0, [sp, #16]
 801c750:	46a1      	mov	r9, r4
 801c752:	e76b      	b.n	801c62c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801c754:	460e      	mov	r6, r1
 801c756:	4602      	mov	r2, r0
 801c758:	4625      	mov	r5, r4
 801c75a:	468e      	mov	lr, r1
 801c75c:	9004      	str	r0, [sp, #16]
 801c75e:	46a1      	mov	r9, r4
 801c760:	e779      	b.n	801c656 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801c762:	460e      	mov	r6, r1
 801c764:	4602      	mov	r2, r0
 801c766:	4625      	mov	r5, r4
 801c768:	e775      	b.n	801c656 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801c76a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c76a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c76e:	b09f      	sub	sp, #124	@ 0x7c
 801c770:	920e      	str	r2, [sp, #56]	@ 0x38
 801c772:	9307      	str	r3, [sp, #28]
 801c774:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c776:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c77a:	901d      	str	r0, [sp, #116]	@ 0x74
 801c77c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c77e:	6850      	ldr	r0, [r2, #4]
 801c780:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c782:	6812      	ldr	r2, [r2, #0]
 801c784:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c788:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801c78c:	fb00 1303 	mla	r3, r0, r3, r1
 801c790:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c794:	18d3      	adds	r3, r2, r3
 801c796:	9308      	str	r3, [sp, #32]
 801c798:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c79a:	681b      	ldr	r3, [r3, #0]
 801c79c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c79e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c7a0:	43db      	mvns	r3, r3
 801c7a2:	b2db      	uxtb	r3, r3
 801c7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c7a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	dc03      	bgt.n	801c7b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c7ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c7ae:	2b00      	cmp	r3, #0
 801c7b0:	f340 81f5 	ble.w	801cb9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c7b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c7b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c7ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c7be:	1e48      	subs	r0, r1, #1
 801c7c0:	1e54      	subs	r4, r2, #1
 801c7c2:	9b07      	ldr	r3, [sp, #28]
 801c7c4:	2b00      	cmp	r3, #0
 801c7c6:	f340 80d5 	ble.w	801c974 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c7ca:	ea5f 452a 	movs.w	r5, sl, asr #16
 801c7ce:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c7d2:	d406      	bmi.n	801c7e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c7d4:	4285      	cmp	r5, r0
 801c7d6:	da04      	bge.n	801c7e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c7d8:	2b00      	cmp	r3, #0
 801c7da:	db02      	blt.n	801c7e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c7dc:	42a3      	cmp	r3, r4
 801c7de:	f2c0 80ca 	blt.w	801c976 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c7e2:	3501      	adds	r5, #1
 801c7e4:	f100 80bb 	bmi.w	801c95e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c7e8:	42a9      	cmp	r1, r5
 801c7ea:	f2c0 80b8 	blt.w	801c95e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c7ee:	3301      	adds	r3, #1
 801c7f0:	f100 80b5 	bmi.w	801c95e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c7f4:	429a      	cmp	r2, r3
 801c7f6:	f2c0 80b2 	blt.w	801c95e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c7fa:	9b07      	ldr	r3, [sp, #28]
 801c7fc:	9d08      	ldr	r5, [sp, #32]
 801c7fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801c800:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c802:	2b00      	cmp	r3, #0
 801c804:	f340 80d6 	ble.w	801c9b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801c808:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801c80a:	ea4f 4428 	mov.w	r4, r8, asr #16
 801c80e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c810:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801c814:	68c6      	ldr	r6, [r0, #12]
 801c816:	ea5f 402a 	movs.w	r0, sl, asr #16
 801c81a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801c81e:	689b      	ldr	r3, [r3, #8]
 801c820:	f100 810f 	bmi.w	801ca42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c824:	1e5f      	subs	r7, r3, #1
 801c826:	42b8      	cmp	r0, r7
 801c828:	f280 810b 	bge.w	801ca42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c82c:	2c00      	cmp	r4, #0
 801c82e:	f2c0 8108 	blt.w	801ca42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c832:	1e77      	subs	r7, r6, #1
 801c834:	42bc      	cmp	r4, r7
 801c836:	f280 8104 	bge.w	801ca42 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c83a:	b21b      	sxth	r3, r3
 801c83c:	fb04 0003 	mla	r0, r4, r3, r0
 801c840:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c842:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c846:	1826      	adds	r6, r4, r0
 801c848:	5c24      	ldrb	r4, [r4, r0]
 801c84a:	78b7      	ldrb	r7, [r6, #2]
 801c84c:	7870      	ldrb	r0, [r6, #1]
 801c84e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c850:	7977      	ldrb	r7, [r6, #5]
 801c852:	f896 e003 	ldrb.w	lr, [r6, #3]
 801c856:	f896 c004 	ldrb.w	ip, [r6, #4]
 801c85a:	9710      	str	r7, [sp, #64]	@ 0x40
 801c85c:	b1c9      	cbz	r1, 801c892 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c85e:	f04f 0b03 	mov.w	fp, #3
 801c862:	f06f 0904 	mvn.w	r9, #4
 801c866:	3605      	adds	r6, #5
 801c868:	fb13 930b 	smlabb	r3, r3, fp, r9
 801c86c:	eb06 0b03 	add.w	fp, r6, r3
 801c870:	5cf3      	ldrb	r3, [r6, r3]
 801c872:	9311      	str	r3, [sp, #68]	@ 0x44
 801c874:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801c878:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c87a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c87e:	9315      	str	r3, [sp, #84]	@ 0x54
 801c880:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801c884:	9312      	str	r3, [sp, #72]	@ 0x48
 801c886:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801c88a:	9314      	str	r3, [sp, #80]	@ 0x50
 801c88c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801c890:	9316      	str	r3, [sp, #88]	@ 0x58
 801c892:	b292      	uxth	r2, r2
 801c894:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c896:	b289      	uxth	r1, r1
 801c898:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c89c:	fb02 f601 	mul.w	r6, r2, r1
 801c8a0:	0112      	lsls	r2, r2, #4
 801c8a2:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801c8a6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801c8aa:	1b92      	subs	r2, r2, r6
 801c8ac:	b289      	uxth	r1, r1
 801c8ae:	b292      	uxth	r2, r2
 801c8b0:	eba9 0901 	sub.w	r9, r9, r1
 801c8b4:	fb02 fe0e 	mul.w	lr, r2, lr
 801c8b8:	fa1f f989 	uxth.w	r9, r9
 801c8bc:	fb02 fc0c 	mul.w	ip, r2, ip
 801c8c0:	fb09 e404 	mla	r4, r9, r4, lr
 801c8c4:	f895 e000 	ldrb.w	lr, [r5]
 801c8c8:	fb09 c000 	mla	r0, r9, r0, ip
 801c8cc:	fb01 4407 	mla	r4, r1, r7, r4
 801c8d0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c8d2:	fb06 4407 	mla	r4, r6, r7, r4
 801c8d6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c8d8:	fb1e fe07 	smulbb	lr, lr, r7
 801c8dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c8e0:	fb04 e403 	mla	r4, r4, r3, lr
 801c8e4:	b2a4      	uxth	r4, r4
 801c8e6:	f104 0e01 	add.w	lr, r4, #1
 801c8ea:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801c8ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c8f0:	fb01 0004 	mla	r0, r1, r4, r0
 801c8f4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c8f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c8fa:	fb06 0004 	mla	r0, r6, r4, r0
 801c8fe:	786c      	ldrb	r4, [r5, #1]
 801c900:	f885 e000 	strb.w	lr, [r5]
 801c904:	fb14 f407 	smulbb	r4, r4, r7
 801c908:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c90c:	fb00 4003 	mla	r0, r0, r3, r4
 801c910:	b280      	uxth	r0, r0
 801c912:	1c44      	adds	r4, r0, #1
 801c914:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c918:	1200      	asrs	r0, r0, #8
 801c91a:	7068      	strb	r0, [r5, #1]
 801c91c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c91e:	4342      	muls	r2, r0
 801c920:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c922:	fb09 2200 	mla	r2, r9, r0, r2
 801c926:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c928:	fb01 2100 	mla	r1, r1, r0, r2
 801c92c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c92e:	fb06 1602 	mla	r6, r6, r2, r1
 801c932:	78a9      	ldrb	r1, [r5, #2]
 801c934:	fb11 f107 	smulbb	r1, r1, r7
 801c938:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c93c:	fb06 1303 	mla	r3, r6, r3, r1
 801c940:	b29b      	uxth	r3, r3
 801c942:	1c5e      	adds	r6, r3, #1
 801c944:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c948:	121b      	asrs	r3, r3, #8
 801c94a:	70ab      	strb	r3, [r5, #2]
 801c94c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c94e:	3503      	adds	r5, #3
 801c950:	449a      	add	sl, r3
 801c952:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c954:	4498      	add	r8, r3
 801c956:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c958:	3b01      	subs	r3, #1
 801c95a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c95c:	e750      	b.n	801c800 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c95e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c960:	449a      	add	sl, r3
 801c962:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c964:	4498      	add	r8, r3
 801c966:	9b07      	ldr	r3, [sp, #28]
 801c968:	3b01      	subs	r3, #1
 801c96a:	9307      	str	r3, [sp, #28]
 801c96c:	9b08      	ldr	r3, [sp, #32]
 801c96e:	3303      	adds	r3, #3
 801c970:	9308      	str	r3, [sp, #32]
 801c972:	e726      	b.n	801c7c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c974:	d026      	beq.n	801c9c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c976:	9b07      	ldr	r3, [sp, #28]
 801c978:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c97a:	3b01      	subs	r3, #1
 801c97c:	fb00 a003 	mla	r0, r0, r3, sl
 801c980:	1400      	asrs	r0, r0, #16
 801c982:	f53f af3a 	bmi.w	801c7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c986:	3901      	subs	r1, #1
 801c988:	4288      	cmp	r0, r1
 801c98a:	f6bf af36 	bge.w	801c7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c98e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c990:	fb01 8303 	mla	r3, r1, r3, r8
 801c994:	141b      	asrs	r3, r3, #16
 801c996:	f53f af30 	bmi.w	801c7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c99a:	3a01      	subs	r2, #1
 801c99c:	4293      	cmp	r3, r2
 801c99e:	f6bf af2c 	bge.w	801c7fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c9a2:	9b08      	ldr	r3, [sp, #32]
 801c9a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c9a8:	1cdd      	adds	r5, r3, #3
 801c9aa:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801c9ae:	f1bc 0f00 	cmp.w	ip, #0
 801c9b2:	dc5f      	bgt.n	801ca74 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c9b4:	9b07      	ldr	r3, [sp, #28]
 801c9b6:	9a08      	ldr	r2, [sp, #32]
 801c9b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c9bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c9c0:	441a      	add	r2, r3
 801c9c2:	9208      	str	r2, [sp, #32]
 801c9c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c9c6:	2b00      	cmp	r3, #0
 801c9c8:	f340 80e9 	ble.w	801cb9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c9cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c9d0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c9d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c9d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c9da:	eef0 6a62 	vmov.f32	s13, s5
 801c9de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c9e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c9e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c9ea:	ee16 aa90 	vmov	sl, s13
 801c9ee:	eef0 6a43 	vmov.f32	s13, s6
 801c9f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c9f6:	ee16 8a90 	vmov	r8, s13
 801c9fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c9fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca02:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca06:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ca0a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca0e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ca12:	ee12 2a90 	vmov	r2, s5
 801ca16:	eef0 2a47 	vmov.f32	s5, s14
 801ca1a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca1e:	ee13 2a10 	vmov	r2, s6
 801ca22:	932b      	str	r3, [sp, #172]	@ 0xac
 801ca24:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ca26:	eeb0 3a67 	vmov.f32	s6, s15
 801ca2a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ca2e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801ca30:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ca34:	3b01      	subs	r3, #1
 801ca36:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ca38:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ca3a:	bf08      	it	eq
 801ca3c:	4613      	moveq	r3, r2
 801ca3e:	9307      	str	r3, [sp, #28]
 801ca40:	e6b1      	b.n	801c7a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801ca42:	1c47      	adds	r7, r0, #1
 801ca44:	d482      	bmi.n	801c94c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ca46:	42bb      	cmp	r3, r7
 801ca48:	db80      	blt.n	801c94c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ca4a:	1c67      	adds	r7, r4, #1
 801ca4c:	f53f af7e 	bmi.w	801c94c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ca50:	42be      	cmp	r6, r7
 801ca52:	f6ff af7b 	blt.w	801c94c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ca56:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801ca58:	b236      	sxth	r6, r6
 801ca5a:	9001      	str	r0, [sp, #4]
 801ca5c:	b21b      	sxth	r3, r3
 801ca5e:	9600      	str	r6, [sp, #0]
 801ca60:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ca62:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801ca66:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801ca6a:	4629      	mov	r1, r5
 801ca6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ca6e:	f7ff fd82 	bl	801c576 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801ca72:	e76b      	b.n	801c94c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801ca74:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801ca76:	ea4f 402a 	mov.w	r0, sl, asr #16
 801ca7a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801ca7e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801ca82:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801ca86:	ea4f 4128 	mov.w	r1, r8, asr #16
 801ca8a:	fb07 0101 	mla	r1, r7, r1, r0
 801ca8e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801ca90:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ca94:	1844      	adds	r4, r0, r1
 801ca96:	5c40      	ldrb	r0, [r0, r1]
 801ca98:	78a6      	ldrb	r6, [r4, #2]
 801ca9a:	7861      	ldrb	r1, [r4, #1]
 801ca9c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801ca9e:	78e6      	ldrb	r6, [r4, #3]
 801caa0:	910d      	str	r1, [sp, #52]	@ 0x34
 801caa2:	9610      	str	r6, [sp, #64]	@ 0x40
 801caa4:	f894 9004 	ldrb.w	r9, [r4, #4]
 801caa8:	f894 b005 	ldrb.w	fp, [r4, #5]
 801caac:	b192      	cbz	r2, 801cad4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801caae:	f06f 0604 	mvn.w	r6, #4
 801cab2:	2103      	movs	r1, #3
 801cab4:	3405      	adds	r4, #5
 801cab6:	fb17 6701 	smlabb	r7, r7, r1, r6
 801caba:	19e6      	adds	r6, r4, r7
 801cabc:	5de4      	ldrb	r4, [r4, r7]
 801cabe:	9417      	str	r4, [sp, #92]	@ 0x5c
 801cac0:	7874      	ldrb	r4, [r6, #1]
 801cac2:	9419      	str	r4, [sp, #100]	@ 0x64
 801cac4:	78b4      	ldrb	r4, [r6, #2]
 801cac6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801cac8:	78f4      	ldrb	r4, [r6, #3]
 801caca:	9418      	str	r4, [sp, #96]	@ 0x60
 801cacc:	7934      	ldrb	r4, [r6, #4]
 801cace:	941a      	str	r4, [sp, #104]	@ 0x68
 801cad0:	7974      	ldrb	r4, [r6, #5]
 801cad2:	941c      	str	r4, [sp, #112]	@ 0x70
 801cad4:	b29b      	uxth	r3, r3
 801cad6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801cad8:	b292      	uxth	r2, r2
 801cada:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801cadc:	3503      	adds	r5, #3
 801cade:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cae2:	fb03 f402 	mul.w	r4, r3, r2
 801cae6:	011b      	lsls	r3, r3, #4
 801cae8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801caec:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801caf0:	1b1b      	subs	r3, r3, r4
 801caf2:	b292      	uxth	r2, r2
 801caf4:	b29b      	uxth	r3, r3
 801caf6:	1ab6      	subs	r6, r6, r2
 801caf8:	435f      	muls	r7, r3
 801cafa:	b2b6      	uxth	r6, r6
 801cafc:	fb03 f909 	mul.w	r9, r3, r9
 801cb00:	fb03 fb0b 	mul.w	fp, r3, fp
 801cb04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cb06:	fb06 7000 	mla	r0, r6, r0, r7
 801cb0a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801cb0c:	fb06 bb03 	mla	fp, r6, r3, fp
 801cb10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cb12:	fb02 0007 	mla	r0, r2, r7, r0
 801cb16:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801cb18:	fb02 bb03 	mla	fp, r2, r3, fp
 801cb1c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801cb1e:	fb04 0007 	mla	r0, r4, r7, r0
 801cb22:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801cb26:	fb17 f701 	smulbb	r7, r7, r1
 801cb2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801cb2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801cb30:	fb00 700e 	mla	r0, r0, lr, r7
 801cb34:	fb06 9101 	mla	r1, r6, r1, r9
 801cb38:	b280      	uxth	r0, r0
 801cb3a:	1c47      	adds	r7, r0, #1
 801cb3c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801cb40:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801cb42:	1200      	asrs	r0, r0, #8
 801cb44:	f805 0c06 	strb.w	r0, [r5, #-6]
 801cb48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801cb4a:	fb02 1100 	mla	r1, r2, r0, r1
 801cb4e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801cb50:	fb04 1100 	mla	r1, r4, r0, r1
 801cb54:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801cb58:	fb04 b403 	mla	r4, r4, r3, fp
 801cb5c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801cb60:	fb10 f007 	smulbb	r0, r0, r7
 801cb64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cb68:	fb13 f307 	smulbb	r3, r3, r7
 801cb6c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801cb70:	fb01 010e 	mla	r1, r1, lr, r0
 801cb74:	fb04 340e 	mla	r4, r4, lr, r3
 801cb78:	b289      	uxth	r1, r1
 801cb7a:	b2a4      	uxth	r4, r4
 801cb7c:	1c48      	adds	r0, r1, #1
 801cb7e:	1c63      	adds	r3, r4, #1
 801cb80:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801cb84:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801cb88:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801cb8a:	1209      	asrs	r1, r1, #8
 801cb8c:	1224      	asrs	r4, r4, #8
 801cb8e:	449a      	add	sl, r3
 801cb90:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cb92:	f805 1c05 	strb.w	r1, [r5, #-5]
 801cb96:	f805 4c04 	strb.w	r4, [r5, #-4]
 801cb9a:	4498      	add	r8, r3
 801cb9c:	e707      	b.n	801c9ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801cb9e:	b01f      	add	sp, #124	@ 0x7c
 801cba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cba4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801cba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cba8:	b087      	sub	sp, #28
 801cbaa:	780d      	ldrb	r5, [r1, #0]
 801cbac:	784c      	ldrb	r4, [r1, #1]
 801cbae:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801cbb2:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801cbb6:	9004      	str	r0, [sp, #16]
 801cbb8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801cbbc:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801cbc0:	9005      	str	r0, [sp, #20]
 801cbc2:	fb06 bc03 	mla	ip, r6, r3, fp
 801cbc6:	2e00      	cmp	r6, #0
 801cbc8:	7888      	ldrb	r0, [r1, #2]
 801cbca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cbce:	eb02 090c 	add.w	r9, r2, ip
 801cbd2:	f2c0 8084 	blt.w	801ccde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801cbd6:	42b7      	cmp	r7, r6
 801cbd8:	f340 8081 	ble.w	801ccde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801cbdc:	f1bb 0f00 	cmp.w	fp, #0
 801cbe0:	db79      	blt.n	801ccd6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801cbe2:	455b      	cmp	r3, fp
 801cbe4:	dd77      	ble.n	801ccd6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801cbe6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801cbea:	9201      	str	r2, [sp, #4]
 801cbec:	f899 2001 	ldrb.w	r2, [r9, #1]
 801cbf0:	9202      	str	r2, [sp, #8]
 801cbf2:	f899 2002 	ldrb.w	r2, [r9, #2]
 801cbf6:	9203      	str	r2, [sp, #12]
 801cbf8:	f11b 0201 	adds.w	r2, fp, #1
 801cbfc:	d476      	bmi.n	801ccec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cbfe:	4293      	cmp	r3, r2
 801cc00:	dd74      	ble.n	801ccec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cc02:	9a04      	ldr	r2, [sp, #16]
 801cc04:	2a00      	cmp	r2, #0
 801cc06:	d071      	beq.n	801ccec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cc08:	f899 8003 	ldrb.w	r8, [r9, #3]
 801cc0c:	f899 c004 	ldrb.w	ip, [r9, #4]
 801cc10:	f899 a005 	ldrb.w	sl, [r9, #5]
 801cc14:	3601      	adds	r6, #1
 801cc16:	d471      	bmi.n	801ccfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cc18:	42b7      	cmp	r7, r6
 801cc1a:	dd6f      	ble.n	801ccfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cc1c:	9a05      	ldr	r2, [sp, #20]
 801cc1e:	2a00      	cmp	r2, #0
 801cc20:	d06c      	beq.n	801ccfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cc22:	f1bb 0f00 	cmp.w	fp, #0
 801cc26:	db65      	blt.n	801ccf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801cc28:	455b      	cmp	r3, fp
 801cc2a:	dd63      	ble.n	801ccf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801cc2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801cc30:	f819 e002 	ldrb.w	lr, [r9, r2]
 801cc34:	2203      	movs	r2, #3
 801cc36:	fb03 9602 	mla	r6, r3, r2, r9
 801cc3a:	7877      	ldrb	r7, [r6, #1]
 801cc3c:	78b6      	ldrb	r6, [r6, #2]
 801cc3e:	f11b 0b01 	adds.w	fp, fp, #1
 801cc42:	d40c      	bmi.n	801cc5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cc44:	455b      	cmp	r3, fp
 801cc46:	dd0a      	ble.n	801cc5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cc48:	9a04      	ldr	r2, [sp, #16]
 801cc4a:	b142      	cbz	r2, 801cc5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cc4c:	2203      	movs	r2, #3
 801cc4e:	fb13 2002 	smlabb	r0, r3, r2, r2
 801cc52:	f819 5000 	ldrb.w	r5, [r9, r0]
 801cc56:	fb03 9002 	mla	r0, r3, r2, r9
 801cc5a:	7904      	ldrb	r4, [r0, #4]
 801cc5c:	7940      	ldrb	r0, [r0, #5]
 801cc5e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cc62:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cc66:	fb03 fb02 	mul.w	fp, r3, r2
 801cc6a:	011b      	lsls	r3, r3, #4
 801cc6c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801cc70:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801cc74:	eba3 030b 	sub.w	r3, r3, fp
 801cc78:	b292      	uxth	r2, r2
 801cc7a:	b29b      	uxth	r3, r3
 801cc7c:	eba9 0902 	sub.w	r9, r9, r2
 801cc80:	9304      	str	r3, [sp, #16]
 801cc82:	fa1f f989 	uxth.w	r9, r9
 801cc86:	fb03 f808 	mul.w	r8, r3, r8
 801cc8a:	9b01      	ldr	r3, [sp, #4]
 801cc8c:	fb09 8803 	mla	r8, r9, r3, r8
 801cc90:	9b04      	ldr	r3, [sp, #16]
 801cc92:	fb03 fc0c 	mul.w	ip, r3, ip
 801cc96:	9b02      	ldr	r3, [sp, #8]
 801cc98:	fb02 880e 	mla	r8, r2, lr, r8
 801cc9c:	fb09 cc03 	mla	ip, r9, r3, ip
 801cca0:	9b04      	ldr	r3, [sp, #16]
 801cca2:	fb0b 8805 	mla	r8, fp, r5, r8
 801cca6:	fb02 c707 	mla	r7, r2, r7, ip
 801ccaa:	fb03 f30a 	mul.w	r3, r3, sl
 801ccae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ccb2:	fb0b 7404 	mla	r4, fp, r4, r7
 801ccb6:	f881 8000 	strb.w	r8, [r1]
 801ccba:	1224      	asrs	r4, r4, #8
 801ccbc:	704c      	strb	r4, [r1, #1]
 801ccbe:	9c03      	ldr	r4, [sp, #12]
 801ccc0:	fb09 3904 	mla	r9, r9, r4, r3
 801ccc4:	fb02 9206 	mla	r2, r2, r6, r9
 801ccc8:	fb0b 2000 	mla	r0, fp, r0, r2
 801cccc:	1200      	asrs	r0, r0, #8
 801ccce:	7088      	strb	r0, [r1, #2]
 801ccd0:	b007      	add	sp, #28
 801ccd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccd6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ccda:	9501      	str	r5, [sp, #4]
 801ccdc:	e78c      	b.n	801cbf8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801ccde:	4682      	mov	sl, r0
 801cce0:	46a4      	mov	ip, r4
 801cce2:	46a8      	mov	r8, r5
 801cce4:	9501      	str	r5, [sp, #4]
 801cce6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801ccea:	e793      	b.n	801cc14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ccec:	4682      	mov	sl, r0
 801ccee:	46a4      	mov	ip, r4
 801ccf0:	46a8      	mov	r8, r5
 801ccf2:	e78f      	b.n	801cc14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801ccf4:	4606      	mov	r6, r0
 801ccf6:	4627      	mov	r7, r4
 801ccf8:	46ae      	mov	lr, r5
 801ccfa:	e7a0      	b.n	801cc3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801ccfc:	4606      	mov	r6, r0
 801ccfe:	4627      	mov	r7, r4
 801cd00:	46ae      	mov	lr, r5
 801cd02:	e7ac      	b.n	801cc5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801cd04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd08:	b09b      	sub	sp, #108	@ 0x6c
 801cd0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cd0c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cd0e:	9019      	str	r0, [sp, #100]	@ 0x64
 801cd10:	9109      	str	r1, [sp, #36]	@ 0x24
 801cd12:	6850      	ldr	r0, [r2, #4]
 801cd14:	9306      	str	r3, [sp, #24]
 801cd16:	6812      	ldr	r2, [r2, #0]
 801cd18:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801cd1c:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801cd20:	fb00 1303 	mla	r3, r0, r3, r1
 801cd24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cd28:	18d3      	adds	r3, r2, r3
 801cd2a:	9307      	str	r3, [sp, #28]
 801cd2c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cd2e:	681b      	ldr	r3, [r3, #0]
 801cd30:	9308      	str	r3, [sp, #32]
 801cd32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd34:	2b00      	cmp	r3, #0
 801cd36:	dc03      	bgt.n	801cd40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cd38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd3a:	2b00      	cmp	r3, #0
 801cd3c:	f340 81ab 	ble.w	801d096 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801cd40:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cd42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cd46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cd4a:	1e48      	subs	r0, r1, #1
 801cd4c:	1e55      	subs	r5, r2, #1
 801cd4e:	9b06      	ldr	r3, [sp, #24]
 801cd50:	2b00      	cmp	r3, #0
 801cd52:	f340 80b1 	ble.w	801ceb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cd56:	ea5f 462b 	movs.w	r6, fp, asr #16
 801cd5a:	ea4f 4324 	mov.w	r3, r4, asr #16
 801cd5e:	d406      	bmi.n	801cd6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cd60:	4286      	cmp	r6, r0
 801cd62:	da04      	bge.n	801cd6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cd64:	2b00      	cmp	r3, #0
 801cd66:	db02      	blt.n	801cd6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cd68:	42ab      	cmp	r3, r5
 801cd6a:	f2c0 80a6 	blt.w	801ceba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801cd6e:	3601      	adds	r6, #1
 801cd70:	f100 8097 	bmi.w	801cea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cd74:	42b1      	cmp	r1, r6
 801cd76:	f2c0 8094 	blt.w	801cea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cd7a:	3301      	adds	r3, #1
 801cd7c:	f100 8091 	bmi.w	801cea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cd80:	429a      	cmp	r2, r3
 801cd82:	f2c0 808e 	blt.w	801cea2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cd86:	9b06      	ldr	r3, [sp, #24]
 801cd88:	9e07      	ldr	r6, [sp, #28]
 801cd8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd8e:	2b00      	cmp	r3, #0
 801cd90:	f340 80b0 	ble.w	801cef4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cd94:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801cd96:	1425      	asrs	r5, r4, #16
 801cd98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cd9a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801cd9e:	68c7      	ldr	r7, [r0, #12]
 801cda0:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cda4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801cda8:	689b      	ldr	r3, [r3, #8]
 801cdaa:	f100 80ea 	bmi.w	801cf82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cdae:	f103 3cff 	add.w	ip, r3, #4294967295
 801cdb2:	4560      	cmp	r0, ip
 801cdb4:	f280 80e5 	bge.w	801cf82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cdb8:	2d00      	cmp	r5, #0
 801cdba:	f2c0 80e2 	blt.w	801cf82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cdbe:	f107 3cff 	add.w	ip, r7, #4294967295
 801cdc2:	4565      	cmp	r5, ip
 801cdc4:	f280 80dd 	bge.w	801cf82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801cdc8:	b21b      	sxth	r3, r3
 801cdca:	fb05 0003 	mla	r0, r5, r3, r0
 801cdce:	9d08      	ldr	r5, [sp, #32]
 801cdd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801cdd4:	182f      	adds	r7, r5, r0
 801cdd6:	5c2d      	ldrb	r5, [r5, r0]
 801cdd8:	7878      	ldrb	r0, [r7, #1]
 801cdda:	f897 e002 	ldrb.w	lr, [r7, #2]
 801cdde:	900c      	str	r0, [sp, #48]	@ 0x30
 801cde0:	f897 9003 	ldrb.w	r9, [r7, #3]
 801cde4:	f897 8004 	ldrb.w	r8, [r7, #4]
 801cde8:	f897 a005 	ldrb.w	sl, [r7, #5]
 801cdec:	b1c9      	cbz	r1, 801ce22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cdee:	f04f 0c03 	mov.w	ip, #3
 801cdf2:	f06f 0004 	mvn.w	r0, #4
 801cdf6:	3705      	adds	r7, #5
 801cdf8:	fb13 030c 	smlabb	r3, r3, ip, r0
 801cdfc:	eb07 0c03 	add.w	ip, r7, r3
 801ce00:	5cfb      	ldrb	r3, [r7, r3]
 801ce02:	930d      	str	r3, [sp, #52]	@ 0x34
 801ce04:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801ce08:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ce0a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801ce0e:	9311      	str	r3, [sp, #68]	@ 0x44
 801ce10:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801ce14:	930e      	str	r3, [sp, #56]	@ 0x38
 801ce16:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801ce1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ce1c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801ce20:	9312      	str	r3, [sp, #72]	@ 0x48
 801ce22:	b292      	uxth	r2, r2
 801ce24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801ce26:	b289      	uxth	r1, r1
 801ce28:	fb02 f301 	mul.w	r3, r2, r1
 801ce2c:	0112      	lsls	r2, r2, #4
 801ce2e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ce32:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801ce36:	1ad2      	subs	r2, r2, r3
 801ce38:	b289      	uxth	r1, r1
 801ce3a:	b292      	uxth	r2, r2
 801ce3c:	1a7f      	subs	r7, r7, r1
 801ce3e:	fb02 f909 	mul.w	r9, r2, r9
 801ce42:	b2bf      	uxth	r7, r7
 801ce44:	fb02 f808 	mul.w	r8, r2, r8
 801ce48:	fb02 fa0a 	mul.w	sl, r2, sl
 801ce4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ce4e:	fb07 9905 	mla	r9, r7, r5, r9
 801ce52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801ce54:	fb07 8800 	mla	r8, r7, r0, r8
 801ce58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801ce5a:	fb07 aa0e 	mla	sl, r7, lr, sl
 801ce5e:	fb01 9905 	mla	r9, r1, r5, r9
 801ce62:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801ce64:	fb01 8800 	mla	r8, r1, r0, r8
 801ce68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ce6a:	fb01 a102 	mla	r1, r1, r2, sl
 801ce6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ce70:	fb03 9905 	mla	r9, r3, r5, r9
 801ce74:	fb03 8800 	mla	r8, r3, r0, r8
 801ce78:	fb03 1302 	mla	r3, r3, r2, r1
 801ce7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ce80:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ce84:	121b      	asrs	r3, r3, #8
 801ce86:	f886 9000 	strb.w	r9, [r6]
 801ce8a:	f886 8001 	strb.w	r8, [r6, #1]
 801ce8e:	70b3      	strb	r3, [r6, #2]
 801ce90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801ce92:	3603      	adds	r6, #3
 801ce94:	449b      	add	fp, r3
 801ce96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ce98:	441c      	add	r4, r3
 801ce9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce9c:	3b01      	subs	r3, #1
 801ce9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801cea0:	e774      	b.n	801cd8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801cea2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cea4:	449b      	add	fp, r3
 801cea6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cea8:	441c      	add	r4, r3
 801ceaa:	9b06      	ldr	r3, [sp, #24]
 801ceac:	3b01      	subs	r3, #1
 801ceae:	9306      	str	r3, [sp, #24]
 801ceb0:	9b07      	ldr	r3, [sp, #28]
 801ceb2:	3303      	adds	r3, #3
 801ceb4:	9307      	str	r3, [sp, #28]
 801ceb6:	e74a      	b.n	801cd4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ceb8:	d024      	beq.n	801cf04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ceba:	9b06      	ldr	r3, [sp, #24]
 801cebc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801cebe:	3b01      	subs	r3, #1
 801cec0:	fb00 b003 	mla	r0, r0, r3, fp
 801cec4:	1400      	asrs	r0, r0, #16
 801cec6:	f53f af5e 	bmi.w	801cd86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ceca:	3901      	subs	r1, #1
 801cecc:	4288      	cmp	r0, r1
 801cece:	f6bf af5a 	bge.w	801cd86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801ced2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ced4:	fb01 4303 	mla	r3, r1, r3, r4
 801ced8:	141b      	asrs	r3, r3, #16
 801ceda:	f53f af54 	bmi.w	801cd86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cede:	3a01      	subs	r2, #1
 801cee0:	4293      	cmp	r3, r2
 801cee2:	f6bf af50 	bge.w	801cd86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cee6:	9b07      	ldr	r3, [sp, #28]
 801cee8:	f8dd e018 	ldr.w	lr, [sp, #24]
 801ceec:	1cde      	adds	r6, r3, #3
 801ceee:	f1be 0f00 	cmp.w	lr, #0
 801cef2:	dc5f      	bgt.n	801cfb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cef4:	9b06      	ldr	r3, [sp, #24]
 801cef6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cefa:	9b07      	ldr	r3, [sp, #28]
 801cefc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801cf00:	4423      	add	r3, r4
 801cf02:	9307      	str	r3, [sp, #28]
 801cf04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf06:	2b00      	cmp	r3, #0
 801cf08:	f340 80c5 	ble.w	801d096 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801cf0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801cf10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cf12:	ee30 0a04 	vadd.f32	s0, s0, s8
 801cf16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801cf1a:	eef0 6a62 	vmov.f32	s13, s5
 801cf1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801cf22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801cf26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf2a:	ee16 ba90 	vmov	fp, s13
 801cf2e:	eef0 6a43 	vmov.f32	s13, s6
 801cf32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cf36:	ee16 4a90 	vmov	r4, s13
 801cf3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801cf3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801cf42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801cf46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801cf4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801cf4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cf52:	ee12 2a90 	vmov	r2, s5
 801cf56:	eef0 2a47 	vmov.f32	s5, s14
 801cf5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf5e:	ee13 2a10 	vmov	r2, s6
 801cf62:	9327      	str	r3, [sp, #156]	@ 0x9c
 801cf64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cf66:	eeb0 3a67 	vmov.f32	s6, s15
 801cf6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf6e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801cf70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cf74:	3b01      	subs	r3, #1
 801cf76:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cf7a:	bf08      	it	eq
 801cf7c:	4613      	moveq	r3, r2
 801cf7e:	9306      	str	r3, [sp, #24]
 801cf80:	e6d7      	b.n	801cd32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801cf82:	f110 0c01 	adds.w	ip, r0, #1
 801cf86:	d483      	bmi.n	801ce90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801cf88:	4563      	cmp	r3, ip
 801cf8a:	db81      	blt.n	801ce90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801cf8c:	f115 0c01 	adds.w	ip, r5, #1
 801cf90:	f53f af7e 	bmi.w	801ce90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801cf94:	4567      	cmp	r7, ip
 801cf96:	f6ff af7b 	blt.w	801ce90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801cf9a:	b23f      	sxth	r7, r7
 801cf9c:	b21b      	sxth	r3, r3
 801cf9e:	9700      	str	r7, [sp, #0]
 801cfa0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801cfa4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801cfa8:	9a08      	ldr	r2, [sp, #32]
 801cfaa:	4631      	mov	r1, r6
 801cfac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801cfae:	f7ff fdf9 	bl	801cba4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801cfb2:	e76d      	b.n	801ce90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801cfb4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801cfb6:	ea4f 402b 	mov.w	r0, fp, asr #16
 801cfba:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cfbe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801cfc2:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801cfc6:	1421      	asrs	r1, r4, #16
 801cfc8:	930a      	str	r3, [sp, #40]	@ 0x28
 801cfca:	fb0c 0101 	mla	r1, ip, r1, r0
 801cfce:	9808      	ldr	r0, [sp, #32]
 801cfd0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cfd4:	1845      	adds	r5, r0, r1
 801cfd6:	5c40      	ldrb	r0, [r0, r1]
 801cfd8:	796f      	ldrb	r7, [r5, #5]
 801cfda:	7869      	ldrb	r1, [r5, #1]
 801cfdc:	f895 8002 	ldrb.w	r8, [r5, #2]
 801cfe0:	f895 a003 	ldrb.w	sl, [r5, #3]
 801cfe4:	f895 9004 	ldrb.w	r9, [r5, #4]
 801cfe8:	970c      	str	r7, [sp, #48]	@ 0x30
 801cfea:	b1a2      	cbz	r2, 801d016 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801cfec:	2703      	movs	r7, #3
 801cfee:	f06f 0304 	mvn.w	r3, #4
 801cff2:	3505      	adds	r5, #5
 801cff4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801cff8:	eb05 070c 	add.w	r7, r5, ip
 801cffc:	f815 500c 	ldrb.w	r5, [r5, ip]
 801d000:	9513      	str	r5, [sp, #76]	@ 0x4c
 801d002:	787d      	ldrb	r5, [r7, #1]
 801d004:	9515      	str	r5, [sp, #84]	@ 0x54
 801d006:	78bd      	ldrb	r5, [r7, #2]
 801d008:	9517      	str	r5, [sp, #92]	@ 0x5c
 801d00a:	78fd      	ldrb	r5, [r7, #3]
 801d00c:	9514      	str	r5, [sp, #80]	@ 0x50
 801d00e:	793d      	ldrb	r5, [r7, #4]
 801d010:	9516      	str	r5, [sp, #88]	@ 0x58
 801d012:	797d      	ldrb	r5, [r7, #5]
 801d014:	9518      	str	r5, [sp, #96]	@ 0x60
 801d016:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d01a:	b292      	uxth	r2, r2
 801d01c:	3603      	adds	r6, #3
 801d01e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801d022:	fb03 f502 	mul.w	r5, r3, r2
 801d026:	011b      	lsls	r3, r3, #4
 801d028:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801d02c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801d030:	1b5b      	subs	r3, r3, r5
 801d032:	b292      	uxth	r2, r2
 801d034:	b29b      	uxth	r3, r3
 801d036:	1abf      	subs	r7, r7, r2
 801d038:	fb03 f909 	mul.w	r9, r3, r9
 801d03c:	b2bf      	uxth	r7, r7
 801d03e:	fb03 fa0a 	mul.w	sl, r3, sl
 801d042:	fb07 9901 	mla	r9, r7, r1, r9
 801d046:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801d048:	fb07 aa00 	mla	sl, r7, r0, sl
 801d04c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d04e:	fb02 9901 	mla	r9, r2, r1, r9
 801d052:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801d054:	fb02 aa00 	mla	sl, r2, r0, sl
 801d058:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801d05a:	fb05 9901 	mla	r9, r5, r1, r9
 801d05e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d060:	fb05 aa00 	mla	sl, r5, r0, sl
 801d064:	434b      	muls	r3, r1
 801d066:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801d068:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d06c:	fb07 3308 	mla	r3, r7, r8, r3
 801d070:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d074:	f806 ac06 	strb.w	sl, [r6, #-6]
 801d078:	fb02 3201 	mla	r2, r2, r1, r3
 801d07c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d07e:	f806 9c05 	strb.w	r9, [r6, #-5]
 801d082:	fb05 2503 	mla	r5, r5, r3, r2
 801d086:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d088:	122d      	asrs	r5, r5, #8
 801d08a:	449b      	add	fp, r3
 801d08c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d08e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801d092:	441c      	add	r4, r3
 801d094:	e72b      	b.n	801ceee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801d096:	b01b      	add	sp, #108	@ 0x6c
 801d098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d09c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801d09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d0a0:	b087      	sub	sp, #28
 801d0a2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801d0a6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d0aa:	fb05 7003 	mla	r0, r5, r3, r7
 801d0ae:	2d00      	cmp	r5, #0
 801d0b0:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801d0b4:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801d0b8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d0bc:	f2c0 811f 	blt.w	801d2fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801d0c0:	45a8      	cmp	r8, r5
 801d0c2:	f340 811c 	ble.w	801d2fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801d0c6:	2f00      	cmp	r7, #0
 801d0c8:	f2c0 8117 	blt.w	801d2fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801d0cc:	42bb      	cmp	r3, r7
 801d0ce:	f340 8114 	ble.w	801d2fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801d0d2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d0d6:	1c7a      	adds	r2, r7, #1
 801d0d8:	f100 8114 	bmi.w	801d304 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801d0dc:	4293      	cmp	r3, r2
 801d0de:	f340 8111 	ble.w	801d304 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801d0e2:	2c00      	cmp	r4, #0
 801d0e4:	f000 8110 	beq.w	801d308 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801d0e8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d0ec:	3501      	adds	r5, #1
 801d0ee:	f100 810f 	bmi.w	801d310 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801d0f2:	45a8      	cmp	r8, r5
 801d0f4:	f340 810c 	ble.w	801d310 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801d0f8:	f1be 0f00 	cmp.w	lr, #0
 801d0fc:	f000 810b 	beq.w	801d316 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801d100:	2f00      	cmp	r7, #0
 801d102:	f2c0 8103 	blt.w	801d30c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801d106:	42bb      	cmp	r3, r7
 801d108:	f340 8100 	ble.w	801d30c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801d10c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d110:	3701      	adds	r7, #1
 801d112:	f100 8103 	bmi.w	801d31c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801d116:	42bb      	cmp	r3, r7
 801d118:	f340 8100 	ble.w	801d31c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801d11c:	2c00      	cmp	r4, #0
 801d11e:	f000 80ff 	beq.w	801d320 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801d122:	3301      	adds	r3, #1
 801d124:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d128:	fa1f fc84 	uxth.w	ip, r4
 801d12c:	fa1f fe8e 	uxth.w	lr, lr
 801d130:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d134:	fb0c f90e 	mul.w	r9, ip, lr
 801d138:	0e13      	lsrs	r3, r2, #24
 801d13a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d13e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d142:	9302      	str	r3, [sp, #8]
 801d144:	ebac 0709 	sub.w	r7, ip, r9
 801d148:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d14c:	fa1f f48e 	uxth.w	r4, lr
 801d150:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d154:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d158:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d15c:	fb0a fe0e 	mul.w	lr, sl, lr
 801d160:	1b1b      	subs	r3, r3, r4
 801d162:	fb0a f606 	mul.w	r6, sl, r6
 801d166:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d16a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d16e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801d172:	b29b      	uxth	r3, r3
 801d174:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d178:	b2bf      	uxth	r7, r7
 801d17a:	9301      	str	r3, [sp, #4]
 801d17c:	44e6      	add	lr, ip
 801d17e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d182:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d186:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d18a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d18e:	9303      	str	r3, [sp, #12]
 801d190:	0a33      	lsrs	r3, r6, #8
 801d192:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d196:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d19a:	9304      	str	r3, [sp, #16]
 801d19c:	fb0b f606 	mul.w	r6, fp, r6
 801d1a0:	fb0b f000 	mul.w	r0, fp, r0
 801d1a4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d1a8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d1ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d1b0:	44b6      	add	lr, r6
 801d1b2:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d1b6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d1ba:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d1be:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d1c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d1c6:	fb08 f606 	mul.w	r6, r8, r6
 801d1ca:	0a03      	lsrs	r3, r0, #8
 801d1cc:	fb08 f505 	mul.w	r5, r8, r5
 801d1d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d1d4:	0a30      	lsrs	r0, r6, #8
 801d1d6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d1da:	9305      	str	r3, [sp, #20]
 801d1dc:	0e13      	lsrs	r3, r2, #24
 801d1de:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d1e2:	fb0e fe07 	mul.w	lr, lr, r7
 801d1e6:	4430      	add	r0, r6
 801d1e8:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801d1ec:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d1f0:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801d1f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d1f8:	0a00      	lsrs	r0, r0, #8
 801d1fa:	435e      	muls	r6, r3
 801d1fc:	0a2d      	lsrs	r5, r5, #8
 801d1fe:	435a      	muls	r2, r3
 801d200:	9b03      	ldr	r3, [sp, #12]
 801d202:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d206:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d20a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d20e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d212:	44b4      	add	ip, r6
 801d214:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801d218:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d21c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d220:	9e01      	ldr	r6, [sp, #4]
 801d222:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d226:	fb03 ee06 	mla	lr, r3, r6, lr
 801d22a:	9b04      	ldr	r3, [sp, #16]
 801d22c:	0a12      	lsrs	r2, r2, #8
 801d22e:	fb0c ee09 	mla	lr, ip, r9, lr
 801d232:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801d236:	9b05      	ldr	r3, [sp, #20]
 801d238:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d23c:	fb00 ee04 	mla	lr, r0, r4, lr
 801d240:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d244:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801d248:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801d24c:	9b01      	ldr	r3, [sp, #4]
 801d24e:	fb07 fe0e 	mul.w	lr, r7, lr
 801d252:	fb07 f70b 	mul.w	r7, r7, fp
 801d256:	fb03 ee06 	mla	lr, r3, r6, lr
 801d25a:	fb03 730a 	mla	r3, r3, sl, r7
 801d25e:	fb09 e202 	mla	r2, r9, r2, lr
 801d262:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801d266:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d26a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801d26e:	fb04 3408 	mla	r4, r4, r8, r3
 801d272:	9b02      	ldr	r3, [sp, #8]
 801d274:	b292      	uxth	r2, r2
 801d276:	fb09 4903 	mla	r9, r9, r3, r4
 801d27a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d27e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d282:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801d286:	fb09 f902 	mul.w	r9, r9, r2
 801d28a:	ea40 0e0e 	orr.w	lr, r0, lr
 801d28e:	f109 0301 	add.w	r3, r9, #1
 801d292:	fa5f f08e 	uxtb.w	r0, lr
 801d296:	fb10 f002 	smulbb	r0, r0, r2
 801d29a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d29e:	780b      	ldrb	r3, [r1, #0]
 801d2a0:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801d2a4:	fa5f f989 	uxtb.w	r9, r9
 801d2a8:	fb03 0309 	mla	r3, r3, r9, r0
 801d2ac:	b29b      	uxth	r3, r3
 801d2ae:	1c58      	adds	r0, r3, #1
 801d2b0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d2b4:	7848      	ldrb	r0, [r1, #1]
 801d2b6:	fb10 f009 	smulbb	r0, r0, r9
 801d2ba:	121b      	asrs	r3, r3, #8
 801d2bc:	700b      	strb	r3, [r1, #0]
 801d2be:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801d2c2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d2c6:	fb03 0302 	mla	r3, r3, r2, r0
 801d2ca:	b29b      	uxth	r3, r3
 801d2cc:	1c58      	adds	r0, r3, #1
 801d2ce:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d2d2:	121b      	asrs	r3, r3, #8
 801d2d4:	704b      	strb	r3, [r1, #1]
 801d2d6:	788b      	ldrb	r3, [r1, #2]
 801d2d8:	fb13 f909 	smulbb	r9, r3, r9
 801d2dc:	fb0e 9e02 	mla	lr, lr, r2, r9
 801d2e0:	fa1f fe8e 	uxth.w	lr, lr
 801d2e4:	f10e 0301 	add.w	r3, lr, #1
 801d2e8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801d2ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d2f0:	f881 e002 	strb.w	lr, [r1, #2]
 801d2f4:	b007      	add	sp, #28
 801d2f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2fa:	2600      	movs	r6, #0
 801d2fc:	e6eb      	b.n	801d0d6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801d2fe:	2000      	movs	r0, #0
 801d300:	4606      	mov	r6, r0
 801d302:	e6f3      	b.n	801d0ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d304:	2000      	movs	r0, #0
 801d306:	e6f1      	b.n	801d0ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d308:	4620      	mov	r0, r4
 801d30a:	e6ef      	b.n	801d0ec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d30c:	2500      	movs	r5, #0
 801d30e:	e6ff      	b.n	801d110 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801d310:	2200      	movs	r2, #0
 801d312:	4615      	mov	r5, r2
 801d314:	e708      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d316:	4672      	mov	r2, lr
 801d318:	4675      	mov	r5, lr
 801d31a:	e705      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d31c:	2200      	movs	r2, #0
 801d31e:	e703      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d320:	4622      	mov	r2, r4
 801d322:	e701      	b.n	801d128 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801d324 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d328:	b09d      	sub	sp, #116	@ 0x74
 801d32a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d32c:	9307      	str	r3, [sp, #28]
 801d32e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801d330:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801d334:	901b      	str	r0, [sp, #108]	@ 0x6c
 801d336:	931a      	str	r3, [sp, #104]	@ 0x68
 801d338:	6850      	ldr	r0, [r2, #4]
 801d33a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801d33c:	6812      	ldr	r2, [r2, #0]
 801d33e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801d342:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801d346:	fb00 1303 	mla	r3, r0, r3, r1
 801d34a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d34e:	18d3      	adds	r3, r2, r3
 801d350:	930a      	str	r3, [sp, #40]	@ 0x28
 801d352:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d354:	681b      	ldr	r3, [r3, #0]
 801d356:	9310      	str	r3, [sp, #64]	@ 0x40
 801d358:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801d35c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d35e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d360:	2b00      	cmp	r3, #0
 801d362:	dc03      	bgt.n	801d36c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d364:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d366:	2b00      	cmp	r3, #0
 801d368:	f340 8368 	ble.w	801da3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d36c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d36e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d372:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d376:	1e48      	subs	r0, r1, #1
 801d378:	1e57      	subs	r7, r2, #1
 801d37a:	9b07      	ldr	r3, [sp, #28]
 801d37c:	2b00      	cmp	r3, #0
 801d37e:	f340 8187 	ble.w	801d690 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d382:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d386:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d38a:	d406      	bmi.n	801d39a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d38c:	4584      	cmp	ip, r0
 801d38e:	da04      	bge.n	801d39a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d390:	2b00      	cmp	r3, #0
 801d392:	db02      	blt.n	801d39a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d394:	42bb      	cmp	r3, r7
 801d396:	f2c0 817c 	blt.w	801d692 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d39a:	f11c 0c01 	adds.w	ip, ip, #1
 801d39e:	f100 816c 	bmi.w	801d67a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d3a2:	4561      	cmp	r1, ip
 801d3a4:	f2c0 8169 	blt.w	801d67a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d3a8:	3301      	adds	r3, #1
 801d3aa:	f100 8166 	bmi.w	801d67a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d3ae:	429a      	cmp	r2, r3
 801d3b0:	f2c0 8163 	blt.w	801d67a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d3b4:	9b07      	ldr	r3, [sp, #28]
 801d3b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801d3b8:	9318      	str	r3, [sp, #96]	@ 0x60
 801d3ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	f340 8186 	ble.w	801d6ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801d3c2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d3c4:	142a      	asrs	r2, r5, #16
 801d3c6:	ea4f 4026 	mov.w	r0, r6, asr #16
 801d3ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d3ce:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d3d2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801d3d6:	f100 81cb 	bmi.w	801d770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d3da:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d3de:	4542      	cmp	r2, r8
 801d3e0:	f280 81c6 	bge.w	801d770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d3e4:	2800      	cmp	r0, #0
 801d3e6:	f2c0 81c3 	blt.w	801d770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d3ea:	f103 38ff 	add.w	r8, r3, #4294967295
 801d3ee:	4540      	cmp	r0, r8
 801d3f0:	f280 81be 	bge.w	801d770 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d3f4:	fa0f f38e 	sxth.w	r3, lr
 801d3f8:	fb00 2203 	mla	r2, r0, r3, r2
 801d3fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d3fe:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801d402:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801d406:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d40a:	2900      	cmp	r1, #0
 801d40c:	f000 81a6 	beq.w	801d75c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801d410:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d414:	900c      	str	r0, [sp, #48]	@ 0x30
 801d416:	0e00      	lsrs	r0, r0, #24
 801d418:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d41a:	f1bc 0f00 	cmp.w	ip, #0
 801d41e:	d00f      	beq.n	801d440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d420:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d424:	3b01      	subs	r3, #1
 801d426:	009b      	lsls	r3, r3, #2
 801d428:	3304      	adds	r3, #4
 801d42a:	eb08 0003 	add.w	r0, r8, r3
 801d42e:	f858 3003 	ldr.w	r3, [r8, r3]
 801d432:	9308      	str	r3, [sp, #32]
 801d434:	0e1b      	lsrs	r3, r3, #24
 801d436:	9311      	str	r3, [sp, #68]	@ 0x44
 801d438:	6843      	ldr	r3, [r0, #4]
 801d43a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d43c:	0e1b      	lsrs	r3, r3, #24
 801d43e:	9314      	str	r3, [sp, #80]	@ 0x50
 801d440:	b289      	uxth	r1, r1
 801d442:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d444:	fa1f fc8c 	uxth.w	ip, ip
 801d448:	0108      	lsls	r0, r1, #4
 801d44a:	fb01 f90c 	mul.w	r9, r1, ip
 801d44e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801d452:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801d456:	eba0 0809 	sub.w	r8, r0, r9
 801d45a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d45c:	fa1f f18c 	uxth.w	r1, ip
 801d460:	fa1f f888 	uxth.w	r8, r8
 801d464:	1a5b      	subs	r3, r3, r1
 801d466:	fb08 f000 	mul.w	r0, r8, r0
 801d46a:	b29b      	uxth	r3, r3
 801d46c:	fb03 000e 	mla	r0, r3, lr, r0
 801d470:	fb01 0004 	mla	r0, r1, r4, r0
 801d474:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d476:	fb09 0004 	mla	r0, r9, r4, r0
 801d47a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d47e:	2800      	cmp	r0, #0
 801d480:	f000 80f2 	beq.w	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d484:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d488:	d01b      	beq.n	801d4c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d48a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801d48e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d492:	fb0e fa0a 	mul.w	sl, lr, sl
 801d496:	fb0e fe02 	mul.w	lr, lr, r2
 801d49a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801d49e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d4a2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d4a6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d4aa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d4ae:	4452      	add	r2, sl
 801d4b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4b4:	0a12      	lsrs	r2, r2, #8
 801d4b6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d4ba:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d4be:	ea42 020c 	orr.w	r2, r2, ip
 801d4c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d4c4:	2cff      	cmp	r4, #255	@ 0xff
 801d4c6:	d021      	beq.n	801d50c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d4c8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d4ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d4ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d4d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801d4d4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d4d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d4da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d4dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d4e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d4e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801d4e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d4ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d4f0:	44de      	add	lr, fp
 801d4f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d4f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d4fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d4fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d502:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d506:	ea4e 040a 	orr.w	r4, lr, sl
 801d50a:	940c      	str	r4, [sp, #48]	@ 0x30
 801d50c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d50e:	2cff      	cmp	r4, #255	@ 0xff
 801d510:	d021      	beq.n	801d556 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d512:	9c08      	ldr	r4, [sp, #32]
 801d514:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d518:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d51a:	fb04 fb0b 	mul.w	fp, r4, fp
 801d51e:	9c08      	ldr	r4, [sp, #32]
 801d520:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d524:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d526:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d52a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d52e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d532:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d536:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d53a:	44de      	add	lr, fp
 801d53c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d540:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d548:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d54c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d550:	ea4e 040a 	orr.w	r4, lr, sl
 801d554:	9408      	str	r4, [sp, #32]
 801d556:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d558:	2cff      	cmp	r4, #255	@ 0xff
 801d55a:	d021      	beq.n	801d5a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d55c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d55e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d562:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d564:	fb04 fb0b 	mul.w	fp, r4, fp
 801d568:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d56a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d56e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d570:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d574:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d578:	fb04 fa0a 	mul.w	sl, r4, sl
 801d57c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d580:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d584:	44de      	add	lr, fp
 801d586:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d58a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d58e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d592:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d596:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d59a:	ea4e 040a 	orr.w	r4, lr, sl
 801d59e:	940d      	str	r4, [sp, #52]	@ 0x34
 801d5a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d5a2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801d5a6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d5aa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d5ae:	9c08      	ldr	r4, [sp, #32]
 801d5b0:	fb08 fc0c 	mul.w	ip, r8, ip
 801d5b4:	fb03 cc0e 	mla	ip, r3, lr, ip
 801d5b8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d5bc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d5be:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d5c2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d5c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d5c8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d5cc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d5d0:	fb08 f80e 	mul.w	r8, r8, lr
 801d5d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d5d8:	fb03 8202 	mla	r2, r3, r2, r8
 801d5dc:	9b08      	ldr	r3, [sp, #32]
 801d5de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d5e2:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801d5e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d5e8:	fb01 220a 	mla	r2, r1, sl, r2
 801d5ec:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801d5f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5f2:	fb09 2901 	mla	r9, r9, r1, r2
 801d5f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d5f8:	4343      	muls	r3, r0
 801d5fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d5fe:	1c58      	adds	r0, r3, #1
 801d600:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d604:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d608:	783b      	ldrb	r3, [r7, #0]
 801d60a:	ea4c 0c09 	orr.w	ip, ip, r9
 801d60e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d612:	fa5f f28c 	uxtb.w	r2, ip
 801d616:	b2c0      	uxtb	r0, r0
 801d618:	fb12 f201 	smulbb	r2, r2, r1
 801d61c:	fb03 2300 	mla	r3, r3, r0, r2
 801d620:	b29b      	uxth	r3, r3
 801d622:	1c5a      	adds	r2, r3, #1
 801d624:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d628:	787a      	ldrb	r2, [r7, #1]
 801d62a:	fb12 f200 	smulbb	r2, r2, r0
 801d62e:	121b      	asrs	r3, r3, #8
 801d630:	703b      	strb	r3, [r7, #0]
 801d632:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d636:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d63a:	fb03 2301 	mla	r3, r3, r1, r2
 801d63e:	b29b      	uxth	r3, r3
 801d640:	1c5a      	adds	r2, r3, #1
 801d642:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d646:	121b      	asrs	r3, r3, #8
 801d648:	707b      	strb	r3, [r7, #1]
 801d64a:	78bb      	ldrb	r3, [r7, #2]
 801d64c:	fb13 f000 	smulbb	r0, r3, r0
 801d650:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d654:	fa1f fc8c 	uxth.w	ip, ip
 801d658:	f10c 0301 	add.w	r3, ip, #1
 801d65c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d660:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d664:	f887 c002 	strb.w	ip, [r7, #2]
 801d668:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d66a:	3703      	adds	r7, #3
 801d66c:	441d      	add	r5, r3
 801d66e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d670:	441e      	add	r6, r3
 801d672:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d674:	3b01      	subs	r3, #1
 801d676:	9318      	str	r3, [sp, #96]	@ 0x60
 801d678:	e69f      	b.n	801d3ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d67a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d67c:	441d      	add	r5, r3
 801d67e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d680:	441e      	add	r6, r3
 801d682:	9b07      	ldr	r3, [sp, #28]
 801d684:	3b01      	subs	r3, #1
 801d686:	9307      	str	r3, [sp, #28]
 801d688:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d68a:	3303      	adds	r3, #3
 801d68c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d68e:	e674      	b.n	801d37a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d690:	d025      	beq.n	801d6de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d692:	9b07      	ldr	r3, [sp, #28]
 801d694:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801d696:	3b01      	subs	r3, #1
 801d698:	fb00 5003 	mla	r0, r0, r3, r5
 801d69c:	1400      	asrs	r0, r0, #16
 801d69e:	f53f ae89 	bmi.w	801d3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d6a2:	3901      	subs	r1, #1
 801d6a4:	4288      	cmp	r0, r1
 801d6a6:	f6bf ae85 	bge.w	801d3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d6aa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801d6ac:	fb01 6303 	mla	r3, r1, r3, r6
 801d6b0:	141b      	asrs	r3, r3, #16
 801d6b2:	f53f ae7f 	bmi.w	801d3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d6b6:	3a01      	subs	r2, #1
 801d6b8:	4293      	cmp	r3, r2
 801d6ba:	f6bf ae7b 	bge.w	801d3b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d6be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d6c4:	f103 0e03 	add.w	lr, r3, #3
 801d6c8:	f1bb 0f00 	cmp.w	fp, #0
 801d6cc:	dc6e      	bgt.n	801d7ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801d6ce:	9b07      	ldr	r3, [sp, #28]
 801d6d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d6d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d6d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d6da:	4423      	add	r3, r4
 801d6dc:	930a      	str	r3, [sp, #40]	@ 0x28
 801d6de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d6e0:	2b00      	cmp	r3, #0
 801d6e2:	f340 81ab 	ble.w	801da3c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d6e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d6ea:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d6ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d6f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d6f4:	eef0 6a62 	vmov.f32	s13, s5
 801d6f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d6fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d700:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d704:	ee16 5a90 	vmov	r5, s13
 801d708:	eef0 6a43 	vmov.f32	s13, s6
 801d70c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d710:	ee16 6a90 	vmov	r6, s13
 801d714:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d718:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d71c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d720:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d724:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d728:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d72c:	ee12 2a90 	vmov	r2, s5
 801d730:	eef0 2a47 	vmov.f32	s5, s14
 801d734:	fb92 f3f3 	sdiv	r3, r2, r3
 801d738:	ee13 2a10 	vmov	r2, s6
 801d73c:	9329      	str	r3, [sp, #164]	@ 0xa4
 801d73e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d740:	eeb0 3a67 	vmov.f32	s6, s15
 801d744:	fb92 f3f3 	sdiv	r3, r2, r3
 801d748:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d74a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d74c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d74e:	3b01      	subs	r3, #1
 801d750:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d752:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d754:	bf08      	it	eq
 801d756:	4613      	moveq	r3, r2
 801d758:	9307      	str	r3, [sp, #28]
 801d75a:	e600      	b.n	801d35e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d75c:	f1bc 0f00 	cmp.w	ip, #0
 801d760:	f43f ae6e 	beq.w	801d440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d764:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d768:	9308      	str	r3, [sp, #32]
 801d76a:	0e1b      	lsrs	r3, r3, #24
 801d76c:	9311      	str	r3, [sp, #68]	@ 0x44
 801d76e:	e667      	b.n	801d440 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d770:	f112 0801 	adds.w	r8, r2, #1
 801d774:	f53f af78 	bmi.w	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d778:	45c6      	cmp	lr, r8
 801d77a:	f6ff af75 	blt.w	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d77e:	f110 0801 	adds.w	r8, r0, #1
 801d782:	f53f af71 	bmi.w	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d786:	4543      	cmp	r3, r8
 801d788:	f6ff af6e 	blt.w	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d78c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d78e:	b21b      	sxth	r3, r3
 801d790:	9201      	str	r2, [sp, #4]
 801d792:	9300      	str	r3, [sp, #0]
 801d794:	fa0f f38e 	sxth.w	r3, lr
 801d798:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d79a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d79e:	e9cd c404 	strd	ip, r4, [sp, #16]
 801d7a2:	4639      	mov	r1, r7
 801d7a4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d7a6:	f7ff fc79 	bl	801d09c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801d7aa:	e75d      	b.n	801d668 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d7ac:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d7ae:	142f      	asrs	r7, r5, #16
 801d7b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d7b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d7b6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d7ba:	1433      	asrs	r3, r6, #16
 801d7bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d7c0:	fb02 7303 	mla	r3, r2, r3, r7
 801d7c4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801d7c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d7cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d7d0:	2900      	cmp	r1, #0
 801d7d2:	f000 812a 	beq.w	801da2a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801d7d6:	687c      	ldr	r4, [r7, #4]
 801d7d8:	940e      	str	r4, [sp, #56]	@ 0x38
 801d7da:	0e24      	lsrs	r4, r4, #24
 801d7dc:	9415      	str	r4, [sp, #84]	@ 0x54
 801d7de:	b178      	cbz	r0, 801d800 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d7e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801d7e4:	3a01      	subs	r2, #1
 801d7e6:	0092      	lsls	r2, r2, #2
 801d7e8:	3204      	adds	r2, #4
 801d7ea:	eb07 0802 	add.w	r8, r7, r2
 801d7ee:	58ba      	ldr	r2, [r7, r2]
 801d7f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d7f2:	0e12      	lsrs	r2, r2, #24
 801d7f4:	9212      	str	r2, [sp, #72]	@ 0x48
 801d7f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d7fa:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d7fc:	0e12      	lsrs	r2, r2, #24
 801d7fe:	9216      	str	r2, [sp, #88]	@ 0x58
 801d800:	b289      	uxth	r1, r1
 801d802:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d804:	b280      	uxth	r0, r0
 801d806:	fb01 f900 	mul.w	r9, r1, r0
 801d80a:	0109      	lsls	r1, r1, #4
 801d80c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d810:	eba1 0809 	sub.w	r8, r1, r9
 801d814:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801d818:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801d81a:	b280      	uxth	r0, r0
 801d81c:	fa1f f888 	uxth.w	r8, r8
 801d820:	1a12      	subs	r2, r2, r0
 801d822:	fb08 f101 	mul.w	r1, r8, r1
 801d826:	b292      	uxth	r2, r2
 801d828:	fb02 110c 	mla	r1, r2, ip, r1
 801d82c:	fb00 1104 	mla	r1, r0, r4, r1
 801d830:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d832:	fb09 1104 	mla	r1, r9, r4, r1
 801d836:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d83a:	2900      	cmp	r1, #0
 801d83c:	f000 80ec 	beq.w	801da18 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801d840:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d844:	d019      	beq.n	801d87a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801d846:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d84a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d84e:	fb0c fa0a 	mul.w	sl, ip, sl
 801d852:	fb0c fc03 	mul.w	ip, ip, r3
 801d856:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d85a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d85e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d862:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d866:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d86a:	4453      	add	r3, sl
 801d86c:	0a3f      	lsrs	r7, r7, #8
 801d86e:	0a1b      	lsrs	r3, r3, #8
 801d870:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d874:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d878:	433b      	orrs	r3, r7
 801d87a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d87c:	2cff      	cmp	r4, #255	@ 0xff
 801d87e:	d020      	beq.n	801d8c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801d880:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d882:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d886:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d888:	4367      	muls	r7, r4
 801d88a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d88c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d890:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d894:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d896:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d89a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d89e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d8a2:	44bc      	add	ip, r7
 801d8a4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d8a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d8b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d8b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d8b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d8bc:	ea4c 040a 	orr.w	r4, ip, sl
 801d8c0:	940e      	str	r4, [sp, #56]	@ 0x38
 801d8c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d8c4:	2cff      	cmp	r4, #255	@ 0xff
 801d8c6:	d020      	beq.n	801d90a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801d8c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d8ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d8ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d8d0:	4367      	muls	r7, r4
 801d8d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d8d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d8d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d8dc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d8de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d8e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d8e6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d8ea:	44bc      	add	ip, r7
 801d8ec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d8f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d8f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d8fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d900:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d904:	ea4c 040a 	orr.w	r4, ip, sl
 801d908:	9409      	str	r4, [sp, #36]	@ 0x24
 801d90a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d90c:	2cff      	cmp	r4, #255	@ 0xff
 801d90e:	d020      	beq.n	801d952 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801d910:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d912:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d916:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d918:	4367      	muls	r7, r4
 801d91a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d91c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d920:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d924:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d926:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d92a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d92e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d932:	44bc      	add	ip, r7
 801d934:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d938:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d93c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d940:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d944:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d948:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d94c:	ea4c 040a 	orr.w	r4, ip, sl
 801d950:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d952:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d954:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d958:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d95c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d960:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d962:	fb08 f707 	mul.w	r7, r8, r7
 801d966:	fb02 770c 	mla	r7, r2, ip, r7
 801d96a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d96e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d970:	fb00 770c 	mla	r7, r0, ip, r7
 801d974:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d978:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d97a:	fb09 770c 	mla	r7, r9, ip, r7
 801d97e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d982:	fb08 f80c 	mul.w	r8, r8, ip
 801d986:	0a3f      	lsrs	r7, r7, #8
 801d988:	fb02 8303 	mla	r3, r2, r3, r8
 801d98c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d98e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d992:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d996:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d998:	fb00 330a 	mla	r3, r0, sl, r3
 801d99c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d9a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d9a2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d9a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d9a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d9ac:	434b      	muls	r3, r1
 801d9ae:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d9b2:	1c59      	adds	r1, r3, #1
 801d9b4:	ea47 070c 	orr.w	r7, r7, ip
 801d9b8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d9bc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d9c0:	b2fa      	uxtb	r2, r7
 801d9c2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d9c6:	fb12 f200 	smulbb	r2, r2, r0
 801d9ca:	b2c9      	uxtb	r1, r1
 801d9cc:	fb03 2301 	mla	r3, r3, r1, r2
 801d9d0:	b29b      	uxth	r3, r3
 801d9d2:	1c5a      	adds	r2, r3, #1
 801d9d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d9d8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d9dc:	fb12 f201 	smulbb	r2, r2, r1
 801d9e0:	121b      	asrs	r3, r3, #8
 801d9e2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d9e6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d9ea:	0c3f      	lsrs	r7, r7, #16
 801d9ec:	fb03 2300 	mla	r3, r3, r0, r2
 801d9f0:	b29b      	uxth	r3, r3
 801d9f2:	1c5a      	adds	r2, r3, #1
 801d9f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d9f8:	121b      	asrs	r3, r3, #8
 801d9fa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d9fe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801da02:	fb13 f101 	smulbb	r1, r3, r1
 801da06:	fb07 1700 	mla	r7, r7, r0, r1
 801da0a:	b2bf      	uxth	r7, r7
 801da0c:	1c79      	adds	r1, r7, #1
 801da0e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801da12:	123f      	asrs	r7, r7, #8
 801da14:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801da18:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801da1a:	f10e 0e03 	add.w	lr, lr, #3
 801da1e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801da22:	441d      	add	r5, r3
 801da24:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801da26:	441e      	add	r6, r3
 801da28:	e64e      	b.n	801d6c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801da2a:	2800      	cmp	r0, #0
 801da2c:	f43f aee8 	beq.w	801d800 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801da30:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801da34:	9209      	str	r2, [sp, #36]	@ 0x24
 801da36:	0e12      	lsrs	r2, r2, #24
 801da38:	9212      	str	r2, [sp, #72]	@ 0x48
 801da3a:	e6e1      	b.n	801d800 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801da3c:	b01d      	add	sp, #116	@ 0x74
 801da3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801da42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801da42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da46:	b087      	sub	sp, #28
 801da48:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801da4c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801da50:	fb05 7003 	mla	r0, r5, r3, r7
 801da54:	2d00      	cmp	r5, #0
 801da56:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801da5a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801da5e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801da62:	f2c0 810a 	blt.w	801dc7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801da66:	45a8      	cmp	r8, r5
 801da68:	f340 8107 	ble.w	801dc7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801da6c:	2f00      	cmp	r7, #0
 801da6e:	f2c0 8102 	blt.w	801dc76 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801da72:	42bb      	cmp	r3, r7
 801da74:	f340 80ff 	ble.w	801dc76 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801da78:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801da7c:	1c7a      	adds	r2, r7, #1
 801da7e:	f100 80ff 	bmi.w	801dc80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801da82:	4293      	cmp	r3, r2
 801da84:	f340 80fc 	ble.w	801dc80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801da88:	2c00      	cmp	r4, #0
 801da8a:	f000 80fb 	beq.w	801dc84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801da8e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801da92:	3501      	adds	r5, #1
 801da94:	f100 80fa 	bmi.w	801dc8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801da98:	45a8      	cmp	r8, r5
 801da9a:	f340 80f7 	ble.w	801dc8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801da9e:	f1be 0f00 	cmp.w	lr, #0
 801daa2:	f000 80f6 	beq.w	801dc92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801daa6:	2f00      	cmp	r7, #0
 801daa8:	f2c0 80ee 	blt.w	801dc88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801daac:	42bb      	cmp	r3, r7
 801daae:	f340 80eb 	ble.w	801dc88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801dab2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801dab6:	3701      	adds	r7, #1
 801dab8:	f100 80ee 	bmi.w	801dc98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801dabc:	42bb      	cmp	r3, r7
 801dabe:	f340 80eb 	ble.w	801dc98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801dac2:	2c00      	cmp	r4, #0
 801dac4:	f000 80ea 	beq.w	801dc9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801dac8:	3301      	adds	r3, #1
 801daca:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801dace:	fa1f fc84 	uxth.w	ip, r4
 801dad2:	fa1f fe8e 	uxth.w	lr, lr
 801dad6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801dada:	fb0c f90e 	mul.w	r9, ip, lr
 801dade:	0e13      	lsrs	r3, r2, #24
 801dae0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801dae4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801dae8:	9302      	str	r3, [sp, #8]
 801daea:	ebac 0709 	sub.w	r7, ip, r9
 801daee:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801daf2:	fa1f f48e 	uxth.w	r4, lr
 801daf6:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801dafa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801dafe:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801db02:	fb0a fe0e 	mul.w	lr, sl, lr
 801db06:	1b1b      	subs	r3, r3, r4
 801db08:	fb0a f606 	mul.w	r6, sl, r6
 801db0c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801db10:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801db14:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801db18:	b29b      	uxth	r3, r3
 801db1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801db1e:	b2bf      	uxth	r7, r7
 801db20:	9301      	str	r3, [sp, #4]
 801db22:	44e6      	add	lr, ip
 801db24:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801db28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db2c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801db30:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801db34:	9303      	str	r3, [sp, #12]
 801db36:	0a33      	lsrs	r3, r6, #8
 801db38:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801db3c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801db40:	9304      	str	r3, [sp, #16]
 801db42:	fb0b f606 	mul.w	r6, fp, r6
 801db46:	fb0b f000 	mul.w	r0, fp, r0
 801db4a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801db4e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801db52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db56:	44b6      	add	lr, r6
 801db58:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801db5c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801db60:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801db64:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801db68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db6c:	fb08 f606 	mul.w	r6, r8, r6
 801db70:	0a03      	lsrs	r3, r0, #8
 801db72:	fb08 f505 	mul.w	r5, r8, r5
 801db76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801db7a:	0a30      	lsrs	r0, r6, #8
 801db7c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801db80:	9305      	str	r3, [sp, #20]
 801db82:	0e13      	lsrs	r3, r2, #24
 801db84:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801db88:	fb0e fe07 	mul.w	lr, lr, r7
 801db8c:	4430      	add	r0, r6
 801db8e:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801db92:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801db96:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801db9a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801db9e:	0a00      	lsrs	r0, r0, #8
 801dba0:	435e      	muls	r6, r3
 801dba2:	0a2d      	lsrs	r5, r5, #8
 801dba4:	435a      	muls	r2, r3
 801dba6:	9b03      	ldr	r3, [sp, #12]
 801dba8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801dbac:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801dbb0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801dbb4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dbb8:	44b4      	add	ip, r6
 801dbba:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801dbbe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dbc2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801dbc6:	9e01      	ldr	r6, [sp, #4]
 801dbc8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dbcc:	fb03 ee06 	mla	lr, r3, r6, lr
 801dbd0:	9b04      	ldr	r3, [sp, #16]
 801dbd2:	0a12      	lsrs	r2, r2, #8
 801dbd4:	fb0c ee09 	mla	lr, ip, r9, lr
 801dbd8:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801dbdc:	9b05      	ldr	r3, [sp, #20]
 801dbde:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dbe2:	fb00 ee04 	mla	lr, r0, r4, lr
 801dbe6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dbea:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801dbee:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801dbf2:	9b01      	ldr	r3, [sp, #4]
 801dbf4:	fb07 fe0e 	mul.w	lr, r7, lr
 801dbf8:	fb07 f70b 	mul.w	r7, r7, fp
 801dbfc:	fb03 ee06 	mla	lr, r3, r6, lr
 801dc00:	fb03 730a 	mla	r3, r3, sl, r7
 801dc04:	fb09 e202 	mla	r2, r9, r2, lr
 801dc08:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801dc0c:	fb04 2e0e 	mla	lr, r4, lr, r2
 801dc10:	fb04 3408 	mla	r4, r4, r8, r3
 801dc14:	9b02      	ldr	r3, [sp, #8]
 801dc16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dc1a:	fb09 4903 	mla	r9, r9, r3, r4
 801dc1e:	780b      	ldrb	r3, [r1, #0]
 801dc20:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801dc24:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801dc28:	ea40 0e0e 	orr.w	lr, r0, lr
 801dc2c:	fa5f f989 	uxtb.w	r9, r9
 801dc30:	fb03 f209 	mul.w	r2, r3, r9
 801dc34:	1c53      	adds	r3, r2, #1
 801dc36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dc3a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801dc3e:	700b      	strb	r3, [r1, #0]
 801dc40:	784b      	ldrb	r3, [r1, #1]
 801dc42:	fb03 f309 	mul.w	r3, r3, r9
 801dc46:	1c5a      	adds	r2, r3, #1
 801dc48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801dc4c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801dc50:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801dc54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801dc58:	704b      	strb	r3, [r1, #1]
 801dc5a:	788b      	ldrb	r3, [r1, #2]
 801dc5c:	fb03 f909 	mul.w	r9, r3, r9
 801dc60:	f109 0301 	add.w	r3, r9, #1
 801dc64:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801dc68:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801dc6c:	f881 e002 	strb.w	lr, [r1, #2]
 801dc70:	b007      	add	sp, #28
 801dc72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc76:	2600      	movs	r6, #0
 801dc78:	e700      	b.n	801da7c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801dc7a:	2000      	movs	r0, #0
 801dc7c:	4606      	mov	r6, r0
 801dc7e:	e708      	b.n	801da92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801dc80:	2000      	movs	r0, #0
 801dc82:	e706      	b.n	801da92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801dc84:	4620      	mov	r0, r4
 801dc86:	e704      	b.n	801da92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801dc88:	2500      	movs	r5, #0
 801dc8a:	e714      	b.n	801dab6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801dc8c:	2200      	movs	r2, #0
 801dc8e:	4615      	mov	r5, r2
 801dc90:	e71d      	b.n	801dace <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801dc92:	4672      	mov	r2, lr
 801dc94:	4675      	mov	r5, lr
 801dc96:	e71a      	b.n	801dace <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801dc98:	2200      	movs	r2, #0
 801dc9a:	e718      	b.n	801dace <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801dc9c:	4622      	mov	r2, r4
 801dc9e:	e716      	b.n	801dace <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801dca0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca4:	b099      	sub	sp, #100	@ 0x64
 801dca6:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801dcaa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801dcac:	9017      	str	r0, [sp, #92]	@ 0x5c
 801dcae:	9306      	str	r3, [sp, #24]
 801dcb0:	6850      	ldr	r0, [r2, #4]
 801dcb2:	6812      	ldr	r2, [r2, #0]
 801dcb4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801dcb8:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801dcbc:	fb00 1303 	mla	r3, r0, r3, r1
 801dcc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dcc4:	18d3      	adds	r3, r2, r3
 801dcc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dcc8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dcca:	681b      	ldr	r3, [r3, #0]
 801dccc:	930e      	str	r3, [sp, #56]	@ 0x38
 801dcce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dcd0:	2b00      	cmp	r3, #0
 801dcd2:	dc03      	bgt.n	801dcdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dcd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	f340 8360 	ble.w	801e39c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801dcdc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dcde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dce2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dce6:	1e48      	subs	r0, r1, #1
 801dce8:	1e57      	subs	r7, r2, #1
 801dcea:	9b06      	ldr	r3, [sp, #24]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	f340 817b 	ble.w	801dfe8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801dcf2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801dcf6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dcfa:	d406      	bmi.n	801dd0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dcfc:	4584      	cmp	ip, r0
 801dcfe:	da04      	bge.n	801dd0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd00:	2b00      	cmp	r3, #0
 801dd02:	db02      	blt.n	801dd0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dd04:	42bb      	cmp	r3, r7
 801dd06:	f2c0 8170 	blt.w	801dfea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dd0a:	f11c 0c01 	adds.w	ip, ip, #1
 801dd0e:	f100 8160 	bmi.w	801dfd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dd12:	4561      	cmp	r1, ip
 801dd14:	f2c0 815d 	blt.w	801dfd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dd18:	3301      	adds	r3, #1
 801dd1a:	f100 815a 	bmi.w	801dfd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dd1e:	429a      	cmp	r2, r3
 801dd20:	f2c0 8157 	blt.w	801dfd2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dd24:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801dd28:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801dd2a:	f1b8 0f00 	cmp.w	r8, #0
 801dd2e:	f340 8179 	ble.w	801e024 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801dd32:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801dd34:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801dd38:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dd3a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dd3e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dd42:	142a      	asrs	r2, r5, #16
 801dd44:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801dd48:	689b      	ldr	r3, [r3, #8]
 801dd4a:	f100 81be 	bmi.w	801e0ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dd4e:	f103 39ff 	add.w	r9, r3, #4294967295
 801dd52:	454a      	cmp	r2, r9
 801dd54:	f280 81b9 	bge.w	801e0ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dd58:	f1bc 0f00 	cmp.w	ip, #0
 801dd5c:	f2c0 81b5 	blt.w	801e0ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dd60:	f10e 39ff 	add.w	r9, lr, #4294967295
 801dd64:	45cc      	cmp	ip, r9
 801dd66:	f280 81b0 	bge.w	801e0ca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dd6a:	b21b      	sxth	r3, r3
 801dd6c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dd6e:	fb0c 2203 	mla	r2, ip, r3, r2
 801dd72:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801dd76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dd7a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801dd7e:	2900      	cmp	r1, #0
 801dd80:	f000 8197 	beq.w	801e0b2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801dd84:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dd88:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd8a:	0e24      	lsrs	r4, r4, #24
 801dd8c:	9411      	str	r4, [sp, #68]	@ 0x44
 801dd8e:	b180      	cbz	r0, 801ddb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dd90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801dd94:	3b01      	subs	r3, #1
 801dd96:	009b      	lsls	r3, r3, #2
 801dd98:	3304      	adds	r3, #4
 801dd9a:	eb09 0c03 	add.w	ip, r9, r3
 801dd9e:	f859 3003 	ldr.w	r3, [r9, r3]
 801dda2:	9307      	str	r3, [sp, #28]
 801dda4:	0e1b      	lsrs	r3, r3, #24
 801dda6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dda8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ddac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ddae:	0e1b      	lsrs	r3, r3, #24
 801ddb0:	9312      	str	r3, [sp, #72]	@ 0x48
 801ddb2:	b289      	uxth	r1, r1
 801ddb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ddb6:	b280      	uxth	r0, r0
 801ddb8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ddba:	fb01 fa00 	mul.w	sl, r1, r0
 801ddbe:	0109      	lsls	r1, r1, #4
 801ddc0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ddc4:	eba1 090a 	sub.w	r9, r1, sl
 801ddc8:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ddcc:	b280      	uxth	r0, r0
 801ddce:	fa1f f989 	uxth.w	r9, r9
 801ddd2:	1a09      	subs	r1, r1, r0
 801ddd4:	fb09 f303 	mul.w	r3, r9, r3
 801ddd8:	b289      	uxth	r1, r1
 801ddda:	fb01 330e 	mla	r3, r1, lr, r3
 801ddde:	fb00 3304 	mla	r3, r0, r4, r3
 801dde2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dde4:	fb0a 3304 	mla	r3, sl, r4, r3
 801dde8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ddec:	2b00      	cmp	r3, #0
 801ddee:	f000 80e8 	beq.w	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ddf2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ddf6:	d01b      	beq.n	801de30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ddf8:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801ddfc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801de00:	fb0e fb0b 	mul.w	fp, lr, fp
 801de04:	fb0e fe02 	mul.w	lr, lr, r2
 801de08:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801de0c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801de10:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801de14:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801de18:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801de1c:	445a      	add	r2, fp
 801de1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de22:	0a12      	lsrs	r2, r2, #8
 801de24:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801de28:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801de2c:	ea42 020c 	orr.w	r2, r2, ip
 801de30:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de32:	2cff      	cmp	r4, #255	@ 0xff
 801de34:	d021      	beq.n	801de7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801de36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801de38:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801de3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de3e:	fb04 fc0c 	mul.w	ip, r4, ip
 801de42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801de44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801de48:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801de4c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801de4e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801de52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801de56:	fb04 fb0b 	mul.w	fp, r4, fp
 801de5a:	44e6      	add	lr, ip
 801de5c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801de60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801de64:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801de68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801de6c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801de70:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801de74:	ea4e 040b 	orr.w	r4, lr, fp
 801de78:	940a      	str	r4, [sp, #40]	@ 0x28
 801de7a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801de7c:	2cff      	cmp	r4, #255	@ 0xff
 801de7e:	d021      	beq.n	801dec4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801de80:	9c07      	ldr	r4, [sp, #28]
 801de82:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801de86:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801de88:	fb04 fc0c 	mul.w	ip, r4, ip
 801de8c:	9c07      	ldr	r4, [sp, #28]
 801de8e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801de92:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801de96:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801de98:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801de9c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dea0:	fb04 fb0b 	mul.w	fp, r4, fp
 801dea4:	44e6      	add	lr, ip
 801dea6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801deaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801deae:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801deb2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801deb6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801deba:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801debe:	ea4e 040b 	orr.w	r4, lr, fp
 801dec2:	9407      	str	r4, [sp, #28]
 801dec4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dec6:	2cff      	cmp	r4, #255	@ 0xff
 801dec8:	d021      	beq.n	801df0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801deca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801decc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ded0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ded2:	fb04 fc0c 	mul.w	ip, r4, ip
 801ded6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ded8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dedc:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dee0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dee2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dee6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801deea:	fb04 fb0b 	mul.w	fp, r4, fp
 801deee:	44e6      	add	lr, ip
 801def0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801def4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801def8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801defc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801df00:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801df04:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801df08:	ea4e 040b 	orr.w	r4, lr, fp
 801df0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801df0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801df10:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801df14:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801df18:	2bff      	cmp	r3, #255	@ 0xff
 801df1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801df1e:	9c07      	ldr	r4, [sp, #28]
 801df20:	fb09 fc0c 	mul.w	ip, r9, ip
 801df24:	fb01 cc0e 	mla	ip, r1, lr, ip
 801df28:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801df2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801df2e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801df32:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801df36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801df38:	fb0a cc0e 	mla	ip, sl, lr, ip
 801df3c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801df40:	fb09 f90e 	mul.w	r9, r9, lr
 801df44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801df48:	fb01 9202 	mla	r2, r1, r2, r9
 801df4c:	9907      	ldr	r1, [sp, #28]
 801df4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801df52:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801df56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801df58:	fb00 220b 	mla	r2, r0, fp, r2
 801df5c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801df60:	fb0a 2a00 	mla	sl, sl, r0, r2
 801df64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801df68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801df6c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801df70:	fa5f f08c 	uxtb.w	r0, ip
 801df74:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801df78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801df7c:	f000 80a2 	beq.w	801e0c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801df80:	43db      	mvns	r3, r3
 801df82:	783a      	ldrb	r2, [r7, #0]
 801df84:	f897 a002 	ldrb.w	sl, [r7, #2]
 801df88:	b2db      	uxtb	r3, r3
 801df8a:	fb02 fe03 	mul.w	lr, r2, r3
 801df8e:	fb0a fa03 	mul.w	sl, sl, r3
 801df92:	f10e 0201 	add.w	r2, lr, #1
 801df96:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801df9a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801df9e:	703a      	strb	r2, [r7, #0]
 801dfa0:	787a      	ldrb	r2, [r7, #1]
 801dfa2:	fb02 f003 	mul.w	r0, r2, r3
 801dfa6:	f10a 0301 	add.w	r3, sl, #1
 801dfaa:	1c42      	adds	r2, r0, #1
 801dfac:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801dfb0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801dfb4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801dfb8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801dfbc:	707a      	strb	r2, [r7, #1]
 801dfbe:	f887 c002 	strb.w	ip, [r7, #2]
 801dfc2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dfc4:	3703      	adds	r7, #3
 801dfc6:	f108 38ff 	add.w	r8, r8, #4294967295
 801dfca:	441d      	add	r5, r3
 801dfcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dfce:	441e      	add	r6, r3
 801dfd0:	e6ab      	b.n	801dd2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801dfd2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dfd4:	441d      	add	r5, r3
 801dfd6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dfd8:	441e      	add	r6, r3
 801dfda:	9b06      	ldr	r3, [sp, #24]
 801dfdc:	3b01      	subs	r3, #1
 801dfde:	9306      	str	r3, [sp, #24]
 801dfe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dfe2:	3303      	adds	r3, #3
 801dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfe6:	e680      	b.n	801dcea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dfe8:	d024      	beq.n	801e034 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801dfea:	9b06      	ldr	r3, [sp, #24]
 801dfec:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801dfee:	3b01      	subs	r3, #1
 801dff0:	fb00 5003 	mla	r0, r0, r3, r5
 801dff4:	1400      	asrs	r0, r0, #16
 801dff6:	f53f ae95 	bmi.w	801dd24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801dffa:	3901      	subs	r1, #1
 801dffc:	4288      	cmp	r0, r1
 801dffe:	f6bf ae91 	bge.w	801dd24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e002:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801e004:	fb01 6303 	mla	r3, r1, r3, r6
 801e008:	141b      	asrs	r3, r3, #16
 801e00a:	f53f ae8b 	bmi.w	801dd24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e00e:	3a01      	subs	r2, #1
 801e010:	4293      	cmp	r3, r2
 801e012:	f6bf ae87 	bge.w	801dd24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e016:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e018:	f8dd b018 	ldr.w	fp, [sp, #24]
 801e01c:	1cdf      	adds	r7, r3, #3
 801e01e:	f1bb 0f00 	cmp.w	fp, #0
 801e022:	dc6e      	bgt.n	801e102 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801e024:	9b06      	ldr	r3, [sp, #24]
 801e026:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e02a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e02c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e030:	4423      	add	r3, r4
 801e032:	9309      	str	r3, [sp, #36]	@ 0x24
 801e034:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e036:	2b00      	cmp	r3, #0
 801e038:	f340 81b0 	ble.w	801e39c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801e03c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e040:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e042:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e046:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e04a:	eef0 6a62 	vmov.f32	s13, s5
 801e04e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e052:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e056:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e05a:	ee16 5a90 	vmov	r5, s13
 801e05e:	eef0 6a43 	vmov.f32	s13, s6
 801e062:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e066:	ee16 6a90 	vmov	r6, s13
 801e06a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e06e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e072:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e076:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e07a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e07e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e082:	ee12 2a90 	vmov	r2, s5
 801e086:	eef0 2a47 	vmov.f32	s5, s14
 801e08a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e08e:	ee13 2a10 	vmov	r2, s6
 801e092:	9325      	str	r3, [sp, #148]	@ 0x94
 801e094:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e096:	eeb0 3a67 	vmov.f32	s6, s15
 801e09a:	fb92 f3f3 	sdiv	r3, r2, r3
 801e09e:	9326      	str	r3, [sp, #152]	@ 0x98
 801e0a0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801e0a2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801e0a4:	3b01      	subs	r3, #1
 801e0a6:	9315      	str	r3, [sp, #84]	@ 0x54
 801e0a8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801e0aa:	bf08      	it	eq
 801e0ac:	4613      	moveq	r3, r2
 801e0ae:	9306      	str	r3, [sp, #24]
 801e0b0:	e60d      	b.n	801dcce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e0b2:	2800      	cmp	r0, #0
 801e0b4:	f43f ae7d 	beq.w	801ddb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801e0b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801e0bc:	9307      	str	r3, [sp, #28]
 801e0be:	0e1b      	lsrs	r3, r3, #24
 801e0c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e0c2:	e676      	b.n	801ddb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801e0c4:	7038      	strb	r0, [r7, #0]
 801e0c6:	7079      	strb	r1, [r7, #1]
 801e0c8:	e779      	b.n	801dfbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801e0ca:	f112 0901 	adds.w	r9, r2, #1
 801e0ce:	f53f af78 	bmi.w	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e0d2:	454b      	cmp	r3, r9
 801e0d4:	f6ff af75 	blt.w	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e0d8:	f11c 0901 	adds.w	r9, ip, #1
 801e0dc:	f53f af71 	bmi.w	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e0e0:	45ce      	cmp	lr, r9
 801e0e2:	f6ff af6e 	blt.w	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e0e6:	b21b      	sxth	r3, r3
 801e0e8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801e0ec:	fa0f f28e 	sxth.w	r2, lr
 801e0f0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801e0f4:	9200      	str	r2, [sp, #0]
 801e0f6:	4639      	mov	r1, r7
 801e0f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e0fa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801e0fc:	f7ff fca1 	bl	801da42 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801e100:	e75f      	b.n	801dfc2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e102:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e104:	1429      	asrs	r1, r5, #16
 801e106:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e108:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e10c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801e110:	1433      	asrs	r3, r6, #16
 801e112:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e116:	fb0c 1303 	mla	r3, ip, r3, r1
 801e11a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e11c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e120:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e124:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e128:	2a00      	cmp	r2, #0
 801e12a:	f000 8129 	beq.w	801e380 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801e12e:	684c      	ldr	r4, [r1, #4]
 801e130:	940c      	str	r4, [sp, #48]	@ 0x30
 801e132:	0e24      	lsrs	r4, r4, #24
 801e134:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e136:	b198      	cbz	r0, 801e160 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e138:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801e13c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e140:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801e144:	f10c 0c04 	add.w	ip, ip, #4
 801e148:	eb01 080c 	add.w	r8, r1, ip
 801e14c:	f851 100c 	ldr.w	r1, [r1, ip]
 801e150:	9108      	str	r1, [sp, #32]
 801e152:	0e09      	lsrs	r1, r1, #24
 801e154:	9110      	str	r1, [sp, #64]	@ 0x40
 801e156:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e15a:	910d      	str	r1, [sp, #52]	@ 0x34
 801e15c:	0e09      	lsrs	r1, r1, #24
 801e15e:	9114      	str	r1, [sp, #80]	@ 0x50
 801e160:	b292      	uxth	r2, r2
 801e162:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e164:	b280      	uxth	r0, r0
 801e166:	fb02 f900 	mul.w	r9, r2, r0
 801e16a:	0112      	lsls	r2, r2, #4
 801e16c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e170:	eba2 0809 	sub.w	r8, r2, r9
 801e174:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e178:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e17a:	b280      	uxth	r0, r0
 801e17c:	fa1f f888 	uxth.w	r8, r8
 801e180:	1a09      	subs	r1, r1, r0
 801e182:	fb08 f202 	mul.w	r2, r8, r2
 801e186:	b289      	uxth	r1, r1
 801e188:	fb01 220e 	mla	r2, r1, lr, r2
 801e18c:	fb00 2204 	mla	r2, r0, r4, r2
 801e190:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e192:	fb09 2204 	mla	r2, r9, r4, r2
 801e196:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e19a:	2a00      	cmp	r2, #0
 801e19c:	f000 80e8 	beq.w	801e370 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801e1a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e1a4:	d01b      	beq.n	801e1de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801e1a6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e1aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e1ae:	fb0e fa0a 	mul.w	sl, lr, sl
 801e1b2:	fb0e fe03 	mul.w	lr, lr, r3
 801e1b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e1ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e1be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e1c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e1c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e1ca:	4453      	add	r3, sl
 801e1cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1d0:	0a1b      	lsrs	r3, r3, #8
 801e1d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e1d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e1da:	ea43 030c 	orr.w	r3, r3, ip
 801e1de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e1e0:	2cff      	cmp	r4, #255	@ 0xff
 801e1e2:	d021      	beq.n	801e228 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801e1e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e1e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e1ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e1ec:	fb04 fc0c 	mul.w	ip, r4, ip
 801e1f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e1f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e1f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e1fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e1fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e200:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e204:	fb04 fa0a 	mul.w	sl, r4, sl
 801e208:	44e6      	add	lr, ip
 801e20a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e20e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e212:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e216:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e21a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e21e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e222:	ea4e 040a 	orr.w	r4, lr, sl
 801e226:	940c      	str	r4, [sp, #48]	@ 0x30
 801e228:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e22a:	2cff      	cmp	r4, #255	@ 0xff
 801e22c:	d021      	beq.n	801e272 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801e22e:	9c08      	ldr	r4, [sp, #32]
 801e230:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e234:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e236:	fb04 fc0c 	mul.w	ip, r4, ip
 801e23a:	9c08      	ldr	r4, [sp, #32]
 801e23c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e240:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e242:	fb04 fa0e 	mul.w	sl, r4, lr
 801e246:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e24a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e24e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e252:	44e6      	add	lr, ip
 801e254:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e258:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e25c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e260:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e264:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e268:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e26c:	ea4e 040a 	orr.w	r4, lr, sl
 801e270:	9408      	str	r4, [sp, #32]
 801e272:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e274:	2cff      	cmp	r4, #255	@ 0xff
 801e276:	d021      	beq.n	801e2bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801e278:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e27a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e27e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e280:	fb04 fc0c 	mul.w	ip, r4, ip
 801e284:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e286:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e28a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e28e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e290:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e294:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e298:	fb04 fa0a 	mul.w	sl, r4, sl
 801e29c:	44e6      	add	lr, ip
 801e29e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e2a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e2a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e2aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e2ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e2b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e2b6:	ea4e 040a 	orr.w	r4, lr, sl
 801e2ba:	940d      	str	r4, [sp, #52]	@ 0x34
 801e2bc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e2be:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e2c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e2c6:	2aff      	cmp	r2, #255	@ 0xff
 801e2c8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e2cc:	9c08      	ldr	r4, [sp, #32]
 801e2ce:	fb08 fc0c 	mul.w	ip, r8, ip
 801e2d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e2d6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e2da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e2dc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e2e0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e2e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e2e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e2ea:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e2ee:	fb08 f80e 	mul.w	r8, r8, lr
 801e2f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2f6:	fb01 8303 	mla	r3, r1, r3, r8
 801e2fa:	9908      	ldr	r1, [sp, #32]
 801e2fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e300:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801e304:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e306:	fb00 330a 	mla	r3, r0, sl, r3
 801e30a:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801e30e:	fb09 3e0e 	mla	lr, r9, lr, r3
 801e312:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e316:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e31a:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e31e:	fa5f f08c 	uxtb.w	r0, ip
 801e322:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801e326:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e32a:	d032      	beq.n	801e392 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801e32c:	43d2      	mvns	r2, r2
 801e32e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801e332:	b2d2      	uxtb	r2, r2
 801e334:	fb0e fe02 	mul.w	lr, lr, r2
 801e338:	f10e 0301 	add.w	r3, lr, #1
 801e33c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801e340:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e344:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801e348:	4350      	muls	r0, r2
 801e34a:	f807 3c03 	strb.w	r3, [r7, #-3]
 801e34e:	1c43      	adds	r3, r0, #1
 801e350:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e354:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e358:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801e35c:	4353      	muls	r3, r2
 801e35e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e362:	1c5a      	adds	r2, r3, #1
 801e364:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e368:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801e36c:	f807 cc01 	strb.w	ip, [r7, #-1]
 801e370:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e372:	3703      	adds	r7, #3
 801e374:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e378:	441d      	add	r5, r3
 801e37a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e37c:	441e      	add	r6, r3
 801e37e:	e64e      	b.n	801e01e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801e380:	2800      	cmp	r0, #0
 801e382:	f43f aeed 	beq.w	801e160 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e386:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801e38a:	9108      	str	r1, [sp, #32]
 801e38c:	0e09      	lsrs	r1, r1, #24
 801e38e:	9110      	str	r1, [sp, #64]	@ 0x40
 801e390:	e6e6      	b.n	801e160 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e392:	f807 0c03 	strb.w	r0, [r7, #-3]
 801e396:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e39a:	e7e7      	b.n	801e36c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801e39c:	b019      	add	sp, #100	@ 0x64
 801e39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e3a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3a8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801e3ac:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e3b0:	2c00      	cmp	r4, #0
 801e3b2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e3b6:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801e3ba:	fb00 4e03 	mla	lr, r0, r3, r4
 801e3be:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e3c2:	f2c0 80b8 	blt.w	801e536 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e3c6:	45a1      	cmp	r9, r4
 801e3c8:	f340 80b5 	ble.w	801e536 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e3cc:	2800      	cmp	r0, #0
 801e3ce:	f2c0 80b2 	blt.w	801e536 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e3d2:	4580      	cmp	r8, r0
 801e3d4:	f340 80af 	ble.w	801e536 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e3d8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801e3dc:	f01e 0f01 	tst.w	lr, #1
 801e3e0:	5d56      	ldrb	r6, [r2, r5]
 801e3e2:	bf0c      	ite	eq
 801e3e4:	f006 060f 	andeq.w	r6, r6, #15
 801e3e8:	1136      	asrne	r6, r6, #4
 801e3ea:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e3ee:	b2f6      	uxtb	r6, r6
 801e3f0:	f114 0a01 	adds.w	sl, r4, #1
 801e3f4:	f100 80a1 	bmi.w	801e53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e3f8:	45d1      	cmp	r9, sl
 801e3fa:	f340 809e 	ble.w	801e53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e3fe:	2800      	cmp	r0, #0
 801e400:	f2c0 809b 	blt.w	801e53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e404:	4580      	cmp	r8, r0
 801e406:	f340 8098 	ble.w	801e53a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e40a:	2f00      	cmp	r7, #0
 801e40c:	f000 8097 	beq.w	801e53e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801e410:	f10e 0b01 	add.w	fp, lr, #1
 801e414:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e418:	f01b 0f01 	tst.w	fp, #1
 801e41c:	5d55      	ldrb	r5, [r2, r5]
 801e41e:	bf0c      	ite	eq
 801e420:	f005 050f 	andeq.w	r5, r5, #15
 801e424:	112d      	asrne	r5, r5, #4
 801e426:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e42a:	b2ed      	uxtb	r5, r5
 801e42c:	f1bc 0f00 	cmp.w	ip, #0
 801e430:	f000 8089 	beq.w	801e546 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801e434:	2c00      	cmp	r4, #0
 801e436:	f100 0001 	add.w	r0, r0, #1
 801e43a:	f2c0 8082 	blt.w	801e542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e43e:	45a1      	cmp	r9, r4
 801e440:	dd7f      	ble.n	801e542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e442:	2800      	cmp	r0, #0
 801e444:	db7d      	blt.n	801e542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e446:	4580      	cmp	r8, r0
 801e448:	dd7b      	ble.n	801e542 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e44a:	eb03 0b0e 	add.w	fp, r3, lr
 801e44e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801e452:	f01b 0f01 	tst.w	fp, #1
 801e456:	5d14      	ldrb	r4, [r2, r4]
 801e458:	bf0c      	ite	eq
 801e45a:	f004 040f 	andeq.w	r4, r4, #15
 801e45e:	1124      	asrne	r4, r4, #4
 801e460:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e464:	b2e4      	uxtb	r4, r4
 801e466:	f1ba 0f00 	cmp.w	sl, #0
 801e46a:	db6f      	blt.n	801e54c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e46c:	45d1      	cmp	r9, sl
 801e46e:	dd6d      	ble.n	801e54c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e470:	2800      	cmp	r0, #0
 801e472:	db6b      	blt.n	801e54c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e474:	4580      	cmp	r8, r0
 801e476:	dd69      	ble.n	801e54c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e478:	2f00      	cmp	r7, #0
 801e47a:	d069      	beq.n	801e550 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801e47c:	3301      	adds	r3, #1
 801e47e:	449e      	add	lr, r3
 801e480:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e484:	f01e 0f01 	tst.w	lr, #1
 801e488:	5cd0      	ldrb	r0, [r2, r3]
 801e48a:	bf0c      	ite	eq
 801e48c:	f000 000f 	andeq.w	r0, r0, #15
 801e490:	1100      	asrne	r0, r0, #4
 801e492:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e496:	b2c3      	uxtb	r3, r0
 801e498:	b2ba      	uxth	r2, r7
 801e49a:	fa1f fc8c 	uxth.w	ip, ip
 801e49e:	fb02 f00c 	mul.w	r0, r2, ip
 801e4a2:	0112      	lsls	r2, r2, #4
 801e4a4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801e4a8:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801e4ac:	1a12      	subs	r2, r2, r0
 801e4ae:	fa1f fc8c 	uxth.w	ip, ip
 801e4b2:	b292      	uxth	r2, r2
 801e4b4:	eba7 070c 	sub.w	r7, r7, ip
 801e4b8:	436a      	muls	r2, r5
 801e4ba:	b2bf      	uxth	r7, r7
 801e4bc:	fb06 2207 	mla	r2, r6, r7, r2
 801e4c0:	fb0c 2404 	mla	r4, ip, r4, r2
 801e4c4:	fb00 4303 	mla	r3, r0, r3, r4
 801e4c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e4cc:	b38b      	cbz	r3, 801e532 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801e4ce:	4a21      	ldr	r2, [pc, #132]	@ (801e554 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801e4d0:	6814      	ldr	r4, [r2, #0]
 801e4d2:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801e4d6:	b2e5      	uxtb	r5, r4
 801e4d8:	4353      	muls	r3, r2
 801e4da:	1c5a      	adds	r2, r3, #1
 801e4dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e4e0:	1212      	asrs	r2, r2, #8
 801e4e2:	b290      	uxth	r0, r2
 801e4e4:	43d2      	mvns	r2, r2
 801e4e6:	fb15 f500 	smulbb	r5, r5, r0
 801e4ea:	b2d3      	uxtb	r3, r2
 801e4ec:	780a      	ldrb	r2, [r1, #0]
 801e4ee:	fb02 5203 	mla	r2, r2, r3, r5
 801e4f2:	b292      	uxth	r2, r2
 801e4f4:	1c55      	adds	r5, r2, #1
 801e4f6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e4fa:	784d      	ldrb	r5, [r1, #1]
 801e4fc:	fb15 f503 	smulbb	r5, r5, r3
 801e500:	1212      	asrs	r2, r2, #8
 801e502:	700a      	strb	r2, [r1, #0]
 801e504:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801e508:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e50c:	fb02 5200 	mla	r2, r2, r0, r5
 801e510:	b292      	uxth	r2, r2
 801e512:	1c55      	adds	r5, r2, #1
 801e514:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e518:	1212      	asrs	r2, r2, #8
 801e51a:	704a      	strb	r2, [r1, #1]
 801e51c:	788a      	ldrb	r2, [r1, #2]
 801e51e:	fb12 f303 	smulbb	r3, r2, r3
 801e522:	fb04 3300 	mla	r3, r4, r0, r3
 801e526:	b29b      	uxth	r3, r3
 801e528:	1c5a      	adds	r2, r3, #1
 801e52a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e52e:	121b      	asrs	r3, r3, #8
 801e530:	708b      	strb	r3, [r1, #2]
 801e532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e536:	2600      	movs	r6, #0
 801e538:	e75a      	b.n	801e3f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801e53a:	2500      	movs	r5, #0
 801e53c:	e776      	b.n	801e42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e53e:	463d      	mov	r5, r7
 801e540:	e774      	b.n	801e42c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e542:	2400      	movs	r4, #0
 801e544:	e78f      	b.n	801e466 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801e546:	4663      	mov	r3, ip
 801e548:	4664      	mov	r4, ip
 801e54a:	e7a5      	b.n	801e498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e54c:	2300      	movs	r3, #0
 801e54e:	e7a3      	b.n	801e498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e550:	463b      	mov	r3, r7
 801e552:	e7a1      	b.n	801e498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e554:	24025284 	.word	0x24025284

0801e558 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e55c:	b097      	sub	sp, #92	@ 0x5c
 801e55e:	9214      	str	r2, [sp, #80]	@ 0x50
 801e560:	9309      	str	r3, [sp, #36]	@ 0x24
 801e562:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e564:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801e568:	9015      	str	r0, [sp, #84]	@ 0x54
 801e56a:	910c      	str	r1, [sp, #48]	@ 0x30
 801e56c:	6850      	ldr	r0, [r2, #4]
 801e56e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e570:	6812      	ldr	r2, [r2, #0]
 801e572:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801e576:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801e57a:	fb00 1303 	mla	r3, r0, r3, r1
 801e57e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e582:	eb02 0a03 	add.w	sl, r2, r3
 801e586:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e588:	689b      	ldr	r3, [r3, #8]
 801e58a:	3301      	adds	r3, #1
 801e58c:	f023 0301 	bic.w	r3, r3, #1
 801e590:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e592:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e594:	681f      	ldr	r7, [r3, #0]
 801e596:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e598:	2b00      	cmp	r3, #0
 801e59a:	dc03      	bgt.n	801e5a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e59c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e59e:	2b00      	cmp	r3, #0
 801e5a0:	f340 8247 	ble.w	801ea32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e5a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e5a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e5aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e5ae:	1e48      	subs	r0, r1, #1
 801e5b0:	f102 3cff 	add.w	ip, r2, #4294967295
 801e5b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5b6:	2b00      	cmp	r3, #0
 801e5b8:	f340 80e5 	ble.w	801e786 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801e5bc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801e5c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e5c4:	d406      	bmi.n	801e5d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5c6:	4586      	cmp	lr, r0
 801e5c8:	da04      	bge.n	801e5d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5ca:	2b00      	cmp	r3, #0
 801e5cc:	db02      	blt.n	801e5d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e5ce:	4563      	cmp	r3, ip
 801e5d0:	f2c0 80da 	blt.w	801e788 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e5d4:	f11e 0e01 	adds.w	lr, lr, #1
 801e5d8:	f100 80cb 	bmi.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e5dc:	4571      	cmp	r1, lr
 801e5de:	f2c0 80c8 	blt.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e5e2:	3301      	adds	r3, #1
 801e5e4:	f100 80c5 	bmi.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e5e8:	429a      	cmp	r2, r3
 801e5ea:	f2c0 80c2 	blt.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e5f0:	46d0      	mov	r8, sl
 801e5f2:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e5f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e5f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e5fa:	2b00      	cmp	r3, #0
 801e5fc:	f340 80e3 	ble.w	801e7c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801e600:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e602:	1430      	asrs	r0, r6, #16
 801e604:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e608:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e60c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e610:	142b      	asrs	r3, r5, #16
 801e612:	f100 812e 	bmi.w	801e872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e616:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e61a:	455b      	cmp	r3, fp
 801e61c:	f280 8129 	bge.w	801e872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e620:	2800      	cmp	r0, #0
 801e622:	f2c0 8126 	blt.w	801e872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e626:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e62a:	4558      	cmp	r0, fp
 801e62c:	f280 8121 	bge.w	801e872 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e630:	fb00 3309 	mla	r3, r0, r9, r3
 801e634:	0858      	lsrs	r0, r3, #1
 801e636:	07dc      	lsls	r4, r3, #31
 801e638:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e63c:	bf54      	ite	pl
 801e63e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e642:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e646:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e64a:	fa5f fc8c 	uxtb.w	ip, ip
 801e64e:	2a00      	cmp	r2, #0
 801e650:	f000 80fe 	beq.w	801e850 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e654:	1c58      	adds	r0, r3, #1
 801e656:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e65a:	07c0      	lsls	r0, r0, #31
 801e65c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e660:	bf54      	ite	pl
 801e662:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e666:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e66a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e66e:	fa5f f08e 	uxtb.w	r0, lr
 801e672:	9010      	str	r0, [sp, #64]	@ 0x40
 801e674:	b1d9      	cbz	r1, 801e6ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e676:	444b      	add	r3, r9
 801e678:	0858      	lsrs	r0, r3, #1
 801e67a:	07dc      	lsls	r4, r3, #31
 801e67c:	f103 0301 	add.w	r3, r3, #1
 801e680:	5c38      	ldrb	r0, [r7, r0]
 801e682:	bf54      	ite	pl
 801e684:	f000 000f 	andpl.w	r0, r0, #15
 801e688:	1100      	asrmi	r0, r0, #4
 801e68a:	07dc      	lsls	r4, r3, #31
 801e68c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e690:	b2c0      	uxtb	r0, r0
 801e692:	900a      	str	r0, [sp, #40]	@ 0x28
 801e694:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e698:	f817 e000 	ldrb.w	lr, [r7, r0]
 801e69c:	bf54      	ite	pl
 801e69e:	f00e 030f 	andpl.w	r3, lr, #15
 801e6a2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801e6a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e6aa:	b2db      	uxtb	r3, r3
 801e6ac:	9311      	str	r3, [sp, #68]	@ 0x44
 801e6ae:	b292      	uxth	r2, r2
 801e6b0:	b289      	uxth	r1, r1
 801e6b2:	0113      	lsls	r3, r2, #4
 801e6b4:	fb02 f001 	mul.w	r0, r2, r1
 801e6b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e6ba:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801e6be:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801e6c2:	1a1b      	subs	r3, r3, r0
 801e6c4:	b289      	uxth	r1, r1
 801e6c6:	b29b      	uxth	r3, r3
 801e6c8:	ebae 0e01 	sub.w	lr, lr, r1
 801e6cc:	4353      	muls	r3, r2
 801e6ce:	fa1f fe8e 	uxth.w	lr, lr
 801e6d2:	fb0c 320e 	mla	r2, ip, lr, r3
 801e6d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e6d8:	fb01 2203 	mla	r2, r1, r3, r2
 801e6dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e6de:	fb00 2203 	mla	r2, r0, r3, r2
 801e6e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e6e6:	2a00      	cmp	r2, #0
 801e6e8:	d039      	beq.n	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e6ea:	4bc7      	ldr	r3, [pc, #796]	@ (801ea08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e6ec:	6819      	ldr	r1, [r3, #0]
 801e6ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e6f0:	fa5f fc81 	uxtb.w	ip, r1
 801e6f4:	435a      	muls	r2, r3
 801e6f6:	1c53      	adds	r3, r2, #1
 801e6f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e6fc:	1212      	asrs	r2, r2, #8
 801e6fe:	b290      	uxth	r0, r2
 801e700:	43d2      	mvns	r2, r2
 801e702:	fb1c fc00 	smulbb	ip, ip, r0
 801e706:	b2d3      	uxtb	r3, r2
 801e708:	f898 2000 	ldrb.w	r2, [r8]
 801e70c:	fb02 c203 	mla	r2, r2, r3, ip
 801e710:	b292      	uxth	r2, r2
 801e712:	f102 0c01 	add.w	ip, r2, #1
 801e716:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e71a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e71e:	fb1c fc03 	smulbb	ip, ip, r3
 801e722:	1212      	asrs	r2, r2, #8
 801e724:	f888 2000 	strb.w	r2, [r8]
 801e728:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801e72c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801e730:	fb02 c200 	mla	r2, r2, r0, ip
 801e734:	b292      	uxth	r2, r2
 801e736:	f102 0c01 	add.w	ip, r2, #1
 801e73a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e73e:	1212      	asrs	r2, r2, #8
 801e740:	f888 2001 	strb.w	r2, [r8, #1]
 801e744:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e748:	fb12 f303 	smulbb	r3, r2, r3
 801e74c:	fb01 3300 	mla	r3, r1, r0, r3
 801e750:	b29b      	uxth	r3, r3
 801e752:	1c5a      	adds	r2, r3, #1
 801e754:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e758:	121b      	asrs	r3, r3, #8
 801e75a:	f888 3002 	strb.w	r3, [r8, #2]
 801e75e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e760:	f108 0803 	add.w	r8, r8, #3
 801e764:	441d      	add	r5, r3
 801e766:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e768:	441e      	add	r6, r3
 801e76a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e76c:	3b01      	subs	r3, #1
 801e76e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e770:	e742      	b.n	801e5f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e772:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e774:	f10a 0a03 	add.w	sl, sl, #3
 801e778:	441d      	add	r5, r3
 801e77a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e77c:	441e      	add	r6, r3
 801e77e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e780:	3b01      	subs	r3, #1
 801e782:	9309      	str	r3, [sp, #36]	@ 0x24
 801e784:	e716      	b.n	801e5b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e786:	d024      	beq.n	801e7d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e78a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e78c:	3b01      	subs	r3, #1
 801e78e:	fb00 5003 	mla	r0, r0, r3, r5
 801e792:	1400      	asrs	r0, r0, #16
 801e794:	f53f af2b 	bmi.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e798:	3901      	subs	r1, #1
 801e79a:	4288      	cmp	r0, r1
 801e79c:	f6bf af27 	bge.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7a0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e7a2:	fb01 6303 	mla	r3, r1, r3, r6
 801e7a6:	141b      	asrs	r3, r3, #16
 801e7a8:	f53f af21 	bmi.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7ac:	3a01      	subs	r2, #1
 801e7ae:	4293      	cmp	r3, r2
 801e7b0:	f6bf af1d 	bge.w	801e5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e7b4:	f10a 0e03 	add.w	lr, sl, #3
 801e7b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801e7bc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e7c0:	f1b8 0f00 	cmp.w	r8, #0
 801e7c4:	dc76      	bgt.n	801e8b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801e7c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e7c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e7cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e7d0:	44a2      	add	sl, r4
 801e7d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e7d4:	2b00      	cmp	r3, #0
 801e7d6:	f340 812c 	ble.w	801ea32 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e7da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e7de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e7e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e7e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e7e8:	eef0 6a62 	vmov.f32	s13, s5
 801e7ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e7f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e7f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e7f8:	ee16 5a90 	vmov	r5, s13
 801e7fc:	eef0 6a43 	vmov.f32	s13, s6
 801e800:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e804:	ee16 6a90 	vmov	r6, s13
 801e808:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e80c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e810:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e814:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e818:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e81c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e820:	ee12 2a90 	vmov	r2, s5
 801e824:	eef0 2a47 	vmov.f32	s5, s14
 801e828:	fb92 f3f3 	sdiv	r3, r2, r3
 801e82c:	ee13 2a10 	vmov	r2, s6
 801e830:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e832:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e834:	eeb0 3a67 	vmov.f32	s6, s15
 801e838:	fb92 f3f3 	sdiv	r3, r2, r3
 801e83c:	9324      	str	r3, [sp, #144]	@ 0x90
 801e83e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e840:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e842:	3b01      	subs	r3, #1
 801e844:	930c      	str	r3, [sp, #48]	@ 0x30
 801e846:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e848:	bf08      	it	eq
 801e84a:	4613      	moveq	r3, r2
 801e84c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e84e:	e6a2      	b.n	801e596 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e850:	2900      	cmp	r1, #0
 801e852:	f43f af2c 	beq.w	801e6ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e856:	eb09 0003 	add.w	r0, r9, r3
 801e85a:	0843      	lsrs	r3, r0, #1
 801e85c:	07c0      	lsls	r0, r0, #31
 801e85e:	5cfb      	ldrb	r3, [r7, r3]
 801e860:	bf54      	ite	pl
 801e862:	f003 030f 	andpl.w	r3, r3, #15
 801e866:	111b      	asrmi	r3, r3, #4
 801e868:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e86c:	b2db      	uxtb	r3, r3
 801e86e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e870:	e71d      	b.n	801e6ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e872:	f113 0b01 	adds.w	fp, r3, #1
 801e876:	f53f af72 	bmi.w	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e87a:	45dc      	cmp	ip, fp
 801e87c:	f6ff af6f 	blt.w	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e880:	f110 0b01 	adds.w	fp, r0, #1
 801e884:	f53f af6b 	bmi.w	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e888:	45de      	cmp	lr, fp
 801e88a:	f6ff af68 	blt.w	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e88e:	9302      	str	r3, [sp, #8]
 801e890:	fa0f f38e 	sxth.w	r3, lr
 801e894:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e896:	9301      	str	r3, [sp, #4]
 801e898:	fa0f f38c 	sxth.w	r3, ip
 801e89c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e8a0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e8a4:	9300      	str	r3, [sp, #0]
 801e8a6:	463a      	mov	r2, r7
 801e8a8:	464b      	mov	r3, r9
 801e8aa:	4641      	mov	r1, r8
 801e8ac:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e8ae:	f7ff fd79 	bl	801e3a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801e8b2:	e754      	b.n	801e75e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e8b4:	142a      	asrs	r2, r5, #16
 801e8b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e8ba:	1433      	asrs	r3, r6, #16
 801e8bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e8c0:	fb09 2303 	mla	r3, r9, r3, r2
 801e8c4:	085a      	lsrs	r2, r3, #1
 801e8c6:	07dc      	lsls	r4, r3, #31
 801e8c8:	5cba      	ldrb	r2, [r7, r2]
 801e8ca:	bf54      	ite	pl
 801e8cc:	f002 020f 	andpl.w	r2, r2, #15
 801e8d0:	1112      	asrmi	r2, r2, #4
 801e8d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e8d6:	b2d2      	uxtb	r2, r2
 801e8d8:	2900      	cmp	r1, #0
 801e8da:	f000 8097 	beq.w	801ea0c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e8de:	f103 0b01 	add.w	fp, r3, #1
 801e8e2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801e8e6:	f01b 0f01 	tst.w	fp, #1
 801e8ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e8ee:	bf0c      	ite	eq
 801e8f0:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e8f4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e8f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e8fc:	fa5f f48c 	uxtb.w	r4, ip
 801e900:	9412      	str	r4, [sp, #72]	@ 0x48
 801e902:	b300      	cbz	r0, 801e946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e904:	444b      	add	r3, r9
 801e906:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e90a:	07dc      	lsls	r4, r3, #31
 801e90c:	f103 0301 	add.w	r3, r3, #1
 801e910:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e914:	bf54      	ite	pl
 801e916:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e91a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e91e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e922:	fa5f f48c 	uxtb.w	r4, ip
 801e926:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e92a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e92c:	07dc      	lsls	r4, r3, #31
 801e92e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e932:	bf54      	ite	pl
 801e934:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e938:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e93c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e940:	fa5f f38c 	uxtb.w	r3, ip
 801e944:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e946:	b289      	uxth	r1, r1
 801e948:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e94a:	b280      	uxth	r0, r0
 801e94c:	fb01 f300 	mul.w	r3, r1, r0
 801e950:	0109      	lsls	r1, r1, #4
 801e952:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e956:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801e95a:	1ac9      	subs	r1, r1, r3
 801e95c:	b280      	uxth	r0, r0
 801e95e:	b289      	uxth	r1, r1
 801e960:	ebac 0c00 	sub.w	ip, ip, r0
 801e964:	4361      	muls	r1, r4
 801e966:	fa1f fc8c 	uxth.w	ip, ip
 801e96a:	fb02 120c 	mla	r2, r2, ip, r1
 801e96e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e970:	fb00 2001 	mla	r0, r0, r1, r2
 801e974:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e976:	fb03 0302 	mla	r3, r3, r2, r0
 801e97a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e97e:	2b00      	cmp	r3, #0
 801e980:	d039      	beq.n	801e9f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e982:	4a21      	ldr	r2, [pc, #132]	@ (801ea08 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e984:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e988:	6810      	ldr	r0, [r2, #0]
 801e98a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e98c:	fa5f fc80 	uxtb.w	ip, r0
 801e990:	4353      	muls	r3, r2
 801e992:	1c5a      	adds	r2, r3, #1
 801e994:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e998:	121b      	asrs	r3, r3, #8
 801e99a:	b29a      	uxth	r2, r3
 801e99c:	43db      	mvns	r3, r3
 801e99e:	fb1c fc02 	smulbb	ip, ip, r2
 801e9a2:	b2db      	uxtb	r3, r3
 801e9a4:	fb01 c103 	mla	r1, r1, r3, ip
 801e9a8:	b289      	uxth	r1, r1
 801e9aa:	f101 0c01 	add.w	ip, r1, #1
 801e9ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e9b2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e9b6:	fb1c fc03 	smulbb	ip, ip, r3
 801e9ba:	1209      	asrs	r1, r1, #8
 801e9bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e9c0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e9c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e9c8:	fb01 c102 	mla	r1, r1, r2, ip
 801e9cc:	b289      	uxth	r1, r1
 801e9ce:	f101 0c01 	add.w	ip, r1, #1
 801e9d2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e9d6:	1209      	asrs	r1, r1, #8
 801e9d8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e9dc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e9e0:	fb11 f303 	smulbb	r3, r1, r3
 801e9e4:	fb00 3002 	mla	r0, r0, r2, r3
 801e9e8:	b280      	uxth	r0, r0
 801e9ea:	1c42      	adds	r2, r0, #1
 801e9ec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e9f0:	1200      	asrs	r0, r0, #8
 801e9f2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e9f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e9f8:	f10e 0e03 	add.w	lr, lr, #3
 801e9fc:	f108 38ff 	add.w	r8, r8, #4294967295
 801ea00:	441d      	add	r5, r3
 801ea02:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ea04:	441e      	add	r6, r3
 801ea06:	e6db      	b.n	801e7c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801ea08:	24025284 	.word	0x24025284
 801ea0c:	2800      	cmp	r0, #0
 801ea0e:	d09a      	beq.n	801e946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ea10:	444b      	add	r3, r9
 801ea12:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801ea16:	07db      	lsls	r3, r3, #31
 801ea18:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801ea1c:	bf54      	ite	pl
 801ea1e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ea22:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ea26:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ea2a:	fa5f f38c 	uxtb.w	r3, ip
 801ea2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea30:	e789      	b.n	801e946 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801ea32:	b017      	add	sp, #92	@ 0x5c
 801ea34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801ea38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea3c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801ea40:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801ea44:	2d00      	cmp	r5, #0
 801ea46:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801ea4a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801ea4e:	fb04 5e03 	mla	lr, r4, r3, r5
 801ea52:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801ea56:	f2c0 80b1 	blt.w	801ebbc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ea5a:	45a9      	cmp	r9, r5
 801ea5c:	f340 80ae 	ble.w	801ebbc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ea60:	2c00      	cmp	r4, #0
 801ea62:	f2c0 80ab 	blt.w	801ebbc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ea66:	45a0      	cmp	r8, r4
 801ea68:	f340 80a8 	ble.w	801ebbc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801ea6c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801ea70:	f01e 0f01 	tst.w	lr, #1
 801ea74:	5d97      	ldrb	r7, [r2, r6]
 801ea76:	bf0c      	ite	eq
 801ea78:	f007 070f 	andeq.w	r7, r7, #15
 801ea7c:	113f      	asrne	r7, r7, #4
 801ea7e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801ea82:	b2ff      	uxtb	r7, r7
 801ea84:	f115 0a01 	adds.w	sl, r5, #1
 801ea88:	f100 809a 	bmi.w	801ebc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ea8c:	45d1      	cmp	r9, sl
 801ea8e:	f340 8097 	ble.w	801ebc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ea92:	2c00      	cmp	r4, #0
 801ea94:	f2c0 8094 	blt.w	801ebc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ea98:	45a0      	cmp	r8, r4
 801ea9a:	f340 8091 	ble.w	801ebc0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801ea9e:	2800      	cmp	r0, #0
 801eaa0:	f000 8090 	beq.w	801ebc4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801eaa4:	f10e 0b01 	add.w	fp, lr, #1
 801eaa8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801eaac:	f01b 0f01 	tst.w	fp, #1
 801eab0:	5d96      	ldrb	r6, [r2, r6]
 801eab2:	bf0c      	ite	eq
 801eab4:	f006 060f 	andeq.w	r6, r6, #15
 801eab8:	1136      	asrne	r6, r6, #4
 801eaba:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801eabe:	b2f6      	uxtb	r6, r6
 801eac0:	f1bc 0f00 	cmp.w	ip, #0
 801eac4:	f000 8082 	beq.w	801ebcc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801eac8:	2d00      	cmp	r5, #0
 801eaca:	f104 0401 	add.w	r4, r4, #1
 801eace:	db7b      	blt.n	801ebc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ead0:	45a9      	cmp	r9, r5
 801ead2:	dd79      	ble.n	801ebc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ead4:	2c00      	cmp	r4, #0
 801ead6:	db77      	blt.n	801ebc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801ead8:	45a0      	cmp	r8, r4
 801eada:	dd75      	ble.n	801ebc8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801eadc:	eb03 0b0e 	add.w	fp, r3, lr
 801eae0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801eae4:	f01b 0f01 	tst.w	fp, #1
 801eae8:	5d55      	ldrb	r5, [r2, r5]
 801eaea:	bf0c      	ite	eq
 801eaec:	f005 050f 	andeq.w	r5, r5, #15
 801eaf0:	112d      	asrne	r5, r5, #4
 801eaf2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801eaf6:	b2ed      	uxtb	r5, r5
 801eaf8:	f1ba 0f00 	cmp.w	sl, #0
 801eafc:	db69      	blt.n	801ebd2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801eafe:	45d1      	cmp	r9, sl
 801eb00:	dd67      	ble.n	801ebd2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801eb02:	2c00      	cmp	r4, #0
 801eb04:	db65      	blt.n	801ebd2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801eb06:	45a0      	cmp	r8, r4
 801eb08:	dd63      	ble.n	801ebd2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801eb0a:	2800      	cmp	r0, #0
 801eb0c:	d063      	beq.n	801ebd6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801eb0e:	3301      	adds	r3, #1
 801eb10:	449e      	add	lr, r3
 801eb12:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801eb16:	f01e 0f01 	tst.w	lr, #1
 801eb1a:	5cd4      	ldrb	r4, [r2, r3]
 801eb1c:	bf0c      	ite	eq
 801eb1e:	f004 040f 	andeq.w	r4, r4, #15
 801eb22:	1124      	asrne	r4, r4, #4
 801eb24:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801eb28:	b2e3      	uxtb	r3, r4
 801eb2a:	b282      	uxth	r2, r0
 801eb2c:	fa1f fc8c 	uxth.w	ip, ip
 801eb30:	fb02 f40c 	mul.w	r4, r2, ip
 801eb34:	0112      	lsls	r2, r2, #4
 801eb36:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801eb3a:	fa1f f08c 	uxth.w	r0, ip
 801eb3e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801eb42:	1b12      	subs	r2, r2, r4
 801eb44:	ebac 0c00 	sub.w	ip, ip, r0
 801eb48:	b292      	uxth	r2, r2
 801eb4a:	fa1f fc8c 	uxth.w	ip, ip
 801eb4e:	4372      	muls	r2, r6
 801eb50:	fb07 220c 	mla	r2, r7, ip, r2
 801eb54:	fb00 2005 	mla	r0, r0, r5, r2
 801eb58:	fb04 0303 	mla	r3, r4, r3, r0
 801eb5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eb60:	b353      	cbz	r3, 801ebb8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801eb62:	4a1e      	ldr	r2, [pc, #120]	@ (801ebdc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801eb64:	7808      	ldrb	r0, [r1, #0]
 801eb66:	6814      	ldr	r4, [r2, #0]
 801eb68:	b29a      	uxth	r2, r3
 801eb6a:	43db      	mvns	r3, r3
 801eb6c:	b2e5      	uxtb	r5, r4
 801eb6e:	b2db      	uxtb	r3, r3
 801eb70:	fb15 f502 	smulbb	r5, r5, r2
 801eb74:	fb00 5003 	mla	r0, r0, r3, r5
 801eb78:	b280      	uxth	r0, r0
 801eb7a:	1c45      	adds	r5, r0, #1
 801eb7c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801eb80:	784d      	ldrb	r5, [r1, #1]
 801eb82:	fb15 f503 	smulbb	r5, r5, r3
 801eb86:	1200      	asrs	r0, r0, #8
 801eb88:	7008      	strb	r0, [r1, #0]
 801eb8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801eb8e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801eb92:	fb00 5002 	mla	r0, r0, r2, r5
 801eb96:	b280      	uxth	r0, r0
 801eb98:	1c45      	adds	r5, r0, #1
 801eb9a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801eb9e:	1200      	asrs	r0, r0, #8
 801eba0:	7048      	strb	r0, [r1, #1]
 801eba2:	7888      	ldrb	r0, [r1, #2]
 801eba4:	fb10 f303 	smulbb	r3, r0, r3
 801eba8:	fb04 3202 	mla	r2, r4, r2, r3
 801ebac:	b292      	uxth	r2, r2
 801ebae:	1c53      	adds	r3, r2, #1
 801ebb0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801ebb4:	1212      	asrs	r2, r2, #8
 801ebb6:	708a      	strb	r2, [r1, #2]
 801ebb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ebbc:	2700      	movs	r7, #0
 801ebbe:	e761      	b.n	801ea84 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801ebc0:	2600      	movs	r6, #0
 801ebc2:	e77d      	b.n	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801ebc4:	4606      	mov	r6, r0
 801ebc6:	e77b      	b.n	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801ebc8:	2500      	movs	r5, #0
 801ebca:	e795      	b.n	801eaf8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801ebcc:	4663      	mov	r3, ip
 801ebce:	4665      	mov	r5, ip
 801ebd0:	e7ab      	b.n	801eb2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ebd2:	2300      	movs	r3, #0
 801ebd4:	e7a9      	b.n	801eb2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	e7a7      	b.n	801eb2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ebda:	bf00      	nop
 801ebdc:	24025284 	.word	0x24025284

0801ebe0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ebe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebe4:	b093      	sub	sp, #76	@ 0x4c
 801ebe6:	461c      	mov	r4, r3
 801ebe8:	920c      	str	r2, [sp, #48]	@ 0x30
 801ebea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ebec:	9011      	str	r0, [sp, #68]	@ 0x44
 801ebee:	9107      	str	r1, [sp, #28]
 801ebf0:	6850      	ldr	r0, [r2, #4]
 801ebf2:	6812      	ldr	r2, [r2, #0]
 801ebf4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801ebf8:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801ebfc:	fb00 1303 	mla	r3, r0, r3, r1
 801ec00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ec04:	eb02 0b03 	add.w	fp, r2, r3
 801ec08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec0a:	689b      	ldr	r3, [r3, #8]
 801ec0c:	3301      	adds	r3, #1
 801ec0e:	f023 0301 	bic.w	r3, r3, #1
 801ec12:	9309      	str	r3, [sp, #36]	@ 0x24
 801ec14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec16:	f8d3 8000 	ldr.w	r8, [r3]
 801ec1a:	9b07      	ldr	r3, [sp, #28]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	dc03      	bgt.n	801ec28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ec20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	f340 822b 	ble.w	801f07e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ec28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ec2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ec32:	1e48      	subs	r0, r1, #1
 801ec34:	1e57      	subs	r7, r2, #1
 801ec36:	2c00      	cmp	r4, #0
 801ec38:	f340 80d7 	ble.w	801edea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801ec3c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801ec40:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ec44:	d406      	bmi.n	801ec54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec46:	4584      	cmp	ip, r0
 801ec48:	da04      	bge.n	801ec54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec4a:	2b00      	cmp	r3, #0
 801ec4c:	db02      	blt.n	801ec54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801ec4e:	42bb      	cmp	r3, r7
 801ec50:	f2c0 80cc 	blt.w	801edec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801ec54:	f11c 0c01 	adds.w	ip, ip, #1
 801ec58:	f100 80bf 	bmi.w	801edda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec5c:	4561      	cmp	r1, ip
 801ec5e:	f2c0 80bc 	blt.w	801edda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec62:	3301      	adds	r3, #1
 801ec64:	f100 80b9 	bmi.w	801edda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec68:	429a      	cmp	r2, r3
 801ec6a:	f2c0 80b6 	blt.w	801edda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801ec6e:	46a2      	mov	sl, r4
 801ec70:	465f      	mov	r7, fp
 801ec72:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801ec76:	f1ba 0f00 	cmp.w	sl, #0
 801ec7a:	f340 80d4 	ble.w	801ee26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801ec7e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801ec82:	1430      	asrs	r0, r6, #16
 801ec84:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801ec88:	9308      	str	r3, [sp, #32]
 801ec8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ec8c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801ec90:	142b      	asrs	r3, r5, #16
 801ec92:	f100 8124 	bmi.w	801eede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ec96:	f10c 32ff 	add.w	r2, ip, #4294967295
 801ec9a:	4293      	cmp	r3, r2
 801ec9c:	f280 811f 	bge.w	801eede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eca0:	2800      	cmp	r0, #0
 801eca2:	f2c0 811c 	blt.w	801eede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eca6:	f10e 32ff 	add.w	r2, lr, #4294967295
 801ecaa:	4290      	cmp	r0, r2
 801ecac:	f280 8117 	bge.w	801eede <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ecb0:	fb00 3309 	mla	r3, r0, r9, r3
 801ecb4:	0858      	lsrs	r0, r3, #1
 801ecb6:	07da      	lsls	r2, r3, #31
 801ecb8:	9a08      	ldr	r2, [sp, #32]
 801ecba:	f818 c000 	ldrb.w	ip, [r8, r0]
 801ecbe:	bf54      	ite	pl
 801ecc0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ecc4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ecc8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801eccc:	fa5f fc8c 	uxtb.w	ip, ip
 801ecd0:	2a00      	cmp	r2, #0
 801ecd2:	f000 80ed 	beq.w	801eeb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801ecd6:	1c58      	adds	r0, r3, #1
 801ecd8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801ecdc:	07c0      	lsls	r0, r0, #31
 801ecde:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ece2:	bf54      	ite	pl
 801ece4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ece8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ecec:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ecf0:	fa5f fe8e 	uxtb.w	lr, lr
 801ecf4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801ecf8:	b1c9      	cbz	r1, 801ed2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ecfa:	444b      	add	r3, r9
 801ecfc:	0858      	lsrs	r0, r3, #1
 801ecfe:	07da      	lsls	r2, r3, #31
 801ed00:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ed04:	bf54      	ite	pl
 801ed06:	f000 000f 	andpl.w	r0, r0, #15
 801ed0a:	1100      	asrmi	r0, r0, #4
 801ed0c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ed10:	b2c0      	uxtb	r0, r0
 801ed12:	900a      	str	r0, [sp, #40]	@ 0x28
 801ed14:	1c58      	adds	r0, r3, #1
 801ed16:	0843      	lsrs	r3, r0, #1
 801ed18:	07c2      	lsls	r2, r0, #31
 801ed1a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ed1e:	bf54      	ite	pl
 801ed20:	f003 030f 	andpl.w	r3, r3, #15
 801ed24:	111b      	asrmi	r3, r3, #4
 801ed26:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ed2a:	b2db      	uxtb	r3, r3
 801ed2c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ed32:	b289      	uxth	r1, r1
 801ed34:	fb02 f301 	mul.w	r3, r2, r1
 801ed38:	0112      	lsls	r2, r2, #4
 801ed3a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ed3e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801ed42:	1ad2      	subs	r2, r2, r3
 801ed44:	b289      	uxth	r1, r1
 801ed46:	b292      	uxth	r2, r2
 801ed48:	1a40      	subs	r0, r0, r1
 801ed4a:	fa1f fe80 	uxth.w	lr, r0
 801ed4e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ed50:	4342      	muls	r2, r0
 801ed52:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ed56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ed58:	fb01 c102 	mla	r1, r1, r2, ip
 801ed5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed5e:	fb03 1302 	mla	r3, r3, r2, r1
 801ed62:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed66:	b383      	cbz	r3, 801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ed68:	4ac6      	ldr	r2, [pc, #792]	@ (801f084 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ed6a:	2bff      	cmp	r3, #255	@ 0xff
 801ed6c:	6812      	ldr	r2, [r2, #0]
 801ed6e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ed72:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ed76:	b2d2      	uxtb	r2, r2
 801ed78:	f000 80ac 	beq.w	801eed4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ed7c:	b299      	uxth	r1, r3
 801ed7e:	43db      	mvns	r3, r3
 801ed80:	f897 c000 	ldrb.w	ip, [r7]
 801ed84:	fb12 f201 	smulbb	r2, r2, r1
 801ed88:	b2db      	uxtb	r3, r3
 801ed8a:	fb10 f001 	smulbb	r0, r0, r1
 801ed8e:	fb0c 2203 	mla	r2, ip, r3, r2
 801ed92:	fb1e f101 	smulbb	r1, lr, r1
 801ed96:	b292      	uxth	r2, r2
 801ed98:	f102 0c01 	add.w	ip, r2, #1
 801ed9c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801eda0:	1212      	asrs	r2, r2, #8
 801eda2:	703a      	strb	r2, [r7, #0]
 801eda4:	787a      	ldrb	r2, [r7, #1]
 801eda6:	fb02 0003 	mla	r0, r2, r3, r0
 801edaa:	b280      	uxth	r0, r0
 801edac:	1c42      	adds	r2, r0, #1
 801edae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801edb2:	78ba      	ldrb	r2, [r7, #2]
 801edb4:	fb02 1303 	mla	r3, r2, r3, r1
 801edb8:	1200      	asrs	r0, r0, #8
 801edba:	b29b      	uxth	r3, r3
 801edbc:	7078      	strb	r0, [r7, #1]
 801edbe:	f103 0e01 	add.w	lr, r3, #1
 801edc2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801edc6:	121b      	asrs	r3, r3, #8
 801edc8:	70bb      	strb	r3, [r7, #2]
 801edca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801edcc:	3703      	adds	r7, #3
 801edce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edd2:	441d      	add	r5, r3
 801edd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801edd6:	441e      	add	r6, r3
 801edd8:	e74d      	b.n	801ec76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801edda:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801eddc:	3c01      	subs	r4, #1
 801edde:	f10b 0b03 	add.w	fp, fp, #3
 801ede2:	441d      	add	r5, r3
 801ede4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ede6:	441e      	add	r6, r3
 801ede8:	e725      	b.n	801ec36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801edea:	d021      	beq.n	801ee30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801edec:	1e63      	subs	r3, r4, #1
 801edee:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801edf0:	fb00 5003 	mla	r0, r0, r3, r5
 801edf4:	1400      	asrs	r0, r0, #16
 801edf6:	f53f af3a 	bmi.w	801ec6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801edfa:	3901      	subs	r1, #1
 801edfc:	4288      	cmp	r0, r1
 801edfe:	f6bf af36 	bge.w	801ec6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ee02:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801ee04:	fb01 6303 	mla	r3, r1, r3, r6
 801ee08:	141b      	asrs	r3, r3, #16
 801ee0a:	f53f af30 	bmi.w	801ec6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ee0e:	3a01      	subs	r2, #1
 801ee10:	4293      	cmp	r3, r2
 801ee12:	f6bf af2c 	bge.w	801ec6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ee16:	f10b 0c03 	add.w	ip, fp, #3
 801ee1a:	46a6      	mov	lr, r4
 801ee1c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801ee20:	f1be 0f00 	cmp.w	lr, #0
 801ee24:	dc79      	bgt.n	801ef1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801ee26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801ee2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ee2e:	44a3      	add	fp, r4
 801ee30:	9b07      	ldr	r3, [sp, #28]
 801ee32:	2b00      	cmp	r3, #0
 801ee34:	f340 8123 	ble.w	801f07e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ee38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee3c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ee3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee46:	eef0 6a62 	vmov.f32	s13, s5
 801ee4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ee4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee56:	ee16 5a90 	vmov	r5, s13
 801ee5a:	eef0 6a43 	vmov.f32	s13, s6
 801ee5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee62:	ee16 6a90 	vmov	r6, s13
 801ee66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ee76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ee7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ee7e:	ee12 2a90 	vmov	r2, s5
 801ee82:	eef0 2a47 	vmov.f32	s5, s14
 801ee86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee8a:	ee13 2a10 	vmov	r2, s6
 801ee8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ee90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ee92:	eeb0 3a67 	vmov.f32	s6, s15
 801ee96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ee9a:	9320      	str	r3, [sp, #128]	@ 0x80
 801ee9c:	9b07      	ldr	r3, [sp, #28]
 801ee9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eea0:	3b01      	subs	r3, #1
 801eea2:	9307      	str	r3, [sp, #28]
 801eea4:	bf08      	it	eq
 801eea6:	4614      	moveq	r4, r2
 801eea8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801eeaa:	bf18      	it	ne
 801eeac:	461c      	movne	r4, r3
 801eeae:	e6b4      	b.n	801ec1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801eeb0:	2900      	cmp	r1, #0
 801eeb2:	f43f af3c 	beq.w	801ed2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801eeb6:	eb09 0003 	add.w	r0, r9, r3
 801eeba:	0843      	lsrs	r3, r0, #1
 801eebc:	07c0      	lsls	r0, r0, #31
 801eebe:	f818 3003 	ldrb.w	r3, [r8, r3]
 801eec2:	bf54      	ite	pl
 801eec4:	f003 030f 	andpl.w	r3, r3, #15
 801eec8:	111b      	asrmi	r3, r3, #4
 801eeca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801eece:	b2db      	uxtb	r3, r3
 801eed0:	930a      	str	r3, [sp, #40]	@ 0x28
 801eed2:	e72c      	b.n	801ed2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801eed4:	703a      	strb	r2, [r7, #0]
 801eed6:	7078      	strb	r0, [r7, #1]
 801eed8:	f887 e002 	strb.w	lr, [r7, #2]
 801eedc:	e775      	b.n	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eede:	1c5a      	adds	r2, r3, #1
 801eee0:	f53f af73 	bmi.w	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eee4:	4594      	cmp	ip, r2
 801eee6:	f6ff af70 	blt.w	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eeea:	1c42      	adds	r2, r0, #1
 801eeec:	f53f af6d 	bmi.w	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eef0:	4596      	cmp	lr, r2
 801eef2:	f6ff af6a 	blt.w	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801eef6:	9302      	str	r3, [sp, #8]
 801eef8:	fa0f f38e 	sxth.w	r3, lr
 801eefc:	9a08      	ldr	r2, [sp, #32]
 801eefe:	9301      	str	r3, [sp, #4]
 801ef00:	fa0f f38c 	sxth.w	r3, ip
 801ef04:	9105      	str	r1, [sp, #20]
 801ef06:	4639      	mov	r1, r7
 801ef08:	9300      	str	r3, [sp, #0]
 801ef0a:	464b      	mov	r3, r9
 801ef0c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ef10:	4642      	mov	r2, r8
 801ef12:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ef14:	f7ff fd90 	bl	801ea38 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801ef18:	e757      	b.n	801edca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ef1a:	142a      	asrs	r2, r5, #16
 801ef1c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ef20:	1433      	asrs	r3, r6, #16
 801ef22:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801ef26:	fb09 2303 	mla	r3, r9, r3, r2
 801ef2a:	085a      	lsrs	r2, r3, #1
 801ef2c:	07d9      	lsls	r1, r3, #31
 801ef2e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801ef32:	bf54      	ite	pl
 801ef34:	f002 020f 	andpl.w	r2, r2, #15
 801ef38:	1112      	asrmi	r2, r2, #4
 801ef3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ef3e:	b2d2      	uxtb	r2, r2
 801ef40:	2800      	cmp	r0, #0
 801ef42:	f000 8085 	beq.w	801f050 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801ef46:	f103 0a01 	add.w	sl, r3, #1
 801ef4a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801ef4e:	f01a 0f01 	tst.w	sl, #1
 801ef52:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ef56:	bf0c      	ite	eq
 801ef58:	f001 010f 	andeq.w	r1, r1, #15
 801ef5c:	1109      	asrne	r1, r1, #4
 801ef5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ef62:	b2c9      	uxtb	r1, r1
 801ef64:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ef66:	b1df      	cbz	r7, 801efa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ef68:	444b      	add	r3, r9
 801ef6a:	0859      	lsrs	r1, r3, #1
 801ef6c:	f013 0f01 	tst.w	r3, #1
 801ef70:	f103 0301 	add.w	r3, r3, #1
 801ef74:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ef78:	bf0c      	ite	eq
 801ef7a:	f001 010f 	andeq.w	r1, r1, #15
 801ef7e:	1109      	asrne	r1, r1, #4
 801ef80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ef84:	b2c9      	uxtb	r1, r1
 801ef86:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ef88:	0859      	lsrs	r1, r3, #1
 801ef8a:	07db      	lsls	r3, r3, #31
 801ef8c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ef90:	bf54      	ite	pl
 801ef92:	f001 010f 	andpl.w	r1, r1, #15
 801ef96:	1109      	asrmi	r1, r1, #4
 801ef98:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ef9c:	b2c9      	uxtb	r1, r1
 801ef9e:	9110      	str	r1, [sp, #64]	@ 0x40
 801efa0:	b280      	uxth	r0, r0
 801efa2:	b2bf      	uxth	r7, r7
 801efa4:	fb00 f307 	mul.w	r3, r0, r7
 801efa8:	0100      	lsls	r0, r0, #4
 801efaa:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801efae:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801efb2:	1ac0      	subs	r0, r0, r3
 801efb4:	b2bf      	uxth	r7, r7
 801efb6:	b280      	uxth	r0, r0
 801efb8:	1bc9      	subs	r1, r1, r7
 801efba:	fa1f fa81 	uxth.w	sl, r1
 801efbe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801efc0:	4348      	muls	r0, r1
 801efc2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801efc4:	fb02 020a 	mla	r2, r2, sl, r0
 801efc8:	fb07 2701 	mla	r7, r7, r1, r2
 801efcc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801efce:	fb03 7302 	mla	r3, r3, r2, r7
 801efd2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801efd6:	b393      	cbz	r3, 801f03e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801efd8:	4a2a      	ldr	r2, [pc, #168]	@ (801f084 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801efda:	2bff      	cmp	r3, #255	@ 0xff
 801efdc:	6811      	ldr	r1, [r2, #0]
 801efde:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801efe2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801efe6:	b2c9      	uxtb	r1, r1
 801efe8:	d042      	beq.n	801f070 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801efea:	b298      	uxth	r0, r3
 801efec:	43db      	mvns	r3, r3
 801efee:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801eff2:	fb11 f100 	smulbb	r1, r1, r0
 801eff6:	b2db      	uxtb	r3, r3
 801eff8:	fb17 f700 	smulbb	r7, r7, r0
 801effc:	fb02 1103 	mla	r1, r2, r3, r1
 801f000:	fb1a f000 	smulbb	r0, sl, r0
 801f004:	b289      	uxth	r1, r1
 801f006:	1c4a      	adds	r2, r1, #1
 801f008:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f00c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801f010:	fb02 7703 	mla	r7, r2, r3, r7
 801f014:	1209      	asrs	r1, r1, #8
 801f016:	b2bf      	uxth	r7, r7
 801f018:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801f01c:	1c7a      	adds	r2, r7, #1
 801f01e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801f022:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801f026:	fb02 0303 	mla	r3, r2, r3, r0
 801f02a:	123f      	asrs	r7, r7, #8
 801f02c:	b29b      	uxth	r3, r3
 801f02e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801f032:	1c5a      	adds	r2, r3, #1
 801f034:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f038:	121b      	asrs	r3, r3, #8
 801f03a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801f03e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801f040:	f10c 0c03 	add.w	ip, ip, #3
 801f044:	f10e 3eff 	add.w	lr, lr, #4294967295
 801f048:	441d      	add	r5, r3
 801f04a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f04c:	441e      	add	r6, r3
 801f04e:	e6e7      	b.n	801ee20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f050:	2f00      	cmp	r7, #0
 801f052:	d0a5      	beq.n	801efa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801f054:	444b      	add	r3, r9
 801f056:	0859      	lsrs	r1, r3, #1
 801f058:	07db      	lsls	r3, r3, #31
 801f05a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801f05e:	bf54      	ite	pl
 801f060:	f001 010f 	andpl.w	r1, r1, #15
 801f064:	1109      	asrmi	r1, r1, #4
 801f066:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801f06a:	b2c9      	uxtb	r1, r1
 801f06c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f06e:	e797      	b.n	801efa0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801f070:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801f074:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801f078:	f80c ac01 	strb.w	sl, [ip, #-1]
 801f07c:	e7df      	b.n	801f03e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801f07e:	b013      	add	sp, #76	@ 0x4c
 801f080:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f084:	24025284 	.word	0x24025284

0801f088 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801f088:	b530      	push	{r4, r5, lr}
 801f08a:	b29d      	uxth	r5, r3
 801f08c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801f090:	780c      	ldrb	r4, [r1, #0]
 801f092:	b298      	uxth	r0, r3
 801f094:	7813      	ldrb	r3, [r2, #0]
 801f096:	fb14 f405 	smulbb	r4, r4, r5
 801f09a:	fb13 f300 	smulbb	r3, r3, r0
 801f09e:	441c      	add	r4, r3
 801f0a0:	b2a4      	uxth	r4, r4
 801f0a2:	1c63      	adds	r3, r4, #1
 801f0a4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f0a8:	7853      	ldrb	r3, [r2, #1]
 801f0aa:	fb13 f300 	smulbb	r3, r3, r0
 801f0ae:	1224      	asrs	r4, r4, #8
 801f0b0:	7014      	strb	r4, [r2, #0]
 801f0b2:	784c      	ldrb	r4, [r1, #1]
 801f0b4:	fb14 f405 	smulbb	r4, r4, r5
 801f0b8:	441c      	add	r4, r3
 801f0ba:	b2a4      	uxth	r4, r4
 801f0bc:	1c63      	adds	r3, r4, #1
 801f0be:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801f0c2:	1224      	asrs	r4, r4, #8
 801f0c4:	7054      	strb	r4, [r2, #1]
 801f0c6:	788b      	ldrb	r3, [r1, #2]
 801f0c8:	7891      	ldrb	r1, [r2, #2]
 801f0ca:	fb13 f305 	smulbb	r3, r3, r5
 801f0ce:	fb11 f000 	smulbb	r0, r1, r0
 801f0d2:	4403      	add	r3, r0
 801f0d4:	b29b      	uxth	r3, r3
 801f0d6:	1c59      	adds	r1, r3, #1
 801f0d8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f0dc:	121b      	asrs	r3, r3, #8
 801f0de:	7093      	strb	r3, [r2, #2]
 801f0e0:	bd30      	pop	{r4, r5, pc}
	...

0801f0e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801f0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f0e8:	461c      	mov	r4, r3
 801f0ea:	b08b      	sub	sp, #44	@ 0x2c
 801f0ec:	460e      	mov	r6, r1
 801f0ee:	4615      	mov	r5, r2
 801f0f0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f0f2:	4682      	mov	sl, r0
 801f0f4:	6861      	ldr	r1, [r4, #4]
 801f0f6:	aa06      	add	r2, sp, #24
 801f0f8:	6820      	ldr	r0, [r4, #0]
 801f0fa:	2702      	movs	r7, #2
 801f0fc:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801f100:	3504      	adds	r5, #4
 801f102:	c203      	stmia	r2!, {r0, r1}
 801f104:	6818      	ldr	r0, [r3, #0]
 801f106:	aa08      	add	r2, sp, #32
 801f108:	6859      	ldr	r1, [r3, #4]
 801f10a:	c203      	stmia	r2!, {r0, r1}
 801f10c:	a806      	add	r0, sp, #24
 801f10e:	f7f2 ff15 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f112:	4621      	mov	r1, r4
 801f114:	a808      	add	r0, sp, #32
 801f116:	f7f2 ff55 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f11a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f11e:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801f122:	f002 0301 	and.w	r3, r2, #1
 801f126:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f12a:	9302      	str	r3, [sp, #8]
 801f12c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f130:	f003 0101 	and.w	r1, r3, #1
 801f134:	9101      	str	r1, [sp, #4]
 801f136:	9801      	ldr	r0, [sp, #4]
 801f138:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801f13c:	4403      	add	r3, r0
 801f13e:	fb01 2303 	mla	r3, r1, r3, r2
 801f142:	fb93 f3f7 	sdiv	r3, r3, r7
 801f146:	441e      	add	r6, r3
 801f148:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f14c:	441a      	add	r2, r3
 801f14e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801f152:	4419      	add	r1, r3
 801f154:	4b70      	ldr	r3, [pc, #448]	@ (801f318 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801f156:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f15a:	6818      	ldr	r0, [r3, #0]
 801f15c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801f160:	6803      	ldr	r3, [r0, #0]
 801f162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f164:	4798      	blx	r3
 801f166:	4a6d      	ldr	r2, [pc, #436]	@ (801f31c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801f168:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f16c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f170:	8813      	ldrh	r3, [r2, #0]
 801f172:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801f176:	fb03 1404 	mla	r4, r3, r4, r1
 801f17a:	4611      	mov	r1, r2
 801f17c:	fb0b f303 	mul.w	r3, fp, r3
 801f180:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f184:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f188:	4404      	add	r4, r0
 801f18a:	4423      	add	r3, r4
 801f18c:	d073      	beq.n	801f276 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801f18e:	9705      	str	r7, [sp, #20]
 801f190:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801f194:	9b03      	ldr	r3, [sp, #12]
 801f196:	429c      	cmp	r4, r3
 801f198:	f080 80b5 	bcs.w	801f306 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f19c:	9b02      	ldr	r3, [sp, #8]
 801f19e:	b35b      	cbz	r3, 801f1f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801f1a0:	7831      	ldrb	r1, [r6, #0]
 801f1a2:	4622      	mov	r2, r4
 801f1a4:	1c77      	adds	r7, r6, #1
 801f1a6:	3403      	adds	r4, #3
 801f1a8:	f001 010f 	and.w	r1, r1, #15
 801f1ac:	f108 3bff 	add.w	fp, r8, #4294967295
 801f1b0:	464b      	mov	r3, r9
 801f1b2:	4650      	mov	r0, sl
 801f1b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f1b8:	4429      	add	r1, r5
 801f1ba:	f7ff ff65 	bl	801f088 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f1be:	f1bb 0f01 	cmp.w	fp, #1
 801f1c2:	dd1c      	ble.n	801f1fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801f1c4:	7839      	ldrb	r1, [r7, #0]
 801f1c6:	4622      	mov	r2, r4
 801f1c8:	464b      	mov	r3, r9
 801f1ca:	4650      	mov	r0, sl
 801f1cc:	0909      	lsrs	r1, r1, #4
 801f1ce:	f1ab 0b02 	sub.w	fp, fp, #2
 801f1d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f1d6:	4429      	add	r1, r5
 801f1d8:	f7ff ff56 	bl	801f088 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f1dc:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f1e0:	1ce2      	adds	r2, r4, #3
 801f1e2:	464b      	mov	r3, r9
 801f1e4:	f001 010f 	and.w	r1, r1, #15
 801f1e8:	4650      	mov	r0, sl
 801f1ea:	3406      	adds	r4, #6
 801f1ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f1f0:	4429      	add	r1, r5
 801f1f2:	f7ff ff49 	bl	801f088 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f1f6:	e7e2      	b.n	801f1be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f1f8:	4637      	mov	r7, r6
 801f1fa:	46c3      	mov	fp, r8
 801f1fc:	e7df      	b.n	801f1be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f1fe:	d10a      	bne.n	801f216 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801f200:	7839      	ldrb	r1, [r7, #0]
 801f202:	4622      	mov	r2, r4
 801f204:	3403      	adds	r4, #3
 801f206:	464b      	mov	r3, r9
 801f208:	0909      	lsrs	r1, r1, #4
 801f20a:	4650      	mov	r0, sl
 801f20c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f210:	4429      	add	r1, r5
 801f212:	f7ff ff39 	bl	801f088 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f216:	9b04      	ldr	r3, [sp, #16]
 801f218:	9a01      	ldr	r2, [sp, #4]
 801f21a:	881b      	ldrh	r3, [r3, #0]
 801f21c:	eba3 0308 	sub.w	r3, r3, r8
 801f220:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f224:	441c      	add	r4, r3
 801f226:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f22a:	4413      	add	r3, r2
 801f22c:	9a05      	ldr	r2, [sp, #20]
 801f22e:	fb93 f3f2 	sdiv	r3, r3, r2
 801f232:	441e      	add	r6, r3
 801f234:	e7ae      	b.n	801f194 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801f236:	4632      	mov	r2, r6
 801f238:	46c4      	mov	ip, r8
 801f23a:	e037      	b.n	801f2ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f23c:	d10e      	bne.n	801f25c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801f23e:	7812      	ldrb	r2, [r2, #0]
 801f240:	3003      	adds	r0, #3
 801f242:	0912      	lsrs	r2, r2, #4
 801f244:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f248:	18ac      	adds	r4, r5, r2
 801f24a:	5caa      	ldrb	r2, [r5, r2]
 801f24c:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f250:	7862      	ldrb	r2, [r4, #1]
 801f252:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f256:	78a2      	ldrb	r2, [r4, #2]
 801f258:	f800 2c01 	strb.w	r2, [r0, #-1]
 801f25c:	880c      	ldrh	r4, [r1, #0]
 801f25e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f262:	eba4 0408 	sub.w	r4, r4, r8
 801f266:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f26a:	4404      	add	r4, r0
 801f26c:	9801      	ldr	r0, [sp, #4]
 801f26e:	4402      	add	r2, r0
 801f270:	fb92 f2f7 	sdiv	r2, r2, r7
 801f274:	4416      	add	r6, r2
 801f276:	429c      	cmp	r4, r3
 801f278:	d245      	bcs.n	801f306 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f27a:	9a02      	ldr	r2, [sp, #8]
 801f27c:	2a00      	cmp	r2, #0
 801f27e:	d0da      	beq.n	801f236 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801f280:	7830      	ldrb	r0, [r6, #0]
 801f282:	1c72      	adds	r2, r6, #1
 801f284:	3403      	adds	r4, #3
 801f286:	f000 000f 	and.w	r0, r0, #15
 801f28a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f28e:	eb05 0c00 	add.w	ip, r5, r0
 801f292:	5c28      	ldrb	r0, [r5, r0]
 801f294:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f298:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f29c:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f2a0:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801f2a4:	f108 3cff 	add.w	ip, r8, #4294967295
 801f2a8:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f2ac:	f1bc 0f01 	cmp.w	ip, #1
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	f104 0406 	add.w	r4, r4, #6
 801f2b6:	ddc1      	ble.n	801f23c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801f2b8:	7810      	ldrb	r0, [r2, #0]
 801f2ba:	f1ac 0c02 	sub.w	ip, ip, #2
 801f2be:	0900      	lsrs	r0, r0, #4
 801f2c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f2c4:	eb05 0e00 	add.w	lr, r5, r0
 801f2c8:	5c28      	ldrb	r0, [r5, r0]
 801f2ca:	f804 0c06 	strb.w	r0, [r4, #-6]
 801f2ce:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f2d2:	f804 0c05 	strb.w	r0, [r4, #-5]
 801f2d6:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f2da:	f804 0c04 	strb.w	r0, [r4, #-4]
 801f2de:	f812 0b01 	ldrb.w	r0, [r2], #1
 801f2e2:	f000 000f 	and.w	r0, r0, #15
 801f2e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f2ea:	eb05 0e00 	add.w	lr, r5, r0
 801f2ee:	5c28      	ldrb	r0, [r5, r0]
 801f2f0:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f2f4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f2f8:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f2fc:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f300:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f304:	e7d2      	b.n	801f2ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f306:	4b04      	ldr	r3, [pc, #16]	@ (801f318 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801f308:	6818      	ldr	r0, [r3, #0]
 801f30a:	6803      	ldr	r3, [r0, #0]
 801f30c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f30e:	4798      	blx	r3
 801f310:	b00b      	add	sp, #44	@ 0x2c
 801f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f316:	bf00      	nop
 801f318:	24025274 	.word	0x24025274
 801f31c:	2402526e 	.word	0x2402526e

0801f320 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801f320:	b530      	push	{r4, r5, lr}
 801f322:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801f326:	780d      	ldrb	r5, [r1, #0]
 801f328:	28ff      	cmp	r0, #255	@ 0xff
 801f32a:	d107      	bne.n	801f33c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f32c:	2bff      	cmp	r3, #255	@ 0xff
 801f32e:	d105      	bne.n	801f33c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f330:	7015      	strb	r5, [r2, #0]
 801f332:	784b      	ldrb	r3, [r1, #1]
 801f334:	7053      	strb	r3, [r2, #1]
 801f336:	788b      	ldrb	r3, [r1, #2]
 801f338:	7093      	strb	r3, [r2, #2]
 801f33a:	bd30      	pop	{r4, r5, pc}
 801f33c:	fb10 f003 	smulbb	r0, r0, r3
 801f340:	b283      	uxth	r3, r0
 801f342:	1c58      	adds	r0, r3, #1
 801f344:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f348:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f34c:	b284      	uxth	r4, r0
 801f34e:	43c0      	mvns	r0, r0
 801f350:	fb15 f504 	smulbb	r5, r5, r4
 801f354:	b2c3      	uxtb	r3, r0
 801f356:	7810      	ldrb	r0, [r2, #0]
 801f358:	fb00 5003 	mla	r0, r0, r3, r5
 801f35c:	b280      	uxth	r0, r0
 801f35e:	1c45      	adds	r5, r0, #1
 801f360:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f364:	7855      	ldrb	r5, [r2, #1]
 801f366:	fb15 f503 	smulbb	r5, r5, r3
 801f36a:	1200      	asrs	r0, r0, #8
 801f36c:	7010      	strb	r0, [r2, #0]
 801f36e:	7848      	ldrb	r0, [r1, #1]
 801f370:	fb00 5004 	mla	r0, r0, r4, r5
 801f374:	b280      	uxth	r0, r0
 801f376:	1c45      	adds	r5, r0, #1
 801f378:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f37c:	1200      	asrs	r0, r0, #8
 801f37e:	7050      	strb	r0, [r2, #1]
 801f380:	7888      	ldrb	r0, [r1, #2]
 801f382:	7891      	ldrb	r1, [r2, #2]
 801f384:	fb11 f303 	smulbb	r3, r1, r3
 801f388:	fb00 3304 	mla	r3, r0, r4, r3
 801f38c:	b29b      	uxth	r3, r3
 801f38e:	1c59      	adds	r1, r3, #1
 801f390:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f394:	121b      	asrs	r3, r3, #8
 801f396:	e7cf      	b.n	801f338 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801f398 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f39c:	461d      	mov	r5, r3
 801f39e:	b08f      	sub	sp, #60	@ 0x3c
 801f3a0:	460c      	mov	r4, r1
 801f3a2:	4616      	mov	r6, r2
 801f3a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f3a6:	4680      	mov	r8, r0
 801f3a8:	6869      	ldr	r1, [r5, #4]
 801f3aa:	aa0a      	add	r2, sp, #40	@ 0x28
 801f3ac:	6828      	ldr	r0, [r5, #0]
 801f3ae:	3604      	adds	r6, #4
 801f3b0:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801f3b4:	4f57      	ldr	r7, [pc, #348]	@ (801f514 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801f3b6:	c203      	stmia	r2!, {r0, r1}
 801f3b8:	6818      	ldr	r0, [r3, #0]
 801f3ba:	aa0c      	add	r2, sp, #48	@ 0x30
 801f3bc:	6859      	ldr	r1, [r3, #4]
 801f3be:	c203      	stmia	r2!, {r0, r1}
 801f3c0:	a80a      	add	r0, sp, #40	@ 0x28
 801f3c2:	f7f2 fdbb 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f3c6:	4629      	mov	r1, r5
 801f3c8:	a80c      	add	r0, sp, #48	@ 0x30
 801f3ca:	2502      	movs	r5, #2
 801f3cc:	f7f2 fdfa 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f3d0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f3d4:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801f3d8:	f002 0301 	and.w	r3, r2, #1
 801f3dc:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801f3e0:	9304      	str	r3, [sp, #16]
 801f3e2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f3e6:	f003 0101 	and.w	r1, r3, #1
 801f3ea:	9103      	str	r1, [sp, #12]
 801f3ec:	9803      	ldr	r0, [sp, #12]
 801f3ee:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f3f2:	4403      	add	r3, r0
 801f3f4:	6838      	ldr	r0, [r7, #0]
 801f3f6:	fb01 2303 	mla	r3, r1, r3, r2
 801f3fa:	fb93 f3f5 	sdiv	r3, r3, r5
 801f3fe:	18e5      	adds	r5, r4, r3
 801f400:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f404:	441a      	add	r2, r3
 801f406:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f40a:	4419      	add	r1, r3
 801f40c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f410:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801f414:	6803      	ldr	r3, [r0, #0]
 801f416:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f418:	4798      	blx	r3
 801f41a:	4a3f      	ldr	r2, [pc, #252]	@ (801f518 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801f41c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801f420:	8813      	ldrh	r3, [r2, #0]
 801f422:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801f426:	9207      	str	r2, [sp, #28]
 801f428:	fb03 1404 	mla	r4, r3, r4, r1
 801f42c:	fb0a f303 	mul.w	r3, sl, r3
 801f430:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f434:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f438:	4404      	add	r4, r0
 801f43a:	18e3      	adds	r3, r4, r3
 801f43c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801f440:	9b05      	ldr	r3, [sp, #20]
 801f442:	429c      	cmp	r4, r3
 801f444:	d25d      	bcs.n	801f502 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801f446:	9b04      	ldr	r3, [sp, #16]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d037      	beq.n	801f4bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801f44c:	782b      	ldrb	r3, [r5, #0]
 801f44e:	1c6f      	adds	r7, r5, #1
 801f450:	f003 030f 	and.w	r3, r3, #15
 801f454:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f458:	9309      	str	r3, [sp, #36]	@ 0x24
 801f45a:	0e1b      	lsrs	r3, r3, #24
 801f45c:	d006      	beq.n	801f46c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801f45e:	9300      	str	r3, [sp, #0]
 801f460:	4622      	mov	r2, r4
 801f462:	464b      	mov	r3, r9
 801f464:	a909      	add	r1, sp, #36	@ 0x24
 801f466:	4640      	mov	r0, r8
 801f468:	f7ff ff5a 	bl	801f320 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f46c:	3403      	adds	r4, #3
 801f46e:	f10b 3aff 	add.w	sl, fp, #4294967295
 801f472:	f1ba 0f01 	cmp.w	sl, #1
 801f476:	dd24      	ble.n	801f4c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801f478:	783b      	ldrb	r3, [r7, #0]
 801f47a:	091b      	lsrs	r3, r3, #4
 801f47c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f480:	9308      	str	r3, [sp, #32]
 801f482:	0e1b      	lsrs	r3, r3, #24
 801f484:	d006      	beq.n	801f494 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801f486:	9300      	str	r3, [sp, #0]
 801f488:	4622      	mov	r2, r4
 801f48a:	464b      	mov	r3, r9
 801f48c:	a908      	add	r1, sp, #32
 801f48e:	4640      	mov	r0, r8
 801f490:	f7ff ff46 	bl	801f320 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f494:	f817 3b01 	ldrb.w	r3, [r7], #1
 801f498:	f003 030f 	and.w	r3, r3, #15
 801f49c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f4a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4a2:	0e1b      	lsrs	r3, r3, #24
 801f4a4:	d006      	beq.n	801f4b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f4a6:	9300      	str	r3, [sp, #0]
 801f4a8:	1ce2      	adds	r2, r4, #3
 801f4aa:	464b      	mov	r3, r9
 801f4ac:	a909      	add	r1, sp, #36	@ 0x24
 801f4ae:	4640      	mov	r0, r8
 801f4b0:	f7ff ff36 	bl	801f320 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f4b4:	3406      	adds	r4, #6
 801f4b6:	f1aa 0a02 	sub.w	sl, sl, #2
 801f4ba:	e7da      	b.n	801f472 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f4bc:	462f      	mov	r7, r5
 801f4be:	46da      	mov	sl, fp
 801f4c0:	e7d7      	b.n	801f472 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f4c2:	d10e      	bne.n	801f4e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801f4c4:	783b      	ldrb	r3, [r7, #0]
 801f4c6:	091b      	lsrs	r3, r3, #4
 801f4c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f4ce:	0e1b      	lsrs	r3, r3, #24
 801f4d0:	d006      	beq.n	801f4e0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801f4d2:	9300      	str	r3, [sp, #0]
 801f4d4:	4622      	mov	r2, r4
 801f4d6:	464b      	mov	r3, r9
 801f4d8:	a909      	add	r1, sp, #36	@ 0x24
 801f4da:	4640      	mov	r0, r8
 801f4dc:	f7ff ff20 	bl	801f320 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f4e0:	3403      	adds	r4, #3
 801f4e2:	9b07      	ldr	r3, [sp, #28]
 801f4e4:	9a03      	ldr	r2, [sp, #12]
 801f4e6:	881b      	ldrh	r3, [r3, #0]
 801f4e8:	eba3 030b 	sub.w	r3, r3, fp
 801f4ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f4f0:	441c      	add	r4, r3
 801f4f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f4f6:	4413      	add	r3, r2
 801f4f8:	2202      	movs	r2, #2
 801f4fa:	fb93 f3f2 	sdiv	r3, r3, r2
 801f4fe:	441d      	add	r5, r3
 801f500:	e79e      	b.n	801f440 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801f502:	9b06      	ldr	r3, [sp, #24]
 801f504:	6818      	ldr	r0, [r3, #0]
 801f506:	6803      	ldr	r3, [r0, #0]
 801f508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f50a:	4798      	blx	r3
 801f50c:	b00f      	add	sp, #60	@ 0x3c
 801f50e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f512:	bf00      	nop
 801f514:	24025274 	.word	0x24025274
 801f518:	2402526e 	.word	0x2402526e

0801f51c <CRC_Lock>:
 801f51c:	4a2d      	ldr	r2, [pc, #180]	@ (801f5d4 <CRC_Lock+0xb8>)
 801f51e:	b530      	push	{r4, r5, lr}
 801f520:	6813      	ldr	r3, [r2, #0]
 801f522:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801f526:	f023 0301 	bic.w	r3, r3, #1
 801f52a:	6013      	str	r3, [r2, #0]
 801f52c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801f530:	4b29      	ldr	r3, [pc, #164]	@ (801f5d8 <CRC_Lock+0xbc>)
 801f532:	681c      	ldr	r4, [r3, #0]
 801f534:	4014      	ands	r4, r2
 801f536:	42ac      	cmp	r4, r5
 801f538:	d005      	beq.n	801f546 <CRC_Lock+0x2a>
 801f53a:	681c      	ldr	r4, [r3, #0]
 801f53c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801f540:	4014      	ands	r4, r2
 801f542:	42ac      	cmp	r4, r5
 801f544:	d125      	bne.n	801f592 <CRC_Lock+0x76>
 801f546:	4b25      	ldr	r3, [pc, #148]	@ (801f5dc <CRC_Lock+0xc0>)
 801f548:	681b      	ldr	r3, [r3, #0]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d139      	bne.n	801f5c2 <CRC_Lock+0xa6>
 801f54e:	4b24      	ldr	r3, [pc, #144]	@ (801f5e0 <CRC_Lock+0xc4>)
 801f550:	681a      	ldr	r2, [r3, #0]
 801f552:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f556:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801f55a:	d00d      	beq.n	801f578 <CRC_Lock+0x5c>
 801f55c:	681a      	ldr	r2, [r3, #0]
 801f55e:	f240 4483 	movw	r4, #1155	@ 0x483
 801f562:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f566:	42a2      	cmp	r2, r4
 801f568:	d006      	beq.n	801f578 <CRC_Lock+0x5c>
 801f56a:	681b      	ldr	r3, [r3, #0]
 801f56c:	f240 4285 	movw	r2, #1157	@ 0x485
 801f570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f574:	4293      	cmp	r3, r2
 801f576:	d124      	bne.n	801f5c2 <CRC_Lock+0xa6>
 801f578:	4b1a      	ldr	r3, [pc, #104]	@ (801f5e4 <CRC_Lock+0xc8>)
 801f57a:	2201      	movs	r2, #1
 801f57c:	601a      	str	r2, [r3, #0]
 801f57e:	681a      	ldr	r2, [r3, #0]
 801f580:	2a00      	cmp	r2, #0
 801f582:	d1fc      	bne.n	801f57e <CRC_Lock+0x62>
 801f584:	4b18      	ldr	r3, [pc, #96]	@ (801f5e8 <CRC_Lock+0xcc>)
 801f586:	6018      	str	r0, [r3, #0]
 801f588:	6818      	ldr	r0, [r3, #0]
 801f58a:	1a43      	subs	r3, r0, r1
 801f58c:	4258      	negs	r0, r3
 801f58e:	4158      	adcs	r0, r3
 801f590:	e00e      	b.n	801f5b0 <CRC_Lock+0x94>
 801f592:	681b      	ldr	r3, [r3, #0]
 801f594:	4013      	ands	r3, r2
 801f596:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801f59a:	4293      	cmp	r3, r2
 801f59c:	d111      	bne.n	801f5c2 <CRC_Lock+0xa6>
 801f59e:	4b13      	ldr	r3, [pc, #76]	@ (801f5ec <CRC_Lock+0xd0>)
 801f5a0:	f240 4286 	movw	r2, #1158	@ 0x486
 801f5a4:	681b      	ldr	r3, [r3, #0]
 801f5a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f5aa:	4293      	cmp	r3, r2
 801f5ac:	d001      	beq.n	801f5b2 <CRC_Lock+0x96>
 801f5ae:	2000      	movs	r0, #0
 801f5b0:	bd30      	pop	{r4, r5, pc}
 801f5b2:	4b0f      	ldr	r3, [pc, #60]	@ (801f5f0 <CRC_Lock+0xd4>)
 801f5b4:	2201      	movs	r2, #1
 801f5b6:	601a      	str	r2, [r3, #0]
 801f5b8:	681a      	ldr	r2, [r3, #0]
 801f5ba:	2a00      	cmp	r2, #0
 801f5bc:	d1fc      	bne.n	801f5b8 <CRC_Lock+0x9c>
 801f5be:	4b0d      	ldr	r3, [pc, #52]	@ (801f5f4 <CRC_Lock+0xd8>)
 801f5c0:	e7e1      	b.n	801f586 <CRC_Lock+0x6a>
 801f5c2:	4b0d      	ldr	r3, [pc, #52]	@ (801f5f8 <CRC_Lock+0xdc>)
 801f5c4:	2201      	movs	r2, #1
 801f5c6:	601a      	str	r2, [r3, #0]
 801f5c8:	681a      	ldr	r2, [r3, #0]
 801f5ca:	2a00      	cmp	r2, #0
 801f5cc:	d1fc      	bne.n	801f5c8 <CRC_Lock+0xac>
 801f5ce:	4b0b      	ldr	r3, [pc, #44]	@ (801f5fc <CRC_Lock+0xe0>)
 801f5d0:	e7d9      	b.n	801f586 <CRC_Lock+0x6a>
 801f5d2:	bf00      	nop
 801f5d4:	e0002000 	.word	0xe0002000
 801f5d8:	e000ed00 	.word	0xe000ed00
 801f5dc:	e0042000 	.word	0xe0042000
 801f5e0:	5c001000 	.word	0x5c001000
 801f5e4:	58024c08 	.word	0x58024c08
 801f5e8:	58024c00 	.word	0x58024c00
 801f5ec:	46008ff0 	.word	0x46008ff0
 801f5f0:	46024c08 	.word	0x46024c08
 801f5f4:	46024c00 	.word	0x46024c00
 801f5f8:	40023008 	.word	0x40023008
 801f5fc:	40023000 	.word	0x40023000

0801f600 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f600:	6101      	str	r1, [r0, #16]
 801f602:	4770      	bx	lr

0801f604 <_ZN8touchgfx8Gestures4tickEv>:
 801f604:	7b83      	ldrb	r3, [r0, #14]
 801f606:	b14b      	cbz	r3, 801f61c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f608:	8903      	ldrh	r3, [r0, #8]
 801f60a:	3301      	adds	r3, #1
 801f60c:	b29b      	uxth	r3, r3
 801f60e:	2b07      	cmp	r3, #7
 801f610:	8103      	strh	r3, [r0, #8]
 801f612:	bf81      	itttt	hi
 801f614:	2300      	movhi	r3, #0
 801f616:	8143      	strhhi	r3, [r0, #10]
 801f618:	8183      	strhhi	r3, [r0, #12]
 801f61a:	7383      	strbhi	r3, [r0, #14]
 801f61c:	4770      	bx	lr
	...

0801f620 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f620:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f624:	4698      	mov	r8, r3
 801f626:	8883      	ldrh	r3, [r0, #4]
 801f628:	4604      	mov	r4, r0
 801f62a:	4617      	mov	r7, r2
 801f62c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f630:	eba8 0303 	sub.w	r3, r8, r3
 801f634:	4a19      	ldr	r2, [pc, #100]	@ (801f69c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801f636:	460e      	mov	r6, r1
 801f638:	b21b      	sxth	r3, r3
 801f63a:	88c1      	ldrh	r1, [r0, #6]
 801f63c:	9200      	str	r2, [sp, #0]
 801f63e:	2000      	movs	r0, #0
 801f640:	2b00      	cmp	r3, #0
 801f642:	8aa2      	ldrh	r2, [r4, #20]
 801f644:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801f648:	bfb8      	it	lt
 801f64a:	425b      	neglt	r3, r3
 801f64c:	f88d 0004 	strb.w	r0, [sp, #4]
 801f650:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f654:	b21b      	sxth	r3, r3
 801f656:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f65a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f65e:	4293      	cmp	r3, r2
 801f660:	dc07      	bgt.n	801f672 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801f662:	1a69      	subs	r1, r5, r1
 801f664:	b209      	sxth	r1, r1
 801f666:	2900      	cmp	r1, #0
 801f668:	bfb8      	it	lt
 801f66a:	4249      	neglt	r1, r1
 801f66c:	b209      	sxth	r1, r1
 801f66e:	428a      	cmp	r2, r1
 801f670:	da10      	bge.n	801f694 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801f672:	6920      	ldr	r0, [r4, #16]
 801f674:	4669      	mov	r1, sp
 801f676:	eba8 0606 	sub.w	r6, r8, r6
 801f67a:	1bef      	subs	r7, r5, r7
 801f67c:	6803      	ldr	r3, [r0, #0]
 801f67e:	685b      	ldr	r3, [r3, #4]
 801f680:	4798      	blx	r3
 801f682:	2300      	movs	r3, #0
 801f684:	2001      	movs	r0, #1
 801f686:	8166      	strh	r6, [r4, #10]
 801f688:	8123      	strh	r3, [r4, #8]
 801f68a:	81a7      	strh	r7, [r4, #12]
 801f68c:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f690:	80e5      	strh	r5, [r4, #6]
 801f692:	73a0      	strb	r0, [r4, #14]
 801f694:	b004      	add	sp, #16
 801f696:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f69a:	bf00      	nop
 801f69c:	08025e68 	.word	0x08025e68

0801f6a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f6a2:	461e      	mov	r6, r3
 801f6a4:	1e4b      	subs	r3, r1, #1
 801f6a6:	b085      	sub	sp, #20
 801f6a8:	4604      	mov	r4, r0
 801f6aa:	2b01      	cmp	r3, #1
 801f6ac:	460d      	mov	r5, r1
 801f6ae:	4617      	mov	r7, r2
 801f6b0:	d84b      	bhi.n	801f74a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801f6b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f6b6:	1cd3      	adds	r3, r2, #3
 801f6b8:	b29b      	uxth	r3, r3
 801f6ba:	2b06      	cmp	r3, #6
 801f6bc:	d916      	bls.n	801f6ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801f6be:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801f760 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f6c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f6c6:	f8cd c004 	str.w	ip, [sp, #4]
 801f6ca:	f04f 0c00 	mov.w	ip, #0
 801f6ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f6d2:	6900      	ldr	r0, [r0, #16]
 801f6d4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f6d8:	a901      	add	r1, sp, #4
 801f6da:	f88d c008 	strb.w	ip, [sp, #8]
 801f6de:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f6e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f6e6:	6803      	ldr	r3, [r0, #0]
 801f6e8:	689b      	ldr	r3, [r3, #8]
 801f6ea:	4798      	blx	r3
 801f6ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f6f0:	1cd3      	adds	r3, r2, #3
 801f6f2:	b29b      	uxth	r3, r3
 801f6f4:	2b06      	cmp	r3, #6
 801f6f6:	d916      	bls.n	801f726 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f6f8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801f760 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f6fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f700:	f8cd c004 	str.w	ip, [sp, #4]
 801f704:	f04f 0c01 	mov.w	ip, #1
 801f708:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f70c:	6920      	ldr	r0, [r4, #16]
 801f70e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f712:	a901      	add	r1, sp, #4
 801f714:	f88d c008 	strb.w	ip, [sp, #8]
 801f718:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f71c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f720:	6803      	ldr	r3, [r0, #0]
 801f722:	689b      	ldr	r3, [r3, #8]
 801f724:	4798      	blx	r3
 801f726:	4b0d      	ldr	r3, [pc, #52]	@ (801f75c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801f728:	a901      	add	r1, sp, #4
 801f72a:	6920      	ldr	r0, [r4, #16]
 801f72c:	9301      	str	r3, [sp, #4]
 801f72e:	2300      	movs	r3, #0
 801f730:	f88d 5008 	strb.w	r5, [sp, #8]
 801f734:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f738:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f73c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f740:	6803      	ldr	r3, [r0, #0]
 801f742:	681b      	ldr	r3, [r3, #0]
 801f744:	4798      	blx	r3
 801f746:	b005      	add	sp, #20
 801f748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f74a:	2900      	cmp	r1, #0
 801f74c:	d1eb      	bne.n	801f726 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f74e:	80a2      	strh	r2, [r4, #4]
 801f750:	80c6      	strh	r6, [r0, #6]
 801f752:	60a1      	str	r1, [r4, #8]
 801f754:	81a1      	strh	r1, [r4, #12]
 801f756:	73a1      	strb	r1, [r4, #14]
 801f758:	e7e5      	b.n	801f726 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f75a:	bf00      	nop
 801f75c:	08025e54 	.word	0x08025e54
 801f760:	08025e7c 	.word	0x08025e7c

0801f764 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801f764:	10c9      	asrs	r1, r1, #3
 801f766:	2900      	cmp	r1, #0
 801f768:	bfb8      	it	lt
 801f76a:	4249      	neglt	r1, r1
 801f76c:	2801      	cmp	r0, #1
 801f76e:	d108      	bne.n	801f782 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f770:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801f774:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801f778:	4601      	mov	r1, r0
 801f77a:	dd02      	ble.n	801f782 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f77c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 801f780:	4770      	bx	lr
 801f782:	29ff      	cmp	r1, #255	@ 0xff
 801f784:	bfa8      	it	ge
 801f786:	21ff      	movge	r1, #255	@ 0xff
 801f788:	4608      	mov	r0, r1
 801f78a:	4770      	bx	lr

0801f78c <_ZN8touchgfx10Rasterizer6lineToEii>:
 801f78c:	b410      	push	{r4}
 801f78e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801f792:	429c      	cmp	r4, r3
 801f794:	d803      	bhi.n	801f79e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801f796:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f79a:	f7f1 bb83 	b.w	8010ea4 <_ZN8touchgfx7Outline6lineToEii>
 801f79e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f7a2:	4770      	bx	lr

0801f7a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801f7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a8:	b08b      	sub	sp, #44	@ 0x2c
 801f7aa:	4606      	mov	r6, r0
 801f7ac:	468a      	mov	sl, r1
 801f7ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f7b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801f7b6:	9308      	str	r3, [sp, #32]
 801f7b8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801f7bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f7be:	f7f1 fcdc 	bl	801117a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801f7c2:	68b5      	ldr	r5, [r6, #8]
 801f7c4:	4604      	mov	r4, r0
 801f7c6:	2d00      	cmp	r5, #0
 801f7c8:	d044      	beq.n	801f854 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f7ca:	6873      	ldr	r3, [r6, #4]
 801f7cc:	42ab      	cmp	r3, r5
 801f7ce:	d33d      	bcc.n	801f84c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801f7d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f7d4:	f04f 0800 	mov.w	r8, #0
 801f7d8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 801f7dc:	eb02 0b03 	add.w	fp, r2, r3
 801f7e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f7e4:	fb02 1203 	mla	r2, r2, r3, r1
 801f7e8:	9205      	str	r2, [sp, #20]
 801f7ea:	1e6a      	subs	r2, r5, #1
 801f7ec:	9204      	str	r2, [sp, #16]
 801f7ee:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801f7f2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f7f6:	454b      	cmp	r3, r9
 801f7f8:	463a      	mov	r2, r7
 801f7fa:	d008      	beq.n	801f80e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801f7fc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 801f800:	eb03 0b09 	add.w	fp, r3, r9
 801f804:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801f808:	fb03 1309 	mla	r3, r3, r9, r1
 801f80c:	9305      	str	r3, [sp, #20]
 801f80e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f812:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f816:	4498      	add	r8, r3
 801f818:	9b04      	ldr	r3, [sp, #16]
 801f81a:	3b01      	subs	r3, #1
 801f81c:	9304      	str	r3, [sp, #16]
 801f81e:	9b04      	ldr	r3, [sp, #16]
 801f820:	3301      	adds	r3, #1
 801f822:	d015      	beq.n	801f850 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801f824:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801f828:	42bb      	cmp	r3, r7
 801f82a:	d117      	bne.n	801f85c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801f82c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801f830:	9b04      	ldr	r3, [sp, #16]
 801f832:	4548      	cmp	r0, r9
 801f834:	f103 33ff 	add.w	r3, r3, #4294967295
 801f838:	d17d      	bne.n	801f936 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801f83a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801f83e:	4401      	add	r1, r0
 801f840:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f844:	4480      	add	r8, r0
 801f846:	e7e9      	b.n	801f81c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801f848:	461f      	mov	r7, r3
 801f84a:	e042      	b.n	801f8d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801f84c:	2000      	movs	r0, #0
 801f84e:	e002      	b.n	801f856 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801f850:	2900      	cmp	r1, #0
 801f852:	d16d      	bne.n	801f930 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801f854:	2001      	movs	r0, #1
 801f856:	b00b      	add	sp, #44	@ 0x2c
 801f858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f85c:	b379      	cbz	r1, 801f8be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801f85e:	2f00      	cmp	r7, #0
 801f860:	db29      	blt.n	801f8b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f862:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f866:	42bb      	cmp	r3, r7
 801f868:	dd25      	ble.n	801f8b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f86a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801f86e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f872:	f7ff ff77 	bl	801f764 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f876:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f878:	fb10 f003 	smulbb	r0, r0, r3
 801f87c:	b280      	uxth	r0, r0
 801f87e:	1c41      	adds	r1, r0, #1
 801f880:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f884:	1209      	asrs	r1, r1, #8
 801f886:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f88a:	d014      	beq.n	801f8b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f88c:	b2c9      	uxtb	r1, r1
 801f88e:	9808      	ldr	r0, [sp, #32]
 801f890:	b2ba      	uxth	r2, r7
 801f892:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f894:	9102      	str	r1, [sp, #8]
 801f896:	2101      	movs	r1, #1
 801f898:	4413      	add	r3, r2
 801f89a:	4402      	add	r2, r0
 801f89c:	9101      	str	r1, [sp, #4]
 801f89e:	fa0f f18b 	sxth.w	r1, fp
 801f8a2:	f8da 0000 	ldr.w	r0, [sl]
 801f8a6:	b21b      	sxth	r3, r3
 801f8a8:	9100      	str	r1, [sp, #0]
 801f8aa:	b212      	sxth	r2, r2
 801f8ac:	6941      	ldr	r1, [r0, #20]
 801f8ae:	4650      	mov	r0, sl
 801f8b0:	460d      	mov	r5, r1
 801f8b2:	9905      	ldr	r1, [sp, #20]
 801f8b4:	47a8      	blx	r5
 801f8b6:	9b04      	ldr	r3, [sp, #16]
 801f8b8:	1c7a      	adds	r2, r7, #1
 801f8ba:	3301      	adds	r3, #1
 801f8bc:	d0ca      	beq.n	801f854 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f8be:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f8c2:	1abb      	subs	r3, r7, r2
 801f8c4:	2b00      	cmp	r3, #0
 801f8c6:	dd31      	ble.n	801f92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f8c8:	2a00      	cmp	r2, #0
 801f8ca:	dabd      	bge.n	801f848 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801f8cc:	2f00      	cmp	r7, #0
 801f8ce:	dd2d      	ble.n	801f92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f8d0:	2200      	movs	r2, #0
 801f8d2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f8d6:	19d1      	adds	r1, r2, r7
 801f8d8:	4299      	cmp	r1, r3
 801f8da:	db02      	blt.n	801f8e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801f8dc:	1a9f      	subs	r7, r3, r2
 801f8de:	2f00      	cmp	r7, #0
 801f8e0:	dd24      	ble.n	801f92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f8e2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801f8e6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f8ea:	f7ff ff3b 	bl	801f764 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f8ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8f0:	fb10 f003 	smulbb	r0, r0, r3
 801f8f4:	b280      	uxth	r0, r0
 801f8f6:	1c41      	adds	r1, r0, #1
 801f8f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f8fc:	1209      	asrs	r1, r1, #8
 801f8fe:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f902:	d013      	beq.n	801f92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f904:	b292      	uxth	r2, r2
 801f906:	9808      	ldr	r0, [sp, #32]
 801f908:	b2c9      	uxtb	r1, r1
 801f90a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f90c:	b23f      	sxth	r7, r7
 801f90e:	4413      	add	r3, r2
 801f910:	9102      	str	r1, [sp, #8]
 801f912:	4402      	add	r2, r0
 801f914:	fa0f f18b 	sxth.w	r1, fp
 801f918:	f8da 0000 	ldr.w	r0, [sl]
 801f91c:	b21b      	sxth	r3, r3
 801f91e:	9100      	str	r1, [sp, #0]
 801f920:	b212      	sxth	r2, r2
 801f922:	9701      	str	r7, [sp, #4]
 801f924:	9905      	ldr	r1, [sp, #20]
 801f926:	6947      	ldr	r7, [r0, #20]
 801f928:	4650      	mov	r0, sl
 801f92a:	47b8      	blx	r7
 801f92c:	464b      	mov	r3, r9
 801f92e:	e75e      	b.n	801f7ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801f930:	2f00      	cmp	r7, #0
 801f932:	da96      	bge.n	801f862 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801f934:	e78e      	b.n	801f854 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f936:	2900      	cmp	r1, #0
 801f938:	d0f8      	beq.n	801f92c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f93a:	e790      	b.n	801f85e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801f93c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801f93c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f940:	461e      	mov	r6, r3
 801f942:	4b36      	ldr	r3, [pc, #216]	@ (801fa1c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801f944:	2500      	movs	r5, #0
 801f946:	f100 0814 	add.w	r8, r0, #20
 801f94a:	4604      	mov	r4, r0
 801f94c:	4617      	mov	r7, r2
 801f94e:	e9c0 3100 	strd	r3, r1, [r0]
 801f952:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f956:	8185      	strh	r5, [r0, #12]
 801f958:	8103      	strh	r3, [r0, #8]
 801f95a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f95e:	81c5      	strh	r5, [r0, #14]
 801f960:	7283      	strb	r3, [r0, #10]
 801f962:	8205      	strh	r5, [r0, #16]
 801f964:	8245      	strh	r5, [r0, #18]
 801f966:	4640      	mov	r0, r8
 801f968:	f7f0 fde2 	bl	8010530 <_ZN8touchgfx7OutlineC1Ev>
 801f96c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 801f970:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 801f974:	466b      	mov	r3, sp
 801f976:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 801f97a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 801f97e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 801f982:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 801f986:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 801f98a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 801f98e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 801f992:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 801f996:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 801f99a:	6830      	ldr	r0, [r6, #0]
 801f99c:	6871      	ldr	r1, [r6, #4]
 801f99e:	8872      	ldrh	r2, [r6, #2]
 801f9a0:	8835      	ldrh	r5, [r6, #0]
 801f9a2:	c303      	stmia	r3!, {r0, r1}
 801f9a4:	887b      	ldrh	r3, [r7, #2]
 801f9a6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801f9aa:	4413      	add	r3, r2
 801f9ac:	883a      	ldrh	r2, [r7, #0]
 801f9ae:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801f9b2:	442a      	add	r2, r5
 801f9b4:	81e3      	strh	r3, [r4, #14]
 801f9b6:	8220      	strh	r0, [r4, #16]
 801f9b8:	4668      	mov	r0, sp
 801f9ba:	81a2      	strh	r2, [r4, #12]
 801f9bc:	8261      	strh	r1, [r4, #18]
 801f9be:	4639      	mov	r1, r7
 801f9c0:	f7f2 fb00 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f9c4:	f104 000c 	add.w	r0, r4, #12
 801f9c8:	f7f2 fab8 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f9cc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f9d0:	f8bd 2000 	ldrh.w	r2, [sp]
 801f9d4:	4640      	mov	r0, r8
 801f9d6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 801f9da:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f9de:	f7f0 fd8b 	bl	80104f8 <_ZN8touchgfx7Outline5resetEv>
 801f9e2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f9e6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801f9ea:	4620      	mov	r0, r4
 801f9ec:	015b      	lsls	r3, r3, #5
 801f9ee:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801f9f0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f9f4:	015b      	lsls	r3, r3, #5
 801f9f6:	6523      	str	r3, [r4, #80]	@ 0x50
 801f9f8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f9fc:	015b      	lsls	r3, r3, #5
 801f9fe:	6563      	str	r3, [r4, #84]	@ 0x54
 801fa00:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801fa04:	015b      	lsls	r3, r3, #5
 801fa06:	65a3      	str	r3, [r4, #88]	@ 0x58
 801fa08:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801fa0c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801fa10:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801fa14:	b002      	add	sp, #8
 801fa16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa1a:	bf00      	nop
 801fa1c:	0802610c 	.word	0x0802610c

0801fa20 <_ZN8touchgfx6Canvas5closeEv>:
 801fa20:	b538      	push	{r3, r4, r5, lr}
 801fa22:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801fa26:	4604      	mov	r4, r0
 801fa28:	b193      	cbz	r3, 801fa50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801fa2a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 801fa2e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 801fa32:	4213      	tst	r3, r2
 801fa34:	d10c      	bne.n	801fa50 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801fa36:	f100 0514 	add.w	r5, r0, #20
 801fa3a:	b123      	cbz	r3, 801fa46 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801fa3c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 801fa40:	4628      	mov	r0, r5
 801fa42:	f7ff fea3 	bl	801f78c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fa46:	4628      	mov	r0, r5
 801fa48:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 801fa4c:	f7ff fe9e 	bl	801f78c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fa50:	2300      	movs	r3, #0
 801fa52:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fa56:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801fa5a:	4298      	cmp	r0, r3
 801fa5c:	bf34      	ite	cc
 801fa5e:	2000      	movcc	r0, #0
 801fa60:	2001      	movcs	r0, #1
 801fa62:	bd38      	pop	{r3, r4, r5, pc}

0801fa64 <_ZN8touchgfx6Canvas6renderEh>:
 801fa64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801fa68:	7a85      	ldrb	r5, [r0, #10]
 801fa6a:	4604      	mov	r4, r0
 801fa6c:	4369      	muls	r1, r5
 801fa6e:	1c4d      	adds	r5, r1, #1
 801fa70:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801fa74:	122d      	asrs	r5, r5, #8
 801fa76:	f000 8098 	beq.w	801fbaa <_ZN8touchgfx6Canvas6renderEh+0x146>
 801fa7a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 801fa7e:	2b00      	cmp	r3, #0
 801fa80:	f000 8093 	beq.w	801fbaa <_ZN8touchgfx6Canvas6renderEh+0x146>
 801fa84:	f7ff ffcc 	bl	801fa20 <_ZN8touchgfx6Canvas5closeEv>
 801fa88:	4607      	mov	r7, r0
 801fa8a:	2800      	cmp	r0, #0
 801fa8c:	d045      	beq.n	801fb1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801fa8e:	6860      	ldr	r0, [r4, #4]
 801fa90:	4e47      	ldr	r6, [pc, #284]	@ (801fbb0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801fa92:	6803      	ldr	r3, [r0, #0]
 801fa94:	6837      	ldr	r7, [r6, #0]
 801fa96:	689b      	ldr	r3, [r3, #8]
 801fa98:	4798      	blx	r3
 801fa9a:	4601      	mov	r1, r0
 801fa9c:	4638      	mov	r0, r7
 801fa9e:	f7ee fe41 	bl	800e724 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801faa2:	4607      	mov	r7, r0
 801faa4:	f7e4 f864 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 801faa8:	6803      	ldr	r3, [r0, #0]
 801faaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801faac:	4798      	blx	r3
 801faae:	4680      	mov	r8, r0
 801fab0:	f7e4 f85e 	bl	8003b70 <_ZN8touchgfx3HAL3lcdEv>
 801fab4:	6803      	ldr	r3, [r0, #0]
 801fab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fab8:	4798      	blx	r3
 801faba:	280b      	cmp	r0, #11
 801fabc:	d85a      	bhi.n	801fb74 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801fabe:	e8df f000 	tbb	[pc, r0]
 801fac2:	5b50      	.short	0x5b50
 801fac4:	3059066b 	.word	0x3059066b
 801fac8:	64646440 	.word	0x64646440
 801facc:	6464      	.short	0x6464
 801face:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801fad2:	2208      	movs	r2, #8
 801fad4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fad8:	fb91 f2f2 	sdiv	r2, r1, r2
 801fadc:	fb08 2303 	mla	r3, r8, r3, r2
 801fae0:	441f      	add	r7, r3
 801fae2:	424b      	negs	r3, r1
 801fae4:	f001 0107 	and.w	r1, r1, #7
 801fae8:	f003 0307 	and.w	r3, r3, #7
 801faec:	bf58      	it	pl
 801faee:	4259      	negpl	r1, r3
 801faf0:	b2c9      	uxtb	r1, r1
 801faf2:	b2ed      	uxtb	r5, r5
 801faf4:	463a      	mov	r2, r7
 801faf6:	fa0f f388 	sxth.w	r3, r8
 801fafa:	f104 0014 	add.w	r0, r4, #20
 801fafe:	e9cd 1500 	strd	r1, r5, [sp]
 801fb02:	6861      	ldr	r1, [r4, #4]
 801fb04:	f7ff fe4e 	bl	801f7a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801fb08:	4607      	mov	r7, r0
 801fb0a:	6860      	ldr	r0, [r4, #4]
 801fb0c:	6803      	ldr	r3, [r0, #0]
 801fb0e:	691b      	ldr	r3, [r3, #16]
 801fb10:	4798      	blx	r3
 801fb12:	6830      	ldr	r0, [r6, #0]
 801fb14:	6803      	ldr	r3, [r0, #0]
 801fb16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb18:	4798      	blx	r3
 801fb1a:	4638      	mov	r0, r7
 801fb1c:	b002      	add	sp, #8
 801fb1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fb22:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801fb26:	2204      	movs	r2, #4
 801fb28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb2c:	fb91 f2f2 	sdiv	r2, r1, r2
 801fb30:	fb08 2303 	mla	r3, r8, r3, r2
 801fb34:	441f      	add	r7, r3
 801fb36:	424b      	negs	r3, r1
 801fb38:	f001 0103 	and.w	r1, r1, #3
 801fb3c:	f003 0303 	and.w	r3, r3, #3
 801fb40:	e7d4      	b.n	801faec <_ZN8touchgfx6Canvas6renderEh+0x88>
 801fb42:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801fb46:	2202      	movs	r2, #2
 801fb48:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb4c:	2900      	cmp	r1, #0
 801fb4e:	fb91 f2f2 	sdiv	r2, r1, r2
 801fb52:	f001 0101 	and.w	r1, r1, #1
 801fb56:	fb08 2303 	mla	r3, r8, r3, r2
 801fb5a:	bfb8      	it	lt
 801fb5c:	4249      	neglt	r1, r1
 801fb5e:	441f      	add	r7, r3
 801fb60:	e7c6      	b.n	801faf0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801fb62:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb6a:	fb08 f303 	mul.w	r3, r8, r3
 801fb6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801fb72:	441f      	add	r7, r3
 801fb74:	2100      	movs	r1, #0
 801fb76:	e7bc      	b.n	801faf2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801fb78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb7c:	2103      	movs	r1, #3
 801fb7e:	fb08 f203 	mul.w	r2, r8, r3
 801fb82:	89a3      	ldrh	r3, [r4, #12]
 801fb84:	fb13 2301 	smlabb	r3, r3, r1, r2
 801fb88:	e7f3      	b.n	801fb72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fb8a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fb92:	fb08 2303 	mla	r3, r8, r3, r2
 801fb96:	e7ec      	b.n	801fb72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fb98:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fb9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fba0:	fb08 f303 	mul.w	r3, r8, r3
 801fba4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801fba8:	e7e3      	b.n	801fb72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fbaa:	2701      	movs	r7, #1
 801fbac:	e7b5      	b.n	801fb1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801fbae:	bf00      	nop
 801fbb0:	24025274 	.word	0x24025274

0801fbb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801fbb4:	4b06      	ldr	r3, [pc, #24]	@ (801fbd0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801fbb6:	b510      	push	{r4, lr}
 801fbb8:	781b      	ldrb	r3, [r3, #0]
 801fbba:	2b01      	cmp	r3, #1
 801fbbc:	d107      	bne.n	801fbce <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801fbbe:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801fbc2:	680b      	ldr	r3, [r1, #0]
 801fbc4:	6814      	ldr	r4, [r2, #0]
 801fbc6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801fbca:	6013      	str	r3, [r2, #0]
 801fbcc:	600c      	str	r4, [r1, #0]
 801fbce:	bd10      	pop	{r4, pc}
 801fbd0:	2402526c 	.word	0x2402526c

0801fbd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801fbd4:	b513      	push	{r0, r1, r4, lr}
 801fbd6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801fbda:	4604      	mov	r4, r0
 801fbdc:	e9cd 2100 	strd	r2, r1, [sp]
 801fbe0:	b9a3      	cbnz	r3, 801fc0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801fbe2:	466a      	mov	r2, sp
 801fbe4:	a901      	add	r1, sp, #4
 801fbe6:	4620      	mov	r0, r4
 801fbe8:	f7ff ffe4 	bl	801fbb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801fbec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801fbee:	9901      	ldr	r1, [sp, #4]
 801fbf0:	9a00      	ldr	r2, [sp, #0]
 801fbf2:	1ac9      	subs	r1, r1, r3
 801fbf4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fbf6:	1ad2      	subs	r2, r2, r3
 801fbf8:	9101      	str	r1, [sp, #4]
 801fbfa:	2a00      	cmp	r2, #0
 801fbfc:	9200      	str	r2, [sp, #0]
 801fbfe:	da0b      	bge.n	801fc18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801fc00:	2301      	movs	r3, #1
 801fc02:	2900      	cmp	r1, #0
 801fc04:	da0e      	bge.n	801fc24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801fc06:	f043 0304 	orr.w	r3, r3, #4
 801fc0a:	e013      	b.n	801fc34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801fc0c:	f7ff ff08 	bl	801fa20 <_ZN8touchgfx6Canvas5closeEv>
 801fc10:	2800      	cmp	r0, #0
 801fc12:	d1e6      	bne.n	801fbe2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801fc14:	b002      	add	sp, #8
 801fc16:	bd10      	pop	{r4, pc}
 801fc18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fc1a:	429a      	cmp	r2, r3
 801fc1c:	bfac      	ite	ge
 801fc1e:	2302      	movge	r3, #2
 801fc20:	2300      	movlt	r3, #0
 801fc22:	e7ee      	b.n	801fc02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801fc24:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801fc26:	4281      	cmp	r1, r0
 801fc28:	bfac      	ite	ge
 801fc2a:	2008      	movge	r0, #8
 801fc2c:	2000      	movlt	r0, #0
 801fc2e:	4318      	orrs	r0, r3
 801fc30:	b2c3      	uxtb	r3, r0
 801fc32:	b158      	cbz	r0, 801fc4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801fc34:	2200      	movs	r2, #0
 801fc36:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 801fc3a:	9901      	ldr	r1, [sp, #4]
 801fc3c:	9a00      	ldr	r2, [sp, #0]
 801fc3e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 801fc40:	6722      	str	r2, [r4, #112]	@ 0x70
 801fc42:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801fc46:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 801fc4a:	e7e3      	b.n	801fc14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801fc4c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801fc50:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fc54:	4298      	cmp	r0, r3
 801fc56:	d803      	bhi.n	801fc60 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801fc58:	f104 0014 	add.w	r0, r4, #20
 801fc5c:	f7f1 f93c 	bl	8010ed8 <_ZN8touchgfx7Outline6moveToEii>
 801fc60:	2301      	movs	r3, #1
 801fc62:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fc66:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fc6a:	2300      	movs	r3, #0
 801fc6c:	e7e5      	b.n	801fc3a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801fc6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fc70:	ab02      	add	r3, sp, #8
 801fc72:	4604      	mov	r4, r0
 801fc74:	9101      	str	r1, [sp, #4]
 801fc76:	a901      	add	r1, sp, #4
 801fc78:	f843 2d08 	str.w	r2, [r3, #-8]!
 801fc7c:	461a      	mov	r2, r3
 801fc7e:	f7ff ff99 	bl	801fbb4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801fc82:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801fc84:	9901      	ldr	r1, [sp, #4]
 801fc86:	9a00      	ldr	r2, [sp, #0]
 801fc88:	1ac9      	subs	r1, r1, r3
 801fc8a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fc8c:	1ad2      	subs	r2, r2, r3
 801fc8e:	9101      	str	r1, [sp, #4]
 801fc90:	2a00      	cmp	r2, #0
 801fc92:	9200      	str	r2, [sp, #0]
 801fc94:	db1c      	blt.n	801fcd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801fc96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fc98:	429a      	cmp	r2, r3
 801fc9a:	bfac      	ite	ge
 801fc9c:	2002      	movge	r0, #2
 801fc9e:	2000      	movlt	r0, #0
 801fca0:	2900      	cmp	r1, #0
 801fca2:	db17      	blt.n	801fcd4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801fca4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801fca6:	4299      	cmp	r1, r3
 801fca8:	bfac      	ite	ge
 801fcaa:	2308      	movge	r3, #8
 801fcac:	2300      	movlt	r3, #0
 801fcae:	4303      	orrs	r3, r0
 801fcb0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801fcb4:	b2dd      	uxtb	r5, r3
 801fcb6:	b978      	cbnz	r0, 801fcd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801fcb8:	f104 0014 	add.w	r0, r4, #20
 801fcbc:	f7ff fd66 	bl	801f78c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fcc0:	9b01      	ldr	r3, [sp, #4]
 801fcc2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 801fcc6:	6623      	str	r3, [r4, #96]	@ 0x60
 801fcc8:	9b00      	ldr	r3, [sp, #0]
 801fcca:	6663      	str	r3, [r4, #100]	@ 0x64
 801fccc:	b002      	add	sp, #8
 801fcce:	bd70      	pop	{r4, r5, r6, pc}
 801fcd0:	2001      	movs	r0, #1
 801fcd2:	e7e5      	b.n	801fca0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801fcd4:	2304      	movs	r3, #4
 801fcd6:	e7ea      	b.n	801fcae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801fcd8:	b113      	cbz	r3, 801fce0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801fcda:	ea10 0305 	ands.w	r3, r0, r5
 801fcde:	d11c      	bne.n	801fd1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801fce0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801fce4:	f104 0614 	add.w	r6, r4, #20
 801fce8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 801fcec:	b98b      	cbnz	r3, 801fd12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801fcee:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801fcf2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fcf6:	4298      	cmp	r0, r3
 801fcf8:	d802      	bhi.n	801fd00 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801fcfa:	4630      	mov	r0, r6
 801fcfc:	f7f1 f8ec 	bl	8010ed8 <_ZN8touchgfx7Outline6moveToEii>
 801fd00:	2301      	movs	r3, #1
 801fd02:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fd06:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fd0a:	4630      	mov	r0, r6
 801fd0c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801fd10:	e7d4      	b.n	801fcbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801fd12:	4630      	mov	r0, r6
 801fd14:	f7ff fd3a 	bl	801f78c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fd18:	e7f7      	b.n	801fd0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801fd1a:	461d      	mov	r5, r3
 801fd1c:	e7d0      	b.n	801fcc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801fd20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801fd20:	b538      	push	{r3, r4, r5, lr}
 801fd22:	ed2d 8b10 	vpush	{d8-d15}
 801fd26:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 801fd2a:	4605      	mov	r5, r0
 801fd2c:	eeb0 ca40 	vmov.f32	s24, s0
 801fd30:	460c      	mov	r4, r1
 801fd32:	eef0 ca60 	vmov.f32	s25, s1
 801fd36:	ed9f ba57 	vldr	s22, [pc, #348]	@ 801fe94 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801fd3a:	eeb0 da41 	vmov.f32	s26, s2
 801fd3e:	eef0 da61 	vmov.f32	s27, s3
 801fd42:	eeb0 ea42 	vmov.f32	s28, s4
 801fd46:	eef0 ea62 	vmov.f32	s29, s5
 801fd4a:	eef0 aa6b 	vmov.f32	s21, s23
 801fd4e:	2c08      	cmp	r4, #8
 801fd50:	d86e      	bhi.n	801fe30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801fd52:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801fd56:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801fd5a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801fd5e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801fd62:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801fd66:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801fd6a:	ee7c faad 	vadd.f32	s31, s25, s27
 801fd6e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801fd72:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801fd76:	ee3d aaae 	vadd.f32	s20, s27, s29
 801fd7a:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801fd7e:	ee6f faab 	vmul.f32	s31, s31, s23
 801fd82:	ee69 9aab 	vmul.f32	s19, s19, s23
 801fd86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fd8a:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801fd8e:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801fd92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd96:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801fd9a:	ee68 8aab 	vmul.f32	s17, s17, s23
 801fd9e:	bf48      	it	mi
 801fda0:	eef1 7a67 	vnegmi.f32	s15, s15
 801fda4:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801fda8:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801fdac:	eef4 7acb 	vcmpe.f32	s15, s22
 801fdb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdb4:	dd3f      	ble.n	801fe36 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801fdb6:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fdba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fdbe:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801fdc2:	ee27 7a06 	vmul.f32	s14, s14, s12
 801fdc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fdca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdce:	d847      	bhi.n	801fe60 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fdd0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801fdd4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801fdd8:	f001 fe2f 	bl	8021a3a <atan2f>
 801fddc:	eeb0 8a40 	vmov.f32	s16, s0
 801fde0:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801fde4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801fde8:	f001 fe27 	bl	8021a3a <atan2f>
 801fdec:	ee38 0a40 	vsub.f32	s0, s16, s0
 801fdf0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801fe98 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801fdf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fdfc:	bf48      	it	mi
 801fdfe:	eeb1 0a40 	vnegmi.f32	s0, s0
 801fe02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fe06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe0a:	bfa4      	itt	ge
 801fe0c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 801fe9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801fe10:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801fe14:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801fea0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801fe18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fe1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe20:	d51e      	bpl.n	801fe60 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fe22:	eef0 0a49 	vmov.f32	s1, s18
 801fe26:	4628      	mov	r0, r5
 801fe28:	eeb0 0a68 	vmov.f32	s0, s17
 801fe2c:	f7ef fafa 	bl	800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801fe30:	ecbd 8b10 	vpop	{d8-d15}
 801fe34:	bd38      	pop	{r3, r4, r5, pc}
 801fe36:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801fe3a:	eeb0 7a68 	vmov.f32	s14, s17
 801fe3e:	eef0 6a49 	vmov.f32	s13, s18
 801fe42:	eea7 7aea 	vfms.f32	s14, s15, s21
 801fe46:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801fe4a:	eee7 6aea 	vfms.f32	s13, s15, s21
 801fe4e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801fe52:	eee7 7a07 	vfma.f32	s15, s14, s14
 801fe56:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fe5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe5e:	d9e0      	bls.n	801fe22 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801fe60:	3401      	adds	r4, #1
 801fe62:	eef0 0a6c 	vmov.f32	s1, s25
 801fe66:	eeb0 0a4c 	vmov.f32	s0, s24
 801fe6a:	4628      	mov	r0, r5
 801fe6c:	4621      	mov	r1, r4
 801fe6e:	eef0 2a49 	vmov.f32	s5, s18
 801fe72:	eeb0 2a68 	vmov.f32	s4, s17
 801fe76:	eef0 1a6f 	vmov.f32	s3, s31
 801fe7a:	eeb0 1a4f 	vmov.f32	s2, s30
 801fe7e:	f7ff ff4f 	bl	801fd20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801fe82:	eef0 da4a 	vmov.f32	s27, s20
 801fe86:	eeb0 da69 	vmov.f32	s26, s19
 801fe8a:	eef0 ca49 	vmov.f32	s25, s18
 801fe8e:	eeb0 ca68 	vmov.f32	s24, s17
 801fe92:	e75c      	b.n	801fd4e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801fe94:	2edbe6ff 	.word	0x2edbe6ff
 801fe98:	40490fdb 	.word	0x40490fdb
 801fe9c:	40c90fdb 	.word	0x40c90fdb
 801fea0:	3dcccccd 	.word	0x3dcccccd

0801fea4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801fea4:	b530      	push	{r4, r5, lr}
 801fea6:	ed2d 8b10 	vpush	{d8-d15}
 801feaa:	eef0 8a40 	vmov.f32	s17, s0
 801feae:	b085      	sub	sp, #20
 801feb0:	eef0 9a60 	vmov.f32	s19, s1
 801feb4:	4604      	mov	r4, r0
 801feb6:	eef0 fa41 	vmov.f32	s31, s2
 801feba:	460d      	mov	r5, r1
 801febc:	eeb0 fa61 	vmov.f32	s30, s3
 801fec0:	eef0 ba42 	vmov.f32	s23, s4
 801fec4:	eeb0 ca62 	vmov.f32	s24, s5
 801fec8:	eef0 aa43 	vmov.f32	s21, s6
 801fecc:	eeb0 ba63 	vmov.f32	s22, s7
 801fed0:	2d08      	cmp	r5, #8
 801fed2:	f200 8113 	bhi.w	80200fc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801fed6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801feda:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801fede:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801fee2:	ee38 daaf 	vadd.f32	s26, s17, s31
 801fee6:	ee26 6a27 	vmul.f32	s12, s12, s15
 801feea:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801feee:	ee2d da27 	vmul.f32	s26, s26, s15
 801fef2:	ed8d 6a01 	vstr	s12, [sp, #4]
 801fef6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801fefa:	ee6c caa7 	vmul.f32	s25, s25, s15
 801fefe:	eeb0 ea4d 	vmov.f32	s28, s26
 801ff02:	ee79 da8f 	vadd.f32	s27, s19, s30
 801ff06:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801ff0a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801ff0e:	ee66 6a27 	vmul.f32	s13, s12, s15
 801ff12:	ee6d daa7 	vmul.f32	s27, s27, s15
 801ff16:	edcd 6a03 	vstr	s13, [sp, #12]
 801ff1a:	eef0 6a6c 	vmov.f32	s13, s25
 801ff1e:	eef0 ea6d 	vmov.f32	s29, s27
 801ff22:	ee2e ea27 	vmul.f32	s28, s28, s15
 801ff26:	eee7 6a27 	vfma.f32	s13, s14, s15
 801ff2a:	eee7 ea27 	vfma.f32	s29, s14, s15
 801ff2e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801ff32:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801ff36:	eef0 6a67 	vmov.f32	s13, s15
 801ff3a:	ed8d 7a02 	vstr	s14, [sp, #8]
 801ff3e:	ed9d 7a03 	vldr	s14, [sp, #12]
 801ff42:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801ff46:	ed9d 7a02 	vldr	s14, [sp, #8]
 801ff4a:	ee3e aa87 	vadd.f32	s20, s29, s14
 801ff4e:	ee29 9a27 	vmul.f32	s18, s18, s15
 801ff52:	ee2a aa27 	vmul.f32	s20, s20, s15
 801ff56:	2d00      	cmp	r5, #0
 801ff58:	f000 810b 	beq.w	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ff5c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801ff60:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80201b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801ff64:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801ff68:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801ff6c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801ff70:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801ff74:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801ff78:	eea6 7a27 	vfma.f32	s14, s12, s15
 801ff7c:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801ff80:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801ff84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801ff88:	eea5 6a27 	vfma.f32	s12, s10, s15
 801ff8c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 801ff90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff94:	bf48      	it	mi
 801ff96:	eeb1 7a47 	vnegmi.f32	s14, s14
 801ff9a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801ff9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffa2:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801ffa6:	bf48      	it	mi
 801ffa8:	eeb1 6a46 	vnegmi.f32	s12, s12
 801ffac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffb0:	f340 80a8 	ble.w	8020104 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801ffb4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801ffb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffbc:	dd5a      	ble.n	8020074 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801ffbe:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801ffc2:	ee37 7a06 	vadd.f32	s14, s14, s12
 801ffc6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801ffca:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ffce:	ee65 7a85 	vmul.f32	s15, s11, s10
 801ffd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ffd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffda:	f200 80ca 	bhi.w	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ffde:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801ffe2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801ffe6:	f001 fd28 	bl	8021a3a <atan2f>
 801ffea:	eeb0 8a40 	vmov.f32	s16, s0
 801ffee:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801fff2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801fff6:	f001 fd20 	bl	8021a3a <atan2f>
 801fffa:	ee38 fa40 	vsub.f32	s30, s16, s0
 801fffe:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020002:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020006:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 802000a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802000e:	bf48      	it	mi
 8020010:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8020014:	f001 fd11 	bl	8021a3a <atan2f>
 8020018:	ee30 0a48 	vsub.f32	s0, s0, s16
 802001c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80201bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020020:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020024:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020028:	eeb4 fae7 	vcmpe.f32	s30, s15
 802002c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80201bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020030:	bf48      	it	mi
 8020032:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802003a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802003e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80201c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8020042:	bfa4      	itt	ge
 8020044:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80201c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020048:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 802004c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020050:	bfa4      	itt	ge
 8020052:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80201c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020056:	ee37 0a40 	vsubge.f32	s0, s14, s0
 802005a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 802005e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020066:	f140 8084 	bpl.w	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802006a:	eef0 0a4a 	vmov.f32	s1, s20
 802006e:	eeb0 0a49 	vmov.f32	s0, s18
 8020072:	e040      	b.n	80200f6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8020074:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020078:	ee27 7a07 	vmul.f32	s14, s14, s14
 802007c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020080:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802008c:	d871      	bhi.n	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802008e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020092:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020096:	f001 fcd0 	bl	8021a3a <atan2f>
 802009a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 802009e:	eeb0 8a40 	vmov.f32	s16, s0
 80200a2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 80200a6:	f001 fcc8 	bl	8021a3a <atan2f>
 80200aa:	ee38 0a40 	vsub.f32	s0, s16, s0
 80200ae:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80201bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 80200b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80200b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200ba:	bf48      	it	mi
 80200bc:	eeb1 0a40 	vnegmi.f32	s0, s0
 80200c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80200c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200c8:	bfa4      	itt	ge
 80200ca:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80201c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 80200ce:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 80200d2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80201c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 80200d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80200da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80200de:	d548      	bpl.n	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 80200e0:	eef0 0a4f 	vmov.f32	s1, s30
 80200e4:	4620      	mov	r0, r4
 80200e6:	eeb0 0a6f 	vmov.f32	s0, s31
 80200ea:	f7ef f99b 	bl	800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80200ee:	eef0 0a4c 	vmov.f32	s1, s24
 80200f2:	eeb0 0a6b 	vmov.f32	s0, s23
 80200f6:	4620      	mov	r0, r4
 80200f8:	f7ef f994 	bl	800f424 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 80200fc:	b005      	add	sp, #20
 80200fe:	ecbd 8b10 	vpop	{d8-d15}
 8020102:	bd30      	pop	{r4, r5, pc}
 8020104:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80201b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020108:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020110:	dd19      	ble.n	8020146 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8020112:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020116:	ee26 7a06 	vmul.f32	s14, s12, s12
 802011a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802011e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020122:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020126:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802012a:	d822      	bhi.n	8020172 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802012c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020130:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020134:	f001 fc81 	bl	8021a3a <atan2f>
 8020138:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802013c:	eeb0 8a40 	vmov.f32	s16, s0
 8020140:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020144:	e7af      	b.n	80200a6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8020146:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802014a:	eeb0 7a49 	vmov.f32	s14, s18
 802014e:	eeb0 6a4a 	vmov.f32	s12, s20
 8020152:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8020156:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802015a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802015e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8020162:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020166:	eef4 7ac5 	vcmpe.f32	s15, s10
 802016a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016e:	f67f af7c 	bls.w	802006a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8020172:	3501      	adds	r5, #1
 8020174:	eef0 0a69 	vmov.f32	s1, s19
 8020178:	eeb0 0a68 	vmov.f32	s0, s17
 802017c:	4620      	mov	r0, r4
 802017e:	4629      	mov	r1, r5
 8020180:	eef0 3a4a 	vmov.f32	s7, s20
 8020184:	eeb0 3a49 	vmov.f32	s6, s18
 8020188:	eef0 2a6e 	vmov.f32	s5, s29
 802018c:	eeb0 2a4e 	vmov.f32	s4, s28
 8020190:	eef0 1a6d 	vmov.f32	s3, s27
 8020194:	eeb0 1a4d 	vmov.f32	s2, s26
 8020198:	f7ff fe84 	bl	801fea4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802019c:	eeb0 ca6c 	vmov.f32	s24, s25
 80201a0:	eddd ba01 	vldr	s23, [sp, #4]
 80201a4:	eef0 9a4a 	vmov.f32	s19, s20
 80201a8:	ed9d fa02 	vldr	s30, [sp, #8]
 80201ac:	eef0 8a49 	vmov.f32	s17, s18
 80201b0:	eddd fa03 	vldr	s31, [sp, #12]
 80201b4:	e68c      	b.n	801fed0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80201b6:	bf00      	nop
 80201b8:	2edbe6ff 	.word	0x2edbe6ff
 80201bc:	40490fdb 	.word	0x40490fdb
 80201c0:	3dcccccd 	.word	0x3dcccccd
 80201c4:	40c90fdb 	.word	0x40c90fdb

080201c8 <_ZN8touchgfx6CanvasD1Ev>:
 80201c8:	4b04      	ldr	r3, [pc, #16]	@ (80201dc <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80201ca:	b510      	push	{r4, lr}
 80201cc:	4604      	mov	r4, r0
 80201ce:	f840 3b14 	str.w	r3, [r0], #20
 80201d2:	f7f0 f989 	bl	80104e8 <_ZN8touchgfx7OutlineD1Ev>
 80201d6:	4620      	mov	r0, r4
 80201d8:	bd10      	pop	{r4, pc}
 80201da:	bf00      	nop
 80201dc:	0802610c 	.word	0x0802610c

080201e0 <_ZN8touchgfx6CanvasD0Ev>:
 80201e0:	b510      	push	{r4, lr}
 80201e2:	4604      	mov	r4, r0
 80201e4:	f7ff fff0 	bl	80201c8 <_ZN8touchgfx6CanvasD1Ev>
 80201e8:	2174      	movs	r1, #116	@ 0x74
 80201ea:	4620      	mov	r0, r4
 80201ec:	f001 fbfd 	bl	80219ea <_ZdlPvj>
 80201f0:	4620      	mov	r0, r4
 80201f2:	bd10      	pop	{r4, pc}

080201f4 <_ZN8touchgfx6CircleD1Ev>:
 80201f4:	4770      	bx	lr

080201f6 <_ZN8touchgfx6CircleD0Ev>:
 80201f6:	b510      	push	{r4, lr}
 80201f8:	4604      	mov	r4, r0
 80201fa:	2148      	movs	r1, #72	@ 0x48
 80201fc:	f001 fbf5 	bl	80219ea <_ZdlPvj>
 8020200:	4620      	mov	r0, r4
 8020202:	bd10      	pop	{r4, pc}

08020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>:
 8020204:	b507      	push	{r0, r1, r2, lr}
 8020206:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 802020a:	ab01      	add	r3, sp, #4
 802020c:	6809      	ldr	r1, [r1, #0]
 802020e:	6800      	ldr	r0, [r0, #0]
 8020210:	f7f3 fdfc 	bl	8013e0c <_ZN8touchgfx6muldivElllRl>
 8020214:	b003      	add	sp, #12
 8020216:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0802021c <_ZN8touchgfx7CWRUtil4sineEi>:
 802021c:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8020220:	fb90 f2f3 	sdiv	r2, r0, r3
 8020224:	fb02 0013 	mls	r0, r2, r3, r0
 8020228:	2800      	cmp	r0, #0
 802022a:	bfb8      	it	lt
 802022c:	18c0      	addlt	r0, r0, r3
 802022e:	4b0a      	ldr	r3, [pc, #40]	@ (8020258 <_ZN8touchgfx7CWRUtil4sineEi+0x3c>)
 8020230:	285a      	cmp	r0, #90	@ 0x5a
 8020232:	dc02      	bgt.n	802023a <_ZN8touchgfx7CWRUtil4sineEi+0x1e>
 8020234:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020238:	4770      	bx	lr
 802023a:	28b4      	cmp	r0, #180	@ 0xb4
 802023c:	dc02      	bgt.n	8020244 <_ZN8touchgfx7CWRUtil4sineEi+0x28>
 802023e:	f1c0 00b4 	rsb	r0, r0, #180	@ 0xb4
 8020242:	e7f7      	b.n	8020234 <_ZN8touchgfx7CWRUtil4sineEi+0x18>
 8020244:	f5b0 7f87 	cmp.w	r0, #270	@ 0x10e
 8020248:	bfd4      	ite	le
 802024a:	38b4      	suble	r0, #180	@ 0xb4
 802024c:	f5c0 70b4 	rsbgt	r0, r0, #360	@ 0x168
 8020250:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8020254:	4240      	negs	r0, r0
 8020256:	4770      	bx	lr
 8020258:	08026118 	.word	0x08026118

0802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>:
 802025c:	f44f 5334 	mov.w	r3, #11520	@ 0x2d00
 8020260:	fb90 f2f3 	sdiv	r2, r0, r3
 8020264:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020266:	fb02 0013 	mls	r0, r2, r3, r0
 802026a:	2800      	cmp	r0, #0
 802026c:	bfb8      	it	lt
 802026e:	18c0      	addlt	r0, r0, r3
 8020270:	1144      	asrs	r4, r0, #5
 8020272:	f000 061f 	and.w	r6, r0, #31
 8020276:	4620      	mov	r0, r4
 8020278:	f7ff ffd0 	bl	802021c <_ZN8touchgfx7CWRUtil4sineEi>
 802027c:	4605      	mov	r5, r0
 802027e:	b90e      	cbnz	r6, 8020284 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x28>
 8020280:	b002      	add	sp, #8
 8020282:	bd70      	pop	{r4, r5, r6, pc}
 8020284:	1c60      	adds	r0, r4, #1
 8020286:	f7ff ffc9 	bl	802021c <_ZN8touchgfx7CWRUtil4sineEi>
 802028a:	ab01      	add	r3, sp, #4
 802028c:	2220      	movs	r2, #32
 802028e:	4631      	mov	r1, r6
 8020290:	1b40      	subs	r0, r0, r5
 8020292:	f7f3 fdbb 	bl	8013e0c <_ZN8touchgfx6muldivElllRl>
 8020296:	4428      	add	r0, r5
 8020298:	e7f2      	b.n	8020280 <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E+0x24>

0802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>:
 802029a:	b508      	push	{r3, lr}
 802029c:	f5c0 6034 	rsb	r0, r0, #2880	@ 0xb40
 80202a0:	f7ff ffdc 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80202a4:	bd08      	pop	{r3, pc}
	...

080202a8 <_ZN8touchgfx6CircleC1Ev>:
 80202a8:	b510      	push	{r4, lr}
 80202aa:	4604      	mov	r4, r0
 80202ac:	f7ef febc 	bl	8010028 <_ZN8touchgfx12CanvasWidgetC1Ev>
 80202b0:	4b08      	ldr	r3, [pc, #32]	@ (80202d4 <_ZN8touchgfx6CircleC1Ev+0x2c>)
 80202b2:	f44f 5234 	mov.w	r2, #11520	@ 0x2d00
 80202b6:	4620      	mov	r0, r4
 80202b8:	6023      	str	r3, [r4, #0]
 80202ba:	2300      	movs	r3, #0
 80202bc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 80202c0:	f24b 4205 	movw	r2, #46085	@ 0xb405
 80202c4:	60a3      	str	r3, [r4, #8]
 80202c6:	e9c4 330b 	strd	r3, r3, [r4, #44]	@ 0x2c
 80202ca:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
 80202ce:	f8a4 2044 	strh.w	r2, [r4, #68]	@ 0x44
 80202d2:	bd10      	pop	{r4, pc}
 80202d4:	080261d8 	.word	0x080261d8

080202d8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>:
 80202d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202dc:	428a      	cmp	r2, r1
 80202de:	4680      	mov	r8, r0
 80202e0:	4610      	mov	r0, r2
 80202e2:	4699      	mov	r9, r3
 80202e4:	bfaa      	itet	ge
 80202e6:	460a      	movge	r2, r1
 80202e8:	460b      	movlt	r3, r1
 80202ea:	4603      	movge	r3, r0
 80202ec:	b085      	sub	sp, #20
 80202ee:	f8d8 4040 	ldr.w	r4, [r8, #64]	@ 0x40
 80202f2:	f108 0a34 	add.w	sl, r8, #52	@ 0x34
 80202f6:	1a99      	subs	r1, r3, r2
 80202f8:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 80202fa:	f5b1 5f34 	cmp.w	r1, #11520	@ 0x2d00
 80202fe:	bfa4      	itt	ge
 8020300:	f44f 5334 	movge.w	r3, #11520	@ 0x2d00
 8020304:	2200      	movge	r2, #0
 8020306:	e9dd 760e 	ldrd	r7, r6, [sp, #56]	@ 0x38
 802030a:	9300      	str	r3, [sp, #0]
 802030c:	f102 0b01 	add.w	fp, r2, #1
 8020310:	2c00      	cmp	r4, #0
 8020312:	f040 80ae 	bne.w	8020472 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x19a>
 8020316:	4610      	mov	r0, r2
 8020318:	9201      	str	r2, [sp, #4]
 802031a:	f7ff ff9f 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802031e:	a903      	add	r1, sp, #12
 8020320:	9003      	str	r0, [sp, #12]
 8020322:	4650      	mov	r0, sl
 8020324:	f7ff ff6e 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020328:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 802032c:	9a01      	ldr	r2, [sp, #4]
 802032e:	4408      	add	r0, r1
 8020330:	f8d9 1000 	ldr.w	r1, [r9]
 8020334:	4281      	cmp	r1, r0
 8020336:	bfc8      	it	gt
 8020338:	f8c9 0000 	strgt.w	r0, [r9]
 802033c:	6839      	ldr	r1, [r7, #0]
 802033e:	4288      	cmp	r0, r1
 8020340:	bfc8      	it	gt
 8020342:	6038      	strgt	r0, [r7, #0]
 8020344:	4610      	mov	r0, r2
 8020346:	f7ff ffa8 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802034a:	a903      	add	r1, sp, #12
 802034c:	9003      	str	r0, [sp, #12]
 802034e:	4650      	mov	r0, sl
 8020350:	f7ff ff58 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020354:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8020358:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 802035c:	1a10      	subs	r0, r2, r0
 802035e:	6832      	ldr	r2, [r6, #0]
 8020360:	4282      	cmp	r2, r0
 8020362:	bfc8      	it	gt
 8020364:	6030      	strgt	r0, [r6, #0]
 8020366:	682a      	ldr	r2, [r5, #0]
 8020368:	4290      	cmp	r0, r2
 802036a:	fb9b f2f1 	sdiv	r2, fp, r1
 802036e:	fb01 b212 	mls	r2, r1, r2, fp
 8020372:	bfc8      	it	gt
 8020374:	6028      	strgt	r0, [r5, #0]
 8020376:	1a8a      	subs	r2, r1, r2
 8020378:	fb92 f0f1 	sdiv	r0, r2, r1
 802037c:	fb01 2210 	mls	r2, r1, r0, r2
 8020380:	4493      	add	fp, r2
 8020382:	9b00      	ldr	r3, [sp, #0]
 8020384:	455b      	cmp	r3, fp
 8020386:	db2a      	blt.n	80203de <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x106>
 8020388:	4658      	mov	r0, fp
 802038a:	f7ff ff67 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802038e:	a903      	add	r1, sp, #12
 8020390:	9003      	str	r0, [sp, #12]
 8020392:	4650      	mov	r0, sl
 8020394:	f7ff ff36 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020398:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 802039c:	4410      	add	r0, r2
 802039e:	f8d9 2000 	ldr.w	r2, [r9]
 80203a2:	4282      	cmp	r2, r0
 80203a4:	bfc8      	it	gt
 80203a6:	f8c9 0000 	strgt.w	r0, [r9]
 80203aa:	683a      	ldr	r2, [r7, #0]
 80203ac:	4290      	cmp	r0, r2
 80203ae:	bfc8      	it	gt
 80203b0:	6038      	strgt	r0, [r7, #0]
 80203b2:	4658      	mov	r0, fp
 80203b4:	f7ff ff71 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80203b8:	a903      	add	r1, sp, #12
 80203ba:	9003      	str	r0, [sp, #12]
 80203bc:	4650      	mov	r0, sl
 80203be:	f7ff ff21 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80203c2:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80203c6:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 80203ca:	1a10      	subs	r0, r2, r0
 80203cc:	6832      	ldr	r2, [r6, #0]
 80203ce:	4282      	cmp	r2, r0
 80203d0:	bfc8      	it	gt
 80203d2:	6030      	strgt	r0, [r6, #0]
 80203d4:	682a      	ldr	r2, [r5, #0]
 80203d6:	4290      	cmp	r0, r2
 80203d8:	bfc8      	it	gt
 80203da:	6028      	strgt	r0, [r5, #0]
 80203dc:	e7d1      	b.n	8020382 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0xaa>
 80203de:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 80203e2:	9b00      	ldr	r3, [sp, #0]
 80203e4:	455b      	cmp	r3, fp
 80203e6:	dd27      	ble.n	8020438 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x160>
 80203e8:	4618      	mov	r0, r3
 80203ea:	f7ff ff37 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80203ee:	a903      	add	r1, sp, #12
 80203f0:	9003      	str	r0, [sp, #12]
 80203f2:	4650      	mov	r0, sl
 80203f4:	f7ff ff06 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80203f8:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80203fc:	4410      	add	r0, r2
 80203fe:	f8d9 2000 	ldr.w	r2, [r9]
 8020402:	4282      	cmp	r2, r0
 8020404:	bfc8      	it	gt
 8020406:	f8c9 0000 	strgt.w	r0, [r9]
 802040a:	683a      	ldr	r2, [r7, #0]
 802040c:	4290      	cmp	r0, r2
 802040e:	bfc8      	it	gt
 8020410:	6038      	strgt	r0, [r7, #0]
 8020412:	9800      	ldr	r0, [sp, #0]
 8020414:	f7ff ff41 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020418:	a903      	add	r1, sp, #12
 802041a:	9003      	str	r0, [sp, #12]
 802041c:	4650      	mov	r0, sl
 802041e:	f7ff fef1 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020422:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 8020426:	1a10      	subs	r0, r2, r0
 8020428:	6832      	ldr	r2, [r6, #0]
 802042a:	4282      	cmp	r2, r0
 802042c:	bfc8      	it	gt
 802042e:	6030      	strgt	r0, [r6, #0]
 8020430:	682a      	ldr	r2, [r5, #0]
 8020432:	4290      	cmp	r0, r2
 8020434:	bfc8      	it	gt
 8020436:	6028      	strgt	r0, [r5, #0]
 8020438:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 802043c:	f8d9 1000 	ldr.w	r1, [r9]
 8020440:	4291      	cmp	r1, r2
 8020442:	bfc8      	it	gt
 8020444:	f8c9 2000 	strgt.w	r2, [r9]
 8020448:	683a      	ldr	r2, [r7, #0]
 802044a:	f8d8 302c 	ldr.w	r3, [r8, #44]	@ 0x2c
 802044e:	429a      	cmp	r2, r3
 8020450:	bfb8      	it	lt
 8020452:	603b      	strlt	r3, [r7, #0]
 8020454:	6832      	ldr	r2, [r6, #0]
 8020456:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 802045a:	429a      	cmp	r2, r3
 802045c:	bfc8      	it	gt
 802045e:	6033      	strgt	r3, [r6, #0]
 8020460:	682a      	ldr	r2, [r5, #0]
 8020462:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 8020466:	429a      	cmp	r2, r3
 8020468:	da00      	bge.n	802046c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 802046a:	602b      	str	r3, [r5, #0]
 802046c:	b005      	add	sp, #20
 802046e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020472:	2002      	movs	r0, #2
 8020474:	3401      	adds	r4, #1
 8020476:	9201      	str	r2, [sp, #4]
 8020478:	fb94 f4f0 	sdiv	r4, r4, r0
 802047c:	4610      	mov	r0, r2
 802047e:	f7ff feed 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020482:	a903      	add	r1, sp, #12
 8020484:	9003      	str	r0, [sp, #12]
 8020486:	4650      	mov	r0, sl
 8020488:	f7ff febc 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802048c:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8020490:	9a01      	ldr	r2, [sp, #4]
 8020492:	4408      	add	r0, r1
 8020494:	f8d9 1000 	ldr.w	r1, [r9]
 8020498:	1b03      	subs	r3, r0, r4
 802049a:	4420      	add	r0, r4
 802049c:	4299      	cmp	r1, r3
 802049e:	bfc8      	it	gt
 80204a0:	f8c9 3000 	strgt.w	r3, [r9]
 80204a4:	6839      	ldr	r1, [r7, #0]
 80204a6:	428b      	cmp	r3, r1
 80204a8:	bfc8      	it	gt
 80204aa:	603b      	strgt	r3, [r7, #0]
 80204ac:	f8d9 1000 	ldr.w	r1, [r9]
 80204b0:	4281      	cmp	r1, r0
 80204b2:	bfc8      	it	gt
 80204b4:	f8c9 0000 	strgt.w	r0, [r9]
 80204b8:	6839      	ldr	r1, [r7, #0]
 80204ba:	4288      	cmp	r0, r1
 80204bc:	bfc8      	it	gt
 80204be:	6038      	strgt	r0, [r7, #0]
 80204c0:	4610      	mov	r0, r2
 80204c2:	f7ff feea 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80204c6:	a903      	add	r1, sp, #12
 80204c8:	9003      	str	r0, [sp, #12]
 80204ca:	4650      	mov	r0, sl
 80204cc:	f7ff fe9a 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80204d0:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 80204d4:	1a10      	subs	r0, r2, r0
 80204d6:	6832      	ldr	r2, [r6, #0]
 80204d8:	1b01      	subs	r1, r0, r4
 80204da:	4420      	add	r0, r4
 80204dc:	428a      	cmp	r2, r1
 80204de:	bfc8      	it	gt
 80204e0:	6031      	strgt	r1, [r6, #0]
 80204e2:	682a      	ldr	r2, [r5, #0]
 80204e4:	4291      	cmp	r1, r2
 80204e6:	bfc8      	it	gt
 80204e8:	6029      	strgt	r1, [r5, #0]
 80204ea:	f44f 6134 	mov.w	r1, #2880	@ 0xb40
 80204ee:	6832      	ldr	r2, [r6, #0]
 80204f0:	4282      	cmp	r2, r0
 80204f2:	bfc8      	it	gt
 80204f4:	6030      	strgt	r0, [r6, #0]
 80204f6:	682a      	ldr	r2, [r5, #0]
 80204f8:	4290      	cmp	r0, r2
 80204fa:	fb9b f2f1 	sdiv	r2, fp, r1
 80204fe:	fb01 b212 	mls	r2, r1, r2, fp
 8020502:	bfc8      	it	gt
 8020504:	6028      	strgt	r0, [r5, #0]
 8020506:	1a8a      	subs	r2, r1, r2
 8020508:	fb92 f0f1 	sdiv	r0, r2, r1
 802050c:	fb01 2210 	mls	r2, r1, r0, r2
 8020510:	4493      	add	fp, r2
 8020512:	9b00      	ldr	r3, [sp, #0]
 8020514:	455b      	cmp	r3, fp
 8020516:	db40      	blt.n	802059a <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x2c2>
 8020518:	4658      	mov	r0, fp
 802051a:	f7ff fe9f 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 802051e:	a903      	add	r1, sp, #12
 8020520:	9003      	str	r0, [sp, #12]
 8020522:	4650      	mov	r0, sl
 8020524:	f7ff fe6e 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020528:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 802052c:	4410      	add	r0, r2
 802052e:	f8d9 2000 	ldr.w	r2, [r9]
 8020532:	1b01      	subs	r1, r0, r4
 8020534:	4420      	add	r0, r4
 8020536:	428a      	cmp	r2, r1
 8020538:	bfc8      	it	gt
 802053a:	f8c9 1000 	strgt.w	r1, [r9]
 802053e:	683a      	ldr	r2, [r7, #0]
 8020540:	4291      	cmp	r1, r2
 8020542:	bfc8      	it	gt
 8020544:	6039      	strgt	r1, [r7, #0]
 8020546:	f8d9 2000 	ldr.w	r2, [r9]
 802054a:	4282      	cmp	r2, r0
 802054c:	bfc8      	it	gt
 802054e:	f8c9 0000 	strgt.w	r0, [r9]
 8020552:	683a      	ldr	r2, [r7, #0]
 8020554:	4290      	cmp	r0, r2
 8020556:	bfc8      	it	gt
 8020558:	6038      	strgt	r0, [r7, #0]
 802055a:	4658      	mov	r0, fp
 802055c:	f7ff fe9d 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020560:	a903      	add	r1, sp, #12
 8020562:	9003      	str	r0, [sp, #12]
 8020564:	4650      	mov	r0, sl
 8020566:	f7ff fe4d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802056a:	f8d8 2030 	ldr.w	r2, [r8, #48]	@ 0x30
 802056e:	f50b 6b34 	add.w	fp, fp, #2880	@ 0xb40
 8020572:	1a10      	subs	r0, r2, r0
 8020574:	6832      	ldr	r2, [r6, #0]
 8020576:	1b01      	subs	r1, r0, r4
 8020578:	4420      	add	r0, r4
 802057a:	428a      	cmp	r2, r1
 802057c:	bfc8      	it	gt
 802057e:	6031      	strgt	r1, [r6, #0]
 8020580:	682a      	ldr	r2, [r5, #0]
 8020582:	4291      	cmp	r1, r2
 8020584:	bfc8      	it	gt
 8020586:	6029      	strgt	r1, [r5, #0]
 8020588:	6832      	ldr	r2, [r6, #0]
 802058a:	4282      	cmp	r2, r0
 802058c:	bfc8      	it	gt
 802058e:	6030      	strgt	r0, [r6, #0]
 8020590:	682a      	ldr	r2, [r5, #0]
 8020592:	4290      	cmp	r0, r2
 8020594:	bfc8      	it	gt
 8020596:	6028      	strgt	r0, [r5, #0]
 8020598:	e7bb      	b.n	8020512 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x23a>
 802059a:	f5ab 6b34 	sub.w	fp, fp, #2880	@ 0xb40
 802059e:	9b00      	ldr	r3, [sp, #0]
 80205a0:	455b      	cmp	r3, fp
 80205a2:	f77f af63 	ble.w	802046c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>
 80205a6:	4618      	mov	r0, r3
 80205a8:	f7ff fe58 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80205ac:	a903      	add	r1, sp, #12
 80205ae:	9003      	str	r0, [sp, #12]
 80205b0:	4650      	mov	r0, sl
 80205b2:	f7ff fe27 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80205b6:	f8d8 202c 	ldr.w	r2, [r8, #44]	@ 0x2c
 80205ba:	4410      	add	r0, r2
 80205bc:	f8d9 2000 	ldr.w	r2, [r9]
 80205c0:	1b01      	subs	r1, r0, r4
 80205c2:	4420      	add	r0, r4
 80205c4:	428a      	cmp	r2, r1
 80205c6:	bfc8      	it	gt
 80205c8:	f8c9 1000 	strgt.w	r1, [r9]
 80205cc:	683a      	ldr	r2, [r7, #0]
 80205ce:	4291      	cmp	r1, r2
 80205d0:	bfc8      	it	gt
 80205d2:	6039      	strgt	r1, [r7, #0]
 80205d4:	f8d9 2000 	ldr.w	r2, [r9]
 80205d8:	4282      	cmp	r2, r0
 80205da:	bfc8      	it	gt
 80205dc:	f8c9 0000 	strgt.w	r0, [r9]
 80205e0:	683b      	ldr	r3, [r7, #0]
 80205e2:	4298      	cmp	r0, r3
 80205e4:	bfc8      	it	gt
 80205e6:	6038      	strgt	r0, [r7, #0]
 80205e8:	9800      	ldr	r0, [sp, #0]
 80205ea:	f7ff fe56 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80205ee:	a903      	add	r1, sp, #12
 80205f0:	9003      	str	r0, [sp, #12]
 80205f2:	4650      	mov	r0, sl
 80205f4:	f7ff fe06 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80205f8:	f8d8 3030 	ldr.w	r3, [r8, #48]	@ 0x30
 80205fc:	6832      	ldr	r2, [r6, #0]
 80205fe:	1a18      	subs	r0, r3, r0
 8020600:	1b03      	subs	r3, r0, r4
 8020602:	4404      	add	r4, r0
 8020604:	429a      	cmp	r2, r3
 8020606:	bfc8      	it	gt
 8020608:	6033      	strgt	r3, [r6, #0]
 802060a:	682a      	ldr	r2, [r5, #0]
 802060c:	4293      	cmp	r3, r2
 802060e:	bfc8      	it	gt
 8020610:	602b      	strgt	r3, [r5, #0]
 8020612:	6833      	ldr	r3, [r6, #0]
 8020614:	42a3      	cmp	r3, r4
 8020616:	bfc8      	it	gt
 8020618:	6034      	strgt	r4, [r6, #0]
 802061a:	682b      	ldr	r3, [r5, #0]
 802061c:	429c      	cmp	r4, r3
 802061e:	bfc8      	it	gt
 8020620:	602c      	strgt	r4, [r5, #0]
 8020622:	e723      	b.n	802046c <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_+0x194>

08020624 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>:
 8020624:	b530      	push	{r4, r5, lr}
 8020626:	4604      	mov	r4, r0
 8020628:	4608      	mov	r0, r1
 802062a:	4611      	mov	r1, r2
 802062c:	461a      	mov	r2, r3
 802062e:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8020632:	b089      	sub	sp, #36	@ 0x24
 8020634:	2500      	movs	r5, #0
 8020636:	015b      	lsls	r3, r3, #5
 8020638:	9505      	str	r5, [sp, #20]
 802063a:	9304      	str	r3, [sp, #16]
 802063c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8020640:	015b      	lsls	r3, r3, #5
 8020642:	e9cd 3506 	strd	r3, r5, [sp, #24]
 8020646:	ab07      	add	r3, sp, #28
 8020648:	2520      	movs	r5, #32
 802064a:	9302      	str	r3, [sp, #8]
 802064c:	ab06      	add	r3, sp, #24
 802064e:	9301      	str	r3, [sp, #4]
 8020650:	ab05      	add	r3, sp, #20
 8020652:	9300      	str	r3, [sp, #0]
 8020654:	ab04      	add	r3, sp, #16
 8020656:	f7ff fe3f 	bl	80202d8 <_ZNK8touchgfx6Circle20calculateMinimalRectENS_7CWRUtil2Q5ES2_RS2_S3_S3_S3_>
 802065a:	9a04      	ldr	r2, [sp, #16]
 802065c:	9805      	ldr	r0, [sp, #20]
 802065e:	9b06      	ldr	r3, [sp, #24]
 8020660:	9907      	ldr	r1, [sp, #28]
 8020662:	fb92 f2f5 	sdiv	r2, r2, r5
 8020666:	fb90 f0f5 	sdiv	r0, r0, r5
 802066a:	fb93 f3f5 	sdiv	r3, r3, r5
 802066e:	fb91 f1f5 	sdiv	r1, r1, r5
 8020672:	b292      	uxth	r2, r2
 8020674:	3002      	adds	r0, #2
 8020676:	b29b      	uxth	r3, r3
 8020678:	3102      	adds	r1, #2
 802067a:	1a80      	subs	r0, r0, r2
 802067c:	3a01      	subs	r2, #1
 802067e:	1ac9      	subs	r1, r1, r3
 8020680:	3b01      	subs	r3, #1
 8020682:	80a0      	strh	r0, [r4, #4]
 8020684:	4620      	mov	r0, r4
 8020686:	8022      	strh	r2, [r4, #0]
 8020688:	8063      	strh	r3, [r4, #2]
 802068a:	80e1      	strh	r1, [r4, #6]
 802068c:	b009      	add	sp, #36	@ 0x24
 802068e:	bd30      	pop	{r4, r5, pc}

08020690 <_ZNK8touchgfx6Circle14getMinimalRectEv>:
 8020690:	b510      	push	{r4, lr}
 8020692:	4604      	mov	r4, r0
 8020694:	e9d1 230e 	ldrd	r2, r3, [r1, #56]	@ 0x38
 8020698:	f7ff ffc4 	bl	8020624 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 802069c:	4620      	mov	r0, r4
 802069e:	bd10      	pop	{r4, pc}

080206a0 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E>:
 80206a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80206a2:	e9d1 540e 	ldrd	r5, r4, [r1, #56]	@ 0x38
 80206a6:	4606      	mov	r6, r0
 80206a8:	f891 0044 	ldrb.w	r0, [r1, #68]	@ 0x44
 80206ac:	42a5      	cmp	r5, r4
 80206ae:	6813      	ldr	r3, [r2, #0]
 80206b0:	ea4f 1040 	mov.w	r0, r0, lsl #5
 80206b4:	da2b      	bge.n	802070e <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x6e>
 80206b6:	42a3      	cmp	r3, r4
 80206b8:	dd14      	ble.n	80206e4 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x44>
 80206ba:	b168      	cbz	r0, 80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 80206bc:	4267      	negs	r7, r4
 80206be:	fb97 f2f0 	sdiv	r2, r7, r0
 80206c2:	fb00 7212 	mls	r2, r0, r2, r7
 80206c6:	1a82      	subs	r2, r0, r2
 80206c8:	fb92 f7f0 	sdiv	r7, r2, r0
 80206cc:	fb00 2017 	mls	r0, r0, r7, r2
 80206d0:	1a24      	subs	r4, r4, r0
 80206d2:	42ac      	cmp	r4, r5
 80206d4:	bfb8      	it	lt
 80206d6:	462c      	movlt	r4, r5
 80206d8:	4630      	mov	r0, r6
 80206da:	4622      	mov	r2, r4
 80206dc:	f7ff ffa2 	bl	8020624 <_ZNK8touchgfx6Circle14getMinimalRectENS_7CWRUtil2Q5ES2_>
 80206e0:	4630      	mov	r0, r6
 80206e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80206e4:	42ab      	cmp	r3, r5
 80206e6:	dd0e      	ble.n	8020706 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80206e8:	b168      	cbz	r0, 8020706 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x66>
 80206ea:	425f      	negs	r7, r3
 80206ec:	fb97 f2f0 	sdiv	r2, r7, r0
 80206f0:	fb00 7212 	mls	r2, r0, r2, r7
 80206f4:	1a82      	subs	r2, r0, r2
 80206f6:	fb92 f7f0 	sdiv	r7, r2, r0
 80206fa:	fb00 2017 	mls	r0, r0, r7, r2
 80206fe:	1a1b      	subs	r3, r3, r0
 8020700:	42ab      	cmp	r3, r5
 8020702:	bfb8      	it	lt
 8020704:	462b      	movlt	r3, r5
 8020706:	4622      	mov	r2, r4
 8020708:	461c      	mov	r4, r3
 802070a:	4613      	mov	r3, r2
 802070c:	e7e4      	b.n	80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 802070e:	42a3      	cmp	r3, r4
 8020710:	da10      	bge.n	8020734 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x94>
 8020712:	b148      	cbz	r0, 8020728 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x88>
 8020714:	fb94 f2f0 	sdiv	r2, r4, r0
 8020718:	fb00 4212 	mls	r2, r0, r2, r4
 802071c:	1a82      	subs	r2, r0, r2
 802071e:	fb92 f7f0 	sdiv	r7, r2, r0
 8020722:	fb00 2017 	mls	r0, r0, r7, r2
 8020726:	4404      	add	r4, r0
 8020728:	42a5      	cmp	r5, r4
 802072a:	bfa8      	it	ge
 802072c:	4625      	movge	r5, r4
 802072e:	461c      	mov	r4, r3
 8020730:	462b      	mov	r3, r5
 8020732:	e7d1      	b.n	80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8020734:	42ab      	cmp	r3, r5
 8020736:	dacf      	bge.n	80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 8020738:	2800      	cmp	r0, #0
 802073a:	d0cd      	beq.n	80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>
 802073c:	fb93 f2f0 	sdiv	r2, r3, r0
 8020740:	fb00 3212 	mls	r2, r0, r2, r3
 8020744:	1a82      	subs	r2, r0, r2
 8020746:	fb92 f7f0 	sdiv	r7, r2, r0
 802074a:	fb00 2017 	mls	r0, r0, r7, r2
 802074e:	4403      	add	r3, r0
 8020750:	42ab      	cmp	r3, r5
 8020752:	bfa8      	it	ge
 8020754:	462b      	movge	r3, r5
 8020756:	e7bf      	b.n	80206d8 <_ZNK8touchgfx6Circle32getMinimalRectForUpdatedEndAngleERKNS_7CWRUtil2Q5E+0x38>

08020758 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE>:
 8020758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802075c:	e9d0 650e 	ldrd	r6, r5, [r0, #56]	@ 0x38
 8020760:	468a      	mov	sl, r1
 8020762:	f9b0 902c 	ldrsh.w	r9, [r0, #44]	@ 0x2c
 8020766:	42b5      	cmp	r5, r6
 8020768:	f9b0 b030 	ldrsh.w	fp, [r0, #48]	@ 0x30
 802076c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802076e:	b0af      	sub	sp, #188	@ 0xbc
 8020770:	bfa4      	itt	ge
 8020772:	462b      	movge	r3, r5
 8020774:	4635      	movge	r5, r6
 8020776:	4604      	mov	r4, r0
 8020778:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 802077a:	bfa8      	it	ge
 802077c:	461e      	movge	r6, r3
 802077e:	1b73      	subs	r3, r6, r5
 8020780:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8020784:	f04f 0320 	mov.w	r3, #32
 8020788:	bfa4      	itt	ge
 802078a:	f44f 5634 	movge.w	r6, #11520	@ 0x2d00
 802078e:	2500      	movge	r5, #0
 8020790:	fb99 f9f3 	sdiv	r9, r9, r3
 8020794:	fb9b fbf3 	sdiv	fp, fp, r3
 8020798:	2900      	cmp	r1, #0
 802079a:	f000 80fb 	beq.w	8020994 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x23c>
 802079e:	f9ba 0000 	ldrsh.w	r0, [sl]
 80207a2:	f9ba 3002 	ldrsh.w	r3, [sl, #2]
 80207a6:	eba9 0700 	sub.w	r7, r9, r0
 80207aa:	ebab 0803 	sub.w	r8, fp, r3
 80207ae:	ea87 7ce7 	eor.w	ip, r7, r7, asr #31
 80207b2:	ebac 7ce7 	sub.w	ip, ip, r7, asr #31
 80207b6:	f8ba 7004 	ldrh.w	r7, [sl, #4]
 80207ba:	4407      	add	r7, r0
 80207bc:	ea88 70e8 	eor.w	r0, r8, r8, asr #31
 80207c0:	eba0 70e8 	sub.w	r0, r0, r8, asr #31
 80207c4:	f8ba 8006 	ldrh.w	r8, [sl, #6]
 80207c8:	b23f      	sxth	r7, r7
 80207ca:	4498      	add	r8, r3
 80207cc:	2302      	movs	r3, #2
 80207ce:	eba9 0707 	sub.w	r7, r9, r7
 80207d2:	fa0f f888 	sxth.w	r8, r8
 80207d6:	9303      	str	r3, [sp, #12]
 80207d8:	2f00      	cmp	r7, #0
 80207da:	ebab 0808 	sub.w	r8, fp, r8
 80207de:	bfb8      	it	lt
 80207e0:	427f      	neglt	r7, r7
 80207e2:	f1b8 0f00 	cmp.w	r8, #0
 80207e6:	bfb8      	it	lt
 80207e8:	f1c8 0800 	rsblt	r8, r8, #0
 80207ec:	45bc      	cmp	ip, r7
 80207ee:	bfcc      	ite	gt
 80207f0:	f10c 0701 	addgt.w	r7, ip, #1
 80207f4:	3701      	addle	r7, #1
 80207f6:	4540      	cmp	r0, r8
 80207f8:	bfc8      	it	gt
 80207fa:	f100 0801 	addgt.w	r8, r0, #1
 80207fe:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 8020802:	bfd8      	it	le
 8020804:	f108 0801 	addle.w	r8, r8, #1
 8020808:	3001      	adds	r0, #1
 802080a:	fb08 f808 	mul.w	r8, r8, r8
 802080e:	1040      	asrs	r0, r0, #1
 8020810:	fb07 8707 	mla	r7, r7, r7, r8
 8020814:	f1c0 005a 	rsb	r0, r0, #90	@ 0x5a
 8020818:	fb91 f1f3 	sdiv	r1, r1, r3
 802081c:	1a52      	subs	r2, r2, r1
 802081e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020820:	f7ff fcfc 	bl	802021c <_ZN8touchgfx7CWRUtil4sineEi>
 8020824:	a92e      	add	r1, sp, #184	@ 0xb8
 8020826:	f841 0d74 	str.w	r0, [r1, #-116]!
 802082a:	a80f      	add	r0, sp, #60	@ 0x3c
 802082c:	f7ff fcea 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020830:	f04f 0c20 	mov.w	ip, #32
 8020834:	9b03      	ldr	r3, [sp, #12]
 8020836:	fb90 f0fc 	sdiv	r0, r0, ip
 802083a:	4340      	muls	r0, r0
 802083c:	4287      	cmp	r7, r0
 802083e:	da04      	bge.n	802084a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xf2>
 8020840:	2401      	movs	r4, #1
 8020842:	4620      	mov	r0, r4
 8020844:	b02f      	add	sp, #188	@ 0xbc
 8020846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802084a:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 802084c:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 802084e:	fb91 f2f3 	sdiv	r2, r1, r3
 8020852:	4402      	add	r2, r0
 8020854:	fb92 f2fc 	sdiv	r2, r2, ip
 8020858:	f9ba 1000 	ldrsh.w	r1, [sl]
 802085c:	3201      	adds	r2, #1
 802085e:	f8ba 3004 	ldrh.w	r3, [sl, #4]
 8020862:	4352      	muls	r2, r2
 8020864:	440b      	add	r3, r1
 8020866:	b21b      	sxth	r3, r3
 8020868:	454b      	cmp	r3, r9
 802086a:	bfa8      	it	ge
 802086c:	464b      	movge	r3, r9
 802086e:	428b      	cmp	r3, r1
 8020870:	bfac      	ite	ge
 8020872:	eba9 0903 	subge.w	r9, r9, r3
 8020876:	eba9 0901 	sublt.w	r9, r9, r1
 802087a:	f8ba 3006 	ldrh.w	r3, [sl, #6]
 802087e:	f9ba 1002 	ldrsh.w	r1, [sl, #2]
 8020882:	440b      	add	r3, r1
 8020884:	b21b      	sxth	r3, r3
 8020886:	455b      	cmp	r3, fp
 8020888:	bfa8      	it	ge
 802088a:	465b      	movge	r3, fp
 802088c:	428b      	cmp	r3, r1
 802088e:	bfac      	ite	ge
 8020890:	ebab 0b03 	subge.w	fp, fp, r3
 8020894:	ebab 0b01 	sublt.w	fp, fp, r1
 8020898:	fb0b fb0b 	mul.w	fp, fp, fp
 802089c:	fb09 b909 	mla	r9, r9, r9, fp
 80208a0:	4591      	cmp	r9, r2
 80208a2:	dccd      	bgt.n	8020840 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xe8>
 80208a4:	f10d 093c 	add.w	r9, sp, #60	@ 0x3c
 80208a8:	4621      	mov	r1, r4
 80208aa:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
 80208ac:	4648      	mov	r0, r9
 80208ae:	f7f2 fe57 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80208b2:	6823      	ldr	r3, [r4, #0]
 80208b4:	4620      	mov	r0, r4
 80208b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80208b8:	4798      	blx	r3
 80208ba:	4653      	mov	r3, sl
 80208bc:	9000      	str	r0, [sp, #0]
 80208be:	464a      	mov	r2, r9
 80208c0:	4639      	mov	r1, r7
 80208c2:	a811      	add	r0, sp, #68	@ 0x44
 80208c4:	f7ff f83a 	bl	801f93c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 80208c8:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80208ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80208cc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80208ce:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80208d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80208d4:	dd07      	ble.n	80208e6 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x18e>
 80208d6:	2102      	movs	r1, #2
 80208d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80208dc:	4413      	add	r3, r2
 80208de:	930c      	str	r3, [sp, #48]	@ 0x30
 80208e0:	fb93 f3f1 	sdiv	r3, r3, r1
 80208e4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80208e6:	f04f 0a02 	mov.w	sl, #2
 80208ea:	4628      	mov	r0, r5
 80208ec:	f894 7044 	ldrb.w	r7, [r4, #68]	@ 0x44
 80208f0:	f10d 08b8 	add.w	r8, sp, #184	@ 0xb8
 80208f4:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 80208f8:	017f      	lsls	r7, r7, #5
 80208fa:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80208fe:	930d      	str	r3, [sp, #52]	@ 0x34
 8020900:	f7ff fcac 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020904:	4649      	mov	r1, r9
 8020906:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020908:	a80d      	add	r0, sp, #52	@ 0x34
 802090a:	f7ff fc7b 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802090e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020910:	fb90 f0fa 	sdiv	r0, r0, sl
 8020914:	eb00 0b03 	add.w	fp, r0, r3
 8020918:	4628      	mov	r0, r5
 802091a:	f7ff fcbe 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 802091e:	f848 0d80 	str.w	r0, [r8, #-128]!
 8020922:	a80d      	add	r0, sp, #52	@ 0x34
 8020924:	4641      	mov	r1, r8
 8020926:	f7ff fc6d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802092a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 802092c:	4659      	mov	r1, fp
 802092e:	fb90 f0fa 	sdiv	r0, r0, sl
 8020932:	1a12      	subs	r2, r2, r0
 8020934:	a811      	add	r0, sp, #68	@ 0x44
 8020936:	f7ff f94d 	bl	801fbd4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 802093a:	f105 0a20 	add.w	sl, r5, #32
 802093e:	bb67      	cbnz	r7, 802099a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x242>
 8020940:	46ab      	mov	fp, r5
 8020942:	45b2      	cmp	sl, r6
 8020944:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8020946:	dc33      	bgt.n	80209b0 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x258>
 8020948:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802094a:	4650      	mov	r0, sl
 802094c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8020950:	920d      	str	r2, [sp, #52]	@ 0x34
 8020952:	f7ff fc83 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020956:	4641      	mov	r1, r8
 8020958:	900e      	str	r0, [sp, #56]	@ 0x38
 802095a:	a80d      	add	r0, sp, #52	@ 0x34
 802095c:	f7ff fc52 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020960:	2302      	movs	r3, #2
 8020962:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8020964:	fb90 f0f3 	sdiv	r0, r0, r3
 8020968:	eb00 0b02 	add.w	fp, r0, r2
 802096c:	4650      	mov	r0, sl
 802096e:	f7ff fc94 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020972:	4649      	mov	r1, r9
 8020974:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020976:	a80d      	add	r0, sp, #52	@ 0x34
 8020978:	f7ff fc44 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 802097c:	2302      	movs	r3, #2
 802097e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8020980:	4659      	mov	r1, fp
 8020982:	46d3      	mov	fp, sl
 8020984:	44ba      	add	sl, r7
 8020986:	fb90 f0f3 	sdiv	r0, r0, r3
 802098a:	1a12      	subs	r2, r2, r0
 802098c:	a811      	add	r0, sp, #68	@ 0x44
 802098e:	f7ff f96e 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020992:	e7d6      	b.n	8020942 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1ea>
 8020994:	fb92 f2f3 	sdiv	r2, r2, r3
 8020998:	e75e      	b.n	8020858 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x100>
 802099a:	fb9a f2f7 	sdiv	r2, sl, r7
 802099e:	fb07 a212 	mls	r2, r7, r2, sl
 80209a2:	1aba      	subs	r2, r7, r2
 80209a4:	fb92 f1f7 	sdiv	r1, r2, r7
 80209a8:	fb07 2211 	mls	r2, r7, r1, r2
 80209ac:	4492      	add	sl, r2
 80209ae:	e7c7      	b.n	8020940 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x1e8>
 80209b0:	455e      	cmp	r6, fp
 80209b2:	dd23      	ble.n	80209fc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2a4>
 80209b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80209b6:	f04f 0a02 	mov.w	sl, #2
 80209ba:	4630      	mov	r0, r6
 80209bc:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 80209c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80209c2:	f7ff fc4b 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 80209c6:	4641      	mov	r1, r8
 80209c8:	900e      	str	r0, [sp, #56]	@ 0x38
 80209ca:	a80d      	add	r0, sp, #52	@ 0x34
 80209cc:	f7ff fc1a 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80209d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80209d2:	fb90 f0fa 	sdiv	r0, r0, sl
 80209d6:	4403      	add	r3, r0
 80209d8:	4630      	mov	r0, r6
 80209da:	9303      	str	r3, [sp, #12]
 80209dc:	f7ff fc5d 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 80209e0:	4649      	mov	r1, r9
 80209e2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80209e4:	a80d      	add	r0, sp, #52	@ 0x34
 80209e6:	f7ff fc0d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 80209ea:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80209ec:	9b03      	ldr	r3, [sp, #12]
 80209ee:	fb90 f0fa 	sdiv	r0, r0, sl
 80209f2:	4619      	mov	r1, r3
 80209f4:	1a12      	subs	r2, r2, r0
 80209f6:	a811      	add	r0, sp, #68	@ 0x44
 80209f8:	f7ff f939 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 80209fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80209fe:	b99b      	cbnz	r3, 8020a28 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2d0>
 8020a00:	1b75      	subs	r5, r6, r5
 8020a02:	f5b5 5f34 	cmp.w	r5, #11520	@ 0x2d00
 8020a06:	da04      	bge.n	8020a12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8020a08:	a811      	add	r0, sp, #68	@ 0x44
 8020a0a:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8020a0e:	f7ff f92e 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020a12:	21ff      	movs	r1, #255	@ 0xff
 8020a14:	a811      	add	r0, sp, #68	@ 0x44
 8020a16:	f7ff f825 	bl	801fa64 <_ZN8touchgfx6Canvas6renderEh>
 8020a1a:	4604      	mov	r4, r0
 8020a1c:	4b89      	ldr	r3, [pc, #548]	@ (8020c44 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4ec>)
 8020a1e:	a816      	add	r0, sp, #88	@ 0x58
 8020a20:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a22:	f7ef fd61 	bl	80104e8 <_ZN8touchgfx7OutlineD1Ev>
 8020a26:	e70c      	b.n	8020842 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0xea>
 8020a28:	e9dd 2317 	ldrd	r2, r3, [sp, #92]	@ 0x5c
 8020a2c:	429a      	cmp	r2, r3
 8020a2e:	f0c0 8107 	bcc.w	8020c40 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4e8>
 8020a32:	1b73      	subs	r3, r6, r5
 8020a34:	f894 a045 	ldrb.w	sl, [r4, #69]	@ 0x45
 8020a38:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8020a3c:	ea4f 1a4a 	mov.w	sl, sl, lsl #5
 8020a40:	9303      	str	r3, [sp, #12]
 8020a42:	da43      	bge.n	8020acc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8020a44:	4630      	mov	r0, r6
 8020a46:	f7ff fc09 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020a4a:	4649      	mov	r1, r9
 8020a4c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020a4e:	a80b      	add	r0, sp, #44	@ 0x2c
 8020a50:	f7ff fbd8 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020a54:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020a56:	18c3      	adds	r3, r0, r3
 8020a58:	4630      	mov	r0, r6
 8020a5a:	9305      	str	r3, [sp, #20]
 8020a5c:	f7ff fc1d 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020a60:	4649      	mov	r1, r9
 8020a62:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020a64:	a80b      	add	r0, sp, #44	@ 0x2c
 8020a66:	f7ff fbcd 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020a6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020a6c:	f506 52b4 	add.w	r2, r6, #5760	@ 0x1680
 8020a70:	1a1b      	subs	r3, r3, r0
 8020a72:	9206      	str	r2, [sp, #24]
 8020a74:	9304      	str	r3, [sp, #16]
 8020a76:	eb06 030a 	add.w	r3, r6, sl
 8020a7a:	9a06      	ldr	r2, [sp, #24]
 8020a7c:	4293      	cmp	r3, r2
 8020a7e:	da25      	bge.n	8020acc <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x374>
 8020a80:	4618      	mov	r0, r3
 8020a82:	9308      	str	r3, [sp, #32]
 8020a84:	f7ff fbea 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020a88:	4649      	mov	r1, r9
 8020a8a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020a8c:	a80c      	add	r0, sp, #48	@ 0x30
 8020a8e:	f7ff fbb9 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020a92:	2202      	movs	r2, #2
 8020a94:	9b05      	ldr	r3, [sp, #20]
 8020a96:	9209      	str	r2, [sp, #36]	@ 0x24
 8020a98:	fb90 f0f2 	sdiv	r0, r0, r2
 8020a9c:	18c3      	adds	r3, r0, r3
 8020a9e:	9307      	str	r3, [sp, #28]
 8020aa0:	9b08      	ldr	r3, [sp, #32]
 8020aa2:	4618      	mov	r0, r3
 8020aa4:	f7ff fbf9 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020aa8:	a92e      	add	r1, sp, #184	@ 0xb8
 8020aaa:	f841 0d80 	str.w	r0, [r1, #-128]!
 8020aae:	a80c      	add	r0, sp, #48	@ 0x30
 8020ab0:	f7ff fba8 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020ab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020ab6:	9b04      	ldr	r3, [sp, #16]
 8020ab8:	9907      	ldr	r1, [sp, #28]
 8020aba:	fb90 f2f2 	sdiv	r2, r0, r2
 8020abe:	a811      	add	r0, sp, #68	@ 0x44
 8020ac0:	1a9a      	subs	r2, r3, r2
 8020ac2:	f7ff f8d4 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020ac6:	9b08      	ldr	r3, [sp, #32]
 8020ac8:	4453      	add	r3, sl
 8020aca:	e7d6      	b.n	8020a7a <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x322>
 8020acc:	455e      	cmp	r6, fp
 8020ace:	dd25      	ble.n	8020b1c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c4>
 8020ad0:	4630      	mov	r0, r6
 8020ad2:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8020ad6:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8020ada:	930d      	str	r3, [sp, #52]	@ 0x34
 8020adc:	f7ff fbbe 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020ae0:	4641      	mov	r1, r8
 8020ae2:	900e      	str	r0, [sp, #56]	@ 0x38
 8020ae4:	a80d      	add	r0, sp, #52	@ 0x34
 8020ae6:	f7ff fb8d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020aea:	2202      	movs	r2, #2
 8020aec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020aee:	9204      	str	r2, [sp, #16]
 8020af0:	fb90 f0f2 	sdiv	r0, r0, r2
 8020af4:	eb00 0903 	add.w	r9, r0, r3
 8020af8:	4630      	mov	r0, r6
 8020afa:	f7ff fbce 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020afe:	a92e      	add	r1, sp, #184	@ 0xb8
 8020b00:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8020b04:	a80d      	add	r0, sp, #52	@ 0x34
 8020b06:	f7ff fb7d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020b0a:	9a04      	ldr	r2, [sp, #16]
 8020b0c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020b0e:	4649      	mov	r1, r9
 8020b10:	fb90 f2f2 	sdiv	r2, r0, r2
 8020b14:	a811      	add	r0, sp, #68	@ 0x44
 8020b16:	1a9a      	subs	r2, r3, r2
 8020b18:	f7ff f8a9 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020b1c:	46d9      	mov	r9, fp
 8020b1e:	2602      	movs	r6, #2
 8020b20:	45a9      	cmp	r9, r5
 8020b22:	db25      	blt.n	8020b70 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x418>
 8020b24:	4648      	mov	r0, r9
 8020b26:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8020b2a:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8020b2e:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b30:	f7ff fb94 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020b34:	4641      	mov	r1, r8
 8020b36:	900e      	str	r0, [sp, #56]	@ 0x38
 8020b38:	a80d      	add	r0, sp, #52	@ 0x34
 8020b3a:	f7ff fb63 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020b3e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020b40:	fb90 f0f6 	sdiv	r0, r0, r6
 8020b44:	eb00 0b03 	add.w	fp, r0, r3
 8020b48:	4648      	mov	r0, r9
 8020b4a:	f7ff fba6 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020b4e:	a90f      	add	r1, sp, #60	@ 0x3c
 8020b50:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020b52:	a80d      	add	r0, sp, #52	@ 0x34
 8020b54:	f7ff fb56 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020b58:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8020b5a:	4659      	mov	r1, fp
 8020b5c:	46cb      	mov	fp, r9
 8020b5e:	eba9 0907 	sub.w	r9, r9, r7
 8020b62:	fb90 f0f6 	sdiv	r0, r0, r6
 8020b66:	1a12      	subs	r2, r2, r0
 8020b68:	a811      	add	r0, sp, #68	@ 0x44
 8020b6a:	f7ff f880 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020b6e:	e7d7      	b.n	8020b20 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x3c8>
 8020b70:	455d      	cmp	r5, fp
 8020b72:	da22      	bge.n	8020bba <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x462>
 8020b74:	2602      	movs	r6, #2
 8020b76:	4628      	mov	r0, r5
 8020b78:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	@ 0x2c
 8020b7c:	ebc3 0342 	rsb	r3, r3, r2, lsl #1
 8020b80:	930d      	str	r3, [sp, #52]	@ 0x34
 8020b82:	f7ff fb6b 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020b86:	4641      	mov	r1, r8
 8020b88:	900e      	str	r0, [sp, #56]	@ 0x38
 8020b8a:	a80d      	add	r0, sp, #52	@ 0x34
 8020b8c:	f7ff fb3a 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020b90:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8020b92:	fb90 f0f6 	sdiv	r0, r0, r6
 8020b96:	4407      	add	r7, r0
 8020b98:	4628      	mov	r0, r5
 8020b9a:	f7ff fb7e 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020b9e:	a92e      	add	r1, sp, #184	@ 0xb8
 8020ba0:	f841 0d7c 	str.w	r0, [r1, #-124]!
 8020ba4:	a80d      	add	r0, sp, #52	@ 0x34
 8020ba6:	f7ff fb2d 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020baa:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8020bac:	4639      	mov	r1, r7
 8020bae:	fb90 f0f6 	sdiv	r0, r0, r6
 8020bb2:	1a12      	subs	r2, r2, r0
 8020bb4:	a811      	add	r0, sp, #68	@ 0x44
 8020bb6:	f7ff f85a 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020bba:	9b03      	ldr	r3, [sp, #12]
 8020bbc:	f5b3 5f34 	cmp.w	r3, #11520	@ 0x2d00
 8020bc0:	f6bf af27 	bge.w	8020a12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8020bc4:	ae2e      	add	r6, sp, #184	@ 0xb8
 8020bc6:	4628      	mov	r0, r5
 8020bc8:	f7ff fb48 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020bcc:	f04f 0b02 	mov.w	fp, #2
 8020bd0:	f846 0d7c 	str.w	r0, [r6, #-124]!
 8020bd4:	a80b      	add	r0, sp, #44	@ 0x2c
 8020bd6:	4631      	mov	r1, r6
 8020bd8:	f7ff fb14 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020bdc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8020bde:	eb00 0903 	add.w	r9, r0, r3
 8020be2:	4628      	mov	r0, r5
 8020be4:	f7ff fb59 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020be8:	4631      	mov	r1, r6
 8020bea:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020bec:	a80b      	add	r0, sp, #44	@ 0x2c
 8020bee:	f7ff fb09 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020bf2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8020bf4:	f5a5 54b4 	sub.w	r4, r5, #5760	@ 0x1680
 8020bf8:	eba3 0800 	sub.w	r8, r3, r0
 8020bfc:	4454      	add	r4, sl
 8020bfe:	42a5      	cmp	r5, r4
 8020c00:	f77f af07 	ble.w	8020a12 <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2ba>
 8020c04:	4620      	mov	r0, r4
 8020c06:	f7ff fb29 	bl	802025c <_ZN8touchgfx7CWRUtil4sineENS0_2Q5E>
 8020c0a:	4631      	mov	r1, r6
 8020c0c:	900f      	str	r0, [sp, #60]	@ 0x3c
 8020c0e:	a80c      	add	r0, sp, #48	@ 0x30
 8020c10:	f7ff faf8 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020c14:	fb90 f0fb 	sdiv	r0, r0, fp
 8020c18:	eb00 0709 	add.w	r7, r0, r9
 8020c1c:	4620      	mov	r0, r4
 8020c1e:	f7ff fb3c 	bl	802029a <_ZN8touchgfx7CWRUtil6cosineENS0_2Q5E>
 8020c22:	a90e      	add	r1, sp, #56	@ 0x38
 8020c24:	900e      	str	r0, [sp, #56]	@ 0x38
 8020c26:	a80c      	add	r0, sp, #48	@ 0x30
 8020c28:	f7ff faec 	bl	8020204 <_ZNK8touchgfx7CWRUtil2Q5mlERKNS0_3Q15E>
 8020c2c:	4639      	mov	r1, r7
 8020c2e:	4454      	add	r4, sl
 8020c30:	fb90 f2fb 	sdiv	r2, r0, fp
 8020c34:	a811      	add	r0, sp, #68	@ 0x44
 8020c36:	eba8 0202 	sub.w	r2, r8, r2
 8020c3a:	f7ff f818 	bl	801fc6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>
 8020c3e:	e7de      	b.n	8020bfe <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x4a6>
 8020c40:	2400      	movs	r4, #0
 8020c42:	e6eb      	b.n	8020a1c <_ZNK8touchgfx6Circle16drawCanvasWidgetERKNS_4RectE+0x2c4>
 8020c44:	0802610c 	.word	0x0802610c

08020c48 <_ZN8touchgfx13TextureMapper21setRenderingAlgorithmENS0_18RenderingAlgorithmE>:
 8020c48:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 8020c4c:	4770      	bx	lr

08020c4e <_ZNK8touchgfx13TextureMapper21getRenderingAlgorithmEv>:
 8020c4e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8020c52:	4770      	bx	lr

08020c54 <_ZN8touchgfx13TextureMapper9setXAngleEf>:
 8020c54:	6802      	ldr	r2, [r0, #0]
 8020c56:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8020c5a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8020c5c:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8020c60:	4710      	bx	r2

08020c62 <_ZN8touchgfx13TextureMapper9setYAngleEf>:
 8020c62:	6802      	ldr	r2, [r0, #0]
 8020c64:	eef0 0a40 	vmov.f32	s1, s0
 8020c68:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8020c6c:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8020c6e:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8020c72:	4710      	bx	r2

08020c74 <_ZN8touchgfx13TextureMapper9setZAngleEf>:
 8020c74:	6802      	ldr	r2, [r0, #0]
 8020c76:	eeb0 1a40 	vmov.f32	s2, s0
 8020c7a:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8020c7e:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8020c80:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8020c84:	4710      	bx	r2

08020c86 <_ZN8touchgfx13TextureMapper12updateXAngleEf>:
 8020c86:	6802      	ldr	r2, [r0, #0]
 8020c88:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8020c8c:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8020c8e:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8020c92:	4710      	bx	r2

08020c94 <_ZN8touchgfx13TextureMapper12updateYAngleEf>:
 8020c94:	6802      	ldr	r2, [r0, #0]
 8020c96:	eef0 0a40 	vmov.f32	s1, s0
 8020c9a:	ed90 1a0f 	vldr	s2, [r0, #60]	@ 0x3c
 8020c9e:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8020ca0:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8020ca4:	4710      	bx	r2

08020ca6 <_ZN8touchgfx13TextureMapper12updateZAngleEf>:
 8020ca6:	6802      	ldr	r2, [r0, #0]
 8020ca8:	eeb0 1a40 	vmov.f32	s2, s0
 8020cac:	edd0 0a0e 	vldr	s1, [r0, #56]	@ 0x38
 8020cb0:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8020cb2:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8020cb6:	4710      	bx	r2

08020cb8 <_ZNK8touchgfx13TextureMapper9getXAngleEv>:
 8020cb8:	ed90 0a0d 	vldr	s0, [r0, #52]	@ 0x34
 8020cbc:	4770      	bx	lr

08020cbe <_ZNK8touchgfx13TextureMapper9getYAngleEv>:
 8020cbe:	ed90 0a0e 	vldr	s0, [r0, #56]	@ 0x38
 8020cc2:	4770      	bx	lr

08020cc4 <_ZNK8touchgfx13TextureMapper9getZAngleEv>:
 8020cc4:	ed90 0a0f 	vldr	s0, [r0, #60]	@ 0x3c
 8020cc8:	4770      	bx	lr

08020cca <_ZNK8touchgfx13TextureMapper8getScaleEv>:
 8020cca:	ed90 0a10 	vldr	s0, [r0, #64]	@ 0x40
 8020cce:	4770      	bx	lr

08020cd0 <_ZNK8touchgfx13TextureMapper9getOrigoXEv>:
 8020cd0:	ed90 0a11 	vldr	s0, [r0, #68]	@ 0x44
 8020cd4:	4770      	bx	lr

08020cd6 <_ZNK8touchgfx13TextureMapper9getOrigoYEv>:
 8020cd6:	ed90 0a12 	vldr	s0, [r0, #72]	@ 0x48
 8020cda:	4770      	bx	lr

08020cdc <_ZNK8touchgfx13TextureMapper9getOrigoZEv>:
 8020cdc:	ed90 0a13 	vldr	s0, [r0, #76]	@ 0x4c
 8020ce0:	4770      	bx	lr

08020ce2 <_ZNK8touchgfx13TextureMapper10getCameraXEv>:
 8020ce2:	ed90 0a14 	vldr	s0, [r0, #80]	@ 0x50
 8020ce6:	4770      	bx	lr

08020ce8 <_ZNK8touchgfx13TextureMapper10getCameraYEv>:
 8020ce8:	ed90 0a15 	vldr	s0, [r0, #84]	@ 0x54
 8020cec:	4770      	bx	lr

08020cee <_ZNK8touchgfx13TextureMapper17getCameraDistanceEv>:
 8020cee:	ed90 0a16 	vldr	s0, [r0, #88]	@ 0x58
 8020cf2:	4770      	bx	lr

08020cf4 <_ZN8touchgfx13TextureMapper17setBitmapPositionEii>:
 8020cf4:	ee07 2a90 	vmov	s15, r2
 8020cf8:	6803      	ldr	r3, [r0, #0]
 8020cfa:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8020cfe:	ee07 1a90 	vmov	s15, r1
 8020d02:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8020d06:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8020d0a:	4718      	bx	r3

08020d0c <_ZNK8touchgfx13TextureMapper18getBitmapPositionXEv>:
 8020d0c:	ed90 0a0b 	vldr	s0, [r0, #44]	@ 0x2c
 8020d10:	4770      	bx	lr

08020d12 <_ZNK8touchgfx13TextureMapper18getBitmapPositionYEv>:
 8020d12:	ed90 0a0c 	vldr	s0, [r0, #48]	@ 0x30
 8020d16:	4770      	bx	lr

08020d18 <_ZNK8touchgfx13TextureMapper5getX0Ev>:
 8020d18:	ed90 0a17 	vldr	s0, [r0, #92]	@ 0x5c
 8020d1c:	4770      	bx	lr

08020d1e <_ZNK8touchgfx13TextureMapper5getX1Ev>:
 8020d1e:	ed90 0a1a 	vldr	s0, [r0, #104]	@ 0x68
 8020d22:	4770      	bx	lr

08020d24 <_ZNK8touchgfx13TextureMapper5getX2Ev>:
 8020d24:	ed90 0a1d 	vldr	s0, [r0, #116]	@ 0x74
 8020d28:	4770      	bx	lr

08020d2a <_ZNK8touchgfx13TextureMapper5getX3Ev>:
 8020d2a:	ed90 0a20 	vldr	s0, [r0, #128]	@ 0x80
 8020d2e:	4770      	bx	lr

08020d30 <_ZNK8touchgfx13TextureMapper5getY0Ev>:
 8020d30:	ed90 0a18 	vldr	s0, [r0, #96]	@ 0x60
 8020d34:	4770      	bx	lr

08020d36 <_ZNK8touchgfx13TextureMapper5getY1Ev>:
 8020d36:	ed90 0a1b 	vldr	s0, [r0, #108]	@ 0x6c
 8020d3a:	4770      	bx	lr

08020d3c <_ZNK8touchgfx13TextureMapper5getY2Ev>:
 8020d3c:	ed90 0a1e 	vldr	s0, [r0, #120]	@ 0x78
 8020d40:	4770      	bx	lr

08020d42 <_ZNK8touchgfx13TextureMapper5getY3Ev>:
 8020d42:	ed90 0a21 	vldr	s0, [r0, #132]	@ 0x84
 8020d46:	4770      	bx	lr

08020d48 <_ZNK8touchgfx13TextureMapper5getZ0Ev>:
 8020d48:	ed90 0a19 	vldr	s0, [r0, #100]	@ 0x64
 8020d4c:	4770      	bx	lr

08020d4e <_ZNK8touchgfx13TextureMapper5getZ1Ev>:
 8020d4e:	ed90 0a1c 	vldr	s0, [r0, #112]	@ 0x70
 8020d52:	4770      	bx	lr

08020d54 <_ZNK8touchgfx13TextureMapper5getZ2Ev>:
 8020d54:	ed90 0a1f 	vldr	s0, [r0, #124]	@ 0x7c
 8020d58:	4770      	bx	lr

08020d5a <_ZNK8touchgfx13TextureMapper5getZ3Ev>:
 8020d5a:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8020d5e:	4770      	bx	lr

08020d60 <_ZN8touchgfx13TextureMapper12updateAnglesEfff>:
 8020d60:	b510      	push	{r4, lr}
 8020d62:	ed2d 8b04 	vpush	{d8-d9}
 8020d66:	6803      	ldr	r3, [r0, #0]
 8020d68:	4604      	mov	r4, r0
 8020d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8020d6e:	eef0 8a60 	vmov.f32	s17, s1
 8020d72:	699b      	ldr	r3, [r3, #24]
 8020d74:	eeb0 9a41 	vmov.f32	s18, s2
 8020d78:	4798      	blx	r3
 8020d7a:	6823      	ldr	r3, [r4, #0]
 8020d7c:	4620      	mov	r0, r4
 8020d7e:	eef0 0a68 	vmov.f32	s1, s17
 8020d82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8020d84:	eeb0 1a49 	vmov.f32	s2, s18
 8020d88:	eeb0 0a48 	vmov.f32	s0, s16
 8020d8c:	4798      	blx	r3
 8020d8e:	6823      	ldr	r3, [r4, #0]
 8020d90:	4620      	mov	r0, r4
 8020d92:	699b      	ldr	r3, [r3, #24]
 8020d94:	ecbd 8b04 	vpop	{d8-d9}
 8020d98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020d9c:	4718      	bx	r3

08020d9e <_ZN8touchgfx13TextureMapper11updateScaleEf>:
 8020d9e:	b510      	push	{r4, lr}
 8020da0:	ed2d 8b02 	vpush	{d8}
 8020da4:	6803      	ldr	r3, [r0, #0]
 8020da6:	4604      	mov	r4, r0
 8020da8:	eeb0 8a40 	vmov.f32	s16, s0
 8020dac:	699b      	ldr	r3, [r3, #24]
 8020dae:	4798      	blx	r3
 8020db0:	6823      	ldr	r3, [r4, #0]
 8020db2:	4620      	mov	r0, r4
 8020db4:	eeb0 0a48 	vmov.f32	s0, s16
 8020db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8020dbc:	4798      	blx	r3
 8020dbe:	6823      	ldr	r3, [r4, #0]
 8020dc0:	4620      	mov	r0, r4
 8020dc2:	699b      	ldr	r3, [r3, #24]
 8020dc4:	ecbd 8b02 	vpop	{d8}
 8020dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020dcc:	4718      	bx	r3

08020dce <_ZNK8touchgfx13TextureMapper12getSolidRectEv>:
 8020dce:	2200      	movs	r2, #0
 8020dd0:	8002      	strh	r2, [r0, #0]
 8020dd2:	8042      	strh	r2, [r0, #2]
 8020dd4:	8082      	strh	r2, [r0, #4]
 8020dd6:	80c2      	strh	r2, [r0, #6]
 8020dd8:	4770      	bx	lr

08020dda <_ZN8touchgfx13TextureMapperD1Ev>:
 8020dda:	4770      	bx	lr

08020ddc <_ZN8touchgfx13TextureMapperD0Ev>:
 8020ddc:	b510      	push	{r4, lr}
 8020dde:	4604      	mov	r4, r0
 8020de0:	2190      	movs	r1, #144	@ 0x90
 8020de2:	f000 fe02 	bl	80219ea <_ZdlPvj>
 8020de6:	4620      	mov	r0, r4
 8020de8:	bd10      	pop	{r4, pc}
	...

08020dec <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE>:
 8020dec:	b538      	push	{r3, r4, r5, lr}
 8020dee:	2301      	movs	r3, #1
 8020df0:	2500      	movs	r5, #0
 8020df2:	4604      	mov	r4, r0
 8020df4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
 8020df8:	4b1f      	ldr	r3, [pc, #124]	@ (8020e78 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x8c>)
 8020dfa:	8085      	strh	r5, [r0, #4]
 8020dfc:	80c5      	strh	r5, [r0, #6]
 8020dfe:	8105      	strh	r5, [r0, #8]
 8020e00:	8145      	strh	r5, [r0, #10]
 8020e02:	8185      	strh	r5, [r0, #12]
 8020e04:	81c5      	strh	r5, [r0, #14]
 8020e06:	8205      	strh	r5, [r0, #16]
 8020e08:	8245      	strh	r5, [r0, #18]
 8020e0a:	61c5      	str	r5, [r0, #28]
 8020e0c:	8405      	strh	r5, [r0, #32]
 8020e0e:	8445      	strh	r5, [r0, #34]	@ 0x22
 8020e10:	f880 5024 	strb.w	r5, [r0, #36]	@ 0x24
 8020e14:	6003      	str	r3, [r0, #0]
 8020e16:	e9c0 5505 	strd	r5, r5, [r0, #20]
 8020e1a:	880b      	ldrh	r3, [r1, #0]
 8020e1c:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8020e1e:	23ff      	movs	r3, #255	@ 0xff
 8020e20:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 8020e24:	f7ef fae3 	bl	80103ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8020e28:	4b14      	ldr	r3, [pc, #80]	@ (8020e7c <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x90>)
 8020e2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8020e2e:	4914      	ldr	r1, [pc, #80]	@ (8020e80 <_ZN8touchgfx13TextureMapperC1ERKNS_6BitmapE+0x94>)
 8020e30:	6023      	str	r3, [r4, #0]
 8020e32:	2300      	movs	r3, #0
 8020e34:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8020e38:	4620      	mov	r0, r4
 8020e3a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8020e3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8020e3e:	6363      	str	r3, [r4, #52]	@ 0x34
 8020e40:	63a3      	str	r3, [r4, #56]	@ 0x38
 8020e42:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8020e44:	6463      	str	r3, [r4, #68]	@ 0x44
 8020e46:	64a3      	str	r3, [r4, #72]	@ 0x48
 8020e48:	6523      	str	r3, [r4, #80]	@ 0x50
 8020e4a:	6563      	str	r3, [r4, #84]	@ 0x54
 8020e4c:	65e3      	str	r3, [r4, #92]	@ 0x5c
 8020e4e:	6623      	str	r3, [r4, #96]	@ 0x60
 8020e50:	66a3      	str	r3, [r4, #104]	@ 0x68
 8020e52:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8020e54:	6763      	str	r3, [r4, #116]	@ 0x74
 8020e56:	67a3      	str	r3, [r4, #120]	@ 0x78
 8020e58:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
 8020e5c:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8020e60:	230c      	movs	r3, #12
 8020e62:	6422      	str	r2, [r4, #64]	@ 0x40
 8020e64:	64e1      	str	r1, [r4, #76]	@ 0x4c
 8020e66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8020e68:	6662      	str	r2, [r4, #100]	@ 0x64
 8020e6a:	6722      	str	r2, [r4, #112]	@ 0x70
 8020e6c:	67e2      	str	r2, [r4, #124]	@ 0x7c
 8020e6e:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
 8020e72:	f8a4 308c 	strh.w	r3, [r4, #140]	@ 0x8c
 8020e76:	bd38      	pop	{r3, r4, r5, pc}
 8020e78:	08025ca0 	.word	0x08025ca0
 8020e7c:	08026250 	.word	0x08026250
 8020e80:	447a0000 	.word	0x447a0000

08020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>:
 8020e84:	b570      	push	{r4, r5, r6, lr}
 8020e86:	ed2d 8b04 	vpush	{d8-d9}
 8020e8a:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8020e8e:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8020e90:	4604      	mov	r4, r0
 8020e92:	add0      	add	r5, sp, #832	@ 0x340
 8020e94:	f825 3d40 	strh.w	r3, [r5, #-64]!
 8020e98:	4628      	mov	r0, r5
 8020e9a:	f7f4 fbb5 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020e9e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8020ea0:	4606      	mov	r6, r0
 8020ea2:	4628      	mov	r0, r5
 8020ea4:	f8ad 3300 	strh.w	r3, [sp, #768]	@ 0x300
 8020ea8:	f7f4 fbe2 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8020eac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020eb0:	1c72      	adds	r2, r6, #1
 8020eb2:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8020eb6:	3001      	adds	r0, #1
 8020eb8:	ee07 2a90 	vmov	s15, r2
 8020ebc:	ed94 6a0b 	vldr	s12, [r4, #44]	@ 0x2c
 8020ec0:	ee76 5ac7 	vsub.f32	s11, s13, s14
 8020ec4:	ee06 0a90 	vmov	s13, r0
 8020ec8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8020ecc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020ece:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020ed2:	ed94 9a11 	vldr	s18, [r4, #68]	@ 0x44
 8020ed6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020eda:	9312      	str	r3, [sp, #72]	@ 0x48
 8020edc:	9316      	str	r3, [sp, #88]	@ 0x58
 8020ede:	a830      	add	r0, sp, #192	@ 0xc0
 8020ee0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8020ee4:	931a      	str	r3, [sp, #104]	@ 0x68
 8020ee6:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8020eea:	931e      	str	r3, [sp, #120]	@ 0x78
 8020eec:	2300      	movs	r3, #0
 8020eee:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8020ef2:	edcd 5a11 	vstr	s11, [sp, #68]	@ 0x44
 8020ef6:	ae70      	add	r6, sp, #448	@ 0x1c0
 8020ef8:	9320      	str	r3, [sp, #128]	@ 0x80
 8020efa:	9321      	str	r3, [sp, #132]	@ 0x84
 8020efc:	9322      	str	r3, [sp, #136]	@ 0x88
 8020efe:	9324      	str	r3, [sp, #144]	@ 0x90
 8020f00:	9325      	str	r3, [sp, #148]	@ 0x94
 8020f02:	9326      	str	r3, [sp, #152]	@ 0x98
 8020f04:	9328      	str	r3, [sp, #160]	@ 0xa0
 8020f06:	9329      	str	r3, [sp, #164]	@ 0xa4
 8020f08:	932a      	str	r3, [sp, #168]	@ 0xa8
 8020f0a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020f0c:	932d      	str	r3, [sp, #180]	@ 0xb4
 8020f0e:	932e      	str	r3, [sp, #184]	@ 0xb8
 8020f10:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8020f14:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8020f18:	edcd 5a15 	vstr	s11, [sp, #84]	@ 0x54
 8020f1c:	ed8d 7a17 	vstr	s14, [sp, #92]	@ 0x5c
 8020f20:	edcd 7a18 	vstr	s15, [sp, #96]	@ 0x60
 8020f24:	edcd 6a19 	vstr	s13, [sp, #100]	@ 0x64
 8020f28:	ed8d 7a1b 	vstr	s14, [sp, #108]	@ 0x6c
 8020f2c:	ed8d 6a1c 	vstr	s12, [sp, #112]	@ 0x70
 8020f30:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 8020f34:	ed8d 7a1f 	vstr	s14, [sp, #124]	@ 0x7c
 8020f38:	edd4 8a12 	vldr	s17, [r4, #72]	@ 0x48
 8020f3c:	ed94 8a13 	vldr	s16, [r4, #76]	@ 0x4c
 8020f40:	f000 fc2c 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8020f44:	eeb1 0a49 	vneg.f32	s0, s18
 8020f48:	a830      	add	r0, sp, #192	@ 0xc0
 8020f4a:	f000 fcf7 	bl	802193c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8020f4e:	eeb1 0a68 	vneg.f32	s0, s17
 8020f52:	f000 fd01 	bl	8021958 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8020f56:	eeb1 0a48 	vneg.f32	s0, s16
 8020f5a:	f000 fd0c 	bl	8021976 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8020f5e:	a840      	add	r0, sp, #256	@ 0x100
 8020f60:	f000 fc1c 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8020f64:	ed94 0a0d 	vldr	s0, [r4, #52]	@ 0x34
 8020f68:	a840      	add	r0, sp, #256	@ 0x100
 8020f6a:	f000 fc6b 	bl	8021844 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>
 8020f6e:	ed94 0a0e 	vldr	s0, [r4, #56]	@ 0x38
 8020f72:	f000 fc91 	bl	8021898 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>
 8020f76:	ed94 0a0f 	vldr	s0, [r4, #60]	@ 0x3c
 8020f7a:	f000 fcb6 	bl	80218ea <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>
 8020f7e:	a850      	add	r0, sp, #320	@ 0x140
 8020f80:	f000 fc0c 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8020f84:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8020f88:	a850      	add	r0, sp, #320	@ 0x140
 8020f8a:	f000 fd03 	bl	8021994 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>
 8020f8e:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8020f92:	f000 fd0b 	bl	80219ac <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>
 8020f96:	ed94 0a10 	vldr	s0, [r4, #64]	@ 0x40
 8020f9a:	f000 fd14 	bl	80219c6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>
 8020f9e:	a860      	add	r0, sp, #384	@ 0x180
 8020fa0:	f000 fbfc 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8020fa4:	eeb0 0a49 	vmov.f32	s0, s18
 8020fa8:	a860      	add	r0, sp, #384	@ 0x180
 8020faa:	f000 fcc7 	bl	802193c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8020fae:	eeb0 0a68 	vmov.f32	s0, s17
 8020fb2:	f000 fcd1 	bl	8021958 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8020fb6:	eeb0 0a48 	vmov.f32	s0, s16
 8020fba:	f000 fcdc 	bl	8021976 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>
 8020fbe:	aa50      	add	r2, sp, #320	@ 0x140
 8020fc0:	a960      	add	r1, sp, #384	@ 0x180
 8020fc2:	a8b0      	add	r0, sp, #704	@ 0x2c0
 8020fc4:	f000 fc02 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8020fc8:	4628      	mov	r0, r5
 8020fca:	aa40      	add	r2, sp, #256	@ 0x100
 8020fcc:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8020fce:	f000 fbfd 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8020fd2:	4629      	mov	r1, r5
 8020fd4:	aa30      	add	r2, sp, #192	@ 0xc0
 8020fd6:	a870      	add	r0, sp, #448	@ 0x1c0
 8020fd8:	f000 fbf8 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8020fdc:	a880      	add	r0, sp, #512	@ 0x200
 8020fde:	f000 fbdd 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8020fe2:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8020fe6:	a880      	add	r0, sp, #512	@ 0x200
 8020fe8:	eeb1 0a40 	vneg.f32	s0, s0
 8020fec:	f000 fca6 	bl	802193c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 8020ff0:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8020ff4:	a880      	add	r0, sp, #512	@ 0x200
 8020ff6:	eeb1 0a40 	vneg.f32	s0, s0
 8020ffa:	f000 fcad 	bl	8021958 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8020ffe:	a890      	add	r0, sp, #576	@ 0x240
 8021000:	f000 fbcc 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8021004:	ed94 0a16 	vldr	s0, [r4, #88]	@ 0x58
 8021008:	a890      	add	r0, sp, #576	@ 0x240
 802100a:	f000 fc0b 	bl	8021824 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>
 802100e:	a8a0      	add	r0, sp, #640	@ 0x280
 8021010:	f000 fbc4 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 8021014:	ed94 0a14 	vldr	s0, [r4, #80]	@ 0x50
 8021018:	a8a0      	add	r0, sp, #640	@ 0x280
 802101a:	f000 fc8f 	bl	802193c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>
 802101e:	ed94 0a15 	vldr	s0, [r4, #84]	@ 0x54
 8021022:	f000 fc99 	bl	8021958 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>
 8021026:	aa90      	add	r2, sp, #576	@ 0x240
 8021028:	a9a0      	add	r1, sp, #640	@ 0x280
 802102a:	a8b0      	add	r0, sp, #704	@ 0x2c0
 802102c:	f000 fbce 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8021030:	4628      	mov	r0, r5
 8021032:	aa80      	add	r2, sp, #512	@ 0x200
 8021034:	a9b0      	add	r1, sp, #704	@ 0x2c0
 8021036:	f000 fbc9 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 802103a:	4629      	mov	r1, r5
 802103c:	466d      	mov	r5, sp
 802103e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8021040:	4668      	mov	r0, sp
 8021042:	f000 fbc3 	bl	80217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>
 8021046:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021048:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802104a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 802104c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 802104e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8021050:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8021052:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8021056:	2500      	movs	r5, #0
 8021058:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 802105c:	0129      	lsls	r1, r5, #4
 802105e:	ab20      	add	r3, sp, #128	@ 0x80
 8021060:	3501      	adds	r5, #1
 8021062:	a870      	add	r0, sp, #448	@ 0x1c0
 8021064:	185e      	adds	r6, r3, r1
 8021066:	ab10      	add	r3, sp, #64	@ 0x40
 8021068:	4419      	add	r1, r3
 802106a:	f000 fb67 	bl	802173c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>
 802106e:	2d04      	cmp	r5, #4
 8021070:	ed86 0a00 	vstr	s0, [r6]
 8021074:	edc6 0a01 	vstr	s1, [r6, #4]
 8021078:	ed86 1a02 	vstr	s2, [r6, #8]
 802107c:	edc6 1a03 	vstr	s3, [r6, #12]
 8021080:	d1ec      	bne.n	802105c <_ZN8touchgfx13TextureMapper19applyTransformationEv+0x1d8>
 8021082:	edd4 7a16 	vldr	s15, [r4, #88]	@ 0x58
 8021086:	eddd 6a20 	vldr	s13, [sp, #128]	@ 0x80
 802108a:	ed9d 7a22 	vldr	s14, [sp, #136]	@ 0x88
 802108e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8021092:	ed84 7a19 	vstr	s14, [r4, #100]	@ 0x64
 8021096:	ee86 6a87 	vdiv.f32	s12, s13, s14
 802109a:	eddd 6a21 	vldr	s13, [sp, #132]	@ 0x84
 802109e:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80210a2:	ed84 6a17 	vstr	s12, [r4, #92]	@ 0x5c
 80210a6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80210aa:	eddd 6a24 	vldr	s13, [sp, #144]	@ 0x90
 80210ae:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80210b2:	ed84 7a1c 	vstr	s14, [r4, #112]	@ 0x70
 80210b6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80210ba:	ed84 6a18 	vstr	s12, [r4, #96]	@ 0x60
 80210be:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80210c2:	eddd 6a25 	vldr	s13, [sp, #148]	@ 0x94
 80210c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80210ca:	ed84 6a1a 	vstr	s12, [r4, #104]	@ 0x68
 80210ce:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80210d2:	eddd 6a28 	vldr	s13, [sp, #160]	@ 0xa0
 80210d6:	ed9d 7a2a 	vldr	s14, [sp, #168]	@ 0xa8
 80210da:	ed84 7a1f 	vstr	s14, [r4, #124]	@ 0x7c
 80210de:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80210e2:	ed84 6a1b 	vstr	s12, [r4, #108]	@ 0x6c
 80210e6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80210ea:	eddd 6a29 	vldr	s13, [sp, #164]	@ 0xa4
 80210ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80210f2:	ed84 6a1d 	vstr	s12, [r4, #116]	@ 0x74
 80210f6:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80210fa:	eddd 6a2c 	vldr	s13, [sp, #176]	@ 0xb0
 80210fe:	ed9d 7a2e 	vldr	s14, [sp, #184]	@ 0xb8
 8021102:	ed84 7a22 	vstr	s14, [r4, #136]	@ 0x88
 8021106:	ee67 6aa6 	vmul.f32	s13, s15, s13
 802110a:	ed84 6a1e 	vstr	s12, [r4, #120]	@ 0x78
 802110e:	ee86 6a87 	vdiv.f32	s12, s13, s14
 8021112:	eddd 6a2d 	vldr	s13, [sp, #180]	@ 0xb4
 8021116:	ee67 7aa6 	vmul.f32	s15, s15, s13
 802111a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 802111e:	ed84 6a20 	vstr	s12, [r4, #128]	@ 0x80
 8021122:	edc4 6a21 	vstr	s13, [r4, #132]	@ 0x84
 8021126:	f50d 7d50 	add.w	sp, sp, #832	@ 0x340
 802112a:	ecbd 8b04 	vpop	{d8-d9}
 802112e:	bd70      	pop	{r4, r5, r6, pc}

08021130 <_ZN8touchgfx13TextureMapper9setBitmapERKNS_6BitmapE>:
 8021130:	b510      	push	{r4, lr}
 8021132:	4604      	mov	r4, r0
 8021134:	f7ef f95b 	bl	80103ee <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8021138:	4620      	mov	r0, r4
 802113a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802113e:	f7ff bea1 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08021142 <_ZN8touchgfx13TextureMapper9setAnglesEfff>:
 8021142:	ed80 0a0d 	vstr	s0, [r0, #52]	@ 0x34
 8021146:	edc0 0a0e 	vstr	s1, [r0, #56]	@ 0x38
 802114a:	ed80 1a0f 	vstr	s2, [r0, #60]	@ 0x3c
 802114e:	f7ff be99 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08021152 <_ZN8touchgfx13TextureMapper8setScaleEf>:
 8021152:	ed80 0a10 	vstr	s0, [r0, #64]	@ 0x40
 8021156:	f7ff be95 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802115a <_ZN8touchgfx13TextureMapper17setBitmapPositionEff>:
 802115a:	ed80 0a0b 	vstr	s0, [r0, #44]	@ 0x2c
 802115e:	edc0 0a0c 	vstr	s1, [r0, #48]	@ 0x30
 8021162:	f7ff be8f 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08021166 <_ZN8touchgfx13TextureMapper17setCameraDistanceEf>:
 8021166:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802116a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 802116e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021172:	fe30 0a27 	vselgt.f32	s0, s0, s15
 8021176:	ed80 0a16 	vstr	s0, [r0, #88]	@ 0x58
 802117a:	f7ff be83 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802117e <_ZN8touchgfx13TextureMapper9setCameraEff>:
 802117e:	ed80 0a14 	vstr	s0, [r0, #80]	@ 0x50
 8021182:	edc0 0a15 	vstr	s1, [r0, #84]	@ 0x54
 8021186:	f7ff be7d 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

0802118a <_ZN8touchgfx13TextureMapper8setOrigoEff>:
 802118a:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 802118e:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 8021192:	f7ff be77 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

08021196 <_ZN8touchgfx13TextureMapper8setOrigoEfff>:
 8021196:	ed80 0a11 	vstr	s0, [r0, #68]	@ 0x44
 802119a:	edc0 0a12 	vstr	s1, [r0, #72]	@ 0x48
 802119e:	ed80 1a13 	vstr	s2, [r0, #76]	@ 0x4c
 80211a2:	f7ff be6f 	b.w	8020e84 <_ZN8touchgfx13TextureMapper19applyTransformationEv>

080211a6 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>:
 80211a6:	b510      	push	{r4, lr}
 80211a8:	edd1 5a1a 	vldr	s11, [r1, #104]	@ 0x68
 80211ac:	edd1 7a17 	vldr	s15, [r1, #92]	@ 0x5c
 80211b0:	ed91 6a1d 	vldr	s12, [r1, #116]	@ 0x74
 80211b4:	eef4 7ae5 	vcmpe.f32	s15, s11
 80211b8:	edd1 6a20 	vldr	s13, [r1, #128]	@ 0x80
 80211bc:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 80211c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211c4:	bf54      	ite	pl
 80211c6:	eeb0 7a65 	vmovpl.f32	s14, s11
 80211ca:	eeb0 7a67 	vmovmi.f32	s14, s15
 80211ce:	eeb4 6ac7 	vcmpe.f32	s12, s14
 80211d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211d6:	fe37 7a06 	vselgt.f32	s14, s14, s12
 80211da:	eef4 6ac7 	vcmpe.f32	s13, s14
 80211de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211e2:	fe37 7a26 	vselgt.f32	s14, s14, s13
 80211e6:	febb 7a47 	vrintm.f32	s14, s14
 80211ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80211ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80211f2:	eef4 7ae5 	vcmpe.f32	s15, s11
 80211f6:	bf56      	itet	pl
 80211f8:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80211fc:	2200      	movmi	r2, #0
 80211fe:	ee17 3a10 	vmovpl	r3, s14
 8021202:	ee07 4a10 	vmov	s14, r4
 8021206:	bf58      	it	pl
 8021208:	b21a      	sxthpl	r2, r3
 802120a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802120e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8021212:	8002      	strh	r2, [r0, #0]
 8021214:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8021218:	eeb4 6ae7 	vcmpe.f32	s12, s15
 802121c:	edd1 5a1b 	vldr	s11, [r1, #108]	@ 0x6c
 8021220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021224:	bf58      	it	pl
 8021226:	eef0 7a46 	vmovpl.f32	s15, s12
 802122a:	ed91 6a1e 	vldr	s12, [r1, #120]	@ 0x78
 802122e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8021232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021236:	bf58      	it	pl
 8021238:	eef0 7a66 	vmovpl.f32	s15, s13
 802123c:	edd1 6a21 	vldr	s13, [r1, #132]	@ 0x84
 8021240:	fefa 7a67 	vrintp.f32	s15, s15
 8021244:	eef4 7ac7 	vcmpe.f32	s15, s14
 8021248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802124c:	bfdc      	itt	le
 802124e:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 8021252:	ee17 3a90 	vmovle	r3, s15
 8021256:	edd1 7a18 	vldr	s15, [r1, #96]	@ 0x60
 802125a:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 802125e:	eef4 7ae5 	vcmpe.f32	s15, s11
 8021262:	bfd8      	it	le
 8021264:	b21c      	sxthle	r4, r3
 8021266:	1aa2      	subs	r2, r4, r2
 8021268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802126c:	8082      	strh	r2, [r0, #4]
 802126e:	bf54      	ite	pl
 8021270:	eeb0 7a65 	vmovpl.f32	s14, s11
 8021274:	eeb0 7a67 	vmovmi.f32	s14, s15
 8021278:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021280:	fe37 7a06 	vselgt.f32	s14, s14, s12
 8021284:	eef4 6ac7 	vcmpe.f32	s13, s14
 8021288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802128c:	fe37 7a26 	vselgt.f32	s14, s14, s13
 8021290:	febb 7a47 	vrintm.f32	s14, s14
 8021294:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8021298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802129c:	eef4 7ae5 	vcmpe.f32	s15, s11
 80212a0:	bf56      	itet	pl
 80212a2:	eebd 7ac7 	vcvtpl.s32.f32	s14, s14
 80212a6:	2300      	movmi	r3, #0
 80212a8:	ee17 3a10 	vmovpl	r3, s14
 80212ac:	ee07 1a10 	vmov	s14, r1
 80212b0:	bf58      	it	pl
 80212b2:	b21b      	sxthpl	r3, r3
 80212b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80212bc:	8043      	strh	r3, [r0, #2]
 80212be:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80212c2:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80212c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212ca:	bf58      	it	pl
 80212cc:	eef0 7a46 	vmovpl.f32	s15, s12
 80212d0:	eef4 6ae7 	vcmpe.f32	s13, s15
 80212d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212d8:	bf58      	it	pl
 80212da:	eef0 7a66 	vmovpl.f32	s15, s13
 80212de:	fefa 7a67 	vrintp.f32	s15, s15
 80212e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80212e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80212ea:	bfde      	ittt	le
 80212ec:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80212f0:	ee17 1a90 	vmovle	r1, s15
 80212f4:	b209      	sxthle	r1, r1
 80212f6:	1acb      	subs	r3, r1, r3
 80212f8:	80c3      	strh	r3, [r0, #6]
 80212fa:	bd10      	pop	{r4, pc}

080212fc <_ZNK8touchgfx13TextureMapper17invalidateContentEv>:
 80212fc:	b513      	push	{r0, r1, r4, lr}
 80212fe:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8021302:	4604      	mov	r4, r0
 8021304:	b143      	cbz	r3, 8021318 <_ZNK8touchgfx13TextureMapper17invalidateContentEv+0x1c>
 8021306:	4601      	mov	r1, r0
 8021308:	4668      	mov	r0, sp
 802130a:	f7ff ff4c 	bl	80211a6 <_ZNK8touchgfx13TextureMapper15getBoundingRectEv>
 802130e:	6823      	ldr	r3, [r4, #0]
 8021310:	4669      	mov	r1, sp
 8021312:	4620      	mov	r0, r4
 8021314:	691b      	ldr	r3, [r3, #16]
 8021316:	4798      	blx	r3
 8021318:	b002      	add	sp, #8
 802131a:	bd10      	pop	{r4, pc}

0802131c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>:
 802131c:	4603      	mov	r3, r0
 802131e:	3026      	adds	r0, #38	@ 0x26
 8021320:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8021324:	b90b      	cbnz	r3, 802132a <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv+0xe>
 8021326:	f7f2 bce3 	b.w	8013cf0 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 802132a:	f7f2 bcf1 	b.w	8013d10 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08021330 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8021330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021334:	4604      	mov	r4, r0
 8021336:	469b      	mov	fp, r3
 8021338:	ed2d 8b04 	vpush	{d8-d9}
 802133c:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
 8021340:	b0b3      	sub	sp, #204	@ 0xcc
 8021342:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8021346:	f9b1 6000 	ldrsh.w	r6, [r1]
 802134a:	8888      	ldrh	r0, [r1, #4]
 802134c:	9206      	str	r2, [sp, #24]
 802134e:	2200      	movs	r2, #0
 8021350:	4430      	add	r0, r6
 8021352:	f8dd a100 	ldr.w	sl, [sp, #256]	@ 0x100
 8021356:	f8dd 9104 	ldr.w	r9, [sp, #260]	@ 0x104
 802135a:	b280      	uxth	r0, r0
 802135c:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8021360:	9f43      	ldr	r7, [sp, #268]	@ 0x10c
 8021362:	fa0f fe80 	sxth.w	lr, r0
 8021366:	9211      	str	r2, [sp, #68]	@ 0x44
 8021368:	4596      	cmp	lr, r2
 802136a:	f340 8129 	ble.w	80215c0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802136e:	45b4      	cmp	ip, r6
 8021370:	f340 8126 	ble.w	80215c0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8021374:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 8021378:	88ca      	ldrh	r2, [r1, #6]
 802137a:	442a      	add	r2, r5
 802137c:	b292      	uxth	r2, r2
 802137e:	b211      	sxth	r1, r2
 8021380:	2900      	cmp	r1, #0
 8021382:	f340 811d 	ble.w	80215c0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 8021386:	42ab      	cmp	r3, r5
 8021388:	f340 811a 	ble.w	80215c0 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x290>
 802138c:	45f4      	cmp	ip, lr
 802138e:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8021392:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8021396:	bfb8      	it	lt
 8021398:	fa1f f08c 	uxthlt.w	r0, ip
 802139c:	428b      	cmp	r3, r1
 802139e:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 80213a2:	bfb8      	it	lt
 80213a4:	b29a      	uxthlt	r2, r3
 80213a6:	1b80      	subs	r0, r0, r6
 80213a8:	f8ad 5046 	strh.w	r5, [sp, #70]	@ 0x46
 80213ac:	1b52      	subs	r2, r2, r5
 80213ae:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 80213b2:	f8ad 204a 	strh.w	r2, [sp, #74]	@ 0x4a
 80213b6:	ab11      	add	r3, sp, #68	@ 0x44
 80213b8:	ad13      	add	r5, sp, #76	@ 0x4c
 80213ba:	6822      	ldr	r2, [r4, #0]
 80213bc:	1d26      	adds	r6, r4, #4
 80213be:	9307      	str	r3, [sp, #28]
 80213c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80213c2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80213c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80213ca:	4629      	mov	r1, r5
 80213cc:	4620      	mov	r0, r4
 80213ce:	4790      	blx	r2
 80213d0:	4621      	mov	r1, r4
 80213d2:	a815      	add	r0, sp, #84	@ 0x54
 80213d4:	f7f2 f8c4 	bl	8013560 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80213d8:	a815      	add	r0, sp, #84	@ 0x54
 80213da:	f7f0 fdaf 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213de:	9b07      	ldr	r3, [sp, #28]
 80213e0:	4631      	mov	r1, r6
 80213e2:	4618      	mov	r0, r3
 80213e4:	f7f0 fdee 	bl	8011fc4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80213e8:	4628      	mov	r0, r5
 80213ea:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80213ee:	f7f0 fda5 	bl	8011f3c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80213f2:	4628      	mov	r0, r5
 80213f4:	f7f4 f9fa 	bl	80157ec <_ZNK8touchgfx6Bitmap7getDataEv>
 80213f8:	9007      	str	r0, [sp, #28]
 80213fa:	2800      	cmp	r0, #0
 80213fc:	f000 80db 	beq.w	80215b6 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x286>
 8021400:	f8db 2000 	ldr.w	r2, [fp]
 8021404:	a90d      	add	r1, sp, #52	@ 0x34
 8021406:	a809      	add	r0, sp, #36	@ 0x24
 8021408:	9209      	str	r2, [sp, #36]	@ 0x24
 802140a:	f8db 2004 	ldr.w	r2, [fp, #4]
 802140e:	920a      	str	r2, [sp, #40]	@ 0x28
 8021410:	f8db 2008 	ldr.w	r2, [fp, #8]
 8021414:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021416:	f8db 200c 	ldr.w	r2, [fp, #12]
 802141a:	920c      	str	r2, [sp, #48]	@ 0x30
 802141c:	f8da 2000 	ldr.w	r2, [sl]
 8021420:	920d      	str	r2, [sp, #52]	@ 0x34
 8021422:	f8da 2004 	ldr.w	r2, [sl, #4]
 8021426:	920e      	str	r2, [sp, #56]	@ 0x38
 8021428:	f8da 2008 	ldr.w	r2, [sl, #8]
 802142c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802142e:	f8da 200c 	ldr.w	r2, [sl, #12]
 8021432:	9210      	str	r2, [sp, #64]	@ 0x40
 8021434:	4632      	mov	r2, r6
 8021436:	f7f0 fda9 	bl	8011f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802143a:	4632      	mov	r2, r6
 802143c:	a90e      	add	r1, sp, #56	@ 0x38
 802143e:	a80a      	add	r0, sp, #40	@ 0x28
 8021440:	f7f0 fda4 	bl	8011f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8021444:	4632      	mov	r2, r6
 8021446:	a90f      	add	r1, sp, #60	@ 0x3c
 8021448:	a80b      	add	r0, sp, #44	@ 0x2c
 802144a:	f7f0 fd9f 	bl	8011f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 802144e:	4632      	mov	r2, r6
 8021450:	a910      	add	r1, sp, #64	@ 0x40
 8021452:	a80c      	add	r0, sp, #48	@ 0x30
 8021454:	f7f0 fd9a 	bl	8011f8c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8021458:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 802145c:	edd7 4a00 	vldr	s9, [r7]
 8021460:	eef0 6a67 	vmov.f32	s13, s15
 8021464:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 8021468:	edd7 5a01 	vldr	s11, [r7, #4]
 802146c:	eeb0 7a67 	vmov.f32	s14, s15
 8021470:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8021474:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 8021478:	ed98 4a00 	vldr	s8, [r8]
 802147c:	eeb0 6a67 	vmov.f32	s12, s15
 8021480:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8021484:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 8021488:	ed98 5a01 	vldr	s10, [r8, #4]
 802148c:	ed99 9a00 	vldr	s18, [r9]
 8021490:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8021494:	ed99 8a01 	vldr	s16, [r9, #4]
 8021498:	edd9 8a02 	vldr	s17, [r9, #8]
 802149c:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 80214a0:	ee16 6a10 	vmov	r6, s12
 80214a4:	eeb0 6a67 	vmov.f32	s12, s15
 80214a8:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 80214ac:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 80214b0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80214b4:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 80214b8:	ed8d 4a21 	vstr	s8, [sp, #132]	@ 0x84
 80214bc:	edcd 4a22 	vstr	s9, [sp, #136]	@ 0x88
 80214c0:	ee16 0a10 	vmov	r0, s12
 80214c4:	eeb0 6a67 	vmov.f32	s12, s15
 80214c8:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 80214cc:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 80214d0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80214d4:	ed8d 5a26 	vstr	s10, [sp, #152]	@ 0x98
 80214d8:	edcd 5a27 	vstr	s11, [sp, #156]	@ 0x9c
 80214dc:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80214e0:	ee16 1a10 	vmov	r1, s12
 80214e4:	eeb0 6a67 	vmov.f32	s12, s15
 80214e8:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80214ec:	f8d8 b008 	ldr.w	fp, [r8, #8]
 80214f0:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80214f4:	68ff      	ldr	r7, [r7, #12]
 80214f6:	9624      	str	r6, [sp, #144]	@ 0x90
 80214f8:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80214fc:	ed8d 9a20 	vstr	s18, [sp, #128]	@ 0x80
 8021500:	ee16 2a10 	vmov	r2, s12
 8021504:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 8021508:	ed8d 8a25 	vstr	s16, [sp, #148]	@ 0x94
 802150c:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8021510:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 8021514:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 8021518:	4628      	mov	r0, r5
 802151a:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 802151e:	9b06      	ldr	r3, [sp, #24]
 8021520:	922d      	str	r2, [sp, #180]	@ 0xb4
 8021522:	4a29      	ldr	r2, [pc, #164]	@ (80215c8 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x298>)
 8021524:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021526:	8812      	ldrh	r2, [r2, #0]
 8021528:	9b07      	ldr	r3, [sp, #28]
 802152a:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 802152e:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 8021532:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8021536:	9218      	str	r2, [sp, #96]	@ 0x60
 8021538:	9319      	str	r3, [sp, #100]	@ 0x64
 802153a:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 802153e:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8021542:	9731      	str	r7, [sp, #196]	@ 0xc4
 8021544:	f7f4 f982 	bl	801584c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8021548:	901a      	str	r0, [sp, #104]	@ 0x68
 802154a:	4628      	mov	r0, r5
 802154c:	f7f4 f85c 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021550:	901b      	str	r0, [sp, #108]	@ 0x6c
 8021552:	4628      	mov	r0, r5
 8021554:	f7f4 f88c 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021558:	901c      	str	r0, [sp, #112]	@ 0x70
 802155a:	4628      	mov	r0, r5
 802155c:	f7f4 f854 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021560:	eeb4 9a48 	vcmp.f32	s18, s16
 8021564:	901d      	str	r0, [sp, #116]	@ 0x74
 8021566:	f8b4 608c 	ldrh.w	r6, [r4, #140]	@ 0x8c
 802156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802156e:	d107      	bne.n	8021580 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x250>
 8021570:	eeb4 8a68 	vcmp.f32	s16, s17
 8021574:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8021578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802157c:	bf08      	it	eq
 802157e:	461e      	moveq	r6, r3
 8021580:	4b12      	ldr	r3, [pc, #72]	@ (80215cc <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x29c>)
 8021582:	681b      	ldr	r3, [r3, #0]
 8021584:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8021588:	b10a      	cbz	r2, 802158e <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x25e>
 802158a:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 802158c:	b905      	cbnz	r5, 8021590 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x260>
 802158e:	689d      	ldr	r5, [r3, #8]
 8021590:	682b      	ldr	r3, [r5, #0]
 8021592:	4620      	mov	r0, r4
 8021594:	6c1f      	ldr	r7, [r3, #64]	@ 0x40
 8021596:	f7ff fec1 	bl	802131c <_ZNK8touchgfx13TextureMapper19lookupRenderVariantEv>
 802159a:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 802159e:	aa1e      	add	r2, sp, #120	@ 0x78
 80215a0:	9604      	str	r6, [sp, #16]
 80215a2:	a917      	add	r1, sp, #92	@ 0x5c
 80215a4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80215a8:	ab13      	add	r3, sp, #76	@ 0x4c
 80215aa:	4628      	mov	r0, r5
 80215ac:	9301      	str	r3, [sp, #4]
 80215ae:	ab15      	add	r3, sp, #84	@ 0x54
 80215b0:	9300      	str	r3, [sp, #0]
 80215b2:	ab19      	add	r3, sp, #100	@ 0x64
 80215b4:	47b8      	blx	r7
 80215b6:	b033      	add	sp, #204	@ 0xcc
 80215b8:	ecbd 8b04 	vpop	{d8-d9}
 80215bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80215c0:	2300      	movs	r3, #0
 80215c2:	9312      	str	r3, [sp, #72]	@ 0x48
 80215c4:	e6f7      	b.n	80213b6 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x86>
 80215c6:	bf00      	nop
 80215c8:	2402526e 	.word	0x2402526e
 80215cc:	24025274 	.word	0x24025274

080215d0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE>:
 80215d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80215d4:	ed2d 8b02 	vpush	{d8}
 80215d8:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 80215dc:	b098      	sub	sp, #96	@ 0x60
 80215de:	4604      	mov	r4, r0
 80215e0:	4688      	mov	r8, r1
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d077      	beq.n	80216d6 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x106>
 80215e6:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 80215ea:	4628      	mov	r0, r5
 80215ec:	f7f4 f80c 	bl	8015608 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80215f0:	ee07 0a90 	vmov	s15, r0
 80215f4:	4628      	mov	r0, r5
 80215f6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80215fa:	f7f4 f839 	bl	8015670 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80215fe:	4b4e      	ldr	r3, [pc, #312]	@ (8021738 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x168>)
 8021600:	ee07 0a90 	vmov	s15, r0
 8021604:	781b      	ldrb	r3, [r3, #0]
 8021606:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 802160a:	eeff 7a00 	vmov.f32	s15, #240	@ 0xbf800000 -1.0
 802160e:	2b01      	cmp	r3, #1
 8021610:	d066      	beq.n	80216e0 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x110>
 8021612:	eeb0 6a47 	vmov.f32	s12, s14
 8021616:	ee17 3a10 	vmov	r3, s14
 802161a:	eeb0 4a48 	vmov.f32	s8, s16
 802161e:	eeb0 7a48 	vmov.f32	s14, s16
 8021622:	eef0 4a67 	vmov.f32	s9, s15
 8021626:	eeb0 8a67 	vmov.f32	s16, s15
 802162a:	ed94 5a17 	vldr	s10, [r4, #92]	@ 0x5c
 802162e:	edd4 5a18 	vldr	s11, [r4, #96]	@ 0x60
 8021632:	ed94 3a1b 	vldr	s6, [r4, #108]	@ 0x6c
 8021636:	edd4 2a1d 	vldr	s5, [r4, #116]	@ 0x74
 802163a:	ee73 1a65 	vsub.f32	s3, s6, s11
 802163e:	ed94 2a1a 	vldr	s4, [r4, #104]	@ 0x68
 8021642:	ee72 6ac5 	vsub.f32	s13, s5, s10
 8021646:	edd4 3a1e 	vldr	s7, [r4, #120]	@ 0x78
 802164a:	ee32 1a45 	vsub.f32	s2, s4, s10
 802164e:	6f25      	ldr	r5, [r4, #112]	@ 0x70
 8021650:	6e66      	ldr	r6, [r4, #100]	@ 0x64
 8021652:	ee66 6ae1 	vnmul.f32	s13, s13, s3
 8021656:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 8021658:	ee73 1ae5 	vsub.f32	s3, s7, s11
 802165c:	f8d4 c080 	ldr.w	ip, [r4, #128]	@ 0x80
 8021660:	f8d4 7084 	ldr.w	r7, [r4, #132]	@ 0x84
 8021664:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8021668:	eee1 6a21 	vfma.f32	s13, s2, s3
 802166c:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8021670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021674:	dd3d      	ble.n	80216f2 <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x122>
 8021676:	ed8d 5a04 	vstr	s10, [sp, #16]
 802167a:	ed8d 2a05 	vstr	s4, [sp, #20]
 802167e:	edcd 2a06 	vstr	s5, [sp, #24]
 8021682:	f8cd c01c 	str.w	ip, [sp, #28]
 8021686:	edcd 5a08 	vstr	s11, [sp, #32]
 802168a:	ed8d 3a09 	vstr	s6, [sp, #36]	@ 0x24
 802168e:	edcd 3a0a 	vstr	s7, [sp, #40]	@ 0x28
 8021692:	970b      	str	r7, [sp, #44]	@ 0x2c
 8021694:	960c      	str	r6, [sp, #48]	@ 0x30
 8021696:	950d      	str	r5, [sp, #52]	@ 0x34
 8021698:	920e      	str	r2, [sp, #56]	@ 0x38
 802169a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802169c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 80216a0:	ed8d 4a11 	vstr	s8, [sp, #68]	@ 0x44
 80216a4:	ed8d 7a12 	vstr	s14, [sp, #72]	@ 0x48
 80216a8:	edcd 4a13 	vstr	s9, [sp, #76]	@ 0x4c
 80216ac:	ed8d 8a14 	vstr	s16, [sp, #80]	@ 0x50
 80216b0:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 80216b4:	9316      	str	r3, [sp, #88]	@ 0x58
 80216b6:	ed8d 6a17 	vstr	s12, [sp, #92]	@ 0x5c
 80216ba:	ab14      	add	r3, sp, #80	@ 0x50
 80216bc:	2200      	movs	r2, #0
 80216be:	4641      	mov	r1, r8
 80216c0:	4620      	mov	r0, r4
 80216c2:	9303      	str	r3, [sp, #12]
 80216c4:	ab10      	add	r3, sp, #64	@ 0x40
 80216c6:	9302      	str	r3, [sp, #8]
 80216c8:	ab0c      	add	r3, sp, #48	@ 0x30
 80216ca:	9301      	str	r3, [sp, #4]
 80216cc:	ab08      	add	r3, sp, #32
 80216ce:	9300      	str	r3, [sp, #0]
 80216d0:	ab04      	add	r3, sp, #16
 80216d2:	f7ff fe2d 	bl	8021330 <_ZNK8touchgfx13TextureMapper8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 80216d6:	b018      	add	sp, #96	@ 0x60
 80216d8:	ecbd 8b02 	vpop	{d8}
 80216dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80216e0:	eeb0 6a48 	vmov.f32	s12, s16
 80216e4:	ee17 3a90 	vmov	r3, s15
 80216e8:	eef0 4a47 	vmov.f32	s9, s14
 80216ec:	eeb0 4a67 	vmov.f32	s8, s15
 80216f0:	e79b      	b.n	802162a <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0x5a>
 80216f2:	ed8d 5a05 	vstr	s10, [sp, #20]
 80216f6:	ed8d 2a04 	vstr	s4, [sp, #16]
 80216fa:	f8cd c018 	str.w	ip, [sp, #24]
 80216fe:	edcd 2a07 	vstr	s5, [sp, #28]
 8021702:	edcd 5a09 	vstr	s11, [sp, #36]	@ 0x24
 8021706:	ed8d 3a08 	vstr	s6, [sp, #32]
 802170a:	970a      	str	r7, [sp, #40]	@ 0x28
 802170c:	edcd 3a0b 	vstr	s7, [sp, #44]	@ 0x2c
 8021710:	960d      	str	r6, [sp, #52]	@ 0x34
 8021712:	950c      	str	r5, [sp, #48]	@ 0x30
 8021714:	900e      	str	r0, [sp, #56]	@ 0x38
 8021716:	920f      	str	r2, [sp, #60]	@ 0x3c
 8021718:	edcd 7a11 	vstr	s15, [sp, #68]	@ 0x44
 802171c:	ed8d 4a10 	vstr	s8, [sp, #64]	@ 0x40
 8021720:	edcd 4a12 	vstr	s9, [sp, #72]	@ 0x48
 8021724:	ed8d 7a13 	vstr	s14, [sp, #76]	@ 0x4c
 8021728:	ed8d 8a15 	vstr	s16, [sp, #84]	@ 0x54
 802172c:	edcd 7a14 	vstr	s15, [sp, #80]	@ 0x50
 8021730:	ed8d 6a16 	vstr	s12, [sp, #88]	@ 0x58
 8021734:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021736:	e7c0      	b.n	80216ba <_ZNK8touchgfx13TextureMapper4drawERKNS_4RectE+0xea>
 8021738:	2402526c 	.word	0x2402526c

0802173c <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E>:
 802173c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802173e:	2300      	movs	r3, #0
 8021740:	b08d      	sub	sp, #52	@ 0x34
 8021742:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 8021746:	f101 0710 	add.w	r7, r1, #16
 802174a:	9304      	str	r3, [sp, #16]
 802174c:	aa04      	add	r2, sp, #16
 802174e:	9305      	str	r3, [sp, #20]
 8021750:	9306      	str	r3, [sp, #24]
 8021752:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8021756:	9307      	str	r3, [sp, #28]
 8021758:	4613      	mov	r3, r2
 802175a:	460c      	mov	r4, r1
 802175c:	4605      	mov	r5, r0
 802175e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8021798 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x5c>
 8021762:	ecb4 7a01 	vldmia	r4!, {s14}
 8021766:	ecf5 6a01 	vldmia	r5!, {s13}
 802176a:	42bc      	cmp	r4, r7
 802176c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021770:	d1f7      	bne.n	8021762 <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x26>
 8021772:	3010      	adds	r0, #16
 8021774:	ece2 7a01 	vstmia	r2!, {s15}
 8021778:	42b0      	cmp	r0, r6
 802177a:	d1ee      	bne.n	802175a <_ZN8touchgfxmlERKNS_9Matrix4x4ERKNS_6Point4E+0x1e>
 802177c:	ac0c      	add	r4, sp, #48	@ 0x30
 802177e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8021780:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8021784:	ed9d 0a08 	vldr	s0, [sp, #32]
 8021788:	eddd 0a09 	vldr	s1, [sp, #36]	@ 0x24
 802178c:	ed9d 1a0a 	vldr	s2, [sp, #40]	@ 0x28
 8021790:	eddd 1a0b 	vldr	s3, [sp, #44]	@ 0x2c
 8021794:	b00d      	add	sp, #52	@ 0x34
 8021796:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021798:	00000000 	.word	0x00000000

0802179c <_ZN8touchgfx9Matrix4x4C1Ev>:
 802179c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80217a0:	2300      	movs	r3, #0
 80217a2:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80217c8 <_ZN8touchgfx9Matrix4x4C1Ev+0x2c>
 80217a6:	eb00 1103 	add.w	r1, r0, r3, lsl #4
 80217aa:	2200      	movs	r2, #0
 80217ac:	4293      	cmp	r3, r2
 80217ae:	f102 0201 	add.w	r2, r2, #1
 80217b2:	fe47 6a87 	vseleq.f32	s13, s15, s14
 80217b6:	2a04      	cmp	r2, #4
 80217b8:	ece1 6a01 	vstmia	r1!, {s13}
 80217bc:	d1f6      	bne.n	80217ac <_ZN8touchgfx9Matrix4x4C1Ev+0x10>
 80217be:	3301      	adds	r3, #1
 80217c0:	2b04      	cmp	r3, #4
 80217c2:	d1f0      	bne.n	80217a6 <_ZN8touchgfx9Matrix4x4C1Ev+0xa>
 80217c4:	4770      	bx	lr
 80217c6:	bf00      	nop
 80217c8:	00000000 	.word	0x00000000

080217cc <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_>:
 80217cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80217d0:	460c      	mov	r4, r1
 80217d2:	4605      	mov	r5, r0
 80217d4:	4690      	mov	r8, r2
 80217d6:	f7ff ffe1 	bl	802179c <_ZN8touchgfx9Matrix4x4C1Ev>
 80217da:	4628      	mov	r0, r5
 80217dc:	4621      	mov	r1, r4
 80217de:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80217e2:	2300      	movs	r3, #0
 80217e4:	eb08 0603 	add.w	r6, r8, r3
 80217e8:	460f      	mov	r7, r1
 80217ea:	2400      	movs	r4, #0
 80217ec:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8021820 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x54>
 80217f0:	4632      	mov	r2, r6
 80217f2:	3401      	adds	r4, #1
 80217f4:	ecf7 6a01 	vldmia	r7!, {s13}
 80217f8:	3610      	adds	r6, #16
 80217fa:	ed92 7a00 	vldr	s14, [r2]
 80217fe:	2c04      	cmp	r4, #4
 8021800:	eee6 7a87 	vfma.f32	s15, s13, s14
 8021804:	d1f4      	bne.n	80217f0 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x24>
 8021806:	18c2      	adds	r2, r0, r3
 8021808:	3304      	adds	r3, #4
 802180a:	2b10      	cmp	r3, #16
 802180c:	edc2 7a00 	vstr	s15, [r2]
 8021810:	d1e8      	bne.n	80217e4 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x18>
 8021812:	3110      	adds	r1, #16
 8021814:	3010      	adds	r0, #16
 8021816:	4561      	cmp	r1, ip
 8021818:	d1e3      	bne.n	80217e2 <_ZN8touchgfxmlERKNS_9Matrix4x4ES2_+0x16>
 802181a:	4628      	mov	r0, r5
 802181c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021820:	00000000 	.word	0x00000000

08021824 <_ZN8touchgfx9Matrix4x415setViewDistanceEf>:
 8021824:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8021828:	f100 0320 	add.w	r3, r0, #32
 802182c:	3030      	adds	r0, #48	@ 0x30
 802182e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8021832:	ecf3 7a01 	vldmia	r3!, {s15}
 8021836:	4283      	cmp	r3, r0
 8021838:	ee60 7a27 	vmul.f32	s15, s0, s15
 802183c:	edc3 7a03 	vstr	s15, [r3, #12]
 8021840:	d1f7      	bne.n	8021832 <_ZN8touchgfx9Matrix4x415setViewDistanceEf+0xe>
 8021842:	4770      	bx	lr

08021844 <_ZN8touchgfx9Matrix4x420concatenateXRotationEf>:
 8021844:	b510      	push	{r4, lr}
 8021846:	ed2d 8b02 	vpush	{d8}
 802184a:	eef0 8a40 	vmov.f32	s17, s0
 802184e:	4604      	mov	r4, r0
 8021850:	f000 f93e 	bl	8021ad0 <sinf>
 8021854:	eeb0 8a40 	vmov.f32	s16, s0
 8021858:	eeb0 0a68 	vmov.f32	s0, s17
 802185c:	f000 f9fc 	bl	8021c58 <cosf>
 8021860:	eeb1 6a48 	vneg.f32	s12, s16
 8021864:	f104 0310 	add.w	r3, r4, #16
 8021868:	f104 0220 	add.w	r2, r4, #32
 802186c:	edd3 7a04 	vldr	s15, [r3, #16]
 8021870:	edd3 6a00 	vldr	s13, [r3]
 8021874:	ee26 7a27 	vmul.f32	s14, s12, s15
 8021878:	ee67 7a80 	vmul.f32	s15, s15, s0
 802187c:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021880:	eee6 7a88 	vfma.f32	s15, s13, s16
 8021884:	eca3 7a01 	vstmia	r3!, {s14}
 8021888:	429a      	cmp	r2, r3
 802188a:	edc3 7a03 	vstr	s15, [r3, #12]
 802188e:	d1ed      	bne.n	802186c <_ZN8touchgfx9Matrix4x420concatenateXRotationEf+0x28>
 8021890:	4620      	mov	r0, r4
 8021892:	ecbd 8b02 	vpop	{d8}
 8021896:	bd10      	pop	{r4, pc}

08021898 <_ZN8touchgfx9Matrix4x420concatenateYRotationEf>:
 8021898:	b510      	push	{r4, lr}
 802189a:	ed2d 8b02 	vpush	{d8}
 802189e:	eef0 8a40 	vmov.f32	s17, s0
 80218a2:	4604      	mov	r4, r0
 80218a4:	f000 f914 	bl	8021ad0 <sinf>
 80218a8:	eeb0 8a40 	vmov.f32	s16, s0
 80218ac:	eeb0 0a68 	vmov.f32	s0, s17
 80218b0:	f000 f9d2 	bl	8021c58 <cosf>
 80218b4:	eeb1 6a48 	vneg.f32	s12, s16
 80218b8:	4623      	mov	r3, r4
 80218ba:	f104 0210 	add.w	r2, r4, #16
 80218be:	edd3 7a08 	vldr	s15, [r3, #32]
 80218c2:	edd3 6a00 	vldr	s13, [r3]
 80218c6:	ee27 7a88 	vmul.f32	s14, s15, s16
 80218ca:	ee67 7a80 	vmul.f32	s15, s15, s0
 80218ce:	eea6 7a80 	vfma.f32	s14, s13, s0
 80218d2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80218d6:	eca3 7a01 	vstmia	r3!, {s14}
 80218da:	429a      	cmp	r2, r3
 80218dc:	edc3 7a07 	vstr	s15, [r3, #28]
 80218e0:	d1ed      	bne.n	80218be <_ZN8touchgfx9Matrix4x420concatenateYRotationEf+0x26>
 80218e2:	4620      	mov	r0, r4
 80218e4:	ecbd 8b02 	vpop	{d8}
 80218e8:	bd10      	pop	{r4, pc}

080218ea <_ZN8touchgfx9Matrix4x420concatenateZRotationEf>:
 80218ea:	b510      	push	{r4, lr}
 80218ec:	ed2d 8b02 	vpush	{d8}
 80218f0:	eef0 8a40 	vmov.f32	s17, s0
 80218f4:	4604      	mov	r4, r0
 80218f6:	f000 f8eb 	bl	8021ad0 <sinf>
 80218fa:	eeb0 8a40 	vmov.f32	s16, s0
 80218fe:	eeb0 0a68 	vmov.f32	s0, s17
 8021902:	f000 f9a9 	bl	8021c58 <cosf>
 8021906:	eeb1 6a48 	vneg.f32	s12, s16
 802190a:	4623      	mov	r3, r4
 802190c:	f104 0210 	add.w	r2, r4, #16
 8021910:	edd3 7a04 	vldr	s15, [r3, #16]
 8021914:	edd3 6a00 	vldr	s13, [r3]
 8021918:	ee26 7a27 	vmul.f32	s14, s12, s15
 802191c:	ee67 7a80 	vmul.f32	s15, s15, s0
 8021920:	eea6 7a80 	vfma.f32	s14, s13, s0
 8021924:	eee6 7a88 	vfma.f32	s15, s13, s16
 8021928:	eca3 7a01 	vstmia	r3!, {s14}
 802192c:	429a      	cmp	r2, r3
 802192e:	edc3 7a03 	vstr	s15, [r3, #12]
 8021932:	d1ed      	bne.n	8021910 <_ZN8touchgfx9Matrix4x420concatenateZRotationEf+0x26>
 8021934:	4620      	mov	r0, r4
 8021936:	ecbd 8b02 	vpop	{d8}
 802193a:	bd10      	pop	{r4, pc}

0802193c <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf>:
 802193c:	4603      	mov	r3, r0
 802193e:	f100 0210 	add.w	r2, r0, #16
 8021942:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8021946:	edd3 7a00 	vldr	s15, [r3]
 802194a:	eee7 7a00 	vfma.f32	s15, s14, s0
 802194e:	ece3 7a01 	vstmia	r3!, {s15}
 8021952:	4293      	cmp	r3, r2
 8021954:	d1f5      	bne.n	8021942 <_ZN8touchgfx9Matrix4x423concatenateXTranslationEf+0x6>
 8021956:	4770      	bx	lr

08021958 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf>:
 8021958:	f100 0310 	add.w	r3, r0, #16
 802195c:	f100 0220 	add.w	r2, r0, #32
 8021960:	ed93 7a08 	vldr	s14, [r3, #32]
 8021964:	edd3 7a00 	vldr	s15, [r3]
 8021968:	eee7 7a00 	vfma.f32	s15, s14, s0
 802196c:	ece3 7a01 	vstmia	r3!, {s15}
 8021970:	4293      	cmp	r3, r2
 8021972:	d1f5      	bne.n	8021960 <_ZN8touchgfx9Matrix4x423concatenateYTranslationEf+0x8>
 8021974:	4770      	bx	lr

08021976 <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf>:
 8021976:	f100 0320 	add.w	r3, r0, #32
 802197a:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 802197e:	ed93 7a04 	vldr	s14, [r3, #16]
 8021982:	edd3 7a00 	vldr	s15, [r3]
 8021986:	eee7 7a00 	vfma.f32	s15, s14, s0
 802198a:	ece3 7a01 	vstmia	r3!, {s15}
 802198e:	4293      	cmp	r3, r2
 8021990:	d1f5      	bne.n	802197e <_ZN8touchgfx9Matrix4x423concatenateZTranslationEf+0x8>
 8021992:	4770      	bx	lr

08021994 <_ZN8touchgfx9Matrix4x417concatenateXScaleEf>:
 8021994:	4603      	mov	r3, r0
 8021996:	f100 0210 	add.w	r2, r0, #16
 802199a:	edd3 7a00 	vldr	s15, [r3]
 802199e:	ee67 7a80 	vmul.f32	s15, s15, s0
 80219a2:	ece3 7a01 	vstmia	r3!, {s15}
 80219a6:	4293      	cmp	r3, r2
 80219a8:	d1f7      	bne.n	802199a <_ZN8touchgfx9Matrix4x417concatenateXScaleEf+0x6>
 80219aa:	4770      	bx	lr

080219ac <_ZN8touchgfx9Matrix4x417concatenateYScaleEf>:
 80219ac:	f100 0310 	add.w	r3, r0, #16
 80219b0:	f100 0220 	add.w	r2, r0, #32
 80219b4:	edd3 7a00 	vldr	s15, [r3]
 80219b8:	ee67 7a80 	vmul.f32	s15, s15, s0
 80219bc:	ece3 7a01 	vstmia	r3!, {s15}
 80219c0:	4293      	cmp	r3, r2
 80219c2:	d1f7      	bne.n	80219b4 <_ZN8touchgfx9Matrix4x417concatenateYScaleEf+0x8>
 80219c4:	4770      	bx	lr

080219c6 <_ZN8touchgfx9Matrix4x417concatenateZScaleEf>:
 80219c6:	f100 0320 	add.w	r3, r0, #32
 80219ca:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 80219ce:	edd3 7a00 	vldr	s15, [r3]
 80219d2:	ee67 7a80 	vmul.f32	s15, s15, s0
 80219d6:	ece3 7a01 	vstmia	r3!, {s15}
 80219da:	4293      	cmp	r3, r2
 80219dc:	d1f7      	bne.n	80219ce <_ZN8touchgfx9Matrix4x417concatenateZScaleEf+0x8>
 80219de:	4770      	bx	lr

080219e0 <__aeabi_atexit>:
 80219e0:	460b      	mov	r3, r1
 80219e2:	4601      	mov	r1, r0
 80219e4:	4618      	mov	r0, r3
 80219e6:	f000 bc59 	b.w	802229c <__cxa_atexit>

080219ea <_ZdlPvj>:
 80219ea:	f000 b812 	b.w	8021a12 <_ZdlPv>

080219ee <__cxa_guard_acquire>:
 80219ee:	6802      	ldr	r2, [r0, #0]
 80219f0:	07d2      	lsls	r2, r2, #31
 80219f2:	4603      	mov	r3, r0
 80219f4:	d405      	bmi.n	8021a02 <__cxa_guard_acquire+0x14>
 80219f6:	7842      	ldrb	r2, [r0, #1]
 80219f8:	b102      	cbz	r2, 80219fc <__cxa_guard_acquire+0xe>
 80219fa:	deff      	udf	#255	@ 0xff
 80219fc:	2001      	movs	r0, #1
 80219fe:	7058      	strb	r0, [r3, #1]
 8021a00:	4770      	bx	lr
 8021a02:	2000      	movs	r0, #0
 8021a04:	4770      	bx	lr

08021a06 <__cxa_guard_release>:
 8021a06:	2301      	movs	r3, #1
 8021a08:	6003      	str	r3, [r0, #0]
 8021a0a:	4770      	bx	lr

08021a0c <__cxa_pure_virtual>:
 8021a0c:	b508      	push	{r3, lr}
 8021a0e:	f000 f80f 	bl	8021a30 <_ZSt9terminatev>

08021a12 <_ZdlPv>:
 8021a12:	f000 bb8d 	b.w	8022130 <free>

08021a16 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021a16:	b508      	push	{r3, lr}
 8021a18:	4780      	blx	r0
 8021a1a:	f000 fb56 	bl	80220ca <abort>
	...

08021a20 <_ZSt13get_terminatev>:
 8021a20:	4b02      	ldr	r3, [pc, #8]	@ (8021a2c <_ZSt13get_terminatev+0xc>)
 8021a22:	6818      	ldr	r0, [r3, #0]
 8021a24:	f3bf 8f5b 	dmb	ish
 8021a28:	4770      	bx	lr
 8021a2a:	bf00      	nop
 8021a2c:	240000d8 	.word	0x240000d8

08021a30 <_ZSt9terminatev>:
 8021a30:	b508      	push	{r3, lr}
 8021a32:	f7ff fff5 	bl	8021a20 <_ZSt13get_terminatev>
 8021a36:	f7ff ffee 	bl	8021a16 <_ZN10__cxxabiv111__terminateEPFvvE>

08021a3a <atan2f>:
 8021a3a:	f000 b9cd 	b.w	8021dd8 <__ieee754_atan2f>
	...

08021a40 <sqrtf>:
 8021a40:	b508      	push	{r3, lr}
 8021a42:	ed2d 8b02 	vpush	{d8}
 8021a46:	eeb0 8a40 	vmov.f32	s16, s0
 8021a4a:	f000 f9c2 	bl	8021dd2 <__ieee754_sqrtf>
 8021a4e:	eeb4 8a48 	vcmp.f32	s16, s16
 8021a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a56:	d60c      	bvs.n	8021a72 <sqrtf+0x32>
 8021a58:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8021a78 <sqrtf+0x38>
 8021a5c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8021a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021a64:	d505      	bpl.n	8021a72 <sqrtf+0x32>
 8021a66:	f000 fe87 	bl	8022778 <__errno>
 8021a6a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8021a6e:	2321      	movs	r3, #33	@ 0x21
 8021a70:	6003      	str	r3, [r0, #0]
 8021a72:	ecbd 8b02 	vpop	{d8}
 8021a76:	bd08      	pop	{r3, pc}
 8021a78:	00000000 	.word	0x00000000

08021a7c <sinf_poly>:
 8021a7c:	07cb      	lsls	r3, r1, #31
 8021a7e:	d412      	bmi.n	8021aa6 <sinf_poly+0x2a>
 8021a80:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021a84:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021a88:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021a8c:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021a90:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021a94:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021a98:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021a9c:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021aa0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021aa4:	4770      	bx	lr
 8021aa6:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021aaa:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021aae:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021ab2:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021ab6:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021aba:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021abe:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021ac2:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021ac6:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021aca:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021ace:	e7e5      	b.n	8021a9c <sinf_poly+0x20>

08021ad0 <sinf>:
 8021ad0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021ad2:	ee10 4a10 	vmov	r4, s0
 8021ad6:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021ada:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021ade:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8021ae2:	eef0 7a40 	vmov.f32	s15, s0
 8021ae6:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8021aea:	d218      	bcs.n	8021b1e <sinf+0x4e>
 8021aec:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021af0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021af4:	d20a      	bcs.n	8021b0c <sinf+0x3c>
 8021af6:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8021afa:	d103      	bne.n	8021b04 <sinf+0x34>
 8021afc:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021b00:	ed8d 1a01 	vstr	s2, [sp, #4]
 8021b04:	eeb0 0a67 	vmov.f32	s0, s15
 8021b08:	b003      	add	sp, #12
 8021b0a:	bd30      	pop	{r4, r5, pc}
 8021b0c:	483a      	ldr	r0, [pc, #232]	@ (8021bf8 <sinf+0x128>)
 8021b0e:	eeb0 0b46 	vmov.f64	d0, d6
 8021b12:	2100      	movs	r1, #0
 8021b14:	b003      	add	sp, #12
 8021b16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021b1a:	f7ff bfaf 	b.w	8021a7c <sinf_poly>
 8021b1e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021b22:	4293      	cmp	r3, r2
 8021b24:	d824      	bhi.n	8021b70 <sinf+0xa0>
 8021b26:	4b34      	ldr	r3, [pc, #208]	@ (8021bf8 <sinf+0x128>)
 8021b28:	ed93 7b08 	vldr	d7, [r3, #32]
 8021b2c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021b30:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021b34:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021b38:	ee17 1a90 	vmov	r1, s15
 8021b3c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021b40:	1609      	asrs	r1, r1, #24
 8021b42:	ee07 1a90 	vmov	s15, r1
 8021b46:	f001 0203 	and.w	r2, r1, #3
 8021b4a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021b4e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021b52:	ed92 0b00 	vldr	d0, [r2]
 8021b56:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8021b5a:	f011 0f02 	tst.w	r1, #2
 8021b5e:	eea5 6b47 	vfms.f64	d6, d5, d7
 8021b62:	bf08      	it	eq
 8021b64:	4618      	moveq	r0, r3
 8021b66:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021b6a:	ee20 0b06 	vmul.f64	d0, d0, d6
 8021b6e:	e7d1      	b.n	8021b14 <sinf+0x44>
 8021b70:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021b74:	d237      	bcs.n	8021be6 <sinf+0x116>
 8021b76:	4921      	ldr	r1, [pc, #132]	@ (8021bfc <sinf+0x12c>)
 8021b78:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021b7c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021b80:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021b84:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021b88:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021b8c:	6a10      	ldr	r0, [r2, #32]
 8021b8e:	6912      	ldr	r2, [r2, #16]
 8021b90:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021b94:	40ab      	lsls	r3, r5
 8021b96:	fba0 5003 	umull	r5, r0, r0, r3
 8021b9a:	4359      	muls	r1, r3
 8021b9c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021ba0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021ba4:	0f9d      	lsrs	r5, r3, #30
 8021ba6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021baa:	1ac9      	subs	r1, r1, r3
 8021bac:	f7de fd76 	bl	800069c <__aeabi_l2d>
 8021bb0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021bb4:	4b10      	ldr	r3, [pc, #64]	@ (8021bf8 <sinf+0x128>)
 8021bb6:	f004 0203 	and.w	r2, r4, #3
 8021bba:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021bbe:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8021bf0 <sinf+0x120>
 8021bc2:	ed92 0b00 	vldr	d0, [r2]
 8021bc6:	ec41 0b17 	vmov	d7, r0, r1
 8021bca:	f014 0f02 	tst.w	r4, #2
 8021bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021bd2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021bd6:	4629      	mov	r1, r5
 8021bd8:	bf08      	it	eq
 8021bda:	4618      	moveq	r0, r3
 8021bdc:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021be0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021be4:	e796      	b.n	8021b14 <sinf+0x44>
 8021be6:	b003      	add	sp, #12
 8021be8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021bec:	f000 b8e2 	b.w	8021db4 <__math_invalidf>
 8021bf0:	54442d18 	.word	0x54442d18
 8021bf4:	3c1921fb 	.word	0x3c1921fb
 8021bf8:	080263c0 	.word	0x080263c0
 8021bfc:	0802635c 	.word	0x0802635c

08021c00 <sinf_poly>:
 8021c00:	07cb      	lsls	r3, r1, #31
 8021c02:	d412      	bmi.n	8021c2a <sinf_poly+0x2a>
 8021c04:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021c08:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8021c0c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021c10:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021c14:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021c18:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021c1c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021c20:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021c24:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021c28:	4770      	bx	lr
 8021c2a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8021c2e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021c32:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021c36:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8021c3a:	eea1 7b06 	vfma.f64	d7, d1, d6
 8021c3e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021c42:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021c46:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021c4a:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021c4e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021c52:	e7e5      	b.n	8021c20 <sinf_poly+0x20>
 8021c54:	0000      	movs	r0, r0
	...

08021c58 <cosf>:
 8021c58:	b538      	push	{r3, r4, r5, lr}
 8021c5a:	ee10 4a10 	vmov	r4, s0
 8021c5e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8021c62:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8021c66:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8021c6a:	d21f      	bcs.n	8021cac <cosf+0x54>
 8021c6c:	ee27 7b07 	vmul.f64	d7, d7, d7
 8021c70:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021c74:	f0c0 8082 	bcc.w	8021d7c <cosf+0x124>
 8021c78:	ee27 4b07 	vmul.f64	d4, d7, d7
 8021c7c:	4b44      	ldr	r3, [pc, #272]	@ (8021d90 <cosf+0x138>)
 8021c7e:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 8021c82:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 8021c86:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 8021c8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8021c8e:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 8021c92:	eea7 0b05 	vfma.f64	d0, d7, d5
 8021c96:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 8021c9a:	ee27 7b04 	vmul.f64	d7, d7, d4
 8021c9e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8021ca2:	eea6 0b07 	vfma.f64	d0, d6, d7
 8021ca6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021caa:	bd38      	pop	{r3, r4, r5, pc}
 8021cac:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021cb0:	4293      	cmp	r3, r2
 8021cb2:	d829      	bhi.n	8021d08 <cosf+0xb0>
 8021cb4:	4b36      	ldr	r3, [pc, #216]	@ (8021d90 <cosf+0x138>)
 8021cb6:	ed93 6b08 	vldr	d6, [r3, #32]
 8021cba:	ee27 6b06 	vmul.f64	d6, d7, d6
 8021cbe:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8021cc2:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021cc6:	ee16 1a90 	vmov	r1, s13
 8021cca:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021cce:	1609      	asrs	r1, r1, #24
 8021cd0:	ee06 1a90 	vmov	s13, r1
 8021cd4:	f001 0203 	and.w	r2, r1, #3
 8021cd8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021cdc:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8021ce0:	ed92 0b00 	vldr	d0, [r2]
 8021ce4:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8021ce8:	f011 0f02 	tst.w	r1, #2
 8021cec:	f081 0101 	eor.w	r1, r1, #1
 8021cf0:	eea5 7b46 	vfms.f64	d7, d5, d6
 8021cf4:	bf08      	it	eq
 8021cf6:	4618      	moveq	r0, r3
 8021cf8:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d00:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021d04:	f7ff bf7c 	b.w	8021c00 <sinf_poly>
 8021d08:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8021d0c:	d232      	bcs.n	8021d74 <cosf+0x11c>
 8021d0e:	4921      	ldr	r1, [pc, #132]	@ (8021d94 <cosf+0x13c>)
 8021d10:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021d14:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021d18:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8021d1c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021d20:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021d24:	6a10      	ldr	r0, [r2, #32]
 8021d26:	6912      	ldr	r2, [r2, #16]
 8021d28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8021d2c:	40ab      	lsls	r3, r5
 8021d2e:	fba0 5003 	umull	r5, r0, r0, r3
 8021d32:	4359      	muls	r1, r3
 8021d34:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021d38:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8021d3c:	0f9d      	lsrs	r5, r3, #30
 8021d3e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021d42:	1ac9      	subs	r1, r1, r3
 8021d44:	f7de fcaa 	bl	800069c <__aeabi_l2d>
 8021d48:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8021d4c:	4b10      	ldr	r3, [pc, #64]	@ (8021d90 <cosf+0x138>)
 8021d4e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 8021d88 <cosf+0x130>
 8021d52:	ec41 0b17 	vmov	d7, r0, r1
 8021d56:	f004 0203 	and.w	r2, r4, #3
 8021d5a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8021d5e:	ed92 0b00 	vldr	d0, [r2]
 8021d62:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021d66:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021d6a:	f014 0f02 	tst.w	r4, #2
 8021d6e:	f085 0101 	eor.w	r1, r5, #1
 8021d72:	e7bf      	b.n	8021cf4 <cosf+0x9c>
 8021d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021d78:	f000 b81c 	b.w	8021db4 <__math_invalidf>
 8021d7c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8021d80:	e793      	b.n	8021caa <cosf+0x52>
 8021d82:	bf00      	nop
 8021d84:	f3af 8000 	nop.w
 8021d88:	54442d18 	.word	0x54442d18
 8021d8c:	3c1921fb 	.word	0x3c1921fb
 8021d90:	080263c0 	.word	0x080263c0
 8021d94:	0802635c 	.word	0x0802635c

08021d98 <with_errnof>:
 8021d98:	b510      	push	{r4, lr}
 8021d9a:	ed2d 8b02 	vpush	{d8}
 8021d9e:	eeb0 8a40 	vmov.f32	s16, s0
 8021da2:	4604      	mov	r4, r0
 8021da4:	f000 fce8 	bl	8022778 <__errno>
 8021da8:	eeb0 0a48 	vmov.f32	s0, s16
 8021dac:	ecbd 8b02 	vpop	{d8}
 8021db0:	6004      	str	r4, [r0, #0]
 8021db2:	bd10      	pop	{r4, pc}

08021db4 <__math_invalidf>:
 8021db4:	eef0 7a40 	vmov.f32	s15, s0
 8021db8:	ee30 7a40 	vsub.f32	s14, s0, s0
 8021dbc:	eef4 7a67 	vcmp.f32	s15, s15
 8021dc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021dc4:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8021dc8:	d602      	bvs.n	8021dd0 <__math_invalidf+0x1c>
 8021dca:	2021      	movs	r0, #33	@ 0x21
 8021dcc:	f7ff bfe4 	b.w	8021d98 <with_errnof>
 8021dd0:	4770      	bx	lr

08021dd2 <__ieee754_sqrtf>:
 8021dd2:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021dd6:	4770      	bx	lr

08021dd8 <__ieee754_atan2f>:
 8021dd8:	ee10 2a90 	vmov	r2, s1
 8021ddc:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8021de0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021de4:	b510      	push	{r4, lr}
 8021de6:	eef0 7a40 	vmov.f32	s15, s0
 8021dea:	d806      	bhi.n	8021dfa <__ieee754_atan2f+0x22>
 8021dec:	ee10 0a10 	vmov	r0, s0
 8021df0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8021df4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021df8:	d904      	bls.n	8021e04 <__ieee754_atan2f+0x2c>
 8021dfa:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8021dfe:	eeb0 0a67 	vmov.f32	s0, s15
 8021e02:	bd10      	pop	{r4, pc}
 8021e04:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8021e08:	d103      	bne.n	8021e12 <__ieee754_atan2f+0x3a>
 8021e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e0e:	f000 b881 	b.w	8021f14 <atanf>
 8021e12:	1794      	asrs	r4, r2, #30
 8021e14:	f004 0402 	and.w	r4, r4, #2
 8021e18:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8021e1c:	b93b      	cbnz	r3, 8021e2e <__ieee754_atan2f+0x56>
 8021e1e:	2c02      	cmp	r4, #2
 8021e20:	d05c      	beq.n	8021edc <__ieee754_atan2f+0x104>
 8021e22:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8021ef0 <__ieee754_atan2f+0x118>
 8021e26:	2c03      	cmp	r4, #3
 8021e28:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8021e2c:	e7e7      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021e2e:	b939      	cbnz	r1, 8021e40 <__ieee754_atan2f+0x68>
 8021e30:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8021ef4 <__ieee754_atan2f+0x11c>
 8021e34:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8021ef8 <__ieee754_atan2f+0x120>
 8021e38:	2800      	cmp	r0, #0
 8021e3a:	fe67 7a87 	vselge.f32	s15, s15, s14
 8021e3e:	e7de      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021e40:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021e44:	d110      	bne.n	8021e68 <__ieee754_atan2f+0x90>
 8021e46:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021e4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8021e4e:	d107      	bne.n	8021e60 <__ieee754_atan2f+0x88>
 8021e50:	2c02      	cmp	r4, #2
 8021e52:	d846      	bhi.n	8021ee2 <__ieee754_atan2f+0x10a>
 8021e54:	4b29      	ldr	r3, [pc, #164]	@ (8021efc <__ieee754_atan2f+0x124>)
 8021e56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8021e5a:	edd3 7a00 	vldr	s15, [r3]
 8021e5e:	e7ce      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021e60:	2c02      	cmp	r4, #2
 8021e62:	d841      	bhi.n	8021ee8 <__ieee754_atan2f+0x110>
 8021e64:	4b26      	ldr	r3, [pc, #152]	@ (8021f00 <__ieee754_atan2f+0x128>)
 8021e66:	e7f6      	b.n	8021e56 <__ieee754_atan2f+0x7e>
 8021e68:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021e6c:	d0e0      	beq.n	8021e30 <__ieee754_atan2f+0x58>
 8021e6e:	1a5b      	subs	r3, r3, r1
 8021e70:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8021e74:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8021e78:	da1a      	bge.n	8021eb0 <__ieee754_atan2f+0xd8>
 8021e7a:	2a00      	cmp	r2, #0
 8021e7c:	da01      	bge.n	8021e82 <__ieee754_atan2f+0xaa>
 8021e7e:	313c      	adds	r1, #60	@ 0x3c
 8021e80:	db19      	blt.n	8021eb6 <__ieee754_atan2f+0xde>
 8021e82:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8021e86:	f000 f919 	bl	80220bc <fabsf>
 8021e8a:	f000 f843 	bl	8021f14 <atanf>
 8021e8e:	eef0 7a40 	vmov.f32	s15, s0
 8021e92:	2c01      	cmp	r4, #1
 8021e94:	d012      	beq.n	8021ebc <__ieee754_atan2f+0xe4>
 8021e96:	2c02      	cmp	r4, #2
 8021e98:	d017      	beq.n	8021eca <__ieee754_atan2f+0xf2>
 8021e9a:	2c00      	cmp	r4, #0
 8021e9c:	d0af      	beq.n	8021dfe <__ieee754_atan2f+0x26>
 8021e9e:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8021f04 <__ieee754_atan2f+0x12c>
 8021ea2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ea6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8021f08 <__ieee754_atan2f+0x130>
 8021eaa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021eae:	e7a6      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021eb0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8021ef4 <__ieee754_atan2f+0x11c>
 8021eb4:	e7ed      	b.n	8021e92 <__ieee754_atan2f+0xba>
 8021eb6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8021f0c <__ieee754_atan2f+0x134>
 8021eba:	e7ea      	b.n	8021e92 <__ieee754_atan2f+0xba>
 8021ebc:	ee17 3a90 	vmov	r3, s15
 8021ec0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8021ec4:	ee07 3a90 	vmov	s15, r3
 8021ec8:	e799      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021eca:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8021f04 <__ieee754_atan2f+0x12c>
 8021ece:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021ed2:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8021f08 <__ieee754_atan2f+0x130>
 8021ed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8021eda:	e790      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021edc:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8021f08 <__ieee754_atan2f+0x130>
 8021ee0:	e78d      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021ee2:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8021f10 <__ieee754_atan2f+0x138>
 8021ee6:	e78a      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021ee8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8021f0c <__ieee754_atan2f+0x134>
 8021eec:	e787      	b.n	8021dfe <__ieee754_atan2f+0x26>
 8021eee:	bf00      	nop
 8021ef0:	c0490fdb 	.word	0xc0490fdb
 8021ef4:	3fc90fdb 	.word	0x3fc90fdb
 8021ef8:	bfc90fdb 	.word	0xbfc90fdb
 8021efc:	080264ac 	.word	0x080264ac
 8021f00:	080264a0 	.word	0x080264a0
 8021f04:	33bbbd2e 	.word	0x33bbbd2e
 8021f08:	40490fdb 	.word	0x40490fdb
 8021f0c:	00000000 	.word	0x00000000
 8021f10:	3f490fdb 	.word	0x3f490fdb

08021f14 <atanf>:
 8021f14:	b538      	push	{r3, r4, r5, lr}
 8021f16:	ee10 5a10 	vmov	r5, s0
 8021f1a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8021f1e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8021f22:	eef0 7a40 	vmov.f32	s15, s0
 8021f26:	d30f      	bcc.n	8021f48 <atanf+0x34>
 8021f28:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8021f2c:	d904      	bls.n	8021f38 <atanf+0x24>
 8021f2e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8021f32:	eeb0 0a67 	vmov.f32	s0, s15
 8021f36:	bd38      	pop	{r3, r4, r5, pc}
 8021f38:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8022070 <atanf+0x15c>
 8021f3c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8022074 <atanf+0x160>
 8021f40:	2d00      	cmp	r5, #0
 8021f42:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8021f46:	e7f4      	b.n	8021f32 <atanf+0x1e>
 8021f48:	4b4b      	ldr	r3, [pc, #300]	@ (8022078 <atanf+0x164>)
 8021f4a:	429c      	cmp	r4, r3
 8021f4c:	d810      	bhi.n	8021f70 <atanf+0x5c>
 8021f4e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8021f52:	d20a      	bcs.n	8021f6a <atanf+0x56>
 8021f54:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 802207c <atanf+0x168>
 8021f58:	ee30 7a07 	vadd.f32	s14, s0, s14
 8021f5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8021f60:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8021f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021f68:	dce3      	bgt.n	8021f32 <atanf+0x1e>
 8021f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8021f6e:	e013      	b.n	8021f98 <atanf+0x84>
 8021f70:	f000 f8a4 	bl	80220bc <fabsf>
 8021f74:	4b42      	ldr	r3, [pc, #264]	@ (8022080 <atanf+0x16c>)
 8021f76:	429c      	cmp	r4, r3
 8021f78:	d84f      	bhi.n	802201a <atanf+0x106>
 8021f7a:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8021f7e:	429c      	cmp	r4, r3
 8021f80:	d841      	bhi.n	8022006 <atanf+0xf2>
 8021f82:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8021f86:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8021f8a:	eea0 7a27 	vfma.f32	s14, s0, s15
 8021f8e:	2300      	movs	r3, #0
 8021f90:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021f94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021f98:	1c5a      	adds	r2, r3, #1
 8021f9a:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8021f9e:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8022084 <atanf+0x170>
 8021fa2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 8022088 <atanf+0x174>
 8021fa6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 802208c <atanf+0x178>
 8021faa:	ee66 6a06 	vmul.f32	s13, s12, s12
 8021fae:	eee6 5a87 	vfma.f32	s11, s13, s14
 8021fb2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8022090 <atanf+0x17c>
 8021fb6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021fba:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8022094 <atanf+0x180>
 8021fbe:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021fc2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8022098 <atanf+0x184>
 8021fc6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8021fca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 802209c <atanf+0x188>
 8021fce:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021fd2:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80220a0 <atanf+0x18c>
 8021fd6:	eea6 5a87 	vfma.f32	s10, s13, s14
 8021fda:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80220a4 <atanf+0x190>
 8021fde:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021fe2:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80220a8 <atanf+0x194>
 8021fe6:	eea7 5a26 	vfma.f32	s10, s14, s13
 8021fea:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80220ac <atanf+0x198>
 8021fee:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021ff2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021ff6:	eea5 7a86 	vfma.f32	s14, s11, s12
 8021ffa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8021ffe:	d121      	bne.n	8022044 <atanf+0x130>
 8022000:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022004:	e795      	b.n	8021f32 <atanf+0x1e>
 8022006:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802200a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802200e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8022012:	2301      	movs	r3, #1
 8022014:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022018:	e7be      	b.n	8021f98 <atanf+0x84>
 802201a:	4b25      	ldr	r3, [pc, #148]	@ (80220b0 <atanf+0x19c>)
 802201c:	429c      	cmp	r4, r3
 802201e:	d80b      	bhi.n	8022038 <atanf+0x124>
 8022020:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8022024:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022028:	eea0 7a27 	vfma.f32	s14, s0, s15
 802202c:	2302      	movs	r3, #2
 802202e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8022032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022036:	e7af      	b.n	8021f98 <atanf+0x84>
 8022038:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802203c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022040:	2303      	movs	r3, #3
 8022042:	e7a9      	b.n	8021f98 <atanf+0x84>
 8022044:	4a1b      	ldr	r2, [pc, #108]	@ (80220b4 <atanf+0x1a0>)
 8022046:	491c      	ldr	r1, [pc, #112]	@ (80220b8 <atanf+0x1a4>)
 8022048:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802204c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8022050:	edd3 6a00 	vldr	s13, [r3]
 8022054:	ee37 7a66 	vsub.f32	s14, s14, s13
 8022058:	2d00      	cmp	r5, #0
 802205a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802205e:	edd2 7a00 	vldr	s15, [r2]
 8022062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8022066:	bfb8      	it	lt
 8022068:	eef1 7a67 	vneglt.f32	s15, s15
 802206c:	e761      	b.n	8021f32 <atanf+0x1e>
 802206e:	bf00      	nop
 8022070:	bfc90fdb 	.word	0xbfc90fdb
 8022074:	3fc90fdb 	.word	0x3fc90fdb
 8022078:	3edfffff 	.word	0x3edfffff
 802207c:	7149f2ca 	.word	0x7149f2ca
 8022080:	3f97ffff 	.word	0x3f97ffff
 8022084:	3c8569d7 	.word	0x3c8569d7
 8022088:	3d4bda59 	.word	0x3d4bda59
 802208c:	bd6ef16b 	.word	0xbd6ef16b
 8022090:	3d886b35 	.word	0x3d886b35
 8022094:	3dba2e6e 	.word	0x3dba2e6e
 8022098:	3e124925 	.word	0x3e124925
 802209c:	3eaaaaab 	.word	0x3eaaaaab
 80220a0:	bd15a221 	.word	0xbd15a221
 80220a4:	bd9d8795 	.word	0xbd9d8795
 80220a8:	bde38e38 	.word	0xbde38e38
 80220ac:	be4ccccd 	.word	0xbe4ccccd
 80220b0:	401bffff 	.word	0x401bffff
 80220b4:	080264c8 	.word	0x080264c8
 80220b8:	080264b8 	.word	0x080264b8

080220bc <fabsf>:
 80220bc:	ee10 3a10 	vmov	r3, s0
 80220c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80220c4:	ee00 3a10 	vmov	s0, r3
 80220c8:	4770      	bx	lr

080220ca <abort>:
 80220ca:	b508      	push	{r3, lr}
 80220cc:	2006      	movs	r0, #6
 80220ce:	f000 fae1 	bl	8022694 <raise>
 80220d2:	2001      	movs	r0, #1
 80220d4:	f7df fada 	bl	800168c <_exit>

080220d8 <__assert_func>:
 80220d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80220da:	4614      	mov	r4, r2
 80220dc:	461a      	mov	r2, r3
 80220de:	4b09      	ldr	r3, [pc, #36]	@ (8022104 <__assert_func+0x2c>)
 80220e0:	681b      	ldr	r3, [r3, #0]
 80220e2:	4605      	mov	r5, r0
 80220e4:	68d8      	ldr	r0, [r3, #12]
 80220e6:	b954      	cbnz	r4, 80220fe <__assert_func+0x26>
 80220e8:	4b07      	ldr	r3, [pc, #28]	@ (8022108 <__assert_func+0x30>)
 80220ea:	461c      	mov	r4, r3
 80220ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80220f0:	9100      	str	r1, [sp, #0]
 80220f2:	462b      	mov	r3, r5
 80220f4:	4905      	ldr	r1, [pc, #20]	@ (802210c <__assert_func+0x34>)
 80220f6:	f000 f983 	bl	8022400 <fiprintf>
 80220fa:	f7ff ffe6 	bl	80220ca <abort>
 80220fe:	4b04      	ldr	r3, [pc, #16]	@ (8022110 <__assert_func+0x38>)
 8022100:	e7f4      	b.n	80220ec <__assert_func+0x14>
 8022102:	bf00      	nop
 8022104:	240000e8 	.word	0x240000e8
 8022108:	08026513 	.word	0x08026513
 802210c:	080264e5 	.word	0x080264e5
 8022110:	080264d8 	.word	0x080264d8

08022114 <atexit>:
 8022114:	2300      	movs	r3, #0
 8022116:	4601      	mov	r1, r0
 8022118:	461a      	mov	r2, r3
 802211a:	4618      	mov	r0, r3
 802211c:	f000 bb68 	b.w	80227f0 <__register_exitproc>

08022120 <malloc>:
 8022120:	4b02      	ldr	r3, [pc, #8]	@ (802212c <malloc+0xc>)
 8022122:	4601      	mov	r1, r0
 8022124:	6818      	ldr	r0, [r3, #0]
 8022126:	f000 b82d 	b.w	8022184 <_malloc_r>
 802212a:	bf00      	nop
 802212c:	240000e8 	.word	0x240000e8

08022130 <free>:
 8022130:	4b02      	ldr	r3, [pc, #8]	@ (802213c <free+0xc>)
 8022132:	4601      	mov	r1, r0
 8022134:	6818      	ldr	r0, [r3, #0]
 8022136:	f000 bbb7 	b.w	80228a8 <_free_r>
 802213a:	bf00      	nop
 802213c:	240000e8 	.word	0x240000e8

08022140 <sbrk_aligned>:
 8022140:	b570      	push	{r4, r5, r6, lr}
 8022142:	4e0f      	ldr	r6, [pc, #60]	@ (8022180 <sbrk_aligned+0x40>)
 8022144:	460c      	mov	r4, r1
 8022146:	6831      	ldr	r1, [r6, #0]
 8022148:	4605      	mov	r5, r0
 802214a:	b911      	cbnz	r1, 8022152 <sbrk_aligned+0x12>
 802214c:	f000 faf2 	bl	8022734 <_sbrk_r>
 8022150:	6030      	str	r0, [r6, #0]
 8022152:	4621      	mov	r1, r4
 8022154:	4628      	mov	r0, r5
 8022156:	f000 faed 	bl	8022734 <_sbrk_r>
 802215a:	1c43      	adds	r3, r0, #1
 802215c:	d103      	bne.n	8022166 <sbrk_aligned+0x26>
 802215e:	f04f 34ff 	mov.w	r4, #4294967295
 8022162:	4620      	mov	r0, r4
 8022164:	bd70      	pop	{r4, r5, r6, pc}
 8022166:	1cc4      	adds	r4, r0, #3
 8022168:	f024 0403 	bic.w	r4, r4, #3
 802216c:	42a0      	cmp	r0, r4
 802216e:	d0f8      	beq.n	8022162 <sbrk_aligned+0x22>
 8022170:	1a21      	subs	r1, r4, r0
 8022172:	4628      	mov	r0, r5
 8022174:	f000 fade 	bl	8022734 <_sbrk_r>
 8022178:	3001      	adds	r0, #1
 802217a:	d1f2      	bne.n	8022162 <sbrk_aligned+0x22>
 802217c:	e7ef      	b.n	802215e <sbrk_aligned+0x1e>
 802217e:	bf00      	nop
 8022180:	24025cb0 	.word	0x24025cb0

08022184 <_malloc_r>:
 8022184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022188:	1ccd      	adds	r5, r1, #3
 802218a:	f025 0503 	bic.w	r5, r5, #3
 802218e:	3508      	adds	r5, #8
 8022190:	2d0c      	cmp	r5, #12
 8022192:	bf38      	it	cc
 8022194:	250c      	movcc	r5, #12
 8022196:	2d00      	cmp	r5, #0
 8022198:	4606      	mov	r6, r0
 802219a:	db01      	blt.n	80221a0 <_malloc_r+0x1c>
 802219c:	42a9      	cmp	r1, r5
 802219e:	d904      	bls.n	80221aa <_malloc_r+0x26>
 80221a0:	230c      	movs	r3, #12
 80221a2:	6033      	str	r3, [r6, #0]
 80221a4:	2000      	movs	r0, #0
 80221a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80221aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8022280 <_malloc_r+0xfc>
 80221ae:	f000 f869 	bl	8022284 <__malloc_lock>
 80221b2:	f8d8 3000 	ldr.w	r3, [r8]
 80221b6:	461c      	mov	r4, r3
 80221b8:	bb44      	cbnz	r4, 802220c <_malloc_r+0x88>
 80221ba:	4629      	mov	r1, r5
 80221bc:	4630      	mov	r0, r6
 80221be:	f7ff ffbf 	bl	8022140 <sbrk_aligned>
 80221c2:	1c43      	adds	r3, r0, #1
 80221c4:	4604      	mov	r4, r0
 80221c6:	d158      	bne.n	802227a <_malloc_r+0xf6>
 80221c8:	f8d8 4000 	ldr.w	r4, [r8]
 80221cc:	4627      	mov	r7, r4
 80221ce:	2f00      	cmp	r7, #0
 80221d0:	d143      	bne.n	802225a <_malloc_r+0xd6>
 80221d2:	2c00      	cmp	r4, #0
 80221d4:	d04b      	beq.n	802226e <_malloc_r+0xea>
 80221d6:	6823      	ldr	r3, [r4, #0]
 80221d8:	4639      	mov	r1, r7
 80221da:	4630      	mov	r0, r6
 80221dc:	eb04 0903 	add.w	r9, r4, r3
 80221e0:	f000 faa8 	bl	8022734 <_sbrk_r>
 80221e4:	4581      	cmp	r9, r0
 80221e6:	d142      	bne.n	802226e <_malloc_r+0xea>
 80221e8:	6821      	ldr	r1, [r4, #0]
 80221ea:	1a6d      	subs	r5, r5, r1
 80221ec:	4629      	mov	r1, r5
 80221ee:	4630      	mov	r0, r6
 80221f0:	f7ff ffa6 	bl	8022140 <sbrk_aligned>
 80221f4:	3001      	adds	r0, #1
 80221f6:	d03a      	beq.n	802226e <_malloc_r+0xea>
 80221f8:	6823      	ldr	r3, [r4, #0]
 80221fa:	442b      	add	r3, r5
 80221fc:	6023      	str	r3, [r4, #0]
 80221fe:	f8d8 3000 	ldr.w	r3, [r8]
 8022202:	685a      	ldr	r2, [r3, #4]
 8022204:	bb62      	cbnz	r2, 8022260 <_malloc_r+0xdc>
 8022206:	f8c8 7000 	str.w	r7, [r8]
 802220a:	e00f      	b.n	802222c <_malloc_r+0xa8>
 802220c:	6822      	ldr	r2, [r4, #0]
 802220e:	1b52      	subs	r2, r2, r5
 8022210:	d420      	bmi.n	8022254 <_malloc_r+0xd0>
 8022212:	2a0b      	cmp	r2, #11
 8022214:	d917      	bls.n	8022246 <_malloc_r+0xc2>
 8022216:	1961      	adds	r1, r4, r5
 8022218:	42a3      	cmp	r3, r4
 802221a:	6025      	str	r5, [r4, #0]
 802221c:	bf18      	it	ne
 802221e:	6059      	strne	r1, [r3, #4]
 8022220:	6863      	ldr	r3, [r4, #4]
 8022222:	bf08      	it	eq
 8022224:	f8c8 1000 	streq.w	r1, [r8]
 8022228:	5162      	str	r2, [r4, r5]
 802222a:	604b      	str	r3, [r1, #4]
 802222c:	4630      	mov	r0, r6
 802222e:	f000 f82f 	bl	8022290 <__malloc_unlock>
 8022232:	f104 000b 	add.w	r0, r4, #11
 8022236:	1d23      	adds	r3, r4, #4
 8022238:	f020 0007 	bic.w	r0, r0, #7
 802223c:	1ac2      	subs	r2, r0, r3
 802223e:	bf1c      	itt	ne
 8022240:	1a1b      	subne	r3, r3, r0
 8022242:	50a3      	strne	r3, [r4, r2]
 8022244:	e7af      	b.n	80221a6 <_malloc_r+0x22>
 8022246:	6862      	ldr	r2, [r4, #4]
 8022248:	42a3      	cmp	r3, r4
 802224a:	bf0c      	ite	eq
 802224c:	f8c8 2000 	streq.w	r2, [r8]
 8022250:	605a      	strne	r2, [r3, #4]
 8022252:	e7eb      	b.n	802222c <_malloc_r+0xa8>
 8022254:	4623      	mov	r3, r4
 8022256:	6864      	ldr	r4, [r4, #4]
 8022258:	e7ae      	b.n	80221b8 <_malloc_r+0x34>
 802225a:	463c      	mov	r4, r7
 802225c:	687f      	ldr	r7, [r7, #4]
 802225e:	e7b6      	b.n	80221ce <_malloc_r+0x4a>
 8022260:	461a      	mov	r2, r3
 8022262:	685b      	ldr	r3, [r3, #4]
 8022264:	42a3      	cmp	r3, r4
 8022266:	d1fb      	bne.n	8022260 <_malloc_r+0xdc>
 8022268:	2300      	movs	r3, #0
 802226a:	6053      	str	r3, [r2, #4]
 802226c:	e7de      	b.n	802222c <_malloc_r+0xa8>
 802226e:	230c      	movs	r3, #12
 8022270:	6033      	str	r3, [r6, #0]
 8022272:	4630      	mov	r0, r6
 8022274:	f000 f80c 	bl	8022290 <__malloc_unlock>
 8022278:	e794      	b.n	80221a4 <_malloc_r+0x20>
 802227a:	6005      	str	r5, [r0, #0]
 802227c:	e7d6      	b.n	802222c <_malloc_r+0xa8>
 802227e:	bf00      	nop
 8022280:	24025cb4 	.word	0x24025cb4

08022284 <__malloc_lock>:
 8022284:	4801      	ldr	r0, [pc, #4]	@ (802228c <__malloc_lock+0x8>)
 8022286:	f000 baa2 	b.w	80227ce <__retarget_lock_acquire_recursive>
 802228a:	bf00      	nop
 802228c:	24025df8 	.word	0x24025df8

08022290 <__malloc_unlock>:
 8022290:	4801      	ldr	r0, [pc, #4]	@ (8022298 <__malloc_unlock+0x8>)
 8022292:	f000 ba9d 	b.w	80227d0 <__retarget_lock_release_recursive>
 8022296:	bf00      	nop
 8022298:	24025df8 	.word	0x24025df8

0802229c <__cxa_atexit>:
 802229c:	b510      	push	{r4, lr}
 802229e:	4604      	mov	r4, r0
 80222a0:	4804      	ldr	r0, [pc, #16]	@ (80222b4 <__cxa_atexit+0x18>)
 80222a2:	4613      	mov	r3, r2
 80222a4:	b120      	cbz	r0, 80222b0 <__cxa_atexit+0x14>
 80222a6:	460a      	mov	r2, r1
 80222a8:	2002      	movs	r0, #2
 80222aa:	4621      	mov	r1, r4
 80222ac:	f000 faa0 	bl	80227f0 <__register_exitproc>
 80222b0:	bd10      	pop	{r4, pc}
 80222b2:	bf00      	nop
 80222b4:	080227f1 	.word	0x080227f1

080222b8 <std>:
 80222b8:	2300      	movs	r3, #0
 80222ba:	b510      	push	{r4, lr}
 80222bc:	4604      	mov	r4, r0
 80222be:	e9c0 3300 	strd	r3, r3, [r0]
 80222c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80222c6:	6083      	str	r3, [r0, #8]
 80222c8:	8181      	strh	r1, [r0, #12]
 80222ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80222cc:	81c2      	strh	r2, [r0, #14]
 80222ce:	6183      	str	r3, [r0, #24]
 80222d0:	4619      	mov	r1, r3
 80222d2:	2208      	movs	r2, #8
 80222d4:	305c      	adds	r0, #92	@ 0x5c
 80222d6:	f000 f99b 	bl	8022610 <memset>
 80222da:	4b0d      	ldr	r3, [pc, #52]	@ (8022310 <std+0x58>)
 80222dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80222de:	4b0d      	ldr	r3, [pc, #52]	@ (8022314 <std+0x5c>)
 80222e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80222e2:	4b0d      	ldr	r3, [pc, #52]	@ (8022318 <std+0x60>)
 80222e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80222e6:	4b0d      	ldr	r3, [pc, #52]	@ (802231c <std+0x64>)
 80222e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80222ea:	4b0d      	ldr	r3, [pc, #52]	@ (8022320 <std+0x68>)
 80222ec:	6224      	str	r4, [r4, #32]
 80222ee:	429c      	cmp	r4, r3
 80222f0:	d006      	beq.n	8022300 <std+0x48>
 80222f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80222f6:	4294      	cmp	r4, r2
 80222f8:	d002      	beq.n	8022300 <std+0x48>
 80222fa:	33d0      	adds	r3, #208	@ 0xd0
 80222fc:	429c      	cmp	r4, r3
 80222fe:	d105      	bne.n	802230c <std+0x54>
 8022300:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8022304:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022308:	f000 ba60 	b.w	80227cc <__retarget_lock_init_recursive>
 802230c:	bd10      	pop	{r4, pc}
 802230e:	bf00      	nop
 8022310:	08022461 	.word	0x08022461
 8022314:	08022483 	.word	0x08022483
 8022318:	080224bb 	.word	0x080224bb
 802231c:	080224df 	.word	0x080224df
 8022320:	24025cb8 	.word	0x24025cb8

08022324 <stdio_exit_handler>:
 8022324:	4a02      	ldr	r2, [pc, #8]	@ (8022330 <stdio_exit_handler+0xc>)
 8022326:	4903      	ldr	r1, [pc, #12]	@ (8022334 <stdio_exit_handler+0x10>)
 8022328:	4803      	ldr	r0, [pc, #12]	@ (8022338 <stdio_exit_handler+0x14>)
 802232a:	f000 b87b 	b.w	8022424 <_fwalk_sglue>
 802232e:	bf00      	nop
 8022330:	240000dc 	.word	0x240000dc
 8022334:	08022fe5 	.word	0x08022fe5
 8022338:	240000ec 	.word	0x240000ec

0802233c <cleanup_stdio>:
 802233c:	6841      	ldr	r1, [r0, #4]
 802233e:	4b0c      	ldr	r3, [pc, #48]	@ (8022370 <cleanup_stdio+0x34>)
 8022340:	4299      	cmp	r1, r3
 8022342:	b510      	push	{r4, lr}
 8022344:	4604      	mov	r4, r0
 8022346:	d001      	beq.n	802234c <cleanup_stdio+0x10>
 8022348:	f000 fe4c 	bl	8022fe4 <_fflush_r>
 802234c:	68a1      	ldr	r1, [r4, #8]
 802234e:	4b09      	ldr	r3, [pc, #36]	@ (8022374 <cleanup_stdio+0x38>)
 8022350:	4299      	cmp	r1, r3
 8022352:	d002      	beq.n	802235a <cleanup_stdio+0x1e>
 8022354:	4620      	mov	r0, r4
 8022356:	f000 fe45 	bl	8022fe4 <_fflush_r>
 802235a:	68e1      	ldr	r1, [r4, #12]
 802235c:	4b06      	ldr	r3, [pc, #24]	@ (8022378 <cleanup_stdio+0x3c>)
 802235e:	4299      	cmp	r1, r3
 8022360:	d004      	beq.n	802236c <cleanup_stdio+0x30>
 8022362:	4620      	mov	r0, r4
 8022364:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022368:	f000 be3c 	b.w	8022fe4 <_fflush_r>
 802236c:	bd10      	pop	{r4, pc}
 802236e:	bf00      	nop
 8022370:	24025cb8 	.word	0x24025cb8
 8022374:	24025d20 	.word	0x24025d20
 8022378:	24025d88 	.word	0x24025d88

0802237c <global_stdio_init.part.0>:
 802237c:	b510      	push	{r4, lr}
 802237e:	4b0b      	ldr	r3, [pc, #44]	@ (80223ac <global_stdio_init.part.0+0x30>)
 8022380:	4c0b      	ldr	r4, [pc, #44]	@ (80223b0 <global_stdio_init.part.0+0x34>)
 8022382:	4a0c      	ldr	r2, [pc, #48]	@ (80223b4 <global_stdio_init.part.0+0x38>)
 8022384:	601a      	str	r2, [r3, #0]
 8022386:	4620      	mov	r0, r4
 8022388:	2200      	movs	r2, #0
 802238a:	2104      	movs	r1, #4
 802238c:	f7ff ff94 	bl	80222b8 <std>
 8022390:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8022394:	2201      	movs	r2, #1
 8022396:	2109      	movs	r1, #9
 8022398:	f7ff ff8e 	bl	80222b8 <std>
 802239c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80223a0:	2202      	movs	r2, #2
 80223a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223a6:	2112      	movs	r1, #18
 80223a8:	f7ff bf86 	b.w	80222b8 <std>
 80223ac:	24025df0 	.word	0x24025df0
 80223b0:	24025cb8 	.word	0x24025cb8
 80223b4:	08022325 	.word	0x08022325

080223b8 <__sfp_lock_acquire>:
 80223b8:	4801      	ldr	r0, [pc, #4]	@ (80223c0 <__sfp_lock_acquire+0x8>)
 80223ba:	f000 ba08 	b.w	80227ce <__retarget_lock_acquire_recursive>
 80223be:	bf00      	nop
 80223c0:	24025dfa 	.word	0x24025dfa

080223c4 <__sfp_lock_release>:
 80223c4:	4801      	ldr	r0, [pc, #4]	@ (80223cc <__sfp_lock_release+0x8>)
 80223c6:	f000 ba03 	b.w	80227d0 <__retarget_lock_release_recursive>
 80223ca:	bf00      	nop
 80223cc:	24025dfa 	.word	0x24025dfa

080223d0 <__sinit>:
 80223d0:	b510      	push	{r4, lr}
 80223d2:	4604      	mov	r4, r0
 80223d4:	f7ff fff0 	bl	80223b8 <__sfp_lock_acquire>
 80223d8:	6a23      	ldr	r3, [r4, #32]
 80223da:	b11b      	cbz	r3, 80223e4 <__sinit+0x14>
 80223dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80223e0:	f7ff bff0 	b.w	80223c4 <__sfp_lock_release>
 80223e4:	4b04      	ldr	r3, [pc, #16]	@ (80223f8 <__sinit+0x28>)
 80223e6:	6223      	str	r3, [r4, #32]
 80223e8:	4b04      	ldr	r3, [pc, #16]	@ (80223fc <__sinit+0x2c>)
 80223ea:	681b      	ldr	r3, [r3, #0]
 80223ec:	2b00      	cmp	r3, #0
 80223ee:	d1f5      	bne.n	80223dc <__sinit+0xc>
 80223f0:	f7ff ffc4 	bl	802237c <global_stdio_init.part.0>
 80223f4:	e7f2      	b.n	80223dc <__sinit+0xc>
 80223f6:	bf00      	nop
 80223f8:	0802233d 	.word	0x0802233d
 80223fc:	24025df0 	.word	0x24025df0

08022400 <fiprintf>:
 8022400:	b40e      	push	{r1, r2, r3}
 8022402:	b503      	push	{r0, r1, lr}
 8022404:	4601      	mov	r1, r0
 8022406:	ab03      	add	r3, sp, #12
 8022408:	4805      	ldr	r0, [pc, #20]	@ (8022420 <fiprintf+0x20>)
 802240a:	f853 2b04 	ldr.w	r2, [r3], #4
 802240e:	6800      	ldr	r0, [r0, #0]
 8022410:	9301      	str	r3, [sp, #4]
 8022412:	f000 fabd 	bl	8022990 <_vfiprintf_r>
 8022416:	b002      	add	sp, #8
 8022418:	f85d eb04 	ldr.w	lr, [sp], #4
 802241c:	b003      	add	sp, #12
 802241e:	4770      	bx	lr
 8022420:	240000e8 	.word	0x240000e8

08022424 <_fwalk_sglue>:
 8022424:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022428:	4607      	mov	r7, r0
 802242a:	4688      	mov	r8, r1
 802242c:	4614      	mov	r4, r2
 802242e:	2600      	movs	r6, #0
 8022430:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022434:	f1b9 0901 	subs.w	r9, r9, #1
 8022438:	d505      	bpl.n	8022446 <_fwalk_sglue+0x22>
 802243a:	6824      	ldr	r4, [r4, #0]
 802243c:	2c00      	cmp	r4, #0
 802243e:	d1f7      	bne.n	8022430 <_fwalk_sglue+0xc>
 8022440:	4630      	mov	r0, r6
 8022442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022446:	89ab      	ldrh	r3, [r5, #12]
 8022448:	2b01      	cmp	r3, #1
 802244a:	d907      	bls.n	802245c <_fwalk_sglue+0x38>
 802244c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022450:	3301      	adds	r3, #1
 8022452:	d003      	beq.n	802245c <_fwalk_sglue+0x38>
 8022454:	4629      	mov	r1, r5
 8022456:	4638      	mov	r0, r7
 8022458:	47c0      	blx	r8
 802245a:	4306      	orrs	r6, r0
 802245c:	3568      	adds	r5, #104	@ 0x68
 802245e:	e7e9      	b.n	8022434 <_fwalk_sglue+0x10>

08022460 <__sread>:
 8022460:	b510      	push	{r4, lr}
 8022462:	460c      	mov	r4, r1
 8022464:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022468:	f000 f93e 	bl	80226e8 <_read_r>
 802246c:	2800      	cmp	r0, #0
 802246e:	bfab      	itete	ge
 8022470:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8022472:	89a3      	ldrhlt	r3, [r4, #12]
 8022474:	181b      	addge	r3, r3, r0
 8022476:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 802247a:	bfac      	ite	ge
 802247c:	6563      	strge	r3, [r4, #84]	@ 0x54
 802247e:	81a3      	strhlt	r3, [r4, #12]
 8022480:	bd10      	pop	{r4, pc}

08022482 <__swrite>:
 8022482:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022486:	461f      	mov	r7, r3
 8022488:	898b      	ldrh	r3, [r1, #12]
 802248a:	05db      	lsls	r3, r3, #23
 802248c:	4605      	mov	r5, r0
 802248e:	460c      	mov	r4, r1
 8022490:	4616      	mov	r6, r2
 8022492:	d505      	bpl.n	80224a0 <__swrite+0x1e>
 8022494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022498:	2302      	movs	r3, #2
 802249a:	2200      	movs	r2, #0
 802249c:	f000 f912 	bl	80226c4 <_lseek_r>
 80224a0:	89a3      	ldrh	r3, [r4, #12]
 80224a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80224a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80224aa:	81a3      	strh	r3, [r4, #12]
 80224ac:	4632      	mov	r2, r6
 80224ae:	463b      	mov	r3, r7
 80224b0:	4628      	mov	r0, r5
 80224b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80224b6:	f000 b94d 	b.w	8022754 <_write_r>

080224ba <__sseek>:
 80224ba:	b510      	push	{r4, lr}
 80224bc:	460c      	mov	r4, r1
 80224be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80224c2:	f000 f8ff 	bl	80226c4 <_lseek_r>
 80224c6:	1c43      	adds	r3, r0, #1
 80224c8:	89a3      	ldrh	r3, [r4, #12]
 80224ca:	bf15      	itete	ne
 80224cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80224ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80224d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80224d6:	81a3      	strheq	r3, [r4, #12]
 80224d8:	bf18      	it	ne
 80224da:	81a3      	strhne	r3, [r4, #12]
 80224dc:	bd10      	pop	{r4, pc}

080224de <__sclose>:
 80224de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80224e2:	f000 b8df 	b.w	80226a4 <_close_r>

080224e6 <__swbuf_r>:
 80224e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80224e8:	460e      	mov	r6, r1
 80224ea:	4614      	mov	r4, r2
 80224ec:	4605      	mov	r5, r0
 80224ee:	b118      	cbz	r0, 80224f8 <__swbuf_r+0x12>
 80224f0:	6a03      	ldr	r3, [r0, #32]
 80224f2:	b90b      	cbnz	r3, 80224f8 <__swbuf_r+0x12>
 80224f4:	f7ff ff6c 	bl	80223d0 <__sinit>
 80224f8:	69a3      	ldr	r3, [r4, #24]
 80224fa:	60a3      	str	r3, [r4, #8]
 80224fc:	89a3      	ldrh	r3, [r4, #12]
 80224fe:	071a      	lsls	r2, r3, #28
 8022500:	d501      	bpl.n	8022506 <__swbuf_r+0x20>
 8022502:	6923      	ldr	r3, [r4, #16]
 8022504:	b943      	cbnz	r3, 8022518 <__swbuf_r+0x32>
 8022506:	4621      	mov	r1, r4
 8022508:	4628      	mov	r0, r5
 802250a:	f000 f82b 	bl	8022564 <__swsetup_r>
 802250e:	b118      	cbz	r0, 8022518 <__swbuf_r+0x32>
 8022510:	f04f 37ff 	mov.w	r7, #4294967295
 8022514:	4638      	mov	r0, r7
 8022516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022518:	6823      	ldr	r3, [r4, #0]
 802251a:	6922      	ldr	r2, [r4, #16]
 802251c:	1a98      	subs	r0, r3, r2
 802251e:	6963      	ldr	r3, [r4, #20]
 8022520:	b2f6      	uxtb	r6, r6
 8022522:	4283      	cmp	r3, r0
 8022524:	4637      	mov	r7, r6
 8022526:	dc05      	bgt.n	8022534 <__swbuf_r+0x4e>
 8022528:	4621      	mov	r1, r4
 802252a:	4628      	mov	r0, r5
 802252c:	f000 fd5a 	bl	8022fe4 <_fflush_r>
 8022530:	2800      	cmp	r0, #0
 8022532:	d1ed      	bne.n	8022510 <__swbuf_r+0x2a>
 8022534:	68a3      	ldr	r3, [r4, #8]
 8022536:	3b01      	subs	r3, #1
 8022538:	60a3      	str	r3, [r4, #8]
 802253a:	6823      	ldr	r3, [r4, #0]
 802253c:	1c5a      	adds	r2, r3, #1
 802253e:	6022      	str	r2, [r4, #0]
 8022540:	701e      	strb	r6, [r3, #0]
 8022542:	6962      	ldr	r2, [r4, #20]
 8022544:	1c43      	adds	r3, r0, #1
 8022546:	429a      	cmp	r2, r3
 8022548:	d004      	beq.n	8022554 <__swbuf_r+0x6e>
 802254a:	89a3      	ldrh	r3, [r4, #12]
 802254c:	07db      	lsls	r3, r3, #31
 802254e:	d5e1      	bpl.n	8022514 <__swbuf_r+0x2e>
 8022550:	2e0a      	cmp	r6, #10
 8022552:	d1df      	bne.n	8022514 <__swbuf_r+0x2e>
 8022554:	4621      	mov	r1, r4
 8022556:	4628      	mov	r0, r5
 8022558:	f000 fd44 	bl	8022fe4 <_fflush_r>
 802255c:	2800      	cmp	r0, #0
 802255e:	d0d9      	beq.n	8022514 <__swbuf_r+0x2e>
 8022560:	e7d6      	b.n	8022510 <__swbuf_r+0x2a>
	...

08022564 <__swsetup_r>:
 8022564:	b538      	push	{r3, r4, r5, lr}
 8022566:	4b29      	ldr	r3, [pc, #164]	@ (802260c <__swsetup_r+0xa8>)
 8022568:	4605      	mov	r5, r0
 802256a:	6818      	ldr	r0, [r3, #0]
 802256c:	460c      	mov	r4, r1
 802256e:	b118      	cbz	r0, 8022578 <__swsetup_r+0x14>
 8022570:	6a03      	ldr	r3, [r0, #32]
 8022572:	b90b      	cbnz	r3, 8022578 <__swsetup_r+0x14>
 8022574:	f7ff ff2c 	bl	80223d0 <__sinit>
 8022578:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802257c:	0719      	lsls	r1, r3, #28
 802257e:	d422      	bmi.n	80225c6 <__swsetup_r+0x62>
 8022580:	06da      	lsls	r2, r3, #27
 8022582:	d407      	bmi.n	8022594 <__swsetup_r+0x30>
 8022584:	2209      	movs	r2, #9
 8022586:	602a      	str	r2, [r5, #0]
 8022588:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802258c:	81a3      	strh	r3, [r4, #12]
 802258e:	f04f 30ff 	mov.w	r0, #4294967295
 8022592:	e033      	b.n	80225fc <__swsetup_r+0x98>
 8022594:	0758      	lsls	r0, r3, #29
 8022596:	d512      	bpl.n	80225be <__swsetup_r+0x5a>
 8022598:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802259a:	b141      	cbz	r1, 80225ae <__swsetup_r+0x4a>
 802259c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80225a0:	4299      	cmp	r1, r3
 80225a2:	d002      	beq.n	80225aa <__swsetup_r+0x46>
 80225a4:	4628      	mov	r0, r5
 80225a6:	f000 f97f 	bl	80228a8 <_free_r>
 80225aa:	2300      	movs	r3, #0
 80225ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80225ae:	89a3      	ldrh	r3, [r4, #12]
 80225b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80225b4:	81a3      	strh	r3, [r4, #12]
 80225b6:	2300      	movs	r3, #0
 80225b8:	6063      	str	r3, [r4, #4]
 80225ba:	6923      	ldr	r3, [r4, #16]
 80225bc:	6023      	str	r3, [r4, #0]
 80225be:	89a3      	ldrh	r3, [r4, #12]
 80225c0:	f043 0308 	orr.w	r3, r3, #8
 80225c4:	81a3      	strh	r3, [r4, #12]
 80225c6:	6923      	ldr	r3, [r4, #16]
 80225c8:	b94b      	cbnz	r3, 80225de <__swsetup_r+0x7a>
 80225ca:	89a3      	ldrh	r3, [r4, #12]
 80225cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80225d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80225d4:	d003      	beq.n	80225de <__swsetup_r+0x7a>
 80225d6:	4621      	mov	r1, r4
 80225d8:	4628      	mov	r0, r5
 80225da:	f000 fd51 	bl	8023080 <__smakebuf_r>
 80225de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80225e2:	f013 0201 	ands.w	r2, r3, #1
 80225e6:	d00a      	beq.n	80225fe <__swsetup_r+0x9a>
 80225e8:	2200      	movs	r2, #0
 80225ea:	60a2      	str	r2, [r4, #8]
 80225ec:	6962      	ldr	r2, [r4, #20]
 80225ee:	4252      	negs	r2, r2
 80225f0:	61a2      	str	r2, [r4, #24]
 80225f2:	6922      	ldr	r2, [r4, #16]
 80225f4:	b942      	cbnz	r2, 8022608 <__swsetup_r+0xa4>
 80225f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80225fa:	d1c5      	bne.n	8022588 <__swsetup_r+0x24>
 80225fc:	bd38      	pop	{r3, r4, r5, pc}
 80225fe:	0799      	lsls	r1, r3, #30
 8022600:	bf58      	it	pl
 8022602:	6962      	ldrpl	r2, [r4, #20]
 8022604:	60a2      	str	r2, [r4, #8]
 8022606:	e7f4      	b.n	80225f2 <__swsetup_r+0x8e>
 8022608:	2000      	movs	r0, #0
 802260a:	e7f7      	b.n	80225fc <__swsetup_r+0x98>
 802260c:	240000e8 	.word	0x240000e8

08022610 <memset>:
 8022610:	4402      	add	r2, r0
 8022612:	4603      	mov	r3, r0
 8022614:	4293      	cmp	r3, r2
 8022616:	d100      	bne.n	802261a <memset+0xa>
 8022618:	4770      	bx	lr
 802261a:	f803 1b01 	strb.w	r1, [r3], #1
 802261e:	e7f9      	b.n	8022614 <memset+0x4>

08022620 <strncmp>:
 8022620:	b510      	push	{r4, lr}
 8022622:	b16a      	cbz	r2, 8022640 <strncmp+0x20>
 8022624:	3901      	subs	r1, #1
 8022626:	1884      	adds	r4, r0, r2
 8022628:	f810 2b01 	ldrb.w	r2, [r0], #1
 802262c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8022630:	429a      	cmp	r2, r3
 8022632:	d103      	bne.n	802263c <strncmp+0x1c>
 8022634:	42a0      	cmp	r0, r4
 8022636:	d001      	beq.n	802263c <strncmp+0x1c>
 8022638:	2a00      	cmp	r2, #0
 802263a:	d1f5      	bne.n	8022628 <strncmp+0x8>
 802263c:	1ad0      	subs	r0, r2, r3
 802263e:	bd10      	pop	{r4, pc}
 8022640:	4610      	mov	r0, r2
 8022642:	e7fc      	b.n	802263e <strncmp+0x1e>

08022644 <_raise_r>:
 8022644:	291f      	cmp	r1, #31
 8022646:	b538      	push	{r3, r4, r5, lr}
 8022648:	4605      	mov	r5, r0
 802264a:	460c      	mov	r4, r1
 802264c:	d904      	bls.n	8022658 <_raise_r+0x14>
 802264e:	2316      	movs	r3, #22
 8022650:	6003      	str	r3, [r0, #0]
 8022652:	f04f 30ff 	mov.w	r0, #4294967295
 8022656:	bd38      	pop	{r3, r4, r5, pc}
 8022658:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802265a:	b112      	cbz	r2, 8022662 <_raise_r+0x1e>
 802265c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022660:	b94b      	cbnz	r3, 8022676 <_raise_r+0x32>
 8022662:	4628      	mov	r0, r5
 8022664:	f000 f864 	bl	8022730 <_getpid_r>
 8022668:	4622      	mov	r2, r4
 802266a:	4601      	mov	r1, r0
 802266c:	4628      	mov	r0, r5
 802266e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022672:	f000 b84b 	b.w	802270c <_kill_r>
 8022676:	2b01      	cmp	r3, #1
 8022678:	d00a      	beq.n	8022690 <_raise_r+0x4c>
 802267a:	1c59      	adds	r1, r3, #1
 802267c:	d103      	bne.n	8022686 <_raise_r+0x42>
 802267e:	2316      	movs	r3, #22
 8022680:	6003      	str	r3, [r0, #0]
 8022682:	2001      	movs	r0, #1
 8022684:	e7e7      	b.n	8022656 <_raise_r+0x12>
 8022686:	2100      	movs	r1, #0
 8022688:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802268c:	4620      	mov	r0, r4
 802268e:	4798      	blx	r3
 8022690:	2000      	movs	r0, #0
 8022692:	e7e0      	b.n	8022656 <_raise_r+0x12>

08022694 <raise>:
 8022694:	4b02      	ldr	r3, [pc, #8]	@ (80226a0 <raise+0xc>)
 8022696:	4601      	mov	r1, r0
 8022698:	6818      	ldr	r0, [r3, #0]
 802269a:	f7ff bfd3 	b.w	8022644 <_raise_r>
 802269e:	bf00      	nop
 80226a0:	240000e8 	.word	0x240000e8

080226a4 <_close_r>:
 80226a4:	b538      	push	{r3, r4, r5, lr}
 80226a6:	4d06      	ldr	r5, [pc, #24]	@ (80226c0 <_close_r+0x1c>)
 80226a8:	2300      	movs	r3, #0
 80226aa:	4604      	mov	r4, r0
 80226ac:	4608      	mov	r0, r1
 80226ae:	602b      	str	r3, [r5, #0]
 80226b0:	f7df f80e 	bl	80016d0 <_close>
 80226b4:	1c43      	adds	r3, r0, #1
 80226b6:	d102      	bne.n	80226be <_close_r+0x1a>
 80226b8:	682b      	ldr	r3, [r5, #0]
 80226ba:	b103      	cbz	r3, 80226be <_close_r+0x1a>
 80226bc:	6023      	str	r3, [r4, #0]
 80226be:	bd38      	pop	{r3, r4, r5, pc}
 80226c0:	24025df4 	.word	0x24025df4

080226c4 <_lseek_r>:
 80226c4:	b538      	push	{r3, r4, r5, lr}
 80226c6:	4d07      	ldr	r5, [pc, #28]	@ (80226e4 <_lseek_r+0x20>)
 80226c8:	4604      	mov	r4, r0
 80226ca:	4608      	mov	r0, r1
 80226cc:	4611      	mov	r1, r2
 80226ce:	2200      	movs	r2, #0
 80226d0:	602a      	str	r2, [r5, #0]
 80226d2:	461a      	mov	r2, r3
 80226d4:	f7df f806 	bl	80016e4 <_lseek>
 80226d8:	1c43      	adds	r3, r0, #1
 80226da:	d102      	bne.n	80226e2 <_lseek_r+0x1e>
 80226dc:	682b      	ldr	r3, [r5, #0]
 80226de:	b103      	cbz	r3, 80226e2 <_lseek_r+0x1e>
 80226e0:	6023      	str	r3, [r4, #0]
 80226e2:	bd38      	pop	{r3, r4, r5, pc}
 80226e4:	24025df4 	.word	0x24025df4

080226e8 <_read_r>:
 80226e8:	b538      	push	{r3, r4, r5, lr}
 80226ea:	4d07      	ldr	r5, [pc, #28]	@ (8022708 <_read_r+0x20>)
 80226ec:	4604      	mov	r4, r0
 80226ee:	4608      	mov	r0, r1
 80226f0:	4611      	mov	r1, r2
 80226f2:	2200      	movs	r2, #0
 80226f4:	602a      	str	r2, [r5, #0]
 80226f6:	461a      	mov	r2, r3
 80226f8:	f7de ffce 	bl	8001698 <_read>
 80226fc:	1c43      	adds	r3, r0, #1
 80226fe:	d102      	bne.n	8022706 <_read_r+0x1e>
 8022700:	682b      	ldr	r3, [r5, #0]
 8022702:	b103      	cbz	r3, 8022706 <_read_r+0x1e>
 8022704:	6023      	str	r3, [r4, #0]
 8022706:	bd38      	pop	{r3, r4, r5, pc}
 8022708:	24025df4 	.word	0x24025df4

0802270c <_kill_r>:
 802270c:	b538      	push	{r3, r4, r5, lr}
 802270e:	4d07      	ldr	r5, [pc, #28]	@ (802272c <_kill_r+0x20>)
 8022710:	2300      	movs	r3, #0
 8022712:	4604      	mov	r4, r0
 8022714:	4608      	mov	r0, r1
 8022716:	4611      	mov	r1, r2
 8022718:	602b      	str	r3, [r5, #0]
 802271a:	f7de ffaf 	bl	800167c <_kill>
 802271e:	1c43      	adds	r3, r0, #1
 8022720:	d102      	bne.n	8022728 <_kill_r+0x1c>
 8022722:	682b      	ldr	r3, [r5, #0]
 8022724:	b103      	cbz	r3, 8022728 <_kill_r+0x1c>
 8022726:	6023      	str	r3, [r4, #0]
 8022728:	bd38      	pop	{r3, r4, r5, pc}
 802272a:	bf00      	nop
 802272c:	24025df4 	.word	0x24025df4

08022730 <_getpid_r>:
 8022730:	f7de bfa2 	b.w	8001678 <_getpid>

08022734 <_sbrk_r>:
 8022734:	b538      	push	{r3, r4, r5, lr}
 8022736:	4d06      	ldr	r5, [pc, #24]	@ (8022750 <_sbrk_r+0x1c>)
 8022738:	2300      	movs	r3, #0
 802273a:	4604      	mov	r4, r0
 802273c:	4608      	mov	r0, r1
 802273e:	602b      	str	r3, [r5, #0]
 8022740:	f7de ffd2 	bl	80016e8 <_sbrk>
 8022744:	1c43      	adds	r3, r0, #1
 8022746:	d102      	bne.n	802274e <_sbrk_r+0x1a>
 8022748:	682b      	ldr	r3, [r5, #0]
 802274a:	b103      	cbz	r3, 802274e <_sbrk_r+0x1a>
 802274c:	6023      	str	r3, [r4, #0]
 802274e:	bd38      	pop	{r3, r4, r5, pc}
 8022750:	24025df4 	.word	0x24025df4

08022754 <_write_r>:
 8022754:	b538      	push	{r3, r4, r5, lr}
 8022756:	4d07      	ldr	r5, [pc, #28]	@ (8022774 <_write_r+0x20>)
 8022758:	4604      	mov	r4, r0
 802275a:	4608      	mov	r0, r1
 802275c:	4611      	mov	r1, r2
 802275e:	2200      	movs	r2, #0
 8022760:	602a      	str	r2, [r5, #0]
 8022762:	461a      	mov	r2, r3
 8022764:	f7de ffa6 	bl	80016b4 <_write>
 8022768:	1c43      	adds	r3, r0, #1
 802276a:	d102      	bne.n	8022772 <_write_r+0x1e>
 802276c:	682b      	ldr	r3, [r5, #0]
 802276e:	b103      	cbz	r3, 8022772 <_write_r+0x1e>
 8022770:	6023      	str	r3, [r4, #0]
 8022772:	bd38      	pop	{r3, r4, r5, pc}
 8022774:	24025df4 	.word	0x24025df4

08022778 <__errno>:
 8022778:	4b01      	ldr	r3, [pc, #4]	@ (8022780 <__errno+0x8>)
 802277a:	6818      	ldr	r0, [r3, #0]
 802277c:	4770      	bx	lr
 802277e:	bf00      	nop
 8022780:	240000e8 	.word	0x240000e8

08022784 <__libc_init_array>:
 8022784:	b570      	push	{r4, r5, r6, lr}
 8022786:	4d0d      	ldr	r5, [pc, #52]	@ (80227bc <__libc_init_array+0x38>)
 8022788:	4c0d      	ldr	r4, [pc, #52]	@ (80227c0 <__libc_init_array+0x3c>)
 802278a:	1b64      	subs	r4, r4, r5
 802278c:	10a4      	asrs	r4, r4, #2
 802278e:	2600      	movs	r6, #0
 8022790:	42a6      	cmp	r6, r4
 8022792:	d109      	bne.n	80227a8 <__libc_init_array+0x24>
 8022794:	4d0b      	ldr	r5, [pc, #44]	@ (80227c4 <__libc_init_array+0x40>)
 8022796:	4c0c      	ldr	r4, [pc, #48]	@ (80227c8 <__libc_init_array+0x44>)
 8022798:	f000 fcd0 	bl	802313c <_init>
 802279c:	1b64      	subs	r4, r4, r5
 802279e:	10a4      	asrs	r4, r4, #2
 80227a0:	2600      	movs	r6, #0
 80227a2:	42a6      	cmp	r6, r4
 80227a4:	d105      	bne.n	80227b2 <__libc_init_array+0x2e>
 80227a6:	bd70      	pop	{r4, r5, r6, pc}
 80227a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80227ac:	4798      	blx	r3
 80227ae:	3601      	adds	r6, #1
 80227b0:	e7ee      	b.n	8022790 <__libc_init_array+0xc>
 80227b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80227b6:	4798      	blx	r3
 80227b8:	3601      	adds	r6, #1
 80227ba:	e7f2      	b.n	80227a2 <__libc_init_array+0x1e>
 80227bc:	08026714 	.word	0x08026714
 80227c0:	08026714 	.word	0x08026714
 80227c4:	08026714 	.word	0x08026714
 80227c8:	08026730 	.word	0x08026730

080227cc <__retarget_lock_init_recursive>:
 80227cc:	4770      	bx	lr

080227ce <__retarget_lock_acquire_recursive>:
 80227ce:	4770      	bx	lr

080227d0 <__retarget_lock_release_recursive>:
 80227d0:	4770      	bx	lr

080227d2 <memcpy>:
 80227d2:	440a      	add	r2, r1
 80227d4:	4291      	cmp	r1, r2
 80227d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80227da:	d100      	bne.n	80227de <memcpy+0xc>
 80227dc:	4770      	bx	lr
 80227de:	b510      	push	{r4, lr}
 80227e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80227e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80227e8:	4291      	cmp	r1, r2
 80227ea:	d1f9      	bne.n	80227e0 <memcpy+0xe>
 80227ec:	bd10      	pop	{r4, pc}
	...

080227f0 <__register_exitproc>:
 80227f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80227f4:	4d27      	ldr	r5, [pc, #156]	@ (8022894 <__register_exitproc+0xa4>)
 80227f6:	4607      	mov	r7, r0
 80227f8:	6828      	ldr	r0, [r5, #0]
 80227fa:	4691      	mov	r9, r2
 80227fc:	460e      	mov	r6, r1
 80227fe:	4698      	mov	r8, r3
 8022800:	f7ff ffe5 	bl	80227ce <__retarget_lock_acquire_recursive>
 8022804:	4a24      	ldr	r2, [pc, #144]	@ (8022898 <__register_exitproc+0xa8>)
 8022806:	6814      	ldr	r4, [r2, #0]
 8022808:	b93c      	cbnz	r4, 802281a <__register_exitproc+0x2a>
 802280a:	4b24      	ldr	r3, [pc, #144]	@ (802289c <__register_exitproc+0xac>)
 802280c:	6013      	str	r3, [r2, #0]
 802280e:	4a24      	ldr	r2, [pc, #144]	@ (80228a0 <__register_exitproc+0xb0>)
 8022810:	b112      	cbz	r2, 8022818 <__register_exitproc+0x28>
 8022812:	6812      	ldr	r2, [r2, #0]
 8022814:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8022818:	4c20      	ldr	r4, [pc, #128]	@ (802289c <__register_exitproc+0xac>)
 802281a:	6863      	ldr	r3, [r4, #4]
 802281c:	2b1f      	cmp	r3, #31
 802281e:	dd06      	ble.n	802282e <__register_exitproc+0x3e>
 8022820:	6828      	ldr	r0, [r5, #0]
 8022822:	f7ff ffd5 	bl	80227d0 <__retarget_lock_release_recursive>
 8022826:	f04f 30ff 	mov.w	r0, #4294967295
 802282a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802282e:	b32f      	cbz	r7, 802287c <__register_exitproc+0x8c>
 8022830:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8022834:	b968      	cbnz	r0, 8022852 <__register_exitproc+0x62>
 8022836:	4b1b      	ldr	r3, [pc, #108]	@ (80228a4 <__register_exitproc+0xb4>)
 8022838:	2b00      	cmp	r3, #0
 802283a:	d0f1      	beq.n	8022820 <__register_exitproc+0x30>
 802283c:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8022840:	f7ff fc6e 	bl	8022120 <malloc>
 8022844:	2800      	cmp	r0, #0
 8022846:	d0eb      	beq.n	8022820 <__register_exitproc+0x30>
 8022848:	2300      	movs	r3, #0
 802284a:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 802284e:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8022852:	6863      	ldr	r3, [r4, #4]
 8022854:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8022858:	2201      	movs	r2, #1
 802285a:	409a      	lsls	r2, r3
 802285c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022860:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8022864:	4313      	orrs	r3, r2
 8022866:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 802286a:	2f02      	cmp	r7, #2
 802286c:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8022870:	bf02      	ittt	eq
 8022872:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8022876:	4313      	orreq	r3, r2
 8022878:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 802287c:	6863      	ldr	r3, [r4, #4]
 802287e:	6828      	ldr	r0, [r5, #0]
 8022880:	1c5a      	adds	r2, r3, #1
 8022882:	3302      	adds	r3, #2
 8022884:	6062      	str	r2, [r4, #4]
 8022886:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 802288a:	f7ff ffa1 	bl	80227d0 <__retarget_lock_release_recursive>
 802288e:	2000      	movs	r0, #0
 8022890:	e7cb      	b.n	802282a <__register_exitproc+0x3a>
 8022892:	bf00      	nop
 8022894:	24000138 	.word	0x24000138
 8022898:	24025e88 	.word	0x24025e88
 802289c:	24025dfc 	.word	0x24025dfc
 80228a0:	08026514 	.word	0x08026514
 80228a4:	08022121 	.word	0x08022121

080228a8 <_free_r>:
 80228a8:	b538      	push	{r3, r4, r5, lr}
 80228aa:	4605      	mov	r5, r0
 80228ac:	2900      	cmp	r1, #0
 80228ae:	d041      	beq.n	8022934 <_free_r+0x8c>
 80228b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80228b4:	1f0c      	subs	r4, r1, #4
 80228b6:	2b00      	cmp	r3, #0
 80228b8:	bfb8      	it	lt
 80228ba:	18e4      	addlt	r4, r4, r3
 80228bc:	f7ff fce2 	bl	8022284 <__malloc_lock>
 80228c0:	4a1d      	ldr	r2, [pc, #116]	@ (8022938 <_free_r+0x90>)
 80228c2:	6813      	ldr	r3, [r2, #0]
 80228c4:	b933      	cbnz	r3, 80228d4 <_free_r+0x2c>
 80228c6:	6063      	str	r3, [r4, #4]
 80228c8:	6014      	str	r4, [r2, #0]
 80228ca:	4628      	mov	r0, r5
 80228cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80228d0:	f7ff bcde 	b.w	8022290 <__malloc_unlock>
 80228d4:	42a3      	cmp	r3, r4
 80228d6:	d908      	bls.n	80228ea <_free_r+0x42>
 80228d8:	6820      	ldr	r0, [r4, #0]
 80228da:	1821      	adds	r1, r4, r0
 80228dc:	428b      	cmp	r3, r1
 80228de:	bf01      	itttt	eq
 80228e0:	6819      	ldreq	r1, [r3, #0]
 80228e2:	685b      	ldreq	r3, [r3, #4]
 80228e4:	1809      	addeq	r1, r1, r0
 80228e6:	6021      	streq	r1, [r4, #0]
 80228e8:	e7ed      	b.n	80228c6 <_free_r+0x1e>
 80228ea:	461a      	mov	r2, r3
 80228ec:	685b      	ldr	r3, [r3, #4]
 80228ee:	b10b      	cbz	r3, 80228f4 <_free_r+0x4c>
 80228f0:	42a3      	cmp	r3, r4
 80228f2:	d9fa      	bls.n	80228ea <_free_r+0x42>
 80228f4:	6811      	ldr	r1, [r2, #0]
 80228f6:	1850      	adds	r0, r2, r1
 80228f8:	42a0      	cmp	r0, r4
 80228fa:	d10b      	bne.n	8022914 <_free_r+0x6c>
 80228fc:	6820      	ldr	r0, [r4, #0]
 80228fe:	4401      	add	r1, r0
 8022900:	1850      	adds	r0, r2, r1
 8022902:	4283      	cmp	r3, r0
 8022904:	6011      	str	r1, [r2, #0]
 8022906:	d1e0      	bne.n	80228ca <_free_r+0x22>
 8022908:	6818      	ldr	r0, [r3, #0]
 802290a:	685b      	ldr	r3, [r3, #4]
 802290c:	6053      	str	r3, [r2, #4]
 802290e:	4408      	add	r0, r1
 8022910:	6010      	str	r0, [r2, #0]
 8022912:	e7da      	b.n	80228ca <_free_r+0x22>
 8022914:	d902      	bls.n	802291c <_free_r+0x74>
 8022916:	230c      	movs	r3, #12
 8022918:	602b      	str	r3, [r5, #0]
 802291a:	e7d6      	b.n	80228ca <_free_r+0x22>
 802291c:	6820      	ldr	r0, [r4, #0]
 802291e:	1821      	adds	r1, r4, r0
 8022920:	428b      	cmp	r3, r1
 8022922:	bf04      	itt	eq
 8022924:	6819      	ldreq	r1, [r3, #0]
 8022926:	685b      	ldreq	r3, [r3, #4]
 8022928:	6063      	str	r3, [r4, #4]
 802292a:	bf04      	itt	eq
 802292c:	1809      	addeq	r1, r1, r0
 802292e:	6021      	streq	r1, [r4, #0]
 8022930:	6054      	str	r4, [r2, #4]
 8022932:	e7ca      	b.n	80228ca <_free_r+0x22>
 8022934:	bd38      	pop	{r3, r4, r5, pc}
 8022936:	bf00      	nop
 8022938:	24025cb4 	.word	0x24025cb4

0802293c <__sfputc_r>:
 802293c:	6893      	ldr	r3, [r2, #8]
 802293e:	3b01      	subs	r3, #1
 8022940:	2b00      	cmp	r3, #0
 8022942:	b410      	push	{r4}
 8022944:	6093      	str	r3, [r2, #8]
 8022946:	da08      	bge.n	802295a <__sfputc_r+0x1e>
 8022948:	6994      	ldr	r4, [r2, #24]
 802294a:	42a3      	cmp	r3, r4
 802294c:	db01      	blt.n	8022952 <__sfputc_r+0x16>
 802294e:	290a      	cmp	r1, #10
 8022950:	d103      	bne.n	802295a <__sfputc_r+0x1e>
 8022952:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022956:	f7ff bdc6 	b.w	80224e6 <__swbuf_r>
 802295a:	6813      	ldr	r3, [r2, #0]
 802295c:	1c58      	adds	r0, r3, #1
 802295e:	6010      	str	r0, [r2, #0]
 8022960:	7019      	strb	r1, [r3, #0]
 8022962:	4608      	mov	r0, r1
 8022964:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022968:	4770      	bx	lr

0802296a <__sfputs_r>:
 802296a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802296c:	4606      	mov	r6, r0
 802296e:	460f      	mov	r7, r1
 8022970:	4614      	mov	r4, r2
 8022972:	18d5      	adds	r5, r2, r3
 8022974:	42ac      	cmp	r4, r5
 8022976:	d101      	bne.n	802297c <__sfputs_r+0x12>
 8022978:	2000      	movs	r0, #0
 802297a:	e007      	b.n	802298c <__sfputs_r+0x22>
 802297c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022980:	463a      	mov	r2, r7
 8022982:	4630      	mov	r0, r6
 8022984:	f7ff ffda 	bl	802293c <__sfputc_r>
 8022988:	1c43      	adds	r3, r0, #1
 802298a:	d1f3      	bne.n	8022974 <__sfputs_r+0xa>
 802298c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022990 <_vfiprintf_r>:
 8022990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022994:	460d      	mov	r5, r1
 8022996:	b09d      	sub	sp, #116	@ 0x74
 8022998:	4614      	mov	r4, r2
 802299a:	4698      	mov	r8, r3
 802299c:	4606      	mov	r6, r0
 802299e:	b118      	cbz	r0, 80229a8 <_vfiprintf_r+0x18>
 80229a0:	6a03      	ldr	r3, [r0, #32]
 80229a2:	b90b      	cbnz	r3, 80229a8 <_vfiprintf_r+0x18>
 80229a4:	f7ff fd14 	bl	80223d0 <__sinit>
 80229a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80229aa:	07d9      	lsls	r1, r3, #31
 80229ac:	d405      	bmi.n	80229ba <_vfiprintf_r+0x2a>
 80229ae:	89ab      	ldrh	r3, [r5, #12]
 80229b0:	059a      	lsls	r2, r3, #22
 80229b2:	d402      	bmi.n	80229ba <_vfiprintf_r+0x2a>
 80229b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80229b6:	f7ff ff0a 	bl	80227ce <__retarget_lock_acquire_recursive>
 80229ba:	89ab      	ldrh	r3, [r5, #12]
 80229bc:	071b      	lsls	r3, r3, #28
 80229be:	d501      	bpl.n	80229c4 <_vfiprintf_r+0x34>
 80229c0:	692b      	ldr	r3, [r5, #16]
 80229c2:	b99b      	cbnz	r3, 80229ec <_vfiprintf_r+0x5c>
 80229c4:	4629      	mov	r1, r5
 80229c6:	4630      	mov	r0, r6
 80229c8:	f7ff fdcc 	bl	8022564 <__swsetup_r>
 80229cc:	b170      	cbz	r0, 80229ec <_vfiprintf_r+0x5c>
 80229ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80229d0:	07dc      	lsls	r4, r3, #31
 80229d2:	d504      	bpl.n	80229de <_vfiprintf_r+0x4e>
 80229d4:	f04f 30ff 	mov.w	r0, #4294967295
 80229d8:	b01d      	add	sp, #116	@ 0x74
 80229da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80229de:	89ab      	ldrh	r3, [r5, #12]
 80229e0:	0598      	lsls	r0, r3, #22
 80229e2:	d4f7      	bmi.n	80229d4 <_vfiprintf_r+0x44>
 80229e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80229e6:	f7ff fef3 	bl	80227d0 <__retarget_lock_release_recursive>
 80229ea:	e7f3      	b.n	80229d4 <_vfiprintf_r+0x44>
 80229ec:	2300      	movs	r3, #0
 80229ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80229f0:	2320      	movs	r3, #32
 80229f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80229f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80229fa:	2330      	movs	r3, #48	@ 0x30
 80229fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022bac <_vfiprintf_r+0x21c>
 8022a00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022a04:	f04f 0901 	mov.w	r9, #1
 8022a08:	4623      	mov	r3, r4
 8022a0a:	469a      	mov	sl, r3
 8022a0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022a10:	b10a      	cbz	r2, 8022a16 <_vfiprintf_r+0x86>
 8022a12:	2a25      	cmp	r2, #37	@ 0x25
 8022a14:	d1f9      	bne.n	8022a0a <_vfiprintf_r+0x7a>
 8022a16:	ebba 0b04 	subs.w	fp, sl, r4
 8022a1a:	d00b      	beq.n	8022a34 <_vfiprintf_r+0xa4>
 8022a1c:	465b      	mov	r3, fp
 8022a1e:	4622      	mov	r2, r4
 8022a20:	4629      	mov	r1, r5
 8022a22:	4630      	mov	r0, r6
 8022a24:	f7ff ffa1 	bl	802296a <__sfputs_r>
 8022a28:	3001      	adds	r0, #1
 8022a2a:	f000 80a7 	beq.w	8022b7c <_vfiprintf_r+0x1ec>
 8022a2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022a30:	445a      	add	r2, fp
 8022a32:	9209      	str	r2, [sp, #36]	@ 0x24
 8022a34:	f89a 3000 	ldrb.w	r3, [sl]
 8022a38:	2b00      	cmp	r3, #0
 8022a3a:	f000 809f 	beq.w	8022b7c <_vfiprintf_r+0x1ec>
 8022a3e:	2300      	movs	r3, #0
 8022a40:	f04f 32ff 	mov.w	r2, #4294967295
 8022a44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022a48:	f10a 0a01 	add.w	sl, sl, #1
 8022a4c:	9304      	str	r3, [sp, #16]
 8022a4e:	9307      	str	r3, [sp, #28]
 8022a50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022a54:	931a      	str	r3, [sp, #104]	@ 0x68
 8022a56:	4654      	mov	r4, sl
 8022a58:	2205      	movs	r2, #5
 8022a5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a5e:	4853      	ldr	r0, [pc, #332]	@ (8022bac <_vfiprintf_r+0x21c>)
 8022a60:	f7dd fc3e 	bl	80002e0 <memchr>
 8022a64:	9a04      	ldr	r2, [sp, #16]
 8022a66:	b9d8      	cbnz	r0, 8022aa0 <_vfiprintf_r+0x110>
 8022a68:	06d1      	lsls	r1, r2, #27
 8022a6a:	bf44      	itt	mi
 8022a6c:	2320      	movmi	r3, #32
 8022a6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022a72:	0713      	lsls	r3, r2, #28
 8022a74:	bf44      	itt	mi
 8022a76:	232b      	movmi	r3, #43	@ 0x2b
 8022a78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022a7c:	f89a 3000 	ldrb.w	r3, [sl]
 8022a80:	2b2a      	cmp	r3, #42	@ 0x2a
 8022a82:	d015      	beq.n	8022ab0 <_vfiprintf_r+0x120>
 8022a84:	9a07      	ldr	r2, [sp, #28]
 8022a86:	4654      	mov	r4, sl
 8022a88:	2000      	movs	r0, #0
 8022a8a:	f04f 0c0a 	mov.w	ip, #10
 8022a8e:	4621      	mov	r1, r4
 8022a90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a94:	3b30      	subs	r3, #48	@ 0x30
 8022a96:	2b09      	cmp	r3, #9
 8022a98:	d94b      	bls.n	8022b32 <_vfiprintf_r+0x1a2>
 8022a9a:	b1b0      	cbz	r0, 8022aca <_vfiprintf_r+0x13a>
 8022a9c:	9207      	str	r2, [sp, #28]
 8022a9e:	e014      	b.n	8022aca <_vfiprintf_r+0x13a>
 8022aa0:	eba0 0308 	sub.w	r3, r0, r8
 8022aa4:	fa09 f303 	lsl.w	r3, r9, r3
 8022aa8:	4313      	orrs	r3, r2
 8022aaa:	9304      	str	r3, [sp, #16]
 8022aac:	46a2      	mov	sl, r4
 8022aae:	e7d2      	b.n	8022a56 <_vfiprintf_r+0xc6>
 8022ab0:	9b03      	ldr	r3, [sp, #12]
 8022ab2:	1d19      	adds	r1, r3, #4
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	9103      	str	r1, [sp, #12]
 8022ab8:	2b00      	cmp	r3, #0
 8022aba:	bfbb      	ittet	lt
 8022abc:	425b      	neglt	r3, r3
 8022abe:	f042 0202 	orrlt.w	r2, r2, #2
 8022ac2:	9307      	strge	r3, [sp, #28]
 8022ac4:	9307      	strlt	r3, [sp, #28]
 8022ac6:	bfb8      	it	lt
 8022ac8:	9204      	strlt	r2, [sp, #16]
 8022aca:	7823      	ldrb	r3, [r4, #0]
 8022acc:	2b2e      	cmp	r3, #46	@ 0x2e
 8022ace:	d10a      	bne.n	8022ae6 <_vfiprintf_r+0x156>
 8022ad0:	7863      	ldrb	r3, [r4, #1]
 8022ad2:	2b2a      	cmp	r3, #42	@ 0x2a
 8022ad4:	d132      	bne.n	8022b3c <_vfiprintf_r+0x1ac>
 8022ad6:	9b03      	ldr	r3, [sp, #12]
 8022ad8:	1d1a      	adds	r2, r3, #4
 8022ada:	681b      	ldr	r3, [r3, #0]
 8022adc:	9203      	str	r2, [sp, #12]
 8022ade:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022ae2:	3402      	adds	r4, #2
 8022ae4:	9305      	str	r3, [sp, #20]
 8022ae6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8022bbc <_vfiprintf_r+0x22c>
 8022aea:	7821      	ldrb	r1, [r4, #0]
 8022aec:	2203      	movs	r2, #3
 8022aee:	4650      	mov	r0, sl
 8022af0:	f7dd fbf6 	bl	80002e0 <memchr>
 8022af4:	b138      	cbz	r0, 8022b06 <_vfiprintf_r+0x176>
 8022af6:	9b04      	ldr	r3, [sp, #16]
 8022af8:	eba0 000a 	sub.w	r0, r0, sl
 8022afc:	2240      	movs	r2, #64	@ 0x40
 8022afe:	4082      	lsls	r2, r0
 8022b00:	4313      	orrs	r3, r2
 8022b02:	3401      	adds	r4, #1
 8022b04:	9304      	str	r3, [sp, #16]
 8022b06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022b0a:	4829      	ldr	r0, [pc, #164]	@ (8022bb0 <_vfiprintf_r+0x220>)
 8022b0c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022b10:	2206      	movs	r2, #6
 8022b12:	f7dd fbe5 	bl	80002e0 <memchr>
 8022b16:	2800      	cmp	r0, #0
 8022b18:	d03f      	beq.n	8022b9a <_vfiprintf_r+0x20a>
 8022b1a:	4b26      	ldr	r3, [pc, #152]	@ (8022bb4 <_vfiprintf_r+0x224>)
 8022b1c:	bb1b      	cbnz	r3, 8022b66 <_vfiprintf_r+0x1d6>
 8022b1e:	9b03      	ldr	r3, [sp, #12]
 8022b20:	3307      	adds	r3, #7
 8022b22:	f023 0307 	bic.w	r3, r3, #7
 8022b26:	3308      	adds	r3, #8
 8022b28:	9303      	str	r3, [sp, #12]
 8022b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022b2c:	443b      	add	r3, r7
 8022b2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022b30:	e76a      	b.n	8022a08 <_vfiprintf_r+0x78>
 8022b32:	fb0c 3202 	mla	r2, ip, r2, r3
 8022b36:	460c      	mov	r4, r1
 8022b38:	2001      	movs	r0, #1
 8022b3a:	e7a8      	b.n	8022a8e <_vfiprintf_r+0xfe>
 8022b3c:	2300      	movs	r3, #0
 8022b3e:	3401      	adds	r4, #1
 8022b40:	9305      	str	r3, [sp, #20]
 8022b42:	4619      	mov	r1, r3
 8022b44:	f04f 0c0a 	mov.w	ip, #10
 8022b48:	4620      	mov	r0, r4
 8022b4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022b4e:	3a30      	subs	r2, #48	@ 0x30
 8022b50:	2a09      	cmp	r2, #9
 8022b52:	d903      	bls.n	8022b5c <_vfiprintf_r+0x1cc>
 8022b54:	2b00      	cmp	r3, #0
 8022b56:	d0c6      	beq.n	8022ae6 <_vfiprintf_r+0x156>
 8022b58:	9105      	str	r1, [sp, #20]
 8022b5a:	e7c4      	b.n	8022ae6 <_vfiprintf_r+0x156>
 8022b5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022b60:	4604      	mov	r4, r0
 8022b62:	2301      	movs	r3, #1
 8022b64:	e7f0      	b.n	8022b48 <_vfiprintf_r+0x1b8>
 8022b66:	ab03      	add	r3, sp, #12
 8022b68:	9300      	str	r3, [sp, #0]
 8022b6a:	462a      	mov	r2, r5
 8022b6c:	4b12      	ldr	r3, [pc, #72]	@ (8022bb8 <_vfiprintf_r+0x228>)
 8022b6e:	a904      	add	r1, sp, #16
 8022b70:	4630      	mov	r0, r6
 8022b72:	f3af 8000 	nop.w
 8022b76:	4607      	mov	r7, r0
 8022b78:	1c78      	adds	r0, r7, #1
 8022b7a:	d1d6      	bne.n	8022b2a <_vfiprintf_r+0x19a>
 8022b7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022b7e:	07d9      	lsls	r1, r3, #31
 8022b80:	d405      	bmi.n	8022b8e <_vfiprintf_r+0x1fe>
 8022b82:	89ab      	ldrh	r3, [r5, #12]
 8022b84:	059a      	lsls	r2, r3, #22
 8022b86:	d402      	bmi.n	8022b8e <_vfiprintf_r+0x1fe>
 8022b88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022b8a:	f7ff fe21 	bl	80227d0 <__retarget_lock_release_recursive>
 8022b8e:	89ab      	ldrh	r3, [r5, #12]
 8022b90:	065b      	lsls	r3, r3, #25
 8022b92:	f53f af1f 	bmi.w	80229d4 <_vfiprintf_r+0x44>
 8022b96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022b98:	e71e      	b.n	80229d8 <_vfiprintf_r+0x48>
 8022b9a:	ab03      	add	r3, sp, #12
 8022b9c:	9300      	str	r3, [sp, #0]
 8022b9e:	462a      	mov	r2, r5
 8022ba0:	4b05      	ldr	r3, [pc, #20]	@ (8022bb8 <_vfiprintf_r+0x228>)
 8022ba2:	a904      	add	r1, sp, #16
 8022ba4:	4630      	mov	r0, r6
 8022ba6:	f000 f879 	bl	8022c9c <_printf_i>
 8022baa:	e7e4      	b.n	8022b76 <_vfiprintf_r+0x1e6>
 8022bac:	08026518 	.word	0x08026518
 8022bb0:	08026522 	.word	0x08026522
 8022bb4:	00000000 	.word	0x00000000
 8022bb8:	0802296b 	.word	0x0802296b
 8022bbc:	0802651e 	.word	0x0802651e

08022bc0 <_printf_common>:
 8022bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022bc4:	4616      	mov	r6, r2
 8022bc6:	4698      	mov	r8, r3
 8022bc8:	688a      	ldr	r2, [r1, #8]
 8022bca:	690b      	ldr	r3, [r1, #16]
 8022bcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022bd0:	4293      	cmp	r3, r2
 8022bd2:	bfb8      	it	lt
 8022bd4:	4613      	movlt	r3, r2
 8022bd6:	6033      	str	r3, [r6, #0]
 8022bd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022bdc:	4607      	mov	r7, r0
 8022bde:	460c      	mov	r4, r1
 8022be0:	b10a      	cbz	r2, 8022be6 <_printf_common+0x26>
 8022be2:	3301      	adds	r3, #1
 8022be4:	6033      	str	r3, [r6, #0]
 8022be6:	6823      	ldr	r3, [r4, #0]
 8022be8:	0699      	lsls	r1, r3, #26
 8022bea:	bf42      	ittt	mi
 8022bec:	6833      	ldrmi	r3, [r6, #0]
 8022bee:	3302      	addmi	r3, #2
 8022bf0:	6033      	strmi	r3, [r6, #0]
 8022bf2:	6825      	ldr	r5, [r4, #0]
 8022bf4:	f015 0506 	ands.w	r5, r5, #6
 8022bf8:	d106      	bne.n	8022c08 <_printf_common+0x48>
 8022bfa:	f104 0a19 	add.w	sl, r4, #25
 8022bfe:	68e3      	ldr	r3, [r4, #12]
 8022c00:	6832      	ldr	r2, [r6, #0]
 8022c02:	1a9b      	subs	r3, r3, r2
 8022c04:	42ab      	cmp	r3, r5
 8022c06:	dc26      	bgt.n	8022c56 <_printf_common+0x96>
 8022c08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022c0c:	6822      	ldr	r2, [r4, #0]
 8022c0e:	3b00      	subs	r3, #0
 8022c10:	bf18      	it	ne
 8022c12:	2301      	movne	r3, #1
 8022c14:	0692      	lsls	r2, r2, #26
 8022c16:	d42b      	bmi.n	8022c70 <_printf_common+0xb0>
 8022c18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022c1c:	4641      	mov	r1, r8
 8022c1e:	4638      	mov	r0, r7
 8022c20:	47c8      	blx	r9
 8022c22:	3001      	adds	r0, #1
 8022c24:	d01e      	beq.n	8022c64 <_printf_common+0xa4>
 8022c26:	6823      	ldr	r3, [r4, #0]
 8022c28:	6922      	ldr	r2, [r4, #16]
 8022c2a:	f003 0306 	and.w	r3, r3, #6
 8022c2e:	2b04      	cmp	r3, #4
 8022c30:	bf02      	ittt	eq
 8022c32:	68e5      	ldreq	r5, [r4, #12]
 8022c34:	6833      	ldreq	r3, [r6, #0]
 8022c36:	1aed      	subeq	r5, r5, r3
 8022c38:	68a3      	ldr	r3, [r4, #8]
 8022c3a:	bf0c      	ite	eq
 8022c3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022c40:	2500      	movne	r5, #0
 8022c42:	4293      	cmp	r3, r2
 8022c44:	bfc4      	itt	gt
 8022c46:	1a9b      	subgt	r3, r3, r2
 8022c48:	18ed      	addgt	r5, r5, r3
 8022c4a:	2600      	movs	r6, #0
 8022c4c:	341a      	adds	r4, #26
 8022c4e:	42b5      	cmp	r5, r6
 8022c50:	d11a      	bne.n	8022c88 <_printf_common+0xc8>
 8022c52:	2000      	movs	r0, #0
 8022c54:	e008      	b.n	8022c68 <_printf_common+0xa8>
 8022c56:	2301      	movs	r3, #1
 8022c58:	4652      	mov	r2, sl
 8022c5a:	4641      	mov	r1, r8
 8022c5c:	4638      	mov	r0, r7
 8022c5e:	47c8      	blx	r9
 8022c60:	3001      	adds	r0, #1
 8022c62:	d103      	bne.n	8022c6c <_printf_common+0xac>
 8022c64:	f04f 30ff 	mov.w	r0, #4294967295
 8022c68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022c6c:	3501      	adds	r5, #1
 8022c6e:	e7c6      	b.n	8022bfe <_printf_common+0x3e>
 8022c70:	18e1      	adds	r1, r4, r3
 8022c72:	1c5a      	adds	r2, r3, #1
 8022c74:	2030      	movs	r0, #48	@ 0x30
 8022c76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022c7a:	4422      	add	r2, r4
 8022c7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8022c80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022c84:	3302      	adds	r3, #2
 8022c86:	e7c7      	b.n	8022c18 <_printf_common+0x58>
 8022c88:	2301      	movs	r3, #1
 8022c8a:	4622      	mov	r2, r4
 8022c8c:	4641      	mov	r1, r8
 8022c8e:	4638      	mov	r0, r7
 8022c90:	47c8      	blx	r9
 8022c92:	3001      	adds	r0, #1
 8022c94:	d0e6      	beq.n	8022c64 <_printf_common+0xa4>
 8022c96:	3601      	adds	r6, #1
 8022c98:	e7d9      	b.n	8022c4e <_printf_common+0x8e>
	...

08022c9c <_printf_i>:
 8022c9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022ca0:	7e0f      	ldrb	r7, [r1, #24]
 8022ca2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022ca4:	2f78      	cmp	r7, #120	@ 0x78
 8022ca6:	4691      	mov	r9, r2
 8022ca8:	4680      	mov	r8, r0
 8022caa:	460c      	mov	r4, r1
 8022cac:	469a      	mov	sl, r3
 8022cae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8022cb2:	d807      	bhi.n	8022cc4 <_printf_i+0x28>
 8022cb4:	2f62      	cmp	r7, #98	@ 0x62
 8022cb6:	d80a      	bhi.n	8022cce <_printf_i+0x32>
 8022cb8:	2f00      	cmp	r7, #0
 8022cba:	f000 80d2 	beq.w	8022e62 <_printf_i+0x1c6>
 8022cbe:	2f58      	cmp	r7, #88	@ 0x58
 8022cc0:	f000 80b9 	beq.w	8022e36 <_printf_i+0x19a>
 8022cc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022cc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8022ccc:	e03a      	b.n	8022d44 <_printf_i+0xa8>
 8022cce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022cd2:	2b15      	cmp	r3, #21
 8022cd4:	d8f6      	bhi.n	8022cc4 <_printf_i+0x28>
 8022cd6:	a101      	add	r1, pc, #4	@ (adr r1, 8022cdc <_printf_i+0x40>)
 8022cd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022cdc:	08022d35 	.word	0x08022d35
 8022ce0:	08022d49 	.word	0x08022d49
 8022ce4:	08022cc5 	.word	0x08022cc5
 8022ce8:	08022cc5 	.word	0x08022cc5
 8022cec:	08022cc5 	.word	0x08022cc5
 8022cf0:	08022cc5 	.word	0x08022cc5
 8022cf4:	08022d49 	.word	0x08022d49
 8022cf8:	08022cc5 	.word	0x08022cc5
 8022cfc:	08022cc5 	.word	0x08022cc5
 8022d00:	08022cc5 	.word	0x08022cc5
 8022d04:	08022cc5 	.word	0x08022cc5
 8022d08:	08022e49 	.word	0x08022e49
 8022d0c:	08022d73 	.word	0x08022d73
 8022d10:	08022e03 	.word	0x08022e03
 8022d14:	08022cc5 	.word	0x08022cc5
 8022d18:	08022cc5 	.word	0x08022cc5
 8022d1c:	08022e6b 	.word	0x08022e6b
 8022d20:	08022cc5 	.word	0x08022cc5
 8022d24:	08022d73 	.word	0x08022d73
 8022d28:	08022cc5 	.word	0x08022cc5
 8022d2c:	08022cc5 	.word	0x08022cc5
 8022d30:	08022e0b 	.word	0x08022e0b
 8022d34:	6833      	ldr	r3, [r6, #0]
 8022d36:	1d1a      	adds	r2, r3, #4
 8022d38:	681b      	ldr	r3, [r3, #0]
 8022d3a:	6032      	str	r2, [r6, #0]
 8022d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022d44:	2301      	movs	r3, #1
 8022d46:	e09d      	b.n	8022e84 <_printf_i+0x1e8>
 8022d48:	6833      	ldr	r3, [r6, #0]
 8022d4a:	6820      	ldr	r0, [r4, #0]
 8022d4c:	1d19      	adds	r1, r3, #4
 8022d4e:	6031      	str	r1, [r6, #0]
 8022d50:	0606      	lsls	r6, r0, #24
 8022d52:	d501      	bpl.n	8022d58 <_printf_i+0xbc>
 8022d54:	681d      	ldr	r5, [r3, #0]
 8022d56:	e003      	b.n	8022d60 <_printf_i+0xc4>
 8022d58:	0645      	lsls	r5, r0, #25
 8022d5a:	d5fb      	bpl.n	8022d54 <_printf_i+0xb8>
 8022d5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022d60:	2d00      	cmp	r5, #0
 8022d62:	da03      	bge.n	8022d6c <_printf_i+0xd0>
 8022d64:	232d      	movs	r3, #45	@ 0x2d
 8022d66:	426d      	negs	r5, r5
 8022d68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022d6c:	4859      	ldr	r0, [pc, #356]	@ (8022ed4 <_printf_i+0x238>)
 8022d6e:	230a      	movs	r3, #10
 8022d70:	e011      	b.n	8022d96 <_printf_i+0xfa>
 8022d72:	6821      	ldr	r1, [r4, #0]
 8022d74:	6833      	ldr	r3, [r6, #0]
 8022d76:	0608      	lsls	r0, r1, #24
 8022d78:	f853 5b04 	ldr.w	r5, [r3], #4
 8022d7c:	d402      	bmi.n	8022d84 <_printf_i+0xe8>
 8022d7e:	0649      	lsls	r1, r1, #25
 8022d80:	bf48      	it	mi
 8022d82:	b2ad      	uxthmi	r5, r5
 8022d84:	2f6f      	cmp	r7, #111	@ 0x6f
 8022d86:	4853      	ldr	r0, [pc, #332]	@ (8022ed4 <_printf_i+0x238>)
 8022d88:	6033      	str	r3, [r6, #0]
 8022d8a:	bf14      	ite	ne
 8022d8c:	230a      	movne	r3, #10
 8022d8e:	2308      	moveq	r3, #8
 8022d90:	2100      	movs	r1, #0
 8022d92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022d96:	6866      	ldr	r6, [r4, #4]
 8022d98:	60a6      	str	r6, [r4, #8]
 8022d9a:	2e00      	cmp	r6, #0
 8022d9c:	bfa2      	ittt	ge
 8022d9e:	6821      	ldrge	r1, [r4, #0]
 8022da0:	f021 0104 	bicge.w	r1, r1, #4
 8022da4:	6021      	strge	r1, [r4, #0]
 8022da6:	b90d      	cbnz	r5, 8022dac <_printf_i+0x110>
 8022da8:	2e00      	cmp	r6, #0
 8022daa:	d04b      	beq.n	8022e44 <_printf_i+0x1a8>
 8022dac:	4616      	mov	r6, r2
 8022dae:	fbb5 f1f3 	udiv	r1, r5, r3
 8022db2:	fb03 5711 	mls	r7, r3, r1, r5
 8022db6:	5dc7      	ldrb	r7, [r0, r7]
 8022db8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022dbc:	462f      	mov	r7, r5
 8022dbe:	42bb      	cmp	r3, r7
 8022dc0:	460d      	mov	r5, r1
 8022dc2:	d9f4      	bls.n	8022dae <_printf_i+0x112>
 8022dc4:	2b08      	cmp	r3, #8
 8022dc6:	d10b      	bne.n	8022de0 <_printf_i+0x144>
 8022dc8:	6823      	ldr	r3, [r4, #0]
 8022dca:	07df      	lsls	r7, r3, #31
 8022dcc:	d508      	bpl.n	8022de0 <_printf_i+0x144>
 8022dce:	6923      	ldr	r3, [r4, #16]
 8022dd0:	6861      	ldr	r1, [r4, #4]
 8022dd2:	4299      	cmp	r1, r3
 8022dd4:	bfde      	ittt	le
 8022dd6:	2330      	movle	r3, #48	@ 0x30
 8022dd8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022ddc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022de0:	1b92      	subs	r2, r2, r6
 8022de2:	6122      	str	r2, [r4, #16]
 8022de4:	f8cd a000 	str.w	sl, [sp]
 8022de8:	464b      	mov	r3, r9
 8022dea:	aa03      	add	r2, sp, #12
 8022dec:	4621      	mov	r1, r4
 8022dee:	4640      	mov	r0, r8
 8022df0:	f7ff fee6 	bl	8022bc0 <_printf_common>
 8022df4:	3001      	adds	r0, #1
 8022df6:	d14a      	bne.n	8022e8e <_printf_i+0x1f2>
 8022df8:	f04f 30ff 	mov.w	r0, #4294967295
 8022dfc:	b004      	add	sp, #16
 8022dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022e02:	6823      	ldr	r3, [r4, #0]
 8022e04:	f043 0320 	orr.w	r3, r3, #32
 8022e08:	6023      	str	r3, [r4, #0]
 8022e0a:	4833      	ldr	r0, [pc, #204]	@ (8022ed8 <_printf_i+0x23c>)
 8022e0c:	2778      	movs	r7, #120	@ 0x78
 8022e0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022e12:	6823      	ldr	r3, [r4, #0]
 8022e14:	6831      	ldr	r1, [r6, #0]
 8022e16:	061f      	lsls	r7, r3, #24
 8022e18:	f851 5b04 	ldr.w	r5, [r1], #4
 8022e1c:	d402      	bmi.n	8022e24 <_printf_i+0x188>
 8022e1e:	065f      	lsls	r7, r3, #25
 8022e20:	bf48      	it	mi
 8022e22:	b2ad      	uxthmi	r5, r5
 8022e24:	6031      	str	r1, [r6, #0]
 8022e26:	07d9      	lsls	r1, r3, #31
 8022e28:	bf44      	itt	mi
 8022e2a:	f043 0320 	orrmi.w	r3, r3, #32
 8022e2e:	6023      	strmi	r3, [r4, #0]
 8022e30:	b11d      	cbz	r5, 8022e3a <_printf_i+0x19e>
 8022e32:	2310      	movs	r3, #16
 8022e34:	e7ac      	b.n	8022d90 <_printf_i+0xf4>
 8022e36:	4827      	ldr	r0, [pc, #156]	@ (8022ed4 <_printf_i+0x238>)
 8022e38:	e7e9      	b.n	8022e0e <_printf_i+0x172>
 8022e3a:	6823      	ldr	r3, [r4, #0]
 8022e3c:	f023 0320 	bic.w	r3, r3, #32
 8022e40:	6023      	str	r3, [r4, #0]
 8022e42:	e7f6      	b.n	8022e32 <_printf_i+0x196>
 8022e44:	4616      	mov	r6, r2
 8022e46:	e7bd      	b.n	8022dc4 <_printf_i+0x128>
 8022e48:	6833      	ldr	r3, [r6, #0]
 8022e4a:	6825      	ldr	r5, [r4, #0]
 8022e4c:	6961      	ldr	r1, [r4, #20]
 8022e4e:	1d18      	adds	r0, r3, #4
 8022e50:	6030      	str	r0, [r6, #0]
 8022e52:	062e      	lsls	r6, r5, #24
 8022e54:	681b      	ldr	r3, [r3, #0]
 8022e56:	d501      	bpl.n	8022e5c <_printf_i+0x1c0>
 8022e58:	6019      	str	r1, [r3, #0]
 8022e5a:	e002      	b.n	8022e62 <_printf_i+0x1c6>
 8022e5c:	0668      	lsls	r0, r5, #25
 8022e5e:	d5fb      	bpl.n	8022e58 <_printf_i+0x1bc>
 8022e60:	8019      	strh	r1, [r3, #0]
 8022e62:	2300      	movs	r3, #0
 8022e64:	6123      	str	r3, [r4, #16]
 8022e66:	4616      	mov	r6, r2
 8022e68:	e7bc      	b.n	8022de4 <_printf_i+0x148>
 8022e6a:	6833      	ldr	r3, [r6, #0]
 8022e6c:	1d1a      	adds	r2, r3, #4
 8022e6e:	6032      	str	r2, [r6, #0]
 8022e70:	681e      	ldr	r6, [r3, #0]
 8022e72:	6862      	ldr	r2, [r4, #4]
 8022e74:	2100      	movs	r1, #0
 8022e76:	4630      	mov	r0, r6
 8022e78:	f7dd fa32 	bl	80002e0 <memchr>
 8022e7c:	b108      	cbz	r0, 8022e82 <_printf_i+0x1e6>
 8022e7e:	1b80      	subs	r0, r0, r6
 8022e80:	6060      	str	r0, [r4, #4]
 8022e82:	6863      	ldr	r3, [r4, #4]
 8022e84:	6123      	str	r3, [r4, #16]
 8022e86:	2300      	movs	r3, #0
 8022e88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022e8c:	e7aa      	b.n	8022de4 <_printf_i+0x148>
 8022e8e:	6923      	ldr	r3, [r4, #16]
 8022e90:	4632      	mov	r2, r6
 8022e92:	4649      	mov	r1, r9
 8022e94:	4640      	mov	r0, r8
 8022e96:	47d0      	blx	sl
 8022e98:	3001      	adds	r0, #1
 8022e9a:	d0ad      	beq.n	8022df8 <_printf_i+0x15c>
 8022e9c:	6823      	ldr	r3, [r4, #0]
 8022e9e:	079b      	lsls	r3, r3, #30
 8022ea0:	d413      	bmi.n	8022eca <_printf_i+0x22e>
 8022ea2:	68e0      	ldr	r0, [r4, #12]
 8022ea4:	9b03      	ldr	r3, [sp, #12]
 8022ea6:	4298      	cmp	r0, r3
 8022ea8:	bfb8      	it	lt
 8022eaa:	4618      	movlt	r0, r3
 8022eac:	e7a6      	b.n	8022dfc <_printf_i+0x160>
 8022eae:	2301      	movs	r3, #1
 8022eb0:	4632      	mov	r2, r6
 8022eb2:	4649      	mov	r1, r9
 8022eb4:	4640      	mov	r0, r8
 8022eb6:	47d0      	blx	sl
 8022eb8:	3001      	adds	r0, #1
 8022eba:	d09d      	beq.n	8022df8 <_printf_i+0x15c>
 8022ebc:	3501      	adds	r5, #1
 8022ebe:	68e3      	ldr	r3, [r4, #12]
 8022ec0:	9903      	ldr	r1, [sp, #12]
 8022ec2:	1a5b      	subs	r3, r3, r1
 8022ec4:	42ab      	cmp	r3, r5
 8022ec6:	dcf2      	bgt.n	8022eae <_printf_i+0x212>
 8022ec8:	e7eb      	b.n	8022ea2 <_printf_i+0x206>
 8022eca:	2500      	movs	r5, #0
 8022ecc:	f104 0619 	add.w	r6, r4, #25
 8022ed0:	e7f5      	b.n	8022ebe <_printf_i+0x222>
 8022ed2:	bf00      	nop
 8022ed4:	08026529 	.word	0x08026529
 8022ed8:	0802653a 	.word	0x0802653a

08022edc <__sflush_r>:
 8022edc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8022ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ee4:	0716      	lsls	r6, r2, #28
 8022ee6:	4605      	mov	r5, r0
 8022ee8:	460c      	mov	r4, r1
 8022eea:	d454      	bmi.n	8022f96 <__sflush_r+0xba>
 8022eec:	684b      	ldr	r3, [r1, #4]
 8022eee:	2b00      	cmp	r3, #0
 8022ef0:	dc02      	bgt.n	8022ef8 <__sflush_r+0x1c>
 8022ef2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8022ef4:	2b00      	cmp	r3, #0
 8022ef6:	dd48      	ble.n	8022f8a <__sflush_r+0xae>
 8022ef8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022efa:	2e00      	cmp	r6, #0
 8022efc:	d045      	beq.n	8022f8a <__sflush_r+0xae>
 8022efe:	2300      	movs	r3, #0
 8022f00:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8022f04:	682f      	ldr	r7, [r5, #0]
 8022f06:	6a21      	ldr	r1, [r4, #32]
 8022f08:	602b      	str	r3, [r5, #0]
 8022f0a:	d030      	beq.n	8022f6e <__sflush_r+0x92>
 8022f0c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8022f0e:	89a3      	ldrh	r3, [r4, #12]
 8022f10:	0759      	lsls	r1, r3, #29
 8022f12:	d505      	bpl.n	8022f20 <__sflush_r+0x44>
 8022f14:	6863      	ldr	r3, [r4, #4]
 8022f16:	1ad2      	subs	r2, r2, r3
 8022f18:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022f1a:	b10b      	cbz	r3, 8022f20 <__sflush_r+0x44>
 8022f1c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8022f1e:	1ad2      	subs	r2, r2, r3
 8022f20:	2300      	movs	r3, #0
 8022f22:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022f24:	6a21      	ldr	r1, [r4, #32]
 8022f26:	4628      	mov	r0, r5
 8022f28:	47b0      	blx	r6
 8022f2a:	1c43      	adds	r3, r0, #1
 8022f2c:	89a3      	ldrh	r3, [r4, #12]
 8022f2e:	d106      	bne.n	8022f3e <__sflush_r+0x62>
 8022f30:	6829      	ldr	r1, [r5, #0]
 8022f32:	291d      	cmp	r1, #29
 8022f34:	d82b      	bhi.n	8022f8e <__sflush_r+0xb2>
 8022f36:	4a2a      	ldr	r2, [pc, #168]	@ (8022fe0 <__sflush_r+0x104>)
 8022f38:	410a      	asrs	r2, r1
 8022f3a:	07d6      	lsls	r6, r2, #31
 8022f3c:	d427      	bmi.n	8022f8e <__sflush_r+0xb2>
 8022f3e:	2200      	movs	r2, #0
 8022f40:	6062      	str	r2, [r4, #4]
 8022f42:	04d9      	lsls	r1, r3, #19
 8022f44:	6922      	ldr	r2, [r4, #16]
 8022f46:	6022      	str	r2, [r4, #0]
 8022f48:	d504      	bpl.n	8022f54 <__sflush_r+0x78>
 8022f4a:	1c42      	adds	r2, r0, #1
 8022f4c:	d101      	bne.n	8022f52 <__sflush_r+0x76>
 8022f4e:	682b      	ldr	r3, [r5, #0]
 8022f50:	b903      	cbnz	r3, 8022f54 <__sflush_r+0x78>
 8022f52:	6560      	str	r0, [r4, #84]	@ 0x54
 8022f54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022f56:	602f      	str	r7, [r5, #0]
 8022f58:	b1b9      	cbz	r1, 8022f8a <__sflush_r+0xae>
 8022f5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022f5e:	4299      	cmp	r1, r3
 8022f60:	d002      	beq.n	8022f68 <__sflush_r+0x8c>
 8022f62:	4628      	mov	r0, r5
 8022f64:	f7ff fca0 	bl	80228a8 <_free_r>
 8022f68:	2300      	movs	r3, #0
 8022f6a:	6363      	str	r3, [r4, #52]	@ 0x34
 8022f6c:	e00d      	b.n	8022f8a <__sflush_r+0xae>
 8022f6e:	2301      	movs	r3, #1
 8022f70:	4628      	mov	r0, r5
 8022f72:	47b0      	blx	r6
 8022f74:	4602      	mov	r2, r0
 8022f76:	1c50      	adds	r0, r2, #1
 8022f78:	d1c9      	bne.n	8022f0e <__sflush_r+0x32>
 8022f7a:	682b      	ldr	r3, [r5, #0]
 8022f7c:	2b00      	cmp	r3, #0
 8022f7e:	d0c6      	beq.n	8022f0e <__sflush_r+0x32>
 8022f80:	2b1d      	cmp	r3, #29
 8022f82:	d001      	beq.n	8022f88 <__sflush_r+0xac>
 8022f84:	2b16      	cmp	r3, #22
 8022f86:	d11e      	bne.n	8022fc6 <__sflush_r+0xea>
 8022f88:	602f      	str	r7, [r5, #0]
 8022f8a:	2000      	movs	r0, #0
 8022f8c:	e022      	b.n	8022fd4 <__sflush_r+0xf8>
 8022f8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022f92:	b21b      	sxth	r3, r3
 8022f94:	e01b      	b.n	8022fce <__sflush_r+0xf2>
 8022f96:	690f      	ldr	r7, [r1, #16]
 8022f98:	2f00      	cmp	r7, #0
 8022f9a:	d0f6      	beq.n	8022f8a <__sflush_r+0xae>
 8022f9c:	0793      	lsls	r3, r2, #30
 8022f9e:	680e      	ldr	r6, [r1, #0]
 8022fa0:	bf08      	it	eq
 8022fa2:	694b      	ldreq	r3, [r1, #20]
 8022fa4:	600f      	str	r7, [r1, #0]
 8022fa6:	bf18      	it	ne
 8022fa8:	2300      	movne	r3, #0
 8022faa:	eba6 0807 	sub.w	r8, r6, r7
 8022fae:	608b      	str	r3, [r1, #8]
 8022fb0:	f1b8 0f00 	cmp.w	r8, #0
 8022fb4:	dde9      	ble.n	8022f8a <__sflush_r+0xae>
 8022fb6:	6a21      	ldr	r1, [r4, #32]
 8022fb8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022fba:	4643      	mov	r3, r8
 8022fbc:	463a      	mov	r2, r7
 8022fbe:	4628      	mov	r0, r5
 8022fc0:	47b0      	blx	r6
 8022fc2:	2800      	cmp	r0, #0
 8022fc4:	dc08      	bgt.n	8022fd8 <__sflush_r+0xfc>
 8022fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022fca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022fce:	81a3      	strh	r3, [r4, #12]
 8022fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8022fd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022fd8:	4407      	add	r7, r0
 8022fda:	eba8 0800 	sub.w	r8, r8, r0
 8022fde:	e7e7      	b.n	8022fb0 <__sflush_r+0xd4>
 8022fe0:	dfbffffe 	.word	0xdfbffffe

08022fe4 <_fflush_r>:
 8022fe4:	b538      	push	{r3, r4, r5, lr}
 8022fe6:	690b      	ldr	r3, [r1, #16]
 8022fe8:	4605      	mov	r5, r0
 8022fea:	460c      	mov	r4, r1
 8022fec:	b913      	cbnz	r3, 8022ff4 <_fflush_r+0x10>
 8022fee:	2500      	movs	r5, #0
 8022ff0:	4628      	mov	r0, r5
 8022ff2:	bd38      	pop	{r3, r4, r5, pc}
 8022ff4:	b118      	cbz	r0, 8022ffe <_fflush_r+0x1a>
 8022ff6:	6a03      	ldr	r3, [r0, #32]
 8022ff8:	b90b      	cbnz	r3, 8022ffe <_fflush_r+0x1a>
 8022ffa:	f7ff f9e9 	bl	80223d0 <__sinit>
 8022ffe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023002:	2b00      	cmp	r3, #0
 8023004:	d0f3      	beq.n	8022fee <_fflush_r+0xa>
 8023006:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8023008:	07d0      	lsls	r0, r2, #31
 802300a:	d404      	bmi.n	8023016 <_fflush_r+0x32>
 802300c:	0599      	lsls	r1, r3, #22
 802300e:	d402      	bmi.n	8023016 <_fflush_r+0x32>
 8023010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8023012:	f7ff fbdc 	bl	80227ce <__retarget_lock_acquire_recursive>
 8023016:	4628      	mov	r0, r5
 8023018:	4621      	mov	r1, r4
 802301a:	f7ff ff5f 	bl	8022edc <__sflush_r>
 802301e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8023020:	07da      	lsls	r2, r3, #31
 8023022:	4605      	mov	r5, r0
 8023024:	d4e4      	bmi.n	8022ff0 <_fflush_r+0xc>
 8023026:	89a3      	ldrh	r3, [r4, #12]
 8023028:	059b      	lsls	r3, r3, #22
 802302a:	d4e1      	bmi.n	8022ff0 <_fflush_r+0xc>
 802302c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802302e:	f7ff fbcf 	bl	80227d0 <__retarget_lock_release_recursive>
 8023032:	e7dd      	b.n	8022ff0 <_fflush_r+0xc>

08023034 <__swhatbuf_r>:
 8023034:	b570      	push	{r4, r5, r6, lr}
 8023036:	460c      	mov	r4, r1
 8023038:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802303c:	2900      	cmp	r1, #0
 802303e:	b096      	sub	sp, #88	@ 0x58
 8023040:	4615      	mov	r5, r2
 8023042:	461e      	mov	r6, r3
 8023044:	da0d      	bge.n	8023062 <__swhatbuf_r+0x2e>
 8023046:	89a3      	ldrh	r3, [r4, #12]
 8023048:	f013 0f80 	tst.w	r3, #128	@ 0x80
 802304c:	f04f 0100 	mov.w	r1, #0
 8023050:	bf14      	ite	ne
 8023052:	2340      	movne	r3, #64	@ 0x40
 8023054:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8023058:	2000      	movs	r0, #0
 802305a:	6031      	str	r1, [r6, #0]
 802305c:	602b      	str	r3, [r5, #0]
 802305e:	b016      	add	sp, #88	@ 0x58
 8023060:	bd70      	pop	{r4, r5, r6, pc}
 8023062:	466a      	mov	r2, sp
 8023064:	f000 f848 	bl	80230f8 <_fstat_r>
 8023068:	2800      	cmp	r0, #0
 802306a:	dbec      	blt.n	8023046 <__swhatbuf_r+0x12>
 802306c:	9901      	ldr	r1, [sp, #4]
 802306e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8023072:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8023076:	4259      	negs	r1, r3
 8023078:	4159      	adcs	r1, r3
 802307a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802307e:	e7eb      	b.n	8023058 <__swhatbuf_r+0x24>

08023080 <__smakebuf_r>:
 8023080:	898b      	ldrh	r3, [r1, #12]
 8023082:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023084:	079d      	lsls	r5, r3, #30
 8023086:	4606      	mov	r6, r0
 8023088:	460c      	mov	r4, r1
 802308a:	d507      	bpl.n	802309c <__smakebuf_r+0x1c>
 802308c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8023090:	6023      	str	r3, [r4, #0]
 8023092:	6123      	str	r3, [r4, #16]
 8023094:	2301      	movs	r3, #1
 8023096:	6163      	str	r3, [r4, #20]
 8023098:	b003      	add	sp, #12
 802309a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802309c:	ab01      	add	r3, sp, #4
 802309e:	466a      	mov	r2, sp
 80230a0:	f7ff ffc8 	bl	8023034 <__swhatbuf_r>
 80230a4:	9f00      	ldr	r7, [sp, #0]
 80230a6:	4605      	mov	r5, r0
 80230a8:	4639      	mov	r1, r7
 80230aa:	4630      	mov	r0, r6
 80230ac:	f7ff f86a 	bl	8022184 <_malloc_r>
 80230b0:	b948      	cbnz	r0, 80230c6 <__smakebuf_r+0x46>
 80230b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80230b6:	059a      	lsls	r2, r3, #22
 80230b8:	d4ee      	bmi.n	8023098 <__smakebuf_r+0x18>
 80230ba:	f023 0303 	bic.w	r3, r3, #3
 80230be:	f043 0302 	orr.w	r3, r3, #2
 80230c2:	81a3      	strh	r3, [r4, #12]
 80230c4:	e7e2      	b.n	802308c <__smakebuf_r+0xc>
 80230c6:	89a3      	ldrh	r3, [r4, #12]
 80230c8:	6020      	str	r0, [r4, #0]
 80230ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80230ce:	81a3      	strh	r3, [r4, #12]
 80230d0:	9b01      	ldr	r3, [sp, #4]
 80230d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80230d6:	b15b      	cbz	r3, 80230f0 <__smakebuf_r+0x70>
 80230d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80230dc:	4630      	mov	r0, r6
 80230de:	f000 f81d 	bl	802311c <_isatty_r>
 80230e2:	b128      	cbz	r0, 80230f0 <__smakebuf_r+0x70>
 80230e4:	89a3      	ldrh	r3, [r4, #12]
 80230e6:	f023 0303 	bic.w	r3, r3, #3
 80230ea:	f043 0301 	orr.w	r3, r3, #1
 80230ee:	81a3      	strh	r3, [r4, #12]
 80230f0:	89a3      	ldrh	r3, [r4, #12]
 80230f2:	431d      	orrs	r5, r3
 80230f4:	81a5      	strh	r5, [r4, #12]
 80230f6:	e7cf      	b.n	8023098 <__smakebuf_r+0x18>

080230f8 <_fstat_r>:
 80230f8:	b538      	push	{r3, r4, r5, lr}
 80230fa:	4d07      	ldr	r5, [pc, #28]	@ (8023118 <_fstat_r+0x20>)
 80230fc:	2300      	movs	r3, #0
 80230fe:	4604      	mov	r4, r0
 8023100:	4608      	mov	r0, r1
 8023102:	4611      	mov	r1, r2
 8023104:	602b      	str	r3, [r5, #0]
 8023106:	f7de fae6 	bl	80016d6 <_fstat>
 802310a:	1c43      	adds	r3, r0, #1
 802310c:	d102      	bne.n	8023114 <_fstat_r+0x1c>
 802310e:	682b      	ldr	r3, [r5, #0]
 8023110:	b103      	cbz	r3, 8023114 <_fstat_r+0x1c>
 8023112:	6023      	str	r3, [r4, #0]
 8023114:	bd38      	pop	{r3, r4, r5, pc}
 8023116:	bf00      	nop
 8023118:	24025df4 	.word	0x24025df4

0802311c <_isatty_r>:
 802311c:	b538      	push	{r3, r4, r5, lr}
 802311e:	4d06      	ldr	r5, [pc, #24]	@ (8023138 <_isatty_r+0x1c>)
 8023120:	2300      	movs	r3, #0
 8023122:	4604      	mov	r4, r0
 8023124:	4608      	mov	r0, r1
 8023126:	602b      	str	r3, [r5, #0]
 8023128:	f7de fada 	bl	80016e0 <_isatty>
 802312c:	1c43      	adds	r3, r0, #1
 802312e:	d102      	bne.n	8023136 <_isatty_r+0x1a>
 8023130:	682b      	ldr	r3, [r5, #0]
 8023132:	b103      	cbz	r3, 8023136 <_isatty_r+0x1a>
 8023134:	6023      	str	r3, [r4, #0]
 8023136:	bd38      	pop	{r3, r4, r5, pc}
 8023138:	24025df4 	.word	0x24025df4

0802313c <_init>:
 802313c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802313e:	bf00      	nop
 8023140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023142:	bc08      	pop	{r3}
 8023144:	469e      	mov	lr, r3
 8023146:	4770      	bx	lr

08023148 <_fini>:
 8023148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802314a:	bf00      	nop
 802314c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802314e:	bc08      	pop	{r3}
 8023150:	469e      	mov	lr, r3
 8023152:	4770      	bx	lr
